package org.telegram.ui.Cells;

import android.animation.Animator;
import android.animation.AnimatorListenerAdapter;
import android.animation.AnimatorSet;
import android.animation.Keyframe;
import android.animation.ObjectAnimator;
import android.animation.PropertyValuesHolder;
import android.animation.ValueAnimator;
import android.annotation.SuppressLint;
import android.app.Activity;
import android.content.Context;
import android.content.res.ColorStateList;
import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.ColorFilter;
import android.graphics.LinearGradient;
import android.graphics.Paint;
import android.graphics.Path;
import android.graphics.PorterDuff;
import android.graphics.PorterDuffColorFilter;
import android.graphics.Rect;
import android.graphics.RectF;
import android.graphics.Shader;
import android.graphics.Typeface;
import android.graphics.drawable.BitmapDrawable;
import android.graphics.drawable.Drawable;
import android.graphics.drawable.RippleDrawable;
import android.net.Uri;
import android.os.Build;
import android.os.Bundle;
import android.os.SystemClock;
import android.text.Layout;
import android.text.Spannable;
import android.text.SpannableString;
import android.text.SpannableStringBuilder;
import android.text.Spanned;
import android.text.StaticLayout;
import android.text.TextPaint;
import android.text.TextUtils;
import android.text.style.CharacterStyle;
import android.text.style.ClickableSpan;
import android.text.style.URLSpan;
import android.util.Property;
import android.util.SparseArray;
import android.util.StateSet;
import android.view.MotionEvent;
import android.view.View;
import android.view.ViewConfiguration;
import android.view.ViewGroup;
import android.view.ViewStructure;
import android.view.accessibility.AccessibilityEvent;
import android.view.accessibility.AccessibilityManager;
import android.view.accessibility.AccessibilityNodeInfo;
import android.view.accessibility.AccessibilityNodeProvider;
import android.widget.Toast;
import androidx.core.graphics.ColorUtils;
import com.huawei.hms.push.constant.RemoteMessageConst;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.Stack;
import java.util.concurrent.atomic.AtomicReference;
import org.telegram.PhoneFormat.PhoneFormat;
import org.telegram.messenger.AccountInstance;
import org.telegram.messenger.AndroidUtilities;
import org.telegram.messenger.ChatObject;
import org.telegram.messenger.ContactsController;
import org.telegram.messenger.DialogObject;
import org.telegram.messenger.DocumentObject;
import org.telegram.messenger.DownloadController;
import org.telegram.messenger.Emoji;
import org.telegram.messenger.FileLoader;
import org.telegram.messenger.FileLog;
import org.telegram.messenger.ImageLoader;
import org.telegram.messenger.ImageLocation;
import org.telegram.messenger.ImageReceiver;
import org.telegram.messenger.LocaleController;
import org.telegram.messenger.MediaController;
import org.telegram.messenger.MediaDataController;
import org.telegram.messenger.MessageObject;
import org.telegram.messenger.MessagesController;
import org.telegram.messenger.NotificationCenter;
import org.telegram.messenger.SendMessagesHelper;
import org.telegram.messenger.SharedConfig;
import org.telegram.messenger.UserConfig;
import org.telegram.messenger.UserObject;
import org.telegram.messenger.Utilities;
import org.telegram.messenger.VideoEditedInfo;
import org.telegram.messenger.WebFile;
import org.telegram.messenger.beta.R;
import org.telegram.messenger.browser.Browser;
import org.telegram.messenger.video.VideoPlayerRewinder;
import org.telegram.tgnet.ConnectionsManager;
import org.telegram.tgnet.TLObject;
import org.telegram.tgnet.TLRPC$Chat;
import org.telegram.tgnet.TLRPC$ChatInvite;
import org.telegram.tgnet.TLRPC$ChatPhoto;
import org.telegram.tgnet.TLRPC$Document;
import org.telegram.tgnet.TLRPC$DocumentAttribute;
import org.telegram.tgnet.TLRPC$FileLocation;
import org.telegram.tgnet.TLRPC$GeoPoint;
import org.telegram.tgnet.TLRPC$KeyboardButton;
import org.telegram.tgnet.TLRPC$Message;
import org.telegram.tgnet.TLRPC$MessageEntity;
import org.telegram.tgnet.TLRPC$MessageFwdHeader;
import org.telegram.tgnet.TLRPC$MessageMedia;
import org.telegram.tgnet.TLRPC$MessageReplies;
import org.telegram.tgnet.TLRPC$PageBlock;
import org.telegram.tgnet.TLRPC$Peer;
import org.telegram.tgnet.TLRPC$PhoneCallDiscardReason;
import org.telegram.tgnet.TLRPC$Photo;
import org.telegram.tgnet.TLRPC$PhotoSize;
import org.telegram.tgnet.TLRPC$Poll;
import org.telegram.tgnet.TLRPC$PollResults;
import org.telegram.tgnet.TLRPC$ReplyMarkup;
import org.telegram.tgnet.TLRPC$TL_documentAttributeAudio;
import org.telegram.tgnet.TLRPC$TL_documentAttributeImageSize;
import org.telegram.tgnet.TLRPC$TL_documentAttributeVideo;
import org.telegram.tgnet.TLRPC$TL_fileLocationUnavailable;
import org.telegram.tgnet.TLRPC$TL_game;
import org.telegram.tgnet.TLRPC$TL_keyboardButtonBuy;
import org.telegram.tgnet.TLRPC$TL_keyboardButtonCallback;
import org.telegram.tgnet.TLRPC$TL_keyboardButtonGame;
import org.telegram.tgnet.TLRPC$TL_keyboardButtonRequestGeoLocation;
import org.telegram.tgnet.TLRPC$TL_keyboardButtonRow;
import org.telegram.tgnet.TLRPC$TL_keyboardButtonSwitchInline;
import org.telegram.tgnet.TLRPC$TL_keyboardButtonUrl;
import org.telegram.tgnet.TLRPC$TL_keyboardButtonUrlAuth;
import org.telegram.tgnet.TLRPC$TL_keyboardButtonWebView;
import org.telegram.tgnet.TLRPC$TL_messageActionPhoneCall;
import org.telegram.tgnet.TLRPC$TL_messageEmpty;
import org.telegram.tgnet.TLRPC$TL_messageMediaGame;
import org.telegram.tgnet.TLRPC$TL_messageMediaGeoLive;
import org.telegram.tgnet.TLRPC$TL_messageMediaInvoice;
import org.telegram.tgnet.TLRPC$TL_messageMediaPoll;
import org.telegram.tgnet.TLRPC$TL_messageMediaWebPage;
import org.telegram.tgnet.TLRPC$TL_messagePeerReaction;
import org.telegram.tgnet.TLRPC$TL_messageReactions;
import org.telegram.tgnet.TLRPC$TL_messages_stickerSet;
import org.telegram.tgnet.TLRPC$TL_page;
import org.telegram.tgnet.TLRPC$TL_pageBlockCollage;
import org.telegram.tgnet.TLRPC$TL_pageBlockSlideshow;
import org.telegram.tgnet.TLRPC$TL_peerChannel;
import org.telegram.tgnet.TLRPC$TL_peerChat;
import org.telegram.tgnet.TLRPC$TL_peerUser;
import org.telegram.tgnet.TLRPC$TL_phoneCallDiscardReasonBusy;
import org.telegram.tgnet.TLRPC$TL_phoneCallDiscardReasonMissed;
import org.telegram.tgnet.TLRPC$TL_photo;
import org.telegram.tgnet.TLRPC$TL_photoSize;
import org.telegram.tgnet.TLRPC$TL_photoSizeEmpty;
import org.telegram.tgnet.TLRPC$TL_photoStrippedSize;
import org.telegram.tgnet.TLRPC$TL_pollAnswer;
import org.telegram.tgnet.TLRPC$TL_pollAnswerVoters;
import org.telegram.tgnet.TLRPC$TL_reactionCount;
import org.telegram.tgnet.TLRPC$TL_replyInlineMarkup;
import org.telegram.tgnet.TLRPC$TL_user;
import org.telegram.tgnet.TLRPC$TL_webDocument;
import org.telegram.tgnet.TLRPC$TL_webPage;
import org.telegram.tgnet.TLRPC$TL_webPageAttributeTheme;
import org.telegram.tgnet.TLRPC$ThemeSettings;
import org.telegram.tgnet.TLRPC$User;
import org.telegram.tgnet.TLRPC$UserProfilePhoto;
import org.telegram.tgnet.TLRPC$VideoSize;
import org.telegram.tgnet.TLRPC$WebDocument;
import org.telegram.tgnet.TLRPC$WebPage;
import org.telegram.ui.ActionBar.Theme;
import org.telegram.ui.Cells.TextSelectionHelper;
import org.telegram.ui.ChatActivity;
import org.telegram.ui.Components.AnimatedEmojiDrawable;
import org.telegram.ui.Components.AnimatedEmojiSpan;
import org.telegram.ui.Components.AnimatedFileDrawable;
import org.telegram.ui.Components.AnimatedNumberLayout;
import org.telegram.ui.Components.AnimationProperties;
import org.telegram.ui.Components.AudioVisualizerDrawable;
import org.telegram.ui.Components.AvatarDrawable;
import org.telegram.ui.Components.BackgroundGradientDrawable;
import org.telegram.ui.Components.CheckBoxBase;
import org.telegram.ui.Components.CubicBezierInterpolator;
import org.telegram.ui.Components.EmptyStubSpan;
import org.telegram.ui.Components.FloatSeekBarAccessibilityDelegate;
import org.telegram.ui.Components.InfiniteProgress;
import org.telegram.ui.Components.LinkPath;
import org.telegram.ui.Components.LinkSpanDrawable;
import org.telegram.ui.Components.MessageBackgroundDrawable;
import org.telegram.ui.Components.MotionBackgroundDrawable;
import org.telegram.ui.Components.MsgClockDrawable;
import org.telegram.ui.Components.Point;
import org.telegram.ui.Components.RLottieDrawable;
import org.telegram.ui.Components.RadialProgress2;
import org.telegram.ui.Components.Reactions.ReactionsLayoutInBubble;
import org.telegram.ui.Components.RecyclerListView;
import org.telegram.ui.Components.RoundVideoPlayingDrawable;
import org.telegram.ui.Components.SeekBar;
import org.telegram.ui.Components.SeekBarAccessibilityDelegate;
import org.telegram.ui.Components.SeekBarWaveform;
import org.telegram.ui.Components.SlotsDrawable;
import org.telegram.ui.Components.StaticLayoutEx;
import org.telegram.ui.Components.TextStyleSpan;
import org.telegram.ui.Components.TimerParticles;
import org.telegram.ui.Components.TranscribeButton;
import org.telegram.ui.Components.TypefaceSpan;
import org.telegram.ui.Components.URLSpanBotCommand;
import org.telegram.ui.Components.URLSpanBrowser;
import org.telegram.ui.Components.URLSpanMono;
import org.telegram.ui.Components.URLSpanNoUnderline;
import org.telegram.ui.Components.VideoForwardDrawable;
import org.telegram.ui.Components.spoilers.SpoilerEffect;
import org.telegram.ui.PhotoViewer;
import org.telegram.ui.PinchToZoomHelper;
import org.telegram.ui.SecretMediaViewer;
import org.webrtc.MediaStreamTrack;
/* loaded from: classes3.dex */
public class ChatMessageCell extends BaseCell implements SeekBar.SeekBarDelegate, ImageReceiver.ImageReceiverDelegate, DownloadController.FileDownloadProgressListener, TextSelectionHelper.SelectableView, NotificationCenter.NotificationCenterDelegate {
    private static float[] radii = new float[8];
    private final boolean ALPHA_PROPERTY_WORKAROUND;
    public Property<ChatMessageCell, Float> ANIMATION_OFFSET_X;
    private int TAG;
    CharSequence accessibilityText;
    private SparseArray<Rect> accessibilityVirtualViewBounds;
    private int addedCaptionHeight;
    private boolean addedForTest;
    private int additionalTimeOffsetY;
    private StaticLayout adminLayout;
    private boolean allowAssistant;
    private float alphaInternal;
    private int animateFromStatusDrawableParams;
    private boolean animatePollAnswer;
    private boolean animatePollAnswerAlpha;
    private boolean animatePollAvatars;
    private int animateToStatusDrawableParams;
    public AnimatedEmojiSpan.EmojiGroupedSpans animatedEmojiReplyStack;
    public AnimatedEmojiSpan.EmojiGroupedSpans animatedEmojiStack;
    private int animatingDrawVideoImageButton;
    private float animatingDrawVideoImageButtonProgress;
    private float animatingLoadingProgressProgress;
    private int animatingNoSound;
    private boolean animatingNoSoundPlaying;
    private float animatingNoSoundProgress;
    private float animationOffsetX;
    private boolean animationRunning;
    private boolean attachedToWindow;
    private StaticLayout authorLayout;
    private int authorX;
    private boolean autoPlayingMedia;
    private int availableTimeWidth;
    private AvatarDrawable avatarDrawable;
    private ImageReceiver avatarImage;
    private boolean avatarPressed;
    private Theme.MessageDrawable.PathDrawParams backgroundCacheParams;
    private MessageBackgroundDrawable backgroundDrawable;
    private int backgroundDrawableLeft;
    private int backgroundDrawableRight;
    private int backgroundDrawableTop;
    private int backgroundHeight;
    private int backgroundWidth;
    private int blurredViewBottomOffset;
    private int blurredViewTopOffset;
    private ArrayList<BotButton> botButtons;
    private HashMap<String, BotButton> botButtonsByData;
    private HashMap<String, BotButton> botButtonsByPosition;
    private String botButtonsLayout;
    private boolean bottomNearToSet;
    private int buttonPressed;
    private int buttonState;
    private int buttonX;
    private int buttonY;
    private final boolean canDrawBackgroundInParent;
    private boolean canStreamVideo;
    private int captionHeight;
    private StaticLayout captionLayout;
    private int captionOffsetX;
    private AtomicReference<Layout> captionPatchedSpoilersLayout;
    private List<SpoilerEffect> captionSpoilers;
    private Stack<SpoilerEffect> captionSpoilersPool;
    private int captionWidth;
    private float captionX;
    private float captionY;
    private CheckBoxBase checkBox;
    private boolean checkBoxAnimationInProgress;
    private float checkBoxAnimationProgress;
    private int checkBoxTranslation;
    private boolean checkBoxVisible;
    private boolean checkOnlyButtonPressed;
    private String closeTimeText;
    private int closeTimeWidth;
    private int commentArrowX;
    private AvatarDrawable[] commentAvatarDrawables;
    private ImageReceiver[] commentAvatarImages;
    private boolean[] commentAvatarImagesVisible;
    private boolean commentButtonPressed;
    private Rect commentButtonRect;
    private boolean commentDrawUnread;
    private StaticLayout commentLayout;
    private AnimatedNumberLayout commentNumberLayout;
    private int commentNumberWidth;
    private InfiniteProgress commentProgress;
    private float commentProgressAlpha;
    private long commentProgressLastUpadteTime;
    private int commentUnreadX;
    private int commentWidth;
    private int commentX;
    private AvatarDrawable contactAvatarDrawable;
    private float controlsAlpha;
    private int currentAccount;
    private Theme.MessageDrawable currentBackgroundDrawable;
    private Theme.MessageDrawable currentBackgroundSelectedDrawable;
    private CharSequence currentCaption;
    private TLRPC$Chat currentChat;
    private int currentFocusedVirtualView;
    private TLRPC$Chat currentForwardChannel;
    private String currentForwardName;
    private String currentForwardNameString;
    private TLRPC$User currentForwardUser;
    private int currentMapProvider;
    private MessageObject currentMessageObject;
    private MessageObject.GroupedMessages currentMessagesGroup;
    private String currentNameString;
    private TLRPC$FileLocation currentPhoto;
    private String currentPhotoFilter;
    private String currentPhotoFilterThumb;
    private TLRPC$PhotoSize currentPhotoObject;
    private TLRPC$PhotoSize currentPhotoObjectThumb;
    private BitmapDrawable currentPhotoObjectThumbStripped;
    private MessageObject.GroupedMessagePosition currentPosition;
    private String currentRepliesString;
    private TLRPC$PhotoSize currentReplyPhoto;
    private float currentSelectedBackgroundAlpha;
    private String currentTimeString;
    private String currentUrl;
    private TLRPC$User currentUser;
    private TLRPC$User currentViaBotUser;
    private String currentViewsString;
    private WebFile currentWebFile;
    private ChatMessageCellDelegate delegate;
    private RectF deleteProgressRect;
    private StaticLayout descriptionLayout;
    private int descriptionX;
    private int descriptionY;
    private Runnable diceFinishCallback;
    private boolean disallowLongPress;
    private StaticLayout docTitleLayout;
    private int docTitleOffsetX;
    private int docTitleWidth;
    private TLRPC$Document documentAttach;
    private int documentAttachType;
    private boolean drawBackground;
    private boolean drawCommentButton;
    private boolean drawCommentNumber;
    public boolean drawForBlur;
    private boolean drawForwardedName;
    public boolean drawFromPinchToZoom;
    private boolean drawImageButton;
    private boolean drawInstantView;
    private int drawInstantViewType;
    private boolean drawMediaCheckBox;
    private boolean drawName;
    private boolean drawNameLayout;
    private boolean drawPhotoImage;
    public boolean drawPinnedBottom;
    private boolean drawPinnedTop;
    private boolean drawRadialCheckBackground;
    private boolean drawSelectionBackground;
    private int drawSideButton;
    private boolean drawTime;
    private float drawTimeX;
    private float drawTimeY;
    private boolean drawVideoImageButton;
    private boolean drawVideoSize;
    private StaticLayout durationLayout;
    private int durationWidth;
    private boolean edited;
    boolean enterTransitionInProgress;
    private Long fetchingAnimatedEmojiDocument;
    private boolean firstCircleLength;
    private int firstVisibleBlockNum;
    private boolean flipImage;
    private boolean forceNotDrawTime;
    private boolean forwardBotPressed;
    private int forwardNameCenterX;
    private float[] forwardNameOffsetX;
    private boolean forwardNamePressed;
    private float forwardNameX;
    private int forwardNameY;
    private StaticLayout[] forwardedNameLayout;
    private int forwardedNameWidth;
    private boolean fullyDraw;
    private boolean gamePreviewPressed;
    private LinearGradient gradientShader;
    private boolean groupPhotoInvisible;
    private MessageObject.GroupedMessages groupedMessagesToSet;
    private boolean hadLongPress;
    public boolean hasDiscussion;
    private boolean hasEmbed;
    private boolean hasGamePreview;
    private boolean hasInvoicePreview;
    private boolean hasLinkPreview;
    private int hasMiniProgress;
    private boolean hasNewLineForTime;
    private boolean hasOldCaptionPreview;
    private boolean hasPsaHint;
    private int highlightProgress;
    private float hintButtonProgress;
    private boolean hintButtonVisible;
    private int imageBackgroundColor;
    private int imageBackgroundGradientColor1;
    private int imageBackgroundGradientColor2;
    private int imageBackgroundGradientColor3;
    private int imageBackgroundGradientRotation;
    private float imageBackgroundIntensity;
    private int imageBackgroundSideColor;
    private int imageBackgroundSideWidth;
    private boolean imageDrawn;
    private boolean imagePressed;
    boolean imageReceiversAttachState;
    private boolean inLayout;
    private StaticLayout infoLayout;
    private int infoWidth;
    private int infoX;
    private boolean instantButtonPressed;
    private RectF instantButtonRect;
    private boolean instantPressed;
    private int instantTextLeftX;
    private boolean instantTextNewLine;
    private int instantTextX;
    private StaticLayout instantViewLayout;
    private int instantWidth;
    private Runnable invalidateRunnable;
    private boolean invalidateSpoilersParent;
    private boolean invalidatesParent;
    private boolean isAvatarVisible;
    public boolean isBlurred;
    public boolean isBot;
    private boolean isCaptionSpoilerPressed;
    public boolean isChat;
    private boolean isCheckPressed;
    private boolean isHighlighted;
    private boolean isHighlightedAnimated;
    public boolean isMegagroup;
    public boolean isPinned;
    public boolean isPinnedChat;
    private boolean isPlayingRound;
    private boolean isPressed;
    public boolean isRepliesChat;
    private boolean isRoundVideo;
    private boolean isSmallImage;
    private boolean isSpoilerRevealing;
    public boolean isThreadChat;
    private boolean isThreadPost;
    private boolean isUpdating;
    private int keyboardHeight;
    private long lastAnimationTime;
    private long lastCheckBoxAnimationTime;
    private long lastControlsAlphaChangeTime;
    private int lastDeleteDate;
    private float lastDrawingAudioProgress;
    private int lastHeight;
    private long lastHighlightProgressTime;
    private long lastLoadingSizeTotal;
    private long lastNamesAnimationTime;
    private TLRPC$Poll lastPoll;
    private long lastPollCloseTime;
    private ArrayList<TLRPC$TL_pollAnswerVoters> lastPollResults;
    private int lastPollResultsVoters;
    private String lastPostAuthor;
    private TLRPC$TL_messageReactions lastReactions;
    private int lastRepliesCount;
    private TLRPC$Message lastReplyMessage;
    private long lastSeekUpdateTime;
    private int lastSendState;
    int lastSize;
    private int lastTime;
    private float lastTouchX;
    private float lastTouchY;
    private int lastViewsCount;
    private int lastVisibleBlockNum;
    private WebFile lastWebFile;
    private int lastWidth;
    private int layoutHeight;
    private int layoutWidth;
    private int linkBlockNum;
    private int linkPreviewHeight;
    private boolean linkPreviewPressed;
    private int linkSelectionBlockNum;
    public long linkedChatId;
    private LinkSpanDrawable.LinkCollector links;
    private StaticLayout loadingProgressLayout;
    private boolean locationExpired;
    private ImageReceiver locationImageReceiver;
    private boolean mediaBackground;
    private CheckBoxBase mediaCheckBox;
    private int mediaOffsetY;
    private boolean mediaWasInvisible;
    private MessageObject messageObjectToSet;
    private int miniButtonPressed;
    private int miniButtonState;
    private MotionBackgroundDrawable motionBackgroundDrawable;
    private StaticLayout nameLayout;
    private float nameOffsetX;
    private int nameWidth;
    private float nameX;
    private float nameY;
    private int namesOffset;
    private boolean needNewVisiblePart;
    public boolean needReplyImage;
    private int noSoundCenterX;
    private boolean otherPressed;
    private int otherX;
    private int otherY;
    private int overideShouldDrawTimeOnMedia;
    int parentBoundsBottom;
    float parentBoundsTop;
    private int parentHeight;
    public float parentViewTopOffset;
    private int parentWidth;
    private StaticLayout performerLayout;
    private int performerX;
    private ImageReceiver photoImage;
    private boolean photoImageOutOfBounds;
    private boolean photoNotSet;
    private TLObject photoParentObject;
    private StaticLayout photosCountLayout;
    private int photosCountWidth;
    public boolean pinnedBottom;
    public boolean pinnedTop;
    private float pollAnimationProgress;
    private float pollAnimationProgressTime;
    private AvatarDrawable[] pollAvatarDrawables;
    private ImageReceiver[] pollAvatarImages;
    private boolean[] pollAvatarImagesVisible;
    private ArrayList<PollButton> pollButtons;
    private CheckBoxBase[] pollCheckBox;
    private boolean pollClosed;
    private boolean pollHintPressed;
    private int pollHintX;
    private int pollHintY;
    private boolean pollUnvoteInProgress;
    private boolean pollVoteInProgress;
    private int pollVoteInProgressNum;
    private boolean pollVoted;
    private int pressedBotButton;
    private LinkSpanDrawable pressedLink;
    private int pressedLinkType;
    private int[] pressedState;
    private int pressedVoteButton;
    private float psaButtonProgress;
    private boolean psaButtonVisible;
    private int psaHelpX;
    private int psaHelpY;
    private boolean psaHintPressed;
    private RadialProgress2 radialProgress;
    public final ReactionsLayoutInBubble reactionsLayoutInBubble;
    private RectF rect;
    private Path rectPath;
    private StaticLayout repliesLayout;
    private int repliesTextWidth;
    public ImageReceiver replyImageReceiver;
    public StaticLayout replyNameLayout;
    private int replyNameOffset;
    private int replyNameWidth;
    private boolean replyPanelIsForward;
    private boolean replyPressed;
    public List<SpoilerEffect> replySpoilers;
    private Stack<SpoilerEffect> replySpoilersPool;
    public int replyStartX;
    public int replyStartY;
    public StaticLayout replyTextLayout;
    private int replyTextOffset;
    private int replyTextWidth;
    private final Theme.ResourcesProvider resourcesProvider;
    private float roundPlayingDrawableProgress;
    private float roundProgressAlpha;
    float roundSeekbarOutAlpha;
    float roundSeekbarOutProgress;
    int roundSeekbarTouched;
    private float roundToPauseProgress;
    private float roundToPauseProgress2;
    private RoundVideoPlayingDrawable roundVideoPlayingDrawable;
    private Path sPath;
    private boolean scheduledInvalidate;
    private Rect scrollRect;
    private SeekBar seekBar;
    private SeekBarAccessibilityDelegate seekBarAccessibilityDelegate;
    private SeekBarWaveform seekBarWaveform;
    private int seekBarX;
    private int seekBarY;
    float seekbarRoundX;
    float seekbarRoundY;
    private float selectedBackgroundProgress;
    private Paint selectionOverlayPaint;
    private Drawable[] selectorDrawable;
    private int[] selectorDrawableMaskType;
    private AnimatorSet shakeAnimation;
    public boolean shouldCheckVisibleOnScreen;
    private boolean sideButtonPressed;
    private float sideStartX;
    private float sideStartY;
    private StaticLayout siteNameLayout;
    private boolean siteNameRtl;
    private int siteNameWidth;
    private float slidingOffsetX;
    private StaticLayout songLayout;
    private int songX;
    private SpoilerEffect spoilerPressed;
    private AtomicReference<Layout> spoilersPatchedReplyTextLayout;
    private boolean statusDrawableAnimationInProgress;
    private ValueAnimator statusDrawableAnimator;
    private float statusDrawableProgress;
    private int substractBackgroundHeight;
    private int textX;
    private int textY;
    private float timeAlpha;
    private int timeAudioX;
    private StaticLayout timeLayout;
    private boolean timePressed;
    private int timeTextWidth;
    private boolean timeWasInvisible;
    private int timeWidth;
    private int timeWidthAudio;
    private int timeX;
    private TimerParticles timerParticles;
    private float timerTransitionProgress;
    private StaticLayout titleLayout;
    private int titleX;
    private float toSeekBarProgress;
    private boolean topNearToSet;
    private long totalChangeTime;
    private int totalCommentWidth;
    private int totalHeight;
    private int totalVisibleBlocksCount;
    private TranscribeButton transcribeButton;
    private float transcribeX;
    private float transcribeY;
    private final TransitionParams transitionParams;
    float transitionYOffsetForDrawables;
    private int unmovedTextX;
    private Runnable unregisterFlagSecure;
    private ArrayList<LinkPath> urlPathCache;
    private ArrayList<LinkPath> urlPathSelection;
    private boolean useSeekBarWaveform;
    private boolean useTranscribeButton;
    private int viaNameWidth;
    private TypefaceSpan viaSpan1;
    private TypefaceSpan viaSpan2;
    private int viaWidth;
    private boolean vibrateOnPollVote;
    private int videoButtonPressed;
    private int videoButtonX;
    private int videoButtonY;
    VideoForwardDrawable videoForwardDrawable;
    private StaticLayout videoInfoLayout;
    VideoPlayerRewinder videoPlayerRewinder;
    private RadialProgress2 videoRadialProgress;
    private float viewTop;
    private StaticLayout viewsLayout;
    private int viewsTextWidth;
    private boolean visibleOnScreen;
    private float voteCurrentCircleLength;
    private float voteCurrentProgressTime;
    private long voteLastUpdateTime;
    private float voteRadOffset;
    private boolean voteRisingCircleLength;
    private boolean wasLayout;
    private boolean wasPinned;
    private boolean wasSending;
    private int widthBeforeNewTimeLine;
    private int widthForButtons;
    private boolean willRemoved;

    /* loaded from: classes3.dex */
    public interface ChatMessageCellDelegate {

        /* renamed from: org.telegram.ui.Cells.ChatMessageCell$ChatMessageCellDelegate$-CC */
        /* loaded from: classes3.dex */
        public final /* synthetic */ class CC {
            public static boolean $default$canDrawOutboundsContent(ChatMessageCellDelegate chatMessageCellDelegate) {
                return true;
            }

            public static boolean $default$canPerformActions(ChatMessageCellDelegate chatMessageCellDelegate) {
                return false;
            }

            public static void $default$didLongPress(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell, float f, float f2) {
            }

            public static void $default$didLongPressBotButton(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell, TLRPC$KeyboardButton tLRPC$KeyboardButton) {
            }

            public static boolean $default$didLongPressChannelAvatar(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell, TLRPC$Chat tLRPC$Chat, int i, float f, float f2) {
                return false;
            }

            public static boolean $default$didLongPressUserAvatar(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell, TLRPC$User tLRPC$User, float f, float f2) {
                return false;
            }

            public static void $default$didPressBotButton(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell, TLRPC$KeyboardButton tLRPC$KeyboardButton) {
            }

            public static void $default$didPressCancelSendButton(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell) {
            }

            public static void $default$didPressChannelAvatar(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell, TLRPC$Chat tLRPC$Chat, int i, float f, float f2) {
            }

            public static void $default$didPressCommentButton(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell) {
            }

            public static void $default$didPressHiddenForward(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell) {
            }

            public static void $default$didPressHint(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell, int i) {
            }

            public static void $default$didPressImage(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell, float f, float f2) {
            }

            public static void $default$didPressInstantButton(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell, int i) {
            }

            public static void $default$didPressOther(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell, float f, float f2) {
            }

            public static void $default$didPressReaction(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell, TLRPC$TL_reactionCount tLRPC$TL_reactionCount, boolean z) {
            }

            public static void $default$didPressReplyMessage(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell, int i) {
            }

            public static void $default$didPressSideButton(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell) {
            }

            public static void $default$didPressTime(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell) {
            }

            public static void $default$didPressUrl(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell, CharacterStyle characterStyle, boolean z) {
            }

            public static void $default$didPressUserAvatar(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell, TLRPC$User tLRPC$User, float f, float f2) {
            }

            public static void $default$didPressViaBot(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell, String str) {
            }

            public static void $default$didPressViaBotNotInline(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell, long j) {
            }

            public static void $default$didPressVoteButtons(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell, ArrayList arrayList, int i, int i2, int i3) {
            }

            public static void $default$didStartVideoStream(ChatMessageCellDelegate chatMessageCellDelegate, MessageObject messageObject) {
            }

            public static String $default$getAdminRank(ChatMessageCellDelegate chatMessageCellDelegate, long j) {
                return null;
            }

            public static PinchToZoomHelper $default$getPinchToZoomHelper(ChatMessageCellDelegate chatMessageCellDelegate) {
                return null;
            }

            public static TextSelectionHelper.ChatListTextSelectionHelper $default$getTextSelectionHelper(ChatMessageCellDelegate chatMessageCellDelegate) {
                return null;
            }

            public static boolean $default$hasSelectedMessages(ChatMessageCellDelegate chatMessageCellDelegate) {
                return false;
            }

            public static void $default$invalidateBlur(ChatMessageCellDelegate chatMessageCellDelegate) {
            }

            public static boolean $default$isLandscape(ChatMessageCellDelegate chatMessageCellDelegate) {
                return false;
            }

            public static boolean $default$keyboardIsOpened(ChatMessageCellDelegate chatMessageCellDelegate) {
                return false;
            }

            public static void $default$needOpenWebView(ChatMessageCellDelegate chatMessageCellDelegate, MessageObject messageObject, String str, String str2, String str3, String str4, int i, int i2) {
            }

            public static boolean $default$needPlayMessage(ChatMessageCellDelegate chatMessageCellDelegate, MessageObject messageObject) {
                return false;
            }

            public static void $default$needReloadPolls(ChatMessageCellDelegate chatMessageCellDelegate) {
            }

            public static void $default$needShowPremiumFeatures(ChatMessageCellDelegate chatMessageCellDelegate, String str) {
            }

            public static boolean $default$onAccessibilityAction(ChatMessageCellDelegate chatMessageCellDelegate, int i, Bundle bundle) {
                return false;
            }

            public static void $default$onDiceFinished(ChatMessageCellDelegate chatMessageCellDelegate) {
            }

            public static void $default$setShouldNotRepeatSticker(ChatMessageCellDelegate chatMessageCellDelegate, MessageObject messageObject) {
            }

            public static boolean $default$shouldDrawThreadProgress(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell) {
                return false;
            }

            public static boolean $default$shouldRepeatSticker(ChatMessageCellDelegate chatMessageCellDelegate, MessageObject messageObject) {
                return true;
            }

            public static void $default$videoTimerReached(ChatMessageCellDelegate chatMessageCellDelegate) {
            }
        }

        boolean canDrawOutboundsContent();

        boolean canPerformActions();

        void didLongPress(ChatMessageCell chatMessageCell, float f, float f2);

        void didLongPressBotButton(ChatMessageCell chatMessageCell, TLRPC$KeyboardButton tLRPC$KeyboardButton);

        boolean didLongPressChannelAvatar(ChatMessageCell chatMessageCell, TLRPC$Chat tLRPC$Chat, int i, float f, float f2);

        boolean didLongPressUserAvatar(ChatMessageCell chatMessageCell, TLRPC$User tLRPC$User, float f, float f2);

        void didPressBotButton(ChatMessageCell chatMessageCell, TLRPC$KeyboardButton tLRPC$KeyboardButton);

        void didPressCancelSendButton(ChatMessageCell chatMessageCell);

        void didPressChannelAvatar(ChatMessageCell chatMessageCell, TLRPC$Chat tLRPC$Chat, int i, float f, float f2);

        void didPressCommentButton(ChatMessageCell chatMessageCell);

        void didPressHiddenForward(ChatMessageCell chatMessageCell);

        void didPressHint(ChatMessageCell chatMessageCell, int i);

        void didPressImage(ChatMessageCell chatMessageCell, float f, float f2);

        void didPressInstantButton(ChatMessageCell chatMessageCell, int i);

        void didPressOther(ChatMessageCell chatMessageCell, float f, float f2);

        void didPressReaction(ChatMessageCell chatMessageCell, TLRPC$TL_reactionCount tLRPC$TL_reactionCount, boolean z);

        void didPressReplyMessage(ChatMessageCell chatMessageCell, int i);

        void didPressSideButton(ChatMessageCell chatMessageCell);

        void didPressTime(ChatMessageCell chatMessageCell);

        void didPressUrl(ChatMessageCell chatMessageCell, CharacterStyle characterStyle, boolean z);

        void didPressUserAvatar(ChatMessageCell chatMessageCell, TLRPC$User tLRPC$User, float f, float f2);

        void didPressViaBot(ChatMessageCell chatMessageCell, String str);

        void didPressViaBotNotInline(ChatMessageCell chatMessageCell, long j);

        void didPressVoteButtons(ChatMessageCell chatMessageCell, ArrayList<TLRPC$TL_pollAnswer> arrayList, int i, int i2, int i3);

        void didStartVideoStream(MessageObject messageObject);

        String getAdminRank(long j);

        PinchToZoomHelper getPinchToZoomHelper();

        TextSelectionHelper.ChatListTextSelectionHelper getTextSelectionHelper();

        boolean hasSelectedMessages();

        void invalidateBlur();

        boolean isLandscape();

        boolean keyboardIsOpened();

        void needOpenWebView(MessageObject messageObject, String str, String str2, String str3, String str4, int i, int i2);

        boolean needPlayMessage(MessageObject messageObject);

        void needReloadPolls();

        void needShowPremiumFeatures(String str);

        boolean onAccessibilityAction(int i, Bundle bundle);

        void onDiceFinished();

        void setShouldNotRepeatSticker(MessageObject messageObject);

        boolean shouldDrawThreadProgress(ChatMessageCell chatMessageCell);

        boolean shouldRepeatSticker(MessageObject messageObject);

        void videoTimerReached();
    }

    private boolean intersect(float f, float f2, float f3, float f4) {
        return f <= f3 ? f2 >= f3 : f <= f4;
    }

    public RadialProgress2 getRadialProgress() {
        return this.radialProgress;
    }

    public void setEnterTransitionInProgress(boolean z) {
        this.enterTransitionInProgress = z;
        invalidate();
    }

    public ReactionsLayoutInBubble.ReactionButton getReactionButton(String str) {
        return this.reactionsLayoutInBubble.getReactionButton(str);
    }

    public MessageObject getPrimaryMessageObject() {
        MessageObject messageObject = this.currentMessageObject;
        MessageObject findPrimaryMessageObject = (messageObject == null || this.currentMessagesGroup == null || !messageObject.hasValidGroupId()) ? null : this.currentMessagesGroup.findPrimaryMessageObject();
        return findPrimaryMessageObject != null ? findPrimaryMessageObject : this.currentMessageObject;
    }

    @Override // org.telegram.messenger.NotificationCenter.NotificationCenterDelegate
    public void didReceivedNotification(int i, int i2, Object... objArr) {
        TLRPC$User tLRPC$User;
        if (i == NotificationCenter.startSpoilers) {
            setSpoilersSuppressed(false);
        } else if (i == NotificationCenter.stopSpoilers) {
            setSpoilersSuppressed(true);
        } else if (i != NotificationCenter.userInfoDidLoad || (tLRPC$User = this.currentUser) == null || tLRPC$User.id != ((Long) objArr[0]).longValue()) {
        } else {
            setAvatar(this.currentMessageObject);
        }
    }

    private void setAvatar(MessageObject messageObject) {
        TLRPC$Chat tLRPC$Chat;
        if (messageObject == null) {
            return;
        }
        if (this.isAvatarVisible) {
            Drawable drawable = messageObject.customAvatarDrawable;
            if (drawable != null) {
                this.avatarImage.setImageBitmap(drawable);
                return;
            }
            TLRPC$User tLRPC$User = this.currentUser;
            if (tLRPC$User != null) {
                TLRPC$UserProfilePhoto tLRPC$UserProfilePhoto = tLRPC$User.photo;
                if (tLRPC$UserProfilePhoto != null) {
                    this.currentPhoto = tLRPC$UserProfilePhoto.photo_small;
                } else {
                    this.currentPhoto = null;
                }
                this.avatarDrawable.setInfo(tLRPC$User);
                this.avatarImage.setForUserOrChat(this.currentUser, this.avatarDrawable, null, true);
                return;
            }
            TLRPC$Chat tLRPC$Chat2 = this.currentChat;
            if (tLRPC$Chat2 != null) {
                TLRPC$ChatPhoto tLRPC$ChatPhoto = tLRPC$Chat2.photo;
                if (tLRPC$ChatPhoto != null) {
                    this.currentPhoto = tLRPC$ChatPhoto.photo_small;
                } else {
                    this.currentPhoto = null;
                }
                this.avatarDrawable.setInfo(tLRPC$Chat2);
                this.avatarImage.setForUserOrChat(this.currentChat, this.avatarDrawable);
                return;
            } else if (messageObject.isSponsored()) {
                TLRPC$ChatInvite tLRPC$ChatInvite = messageObject.sponsoredChatInvite;
                if (tLRPC$ChatInvite != null && (tLRPC$Chat = tLRPC$ChatInvite.chat) != null) {
                    this.avatarDrawable.setInfo(tLRPC$Chat);
                    this.avatarImage.setForUserOrChat(messageObject.sponsoredChatInvite.chat, this.avatarDrawable);
                    return;
                }
                this.avatarDrawable.setInfo(tLRPC$ChatInvite);
                TLRPC$Photo tLRPC$Photo = messageObject.sponsoredChatInvite.photo;
                if (tLRPC$Photo == null) {
                    return;
                }
                this.avatarImage.setImage(ImageLocation.getForPhoto(tLRPC$Photo.sizes.get(0), tLRPC$Photo), "50_50", this.avatarDrawable, null, null, 0);
                return;
            } else {
                this.currentPhoto = null;
                this.avatarDrawable.setInfo(messageObject.getFromChatId(), null, null);
                this.avatarImage.setImage(null, null, this.avatarDrawable, null, null, 0);
                return;
            }
        }
        this.currentPhoto = null;
    }

    public void setSpoilersSuppressed(boolean z) {
        for (SpoilerEffect spoilerEffect : this.captionSpoilers) {
            spoilerEffect.setSuppressUpdates(z);
        }
        for (SpoilerEffect spoilerEffect2 : this.replySpoilers) {
            spoilerEffect2.setSuppressUpdates(z);
        }
        if (getMessageObject() == null || getMessageObject().textLayoutBlocks == null) {
            return;
        }
        Iterator<MessageObject.TextLayoutBlock> it = getMessageObject().textLayoutBlocks.iterator();
        while (it.hasNext()) {
            for (SpoilerEffect spoilerEffect3 : it.next().spoilers) {
                spoilerEffect3.setSuppressUpdates(z);
            }
        }
    }

    public boolean hasSpoilers() {
        if ((!hasCaptionLayout() || this.captionSpoilers.isEmpty()) && (this.replyTextLayout == null || this.replySpoilers.isEmpty())) {
            if (getMessageObject() == null || getMessageObject().textLayoutBlocks == null) {
                return false;
            }
            Iterator<MessageObject.TextLayoutBlock> it = getMessageObject().textLayoutBlocks.iterator();
            while (it.hasNext()) {
                if (!it.next().spoilers.isEmpty()) {
                    return true;
                }
            }
            return false;
        }
        return true;
    }

    private void updateSpoilersVisiblePart(int i, int i2) {
        if (hasCaptionLayout()) {
            float f = -this.captionY;
            for (SpoilerEffect spoilerEffect : this.captionSpoilers) {
                spoilerEffect.setVisibleBounds(0.0f, i + f, getWidth(), i2 + f);
            }
        }
        StaticLayout staticLayout = this.replyTextLayout;
        if (staticLayout != null) {
            float height = (-this.replyStartY) - staticLayout.getHeight();
            for (SpoilerEffect spoilerEffect2 : this.replySpoilers) {
                spoilerEffect2.setVisibleBounds(0.0f, i + height, getWidth(), i2 + height);
            }
        }
        if (getMessageObject() == null || getMessageObject().textLayoutBlocks == null) {
            return;
        }
        Iterator<MessageObject.TextLayoutBlock> it = getMessageObject().textLayoutBlocks.iterator();
        while (it.hasNext()) {
            MessageObject.TextLayoutBlock next = it.next();
            for (SpoilerEffect spoilerEffect3 : next.spoilers) {
                spoilerEffect3.setVisibleBounds(0.0f, (i - next.textYOffset) - this.textY, getWidth(), (i2 - next.textYOffset) - this.textY);
            }
        }
    }

    public void setScrimReaction(String str) {
        this.reactionsLayoutInBubble.setScrimReaction(str);
    }

    public void drawScrimReaction(Canvas canvas, String str) {
        MessageObject.GroupedMessagePosition groupedMessagePosition = this.currentPosition;
        if (groupedMessagePosition != null) {
            int i = groupedMessagePosition.flags;
            if ((i & 8) == 0 || (i & 1) == 0) {
                return;
            }
        }
        ReactionsLayoutInBubble reactionsLayoutInBubble = this.reactionsLayoutInBubble;
        if (!reactionsLayoutInBubble.isSmall) {
            reactionsLayoutInBubble.draw(canvas, this.transitionParams.animateChangeProgress, str);
        }
    }

    public boolean checkUnreadReactions(float f, int i) {
        if (!this.reactionsLayoutInBubble.hasUnreadReactions) {
            return false;
        }
        float y = getY();
        ReactionsLayoutInBubble reactionsLayoutInBubble = this.reactionsLayoutInBubble;
        float f2 = y + reactionsLayoutInBubble.y;
        return f2 > f && (f2 + ((float) reactionsLayoutInBubble.height)) - ((float) AndroidUtilities.dp(16.0f)) < ((float) i);
    }

    public void markReactionsAsRead() {
        this.reactionsLayoutInBubble.hasUnreadReactions = false;
        MessageObject messageObject = this.currentMessageObject;
        if (messageObject == null) {
            return;
        }
        messageObject.markReactionsAsRead();
    }

    public void setVisibleOnScreen(boolean z) {
        if (this.visibleOnScreen != z) {
            this.visibleOnScreen = z;
            checkImageReceiversAttachState();
        }
    }

    public void setParentBounds(float f, int i) {
        this.parentBoundsTop = f;
        this.parentBoundsBottom = i;
        if (this.photoImageOutOfBounds) {
            float y = getY() + this.photoImage.getImageY();
            if (this.photoImage.getImageHeight() + y < this.parentBoundsTop || y > this.parentBoundsBottom) {
                return;
            }
            invalidate();
        }
    }

    /* loaded from: classes3.dex */
    public static class BotButton {
        private int angle;
        private TLRPC$KeyboardButton button;
        private int height;
        private boolean isInviteButton;
        private long lastUpdateTime;
        private float progressAlpha;
        private StaticLayout title;
        private int width;
        private int x;
        private int y;

        private BotButton() {
        }

        static /* synthetic */ float access$2716(BotButton botButton, float f) {
            float f2 = botButton.progressAlpha + f;
            botButton.progressAlpha = f2;
            return f2;
        }

        static /* synthetic */ float access$2724(BotButton botButton, float f) {
            float f2 = botButton.progressAlpha - f;
            botButton.progressAlpha = f2;
            return f2;
        }

        static /* synthetic */ int access$2816(BotButton botButton, float f) {
            int i = (int) (botButton.angle + f);
            botButton.angle = i;
            return i;
        }

        static /* synthetic */ int access$2820(BotButton botButton, int i) {
            int i2 = botButton.angle - i;
            botButton.angle = i2;
            return i2;
        }
    }

    /* loaded from: classes3.dex */
    public static class PollButton {
        private TLRPC$TL_pollAnswer answer;
        private boolean chosen;
        private boolean correct;
        private int count;
        private float decimal;
        public int height;
        private int percent;
        private float percentProgress;
        private boolean prevChosen;
        private int prevPercent;
        private float prevPercentProgress;
        private StaticLayout title;
        public int x;
        public int y;

        static /* synthetic */ int access$1712(PollButton pollButton, int i) {
            int i2 = pollButton.percent + i;
            pollButton.percent = i2;
            return i2;
        }

        static /* synthetic */ float access$2424(PollButton pollButton, float f) {
            float f2 = pollButton.decimal - f;
            pollButton.decimal = f2;
            return f2;
        }
    }

    public ChatMessageCell(Context context) {
        this(context, false, null);
    }

    public ChatMessageCell(Context context, boolean z, Theme.ResourcesProvider resourcesProvider) {
        super(context);
        this.reactionsLayoutInBubble = new ReactionsLayoutInBubble(this);
        this.scrollRect = new Rect();
        this.imageBackgroundGradientRotation = 45;
        this.selectorDrawable = new Drawable[2];
        this.selectorDrawableMaskType = new int[2];
        this.instantButtonRect = new RectF();
        this.pressedState = new int[]{16842910, 16842919};
        this.deleteProgressRect = new RectF();
        this.rect = new RectF();
        this.timeAlpha = 1.0f;
        this.controlsAlpha = 1.0f;
        this.links = new LinkSpanDrawable.LinkCollector(this);
        this.urlPathCache = new ArrayList<>();
        this.urlPathSelection = new ArrayList<>();
        this.rectPath = new Path();
        this.pollButtons = new ArrayList<>();
        this.botButtons = new ArrayList<>();
        this.botButtonsByData = new HashMap<>();
        this.botButtonsByPosition = new HashMap<>();
        this.currentAccount = UserConfig.selectedAccount;
        this.isCheckPressed = true;
        this.drawBackground = true;
        this.backgroundWidth = 100;
        this.commentButtonRect = new Rect();
        this.spoilersPatchedReplyTextLayout = new AtomicReference<>();
        this.forwardedNameLayout = new StaticLayout[2];
        this.forwardNameOffsetX = new float[2];
        this.drawTime = true;
        this.ALPHA_PROPERTY_WORKAROUND = Build.VERSION.SDK_INT == 28;
        this.alphaInternal = 1.0f;
        this.transitionParams = new TransitionParams();
        this.diceFinishCallback = new Runnable() { // from class: org.telegram.ui.Cells.ChatMessageCell.1
            @Override // java.lang.Runnable
            public void run() {
                if (ChatMessageCell.this.delegate != null) {
                    ChatMessageCell.this.delegate.onDiceFinished();
                }
            }
        };
        this.invalidateRunnable = new Runnable() { // from class: org.telegram.ui.Cells.ChatMessageCell.2
            @Override // java.lang.Runnable
            public void run() {
                ChatMessageCell.this.checkLocationExpired();
                if (ChatMessageCell.this.locationExpired) {
                    ChatMessageCell.this.invalidate();
                    ChatMessageCell.this.scheduledInvalidate = false;
                    return;
                }
                ChatMessageCell chatMessageCell = ChatMessageCell.this;
                chatMessageCell.invalidate(((int) chatMessageCell.rect.left) - 5, ((int) ChatMessageCell.this.rect.top) - 5, ((int) ChatMessageCell.this.rect.right) + 5, ((int) ChatMessageCell.this.rect.bottom) + 5);
                if (!ChatMessageCell.this.scheduledInvalidate) {
                    return;
                }
                AndroidUtilities.runOnUIThread(ChatMessageCell.this.invalidateRunnable, 1000L);
            }
        };
        this.accessibilityVirtualViewBounds = new SparseArray<>();
        this.currentFocusedVirtualView = -1;
        this.backgroundCacheParams = new Theme.MessageDrawable.PathDrawParams();
        this.replySpoilers = new ArrayList();
        this.replySpoilersPool = new Stack<>();
        this.captionSpoilers = new ArrayList();
        this.captionSpoilersPool = new Stack<>();
        this.captionPatchedSpoilersLayout = new AtomicReference<>();
        this.sPath = new Path();
        this.hadLongPress = false;
        this.ANIMATION_OFFSET_X = new Property<ChatMessageCell, Float>(this, Float.class, "animationOffsetX") { // from class: org.telegram.ui.Cells.ChatMessageCell.7
            public Float get(ChatMessageCell chatMessageCell) {
                return Float.valueOf(chatMessageCell.animationOffsetX);
            }

            public void set(ChatMessageCell chatMessageCell, Float f) {
                chatMessageCell.setAnimationOffsetX(f.floatValue());
            }
        };
        this.resourcesProvider = resourcesProvider;
        this.canDrawBackgroundInParent = z;
        this.backgroundDrawable = new MessageBackgroundDrawable(this);
        ImageReceiver imageReceiver = new ImageReceiver();
        this.avatarImage = imageReceiver;
        imageReceiver.setAllowLoadingOnAttachedOnly(true);
        this.avatarImage.setRoundRadius(AndroidUtilities.dp(21.0f));
        this.avatarDrawable = new AvatarDrawable();
        ImageReceiver imageReceiver2 = new ImageReceiver(this);
        this.replyImageReceiver = imageReceiver2;
        imageReceiver2.setAllowLoadingOnAttachedOnly(true);
        this.replyImageReceiver.setRoundRadius(AndroidUtilities.dp(2.0f));
        ImageReceiver imageReceiver3 = new ImageReceiver(this);
        this.locationImageReceiver = imageReceiver3;
        imageReceiver3.setAllowLoadingOnAttachedOnly(true);
        this.locationImageReceiver.setRoundRadius(AndroidUtilities.dp(26.1f));
        this.TAG = DownloadController.getInstance(this.currentAccount).generateObserverTag();
        this.contactAvatarDrawable = new AvatarDrawable();
        ImageReceiver imageReceiver4 = new ImageReceiver(this);
        this.photoImage = imageReceiver4;
        imageReceiver4.setAllowLoadingOnAttachedOnly(true);
        this.photoImage.setUseRoundForThumbDrawable(true);
        this.photoImage.setDelegate(this);
        this.radialProgress = new RadialProgress2(this, resourcesProvider);
        RadialProgress2 radialProgress2 = new RadialProgress2(this, resourcesProvider);
        this.videoRadialProgress = radialProgress2;
        radialProgress2.setDrawBackground(false);
        this.videoRadialProgress.setCircleRadius(AndroidUtilities.dp(15.0f));
        SeekBar seekBar = new SeekBar(this);
        this.seekBar = seekBar;
        seekBar.setDelegate(this);
        SeekBarWaveform seekBarWaveform = new SeekBarWaveform(context);
        this.seekBarWaveform = seekBarWaveform;
        seekBarWaveform.setDelegate(this);
        this.seekBarWaveform.setParentView(this);
        this.seekBarAccessibilityDelegate = new FloatSeekBarAccessibilityDelegate() { // from class: org.telegram.ui.Cells.ChatMessageCell.3
            @Override // org.telegram.ui.Components.FloatSeekBarAccessibilityDelegate
            public float getProgress() {
                if (ChatMessageCell.this.currentMessageObject.isMusic()) {
                    return ChatMessageCell.this.seekBar.getProgress();
                }
                if (ChatMessageCell.this.currentMessageObject.isVoice()) {
                    return ChatMessageCell.this.useSeekBarWaveform ? ChatMessageCell.this.seekBarWaveform.getProgress() : ChatMessageCell.this.seekBar.getProgress();
                } else if (!ChatMessageCell.this.currentMessageObject.isRoundVideo()) {
                    return 0.0f;
                } else {
                    return ChatMessageCell.this.currentMessageObject.audioProgress;
                }
            }

            @Override // org.telegram.ui.Components.FloatSeekBarAccessibilityDelegate
            public void setProgress(float f) {
                if (ChatMessageCell.this.currentMessageObject.isMusic()) {
                    ChatMessageCell.this.seekBar.setProgress(f);
                } else if (ChatMessageCell.this.currentMessageObject.isVoice()) {
                    if (ChatMessageCell.this.useSeekBarWaveform) {
                        ChatMessageCell.this.seekBarWaveform.setProgress(f);
                    } else {
                        ChatMessageCell.this.seekBar.setProgress(f);
                    }
                } else if (!ChatMessageCell.this.currentMessageObject.isRoundVideo()) {
                    return;
                } else {
                    ChatMessageCell.this.currentMessageObject.audioProgress = f;
                }
                ChatMessageCell.this.onSeekBarDrag(f);
                ChatMessageCell.this.invalidate();
            }
        };
        this.roundVideoPlayingDrawable = new RoundVideoPlayingDrawable(this, resourcesProvider);
        setImportantForAccessibility(1);
    }

    private void createPollUI() {
        if (this.pollAvatarImages != null) {
            return;
        }
        this.pollAvatarImages = new ImageReceiver[3];
        this.pollAvatarDrawables = new AvatarDrawable[3];
        this.pollAvatarImagesVisible = new boolean[3];
        int i = 0;
        while (true) {
            ImageReceiver[] imageReceiverArr = this.pollAvatarImages;
            if (i >= imageReceiverArr.length) {
                break;
            }
            imageReceiverArr[i] = new ImageReceiver(this);
            this.pollAvatarImages[i].setRoundRadius(AndroidUtilities.dp(8.0f));
            this.pollAvatarDrawables[i] = new AvatarDrawable();
            this.pollAvatarDrawables[i].setTextSize(AndroidUtilities.dp(6.0f));
            i++;
        }
        this.pollCheckBox = new CheckBoxBase[10];
        int i2 = 0;
        while (true) {
            CheckBoxBase[] checkBoxBaseArr = this.pollCheckBox;
            if (i2 >= checkBoxBaseArr.length) {
                return;
            }
            checkBoxBaseArr[i2] = new CheckBoxBase(this, 20, this.resourcesProvider);
            this.pollCheckBox[i2].setDrawUnchecked(false);
            this.pollCheckBox[i2].setBackgroundType(9);
            i2++;
        }
    }

    private void createCommentUI() {
        if (this.commentAvatarImages != null) {
            return;
        }
        this.commentAvatarImages = new ImageReceiver[3];
        this.commentAvatarDrawables = new AvatarDrawable[3];
        this.commentAvatarImagesVisible = new boolean[3];
        int i = 0;
        while (true) {
            ImageReceiver[] imageReceiverArr = this.commentAvatarImages;
            if (i >= imageReceiverArr.length) {
                return;
            }
            imageReceiverArr[i] = new ImageReceiver(this);
            this.commentAvatarImages[i].setRoundRadius(AndroidUtilities.dp(12.0f));
            this.commentAvatarDrawables[i] = new AvatarDrawable();
            this.commentAvatarDrawables[i].setTextSize(AndroidUtilities.dp(8.0f));
            i++;
        }
    }

    public void resetPressedLink(int i) {
        if (i != -1) {
            this.links.removeLinks(Integer.valueOf(i));
        } else {
            this.links.clear();
        }
        if (this.pressedLink != null) {
            if (this.pressedLinkType != i && i != -1) {
                return;
            }
            this.pressedLink = null;
            this.pressedLinkType = -1;
            invalidate();
        }
    }

    private void resetUrlPaths() {
        if (this.urlPathSelection.isEmpty()) {
            return;
        }
        this.urlPathCache.addAll(this.urlPathSelection);
        this.urlPathSelection.clear();
    }

    private LinkPath obtainNewUrlPath() {
        LinkPath linkPath;
        if (!this.urlPathCache.isEmpty()) {
            linkPath = this.urlPathCache.get(0);
            this.urlPathCache.remove(0);
        } else {
            linkPath = new LinkPath(true);
        }
        linkPath.reset();
        this.urlPathSelection.add(linkPath);
        return linkPath;
    }

    public int[] getRealSpanStartAndEnd(Spannable spannable, CharacterStyle characterStyle) {
        boolean z;
        int i;
        int i2;
        TextStyleSpan.TextStyleRun style;
        TLRPC$MessageEntity tLRPC$MessageEntity;
        if (!(characterStyle instanceof URLSpanBrowser) || (style = ((URLSpanBrowser) characterStyle).getStyle()) == null || (tLRPC$MessageEntity = style.urlEntity) == null) {
            i2 = 0;
            i = 0;
            z = false;
        } else {
            i = tLRPC$MessageEntity.offset;
            i2 = tLRPC$MessageEntity.length + i;
            z = true;
        }
        if (!z) {
            i = spannable.getSpanStart(characterStyle);
            i2 = spannable.getSpanEnd(characterStyle);
        }
        return new int[]{i, i2};
    }

    /* JADX WARN: Removed duplicated region for block: B:109:0x024a A[Catch: Exception -> 0x0263, TryCatch #1 {Exception -> 0x0263, blocks: (B:30:0x0073, B:32:0x0088, B:34:0x008e, B:36:0x00b0, B:38:0x00bb, B:40:0x00cb, B:44:0x00d1, B:45:0x00da, B:47:0x00dd, B:49:0x00e3, B:55:0x00ed, B:57:0x00f3, B:59:0x00f9, B:61:0x00fd, B:63:0x0105, B:67:0x012c, B:105:0x0238, B:106:0x023b, B:107:0x0246, B:109:0x024a, B:111:0x0254, B:68:0x0137, B:70:0x0169, B:71:0x016b, B:73:0x0175, B:75:0x0181, B:76:0x018c, B:78:0x0198, B:80:0x019b, B:83:0x01a6, B:86:0x01c9, B:87:0x01cc, B:89:0x01d2, B:91:0x01d6, B:93:0x01e2, B:94:0x01f1, B:96:0x0201, B:98:0x0204, B:101:0x020f), top: B:119:0x0073, inners: #0 }] */
    /* JADX WARN: Removed duplicated region for block: B:55:0x00ed A[Catch: Exception -> 0x0263, TryCatch #1 {Exception -> 0x0263, blocks: (B:30:0x0073, B:32:0x0088, B:34:0x008e, B:36:0x00b0, B:38:0x00bb, B:40:0x00cb, B:44:0x00d1, B:45:0x00da, B:47:0x00dd, B:49:0x00e3, B:55:0x00ed, B:57:0x00f3, B:59:0x00f9, B:61:0x00fd, B:63:0x0105, B:67:0x012c, B:105:0x0238, B:106:0x023b, B:107:0x0246, B:109:0x024a, B:111:0x0254, B:68:0x0137, B:70:0x0169, B:71:0x016b, B:73:0x0175, B:75:0x0181, B:76:0x018c, B:78:0x0198, B:80:0x019b, B:83:0x01a6, B:86:0x01c9, B:87:0x01cc, B:89:0x01d2, B:91:0x01d6, B:93:0x01e2, B:94:0x01f1, B:96:0x0201, B:98:0x0204, B:101:0x020f), top: B:119:0x0073, inners: #0 }] */
    /* JADX WARN: Removed duplicated region for block: B:59:0x00f9 A[Catch: Exception -> 0x0263, TryCatch #1 {Exception -> 0x0263, blocks: (B:30:0x0073, B:32:0x0088, B:34:0x008e, B:36:0x00b0, B:38:0x00bb, B:40:0x00cb, B:44:0x00d1, B:45:0x00da, B:47:0x00dd, B:49:0x00e3, B:55:0x00ed, B:57:0x00f3, B:59:0x00f9, B:61:0x00fd, B:63:0x0105, B:67:0x012c, B:105:0x0238, B:106:0x023b, B:107:0x0246, B:109:0x024a, B:111:0x0254, B:68:0x0137, B:70:0x0169, B:71:0x016b, B:73:0x0175, B:75:0x0181, B:76:0x018c, B:78:0x0198, B:80:0x019b, B:83:0x01a6, B:86:0x01c9, B:87:0x01cc, B:89:0x01d2, B:91:0x01d6, B:93:0x01e2, B:94:0x01f1, B:96:0x0201, B:98:0x0204, B:101:0x020f), top: B:119:0x0073, inners: #0 }] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private boolean checkTextBlockMotionEvent(MotionEvent motionEvent) {
        ArrayList<MessageObject.TextLayoutBlock> arrayList;
        int i;
        boolean z;
        boolean z2;
        CharacterStyle[] characterStyleArr;
        CharacterStyle[] characterStyleArr2;
        MessageObject messageObject = this.currentMessageObject;
        if (messageObject.type == 0 && (arrayList = messageObject.textLayoutBlocks) != null && !arrayList.isEmpty() && (this.currentMessageObject.messageText instanceof Spannable) && (motionEvent.getAction() == 0 || (motionEvent.getAction() == 1 && this.pressedLinkType == 1))) {
            int x = (int) motionEvent.getX();
            int y = (int) motionEvent.getY();
            int i2 = this.textX;
            if (x >= i2 && y >= (i = this.textY)) {
                MessageObject messageObject2 = this.currentMessageObject;
                if (x <= i2 + messageObject2.textWidth && y <= messageObject2.textHeight + i) {
                    int i3 = y - i;
                    int i4 = 0;
                    for (int i5 = 0; i5 < this.currentMessageObject.textLayoutBlocks.size() && this.currentMessageObject.textLayoutBlocks.get(i5).textYOffset <= i3; i5++) {
                        i4 = i5;
                    }
                    try {
                        MessageObject.TextLayoutBlock textLayoutBlock = this.currentMessageObject.textLayoutBlocks.get(i4);
                        float f = x;
                        float f2 = this.textX;
                        float f3 = textLayoutBlock.isRtl() ? this.currentMessageObject.textXOffset : 0.0f;
                        int i6 = (int) (i3 - textLayoutBlock.textYOffset);
                        int lineForVertical = textLayoutBlock.textLayout.getLineForVertical(i6);
                        float f4 = (int) (f - (f2 - f3));
                        int offsetForHorizontal = textLayoutBlock.charactersOffset + textLayoutBlock.textLayout.getOffsetForHorizontal(lineForVertical, f4);
                        float lineLeft = textLayoutBlock.textLayout.getLineLeft(lineForVertical);
                        if (lineLeft <= f4 && lineLeft + textLayoutBlock.textLayout.getLineWidth(lineForVertical) >= f4) {
                            Spannable spannable = (Spannable) this.currentMessageObject.messageText;
                            CharacterStyle[] characterStyleArr3 = (CharacterStyle[]) spannable.getSpans(offsetForHorizontal, offsetForHorizontal, ClickableSpan.class);
                            if (characterStyleArr3 != null && characterStyleArr3.length != 0) {
                                z = false;
                                if (characterStyleArr3.length != 0 && (!(characterStyleArr3[0] instanceof URLSpanBotCommand) || URLSpanBotCommand.enabled)) {
                                    z2 = false;
                                    if (!z2 && !AndroidUtilities.isAccessibilityScreenReaderEnabled()) {
                                        if (motionEvent.getAction() != 0) {
                                            LinkSpanDrawable linkSpanDrawable = this.pressedLink;
                                            if (linkSpanDrawable == null || linkSpanDrawable.getSpan() != characterStyleArr3[0]) {
                                                this.links.removeLink(this.pressedLink);
                                                LinkSpanDrawable linkSpanDrawable2 = new LinkSpanDrawable(characterStyleArr3[0], this.resourcesProvider, f4, i6, spanSupportsLongPress(characterStyleArr3[0]));
                                                this.pressedLink = linkSpanDrawable2;
                                                linkSpanDrawable2.setColor(getThemedColor(this.currentMessageObject.isOutOwner() ? "chat_outLinkSelectBackground" : "chat_linkSelectBackground"));
                                                this.linkBlockNum = i4;
                                                this.pressedLinkType = 1;
                                                try {
                                                    LinkPath obtainNewPath = this.pressedLink.obtainNewPath();
                                                    int[] realSpanStartAndEnd = getRealSpanStartAndEnd(spannable, this.pressedLink.getSpan());
                                                    int i7 = realSpanStartAndEnd[0];
                                                    int i8 = textLayoutBlock.charactersOffset;
                                                    realSpanStartAndEnd[0] = i7 - i8;
                                                    realSpanStartAndEnd[1] = realSpanStartAndEnd[1] - i8;
                                                    obtainNewPath.setCurrentLayout(textLayoutBlock.textLayout, realSpanStartAndEnd[0], 0.0f);
                                                    textLayoutBlock.textLayout.getSelectionPath(realSpanStartAndEnd[0], realSpanStartAndEnd[1], obtainNewPath);
                                                    if (realSpanStartAndEnd[1] >= textLayoutBlock.charactersEnd) {
                                                        for (int i9 = i4 + 1; i9 < this.currentMessageObject.textLayoutBlocks.size(); i9++) {
                                                            MessageObject.TextLayoutBlock textLayoutBlock2 = this.currentMessageObject.textLayoutBlocks.get(i9);
                                                            if (z) {
                                                                int i10 = textLayoutBlock2.charactersOffset;
                                                                characterStyleArr2 = (CharacterStyle[]) spannable.getSpans(i10, i10, URLSpanMono.class);
                                                            } else {
                                                                int i11 = textLayoutBlock2.charactersOffset;
                                                                characterStyleArr2 = (CharacterStyle[]) spannable.getSpans(i11, i11, ClickableSpan.class);
                                                            }
                                                            if (characterStyleArr2 == null || characterStyleArr2.length == 0 || characterStyleArr2[0] != this.pressedLink.getSpan()) {
                                                                break;
                                                            }
                                                            LinkPath obtainNewPath2 = this.pressedLink.obtainNewPath();
                                                            obtainNewPath2.setCurrentLayout(textLayoutBlock2.textLayout, 0, textLayoutBlock2.textYOffset - textLayoutBlock.textYOffset);
                                                            int i12 = (realSpanStartAndEnd[1] + textLayoutBlock.charactersOffset) - textLayoutBlock2.charactersOffset;
                                                            textLayoutBlock2.textLayout.getSelectionPath(0, i12, obtainNewPath2);
                                                            if (i12 < textLayoutBlock2.charactersEnd - 1) {
                                                                break;
                                                            }
                                                        }
                                                    }
                                                    if (realSpanStartAndEnd[0] <= textLayoutBlock.charactersOffset) {
                                                        int i13 = 0;
                                                        for (int i14 = i4 - 1; i14 >= 0; i14--) {
                                                            MessageObject.TextLayoutBlock textLayoutBlock3 = this.currentMessageObject.textLayoutBlocks.get(i14);
                                                            if (z) {
                                                                int i15 = textLayoutBlock3.charactersEnd;
                                                                characterStyleArr = (CharacterStyle[]) spannable.getSpans(i15 - 1, i15 - 1, URLSpanMono.class);
                                                            } else {
                                                                int i16 = textLayoutBlock3.charactersEnd;
                                                                characterStyleArr = (CharacterStyle[]) spannable.getSpans(i16 - 1, i16 - 1, ClickableSpan.class);
                                                            }
                                                            if (characterStyleArr == null || characterStyleArr.length == 0 || characterStyleArr[0] != this.pressedLink.getSpan()) {
                                                                break;
                                                            }
                                                            LinkPath obtainNewPath3 = this.pressedLink.obtainNewPath();
                                                            i13 -= textLayoutBlock3.height;
                                                            int i17 = realSpanStartAndEnd[0];
                                                            int i18 = textLayoutBlock.charactersOffset;
                                                            int i19 = textLayoutBlock3.charactersOffset;
                                                            int i20 = (i17 + i18) - i19;
                                                            int i21 = (realSpanStartAndEnd[1] + i18) - i19;
                                                            obtainNewPath3.setCurrentLayout(textLayoutBlock3.textLayout, i20, i13);
                                                            textLayoutBlock3.textLayout.getSelectionPath(i20, i21, obtainNewPath3);
                                                            if (i20 > textLayoutBlock3.charactersOffset) {
                                                                break;
                                                            }
                                                        }
                                                    }
                                                } catch (Exception e) {
                                                    FileLog.e(e);
                                                }
                                                this.links.addLink(this.pressedLink, 1);
                                            }
                                            invalidate();
                                            return true;
                                        } else if (characterStyleArr3[0] == this.pressedLink.getSpan()) {
                                            this.delegate.didPressUrl(this, this.pressedLink.getSpan(), false);
                                            resetPressedLink(1);
                                            return true;
                                        }
                                    }
                                }
                                z2 = true;
                                if (!z2) {
                                    if (motionEvent.getAction() != 0) {
                                    }
                                }
                            }
                            characterStyleArr3 = (CharacterStyle[]) spannable.getSpans(offsetForHorizontal, offsetForHorizontal, URLSpanMono.class);
                            z = true;
                            if (characterStyleArr3.length != 0) {
                                z2 = false;
                                if (!z2) {
                                }
                            }
                            z2 = true;
                            if (!z2) {
                            }
                        }
                    } catch (Exception e2) {
                        FileLog.e(e2);
                    }
                }
            }
            resetPressedLink(1);
        }
        return false;
    }

    /* JADX WARN: Removed duplicated region for block: B:51:0x00dc  */
    /* JADX WARN: Removed duplicated region for block: B:52:0x00df  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private boolean checkCaptionMotionEvent(MotionEvent motionEvent) {
        boolean z;
        LinkSpanDrawable linkSpanDrawable;
        if ((this.currentCaption instanceof Spannable) && this.captionLayout != null && (motionEvent.getAction() == 0 || ((this.linkPreviewPressed || this.pressedLink != null) && motionEvent.getAction() == 1))) {
            int y = (int) motionEvent.getY();
            float x = (int) motionEvent.getX();
            float f = this.captionX;
            if (x >= f && x <= f + this.captionWidth) {
                float f2 = y;
                float f3 = this.captionY;
                if (f2 >= f3 && f2 <= f3 + this.captionHeight) {
                    if (motionEvent.getAction() == 0) {
                        try {
                            int i = (int) (x - this.captionX);
                            int i2 = (int) (f2 - this.captionY);
                            int lineForVertical = this.captionLayout.getLineForVertical(i2);
                            float f4 = i;
                            int offsetForHorizontal = this.captionLayout.getOffsetForHorizontal(lineForVertical, f4);
                            float lineLeft = this.captionLayout.getLineLeft(lineForVertical);
                            if (lineLeft <= f4 && lineLeft + this.captionLayout.getLineWidth(lineForVertical) >= f4) {
                                Spannable spannable = (Spannable) this.currentCaption;
                                CharacterStyle[] characterStyleArr = (CharacterStyle[]) spannable.getSpans(offsetForHorizontal, offsetForHorizontal, ClickableSpan.class);
                                if (characterStyleArr == null || characterStyleArr.length == 0) {
                                    characterStyleArr = (CharacterStyle[]) spannable.getSpans(offsetForHorizontal, offsetForHorizontal, URLSpanMono.class);
                                }
                                if (characterStyleArr.length != 0 && (!(characterStyleArr[0] instanceof URLSpanBotCommand) || URLSpanBotCommand.enabled)) {
                                    z = false;
                                    if (!z && !AndroidUtilities.isAccessibilityScreenReaderEnabled()) {
                                        linkSpanDrawable = this.pressedLink;
                                        if (linkSpanDrawable != null || linkSpanDrawable.getSpan() != characterStyleArr[0]) {
                                            this.links.removeLink(this.pressedLink);
                                            LinkSpanDrawable linkSpanDrawable2 = new LinkSpanDrawable(characterStyleArr[0], this.resourcesProvider, f4, i2, spanSupportsLongPress(characterStyleArr[0]));
                                            this.pressedLink = linkSpanDrawable2;
                                            linkSpanDrawable2.setColor(getThemedColor(!this.currentMessageObject.isOutOwner() ? "chat_outLinkSelectBackground" : "chat_linkSelectBackground"));
                                            this.pressedLinkType = 3;
                                            try {
                                                LinkPath obtainNewPath = this.pressedLink.obtainNewPath();
                                                int[] realSpanStartAndEnd = getRealSpanStartAndEnd(spannable, this.pressedLink.getSpan());
                                                obtainNewPath.setCurrentLayout(this.captionLayout, realSpanStartAndEnd[0], 0.0f);
                                                this.captionLayout.getSelectionPath(realSpanStartAndEnd[0], realSpanStartAndEnd[1], obtainNewPath);
                                            } catch (Exception e) {
                                                FileLog.e(e);
                                            }
                                            this.links.addLink(this.pressedLink, 3);
                                        }
                                        invalidateWithParent();
                                        return true;
                                    }
                                }
                                z = true;
                                if (!z) {
                                    linkSpanDrawable = this.pressedLink;
                                    if (linkSpanDrawable != null) {
                                    }
                                    this.links.removeLink(this.pressedLink);
                                    LinkSpanDrawable linkSpanDrawable22 = new LinkSpanDrawable(characterStyleArr[0], this.resourcesProvider, f4, i2, spanSupportsLongPress(characterStyleArr[0]));
                                    this.pressedLink = linkSpanDrawable22;
                                    linkSpanDrawable22.setColor(getThemedColor(!this.currentMessageObject.isOutOwner() ? "chat_outLinkSelectBackground" : "chat_linkSelectBackground"));
                                    this.pressedLinkType = 3;
                                    LinkPath obtainNewPath2 = this.pressedLink.obtainNewPath();
                                    int[] realSpanStartAndEnd2 = getRealSpanStartAndEnd(spannable, this.pressedLink.getSpan());
                                    obtainNewPath2.setCurrentLayout(this.captionLayout, realSpanStartAndEnd2[0], 0.0f);
                                    this.captionLayout.getSelectionPath(realSpanStartAndEnd2[0], realSpanStartAndEnd2[1], obtainNewPath2);
                                    this.links.addLink(this.pressedLink, 3);
                                    invalidateWithParent();
                                    return true;
                                }
                            }
                        } catch (Exception e2) {
                            FileLog.e(e2);
                        }
                    } else if (this.pressedLinkType == 3) {
                        this.delegate.didPressUrl(this, this.pressedLink.getSpan(), false);
                        resetPressedLink(3);
                        return true;
                    }
                }
            }
            resetPressedLink(3);
        }
        return false;
    }

    /* JADX WARN: Removed duplicated region for block: B:57:0x00ec  */
    /* JADX WARN: Removed duplicated region for block: B:58:0x00ef  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private boolean checkGameMotionEvent(MotionEvent motionEvent) {
        boolean z;
        LinkSpanDrawable linkSpanDrawable;
        int i;
        int i2;
        if (!this.hasGamePreview) {
            return false;
        }
        int x = (int) motionEvent.getX();
        int y = (int) motionEvent.getY();
        if (motionEvent.getAction() == 0) {
            if (this.drawPhotoImage && this.drawImageButton && this.buttonState != -1 && x >= (i = this.buttonX) && x <= i + AndroidUtilities.dp(48.0f) && y >= (i2 = this.buttonY) && y <= i2 + AndroidUtilities.dp(48.0f) && this.radialProgress.getIcon() != 4) {
                this.buttonPressed = 1;
                invalidate();
                return true;
            } else if (this.drawPhotoImage && this.photoImage.isInsideImage(x, y)) {
                this.gamePreviewPressed = true;
                return true;
            } else if (this.descriptionLayout != null && y >= this.descriptionY) {
                try {
                    int dp = x - ((this.unmovedTextX + AndroidUtilities.dp(10.0f)) + this.descriptionX);
                    int i3 = y - this.descriptionY;
                    int lineForVertical = this.descriptionLayout.getLineForVertical(i3);
                    float f = dp;
                    int offsetForHorizontal = this.descriptionLayout.getOffsetForHorizontal(lineForVertical, f);
                    float lineLeft = this.descriptionLayout.getLineLeft(lineForVertical);
                    if (lineLeft <= f && lineLeft + this.descriptionLayout.getLineWidth(lineForVertical) >= f) {
                        Spannable spannable = (Spannable) this.currentMessageObject.linkDescription;
                        ClickableSpan[] clickableSpanArr = (ClickableSpan[]) spannable.getSpans(offsetForHorizontal, offsetForHorizontal, ClickableSpan.class);
                        if (clickableSpanArr.length != 0 && (!(clickableSpanArr[0] instanceof URLSpanBotCommand) || URLSpanBotCommand.enabled)) {
                            z = false;
                            if (!z && !AndroidUtilities.isAccessibilityScreenReaderEnabled()) {
                                linkSpanDrawable = this.pressedLink;
                                if (linkSpanDrawable != null || linkSpanDrawable.getSpan() != clickableSpanArr[0]) {
                                    this.links.removeLink(this.pressedLink);
                                    LinkSpanDrawable linkSpanDrawable2 = new LinkSpanDrawable(clickableSpanArr[0], this.resourcesProvider, f, i3, spanSupportsLongPress(clickableSpanArr[0]));
                                    this.pressedLink = linkSpanDrawable2;
                                    linkSpanDrawable2.setColor(getThemedColor(!this.currentMessageObject.isOutOwner() ? "chat_outLinkSelectBackground" : "chat_linkSelectBackground"));
                                    this.linkBlockNum = -10;
                                    this.pressedLinkType = 2;
                                    try {
                                        LinkPath obtainNewPath = this.pressedLink.obtainNewPath();
                                        int[] realSpanStartAndEnd = getRealSpanStartAndEnd(spannable, this.pressedLink.getSpan());
                                        obtainNewPath.setCurrentLayout(this.descriptionLayout, realSpanStartAndEnd[0], 0.0f);
                                        this.descriptionLayout.getSelectionPath(realSpanStartAndEnd[0], realSpanStartAndEnd[1], obtainNewPath);
                                    } catch (Exception e) {
                                        FileLog.e(e);
                                    }
                                    this.links.addLink(this.pressedLink, 2);
                                }
                                invalidate();
                                return true;
                            }
                        }
                        z = true;
                        if (!z) {
                            linkSpanDrawable = this.pressedLink;
                            if (linkSpanDrawable != null) {
                            }
                            this.links.removeLink(this.pressedLink);
                            LinkSpanDrawable linkSpanDrawable22 = new LinkSpanDrawable(clickableSpanArr[0], this.resourcesProvider, f, i3, spanSupportsLongPress(clickableSpanArr[0]));
                            this.pressedLink = linkSpanDrawable22;
                            linkSpanDrawable22.setColor(getThemedColor(!this.currentMessageObject.isOutOwner() ? "chat_outLinkSelectBackground" : "chat_linkSelectBackground"));
                            this.linkBlockNum = -10;
                            this.pressedLinkType = 2;
                            LinkPath obtainNewPath2 = this.pressedLink.obtainNewPath();
                            int[] realSpanStartAndEnd2 = getRealSpanStartAndEnd(spannable, this.pressedLink.getSpan());
                            obtainNewPath2.setCurrentLayout(this.descriptionLayout, realSpanStartAndEnd2[0], 0.0f);
                            this.descriptionLayout.getSelectionPath(realSpanStartAndEnd2[0], realSpanStartAndEnd2[1], obtainNewPath2);
                            this.links.addLink(this.pressedLink, 2);
                            invalidate();
                            return true;
                        }
                    }
                } catch (Exception e2) {
                    FileLog.e(e2);
                }
            }
        } else if (motionEvent.getAction() == 1) {
            if (this.pressedLinkType == 2 || this.gamePreviewPressed || this.buttonPressed != 0) {
                if (this.buttonPressed != 0) {
                    this.buttonPressed = 0;
                    playSoundEffect(0);
                    didPressButton(true, false);
                    invalidate();
                } else {
                    LinkSpanDrawable linkSpanDrawable3 = this.pressedLink;
                    if (linkSpanDrawable3 != null) {
                        if (linkSpanDrawable3.getSpan() instanceof URLSpan) {
                            Browser.openUrl(getContext(), ((URLSpan) this.pressedLink.getSpan()).getURL());
                        } else if (this.pressedLink.getSpan() instanceof ClickableSpan) {
                            ((ClickableSpan) this.pressedLink.getSpan()).onClick(this);
                        }
                        resetPressedLink(2);
                    } else {
                        this.gamePreviewPressed = false;
                        int i4 = 0;
                        while (true) {
                            if (i4 >= this.botButtons.size()) {
                                break;
                            }
                            BotButton botButton = this.botButtons.get(i4);
                            if (botButton.button instanceof TLRPC$TL_keyboardButtonGame) {
                                playSoundEffect(0);
                                this.delegate.didPressBotButton(this, botButton.button);
                                invalidate();
                                break;
                            }
                            i4++;
                        }
                        resetPressedLink(2);
                        return true;
                    }
                }
            } else {
                resetPressedLink(2);
            }
        }
        return false;
    }

    private boolean checkTranscribeButtonMotionEvent(MotionEvent motionEvent) {
        TranscribeButton transcribeButton;
        return this.useTranscribeButton && (transcribeButton = this.transcribeButton) != null && transcribeButton.onTouch(motionEvent.getAction(), motionEvent.getX() - this.transcribeX, motionEvent.getY() - this.transcribeY);
    }

    /* JADX WARN: Removed duplicated region for block: B:48:0x00e9  */
    /* JADX WARN: Removed duplicated region for block: B:49:0x00ec  */
    /* JADX WARN: Removed duplicated region for block: B:74:0x0164  */
    /* JADX WARN: Removed duplicated region for block: B:76:0x016a  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private boolean checkLinkPreviewMotionEvent(MotionEvent motionEvent) {
        boolean z;
        int i;
        int i2;
        int i3;
        int i4;
        boolean z2;
        LinkSpanDrawable linkSpanDrawable;
        if (this.currentMessageObject.type == 0 && this.hasLinkPreview) {
            int x = (int) motionEvent.getX();
            int y = (int) motionEvent.getY();
            int i5 = this.unmovedTextX;
            if (x >= i5 && x <= i5 + this.backgroundWidth) {
                int i6 = this.textY;
                int i7 = this.currentMessageObject.textHeight;
                if (y >= i6 + i7) {
                    if (y <= i6 + i7 + this.linkPreviewHeight + AndroidUtilities.dp((this.drawInstantView ? 46 : 0) + 8)) {
                        if (motionEvent.getAction() == 0) {
                            if (this.descriptionLayout != null && y >= this.descriptionY) {
                                try {
                                    int dp = x - ((this.unmovedTextX + AndroidUtilities.dp(10.0f)) + this.descriptionX);
                                    int i8 = y - this.descriptionY;
                                    if (i8 <= this.descriptionLayout.getHeight()) {
                                        int lineForVertical = this.descriptionLayout.getLineForVertical(i8);
                                        float f = dp;
                                        int offsetForHorizontal = this.descriptionLayout.getOffsetForHorizontal(lineForVertical, f);
                                        float lineLeft = this.descriptionLayout.getLineLeft(lineForVertical);
                                        if (lineLeft <= f && lineLeft + this.descriptionLayout.getLineWidth(lineForVertical) >= f) {
                                            Spannable spannable = (Spannable) this.currentMessageObject.linkDescription;
                                            ClickableSpan[] clickableSpanArr = (ClickableSpan[]) spannable.getSpans(offsetForHorizontal, offsetForHorizontal, ClickableSpan.class);
                                            if (clickableSpanArr.length != 0 && (!(clickableSpanArr[0] instanceof URLSpanBotCommand) || URLSpanBotCommand.enabled)) {
                                                z2 = false;
                                                if (!z2 && !AndroidUtilities.isAccessibilityScreenReaderEnabled()) {
                                                    linkSpanDrawable = this.pressedLink;
                                                    if (linkSpanDrawable != null || linkSpanDrawable.getSpan() != clickableSpanArr[0]) {
                                                        this.links.removeLink(this.pressedLink);
                                                        LinkSpanDrawable linkSpanDrawable2 = new LinkSpanDrawable(clickableSpanArr[0], this.resourcesProvider, x, y, spanSupportsLongPress(clickableSpanArr[0]));
                                                        this.pressedLink = linkSpanDrawable2;
                                                        linkSpanDrawable2.setColor(getThemedColor(!this.currentMessageObject.isOutOwner() ? "chat_outLinkSelectBackground" : "chat_linkSelectBackground"));
                                                        this.linkBlockNum = -10;
                                                        this.pressedLinkType = 2;
                                                        startCheckLongPress();
                                                        try {
                                                            LinkPath obtainNewPath = this.pressedLink.obtainNewPath();
                                                            int[] realSpanStartAndEnd = getRealSpanStartAndEnd(spannable, this.pressedLink.getSpan());
                                                            obtainNewPath.setCurrentLayout(this.descriptionLayout, realSpanStartAndEnd[0], 0.0f);
                                                            this.descriptionLayout.getSelectionPath(realSpanStartAndEnd[0], realSpanStartAndEnd[1], obtainNewPath);
                                                        } catch (Exception e) {
                                                            FileLog.e(e);
                                                        }
                                                        this.links.addLink(this.pressedLink, 2);
                                                    }
                                                    invalidate();
                                                    return true;
                                                }
                                            }
                                            z2 = true;
                                            if (!z2) {
                                                linkSpanDrawable = this.pressedLink;
                                                if (linkSpanDrawable != null) {
                                                }
                                                this.links.removeLink(this.pressedLink);
                                                LinkSpanDrawable linkSpanDrawable22 = new LinkSpanDrawable(clickableSpanArr[0], this.resourcesProvider, x, y, spanSupportsLongPress(clickableSpanArr[0]));
                                                this.pressedLink = linkSpanDrawable22;
                                                linkSpanDrawable22.setColor(getThemedColor(!this.currentMessageObject.isOutOwner() ? "chat_outLinkSelectBackground" : "chat_linkSelectBackground"));
                                                this.linkBlockNum = -10;
                                                this.pressedLinkType = 2;
                                                startCheckLongPress();
                                                LinkPath obtainNewPath2 = this.pressedLink.obtainNewPath();
                                                int[] realSpanStartAndEnd2 = getRealSpanStartAndEnd(spannable, this.pressedLink.getSpan());
                                                obtainNewPath2.setCurrentLayout(this.descriptionLayout, realSpanStartAndEnd2[0], 0.0f);
                                                this.descriptionLayout.getSelectionPath(realSpanStartAndEnd2[0], realSpanStartAndEnd2[1], obtainNewPath2);
                                                this.links.addLink(this.pressedLink, 2);
                                                invalidate();
                                                return true;
                                            }
                                        }
                                    }
                                } catch (Exception e2) {
                                    FileLog.e(e2);
                                }
                            }
                            if (this.pressedLink == null) {
                                int dp2 = AndroidUtilities.dp(48.0f);
                                if (this.miniButtonState >= 0) {
                                    int dp3 = AndroidUtilities.dp(27.0f);
                                    int i9 = this.buttonX;
                                    if (x >= i9 + dp3 && x <= i9 + dp3 + dp2) {
                                        int i10 = this.buttonY;
                                        if (y >= i10 + dp3 && y <= i10 + dp3 + dp2) {
                                            z = true;
                                            if (!z) {
                                                this.miniButtonPressed = 1;
                                                invalidate();
                                                return true;
                                            } else if (this.drawVideoImageButton && this.buttonState != -1 && x >= (i3 = this.videoButtonX) && x <= i3 + AndroidUtilities.dp(34.0f) + Math.max(this.infoWidth, this.docTitleWidth) && y >= (i4 = this.videoButtonY) && y <= i4 + AndroidUtilities.dp(30.0f)) {
                                                this.videoButtonPressed = 1;
                                                invalidate();
                                                return true;
                                            } else if (this.drawPhotoImage && this.drawImageButton && this.buttonState != -1 && ((!this.checkOnlyButtonPressed && this.photoImage.isInsideImage(x, y)) || (x >= (i = this.buttonX) && x <= i + AndroidUtilities.dp(48.0f) && y >= (i2 = this.buttonY) && y <= i2 + AndroidUtilities.dp(48.0f) && this.radialProgress.getIcon() != 4))) {
                                                this.buttonPressed = 1;
                                                invalidate();
                                                return true;
                                            } else if (this.drawInstantView) {
                                                this.instantPressed = true;
                                                this.selectorDrawableMaskType[0] = 0;
                                                if (Build.VERSION.SDK_INT >= 21) {
                                                    Drawable[] drawableArr = this.selectorDrawable;
                                                    if (drawableArr[0] != null && drawableArr[0].getBounds().contains(x, y)) {
                                                        this.selectorDrawable[0].setHotspot(x, y);
                                                        this.selectorDrawable[0].setState(this.pressedState);
                                                        this.instantButtonPressed = true;
                                                    }
                                                }
                                                invalidate();
                                                return true;
                                            } else if (this.documentAttachType != 1 && this.drawPhotoImage && this.photoImage.isInsideImage(x, y)) {
                                                this.linkPreviewPressed = true;
                                                TLRPC$WebPage tLRPC$WebPage = this.currentMessageObject.messageOwner.media.webpage;
                                                if (this.documentAttachType != 2 || this.buttonState != -1 || !SharedConfig.autoplayGifs || (this.photoImage.getAnimation() != null && TextUtils.isEmpty(tLRPC$WebPage.embed_url))) {
                                                    return true;
                                                }
                                                this.linkPreviewPressed = false;
                                                return false;
                                            }
                                        }
                                    }
                                }
                                z = false;
                                if (!z) {
                                }
                            }
                        } else if (motionEvent.getAction() == 1) {
                            if (this.instantPressed) {
                                ChatMessageCellDelegate chatMessageCellDelegate = this.delegate;
                                if (chatMessageCellDelegate != null) {
                                    chatMessageCellDelegate.didPressInstantButton(this, this.drawInstantViewType);
                                }
                                playSoundEffect(0);
                                if (Build.VERSION.SDK_INT >= 21) {
                                    Drawable[] drawableArr2 = this.selectorDrawable;
                                    if (drawableArr2[0] != null) {
                                        drawableArr2[0].setState(StateSet.NOTHING);
                                    }
                                }
                                this.instantButtonPressed = false;
                                this.instantPressed = false;
                                invalidate();
                            } else if (this.pressedLinkType == 2 || this.buttonPressed != 0 || this.miniButtonPressed != 0 || this.videoButtonPressed != 0 || this.linkPreviewPressed) {
                                if (this.videoButtonPressed == 1) {
                                    this.videoButtonPressed = 0;
                                    playSoundEffect(0);
                                    didPressButton(true, true);
                                    invalidate();
                                } else if (this.buttonPressed != 0) {
                                    this.buttonPressed = 0;
                                    playSoundEffect(0);
                                    if (this.drawVideoImageButton) {
                                        didClickedImage();
                                    } else {
                                        didPressButton(true, false);
                                    }
                                    invalidate();
                                } else if (this.miniButtonPressed != 0) {
                                    this.miniButtonPressed = 0;
                                    playSoundEffect(0);
                                    didPressMiniButton(true);
                                    invalidate();
                                } else {
                                    LinkSpanDrawable linkSpanDrawable3 = this.pressedLink;
                                    if (linkSpanDrawable3 != null) {
                                        if (linkSpanDrawable3.getSpan() instanceof URLSpan) {
                                            this.delegate.didPressUrl(this, this.pressedLink.getSpan(), false);
                                        } else if (this.pressedLink.getSpan() instanceof ClickableSpan) {
                                            ((ClickableSpan) this.pressedLink.getSpan()).onClick(this);
                                        }
                                        resetPressedLink(2);
                                    } else {
                                        int i11 = this.documentAttachType;
                                        if (i11 == 7) {
                                            if (!MediaController.getInstance().isPlayingMessage(this.currentMessageObject) || MediaController.getInstance().isMessagePaused()) {
                                                this.delegate.needPlayMessage(this.currentMessageObject);
                                            } else {
                                                MediaController.getInstance().lambda$startAudioAgain$7(this.currentMessageObject);
                                            }
                                        } else if (i11 == 2 && this.drawImageButton) {
                                            int i12 = this.buttonState;
                                            if (i12 == -1) {
                                                if (SharedConfig.autoplayGifs) {
                                                    this.delegate.didPressImage(this, this.lastTouchX, this.lastTouchY);
                                                } else {
                                                    this.buttonState = 2;
                                                    this.currentMessageObject.gifState = 1.0f;
                                                    this.photoImage.setAllowStartAnimation(false);
                                                    this.photoImage.stopAnimation();
                                                    this.radialProgress.setIcon(getIconForCurrentState(), false, true);
                                                    invalidate();
                                                    playSoundEffect(0);
                                                }
                                            } else if (i12 == 2 || i12 == 0) {
                                                didPressButton(true, false);
                                                playSoundEffect(0);
                                            }
                                        } else {
                                            TLRPC$WebPage tLRPC$WebPage2 = this.currentMessageObject.messageOwner.media.webpage;
                                            if (tLRPC$WebPage2 != null && !TextUtils.isEmpty(tLRPC$WebPage2.embed_url)) {
                                                this.delegate.needOpenWebView(this.currentMessageObject, tLRPC$WebPage2.embed_url, tLRPC$WebPage2.site_name, tLRPC$WebPage2.title, tLRPC$WebPage2.url, tLRPC$WebPage2.embed_width, tLRPC$WebPage2.embed_height);
                                            } else {
                                                int i13 = this.buttonState;
                                                if (i13 == -1 || i13 == 3) {
                                                    this.delegate.didPressImage(this, this.lastTouchX, this.lastTouchY);
                                                    playSoundEffect(0);
                                                } else if (tLRPC$WebPage2 != null) {
                                                    Browser.openUrl(getContext(), tLRPC$WebPage2.url);
                                                }
                                            }
                                        }
                                        resetPressedLink(2);
                                        return true;
                                    }
                                }
                            } else if (!this.hadLongPress) {
                                this.hadLongPress = false;
                                resetPressedLink(2);
                            }
                        } else if (motionEvent.getAction() == 2 && this.instantButtonPressed && Build.VERSION.SDK_INT >= 21) {
                            Drawable[] drawableArr3 = this.selectorDrawable;
                            if (drawableArr3[0] != null) {
                                drawableArr3[0].setHotspot(x, y);
                            }
                        }
                    }
                }
            }
        }
        return false;
    }

    private boolean checkPollButtonMotionEvent(MotionEvent motionEvent) {
        int i;
        int i2;
        if (this.currentMessageObject.eventId != 0 || this.pollVoteInProgress || this.pollUnvoteInProgress || this.pollButtons.isEmpty()) {
            return false;
        }
        MessageObject messageObject = this.currentMessageObject;
        if (messageObject.type != 17 || !messageObject.isSent()) {
            return false;
        }
        int x = (int) motionEvent.getX();
        int y = (int) motionEvent.getY();
        if (motionEvent.getAction() == 0) {
            this.pressedVoteButton = -1;
            this.pollHintPressed = false;
            if (this.hintButtonVisible && (i = this.pollHintX) != -1 && x >= i && x <= i + AndroidUtilities.dp(40.0f) && y >= (i2 = this.pollHintY) && y <= i2 + AndroidUtilities.dp(40.0f)) {
                this.pollHintPressed = true;
                this.selectorDrawableMaskType[0] = 3;
                if (Build.VERSION.SDK_INT >= 21) {
                    Drawable[] drawableArr = this.selectorDrawable;
                    if (drawableArr[0] != null) {
                        drawableArr[0].setBounds(this.pollHintX - AndroidUtilities.dp(8.0f), this.pollHintY - AndroidUtilities.dp(8.0f), this.pollHintX + AndroidUtilities.dp(32.0f), this.pollHintY + AndroidUtilities.dp(32.0f));
                        this.selectorDrawable[0].setHotspot(x, y);
                        this.selectorDrawable[0].setState(this.pressedState);
                    }
                }
                invalidate();
            } else {
                for (int i3 = 0; i3 < this.pollButtons.size(); i3++) {
                    PollButton pollButton = this.pollButtons.get(i3);
                    int dp = (pollButton.y + this.namesOffset) - AndroidUtilities.dp(13.0f);
                    int i4 = pollButton.x;
                    if (x >= i4 && x <= (i4 + this.backgroundWidth) - AndroidUtilities.dp(31.0f) && y >= dp && y <= pollButton.height + dp + AndroidUtilities.dp(26.0f)) {
                        this.pressedVoteButton = i3;
                        if (!this.pollVoted && !this.pollClosed) {
                            this.selectorDrawableMaskType[0] = 1;
                            if (Build.VERSION.SDK_INT >= 21) {
                                Drawable[] drawableArr2 = this.selectorDrawable;
                                if (drawableArr2[0] != null) {
                                    drawableArr2[0].setBounds(pollButton.x - AndroidUtilities.dp(9.0f), dp, (pollButton.x + this.backgroundWidth) - AndroidUtilities.dp(22.0f), pollButton.height + dp + AndroidUtilities.dp(26.0f));
                                    this.selectorDrawable[0].setHotspot(x, y);
                                    this.selectorDrawable[0].setState(this.pressedState);
                                }
                            }
                            invalidate();
                        }
                    }
                }
                return false;
            }
            return true;
        } else if (motionEvent.getAction() == 1) {
            if (this.pollHintPressed) {
                playSoundEffect(0);
                this.delegate.didPressHint(this, 0);
                this.pollHintPressed = false;
                if (Build.VERSION.SDK_INT < 21) {
                    return false;
                }
                Drawable[] drawableArr3 = this.selectorDrawable;
                if (drawableArr3[0] == null) {
                    return false;
                }
                drawableArr3[0].setState(StateSet.NOTHING);
                return false;
            } else if (this.pressedVoteButton == -1) {
                return false;
            } else {
                playSoundEffect(0);
                if (Build.VERSION.SDK_INT >= 21) {
                    Drawable[] drawableArr4 = this.selectorDrawable;
                    if (drawableArr4[0] != null) {
                        drawableArr4[0].setState(StateSet.NOTHING);
                    }
                }
                if (this.currentMessageObject.scheduled) {
                    Toast.makeText(getContext(), LocaleController.getString("MessageScheduledVote", R.string.MessageScheduledVote), 1).show();
                } else {
                    PollButton pollButton2 = this.pollButtons.get(this.pressedVoteButton);
                    TLRPC$TL_pollAnswer tLRPC$TL_pollAnswer = pollButton2.answer;
                    if (this.pollVoted || this.pollClosed) {
                        ArrayList<TLRPC$TL_pollAnswer> arrayList = new ArrayList<>();
                        arrayList.add(tLRPC$TL_pollAnswer);
                        this.delegate.didPressVoteButtons(this, arrayList, pollButton2.count, pollButton2.x + AndroidUtilities.dp(50.0f), this.namesOffset + pollButton2.y);
                    } else if (this.lastPoll.multiple_choice) {
                        if (this.currentMessageObject.checkedVotes.contains(tLRPC$TL_pollAnswer)) {
                            this.currentMessageObject.checkedVotes.remove(tLRPC$TL_pollAnswer);
                            this.pollCheckBox[this.pressedVoteButton].setChecked(false, true);
                        } else {
                            this.currentMessageObject.checkedVotes.add(tLRPC$TL_pollAnswer);
                            this.pollCheckBox[this.pressedVoteButton].setChecked(true, true);
                        }
                    } else {
                        this.pollVoteInProgressNum = this.pressedVoteButton;
                        this.pollVoteInProgress = true;
                        this.vibrateOnPollVote = true;
                        this.voteCurrentProgressTime = 0.0f;
                        this.firstCircleLength = true;
                        this.voteCurrentCircleLength = 360.0f;
                        this.voteRisingCircleLength = false;
                        ArrayList<TLRPC$TL_pollAnswer> arrayList2 = new ArrayList<>();
                        arrayList2.add(tLRPC$TL_pollAnswer);
                        this.delegate.didPressVoteButtons(this, arrayList2, -1, 0, 0);
                    }
                }
                this.pressedVoteButton = -1;
                invalidate();
                return false;
            }
        } else if (motionEvent.getAction() != 2) {
            return false;
        } else {
            if ((this.pressedVoteButton == -1 && !this.pollHintPressed) || Build.VERSION.SDK_INT < 21) {
                return false;
            }
            Drawable[] drawableArr5 = this.selectorDrawable;
            if (drawableArr5[0] == null) {
                return false;
            }
            drawableArr5[0].setHotspot(x, y);
            return false;
        }
    }

    private boolean checkInstantButtonMotionEvent(MotionEvent motionEvent) {
        if (this.currentMessageObject.isSponsored() || (this.drawInstantView && this.currentMessageObject.type != 0)) {
            int x = (int) motionEvent.getX();
            int y = (int) motionEvent.getY();
            int i = 2;
            if (motionEvent.getAction() == 0) {
                if (this.drawInstantView) {
                    float f = x;
                    float f2 = y;
                    if (this.instantButtonRect.contains(f, f2)) {
                        int[] iArr = this.selectorDrawableMaskType;
                        if (this.lastPoll == null) {
                            i = 0;
                        }
                        iArr[0] = i;
                        this.instantPressed = true;
                        if (Build.VERSION.SDK_INT >= 21 && this.selectorDrawable[0] != null && this.instantButtonRect.contains(f, f2)) {
                            this.selectorDrawable[0].setHotspot(f, f2);
                            this.selectorDrawable[0].setState(this.pressedState);
                            this.instantButtonPressed = true;
                        }
                        invalidate();
                        return true;
                    }
                }
            } else if (motionEvent.getAction() == 1) {
                if (this.instantPressed) {
                    ChatMessageCellDelegate chatMessageCellDelegate = this.delegate;
                    if (chatMessageCellDelegate != null) {
                        if (this.lastPoll != null) {
                            MessageObject messageObject = this.currentMessageObject;
                            if (messageObject.scheduled) {
                                Toast.makeText(getContext(), LocaleController.getString("MessageScheduledVoteResults", R.string.MessageScheduledVoteResults), 1).show();
                            } else if (this.pollVoted || this.pollClosed) {
                                chatMessageCellDelegate.didPressInstantButton(this, this.drawInstantViewType);
                            } else {
                                if (!messageObject.checkedVotes.isEmpty()) {
                                    this.pollVoteInProgressNum = -1;
                                    this.pollVoteInProgress = true;
                                    this.vibrateOnPollVote = true;
                                    this.voteCurrentProgressTime = 0.0f;
                                    this.firstCircleLength = true;
                                    this.voteCurrentCircleLength = 360.0f;
                                    this.voteRisingCircleLength = false;
                                }
                                this.delegate.didPressVoteButtons(this, this.currentMessageObject.checkedVotes, -1, 0, this.namesOffset);
                            }
                        } else {
                            chatMessageCellDelegate.didPressInstantButton(this, this.drawInstantViewType);
                        }
                    }
                    playSoundEffect(0);
                    if (Build.VERSION.SDK_INT >= 21) {
                        Drawable[] drawableArr = this.selectorDrawable;
                        if (drawableArr[0] != null) {
                            drawableArr[0].setState(StateSet.NOTHING);
                        }
                    }
                    this.instantButtonPressed = false;
                    this.instantPressed = false;
                    invalidate();
                }
            } else if (motionEvent.getAction() == 2 && this.instantButtonPressed && Build.VERSION.SDK_INT >= 21) {
                Drawable[] drawableArr2 = this.selectorDrawable;
                if (drawableArr2[0] != null) {
                    drawableArr2[0].setHotspot(x, y);
                }
            }
            return false;
        }
        return false;
    }

    private void invalidateWithParent() {
        if (this.currentMessagesGroup != null && getParent() != null) {
            ((ViewGroup) getParent()).invalidate();
        }
        invalidate();
    }

    private boolean checkCommentButtonMotionEvent(MotionEvent motionEvent) {
        int i = 0;
        if (!this.drawCommentButton) {
            return false;
        }
        int x = (int) motionEvent.getX();
        int y = (int) motionEvent.getY();
        MessageObject.GroupedMessagePosition groupedMessagePosition = this.currentPosition;
        if (groupedMessagePosition != null && (groupedMessagePosition.flags & 1) == 0 && this.commentButtonRect.contains(x, y)) {
            ViewGroup viewGroup = (ViewGroup) getParent();
            int childCount = viewGroup.getChildCount();
            while (true) {
                if (i >= childCount) {
                    break;
                }
                View childAt = viewGroup.getChildAt(i);
                if (childAt != this && (childAt instanceof ChatMessageCell)) {
                    ChatMessageCell chatMessageCell = (ChatMessageCell) childAt;
                    if (chatMessageCell.drawCommentButton && chatMessageCell.currentMessagesGroup == this.currentMessagesGroup && (chatMessageCell.currentPosition.flags & 1) != 0) {
                        MotionEvent obtain = MotionEvent.obtain(0L, 0L, motionEvent.getActionMasked(), (motionEvent.getX() + getLeft()) - chatMessageCell.getLeft(), (motionEvent.getY() + getTop()) - chatMessageCell.getTop(), 0);
                        chatMessageCell.checkCommentButtonMotionEvent(obtain);
                        obtain.recycle();
                        break;
                    }
                }
                i++;
            }
            return true;
        }
        if (motionEvent.getAction() == 0) {
            if (this.commentButtonRect.contains(x, y)) {
                if (this.currentMessageObject.isSent()) {
                    this.selectorDrawableMaskType[1] = 2;
                    this.commentButtonPressed = true;
                    if (Build.VERSION.SDK_INT >= 21) {
                        Drawable[] drawableArr = this.selectorDrawable;
                        if (drawableArr[1] != null) {
                            drawableArr[1].setHotspot(x, y);
                            this.selectorDrawable[1].setState(this.pressedState);
                        }
                    }
                    invalidateWithParent();
                }
                return true;
            }
        } else if (motionEvent.getAction() == 1) {
            if (this.commentButtonPressed) {
                ChatMessageCellDelegate chatMessageCellDelegate = this.delegate;
                if (chatMessageCellDelegate != null) {
                    if (this.isRepliesChat) {
                        chatMessageCellDelegate.didPressSideButton(this);
                    } else {
                        chatMessageCellDelegate.didPressCommentButton(this);
                    }
                }
                playSoundEffect(0);
                if (Build.VERSION.SDK_INT >= 21) {
                    Drawable[] drawableArr2 = this.selectorDrawable;
                    if (drawableArr2[1] != null) {
                        drawableArr2[1].setState(StateSet.NOTHING);
                    }
                }
                this.commentButtonPressed = false;
                invalidateWithParent();
            }
        } else if (motionEvent.getAction() == 2 && this.commentButtonPressed && Build.VERSION.SDK_INT >= 21) {
            Drawable[] drawableArr3 = this.selectorDrawable;
            if (drawableArr3[1] != null) {
                drawableArr3[1].setHotspot(x, y);
            }
        }
        return false;
    }

    /* JADX WARN: Type inference failed for: r11v24, types: [boolean] */
    private boolean checkOtherButtonMotionEvent(MotionEvent motionEvent) {
        MessageObject.GroupedMessagePosition groupedMessagePosition;
        int i = this.documentAttachType;
        if ((i == 5 || i == 1) && (groupedMessagePosition = this.currentPosition) != null && (groupedMessagePosition.flags & 4) == 0) {
            return false;
        }
        int i2 = this.currentMessageObject.type;
        boolean z = i2 == 16;
        if (!z) {
            z = (i == 1 || i2 == 12 || i == 5 || i == 4 || i == 2 || i2 == 8) && !this.hasGamePreview && !this.hasInvoicePreview;
        }
        if (!z) {
            return false;
        }
        int x = (int) motionEvent.getX();
        int y = (int) motionEvent.getY();
        if (motionEvent.getAction() == 0) {
            MessageObject messageObject = this.currentMessageObject;
            if (messageObject.type == 16) {
                ?? isVideoCall = messageObject.isVideoCall();
                int i3 = this.otherX;
                if (x >= i3) {
                    if (x <= i3 + AndroidUtilities.dp((isVideoCall == 0 ? 202 : 200) + 30) && y >= this.otherY - AndroidUtilities.dp(14.0f) && y <= this.otherY + AndroidUtilities.dp(50.0f)) {
                        this.otherPressed = true;
                        this.selectorDrawableMaskType[0] = 4;
                        if (Build.VERSION.SDK_INT >= 21 && this.selectorDrawable[0] != null) {
                            int dp = this.otherX + AndroidUtilities.dp(isVideoCall == 0 ? 202.0f : 200.0f) + (Theme.chat_msgInCallDrawable[isVideoCall == true ? 1 : 0].getIntrinsicWidth() / 2);
                            int intrinsicHeight = this.otherY + (Theme.chat_msgInCallDrawable[isVideoCall].getIntrinsicHeight() / 2);
                            this.selectorDrawable[0].setBounds(dp - AndroidUtilities.dp(20.0f), intrinsicHeight - AndroidUtilities.dp(20.0f), dp + AndroidUtilities.dp(20.0f), intrinsicHeight + AndroidUtilities.dp(20.0f));
                            this.selectorDrawable[0].setHotspot(x, y);
                            this.selectorDrawable[0].setState(this.pressedState);
                        }
                        invalidate();
                        return true;
                    }
                }
            } else if (x >= this.otherX - AndroidUtilities.dp(20.0f) && x <= this.otherX + AndroidUtilities.dp(20.0f) && y >= this.otherY - AndroidUtilities.dp(4.0f) && y <= this.otherY + AndroidUtilities.dp(30.0f)) {
                this.otherPressed = true;
                invalidate();
                return true;
            }
        } else if (motionEvent.getAction() == 1) {
            if (this.otherPressed) {
                if (this.currentMessageObject.type == 16 && Build.VERSION.SDK_INT >= 21) {
                    Drawable[] drawableArr = this.selectorDrawable;
                    if (drawableArr[0] != null) {
                        drawableArr[0].setState(StateSet.NOTHING);
                    }
                }
                this.otherPressed = false;
                playSoundEffect(0);
                this.delegate.didPressOther(this, this.otherX, this.otherY);
                invalidate();
                return true;
            }
        } else if (motionEvent.getAction() == 2 && this.currentMessageObject.type == 16 && this.otherPressed && Build.VERSION.SDK_INT >= 21) {
            Drawable[] drawableArr2 = this.selectorDrawable;
            if (drawableArr2[0] != null) {
                drawableArr2[0].setHotspot(x, y);
            }
        }
        return false;
    }

    private boolean checkDateMotionEvent(MotionEvent motionEvent) {
        if (!this.currentMessageObject.isImportedForward()) {
            return false;
        }
        int x = (int) motionEvent.getX();
        int y = (int) motionEvent.getY();
        if (motionEvent.getAction() == 0) {
            float f = x;
            float f2 = this.drawTimeX;
            if (f < f2 || f > f2 + this.timeWidth) {
                return false;
            }
            float f3 = y;
            float f4 = this.drawTimeY;
            if (f3 < f4 || f3 > f4 + AndroidUtilities.dp(20.0f)) {
                return false;
            }
            this.timePressed = true;
            invalidate();
        } else if (motionEvent.getAction() != 1 || !this.timePressed) {
            return false;
        } else {
            this.timePressed = false;
            playSoundEffect(0);
            this.delegate.didPressTime(this);
            invalidate();
        }
        return true;
    }

    private boolean checkRoundSeekbar(MotionEvent motionEvent) {
        if (!MediaController.getInstance().isPlayingMessage(this.currentMessageObject) || !MediaController.getInstance().isMessagePaused()) {
            return false;
        }
        int x = (int) motionEvent.getX();
        int y = (int) motionEvent.getY();
        if (motionEvent.getAction() == 0) {
            float f = x;
            if (f >= this.seekbarRoundX - AndroidUtilities.dp(20.0f) && f <= this.seekbarRoundX + AndroidUtilities.dp(20.0f)) {
                float f2 = y;
                if (f2 >= this.seekbarRoundY - AndroidUtilities.dp(20.0f) && f2 <= this.seekbarRoundY + AndroidUtilities.dp(20.0f)) {
                    getParent().requestDisallowInterceptTouchEvent(true);
                    cancelCheckLongPress();
                    this.roundSeekbarTouched = 1;
                    invalidate();
                }
            }
            float centerX = f - this.photoImage.getCenterX();
            float centerY = y - this.photoImage.getCenterY();
            float imageWidth = (this.photoImage.getImageWidth() - AndroidUtilities.dp(64.0f)) / 2.0f;
            float f3 = (centerX * centerX) + (centerY * centerY);
            if (f3 < ((this.photoImage.getImageWidth() / 2.0f) * this.photoImage.getImageWidth()) / 2.0f && f3 > imageWidth * imageWidth) {
                getParent().requestDisallowInterceptTouchEvent(true);
                cancelCheckLongPress();
                this.roundSeekbarTouched = 1;
                invalidate();
            }
        } else if (this.roundSeekbarTouched == 1 && motionEvent.getAction() == 2) {
            float degrees = ((float) Math.toDegrees(Math.atan2(y - this.photoImage.getCenterY(), x - this.photoImage.getCenterX()))) + 90.0f;
            if (degrees < 0.0f) {
                degrees += 360.0f;
            }
            float f4 = degrees / 360.0f;
            if (Math.abs(this.currentMessageObject.audioProgress - f4) > 0.9f) {
                if (this.roundSeekbarOutAlpha == 0.0f) {
                    performHapticFeedback(3);
                }
                this.roundSeekbarOutAlpha = 1.0f;
                this.roundSeekbarOutProgress = this.currentMessageObject.audioProgress;
            }
            long currentTimeMillis = System.currentTimeMillis();
            if (currentTimeMillis - this.lastSeekUpdateTime > 100) {
                MediaController.getInstance().seekToProgress(this.currentMessageObject, f4);
                this.lastSeekUpdateTime = currentTimeMillis;
            }
            this.currentMessageObject.audioProgress = f4;
            updatePlayingMessageProgress();
        }
        if ((motionEvent.getAction() == 1 || motionEvent.getAction() == 3) && this.roundSeekbarTouched != 0) {
            if (motionEvent.getAction() == 1) {
                float degrees2 = ((float) Math.toDegrees(Math.atan2(y - this.photoImage.getCenterY(), x - this.photoImage.getCenterX()))) + 90.0f;
                if (degrees2 < 0.0f) {
                    degrees2 += 360.0f;
                }
                float f5 = degrees2 / 360.0f;
                this.currentMessageObject.audioProgress = f5;
                MediaController.getInstance().seekToProgress(this.currentMessageObject, f5);
                updatePlayingMessageProgress();
            }
            MediaController.getInstance().playMessage(this.currentMessageObject);
            this.roundSeekbarTouched = 0;
            getParent().requestDisallowInterceptTouchEvent(false);
        }
        return this.roundSeekbarTouched != 0;
    }

    /* JADX WARN: Removed duplicated region for block: B:26:0x0051  */
    /* JADX WARN: Removed duplicated region for block: B:27:0x0058  */
    /* JADX WARN: Removed duplicated region for block: B:90:0x0199  */
    /* JADX WARN: Removed duplicated region for block: B:97:0x01be  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private boolean checkPhotoImageMotionEvent(MotionEvent motionEvent) {
        boolean z;
        MessageObject messageObject;
        int i;
        int i2;
        int i3;
        int i4;
        boolean z2 = true;
        if ((this.drawPhotoImage || this.documentAttachType == 1) && (!this.currentMessageObject.isSending() || this.buttonState == 1)) {
            int x = (int) motionEvent.getX();
            int y = (int) motionEvent.getY();
            if (motionEvent.getAction() == 0) {
                int dp = AndroidUtilities.dp(48.0f);
                if (this.miniButtonState >= 0) {
                    int dp2 = AndroidUtilities.dp(27.0f);
                    int i5 = this.buttonX;
                    if (x >= i5 + dp2 && x <= i5 + dp2 + dp) {
                        int i6 = this.buttonY;
                        if (y >= i6 + dp2 && y <= i6 + dp2 + dp) {
                            z = true;
                            if (!z) {
                                this.miniButtonPressed = 1;
                                invalidate();
                            } else if (this.buttonState != -1 && this.radialProgress.getIcon() != 4 && x >= (i3 = this.buttonX) && x <= i3 + dp && y >= (i4 = this.buttonY) && y <= i4 + dp) {
                                this.buttonPressed = 1;
                                invalidate();
                            } else if (this.drawVideoImageButton && this.buttonState != -1 && x >= (i = this.videoButtonX) && x <= i + AndroidUtilities.dp(34.0f) + Math.max(this.infoWidth, this.docTitleWidth) && y >= (i2 = this.videoButtonY) && y <= i2 + AndroidUtilities.dp(30.0f)) {
                                this.videoButtonPressed = 1;
                                invalidate();
                            } else if (this.documentAttachType == 1) {
                                float f = x;
                                if (f >= this.photoImage.getImageX() && f <= (this.photoImage.getImageX() + this.backgroundWidth) - AndroidUtilities.dp(50.0f)) {
                                    float f2 = y;
                                    if (f2 >= this.photoImage.getImageY() && f2 <= this.photoImage.getImageY() + this.photoImage.getImageHeight()) {
                                        this.imagePressed = true;
                                    }
                                }
                                z2 = false;
                            } else {
                                if (!this.currentMessageObject.isAnyKindOfSticker() || this.currentMessageObject.getInputStickerSet() != null || this.currentMessageObject.isAnimatedEmoji() || this.currentMessageObject.isDice()) {
                                    float f3 = x;
                                    if (f3 >= this.photoImage.getImageX() && f3 <= this.photoImage.getImageX() + this.photoImage.getImageWidth()) {
                                        float f4 = y;
                                        if (f4 >= this.photoImage.getImageY() && f4 <= this.photoImage.getImageY() + this.photoImage.getImageHeight()) {
                                            if (this.isRoundVideo) {
                                                if (((f3 - this.photoImage.getCenterX()) * (f3 - this.photoImage.getCenterX())) + ((f4 - this.photoImage.getCenterY()) * (f4 - this.photoImage.getCenterY())) < (this.photoImage.getImageWidth() / 2.0f) * (this.photoImage.getImageWidth() / 2.0f)) {
                                                    this.imagePressed = true;
                                                }
                                            } else {
                                                this.imagePressed = true;
                                            }
                                            messageObject = this.currentMessageObject;
                                            if (messageObject.type == 12) {
                                                long j = messageObject.messageOwner.media.user_id;
                                                TLRPC$User tLRPC$User = null;
                                                if (j != 0) {
                                                    tLRPC$User = MessagesController.getInstance(this.currentAccount).getUser(Long.valueOf(j));
                                                }
                                                if (tLRPC$User == null) {
                                                    this.imagePressed = false;
                                                }
                                            }
                                        }
                                    }
                                    z2 = false;
                                    messageObject = this.currentMessageObject;
                                    if (messageObject.type == 12) {
                                    }
                                }
                                z2 = false;
                            }
                            if (this.imagePressed) {
                                if (this.currentMessageObject.isSendError()) {
                                    this.imagePressed = false;
                                    return false;
                                } else if (this.currentMessageObject.type == 8 && this.buttonState == -1 && SharedConfig.autoplayGifs && this.photoImage.getAnimation() == null) {
                                    this.imagePressed = false;
                                    return false;
                                }
                            }
                            return z2;
                        }
                    }
                }
                z = false;
                if (!z) {
                }
                if (this.imagePressed) {
                }
                return z2;
            } else if (motionEvent.getAction() != 1) {
                return false;
            } else {
                if (this.videoButtonPressed == 1) {
                    this.videoButtonPressed = 0;
                    playSoundEffect(0);
                    didPressButton(true, true);
                    invalidate();
                    return false;
                } else if (this.buttonPressed == 1) {
                    this.buttonPressed = 0;
                    playSoundEffect(0);
                    if (this.drawVideoImageButton) {
                        didClickedImage();
                    } else {
                        didPressButton(true, false);
                    }
                    invalidate();
                    return false;
                } else if (this.miniButtonPressed == 1) {
                    this.miniButtonPressed = 0;
                    playSoundEffect(0);
                    didPressMiniButton(true);
                    invalidate();
                    return false;
                } else if (!this.imagePressed) {
                    return false;
                } else {
                    this.imagePressed = false;
                    int i7 = this.buttonState;
                    if (i7 == -1 || i7 == 2 || i7 == 3 || this.drawVideoImageButton) {
                        playSoundEffect(0);
                        didClickedImage();
                    } else if (i7 == 0) {
                        playSoundEffect(0);
                        didPressButton(true, false);
                    }
                    invalidate();
                    return false;
                }
            }
        }
        return false;
    }

    /* JADX WARN: Code restructure failed: missing block: B:57:0x00da, code lost:
        if (r3 <= (r0 + r6)) goto L58;
     */
    /* JADX WARN: Code restructure failed: missing block: B:58:0x00dc, code lost:
        r0 = true;
     */
    /* JADX WARN: Code restructure failed: missing block: B:72:0x0114, code lost:
        if (r3 <= (r0 + r6)) goto L58;
     */
    /* JADX WARN: Removed duplicated region for block: B:46:0x00c5  */
    /* JADX WARN: Removed duplicated region for block: B:76:0x011e  */
    /* JADX WARN: Removed duplicated region for block: B:82:0x012e  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private boolean checkAudioMotionEvent(MotionEvent motionEvent) {
        boolean z;
        boolean z2;
        boolean z3;
        int i;
        int i2 = this.documentAttachType;
        if ((i2 == 3 || i2 == 5) && !AndroidUtilities.isAccessibilityScreenReaderEnabled()) {
            int x = (int) motionEvent.getX();
            int y = (int) motionEvent.getY();
            if (this.useSeekBarWaveform) {
                z = this.seekBarWaveform.onTouch(motionEvent.getAction(), (motionEvent.getX() - this.seekBarX) - AndroidUtilities.dp(13.0f), motionEvent.getY() - this.seekBarY);
            } else {
                z = MediaController.getInstance().isPlayingMessage(this.currentMessageObject) ? this.seekBar.onTouch(motionEvent.getAction(), motionEvent.getX() - this.seekBarX, motionEvent.getY() - this.seekBarY) : false;
            }
            if (z) {
                if (!this.useSeekBarWaveform && motionEvent.getAction() == 0) {
                    getParent().requestDisallowInterceptTouchEvent(true);
                } else if (this.useSeekBarWaveform && !this.seekBarWaveform.isStartDraging() && motionEvent.getAction() == 1) {
                    didPressButton(true, false);
                }
                this.disallowLongPress = true;
                invalidate();
                return z;
            }
            int dp = AndroidUtilities.dp(36.0f);
            if (this.miniButtonState >= 0) {
                int dp2 = AndroidUtilities.dp(27.0f);
                int i3 = this.buttonX;
                if (x >= i3 + dp2 && x <= i3 + dp2 + dp) {
                    int i4 = this.buttonY;
                    if (y >= i4 + dp2 && y <= i4 + dp2 + dp) {
                        z2 = true;
                        if (!z2) {
                            int i5 = this.buttonState;
                            if (i5 == 0 || i5 == 1 || i5 == 2) {
                                if (x >= this.buttonX - AndroidUtilities.dp(12.0f) && x <= (this.buttonX - AndroidUtilities.dp(12.0f)) + this.backgroundWidth) {
                                    boolean z4 = this.drawInstantView;
                                    if (y >= (z4 ? this.buttonY : this.namesOffset + this.mediaOffsetY)) {
                                        if (z4) {
                                            i = this.buttonY;
                                        } else {
                                            i = this.namesOffset + this.mediaOffsetY;
                                            dp = AndroidUtilities.dp(82.0f);
                                        }
                                    }
                                }
                            } else {
                                int i6 = this.buttonX;
                                if (x >= i6) {
                                    if (x <= i6 + dp) {
                                        int i7 = this.buttonY;
                                        if (y >= i7) {
                                        }
                                    }
                                }
                            }
                            if (motionEvent.getAction() == 0) {
                                if (!z3 && !z2) {
                                    return z;
                                }
                                if (z3) {
                                    this.buttonPressed = 1;
                                } else {
                                    this.miniButtonPressed = 1;
                                }
                                invalidate();
                                return true;
                            } else if (this.buttonPressed != 0) {
                                if (motionEvent.getAction() == 1) {
                                    this.buttonPressed = 0;
                                    playSoundEffect(0);
                                    didPressButton(true, false);
                                    invalidate();
                                    return z;
                                } else if (motionEvent.getAction() == 3) {
                                    this.buttonPressed = 0;
                                    invalidate();
                                    return z;
                                } else if (motionEvent.getAction() != 2 || z3) {
                                    return z;
                                } else {
                                    this.buttonPressed = 0;
                                    invalidate();
                                    return z;
                                }
                            } else if (this.miniButtonPressed == 0) {
                                return z;
                            } else {
                                if (motionEvent.getAction() == 1) {
                                    this.miniButtonPressed = 0;
                                    playSoundEffect(0);
                                    didPressMiniButton(true);
                                    invalidate();
                                    return z;
                                } else if (motionEvent.getAction() == 3) {
                                    this.miniButtonPressed = 0;
                                    invalidate();
                                    return z;
                                } else if (motionEvent.getAction() != 2 || z2) {
                                    return z;
                                } else {
                                    this.miniButtonPressed = 0;
                                    invalidate();
                                    return z;
                                }
                            }
                        }
                        z3 = false;
                        if (motionEvent.getAction() == 0) {
                        }
                    }
                }
            }
            z2 = false;
            if (!z2) {
            }
            z3 = false;
            if (motionEvent.getAction() == 0) {
            }
        } else {
            return false;
        }
    }

    public boolean checkSpoilersMotionEvent(MotionEvent motionEvent) {
        int i;
        MessageObject.GroupedMessages groupedMessages;
        if (this.currentMessageObject.hasValidGroupId() && (groupedMessages = this.currentMessagesGroup) != null && !groupedMessages.isDocuments) {
            ViewGroup viewGroup = (ViewGroup) getParent();
            for (int i2 = 0; i2 < viewGroup.getChildCount(); i2++) {
                View childAt = viewGroup.getChildAt(i2);
                if (childAt instanceof ChatMessageCell) {
                    ChatMessageCell chatMessageCell = (ChatMessageCell) childAt;
                    MessageObject.GroupedMessages currentMessagesGroup = chatMessageCell.getCurrentMessagesGroup();
                    MessageObject.GroupedMessagePosition currentPosition = chatMessageCell.getCurrentPosition();
                    if (currentMessagesGroup != null && currentMessagesGroup.groupId == this.currentMessagesGroup.groupId) {
                        int i3 = currentPosition.flags;
                        if ((i3 & 8) != 0 && (i3 & 1) != 0 && chatMessageCell != this) {
                            motionEvent.offsetLocation(getLeft() - chatMessageCell.getLeft(), getTop() - chatMessageCell.getTop());
                            boolean checkSpoilersMotionEvent = chatMessageCell.checkSpoilersMotionEvent(motionEvent);
                            motionEvent.offsetLocation(-(getLeft() - chatMessageCell.getLeft()), -(getTop() - chatMessageCell.getTop()));
                            return checkSpoilersMotionEvent;
                        }
                    }
                }
            }
        }
        if (this.isSpoilerRevealing) {
            return false;
        }
        int x = (int) motionEvent.getX();
        int y = (int) motionEvent.getY();
        int actionMasked = motionEvent.getActionMasked();
        if (actionMasked == 0) {
            int i4 = this.textX;
            if (x >= i4 && y >= (i = this.textY)) {
                MessageObject messageObject = this.currentMessageObject;
                if (x <= i4 + messageObject.textWidth && y <= i + messageObject.textHeight) {
                    ArrayList<MessageObject.TextLayoutBlock> arrayList = messageObject.textLayoutBlocks;
                    for (int i5 = 0; i5 < arrayList.size() && arrayList.get(i5).textYOffset <= y; i5++) {
                        MessageObject.TextLayoutBlock textLayoutBlock = arrayList.get(i5);
                        int i6 = textLayoutBlock.isRtl() ? (int) this.currentMessageObject.textXOffset : 0;
                        for (SpoilerEffect spoilerEffect : textLayoutBlock.spoilers) {
                            if (spoilerEffect.getBounds().contains((x - this.textX) + i6, (int) ((y - this.textY) - textLayoutBlock.textYOffset))) {
                                this.spoilerPressed = spoilerEffect;
                                this.isCaptionSpoilerPressed = false;
                                return true;
                            }
                        }
                    }
                }
            }
            if (hasCaptionLayout()) {
                float f = x;
                float f2 = this.captionX;
                if (f >= f2) {
                    float f3 = y;
                    if (f3 >= this.captionY && f <= f2 + this.captionLayout.getWidth() && f3 <= this.captionY + this.captionLayout.getHeight()) {
                        for (SpoilerEffect spoilerEffect2 : this.captionSpoilers) {
                            if (spoilerEffect2.getBounds().contains((int) (f - this.captionX), (int) (f3 - this.captionY))) {
                                this.spoilerPressed = spoilerEffect2;
                                this.isCaptionSpoilerPressed = true;
                                return true;
                            }
                        }
                    }
                }
            }
        } else if (actionMasked == 1 && this.spoilerPressed != null) {
            playSoundEffect(0);
            this.sPath.rewind();
            if (this.isCaptionSpoilerPressed) {
                for (SpoilerEffect spoilerEffect3 : this.captionSpoilers) {
                    Rect bounds = spoilerEffect3.getBounds();
                    this.sPath.addRect(bounds.left, bounds.top, bounds.right, bounds.bottom, Path.Direction.CW);
                }
            } else {
                Iterator<MessageObject.TextLayoutBlock> it = this.currentMessageObject.textLayoutBlocks.iterator();
                while (it.hasNext()) {
                    MessageObject.TextLayoutBlock next = it.next();
                    for (SpoilerEffect spoilerEffect4 : next.spoilers) {
                        Rect bounds2 = spoilerEffect4.getBounds();
                        float f4 = next.textYOffset;
                        this.sPath.addRect(bounds2.left, bounds2.top + f4, bounds2.right, bounds2.bottom + f4, Path.Direction.CW);
                    }
                }
            }
            this.sPath.computeBounds(this.rect, false);
            float sqrt = (float) Math.sqrt(Math.pow(this.rect.width(), 2.0d) + Math.pow(this.rect.height(), 2.0d));
            this.isSpoilerRevealing = true;
            this.spoilerPressed.setOnRippleEndCallback(new Runnable() { // from class: org.telegram.ui.Cells.ChatMessageCell$$ExternalSyntheticLambda2
                @Override // java.lang.Runnable
                public final void run() {
                    ChatMessageCell.this.lambda$checkSpoilersMotionEvent$1();
                }
            });
            if (this.isCaptionSpoilerPressed) {
                for (SpoilerEffect spoilerEffect5 : this.captionSpoilers) {
                    spoilerEffect5.startRipple(x - this.captionX, y - this.captionY, sqrt);
                }
            } else {
                ArrayList<MessageObject.TextLayoutBlock> arrayList2 = this.currentMessageObject.textLayoutBlocks;
                if (arrayList2 != null) {
                    Iterator<MessageObject.TextLayoutBlock> it2 = arrayList2.iterator();
                    while (it2.hasNext()) {
                        MessageObject.TextLayoutBlock next2 = it2.next();
                        int i7 = next2.isRtl() ? (int) this.currentMessageObject.textXOffset : 0;
                        for (SpoilerEffect spoilerEffect6 : next2.spoilers) {
                            spoilerEffect6.startRipple((x - this.textX) + i7, (y - next2.textYOffset) - this.textY, sqrt);
                        }
                    }
                }
            }
            if (getParent() instanceof RecyclerListView) {
                ViewGroup viewGroup2 = (ViewGroup) getParent();
                for (int i8 = 0; i8 < viewGroup2.getChildCount(); i8++) {
                    View childAt2 = viewGroup2.getChildAt(i8);
                    if (childAt2 instanceof ChatMessageCell) {
                        final ChatMessageCell chatMessageCell2 = (ChatMessageCell) childAt2;
                        if (chatMessageCell2.getMessageObject() != null && chatMessageCell2.getMessageObject().getReplyMsgId() == getMessageObject().getId() && !chatMessageCell2.replySpoilers.isEmpty()) {
                            chatMessageCell2.replySpoilers.get(0).setOnRippleEndCallback(new Runnable() { // from class: org.telegram.ui.Cells.ChatMessageCell$$ExternalSyntheticLambda6
                                @Override // java.lang.Runnable
                                public final void run() {
                                    ChatMessageCell.this.lambda$checkSpoilersMotionEvent$3(chatMessageCell2);
                                }
                            });
                            for (SpoilerEffect spoilerEffect7 : chatMessageCell2.replySpoilers) {
                                spoilerEffect7.startRipple(spoilerEffect7.getBounds().centerX(), spoilerEffect7.getBounds().centerY(), sqrt);
                            }
                        }
                    }
                }
            }
            this.spoilerPressed = null;
            return true;
        }
        return false;
    }

    public /* synthetic */ void lambda$checkSpoilersMotionEvent$1() {
        post(new Runnable() { // from class: org.telegram.ui.Cells.ChatMessageCell$$ExternalSyntheticLambda1
            @Override // java.lang.Runnable
            public final void run() {
                ChatMessageCell.this.lambda$checkSpoilersMotionEvent$0();
            }
        });
    }

    public /* synthetic */ void lambda$checkSpoilersMotionEvent$0() {
        this.isSpoilerRevealing = false;
        getMessageObject().isSpoilersRevealed = true;
        if (this.isCaptionSpoilerPressed) {
            this.captionSpoilers.clear();
        } else {
            ArrayList<MessageObject.TextLayoutBlock> arrayList = this.currentMessageObject.textLayoutBlocks;
            if (arrayList != null) {
                Iterator<MessageObject.TextLayoutBlock> it = arrayList.iterator();
                while (it.hasNext()) {
                    it.next().spoilers.clear();
                }
            }
        }
        invalidate();
    }

    public /* synthetic */ void lambda$checkSpoilersMotionEvent$3(ChatMessageCell chatMessageCell) {
        post(new Runnable() { // from class: org.telegram.ui.Cells.ChatMessageCell$$ExternalSyntheticLambda3
            @Override // java.lang.Runnable
            public final void run() {
                ChatMessageCell.lambda$checkSpoilersMotionEvent$2(ChatMessageCell.this);
            }
        });
    }

    public static /* synthetic */ void lambda$checkSpoilersMotionEvent$2(ChatMessageCell chatMessageCell) {
        chatMessageCell.getMessageObject().replyMessageObject.isSpoilersRevealed = true;
        chatMessageCell.replySpoilers.clear();
        chatMessageCell.invalidate();
    }

    private boolean checkBotButtonMotionEvent(MotionEvent motionEvent) {
        int i;
        if (this.botButtons.isEmpty() || this.currentMessageObject.eventId != 0) {
            return false;
        }
        int x = (int) motionEvent.getX();
        int y = (int) motionEvent.getY();
        if (motionEvent.getAction() == 0) {
            if (this.currentMessageObject.isOutOwner()) {
                i = (getMeasuredWidth() - this.widthForButtons) - AndroidUtilities.dp(10.0f);
            } else {
                i = this.backgroundDrawableLeft + AndroidUtilities.dp(this.mediaBackground ? 1.0f : 7.0f);
            }
            for (int i2 = 0; i2 < this.botButtons.size(); i2++) {
                BotButton botButton = this.botButtons.get(i2);
                int dp = (botButton.y + this.layoutHeight) - AndroidUtilities.dp(2.0f);
                if (x >= botButton.x + i && x <= botButton.x + i + botButton.width && y >= dp && y <= dp + botButton.height) {
                    this.pressedBotButton = i2;
                    invalidate();
                    final int i3 = this.pressedBotButton;
                    postDelayed(new Runnable() { // from class: org.telegram.ui.Cells.ChatMessageCell$$ExternalSyntheticLambda4
                        @Override // java.lang.Runnable
                        public final void run() {
                            ChatMessageCell.this.lambda$checkBotButtonMotionEvent$4(i3);
                        }
                    }, ViewConfiguration.getLongPressTimeout() - 1);
                    return true;
                }
            }
            return false;
        } else if (motionEvent.getAction() != 1 || this.pressedBotButton == -1) {
            return false;
        } else {
            playSoundEffect(0);
            if (this.currentMessageObject.scheduled) {
                Toast.makeText(getContext(), LocaleController.getString("MessageScheduledBotAction", R.string.MessageScheduledBotAction), 1).show();
            } else {
                BotButton botButton2 = this.botButtons.get(this.pressedBotButton);
                if (botButton2.button != null) {
                    this.delegate.didPressBotButton(this, botButton2.button);
                }
            }
            this.pressedBotButton = -1;
            invalidate();
            return false;
        }
    }

    public /* synthetic */ void lambda$checkBotButtonMotionEvent$4(int i) {
        int i2 = this.pressedBotButton;
        if (i == i2) {
            if (!this.currentMessageObject.scheduled) {
                BotButton botButton = this.botButtons.get(i2);
                if (botButton.button != null) {
                    cancelCheckLongPress();
                    this.delegate.didLongPressBotButton(this, botButton.button);
                }
            }
            this.pressedBotButton = -1;
            invalidate();
        }
    }

    /* JADX WARN: Code restructure failed: missing block: B:385:0x05ca, code lost:
        if (r4 > (r0 + org.telegram.messenger.AndroidUtilities.dp(32 + ((r19.drawSideButton != 3 || r19.commentLayout == null) ? 0 : 18)))) goto L386;
     */
    @Override // android.view.View
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public boolean onTouchEvent(MotionEvent motionEvent) {
        boolean z;
        int i;
        int i2;
        int i3;
        TLRPC$Chat tLRPC$Chat;
        int i4;
        int i5;
        int i6;
        int i7;
        if (this.currentMessageObject == null || !this.delegate.canPerformActions() || this.animationRunning) {
            checkTextSelection(motionEvent);
            return super.onTouchEvent(motionEvent);
        }
        boolean z2 = true;
        if (checkTextSelection(motionEvent) || checkRoundSeekbar(motionEvent) || checkReactionsTouchEvent(motionEvent)) {
            return true;
        }
        VideoPlayerRewinder videoPlayerRewinder = this.videoPlayerRewinder;
        int i8 = 0;
        if (videoPlayerRewinder != null && videoPlayerRewinder.rewindCount > 0) {
            if (motionEvent.getAction() != 1 && motionEvent.getAction() != 3) {
                return true;
            }
            getParent().requestDisallowInterceptTouchEvent(false);
            this.videoPlayerRewinder.cancelRewind();
            return false;
        }
        this.disallowLongPress = false;
        this.lastTouchX = motionEvent.getX();
        float y = motionEvent.getY();
        this.lastTouchY = y;
        this.backgroundDrawable.setTouchCoords(this.lastTouchX, y);
        boolean checkSpoilersMotionEvent = checkSpoilersMotionEvent(motionEvent);
        if (!checkSpoilersMotionEvent) {
            checkSpoilersMotionEvent = checkTextBlockMotionEvent(motionEvent);
        }
        if (!checkSpoilersMotionEvent) {
            checkSpoilersMotionEvent = checkPinchToZoom(motionEvent);
        }
        if (!checkSpoilersMotionEvent) {
            checkSpoilersMotionEvent = checkDateMotionEvent(motionEvent);
        }
        if (!checkSpoilersMotionEvent) {
            checkSpoilersMotionEvent = checkTextSelection(motionEvent);
        }
        if (!checkSpoilersMotionEvent) {
            checkSpoilersMotionEvent = checkOtherButtonMotionEvent(motionEvent);
        }
        if (!checkSpoilersMotionEvent) {
            checkSpoilersMotionEvent = checkCaptionMotionEvent(motionEvent);
        }
        if (!checkSpoilersMotionEvent) {
            checkSpoilersMotionEvent = checkTranscribeButtonMotionEvent(motionEvent);
        }
        if (!checkSpoilersMotionEvent) {
            checkSpoilersMotionEvent = checkAudioMotionEvent(motionEvent);
        }
        if (!checkSpoilersMotionEvent) {
            checkSpoilersMotionEvent = checkLinkPreviewMotionEvent(motionEvent);
        }
        if (!checkSpoilersMotionEvent) {
            checkSpoilersMotionEvent = checkInstantButtonMotionEvent(motionEvent);
        }
        if (!checkSpoilersMotionEvent) {
            checkSpoilersMotionEvent = checkCommentButtonMotionEvent(motionEvent);
        }
        if (!checkSpoilersMotionEvent) {
            checkSpoilersMotionEvent = checkGameMotionEvent(motionEvent);
        }
        if (!checkSpoilersMotionEvent) {
            checkSpoilersMotionEvent = checkPhotoImageMotionEvent(motionEvent);
        }
        if (!checkSpoilersMotionEvent) {
            checkSpoilersMotionEvent = checkBotButtonMotionEvent(motionEvent);
        }
        if (!checkSpoilersMotionEvent) {
            checkSpoilersMotionEvent = checkPollButtonMotionEvent(motionEvent);
        }
        if (motionEvent.getAction() == 3) {
            this.spoilerPressed = null;
            this.isCaptionSpoilerPressed = false;
            this.buttonPressed = 0;
            this.miniButtonPressed = 0;
            this.pressedBotButton = -1;
            this.pressedVoteButton = -1;
            this.pollHintPressed = false;
            this.psaHintPressed = false;
            this.linkPreviewPressed = false;
            this.otherPressed = false;
            this.sideButtonPressed = false;
            this.imagePressed = false;
            this.timePressed = false;
            this.gamePreviewPressed = false;
            this.commentButtonPressed = false;
            this.instantButtonPressed = false;
            this.instantPressed = false;
            if (Build.VERSION.SDK_INT >= 21) {
                int i9 = 0;
                while (true) {
                    Drawable[] drawableArr = this.selectorDrawable;
                    if (i9 >= drawableArr.length) {
                        break;
                    }
                    if (drawableArr[i9] != null) {
                        drawableArr[i9].setState(StateSet.NOTHING);
                    }
                    i9++;
                }
            }
            if (this.hadLongPress) {
                if (this.pressedLinkType != 2) {
                    this.hadLongPress = false;
                }
                this.pressedLink = null;
                this.pressedLinkType = -1;
            } else {
                resetPressedLink(-1);
            }
            z = false;
        } else {
            z = checkSpoilersMotionEvent;
        }
        updateRadialProgressBackground();
        if (!this.disallowLongPress && z && motionEvent.getAction() == 0) {
            startCheckLongPress();
        }
        if (motionEvent.getAction() != 0 && motionEvent.getAction() != 2) {
            cancelCheckLongPress();
        }
        if (z) {
            return z;
        }
        float x = motionEvent.getX();
        float y2 = motionEvent.getY();
        if (motionEvent.getAction() == 0) {
            ChatMessageCellDelegate chatMessageCellDelegate = this.delegate;
            if (chatMessageCellDelegate != null && !chatMessageCellDelegate.canPerformActions()) {
                return z;
            }
            if (this.isAvatarVisible && this.avatarImage.isInsideImage(x, getTop() + y2)) {
                this.avatarPressed = true;
            } else {
                if (this.psaButtonVisible && this.hasPsaHint) {
                    int i10 = this.psaHelpX;
                    if (x >= i10 && x <= i10 + AndroidUtilities.dp(40.0f)) {
                        int i11 = this.psaHelpY;
                        if (y2 >= i11 && y2 <= i11 + AndroidUtilities.dp(40.0f)) {
                            this.psaHintPressed = true;
                            createSelectorDrawable(0);
                            this.selectorDrawableMaskType[0] = 3;
                            if (Build.VERSION.SDK_INT >= 21) {
                                Drawable[] drawableArr2 = this.selectorDrawable;
                                if (drawableArr2[0] != null) {
                                    drawableArr2[0].setBounds(this.psaHelpX - AndroidUtilities.dp(8.0f), this.psaHelpY - AndroidUtilities.dp(8.0f), this.psaHelpX + AndroidUtilities.dp(32.0f), this.psaHelpY + AndroidUtilities.dp(32.0f));
                                    this.selectorDrawable[0].setHotspot(x, y2);
                                    this.selectorDrawable[0].setState(this.pressedState);
                                }
                            }
                            invalidate();
                        }
                    }
                }
                if (this.drawForwardedName && this.forwardedNameLayout[0] != null) {
                    float f = this.forwardNameX;
                    if (x >= f && x <= f + this.forwardedNameWidth) {
                        int i12 = this.forwardNameY;
                        if (y2 >= i12 && y2 <= i12 + AndroidUtilities.dp(32.0f)) {
                            if (this.viaWidth != 0 && x >= this.forwardNameX + this.viaNameWidth + AndroidUtilities.dp(4.0f)) {
                                this.forwardBotPressed = true;
                            } else {
                                this.forwardNamePressed = true;
                            }
                        }
                    }
                }
                if (this.drawNameLayout && this.nameLayout != null && (i7 = this.viaWidth) != 0) {
                    float f2 = this.nameX;
                    int i13 = this.viaNameWidth;
                    if (x >= i13 + f2 && x <= f2 + i13 + i7 && y2 >= this.nameY - AndroidUtilities.dp(4.0f) && y2 <= this.nameY + AndroidUtilities.dp(20.0f)) {
                        this.forwardBotPressed = true;
                    }
                }
                if (this.drawSideButton != 0) {
                    float f3 = this.sideStartX;
                    if (x >= f3 && x <= f3 + AndroidUtilities.dp(40.0f)) {
                        float f4 = this.sideStartY;
                        if (y2 >= f4) {
                            if (this.drawSideButton == 3 && this.commentLayout != null) {
                                i8 = 18;
                            }
                            if (y2 <= f4 + AndroidUtilities.dp(32 + i8)) {
                                if (this.currentMessageObject.isSent()) {
                                    this.sideButtonPressed = true;
                                }
                                invalidate();
                            }
                        }
                    }
                }
                if (this.replyNameLayout != null) {
                    if (this.currentMessageObject.shouldDrawWithoutBackground()) {
                        i6 = this.replyStartX;
                        i5 = Math.max(this.replyNameWidth, this.replyTextWidth);
                    } else {
                        i6 = this.replyStartX;
                        i5 = this.backgroundDrawableRight;
                    }
                    int i14 = i6 + i5;
                    if (x >= this.replyStartX && x <= i14) {
                        int i15 = this.replyStartY;
                        if (y2 >= i15 && y2 <= i15 + AndroidUtilities.dp(35.0f)) {
                            this.replyPressed = true;
                        }
                    }
                }
                z2 = z;
            }
            if (z2) {
                startCheckLongPress();
            }
            return z2;
        }
        if (motionEvent.getAction() != 2) {
            cancelCheckLongPress();
        }
        if (this.avatarPressed) {
            if (motionEvent.getAction() == 1) {
                this.avatarPressed = false;
                playSoundEffect(0);
                ChatMessageCellDelegate chatMessageCellDelegate2 = this.delegate;
                if (chatMessageCellDelegate2 == null) {
                    return z;
                }
                TLRPC$User tLRPC$User = this.currentUser;
                if (tLRPC$User != null) {
                    if (tLRPC$User.id == 0) {
                        chatMessageCellDelegate2.didPressHiddenForward(this);
                        return z;
                    }
                    chatMessageCellDelegate2.didPressUserAvatar(this, tLRPC$User, this.lastTouchX, this.lastTouchY);
                    return z;
                }
                TLRPC$Chat tLRPC$Chat2 = this.currentChat;
                if (tLRPC$Chat2 != null) {
                    TLRPC$MessageFwdHeader tLRPC$MessageFwdHeader = this.currentMessageObject.messageOwner.fwd_from;
                    if (tLRPC$MessageFwdHeader != null) {
                        if ((tLRPC$MessageFwdHeader.flags & 16) != 0) {
                            i4 = tLRPC$MessageFwdHeader.saved_from_msg_id;
                            tLRPC$Chat = tLRPC$Chat2;
                        } else {
                            i4 = tLRPC$MessageFwdHeader.channel_post;
                            tLRPC$Chat = this.currentForwardChannel;
                        }
                        i3 = i4;
                    } else {
                        tLRPC$Chat = tLRPC$Chat2;
                        i3 = 0;
                    }
                    chatMessageCellDelegate2.didPressChannelAvatar(this, tLRPC$Chat != null ? tLRPC$Chat : tLRPC$Chat2, i3, this.lastTouchX, this.lastTouchY);
                    return z;
                }
                MessageObject messageObject = this.currentMessageObject;
                if (messageObject == null || messageObject.sponsoredChatInvite == null) {
                    return z;
                }
                chatMessageCellDelegate2.didPressInstantButton(this, this.drawInstantViewType);
                return z;
            } else if (motionEvent.getAction() == 3) {
                this.avatarPressed = false;
                return z;
            } else if (motionEvent.getAction() != 2 || !this.isAvatarVisible || this.avatarImage.isInsideImage(x, y2 + getTop())) {
                return z;
            } else {
                this.avatarPressed = false;
                return z;
            }
        } else if (this.psaHintPressed) {
            if (motionEvent.getAction() != 1) {
                return z;
            }
            playSoundEffect(0);
            this.delegate.didPressHint(this, 1);
            this.psaHintPressed = false;
            if (Build.VERSION.SDK_INT >= 21) {
                Drawable[] drawableArr3 = this.selectorDrawable;
                if (drawableArr3[0] != null) {
                    drawableArr3[0].setState(StateSet.NOTHING);
                }
            }
            invalidate();
            return z;
        } else if (this.forwardNamePressed) {
            if (motionEvent.getAction() == 1) {
                this.forwardNamePressed = false;
                playSoundEffect(0);
                ChatMessageCellDelegate chatMessageCellDelegate3 = this.delegate;
                if (chatMessageCellDelegate3 == null) {
                    return z;
                }
                TLRPC$Chat tLRPC$Chat3 = this.currentForwardChannel;
                if (tLRPC$Chat3 != null) {
                    chatMessageCellDelegate3.didPressChannelAvatar(this, tLRPC$Chat3, this.currentMessageObject.messageOwner.fwd_from.channel_post, this.lastTouchX, this.lastTouchY);
                    return z;
                }
                TLRPC$User tLRPC$User2 = this.currentForwardUser;
                if (tLRPC$User2 != null) {
                    chatMessageCellDelegate3.didPressUserAvatar(this, tLRPC$User2, this.lastTouchX, this.lastTouchY);
                    return z;
                } else if (this.currentForwardName == null) {
                    return z;
                } else {
                    chatMessageCellDelegate3.didPressHiddenForward(this);
                    return z;
                }
            } else if (motionEvent.getAction() == 3) {
                this.forwardNamePressed = false;
                return z;
            } else if (motionEvent.getAction() != 2) {
                return z;
            } else {
                float f5 = this.forwardNameX;
                if (x >= f5 && x <= f5 + this.forwardedNameWidth) {
                    int i16 = this.forwardNameY;
                    if (y2 >= i16 && y2 <= i16 + AndroidUtilities.dp(32.0f)) {
                        return z;
                    }
                }
                this.forwardNamePressed = false;
                return z;
            }
        } else if (this.forwardBotPressed) {
            if (motionEvent.getAction() == 1) {
                this.forwardBotPressed = false;
                playSoundEffect(0);
                ChatMessageCellDelegate chatMessageCellDelegate4 = this.delegate;
                if (chatMessageCellDelegate4 == null) {
                    return z;
                }
                TLRPC$User tLRPC$User3 = this.currentViaBotUser;
                if (tLRPC$User3.bot_inline_placeholder == null) {
                    chatMessageCellDelegate4.didPressViaBotNotInline(this, tLRPC$User3 != null ? tLRPC$User3.id : 0L);
                    return z;
                }
                chatMessageCellDelegate4.didPressViaBot(this, tLRPC$User3 != null ? tLRPC$User3.username : this.currentMessageObject.messageOwner.via_bot_name);
                return z;
            } else if (motionEvent.getAction() == 3) {
                this.forwardBotPressed = false;
                return z;
            } else if (motionEvent.getAction() != 2) {
                return z;
            } else {
                if (this.drawForwardedName && this.forwardedNameLayout[0] != null) {
                    float f6 = this.forwardNameX;
                    if (x >= f6 && x <= f6 + this.forwardedNameWidth) {
                        int i17 = this.forwardNameY;
                        if (y2 >= i17 && y2 <= i17 + AndroidUtilities.dp(32.0f)) {
                            return z;
                        }
                    }
                    this.forwardBotPressed = false;
                    return z;
                }
                float f7 = this.nameX;
                int i18 = this.viaNameWidth;
                if (x >= i18 + f7 && x <= f7 + i18 + this.viaWidth && y2 >= this.nameY - AndroidUtilities.dp(4.0f) && y2 <= this.nameY + AndroidUtilities.dp(20.0f)) {
                    return z;
                }
                this.forwardBotPressed = false;
                return z;
            }
        } else if (this.replyPressed) {
            if (motionEvent.getAction() == 1) {
                this.replyPressed = false;
                playSoundEffect(0);
                if (this.replyPanelIsForward) {
                    ChatMessageCellDelegate chatMessageCellDelegate5 = this.delegate;
                    if (chatMessageCellDelegate5 == null) {
                        return z;
                    }
                    TLRPC$Chat tLRPC$Chat4 = this.currentForwardChannel;
                    if (tLRPC$Chat4 != null) {
                        chatMessageCellDelegate5.didPressChannelAvatar(this, tLRPC$Chat4, this.currentMessageObject.messageOwner.fwd_from.channel_post, this.lastTouchX, this.lastTouchY);
                        return z;
                    }
                    TLRPC$User tLRPC$User4 = this.currentForwardUser;
                    if (tLRPC$User4 != null) {
                        chatMessageCellDelegate5.didPressUserAvatar(this, tLRPC$User4, this.lastTouchX, this.lastTouchY);
                        return z;
                    } else if (this.currentForwardName == null) {
                        return z;
                    } else {
                        chatMessageCellDelegate5.didPressHiddenForward(this);
                        return z;
                    }
                } else if (this.delegate == null || !this.currentMessageObject.hasValidReplyMessageObject()) {
                    return z;
                } else {
                    this.delegate.didPressReplyMessage(this, this.currentMessageObject.getReplyMsgId());
                    return z;
                }
            } else if (motionEvent.getAction() == 3) {
                this.replyPressed = false;
                return z;
            } else if (motionEvent.getAction() != 2) {
                return z;
            } else {
                if (this.currentMessageObject.shouldDrawWithoutBackground()) {
                    i2 = this.replyStartX;
                    i = Math.max(this.replyNameWidth, this.replyTextWidth);
                } else {
                    i2 = this.replyStartX;
                    i = this.backgroundDrawableRight;
                }
                int i19 = i2 + i;
                if (x >= this.replyStartX && x <= i19) {
                    int i20 = this.replyStartY;
                    if (y2 >= i20 && y2 <= i20 + AndroidUtilities.dp(35.0f)) {
                        return z;
                    }
                }
                this.replyPressed = false;
                return z;
            }
        } else if (!this.sideButtonPressed) {
            return z;
        } else {
            if (motionEvent.getAction() == 1) {
                this.sideButtonPressed = false;
                playSoundEffect(0);
                ChatMessageCellDelegate chatMessageCellDelegate6 = this.delegate;
                if (chatMessageCellDelegate6 != null) {
                    if (this.drawSideButton == 3) {
                        chatMessageCellDelegate6.didPressCommentButton(this);
                    } else {
                        chatMessageCellDelegate6.didPressSideButton(this);
                    }
                }
            } else if (motionEvent.getAction() == 3) {
                this.sideButtonPressed = false;
            } else if (motionEvent.getAction() == 2) {
                float f8 = this.sideStartX;
                if (x >= f8 && x <= f8 + AndroidUtilities.dp(40.0f)) {
                    float f9 = this.sideStartY;
                    if (y2 >= f9) {
                    }
                }
                this.sideButtonPressed = false;
            }
            invalidate();
            return z;
        }
    }

    private boolean checkReactionsTouchEvent(MotionEvent motionEvent) {
        MessageObject.GroupedMessages groupedMessages;
        if (this.currentMessageObject.hasValidGroupId() && (groupedMessages = this.currentMessagesGroup) != null && !groupedMessages.isDocuments) {
            ViewGroup viewGroup = (ViewGroup) getParent();
            if (viewGroup == null) {
                return false;
            }
            for (int i = 0; i < viewGroup.getChildCount(); i++) {
                View childAt = viewGroup.getChildAt(i);
                if (childAt instanceof ChatMessageCell) {
                    ChatMessageCell chatMessageCell = (ChatMessageCell) childAt;
                    MessageObject.GroupedMessages currentMessagesGroup = chatMessageCell.getCurrentMessagesGroup();
                    MessageObject.GroupedMessagePosition currentPosition = chatMessageCell.getCurrentPosition();
                    if (currentMessagesGroup != null && currentMessagesGroup.groupId == this.currentMessagesGroup.groupId) {
                        int i2 = currentPosition.flags;
                        if ((i2 & 8) != 0 && (i2 & 1) != 0) {
                            if (chatMessageCell == this) {
                                return this.reactionsLayoutInBubble.chekTouchEvent(motionEvent);
                            }
                            motionEvent.offsetLocation(getLeft() - chatMessageCell.getLeft(), getTop() - chatMessageCell.getTop());
                            boolean chekTouchEvent = chatMessageCell.reactionsLayoutInBubble.chekTouchEvent(motionEvent);
                            motionEvent.offsetLocation(-(getLeft() - chatMessageCell.getLeft()), -(getTop() - chatMessageCell.getTop()));
                            return chekTouchEvent;
                        }
                    }
                }
            }
            return false;
        }
        return this.reactionsLayoutInBubble.chekTouchEvent(motionEvent);
    }

    private boolean checkPinchToZoom(MotionEvent motionEvent) {
        ChatMessageCellDelegate chatMessageCellDelegate = this.delegate;
        PinchToZoomHelper pinchToZoomHelper = chatMessageCellDelegate == null ? null : chatMessageCellDelegate.getPinchToZoomHelper();
        if (this.currentMessageObject == null || !this.photoImage.hasNotThumb() || pinchToZoomHelper == null || this.currentMessageObject.isSticker() || this.currentMessageObject.isAnimatedEmoji()) {
            return false;
        }
        if ((this.currentMessageObject.isVideo() && !this.autoPlayingMedia) || this.isRoundVideo || this.currentMessageObject.isAnimatedSticker()) {
            return false;
        }
        if ((this.currentMessageObject.isDocument() && !this.currentMessageObject.isGif()) || this.currentMessageObject.needDrawBluredPreview()) {
            return false;
        }
        return pinchToZoomHelper.checkPinchToZoom(motionEvent, this, this.photoImage, this.currentMessageObject);
    }

    private boolean checkTextSelection(MotionEvent motionEvent) {
        MessageObject messageObject;
        TLRPC$Message tLRPC$Message;
        int i;
        int i2;
        int i3;
        MessageObject.GroupedMessages groupedMessages;
        TextSelectionHelper.ChatListTextSelectionHelper textSelectionHelper = this.delegate.getTextSelectionHelper();
        if (textSelectionHelper == null || MessagesController.getInstance(this.currentAccount).isChatNoForwards(this.currentMessageObject.getChatId()) || ((tLRPC$Message = (messageObject = this.currentMessageObject).messageOwner) != null && tLRPC$Message.noforwards)) {
            return false;
        }
        ArrayList<MessageObject.TextLayoutBlock> arrayList = messageObject.textLayoutBlocks;
        if (!(arrayList != null && !arrayList.isEmpty()) && !hasCaptionLayout()) {
            return false;
        }
        if ((!this.drawSelectionBackground && this.currentMessagesGroup == null) || (this.currentMessagesGroup != null && !this.delegate.hasSelectedMessages())) {
            return false;
        }
        if (this.currentMessageObject.hasValidGroupId() && (groupedMessages = this.currentMessagesGroup) != null && !groupedMessages.isDocuments) {
            ViewGroup viewGroup = (ViewGroup) getParent();
            for (int i4 = 0; i4 < viewGroup.getChildCount(); i4++) {
                View childAt = viewGroup.getChildAt(i4);
                if (childAt instanceof ChatMessageCell) {
                    ChatMessageCell chatMessageCell = (ChatMessageCell) childAt;
                    MessageObject.GroupedMessages currentMessagesGroup = chatMessageCell.getCurrentMessagesGroup();
                    MessageObject.GroupedMessagePosition currentPosition = chatMessageCell.getCurrentPosition();
                    if (currentMessagesGroup != null && currentMessagesGroup.groupId == this.currentMessagesGroup.groupId) {
                        int i5 = currentPosition.flags;
                        if ((i5 & 8) != 0 && (i5 & 1) != 0) {
                            textSelectionHelper.setMaybeTextCord((int) chatMessageCell.captionX, (int) chatMessageCell.captionY);
                            textSelectionHelper.setMessageObject(chatMessageCell);
                            if (chatMessageCell == this) {
                                return textSelectionHelper.onTouchEvent(motionEvent);
                            }
                            motionEvent.offsetLocation(getLeft() - chatMessageCell.getLeft(), getTop() - chatMessageCell.getTop());
                            boolean onTouchEvent = textSelectionHelper.onTouchEvent(motionEvent);
                            motionEvent.offsetLocation(-(getLeft() - chatMessageCell.getLeft()), -(getTop() - chatMessageCell.getTop()));
                            return onTouchEvent;
                        }
                    }
                }
            }
            return false;
        }
        if (hasCaptionLayout()) {
            textSelectionHelper.setIsDescription(false);
            textSelectionHelper.setMaybeTextCord((int) this.captionX, (int) this.captionY);
        } else if (this.descriptionLayout != null && motionEvent.getY() > this.descriptionY) {
            textSelectionHelper.setIsDescription(true);
            if (this.hasGamePreview) {
                i = this.unmovedTextX - AndroidUtilities.dp(10.0f);
            } else {
                if (this.hasInvoicePreview) {
                    i3 = this.unmovedTextX;
                    i2 = AndroidUtilities.dp(1.0f);
                } else {
                    i3 = this.unmovedTextX;
                    i2 = AndroidUtilities.dp(1.0f);
                }
                i = i3 + i2;
            }
            textSelectionHelper.setMaybeTextCord(i + AndroidUtilities.dp(10.0f) + this.descriptionX, this.descriptionY);
        } else {
            textSelectionHelper.setIsDescription(false);
            textSelectionHelper.setMaybeTextCord(this.textX, this.textY);
        }
        textSelectionHelper.setMessageObject(this);
        return textSelectionHelper.onTouchEvent(motionEvent);
    }

    private void updateSelectionTextPosition() {
        int i;
        int i2;
        int i3;
        if (getDelegate() == null || getDelegate().getTextSelectionHelper() == null || !getDelegate().getTextSelectionHelper().isSelected(this.currentMessageObject)) {
            return;
        }
        int textSelectionType = getDelegate().getTextSelectionHelper().getTextSelectionType(this);
        if (textSelectionType == TextSelectionHelper.ChatListTextSelectionHelper.TYPE_DESCRIPTION) {
            if (this.hasGamePreview) {
                i = this.unmovedTextX - AndroidUtilities.dp(10.0f);
            } else {
                if (this.hasInvoicePreview) {
                    i3 = this.unmovedTextX;
                    i2 = AndroidUtilities.dp(1.0f);
                } else {
                    i3 = this.unmovedTextX;
                    i2 = AndroidUtilities.dp(1.0f);
                }
                i = i3 + i2;
            }
            getDelegate().getTextSelectionHelper().updateTextPosition(i + AndroidUtilities.dp(10.0f) + this.descriptionX, this.descriptionY);
        } else if (textSelectionType == TextSelectionHelper.ChatListTextSelectionHelper.TYPE_CAPTION) {
            getDelegate().getTextSelectionHelper().updateTextPosition((int) this.captionX, (int) this.captionY);
        } else {
            getDelegate().getTextSelectionHelper().updateTextPosition(this.textX, this.textY);
        }
    }

    public ArrayList<PollButton> getPollButtons() {
        return this.pollButtons;
    }

    public void updatePlayingMessageProgress() {
        String formatShortDuration;
        int i;
        MessageObject messageObject = this.currentMessageObject;
        if (messageObject == null) {
            return;
        }
        VideoPlayerRewinder videoPlayerRewinder = this.videoPlayerRewinder;
        if (videoPlayerRewinder != null && videoPlayerRewinder.rewindCount != 0 && videoPlayerRewinder.rewindByBackSeek) {
            messageObject.audioProgress = videoPlayerRewinder.getVideoProgress();
        }
        int i2 = 0;
        if (this.documentAttachType == 4) {
            if (this.infoLayout != null && (PhotoViewer.isPlayingMessage(this.currentMessageObject) || MediaController.getInstance().isGoingToShowMessageObject(this.currentMessageObject))) {
                return;
            }
            AnimatedFileDrawable animation = this.photoImage.getAnimation();
            if (animation != null) {
                MessageObject messageObject2 = this.currentMessageObject;
                i2 = animation.getDurationMs() / 1000;
                messageObject2.audioPlayerDuration = i2;
                MessageObject messageObject3 = this.currentMessageObject;
                TLRPC$Message tLRPC$Message = messageObject3.messageOwner;
                if (tLRPC$Message.ttl > 0 && tLRPC$Message.destroyTime == 0 && !messageObject3.needDrawBluredPreview() && this.currentMessageObject.isVideo() && animation.hasBitmap()) {
                    this.delegate.didStartVideoStream(this.currentMessageObject);
                }
            }
            if (i2 == 0) {
                i2 = this.currentMessageObject.getDuration();
            }
            if (MediaController.getInstance().isPlayingMessage(this.currentMessageObject)) {
                float f = i2;
                i2 = (int) (f - (this.currentMessageObject.audioProgress * f));
            } else if (animation != null) {
                if (i2 != 0) {
                    i2 -= animation.getCurrentProgressMs() / 1000;
                }
                if (this.delegate != null && animation.getCurrentProgressMs() >= 3000) {
                    this.delegate.videoTimerReached();
                }
            }
            if (this.lastTime == i2) {
                return;
            }
            String formatShortDuration2 = AndroidUtilities.formatShortDuration(i2);
            this.infoWidth = (int) Math.ceil(Theme.chat_infoPaint.measureText(formatShortDuration2));
            this.infoLayout = new StaticLayout(formatShortDuration2, Theme.chat_infoPaint, this.infoWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
            this.lastTime = i2;
        } else if (this.isRoundVideo) {
            TLRPC$Document document = this.currentMessageObject.getDocument();
            int i3 = 0;
            while (true) {
                if (i3 >= document.attributes.size()) {
                    i = 0;
                    break;
                }
                TLRPC$DocumentAttribute tLRPC$DocumentAttribute = document.attributes.get(i3);
                if (tLRPC$DocumentAttribute instanceof TLRPC$TL_documentAttributeVideo) {
                    i = tLRPC$DocumentAttribute.duration;
                    break;
                }
                i3++;
            }
            if (MediaController.getInstance().isPlayingMessage(this.currentMessageObject)) {
                i = Math.max(0, i - this.currentMessageObject.audioProgressSec);
            }
            if (this.lastTime != i) {
                this.lastTime = i;
                String formatLongDuration = AndroidUtilities.formatLongDuration(i);
                this.timeWidthAudio = (int) Math.ceil(Theme.chat_timePaint.measureText(formatLongDuration));
                this.durationLayout = new StaticLayout(formatLongDuration, Theme.chat_timePaint, this.timeWidthAudio, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
            }
            float f2 = this.currentMessageObject.audioProgress;
            if (f2 != 0.0f) {
                this.lastDrawingAudioProgress = f2;
                if (f2 > 0.9f) {
                    this.lastDrawingAudioProgress = 1.0f;
                }
            }
            invalidate();
        } else if (this.documentAttach == null) {
        } else {
            if (this.useSeekBarWaveform) {
                if (!this.seekBarWaveform.isDragging()) {
                    this.seekBarWaveform.setProgress(this.currentMessageObject.audioProgress, true);
                }
            } else if (!this.seekBar.isDragging()) {
                this.seekBar.setProgress(this.currentMessageObject.audioProgress);
                this.seekBar.setBufferedProgress(this.currentMessageObject.bufferedProgress);
            }
            if (this.documentAttachType == 3) {
                if (!MediaController.getInstance().isPlayingMessage(this.currentMessageObject)) {
                    int i4 = 0;
                    while (true) {
                        if (i4 >= this.documentAttach.attributes.size()) {
                            break;
                        }
                        TLRPC$DocumentAttribute tLRPC$DocumentAttribute2 = this.documentAttach.attributes.get(i4);
                        if (tLRPC$DocumentAttribute2 instanceof TLRPC$TL_documentAttributeAudio) {
                            i2 = tLRPC$DocumentAttribute2.duration;
                            break;
                        }
                        i4++;
                    }
                } else {
                    i2 = this.currentMessageObject.audioProgressSec;
                }
                if (this.lastTime != i2) {
                    this.lastTime = i2;
                    String formatLongDuration2 = AndroidUtilities.formatLongDuration(i2);
                    this.timeWidthAudio = (int) Math.ceil(Theme.chat_audioTimePaint.measureText(formatLongDuration2));
                    this.durationLayout = new StaticLayout(formatLongDuration2, Theme.chat_audioTimePaint, this.timeWidthAudio, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
                }
            } else {
                int duration = this.currentMessageObject.getDuration();
                if (MediaController.getInstance().isPlayingMessage(this.currentMessageObject)) {
                    i2 = this.currentMessageObject.audioProgressSec;
                }
                if (this.lastTime != i2) {
                    this.lastTime = i2;
                    this.durationLayout = new StaticLayout(AndroidUtilities.formatShortDuration(i2, duration), Theme.chat_audioTimePaint, (int) Math.ceil(Theme.chat_audioTimePaint.measureText(formatShortDuration)), Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
                }
            }
            invalidate();
        }
    }

    public void setFullyDraw(boolean z) {
        this.fullyDraw = z;
    }

    public void setParentViewSize(int i, int i2) {
        Theme.MessageDrawable messageDrawable;
        this.parentWidth = i;
        this.parentHeight = i2;
        this.backgroundHeight = i2;
        if ((this.currentMessageObject == null || !hasGradientService() || !this.currentMessageObject.shouldDrawWithoutBackground()) && ((messageDrawable = this.currentBackgroundDrawable) == null || messageDrawable.getGradientShader() == null)) {
            return;
        }
        invalidate();
    }

    public void setVisiblePart(int i, int i2, int i3, float f, float f2, int i4, int i5, int i6, int i7) {
        MessageObject.TextLayoutBlock textLayoutBlock;
        this.parentWidth = i4;
        this.parentHeight = i5;
        this.backgroundHeight = i5;
        this.blurredViewTopOffset = i6;
        this.blurredViewBottomOffset = i7;
        this.viewTop = f2;
        if (i3 != i5 || f != this.parentViewTopOffset) {
            this.parentViewTopOffset = f;
            this.parentHeight = i3;
        }
        if (this.currentMessageObject != null && hasGradientService() && this.currentMessageObject.shouldDrawWithoutBackground()) {
            invalidate();
        }
        MessageObject messageObject = this.currentMessageObject;
        if (messageObject == null || messageObject.textLayoutBlocks == null) {
            return;
        }
        int i8 = i - this.textY;
        int i9 = 0;
        for (int i10 = 0; i10 < this.currentMessageObject.textLayoutBlocks.size() && this.currentMessageObject.textLayoutBlocks.get(i10).textYOffset <= i8; i10++) {
            i9 = i10;
        }
        int i11 = -1;
        int i12 = -1;
        int i13 = 0;
        while (i9 < this.currentMessageObject.textLayoutBlocks.size()) {
            float f3 = this.currentMessageObject.textLayoutBlocks.get(i9).textYOffset;
            float f4 = i8;
            if (intersect(f3, textLayoutBlock.height + f3, f4, i8 + i2)) {
                if (i11 == -1) {
                    i11 = i9;
                }
                i13++;
                i12 = i9;
            } else if (f3 > f4) {
                break;
            }
            i9++;
        }
        if (this.lastVisibleBlockNum != i12 || this.firstVisibleBlockNum != i11 || this.totalVisibleBlocksCount != i13) {
            this.lastVisibleBlockNum = i12;
            this.firstVisibleBlockNum = i11;
            this.totalVisibleBlocksCount = i13;
            invalidate();
        } else if (this.animatedEmojiStack != null) {
            for (int i14 = 0; i14 < this.animatedEmojiStack.holders.size(); i14++) {
                AnimatedEmojiSpan.AnimatedEmojiHolder animatedEmojiHolder = this.animatedEmojiStack.holders.get(i14);
                if (animatedEmojiHolder != null && animatedEmojiHolder.skipDraw && !animatedEmojiHolder.outOfBounds((this.parentBoundsTop - getY()) - animatedEmojiHolder.drawingYOffset, (this.parentBoundsBottom - getY()) - animatedEmojiHolder.drawingYOffset)) {
                    invalidate();
                    return;
                }
            }
        }
    }

    public static StaticLayout generateStaticLayout(CharSequence charSequence, TextPaint textPaint, int i, int i2, int i3, int i4) {
        SpannableStringBuilder spannableStringBuilder = new SpannableStringBuilder(charSequence);
        StaticLayout staticLayout = new StaticLayout(charSequence, textPaint, i2, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
        int i5 = i;
        int i6 = 0;
        for (int i7 = 0; i7 < i3; i7++) {
            staticLayout.getLineDirections(i7);
            if (staticLayout.getLineLeft(i7) != 0.0f || staticLayout.isRtlCharAt(staticLayout.getLineStart(i7)) || staticLayout.isRtlCharAt(staticLayout.getLineEnd(i7))) {
                i5 = i2;
            }
            int lineEnd = staticLayout.getLineEnd(i7);
            if (lineEnd == charSequence.length()) {
                break;
            }
            int i8 = (lineEnd - 1) + i6;
            if (spannableStringBuilder.charAt(i8) == ' ') {
                spannableStringBuilder.replace(i8, i8 + 1, (CharSequence) "\n");
            } else if (spannableStringBuilder.charAt(i8) != '\n') {
                spannableStringBuilder.insert(i8, (CharSequence) "\n");
                i6++;
            }
            if (i7 == staticLayout.getLineCount() - 1 || i7 == i4 - 1) {
                break;
            }
        }
        int i9 = i5;
        return StaticLayoutEx.createStaticLayout(spannableStringBuilder, textPaint, i9, Layout.Alignment.ALIGN_NORMAL, 1.0f, AndroidUtilities.dp(1.0f), false, TextUtils.TruncateAt.END, i9, i4, true);
    }

    private void didClickedImage() {
        ChatMessageCellDelegate chatMessageCellDelegate;
        TLRPC$WebPage tLRPC$WebPage;
        boolean z;
        MessageObject messageObject = this.currentMessageObject;
        if (messageObject.type == 1 || messageObject.isAnyKindOfSticker()) {
            int i = this.buttonState;
            if (i == -1) {
                this.delegate.didPressImage(this, this.lastTouchX, this.lastTouchY);
                return;
            } else if (i != 0) {
                return;
            } else {
                didPressButton(true, false);
                return;
            }
        }
        MessageObject messageObject2 = this.currentMessageObject;
        int i2 = messageObject2.type;
        if (i2 == 12) {
            long j = messageObject2.messageOwner.media.user_id;
            TLRPC$User tLRPC$User = null;
            if (j != 0) {
                tLRPC$User = MessagesController.getInstance(this.currentAccount).getUser(Long.valueOf(j));
            }
            this.delegate.didPressUserAvatar(this, tLRPC$User, this.lastTouchX, this.lastTouchY);
        } else if (i2 == 5) {
            if (this.buttonState != -1) {
                didPressButton(true, false);
            } else if (!MediaController.getInstance().isPlayingMessage(this.currentMessageObject) || MediaController.getInstance().isMessagePaused()) {
                this.delegate.needPlayMessage(this.currentMessageObject);
            } else {
                MediaController.getInstance().lambda$startAudioAgain$7(this.currentMessageObject);
            }
        } else if (i2 == 8) {
            int i3 = this.buttonState;
            if (i3 == -1 || (i3 == 1 && this.canStreamVideo && this.autoPlayingMedia)) {
                this.delegate.didPressImage(this, this.lastTouchX, this.lastTouchY);
            } else if (i3 != 2 && i3 != 0) {
            } else {
                didPressButton(true, false);
            }
        } else {
            int i4 = this.documentAttachType;
            if (i4 == 4) {
                int i5 = this.buttonState;
                if (i5 == -1 || ((z = this.drawVideoImageButton) && (this.autoPlayingMedia || (SharedConfig.streamMedia && this.canStreamVideo)))) {
                    this.delegate.didPressImage(this, this.lastTouchX, this.lastTouchY);
                } else if (z) {
                    didPressButton(true, true);
                } else if (i5 != 0 && i5 != 3) {
                } else {
                    didPressButton(true, false);
                }
            } else if (i2 == 4) {
                this.delegate.didPressImage(this, this.lastTouchX, this.lastTouchY);
            } else if (i4 == 1) {
                if (this.buttonState != -1) {
                    return;
                }
                this.delegate.didPressImage(this, this.lastTouchX, this.lastTouchY);
            } else if (i4 == 2) {
                if (this.buttonState != -1 || (tLRPC$WebPage = messageObject2.messageOwner.media.webpage) == null) {
                    return;
                }
                String str = tLRPC$WebPage.embed_url;
                if (str != null && str.length() != 0) {
                    this.delegate.needOpenWebView(this.currentMessageObject, tLRPC$WebPage.embed_url, tLRPC$WebPage.site_name, tLRPC$WebPage.description, tLRPC$WebPage.url, tLRPC$WebPage.embed_width, tLRPC$WebPage.embed_height);
                } else {
                    Browser.openUrl(getContext(), tLRPC$WebPage.url);
                }
            } else if (this.hasInvoicePreview) {
                if (this.buttonState != -1) {
                    return;
                }
                this.delegate.didPressImage(this, this.lastTouchX, this.lastTouchY);
            } else if (Build.VERSION.SDK_INT < 26 || (chatMessageCellDelegate = this.delegate) == null) {
            } else {
                if (i2 == 16) {
                    chatMessageCellDelegate.didLongPress(this, 0.0f, 0.0f);
                } else {
                    chatMessageCellDelegate.didPressOther(this, this.otherX, this.otherY);
                }
            }
        }
    }

    private void updateSecretTimeText(MessageObject messageObject) {
        String secretTimeString;
        if (messageObject == null || !messageObject.needDrawBluredPreview() || (secretTimeString = messageObject.getSecretTimeString()) == null) {
            return;
        }
        int ceil = (int) Math.ceil(Theme.chat_infoPaint.measureText(secretTimeString));
        this.infoWidth = ceil;
        this.infoLayout = new StaticLayout(TextUtils.ellipsize(secretTimeString, Theme.chat_infoPaint, ceil, TextUtils.TruncateAt.END), Theme.chat_infoPaint, this.infoWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
        invalidate();
    }

    /* JADX WARN: Removed duplicated region for block: B:22:0x0048  */
    /* JADX WARN: Removed duplicated region for block: B:23:0x00ce  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private boolean isPhotoDataChanged(MessageObject messageObject) {
        int i;
        TLRPC$MessageMedia tLRPC$MessageMedia;
        String str;
        int i2;
        int i3 = messageObject.type;
        if (i3 == 0 || i3 == 14) {
            return false;
        }
        if (i3 == 4) {
            if (this.currentUrl == null) {
                return true;
            }
            TLRPC$GeoPoint tLRPC$GeoPoint = messageObject.messageOwner.media.geo;
            double d = tLRPC$GeoPoint.lat;
            double d2 = tLRPC$GeoPoint._long;
            if (((int) messageObject.getDialogId()) == 0 && (i2 = SharedConfig.mapPreviewType) != 0) {
                if (i2 == 1) {
                    i = 4;
                } else if (i2 == 3) {
                    i = 1;
                }
                tLRPC$MessageMedia = messageObject.messageOwner.media;
                if (!(tLRPC$MessageMedia instanceof TLRPC$TL_messageMediaGeoLive)) {
                    int dp = this.backgroundWidth - AndroidUtilities.dp(21.0f);
                    int dp2 = AndroidUtilities.dp(195.0f);
                    double d3 = 268435456;
                    Double.isNaN(d3);
                    double d4 = d3 / 3.141592653589793d;
                    double d5 = (d * 3.141592653589793d) / 180.0d;
                    Double.isNaN(d3);
                    double round = Math.round(d3 - ((Math.log((Math.sin(d5) + 1.0d) / (1.0d - Math.sin(d5))) * d4) / 2.0d)) - (AndroidUtilities.dp(10.3f) << 6);
                    Double.isNaN(round);
                    Double.isNaN(d3);
                    int i4 = this.currentAccount;
                    float f = AndroidUtilities.density;
                    str = AndroidUtilities.formapMapUrl(i4, ((1.5707963267948966d - (Math.atan(Math.exp((round - d3) / d4)) * 2.0d)) * 180.0d) / 3.141592653589793d, d2, (int) (dp / f), (int) (dp2 / f), false, 15, i);
                } else if (!TextUtils.isEmpty(tLRPC$MessageMedia.title)) {
                    int dp3 = this.backgroundWidth - AndroidUtilities.dp(21.0f);
                    int dp4 = AndroidUtilities.dp(195.0f);
                    int i5 = this.currentAccount;
                    float f2 = AndroidUtilities.density;
                    str = AndroidUtilities.formapMapUrl(i5, d, d2, (int) (dp3 / f2), (int) (dp4 / f2), true, 15, i);
                } else {
                    int dp5 = this.backgroundWidth - AndroidUtilities.dp(12.0f);
                    int dp6 = AndroidUtilities.dp(195.0f);
                    int i6 = this.currentAccount;
                    float f3 = AndroidUtilities.density;
                    str = AndroidUtilities.formapMapUrl(i6, d, d2, (int) (dp5 / f3), (int) (dp6 / f3), true, 15, i);
                }
                return !str.equals(this.currentUrl);
            }
            i = -1;
            tLRPC$MessageMedia = messageObject.messageOwner.media;
            if (!(tLRPC$MessageMedia instanceof TLRPC$TL_messageMediaGeoLive)) {
            }
            return !str.equals(this.currentUrl);
        }
        TLRPC$PhotoSize tLRPC$PhotoSize = this.currentPhotoObject;
        if (tLRPC$PhotoSize == null || (tLRPC$PhotoSize.location instanceof TLRPC$TL_fileLocationUnavailable)) {
            return i3 == 1 || i3 == 5 || i3 == 3 || i3 == 8 || messageObject.isAnyKindOfSticker();
        } else if (this.currentMessageObject != null && this.photoNotSet) {
            return FileLoader.getInstance(this.currentAccount).getPathToMessage(this.currentMessageObject.messageOwner).exists();
        } else {
            return false;
        }
    }

    public int getRepliesCount() {
        MessageObject.GroupedMessages groupedMessages = this.currentMessagesGroup;
        if (groupedMessages != null && !groupedMessages.messages.isEmpty()) {
            return this.currentMessagesGroup.messages.get(0).getRepliesCount();
        }
        return this.currentMessageObject.getRepliesCount();
    }

    private ArrayList<TLRPC$Peer> getRecentRepliers() {
        TLRPC$MessageReplies tLRPC$MessageReplies;
        MessageObject.GroupedMessages groupedMessages = this.currentMessagesGroup;
        if (groupedMessages != null && !groupedMessages.messages.isEmpty() && (tLRPC$MessageReplies = this.currentMessagesGroup.messages.get(0).messageOwner.replies) != null) {
            return tLRPC$MessageReplies.recent_repliers;
        }
        TLRPC$MessageReplies tLRPC$MessageReplies2 = this.currentMessageObject.messageOwner.replies;
        if (tLRPC$MessageReplies2 == null) {
            return null;
        }
        return tLRPC$MessageReplies2.recent_repliers;
    }

    public void updateAnimatedEmojis() {
        if (!this.imageReceiversAttachState) {
            return;
        }
        int cacheTypeForEnterView = this.currentMessageObject.wasJustSent ? AnimatedEmojiDrawable.getCacheTypeForEnterView() : 0;
        StaticLayout staticLayout = this.captionLayout;
        if (staticLayout != null) {
            this.animatedEmojiStack = AnimatedEmojiSpan.update(cacheTypeForEnterView, (View) this, false, this.animatedEmojiStack, staticLayout);
        } else {
            this.animatedEmojiStack = AnimatedEmojiSpan.update(cacheTypeForEnterView, (View) this, true, this.animatedEmojiStack, this.currentMessageObject.textLayoutBlocks);
        }
    }

    private void updateCaptionSpoilers() {
        this.captionSpoilersPool.addAll(this.captionSpoilers);
        this.captionSpoilers.clear();
        if (this.captionLayout == null || getMessageObject().isSpoilersRevealed) {
            return;
        }
        SpoilerEffect.addSpoilers(this, this.captionLayout, this.captionSpoilersPool, this.captionSpoilers);
    }

    /* JADX WARN: Removed duplicated region for block: B:82:0x00ce  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private boolean isUserDataChanged() {
        TLRPC$FileLocation tLRPC$FileLocation;
        TLRPC$FileLocation tLRPC$FileLocation2;
        TLRPC$PhotoSize tLRPC$PhotoSize;
        String str;
        String forwardedName;
        String str2;
        MessageObject messageObject;
        MessageObject messageObject2;
        TLRPC$MessageFwdHeader tLRPC$MessageFwdHeader;
        TLRPC$ChatPhoto tLRPC$ChatPhoto;
        TLRPC$UserProfilePhoto tLRPC$UserProfilePhoto;
        TLRPC$MessageMedia tLRPC$MessageMedia;
        MessageObject messageObject3 = this.currentMessageObject;
        if (messageObject3 == null || this.hasLinkPreview || (tLRPC$MessageMedia = messageObject3.messageOwner.media) == null || !(tLRPC$MessageMedia.webpage instanceof TLRPC$TL_webPage)) {
            if (messageObject3 != null && (this.currentUser != null || this.currentChat != null)) {
                int i = this.lastSendState;
                TLRPC$Message tLRPC$Message = messageObject3.messageOwner;
                if (i != tLRPC$Message.send_state || this.lastDeleteDate != tLRPC$Message.destroyTime || this.lastViewsCount != tLRPC$Message.views || this.lastRepliesCount != getRepliesCount() || this.lastReactions != this.currentMessageObject.messageOwner.reactions) {
                    return true;
                }
                updateCurrentUserAndChat();
                String str3 = null;
                if (this.isAvatarVisible) {
                    TLRPC$User tLRPC$User = this.currentUser;
                    if (tLRPC$User != null && (tLRPC$UserProfilePhoto = tLRPC$User.photo) != null) {
                        tLRPC$FileLocation = tLRPC$UserProfilePhoto.photo_small;
                    } else {
                        TLRPC$Chat tLRPC$Chat = this.currentChat;
                        if (tLRPC$Chat != null && (tLRPC$ChatPhoto = tLRPC$Chat.photo) != null) {
                            tLRPC$FileLocation = tLRPC$ChatPhoto.photo_small;
                        }
                    }
                    if (this.replyTextLayout != null && (messageObject2 = this.currentMessageObject.replyMessageObject) != null && (!this.isThreadChat || (tLRPC$MessageFwdHeader = messageObject2.messageOwner.fwd_from) == null || tLRPC$MessageFwdHeader.channel_post == 0)) {
                        return true;
                    }
                    tLRPC$FileLocation2 = this.currentPhoto;
                    if ((tLRPC$FileLocation2 != null && tLRPC$FileLocation != null) || ((tLRPC$FileLocation2 != null && tLRPC$FileLocation == null) || (tLRPC$FileLocation2 != null && (tLRPC$FileLocation2.local_id != tLRPC$FileLocation.local_id || tLRPC$FileLocation2.volume_id != tLRPC$FileLocation.volume_id)))) {
                        return true;
                    }
                    if (this.replyNameLayout != null || (messageObject = this.currentMessageObject.replyMessageObject) == null || (tLRPC$PhotoSize = FileLoader.getClosestPhotoSizeWithSize(messageObject.photoThumbs, 40)) == null || this.currentMessageObject.replyMessageObject.isAnyKindOfSticker()) {
                        tLRPC$PhotoSize = null;
                    }
                    if (this.currentReplyPhoto != null && tLRPC$PhotoSize != null) {
                        return true;
                    }
                    if (isNeedAuthorName()) {
                        str3 = getAuthorName();
                    }
                    str = this.currentNameString;
                    if ((str != null && str3 != null) || ((str != null && str3 == null) || (str != null && !str.equals(str3)))) {
                        return true;
                    }
                    if (this.drawForwardedName && this.currentMessageObject.needDrawForwarded()) {
                        forwardedName = this.currentMessageObject.getForwardedName();
                        str2 = this.currentForwardNameString;
                        if (str2 != null && forwardedName != null) {
                            return true;
                        }
                        if (str2 == null && forwardedName == null) {
                            return true;
                        }
                        return str2 == null && !str2.equals(forwardedName);
                    }
                }
                tLRPC$FileLocation = null;
                if (this.replyTextLayout != null) {
                }
                tLRPC$FileLocation2 = this.currentPhoto;
                if (tLRPC$FileLocation2 != null) {
                }
                if (this.replyNameLayout != null) {
                }
                tLRPC$PhotoSize = null;
                if (this.currentReplyPhoto != null) {
                }
                if (isNeedAuthorName()) {
                }
                str = this.currentNameString;
                if (str != null) {
                }
                if (this.drawForwardedName) {
                    forwardedName = this.currentMessageObject.getForwardedName();
                    str2 = this.currentForwardNameString;
                    if (str2 != null) {
                    }
                    if (str2 == null) {
                    }
                    if (str2 == null) {
                    }
                }
            }
            return false;
        }
        return true;
    }

    public ImageReceiver getPhotoImage() {
        return this.photoImage;
    }

    public int getNoSoundIconCenterX() {
        return this.noSoundCenterX;
    }

    public int getForwardNameCenterX() {
        float f;
        TLRPC$User tLRPC$User = this.currentUser;
        if (tLRPC$User != null && tLRPC$User.id == 0) {
            f = this.avatarImage.getCenterX();
        } else {
            f = this.forwardNameX + this.forwardNameCenterX;
        }
        return (int) f;
    }

    public int getChecksX() {
        return this.layoutWidth - AndroidUtilities.dp(SharedConfig.bubbleRadius >= 10 ? 27.3f : 25.3f);
    }

    public int getChecksY() {
        float f;
        int intrinsicHeight;
        if (this.currentMessageObject.shouldDrawWithoutBackground()) {
            f = this.drawTimeY;
            intrinsicHeight = getThemedDrawable("drawableMsgStickerCheck").getIntrinsicHeight();
        } else {
            f = this.drawTimeY;
            intrinsicHeight = Theme.chat_msgMediaCheckDrawable.getIntrinsicHeight();
        }
        return (int) (f - intrinsicHeight);
    }

    public TLRPC$User getCurrentUser() {
        return this.currentUser;
    }

    @Override // android.view.ViewGroup, android.view.View
    protected void onDetachedFromWindow() {
        super.onDetachedFromWindow();
        NotificationCenter.getGlobalInstance().removeObserver(this, NotificationCenter.startSpoilers);
        NotificationCenter.getGlobalInstance().removeObserver(this, NotificationCenter.stopSpoilers);
        NotificationCenter.getInstance(this.currentAccount).removeObserver(this, NotificationCenter.userInfoDidLoad);
        cancelShakeAnimation();
        if (this.animationRunning) {
            return;
        }
        CheckBoxBase checkBoxBase = this.checkBox;
        if (checkBoxBase != null) {
            checkBoxBase.onDetachedFromWindow();
        }
        CheckBoxBase checkBoxBase2 = this.mediaCheckBox;
        if (checkBoxBase2 != null) {
            checkBoxBase2.onDetachedFromWindow();
        }
        if (this.pollCheckBox != null) {
            int i = 0;
            while (true) {
                CheckBoxBase[] checkBoxBaseArr = this.pollCheckBox;
                if (i >= checkBoxBaseArr.length) {
                    break;
                }
                checkBoxBaseArr[i].onDetachedFromWindow();
                i++;
            }
        }
        this.attachedToWindow = false;
        this.avatarImage.onDetachedFromWindow();
        checkImageReceiversAttachState();
        if (this.addedForTest && this.currentUrl != null && this.currentWebFile != null) {
            ImageLoader.getInstance().removeTestWebFile(this.currentUrl);
            this.addedForTest = false;
        }
        DownloadController.getInstance(this.currentAccount).removeLoadingFileObserver(this);
        if (getDelegate() != null && getDelegate().getTextSelectionHelper() != null) {
            getDelegate().getTextSelectionHelper().onChatMessageCellDetached(this);
        }
        this.transitionParams.onDetach();
        if (MediaController.getInstance().isPlayingMessage(this.currentMessageObject)) {
            Theme.getCurrentAudiVisualizerDrawable().setParentView(null);
        }
        ValueAnimator valueAnimator = this.statusDrawableAnimator;
        if (valueAnimator != null) {
            valueAnimator.removeAllListeners();
            this.statusDrawableAnimator.cancel();
        }
        this.reactionsLayoutInBubble.onDetachFromWindow();
        this.statusDrawableAnimationInProgress = false;
        Runnable runnable = this.unregisterFlagSecure;
        if (runnable == null) {
            return;
        }
        runnable.run();
        this.unregisterFlagSecure = null;
    }

    @Override // android.view.ViewGroup, android.view.View
    protected void onAttachedToWindow() {
        super.onAttachedToWindow();
        NotificationCenter.getGlobalInstance().addObserver(this, NotificationCenter.startSpoilers);
        NotificationCenter.getGlobalInstance().addObserver(this, NotificationCenter.stopSpoilers);
        NotificationCenter.getInstance(this.currentAccount).addObserver(this, NotificationCenter.userInfoDidLoad);
        MessageObject messageObject = this.currentMessageObject;
        if (messageObject != null) {
            messageObject.animateComments = false;
        }
        MessageObject messageObject2 = this.messageObjectToSet;
        if (messageObject2 != null) {
            messageObject2.animateComments = false;
            setMessageContent(messageObject2, this.groupedMessagesToSet, this.bottomNearToSet, this.topNearToSet);
            this.messageObjectToSet = null;
            this.groupedMessagesToSet = null;
        }
        CheckBoxBase checkBoxBase = this.checkBox;
        if (checkBoxBase != null) {
            checkBoxBase.onAttachedToWindow();
        }
        CheckBoxBase checkBoxBase2 = this.mediaCheckBox;
        if (checkBoxBase2 != null) {
            checkBoxBase2.onAttachedToWindow();
        }
        if (this.pollCheckBox != null) {
            int i = 0;
            while (true) {
                CheckBoxBase[] checkBoxBaseArr = this.pollCheckBox;
                if (i >= checkBoxBaseArr.length) {
                    break;
                }
                checkBoxBaseArr[i].onAttachedToWindow();
                i++;
            }
        }
        this.attachedToWindow = true;
        float f = 0.0f;
        this.animationOffsetX = 0.0f;
        this.slidingOffsetX = 0.0f;
        this.checkBoxTranslation = 0;
        updateTranslation();
        this.avatarImage.setParentView((View) getParent());
        this.avatarImage.onAttachedToWindow();
        checkImageReceiversAttachState();
        MessageObject messageObject3 = this.currentMessageObject;
        if (messageObject3 != null) {
            setAvatar(messageObject3);
        }
        int i2 = this.documentAttachType;
        if (i2 == 4 && this.autoPlayingMedia) {
            boolean isPlayingMessage = MediaController.getInstance().isPlayingMessage(this.currentMessageObject);
            this.animatingNoSoundPlaying = isPlayingMessage;
            this.animatingNoSoundProgress = isPlayingMessage ? 0.0f : 1.0f;
            this.animatingNoSound = 0;
        } else {
            this.animatingNoSoundPlaying = false;
            this.animatingNoSoundProgress = 0.0f;
            this.animatingDrawVideoImageButtonProgress = ((i2 == 4 || i2 == 2) && this.drawVideoSize) ? 1.0f : 0.0f;
        }
        if (getDelegate() != null && getDelegate().getTextSelectionHelper() != null) {
            getDelegate().getTextSelectionHelper().onChatMessageCellAttached(this);
        }
        if (this.documentAttachType == 5) {
            if (MediaController.getInstance().isPlayingMessage(this.currentMessageObject)) {
                f = 1.0f;
            }
            this.toSeekBarProgress = f;
        }
        this.reactionsLayoutInBubble.onAttachToWindow();
        updateFlagSecure();
    }

    private void checkImageReceiversAttachState() {
        boolean z = true;
        boolean z2 = this.attachedToWindow && (this.visibleOnScreen || !this.shouldCheckVisibleOnScreen);
        if (z2 == this.imageReceiversAttachState) {
            return;
        }
        this.imageReceiversAttachState = z2;
        if (z2) {
            this.radialProgress.onAttachedToWindow();
            this.videoRadialProgress.onAttachedToWindow();
            if (this.pollAvatarImages != null) {
                int i = 0;
                while (true) {
                    ImageReceiver[] imageReceiverArr = this.pollAvatarImages;
                    if (i >= imageReceiverArr.length) {
                        break;
                    }
                    imageReceiverArr[i].onAttachedToWindow();
                    i++;
                }
            }
            if (this.commentAvatarImages != null) {
                int i2 = 0;
                while (true) {
                    ImageReceiver[] imageReceiverArr2 = this.commentAvatarImages;
                    if (i2 >= imageReceiverArr2.length) {
                        break;
                    }
                    imageReceiverArr2[i2].onAttachedToWindow();
                    i2++;
                }
            }
            this.replyImageReceiver.onAttachedToWindow();
            this.locationImageReceiver.onAttachedToWindow();
            if (this.photoImage.onAttachedToWindow()) {
                if (this.drawPhotoImage) {
                    updateButtonState(false, false, false);
                }
            } else {
                updateButtonState(false, false, false);
            }
            MessageObject messageObject = this.currentMessageObject;
            TLRPC$PhotoSize tLRPC$PhotoSize = null;
            if (messageObject != null && (this.isRoundVideo || messageObject.isVideo())) {
                checkVideoPlayback(true, null);
            }
            MessageObject messageObject2 = this.currentMessageObject;
            if (messageObject2 != null && !messageObject2.mediaExists) {
                int canDownloadMedia = DownloadController.getInstance(this.currentAccount).canDownloadMedia(this.currentMessageObject.messageOwner);
                TLRPC$Document document = this.currentMessageObject.getDocument();
                if (!(MessageObject.isStickerDocument(document) || MessageObject.isAnimatedStickerDocument(document, true) || MessageObject.isGifDocument(document) || MessageObject.isRoundVideoDocument(document))) {
                    if (document == null) {
                        tLRPC$PhotoSize = FileLoader.getClosestPhotoSizeWithSize(this.currentMessageObject.photoThumbs, AndroidUtilities.getPhotoSize());
                    }
                    int i3 = 2;
                    if (canDownloadMedia == 2 || (canDownloadMedia == 1 && this.currentMessageObject.isVideo())) {
                        if (document != null && !this.currentMessageObject.shouldEncryptPhotoOrVideo() && this.currentMessageObject.canStreamVideo()) {
                            FileLoader.getInstance(this.currentAccount).loadFile(document, this.currentMessageObject, 0, 10);
                        }
                    } else if (canDownloadMedia != 0) {
                        if (document != null) {
                            FileLoader fileLoader = FileLoader.getInstance(this.currentAccount);
                            MessageObject messageObject3 = this.currentMessageObject;
                            if (!MessageObject.isVideoDocument(document) || !this.currentMessageObject.shouldEncryptPhotoOrVideo()) {
                                i3 = 0;
                            }
                            fileLoader.loadFile(document, messageObject3, 0, i3);
                        } else if (tLRPC$PhotoSize != null) {
                            FileLoader fileLoader2 = FileLoader.getInstance(this.currentAccount);
                            ImageLocation forObject = ImageLocation.getForObject(tLRPC$PhotoSize, this.currentMessageObject.photoThumbsObject);
                            MessageObject messageObject4 = this.currentMessageObject;
                            fileLoader2.loadFile(forObject, messageObject4, null, 0, messageObject4.shouldEncryptPhotoOrVideo() ? 2 : 0);
                        }
                    }
                    updateButtonState(false, false, false);
                }
            }
            this.animatedEmojiReplyStack = AnimatedEmojiSpan.update(0, (View) this, false, this.animatedEmojiReplyStack, this.replyTextLayout);
            updateAnimatedEmojis();
            return;
        }
        this.radialProgress.onDetachedFromWindow();
        this.videoRadialProgress.onDetachedFromWindow();
        if (this.pollAvatarImages != null) {
            int i4 = 0;
            while (true) {
                ImageReceiver[] imageReceiverArr3 = this.pollAvatarImages;
                if (i4 >= imageReceiverArr3.length) {
                    break;
                }
                imageReceiverArr3[i4].onDetachedFromWindow();
                i4++;
            }
        }
        if (this.commentAvatarImages != null) {
            int i5 = 0;
            while (true) {
                ImageReceiver[] imageReceiverArr4 = this.commentAvatarImages;
                if (i5 >= imageReceiverArr4.length) {
                    break;
                }
                imageReceiverArr4[i5].onDetachedFromWindow();
                i5++;
            }
        }
        this.replyImageReceiver.onDetachedFromWindow();
        this.locationImageReceiver.onDetachedFromWindow();
        this.photoImage.onDetachedFromWindow();
        MessageObject messageObject5 = this.currentMessageObject;
        if (messageObject5 != null && !messageObject5.mediaExists && !messageObject5.putInDownloadsStore && !DownloadController.getInstance(this.currentAccount).isDownloading(this.currentMessageObject.messageOwner.id)) {
            TLRPC$Document document2 = this.currentMessageObject.getDocument();
            if (!MessageObject.isStickerDocument(document2) && !MessageObject.isAnimatedStickerDocument(document2, true) && !MessageObject.isGifDocument(document2) && !MessageObject.isRoundVideoDocument(document2)) {
                z = false;
            }
            if (!z) {
                if (document2 != null) {
                    FileLoader.getInstance(this.currentAccount).cancelLoadFile(document2);
                } else {
                    TLRPC$PhotoSize closestPhotoSizeWithSize = FileLoader.getClosestPhotoSizeWithSize(this.currentMessageObject.photoThumbs, AndroidUtilities.getPhotoSize());
                    if (closestPhotoSizeWithSize != null) {
                        FileLoader.getInstance(this.currentAccount).cancelLoadFile(closestPhotoSizeWithSize);
                    }
                }
            }
        }
        AnimatedEmojiSpan.release(this, this.animatedEmojiReplyStack);
        AnimatedEmojiSpan.release(this, this.animatedEmojiStack);
    }

    /* JADX WARN: Can't wrap try/catch for region: R(33:3850|(4:2991|(1:(3:2993|2994|(2:3988|2996)(1:2997))(2:3987|2998))|2999|(1:3001))(1:3002)|3003|(19:3008|3029|3030|(4:3032|(1:3034)(1:3035)|3036|(6:3038|(1:3040)|3041|(1:3043)(1:3044)|3045|(2:3047|(1:(4:3058|(1:3060)|3061|(1:3063)))(3:3051|(2:3053|(1:3055))|3056))))|3064|(3:3071|(1:3073)|3074)|(2:3095|(2:3105|(1:3107)(1:3108)))(3:3085|(2:3091|(1:3093))|3094)|3109|(1:3116)(1:3115)|3117|(1:3123)(1:3122)|3124|(1:3129)|3130|(2:3132|(1:3152)(5:3142|(3:3144|(1:3149)(1:3148)|3150)(1:3151)|3155|(2:3157|(2:3164|(2:(1:3168)|3169))(1:3163))(2:3170|(2:3172|(1:3174)(2:3175|(3:3177|(1:3179)(1:3180)|(3:3198|(1:3200)(1:3201)|3202)(2:3188|(3:3193|(1:3195)(1:3196)|3197)(1:3192)))(1:3203)))(2:3204|(6:3227|(1:3229)(2:3230|(1:3232)(1:3233))|3234|(1:3239)(1:3238)|3240|(2:3303|(2:(1:3313)|3314)(1:3309))(1:(1:(3:3284|(1:3286)(1:3287)|3288)(1:(1:3302)(5:3294|(1:3296)|3297|(1:3299)(1:3300)|3301)))(3:3259|(1:3261)|(2:3276|(1:3282)(1:3281))(5:3268|(1:3270)|3271|(1:3273)(1:3274)|3275))))(2:3208|(4:(1:3221)|3222|(1:3224)(1:3225)|3226)(3:3213|(1:3215)(1:3216)|3217))))|3315))(1:3153)|3154|3155|(0)(0)|3315)|3009|3862|3010|(26:3018|3019|3030|(0)|3064|(1:3075)(4:3066|3071|(0)|3074)|(0)|3095|(17:3097|3105|(0)(0)|3109|(1:3111)|3116|3117|(0)|3123|3124|(2:3127|3129)|3130|(0)(0)|3154|3155|(0)(0)|3315)|3099|3105|(0)(0)|3109|(0)|3116|3117|(0)|3123|3124|(0)|3130|(0)(0)|3154|3155|(0)(0)|3315)|3027|3030|(0)|3064|(0)(0)|(0)|3095|(0)|3099|3105|(0)(0)|3109|(0)|3116|3117|(0)|3123|3124|(0)|3130|(0)(0)|3154|3155|(0)(0)|3315) */
    /* JADX WARN: Code restructure failed: missing block: B:1316:0x19f1, code lost:
        if (r0 != 8) goto L1319;
     */
    /* JADX WARN: Code restructure failed: missing block: B:2395:0x3649, code lost:
        if (r0 < (r8.timeWidth + org.telegram.messenger.AndroidUtilities.dp((r63.isOutOwner() ? 20 : 0) + 20))) goto L2396;
     */
    /* JADX WARN: Code restructure failed: missing block: B:2632:0x3c91, code lost:
        if (r2 == 8) goto L2634;
     */
    /* JADX WARN: Code restructure failed: missing block: B:2971:0x430b, code lost:
        if (r4.isSmall == false) goto L2972;
     */
    /* JADX WARN: Code restructure failed: missing block: B:3020:0x444e, code lost:
        r0 = move-exception;
     */
    /* JADX WARN: Code restructure failed: missing block: B:3021:0x444f, code lost:
        r6 = r0;
        r0 = r14;
        r14 = r7;
     */
    /* JADX WARN: Code restructure failed: missing block: B:3078:0x4576, code lost:
        if (r3 >= (r8.captionWidth + org.telegram.messenger.AndroidUtilities.dp(10.0f))) goto L3082;
     */
    /* JADX WARN: Code restructure failed: missing block: B:3079:0x4578, code lost:
        r3 = r8.captionWidth + org.telegram.messenger.AndroidUtilities.dp(10.0f);
        r5 = org.telegram.messenger.AndroidUtilities.dp(8.0f) + r3;
        r8.backgroundWidth = r5;
     */
    /* JADX WARN: Code restructure failed: missing block: B:3080:0x4588, code lost:
        if (r8.mediaBackground != false) goto L3082;
     */
    /* JADX WARN: Code restructure failed: missing block: B:3081:0x458a, code lost:
        r8.backgroundWidth = r5 + org.telegram.messenger.AndroidUtilities.dp(9.0f);
     */
    /* JADX WARN: Code restructure failed: missing block: B:41:0x008a, code lost:
        if (r8.isPlayingRound != (org.telegram.messenger.MediaController.getInstance().isPlayingMessage(r8.currentMessageObject) && (r10 = r8.delegate) != null && !r10.keyboardIsOpened())) goto L43;
     */
    /* JADX WARN: Code restructure failed: missing block: B:780:0x0ebb, code lost:
        if (r4 != 13) goto L786;
     */
    /* JADX WARN: Code restructure failed: missing block: B:930:0x11c6, code lost:
        if (r8.isSmallImage != false) goto L933;
     */
    /* JADX WARN: Multi-variable search skipped. Vars limit reached: 6749 (expected less than 5000) */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:1012:0x1370 A[Catch: Exception -> 0x1402, TryCatch #32 {Exception -> 0x1402, blocks: (B:984:0x12cb, B:986:0x12d6, B:988:0x12e8, B:997:0x1300, B:1001:0x131c, B:1004:0x1331, B:1008:0x1344, B:1009:0x1350, B:1010:0x1368, B:1012:0x1370, B:1014:0x137e, B:1016:0x1382, B:1017:0x1386, B:1019:0x138e, B:1020:0x1391, B:1021:0x1398, B:1023:0x13a0, B:1025:0x13ae, B:1027:0x13b2, B:1029:0x13b7, B:1033:0x13c0), top: B:3889:0x12cb }] */
    /* JADX WARN: Removed duplicated region for block: B:1023:0x13a0 A[Catch: Exception -> 0x1402, TryCatch #32 {Exception -> 0x1402, blocks: (B:984:0x12cb, B:986:0x12d6, B:988:0x12e8, B:997:0x1300, B:1001:0x131c, B:1004:0x1331, B:1008:0x1344, B:1009:0x1350, B:1010:0x1368, B:1012:0x1370, B:1014:0x137e, B:1016:0x1382, B:1017:0x1386, B:1019:0x138e, B:1020:0x1391, B:1021:0x1398, B:1023:0x13a0, B:1025:0x13ae, B:1027:0x13b2, B:1029:0x13b7, B:1033:0x13c0), top: B:3889:0x12cb }] */
    /* JADX WARN: Removed duplicated region for block: B:1044:0x13e2  */
    /* JADX WARN: Removed duplicated region for block: B:1057:0x140d  */
    /* JADX WARN: Removed duplicated region for block: B:1064:0x141f  */
    /* JADX WARN: Removed duplicated region for block: B:1066:0x1423  */
    /* JADX WARN: Removed duplicated region for block: B:1259:0x1916  */
    /* JADX WARN: Removed duplicated region for block: B:1274:0x1958  */
    /* JADX WARN: Removed duplicated region for block: B:1275:0x1963  */
    /* JADX WARN: Removed duplicated region for block: B:1278:0x196b  */
    /* JADX WARN: Removed duplicated region for block: B:1289:0x198c  */
    /* JADX WARN: Removed duplicated region for block: B:1322:0x19fd  */
    /* JADX WARN: Removed duplicated region for block: B:1325:0x1a11  */
    /* JADX WARN: Removed duplicated region for block: B:1326:0x1a18  */
    /* JADX WARN: Removed duplicated region for block: B:1347:0x1a57  */
    /* JADX WARN: Removed duplicated region for block: B:1352:0x1a66  */
    /* JADX WARN: Removed duplicated region for block: B:1353:0x1a6b  */
    /* JADX WARN: Removed duplicated region for block: B:1356:0x1a77  */
    /* JADX WARN: Removed duplicated region for block: B:1359:0x1a81  */
    /* JADX WARN: Removed duplicated region for block: B:1364:0x1a8a  */
    /* JADX WARN: Removed duplicated region for block: B:1366:0x1a96  */
    /* JADX WARN: Removed duplicated region for block: B:1394:0x1b01  */
    /* JADX WARN: Removed duplicated region for block: B:1397:0x1b18  */
    /* JADX WARN: Removed duplicated region for block: B:1412:0x1b69  */
    /* JADX WARN: Removed duplicated region for block: B:1416:0x1b94  */
    /* JADX WARN: Removed duplicated region for block: B:1419:0x1ba9  */
    /* JADX WARN: Removed duplicated region for block: B:1425:0x1c07  */
    /* JADX WARN: Removed duplicated region for block: B:1427:0x1c37  */
    /* JADX WARN: Removed duplicated region for block: B:1548:0x1fdb  */
    /* JADX WARN: Removed duplicated region for block: B:1569:0x2045  */
    /* JADX WARN: Removed duplicated region for block: B:1599:0x218b  */
    /* JADX WARN: Removed duplicated region for block: B:1690:0x23f8  */
    /* JADX WARN: Removed duplicated region for block: B:1691:0x23fb  */
    /* JADX WARN: Removed duplicated region for block: B:1694:0x240e  */
    /* JADX WARN: Removed duplicated region for block: B:1696:0x2419  */
    /* JADX WARN: Removed duplicated region for block: B:1726:0x250f  */
    /* JADX WARN: Removed duplicated region for block: B:1729:0x251c  */
    /* JADX WARN: Removed duplicated region for block: B:172:0x01f9  */
    /* JADX WARN: Removed duplicated region for block: B:1730:0x2520  */
    /* JADX WARN: Removed duplicated region for block: B:173:0x0206  */
    /* JADX WARN: Removed duplicated region for block: B:176:0x020b  */
    /* JADX WARN: Removed duplicated region for block: B:177:0x020d  */
    /* JADX WARN: Removed duplicated region for block: B:2332:0x32dc  */
    /* JADX WARN: Removed duplicated region for block: B:2366:0x34f4  */
    /* JADX WARN: Removed duplicated region for block: B:237:0x02fa  */
    /* JADX WARN: Removed duplicated region for block: B:2421:0x3723  */
    /* JADX WARN: Removed duplicated region for block: B:2432:0x373e  */
    /* JADX WARN: Removed duplicated region for block: B:2435:0x374f  */
    /* JADX WARN: Removed duplicated region for block: B:2436:0x3770  */
    /* JADX WARN: Removed duplicated region for block: B:2460:0x3817  */
    /* JADX WARN: Removed duplicated region for block: B:2572:0x3b17  */
    /* JADX WARN: Removed duplicated region for block: B:2612:0x3c0d  */
    /* JADX WARN: Removed duplicated region for block: B:2615:0x3c1e  */
    /* JADX WARN: Removed duplicated region for block: B:2616:0x3c40  */
    /* JADX WARN: Removed duplicated region for block: B:2671:0x3d4c  */
    /* JADX WARN: Removed duplicated region for block: B:2674:0x3d54  */
    /* JADX WARN: Removed duplicated region for block: B:2679:0x3d5f  */
    /* JADX WARN: Removed duplicated region for block: B:2708:0x3dc5  */
    /* JADX WARN: Removed duplicated region for block: B:2709:0x3dca  */
    /* JADX WARN: Removed duplicated region for block: B:272:0x0353  */
    /* JADX WARN: Removed duplicated region for block: B:2736:0x3e16  */
    /* JADX WARN: Removed duplicated region for block: B:273:0x0358  */
    /* JADX WARN: Removed duplicated region for block: B:2753:0x3e62 A[ADDED_TO_REGION] */
    /* JADX WARN: Removed duplicated region for block: B:2757:0x3e70  */
    /* JADX WARN: Removed duplicated region for block: B:2762:0x3e88  */
    /* JADX WARN: Removed duplicated region for block: B:2769:0x3ea1  */
    /* JADX WARN: Removed duplicated region for block: B:2776:0x3ee4  */
    /* JADX WARN: Removed duplicated region for block: B:2779:0x3eef  */
    /* JADX WARN: Removed duplicated region for block: B:2782:0x3f1c  */
    /* JADX WARN: Removed duplicated region for block: B:2783:0x3f1f  */
    /* JADX WARN: Removed duplicated region for block: B:2786:0x3f27  */
    /* JADX WARN: Removed duplicated region for block: B:2787:0x3f2a  */
    /* JADX WARN: Removed duplicated region for block: B:2790:0x3f34  */
    /* JADX WARN: Removed duplicated region for block: B:2793:0x3f3b  */
    /* JADX WARN: Removed duplicated region for block: B:2794:0x3f4c  */
    /* JADX WARN: Removed duplicated region for block: B:2804:0x3f75  */
    /* JADX WARN: Removed duplicated region for block: B:2960:0x42d0  */
    /* JADX WARN: Removed duplicated region for block: B:2977:0x4325  */
    /* JADX WARN: Removed duplicated region for block: B:3032:0x446a  */
    /* JADX WARN: Removed duplicated region for block: B:305:0x03f9  */
    /* JADX WARN: Removed duplicated region for block: B:3066:0x454c  */
    /* JADX WARN: Removed duplicated region for block: B:3073:0x4561  */
    /* JADX WARN: Removed duplicated region for block: B:3075:0x456c A[ADDED_TO_REGION] */
    /* JADX WARN: Removed duplicated region for block: B:3083:0x4595 A[ADDED_TO_REGION] */
    /* JADX WARN: Removed duplicated region for block: B:3097:0x4635  */
    /* JADX WARN: Removed duplicated region for block: B:3107:0x464d  */
    /* JADX WARN: Removed duplicated region for block: B:3108:0x4678  */
    /* JADX WARN: Removed duplicated region for block: B:3111:0x4692  */
    /* JADX WARN: Removed duplicated region for block: B:3119:0x46a1 A[ADDED_TO_REGION] */
    /* JADX WARN: Removed duplicated region for block: B:3126:0x46b0 A[ADDED_TO_REGION] */
    /* JADX WARN: Removed duplicated region for block: B:3132:0x46bc  */
    /* JADX WARN: Removed duplicated region for block: B:313:0x042c  */
    /* JADX WARN: Removed duplicated region for block: B:3153:0x46fe  */
    /* JADX WARN: Removed duplicated region for block: B:3157:0x4706  */
    /* JADX WARN: Removed duplicated region for block: B:3170:0x47d0  */
    /* JADX WARN: Removed duplicated region for block: B:3318:0x4bc1  */
    /* JADX WARN: Removed duplicated region for block: B:3329:0x4be4  */
    /* JADX WARN: Removed duplicated region for block: B:3338:0x4c0e  */
    /* JADX WARN: Removed duplicated region for block: B:3345:0x4c30  */
    /* JADX WARN: Removed duplicated region for block: B:3348:0x4c47  */
    /* JADX WARN: Removed duplicated region for block: B:3360:0x4c80  */
    /* JADX WARN: Removed duplicated region for block: B:3363:0x4c8d  */
    /* JADX WARN: Removed duplicated region for block: B:3364:0x4c9d  */
    /* JADX WARN: Removed duplicated region for block: B:3367:0x4cb0  */
    /* JADX WARN: Removed duplicated region for block: B:337:0x04f7  */
    /* JADX WARN: Removed duplicated region for block: B:3396:0x4d28  */
    /* JADX WARN: Removed duplicated region for block: B:3406:0x4d46  */
    /* JADX WARN: Removed duplicated region for block: B:3494:0x4f20  */
    /* JADX WARN: Removed duplicated region for block: B:3505:0x4f4a  */
    /* JADX WARN: Removed duplicated region for block: B:3548:0x507a  */
    /* JADX WARN: Removed duplicated region for block: B:354:0x0550  */
    /* JADX WARN: Removed duplicated region for block: B:355:0x0561  */
    /* JADX WARN: Removed duplicated region for block: B:3562:0x50b7  */
    /* JADX WARN: Removed duplicated region for block: B:3565:0x50c8  */
    /* JADX WARN: Removed duplicated region for block: B:3569:0x50d4  */
    /* JADX WARN: Removed duplicated region for block: B:357:0x056f  */
    /* JADX WARN: Removed duplicated region for block: B:3662:0x5376  */
    /* JADX WARN: Removed duplicated region for block: B:3669:0x5393  */
    /* JADX WARN: Removed duplicated region for block: B:3673:0x53a3  */
    /* JADX WARN: Removed duplicated region for block: B:3674:0x53ad  */
    /* JADX WARN: Removed duplicated region for block: B:3685:0x53cc  */
    /* JADX WARN: Removed duplicated region for block: B:3690:0x53eb  */
    /* JADX WARN: Removed duplicated region for block: B:3693:0x5402  */
    /* JADX WARN: Removed duplicated region for block: B:3696:0x540d  */
    /* JADX WARN: Removed duplicated region for block: B:3703:0x5440  */
    /* JADX WARN: Removed duplicated region for block: B:3705:0x5448  */
    /* JADX WARN: Removed duplicated region for block: B:3755:0x54c4  */
    /* JADX WARN: Removed duplicated region for block: B:3761:0x54d3  */
    /* JADX WARN: Removed duplicated region for block: B:3773:0x54f5  */
    /* JADX WARN: Removed duplicated region for block: B:3778:0x5500  */
    /* JADX WARN: Removed duplicated region for block: B:3791:0x5547  */
    /* JADX WARN: Removed duplicated region for block: B:3802:0x556f  */
    /* JADX WARN: Removed duplicated region for block: B:3808:0x5583  */
    /* JADX WARN: Removed duplicated region for block: B:3817:0x55b8  */
    /* JADX WARN: Removed duplicated region for block: B:3856:0x4335 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:3858:0x4e50 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:3880:0x0fa4 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:3887:0x200f A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:3894:0x0441 A[EDGE_INSN: B:3894:0x0441->B:317:0x0441 ?: BREAK  , SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:418:0x0690  */
    /* JADX WARN: Removed duplicated region for block: B:419:0x06a3  */
    /* JADX WARN: Removed duplicated region for block: B:424:0x06c9  */
    /* JADX WARN: Removed duplicated region for block: B:425:0x06cb  */
    /* JADX WARN: Removed duplicated region for block: B:447:0x0765  */
    /* JADX WARN: Removed duplicated region for block: B:462:0x07d5  */
    /* JADX WARN: Removed duplicated region for block: B:659:0x0c69  */
    /* JADX WARN: Removed duplicated region for block: B:665:0x0c78  */
    /* JADX WARN: Removed duplicated region for block: B:673:0x0cbf  */
    /* JADX WARN: Removed duplicated region for block: B:680:0x0cfa  */
    /* JADX WARN: Removed duplicated region for block: B:686:0x0d1c  */
    /* JADX WARN: Removed duplicated region for block: B:68:0x00d3  */
    /* JADX WARN: Removed duplicated region for block: B:694:0x0d44  */
    /* JADX WARN: Removed duplicated region for block: B:697:0x0d6d  */
    /* JADX WARN: Removed duplicated region for block: B:69:0x00d5  */
    /* JADX WARN: Removed duplicated region for block: B:702:0x0d7c  */
    /* JADX WARN: Removed duplicated region for block: B:709:0x0d9b  */
    /* JADX WARN: Removed duplicated region for block: B:712:0x0db3  */
    /* JADX WARN: Removed duplicated region for block: B:717:0x0dcf  */
    /* JADX WARN: Removed duplicated region for block: B:720:0x0de4  */
    /* JADX WARN: Removed duplicated region for block: B:771:0x0ea6  */
    /* JADX WARN: Removed duplicated region for block: B:785:0x0ec6  */
    /* JADX WARN: Removed duplicated region for block: B:788:0x0ecb A[ADDED_TO_REGION] */
    /* JADX WARN: Removed duplicated region for block: B:794:0x0eeb  */
    /* JADX WARN: Removed duplicated region for block: B:809:0x0f4f  */
    /* JADX WARN: Removed duplicated region for block: B:810:0x0f59  */
    /* JADX WARN: Removed duplicated region for block: B:822:0x0f8c  */
    /* JADX WARN: Removed duplicated region for block: B:823:0x0f8e  */
    /* JADX WARN: Removed duplicated region for block: B:826:0x0f9c A[ADDED_TO_REGION] */
    /* JADX WARN: Removed duplicated region for block: B:887:0x10da  */
    /* JADX WARN: Removed duplicated region for block: B:890:0x10ea  */
    /* JADX WARN: Removed duplicated region for block: B:952:0x11fd  */
    /* JADX WARN: Removed duplicated region for block: B:956:0x1210  */
    /* JADX WARN: Removed duplicated region for block: B:958:0x1215 A[ADDED_TO_REGION] */
    /* JADX WARN: Removed duplicated region for block: B:983:0x12ca  */
    /* JADX WARN: Type inference failed for: r0v180, types: [android.text.StaticLayout$Builder] */
    /* JADX WARN: Type inference failed for: r5v289 */
    /* JADX WARN: Type inference failed for: r5v308 */
    /* JADX WARN: Type inference failed for: r5v414 */
    /* JADX WARN: Type inference failed for: r5v48 */
    /* JADX WARN: Type inference failed for: r5v8, types: [int, boolean] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void setMessageContent(final MessageObject messageObject, MessageObject.GroupedMessages groupedMessages, boolean z, boolean z2) {
        boolean z3;
        boolean z4;
        boolean z5;
        boolean z6;
        MessageObject messageObject2;
        TranscribeButton transcribeButton;
        boolean z7;
        boolean z8;
        boolean z9;
        ChatMessageCellDelegate chatMessageCellDelegate;
        MessageObject.GroupedMessages groupedMessages2;
        boolean z10;
        boolean z11;
        MessageObject.GroupedMessages groupedMessages3;
        boolean z12;
        int i;
        boolean z13;
        float f;
        char c;
        ?? r5;
        char c2;
        MessageObject.GroupedMessagePosition groupedMessagePosition;
        MessageObject messageObject3;
        boolean z14;
        int i2;
        int i3;
        int i4;
        MessageObject.GroupedMessagePosition groupedMessagePosition2;
        TLRPC$ReplyMarkup tLRPC$ReplyMarkup;
        HashMap hashMap;
        int i5;
        BotButton botButton;
        HashMap hashMap2;
        CharSequence ellipsize;
        String str;
        int i6;
        TLRPC$User user;
        int i7;
        char c3;
        MessageObject.GroupedMessagePosition groupedMessagePosition3;
        Exception e;
        int i8;
        int i9;
        int i10;
        int i11;
        char c4;
        int i12;
        int i13;
        MessageObject.GroupedMessagePosition groupedMessagePosition4;
        int i14;
        int i15;
        MessageObject.GroupedMessagePosition groupedMessagePosition5;
        int i16;
        boolean z15;
        int i17;
        boolean z16;
        BitmapDrawable bitmapDrawable;
        int i18;
        int i19;
        TLRPC$PhotoSize tLRPC$PhotoSize;
        TLRPC$PhotoSize tLRPC$PhotoSize2;
        int dp;
        boolean z17;
        boolean z18;
        int i20;
        boolean z19;
        int i21;
        boolean z20;
        int i22;
        int i23;
        int i24;
        MessageObject messageObject4;
        int i25;
        char c5;
        int i26;
        Exception exc;
        int i27;
        Exception e2;
        int lineCount;
        int dp2;
        MessageObject.GroupedMessagePosition groupedMessagePosition6;
        int measureText;
        TLRPC$PhotoSize tLRPC$PhotoSize3;
        int i28;
        TLRPC$PhotoSize tLRPC$PhotoSize4;
        boolean z21;
        int i29;
        char c6;
        int i30;
        int i31;
        char c7;
        boolean z22;
        ArrayList<TLRPC$PhotoSize> arrayList;
        int i32;
        ImageLocation forObject;
        int i33;
        int i34;
        int i35;
        float f2;
        MessageObject.GroupedMessagePosition groupedMessagePosition7;
        int i36;
        int dp3;
        int i37;
        int i38;
        int i39;
        int i40;
        int i41;
        boolean z23;
        int i42;
        int i43;
        CharSequence charSequence;
        int dp4;
        int i44;
        double d;
        int i45;
        MessageObject.GroupedMessagePosition groupedMessagePosition8;
        float[] fArr;
        int i46;
        int i47;
        int i48;
        MessageObject.GroupedMessagePosition groupedMessagePosition9;
        TLRPC$Document document;
        int i49;
        float f3;
        float f4;
        TLRPC$PhotoSize tLRPC$PhotoSize5;
        TLRPC$PhotoSize tLRPC$PhotoSize6;
        int i50;
        int i51;
        int i52;
        int i53;
        float f5;
        float f6;
        int i54;
        int i55;
        Object obj;
        String str2;
        boolean z24;
        Object obj2;
        Drawable drawable;
        int i56;
        ReactionsLayoutInBubble reactionsLayoutInBubble;
        String str3;
        Drawable drawable2;
        Drawable drawable3;
        int i57;
        TLRPC$MessageMedia tLRPC$MessageMedia;
        int i58;
        int i59;
        int i60;
        int i61;
        int i62;
        MessageObject messageObject5;
        int i63;
        ReactionsLayoutInBubble reactionsLayoutInBubble2;
        int i64;
        int i65;
        TLRPC$Message tLRPC$Message;
        int i66;
        int i67;
        StaticLayout staticLayout;
        MessageObject.GroupedMessages groupedMessages4;
        StaticLayout staticLayout2;
        int dp5;
        MessageObject.GroupedMessagePosition groupedMessagePosition10;
        float f7;
        boolean z25;
        String str4;
        ArrayList arrayList2;
        byte[] bArr;
        String str5;
        PollButton pollButton;
        int i68;
        int i69;
        boolean z26;
        CharSequence charSequence2;
        double d2;
        int i70;
        int i71;
        MessageObject.GroupedMessages groupedMessages5;
        MessageObject.GroupedMessagePosition groupedMessagePosition11;
        int i72;
        boolean z27;
        CharSequence string;
        String replace;
        ReactionsLayoutInBubble reactionsLayoutInBubble3;
        MessageObject.GroupedMessagePosition groupedMessagePosition12;
        String str6;
        int i73;
        int i74;
        int i75;
        TLRPC$Document tLRPC$Document;
        boolean z28;
        TLRPC$ThemeSettings tLRPC$ThemeSettings;
        ReactionsLayoutInBubble reactionsLayoutInBubble4;
        int max;
        MessageObject messageObject6;
        boolean z29;
        int i76;
        int i77;
        WebFile webFile;
        boolean z30;
        int i78;
        String str7;
        String str8;
        String str9;
        CharSequence charSequence3;
        TLRPC$Photo tLRPC$Photo;
        int i79;
        TLRPC$Document tLRPC$Document2;
        String str10;
        int i80;
        String str11;
        MessageObject messageObject7;
        int i81;
        String str12;
        String str13;
        TLRPC$Document tLRPC$Document3;
        TLRPC$Photo tLRPC$Photo2;
        int i82;
        int i83;
        Exception e3;
        int i84;
        int i85;
        int i86;
        StaticLayout staticLayout3;
        int max2;
        int i87;
        int i88;
        boolean z31;
        boolean z32;
        int i89;
        boolean z33;
        String str14;
        int i90;
        WebFile webFile2;
        MessageObject messageObject8;
        TLRPC$Photo tLRPC$Photo3;
        int i91;
        TLRPC$Document tLRPC$Document4;
        int i92;
        int i93;
        int i94;
        String str15;
        boolean z34;
        int i95;
        TLRPC$PhotoSize tLRPC$PhotoSize7;
        int i96;
        String str16;
        int i97;
        String str17;
        boolean z35;
        long j;
        TLRPC$User user2;
        String str18;
        boolean z36;
        MessageObject messageObject9;
        MessageObject messageObject10;
        int i98;
        int i99;
        int i100;
        int i101;
        int i102;
        int i103;
        int i104;
        WebFile webFile3;
        boolean z37;
        BitmapDrawable bitmapDrawable2;
        TLRPC$PhotoSize tLRPC$PhotoSize8;
        float f8;
        Exception e4;
        int i105;
        int i106;
        int i107;
        int i108;
        Exception e5;
        int i109;
        boolean z38;
        Exception e6;
        int i110;
        int max3;
        int i111;
        int i112;
        int i113;
        String str19;
        int i114;
        int i115;
        String str20;
        int i116;
        TLRPC$Document tLRPC$Document5;
        TLRPC$Photo tLRPC$Photo4;
        int i117;
        int i118;
        boolean z39;
        int i119;
        int i120;
        int i121;
        MessageObject.GroupedMessagePosition groupedMessagePosition13;
        int i122;
        String str21;
        AnimatedNumberLayout animatedNumberLayout;
        boolean z40;
        TLRPC$Chat tLRPC$Chat;
        TLRPC$User tLRPC$User;
        ArrayList<MessageObject.TextLayoutBlock> arrayList3;
        MessageObject.GroupedMessagePosition groupedMessagePosition14;
        int i123;
        Drawable[] drawableArr;
        TLRPC$Message tLRPC$Message2;
        MessageObject.GroupedMessagePosition groupedMessagePosition15;
        MessageObject.GroupedMessagePosition groupedMessagePosition16;
        TLRPC$MessageFwdHeader tLRPC$MessageFwdHeader;
        ChatMessageCellDelegate chatMessageCellDelegate2;
        MessageObject.GroupedMessagePosition groupedMessagePosition17;
        MessageObject.GroupedMessagePosition groupedMessagePosition18;
        ArrayList<TLRPC$TL_pollAnswerVoters> arrayList4;
        int i124;
        TLRPC$Poll tLRPC$Poll;
        TLRPC$TL_messageMediaPoll tLRPC$TL_messageMediaPoll;
        TLRPC$PollResults tLRPC$PollResults;
        TLRPC$TL_pollAnswerVoters tLRPC$TL_pollAnswerVoters;
        String str22;
        int i125;
        MessageObject.GroupedMessagePosition groupedMessagePosition19;
        float[] fArr2;
        ChatMessageCell chatMessageCell = this;
        if (messageObject.checkLayout() || (chatMessageCell.currentPosition != null && chatMessageCell.lastHeight != AndroidUtilities.displaySize.y)) {
            chatMessageCell.currentMessageObject = null;
        }
        boolean z41 = chatMessageCell.lastWidth != getParentWidth();
        chatMessageCell.lastHeight = AndroidUtilities.displaySize.y;
        chatMessageCell.lastWidth = getParentWidth();
        chatMessageCell.isRoundVideo = messageObject.isRoundVideo();
        TLRPC$Message tLRPC$Message3 = messageObject.hasValidReplyMessageObject() ? messageObject.replyMessageObject.messageOwner : null;
        MessageObject messageObject11 = chatMessageCell.currentMessageObject;
        boolean z42 = messageObject11 == null || messageObject11.getId() != messageObject.getId();
        if (chatMessageCell.currentMessageObject == messageObject && !messageObject.forceUpdate) {
            if (chatMessageCell.isRoundVideo) {
            }
            z3 = false;
            MessageObject messageObject12 = chatMessageCell.currentMessageObject;
            z4 = (messageObject12 == null && messageObject12.getId() == messageObject.getId() && chatMessageCell.lastSendState == 3 && messageObject.isSent()) || !((chatMessageCell.currentMessageObject != messageObject || (!isUserDataChanged() && !chatMessageCell.photoNotSet)) && chatMessageCell.lastPostAuthor == messageObject.messageOwner.post_author && chatMessageCell.wasPinned == chatMessageCell.isPinned && tLRPC$Message3 == chatMessageCell.lastReplyMessage);
            z5 = groupedMessages == chatMessageCell.currentMessagesGroup;
            chatMessageCell.accessibilityText = null;
            if (!chatMessageCell.drawCommentButton || chatMessageCell.useTranscribeButton || (chatMessageCell.drawSideButton == 3 && (((!chatMessageCell.hasDiscussion || !messageObject.isLinkedToChat(chatMessageCell.linkedChatId)) && !chatMessageCell.isRepliesChat) || ((groupedMessagePosition19 = chatMessageCell.currentPosition) != null && (((fArr2 = groupedMessagePosition19.siblingHeights) != null || (groupedMessagePosition19.flags & 8) == 0) && (fArr2 == null || (groupedMessagePosition19.flags & 4) != 0)))))) {
                z4 = true;
            }
            if (!z3 && messageObject.isDice()) {
                chatMessageCell.setCurrentDiceValue(chatMessageCell.isUpdating);
            }
            if (!z3 || !messageObject.isPoll()) {
                z6 = false;
            } else {
                TLRPC$MessageMedia tLRPC$MessageMedia2 = messageObject.messageOwner.media;
                if (tLRPC$MessageMedia2 instanceof TLRPC$TL_messageMediaPoll) {
                    TLRPC$TL_messageMediaPoll tLRPC$TL_messageMediaPoll2 = (TLRPC$TL_messageMediaPoll) tLRPC$MessageMedia2;
                    TLRPC$PollResults tLRPC$PollResults2 = tLRPC$TL_messageMediaPoll2.results;
                    arrayList4 = tLRPC$PollResults2.results;
                    tLRPC$Poll = tLRPC$TL_messageMediaPoll2.poll;
                    i124 = tLRPC$PollResults2.total_voters;
                } else {
                    tLRPC$Poll = null;
                    arrayList4 = null;
                    i124 = 0;
                }
                z6 = (arrayList4 == null || chatMessageCell.lastPollResults == null || i124 == chatMessageCell.lastPollResultsVoters) ? false : true;
                if (!z6 && arrayList4 != chatMessageCell.lastPollResults) {
                    z6 = true;
                }
                TLRPC$Poll tLRPC$Poll2 = chatMessageCell.lastPoll;
                if (tLRPC$Poll2 != tLRPC$Poll && tLRPC$Poll2.closed != tLRPC$Poll.closed) {
                    if (!chatMessageCell.pollVoted) {
                        chatMessageCell.pollVoteInProgress = true;
                        chatMessageCell.vibrateOnPollVote = false;
                    }
                    z6 = true;
                }
                chatMessageCell.animatePollAvatars = false;
                if (z6 && chatMessageCell.attachedToWindow) {
                    chatMessageCell.pollAnimationProgressTime = 0.0f;
                    if (chatMessageCell.pollVoted && !messageObject.isVoted()) {
                        chatMessageCell.pollUnvoteInProgress = true;
                    }
                    int i126 = chatMessageCell.lastPollResultsVoters;
                    chatMessageCell.animatePollAvatars = i126 == 0 || (i126 != 0 && i124 == 0);
                }
                if (!z42 && tLRPC$Poll != null && chatMessageCell.lastPoll.quiz && tLRPC$Poll.quiz && chatMessageCell.currentMessageObject != null && !chatMessageCell.pollVoted && messageObject.isVoted() && (tLRPC$PollResults = (tLRPC$TL_messageMediaPoll = (TLRPC$TL_messageMediaPoll) messageObject.messageOwner.media).results) != null && !tLRPC$PollResults.results.isEmpty()) {
                    int size = tLRPC$TL_messageMediaPoll.results.results.size();
                    int i127 = 0;
                    while (true) {
                        if (i127 >= size) {
                            tLRPC$TL_pollAnswerVoters = null;
                            break;
                        }
                        tLRPC$TL_pollAnswerVoters = tLRPC$TL_messageMediaPoll.results.results.get(i127);
                        if (tLRPC$TL_pollAnswerVoters.chosen) {
                            break;
                        }
                        i127++;
                    }
                    if (tLRPC$TL_pollAnswerVoters != null) {
                        int i128 = i127 + 500;
                        if (tLRPC$TL_pollAnswerVoters.correct) {
                            i125 = R.string.AccDescrQuizCorrectAnswer;
                            str22 = "AccDescrQuizCorrectAnswer";
                        } else {
                            i125 = R.string.AccDescrQuizIncorrectAnswer;
                            str22 = "AccDescrQuizIncorrectAnswer";
                        }
                        chatMessageCell.sendAccessibilityEventForVirtualView(i128, 4, LocaleController.getString(str22, i125));
                    }
                }
            }
            if (!z5 && groupedMessages != null) {
                z5 = (groupedMessages.messages.size() <= 1 ? chatMessageCell.currentMessagesGroup.positions.get(chatMessageCell.currentMessageObject) : null) == chatMessageCell.currentPosition;
            }
            if (!z3 || z4 || z5 || z6 || ((z41 && messageObject.isPoll()) || isPhotoDataChanged(messageObject) || chatMessageCell.pinnedBottom != z || chatMessageCell.pinnedTop != z2)) {
                chatMessageCell.wasPinned = chatMessageCell.isPinned;
                chatMessageCell.pinnedBottom = z;
                chatMessageCell.pinnedTop = z2;
                chatMessageCell.currentMessageObject = messageObject;
                chatMessageCell.currentMessagesGroup = groupedMessages;
                chatMessageCell.lastTime = -2;
                chatMessageCell.lastPostAuthor = messageObject.messageOwner.post_author;
                chatMessageCell.isHighlightedAnimated = false;
                chatMessageCell.widthBeforeNewTimeLine = -1;
                if (groupedMessages == null && groupedMessages.posArray.size() > 1) {
                    MessageObject.GroupedMessagePosition groupedMessagePosition20 = chatMessageCell.currentMessagesGroup.positions.get(chatMessageCell.currentMessageObject);
                    chatMessageCell.currentPosition = groupedMessagePosition20;
                    if (groupedMessagePosition20 == null) {
                        chatMessageCell.currentMessagesGroup = null;
                    }
                } else {
                    chatMessageCell.currentMessagesGroup = null;
                    chatMessageCell.currentPosition = null;
                }
                groupedMessages2 = chatMessageCell.currentMessagesGroup;
                if (groupedMessages2 != null || groupedMessages2.isDocuments) {
                    chatMessageCell.drawPinnedTop = chatMessageCell.pinnedTop;
                    chatMessageCell.drawPinnedBottom = chatMessageCell.pinnedBottom;
                } else {
                    chatMessageCell.drawPinnedTop = chatMessageCell.pinnedTop && ((groupedMessagePosition18 = chatMessageCell.currentPosition) == null || (groupedMessagePosition18.flags & 4) != 0);
                    chatMessageCell.drawPinnedBottom = chatMessageCell.pinnedBottom && ((groupedMessagePosition17 = chatMessageCell.currentPosition) == null || (groupedMessagePosition17.flags & 8) != 0);
                }
                chatMessageCell.isPlayingRound = !chatMessageCell.isRoundVideo && MediaController.getInstance().isPlayingMessage(chatMessageCell.currentMessageObject) && (chatMessageCellDelegate2 = chatMessageCell.delegate) != null && !chatMessageCellDelegate2.keyboardIsOpened() && !chatMessageCell.delegate.isLandscape();
                chatMessageCell.photoImage.setCrossfadeWithOldImage(false);
                chatMessageCell.photoImage.setCrossfadeDuration(ImageReceiver.DEFAULT_CROSSFADE_DURATION);
                chatMessageCell.photoImage.setGradientBitmap(null);
                TLRPC$Message tLRPC$Message4 = messageObject.messageOwner;
                chatMessageCell.lastSendState = tLRPC$Message4.send_state;
                chatMessageCell.lastDeleteDate = tLRPC$Message4.destroyTime;
                chatMessageCell.lastViewsCount = tLRPC$Message4.views;
                chatMessageCell.lastRepliesCount = getRepliesCount();
                if (z42) {
                    chatMessageCell.isPressed = false;
                    chatMessageCell.isCheckPressed = true;
                }
                chatMessageCell.gamePreviewPressed = false;
                chatMessageCell.sideButtonPressed = false;
                chatMessageCell.hasNewLineForTime = false;
                chatMessageCell.flipImage = false;
                boolean z43 = (chatMessageCell.isThreadChat || (tLRPC$MessageFwdHeader = messageObject.messageOwner.fwd_from) == null || tLRPC$MessageFwdHeader.channel_post == 0) ? false : true;
                chatMessageCell.isThreadPost = z43;
                chatMessageCell.isAvatarVisible = z43 && chatMessageCell.isChat && !messageObject.isOutOwner() && messageObject.needDrawAvatar() && ((groupedMessagePosition16 = chatMessageCell.currentPosition) == null || groupedMessagePosition16.edge);
                boolean z44 = !chatMessageCell.isChat && !chatMessageCell.isThreadPost && !messageObject.isOutOwner() && messageObject.needDrawAvatar();
                if (messageObject.customAvatarDrawable == null) {
                    chatMessageCell.isAvatarVisible = true;
                    z10 = true;
                } else {
                    z10 = z44;
                }
                chatMessageCell.wasLayout = false;
                chatMessageCell.groupPhotoInvisible = false;
                chatMessageCell.animatingDrawVideoImageButton = 0;
                chatMessageCell.drawVideoSize = false;
                chatMessageCell.canStreamVideo = false;
                chatMessageCell.animatingNoSound = 0;
                if (!MessagesController.getInstance(chatMessageCell.currentAccount).isChatNoForwards(messageObject.getChatId()) || ((tLRPC$Message2 = messageObject.messageOwner) != null && tLRPC$Message2.noforwards)) {
                    chatMessageCell.drawSideButton = 0;
                } else {
                    int i129 = (chatMessageCell.isRepliesChat || !checkNeedDrawShareButton(messageObject) || ((groupedMessagePosition15 = chatMessageCell.currentPosition) != null && !groupedMessagePosition15.last)) ? 0 : 1;
                    chatMessageCell.drawSideButton = i129;
                    if (chatMessageCell.isPinnedChat || (i129 == 1 && messageObject.messageOwner.fwd_from != null && !messageObject.isOutOwner() && messageObject.messageOwner.fwd_from.saved_from_peer != null && messageObject.getDialogId() == UserConfig.getInstance(chatMessageCell.currentAccount).getClientUserId())) {
                        chatMessageCell.drawSideButton = 2;
                    }
                }
                chatMessageCell.replyNameLayout = null;
                chatMessageCell.adminLayout = null;
                chatMessageCell.checkOnlyButtonPressed = false;
                chatMessageCell.replyTextLayout = null;
                AnimatedEmojiSpan.release(chatMessageCell, chatMessageCell.animatedEmojiReplyStack);
                chatMessageCell.lastReplyMessage = null;
                chatMessageCell.hasEmbed = false;
                chatMessageCell.autoPlayingMedia = false;
                chatMessageCell.replyNameWidth = 0;
                chatMessageCell.replyTextWidth = 0;
                chatMessageCell.viaWidth = 0;
                chatMessageCell.viaNameWidth = 0;
                chatMessageCell.addedCaptionHeight = 0;
                chatMessageCell.currentReplyPhoto = null;
                chatMessageCell.currentUser = null;
                chatMessageCell.currentChat = null;
                chatMessageCell.currentViaBotUser = null;
                chatMessageCell.instantViewLayout = null;
                chatMessageCell.drawNameLayout = false;
                chatMessageCell.lastLoadingSizeTotal = 0L;
                if (chatMessageCell.scheduledInvalidate) {
                    AndroidUtilities.cancelRunOnUIThread(chatMessageCell.invalidateRunnable);
                    chatMessageCell.scheduledInvalidate = false;
                }
                chatMessageCell.links.clear();
                chatMessageCell.pressedLink = null;
                chatMessageCell.pressedLinkType = -1;
                messageObject.forceUpdate = false;
                chatMessageCell.drawPhotoImage = false;
                chatMessageCell.drawMediaCheckBox = false;
                chatMessageCell.hasLinkPreview = false;
                chatMessageCell.hasOldCaptionPreview = false;
                chatMessageCell.hasGamePreview = false;
                chatMessageCell.hasInvoicePreview = false;
                chatMessageCell.commentButtonPressed = false;
                chatMessageCell.instantButtonPressed = false;
                chatMessageCell.instantPressed = false;
                if (!z6 && Build.VERSION.SDK_INT >= 21) {
                    i123 = 0;
                    while (true) {
                        drawableArr = chatMessageCell.selectorDrawable;
                        if (i123 < drawableArr.length) {
                            break;
                        }
                        if (drawableArr[i123] != null) {
                            drawableArr[i123].setVisible(false, false);
                            chatMessageCell.selectorDrawable[i123].setState(StateSet.NOTHING);
                        }
                        i123++;
                    }
                }
                chatMessageCell.spoilerPressed = null;
                chatMessageCell.isCaptionSpoilerPressed = false;
                chatMessageCell.isSpoilerRevealing = false;
                chatMessageCell.linkPreviewPressed = false;
                chatMessageCell.buttonPressed = 0;
                chatMessageCell.additionalTimeOffsetY = 0;
                chatMessageCell.miniButtonPressed = 0;
                chatMessageCell.pressedBotButton = -1;
                chatMessageCell.pressedVoteButton = -1;
                chatMessageCell.pollHintPressed = false;
                chatMessageCell.psaHintPressed = false;
                chatMessageCell.linkPreviewHeight = 0;
                chatMessageCell.mediaOffsetY = 0;
                chatMessageCell.documentAttachType = 0;
                chatMessageCell.documentAttach = null;
                chatMessageCell.descriptionLayout = null;
                chatMessageCell.titleLayout = null;
                chatMessageCell.videoInfoLayout = null;
                chatMessageCell.photosCountLayout = null;
                chatMessageCell.siteNameLayout = null;
                chatMessageCell.authorLayout = null;
                chatMessageCell.captionLayout = null;
                chatMessageCell.captionWidth = 0;
                chatMessageCell.captionHeight = 0;
                chatMessageCell.captionOffsetX = 0;
                chatMessageCell.currentCaption = null;
                chatMessageCell.docTitleLayout = null;
                chatMessageCell.drawImageButton = false;
                chatMessageCell.drawVideoImageButton = false;
                chatMessageCell.currentPhotoObject = null;
                chatMessageCell.photoParentObject = null;
                chatMessageCell.currentPhotoObjectThumb = null;
                chatMessageCell.currentPhotoObjectThumbStripped = null;
                if (!z3 || z42 || z4) {
                    chatMessageCell.currentPhotoFilter = null;
                }
                chatMessageCell.buttonState = -1;
                chatMessageCell.miniButtonState = -1;
                chatMessageCell.hasMiniProgress = 0;
                if (chatMessageCell.addedForTest && chatMessageCell.currentUrl != null && chatMessageCell.currentWebFile != null) {
                    ImageLoader.getInstance().removeTestWebFile(chatMessageCell.currentUrl);
                }
                chatMessageCell.addedForTest = false;
                chatMessageCell.photoNotSet = false;
                chatMessageCell.drawBackground = true;
                chatMessageCell.drawName = false;
                chatMessageCell.useSeekBarWaveform = false;
                chatMessageCell.useTranscribeButton = false;
                chatMessageCell.drawInstantView = false;
                chatMessageCell.drawInstantViewType = 0;
                chatMessageCell.drawForwardedName = false;
                chatMessageCell.drawCommentButton = false;
                chatMessageCell.photoImage.setSideClip(0.0f);
                chatMessageCell.photoImage.setAspectFit(false);
                chatMessageCell.gradientShader = null;
                chatMessageCell.motionBackgroundDrawable = null;
                chatMessageCell.imageBackgroundColor = 0;
                chatMessageCell.imageBackgroundGradientColor1 = 0;
                chatMessageCell.imageBackgroundGradientColor2 = 0;
                chatMessageCell.imageBackgroundIntensity = 0.0f;
                chatMessageCell.imageBackgroundGradientColor3 = 0;
                chatMessageCell.imageBackgroundGradientRotation = 45;
                chatMessageCell.imageBackgroundSideColor = 0;
                chatMessageCell.mediaBackground = false;
                chatMessageCell.photoImage.animatedFileDrawableRepeatMaxCount = 0;
                TLRPC$MessageFwdHeader tLRPC$MessageFwdHeader2 = messageObject.messageOwner.fwd_from;
                z11 = tLRPC$MessageFwdHeader2 == null && !TextUtils.isEmpty(tLRPC$MessageFwdHeader2.psa_type);
                chatMessageCell.hasPsaHint = z11;
                if (z11) {
                    chatMessageCell.createSelectorDrawable(0);
                }
                chatMessageCell.photoImage.setAlpha(1.0f);
                if ((!z3 || z4) && !chatMessageCell.pollUnvoteInProgress) {
                    chatMessageCell.pollButtons.clear();
                }
                chatMessageCell.availableTimeWidth = 0;
                chatMessageCell.photoImage.setForceLoading(false);
                chatMessageCell.photoImage.setNeedsQualityThumb(false);
                chatMessageCell.photoImage.setShouldGenerateQualityThumb(false);
                chatMessageCell.photoImage.setAllowDecodeSingleFrame(false);
                chatMessageCell.photoImage.setColorFilter(null);
                chatMessageCell.photoImage.setMediaStartEndTime(-1L, -1L);
                if (!z42 || messageObject.reactionsChanged) {
                    messageObject.reactionsChanged = false;
                    groupedMessagePosition14 = chatMessageCell.currentPosition;
                    if (groupedMessagePosition14 == null && (groupedMessagePosition14.flags & 8) == 0) {
                        chatMessageCell.reactionsLayoutInBubble.setMessage(null, false, chatMessageCell.resourcesProvider);
                    } else if (groupedMessagePosition14 == null) {
                        chatMessageCell.reactionsLayoutInBubble.setMessage(groupedMessages.findPrimaryMessageObject(), !messageObject.shouldDrawReactionsInLayout(), chatMessageCell.resourcesProvider);
                    } else {
                        chatMessageCell.reactionsLayoutInBubble.setMessage(messageObject, !messageObject.shouldDrawReactionsInLayout(), chatMessageCell.resourcesProvider);
                    }
                }
                if (z3) {
                    chatMessageCell.firstVisibleBlockNum = 0;
                    chatMessageCell.lastVisibleBlockNum = 0;
                    MessageObject messageObject13 = chatMessageCell.currentMessageObject;
                    if (messageObject13 != null && (arrayList3 = messageObject13.textLayoutBlocks) != null && arrayList3.size() > 1) {
                        chatMessageCell.needNewVisiblePart = true;
                    }
                }
                groupedMessages3 = chatMessageCell.currentMessagesGroup;
                if (groupedMessages3 == null && groupedMessages3.messages.size() > 0) {
                    z12 = chatMessageCell.currentMessagesGroup.messages.get(0).isLinkedToChat(chatMessageCell.linkedChatId);
                } else {
                    z12 = messageObject.isLinkedToChat(chatMessageCell.linkedChatId);
                }
                if (((!chatMessageCell.hasDiscussion && z12) || (chatMessageCell.isRepliesChat && !messageObject.isOutOwner())) && ((groupedMessagePosition13 = chatMessageCell.currentPosition) == null || (groupedMessagePosition13.flags & 8) != 0)) {
                    int repliesCount = getRepliesCount();
                    if (!messageObject.shouldDrawWithoutBackground() && !messageObject.isAnimatedEmoji()) {
                        chatMessageCell.drawCommentButton = true;
                        if (chatMessageCell.commentProgress == null) {
                            chatMessageCell.commentProgress = new InfiniteProgress(AndroidUtilities.dp(7.0f));
                        }
                        if (chatMessageCell.isRepliesChat) {
                            str21 = LocaleController.getString("ViewInChat", R.string.ViewInChat);
                        } else {
                            if (LocaleController.isRTL) {
                                str21 = repliesCount == 0 ? LocaleController.getString("LeaveAComment", R.string.LeaveAComment) : LocaleController.formatPluralString("CommentsCount", repliesCount, new Object[0]);
                            } else {
                                str21 = repliesCount == 0 ? LocaleController.getString("LeaveAComment", R.string.LeaveAComment) : LocaleController.getPluralString("CommentsNoNumber", repliesCount);
                            }
                            ArrayList<TLRPC$Peer> recentRepliers = getRecentRepliers();
                            if (repliesCount != 0 && recentRepliers != null && !recentRepliers.isEmpty()) {
                                createCommentUI();
                                int size2 = recentRepliers.size();
                                int i130 = 0;
                                i122 = 0;
                                while (true) {
                                    ImageReceiver[] imageReceiverArr = chatMessageCell.commentAvatarImages;
                                    if (i130 >= imageReceiverArr.length) {
                                        break;
                                    }
                                    if (i130 < size2) {
                                        imageReceiverArr[i130].setImageCoords(0.0f, 0.0f, AndroidUtilities.dp(24.0f), AndroidUtilities.dp(24.0f));
                                        long peerId = MessageObject.getPeerId(recentRepliers.get(i130));
                                        if (DialogObject.isUserDialog(peerId)) {
                                            tLRPC$User = MessagesController.getInstance(chatMessageCell.currentAccount).getUser(Long.valueOf(peerId));
                                        } else if (DialogObject.isChatDialog(peerId)) {
                                            tLRPC$Chat = MessagesController.getInstance(chatMessageCell.currentAccount).getChat(Long.valueOf(-peerId));
                                            tLRPC$User = null;
                                            if (tLRPC$User == null) {
                                                chatMessageCell.commentAvatarDrawables[i130].setInfo(tLRPC$User);
                                                chatMessageCell.commentAvatarImages[i130].setForUserOrChat(tLRPC$User, chatMessageCell.commentAvatarDrawables[i130]);
                                            } else if (tLRPC$Chat != null) {
                                                chatMessageCell.commentAvatarDrawables[i130].setInfo(tLRPC$Chat);
                                                chatMessageCell.commentAvatarImages[i130].setForUserOrChat(tLRPC$Chat, chatMessageCell.commentAvatarDrawables[i130]);
                                            } else {
                                                chatMessageCell.commentAvatarDrawables[i130].setInfo(peerId, "", "");
                                            }
                                            chatMessageCell.commentAvatarImagesVisible[i130] = true;
                                            i122 += i130 != 0 ? 2 : 17;
                                        } else {
                                            tLRPC$User = null;
                                        }
                                        tLRPC$Chat = null;
                                        if (tLRPC$User == null) {
                                        }
                                        chatMessageCell.commentAvatarImagesVisible[i130] = true;
                                        i122 += i130 != 0 ? 2 : 17;
                                    } else if (size2 != 0) {
                                        imageReceiverArr[i130].setImageBitmap((Drawable) null);
                                        chatMessageCell.commentAvatarImagesVisible[i130] = false;
                                    }
                                    i130++;
                                }
                                int ceil = (int) Math.ceil(Theme.chat_replyNamePaint.measureText(str21));
                                chatMessageCell.totalCommentWidth = ceil;
                                chatMessageCell.commentWidth = ceil;
                                chatMessageCell.commentLayout = new StaticLayout(str21, Theme.chat_replyNamePaint, chatMessageCell.commentWidth + AndroidUtilities.dp(2.0f), Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
                                if (repliesCount == 0 && !LocaleController.isRTL) {
                                    chatMessageCell.drawCommentNumber = true;
                                    AnimatedNumberLayout animatedNumberLayout2 = chatMessageCell.commentNumberLayout;
                                    if (animatedNumberLayout2 == null) {
                                        AnimatedNumberLayout animatedNumberLayout3 = new AnimatedNumberLayout(chatMessageCell, Theme.chat_replyNamePaint);
                                        chatMessageCell.commentNumberLayout = animatedNumberLayout3;
                                        z40 = false;
                                        animatedNumberLayout3.setNumber(repliesCount, false);
                                    } else {
                                        z40 = false;
                                        animatedNumberLayout2.setNumber(repliesCount, messageObject.animateComments);
                                    }
                                    messageObject.animateComments = z40;
                                    int width = chatMessageCell.commentNumberLayout.getWidth();
                                    chatMessageCell.commentNumberWidth = width;
                                    chatMessageCell.totalCommentWidth += width + AndroidUtilities.dp(4.0f);
                                } else {
                                    chatMessageCell.drawCommentNumber = false;
                                    animatedNumberLayout = chatMessageCell.commentNumberLayout;
                                    if (animatedNumberLayout != null) {
                                        animatedNumberLayout.setNumber(1, false);
                                    }
                                }
                                chatMessageCell.totalCommentWidth += AndroidUtilities.dp(i122 + 70);
                            } else if (chatMessageCell.commentAvatarImages != null) {
                                int i131 = 0;
                                while (true) {
                                    ImageReceiver[] imageReceiverArr2 = chatMessageCell.commentAvatarImages;
                                    if (i131 >= imageReceiverArr2.length) {
                                        break;
                                    }
                                    imageReceiverArr2[i131].setImageBitmap((Drawable) null);
                                    chatMessageCell.commentAvatarImagesVisible[i131] = false;
                                    i131++;
                                }
                            }
                        }
                        i122 = 0;
                        int ceil2 = (int) Math.ceil(Theme.chat_replyNamePaint.measureText(str21));
                        chatMessageCell.totalCommentWidth = ceil2;
                        chatMessageCell.commentWidth = ceil2;
                        chatMessageCell.commentLayout = new StaticLayout(str21, Theme.chat_replyNamePaint, chatMessageCell.commentWidth + AndroidUtilities.dp(2.0f), Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
                        if (repliesCount == 0) {
                        }
                        chatMessageCell.drawCommentNumber = false;
                        animatedNumberLayout = chatMessageCell.commentNumberLayout;
                        if (animatedNumberLayout != null) {
                        }
                        chatMessageCell.totalCommentWidth += AndroidUtilities.dp(i122 + 70);
                    } else {
                        if (!chatMessageCell.isRepliesChat && repliesCount > 0) {
                            String formatShortNumber = LocaleController.formatShortNumber(repliesCount, null);
                            int ceil3 = (int) Math.ceil(Theme.chat_stickerCommentCountPaint.measureText(formatShortNumber));
                            chatMessageCell.totalCommentWidth = ceil3;
                            chatMessageCell.commentWidth = ceil3;
                            chatMessageCell.commentLayout = new StaticLayout(formatShortNumber, Theme.chat_stickerCommentCountPaint, chatMessageCell.commentWidth + AndroidUtilities.dp(2.0f), Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
                        } else {
                            chatMessageCell.commentLayout = null;
                        }
                        chatMessageCell.drawCommentNumber = false;
                        chatMessageCell.drawSideButton = chatMessageCell.isRepliesChat ? 2 : 3;
                    }
                } else {
                    chatMessageCell.commentLayout = null;
                    chatMessageCell.drawCommentNumber = false;
                }
                i = messageObject.type;
                float f9 = 102.0f;
                if (i != 0) {
                    chatMessageCell.drawForwardedName = !chatMessageCell.isRepliesChat;
                    if (z10) {
                        if (AndroidUtilities.isTablet()) {
                            i121 = AndroidUtilities.getMinTabletSide();
                            i120 = AndroidUtilities.dp(122.0f);
                        } else {
                            i121 = Math.min(getParentWidth(), AndroidUtilities.displaySize.y);
                            i120 = AndroidUtilities.dp(122.0f);
                        }
                        i75 = i121 - i120;
                        chatMessageCell.drawName = true;
                    } else {
                        if (AndroidUtilities.isTablet()) {
                            i74 = AndroidUtilities.getMinTabletSide();
                            i73 = AndroidUtilities.dp(80.0f);
                        } else {
                            i74 = Math.min(getParentWidth(), AndroidUtilities.displaySize.y);
                            i73 = AndroidUtilities.dp(80.0f);
                        }
                        i75 = i74 - i73;
                        chatMessageCell.drawName = chatMessageCell.isPinnedChat || (messageObject.messageOwner.peer_id.channel_id != 0 && (!messageObject.isOutOwner() || messageObject.isSupergroup())) || (messageObject.isImportedForward() && messageObject.messageOwner.fwd_from.from_id == null);
                    }
                    int i132 = i75;
                    chatMessageCell.availableTimeWidth = i132;
                    if (messageObject.isRoundVideo()) {
                        double d3 = chatMessageCell.availableTimeWidth;
                        double ceil4 = Math.ceil(Theme.chat_audioTimePaint.measureText("00:00"));
                        double dp6 = messageObject.isOutOwner() ? 0 : AndroidUtilities.dp(64.0f);
                        Double.isNaN(dp6);
                        Double.isNaN(d3);
                        chatMessageCell.availableTimeWidth = (int) (d3 - (ceil4 + dp6));
                    }
                    measureTime(messageObject);
                    int dp7 = chatMessageCell.timeWidth + AndroidUtilities.dp(6.0f);
                    if (messageObject.isOutOwner()) {
                        dp7 += AndroidUtilities.dp(20.5f);
                    }
                    int extraTimeX = getExtraTimeX() + dp7;
                    TLRPC$MessageMedia tLRPC$MessageMedia3 = messageObject.messageOwner.media;
                    chatMessageCell.hasGamePreview = (tLRPC$MessageMedia3 instanceof TLRPC$TL_messageMediaGame) && (tLRPC$MessageMedia3.game instanceof TLRPC$TL_game);
                    chatMessageCell.hasInvoicePreview = tLRPC$MessageMedia3 instanceof TLRPC$TL_messageMediaInvoice;
                    boolean z45 = !messageObject.isRestrictedMessage && (tLRPC$MessageMedia3 instanceof TLRPC$TL_messageMediaWebPage) && (tLRPC$MessageMedia3.webpage instanceof TLRPC$TL_webPage);
                    chatMessageCell.hasLinkPreview = z45;
                    chatMessageCell.drawInstantView = z45 && tLRPC$MessageMedia3.webpage.cached_page != null;
                    String str23 = z45 ? tLRPC$MessageMedia3.webpage.site_name : null;
                    chatMessageCell.hasEmbed = z45 && !TextUtils.isEmpty(tLRPC$MessageMedia3.webpage.embed_url) && !messageObject.isGif() && !"instangram".equalsIgnoreCase(str23);
                    String str24 = chatMessageCell.hasLinkPreview ? messageObject.messageOwner.media.webpage.type : null;
                    if (!chatMessageCell.drawInstantView) {
                        if ("telegram_livestream".equals(str24)) {
                            chatMessageCell.drawInstantView = true;
                            chatMessageCell.drawInstantViewType = 11;
                        } else if ("telegram_voicechat".equals(str24)) {
                            chatMessageCell.drawInstantView = true;
                            chatMessageCell.drawInstantViewType = 9;
                        } else if ("telegram_channel".equals(str24)) {
                            chatMessageCell.drawInstantView = true;
                            chatMessageCell.drawInstantViewType = 1;
                        } else if ("telegram_user".equals(str24)) {
                            chatMessageCell.drawInstantView = true;
                            chatMessageCell.drawInstantViewType = 13;
                        } else if ("telegram_megagroup".equals(str24)) {
                            chatMessageCell.drawInstantView = true;
                            chatMessageCell.drawInstantViewType = 2;
                        } else if ("telegram_message".equals(str24)) {
                            chatMessageCell.drawInstantView = true;
                            chatMessageCell.drawInstantViewType = 3;
                        } else if ("telegram_theme".equals(str24)) {
                            int size3 = messageObject.messageOwner.media.webpage.attributes.size();
                            tLRPC$Document = null;
                            for (int i133 = 0; i133 < size3; i133++) {
                                TLRPC$TL_webPageAttributeTheme tLRPC$TL_webPageAttributeTheme = messageObject.messageOwner.media.webpage.attributes.get(i133);
                                ArrayList<TLRPC$Document> arrayList5 = tLRPC$TL_webPageAttributeTheme.documents;
                                int size4 = arrayList5.size();
                                int i134 = 0;
                                while (true) {
                                    if (i134 >= size4) {
                                        break;
                                    }
                                    TLRPC$Document tLRPC$Document6 = arrayList5.get(i134);
                                    if ("application/x-tgtheme-android".equals(tLRPC$Document6.mime_type)) {
                                        chatMessageCell.drawInstantView = true;
                                        chatMessageCell.drawInstantViewType = 7;
                                        tLRPC$Document = tLRPC$Document6;
                                        break;
                                    }
                                    i134++;
                                }
                                if (chatMessageCell.drawInstantView) {
                                    break;
                                }
                                tLRPC$ThemeSettings = tLRPC$TL_webPageAttributeTheme.settings;
                                if (tLRPC$ThemeSettings != null) {
                                    chatMessageCell.drawInstantView = true;
                                    chatMessageCell.drawInstantViewType = 7;
                                    break;
                                }
                            }
                            tLRPC$ThemeSettings = null;
                            z28 = false;
                            chatMessageCell.backgroundWidth = i132;
                            if (!chatMessageCell.hasLinkPreview && !chatMessageCell.hasGamePreview && !chatMessageCell.hasInvoicePreview) {
                                i119 = messageObject.lastLineWidth;
                                if (i132 - i119 >= extraTimeX) {
                                    int i135 = i132 - i119;
                                    if (i135 >= 0 && i135 <= extraTimeX) {
                                        chatMessageCell.backgroundWidth = ((i132 + extraTimeX) - i135) + AndroidUtilities.dp(31.0f);
                                    } else {
                                        chatMessageCell.backgroundWidth = Math.max(i132, i119 + extraTimeX) + AndroidUtilities.dp(31.0f);
                                    }
                                    chatMessageCell.availableTimeWidth = chatMessageCell.backgroundWidth - AndroidUtilities.dp(31.0f);
                                    if (messageObject.isRoundVideo()) {
                                        double d4 = chatMessageCell.availableTimeWidth;
                                        double ceil5 = Math.ceil(Theme.chat_audioTimePaint.measureText("00:00"));
                                        double dp8 = messageObject.isOutOwner() ? 0 : AndroidUtilities.dp(64.0f);
                                        Double.isNaN(dp8);
                                        Double.isNaN(d4);
                                        chatMessageCell.availableTimeWidth = (int) (d4 - (ceil5 + dp8));
                                    }
                                    setMessageObjectInternal(messageObject);
                                    chatMessageCell.backgroundWidth = messageObject.textWidth + (getExtraTextX() * 2) + ((!chatMessageCell.hasGamePreview || chatMessageCell.hasInvoicePreview) ? AndroidUtilities.dp(10.0f) : 0);
                                    chatMessageCell.totalHeight = messageObject.textHeight + AndroidUtilities.dp(19.5f) + chatMessageCell.namesOffset;
                                    reactionsLayoutInBubble4 = chatMessageCell.reactionsLayoutInBubble;
                                    if (!reactionsLayoutInBubble4.isSmall) {
                                        reactionsLayoutInBubble4.measure(i132, 3);
                                        ReactionsLayoutInBubble reactionsLayoutInBubble5 = chatMessageCell.reactionsLayoutInBubble;
                                        if (!reactionsLayoutInBubble5.isEmpty) {
                                            reactionsLayoutInBubble5.totalHeight = reactionsLayoutInBubble5.height + AndroidUtilities.dp(8.0f);
                                            ReactionsLayoutInBubble reactionsLayoutInBubble6 = chatMessageCell.reactionsLayoutInBubble;
                                            int i136 = reactionsLayoutInBubble6.width;
                                            if (i136 > chatMessageCell.backgroundWidth) {
                                                chatMessageCell.backgroundWidth = i136;
                                            }
                                            chatMessageCell.totalHeight += reactionsLayoutInBubble6.totalHeight;
                                        }
                                    }
                                    if (chatMessageCell.drawPinnedTop) {
                                        chatMessageCell.namesOffset -= AndroidUtilities.dp(1.0f);
                                    }
                                    max = Math.max(Math.max(Math.max(Math.max(chatMessageCell.backgroundWidth, chatMessageCell.nameWidth), chatMessageCell.forwardedNameWidth), chatMessageCell.replyNameWidth), chatMessageCell.replyTextWidth);
                                    if (chatMessageCell.commentLayout != null && chatMessageCell.drawSideButton != 3) {
                                        max = Math.max(max, chatMessageCell.totalCommentWidth);
                                    }
                                    if (!chatMessageCell.hasLinkPreview || chatMessageCell.hasGamePreview || chatMessageCell.hasInvoicePreview) {
                                        if (!AndroidUtilities.isTablet()) {
                                            if (z10) {
                                                i77 = AndroidUtilities.getMinTabletSide();
                                                i76 = AndroidUtilities.dp(132.0f);
                                            } else {
                                                i77 = AndroidUtilities.getMinTabletSide();
                                                i76 = AndroidUtilities.dp(80.0f);
                                            }
                                        } else if (z10) {
                                            i77 = getParentWidth();
                                            i76 = AndroidUtilities.dp(132.0f);
                                        } else {
                                            i77 = getParentWidth();
                                            i76 = AndroidUtilities.dp(80.0f);
                                        }
                                        int i137 = i77 - i76;
                                        if (chatMessageCell.drawSideButton != 0) {
                                            i137 -= AndroidUtilities.dp(20.0f);
                                        }
                                        int dp9 = AndroidUtilities.dp(48.0f);
                                        int dp10 = AndroidUtilities.dp(10.0f);
                                        if (!chatMessageCell.hasLinkPreview) {
                                            TLRPC$TL_webPage tLRPC$TL_webPage = (TLRPC$TL_webPage) messageObject.messageOwner.media.webpage;
                                            String str25 = tLRPC$TL_webPage.site_name;
                                            int i138 = chatMessageCell.drawInstantViewType;
                                            if (i138 == 6 || i138 == 7) {
                                                i114 = i137;
                                                i115 = 6;
                                                str8 = null;
                                            } else {
                                                str8 = tLRPC$TL_webPage.title;
                                                i114 = i137;
                                                i115 = 6;
                                            }
                                            if (i138 == i115 || i138 == 7) {
                                                i116 = 6;
                                                str20 = null;
                                            } else {
                                                str20 = tLRPC$TL_webPage.author;
                                                i116 = 6;
                                            }
                                            String str26 = (i138 == i116 || i138 == 7) ? null : tLRPC$TL_webPage.description;
                                            TLRPC$Photo tLRPC$Photo5 = tLRPC$TL_webPage.photo;
                                            TLRPC$Document tLRPC$Document7 = tLRPC$Document;
                                            if (i138 == 7) {
                                                tLRPC$Document5 = tLRPC$ThemeSettings != null ? new DocumentObject.ThemeDocument(tLRPC$ThemeSettings) : tLRPC$Document7;
                                            } else {
                                                tLRPC$Document5 = tLRPC$TL_webPage.document;
                                            }
                                            String str27 = tLRPC$TL_webPage.type;
                                            int i139 = tLRPC$TL_webPage.duration;
                                            if (str25 == null || tLRPC$Photo5 == null) {
                                                tLRPC$Photo4 = tLRPC$Photo5;
                                            } else {
                                                tLRPC$Photo4 = tLRPC$Photo5;
                                                if (str25.toLowerCase().equals("instagram")) {
                                                    i117 = Math.max(AndroidUtilities.displaySize.y / 3, chatMessageCell.currentMessageObject.textWidth);
                                                    boolean z46 = !"app".equals(str27) || "profile".equals(str27) || "article".equals(str27) || "telegram_bot".equals(str27) || "telegram_user".equals(str27) || "telegram_channel".equals(str27) || "telegram_megagroup".equals(str27) || "telegram_voicechat".equals(str27) || "telegram_livestream".equals(str27);
                                                    if (z28) {
                                                        if (chatMessageCell.drawInstantView) {
                                                            int i140 = chatMessageCell.drawInstantViewType;
                                                            i118 = i117;
                                                            if (i140 != 1) {
                                                                if (i140 != 9) {
                                                                    if (i140 != 11) {
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            i118 = i117;
                                                        }
                                                        if (tLRPC$Document5 == null && z46) {
                                                            z39 = true;
                                                            chatMessageCell.isSmallImage = (z39 || str27 == null || chatMessageCell.currentMessageObject.photoThumbs == null) ? false : true;
                                                            z30 = z39;
                                                            i78 = i139;
                                                            i79 = i118;
                                                            charSequence3 = str20;
                                                            str9 = str26;
                                                            webFile = null;
                                                            tLRPC$Document2 = tLRPC$Document5;
                                                            str10 = str27;
                                                            str7 = str25;
                                                            tLRPC$Photo = tLRPC$Photo4;
                                                        }
                                                    } else {
                                                        i118 = i117;
                                                    }
                                                    z39 = false;
                                                    chatMessageCell.isSmallImage = (z39 || str27 == null || chatMessageCell.currentMessageObject.photoThumbs == null) ? false : true;
                                                    z30 = z39;
                                                    i78 = i139;
                                                    i79 = i118;
                                                    charSequence3 = str20;
                                                    str9 = str26;
                                                    webFile = null;
                                                    tLRPC$Document2 = tLRPC$Document5;
                                                    str10 = str27;
                                                    str7 = str25;
                                                    tLRPC$Photo = tLRPC$Photo4;
                                                }
                                            }
                                            i117 = i114;
                                            if (!"app".equals(str27)) {
                                            }
                                            if (z28) {
                                            }
                                            z39 = false;
                                            chatMessageCell.isSmallImage = (z39 || str27 == null || chatMessageCell.currentMessageObject.photoThumbs == null) ? false : true;
                                            z30 = z39;
                                            i78 = i139;
                                            i79 = i118;
                                            charSequence3 = str20;
                                            str9 = str26;
                                            webFile = null;
                                            tLRPC$Document2 = tLRPC$Document5;
                                            str10 = str27;
                                            str7 = str25;
                                            tLRPC$Photo = tLRPC$Photo4;
                                        } else {
                                            int i141 = i137;
                                            if (chatMessageCell.hasInvoicePreview) {
                                                TLRPC$MessageMedia tLRPC$MessageMedia4 = messageObject.messageOwner.media;
                                                str19 = tLRPC$MessageMedia4.title;
                                                TLRPC$WebDocument tLRPC$WebDocument = ((TLRPC$TL_messageMediaInvoice) tLRPC$MessageMedia4).photo;
                                                WebFile createWithWebDocument = tLRPC$WebDocument instanceof TLRPC$TL_webDocument ? WebFile.createWithWebDocument(tLRPC$WebDocument) : null;
                                                chatMessageCell.isSmallImage = false;
                                                webFile = createWithWebDocument;
                                                str10 = "invoice";
                                                i79 = i141;
                                                tLRPC$Document2 = null;
                                                tLRPC$Photo = null;
                                                charSequence3 = null;
                                                str9 = null;
                                                str8 = null;
                                                i78 = 0;
                                                z30 = false;
                                            } else {
                                                TLRPC$TL_game tLRPC$TL_game = messageObject.messageOwner.media.game;
                                                str19 = tLRPC$TL_game.title;
                                                String str28 = TextUtils.isEmpty(messageObject.messageText) ? tLRPC$TL_game.description : null;
                                                TLRPC$Photo tLRPC$Photo6 = tLRPC$TL_game.photo;
                                                TLRPC$Document tLRPC$Document8 = tLRPC$TL_game.document;
                                                chatMessageCell.isSmallImage = false;
                                                str9 = str28;
                                                charSequence3 = null;
                                                str8 = null;
                                                i78 = 0;
                                                z30 = false;
                                                webFile = null;
                                                tLRPC$Document2 = tLRPC$Document8;
                                                str10 = "game";
                                                tLRPC$Photo = tLRPC$Photo6;
                                                i79 = i141;
                                            }
                                            str7 = str19;
                                        }
                                        i80 = chatMessageCell.drawInstantViewType;
                                        String str29 = str10;
                                        if (i80 != 11) {
                                            str11 = LocaleController.getString("VoipChannelVoiceChat", R.string.VoipChannelVoiceChat);
                                        } else if (i80 == 9) {
                                            str11 = LocaleController.getString("VoipGroupVoiceChat", R.string.VoipGroupVoiceChat);
                                        } else if (i80 == 6) {
                                            str11 = LocaleController.getString("ChatBackground", R.string.ChatBackground);
                                        } else {
                                            str11 = "telegram_theme".equals(str24) ? LocaleController.getString("ColorTheme", R.string.ColorTheme) : str7;
                                        }
                                        int dp11 = !chatMessageCell.hasInvoicePreview ? 0 : AndroidUtilities.dp(10.0f);
                                        int i142 = i79 - dp11;
                                        messageObject7 = chatMessageCell.currentMessageObject;
                                        if (messageObject7.photoThumbs == null && tLRPC$Photo != null) {
                                            messageObject7.generateThumbs(true);
                                        }
                                        if (str11 == null) {
                                            try {
                                                i82 = extraTimeX;
                                            } catch (Exception e7) {
                                                e3 = e7;
                                                i82 = extraTimeX;
                                            }
                                            try {
                                                int ceil6 = (int) Math.ceil(Theme.chat_replyNamePaint.measureText(str11) + 1.0f);
                                                if (!chatMessageCell.isSmallImage) {
                                                    chatMessageCell.siteNameLayout = new StaticLayout(str11, Theme.chat_replyNamePaint, Math.min(ceil6, i142), Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
                                                    i86 = 0;
                                                    i85 = 3;
                                                } else {
                                                    StaticLayout generateStaticLayout = generateStaticLayout(str11, Theme.chat_replyNamePaint, i142, (i142 - dp9) - dp10, 3, 1);
                                                    chatMessageCell.siteNameLayout = generateStaticLayout;
                                                    i85 = 3 - generateStaticLayout.getLineCount();
                                                    i86 = 3;
                                                }
                                                try {
                                                    i83 = i85;
                                                } catch (Exception e8) {
                                                    e3 = e8;
                                                    i83 = i85;
                                                }
                                                try {
                                                    chatMessageCell.siteNameRtl = Math.max(chatMessageCell.siteNameLayout.getLineLeft(0), 0.0f) != 0.0f;
                                                    int lineBottom = chatMessageCell.siteNameLayout.getLineBottom(staticLayout3.getLineCount() - 1);
                                                    chatMessageCell.linkPreviewHeight += lineBottom;
                                                    chatMessageCell.totalHeight += lineBottom;
                                                    tLRPC$Photo2 = tLRPC$Photo;
                                                    int i143 = 0;
                                                    int i144 = 0;
                                                    while (i143 < chatMessageCell.siteNameLayout.getLineCount()) {
                                                        try {
                                                            tLRPC$Document3 = tLRPC$Document2;
                                                        } catch (Exception e9) {
                                                            e3 = e9;
                                                            tLRPC$Document3 = tLRPC$Document2;
                                                        }
                                                        try {
                                                            int max4 = (int) Math.max(0.0f, chatMessageCell.siteNameLayout.getLineLeft(i143));
                                                            if (max4 != 0) {
                                                                i87 = chatMessageCell.siteNameLayout.getWidth() - max4;
                                                                i81 = i142;
                                                                str12 = str11;
                                                                str13 = str9;
                                                            } else {
                                                                str12 = str11;
                                                                str13 = str9;
                                                                try {
                                                                    i81 = i142;
                                                                    try {
                                                                        i87 = (int) Math.min((i143 < i86 || (max4 != 0 && chatMessageCell.isSmallImage)) ? i142 - (dp9 + dp10) : i142, Math.ceil(chatMessageCell.siteNameLayout.getLineWidth(i143)));
                                                                    } catch (Exception e10) {
                                                                        e3 = e10;
                                                                        FileLog.e(e3);
                                                                        i84 = i83;
                                                                        max2 = 0;
                                                                        if (str8 == null) {
                                                                        }
                                                                        if (charSequence3 == null) {
                                                                        }
                                                                        z32 = false;
                                                                        if (str13 != null) {
                                                                        }
                                                                        i89 = i88;
                                                                        if (!z30) {
                                                                        }
                                                                        z33 = z30;
                                                                        if (!z33) {
                                                                        }
                                                                        if (tLRPC$Document3 != null) {
                                                                        }
                                                                        webFile2 = webFile3;
                                                                        i92 = chatMessageCell.documentAttachType;
                                                                        if (i92 != 5) {
                                                                        }
                                                                        messageObject6 = messageObject8;
                                                                        z29 = true;
                                                                        createInstantViewButton();
                                                                        z13 = z29;
                                                                        messageObject2 = messageObject6;
                                                                        r5 = 1;
                                                                        c = 0;
                                                                        f = 1.0f;
                                                                        if (chatMessageCell.currentPosition != null) {
                                                                        }
                                                                        if (!messageObject2.isRestrictedMessage) {
                                                                        }
                                                                        c2 = 2;
                                                                        if (chatMessageCell.captionLayout != null) {
                                                                        }
                                                                        groupedMessagePosition = chatMessageCell.currentPosition;
                                                                        if (groupedMessagePosition != null) {
                                                                        }
                                                                        chatMessageCell.totalHeight += AndroidUtilities.dp(14.0f);
                                                                        messageObject3 = chatMessageCell.currentMessageObject;
                                                                        if (messageObject3.eventId == 0) {
                                                                        }
                                                                        if (messageObject.isSponsored()) {
                                                                        }
                                                                        chatMessageCell.botButtons.clear();
                                                                        if (z42) {
                                                                        }
                                                                        if (!messageObject2.isRestrictedMessage) {
                                                                        }
                                                                        chatMessageCell.substractBackgroundHeight = 0;
                                                                        chatMessageCell.keyboardHeight = 0;
                                                                        if (chatMessageCell.drawCommentButton) {
                                                                        }
                                                                        z14 = chatMessageCell.drawPinnedBottom;
                                                                        if (!z14) {
                                                                        }
                                                                        if (!z14) {
                                                                        }
                                                                        if (!messageObject.isAnyKindOfSticker()) {
                                                                        }
                                                                        if (messageObject.isAnimatedEmoji()) {
                                                                        }
                                                                        if (!chatMessageCell.drawPhotoImage) {
                                                                        }
                                                                        if (chatMessageCell.documentAttachType != 5) {
                                                                        }
                                                                        if (z13) {
                                                                        }
                                                                        if (chatMessageCell.captionLayout == null) {
                                                                        }
                                                                        if (z42) {
                                                                        }
                                                                        transcribeButton = chatMessageCell.transcribeButton;
                                                                        if (transcribeButton != null) {
                                                                        }
                                                                        updateWaveform();
                                                                        if (!z42) {
                                                                        }
                                                                        z9 = true;
                                                                        z8 = false;
                                                                        z7 = false;
                                                                        chatMessageCell.updateButtonState(z8, z7, z9);
                                                                        if (!chatMessageCell.currentMessageObject.loadingCancelled) {
                                                                        }
                                                                        chatMessageCellDelegate = chatMessageCell.delegate;
                                                                        if (chatMessageCellDelegate != null) {
                                                                        }
                                                                        chatMessageCell.accessibilityVirtualViewBounds.clear();
                                                                        chatMessageCell.transitionParams.updatePhotoImageX = true;
                                                                        updateFlagSecure();
                                                                    }
                                                                } catch (Exception e11) {
                                                                    e3 = e11;
                                                                    i81 = i142;
                                                                    FileLog.e(e3);
                                                                    i84 = i83;
                                                                    max2 = 0;
                                                                    if (str8 == null) {
                                                                    }
                                                                    if (charSequence3 == null) {
                                                                    }
                                                                    z32 = false;
                                                                    if (str13 != null) {
                                                                    }
                                                                    i89 = i88;
                                                                    if (!z30) {
                                                                    }
                                                                    z33 = z30;
                                                                    if (!z33) {
                                                                    }
                                                                    if (tLRPC$Document3 != null) {
                                                                    }
                                                                    webFile2 = webFile3;
                                                                    i92 = chatMessageCell.documentAttachType;
                                                                    if (i92 != 5) {
                                                                    }
                                                                    messageObject6 = messageObject8;
                                                                    z29 = true;
                                                                    createInstantViewButton();
                                                                    z13 = z29;
                                                                    messageObject2 = messageObject6;
                                                                    r5 = 1;
                                                                    c = 0;
                                                                    f = 1.0f;
                                                                    if (chatMessageCell.currentPosition != null) {
                                                                    }
                                                                    if (!messageObject2.isRestrictedMessage) {
                                                                    }
                                                                    c2 = 2;
                                                                    if (chatMessageCell.captionLayout != null) {
                                                                    }
                                                                    groupedMessagePosition = chatMessageCell.currentPosition;
                                                                    if (groupedMessagePosition != null) {
                                                                    }
                                                                    chatMessageCell.totalHeight += AndroidUtilities.dp(14.0f);
                                                                    messageObject3 = chatMessageCell.currentMessageObject;
                                                                    if (messageObject3.eventId == 0) {
                                                                    }
                                                                    if (messageObject.isSponsored()) {
                                                                    }
                                                                    chatMessageCell.botButtons.clear();
                                                                    if (z42) {
                                                                    }
                                                                    if (!messageObject2.isRestrictedMessage) {
                                                                    }
                                                                    chatMessageCell.substractBackgroundHeight = 0;
                                                                    chatMessageCell.keyboardHeight = 0;
                                                                    if (chatMessageCell.drawCommentButton) {
                                                                    }
                                                                    z14 = chatMessageCell.drawPinnedBottom;
                                                                    if (!z14) {
                                                                    }
                                                                    if (!z14) {
                                                                    }
                                                                    if (!messageObject.isAnyKindOfSticker()) {
                                                                    }
                                                                    if (messageObject.isAnimatedEmoji()) {
                                                                    }
                                                                    if (!chatMessageCell.drawPhotoImage) {
                                                                    }
                                                                    if (chatMessageCell.documentAttachType != 5) {
                                                                    }
                                                                    if (z13) {
                                                                    }
                                                                    if (chatMessageCell.captionLayout == null) {
                                                                    }
                                                                    if (z42) {
                                                                    }
                                                                    transcribeButton = chatMessageCell.transcribeButton;
                                                                    if (transcribeButton != null) {
                                                                    }
                                                                    updateWaveform();
                                                                    if (!z42) {
                                                                    }
                                                                    z9 = true;
                                                                    z8 = false;
                                                                    z7 = false;
                                                                    chatMessageCell.updateButtonState(z8, z7, z9);
                                                                    if (!chatMessageCell.currentMessageObject.loadingCancelled) {
                                                                    }
                                                                    chatMessageCellDelegate = chatMessageCell.delegate;
                                                                    if (chatMessageCellDelegate != null) {
                                                                    }
                                                                    chatMessageCell.accessibilityVirtualViewBounds.clear();
                                                                    chatMessageCell.transitionParams.updatePhotoImageX = true;
                                                                    updateFlagSecure();
                                                                }
                                                            }
                                                            if (i143 < i86 || (max4 != 0 && chatMessageCell.isSmallImage)) {
                                                                i87 += dp9 + dp10;
                                                            }
                                                            i144 = Math.max(i144, i87);
                                                            i143++;
                                                            tLRPC$Document2 = tLRPC$Document3;
                                                            str9 = str13;
                                                            str11 = str12;
                                                            i142 = i81;
                                                        } catch (Exception e12) {
                                                            e3 = e12;
                                                            i81 = i142;
                                                            str12 = str11;
                                                            str13 = str9;
                                                            FileLog.e(e3);
                                                            i84 = i83;
                                                            max2 = 0;
                                                            if (str8 == null) {
                                                            }
                                                            if (charSequence3 == null) {
                                                            }
                                                            z32 = false;
                                                            if (str13 != null) {
                                                            }
                                                            i89 = i88;
                                                            if (!z30) {
                                                            }
                                                            z33 = z30;
                                                            if (!z33) {
                                                            }
                                                            if (tLRPC$Document3 != null) {
                                                            }
                                                            webFile2 = webFile3;
                                                            i92 = chatMessageCell.documentAttachType;
                                                            if (i92 != 5) {
                                                            }
                                                            messageObject6 = messageObject8;
                                                            z29 = true;
                                                            createInstantViewButton();
                                                            z13 = z29;
                                                            messageObject2 = messageObject6;
                                                            r5 = 1;
                                                            c = 0;
                                                            f = 1.0f;
                                                            if (chatMessageCell.currentPosition != null) {
                                                            }
                                                            if (!messageObject2.isRestrictedMessage) {
                                                            }
                                                            c2 = 2;
                                                            if (chatMessageCell.captionLayout != null) {
                                                            }
                                                            groupedMessagePosition = chatMessageCell.currentPosition;
                                                            if (groupedMessagePosition != null) {
                                                            }
                                                            chatMessageCell.totalHeight += AndroidUtilities.dp(14.0f);
                                                            messageObject3 = chatMessageCell.currentMessageObject;
                                                            if (messageObject3.eventId == 0) {
                                                            }
                                                            if (messageObject.isSponsored()) {
                                                            }
                                                            chatMessageCell.botButtons.clear();
                                                            if (z42) {
                                                            }
                                                            if (!messageObject2.isRestrictedMessage) {
                                                            }
                                                            chatMessageCell.substractBackgroundHeight = 0;
                                                            chatMessageCell.keyboardHeight = 0;
                                                            if (chatMessageCell.drawCommentButton) {
                                                            }
                                                            z14 = chatMessageCell.drawPinnedBottom;
                                                            if (!z14) {
                                                            }
                                                            if (!z14) {
                                                            }
                                                            if (!messageObject.isAnyKindOfSticker()) {
                                                            }
                                                            if (messageObject.isAnimatedEmoji()) {
                                                            }
                                                            if (!chatMessageCell.drawPhotoImage) {
                                                            }
                                                            if (chatMessageCell.documentAttachType != 5) {
                                                            }
                                                            if (z13) {
                                                            }
                                                            if (chatMessageCell.captionLayout == null) {
                                                            }
                                                            if (z42) {
                                                            }
                                                            transcribeButton = chatMessageCell.transcribeButton;
                                                            if (transcribeButton != null) {
                                                            }
                                                            updateWaveform();
                                                            if (!z42) {
                                                            }
                                                            z9 = true;
                                                            z8 = false;
                                                            z7 = false;
                                                            chatMessageCell.updateButtonState(z8, z7, z9);
                                                            if (!chatMessageCell.currentMessageObject.loadingCancelled) {
                                                            }
                                                            chatMessageCellDelegate = chatMessageCell.delegate;
                                                            if (chatMessageCellDelegate != null) {
                                                            }
                                                            chatMessageCell.accessibilityVirtualViewBounds.clear();
                                                            chatMessageCell.transitionParams.updatePhotoImageX = true;
                                                            updateFlagSecure();
                                                        }
                                                    }
                                                    tLRPC$Document3 = tLRPC$Document2;
                                                    i81 = i142;
                                                    str12 = str11;
                                                    str13 = str9;
                                                    chatMessageCell.siteNameWidth = i144;
                                                    int i145 = i144 + dp11;
                                                    max = Math.max(max, i145);
                                                    max2 = Math.max(0, i145);
                                                    i84 = i83;
                                                } catch (Exception e13) {
                                                    e3 = e13;
                                                    tLRPC$Document3 = tLRPC$Document2;
                                                    i81 = i142;
                                                    tLRPC$Photo2 = tLRPC$Photo;
                                                    str12 = str11;
                                                    str13 = str9;
                                                    FileLog.e(e3);
                                                    i84 = i83;
                                                    max2 = 0;
                                                    if (str8 == null) {
                                                    }
                                                    if (charSequence3 == null) {
                                                    }
                                                    z32 = false;
                                                    if (str13 != null) {
                                                    }
                                                    i89 = i88;
                                                    if (!z30) {
                                                    }
                                                    z33 = z30;
                                                    if (!z33) {
                                                    }
                                                    if (tLRPC$Document3 != null) {
                                                    }
                                                    webFile2 = webFile3;
                                                    i92 = chatMessageCell.documentAttachType;
                                                    if (i92 != 5) {
                                                    }
                                                    messageObject6 = messageObject8;
                                                    z29 = true;
                                                    createInstantViewButton();
                                                    z13 = z29;
                                                    messageObject2 = messageObject6;
                                                    r5 = 1;
                                                    c = 0;
                                                    f = 1.0f;
                                                    if (chatMessageCell.currentPosition != null) {
                                                    }
                                                    if (!messageObject2.isRestrictedMessage) {
                                                    }
                                                    c2 = 2;
                                                    if (chatMessageCell.captionLayout != null) {
                                                    }
                                                    groupedMessagePosition = chatMessageCell.currentPosition;
                                                    if (groupedMessagePosition != null) {
                                                    }
                                                    chatMessageCell.totalHeight += AndroidUtilities.dp(14.0f);
                                                    messageObject3 = chatMessageCell.currentMessageObject;
                                                    if (messageObject3.eventId == 0) {
                                                    }
                                                    if (messageObject.isSponsored()) {
                                                    }
                                                    chatMessageCell.botButtons.clear();
                                                    if (z42) {
                                                    }
                                                    if (!messageObject2.isRestrictedMessage) {
                                                    }
                                                    chatMessageCell.substractBackgroundHeight = 0;
                                                    chatMessageCell.keyboardHeight = 0;
                                                    if (chatMessageCell.drawCommentButton) {
                                                    }
                                                    z14 = chatMessageCell.drawPinnedBottom;
                                                    if (!z14) {
                                                    }
                                                    if (!z14) {
                                                    }
                                                    if (!messageObject.isAnyKindOfSticker()) {
                                                    }
                                                    if (messageObject.isAnimatedEmoji()) {
                                                    }
                                                    if (!chatMessageCell.drawPhotoImage) {
                                                    }
                                                    if (chatMessageCell.documentAttachType != 5) {
                                                    }
                                                    if (z13) {
                                                    }
                                                    if (chatMessageCell.captionLayout == null) {
                                                    }
                                                    if (z42) {
                                                    }
                                                    transcribeButton = chatMessageCell.transcribeButton;
                                                    if (transcribeButton != null) {
                                                    }
                                                    updateWaveform();
                                                    if (!z42) {
                                                    }
                                                    z9 = true;
                                                    z8 = false;
                                                    z7 = false;
                                                    chatMessageCell.updateButtonState(z8, z7, z9);
                                                    if (!chatMessageCell.currentMessageObject.loadingCancelled) {
                                                    }
                                                    chatMessageCellDelegate = chatMessageCell.delegate;
                                                    if (chatMessageCellDelegate != null) {
                                                    }
                                                    chatMessageCell.accessibilityVirtualViewBounds.clear();
                                                    chatMessageCell.transitionParams.updatePhotoImageX = true;
                                                    updateFlagSecure();
                                                }
                                            } catch (Exception e14) {
                                                e3 = e14;
                                                tLRPC$Document3 = tLRPC$Document2;
                                                i81 = i142;
                                                tLRPC$Photo2 = tLRPC$Photo;
                                                str12 = str11;
                                                str13 = str9;
                                                i83 = 3;
                                                FileLog.e(e3);
                                                i84 = i83;
                                                max2 = 0;
                                                if (str8 == null) {
                                                }
                                                if (charSequence3 == null) {
                                                }
                                                z32 = false;
                                                if (str13 != null) {
                                                }
                                                i89 = i88;
                                                if (!z30) {
                                                }
                                                z33 = z30;
                                                if (!z33) {
                                                }
                                                if (tLRPC$Document3 != null) {
                                                }
                                                webFile2 = webFile3;
                                                i92 = chatMessageCell.documentAttachType;
                                                if (i92 != 5) {
                                                }
                                                messageObject6 = messageObject8;
                                                z29 = true;
                                                createInstantViewButton();
                                                z13 = z29;
                                                messageObject2 = messageObject6;
                                                r5 = 1;
                                                c = 0;
                                                f = 1.0f;
                                                if (chatMessageCell.currentPosition != null) {
                                                }
                                                if (!messageObject2.isRestrictedMessage) {
                                                }
                                                c2 = 2;
                                                if (chatMessageCell.captionLayout != null) {
                                                }
                                                groupedMessagePosition = chatMessageCell.currentPosition;
                                                if (groupedMessagePosition != null) {
                                                }
                                                chatMessageCell.totalHeight += AndroidUtilities.dp(14.0f);
                                                messageObject3 = chatMessageCell.currentMessageObject;
                                                if (messageObject3.eventId == 0) {
                                                }
                                                if (messageObject.isSponsored()) {
                                                }
                                                chatMessageCell.botButtons.clear();
                                                if (z42) {
                                                }
                                                if (!messageObject2.isRestrictedMessage) {
                                                }
                                                chatMessageCell.substractBackgroundHeight = 0;
                                                chatMessageCell.keyboardHeight = 0;
                                                if (chatMessageCell.drawCommentButton) {
                                                }
                                                z14 = chatMessageCell.drawPinnedBottom;
                                                if (!z14) {
                                                }
                                                if (!z14) {
                                                }
                                                if (!messageObject.isAnyKindOfSticker()) {
                                                }
                                                if (messageObject.isAnimatedEmoji()) {
                                                }
                                                if (!chatMessageCell.drawPhotoImage) {
                                                }
                                                if (chatMessageCell.documentAttachType != 5) {
                                                }
                                                if (z13) {
                                                }
                                                if (chatMessageCell.captionLayout == null) {
                                                }
                                                if (z42) {
                                                }
                                                transcribeButton = chatMessageCell.transcribeButton;
                                                if (transcribeButton != null) {
                                                }
                                                updateWaveform();
                                                if (!z42) {
                                                }
                                                z9 = true;
                                                z8 = false;
                                                z7 = false;
                                                chatMessageCell.updateButtonState(z8, z7, z9);
                                                if (!chatMessageCell.currentMessageObject.loadingCancelled) {
                                                }
                                                chatMessageCellDelegate = chatMessageCell.delegate;
                                                if (chatMessageCellDelegate != null) {
                                                }
                                                chatMessageCell.accessibilityVirtualViewBounds.clear();
                                                chatMessageCell.transitionParams.updatePhotoImageX = true;
                                                updateFlagSecure();
                                            }
                                            if (str8 == null) {
                                                try {
                                                    chatMessageCell.titleX = Integer.MAX_VALUE;
                                                    int i146 = chatMessageCell.linkPreviewHeight;
                                                    if (i146 != 0) {
                                                        chatMessageCell.linkPreviewHeight = i146 + AndroidUtilities.dp(2.0f);
                                                        chatMessageCell.totalHeight += AndroidUtilities.dp(2.0f);
                                                    }
                                                    if (!chatMessageCell.isSmallImage) {
                                                        chatMessageCell.titleLayout = StaticLayoutEx.createStaticLayout(str8, Theme.chat_replyNamePaint, i81, Layout.Alignment.ALIGN_NORMAL, 1.0f, AndroidUtilities.dp(1.0f), false, TextUtils.TruncateAt.END, i81, 4);
                                                        i110 = 0;
                                                    } else {
                                                        StaticLayout generateStaticLayout2 = generateStaticLayout(str8, Theme.chat_replyNamePaint, i81, (i81 - dp9) - dp10, i84, 4);
                                                        chatMessageCell.titleLayout = generateStaticLayout2;
                                                        int i147 = i84;
                                                        i84 -= generateStaticLayout2.getLineCount();
                                                        i110 = i147;
                                                    }
                                                } catch (Exception e15) {
                                                    e6 = e15;
                                                }
                                                try {
                                                    StaticLayout staticLayout4 = chatMessageCell.titleLayout;
                                                    int lineBottom2 = staticLayout4.getLineBottom(staticLayout4.getLineCount() - 1);
                                                    chatMessageCell.linkPreviewHeight += lineBottom2;
                                                    chatMessageCell.totalHeight += lineBottom2;
                                                    int i148 = 0;
                                                    z38 = false;
                                                    while (i148 < chatMessageCell.titleLayout.getLineCount()) {
                                                        try {
                                                            max3 = (int) Math.max(0.0f, chatMessageCell.titleLayout.getLineLeft(i148));
                                                            if (max3 != 0) {
                                                                z38 = true;
                                                            }
                                                            int i149 = chatMessageCell.titleX;
                                                            if (i149 == Integer.MAX_VALUE) {
                                                                try {
                                                                    chatMessageCell.titleX = -max3;
                                                                } catch (Exception e16) {
                                                                    e6 = e16;
                                                                    FileLog.e(e6);
                                                                    if (z38) {
                                                                    }
                                                                    z31 = z38;
                                                                    i88 = i81;
                                                                    if (charSequence3 == null) {
                                                                    }
                                                                    z32 = false;
                                                                    if (str13 != null) {
                                                                    }
                                                                    i89 = i88;
                                                                    if (!z30) {
                                                                    }
                                                                    z33 = z30;
                                                                    if (!z33) {
                                                                    }
                                                                    if (tLRPC$Document3 != null) {
                                                                    }
                                                                    webFile2 = webFile3;
                                                                    i92 = chatMessageCell.documentAttachType;
                                                                    if (i92 != 5) {
                                                                    }
                                                                    messageObject6 = messageObject8;
                                                                    z29 = true;
                                                                    createInstantViewButton();
                                                                    z13 = z29;
                                                                    messageObject2 = messageObject6;
                                                                    r5 = 1;
                                                                    c = 0;
                                                                    f = 1.0f;
                                                                    if (chatMessageCell.currentPosition != null) {
                                                                    }
                                                                    if (!messageObject2.isRestrictedMessage) {
                                                                    }
                                                                    c2 = 2;
                                                                    if (chatMessageCell.captionLayout != null) {
                                                                    }
                                                                    groupedMessagePosition = chatMessageCell.currentPosition;
                                                                    if (groupedMessagePosition != null) {
                                                                    }
                                                                    chatMessageCell.totalHeight += AndroidUtilities.dp(14.0f);
                                                                    messageObject3 = chatMessageCell.currentMessageObject;
                                                                    if (messageObject3.eventId == 0) {
                                                                    }
                                                                    if (messageObject.isSponsored()) {
                                                                    }
                                                                    chatMessageCell.botButtons.clear();
                                                                    if (z42) {
                                                                    }
                                                                    if (!messageObject2.isRestrictedMessage) {
                                                                    }
                                                                    chatMessageCell.substractBackgroundHeight = 0;
                                                                    chatMessageCell.keyboardHeight = 0;
                                                                    if (chatMessageCell.drawCommentButton) {
                                                                    }
                                                                    z14 = chatMessageCell.drawPinnedBottom;
                                                                    if (!z14) {
                                                                    }
                                                                    if (!z14) {
                                                                    }
                                                                    if (!messageObject.isAnyKindOfSticker()) {
                                                                    }
                                                                    if (messageObject.isAnimatedEmoji()) {
                                                                    }
                                                                    if (!chatMessageCell.drawPhotoImage) {
                                                                    }
                                                                    if (chatMessageCell.documentAttachType != 5) {
                                                                    }
                                                                    if (z13) {
                                                                    }
                                                                    if (chatMessageCell.captionLayout == null) {
                                                                    }
                                                                    if (z42) {
                                                                    }
                                                                    transcribeButton = chatMessageCell.transcribeButton;
                                                                    if (transcribeButton != null) {
                                                                    }
                                                                    updateWaveform();
                                                                    if (!z42) {
                                                                    }
                                                                    z9 = true;
                                                                    z8 = false;
                                                                    z7 = false;
                                                                    chatMessageCell.updateButtonState(z8, z7, z9);
                                                                    if (!chatMessageCell.currentMessageObject.loadingCancelled) {
                                                                    }
                                                                    chatMessageCellDelegate = chatMessageCell.delegate;
                                                                    if (chatMessageCellDelegate != null) {
                                                                    }
                                                                    chatMessageCell.accessibilityVirtualViewBounds.clear();
                                                                    chatMessageCell.transitionParams.updatePhotoImageX = true;
                                                                    updateFlagSecure();
                                                                }
                                                            } else {
                                                                chatMessageCell.titleX = Math.max(i149, -max3);
                                                            }
                                                            if (max3 != 0) {
                                                                i113 = chatMessageCell.titleLayout.getWidth() - max3;
                                                                i111 = i84;
                                                                i112 = max2;
                                                            } else {
                                                                i111 = i84;
                                                                i112 = max2;
                                                                try {
                                                                    i113 = (int) Math.min((i148 < i110 || (max3 != 0 && chatMessageCell.isSmallImage)) ? i81 - (dp9 + dp10) : i81, Math.ceil(chatMessageCell.titleLayout.getLineWidth(i148)));
                                                                } catch (Exception e17) {
                                                                    e6 = e17;
                                                                    max2 = i112;
                                                                    i84 = i111;
                                                                    FileLog.e(e6);
                                                                    if (z38) {
                                                                    }
                                                                    z31 = z38;
                                                                    i88 = i81;
                                                                    if (charSequence3 == null) {
                                                                    }
                                                                    z32 = false;
                                                                    if (str13 != null) {
                                                                    }
                                                                    i89 = i88;
                                                                    if (!z30) {
                                                                    }
                                                                    z33 = z30;
                                                                    if (!z33) {
                                                                    }
                                                                    if (tLRPC$Document3 != null) {
                                                                    }
                                                                    webFile2 = webFile3;
                                                                    i92 = chatMessageCell.documentAttachType;
                                                                    if (i92 != 5) {
                                                                    }
                                                                    messageObject6 = messageObject8;
                                                                    z29 = true;
                                                                    createInstantViewButton();
                                                                    z13 = z29;
                                                                    messageObject2 = messageObject6;
                                                                    r5 = 1;
                                                                    c = 0;
                                                                    f = 1.0f;
                                                                    if (chatMessageCell.currentPosition != null) {
                                                                    }
                                                                    if (!messageObject2.isRestrictedMessage) {
                                                                    }
                                                                    c2 = 2;
                                                                    if (chatMessageCell.captionLayout != null) {
                                                                    }
                                                                    groupedMessagePosition = chatMessageCell.currentPosition;
                                                                    if (groupedMessagePosition != null) {
                                                                    }
                                                                    chatMessageCell.totalHeight += AndroidUtilities.dp(14.0f);
                                                                    messageObject3 = chatMessageCell.currentMessageObject;
                                                                    if (messageObject3.eventId == 0) {
                                                                    }
                                                                    if (messageObject.isSponsored()) {
                                                                    }
                                                                    chatMessageCell.botButtons.clear();
                                                                    if (z42) {
                                                                    }
                                                                    if (!messageObject2.isRestrictedMessage) {
                                                                    }
                                                                    chatMessageCell.substractBackgroundHeight = 0;
                                                                    chatMessageCell.keyboardHeight = 0;
                                                                    if (chatMessageCell.drawCommentButton) {
                                                                    }
                                                                    z14 = chatMessageCell.drawPinnedBottom;
                                                                    if (!z14) {
                                                                    }
                                                                    if (!z14) {
                                                                    }
                                                                    if (!messageObject.isAnyKindOfSticker()) {
                                                                    }
                                                                    if (messageObject.isAnimatedEmoji()) {
                                                                    }
                                                                    if (!chatMessageCell.drawPhotoImage) {
                                                                    }
                                                                    if (chatMessageCell.documentAttachType != 5) {
                                                                    }
                                                                    if (z13) {
                                                                    }
                                                                    if (chatMessageCell.captionLayout == null) {
                                                                    }
                                                                    if (z42) {
                                                                    }
                                                                    transcribeButton = chatMessageCell.transcribeButton;
                                                                    if (transcribeButton != null) {
                                                                    }
                                                                    updateWaveform();
                                                                    if (!z42) {
                                                                    }
                                                                    z9 = true;
                                                                    z8 = false;
                                                                    z7 = false;
                                                                    chatMessageCell.updateButtonState(z8, z7, z9);
                                                                    if (!chatMessageCell.currentMessageObject.loadingCancelled) {
                                                                    }
                                                                    chatMessageCellDelegate = chatMessageCell.delegate;
                                                                    if (chatMessageCellDelegate != null) {
                                                                    }
                                                                    chatMessageCell.accessibilityVirtualViewBounds.clear();
                                                                    chatMessageCell.transitionParams.updatePhotoImageX = true;
                                                                    updateFlagSecure();
                                                                }
                                                            }
                                                        } catch (Exception e18) {
                                                            e6 = e18;
                                                        }
                                                        try {
                                                            if (i148 >= i110) {
                                                                if (max3 != 0) {
                                                                    try {
                                                                    } catch (Exception e19) {
                                                                        e6 = e19;
                                                                        i84 = i111;
                                                                        max2 = i112;
                                                                        FileLog.e(e6);
                                                                        if (z38) {
                                                                        }
                                                                        z31 = z38;
                                                                        i88 = i81;
                                                                        if (charSequence3 == null) {
                                                                        }
                                                                        z32 = false;
                                                                        if (str13 != null) {
                                                                        }
                                                                        i89 = i88;
                                                                        if (!z30) {
                                                                        }
                                                                        z33 = z30;
                                                                        if (!z33) {
                                                                        }
                                                                        if (tLRPC$Document3 != null) {
                                                                        }
                                                                        webFile2 = webFile3;
                                                                        i92 = chatMessageCell.documentAttachType;
                                                                        if (i92 != 5) {
                                                                        }
                                                                        messageObject6 = messageObject8;
                                                                        z29 = true;
                                                                        createInstantViewButton();
                                                                        z13 = z29;
                                                                        messageObject2 = messageObject6;
                                                                        r5 = 1;
                                                                        c = 0;
                                                                        f = 1.0f;
                                                                        if (chatMessageCell.currentPosition != null) {
                                                                        }
                                                                        if (!messageObject2.isRestrictedMessage) {
                                                                        }
                                                                        c2 = 2;
                                                                        if (chatMessageCell.captionLayout != null) {
                                                                        }
                                                                        groupedMessagePosition = chatMessageCell.currentPosition;
                                                                        if (groupedMessagePosition != null) {
                                                                        }
                                                                        chatMessageCell.totalHeight += AndroidUtilities.dp(14.0f);
                                                                        messageObject3 = chatMessageCell.currentMessageObject;
                                                                        if (messageObject3.eventId == 0) {
                                                                        }
                                                                        if (messageObject.isSponsored()) {
                                                                        }
                                                                        chatMessageCell.botButtons.clear();
                                                                        if (z42) {
                                                                        }
                                                                        if (!messageObject2.isRestrictedMessage) {
                                                                        }
                                                                        chatMessageCell.substractBackgroundHeight = 0;
                                                                        chatMessageCell.keyboardHeight = 0;
                                                                        if (chatMessageCell.drawCommentButton) {
                                                                        }
                                                                        z14 = chatMessageCell.drawPinnedBottom;
                                                                        if (!z14) {
                                                                        }
                                                                        if (!z14) {
                                                                        }
                                                                        if (!messageObject.isAnyKindOfSticker()) {
                                                                        }
                                                                        if (messageObject.isAnimatedEmoji()) {
                                                                        }
                                                                        if (!chatMessageCell.drawPhotoImage) {
                                                                        }
                                                                        if (chatMessageCell.documentAttachType != 5) {
                                                                        }
                                                                        if (z13) {
                                                                        }
                                                                        if (chatMessageCell.captionLayout == null) {
                                                                        }
                                                                        if (z42) {
                                                                        }
                                                                        transcribeButton = chatMessageCell.transcribeButton;
                                                                        if (transcribeButton != null) {
                                                                        }
                                                                        updateWaveform();
                                                                        if (!z42) {
                                                                        }
                                                                        z9 = true;
                                                                        z8 = false;
                                                                        z7 = false;
                                                                        chatMessageCell.updateButtonState(z8, z7, z9);
                                                                        if (!chatMessageCell.currentMessageObject.loadingCancelled) {
                                                                        }
                                                                        chatMessageCellDelegate = chatMessageCell.delegate;
                                                                        if (chatMessageCellDelegate != null) {
                                                                        }
                                                                        chatMessageCell.accessibilityVirtualViewBounds.clear();
                                                                        chatMessageCell.transitionParams.updatePhotoImageX = true;
                                                                        updateFlagSecure();
                                                                    }
                                                                }
                                                                int i150 = i113 + dp11;
                                                                max = Math.max(max, i150);
                                                                max2 = i112;
                                                                max2 = Math.max(max2, i150);
                                                                i148++;
                                                                i84 = i111;
                                                            }
                                                            max2 = Math.max(max2, i150);
                                                            i148++;
                                                            i84 = i111;
                                                        } catch (Exception e20) {
                                                            e6 = e20;
                                                            i84 = i111;
                                                            FileLog.e(e6);
                                                            if (z38) {
                                                            }
                                                            z31 = z38;
                                                            i88 = i81;
                                                            if (charSequence3 == null) {
                                                            }
                                                            z32 = false;
                                                            if (str13 != null) {
                                                            }
                                                            i89 = i88;
                                                            if (!z30) {
                                                            }
                                                            z33 = z30;
                                                            if (!z33) {
                                                            }
                                                            if (tLRPC$Document3 != null) {
                                                            }
                                                            webFile2 = webFile3;
                                                            i92 = chatMessageCell.documentAttachType;
                                                            if (i92 != 5) {
                                                            }
                                                            messageObject6 = messageObject8;
                                                            z29 = true;
                                                            createInstantViewButton();
                                                            z13 = z29;
                                                            messageObject2 = messageObject6;
                                                            r5 = 1;
                                                            c = 0;
                                                            f = 1.0f;
                                                            if (chatMessageCell.currentPosition != null) {
                                                            }
                                                            if (!messageObject2.isRestrictedMessage) {
                                                            }
                                                            c2 = 2;
                                                            if (chatMessageCell.captionLayout != null) {
                                                            }
                                                            groupedMessagePosition = chatMessageCell.currentPosition;
                                                            if (groupedMessagePosition != null) {
                                                            }
                                                            chatMessageCell.totalHeight += AndroidUtilities.dp(14.0f);
                                                            messageObject3 = chatMessageCell.currentMessageObject;
                                                            if (messageObject3.eventId == 0) {
                                                            }
                                                            if (messageObject.isSponsored()) {
                                                            }
                                                            chatMessageCell.botButtons.clear();
                                                            if (z42) {
                                                            }
                                                            if (!messageObject2.isRestrictedMessage) {
                                                            }
                                                            chatMessageCell.substractBackgroundHeight = 0;
                                                            chatMessageCell.keyboardHeight = 0;
                                                            if (chatMessageCell.drawCommentButton) {
                                                            }
                                                            z14 = chatMessageCell.drawPinnedBottom;
                                                            if (!z14) {
                                                            }
                                                            if (!z14) {
                                                            }
                                                            if (!messageObject.isAnyKindOfSticker()) {
                                                            }
                                                            if (messageObject.isAnimatedEmoji()) {
                                                            }
                                                            if (!chatMessageCell.drawPhotoImage) {
                                                            }
                                                            if (chatMessageCell.documentAttachType != 5) {
                                                            }
                                                            if (z13) {
                                                            }
                                                            if (chatMessageCell.captionLayout == null) {
                                                            }
                                                            if (z42) {
                                                            }
                                                            transcribeButton = chatMessageCell.transcribeButton;
                                                            if (transcribeButton != null) {
                                                            }
                                                            updateWaveform();
                                                            if (!z42) {
                                                            }
                                                            z9 = true;
                                                            z8 = false;
                                                            z7 = false;
                                                            chatMessageCell.updateButtonState(z8, z7, z9);
                                                            if (!chatMessageCell.currentMessageObject.loadingCancelled) {
                                                            }
                                                            chatMessageCellDelegate = chatMessageCell.delegate;
                                                            if (chatMessageCellDelegate != null) {
                                                            }
                                                            chatMessageCell.accessibilityVirtualViewBounds.clear();
                                                            chatMessageCell.transitionParams.updatePhotoImageX = true;
                                                            updateFlagSecure();
                                                        }
                                                        i113 += dp9 + dp10;
                                                        int i1502 = i113 + dp11;
                                                        max = Math.max(max, i1502);
                                                        max2 = i112;
                                                    }
                                                } catch (Exception e21) {
                                                    e6 = e21;
                                                    z38 = false;
                                                    FileLog.e(e6);
                                                    if (z38) {
                                                    }
                                                    z31 = z38;
                                                    i88 = i81;
                                                    if (charSequence3 == null) {
                                                    }
                                                    z32 = false;
                                                    if (str13 != null) {
                                                    }
                                                    i89 = i88;
                                                    if (!z30) {
                                                    }
                                                    z33 = z30;
                                                    if (!z33) {
                                                    }
                                                    if (tLRPC$Document3 != null) {
                                                    }
                                                    webFile2 = webFile3;
                                                    i92 = chatMessageCell.documentAttachType;
                                                    if (i92 != 5) {
                                                    }
                                                    messageObject6 = messageObject8;
                                                    z29 = true;
                                                    createInstantViewButton();
                                                    z13 = z29;
                                                    messageObject2 = messageObject6;
                                                    r5 = 1;
                                                    c = 0;
                                                    f = 1.0f;
                                                    if (chatMessageCell.currentPosition != null) {
                                                    }
                                                    if (!messageObject2.isRestrictedMessage) {
                                                    }
                                                    c2 = 2;
                                                    if (chatMessageCell.captionLayout != null) {
                                                    }
                                                    groupedMessagePosition = chatMessageCell.currentPosition;
                                                    if (groupedMessagePosition != null) {
                                                    }
                                                    chatMessageCell.totalHeight += AndroidUtilities.dp(14.0f);
                                                    messageObject3 = chatMessageCell.currentMessageObject;
                                                    if (messageObject3.eventId == 0) {
                                                    }
                                                    if (messageObject.isSponsored()) {
                                                    }
                                                    chatMessageCell.botButtons.clear();
                                                    if (z42) {
                                                    }
                                                    if (!messageObject2.isRestrictedMessage) {
                                                    }
                                                    chatMessageCell.substractBackgroundHeight = 0;
                                                    chatMessageCell.keyboardHeight = 0;
                                                    if (chatMessageCell.drawCommentButton) {
                                                    }
                                                    z14 = chatMessageCell.drawPinnedBottom;
                                                    if (!z14) {
                                                    }
                                                    if (!z14) {
                                                    }
                                                    if (!messageObject.isAnyKindOfSticker()) {
                                                    }
                                                    if (messageObject.isAnimatedEmoji()) {
                                                    }
                                                    if (!chatMessageCell.drawPhotoImage) {
                                                    }
                                                    if (chatMessageCell.documentAttachType != 5) {
                                                    }
                                                    if (z13) {
                                                    }
                                                    if (chatMessageCell.captionLayout == null) {
                                                    }
                                                    if (z42) {
                                                    }
                                                    transcribeButton = chatMessageCell.transcribeButton;
                                                    if (transcribeButton != null) {
                                                    }
                                                    updateWaveform();
                                                    if (!z42) {
                                                    }
                                                    z9 = true;
                                                    z8 = false;
                                                    z7 = false;
                                                    chatMessageCell.updateButtonState(z8, z7, z9);
                                                    if (!chatMessageCell.currentMessageObject.loadingCancelled) {
                                                    }
                                                    chatMessageCellDelegate = chatMessageCell.delegate;
                                                    if (chatMessageCellDelegate != null) {
                                                    }
                                                    chatMessageCell.accessibilityVirtualViewBounds.clear();
                                                    chatMessageCell.transitionParams.updatePhotoImageX = true;
                                                    updateFlagSecure();
                                                }
                                                if (z38 || !chatMessageCell.isSmallImage) {
                                                    z31 = z38;
                                                    i88 = i81;
                                                } else {
                                                    z31 = z38;
                                                    i88 = i81 - AndroidUtilities.dp(48.0f);
                                                }
                                            } else {
                                                i88 = i81;
                                                z31 = false;
                                            }
                                            if (charSequence3 == null && str8 == null) {
                                                try {
                                                    int i151 = chatMessageCell.linkPreviewHeight;
                                                    if (i151 != 0) {
                                                        chatMessageCell.linkPreviewHeight = i151 + AndroidUtilities.dp(2.0f);
                                                        chatMessageCell.totalHeight += AndroidUtilities.dp(2.0f);
                                                    }
                                                    try {
                                                        charSequence3 = Emoji.replaceEmoji(charSequence3, Theme.chat_replyNamePaint.getFontMetricsInt(), AndroidUtilities.dp(14.0f), false);
                                                    } catch (Exception unused) {
                                                    }
                                                    CharSequence charSequence4 = charSequence3;
                                                    if (i84 == 3 && (!chatMessageCell.isSmallImage || str13 == null)) {
                                                        chatMessageCell.authorLayout = new StaticLayout(charSequence4, Theme.chat_replyNamePaint, i88, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
                                                    } else {
                                                        StaticLayout generateStaticLayout3 = generateStaticLayout(charSequence4, Theme.chat_replyNamePaint, i88, (i88 - dp9) - dp10, i84, 1);
                                                        chatMessageCell.authorLayout = generateStaticLayout3;
                                                        i84 -= generateStaticLayout3.getLineCount();
                                                    }
                                                    StaticLayout staticLayout5 = chatMessageCell.authorLayout;
                                                    int lineBottom3 = staticLayout5.getLineBottom(staticLayout5.getLineCount() - 1);
                                                    chatMessageCell.linkPreviewHeight += lineBottom3;
                                                    chatMessageCell.totalHeight += lineBottom3;
                                                    int max5 = (int) Math.max(chatMessageCell.authorLayout.getLineLeft(0), 0.0f);
                                                    chatMessageCell.authorX = -max5;
                                                    if (max5 != 0) {
                                                        i109 = chatMessageCell.authorLayout.getWidth() - max5;
                                                        z32 = true;
                                                    } else {
                                                        i109 = (int) Math.ceil(chatMessageCell.authorLayout.getLineWidth(0));
                                                        z32 = false;
                                                    }
                                                    int i152 = i109 + dp11;
                                                    try {
                                                        max = Math.max(max, i152);
                                                        max2 = Math.max(max2, i152);
                                                    } catch (Exception e22) {
                                                        e5 = e22;
                                                        FileLog.e(e5);
                                                        if (str13 != null) {
                                                        }
                                                        i89 = i88;
                                                        if (!z30) {
                                                        }
                                                        z33 = z30;
                                                        if (!z33) {
                                                        }
                                                        if (tLRPC$Document3 != null) {
                                                        }
                                                        webFile2 = webFile3;
                                                        i92 = chatMessageCell.documentAttachType;
                                                        if (i92 != 5) {
                                                        }
                                                        messageObject6 = messageObject8;
                                                        z29 = true;
                                                        createInstantViewButton();
                                                        z13 = z29;
                                                        messageObject2 = messageObject6;
                                                        r5 = 1;
                                                        c = 0;
                                                        f = 1.0f;
                                                        if (chatMessageCell.currentPosition != null) {
                                                        }
                                                        if (!messageObject2.isRestrictedMessage) {
                                                        }
                                                        c2 = 2;
                                                        if (chatMessageCell.captionLayout != null) {
                                                        }
                                                        groupedMessagePosition = chatMessageCell.currentPosition;
                                                        if (groupedMessagePosition != null) {
                                                        }
                                                        chatMessageCell.totalHeight += AndroidUtilities.dp(14.0f);
                                                        messageObject3 = chatMessageCell.currentMessageObject;
                                                        if (messageObject3.eventId == 0) {
                                                        }
                                                        if (messageObject.isSponsored()) {
                                                        }
                                                        chatMessageCell.botButtons.clear();
                                                        if (z42) {
                                                        }
                                                        if (!messageObject2.isRestrictedMessage) {
                                                        }
                                                        chatMessageCell.substractBackgroundHeight = 0;
                                                        chatMessageCell.keyboardHeight = 0;
                                                        if (chatMessageCell.drawCommentButton) {
                                                        }
                                                        z14 = chatMessageCell.drawPinnedBottom;
                                                        if (!z14) {
                                                        }
                                                        if (!z14) {
                                                        }
                                                        if (!messageObject.isAnyKindOfSticker()) {
                                                        }
                                                        if (messageObject.isAnimatedEmoji()) {
                                                        }
                                                        if (!chatMessageCell.drawPhotoImage) {
                                                        }
                                                        if (chatMessageCell.documentAttachType != 5) {
                                                        }
                                                        if (z13) {
                                                        }
                                                        if (chatMessageCell.captionLayout == null) {
                                                        }
                                                        if (z42) {
                                                        }
                                                        transcribeButton = chatMessageCell.transcribeButton;
                                                        if (transcribeButton != null) {
                                                        }
                                                        updateWaveform();
                                                        if (!z42) {
                                                        }
                                                        z9 = true;
                                                        z8 = false;
                                                        z7 = false;
                                                        chatMessageCell.updateButtonState(z8, z7, z9);
                                                        if (!chatMessageCell.currentMessageObject.loadingCancelled) {
                                                        }
                                                        chatMessageCellDelegate = chatMessageCell.delegate;
                                                        if (chatMessageCellDelegate != null) {
                                                        }
                                                        chatMessageCell.accessibilityVirtualViewBounds.clear();
                                                        chatMessageCell.transitionParams.updatePhotoImageX = true;
                                                        updateFlagSecure();
                                                    }
                                                } catch (Exception e23) {
                                                    e5 = e23;
                                                    z32 = false;
                                                }
                                            } else {
                                                z32 = false;
                                            }
                                            if (str13 != null) {
                                                try {
                                                    chatMessageCell.descriptionX = 0;
                                                    chatMessageCell.currentMessageObject.generateLinkDescription();
                                                    int i153 = chatMessageCell.linkPreviewHeight;
                                                    if (i153 != 0) {
                                                        chatMessageCell.linkPreviewHeight = i153 + AndroidUtilities.dp(2.0f);
                                                        chatMessageCell.totalHeight += AndroidUtilities.dp(2.0f);
                                                    }
                                                    boolean z47 = str12 != null && str12.toLowerCase().equals("twitter");
                                                    if (i84 == 3) {
                                                        try {
                                                            if (!chatMessageCell.isSmallImage) {
                                                                chatMessageCell.descriptionLayout = StaticLayoutEx.createStaticLayout(messageObject.linkDescription, Theme.chat_replyTextPaint, i88, Layout.Alignment.ALIGN_NORMAL, 1.0f, AndroidUtilities.dp(1.0f), false, TextUtils.TruncateAt.END, i88, z47 ? 100 : 6);
                                                                i84 = 0;
                                                                StaticLayout staticLayout6 = chatMessageCell.descriptionLayout;
                                                                int lineBottom4 = staticLayout6.getLineBottom(staticLayout6.getLineCount() - 1);
                                                                chatMessageCell.linkPreviewHeight += lineBottom4;
                                                                chatMessageCell.totalHeight += lineBottom4;
                                                                boolean z48 = false;
                                                                for (i105 = 0; i105 < chatMessageCell.descriptionLayout.getLineCount(); i105++) {
                                                                    int ceil7 = (int) Math.ceil(chatMessageCell.descriptionLayout.getLineLeft(i105));
                                                                    if (ceil7 > 0) {
                                                                        int i154 = chatMessageCell.descriptionX;
                                                                        if (i154 == 0) {
                                                                            chatMessageCell.descriptionX = -ceil7;
                                                                        } else {
                                                                            chatMessageCell.descriptionX = Math.max(i154, -ceil7);
                                                                        }
                                                                        z48 = true;
                                                                    }
                                                                }
                                                                int width2 = chatMessageCell.descriptionLayout.getWidth();
                                                                i106 = 0;
                                                                while (i106 < chatMessageCell.descriptionLayout.getLineCount()) {
                                                                    int ceil8 = (int) Math.ceil(chatMessageCell.descriptionLayout.getLineLeft(i106));
                                                                    if (ceil8 == 0 && chatMessageCell.descriptionX != 0) {
                                                                        chatMessageCell.descriptionX = 0;
                                                                    }
                                                                    if (ceil8 > 0) {
                                                                        i107 = width2 - ceil8;
                                                                    } else if (z48) {
                                                                        i107 = width2;
                                                                    } else {
                                                                        i89 = i88;
                                                                        try {
                                                                            i107 = Math.min((int) Math.ceil(chatMessageCell.descriptionLayout.getLineWidth(i106)), width2);
                                                                            if (i106 >= i84 || (i84 != 0 && ceil8 != 0 && chatMessageCell.isSmallImage)) {
                                                                                i107 += dp9 + dp10;
                                                                            }
                                                                            i108 = i107 + dp11;
                                                                            if (max2 < i108) {
                                                                                if (z31) {
                                                                                    chatMessageCell.titleX += i108 - max2;
                                                                                }
                                                                                if (z32) {
                                                                                    chatMessageCell.authorX += i108 - max2;
                                                                                }
                                                                                max2 = i108;
                                                                            }
                                                                            max = Math.max(max, i108);
                                                                            i106++;
                                                                            i88 = i89;
                                                                        } catch (Exception e24) {
                                                                            e4 = e24;
                                                                            FileLog.e(e4);
                                                                            if (!z30) {
                                                                            }
                                                                            z33 = z30;
                                                                            if (!z33) {
                                                                            }
                                                                            if (tLRPC$Document3 != null) {
                                                                            }
                                                                            webFile2 = webFile3;
                                                                            i92 = chatMessageCell.documentAttachType;
                                                                            if (i92 != 5) {
                                                                            }
                                                                            messageObject6 = messageObject8;
                                                                            z29 = true;
                                                                            createInstantViewButton();
                                                                            z13 = z29;
                                                                            messageObject2 = messageObject6;
                                                                            r5 = 1;
                                                                            c = 0;
                                                                            f = 1.0f;
                                                                            if (chatMessageCell.currentPosition != null) {
                                                                            }
                                                                            if (!messageObject2.isRestrictedMessage) {
                                                                            }
                                                                            c2 = 2;
                                                                            if (chatMessageCell.captionLayout != null) {
                                                                            }
                                                                            groupedMessagePosition = chatMessageCell.currentPosition;
                                                                            if (groupedMessagePosition != null) {
                                                                            }
                                                                            chatMessageCell.totalHeight += AndroidUtilities.dp(14.0f);
                                                                            messageObject3 = chatMessageCell.currentMessageObject;
                                                                            if (messageObject3.eventId == 0) {
                                                                            }
                                                                            if (messageObject.isSponsored()) {
                                                                            }
                                                                            chatMessageCell.botButtons.clear();
                                                                            if (z42) {
                                                                            }
                                                                            if (!messageObject2.isRestrictedMessage) {
                                                                            }
                                                                            chatMessageCell.substractBackgroundHeight = 0;
                                                                            chatMessageCell.keyboardHeight = 0;
                                                                            if (chatMessageCell.drawCommentButton) {
                                                                            }
                                                                            z14 = chatMessageCell.drawPinnedBottom;
                                                                            if (!z14) {
                                                                            }
                                                                            if (!z14) {
                                                                            }
                                                                            if (!messageObject.isAnyKindOfSticker()) {
                                                                            }
                                                                            if (messageObject.isAnimatedEmoji()) {
                                                                            }
                                                                            if (!chatMessageCell.drawPhotoImage) {
                                                                            }
                                                                            if (chatMessageCell.documentAttachType != 5) {
                                                                            }
                                                                            if (z13) {
                                                                            }
                                                                            if (chatMessageCell.captionLayout == null) {
                                                                            }
                                                                            if (z42) {
                                                                            }
                                                                            transcribeButton = chatMessageCell.transcribeButton;
                                                                            if (transcribeButton != null) {
                                                                            }
                                                                            updateWaveform();
                                                                            if (!z42) {
                                                                            }
                                                                            z9 = true;
                                                                            z8 = false;
                                                                            z7 = false;
                                                                            chatMessageCell.updateButtonState(z8, z7, z9);
                                                                            if (!chatMessageCell.currentMessageObject.loadingCancelled) {
                                                                            }
                                                                            chatMessageCellDelegate = chatMessageCell.delegate;
                                                                            if (chatMessageCellDelegate != null) {
                                                                            }
                                                                            chatMessageCell.accessibilityVirtualViewBounds.clear();
                                                                            chatMessageCell.transitionParams.updatePhotoImageX = true;
                                                                            updateFlagSecure();
                                                                        }
                                                                    }
                                                                    i89 = i88;
                                                                    if (i106 >= i84) {
                                                                    }
                                                                    i107 += dp9 + dp10;
                                                                    i108 = i107 + dp11;
                                                                    if (max2 < i108) {
                                                                    }
                                                                    max = Math.max(max, i108);
                                                                    i106++;
                                                                    i88 = i89;
                                                                }
                                                            }
                                                        } catch (Exception e25) {
                                                            e4 = e25;
                                                            i89 = i88;
                                                            FileLog.e(e4);
                                                            if (!z30) {
                                                            }
                                                            z33 = z30;
                                                            if (!z33) {
                                                            }
                                                            if (tLRPC$Document3 != null) {
                                                            }
                                                            webFile2 = webFile3;
                                                            i92 = chatMessageCell.documentAttachType;
                                                            if (i92 != 5) {
                                                            }
                                                            messageObject6 = messageObject8;
                                                            z29 = true;
                                                            createInstantViewButton();
                                                            z13 = z29;
                                                            messageObject2 = messageObject6;
                                                            r5 = 1;
                                                            c = 0;
                                                            f = 1.0f;
                                                            if (chatMessageCell.currentPosition != null) {
                                                            }
                                                            if (!messageObject2.isRestrictedMessage) {
                                                            }
                                                            c2 = 2;
                                                            if (chatMessageCell.captionLayout != null) {
                                                            }
                                                            groupedMessagePosition = chatMessageCell.currentPosition;
                                                            if (groupedMessagePosition != null) {
                                                            }
                                                            chatMessageCell.totalHeight += AndroidUtilities.dp(14.0f);
                                                            messageObject3 = chatMessageCell.currentMessageObject;
                                                            if (messageObject3.eventId == 0) {
                                                            }
                                                            if (messageObject.isSponsored()) {
                                                            }
                                                            chatMessageCell.botButtons.clear();
                                                            if (z42) {
                                                            }
                                                            if (!messageObject2.isRestrictedMessage) {
                                                            }
                                                            chatMessageCell.substractBackgroundHeight = 0;
                                                            chatMessageCell.keyboardHeight = 0;
                                                            if (chatMessageCell.drawCommentButton) {
                                                            }
                                                            z14 = chatMessageCell.drawPinnedBottom;
                                                            if (!z14) {
                                                            }
                                                            if (!z14) {
                                                            }
                                                            if (!messageObject.isAnyKindOfSticker()) {
                                                            }
                                                            if (messageObject.isAnimatedEmoji()) {
                                                            }
                                                            if (!chatMessageCell.drawPhotoImage) {
                                                            }
                                                            if (chatMessageCell.documentAttachType != 5) {
                                                            }
                                                            if (z13) {
                                                            }
                                                            if (chatMessageCell.captionLayout == null) {
                                                            }
                                                            if (z42) {
                                                            }
                                                            transcribeButton = chatMessageCell.transcribeButton;
                                                            if (transcribeButton != null) {
                                                            }
                                                            updateWaveform();
                                                            if (!z42) {
                                                            }
                                                            z9 = true;
                                                            z8 = false;
                                                            z7 = false;
                                                            chatMessageCell.updateButtonState(z8, z7, z9);
                                                            if (!chatMessageCell.currentMessageObject.loadingCancelled) {
                                                            }
                                                            chatMessageCellDelegate = chatMessageCell.delegate;
                                                            if (chatMessageCellDelegate != null) {
                                                            }
                                                            chatMessageCell.accessibilityVirtualViewBounds.clear();
                                                            chatMessageCell.transitionParams.updatePhotoImageX = true;
                                                            updateFlagSecure();
                                                        }
                                                    }
                                                    chatMessageCell.descriptionLayout = generateStaticLayout(messageObject.linkDescription, Theme.chat_replyTextPaint, i88, (i88 - dp9) - dp10, i84, z47 ? 100 : 6);
                                                    StaticLayout staticLayout62 = chatMessageCell.descriptionLayout;
                                                    int lineBottom42 = staticLayout62.getLineBottom(staticLayout62.getLineCount() - 1);
                                                    chatMessageCell.linkPreviewHeight += lineBottom42;
                                                    chatMessageCell.totalHeight += lineBottom42;
                                                    boolean z482 = false;
                                                    while (i105 < chatMessageCell.descriptionLayout.getLineCount()) {
                                                    }
                                                    int width22 = chatMessageCell.descriptionLayout.getWidth();
                                                    i106 = 0;
                                                    while (i106 < chatMessageCell.descriptionLayout.getLineCount()) {
                                                    }
                                                } catch (Exception e26) {
                                                    e4 = e26;
                                                }
                                            }
                                            i89 = i88;
                                            if (!z30 && chatMessageCell.descriptionLayout == null && chatMessageCell.titleLayout == null) {
                                                chatMessageCell.isSmallImage = false;
                                                z33 = false;
                                            } else {
                                                z33 = z30;
                                            }
                                            if (!z33) {
                                                dp9 = i89;
                                            }
                                            if (tLRPC$Document3 != null) {
                                                messageObject8 = messageObject;
                                                i91 = i132;
                                                i90 = i82;
                                                tLRPC$Photo3 = tLRPC$Photo2;
                                                tLRPC$Document4 = tLRPC$Document3;
                                                if (tLRPC$Photo3 != null) {
                                                    if (str29 != null) {
                                                        str14 = str29;
                                                        if (str14.equals("photo")) {
                                                            z37 = true;
                                                            chatMessageCell.currentPhotoObject = FileLoader.getClosestPhotoSizeWithSize(messageObject8.photoThumbs, (!z37 || !z33) ? AndroidUtilities.getPhotoSize() : dp9, !z37);
                                                            chatMessageCell.photoParentObject = messageObject8.photoThumbsObject;
                                                            chatMessageCell.checkOnlyButtonPressed = !z37;
                                                            bitmapDrawable2 = chatMessageCell.currentMessageObject.strippedThumb;
                                                            if (bitmapDrawable2 != null) {
                                                                chatMessageCell.currentPhotoObjectThumb = FileLoader.getClosestPhotoSizeWithSize(messageObject8.photoThumbs, 40);
                                                            } else {
                                                                chatMessageCell.currentPhotoObjectThumbStripped = bitmapDrawable2;
                                                            }
                                                            if (chatMessageCell.currentPhotoObjectThumb == chatMessageCell.currentPhotoObject) {
                                                                chatMessageCell.currentPhotoObjectThumb = null;
                                                            }
                                                        }
                                                    } else {
                                                        str14 = str29;
                                                    }
                                                    z37 = false;
                                                    chatMessageCell.currentPhotoObject = FileLoader.getClosestPhotoSizeWithSize(messageObject8.photoThumbs, (!z37 || !z33) ? AndroidUtilities.getPhotoSize() : dp9, !z37);
                                                    chatMessageCell.photoParentObject = messageObject8.photoThumbsObject;
                                                    chatMessageCell.checkOnlyButtonPressed = !z37;
                                                    bitmapDrawable2 = chatMessageCell.currentMessageObject.strippedThumb;
                                                    if (bitmapDrawable2 != null) {
                                                    }
                                                    if (chatMessageCell.currentPhotoObjectThumb == chatMessageCell.currentPhotoObject) {
                                                    }
                                                } else {
                                                    str14 = str29;
                                                    if (webFile != null) {
                                                        webFile3 = webFile;
                                                        if (!webFile3.mime_type.startsWith("image/")) {
                                                            webFile3 = null;
                                                        }
                                                        chatMessageCell.drawImageButton = false;
                                                    }
                                                }
                                                webFile3 = webFile;
                                            } else if (MessageObject.isRoundVideoDocument(tLRPC$Document3)) {
                                                tLRPC$Document4 = tLRPC$Document3;
                                                chatMessageCell.currentPhotoObject = FileLoader.getClosestPhotoSizeWithSize(tLRPC$Document4.thumbs, 90);
                                                chatMessageCell.photoParentObject = tLRPC$Document4;
                                                chatMessageCell.documentAttach = tLRPC$Document4;
                                                chatMessageCell.documentAttachType = 7;
                                                messageObject8 = messageObject;
                                                webFile3 = webFile;
                                                str14 = str29;
                                                i91 = i132;
                                                i90 = i82;
                                                tLRPC$Photo3 = tLRPC$Photo2;
                                            } else {
                                                tLRPC$Document4 = tLRPC$Document3;
                                                if (MessageObject.isGifDocument(tLRPC$Document4, messageObject.hasValidGroupId())) {
                                                    if (messageObject.isGame() || SharedConfig.autoplayGifs) {
                                                        messageObject8 = messageObject;
                                                        f8 = 1.0f;
                                                    } else {
                                                        messageObject8 = messageObject;
                                                        f8 = 1.0f;
                                                        messageObject8.gifState = 1.0f;
                                                    }
                                                    chatMessageCell.photoImage.setAllowStartAnimation(messageObject8.gifState != f8);
                                                    TLRPC$PhotoSize closestPhotoSizeWithSize = FileLoader.getClosestPhotoSizeWithSize(tLRPC$Document4.thumbs, 90);
                                                    chatMessageCell.currentPhotoObject = closestPhotoSizeWithSize;
                                                    if (closestPhotoSizeWithSize != null) {
                                                        chatMessageCell.photoParentObject = tLRPC$Document4;
                                                        tLRPC$Photo3 = tLRPC$Photo2;
                                                    } else {
                                                        tLRPC$Photo3 = tLRPC$Photo2;
                                                        if (tLRPC$Photo2 != null) {
                                                            chatMessageCell.currentPhotoObject = FileLoader.getClosestPhotoSizeWithSize(tLRPC$Photo3.sizes, 90);
                                                            chatMessageCell.photoParentObject = tLRPC$Photo3;
                                                        }
                                                    }
                                                    TLRPC$PhotoSize tLRPC$PhotoSize9 = chatMessageCell.currentPhotoObject;
                                                    if (tLRPC$PhotoSize9 != null && (tLRPC$PhotoSize9.w == 0 || tLRPC$PhotoSize9.h == 0)) {
                                                        for (int i155 = 0; i155 < tLRPC$Document4.attributes.size(); i155++) {
                                                            TLRPC$DocumentAttribute tLRPC$DocumentAttribute = tLRPC$Document4.attributes.get(i155);
                                                            if ((tLRPC$DocumentAttribute instanceof TLRPC$TL_documentAttributeImageSize) || (tLRPC$DocumentAttribute instanceof TLRPC$TL_documentAttributeVideo)) {
                                                                TLRPC$PhotoSize tLRPC$PhotoSize10 = chatMessageCell.currentPhotoObject;
                                                                tLRPC$PhotoSize10.w = tLRPC$DocumentAttribute.w;
                                                                tLRPC$PhotoSize10.h = tLRPC$DocumentAttribute.h;
                                                                break;
                                                            }
                                                        }
                                                        TLRPC$PhotoSize tLRPC$PhotoSize11 = chatMessageCell.currentPhotoObject;
                                                        if (tLRPC$PhotoSize11.w == 0 || tLRPC$PhotoSize11.h == 0) {
                                                            int dp12 = AndroidUtilities.dp(150.0f);
                                                            tLRPC$PhotoSize11.h = dp12;
                                                            tLRPC$PhotoSize11.w = dp12;
                                                        }
                                                    }
                                                    chatMessageCell.documentAttach = tLRPC$Document4;
                                                    chatMessageCell.documentAttachType = 2;
                                                } else {
                                                    messageObject8 = messageObject;
                                                    tLRPC$Photo3 = tLRPC$Photo2;
                                                    if (MessageObject.isVideoDocument(tLRPC$Document4)) {
                                                        if (tLRPC$Photo3 != null) {
                                                            chatMessageCell.currentPhotoObject = FileLoader.getClosestPhotoSizeWithSize(tLRPC$Photo3.sizes, AndroidUtilities.getPhotoSize(), true);
                                                            chatMessageCell.currentPhotoObjectThumb = FileLoader.getClosestPhotoSizeWithSize(tLRPC$Photo3.sizes, 40);
                                                            chatMessageCell.photoParentObject = tLRPC$Photo3;
                                                        }
                                                        if (chatMessageCell.currentPhotoObject == null) {
                                                            chatMessageCell.currentPhotoObject = FileLoader.getClosestPhotoSizeWithSize(tLRPC$Document4.thumbs, 320);
                                                            chatMessageCell.currentPhotoObjectThumb = FileLoader.getClosestPhotoSizeWithSize(tLRPC$Document4.thumbs, 40);
                                                            chatMessageCell.photoParentObject = tLRPC$Document4;
                                                        }
                                                        TLRPC$PhotoSize tLRPC$PhotoSize12 = chatMessageCell.currentPhotoObject;
                                                        if (tLRPC$PhotoSize12 == chatMessageCell.currentPhotoObjectThumb) {
                                                            tLRPC$PhotoSize8 = null;
                                                            chatMessageCell.currentPhotoObjectThumb = null;
                                                        } else {
                                                            tLRPC$PhotoSize8 = null;
                                                        }
                                                        BitmapDrawable bitmapDrawable3 = chatMessageCell.currentMessageObject.strippedThumb;
                                                        if (bitmapDrawable3 != null) {
                                                            chatMessageCell.currentPhotoObjectThumb = tLRPC$PhotoSize8;
                                                            chatMessageCell.currentPhotoObjectThumbStripped = bitmapDrawable3;
                                                        }
                                                        if (tLRPC$PhotoSize12 == null) {
                                                            TLRPC$TL_photoSize tLRPC$TL_photoSize = new TLRPC$TL_photoSize();
                                                            chatMessageCell.currentPhotoObject = tLRPC$TL_photoSize;
                                                            tLRPC$TL_photoSize.type = "s";
                                                            tLRPC$TL_photoSize.location = new TLRPC$TL_fileLocationUnavailable();
                                                        }
                                                        TLRPC$PhotoSize tLRPC$PhotoSize13 = chatMessageCell.currentPhotoObject;
                                                        if (tLRPC$PhotoSize13 != null && (tLRPC$PhotoSize13.w == 0 || tLRPC$PhotoSize13.h == 0 || (tLRPC$PhotoSize13 instanceof TLRPC$TL_photoStrippedSize))) {
                                                            int i156 = 0;
                                                            while (true) {
                                                                if (i156 >= tLRPC$Document4.attributes.size()) {
                                                                    break;
                                                                }
                                                                TLRPC$DocumentAttribute tLRPC$DocumentAttribute2 = tLRPC$Document4.attributes.get(i156);
                                                                if (tLRPC$DocumentAttribute2 instanceof TLRPC$TL_documentAttributeVideo) {
                                                                    TLRPC$PhotoSize tLRPC$PhotoSize14 = chatMessageCell.currentPhotoObject;
                                                                    if (tLRPC$PhotoSize14 instanceof TLRPC$TL_photoStrippedSize) {
                                                                        int i157 = tLRPC$DocumentAttribute2.w;
                                                                        float max6 = Math.max(i157, i157) / 50.0f;
                                                                        TLRPC$PhotoSize tLRPC$PhotoSize15 = chatMessageCell.currentPhotoObject;
                                                                        tLRPC$PhotoSize15.w = (int) (tLRPC$DocumentAttribute2.w / max6);
                                                                        tLRPC$PhotoSize15.h = (int) (tLRPC$DocumentAttribute2.h / max6);
                                                                    } else {
                                                                        tLRPC$PhotoSize14.w = tLRPC$DocumentAttribute2.w;
                                                                        tLRPC$PhotoSize14.h = tLRPC$DocumentAttribute2.h;
                                                                    }
                                                                } else {
                                                                    i156++;
                                                                }
                                                            }
                                                            TLRPC$PhotoSize tLRPC$PhotoSize16 = chatMessageCell.currentPhotoObject;
                                                            if (tLRPC$PhotoSize16.w == 0 || tLRPC$PhotoSize16.h == 0) {
                                                                int dp13 = AndroidUtilities.dp(150.0f);
                                                                tLRPC$PhotoSize16.h = dp13;
                                                                tLRPC$PhotoSize16.w = dp13;
                                                            }
                                                        }
                                                        chatMessageCell.createDocumentLayout(0, messageObject8);
                                                    } else {
                                                        if (MessageObject.isStickerDocument(tLRPC$Document4) || MessageObject.isAnimatedStickerDocument(tLRPC$Document4, true)) {
                                                            i91 = i132;
                                                            i90 = i82;
                                                            TLRPC$PhotoSize closestPhotoSizeWithSize2 = FileLoader.getClosestPhotoSizeWithSize(tLRPC$Document4.thumbs, 90);
                                                            chatMessageCell.currentPhotoObject = closestPhotoSizeWithSize2;
                                                            chatMessageCell.photoParentObject = tLRPC$Document4;
                                                            if (closestPhotoSizeWithSize2 != null && (closestPhotoSizeWithSize2.w == 0 || closestPhotoSizeWithSize2.h == 0)) {
                                                                int i158 = 0;
                                                                while (true) {
                                                                    if (i158 >= tLRPC$Document4.attributes.size()) {
                                                                        break;
                                                                    }
                                                                    TLRPC$DocumentAttribute tLRPC$DocumentAttribute3 = tLRPC$Document4.attributes.get(i158);
                                                                    if (tLRPC$DocumentAttribute3 instanceof TLRPC$TL_documentAttributeImageSize) {
                                                                        TLRPC$PhotoSize tLRPC$PhotoSize17 = chatMessageCell.currentPhotoObject;
                                                                        tLRPC$PhotoSize17.w = tLRPC$DocumentAttribute3.w;
                                                                        tLRPC$PhotoSize17.h = tLRPC$DocumentAttribute3.h;
                                                                        break;
                                                                    }
                                                                    i158++;
                                                                }
                                                                TLRPC$PhotoSize tLRPC$PhotoSize18 = chatMessageCell.currentPhotoObject;
                                                                if (tLRPC$PhotoSize18.w == 0 || tLRPC$PhotoSize18.h == 0) {
                                                                    int dp14 = AndroidUtilities.dp(150.0f);
                                                                    tLRPC$PhotoSize18.h = dp14;
                                                                    tLRPC$PhotoSize18.w = dp14;
                                                                }
                                                            }
                                                            chatMessageCell.documentAttach = tLRPC$Document4;
                                                            chatMessageCell.documentAttachType = 6;
                                                        } else {
                                                            int i159 = chatMessageCell.drawInstantViewType;
                                                            if (i159 == 6) {
                                                                TLRPC$PhotoSize closestPhotoSizeWithSize3 = FileLoader.getClosestPhotoSizeWithSize(tLRPC$Document4.thumbs, 320);
                                                                chatMessageCell.currentPhotoObject = closestPhotoSizeWithSize3;
                                                                chatMessageCell.photoParentObject = tLRPC$Document4;
                                                                if (closestPhotoSizeWithSize3 != null && (closestPhotoSizeWithSize3.w == 0 || closestPhotoSizeWithSize3.h == 0)) {
                                                                    int i160 = 0;
                                                                    while (true) {
                                                                        if (i160 >= tLRPC$Document4.attributes.size()) {
                                                                            break;
                                                                        }
                                                                        TLRPC$DocumentAttribute tLRPC$DocumentAttribute4 = tLRPC$Document4.attributes.get(i160);
                                                                        if (tLRPC$DocumentAttribute4 instanceof TLRPC$TL_documentAttributeImageSize) {
                                                                            TLRPC$PhotoSize tLRPC$PhotoSize19 = chatMessageCell.currentPhotoObject;
                                                                            tLRPC$PhotoSize19.w = tLRPC$DocumentAttribute4.w;
                                                                            tLRPC$PhotoSize19.h = tLRPC$DocumentAttribute4.h;
                                                                            break;
                                                                        }
                                                                        i160++;
                                                                    }
                                                                    TLRPC$PhotoSize tLRPC$PhotoSize20 = chatMessageCell.currentPhotoObject;
                                                                    if (tLRPC$PhotoSize20.w == 0 || tLRPC$PhotoSize20.h == 0) {
                                                                        int dp15 = AndroidUtilities.dp(150.0f);
                                                                        tLRPC$PhotoSize20.h = dp15;
                                                                        tLRPC$PhotoSize20.w = dp15;
                                                                    }
                                                                }
                                                                chatMessageCell.documentAttach = tLRPC$Document4;
                                                                chatMessageCell.documentAttachType = 8;
                                                                String formatFileSize = AndroidUtilities.formatFileSize(tLRPC$Document4.size);
                                                                chatMessageCell.durationWidth = (int) Math.ceil(Theme.chat_durationPaint.measureText(formatFileSize));
                                                                chatMessageCell.videoInfoLayout = new StaticLayout(formatFileSize, Theme.chat_durationPaint, chatMessageCell.durationWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
                                                            } else if (i159 == 7) {
                                                                chatMessageCell.currentPhotoObject = FileLoader.getClosestPhotoSizeWithSize(tLRPC$Document4.thumbs, 700);
                                                                BitmapDrawable bitmapDrawable4 = chatMessageCell.currentMessageObject.strippedThumb;
                                                                if (bitmapDrawable4 == null) {
                                                                    chatMessageCell.currentPhotoObjectThumb = FileLoader.getClosestPhotoSizeWithSize(tLRPC$Document4.thumbs, 40);
                                                                } else {
                                                                    chatMessageCell.currentPhotoObjectThumbStripped = bitmapDrawable4;
                                                                }
                                                                chatMessageCell.photoParentObject = tLRPC$Document4;
                                                                TLRPC$PhotoSize tLRPC$PhotoSize21 = chatMessageCell.currentPhotoObject;
                                                                if (tLRPC$PhotoSize21 != null && (tLRPC$PhotoSize21.w == 0 || tLRPC$PhotoSize21.h == 0)) {
                                                                    int i161 = 0;
                                                                    while (true) {
                                                                        if (i161 >= tLRPC$Document4.attributes.size()) {
                                                                            break;
                                                                        }
                                                                        TLRPC$DocumentAttribute tLRPC$DocumentAttribute5 = tLRPC$Document4.attributes.get(i161);
                                                                        if (tLRPC$DocumentAttribute5 instanceof TLRPC$TL_documentAttributeImageSize) {
                                                                            TLRPC$PhotoSize tLRPC$PhotoSize22 = chatMessageCell.currentPhotoObject;
                                                                            tLRPC$PhotoSize22.w = tLRPC$DocumentAttribute5.w;
                                                                            tLRPC$PhotoSize22.h = tLRPC$DocumentAttribute5.h;
                                                                            break;
                                                                        }
                                                                        i161++;
                                                                    }
                                                                    TLRPC$PhotoSize tLRPC$PhotoSize23 = chatMessageCell.currentPhotoObject;
                                                                    if (tLRPC$PhotoSize23.w == 0 || tLRPC$PhotoSize23.h == 0) {
                                                                        int dp16 = AndroidUtilities.dp(150.0f);
                                                                        tLRPC$PhotoSize23.h = dp16;
                                                                        tLRPC$PhotoSize23.w = dp16;
                                                                    }
                                                                }
                                                                chatMessageCell.documentAttach = tLRPC$Document4;
                                                                chatMessageCell.documentAttachType = 9;
                                                            } else {
                                                                i91 = i132;
                                                                i90 = i82;
                                                                chatMessageCell.calcBackgroundWidth(i91, i90, max);
                                                                if (chatMessageCell.backgroundWidth < AndroidUtilities.dp(20.0f) + i91) {
                                                                    chatMessageCell.backgroundWidth = AndroidUtilities.dp(20.0f) + i91;
                                                                }
                                                                if (MessageObject.isVoiceDocument(tLRPC$Document4)) {
                                                                    chatMessageCell.createDocumentLayout(chatMessageCell.backgroundWidth - AndroidUtilities.dp(10.0f), messageObject8);
                                                                    chatMessageCell.mediaOffsetY = chatMessageCell.currentMessageObject.textHeight + AndroidUtilities.dp(8.0f) + chatMessageCell.linkPreviewHeight;
                                                                    chatMessageCell.totalHeight += AndroidUtilities.dp(44.0f);
                                                                    chatMessageCell.linkPreviewHeight += AndroidUtilities.dp(44.0f);
                                                                    int dp17 = i91 - AndroidUtilities.dp(86.0f);
                                                                    max = AndroidUtilities.isTablet() ? Math.max(max, (Math.min(AndroidUtilities.getMinTabletSide() - AndroidUtilities.dp(z10 ? 52.0f : 0.0f), AndroidUtilities.dp(220.0f)) - AndroidUtilities.dp(30.0f)) + dp11) : Math.max(max, (Math.min(getParentWidth() - AndroidUtilities.dp(z10 ? 52.0f : 0.0f), AndroidUtilities.dp(220.0f)) - AndroidUtilities.dp(30.0f)) + dp11);
                                                                    chatMessageCell.calcBackgroundWidth(dp17, i90, max);
                                                                    i91 = dp17;
                                                                } else if (MessageObject.isMusicDocument(tLRPC$Document4)) {
                                                                    int createDocumentLayout = chatMessageCell.createDocumentLayout(chatMessageCell.backgroundWidth - AndroidUtilities.dp(10.0f), messageObject8);
                                                                    chatMessageCell.mediaOffsetY = chatMessageCell.currentMessageObject.textHeight + AndroidUtilities.dp(8.0f) + chatMessageCell.linkPreviewHeight;
                                                                    chatMessageCell.totalHeight += AndroidUtilities.dp(56.0f);
                                                                    chatMessageCell.linkPreviewHeight += AndroidUtilities.dp(56.0f);
                                                                    i91 -= AndroidUtilities.dp(86.0f);
                                                                    int max7 = Math.max(max, createDocumentLayout + dp11 + AndroidUtilities.dp(94.0f));
                                                                    StaticLayout staticLayout7 = chatMessageCell.songLayout;
                                                                    if (staticLayout7 != null && staticLayout7.getLineCount() > 0) {
                                                                        max7 = (int) Math.max(max7, chatMessageCell.songLayout.getLineWidth(0) + dp11 + AndroidUtilities.dp(86.0f));
                                                                    }
                                                                    StaticLayout staticLayout8 = chatMessageCell.performerLayout;
                                                                    if (staticLayout8 != null && staticLayout8.getLineCount() > 0) {
                                                                        max7 = (int) Math.max(max7, chatMessageCell.performerLayout.getLineWidth(0) + dp11 + AndroidUtilities.dp(86.0f));
                                                                    }
                                                                    max = max7;
                                                                    chatMessageCell.calcBackgroundWidth(i91, i90, max);
                                                                } else {
                                                                    chatMessageCell.createDocumentLayout(chatMessageCell.backgroundWidth - AndroidUtilities.dp(168.0f), messageObject8);
                                                                    chatMessageCell.drawImageButton = true;
                                                                    if (chatMessageCell.drawPhotoImage) {
                                                                        chatMessageCell.totalHeight += AndroidUtilities.dp(100.0f);
                                                                        chatMessageCell.linkPreviewHeight += AndroidUtilities.dp(86.0f);
                                                                        chatMessageCell.photoImage.setImageCoords(0.0f, chatMessageCell.totalHeight + chatMessageCell.namesOffset, AndroidUtilities.dp(86.0f), AndroidUtilities.dp(86.0f));
                                                                    } else {
                                                                        chatMessageCell.mediaOffsetY = chatMessageCell.currentMessageObject.textHeight + AndroidUtilities.dp(8.0f) + chatMessageCell.linkPreviewHeight;
                                                                        chatMessageCell.photoImage.setImageCoords(0.0f, (chatMessageCell.totalHeight + chatMessageCell.namesOffset) - AndroidUtilities.dp(14.0f), AndroidUtilities.dp(56.0f), AndroidUtilities.dp(56.0f));
                                                                        chatMessageCell.totalHeight += AndroidUtilities.dp(64.0f);
                                                                        chatMessageCell.linkPreviewHeight += AndroidUtilities.dp(50.0f);
                                                                        StaticLayout staticLayout9 = chatMessageCell.docTitleLayout;
                                                                        if (staticLayout9 != null && staticLayout9.getLineCount() > 1) {
                                                                            int lineCount2 = (chatMessageCell.docTitleLayout.getLineCount() - 1) * AndroidUtilities.dp(16.0f);
                                                                            chatMessageCell.totalHeight += lineCount2;
                                                                            chatMessageCell.linkPreviewHeight += lineCount2;
                                                                        }
                                                                    }
                                                                }
                                                                webFile2 = webFile;
                                                                str14 = str29;
                                                                i92 = chatMessageCell.documentAttachType;
                                                                if (i92 != 5 || i92 == 3 || i92 == 1) {
                                                                    messageObject6 = messageObject8;
                                                                    z29 = true;
                                                                } else {
                                                                    if (chatMessageCell.currentPhotoObject != null || webFile2 != null || i92 == 8 || i92 == 9) {
                                                                        if (tLRPC$Photo3 == null || z33) {
                                                                            if (str14 != null) {
                                                                                if (!str14.equals("photo") && ((!str14.equals("document") || chatMessageCell.documentAttachType == 6) && !str14.equals("gif"))) {
                                                                                    int i162 = chatMessageCell.documentAttachType;
                                                                                    if (i162 != 4) {
                                                                                    }
                                                                                    z34 = true;
                                                                                    chatMessageCell.drawImageButton = z34;
                                                                                    i95 = chatMessageCell.linkPreviewHeight;
                                                                                    if (i95 != 0) {
                                                                                        chatMessageCell.linkPreviewHeight = i95 + AndroidUtilities.dp(2.0f);
                                                                                        chatMessageCell.totalHeight += AndroidUtilities.dp(2.0f);
                                                                                    }
                                                                                    if (chatMessageCell.imageBackgroundSideColor != 0) {
                                                                                        dp9 = AndroidUtilities.dp(208.0f);
                                                                                    } else {
                                                                                        TLRPC$PhotoSize tLRPC$PhotoSize24 = chatMessageCell.currentPhotoObject;
                                                                                        if (!(tLRPC$PhotoSize24 instanceof TLRPC$TL_photoSizeEmpty) || (i104 = tLRPC$PhotoSize24.w) == 0) {
                                                                                            int i163 = chatMessageCell.documentAttachType;
                                                                                            if (i163 == 6 || i163 == 8 || i163 == 9) {
                                                                                                if (AndroidUtilities.isTablet()) {
                                                                                                    i103 = AndroidUtilities.getMinTabletSide();
                                                                                                } else {
                                                                                                    i103 = getParentWidth();
                                                                                                }
                                                                                                dp9 = (int) (i103 * 0.5f);
                                                                                            } else if (i163 == 7) {
                                                                                                dp9 = AndroidUtilities.roundMessageSize;
                                                                                                chatMessageCell.photoImage.setAllowDecodeSingleFrame(true);
                                                                                            }
                                                                                        } else {
                                                                                            dp9 = i104;
                                                                                        }
                                                                                    }
                                                                                    if (chatMessageCell.hasInvoicePreview && dp9 < (i102 = messageObject8.textWidth)) {
                                                                                        dp9 = AndroidUtilities.dp(22.0f) + i102;
                                                                                    }
                                                                                    int max8 = Math.max(max, (dp9 - (chatMessageCell.hasInvoicePreview ? AndroidUtilities.dp(12.0f) : 0)) + dp11);
                                                                                    tLRPC$PhotoSize7 = chatMessageCell.currentPhotoObject;
                                                                                    if (tLRPC$PhotoSize7 != null) {
                                                                                        tLRPC$PhotoSize7.size = -1;
                                                                                        TLRPC$PhotoSize tLRPC$PhotoSize25 = chatMessageCell.currentPhotoObjectThumb;
                                                                                        if (tLRPC$PhotoSize25 != null) {
                                                                                            tLRPC$PhotoSize25.size = -1;
                                                                                        }
                                                                                    } else if (webFile2 != null) {
                                                                                        webFile2.size = -1;
                                                                                    }
                                                                                    if (chatMessageCell.imageBackgroundSideColor != 0) {
                                                                                        chatMessageCell.imageBackgroundSideWidth = max8 - AndroidUtilities.dp(13.0f);
                                                                                    }
                                                                                    if (!z33 || chatMessageCell.documentAttachType == 7) {
                                                                                        i96 = dp9;
                                                                                    } else if (chatMessageCell.hasGamePreview || chatMessageCell.hasInvoicePreview) {
                                                                                        if (chatMessageCell.hasInvoicePreview) {
                                                                                            i98 = 360;
                                                                                            int size5 = webFile2.attributes.size();
                                                                                            int i164 = 0;
                                                                                            while (true) {
                                                                                                if (i164 >= size5) {
                                                                                                    i99 = 640;
                                                                                                    break;
                                                                                                }
                                                                                                TLRPC$DocumentAttribute tLRPC$DocumentAttribute6 = webFile2.attributes.get(i164);
                                                                                                if (tLRPC$DocumentAttribute6 instanceof TLRPC$TL_documentAttributeImageSize) {
                                                                                                    i99 = tLRPC$DocumentAttribute6.w;
                                                                                                    i98 = tLRPC$DocumentAttribute6.h;
                                                                                                    break;
                                                                                                }
                                                                                                i164++;
                                                                                            }
                                                                                        } else {
                                                                                            i99 = 640;
                                                                                            i98 = 360;
                                                                                        }
                                                                                        float f10 = i99;
                                                                                        float dp18 = f10 / (dp9 - AndroidUtilities.dp(2.0f));
                                                                                        dp9 = (int) (i98 / dp18);
                                                                                        i96 = (int) (f10 / dp18);
                                                                                    } else {
                                                                                        if (chatMessageCell.drawInstantViewType == 7) {
                                                                                            i101 = 560;
                                                                                            i100 = 678;
                                                                                        } else {
                                                                                            TLRPC$PhotoSize tLRPC$PhotoSize26 = chatMessageCell.currentPhotoObject;
                                                                                            if (tLRPC$PhotoSize26 != null) {
                                                                                                int i165 = tLRPC$PhotoSize26.w;
                                                                                                i100 = tLRPC$PhotoSize26.h;
                                                                                                i101 = i165;
                                                                                            } else {
                                                                                                i101 = 30;
                                                                                                i100 = 50;
                                                                                            }
                                                                                        }
                                                                                        float f11 = i101;
                                                                                        float dp19 = f11 / (dp9 - AndroidUtilities.dp(2.0f));
                                                                                        i96 = (int) (f11 / dp19);
                                                                                        dp9 = (int) (i100 / dp19);
                                                                                        if (str12 == null || (!str12.toLowerCase().equals("instagram") && chatMessageCell.documentAttachType == 0)) {
                                                                                            int i166 = AndroidUtilities.displaySize.y;
                                                                                            if (dp9 > i166 / 3) {
                                                                                                dp9 = i166 / 3;
                                                                                                if (chatMessageCell.imageBackgroundSideColor != 0) {
                                                                                                    float f12 = dp9;
                                                                                                    float dp20 = f12 / AndroidUtilities.dp(160.0f);
                                                                                                    i96 = (int) (i96 / dp20);
                                                                                                    dp9 = (int) (f12 / dp20);
                                                                                                }
                                                                                                if (dp9 < AndroidUtilities.dp(60.0f)) {
                                                                                                    dp9 = AndroidUtilities.dp(60.0f);
                                                                                                }
                                                                                            }
                                                                                        } else {
                                                                                            int i167 = AndroidUtilities.displaySize.y;
                                                                                            if (dp9 > i167 / 2) {
                                                                                                dp9 = i167 / 2;
                                                                                            }
                                                                                        }
                                                                                        if (chatMessageCell.imageBackgroundSideColor != 0) {
                                                                                        }
                                                                                        if (dp9 < AndroidUtilities.dp(60.0f)) {
                                                                                        }
                                                                                    }
                                                                                    if (chatMessageCell.isSmallImage) {
                                                                                        if (AndroidUtilities.dp(50.0f) > chatMessageCell.linkPreviewHeight) {
                                                                                            chatMessageCell.totalHeight += (AndroidUtilities.dp(50.0f) - chatMessageCell.linkPreviewHeight) + AndroidUtilities.dp(8.0f);
                                                                                            chatMessageCell.linkPreviewHeight = AndroidUtilities.dp(50.0f);
                                                                                        }
                                                                                        chatMessageCell.linkPreviewHeight -= AndroidUtilities.dp(8.0f);
                                                                                    } else {
                                                                                        chatMessageCell.totalHeight += AndroidUtilities.dp(12.0f) + dp9;
                                                                                        chatMessageCell.linkPreviewHeight += dp9;
                                                                                    }
                                                                                    if (chatMessageCell.documentAttachType != 8 && chatMessageCell.imageBackgroundSideColor == 0) {
                                                                                        chatMessageCell.photoImage.setImageCoords(0.0f, 0.0f, Math.max(max8 - AndroidUtilities.dp(13.0f), i96), dp9);
                                                                                    } else {
                                                                                        chatMessageCell.photoImage.setImageCoords(0.0f, 0.0f, i96, dp9);
                                                                                    }
                                                                                    float f13 = AndroidUtilities.density;
                                                                                    int i168 = (int) (i96 / f13);
                                                                                    int i169 = (int) (dp9 / f13);
                                                                                    Locale locale = Locale.US;
                                                                                    chatMessageCell.currentPhotoFilter = String.format(locale, "%d_%d", Integer.valueOf(i168), Integer.valueOf(i169));
                                                                                    chatMessageCell.currentPhotoFilterThumb = String.format(locale, "%d_%d_b", Integer.valueOf(i168), Integer.valueOf(i169));
                                                                                    if (webFile2 != null) {
                                                                                        i97 = max8;
                                                                                        i93 = i90;
                                                                                        str16 = str14;
                                                                                        chatMessageCell.photoImage.setImage(ImageLocation.getForWebFile(webFile2), chatMessageCell.currentPhotoFilter, null, null, webFile2.size, null, messageObject, 1);
                                                                                        messageObject6 = messageObject;
                                                                                    } else {
                                                                                        i97 = max8;
                                                                                        i93 = i90;
                                                                                        str16 = str14;
                                                                                        int i170 = chatMessageCell.documentAttachType;
                                                                                        if (i170 == 8) {
                                                                                            if (messageObject.mediaExists) {
                                                                                                messageObject10 = messageObject;
                                                                                                chatMessageCell.photoImage.setImage(ImageLocation.getForDocument(chatMessageCell.documentAttach), chatMessageCell.currentPhotoFilter, ImageLocation.getForDocument(chatMessageCell.currentPhotoObject, tLRPC$Document4), "b1", 0L, "jpg", messageObject, 1);
                                                                                            } else {
                                                                                                messageObject10 = messageObject;
                                                                                                chatMessageCell.photoImage.setImage(null, null, ImageLocation.getForDocument(chatMessageCell.currentPhotoObject, tLRPC$Document4), "b1", 0L, "jpg", messageObject, 1);
                                                                                            }
                                                                                        } else if (i170 == 9) {
                                                                                            if (tLRPC$Document4 instanceof DocumentObject.ThemeDocument) {
                                                                                                messageObject10 = messageObject;
                                                                                                chatMessageCell.photoImage.setImage(ImageLocation.getForDocument(tLRPC$Document4), chatMessageCell.currentPhotoFilter, null, "b1", 0L, "jpg", messageObject, 1);
                                                                                            } else {
                                                                                                messageObject10 = messageObject;
                                                                                                chatMessageCell.photoImage.setImage(ImageLocation.getForDocument(chatMessageCell.currentPhotoObject, tLRPC$Document4), chatMessageCell.currentPhotoFilter, ImageLocation.getForDocument(chatMessageCell.currentPhotoObjectThumb, tLRPC$Document4), "b1", chatMessageCell.currentPhotoObjectThumbStripped, 0L, "jpg", messageObject, 1);
                                                                                            }
                                                                                        } else if (i170 == 6) {
                                                                                            boolean isSticker = messageObject.isSticker();
                                                                                            if (!SharedConfig.loopStickers && messageObject.isVideoSticker()) {
                                                                                                chatMessageCell.photoImage.animatedFileDrawableRepeatMaxCount = 1;
                                                                                            }
                                                                                            if (SharedConfig.loopStickers || (isSticker && !messageObject.isVideoSticker())) {
                                                                                                chatMessageCell.photoImage.setAutoRepeat(1);
                                                                                            } else {
                                                                                                chatMessageCell.currentPhotoFilter = String.format(locale, "%d_%d_nr_messageId=%d", Integer.valueOf(i168), Integer.valueOf(i169), Integer.valueOf(messageObject.stableId));
                                                                                                ImageReceiver imageReceiver = chatMessageCell.photoImage;
                                                                                                ChatMessageCellDelegate chatMessageCellDelegate3 = chatMessageCell.delegate;
                                                                                                imageReceiver.setAutoRepeat((chatMessageCellDelegate3 == null || !chatMessageCellDelegate3.shouldRepeatSticker(messageObject)) ? 3 : 2);
                                                                                            }
                                                                                            messageObject10 = messageObject;
                                                                                            chatMessageCell.photoImage.setImage(ImageLocation.getForDocument(chatMessageCell.documentAttach), chatMessageCell.currentPhotoFilter, ImageLocation.getForDocument(chatMessageCell.currentPhotoObject, chatMessageCell.documentAttach), "b1", chatMessageCell.documentAttach.size, "webp", messageObject, 1);
                                                                                        } else {
                                                                                            if (i170 == 4) {
                                                                                                chatMessageCell.photoImage.setNeedsQualityThumb(true);
                                                                                                chatMessageCell.photoImage.setShouldGenerateQualityThumb(true);
                                                                                                if (SharedConfig.autoplayVideo && (chatMessageCell.currentMessageObject.mediaExists || (messageObject.canStreamVideo() && DownloadController.getInstance(chatMessageCell.currentAccount).canDownloadMedia(chatMessageCell.currentMessageObject)))) {
                                                                                                    chatMessageCell.photoImage.setAllowDecodeSingleFrame(true);
                                                                                                    chatMessageCell.photoImage.setAllowStartAnimation(true);
                                                                                                    chatMessageCell.photoImage.startAnimation();
                                                                                                    messageObject9 = messageObject;
                                                                                                    chatMessageCell.photoImage.setImage(ImageLocation.getForDocument(chatMessageCell.documentAttach), ImageLoader.AUTOPLAY_FILTER, ImageLocation.getForObject(chatMessageCell.currentPhotoObject, chatMessageCell.photoParentObject), chatMessageCell.currentPhotoFilter, ImageLocation.getForDocument(chatMessageCell.currentPhotoObjectThumb, chatMessageCell.documentAttach), chatMessageCell.currentPhotoFilterThumb, chatMessageCell.currentPhotoObjectThumbStripped, chatMessageCell.documentAttach.size, null, messageObject, 0);
                                                                                                    chatMessageCell.autoPlayingMedia = true;
                                                                                                } else {
                                                                                                    messageObject9 = messageObject;
                                                                                                    if (chatMessageCell.currentPhotoObjectThumb != null || chatMessageCell.currentPhotoObjectThumbStripped != null) {
                                                                                                        chatMessageCell.photoImage.setImage(ImageLocation.getForObject(chatMessageCell.currentPhotoObject, chatMessageCell.photoParentObject), chatMessageCell.currentPhotoFilter, ImageLocation.getForObject(chatMessageCell.currentPhotoObjectThumb, chatMessageCell.photoParentObject), chatMessageCell.currentPhotoFilterThumb, chatMessageCell.currentPhotoObjectThumbStripped, 0L, null, messageObject, 0);
                                                                                                    } else {
                                                                                                        ImageReceiver imageReceiver2 = chatMessageCell.photoImage;
                                                                                                        ImageLocation forObject2 = ImageLocation.getForObject(chatMessageCell.currentPhotoObject, chatMessageCell.photoParentObject);
                                                                                                        TLRPC$PhotoSize tLRPC$PhotoSize27 = chatMessageCell.currentPhotoObject;
                                                                                                        imageReceiver2.setImage(null, null, forObject2, ((tLRPC$PhotoSize27 instanceof TLRPC$TL_photoStrippedSize) || "s".equals(tLRPC$PhotoSize27.type)) ? chatMessageCell.currentPhotoFilterThumb : chatMessageCell.currentPhotoFilter, chatMessageCell.currentPhotoObjectThumbStripped, 0L, null, messageObject, 0);
                                                                                                    }
                                                                                                }
                                                                                                messageObject6 = messageObject9;
                                                                                            } else {
                                                                                                messageObject6 = messageObject;
                                                                                                if (i170 == 2 || i170 == 7) {
                                                                                                    chatMessageCell.photoImage.setAllowDecodeSingleFrame(true);
                                                                                                    if (MessageObject.isRoundVideoDocument(tLRPC$Document4)) {
                                                                                                        chatMessageCell.photoImage.setRoundRadius(AndroidUtilities.roundMessageSize / 2);
                                                                                                        z36 = DownloadController.getInstance(chatMessageCell.currentAccount).canDownloadMedia(chatMessageCell.currentMessageObject);
                                                                                                        z29 = false;
                                                                                                    } else if (MessageObject.isGifDocument(tLRPC$Document4, messageObject.hasValidGroupId())) {
                                                                                                        z36 = DownloadController.getInstance(chatMessageCell.currentAccount).canDownloadMedia(chatMessageCell.currentMessageObject);
                                                                                                        z29 = true;
                                                                                                    } else {
                                                                                                        z29 = true;
                                                                                                        z36 = false;
                                                                                                    }
                                                                                                    TLRPC$PhotoSize tLRPC$PhotoSize28 = chatMessageCell.currentPhotoObject;
                                                                                                    String str30 = ((tLRPC$PhotoSize28 instanceof TLRPC$TL_photoStrippedSize) || "s".equals(tLRPC$PhotoSize28.type)) ? chatMessageCell.currentPhotoFilterThumb : chatMessageCell.currentPhotoFilter;
                                                                                                    if (messageObject6.mediaExists || z36) {
                                                                                                        chatMessageCell.autoPlayingMedia = true;
                                                                                                        TLRPC$VideoSize documentVideoThumb = MessageObject.getDocumentVideoThumb(tLRPC$Document4);
                                                                                                        if (!messageObject6.mediaExists && documentVideoThumb != null && (chatMessageCell.currentPhotoObject == null || chatMessageCell.currentPhotoObjectThumb == null)) {
                                                                                                            ImageReceiver imageReceiver3 = chatMessageCell.photoImage;
                                                                                                            ImageLocation forDocument = ImageLocation.getForDocument(tLRPC$Document4);
                                                                                                            String str31 = tLRPC$Document4.size < 32768 ? null : ImageLoader.AUTOPLAY_FILTER;
                                                                                                            ImageLocation forDocument2 = ImageLocation.getForDocument(documentVideoThumb, chatMessageCell.documentAttach);
                                                                                                            TLRPC$PhotoSize tLRPC$PhotoSize29 = chatMessageCell.currentPhotoObject;
                                                                                                            if (tLRPC$PhotoSize29 == null) {
                                                                                                                tLRPC$PhotoSize29 = chatMessageCell.currentPhotoObjectThumb;
                                                                                                            }
                                                                                                            imageReceiver3.setImage(forDocument, str31, forDocument2, null, ImageLocation.getForDocument(tLRPC$PhotoSize29, chatMessageCell.documentAttach), chatMessageCell.currentPhotoObject != null ? str30 : chatMessageCell.currentPhotoFilterThumb, chatMessageCell.currentPhotoObjectThumbStripped, tLRPC$Document4.size, null, messageObject, 0);
                                                                                                        } else {
                                                                                                            chatMessageCell.photoImage.setImage(ImageLocation.getForDocument(tLRPC$Document4), tLRPC$Document4.size < 32768 ? null : ImageLoader.AUTOPLAY_FILTER, ImageLocation.getForDocument(chatMessageCell.currentPhotoObject, chatMessageCell.documentAttach), str30, ImageLocation.getForDocument(chatMessageCell.currentPhotoObjectThumb, chatMessageCell.documentAttach), chatMessageCell.currentPhotoFilterThumb, chatMessageCell.currentPhotoObjectThumbStripped, tLRPC$Document4.size, null, messageObject, 0);
                                                                                                        }
                                                                                                    } else {
                                                                                                        chatMessageCell.photoImage.setImage(null, null, ImageLocation.getForDocument(chatMessageCell.currentPhotoObject, chatMessageCell.documentAttach), str30, 0L, null, chatMessageCell.currentMessageObject, 0);
                                                                                                    }
                                                                                                    chatMessageCell.drawPhotoImage = true;
                                                                                                    str17 = str16;
                                                                                                    if (str17 == null && str17.equals(MediaStreamTrack.VIDEO_TRACK_KIND) && i78 != 0) {
                                                                                                        String formatShortDuration = AndroidUtilities.formatShortDuration(i78);
                                                                                                        chatMessageCell.durationWidth = (int) Math.ceil(Theme.chat_durationPaint.measureText(formatShortDuration));
                                                                                                        chatMessageCell.videoInfoLayout = new StaticLayout(formatShortDuration, Theme.chat_durationPaint, chatMessageCell.durationWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
                                                                                                    } else if (chatMessageCell.hasGamePreview) {
                                                                                                        try {
                                                                                                            TLRPC$Message tLRPC$Message5 = messageObject6.messageOwner;
                                                                                                            j = tLRPC$Message5.via_bot_id;
                                                                                                            if (j == 0) {
                                                                                                                j = tLRPC$Message5.from_id.user_id;
                                                                                                            }
                                                                                                        } catch (Exception unused2) {
                                                                                                        }
                                                                                                        if (j != 0 && (user2 = MessagesController.getInstance(chatMessageCell.currentAccount).getUser(Long.valueOf(j))) != null && (str18 = user2.username) != null) {
                                                                                                            if (str18.equals("donate")) {
                                                                                                                z35 = false;
                                                                                                                if (z35) {
                                                                                                                    String upperCase = LocaleController.getString("AttachGame", R.string.AttachGame).toUpperCase();
                                                                                                                    chatMessageCell.durationWidth = (int) Math.ceil(Theme.chat_gamePaint.measureText(upperCase));
                                                                                                                    chatMessageCell.videoInfoLayout = new StaticLayout(upperCase, Theme.chat_gamePaint, chatMessageCell.durationWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                        z35 = true;
                                                                                                        if (z35) {
                                                                                                        }
                                                                                                    }
                                                                                                    max = i97;
                                                                                                } else {
                                                                                                    boolean z49 = messageObject6.mediaExists;
                                                                                                    String attachFileName = FileLoader.getAttachFileName(chatMessageCell.currentPhotoObject);
                                                                                                    if (chatMessageCell.hasGamePreview || z49 || DownloadController.getInstance(chatMessageCell.currentAccount).canDownloadMedia(chatMessageCell.currentMessageObject) || FileLoader.getInstance(chatMessageCell.currentAccount).isLoadingFile(attachFileName)) {
                                                                                                        chatMessageCell.photoNotSet = false;
                                                                                                        chatMessageCell.photoImage.setImage(ImageLocation.getForObject(chatMessageCell.currentPhotoObject, chatMessageCell.photoParentObject), chatMessageCell.currentPhotoFilter, ImageLocation.getForObject(chatMessageCell.currentPhotoObjectThumb, chatMessageCell.photoParentObject), chatMessageCell.currentPhotoFilterThumb, chatMessageCell.currentPhotoObjectThumbStripped, 0L, null, messageObject, 0);
                                                                                                    } else {
                                                                                                        chatMessageCell.photoNotSet = true;
                                                                                                        TLRPC$PhotoSize tLRPC$PhotoSize30 = chatMessageCell.currentPhotoObjectThumb;
                                                                                                        if (tLRPC$PhotoSize30 != null || chatMessageCell.currentPhotoObjectThumbStripped != null) {
                                                                                                            chatMessageCell.photoImage.setImage(null, null, ImageLocation.getForObject(tLRPC$PhotoSize30, chatMessageCell.photoParentObject), String.format(locale, "%d_%d_b", Integer.valueOf(i168), Integer.valueOf(i169)), chatMessageCell.currentPhotoObjectThumbStripped, 0L, null, messageObject, 0);
                                                                                                        } else {
                                                                                                            chatMessageCell.photoImage.setImageBitmap((Drawable) null);
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                            z29 = true;
                                                                                            chatMessageCell.drawPhotoImage = true;
                                                                                            str17 = str16;
                                                                                            if (str17 == null) {
                                                                                            }
                                                                                            if (chatMessageCell.hasGamePreview) {
                                                                                            }
                                                                                            max = i97;
                                                                                        }
                                                                                        messageObject6 = messageObject10;
                                                                                    }
                                                                                    z29 = true;
                                                                                    chatMessageCell.drawPhotoImage = true;
                                                                                    str17 = str16;
                                                                                    if (str17 == null) {
                                                                                    }
                                                                                    if (chatMessageCell.hasGamePreview) {
                                                                                    }
                                                                                    max = i97;
                                                                                }
                                                                            }
                                                                            z34 = false;
                                                                            chatMessageCell.drawImageButton = z34;
                                                                            i95 = chatMessageCell.linkPreviewHeight;
                                                                            if (i95 != 0) {
                                                                            }
                                                                            if (chatMessageCell.imageBackgroundSideColor != 0) {
                                                                            }
                                                                            if (chatMessageCell.hasInvoicePreview) {
                                                                                dp9 = AndroidUtilities.dp(22.0f) + i102;
                                                                            }
                                                                            int max82 = Math.max(max, (dp9 - (chatMessageCell.hasInvoicePreview ? AndroidUtilities.dp(12.0f) : 0)) + dp11);
                                                                            tLRPC$PhotoSize7 = chatMessageCell.currentPhotoObject;
                                                                            if (tLRPC$PhotoSize7 != null) {
                                                                            }
                                                                            if (chatMessageCell.imageBackgroundSideColor != 0) {
                                                                            }
                                                                            if (!z33) {
                                                                            }
                                                                            i96 = dp9;
                                                                            if (chatMessageCell.isSmallImage) {
                                                                            }
                                                                            if (chatMessageCell.documentAttachType != 8) {
                                                                            }
                                                                            chatMessageCell.photoImage.setImageCoords(0.0f, 0.0f, i96, dp9);
                                                                            float f132 = AndroidUtilities.density;
                                                                            int i1682 = (int) (i96 / f132);
                                                                            int i1692 = (int) (dp9 / f132);
                                                                            Locale locale2 = Locale.US;
                                                                            chatMessageCell.currentPhotoFilter = String.format(locale2, "%d_%d", Integer.valueOf(i1682), Integer.valueOf(i1692));
                                                                            chatMessageCell.currentPhotoFilterThumb = String.format(locale2, "%d_%d_b", Integer.valueOf(i1682), Integer.valueOf(i1692));
                                                                            if (webFile2 != null) {
                                                                            }
                                                                            z29 = true;
                                                                            chatMessageCell.drawPhotoImage = true;
                                                                            str17 = str16;
                                                                            if (str17 == null) {
                                                                            }
                                                                            if (chatMessageCell.hasGamePreview) {
                                                                            }
                                                                            max = i97;
                                                                        }
                                                                        z34 = true;
                                                                        chatMessageCell.drawImageButton = z34;
                                                                        i95 = chatMessageCell.linkPreviewHeight;
                                                                        if (i95 != 0) {
                                                                        }
                                                                        if (chatMessageCell.imageBackgroundSideColor != 0) {
                                                                        }
                                                                        if (chatMessageCell.hasInvoicePreview) {
                                                                        }
                                                                        int max822 = Math.max(max, (dp9 - (chatMessageCell.hasInvoicePreview ? AndroidUtilities.dp(12.0f) : 0)) + dp11);
                                                                        tLRPC$PhotoSize7 = chatMessageCell.currentPhotoObject;
                                                                        if (tLRPC$PhotoSize7 != null) {
                                                                        }
                                                                        if (chatMessageCell.imageBackgroundSideColor != 0) {
                                                                        }
                                                                        if (!z33) {
                                                                        }
                                                                        i96 = dp9;
                                                                        if (chatMessageCell.isSmallImage) {
                                                                        }
                                                                        if (chatMessageCell.documentAttachType != 8) {
                                                                        }
                                                                        chatMessageCell.photoImage.setImageCoords(0.0f, 0.0f, i96, dp9);
                                                                        float f1322 = AndroidUtilities.density;
                                                                        int i16822 = (int) (i96 / f1322);
                                                                        int i16922 = (int) (dp9 / f1322);
                                                                        Locale locale22 = Locale.US;
                                                                        chatMessageCell.currentPhotoFilter = String.format(locale22, "%d_%d", Integer.valueOf(i16822), Integer.valueOf(i16922));
                                                                        chatMessageCell.currentPhotoFilterThumb = String.format(locale22, "%d_%d_b", Integer.valueOf(i16822), Integer.valueOf(i16922));
                                                                        if (webFile2 != null) {
                                                                        }
                                                                        z29 = true;
                                                                        chatMessageCell.drawPhotoImage = true;
                                                                        str17 = str16;
                                                                        if (str17 == null) {
                                                                        }
                                                                        if (chatMessageCell.hasGamePreview) {
                                                                        }
                                                                        max = i97;
                                                                    } else {
                                                                        chatMessageCell.photoImage.setImageBitmap((Drawable) null);
                                                                        chatMessageCell.linkPreviewHeight -= AndroidUtilities.dp(6.0f);
                                                                        chatMessageCell.totalHeight += AndroidUtilities.dp(4.0f);
                                                                        messageObject6 = messageObject8;
                                                                        i93 = i90;
                                                                        z29 = true;
                                                                    }
                                                                    if (chatMessageCell.hasInvoicePreview) {
                                                                        TLRPC$MessageMedia tLRPC$MessageMedia5 = messageObject6.messageOwner.media;
                                                                        if ((tLRPC$MessageMedia5.flags & 4) != 0) {
                                                                            str15 = LocaleController.getString("PaymentReceipt", R.string.PaymentReceipt).toUpperCase();
                                                                        } else if (tLRPC$MessageMedia5.test) {
                                                                            str15 = LocaleController.getString("PaymentTestInvoice", R.string.PaymentTestInvoice).toUpperCase();
                                                                        } else {
                                                                            str15 = LocaleController.getString("PaymentInvoice", R.string.PaymentInvoice).toUpperCase();
                                                                        }
                                                                        LocaleController localeController = LocaleController.getInstance();
                                                                        TLRPC$MessageMedia tLRPC$MessageMedia6 = messageObject6.messageOwner.media;
                                                                        String formatCurrencyString = localeController.formatCurrencyString(tLRPC$MessageMedia6.total_amount, tLRPC$MessageMedia6.currency);
                                                                        SpannableStringBuilder spannableStringBuilder = new SpannableStringBuilder(formatCurrencyString + " " + ((Object) str15));
                                                                        spannableStringBuilder.setSpan(new TypefaceSpan(AndroidUtilities.getTypeface(AndroidUtilities.TYPEFACE_ROBOTO_MEDIUM)), 0, formatCurrencyString.length(), 33);
                                                                        chatMessageCell.durationWidth = (int) Math.ceil((double) Theme.chat_shipmentPaint.measureText(spannableStringBuilder, 0, spannableStringBuilder.length()));
                                                                        chatMessageCell.videoInfoLayout = new StaticLayout(spannableStringBuilder, Theme.chat_shipmentPaint, chatMessageCell.durationWidth + AndroidUtilities.dp(10.0f), Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
                                                                        if (!chatMessageCell.drawPhotoImage) {
                                                                            chatMessageCell.totalHeight += AndroidUtilities.dp(6.0f);
                                                                            int dp21 = chatMessageCell.timeWidth + AndroidUtilities.dp((messageObject.isOutOwner() ? 20 : 0) + 14);
                                                                            int i171 = chatMessageCell.durationWidth;
                                                                            if (i171 + dp21 > i91) {
                                                                                max = Math.max(i171, max);
                                                                                chatMessageCell.totalHeight += AndroidUtilities.dp(12.0f);
                                                                            } else {
                                                                                max = Math.max(i171 + dp21, max);
                                                                            }
                                                                        }
                                                                    }
                                                                    if (chatMessageCell.hasGamePreview && (i94 = messageObject6.textHeight) != 0) {
                                                                        chatMessageCell.linkPreviewHeight += i94 + AndroidUtilities.dp(6.0f);
                                                                        chatMessageCell.totalHeight += AndroidUtilities.dp(4.0f);
                                                                    }
                                                                    chatMessageCell.calcBackgroundWidth(i91, i93, max);
                                                                }
                                                                createInstantViewButton();
                                                            }
                                                        }
                                                        webFile3 = webFile;
                                                        str14 = str29;
                                                    }
                                                }
                                                webFile3 = webFile;
                                                str14 = str29;
                                                i91 = i132;
                                                i90 = i82;
                                            }
                                            webFile2 = webFile3;
                                            i92 = chatMessageCell.documentAttachType;
                                            if (i92 != 5) {
                                            }
                                            messageObject6 = messageObject8;
                                            z29 = true;
                                            createInstantViewButton();
                                        } else {
                                            i82 = extraTimeX;
                                            tLRPC$Document3 = tLRPC$Document2;
                                            i81 = i142;
                                            tLRPC$Photo2 = tLRPC$Photo;
                                            str12 = str11;
                                            str13 = str9;
                                            i84 = 3;
                                        }
                                        max2 = 0;
                                        if (str8 == null) {
                                        }
                                        if (charSequence3 == null) {
                                        }
                                        z32 = false;
                                        if (str13 != null) {
                                        }
                                        i89 = i88;
                                        if (!z30) {
                                        }
                                        z33 = z30;
                                        if (!z33) {
                                        }
                                        if (tLRPC$Document3 != null) {
                                        }
                                        webFile2 = webFile3;
                                        i92 = chatMessageCell.documentAttachType;
                                        if (i92 != 5) {
                                        }
                                        messageObject6 = messageObject8;
                                        z29 = true;
                                        createInstantViewButton();
                                    } else {
                                        chatMessageCell.photoImage.setImageBitmap((Drawable) null);
                                        chatMessageCell.calcBackgroundWidth(i132, extraTimeX, max);
                                        messageObject6 = messageObject;
                                        z29 = true;
                                    }
                                    z13 = z29;
                                    messageObject2 = messageObject6;
                                    r5 = 1;
                                    c = 0;
                                    f = 1.0f;
                                }
                            }
                            int max9 = Math.max(i132, messageObject.lastLineWidth) + AndroidUtilities.dp(31.0f);
                            chatMessageCell.backgroundWidth = max9;
                            chatMessageCell.backgroundWidth = Math.max(max9, chatMessageCell.timeWidth + AndroidUtilities.dp(31.0f));
                            chatMessageCell.availableTimeWidth = chatMessageCell.backgroundWidth - AndroidUtilities.dp(31.0f);
                            if (messageObject.isRoundVideo()) {
                            }
                            setMessageObjectInternal(messageObject);
                            chatMessageCell.backgroundWidth = messageObject.textWidth + (getExtraTextX() * 2) + ((!chatMessageCell.hasGamePreview || chatMessageCell.hasInvoicePreview) ? AndroidUtilities.dp(10.0f) : 0);
                            chatMessageCell.totalHeight = messageObject.textHeight + AndroidUtilities.dp(19.5f) + chatMessageCell.namesOffset;
                            reactionsLayoutInBubble4 = chatMessageCell.reactionsLayoutInBubble;
                            if (!reactionsLayoutInBubble4.isSmall) {
                            }
                            if (chatMessageCell.drawPinnedTop) {
                            }
                            max = Math.max(Math.max(Math.max(Math.max(chatMessageCell.backgroundWidth, chatMessageCell.nameWidth), chatMessageCell.forwardedNameWidth), chatMessageCell.replyNameWidth), chatMessageCell.replyTextWidth);
                            if (chatMessageCell.commentLayout != null) {
                                max = Math.max(max, chatMessageCell.totalCommentWidth);
                            }
                            if (!chatMessageCell.hasLinkPreview) {
                            }
                            if (!AndroidUtilities.isTablet()) {
                            }
                            int i1372 = i77 - i76;
                            if (chatMessageCell.drawSideButton != 0) {
                            }
                            int dp92 = AndroidUtilities.dp(48.0f);
                            int dp102 = AndroidUtilities.dp(10.0f);
                            if (!chatMessageCell.hasLinkPreview) {
                            }
                            i80 = chatMessageCell.drawInstantViewType;
                            String str292 = str10;
                            if (i80 != 11) {
                            }
                            if (!chatMessageCell.hasInvoicePreview) {
                            }
                            int i1422 = i79 - dp11;
                            messageObject7 = chatMessageCell.currentMessageObject;
                            if (messageObject7.photoThumbs == null) {
                                messageObject7.generateThumbs(true);
                            }
                            if (str11 == null) {
                            }
                            max2 = 0;
                            if (str8 == null) {
                            }
                            if (charSequence3 == null) {
                            }
                            z32 = false;
                            if (str13 != null) {
                            }
                            i89 = i88;
                            if (!z30) {
                            }
                            z33 = z30;
                            if (!z33) {
                            }
                            if (tLRPC$Document3 != null) {
                            }
                            webFile2 = webFile3;
                            i92 = chatMessageCell.documentAttachType;
                            if (i92 != 5) {
                            }
                            messageObject6 = messageObject8;
                            z29 = true;
                            createInstantViewButton();
                            z13 = z29;
                            messageObject2 = messageObject6;
                            r5 = 1;
                            c = 0;
                            f = 1.0f;
                        } else if ("telegram_background".equals(str24)) {
                            chatMessageCell.drawInstantView = true;
                            chatMessageCell.drawInstantViewType = 6;
                            try {
                                Uri parse = Uri.parse(messageObject.messageOwner.media.webpage.url);
                                chatMessageCell.imageBackgroundIntensity = Utilities.parseInt((CharSequence) parse.getQueryParameter("intensity")).intValue();
                                String queryParameter = parse.getQueryParameter("bg_color");
                                String queryParameter2 = parse.getQueryParameter("rotation");
                                if (queryParameter2 != null) {
                                    chatMessageCell.imageBackgroundGradientRotation = Utilities.parseInt((CharSequence) queryParameter2).intValue();
                                }
                                if (TextUtils.isEmpty(queryParameter)) {
                                    TLRPC$Document document2 = messageObject.getDocument();
                                    if (document2 != null && "image/png".equals(document2.mime_type)) {
                                        queryParameter = "ffffff";
                                    }
                                    if (chatMessageCell.imageBackgroundIntensity == 0.0f) {
                                        chatMessageCell.imageBackgroundIntensity = 50.0f;
                                    }
                                }
                                if (queryParameter != null) {
                                    int parseInt = Integer.parseInt(queryParameter.substring(0, 6), 16) | (-16777216);
                                    chatMessageCell.imageBackgroundColor = parseInt;
                                    if (queryParameter.length() >= 13 && AndroidUtilities.isValidWallChar(queryParameter.charAt(6))) {
                                        int parseInt2 = Integer.parseInt(queryParameter.substring(7, 13), 16) | (-16777216);
                                        chatMessageCell.imageBackgroundGradientColor1 = parseInt2;
                                        parseInt = AndroidUtilities.getAverageColor(chatMessageCell.imageBackgroundColor, parseInt2);
                                    }
                                    if (queryParameter.length() >= 20 && AndroidUtilities.isValidWallChar(queryParameter.charAt(13))) {
                                        chatMessageCell.imageBackgroundGradientColor2 = Integer.parseInt(queryParameter.substring(14, 20), 16) | (-16777216);
                                    }
                                    if (queryParameter.length() == 27 && AndroidUtilities.isValidWallChar(queryParameter.charAt(20))) {
                                        chatMessageCell.imageBackgroundGradientColor3 = Integer.parseInt(queryParameter.substring(21), 16) | (-16777216);
                                    }
                                    if (chatMessageCell.imageBackgroundIntensity < 0.0f) {
                                        chatMessageCell.imageBackgroundSideColor = -15658735;
                                    } else {
                                        chatMessageCell.imageBackgroundSideColor = AndroidUtilities.getPatternSideColor(parseInt);
                                    }
                                    chatMessageCell.photoImage.setColorFilter(new PorterDuffColorFilter(AndroidUtilities.getPatternColor(parseInt), PorterDuff.Mode.SRC_IN));
                                    chatMessageCell.photoImage.setAlpha(Math.abs(chatMessageCell.imageBackgroundIntensity) / 100.0f);
                                } else {
                                    String lastPathSegment = parse.getLastPathSegment();
                                    if (lastPathSegment != null && lastPathSegment.length() >= 6) {
                                        chatMessageCell.imageBackgroundColor = Integer.parseInt(lastPathSegment.substring(0, 6), 16) | (-16777216);
                                        if (lastPathSegment.length() >= 13 && AndroidUtilities.isValidWallChar(lastPathSegment.charAt(6))) {
                                            chatMessageCell.imageBackgroundGradientColor1 = Integer.parseInt(lastPathSegment.substring(7, 13), 16) | (-16777216);
                                        }
                                        if (lastPathSegment.length() >= 20 && AndroidUtilities.isValidWallChar(lastPathSegment.charAt(13))) {
                                            chatMessageCell.imageBackgroundGradientColor2 = Integer.parseInt(lastPathSegment.substring(14, 20), 16) | (-16777216);
                                        }
                                        if (lastPathSegment.length() == 27 && AndroidUtilities.isValidWallChar(lastPathSegment.charAt(20))) {
                                            chatMessageCell.imageBackgroundGradientColor3 = Integer.parseInt(lastPathSegment.substring(21), 16) | (-16777216);
                                        }
                                        TLRPC$TL_photoSizeEmpty tLRPC$TL_photoSizeEmpty = new TLRPC$TL_photoSizeEmpty();
                                        chatMessageCell.currentPhotoObject = tLRPC$TL_photoSizeEmpty;
                                        tLRPC$TL_photoSizeEmpty.type = "s";
                                        tLRPC$TL_photoSizeEmpty.w = AndroidUtilities.dp(180.0f);
                                        chatMessageCell.currentPhotoObject.h = AndroidUtilities.dp(150.0f);
                                        chatMessageCell.currentPhotoObject.location = new TLRPC$TL_fileLocationUnavailable();
                                    }
                                }
                            } catch (Exception unused3) {
                            }
                        }
                    } else if (str23 != null) {
                        String lowerCase = str23.toLowerCase();
                        if (lowerCase.equals("instagram") || lowerCase.equals("twitter") || "telegram_album".equals(str24)) {
                            TLRPC$WebPage tLRPC$WebPage = messageObject.messageOwner.media.webpage;
                            if ((tLRPC$WebPage.cached_page instanceof TLRPC$TL_page) && ((tLRPC$WebPage.photo instanceof TLRPC$TL_photo) || MessageObject.isVideoDocument(tLRPC$WebPage.document))) {
                                chatMessageCell.drawInstantView = false;
                                ArrayList<TLRPC$PageBlock> arrayList6 = messageObject.messageOwner.media.webpage.cached_page.blocks;
                                int i172 = 1;
                                for (int i173 = 0; i173 < arrayList6.size(); i173++) {
                                    TLRPC$PageBlock tLRPC$PageBlock = arrayList6.get(i173);
                                    if (tLRPC$PageBlock instanceof TLRPC$TL_pageBlockSlideshow) {
                                        i172 = ((TLRPC$TL_pageBlockSlideshow) tLRPC$PageBlock).items.size();
                                    } else if (tLRPC$PageBlock instanceof TLRPC$TL_pageBlockCollage) {
                                        i172 = ((TLRPC$TL_pageBlockCollage) tLRPC$PageBlock).items.size();
                                    }
                                }
                                String formatString = LocaleController.formatString("Of", R.string.Of, 1, Integer.valueOf(i172));
                                chatMessageCell.photosCountWidth = (int) Math.ceil(Theme.chat_durationPaint.measureText(formatString));
                                chatMessageCell.photosCountLayout = new StaticLayout(formatString, Theme.chat_durationPaint, chatMessageCell.photosCountWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
                                tLRPC$ThemeSettings = null;
                                z28 = true;
                                tLRPC$Document = null;
                                chatMessageCell.backgroundWidth = i132;
                                if (!chatMessageCell.hasLinkPreview) {
                                    i119 = messageObject.lastLineWidth;
                                    if (i132 - i119 >= extraTimeX) {
                                    }
                                }
                                int max92 = Math.max(i132, messageObject.lastLineWidth) + AndroidUtilities.dp(31.0f);
                                chatMessageCell.backgroundWidth = max92;
                                chatMessageCell.backgroundWidth = Math.max(max92, chatMessageCell.timeWidth + AndroidUtilities.dp(31.0f));
                                chatMessageCell.availableTimeWidth = chatMessageCell.backgroundWidth - AndroidUtilities.dp(31.0f);
                                if (messageObject.isRoundVideo()) {
                                }
                                setMessageObjectInternal(messageObject);
                                chatMessageCell.backgroundWidth = messageObject.textWidth + (getExtraTextX() * 2) + ((!chatMessageCell.hasGamePreview || chatMessageCell.hasInvoicePreview) ? AndroidUtilities.dp(10.0f) : 0);
                                chatMessageCell.totalHeight = messageObject.textHeight + AndroidUtilities.dp(19.5f) + chatMessageCell.namesOffset;
                                reactionsLayoutInBubble4 = chatMessageCell.reactionsLayoutInBubble;
                                if (!reactionsLayoutInBubble4.isSmall) {
                                }
                                if (chatMessageCell.drawPinnedTop) {
                                }
                                max = Math.max(Math.max(Math.max(Math.max(chatMessageCell.backgroundWidth, chatMessageCell.nameWidth), chatMessageCell.forwardedNameWidth), chatMessageCell.replyNameWidth), chatMessageCell.replyTextWidth);
                                if (chatMessageCell.commentLayout != null) {
                                }
                                if (!chatMessageCell.hasLinkPreview) {
                                }
                                if (!AndroidUtilities.isTablet()) {
                                }
                                int i13722 = i77 - i76;
                                if (chatMessageCell.drawSideButton != 0) {
                                }
                                int dp922 = AndroidUtilities.dp(48.0f);
                                int dp1022 = AndroidUtilities.dp(10.0f);
                                if (!chatMessageCell.hasLinkPreview) {
                                }
                                i80 = chatMessageCell.drawInstantViewType;
                                String str2922 = str10;
                                if (i80 != 11) {
                                }
                                if (!chatMessageCell.hasInvoicePreview) {
                                }
                                int i14222 = i79 - dp11;
                                messageObject7 = chatMessageCell.currentMessageObject;
                                if (messageObject7.photoThumbs == null) {
                                }
                                if (str11 == null) {
                                }
                                max2 = 0;
                                if (str8 == null) {
                                }
                                if (charSequence3 == null) {
                                }
                                z32 = false;
                                if (str13 != null) {
                                }
                                i89 = i88;
                                if (!z30) {
                                }
                                z33 = z30;
                                if (!z33) {
                                }
                                if (tLRPC$Document3 != null) {
                                }
                                webFile2 = webFile3;
                                i92 = chatMessageCell.documentAttachType;
                                if (i92 != 5) {
                                }
                                messageObject6 = messageObject8;
                                z29 = true;
                                createInstantViewButton();
                                z13 = z29;
                                messageObject2 = messageObject6;
                                r5 = 1;
                                c = 0;
                                f = 1.0f;
                            }
                        }
                    }
                    tLRPC$ThemeSettings = null;
                    z28 = false;
                    tLRPC$Document = null;
                    chatMessageCell.backgroundWidth = i132;
                    if (!chatMessageCell.hasLinkPreview) {
                    }
                    int max922 = Math.max(i132, messageObject.lastLineWidth) + AndroidUtilities.dp(31.0f);
                    chatMessageCell.backgroundWidth = max922;
                    chatMessageCell.backgroundWidth = Math.max(max922, chatMessageCell.timeWidth + AndroidUtilities.dp(31.0f));
                    chatMessageCell.availableTimeWidth = chatMessageCell.backgroundWidth - AndroidUtilities.dp(31.0f);
                    if (messageObject.isRoundVideo()) {
                    }
                    setMessageObjectInternal(messageObject);
                    chatMessageCell.backgroundWidth = messageObject.textWidth + (getExtraTextX() * 2) + ((!chatMessageCell.hasGamePreview || chatMessageCell.hasInvoicePreview) ? AndroidUtilities.dp(10.0f) : 0);
                    chatMessageCell.totalHeight = messageObject.textHeight + AndroidUtilities.dp(19.5f) + chatMessageCell.namesOffset;
                    reactionsLayoutInBubble4 = chatMessageCell.reactionsLayoutInBubble;
                    if (!reactionsLayoutInBubble4.isSmall) {
                    }
                    if (chatMessageCell.drawPinnedTop) {
                    }
                    max = Math.max(Math.max(Math.max(Math.max(chatMessageCell.backgroundWidth, chatMessageCell.nameWidth), chatMessageCell.forwardedNameWidth), chatMessageCell.replyNameWidth), chatMessageCell.replyTextWidth);
                    if (chatMessageCell.commentLayout != null) {
                    }
                    if (!chatMessageCell.hasLinkPreview) {
                    }
                    if (!AndroidUtilities.isTablet()) {
                    }
                    int i137222 = i77 - i76;
                    if (chatMessageCell.drawSideButton != 0) {
                    }
                    int dp9222 = AndroidUtilities.dp(48.0f);
                    int dp10222 = AndroidUtilities.dp(10.0f);
                    if (!chatMessageCell.hasLinkPreview) {
                    }
                    i80 = chatMessageCell.drawInstantViewType;
                    String str29222 = str10;
                    if (i80 != 11) {
                    }
                    if (!chatMessageCell.hasInvoicePreview) {
                    }
                    int i142222 = i79 - dp11;
                    messageObject7 = chatMessageCell.currentMessageObject;
                    if (messageObject7.photoThumbs == null) {
                    }
                    if (str11 == null) {
                    }
                    max2 = 0;
                    if (str8 == null) {
                    }
                    if (charSequence3 == null) {
                    }
                    z32 = false;
                    if (str13 != null) {
                    }
                    i89 = i88;
                    if (!z30) {
                    }
                    z33 = z30;
                    if (!z33) {
                    }
                    if (tLRPC$Document3 != null) {
                    }
                    webFile2 = webFile3;
                    i92 = chatMessageCell.documentAttachType;
                    if (i92 != 5) {
                    }
                    messageObject6 = messageObject8;
                    z29 = true;
                    createInstantViewButton();
                    z13 = z29;
                    messageObject2 = messageObject6;
                    r5 = 1;
                    c = 0;
                    f = 1.0f;
                } else {
                    if (i == 16) {
                        chatMessageCell.createSelectorDrawable(0);
                        chatMessageCell.drawName = false;
                        chatMessageCell.drawForwardedName = false;
                        chatMessageCell.drawPhotoImage = false;
                        if (AndroidUtilities.isTablet()) {
                            chatMessageCell.backgroundWidth = Math.min(AndroidUtilities.getMinTabletSide() - AndroidUtilities.dp(z10 ? 102.0f : 50.0f), AndroidUtilities.dp(270.0f));
                        } else {
                            chatMessageCell.backgroundWidth = Math.min(getParentWidth() - AndroidUtilities.dp(z10 ? 102.0f : 50.0f), AndroidUtilities.dp(270.0f));
                        }
                        chatMessageCell.availableTimeWidth = chatMessageCell.backgroundWidth - AndroidUtilities.dp(31.0f);
                        int maxNameWidth = getMaxNameWidth() - AndroidUtilities.dp(50.0f);
                        if (maxNameWidth < 0) {
                            maxNameWidth = AndroidUtilities.dp(10.0f);
                        }
                        String format = LocaleController.getInstance().formatterDay.format(messageObject.messageOwner.date * 1000);
                        TLRPC$TL_messageActionPhoneCall tLRPC$TL_messageActionPhoneCall = (TLRPC$TL_messageActionPhoneCall) messageObject.messageOwner.action;
                        boolean z50 = tLRPC$TL_messageActionPhoneCall.reason instanceof TLRPC$TL_phoneCallDiscardReasonMissed;
                        if (messageObject.isOutOwner()) {
                            if (z50) {
                                if (tLRPC$TL_messageActionPhoneCall.video) {
                                    str6 = LocaleController.getString("CallMessageVideoOutgoingMissed", R.string.CallMessageVideoOutgoingMissed);
                                } else {
                                    str6 = LocaleController.getString("CallMessageOutgoingMissed", R.string.CallMessageOutgoingMissed);
                                }
                            } else if (tLRPC$TL_messageActionPhoneCall.video) {
                                str6 = LocaleController.getString("CallMessageVideoOutgoing", R.string.CallMessageVideoOutgoing);
                            } else {
                                str6 = LocaleController.getString("CallMessageOutgoing", R.string.CallMessageOutgoing);
                            }
                        } else if (z50) {
                            if (tLRPC$TL_messageActionPhoneCall.video) {
                                str6 = LocaleController.getString("CallMessageVideoIncomingMissed", R.string.CallMessageVideoIncomingMissed);
                            } else {
                                str6 = LocaleController.getString("CallMessageIncomingMissed", R.string.CallMessageIncomingMissed);
                            }
                        } else if (tLRPC$TL_messageActionPhoneCall.reason instanceof TLRPC$TL_phoneCallDiscardReasonBusy) {
                            if (tLRPC$TL_messageActionPhoneCall.video) {
                                str6 = LocaleController.getString("CallMessageVideoIncomingDeclined", R.string.CallMessageVideoIncomingDeclined);
                            } else {
                                str6 = LocaleController.getString("CallMessageIncomingDeclined", R.string.CallMessageIncomingDeclined);
                            }
                        } else if (tLRPC$TL_messageActionPhoneCall.video) {
                            str6 = LocaleController.getString("CallMessageVideoIncoming", R.string.CallMessageVideoIncoming);
                        } else {
                            str6 = LocaleController.getString("CallMessageIncoming", R.string.CallMessageIncoming);
                        }
                        if (tLRPC$TL_messageActionPhoneCall.duration > 0) {
                            format = format + ", " + LocaleController.formatCallDuration(tLRPC$TL_messageActionPhoneCall.duration);
                        }
                        float f14 = maxNameWidth;
                        chatMessageCell.titleLayout = new StaticLayout(TextUtils.ellipsize(str6, Theme.chat_audioTitlePaint, f14, TextUtils.TruncateAt.END), Theme.chat_audioTitlePaint, maxNameWidth + AndroidUtilities.dp(2.0f), Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
                        chatMessageCell.docTitleLayout = new StaticLayout(TextUtils.ellipsize(format, Theme.chat_contactPhonePaint, f14, TextUtils.TruncateAt.END), Theme.chat_contactPhonePaint, maxNameWidth + AndroidUtilities.dp(2.0f), Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
                        setMessageObjectInternal(messageObject);
                        int dp22 = AndroidUtilities.dp(65.0f);
                        int i174 = chatMessageCell.namesOffset;
                        chatMessageCell.totalHeight = dp22 + i174;
                        if (chatMessageCell.drawPinnedTop) {
                            chatMessageCell.namesOffset = i174 - AndroidUtilities.dp(1.0f);
                        }
                    } else if (i == 12) {
                        chatMessageCell.drawName = (messageObject.isFromGroup() && messageObject.isSupergroup()) || (messageObject.isImportedForward() && messageObject.messageOwner.fwd_from.from_id == null);
                        chatMessageCell.drawForwardedName = !chatMessageCell.isRepliesChat;
                        chatMessageCell.drawPhotoImage = true;
                        chatMessageCell.photoImage.setRoundRadius(AndroidUtilities.dp(22.0f));
                        if (AndroidUtilities.isTablet()) {
                            chatMessageCell.backgroundWidth = Math.min(AndroidUtilities.getMinTabletSide() - AndroidUtilities.dp(z10 ? 102.0f : 50.0f), AndroidUtilities.dp(270.0f));
                        } else {
                            chatMessageCell.backgroundWidth = Math.min(getParentWidth() - AndroidUtilities.dp(z10 ? 102.0f : 50.0f), AndroidUtilities.dp(270.0f));
                        }
                        chatMessageCell.availableTimeWidth = chatMessageCell.backgroundWidth - AndroidUtilities.dp(31.0f);
                        long j2 = messageObject.messageOwner.media.user_id;
                        TLRPC$User user3 = j2 != 0 ? MessagesController.getInstance(chatMessageCell.currentAccount).getUser(Long.valueOf(j2)) : null;
                        int maxNameWidth2 = getMaxNameWidth() - AndroidUtilities.dp(80.0f);
                        if (maxNameWidth2 < 0) {
                            maxNameWidth2 = AndroidUtilities.dp(10.0f);
                        }
                        if (user3 != null) {
                            chatMessageCell.contactAvatarDrawable.setInfo(user3);
                        } else if (!TextUtils.isEmpty(messageObject.messageOwner.media.first_name) || !TextUtils.isEmpty(messageObject.messageOwner.media.last_name)) {
                            AvatarDrawable avatarDrawable = chatMessageCell.contactAvatarDrawable;
                            TLRPC$MessageMedia tLRPC$MessageMedia7 = messageObject.messageOwner.media;
                            avatarDrawable.setInfo(0L, tLRPC$MessageMedia7.first_name, tLRPC$MessageMedia7.last_name);
                        } else {
                            z27 = false;
                            chatMessageCell.photoImage.setForUserOrChat(user3, !z27 ? chatMessageCell.contactAvatarDrawable : Theme.chat_contactDrawable[messageObject.isOutOwner() ? 1 : 0], messageObject);
                            if (TextUtils.isEmpty(messageObject.vCardData)) {
                                string = messageObject.vCardData;
                                chatMessageCell.drawInstantView = true;
                                chatMessageCell.drawInstantViewType = 5;
                            } else if (user3 != null && !TextUtils.isEmpty(user3.phone)) {
                                string = PhoneFormat.getInstance().format("+" + user3.phone);
                            } else {
                                String str32 = messageObject.messageOwner.media.phone_number;
                                if (!TextUtils.isEmpty(str32)) {
                                    string = PhoneFormat.getInstance().format(str32);
                                } else {
                                    string = LocaleController.getString("NumberUnknown", R.string.NumberUnknown);
                                }
                            }
                            CharSequence charSequence5 = string;
                            TLRPC$MessageMedia tLRPC$MessageMedia8 = messageObject.messageOwner.media;
                            replace = ContactsController.formatName(tLRPC$MessageMedia8.first_name, tLRPC$MessageMedia8.last_name).replace('\n', ' ');
                            if (replace.length() == 0 && (replace = messageObject.messageOwner.media.phone_number) == null) {
                                replace = "";
                            }
                            chatMessageCell.titleLayout = new StaticLayout(TextUtils.ellipsize(replace, Theme.chat_contactNamePaint, maxNameWidth2, TextUtils.TruncateAt.END), Theme.chat_contactNamePaint, maxNameWidth2 + AndroidUtilities.dp(4.0f), Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
                            chatMessageCell.docTitleLayout = new StaticLayout(charSequence5, Theme.chat_contactPhonePaint, maxNameWidth2 + AndroidUtilities.dp(2.0f), Layout.Alignment.ALIGN_NORMAL, 1.0f, AndroidUtilities.dp(1.0f), false);
                            setMessageObjectInternal(messageObject);
                            if (!chatMessageCell.drawForwardedName && messageObject.needDrawForwarded() && ((groupedMessagePosition12 = chatMessageCell.currentPosition) == null || groupedMessagePosition12.minY == 0)) {
                                chatMessageCell.namesOffset += AndroidUtilities.dp(5.0f);
                            } else if (chatMessageCell.drawNameLayout && messageObject.getReplyMsgId() == 0) {
                                chatMessageCell.namesOffset += AndroidUtilities.dp(7.0f);
                            }
                            chatMessageCell.totalHeight = AndroidUtilities.dp(55.0f) + chatMessageCell.namesOffset + chatMessageCell.docTitleLayout.getHeight();
                            if (chatMessageCell.drawPinnedTop) {
                                chatMessageCell.namesOffset -= AndroidUtilities.dp(1.0f);
                            }
                            if (!chatMessageCell.drawInstantView) {
                                createInstantViewButton();
                            } else if (chatMessageCell.docTitleLayout.getLineCount() > 0) {
                                int dp23 = chatMessageCell.backgroundWidth - AndroidUtilities.dp(110.0f);
                                StaticLayout staticLayout10 = chatMessageCell.docTitleLayout;
                                if (dp23 - ((int) Math.ceil(staticLayout10.getLineWidth(staticLayout10.getLineCount() - 1))) < chatMessageCell.timeWidth) {
                                    chatMessageCell.totalHeight += AndroidUtilities.dp(8.0f);
                                }
                            }
                            reactionsLayoutInBubble3 = chatMessageCell.reactionsLayoutInBubble;
                            if (reactionsLayoutInBubble3.isSmall && !reactionsLayoutInBubble3.isEmpty) {
                                reactionsLayoutInBubble3.measure(chatMessageCell.backgroundWidth - AndroidUtilities.dp(32.0f), 3);
                                ReactionsLayoutInBubble reactionsLayoutInBubble7 = chatMessageCell.reactionsLayoutInBubble;
                                reactionsLayoutInBubble7.totalHeight = reactionsLayoutInBubble7.height + AndroidUtilities.dp(12.0f);
                                chatMessageCell.reactionsLayoutInBubble.positionOffsetY += -AndroidUtilities.dp(4.0f);
                                int dp24 = chatMessageCell.backgroundWidth - AndroidUtilities.dp(32.0f);
                                ReactionsLayoutInBubble reactionsLayoutInBubble8 = chatMessageCell.reactionsLayoutInBubble;
                                if (dp24 - reactionsLayoutInBubble8.lastLineX < chatMessageCell.timeWidth) {
                                    reactionsLayoutInBubble8.totalHeight += AndroidUtilities.dp(12.0f);
                                    chatMessageCell.reactionsLayoutInBubble.positionOffsetY += -AndroidUtilities.dp(12.0f);
                                }
                                chatMessageCell.totalHeight += chatMessageCell.reactionsLayoutInBubble.totalHeight;
                            }
                            messageObject2 = messageObject;
                            r5 = 1;
                            c = 0;
                            f = 1.0f;
                            z13 = false;
                        }
                        z27 = true;
                        chatMessageCell.photoImage.setForUserOrChat(user3, !z27 ? chatMessageCell.contactAvatarDrawable : Theme.chat_contactDrawable[messageObject.isOutOwner() ? 1 : 0], messageObject);
                        if (TextUtils.isEmpty(messageObject.vCardData)) {
                        }
                        CharSequence charSequence52 = string;
                        TLRPC$MessageMedia tLRPC$MessageMedia82 = messageObject.messageOwner.media;
                        replace = ContactsController.formatName(tLRPC$MessageMedia82.first_name, tLRPC$MessageMedia82.last_name).replace('\n', ' ');
                        if (replace.length() == 0) {
                            replace = "";
                        }
                        chatMessageCell.titleLayout = new StaticLayout(TextUtils.ellipsize(replace, Theme.chat_contactNamePaint, maxNameWidth2, TextUtils.TruncateAt.END), Theme.chat_contactNamePaint, maxNameWidth2 + AndroidUtilities.dp(4.0f), Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
                        chatMessageCell.docTitleLayout = new StaticLayout(charSequence52, Theme.chat_contactPhonePaint, maxNameWidth2 + AndroidUtilities.dp(2.0f), Layout.Alignment.ALIGN_NORMAL, 1.0f, AndroidUtilities.dp(1.0f), false);
                        setMessageObjectInternal(messageObject);
                        if (!chatMessageCell.drawForwardedName) {
                        }
                        if (chatMessageCell.drawNameLayout) {
                            chatMessageCell.namesOffset += AndroidUtilities.dp(7.0f);
                        }
                        chatMessageCell.totalHeight = AndroidUtilities.dp(55.0f) + chatMessageCell.namesOffset + chatMessageCell.docTitleLayout.getHeight();
                        if (chatMessageCell.drawPinnedTop) {
                        }
                        if (!chatMessageCell.drawInstantView) {
                        }
                        reactionsLayoutInBubble3 = chatMessageCell.reactionsLayoutInBubble;
                        if (reactionsLayoutInBubble3.isSmall) {
                        }
                        messageObject2 = messageObject;
                        r5 = 1;
                        c = 0;
                        f = 1.0f;
                        z13 = false;
                    } else if (i == 2) {
                        chatMessageCell.drawForwardedName = !chatMessageCell.isRepliesChat;
                        chatMessageCell.drawName = (messageObject.isFromGroup() && messageObject.isSupergroup()) || (messageObject.isImportedForward() && messageObject.messageOwner.fwd_from.from_id == null);
                        if (AndroidUtilities.isTablet()) {
                            i72 = Math.min(AndroidUtilities.getMinTabletSide() - AndroidUtilities.dp(z10 ? 102.0f : 50.0f), AndroidUtilities.dp(270.0f));
                            chatMessageCell.backgroundWidth = i72;
                        } else {
                            i72 = Math.min(getParentWidth() - AndroidUtilities.dp(z10 ? 102.0f : 50.0f), AndroidUtilities.dp(270.0f));
                            chatMessageCell.backgroundWidth = i72;
                        }
                        chatMessageCell.createDocumentLayout(chatMessageCell.backgroundWidth, messageObject);
                        setMessageObjectInternal(messageObject);
                        int dp25 = AndroidUtilities.dp(70.0f);
                        int i175 = chatMessageCell.namesOffset;
                        chatMessageCell.totalHeight = dp25 + i175;
                        if (chatMessageCell.drawPinnedTop) {
                            chatMessageCell.namesOffset = i175 - AndroidUtilities.dp(1.0f);
                        }
                        ReactionsLayoutInBubble reactionsLayoutInBubble9 = chatMessageCell.reactionsLayoutInBubble;
                        if (!reactionsLayoutInBubble9.isSmall) {
                            reactionsLayoutInBubble9.measure(i72 - AndroidUtilities.dp(24.0f), 3);
                            ReactionsLayoutInBubble reactionsLayoutInBubble10 = chatMessageCell.reactionsLayoutInBubble;
                            if (!reactionsLayoutInBubble10.isEmpty) {
                                reactionsLayoutInBubble10.totalHeight = reactionsLayoutInBubble10.height;
                                if (TextUtils.isEmpty(messageObject.caption)) {
                                    chatMessageCell.reactionsLayoutInBubble.totalHeight += AndroidUtilities.dp(12.0f);
                                } else {
                                    chatMessageCell.reactionsLayoutInBubble.totalHeight += AndroidUtilities.dp(8.0f);
                                }
                                measureTime(messageObject);
                                ReactionsLayoutInBubble reactionsLayoutInBubble11 = chatMessageCell.reactionsLayoutInBubble;
                                int i176 = reactionsLayoutInBubble11.width;
                                if (i176 > chatMessageCell.backgroundWidth) {
                                    chatMessageCell.backgroundWidth = i176;
                                }
                                if (reactionsLayoutInBubble11.lastLineX + chatMessageCell.timeWidth + AndroidUtilities.dp(24.0f) > chatMessageCell.backgroundWidth) {
                                    chatMessageCell.reactionsLayoutInBubble.totalHeight += AndroidUtilities.dp(12.0f);
                                    chatMessageCell.reactionsLayoutInBubble.positionOffsetY -= AndroidUtilities.dp(12.0f);
                                }
                                chatMessageCell.totalHeight += chatMessageCell.reactionsLayoutInBubble.totalHeight;
                            }
                        }
                    } else if (i == 14) {
                        chatMessageCell.drawName = ((messageObject.isFromGroup() && messageObject.isSupergroup()) || (messageObject.isImportedForward() && messageObject.messageOwner.fwd_from.from_id == null)) && ((groupedMessagePosition11 = chatMessageCell.currentPosition) == null || (groupedMessagePosition11.flags & 4) != 0);
                        if (AndroidUtilities.isTablet()) {
                            i71 = Math.min(AndroidUtilities.getMinTabletSide() - AndroidUtilities.dp(z10 ? 102.0f : 50.0f), AndroidUtilities.dp(270.0f));
                            chatMessageCell.backgroundWidth = i71;
                        } else {
                            i71 = Math.min(getParentWidth() - AndroidUtilities.dp(z10 ? 102.0f : 50.0f), AndroidUtilities.dp(270.0f));
                            chatMessageCell.backgroundWidth = i71;
                        }
                        chatMessageCell.createDocumentLayout(chatMessageCell.backgroundWidth, messageObject);
                        setMessageObjectInternal(messageObject);
                        chatMessageCell.totalHeight = AndroidUtilities.dp(82.0f) + chatMessageCell.namesOffset;
                        if (chatMessageCell.currentPosition != null && (groupedMessages5 = chatMessageCell.currentMessagesGroup) != null && groupedMessages5.messages.size() > 1) {
                            if ((chatMessageCell.currentPosition.flags & 4) == 0) {
                                chatMessageCell.totalHeight -= AndroidUtilities.dp(6.0f);
                                chatMessageCell.mediaOffsetY -= AndroidUtilities.dp(6.0f);
                            }
                            if ((chatMessageCell.currentPosition.flags & 8) == 0) {
                                chatMessageCell.totalHeight -= AndroidUtilities.dp(6.0f);
                            }
                        }
                        if (chatMessageCell.drawPinnedTop) {
                            chatMessageCell.namesOffset -= AndroidUtilities.dp(1.0f);
                        }
                        ReactionsLayoutInBubble reactionsLayoutInBubble12 = chatMessageCell.reactionsLayoutInBubble;
                        if (!reactionsLayoutInBubble12.isSmall) {
                            reactionsLayoutInBubble12.measure(i71 - AndroidUtilities.dp(24.0f), 3);
                            ReactionsLayoutInBubble reactionsLayoutInBubble13 = chatMessageCell.reactionsLayoutInBubble;
                            if (!reactionsLayoutInBubble13.isEmpty) {
                                reactionsLayoutInBubble13.totalHeight = reactionsLayoutInBubble13.height + AndroidUtilities.dp(12.0f);
                                measureTime(messageObject);
                                ReactionsLayoutInBubble reactionsLayoutInBubble14 = chatMessageCell.reactionsLayoutInBubble;
                                int i177 = reactionsLayoutInBubble14.width;
                                if (i177 > chatMessageCell.backgroundWidth) {
                                    chatMessageCell.backgroundWidth = i177;
                                }
                                if (reactionsLayoutInBubble14.lastLineX + chatMessageCell.timeWidth + AndroidUtilities.dp(24.0f) > chatMessageCell.backgroundWidth) {
                                    chatMessageCell.reactionsLayoutInBubble.totalHeight += AndroidUtilities.dp(12.0f);
                                    chatMessageCell.reactionsLayoutInBubble.positionOffsetY -= AndroidUtilities.dp(12.0f);
                                }
                                if (!messageObject.isRestrictedMessage && messageObject.caption != null) {
                                    chatMessageCell.reactionsLayoutInBubble.positionOffsetY += AndroidUtilities.dp(14.0f);
                                }
                                chatMessageCell.totalHeight += chatMessageCell.reactionsLayoutInBubble.totalHeight;
                            }
                        }
                    } else if (i == 17) {
                        if (chatMessageCell.timerParticles == null) {
                            chatMessageCell.timerParticles = new TimerParticles();
                        }
                        chatMessageCell.createSelectorDrawable(0);
                        chatMessageCell.drawName = true;
                        chatMessageCell.drawForwardedName = !chatMessageCell.isRepliesChat;
                        chatMessageCell.drawPhotoImage = false;
                        int min = Math.min(AndroidUtilities.dp(500.0f), messageObject.getMaxMessageTextWidth());
                        chatMessageCell.backgroundWidth = AndroidUtilities.dp(31.0f) + min;
                        TLRPC$TL_messageMediaPoll tLRPC$TL_messageMediaPoll3 = (TLRPC$TL_messageMediaPoll) messageObject.messageOwner.media;
                        chatMessageCell.timerTransitionProgress = tLRPC$TL_messageMediaPoll3.poll.close_date - ConnectionsManager.getInstance(chatMessageCell.currentAccount).getCurrentTime() < 60 ? 0.0f : 1.0f;
                        chatMessageCell.pollClosed = tLRPC$TL_messageMediaPoll3.poll.closed;
                        boolean isVoted = messageObject.isVoted();
                        chatMessageCell.pollVoted = isVoted;
                        if (isVoted) {
                            messageObject.checkedVotes.clear();
                        }
                        StaticLayout staticLayout11 = new StaticLayout(Emoji.replaceEmoji(tLRPC$TL_messageMediaPoll3.poll.question, Theme.chat_audioTitlePaint.getFontMetricsInt(), AndroidUtilities.dp(16.0f), false), Theme.chat_audioTitlePaint, (AndroidUtilities.dp(2.0f) + min) - (getExtraTextX() * 2), Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
                        chatMessageCell.titleLayout = staticLayout11;
                        int lineCount3 = staticLayout11.getLineCount();
                        int i178 = 0;
                        while (true) {
                            if (i178 >= lineCount3) {
                                f7 = 0.0f;
                                z25 = false;
                                break;
                            }
                            f7 = 0.0f;
                            if (chatMessageCell.titleLayout.getLineLeft(i178) > 0.0f) {
                                z25 = true;
                                break;
                            }
                            i178++;
                        }
                        if (chatMessageCell.pollClosed) {
                            str4 = LocaleController.getString("FinalResults", R.string.FinalResults);
                        } else {
                            TLRPC$Poll tLRPC$Poll3 = tLRPC$TL_messageMediaPoll3.poll;
                            if (tLRPC$Poll3.quiz) {
                                if (tLRPC$Poll3.public_voters) {
                                    str4 = LocaleController.getString("QuizPoll", R.string.QuizPoll);
                                } else {
                                    str4 = LocaleController.getString("AnonymousQuizPoll", R.string.AnonymousQuizPoll);
                                }
                            } else if (tLRPC$Poll3.public_voters) {
                                str4 = LocaleController.getString("PublicPoll", R.string.PublicPoll);
                            } else {
                                str4 = LocaleController.getString("AnonymousPoll", R.string.AnonymousPoll);
                            }
                        }
                        float f15 = min;
                        StaticLayout staticLayout12 = new StaticLayout(TextUtils.ellipsize(str4, Theme.chat_timePaint, f15, TextUtils.TruncateAt.END), Theme.chat_timePaint, (AndroidUtilities.dp(2.0f) + min) - (getExtraTextX() * 2), Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
                        chatMessageCell.docTitleLayout = staticLayout12;
                        if (staticLayout12.getLineCount() > 0) {
                            if (z25 && !LocaleController.isRTL) {
                                chatMessageCell.docTitleOffsetX = (int) Math.ceil(f15 - chatMessageCell.docTitleLayout.getLineWidth(0));
                            } else if (!z25 && LocaleController.isRTL) {
                                chatMessageCell.docTitleOffsetX = -((int) Math.ceil(chatMessageCell.docTitleLayout.getLineLeft(0)));
                            } else {
                                chatMessageCell.docTitleOffsetX = 0;
                            }
                        }
                        int dp26 = min - AndroidUtilities.dp(messageObject.isOutOwner() ? 28.0f : 8.0f);
                        if (!chatMessageCell.isBot) {
                            TLRPC$Poll tLRPC$Poll4 = tLRPC$TL_messageMediaPoll3.poll;
                            TextPaint textPaint = (tLRPC$Poll4.public_voters || tLRPC$Poll4.multiple_choice) ? Theme.chat_locationAddressPaint : Theme.chat_livePaint;
                            if (tLRPC$Poll4.quiz) {
                                int i179 = tLRPC$TL_messageMediaPoll3.results.total_voters;
                                charSequence2 = TextUtils.ellipsize(i179 == 0 ? LocaleController.getString("NoVotesQuiz", R.string.NoVotesQuiz) : LocaleController.formatPluralString("Answer", i179, new Object[0]), textPaint, dp26, TextUtils.TruncateAt.END);
                            } else {
                                int i180 = tLRPC$TL_messageMediaPoll3.results.total_voters;
                                charSequence2 = TextUtils.ellipsize(i180 == 0 ? LocaleController.getString("NoVotes", R.string.NoVotes) : LocaleController.formatPluralString("Vote", i180, new Object[0]), textPaint, dp26, TextUtils.TruncateAt.END);
                            }
                            StaticLayout staticLayout13 = new StaticLayout(charSequence2, textPaint, dp26, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
                            chatMessageCell.infoLayout = staticLayout13;
                            TLRPC$Poll tLRPC$Poll5 = tLRPC$TL_messageMediaPoll3.poll;
                            if (!tLRPC$Poll5.public_voters && !tLRPC$Poll5.multiple_choice) {
                                if (staticLayout13.getLineCount() > 0) {
                                    i70 = 0;
                                    d2 = -chatMessageCell.infoLayout.getLineLeft(0);
                                } else {
                                    i70 = 0;
                                    d2 = 0.0d;
                                }
                                chatMessageCell.infoX = (int) Math.ceil(d2);
                                chatMessageCell.availableTimeWidth = (int) ((f15 - chatMessageCell.infoLayout.getLineWidth(i70)) - AndroidUtilities.dp(16.0f));
                            } else {
                                double dp27 = chatMessageCell.backgroundWidth - AndroidUtilities.dp(28.0f);
                                double ceil9 = Math.ceil(chatMessageCell.infoLayout.getLineWidth(0));
                                Double.isNaN(dp27);
                                double lineLeft = chatMessageCell.infoLayout.getLineLeft(0);
                                Double.isNaN(lineLeft);
                                chatMessageCell.infoX = (int) (((dp27 - ceil9) / 2.0d) - lineLeft);
                                chatMessageCell.availableTimeWidth = min;
                            }
                        }
                        measureTime(messageObject);
                        TLRPC$Poll tLRPC$Poll6 = tLRPC$TL_messageMediaPoll3.poll;
                        chatMessageCell.lastPoll = tLRPC$Poll6;
                        TLRPC$PollResults tLRPC$PollResults3 = tLRPC$TL_messageMediaPoll3.results;
                        chatMessageCell.lastPollResults = tLRPC$PollResults3.results;
                        int i181 = tLRPC$PollResults3.total_voters;
                        chatMessageCell.lastPollResultsVoters = i181;
                        if ((tLRPC$Poll6.multiple_choice && !chatMessageCell.pollVoted && !chatMessageCell.pollClosed) || (!chatMessageCell.isBot && (((z26 = tLRPC$Poll6.public_voters) && chatMessageCell.pollVoted) || (chatMessageCell.pollClosed && tLRPC$PollResults3 != null && i181 != 0 && z26)))) {
                            chatMessageCell.drawInstantView = true;
                            chatMessageCell.drawInstantViewType = 8;
                            createInstantViewButton();
                        }
                        if (tLRPC$TL_messageMediaPoll3.poll.multiple_choice) {
                            createPollUI();
                        }
                        if (tLRPC$TL_messageMediaPoll3.results != null) {
                            createPollUI();
                            int size6 = tLRPC$TL_messageMediaPoll3.results.recent_voters.size();
                            int i182 = 0;
                            while (true) {
                                ImageReceiver[] imageReceiverArr3 = chatMessageCell.pollAvatarImages;
                                if (i182 >= imageReceiverArr3.length) {
                                    break;
                                }
                                if (!chatMessageCell.isBot && i182 < size6) {
                                    imageReceiverArr3[i182].setImageCoords(f7, f7, AndroidUtilities.dp(16.0f), AndroidUtilities.dp(16.0f));
                                    Long l = tLRPC$TL_messageMediaPoll3.results.recent_voters.get(i182);
                                    TLRPC$User user4 = MessagesController.getInstance(chatMessageCell.currentAccount).getUser(l);
                                    if (user4 != null) {
                                        chatMessageCell.pollAvatarDrawables[i182].setInfo(user4);
                                        chatMessageCell.pollAvatarImages[i182].setForUserOrChat(user4, chatMessageCell.pollAvatarDrawables[i182]);
                                    } else {
                                        chatMessageCell.pollAvatarDrawables[i182].setInfo(l.longValue(), "", "");
                                    }
                                    chatMessageCell.pollAvatarImagesVisible[i182] = true;
                                } else if (!chatMessageCell.pollUnvoteInProgress || size6 != 0) {
                                    imageReceiverArr3[i182].setImageBitmap((Drawable) null);
                                    chatMessageCell.pollAvatarImagesVisible[i182] = false;
                                }
                                i182++;
                            }
                        } else if (chatMessageCell.pollAvatarImages != null) {
                            int i183 = 0;
                            while (true) {
                                ImageReceiver[] imageReceiverArr4 = chatMessageCell.pollAvatarImages;
                                if (i183 >= imageReceiverArr4.length) {
                                    break;
                                }
                                imageReceiverArr4[i183].setImageBitmap((Drawable) null);
                                chatMessageCell.pollAvatarImagesVisible[i183] = false;
                                i183++;
                            }
                        }
                        if (!chatMessageCell.animatePollAnswer && chatMessageCell.pollVoteInProgress && chatMessageCell.vibrateOnPollVote) {
                            chatMessageCell.performHapticFeedback(3, 2);
                        }
                        boolean z51 = chatMessageCell.attachedToWindow && (chatMessageCell.pollVoteInProgress || chatMessageCell.pollUnvoteInProgress);
                        chatMessageCell.animatePollAnswer = z51;
                        chatMessageCell.animatePollAnswerAlpha = z51;
                        ArrayList arrayList7 = new ArrayList();
                        if (!chatMessageCell.pollButtons.isEmpty()) {
                            arrayList2 = new ArrayList(chatMessageCell.pollButtons);
                            chatMessageCell.pollButtons.clear();
                            if (!chatMessageCell.animatePollAnswer) {
                                chatMessageCell.animatePollAnswer = chatMessageCell.attachedToWindow && (chatMessageCell.pollVoted || chatMessageCell.pollClosed);
                            }
                            float f16 = chatMessageCell.pollAnimationProgress;
                            if (f16 > f7 && f16 < 1.0f) {
                                int size7 = arrayList2.size();
                                for (int i184 = 0; i184 < size7; i184++) {
                                    PollButton pollButton2 = (PollButton) arrayList2.get(i184);
                                    pollButton2.percent = (int) Math.ceil(pollButton2.prevPercent + ((pollButton2.percent - pollButton2.prevPercent) * chatMessageCell.pollAnimationProgress));
                                    pollButton2.percentProgress = pollButton2.prevPercentProgress + ((pollButton2.percentProgress - pollButton2.prevPercentProgress) * chatMessageCell.pollAnimationProgress);
                                }
                            }
                        } else {
                            arrayList2 = null;
                        }
                        chatMessageCell.pollAnimationProgress = chatMessageCell.animatePollAnswer ? 0.0f : 1.0f;
                        if (!chatMessageCell.animatePollAnswerAlpha) {
                            chatMessageCell.pollVoteInProgress = false;
                            chatMessageCell.pollVoteInProgressNum = -1;
                            bArr = SendMessagesHelper.getInstance(chatMessageCell.currentAccount).isSendingVote(chatMessageCell.currentMessageObject);
                        } else {
                            bArr = null;
                        }
                        StaticLayout staticLayout14 = chatMessageCell.titleLayout;
                        int height = staticLayout14 != null ? staticLayout14.getHeight() : 0;
                        int i185 = 100;
                        int size8 = tLRPC$TL_messageMediaPoll3.poll.answers.size();
                        int i186 = 0;
                        int i187 = 0;
                        int i188 = 0;
                        boolean z52 = false;
                        while (i187 < size8) {
                            PollButton pollButton3 = new PollButton();
                            pollButton3.answer = tLRPC$TL_messageMediaPoll3.poll.answers.get(i187);
                            int i189 = size8;
                            int i190 = i187;
                            pollButton3.title = new StaticLayout(Emoji.replaceEmoji(pollButton3.answer.text, Theme.chat_audioPerformerPaint.getFontMetricsInt(), AndroidUtilities.dp(15.0f), false), Theme.chat_audioPerformerPaint, min - AndroidUtilities.dp(33.0f), Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
                            pollButton3.y = AndroidUtilities.dp(52.0f) + height;
                            pollButton3.height = pollButton3.title.getHeight();
                            chatMessageCell.pollButtons.add(pollButton3);
                            arrayList7.add(pollButton3);
                            height += pollButton3.height + AndroidUtilities.dp(26.0f);
                            if (!tLRPC$TL_messageMediaPoll3.results.results.isEmpty()) {
                                int size9 = tLRPC$TL_messageMediaPoll3.results.results.size();
                                int i191 = 0;
                                while (true) {
                                    if (i191 >= size9) {
                                        break;
                                    }
                                    TLRPC$TL_pollAnswerVoters tLRPC$TL_pollAnswerVoters2 = tLRPC$TL_messageMediaPoll3.results.results.get(i191);
                                    if (Arrays.equals(pollButton3.answer.option, tLRPC$TL_pollAnswerVoters2.option)) {
                                        pollButton3.chosen = tLRPC$TL_pollAnswerVoters2.chosen;
                                        pollButton3.count = tLRPC$TL_pollAnswerVoters2.voters;
                                        pollButton3.correct = tLRPC$TL_pollAnswerVoters2.correct;
                                        if ((chatMessageCell.pollVoted || chatMessageCell.pollClosed) && (i69 = tLRPC$TL_messageMediaPoll3.results.total_voters) > 0) {
                                            pollButton3.decimal = (tLRPC$TL_pollAnswerVoters2.voters / i69) * 100.0f;
                                            pollButton3.percent = (int) pollButton3.decimal;
                                            PollButton.access$2424(pollButton3, pollButton3.percent);
                                        } else {
                                            pollButton3.percent = 0;
                                            pollButton3.decimal = 0.0f;
                                        }
                                        if (i186 == 0) {
                                            i186 = pollButton3.percent;
                                        } else if (pollButton3.percent != 0 && i186 != pollButton3.percent) {
                                            z52 = true;
                                        }
                                        i185 -= pollButton3.percent;
                                        i188 = Math.max(pollButton3.percent, i188);
                                    } else {
                                        i191++;
                                    }
                                }
                            }
                            if (arrayList2 != null) {
                                int size10 = arrayList2.size();
                                int i192 = 0;
                                while (true) {
                                    if (i192 >= size10) {
                                        break;
                                    }
                                    PollButton pollButton4 = (PollButton) arrayList2.get(i192);
                                    if (Arrays.equals(pollButton3.answer.option, pollButton4.answer.option)) {
                                        pollButton3.prevPercent = pollButton4.percent;
                                        pollButton3.prevPercentProgress = pollButton4.percentProgress;
                                        pollButton3.prevChosen = pollButton4.chosen;
                                        break;
                                    }
                                    i192++;
                                }
                            }
                            if (bArr == null || pollButton3.answer.option.length <= 0 || Arrays.binarySearch(bArr, pollButton3.answer.option[0]) < 0) {
                                i68 = i190;
                            } else {
                                i68 = i190;
                                chatMessageCell.pollVoteInProgressNum = i68;
                                chatMessageCell.pollVoteInProgress = true;
                                chatMessageCell.vibrateOnPollVote = true;
                                bArr = null;
                            }
                            if (chatMessageCell.currentMessageObject.checkedVotes.contains(pollButton3.answer)) {
                                chatMessageCell.pollCheckBox[i68].setChecked(true, false);
                            } else {
                                chatMessageCell.pollCheckBox[i68].setChecked(false, false);
                            }
                            i187 = i68 + 1;
                            size8 = i189;
                        }
                        if (z52 && i185 != 0) {
                            Collections.sort(arrayList7, ChatMessageCell$$ExternalSyntheticLambda7.INSTANCE);
                            int min2 = Math.min(i185, arrayList7.size());
                            for (int i193 = 0; i193 < min2; i193++) {
                                PollButton.access$1712((PollButton) arrayList7.get(i193), 1);
                            }
                        }
                        int dp28 = chatMessageCell.backgroundWidth - AndroidUtilities.dp(76.0f);
                        int size11 = chatMessageCell.pollButtons.size();
                        for (int i194 = 0; i194 < size11; i194++) {
                            chatMessageCell.pollButtons.get(i194).percentProgress = Math.max(AndroidUtilities.dp(5.0f) / dp28, i188 != 0 ? pollButton.percent / i188 : 0.0f);
                        }
                        setMessageObjectInternal(messageObject);
                        if (chatMessageCell.isBot && !chatMessageCell.drawInstantView) {
                            height -= AndroidUtilities.dp(10.0f);
                        } else {
                            TLRPC$Poll tLRPC$Poll7 = tLRPC$TL_messageMediaPoll3.poll;
                            if (tLRPC$Poll7.public_voters || tLRPC$Poll7.multiple_choice) {
                                height += AndroidUtilities.dp(13.0f);
                            }
                        }
                        int dp29 = AndroidUtilities.dp(73.0f);
                        int i195 = chatMessageCell.namesOffset;
                        chatMessageCell.totalHeight = dp29 + i195 + height;
                        if (chatMessageCell.drawPinnedTop) {
                            chatMessageCell.namesOffset = i195 - AndroidUtilities.dp(1.0f);
                        }
                        chatMessageCell.instantTextNewLine = false;
                        TLRPC$Poll tLRPC$Poll8 = tLRPC$TL_messageMediaPoll3.poll;
                        if (tLRPC$Poll8.public_voters || tLRPC$Poll8.multiple_choice) {
                            int i196 = 0;
                            int i197 = 0;
                            for (int i198 = 3; i197 < i198; i198 = 3) {
                                if (i197 == 0) {
                                    str5 = LocaleController.getString("PollViewResults", R.string.PollViewResults);
                                } else if (i197 == 1) {
                                    str5 = LocaleController.getString("PollSubmitVotes", R.string.PollSubmitVotes);
                                } else {
                                    str5 = LocaleController.getString("NoVotes", R.string.NoVotes);
                                }
                                i196 = Math.max(i196, (int) Math.ceil(Theme.chat_instantViewPaint.measureText(str5)));
                                i197++;
                            }
                            int dp30 = chatMessageCell.timeWidth + (messageObject.isOutOwner() ? AndroidUtilities.dp(20.0f) : 0) + getExtraTimeX();
                            ReactionsLayoutInBubble reactionsLayoutInBubble15 = chatMessageCell.reactionsLayoutInBubble;
                            if (!reactionsLayoutInBubble15.isSmall && reactionsLayoutInBubble15.isEmpty && dp30 >= ((chatMessageCell.backgroundWidth - AndroidUtilities.dp(76.0f)) - i196) / 2) {
                                chatMessageCell.totalHeight += AndroidUtilities.dp(18.0f);
                                chatMessageCell.instantTextNewLine = true;
                            }
                        }
                        ReactionsLayoutInBubble reactionsLayoutInBubble16 = chatMessageCell.reactionsLayoutInBubble;
                        if (!reactionsLayoutInBubble16.isSmall && !reactionsLayoutInBubble16.isEmpty) {
                            reactionsLayoutInBubble16.measure(min, 3);
                            chatMessageCell.totalHeight += chatMessageCell.reactionsLayoutInBubble.height + AndroidUtilities.dp(12.0f);
                            if (chatMessageCell.timeWidth + (messageObject.isOutOwner() ? AndroidUtilities.dp(20.0f) : 0) + getExtraTimeX() >= (chatMessageCell.backgroundWidth - AndroidUtilities.dp(24.0f)) - chatMessageCell.reactionsLayoutInBubble.lastLineX) {
                                chatMessageCell.totalHeight += AndroidUtilities.dp(16.0f);
                                chatMessageCell.reactionsLayoutInBubble.positionOffsetY -= AndroidUtilities.dp(16.0f);
                            }
                        }
                    } else {
                        chatMessageCell.drawForwardedName = messageObject.messageOwner.fwd_from != null && (!messageObject.isAnyKindOfSticker() || !messageObject.isDice());
                        if (!messageObject.isAnyKindOfSticker() && messageObject.type != 5) {
                            chatMessageCell.drawName = ((messageObject.isFromGroup() && messageObject.isSupergroup()) || (messageObject.isImportedForward() && messageObject.messageOwner.fwd_from.from_id == null)) && ((groupedMessagePosition10 = chatMessageCell.currentPosition) == null || (groupedMessagePosition10.flags & 4) != 0);
                        }
                        int i199 = messageObject.type;
                        chatMessageCell.mediaBackground = i199 != 9;
                        chatMessageCell.drawImageButton = true;
                        chatMessageCell.drawPhotoImage = true;
                        if (messageObject.gifState != 2.0f && !SharedConfig.autoplayGifs) {
                            if (i199 == 8 || i199 == 5) {
                                messageObject.gifState = 1.0f;
                            }
                        }
                        chatMessageCell.photoImage.setAllowDecodeSingleFrame(true);
                        if (messageObject.isVideo()) {
                            chatMessageCell.photoImage.setAllowStartAnimation(true);
                        } else if (messageObject.isRoundVideo()) {
                            MessageObject playingMessageObject = MediaController.getInstance().getPlayingMessageObject();
                            chatMessageCell.photoImage.setAllowStartAnimation(playingMessageObject == null || !playingMessageObject.isRoundVideo());
                        } else {
                            chatMessageCell.photoImage.setAllowStartAnimation(messageObject.gifState == 0.0f);
                        }
                        chatMessageCell.photoImage.setForcePreview(messageObject.needDrawBluredPreview());
                        int i200 = messageObject.type;
                        if (i200 == 9) {
                            if (AndroidUtilities.isTablet()) {
                                chatMessageCell.backgroundWidth = Math.min(AndroidUtilities.getMinTabletSide() - AndroidUtilities.dp(z10 ? 102.0f : 50.0f), AndroidUtilities.dp(300.0f));
                            } else {
                                chatMessageCell.backgroundWidth = Math.min(getParentWidth() - AndroidUtilities.dp(z10 ? 102.0f : 50.0f), AndroidUtilities.dp(300.0f));
                            }
                            if (checkNeedDrawShareButton(messageObject)) {
                                chatMessageCell.backgroundWidth -= AndroidUtilities.dp(20.0f);
                            }
                            int dp31 = chatMessageCell.backgroundWidth - AndroidUtilities.dp(138.0f);
                            chatMessageCell.createDocumentLayout(dp31, messageObject);
                            int dp32 = ((chatMessageCell.backgroundWidth - AndroidUtilities.dp(31.0f)) - AndroidUtilities.dp(10.0f)) - (getExtraTextX() * 2);
                            if (!messageObject.isRestrictedMessage && !TextUtils.isEmpty(messageObject.caption)) {
                                try {
                                    CharSequence charSequence6 = messageObject.caption;
                                    chatMessageCell.currentCaption = charSequence6;
                                    if (Build.VERSION.SDK_INT >= 24) {
                                        chatMessageCell.captionLayout = StaticLayout.Builder.obtain(charSequence6, 0, charSequence6.length(), Theme.chat_msgTextPaint, dp32).setBreakStrategy(1).setHyphenationFrequency(0).setAlignment(Layout.Alignment.ALIGN_NORMAL).build();
                                    } else {
                                        chatMessageCell.captionLayout = new StaticLayout(messageObject.caption, Theme.chat_msgTextPaint, dp32, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
                                    }
                                    updateCaptionSpoilers();
                                    updateAnimatedEmojis();
                                } catch (Exception e27) {
                                    FileLog.e(e27);
                                }
                            }
                            StaticLayout staticLayout15 = chatMessageCell.docTitleLayout;
                            if (staticLayout15 != null) {
                                int lineCount4 = staticLayout15.getLineCount();
                                int i201 = 0;
                                for (int i202 = 0; i202 < lineCount4; i202++) {
                                    i201 = Math.max(i201, ((int) Math.ceil(chatMessageCell.docTitleLayout.getLineWidth(i202) + chatMessageCell.docTitleLayout.getLineLeft(i202))) + AndroidUtilities.dp((chatMessageCell.drawPhotoImage ? 52 : 22) + 86));
                                }
                                i67 = i201;
                            } else {
                                i67 = 0;
                            }
                            StaticLayout staticLayout16 = chatMessageCell.infoLayout;
                            if (staticLayout16 != null) {
                                int lineCount5 = staticLayout16.getLineCount();
                                int i203 = i67;
                                for (int i204 = 0; i204 < lineCount5; i204++) {
                                    i203 = Math.max(i203, chatMessageCell.infoWidth + AndroidUtilities.dp((chatMessageCell.drawPhotoImage ? 52 : 22) + 86));
                                }
                                i67 = i203;
                            }
                            StaticLayout staticLayout17 = chatMessageCell.captionLayout;
                            if (staticLayout17 != null) {
                                int lineCount6 = staticLayout17.getLineCount();
                                int i205 = i67;
                                for (int i206 = 0; i206 < lineCount6; i206++) {
                                    int ceil10 = ((int) Math.ceil(Math.min(dp32, chatMessageCell.captionLayout.getLineWidth(i206) + chatMessageCell.captionLayout.getLineLeft(i206)))) + AndroidUtilities.dp(31.0f);
                                    if (ceil10 > i205) {
                                        i205 = ceil10;
                                    }
                                }
                                i67 = i205;
                            }
                            ReactionsLayoutInBubble reactionsLayoutInBubble17 = chatMessageCell.reactionsLayoutInBubble;
                            if (!reactionsLayoutInBubble17.isSmall) {
                                reactionsLayoutInBubble17.measure(dp32, 3);
                                ReactionsLayoutInBubble reactionsLayoutInBubble18 = chatMessageCell.reactionsLayoutInBubble;
                                if (!reactionsLayoutInBubble18.isEmpty && reactionsLayoutInBubble18.width + AndroidUtilities.dp(31.0f) > i67) {
                                    i67 = chatMessageCell.reactionsLayoutInBubble.width + AndroidUtilities.dp(31.0f);
                                }
                            }
                            if (i67 > 0 && chatMessageCell.currentPosition == null) {
                                chatMessageCell.backgroundWidth = i67;
                                dp31 = i67 - AndroidUtilities.dp(31.0f);
                            }
                            chatMessageCell.availableTimeWidth = dp31;
                            if (chatMessageCell.drawPhotoImage) {
                                i13 = AndroidUtilities.dp(86.0f);
                                i12 = AndroidUtilities.dp(86.0f);
                                chatMessageCell.availableTimeWidth -= i13;
                            } else {
                                i13 = AndroidUtilities.dp(56.0f);
                                i12 = AndroidUtilities.dp(56.0f);
                                StaticLayout staticLayout18 = chatMessageCell.docTitleLayout;
                                if (staticLayout18 != null && staticLayout18.getLineCount() > 1) {
                                    i12 += (chatMessageCell.docTitleLayout.getLineCount() - 1) * AndroidUtilities.dp(16.0f);
                                }
                                if (TextUtils.isEmpty(messageObject.caption) && (staticLayout2 = chatMessageCell.infoLayout) != null) {
                                    int lineCount7 = staticLayout2.getLineCount();
                                    measureTime(messageObject);
                                    int dp33 = (chatMessageCell.backgroundWidth - AndroidUtilities.dp(122.0f)) - chatMessageCell.infoWidth;
                                    ReactionsLayoutInBubble reactionsLayoutInBubble19 = chatMessageCell.reactionsLayoutInBubble;
                                    if (reactionsLayoutInBubble19.isSmall || reactionsLayoutInBubble19.isEmpty) {
                                        if (dp33 < chatMessageCell.timeWidth) {
                                            dp5 = AndroidUtilities.dp(12.0f);
                                        } else if (lineCount7 == 1) {
                                            dp5 = AndroidUtilities.dp(4.0f);
                                        }
                                        i12 += dp5;
                                    }
                                }
                            }
                            ReactionsLayoutInBubble reactionsLayoutInBubble20 = chatMessageCell.reactionsLayoutInBubble;
                            if (reactionsLayoutInBubble20.isSmall || reactionsLayoutInBubble20.isEmpty) {
                                i10 = 0;
                            } else {
                                if (!chatMessageCell.drawPhotoImage) {
                                    reactionsLayoutInBubble20.positionOffsetY += AndroidUtilities.dp(2.0f);
                                }
                                if (chatMessageCell.captionLayout != null && chatMessageCell.currentPosition != null && (groupedMessages4 = chatMessageCell.currentMessagesGroup) != null && groupedMessages4.isDocuments) {
                                    chatMessageCell.reactionsLayoutInBubble.positionOffsetY += AndroidUtilities.dp(10.0f);
                                } else if (!chatMessageCell.drawPhotoImage && !TextUtils.isEmpty(messageObject.caption) && (((staticLayout = chatMessageCell.docTitleLayout) != null && staticLayout.getLineCount() > 1) || chatMessageCell.currentMessageObject.hasValidReplyMessageObject())) {
                                    chatMessageCell.reactionsLayoutInBubble.positionOffsetY += AndroidUtilities.dp(10.0f);
                                } else if (!chatMessageCell.drawPhotoImage && !TextUtils.isEmpty(messageObject.caption) && !chatMessageCell.currentMessageObject.isOutOwner()) {
                                    chatMessageCell.reactionsLayoutInBubble.positionOffsetY += AndroidUtilities.dp(10.0f);
                                }
                                ReactionsLayoutInBubble reactionsLayoutInBubble21 = chatMessageCell.reactionsLayoutInBubble;
                                reactionsLayoutInBubble21.totalHeight = reactionsLayoutInBubble21.height + AndroidUtilities.dp(8.0f);
                                measureTime(messageObject);
                                if (chatMessageCell.drawPhotoImage && chatMessageCell.captionLayout == null) {
                                    chatMessageCell.reactionsLayoutInBubble.totalHeight += AndroidUtilities.dp(8.0f);
                                }
                                if ((chatMessageCell.backgroundWidth - chatMessageCell.reactionsLayoutInBubble.lastLineX) - AndroidUtilities.dp(24.0f) < chatMessageCell.timeWidth) {
                                    chatMessageCell.reactionsLayoutInBubble.totalHeight += AndroidUtilities.dp(12.0f);
                                    chatMessageCell.reactionsLayoutInBubble.positionOffsetY -= AndroidUtilities.dp(12.0f);
                                }
                                i10 = 0 + chatMessageCell.reactionsLayoutInBubble.totalHeight;
                            }
                            messageObject2 = messageObject;
                            c4 = 0;
                            i64 = 1;
                            f = 1.0f;
                        } else if (i200 == 4) {
                            TLRPC$GeoPoint tLRPC$GeoPoint = messageObject.messageOwner.media.geo;
                            double d5 = tLRPC$GeoPoint.lat;
                            double d6 = tLRPC$GeoPoint._long;
                            if (((int) messageObject.getDialogId()) == 0 && (i66 = SharedConfig.mapPreviewType) != 0) {
                                if (i66 == 1) {
                                    i57 = 4;
                                } else if (i66 == 3) {
                                    i57 = 1;
                                }
                                tLRPC$MessageMedia = messageObject.messageOwner.media;
                                if (!(tLRPC$MessageMedia instanceof TLRPC$TL_messageMediaGeoLive)) {
                                    if (AndroidUtilities.isTablet()) {
                                        chatMessageCell.backgroundWidth = Math.min(AndroidUtilities.getMinTabletSide() - AndroidUtilities.dp(z10 ? 102.0f : 50.0f), AndroidUtilities.dp(289.0f));
                                    } else {
                                        chatMessageCell.backgroundWidth = Math.min(getParentWidth() - AndroidUtilities.dp(z10 ? 102.0f : 50.0f), AndroidUtilities.dp(289.0f));
                                    }
                                    chatMessageCell.backgroundWidth -= AndroidUtilities.dp(4.0f);
                                    if (checkNeedDrawShareButton(messageObject)) {
                                        chatMessageCell.backgroundWidth -= AndroidUtilities.dp(20.0f);
                                    }
                                    int dp34 = chatMessageCell.backgroundWidth - AndroidUtilities.dp(37.0f);
                                    chatMessageCell.availableTimeWidth = dp34;
                                    int dp35 = dp34 - AndroidUtilities.dp(54.0f);
                                    int dp36 = chatMessageCell.backgroundWidth - AndroidUtilities.dp(17.0f);
                                    int dp37 = AndroidUtilities.dp(195.0f);
                                    double d7 = 268435456;
                                    Double.isNaN(d7);
                                    double d8 = d7 / 3.141592653589793d;
                                    double d9 = (d5 * 3.141592653589793d) / 180.0d;
                                    Double.isNaN(d7);
                                    double round = Math.round(d7 - ((Math.log((Math.sin(d9) + 1.0d) / (1.0d - Math.sin(d9))) * d8) / 2.0d)) - (AndroidUtilities.dp(10.3f) << 6);
                                    Double.isNaN(round);
                                    Double.isNaN(d7);
                                    double atan = ((1.5707963267948966d - (Math.atan(Math.exp((round - d7) / d8)) * 2.0d)) * 180.0d) / 3.141592653589793d;
                                    chatMessageCell = this;
                                    int i207 = chatMessageCell.currentAccount;
                                    float f17 = dp36;
                                    float f18 = AndroidUtilities.density;
                                    float f19 = dp37;
                                    chatMessageCell.currentUrl = AndroidUtilities.formapMapUrl(i207, atan, d6, (int) (f17 / f18), (int) (f19 / f18), false, 15, i57);
                                    chatMessageCell.lastWebFile = chatMessageCell.currentWebFile;
                                    long j3 = tLRPC$GeoPoint.access_hash;
                                    float f20 = AndroidUtilities.density;
                                    chatMessageCell.currentWebFile = WebFile.createWithGeoPoint(atan, d6, j3, (int) (f17 / f20), (int) (f19 / f20), 15, Math.min(2, (int) Math.ceil(f20)));
                                    boolean isCurrentLocationTimeExpired = isCurrentLocationTimeExpired(messageObject);
                                    chatMessageCell.locationExpired = isCurrentLocationTimeExpired;
                                    if (!isCurrentLocationTimeExpired) {
                                        chatMessageCell.photoImage.setCrossfadeWithOldImage(true);
                                        chatMessageCell.mediaBackground = false;
                                        i65 = AndroidUtilities.dp(56.0f);
                                        AndroidUtilities.runOnUIThread(chatMessageCell.invalidateRunnable, 1000L);
                                        chatMessageCell.scheduledInvalidate = true;
                                    } else {
                                        chatMessageCell.backgroundWidth -= AndroidUtilities.dp(9.0f);
                                        i65 = 0;
                                    }
                                    chatMessageCell.docTitleLayout = new StaticLayout(TextUtils.ellipsize(LocaleController.getString("AttachLiveLocation", R.string.AttachLiveLocation), Theme.chat_locationTitlePaint, dp35, TextUtils.TruncateAt.END), Theme.chat_locationTitlePaint, dp35 + AndroidUtilities.dp(2.0f), Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
                                    updateCurrentUserAndChat();
                                    TLRPC$User tLRPC$User2 = chatMessageCell.currentUser;
                                    if (tLRPC$User2 != null) {
                                        chatMessageCell.contactAvatarDrawable.setInfo(tLRPC$User2);
                                        chatMessageCell.locationImageReceiver.setForUserOrChat(chatMessageCell.currentUser, chatMessageCell.contactAvatarDrawable);
                                    } else {
                                        TLRPC$Chat tLRPC$Chat2 = chatMessageCell.currentChat;
                                        if (tLRPC$Chat2 != null) {
                                            TLRPC$ChatPhoto tLRPC$ChatPhoto = tLRPC$Chat2.photo;
                                            if (tLRPC$ChatPhoto != null) {
                                                chatMessageCell.currentPhoto = tLRPC$ChatPhoto.photo_small;
                                            }
                                            chatMessageCell.contactAvatarDrawable.setInfo(tLRPC$Chat2);
                                            chatMessageCell.locationImageReceiver.setForUserOrChat(chatMessageCell.currentChat, chatMessageCell.contactAvatarDrawable);
                                        } else {
                                            chatMessageCell.locationImageReceiver.setImage(null, null, chatMessageCell.contactAvatarDrawable, null, null, 0);
                                        }
                                    }
                                    int i208 = messageObject.messageOwner.edit_date;
                                    chatMessageCell.infoLayout = new StaticLayout(TextUtils.ellipsize(LocaleController.formatLocationUpdateDate(i208 != 0 ? i208 : tLRPC$Message.date), Theme.chat_locationAddressPaint, AndroidUtilities.dp(2.0f) + dp35, TextUtils.TruncateAt.END), Theme.chat_locationAddressPaint, dp35, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
                                    i13 = dp36;
                                    i59 = dp37;
                                    i58 = i65;
                                    i60 = 2;
                                } else if (!TextUtils.isEmpty(tLRPC$MessageMedia.title)) {
                                    if (AndroidUtilities.isTablet()) {
                                        chatMessageCell.backgroundWidth = Math.min(AndroidUtilities.getMinTabletSide() - AndroidUtilities.dp(z10 ? 102.0f : 50.0f), AndroidUtilities.dp(289.0f));
                                    } else {
                                        chatMessageCell.backgroundWidth = Math.min(getParentWidth() - AndroidUtilities.dp(z10 ? 102.0f : 50.0f), AndroidUtilities.dp(289.0f));
                                    }
                                    chatMessageCell.backgroundWidth -= AndroidUtilities.dp(4.0f);
                                    if (checkNeedDrawShareButton(messageObject)) {
                                        chatMessageCell.backgroundWidth -= AndroidUtilities.dp(20.0f);
                                    }
                                    int dp38 = chatMessageCell.backgroundWidth - AndroidUtilities.dp(34.0f);
                                    chatMessageCell.availableTimeWidth = dp38;
                                    int dp39 = chatMessageCell.backgroundWidth - AndroidUtilities.dp(17.0f);
                                    int dp40 = AndroidUtilities.dp(195.0f);
                                    chatMessageCell.mediaBackground = false;
                                    int i209 = chatMessageCell.currentAccount;
                                    float f21 = dp39;
                                    float f22 = AndroidUtilities.density;
                                    float f23 = dp40;
                                    chatMessageCell.currentUrl = AndroidUtilities.formapMapUrl(i209, d5, d6, (int) (f21 / f22), (int) (f23 / f22), true, 15, i57);
                                    float f24 = AndroidUtilities.density;
                                    chatMessageCell.currentWebFile = WebFile.createWithGeoPoint(tLRPC$GeoPoint, (int) (f21 / f24), (int) (f23 / f24), 15, Math.min(2, (int) Math.ceil(f24)));
                                    chatMessageCell.docTitleLayout = StaticLayoutEx.createStaticLayout(messageObject.messageOwner.media.title, Theme.chat_locationTitlePaint, dp38 + AndroidUtilities.dp(4.0f), Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false, TextUtils.TruncateAt.END, dp38, 1);
                                    int dp41 = 0 + AndroidUtilities.dp(50.0f);
                                    chatMessageCell.docTitleLayout.getLineCount();
                                    if (!TextUtils.isEmpty(messageObject.messageOwner.media.address)) {
                                        chatMessageCell.infoLayout = StaticLayoutEx.createStaticLayout(messageObject.messageOwner.media.address, Theme.chat_locationAddressPaint, dp38, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false, TextUtils.TruncateAt.END, dp38, 1);
                                        measureTime(messageObject);
                                        int ceil11 = (chatMessageCell.backgroundWidth - ((int) Math.ceil(chatMessageCell.infoLayout.getLineWidth(0)))) - AndroidUtilities.dp(24.0f);
                                        boolean z53 = chatMessageCell.infoLayout.getLineLeft(0) > 0.0f;
                                        if (!z53) {
                                        }
                                        dp41 += AndroidUtilities.dp(z53 ? 10.0f : 8.0f);
                                    } else {
                                        chatMessageCell.infoLayout = null;
                                    }
                                    i13 = dp39;
                                    i59 = dp40;
                                    i58 = dp41;
                                    i60 = 2;
                                } else {
                                    if (AndroidUtilities.isTablet()) {
                                        chatMessageCell.backgroundWidth = Math.min(AndroidUtilities.getMinTabletSide() - AndroidUtilities.dp(z10 ? 102.0f : 50.0f), AndroidUtilities.dp(289.0f));
                                    } else {
                                        chatMessageCell.backgroundWidth = Math.min(getParentWidth() - AndroidUtilities.dp(z10 ? 102.0f : 50.0f), AndroidUtilities.dp(289.0f));
                                    }
                                    chatMessageCell.backgroundWidth -= AndroidUtilities.dp(4.0f);
                                    if (checkNeedDrawShareButton(messageObject)) {
                                        chatMessageCell.backgroundWidth -= AndroidUtilities.dp(20.0f);
                                    }
                                    chatMessageCell.availableTimeWidth = chatMessageCell.backgroundWidth - AndroidUtilities.dp(34.0f);
                                    int dp42 = chatMessageCell.backgroundWidth - AndroidUtilities.dp(8.0f);
                                    int dp43 = AndroidUtilities.dp(195.0f);
                                    int i210 = chatMessageCell.currentAccount;
                                    float f25 = dp42;
                                    float f26 = AndroidUtilities.density;
                                    float f27 = dp43;
                                    chatMessageCell.currentUrl = AndroidUtilities.formapMapUrl(i210, d5, d6, (int) (f25 / f26), (int) (f27 / f26), true, 15, i57);
                                    float f28 = AndroidUtilities.density;
                                    i60 = 2;
                                    chatMessageCell.currentWebFile = WebFile.createWithGeoPoint(tLRPC$GeoPoint, (int) (f25 / f28), (int) (f27 / f28), 15, Math.min(2, (int) Math.ceil(f28)));
                                    i13 = dp42;
                                    i59 = dp43;
                                    i58 = 0;
                                }
                                if (((int) messageObject.getDialogId()) != 0) {
                                    int i211 = SharedConfig.mapPreviewType;
                                    if (i211 == 0) {
                                        chatMessageCell.currentMapProvider = i60;
                                    } else if (i211 == 1) {
                                        chatMessageCell.currentMapProvider = 1;
                                    } else if (i211 == 3) {
                                        chatMessageCell.currentMapProvider = 1;
                                        i61 = -1;
                                    } else {
                                        i61 = -1;
                                        chatMessageCell.currentMapProvider = -1;
                                    }
                                    i61 = -1;
                                } else {
                                    i61 = -1;
                                    chatMessageCell.currentMapProvider = MessagesController.getInstance(messageObject.currentAccount).mapProvider;
                                }
                                i62 = chatMessageCell.currentMapProvider;
                                if (i62 != i61) {
                                    chatMessageCell.photoImage.setImage(null, null, null, null, messageObject, 0);
                                    messageObject5 = messageObject;
                                    i63 = 3;
                                    f = 1.0f;
                                } else if (i62 == 2) {
                                    if (chatMessageCell.currentWebFile != null) {
                                        WebFile webFile4 = chatMessageCell.lastWebFile;
                                        messageObject5 = messageObject;
                                        f = 1.0f;
                                        i63 = 3;
                                        chatMessageCell.photoImage.setImage(ImageLocation.getForWebFile(chatMessageCell.currentWebFile), (String) null, webFile4 == null ? null : ImageLocation.getForWebFile(webFile4), (String) null, (Drawable) null, messageObject, 0);
                                    } else {
                                        messageObject5 = messageObject;
                                        i63 = 3;
                                        f = 1.0f;
                                    }
                                } else {
                                    messageObject5 = messageObject;
                                    i63 = 3;
                                    f = 1.0f;
                                    if (i62 == 3 || i62 == 4) {
                                        ImageLoader.getInstance().addTestWebFile(chatMessageCell.currentUrl, chatMessageCell.currentWebFile);
                                        chatMessageCell.addedForTest = true;
                                    }
                                    String str33 = chatMessageCell.currentUrl;
                                    if (str33 != null) {
                                        chatMessageCell.photoImage.setImage(str33, null, null, null, 0L);
                                    }
                                }
                                reactionsLayoutInBubble2 = chatMessageCell.reactionsLayoutInBubble;
                                if (!reactionsLayoutInBubble2.isSmall && !reactionsLayoutInBubble2.isEmpty) {
                                    reactionsLayoutInBubble2.measure(chatMessageCell.backgroundWidth - AndroidUtilities.dp(16.0f), i63);
                                    ReactionsLayoutInBubble reactionsLayoutInBubble22 = chatMessageCell.reactionsLayoutInBubble;
                                    reactionsLayoutInBubble22.totalHeight = reactionsLayoutInBubble22.height + AndroidUtilities.dp(14.0f);
                                    measureTime(messageObject);
                                    if (chatMessageCell.reactionsLayoutInBubble.lastLineX + chatMessageCell.timeWidth + AndroidUtilities.dp(24.0f) > chatMessageCell.backgroundWidth) {
                                        chatMessageCell.reactionsLayoutInBubble.totalHeight += AndroidUtilities.dp(12.0f);
                                        chatMessageCell.reactionsLayoutInBubble.positionOffsetY -= AndroidUtilities.dp(12.0f);
                                    }
                                    i58 += chatMessageCell.reactionsLayoutInBubble.totalHeight;
                                }
                                messageObject2 = messageObject5;
                                i12 = i59;
                                i10 = i58;
                                c4 = 0;
                                i64 = 1;
                            }
                            i57 = -1;
                            tLRPC$MessageMedia = messageObject.messageOwner.media;
                            if (!(tLRPC$MessageMedia instanceof TLRPC$TL_messageMediaGeoLive)) {
                            }
                            if (((int) messageObject.getDialogId()) != 0) {
                            }
                            i62 = chatMessageCell.currentMapProvider;
                            if (i62 != i61) {
                            }
                            reactionsLayoutInBubble2 = chatMessageCell.reactionsLayoutInBubble;
                            if (!reactionsLayoutInBubble2.isSmall) {
                                reactionsLayoutInBubble2.measure(chatMessageCell.backgroundWidth - AndroidUtilities.dp(16.0f), i63);
                                ReactionsLayoutInBubble reactionsLayoutInBubble222 = chatMessageCell.reactionsLayoutInBubble;
                                reactionsLayoutInBubble222.totalHeight = reactionsLayoutInBubble222.height + AndroidUtilities.dp(14.0f);
                                measureTime(messageObject);
                                if (chatMessageCell.reactionsLayoutInBubble.lastLineX + chatMessageCell.timeWidth + AndroidUtilities.dp(24.0f) > chatMessageCell.backgroundWidth) {
                                }
                                i58 += chatMessageCell.reactionsLayoutInBubble.totalHeight;
                            }
                            messageObject2 = messageObject5;
                            i12 = i59;
                            i10 = i58;
                            c4 = 0;
                            i64 = 1;
                        } else {
                            f = 1.0f;
                            if (messageObject.isAnyKindOfSticker()) {
                                chatMessageCell.drawBackground = false;
                                boolean z54 = messageObject.type == 13;
                                TLRPC$Document document3 = messageObject.getDocument();
                                if (document3 != null) {
                                    for (int i212 = 0; i212 < document3.attributes.size(); i212++) {
                                        TLRPC$DocumentAttribute tLRPC$DocumentAttribute7 = document3.attributes.get(i212);
                                        if (tLRPC$DocumentAttribute7 instanceof TLRPC$TL_documentAttributeImageSize) {
                                            i53 = tLRPC$DocumentAttribute7.w;
                                            i52 = tLRPC$DocumentAttribute7.h;
                                            break;
                                        } else if (tLRPC$DocumentAttribute7 instanceof TLRPC$TL_documentAttributeVideo) {
                                            i53 = tLRPC$DocumentAttribute7.w;
                                            i52 = tLRPC$DocumentAttribute7.h;
                                            break;
                                        }
                                    }
                                }
                                i53 = 0;
                                i52 = 0;
                                if ((messageObject.isAnimatedSticker() || messageObject.isVideoSticker()) && i53 == 0 && i52 == 0) {
                                    i53 = 512;
                                    i52 = 512;
                                }
                                if (AndroidUtilities.isTablet()) {
                                    f6 = AndroidUtilities.getMinTabletSide();
                                    f5 = 0.4f;
                                } else {
                                    f6 = Math.min(getParentWidth(), AndroidUtilities.displaySize.y);
                                    f5 = 0.5f;
                                }
                                int i213 = (int) (f6 * f5);
                                float f29 = i213;
                                if (messageObject.isAnimatedEmoji() || messageObject.isDice()) {
                                    float f30 = MessagesController.getInstance(chatMessageCell.currentAccount).animatedEmojisZoom;
                                    i55 = (int) ((i53 / 512.0f) * i213 * f30);
                                    i54 = (int) ((i52 / 512.0f) * f29 * f30);
                                } else {
                                    if (i53 == 0) {
                                        i52 = (int) f29;
                                        i53 = AndroidUtilities.dp(100.0f) + i52;
                                    }
                                    float f31 = i213;
                                    int i214 = (int) (i52 * (f31 / i53));
                                    float f32 = i214;
                                    if (f32 > f29) {
                                        int i215 = (int) f29;
                                        i55 = (int) (f31 * (f29 / f32));
                                        i54 = i215;
                                    } else {
                                        i54 = i214;
                                        i55 = i213;
                                    }
                                }
                                float f33 = AndroidUtilities.density;
                                int i216 = (int) (i55 / f33);
                                int i217 = (int) (i54 / f33);
                                ChatMessageCellDelegate chatMessageCellDelegate4 = chatMessageCell.delegate;
                                boolean z55 = chatMessageCellDelegate4 != null && chatMessageCellDelegate4.shouldRepeatSticker(messageObject);
                                BitmapDrawable bitmapDrawable5 = chatMessageCell.currentMessageObject.strippedThumb;
                                if (bitmapDrawable5 == null) {
                                    chatMessageCell.currentPhotoObjectThumb = FileLoader.getClosestPhotoSizeWithSize(messageObject.photoThumbs, 40);
                                } else {
                                    chatMessageCell.currentPhotoObjectThumbStripped = bitmapDrawable5;
                                }
                                chatMessageCell.photoParentObject = messageObject.photoThumbsObject;
                                if (messageObject.isDice()) {
                                    String format2 = String.format(Locale.US, "%d_%d_dice_%s_%s", Integer.valueOf(i216), Integer.valueOf(i217), messageObject.getDiceEmoji(), messageObject.toString());
                                    chatMessageCell.photoImage.setAutoRepeat(2);
                                    String diceEmoji = chatMessageCell.currentMessageObject.getDiceEmoji();
                                    TLRPC$TL_messages_stickerSet stickerSetByEmojiOrName = MediaDataController.getInstance(chatMessageCell.currentAccount).getStickerSetByEmojiOrName(diceEmoji);
                                    if (stickerSetByEmojiOrName == null || stickerSetByEmojiOrName.documents.size() <= 0 || chatMessageCell.currentMessageObject.getDiceValue() > 0) {
                                        drawable2 = null;
                                    } else {
                                        TLRPC$Document tLRPC$Document9 = stickerSetByEmojiOrName.documents.get(0);
                                        if ("🎰".equals(diceEmoji)) {
                                            drawable3 = null;
                                            chatMessageCell.currentPhotoObjectThumb = null;
                                        } else {
                                            drawable3 = null;
                                            chatMessageCell.currentPhotoObjectThumb = FileLoader.getClosestPhotoSizeWithSize(tLRPC$Document9.thumbs, 40);
                                        }
                                        chatMessageCell.photoParentObject = tLRPC$Document9;
                                        drawable2 = drawable3;
                                    }
                                    str2 = format2;
                                    drawable = drawable2;
                                    obj2 = messageObject;
                                    obj = obj2;
                                } else {
                                    if (messageObject.isAnimatedEmoji()) {
                                        if (messageObject.emojiAnimatedSticker == null && messageObject.emojiAnimatedStickerId != null) {
                                            final String format3 = String.format(Locale.US, "%d_%d_nr_messageId=%d", Integer.valueOf(i216), Integer.valueOf(i217), Integer.valueOf(messageObject.stableId));
                                            final Drawable circleThumb = DocumentObject.getCircleThumb(0.4f, "chat_serviceBackground", chatMessageCell.resourcesProvider, 0.65f);
                                            chatMessageCell.photoImage.setAutoRepeat(1);
                                            Long l2 = chatMessageCell.fetchingAnimatedEmojiDocument;
                                            if (l2 == null || l2 != messageObject.emojiAnimatedStickerId) {
                                                Long l3 = messageObject.emojiAnimatedStickerId;
                                                chatMessageCell.fetchingAnimatedEmojiDocument = l3;
                                                final long longValue = l3.longValue();
                                                obj2 = messageObject;
                                                AnimatedEmojiDrawable.getDocumentFetcher(chatMessageCell.currentAccount).fetchDocument(messageObject.emojiAnimatedStickerId.longValue(), new AnimatedEmojiDrawable.ReceivedDocument() { // from class: org.telegram.ui.Cells.ChatMessageCell$$ExternalSyntheticLambda8
                                                    @Override // org.telegram.ui.Components.AnimatedEmojiDrawable.ReceivedDocument
                                                    public final void run(TLRPC$Document tLRPC$Document10) {
                                                        ChatMessageCell.this.lambda$setMessageContent$7(messageObject, longValue, format3, circleThumb, tLRPC$Document10);
                                                    }
                                                });
                                            } else {
                                                obj2 = messageObject;
                                            }
                                            obj = obj2;
                                            str2 = format3;
                                            drawable = circleThumb;
                                        } else {
                                            obj2 = messageObject;
                                            z24 = true;
                                            String format4 = String.format(Locale.US, "%d_%d_nr_messageId=%d" + obj2.emojiAnimatedStickerColor, Integer.valueOf(i216), Integer.valueOf(i217), Integer.valueOf(obj2.stableId));
                                            if (MessageObject.isAnimatedEmoji(obj2.emojiAnimatedSticker)) {
                                                chatMessageCell.photoImage.setAutoRepeat(1);
                                            } else {
                                                chatMessageCell.photoImage.setAutoRepeat(z55 ? 2 : 3);
                                            }
                                            str2 = format4;
                                            obj = MessageObject.getInputStickerSet(obj2.emojiAnimatedSticker);
                                        }
                                    } else {
                                        obj2 = messageObject;
                                        z24 = true;
                                        if (SharedConfig.loopStickers || (z54 && !messageObject.isVideoSticker())) {
                                            str3 = String.format(Locale.US, "%d_%d", Integer.valueOf(i216), Integer.valueOf(i217));
                                            chatMessageCell.photoImage.setAutoRepeat(1);
                                        } else {
                                            str3 = String.format(Locale.US, "%d_%d_nr_messageId=%d", Integer.valueOf(i216), Integer.valueOf(i217), Integer.valueOf(obj2.stableId));
                                            chatMessageCell.photoImage.setAutoRepeat(z55 ? 2 : 3);
                                        }
                                        str2 = str3;
                                        obj = obj2;
                                    }
                                    i56 = 6;
                                    drawable = null;
                                    chatMessageCell.documentAttachType = i56;
                                    chatMessageCell.availableTimeWidth = i55 - AndroidUtilities.dp(14.0f);
                                    chatMessageCell.backgroundWidth = AndroidUtilities.dp(12.0f) + i55;
                                    chatMessageCell.photoImage.setRoundRadius(0);
                                    if (!messageObject.isOutOwner() && MessageObject.isPremiumSticker(messageObject.getDocument())) {
                                        chatMessageCell.flipImage = z24;
                                    }
                                    if (messageObject.getDocument() == null) {
                                        if (messageObject.isVideoSticker()) {
                                            if (!SharedConfig.loopStickers) {
                                                ImageReceiver imageReceiver4 = chatMessageCell.photoImage;
                                                int i218 = z24 ? 1 : 0;
                                                int i219 = z24 ? 1 : 0;
                                                int i220 = z24 ? 1 : 0;
                                                int i221 = z24 ? 1 : 0;
                                                imageReceiver4.animatedFileDrawableRepeatMaxCount = i218;
                                            }
                                            chatMessageCell.photoImage.setImage(ImageLocation.getForDocument(messageObject.getDocument()), ImageLoader.AUTOPLAY_FILTER, null, null, obj2.pathThumb, messageObject.getDocument().size, z54 ? "webp" : null, obj, 1);
                                        } else if (obj2.pathThumb != null) {
                                            chatMessageCell.photoImage.setImage(ImageLocation.getForDocument(messageObject.getDocument()), str2, obj2.pathThumb, messageObject.getDocument().size, z54 ? "webp" : null, obj, 1);
                                        } else if (obj2.attachPathExists) {
                                            chatMessageCell.photoImage.setImage(ImageLocation.getForPath(obj2.messageOwner.attachPath), str2, ImageLocation.getForObject(chatMessageCell.currentPhotoObjectThumb, chatMessageCell.photoParentObject), "b1", drawable != null ? drawable : chatMessageCell.currentPhotoObjectThumbStripped, messageObject.getDocument().size, z54 ? "webp" : null, obj, 1);
                                        } else if (messageObject.getDocument().id != 0) {
                                            chatMessageCell.photoImage.setImage(ImageLocation.getForDocument(messageObject.getDocument()), str2, ImageLocation.getForObject(chatMessageCell.currentPhotoObjectThumb, chatMessageCell.photoParentObject), "b1", drawable != null ? drawable : chatMessageCell.currentPhotoObjectThumbStripped, messageObject.getDocument().size, z54 ? "webp" : null, obj, 1);
                                        } else {
                                            chatMessageCell.photoImage.setImage(null, null, drawable, null, messageObject, 0);
                                        }
                                    } else {
                                        chatMessageCell.photoImage.setImage(null, null, drawable, null, messageObject, 0);
                                    }
                                    reactionsLayoutInBubble = chatMessageCell.reactionsLayoutInBubble;
                                    if (reactionsLayoutInBubble.isSmall) {
                                        reactionsLayoutInBubble.measure(i213, 3);
                                        ReactionsLayoutInBubble reactionsLayoutInBubble23 = chatMessageCell.reactionsLayoutInBubble;
                                        reactionsLayoutInBubble23.drawServiceShaderBackground = z24;
                                        reactionsLayoutInBubble23.totalHeight = reactionsLayoutInBubble23.height + AndroidUtilities.dp(8.0f);
                                        ReactionsLayoutInBubble reactionsLayoutInBubble24 = chatMessageCell.reactionsLayoutInBubble;
                                        i10 = 0 + reactionsLayoutInBubble24.totalHeight;
                                        reactionsLayoutInBubble24.positionOffsetY += AndroidUtilities.dp(4.0f);
                                    } else {
                                        i10 = 0;
                                    }
                                    i13 = i55;
                                    i12 = i54;
                                    messageObject2 = obj2;
                                    c4 = 0;
                                    i11 = 1;
                                    z13 = false;
                                }
                                i56 = 6;
                                z24 = true;
                                chatMessageCell.documentAttachType = i56;
                                chatMessageCell.availableTimeWidth = i55 - AndroidUtilities.dp(14.0f);
                                chatMessageCell.backgroundWidth = AndroidUtilities.dp(12.0f) + i55;
                                chatMessageCell.photoImage.setRoundRadius(0);
                                if (!messageObject.isOutOwner()) {
                                    chatMessageCell.flipImage = z24;
                                }
                                if (messageObject.getDocument() == null) {
                                }
                                reactionsLayoutInBubble = chatMessageCell.reactionsLayoutInBubble;
                                if (reactionsLayoutInBubble.isSmall) {
                                }
                                i13 = i55;
                                i12 = i54;
                                messageObject2 = obj2;
                                c4 = 0;
                                i11 = 1;
                                z13 = false;
                            } else {
                                int i222 = 1;
                                chatMessageCell.currentPhotoObject = FileLoader.getClosestPhotoSizeWithSize(messageObject.photoThumbs, AndroidUtilities.getPhotoSize());
                                chatMessageCell.photoParentObject = messageObject.photoThumbsObject;
                                if (messageObject.type == 5) {
                                    chatMessageCell.documentAttach = messageObject.getDocument();
                                    chatMessageCell.documentAttachType = 7;
                                    i17 = 8;
                                    z15 = false;
                                    i16 = 0;
                                } else {
                                    if (AndroidUtilities.isTablet()) {
                                        i16 = (int) (AndroidUtilities.getMinTabletSide() * 0.7f);
                                        i17 = 8;
                                    } else {
                                        TLRPC$PhotoSize tLRPC$PhotoSize31 = chatMessageCell.currentPhotoObject;
                                        if (tLRPC$PhotoSize31 != null) {
                                            int i223 = messageObject.type;
                                            if (i223 == 1 || i223 == 3) {
                                                i17 = 8;
                                            } else {
                                                i17 = 8;
                                            }
                                            if (tLRPC$PhotoSize31.w >= tLRPC$PhotoSize31.h) {
                                                i16 = Math.min(getParentWidth(), AndroidUtilities.displaySize.y) - AndroidUtilities.dp((checkNeedDrawShareButton(messageObject) ? 10 : 0) + 64);
                                                z15 = true;
                                            }
                                        } else {
                                            i17 = 8;
                                        }
                                        i16 = (int) (Math.min(getParentWidth(), AndroidUtilities.displaySize.y) * 0.7f);
                                    }
                                    z15 = false;
                                }
                                int dp44 = AndroidUtilities.dp(100.0f) + i16;
                                if (!z15) {
                                    if (messageObject.type != 5 && checkNeedDrawShareButton(messageObject)) {
                                        i16 -= AndroidUtilities.dp(20.0f);
                                    }
                                    if (i16 > AndroidUtilities.getPhotoSize()) {
                                        i16 = AndroidUtilities.getPhotoSize();
                                    }
                                    if (dp44 > AndroidUtilities.getPhotoSize()) {
                                        dp44 = AndroidUtilities.getPhotoSize();
                                    }
                                } else if (z10) {
                                    i16 -= AndroidUtilities.dp(52.0f);
                                }
                                int i224 = messageObject.type;
                                if (i224 == 1) {
                                    updateSecretTimeText(messageObject);
                                    chatMessageCell.currentPhotoObjectThumb = FileLoader.getClosestPhotoSizeWithSize(messageObject.photoThumbs, 40);
                                } else {
                                    if (i224 == 3 || i224 == i17) {
                                        chatMessageCell.createDocumentLayout(0, messageObject);
                                        chatMessageCell.currentPhotoObjectThumb = FileLoader.getClosestPhotoSizeWithSize(messageObject.photoThumbs, 40);
                                        updateSecretTimeText(messageObject);
                                    } else if (i224 == 5) {
                                        chatMessageCell.currentPhotoObjectThumb = FileLoader.getClosestPhotoSizeWithSize(messageObject.photoThumbs, 40);
                                    }
                                    z16 = true;
                                    bitmapDrawable = chatMessageCell.currentMessageObject.strippedThumb;
                                    if (bitmapDrawable != null) {
                                        chatMessageCell.currentPhotoObjectThumb = null;
                                        chatMessageCell.currentPhotoObjectThumbStripped = bitmapDrawable;
                                    }
                                    if (messageObject.type != 5) {
                                        if (chatMessageCell.isPlayingRound) {
                                            i19 = AndroidUtilities.roundPlayingMessageSize;
                                        } else {
                                            i19 = AndroidUtilities.roundMessageSize;
                                        }
                                        i18 = i19;
                                    } else {
                                        TLRPC$PhotoSize tLRPC$PhotoSize32 = chatMessageCell.currentPhotoObject;
                                        if (tLRPC$PhotoSize32 == null) {
                                            tLRPC$PhotoSize32 = chatMessageCell.currentPhotoObjectThumb;
                                        }
                                        if (tLRPC$PhotoSize32 != null && !(tLRPC$PhotoSize32 instanceof TLRPC$TL_photoStrippedSize)) {
                                            i50 = tLRPC$PhotoSize32.w;
                                            i51 = tLRPC$PhotoSize32.h;
                                        } else {
                                            TLRPC$Document tLRPC$Document10 = chatMessageCell.documentAttach;
                                            if (tLRPC$Document10 != null) {
                                                int size12 = tLRPC$Document10.attributes.size();
                                                int i225 = 0;
                                                int i226 = 0;
                                                for (int i227 = 0; i227 < size12; i227++) {
                                                    TLRPC$DocumentAttribute tLRPC$DocumentAttribute8 = chatMessageCell.documentAttach.attributes.get(i227);
                                                    if (tLRPC$DocumentAttribute8 instanceof TLRPC$TL_documentAttributeVideo) {
                                                        i225 = tLRPC$DocumentAttribute8.w;
                                                        i226 = tLRPC$DocumentAttribute8.h;
                                                    }
                                                }
                                                i50 = i225;
                                                i51 = i226;
                                            } else {
                                                i51 = 0;
                                                i50 = 0;
                                            }
                                        }
                                        Point messageSize = getMessageSize(i50, i51, i16, dp44);
                                        int i228 = (int) messageSize.x;
                                        i18 = (int) messageSize.y;
                                        i19 = i228;
                                    }
                                    tLRPC$PhotoSize = chatMessageCell.currentPhotoObject;
                                    if (tLRPC$PhotoSize != null && "s".equals(tLRPC$PhotoSize.type)) {
                                        chatMessageCell.currentPhotoObject = null;
                                    }
                                    tLRPC$PhotoSize2 = chatMessageCell.currentPhotoObject;
                                    if (tLRPC$PhotoSize2 != null && tLRPC$PhotoSize2 == chatMessageCell.currentPhotoObjectThumb) {
                                        if (messageObject.type != 1) {
                                            chatMessageCell.currentPhotoObjectThumb = null;
                                            chatMessageCell.currentPhotoObjectThumbStripped = null;
                                        } else {
                                            chatMessageCell.currentPhotoObject = null;
                                        }
                                    }
                                    if (z16 && !messageObject.needDrawBluredPreview() && (((tLRPC$PhotoSize5 = chatMessageCell.currentPhotoObject) == null || tLRPC$PhotoSize5 == chatMessageCell.currentPhotoObjectThumb) && ((tLRPC$PhotoSize6 = chatMessageCell.currentPhotoObjectThumb) == null || !"m".equals(tLRPC$PhotoSize6.type)))) {
                                        chatMessageCell.photoImage.setNeedsQualityThumb(true);
                                        chatMessageCell.photoImage.setShouldGenerateQualityThumb(true);
                                    }
                                    if (chatMessageCell.currentMessagesGroup == null && messageObject.caption != null) {
                                        chatMessageCell.mediaBackground = false;
                                    }
                                    if ((i19 != 0 || i18 == 0) && messageObject.type == i17 && (document = messageObject.getDocument()) != null) {
                                        for (i49 = 0; i49 < document.attributes.size(); i49++) {
                                            TLRPC$DocumentAttribute tLRPC$DocumentAttribute9 = document.attributes.get(i49);
                                            if ((tLRPC$DocumentAttribute9 instanceof TLRPC$TL_documentAttributeImageSize) || (tLRPC$DocumentAttribute9 instanceof TLRPC$TL_documentAttributeVideo)) {
                                                int i229 = tLRPC$DocumentAttribute9.w;
                                                float f34 = i16;
                                                float f35 = i229 / f34;
                                                i19 = (int) (i229 / f35);
                                                int i230 = (int) (tLRPC$DocumentAttribute9.h / f35);
                                                if (i230 > dp44) {
                                                    f3 = i230 / dp44;
                                                    f4 = i19;
                                                } else {
                                                    if (i230 < AndroidUtilities.dp(120.0f)) {
                                                        dp44 = AndroidUtilities.dp(120.0f);
                                                        f3 = tLRPC$DocumentAttribute9.h / dp44;
                                                        int i231 = tLRPC$DocumentAttribute9.w;
                                                        if (i231 / f3 < f34) {
                                                            f4 = i231;
                                                        }
                                                    } else {
                                                        dp44 = i230;
                                                    }
                                                    if (i19 != 0 || dp44 == 0) {
                                                        dp44 = AndroidUtilities.dp(150.0f);
                                                        i19 = dp44;
                                                    }
                                                    if (messageObject.type == 3 && i19 < chatMessageCell.infoWidth + AndroidUtilities.dp(40.0f)) {
                                                        i19 = chatMessageCell.infoWidth + AndroidUtilities.dp(40.0f);
                                                    }
                                                    if (chatMessageCell.commentLayout != null && chatMessageCell.drawSideButton != 3 && i19 < chatMessageCell.totalCommentWidth + AndroidUtilities.dp(10.0f)) {
                                                        i19 = chatMessageCell.totalCommentWidth + AndroidUtilities.dp(10.0f);
                                                    }
                                                    if (chatMessageCell.currentMessagesGroup == null) {
                                                        int groupPhotosWidth = getGroupPhotosWidth();
                                                        int i232 = 0;
                                                        for (int i233 = 0; i233 < chatMessageCell.currentMessagesGroup.posArray.size(); i233++) {
                                                            if (chatMessageCell.currentMessagesGroup.posArray.get(i233).minY != 0) {
                                                                break;
                                                            }
                                                            double d10 = i232;
                                                            double ceil12 = Math.ceil(((groupedMessagePosition9.pw + groupedMessagePosition9.leftSpanOffset) / 1000.0f) * groupPhotosWidth);
                                                            Double.isNaN(d10);
                                                            i232 = (int) (d10 + ceil12);
                                                        }
                                                        chatMessageCell.availableTimeWidth = i232 - AndroidUtilities.dp(35.0f);
                                                    } else {
                                                        chatMessageCell.availableTimeWidth = i16 - AndroidUtilities.dp(14.0f);
                                                    }
                                                    if (messageObject.type == 5) {
                                                        double d11 = AndroidUtilities.roundMessageSize;
                                                        double ceil13 = Math.ceil(Theme.chat_audioTimePaint.measureText("00:00"));
                                                        Double.isNaN(d11);
                                                        double d12 = d11 - ceil13;
                                                        double dp45 = AndroidUtilities.dp(46.0f);
                                                        Double.isNaN(dp45);
                                                        chatMessageCell.availableTimeWidth = (int) (d12 - dp45);
                                                    }
                                                    measureTime(messageObject);
                                                    dp = chatMessageCell.timeWidth + AndroidUtilities.dp((SharedConfig.bubbleRadius < 10 ? 22 : 18) + (!messageObject.isOutOwner() ? 20 : 0));
                                                    if (i19 < dp) {
                                                        i19 = dp;
                                                    }
                                                    if (!messageObject.isRoundVideo()) {
                                                        dp44 = Math.min(i19, dp44);
                                                        chatMessageCell.drawBackground = false;
                                                        chatMessageCell.photoImage.setRoundRadius(dp44 / 2);
                                                        i19 = dp44;
                                                        z17 = false;
                                                    } else {
                                                        if (messageObject.needDrawBluredPreview()) {
                                                            if (AndroidUtilities.isTablet()) {
                                                                i48 = AndroidUtilities.getMinTabletSide();
                                                            } else {
                                                                i48 = Math.min(getParentWidth(), AndroidUtilities.displaySize.y);
                                                            }
                                                            dp44 = (int) (i48 * 0.5f);
                                                            i19 = dp44;
                                                        }
                                                        z17 = true;
                                                    }
                                                    if (chatMessageCell.currentMessagesGroup == null) {
                                                        float max10 = Math.max(getParentWidth(), AndroidUtilities.displaySize.y) * 0.5f;
                                                        float groupPhotosWidth2 = getGroupPhotosWidth();
                                                        int ceil14 = (int) Math.ceil((chatMessageCell.currentPosition.pw / 1000.0f) * groupPhotosWidth2);
                                                        if (chatMessageCell.currentPosition.minY == 0 || ((!messageObject.isOutOwner() || (chatMessageCell.currentPosition.flags & 1) == 0) && (messageObject.isOutOwner() || (chatMessageCell.currentPosition.flags & 2) == 0))) {
                                                            f2 = groupPhotosWidth2;
                                                            z19 = z4;
                                                        } else {
                                                            int i234 = 0;
                                                            int i235 = 0;
                                                            int i236 = 0;
                                                            while (true) {
                                                                if (i236 >= chatMessageCell.currentMessagesGroup.posArray.size()) {
                                                                    f2 = groupPhotosWidth2;
                                                                    z19 = z4;
                                                                    break;
                                                                }
                                                                MessageObject.GroupedMessagePosition groupedMessagePosition21 = chatMessageCell.currentMessagesGroup.posArray.get(i236);
                                                                byte b = groupedMessagePosition21.minY;
                                                                if (b == 0) {
                                                                    z19 = z4;
                                                                    double d13 = i234;
                                                                    f2 = groupPhotosWidth2;
                                                                    double ceil15 = Math.ceil((groupedMessagePosition21.pw / 1000.0f) * groupPhotosWidth2);
                                                                    double ceil16 = groupedMessagePosition21.leftSpanOffset != 0 ? Math.ceil((i47 / 1000.0f) * f2) : 0.0d;
                                                                    Double.isNaN(d13);
                                                                    i234 = (int) (d13 + ceil15 + ceil16);
                                                                } else {
                                                                    f2 = groupPhotosWidth2;
                                                                    z19 = z4;
                                                                    byte b2 = chatMessageCell.currentPosition.minY;
                                                                    if (b == b2) {
                                                                        double d14 = i235;
                                                                        double ceil17 = Math.ceil((groupedMessagePosition21.pw / 1000.0f) * f2);
                                                                        double ceil18 = groupedMessagePosition21.leftSpanOffset != 0 ? Math.ceil((i46 / 1000.0f) * f2) : 0.0d;
                                                                        Double.isNaN(d14);
                                                                        i235 = (int) (d14 + ceil17 + ceil18);
                                                                    } else if (b > b2) {
                                                                        break;
                                                                    }
                                                                }
                                                                i236++;
                                                                z4 = z19;
                                                                groupPhotosWidth2 = f2;
                                                            }
                                                            ceil14 += i234 - i235;
                                                        }
                                                        int dp46 = ceil14 - AndroidUtilities.dp(9.0f);
                                                        if (chatMessageCell.isAvatarVisible) {
                                                            dp46 -= AndroidUtilities.dp(48.0f);
                                                        }
                                                        if (chatMessageCell.currentPosition.siblingHeights != null) {
                                                            int i237 = 0;
                                                            int i238 = 0;
                                                            while (true) {
                                                                groupedMessagePosition8 = chatMessageCell.currentPosition;
                                                                if (i238 >= groupedMessagePosition8.siblingHeights.length) {
                                                                    break;
                                                                }
                                                                i237 += (int) Math.ceil(fArr[i238] * max10);
                                                                i238++;
                                                            }
                                                            i36 = i237 + ((groupedMessagePosition8.maxY - groupedMessagePosition8.minY) * Math.round(AndroidUtilities.density * 7.0f));
                                                        } else {
                                                            i36 = (int) Math.ceil(max10 * groupedMessagePosition7.ph);
                                                        }
                                                        chatMessageCell.backgroundWidth = dp46;
                                                        int i239 = chatMessageCell.currentPosition.flags;
                                                        if ((i239 & 2) != 0 && (i239 & 1) != 0) {
                                                            dp3 = AndroidUtilities.dp(8.0f);
                                                        } else if ((i239 & 2) == 0 && (i239 & 1) == 0) {
                                                            dp3 = AndroidUtilities.dp(11.0f);
                                                        } else if ((i239 & 2) != 0) {
                                                            dp3 = AndroidUtilities.dp(10.0f);
                                                        } else {
                                                            dp3 = AndroidUtilities.dp(9.0f);
                                                        }
                                                        int i240 = dp46 - dp3;
                                                        int dp47 = !chatMessageCell.currentPosition.edge ? AndroidUtilities.dp(10.0f) + i240 : i240;
                                                        i21 = 0 + (dp47 - AndroidUtilities.dp(10.0f));
                                                        MessageObject.GroupedMessagePosition groupedMessagePosition22 = chatMessageCell.currentPosition;
                                                        int i241 = groupedMessagePosition22.flags;
                                                        if ((i241 & 8) != 0 || (chatMessageCell.currentMessagesGroup.hasSibling && (i241 & 4) == 0)) {
                                                            int additionalWidthForPosition = i21 + chatMessageCell.getAdditionalWidthForPosition(groupedMessagePosition22);
                                                            int size13 = chatMessageCell.currentMessagesGroup.messages.size();
                                                            int i242 = additionalWidthForPosition;
                                                            boolean z56 = true;
                                                            int i243 = 0;
                                                            while (i243 < size13) {
                                                                MessageObject messageObject14 = chatMessageCell.currentMessagesGroup.messages.get(i243);
                                                                MessageObject.GroupedMessagePosition groupedMessagePosition23 = chatMessageCell.currentMessagesGroup.posArray.get(i243);
                                                                if (groupedMessagePosition23 == chatMessageCell.currentPosition || (groupedMessagePosition23.flags & 8) == 0) {
                                                                    i41 = size13;
                                                                    i40 = i36;
                                                                    i39 = dp47;
                                                                    i43 = dp;
                                                                    z23 = z17;
                                                                    i42 = i243;
                                                                } else {
                                                                    int ceil19 = (int) Math.ceil((groupedMessagePosition23.pw / 1000.0f) * f2);
                                                                    if (groupedMessagePosition23.minY == 0 || ((!messageObject.isOutOwner() || (groupedMessagePosition23.flags & i222) == 0) && (messageObject.isOutOwner() || (groupedMessagePosition23.flags & 2) == 0))) {
                                                                        i41 = size13;
                                                                        i40 = i36;
                                                                        i39 = dp47;
                                                                        i43 = dp;
                                                                        z23 = z17;
                                                                        i42 = i243;
                                                                    } else {
                                                                        i41 = size13;
                                                                        int i244 = 0;
                                                                        int i245 = 0;
                                                                        int i246 = 0;
                                                                        while (true) {
                                                                            if (i244 >= chatMessageCell.currentMessagesGroup.posArray.size()) {
                                                                                i40 = i36;
                                                                                i39 = dp47;
                                                                                i43 = dp;
                                                                                z23 = z17;
                                                                                i42 = i243;
                                                                                break;
                                                                            }
                                                                            MessageObject.GroupedMessagePosition groupedMessagePosition24 = chatMessageCell.currentMessagesGroup.posArray.get(i244);
                                                                            i40 = i36;
                                                                            byte b3 = groupedMessagePosition24.minY;
                                                                            if (b3 == 0) {
                                                                                i39 = dp47;
                                                                                double d15 = i245;
                                                                                i43 = dp;
                                                                                z23 = z17;
                                                                                double ceil20 = Math.ceil((groupedMessagePosition24.pw / 1000.0f) * f2);
                                                                                double ceil21 = groupedMessagePosition24.leftSpanOffset != 0 ? Math.ceil((i45 / 1000.0f) * f2) : 0.0d;
                                                                                Double.isNaN(d15);
                                                                                i245 = (int) (d15 + ceil20 + ceil21);
                                                                                i42 = i243;
                                                                            } else {
                                                                                i39 = dp47;
                                                                                i43 = dp;
                                                                                z23 = z17;
                                                                                byte b4 = groupedMessagePosition23.minY;
                                                                                if (b3 != b4) {
                                                                                    i42 = i243;
                                                                                    if (b3 > b4) {
                                                                                        break;
                                                                                    }
                                                                                } else {
                                                                                    double d16 = i246;
                                                                                    double ceil22 = Math.ceil((groupedMessagePosition24.pw / 1000.0f) * f2);
                                                                                    if (groupedMessagePosition24.leftSpanOffset != 0) {
                                                                                        i42 = i243;
                                                                                        d = Math.ceil((i44 / 1000.0f) * f2);
                                                                                    } else {
                                                                                        i42 = i243;
                                                                                        d = 0.0d;
                                                                                    }
                                                                                    Double.isNaN(d16);
                                                                                    i246 = (int) (d16 + ceil22 + d);
                                                                                }
                                                                            }
                                                                            i244++;
                                                                            i36 = i40;
                                                                            dp47 = i39;
                                                                            dp = i43;
                                                                            i243 = i42;
                                                                            z17 = z23;
                                                                        }
                                                                        ceil19 += i245 - i246;
                                                                    }
                                                                    int dp48 = ceil19 - AndroidUtilities.dp(9.0f);
                                                                    int i247 = groupedMessagePosition23.flags;
                                                                    if ((i247 & 2) != 0 && (i247 & 1) != 0) {
                                                                        dp4 = AndroidUtilities.dp(8.0f);
                                                                    } else if ((i247 & 2) == 0 && (i247 & 1) == 0) {
                                                                        dp4 = AndroidUtilities.dp(11.0f);
                                                                    } else if ((i247 & 2) != 0) {
                                                                        dp4 = AndroidUtilities.dp(10.0f);
                                                                    } else {
                                                                        dp4 = AndroidUtilities.dp(9.0f);
                                                                    }
                                                                    int i248 = dp48 - dp4;
                                                                    if (chatMessageCell.isChat && !chatMessageCell.isThreadPost && !messageObject14.isOutOwner() && messageObject14.needDrawAvatar() && groupedMessagePosition23.edge) {
                                                                        i248 -= AndroidUtilities.dp(48.0f);
                                                                    }
                                                                    i240 = i248 + chatMessageCell.getAdditionalWidthForPosition(groupedMessagePosition23);
                                                                    if (!groupedMessagePosition23.edge) {
                                                                        i240 += AndroidUtilities.dp(10.0f);
                                                                    }
                                                                    i242 += i240;
                                                                    if (groupedMessagePosition23.minX < chatMessageCell.currentPosition.minX || (chatMessageCell.currentMessagesGroup.hasSibling && groupedMessagePosition23.minY != groupedMessagePosition23.maxY)) {
                                                                        chatMessageCell.captionOffsetX -= i240;
                                                                    }
                                                                }
                                                                if (z56 && (charSequence = messageObject14.caption) != null) {
                                                                    if (chatMessageCell.currentCaption != null) {
                                                                        chatMessageCell.currentCaption = null;
                                                                        z56 = false;
                                                                    } else {
                                                                        chatMessageCell.currentCaption = charSequence;
                                                                    }
                                                                }
                                                                i243 = i42 + 1;
                                                                size13 = i41;
                                                                i36 = i40;
                                                                dp47 = i39;
                                                                dp = i43;
                                                                z17 = z23;
                                                                i222 = 1;
                                                            }
                                                            i37 = i36;
                                                            i38 = dp47;
                                                            i20 = dp;
                                                            z18 = z17;
                                                            i21 = i242;
                                                        } else {
                                                            i37 = i36;
                                                            i38 = dp47;
                                                            i20 = dp;
                                                            z18 = z17;
                                                        }
                                                        messageObject4 = messageObject;
                                                        i23 = i38;
                                                        i22 = i240;
                                                        z20 = false;
                                                        i24 = i37;
                                                    } else {
                                                        z19 = z4;
                                                        i20 = dp;
                                                        z18 = z17;
                                                        messageObject4 = messageObject;
                                                        chatMessageCell.currentCaption = messageObject4.caption;
                                                        if (AndroidUtilities.isTablet()) {
                                                            i35 = AndroidUtilities.getMinTabletSide();
                                                        } else {
                                                            i35 = Math.min(getParentWidth(), AndroidUtilities.displaySize.y);
                                                        }
                                                        int i249 = (int) (i35 * 0.65f);
                                                        if (!messageObject.needDrawBluredPreview()) {
                                                            if (chatMessageCell.currentCaption == null) {
                                                                ReactionsLayoutInBubble reactionsLayoutInBubble25 = chatMessageCell.reactionsLayoutInBubble;
                                                                if (!reactionsLayoutInBubble25.isEmpty) {
                                                                }
                                                            }
                                                            if (i19 < i249) {
                                                                i21 = i249;
                                                                z20 = true;
                                                                int dp49 = AndroidUtilities.dp(8.0f) + i19;
                                                                chatMessageCell.backgroundWidth = dp49;
                                                                if (!chatMessageCell.mediaBackground) {
                                                                    chatMessageCell.backgroundWidth = dp49 + AndroidUtilities.dp(9.0f);
                                                                }
                                                                i23 = i19;
                                                                i22 = i23;
                                                                i24 = dp44;
                                                            }
                                                        }
                                                        i21 = i19 - AndroidUtilities.dp(10.0f);
                                                        z20 = false;
                                                        int dp492 = AndroidUtilities.dp(8.0f) + i19;
                                                        chatMessageCell.backgroundWidth = dp492;
                                                        if (!chatMessageCell.mediaBackground) {
                                                        }
                                                        i23 = i19;
                                                        i22 = i23;
                                                        i24 = dp44;
                                                    }
                                                    if (chatMessageCell.currentCaption != null) {
                                                        try {
                                                            i21 -= getExtraTextX() * 2;
                                                            if (Build.VERSION.SDK_INT >= 24) {
                                                                try {
                                                                    CharSequence charSequence7 = chatMessageCell.currentCaption;
                                                                    chatMessageCell.captionLayout = StaticLayout.Builder.obtain(charSequence7, 0, charSequence7.length(), Theme.chat_msgTextPaint, i21).setBreakStrategy(1).setHyphenationFrequency(0).setAlignment(Layout.Alignment.ALIGN_NORMAL).build();
                                                                } catch (Exception e28) {
                                                                    exc = e28;
                                                                    i27 = i21;
                                                                    i26 = 0;
                                                                    FileLog.e(exc);
                                                                    i25 = i26;
                                                                    i21 = i27;
                                                                    c5 = 0;
                                                                    if (!chatMessageCell.reactionsLayoutInBubble.isSmall) {
                                                                    }
                                                                    measureText = (int) (Theme.chat_infoPaint.measureText("100%") + AndroidUtilities.dp(100.0f));
                                                                    if (chatMessageCell.currentMessagesGroup == null) {
                                                                    }
                                                                    if (!z3) {
                                                                    }
                                                                    String format5 = String.format(Locale.US, "%d_%d", Integer.valueOf((int) (i22 / AndroidUtilities.density)), Integer.valueOf((int) (i24 / AndroidUtilities.density)));
                                                                    chatMessageCell.currentPhotoFilterThumb = format5;
                                                                    chatMessageCell.currentPhotoFilter = format5;
                                                                    arrayList = messageObject4.photoThumbs;
                                                                    if (arrayList != null) {
                                                                    }
                                                                    if (messageObject.needDrawBluredPreview()) {
                                                                    }
                                                                    int i250 = messageObject4.type;
                                                                    if (i250 != 3) {
                                                                    }
                                                                    tLRPC$PhotoSize3 = chatMessageCell.currentPhotoObject;
                                                                    if (tLRPC$PhotoSize3 == null) {
                                                                    }
                                                                    i28 = -1;
                                                                    tLRPC$PhotoSize4 = chatMessageCell.currentPhotoObjectThumb;
                                                                    if (tLRPC$PhotoSize4 != null) {
                                                                    }
                                                                    if (!SharedConfig.autoplayVideo) {
                                                                    }
                                                                    if (!chatMessageCell.autoPlayingMedia) {
                                                                    }
                                                                    c4 = c6;
                                                                    i13 = i29;
                                                                    i10 = i25;
                                                                    i12 = i30;
                                                                    z13 = z18;
                                                                    i11 = i31;
                                                                    setMessageObjectInternal(messageObject);
                                                                    if (!chatMessageCell.drawForwardedName) {
                                                                    }
                                                                    if (chatMessageCell.drawNameLayout) {
                                                                    }
                                                                    chatMessageCell.totalHeight = AndroidUtilities.dp(14.0f) + i12 + chatMessageCell.namesOffset + i10;
                                                                    groupedMessagePosition4 = chatMessageCell.currentPosition;
                                                                    if (groupedMessagePosition4 != null) {
                                                                    }
                                                                    if (chatMessageCell.currentMessageObject.isDice()) {
                                                                    }
                                                                    if (chatMessageCell.currentPosition != null) {
                                                                    }
                                                                    i14 = 0;
                                                                    if (chatMessageCell.drawPinnedTop) {
                                                                    }
                                                                    if (chatMessageCell.namesOffset > 0) {
                                                                    }
                                                                    if (chatMessageCell.currentPosition != null) {
                                                                    }
                                                                    chatMessageCell.photoImage.setImageCoords(0.0f, i15 + chatMessageCell.namesOffset + i14, i13, i12);
                                                                    invalidate();
                                                                    c = c4;
                                                                    r5 = i11;
                                                                    if (chatMessageCell.currentPosition != null) {
                                                                    }
                                                                    if (!messageObject2.isRestrictedMessage) {
                                                                    }
                                                                    c2 = 2;
                                                                    if (chatMessageCell.captionLayout != null) {
                                                                    }
                                                                    groupedMessagePosition = chatMessageCell.currentPosition;
                                                                    if (groupedMessagePosition != null) {
                                                                    }
                                                                    chatMessageCell.totalHeight += AndroidUtilities.dp(14.0f);
                                                                    messageObject3 = chatMessageCell.currentMessageObject;
                                                                    if (messageObject3.eventId == 0) {
                                                                    }
                                                                    if (messageObject.isSponsored()) {
                                                                    }
                                                                    chatMessageCell.botButtons.clear();
                                                                    if (z42) {
                                                                    }
                                                                    if (!messageObject2.isRestrictedMessage) {
                                                                    }
                                                                    chatMessageCell.substractBackgroundHeight = 0;
                                                                    chatMessageCell.keyboardHeight = 0;
                                                                    if (chatMessageCell.drawCommentButton) {
                                                                    }
                                                                    z14 = chatMessageCell.drawPinnedBottom;
                                                                    if (!z14) {
                                                                    }
                                                                    if (!z14) {
                                                                    }
                                                                    if (!messageObject.isAnyKindOfSticker()) {
                                                                    }
                                                                    if (messageObject.isAnimatedEmoji()) {
                                                                    }
                                                                    if (!chatMessageCell.drawPhotoImage) {
                                                                    }
                                                                    if (chatMessageCell.documentAttachType != 5) {
                                                                    }
                                                                    if (z13) {
                                                                    }
                                                                    if (chatMessageCell.captionLayout == null) {
                                                                    }
                                                                    if (z42) {
                                                                    }
                                                                    transcribeButton = chatMessageCell.transcribeButton;
                                                                    if (transcribeButton != null) {
                                                                    }
                                                                    updateWaveform();
                                                                    if (!z42) {
                                                                    }
                                                                    z9 = true;
                                                                    z8 = false;
                                                                    z7 = false;
                                                                    chatMessageCell.updateButtonState(z8, z7, z9);
                                                                    if (!chatMessageCell.currentMessageObject.loadingCancelled) {
                                                                    }
                                                                    chatMessageCellDelegate = chatMessageCell.delegate;
                                                                    if (chatMessageCellDelegate != null) {
                                                                    }
                                                                    chatMessageCell.accessibilityVirtualViewBounds.clear();
                                                                    chatMessageCell.transitionParams.updatePhotoImageX = true;
                                                                    updateFlagSecure();
                                                                }
                                                            } else {
                                                                chatMessageCell.captionLayout = new StaticLayout(chatMessageCell.currentCaption, Theme.chat_msgTextPaint, i21, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
                                                            }
                                                            updateCaptionSpoilers();
                                                            updateAnimatedEmojis();
                                                            lineCount = chatMessageCell.captionLayout.getLineCount();
                                                        } catch (Exception e29) {
                                                            e2 = e29;
                                                        }
                                                        if (lineCount > 0) {
                                                            try {
                                                                if (z20) {
                                                                    chatMessageCell.captionWidth = 0;
                                                                    int i251 = 0;
                                                                    while (true) {
                                                                        if (i251 >= lineCount) {
                                                                            break;
                                                                        }
                                                                        chatMessageCell.captionWidth = (int) Math.max(chatMessageCell.captionWidth, Math.ceil(chatMessageCell.captionLayout.getLineWidth(i251)));
                                                                        if (chatMessageCell.captionLayout.getLineLeft(i251) != 0.0f) {
                                                                            chatMessageCell.captionWidth = i21;
                                                                            break;
                                                                        }
                                                                        i251++;
                                                                    }
                                                                    if (chatMessageCell.captionWidth > i21) {
                                                                        chatMessageCell.captionWidth = i21;
                                                                    }
                                                                } else {
                                                                    chatMessageCell.captionWidth = i21;
                                                                }
                                                                int height2 = chatMessageCell.captionLayout.getHeight();
                                                                chatMessageCell.captionHeight = height2;
                                                                dp2 = height2 + AndroidUtilities.dp(9.0f);
                                                                chatMessageCell.addedCaptionHeight = dp2;
                                                                groupedMessagePosition6 = chatMessageCell.currentPosition;
                                                            } catch (Exception e30) {
                                                                e2 = e30;
                                                                exc = e2;
                                                                i27 = i21;
                                                                i26 = 0;
                                                                FileLog.e(exc);
                                                                i25 = i26;
                                                                i21 = i27;
                                                                c5 = 0;
                                                                if (!chatMessageCell.reactionsLayoutInBubble.isSmall) {
                                                                }
                                                                measureText = (int) (Theme.chat_infoPaint.measureText("100%") + AndroidUtilities.dp(100.0f));
                                                                if (chatMessageCell.currentMessagesGroup == null) {
                                                                }
                                                                if (!z3) {
                                                                }
                                                                String format52 = String.format(Locale.US, "%d_%d", Integer.valueOf((int) (i22 / AndroidUtilities.density)), Integer.valueOf((int) (i24 / AndroidUtilities.density)));
                                                                chatMessageCell.currentPhotoFilterThumb = format52;
                                                                chatMessageCell.currentPhotoFilter = format52;
                                                                arrayList = messageObject4.photoThumbs;
                                                                if (arrayList != null) {
                                                                }
                                                                if (messageObject.needDrawBluredPreview()) {
                                                                }
                                                                int i2502 = messageObject4.type;
                                                                if (i2502 != 3) {
                                                                }
                                                                tLRPC$PhotoSize3 = chatMessageCell.currentPhotoObject;
                                                                if (tLRPC$PhotoSize3 == null) {
                                                                }
                                                                i28 = -1;
                                                                tLRPC$PhotoSize4 = chatMessageCell.currentPhotoObjectThumb;
                                                                if (tLRPC$PhotoSize4 != null) {
                                                                }
                                                                if (!SharedConfig.autoplayVideo) {
                                                                }
                                                                if (!chatMessageCell.autoPlayingMedia) {
                                                                }
                                                                c4 = c6;
                                                                i13 = i29;
                                                                i10 = i25;
                                                                i12 = i30;
                                                                z13 = z18;
                                                                i11 = i31;
                                                                setMessageObjectInternal(messageObject);
                                                                if (!chatMessageCell.drawForwardedName) {
                                                                }
                                                                if (chatMessageCell.drawNameLayout) {
                                                                }
                                                                chatMessageCell.totalHeight = AndroidUtilities.dp(14.0f) + i12 + chatMessageCell.namesOffset + i10;
                                                                groupedMessagePosition4 = chatMessageCell.currentPosition;
                                                                if (groupedMessagePosition4 != null) {
                                                                }
                                                                if (chatMessageCell.currentMessageObject.isDice()) {
                                                                }
                                                                if (chatMessageCell.currentPosition != null) {
                                                                }
                                                                i14 = 0;
                                                                if (chatMessageCell.drawPinnedTop) {
                                                                }
                                                                if (chatMessageCell.namesOffset > 0) {
                                                                }
                                                                if (chatMessageCell.currentPosition != null) {
                                                                }
                                                                chatMessageCell.photoImage.setImageCoords(0.0f, i15 + chatMessageCell.namesOffset + i14, i13, i12);
                                                                invalidate();
                                                                c = c4;
                                                                r5 = i11;
                                                                if (chatMessageCell.currentPosition != null) {
                                                                }
                                                                if (!messageObject2.isRestrictedMessage) {
                                                                }
                                                                c2 = 2;
                                                                if (chatMessageCell.captionLayout != null) {
                                                                }
                                                                groupedMessagePosition = chatMessageCell.currentPosition;
                                                                if (groupedMessagePosition != null) {
                                                                }
                                                                chatMessageCell.totalHeight += AndroidUtilities.dp(14.0f);
                                                                messageObject3 = chatMessageCell.currentMessageObject;
                                                                if (messageObject3.eventId == 0) {
                                                                }
                                                                if (messageObject.isSponsored()) {
                                                                }
                                                                chatMessageCell.botButtons.clear();
                                                                if (z42) {
                                                                }
                                                                if (!messageObject2.isRestrictedMessage) {
                                                                }
                                                                chatMessageCell.substractBackgroundHeight = 0;
                                                                chatMessageCell.keyboardHeight = 0;
                                                                if (chatMessageCell.drawCommentButton) {
                                                                }
                                                                z14 = chatMessageCell.drawPinnedBottom;
                                                                if (!z14) {
                                                                }
                                                                if (!z14) {
                                                                }
                                                                if (!messageObject.isAnyKindOfSticker()) {
                                                                }
                                                                if (messageObject.isAnimatedEmoji()) {
                                                                }
                                                                if (!chatMessageCell.drawPhotoImage) {
                                                                }
                                                                if (chatMessageCell.documentAttachType != 5) {
                                                                }
                                                                if (z13) {
                                                                }
                                                                if (chatMessageCell.captionLayout == null) {
                                                                }
                                                                if (z42) {
                                                                }
                                                                transcribeButton = chatMessageCell.transcribeButton;
                                                                if (transcribeButton != null) {
                                                                }
                                                                updateWaveform();
                                                                if (!z42) {
                                                                }
                                                                z9 = true;
                                                                z8 = false;
                                                                z7 = false;
                                                                chatMessageCell.updateButtonState(z8, z7, z9);
                                                                if (!chatMessageCell.currentMessageObject.loadingCancelled) {
                                                                }
                                                                chatMessageCellDelegate = chatMessageCell.delegate;
                                                                if (chatMessageCellDelegate != null) {
                                                                }
                                                                chatMessageCell.accessibilityVirtualViewBounds.clear();
                                                                chatMessageCell.transitionParams.updatePhotoImageX = true;
                                                                updateFlagSecure();
                                                            }
                                                            if (groupedMessagePosition6 != null && (groupedMessagePosition6.flags & 8) == 0) {
                                                                chatMessageCell.captionLayout = null;
                                                                updateCaptionSpoilers();
                                                                updateAnimatedEmojis();
                                                                c5 = 0;
                                                                i25 = 0;
                                                                if (!chatMessageCell.reactionsLayoutInBubble.isSmall) {
                                                                    boolean z57 = chatMessageCell.backgroundWidth - AndroidUtilities.dp(24.0f) > i21;
                                                                    int max11 = Math.max(chatMessageCell.backgroundWidth - AndroidUtilities.dp(36.0f), i21);
                                                                    chatMessageCell.reactionsLayoutInBubble.measure(max11, 3);
                                                                    if (!chatMessageCell.reactionsLayoutInBubble.isEmpty) {
                                                                        if (shouldDrawTimeOnMedia()) {
                                                                            chatMessageCell.reactionsLayoutInBubble.drawServiceShaderBackground = true;
                                                                        }
                                                                        int i252 = chatMessageCell.reactionsLayoutInBubble.height;
                                                                        if (chatMessageCell.captionLayout == null) {
                                                                            i34 = i252 + AndroidUtilities.dp(12.0f) + AndroidUtilities.dp(4.0f);
                                                                        } else {
                                                                            i34 = i252 + AndroidUtilities.dp(12.0f);
                                                                            chatMessageCell.reactionsLayoutInBubble.positionOffsetY += AndroidUtilities.dp(12.0f);
                                                                        }
                                                                        chatMessageCell.reactionsLayoutInBubble.totalHeight = i34;
                                                                        i25 += i34;
                                                                        if (!shouldDrawTimeOnMedia()) {
                                                                            int min3 = Math.min(max11, chatMessageCell.reactionsLayoutInBubble.width + i20 + getExtraTimeX() + AndroidUtilities.dp(2.0f));
                                                                            float f36 = chatMessageCell.reactionsLayoutInBubble.lastLineX;
                                                                            if (!shouldDrawTimeOnMedia() && min3 - f36 < i20 + getExtraTimeX()) {
                                                                                i25 += AndroidUtilities.dp(14.0f);
                                                                                chatMessageCell.reactionsLayoutInBubble.totalHeight += AndroidUtilities.dp(14.0f);
                                                                                chatMessageCell.reactionsLayoutInBubble.positionOffsetY -= AndroidUtilities.dp(14.0f);
                                                                                if (!z57) {
                                                                                    int i253 = chatMessageCell.captionWidth;
                                                                                    int i254 = chatMessageCell.reactionsLayoutInBubble.width;
                                                                                    if (i253 < i254) {
                                                                                        chatMessageCell.captionWidth = i254;
                                                                                    }
                                                                                }
                                                                                c5 = 1;
                                                                            } else if (!z57) {
                                                                                ReactionsLayoutInBubble reactionsLayoutInBubble26 = chatMessageCell.reactionsLayoutInBubble;
                                                                                int i255 = reactionsLayoutInBubble26.lastLineX;
                                                                                if (i255 + i20 > chatMessageCell.captionWidth) {
                                                                                    chatMessageCell.captionWidth = i255 + i20;
                                                                                }
                                                                                int i256 = reactionsLayoutInBubble26.width;
                                                                                if (i256 > chatMessageCell.captionWidth) {
                                                                                    chatMessageCell.captionWidth = i256;
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                                measureText = (int) (Theme.chat_infoPaint.measureText("100%") + AndroidUtilities.dp(100.0f));
                                                                if (chatMessageCell.currentMessagesGroup == null && (((i33 = chatMessageCell.documentAttachType) == 4 || i33 == 2) && i23 < measureText)) {
                                                                    int dp50 = AndroidUtilities.dp(8.0f) + measureText;
                                                                    chatMessageCell.backgroundWidth = dp50;
                                                                    if (!chatMessageCell.mediaBackground) {
                                                                        chatMessageCell.backgroundWidth = dp50 + AndroidUtilities.dp(9.0f);
                                                                    }
                                                                    i23 = measureText;
                                                                }
                                                                if (!z3 || z42 || z19) {
                                                                    String format522 = String.format(Locale.US, "%d_%d", Integer.valueOf((int) (i22 / AndroidUtilities.density)), Integer.valueOf((int) (i24 / AndroidUtilities.density)));
                                                                    chatMessageCell.currentPhotoFilterThumb = format522;
                                                                    chatMessageCell.currentPhotoFilter = format522;
                                                                    arrayList = messageObject4.photoThumbs;
                                                                    if ((arrayList != null && arrayList.size() > 1) || (i32 = messageObject4.type) == 3 || i32 == 8 || i32 == 5) {
                                                                        if (messageObject.needDrawBluredPreview()) {
                                                                            chatMessageCell.currentPhotoFilter += "_b2";
                                                                            chatMessageCell.currentPhotoFilterThumb += "_b2";
                                                                        } else {
                                                                            chatMessageCell.currentPhotoFilterThumb += "_b";
                                                                        }
                                                                    }
                                                                } else {
                                                                    String format6 = String.format(Locale.US, "%d_%d", Integer.valueOf((int) (i22 / AndroidUtilities.density)), Integer.valueOf((int) (i24 / AndroidUtilities.density)));
                                                                    if (!messageObject.needDrawBluredPreview() && !format6.equals(chatMessageCell.currentPhotoFilter) && (forObject = ImageLocation.getForObject(chatMessageCell.currentPhotoObject, chatMessageCell.photoParentObject)) != null) {
                                                                        if (ImageLoader.getInstance().isInMemCache(forObject.getKey(chatMessageCell.photoParentObject, null, false) + "@" + chatMessageCell.currentPhotoFilter, false)) {
                                                                            chatMessageCell.currentPhotoObjectThumb = chatMessageCell.currentPhotoObject;
                                                                            chatMessageCell.currentPhotoFilterThumb = chatMessageCell.currentPhotoFilter;
                                                                            chatMessageCell.currentPhotoFilter = format6;
                                                                        }
                                                                    }
                                                                }
                                                                int i25022 = messageObject4.type;
                                                                boolean z58 = i25022 != 3 || i25022 == 8 || i25022 == 5;
                                                                tLRPC$PhotoSize3 = chatMessageCell.currentPhotoObject;
                                                                if (tLRPC$PhotoSize3 == null && !z58 && tLRPC$PhotoSize3.size == 0) {
                                                                    i28 = -1;
                                                                    tLRPC$PhotoSize3.size = -1;
                                                                } else {
                                                                    i28 = -1;
                                                                }
                                                                tLRPC$PhotoSize4 = chatMessageCell.currentPhotoObjectThumb;
                                                                if (tLRPC$PhotoSize4 != null && !z58 && tLRPC$PhotoSize4.size == 0) {
                                                                    tLRPC$PhotoSize4.size = i28;
                                                                }
                                                                if (!SharedConfig.autoplayVideo) {
                                                                    z21 = true;
                                                                } else if (i25022 != 3 || messageObject.needDrawBluredPreview() || (!chatMessageCell.currentMessageObject.mediaExists && (!messageObject.canStreamVideo() || !DownloadController.getInstance(chatMessageCell.currentAccount).canDownloadMedia(chatMessageCell.currentMessageObject)))) {
                                                                    z21 = true;
                                                                } else {
                                                                    MessageObject.GroupedMessagePosition groupedMessagePosition25 = chatMessageCell.currentPosition;
                                                                    if (groupedMessagePosition25 != null) {
                                                                        int i257 = groupedMessagePosition25.flags;
                                                                        chatMessageCell.autoPlayingMedia = ((i257 & 1) == 0 || (i257 & 2) == 0) ? false : true;
                                                                        z21 = true;
                                                                    } else {
                                                                        z21 = true;
                                                                        chatMessageCell.autoPlayingMedia = true;
                                                                    }
                                                                    if (!chatMessageCell.autoPlayingMedia) {
                                                                        chatMessageCell.photoImage.setAllowStartAnimation(z21);
                                                                        chatMessageCell.photoImage.startAnimation();
                                                                        TLRPC$Document document4 = messageObject.getDocument();
                                                                        VideoEditedInfo videoEditedInfo = chatMessageCell.currentMessageObject.videoEditedInfo;
                                                                        if (videoEditedInfo != null && videoEditedInfo.canAutoPlaySourceVideo() && messageObject.getDocument() != null) {
                                                                            c6 = c5;
                                                                            i30 = i24;
                                                                            i29 = i23;
                                                                            messageObject2 = messageObject;
                                                                            i31 = 1;
                                                                            chatMessageCell.photoImage.setImage(ImageLocation.getForPath(chatMessageCell.currentMessageObject.videoEditedInfo.originalPath), ImageLoader.AUTOPLAY_FILTER, ImageLocation.getForObject(chatMessageCell.currentPhotoObject, chatMessageCell.photoParentObject), chatMessageCell.currentPhotoFilter, ImageLocation.getForDocument(chatMessageCell.currentPhotoObjectThumb, document4), chatMessageCell.currentPhotoFilterThumb, chatMessageCell.currentPhotoObjectThumbStripped, messageObject.getDocument().size, null, messageObject, 0);
                                                                            ImageReceiver imageReceiver5 = chatMessageCell.photoImage;
                                                                            VideoEditedInfo videoEditedInfo2 = chatMessageCell.currentMessageObject.videoEditedInfo;
                                                                            imageReceiver5.setMediaStartEndTime(videoEditedInfo2.startTime / 1000, videoEditedInfo2.endTime / 1000);
                                                                        } else {
                                                                            c6 = c5;
                                                                            i30 = i24;
                                                                            i29 = i23;
                                                                            i31 = 1;
                                                                            i31 = 1;
                                                                            messageObject2 = messageObject4;
                                                                            if (messageObject.getDocument() != null) {
                                                                                if (!z42 && !z19) {
                                                                                    chatMessageCell.photoImage.setCrossfadeWithOldImage(true);
                                                                                }
                                                                                chatMessageCell.photoImage.setImage(ImageLocation.getForDocument(document4), ImageLoader.AUTOPLAY_FILTER, ImageLocation.getForObject(chatMessageCell.currentPhotoObject, chatMessageCell.photoParentObject), chatMessageCell.currentPhotoFilter, ImageLocation.getForDocument(chatMessageCell.currentPhotoObjectThumb, document4), chatMessageCell.currentPhotoFilterThumb, chatMessageCell.currentPhotoObjectThumbStripped, messageObject.getDocument().size, null, messageObject, 0);
                                                                            }
                                                                        }
                                                                    } else {
                                                                        c6 = c5;
                                                                        i30 = i24;
                                                                        i29 = i23;
                                                                        i31 = 1;
                                                                        i31 = 1;
                                                                        i31 = 1;
                                                                        i31 = 1;
                                                                        i31 = 1;
                                                                        i31 = 1;
                                                                        i31 = 1;
                                                                        i31 = 1;
                                                                        i31 = 1;
                                                                        i31 = 1;
                                                                        i31 = 1;
                                                                        i31 = 1;
                                                                        i31 = 1;
                                                                        i31 = 1;
                                                                        i31 = 1;
                                                                        messageObject2 = messageObject4;
                                                                        int i258 = messageObject2.type;
                                                                        if (i258 == 1) {
                                                                            if (messageObject2.useCustomPhoto) {
                                                                                chatMessageCell.photoImage.setImageBitmap(getResources().getDrawable(R.drawable.theme_preview_image));
                                                                            } else {
                                                                                TLRPC$PhotoSize tLRPC$PhotoSize33 = chatMessageCell.currentPhotoObject;
                                                                                if (tLRPC$PhotoSize33 != null) {
                                                                                    String attachFileName2 = FileLoader.getAttachFileName(tLRPC$PhotoSize33);
                                                                                    if (messageObject2.mediaExists) {
                                                                                        DownloadController.getInstance(chatMessageCell.currentAccount).removeLoadingFileObserver(chatMessageCell);
                                                                                        z22 = true;
                                                                                    } else {
                                                                                        z22 = false;
                                                                                    }
                                                                                    if (z22 || ((!chatMessageCell.currentMessageObject.loadingCancelled && DownloadController.getInstance(chatMessageCell.currentAccount).canDownloadMedia(chatMessageCell.currentMessageObject)) || FileLoader.getInstance(chatMessageCell.currentAccount).isLoadingFile(attachFileName2))) {
                                                                                        ImageReceiver imageReceiver6 = chatMessageCell.photoImage;
                                                                                        ImageLocation forObject3 = ImageLocation.getForObject(chatMessageCell.currentPhotoObject, chatMessageCell.photoParentObject);
                                                                                        String str34 = chatMessageCell.currentPhotoFilter;
                                                                                        ImageLocation forObject4 = ImageLocation.getForObject(chatMessageCell.currentPhotoObjectThumb, chatMessageCell.photoParentObject);
                                                                                        String str35 = chatMessageCell.currentPhotoFilterThumb;
                                                                                        BitmapDrawable bitmapDrawable6 = chatMessageCell.currentPhotoObjectThumbStripped;
                                                                                        long j4 = chatMessageCell.currentPhotoObject.size;
                                                                                        MessageObject messageObject15 = chatMessageCell.currentMessageObject;
                                                                                        imageReceiver6.setImage(forObject3, str34, forObject4, str35, bitmapDrawable6, j4, null, messageObject15, messageObject15.shouldEncryptPhotoOrVideo() ? 2 : 0);
                                                                                    } else {
                                                                                        chatMessageCell.photoNotSet = true;
                                                                                        TLRPC$PhotoSize tLRPC$PhotoSize34 = chatMessageCell.currentPhotoObjectThumb;
                                                                                        if (tLRPC$PhotoSize34 != null || chatMessageCell.currentPhotoObjectThumbStripped != null) {
                                                                                            ImageReceiver imageReceiver7 = chatMessageCell.photoImage;
                                                                                            ImageLocation forObject5 = ImageLocation.getForObject(tLRPC$PhotoSize34, chatMessageCell.photoParentObject);
                                                                                            String str36 = chatMessageCell.currentPhotoFilterThumb;
                                                                                            BitmapDrawable bitmapDrawable7 = chatMessageCell.currentPhotoObjectThumbStripped;
                                                                                            MessageObject messageObject16 = chatMessageCell.currentMessageObject;
                                                                                            imageReceiver7.setImage(null, null, forObject5, str36, bitmapDrawable7, 0L, null, messageObject16, messageObject16.shouldEncryptPhotoOrVideo() ? 2 : 0);
                                                                                        } else {
                                                                                            chatMessageCell.photoImage.setImageBitmap((Drawable) null);
                                                                                        }
                                                                                    }
                                                                                } else {
                                                                                    chatMessageCell.photoImage.setImageBitmap((Drawable) null);
                                                                                }
                                                                            }
                                                                        } else if (i258 == 8 || i258 == 5) {
                                                                            String attachFileName3 = FileLoader.getAttachFileName(messageObject.getDocument());
                                                                            if (messageObject2.attachPathExists) {
                                                                                DownloadController.getInstance(chatMessageCell.currentAccount).removeLoadingFileObserver(chatMessageCell);
                                                                                c7 = 1;
                                                                            } else {
                                                                                c7 = messageObject2.mediaExists ? (char) 2 : (char) 0;
                                                                            }
                                                                            TLRPC$Document document5 = messageObject.getDocument();
                                                                            boolean canDownloadMedia = (MessageObject.isGifDocument(document5, messageObject.hasValidGroupId()) || messageObject2.type == 5) ? DownloadController.getInstance(chatMessageCell.currentAccount).canDownloadMedia(chatMessageCell.currentMessageObject) : false;
                                                                            TLRPC$VideoSize documentVideoThumb2 = MessageObject.getDocumentVideoThumb(document5);
                                                                            if (((MessageObject.isGifDocument(document5, messageObject.hasValidGroupId()) && messageObject2.videoEditedInfo == null) || (!messageObject.isSending() && !messageObject.isEditing())) && (c7 != 0 || FileLoader.getInstance(chatMessageCell.currentAccount).isLoadingFile(attachFileName3) || canDownloadMedia)) {
                                                                                if (c7 != 1 && !messageObject.needDrawBluredPreview() && (c7 != 0 || (messageObject.canStreamVideo() && canDownloadMedia))) {
                                                                                    chatMessageCell.autoPlayingMedia = true;
                                                                                    if (!z42) {
                                                                                        chatMessageCell.photoImage.setCrossfadeWithOldImage(true);
                                                                                        chatMessageCell.photoImage.setCrossfadeDuration(250);
                                                                                    }
                                                                                    if (c7 == 0 && documentVideoThumb2 != null && (chatMessageCell.currentPhotoObject == null || chatMessageCell.currentPhotoObjectThumb == null)) {
                                                                                        ImageReceiver imageReceiver8 = chatMessageCell.photoImage;
                                                                                        ImageLocation forDocument3 = ImageLocation.getForDocument(document5);
                                                                                        ImageLocation forDocument4 = ImageLocation.getForDocument(documentVideoThumb2, chatMessageCell.documentAttach);
                                                                                        TLRPC$PhotoSize tLRPC$PhotoSize35 = chatMessageCell.currentPhotoObject;
                                                                                        if (tLRPC$PhotoSize35 == null) {
                                                                                            tLRPC$PhotoSize35 = chatMessageCell.currentPhotoObjectThumb;
                                                                                        }
                                                                                        imageReceiver8.setImage(forDocument3, ImageLoader.AUTOPLAY_FILTER, forDocument4, null, ImageLocation.getForDocument(tLRPC$PhotoSize35, chatMessageCell.documentAttach), chatMessageCell.currentPhotoObject != null ? chatMessageCell.currentPhotoFilter : chatMessageCell.currentPhotoFilterThumb, chatMessageCell.currentPhotoObjectThumbStripped, document5.size, null, messageObject, 0);
                                                                                    } else if (chatMessageCell.isRoundVideo && !z42 && chatMessageCell.photoImage.hasStaticThumb()) {
                                                                                        chatMessageCell.photoImage.setImage(ImageLocation.getForDocument(document5), ImageLoader.AUTOPLAY_FILTER, ImageLocation.getForObject(chatMessageCell.currentPhotoObject, chatMessageCell.photoParentObject), chatMessageCell.currentPhotoFilter, null, null, chatMessageCell.photoImage.getStaticThumb(), document5.size, null, messageObject, 0);
                                                                                    } else {
                                                                                        chatMessageCell.photoImage.setImage(ImageLocation.getForDocument(document5), ImageLoader.AUTOPLAY_FILTER, ImageLocation.getForObject(chatMessageCell.currentPhotoObject, chatMessageCell.photoParentObject), chatMessageCell.currentPhotoFilter, ImageLocation.getForObject(chatMessageCell.currentPhotoObjectThumb, chatMessageCell.photoParentObject), chatMessageCell.currentPhotoFilterThumb, chatMessageCell.currentPhotoObjectThumbStripped, document5.size, null, messageObject, 0);
                                                                                    }
                                                                                } else if (c7 == 1) {
                                                                                    chatMessageCell.photoImage.setImage(ImageLocation.getForPath(messageObject.isSendError() ? null : messageObject2.messageOwner.attachPath), null, ImageLocation.getForObject(chatMessageCell.currentPhotoObject, chatMessageCell.photoParentObject), chatMessageCell.currentPhotoFilter, ImageLocation.getForObject(chatMessageCell.currentPhotoObjectThumb, chatMessageCell.photoParentObject), chatMessageCell.currentPhotoFilterThumb, chatMessageCell.currentPhotoObjectThumbStripped, 0L, null, messageObject, 0);
                                                                                } else if (documentVideoThumb2 != null && (chatMessageCell.currentPhotoObject == null || chatMessageCell.currentPhotoObjectThumb == null)) {
                                                                                    ImageReceiver imageReceiver9 = chatMessageCell.photoImage;
                                                                                    ImageLocation forDocument5 = ImageLocation.getForDocument(document5);
                                                                                    ImageLocation forDocument6 = ImageLocation.getForDocument(documentVideoThumb2, chatMessageCell.documentAttach);
                                                                                    TLRPC$PhotoSize tLRPC$PhotoSize36 = chatMessageCell.currentPhotoObject;
                                                                                    if (tLRPC$PhotoSize36 == null) {
                                                                                        tLRPC$PhotoSize36 = chatMessageCell.currentPhotoObjectThumb;
                                                                                    }
                                                                                    imageReceiver9.setImage(forDocument5, null, forDocument6, null, ImageLocation.getForDocument(tLRPC$PhotoSize36, chatMessageCell.documentAttach), chatMessageCell.currentPhotoObject != null ? chatMessageCell.currentPhotoFilter : chatMessageCell.currentPhotoFilterThumb, chatMessageCell.currentPhotoObjectThumbStripped, document5.size, null, messageObject, 0);
                                                                                } else {
                                                                                    chatMessageCell.photoImage.setImage(ImageLocation.getForDocument(document5), null, ImageLocation.getForObject(chatMessageCell.currentPhotoObject, chatMessageCell.photoParentObject), chatMessageCell.currentPhotoFilter, ImageLocation.getForObject(chatMessageCell.currentPhotoObjectThumb, chatMessageCell.photoParentObject), chatMessageCell.currentPhotoFilterThumb, chatMessageCell.currentPhotoObjectThumbStripped, document5.size, null, messageObject, 0);
                                                                                }
                                                                            } else if (messageObject2.videoEditedInfo != null && messageObject2.type == 5 && !chatMessageCell.currentMessageObject.needDrawBluredPreview()) {
                                                                                chatMessageCell.photoImage.setImage(ImageLocation.getForPath(messageObject2.videoEditedInfo.originalPath), chatMessageCell.currentPhotoFilter, ImageLocation.getForObject(chatMessageCell.currentPhotoObjectThumb, chatMessageCell.photoParentObject), chatMessageCell.currentPhotoFilterThumb, chatMessageCell.currentPhotoObjectThumbStripped, 0L, null, messageObject, 0);
                                                                                ImageReceiver imageReceiver10 = chatMessageCell.photoImage;
                                                                                VideoEditedInfo videoEditedInfo3 = chatMessageCell.currentMessageObject.videoEditedInfo;
                                                                                imageReceiver10.setMediaStartEndTime(videoEditedInfo3.startTime / 1000, videoEditedInfo3.endTime / 1000);
                                                                            } else {
                                                                                if (!z42 && !chatMessageCell.currentMessageObject.needDrawBluredPreview()) {
                                                                                    chatMessageCell.photoImage.setCrossfadeWithOldImage(true);
                                                                                    chatMessageCell.photoImage.setCrossfadeDuration(250);
                                                                                }
                                                                                chatMessageCell.photoImage.setImage(ImageLocation.getForObject(chatMessageCell.currentPhotoObject, chatMessageCell.photoParentObject), chatMessageCell.currentPhotoFilter, ImageLocation.getForObject(chatMessageCell.currentPhotoObjectThumb, chatMessageCell.photoParentObject), chatMessageCell.currentPhotoFilterThumb, chatMessageCell.currentPhotoObjectThumbStripped, 0L, null, messageObject, 0);
                                                                            }
                                                                        } else if (messageObject2.videoEditedInfo != null && i258 == 5 && !chatMessageCell.currentMessageObject.needDrawBluredPreview()) {
                                                                            chatMessageCell.photoImage.setImage(ImageLocation.getForPath(messageObject2.videoEditedInfo.originalPath), chatMessageCell.currentPhotoFilter, ImageLocation.getForObject(chatMessageCell.currentPhotoObjectThumb, chatMessageCell.photoParentObject), chatMessageCell.currentPhotoFilterThumb, chatMessageCell.currentPhotoObjectThumbStripped, 0L, null, messageObject, chatMessageCell.currentMessageObject.shouldEncryptPhotoOrVideo() ? 2 : 0);
                                                                            ImageReceiver imageReceiver11 = chatMessageCell.photoImage;
                                                                            VideoEditedInfo videoEditedInfo4 = chatMessageCell.currentMessageObject.videoEditedInfo;
                                                                            imageReceiver11.setMediaStartEndTime(videoEditedInfo4.startTime / 1000, videoEditedInfo4.endTime / 1000);
                                                                        } else {
                                                                            if (!z42 && !chatMessageCell.currentMessageObject.needDrawBluredPreview()) {
                                                                                chatMessageCell.photoImage.setCrossfadeWithOldImage(true);
                                                                                chatMessageCell.photoImage.setCrossfadeDuration(250);
                                                                            }
                                                                            chatMessageCell.photoImage.setImage(ImageLocation.getForObject(chatMessageCell.currentPhotoObject, chatMessageCell.photoParentObject), chatMessageCell.currentPhotoFilter, ImageLocation.getForObject(chatMessageCell.currentPhotoObjectThumb, chatMessageCell.photoParentObject), chatMessageCell.currentPhotoFilterThumb, chatMessageCell.currentPhotoObjectThumbStripped, 0L, null, messageObject, chatMessageCell.currentMessageObject.shouldEncryptPhotoOrVideo() ? 2 : 0);
                                                                        }
                                                                    }
                                                                    c4 = c6;
                                                                    i13 = i29;
                                                                    i10 = i25;
                                                                    i12 = i30;
                                                                    z13 = z18;
                                                                    i11 = i31;
                                                                }
                                                                if (!chatMessageCell.autoPlayingMedia) {
                                                                }
                                                                c4 = c6;
                                                                i13 = i29;
                                                                i10 = i25;
                                                                i12 = i30;
                                                                z13 = z18;
                                                                i11 = i31;
                                                            }
                                                            i25 = 0 + dp2;
                                                            int max12 = Math.max(chatMessageCell.captionWidth, i23 - AndroidUtilities.dp(10.0f));
                                                            StaticLayout staticLayout19 = chatMessageCell.captionLayout;
                                                            float lineWidth = staticLayout19.getLineWidth(staticLayout19.getLineCount() - 1);
                                                            StaticLayout staticLayout20 = chatMessageCell.captionLayout;
                                                            float lineLeft2 = lineWidth + staticLayout20.getLineLeft(staticLayout20.getLineCount() - 1);
                                                            ReactionsLayoutInBubble reactionsLayoutInBubble27 = chatMessageCell.reactionsLayoutInBubble;
                                                            if ((reactionsLayoutInBubble27.isEmpty || reactionsLayoutInBubble27.isSmall) && !shouldDrawTimeOnMedia() && (max12 + AndroidUtilities.dp(2.0f)) - lineLeft2 < i20 + getExtraTimeX()) {
                                                                i25 += AndroidUtilities.dp(14.0f);
                                                                chatMessageCell.addedCaptionHeight += AndroidUtilities.dp(14.0f);
                                                                c5 = 1;
                                                                if (!chatMessageCell.reactionsLayoutInBubble.isSmall) {
                                                                }
                                                                measureText = (int) (Theme.chat_infoPaint.measureText("100%") + AndroidUtilities.dp(100.0f));
                                                                if (chatMessageCell.currentMessagesGroup == null) {
                                                                    int dp502 = AndroidUtilities.dp(8.0f) + measureText;
                                                                    chatMessageCell.backgroundWidth = dp502;
                                                                    if (!chatMessageCell.mediaBackground) {
                                                                    }
                                                                    i23 = measureText;
                                                                }
                                                                if (!z3) {
                                                                }
                                                                String format5222 = String.format(Locale.US, "%d_%d", Integer.valueOf((int) (i22 / AndroidUtilities.density)), Integer.valueOf((int) (i24 / AndroidUtilities.density)));
                                                                chatMessageCell.currentPhotoFilterThumb = format5222;
                                                                chatMessageCell.currentPhotoFilter = format5222;
                                                                arrayList = messageObject4.photoThumbs;
                                                                if (arrayList != null) {
                                                                    if (messageObject.needDrawBluredPreview()) {
                                                                    }
                                                                    int i250222 = messageObject4.type;
                                                                    if (i250222 != 3) {
                                                                    }
                                                                    tLRPC$PhotoSize3 = chatMessageCell.currentPhotoObject;
                                                                    if (tLRPC$PhotoSize3 == null) {
                                                                    }
                                                                    i28 = -1;
                                                                    tLRPC$PhotoSize4 = chatMessageCell.currentPhotoObjectThumb;
                                                                    if (tLRPC$PhotoSize4 != null) {
                                                                        tLRPC$PhotoSize4.size = i28;
                                                                    }
                                                                    if (!SharedConfig.autoplayVideo) {
                                                                    }
                                                                    if (!chatMessageCell.autoPlayingMedia) {
                                                                    }
                                                                    c4 = c6;
                                                                    i13 = i29;
                                                                    i10 = i25;
                                                                    i12 = i30;
                                                                    z13 = z18;
                                                                    i11 = i31;
                                                                }
                                                                if (messageObject.needDrawBluredPreview()) {
                                                                }
                                                                int i2502222 = messageObject4.type;
                                                                if (i2502222 != 3) {
                                                                }
                                                                tLRPC$PhotoSize3 = chatMessageCell.currentPhotoObject;
                                                                if (tLRPC$PhotoSize3 == null) {
                                                                }
                                                                i28 = -1;
                                                                tLRPC$PhotoSize4 = chatMessageCell.currentPhotoObjectThumb;
                                                                if (tLRPC$PhotoSize4 != null) {
                                                                }
                                                                if (!SharedConfig.autoplayVideo) {
                                                                }
                                                                if (!chatMessageCell.autoPlayingMedia) {
                                                                }
                                                                c4 = c6;
                                                                i13 = i29;
                                                                i10 = i25;
                                                                i12 = i30;
                                                                z13 = z18;
                                                                i11 = i31;
                                                            }
                                                            c5 = 0;
                                                            if (!chatMessageCell.reactionsLayoutInBubble.isSmall) {
                                                            }
                                                            measureText = (int) (Theme.chat_infoPaint.measureText("100%") + AndroidUtilities.dp(100.0f));
                                                            if (chatMessageCell.currentMessagesGroup == null) {
                                                            }
                                                            if (!z3) {
                                                            }
                                                            String format52222 = String.format(Locale.US, "%d_%d", Integer.valueOf((int) (i22 / AndroidUtilities.density)), Integer.valueOf((int) (i24 / AndroidUtilities.density)));
                                                            chatMessageCell.currentPhotoFilterThumb = format52222;
                                                            chatMessageCell.currentPhotoFilter = format52222;
                                                            arrayList = messageObject4.photoThumbs;
                                                            if (arrayList != null) {
                                                            }
                                                            if (messageObject.needDrawBluredPreview()) {
                                                            }
                                                            int i25022222 = messageObject4.type;
                                                            if (i25022222 != 3) {
                                                            }
                                                            tLRPC$PhotoSize3 = chatMessageCell.currentPhotoObject;
                                                            if (tLRPC$PhotoSize3 == null) {
                                                            }
                                                            i28 = -1;
                                                            tLRPC$PhotoSize4 = chatMessageCell.currentPhotoObjectThumb;
                                                            if (tLRPC$PhotoSize4 != null) {
                                                            }
                                                            if (!SharedConfig.autoplayVideo) {
                                                            }
                                                            if (!chatMessageCell.autoPlayingMedia) {
                                                            }
                                                            c4 = c6;
                                                            i13 = i29;
                                                            i10 = i25;
                                                            i12 = i30;
                                                            z13 = z18;
                                                            i11 = i31;
                                                        }
                                                    }
                                                    c5 = 0;
                                                    i25 = 0;
                                                    if (!chatMessageCell.reactionsLayoutInBubble.isSmall) {
                                                    }
                                                    measureText = (int) (Theme.chat_infoPaint.measureText("100%") + AndroidUtilities.dp(100.0f));
                                                    if (chatMessageCell.currentMessagesGroup == null) {
                                                    }
                                                    if (!z3) {
                                                    }
                                                    String format522222 = String.format(Locale.US, "%d_%d", Integer.valueOf((int) (i22 / AndroidUtilities.density)), Integer.valueOf((int) (i24 / AndroidUtilities.density)));
                                                    chatMessageCell.currentPhotoFilterThumb = format522222;
                                                    chatMessageCell.currentPhotoFilter = format522222;
                                                    arrayList = messageObject4.photoThumbs;
                                                    if (arrayList != null) {
                                                    }
                                                    if (messageObject.needDrawBluredPreview()) {
                                                    }
                                                    int i250222222 = messageObject4.type;
                                                    if (i250222222 != 3) {
                                                    }
                                                    tLRPC$PhotoSize3 = chatMessageCell.currentPhotoObject;
                                                    if (tLRPC$PhotoSize3 == null) {
                                                    }
                                                    i28 = -1;
                                                    tLRPC$PhotoSize4 = chatMessageCell.currentPhotoObjectThumb;
                                                    if (tLRPC$PhotoSize4 != null) {
                                                    }
                                                    if (!SharedConfig.autoplayVideo) {
                                                    }
                                                    if (!chatMessageCell.autoPlayingMedia) {
                                                    }
                                                    c4 = c6;
                                                    i13 = i29;
                                                    i10 = i25;
                                                    i12 = i30;
                                                    z13 = z18;
                                                    i11 = i31;
                                                }
                                                i19 = (int) (f4 / f3);
                                                if (i19 != 0) {
                                                }
                                                dp44 = AndroidUtilities.dp(150.0f);
                                                i19 = dp44;
                                                if (messageObject.type == 3) {
                                                    i19 = chatMessageCell.infoWidth + AndroidUtilities.dp(40.0f);
                                                }
                                                if (chatMessageCell.commentLayout != null) {
                                                    i19 = chatMessageCell.totalCommentWidth + AndroidUtilities.dp(10.0f);
                                                }
                                                if (chatMessageCell.currentMessagesGroup == null) {
                                                }
                                                if (messageObject.type == 5) {
                                                }
                                                measureTime(messageObject);
                                                dp = chatMessageCell.timeWidth + AndroidUtilities.dp((SharedConfig.bubbleRadius < 10 ? 22 : 18) + (!messageObject.isOutOwner() ? 20 : 0));
                                                if (i19 < dp) {
                                                }
                                                if (!messageObject.isRoundVideo()) {
                                                }
                                                if (chatMessageCell.currentMessagesGroup == null) {
                                                }
                                                if (chatMessageCell.currentCaption != null) {
                                                }
                                                c5 = 0;
                                                i25 = 0;
                                                if (!chatMessageCell.reactionsLayoutInBubble.isSmall) {
                                                }
                                                measureText = (int) (Theme.chat_infoPaint.measureText("100%") + AndroidUtilities.dp(100.0f));
                                                if (chatMessageCell.currentMessagesGroup == null) {
                                                }
                                                if (!z3) {
                                                }
                                                String format5222222 = String.format(Locale.US, "%d_%d", Integer.valueOf((int) (i22 / AndroidUtilities.density)), Integer.valueOf((int) (i24 / AndroidUtilities.density)));
                                                chatMessageCell.currentPhotoFilterThumb = format5222222;
                                                chatMessageCell.currentPhotoFilter = format5222222;
                                                arrayList = messageObject4.photoThumbs;
                                                if (arrayList != null) {
                                                }
                                                if (messageObject.needDrawBluredPreview()) {
                                                }
                                                int i2502222222 = messageObject4.type;
                                                if (i2502222222 != 3) {
                                                }
                                                tLRPC$PhotoSize3 = chatMessageCell.currentPhotoObject;
                                                if (tLRPC$PhotoSize3 == null) {
                                                }
                                                i28 = -1;
                                                tLRPC$PhotoSize4 = chatMessageCell.currentPhotoObjectThumb;
                                                if (tLRPC$PhotoSize4 != null) {
                                                }
                                                if (!SharedConfig.autoplayVideo) {
                                                }
                                                if (!chatMessageCell.autoPlayingMedia) {
                                                }
                                                c4 = c6;
                                                i13 = i29;
                                                i10 = i25;
                                                i12 = i30;
                                                z13 = z18;
                                                i11 = i31;
                                            }
                                        }
                                    }
                                    dp44 = i18;
                                    if (i19 != 0) {
                                    }
                                    dp44 = AndroidUtilities.dp(150.0f);
                                    i19 = dp44;
                                    if (messageObject.type == 3) {
                                    }
                                    if (chatMessageCell.commentLayout != null) {
                                    }
                                    if (chatMessageCell.currentMessagesGroup == null) {
                                    }
                                    if (messageObject.type == 5) {
                                    }
                                    measureTime(messageObject);
                                    dp = chatMessageCell.timeWidth + AndroidUtilities.dp((SharedConfig.bubbleRadius < 10 ? 22 : 18) + (!messageObject.isOutOwner() ? 20 : 0));
                                    if (i19 < dp) {
                                    }
                                    if (!messageObject.isRoundVideo()) {
                                    }
                                    if (chatMessageCell.currentMessagesGroup == null) {
                                    }
                                    if (chatMessageCell.currentCaption != null) {
                                    }
                                    c5 = 0;
                                    i25 = 0;
                                    if (!chatMessageCell.reactionsLayoutInBubble.isSmall) {
                                    }
                                    measureText = (int) (Theme.chat_infoPaint.measureText("100%") + AndroidUtilities.dp(100.0f));
                                    if (chatMessageCell.currentMessagesGroup == null) {
                                    }
                                    if (!z3) {
                                    }
                                    String format52222222 = String.format(Locale.US, "%d_%d", Integer.valueOf((int) (i22 / AndroidUtilities.density)), Integer.valueOf((int) (i24 / AndroidUtilities.density)));
                                    chatMessageCell.currentPhotoFilterThumb = format52222222;
                                    chatMessageCell.currentPhotoFilter = format52222222;
                                    arrayList = messageObject4.photoThumbs;
                                    if (arrayList != null) {
                                    }
                                    if (messageObject.needDrawBluredPreview()) {
                                    }
                                    int i25022222222 = messageObject4.type;
                                    if (i25022222222 != 3) {
                                    }
                                    tLRPC$PhotoSize3 = chatMessageCell.currentPhotoObject;
                                    if (tLRPC$PhotoSize3 == null) {
                                    }
                                    i28 = -1;
                                    tLRPC$PhotoSize4 = chatMessageCell.currentPhotoObjectThumb;
                                    if (tLRPC$PhotoSize4 != null) {
                                    }
                                    if (!SharedConfig.autoplayVideo) {
                                    }
                                    if (!chatMessageCell.autoPlayingMedia) {
                                    }
                                    c4 = c6;
                                    i13 = i29;
                                    i10 = i25;
                                    i12 = i30;
                                    z13 = z18;
                                    i11 = i31;
                                }
                                z16 = false;
                                bitmapDrawable = chatMessageCell.currentMessageObject.strippedThumb;
                                if (bitmapDrawable != null) {
                                }
                                if (messageObject.type != 5) {
                                }
                                tLRPC$PhotoSize = chatMessageCell.currentPhotoObject;
                                if (tLRPC$PhotoSize != null) {
                                    chatMessageCell.currentPhotoObject = null;
                                }
                                tLRPC$PhotoSize2 = chatMessageCell.currentPhotoObject;
                                if (tLRPC$PhotoSize2 != null) {
                                    if (messageObject.type != 1) {
                                    }
                                }
                                if (z16) {
                                    chatMessageCell.photoImage.setNeedsQualityThumb(true);
                                    chatMessageCell.photoImage.setShouldGenerateQualityThumb(true);
                                }
                                if (chatMessageCell.currentMessagesGroup == null) {
                                    chatMessageCell.mediaBackground = false;
                                }
                                if (i19 != 0) {
                                }
                                while (i49 < document.attributes.size()) {
                                }
                                dp44 = i18;
                                if (i19 != 0) {
                                }
                                dp44 = AndroidUtilities.dp(150.0f);
                                i19 = dp44;
                                if (messageObject.type == 3) {
                                }
                                if (chatMessageCell.commentLayout != null) {
                                }
                                if (chatMessageCell.currentMessagesGroup == null) {
                                }
                                if (messageObject.type == 5) {
                                }
                                measureTime(messageObject);
                                dp = chatMessageCell.timeWidth + AndroidUtilities.dp((SharedConfig.bubbleRadius < 10 ? 22 : 18) + (!messageObject.isOutOwner() ? 20 : 0));
                                if (i19 < dp) {
                                }
                                if (!messageObject.isRoundVideo()) {
                                }
                                if (chatMessageCell.currentMessagesGroup == null) {
                                }
                                if (chatMessageCell.currentCaption != null) {
                                }
                                c5 = 0;
                                i25 = 0;
                                if (!chatMessageCell.reactionsLayoutInBubble.isSmall) {
                                }
                                measureText = (int) (Theme.chat_infoPaint.measureText("100%") + AndroidUtilities.dp(100.0f));
                                if (chatMessageCell.currentMessagesGroup == null) {
                                }
                                if (!z3) {
                                }
                                String format522222222 = String.format(Locale.US, "%d_%d", Integer.valueOf((int) (i22 / AndroidUtilities.density)), Integer.valueOf((int) (i24 / AndroidUtilities.density)));
                                chatMessageCell.currentPhotoFilterThumb = format522222222;
                                chatMessageCell.currentPhotoFilter = format522222222;
                                arrayList = messageObject4.photoThumbs;
                                if (arrayList != null) {
                                }
                                if (messageObject.needDrawBluredPreview()) {
                                }
                                int i250222222222 = messageObject4.type;
                                if (i250222222222 != 3) {
                                }
                                tLRPC$PhotoSize3 = chatMessageCell.currentPhotoObject;
                                if (tLRPC$PhotoSize3 == null) {
                                }
                                i28 = -1;
                                tLRPC$PhotoSize4 = chatMessageCell.currentPhotoObjectThumb;
                                if (tLRPC$PhotoSize4 != null) {
                                }
                                if (!SharedConfig.autoplayVideo) {
                                }
                                if (!chatMessageCell.autoPlayingMedia) {
                                }
                                c4 = c6;
                                i13 = i29;
                                i10 = i25;
                                i12 = i30;
                                z13 = z18;
                                i11 = i31;
                            }
                            setMessageObjectInternal(messageObject);
                            if (!chatMessageCell.drawForwardedName && messageObject.needDrawForwarded() && ((groupedMessagePosition5 = chatMessageCell.currentPosition) == null || groupedMessagePosition5.minY == 0)) {
                                if (messageObject2.type != 5) {
                                    chatMessageCell.namesOffset += AndroidUtilities.dp(5.0f);
                                }
                            } else if (chatMessageCell.drawNameLayout && (messageObject.getReplyMsgId() == 0 || (chatMessageCell.isThreadChat && messageObject.getReplyTopMsgId() == 0))) {
                                chatMessageCell.namesOffset += AndroidUtilities.dp(7.0f);
                            }
                            chatMessageCell.totalHeight = AndroidUtilities.dp(14.0f) + i12 + chatMessageCell.namesOffset + i10;
                            groupedMessagePosition4 = chatMessageCell.currentPosition;
                            if (groupedMessagePosition4 != null && (groupedMessagePosition4.flags & 8) == 0 && !chatMessageCell.currentMessageObject.isDocument()) {
                                chatMessageCell.totalHeight -= AndroidUtilities.dp(3.0f);
                            }
                            if (chatMessageCell.currentMessageObject.isDice()) {
                                chatMessageCell.totalHeight += AndroidUtilities.dp(21.0f);
                                chatMessageCell.additionalTimeOffsetY = AndroidUtilities.dp(21.0f);
                            }
                            if (chatMessageCell.currentPosition != null || chatMessageCell.currentMessageObject.isDocument()) {
                                i14 = 0;
                            } else {
                                i13 += chatMessageCell.getAdditionalWidthForPosition(chatMessageCell.currentPosition);
                                if ((chatMessageCell.currentPosition.flags & 4) == 0) {
                                    i12 += AndroidUtilities.dp(4.0f);
                                    i14 = 0 - AndroidUtilities.dp(4.0f);
                                } else {
                                    i14 = 0;
                                }
                                if ((chatMessageCell.currentPosition.flags & 8) == 0) {
                                    i12 += AndroidUtilities.dp(f);
                                }
                            }
                            if (chatMessageCell.drawPinnedTop) {
                                chatMessageCell.namesOffset -= AndroidUtilities.dp(f);
                            }
                            if (chatMessageCell.namesOffset > 0) {
                                i15 = AndroidUtilities.dp(7.0f);
                                chatMessageCell.totalHeight -= AndroidUtilities.dp(2.0f);
                            } else {
                                i15 = AndroidUtilities.dp(5.0f);
                                chatMessageCell.totalHeight -= AndroidUtilities.dp(4.0f);
                            }
                            if (chatMessageCell.currentPosition != null) {
                                MessageObject.GroupedMessages groupedMessages6 = chatMessageCell.currentMessagesGroup;
                                if (groupedMessages6.isDocuments && groupedMessages6.messages.size() > i11) {
                                    if ((chatMessageCell.currentPosition.flags & 4) == 0) {
                                        chatMessageCell.totalHeight -= AndroidUtilities.dp(chatMessageCell.drawPhotoImage ? 3.0f : 6.0f);
                                        chatMessageCell.mediaOffsetY -= AndroidUtilities.dp(chatMessageCell.drawPhotoImage ? 3.0f : 6.0f);
                                        i15 -= AndroidUtilities.dp(chatMessageCell.drawPhotoImage ? 3.0f : 6.0f);
                                    }
                                    if ((chatMessageCell.currentPosition.flags & 8) == 0) {
                                        chatMessageCell.totalHeight -= AndroidUtilities.dp(chatMessageCell.drawPhotoImage ? 3.0f : 6.0f);
                                    }
                                }
                            }
                            chatMessageCell.photoImage.setImageCoords(0.0f, i15 + chatMessageCell.namesOffset + i14, i13, i12);
                            invalidate();
                            c = c4;
                            r5 = i11;
                        }
                        z13 = true;
                        i11 = i64;
                        setMessageObjectInternal(messageObject);
                        if (!chatMessageCell.drawForwardedName) {
                        }
                        if (chatMessageCell.drawNameLayout) {
                            chatMessageCell.namesOffset += AndroidUtilities.dp(7.0f);
                        }
                        chatMessageCell.totalHeight = AndroidUtilities.dp(14.0f) + i12 + chatMessageCell.namesOffset + i10;
                        groupedMessagePosition4 = chatMessageCell.currentPosition;
                        if (groupedMessagePosition4 != null) {
                            chatMessageCell.totalHeight -= AndroidUtilities.dp(3.0f);
                        }
                        if (chatMessageCell.currentMessageObject.isDice()) {
                        }
                        if (chatMessageCell.currentPosition != null) {
                        }
                        i14 = 0;
                        if (chatMessageCell.drawPinnedTop) {
                        }
                        if (chatMessageCell.namesOffset > 0) {
                        }
                        if (chatMessageCell.currentPosition != null) {
                        }
                        chatMessageCell.photoImage.setImageCoords(0.0f, i15 + chatMessageCell.namesOffset + i14, i13, i12);
                        invalidate();
                        c = c4;
                        r5 = i11;
                    }
                    messageObject2 = messageObject;
                    r5 = 1;
                    c = 0;
                    f = 1.0f;
                    z13 = true;
                }
                if ((chatMessageCell.currentPosition != null || chatMessageCell.currentMessageObject.isMusic() || chatMessageCell.currentMessageObject.isDocument()) && !messageObject.isAnyKindOfSticker() && chatMessageCell.addedCaptionHeight == 0) {
                    if (!messageObject2.isRestrictedMessage || chatMessageCell.captionLayout != null || (messageObject2.caption == null && !messageObject.isVoiceTranscriptionOpen())) {
                        c2 = 2;
                    } else {
                        CharSequence voiceTranscription = messageObject.isVoiceTranscriptionOpen() ? messageObject.getVoiceTranscription() : messageObject2.caption;
                        chatMessageCell.currentCaption = voiceTranscription;
                        if (voiceTranscription != null && !TextUtils.isEmpty(messageObject2.messageOwner.voiceTranscription) && chatMessageCell.currentMessageObject.isVoiceTranscriptionOpen() && !chatMessageCell.currentMessageObject.messageOwner.voiceTranscriptionFinal) {
                            String str37 = ((Object) chatMessageCell.currentCaption) + " ";
                            chatMessageCell.currentCaption = str37;
                            if (!(str37 instanceof Spannable)) {
                                chatMessageCell.currentCaption = new SpannableString(chatMessageCell.currentCaption);
                            }
                            ((SpannableString) chatMessageCell.currentCaption).setSpan(new TranscribeButton.LoadingPointsSpan(), chatMessageCell.currentCaption.length() - r5, chatMessageCell.currentCaption.length(), 33);
                        }
                        try {
                            int i259 = chatMessageCell.backgroundWidth;
                            if (messageObject.isVoiceTranscriptionOpen()) {
                                if (AndroidUtilities.isTablet()) {
                                    i9 = AndroidUtilities.getMinTabletSide();
                                    if (!z10) {
                                        f9 = 50.0f;
                                    }
                                    i8 = AndroidUtilities.dp(f9);
                                } else {
                                    i9 = getParentWidth();
                                    if (!z10) {
                                        f9 = 50.0f;
                                    }
                                    i8 = AndroidUtilities.dp(f9);
                                }
                                i259 = i9 - i8;
                            }
                            c2 = 2;
                            int dp51 = ((i259 - AndroidUtilities.dp(31.0f)) - AndroidUtilities.dp(10.0f)) - (getExtraTextX() * 2);
                            try {
                                if (Build.VERSION.SDK_INT >= 24) {
                                    CharSequence charSequence8 = chatMessageCell.currentCaption;
                                    chatMessageCell.captionLayout = StaticLayout.Builder.obtain(charSequence8, 0, charSequence8.length(), Theme.chat_msgTextPaint, dp51).setBreakStrategy(r5).setHyphenationFrequency(0).setAlignment(Layout.Alignment.ALIGN_NORMAL).build();
                                } else {
                                    chatMessageCell.captionLayout = new StaticLayout(chatMessageCell.currentCaption, Theme.chat_msgTextPaint, dp51, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
                                }
                                updateSeekBarWaveformWidth();
                                updateCaptionSpoilers();
                                updateAnimatedEmojis();
                            } catch (Exception e31) {
                                e = e31;
                                FileLog.e(e);
                                if (chatMessageCell.captionLayout != null) {
                                }
                                groupedMessagePosition = chatMessageCell.currentPosition;
                                if (groupedMessagePosition != null) {
                                }
                                chatMessageCell.totalHeight += AndroidUtilities.dp(14.0f);
                                messageObject3 = chatMessageCell.currentMessageObject;
                                if (messageObject3.eventId == 0) {
                                }
                                if (messageObject.isSponsored()) {
                                }
                                chatMessageCell.botButtons.clear();
                                if (z42) {
                                }
                                if (!messageObject2.isRestrictedMessage) {
                                }
                                chatMessageCell.substractBackgroundHeight = 0;
                                chatMessageCell.keyboardHeight = 0;
                                if (chatMessageCell.drawCommentButton) {
                                }
                                z14 = chatMessageCell.drawPinnedBottom;
                                if (!z14) {
                                }
                                if (!z14) {
                                }
                                if (!messageObject.isAnyKindOfSticker()) {
                                }
                                if (messageObject.isAnimatedEmoji()) {
                                }
                                if (!chatMessageCell.drawPhotoImage) {
                                }
                                if (chatMessageCell.documentAttachType != 5) {
                                }
                                if (z13) {
                                }
                                if (chatMessageCell.captionLayout == null) {
                                }
                                if (z42) {
                                }
                                transcribeButton = chatMessageCell.transcribeButton;
                                if (transcribeButton != null) {
                                }
                                updateWaveform();
                                if (!z42) {
                                }
                                z9 = true;
                                z8 = false;
                                z7 = false;
                                chatMessageCell.updateButtonState(z8, z7, z9);
                                if (!chatMessageCell.currentMessageObject.loadingCancelled) {
                                }
                                chatMessageCellDelegate = chatMessageCell.delegate;
                                if (chatMessageCellDelegate != null) {
                                }
                                chatMessageCell.accessibilityVirtualViewBounds.clear();
                                chatMessageCell.transitionParams.updatePhotoImageX = true;
                                updateFlagSecure();
                            }
                        } catch (Exception e32) {
                            e = e32;
                            c2 = 2;
                        }
                    }
                    if (chatMessageCell.captionLayout != null) {
                        try {
                            if (messageObject.isVoiceTranscriptionOpen()) {
                                float dp52 = ((chatMessageCell.backgroundWidth - AndroidUtilities.dp(31.0f)) - AndroidUtilities.dp(10.0f)) - (getExtraTextX() * 2);
                                float f37 = dp52;
                                for (int i260 = 0; i260 < chatMessageCell.captionLayout.getLineCount(); i260++) {
                                    float lineWidth2 = chatMessageCell.captionLayout.getLineWidth(i260);
                                    if (lineWidth2 > f37) {
                                        f37 = lineWidth2;
                                    }
                                }
                                chatMessageCell.backgroundWidth = (int) (chatMessageCell.backgroundWidth + (f37 - dp52));
                            }
                            int dp53 = chatMessageCell.backgroundWidth - AndroidUtilities.dp(31.0f);
                            StaticLayout staticLayout21 = chatMessageCell.captionLayout;
                            if (staticLayout21 != null && staticLayout21.getLineCount() > 0) {
                                chatMessageCell.captionWidth = dp53;
                                int height3 = chatMessageCell.captionLayout.getHeight();
                                chatMessageCell.captionHeight = height3;
                                chatMessageCell.totalHeight += height3 + AndroidUtilities.dp(9.0f);
                                ReactionsLayoutInBubble reactionsLayoutInBubble28 = chatMessageCell.reactionsLayoutInBubble;
                                if ((reactionsLayoutInBubble28.isEmpty || reactionsLayoutInBubble28.isSmall) && ((groupedMessagePosition3 = chatMessageCell.currentPosition) == null || (groupedMessagePosition3.flags & 8) != 0)) {
                                    int dp54 = chatMessageCell.timeWidth + (messageObject.isOutOwner() ? AndroidUtilities.dp(20.0f) : 0) + getExtraTimeX();
                                    StaticLayout staticLayout22 = chatMessageCell.captionLayout;
                                    float lineWidth3 = staticLayout22.getLineWidth(staticLayout22.getLineCount() - r5);
                                    StaticLayout staticLayout23 = chatMessageCell.captionLayout;
                                    if ((dp53 - AndroidUtilities.dp(8.0f)) - (lineWidth3 + staticLayout23.getLineLeft(staticLayout23.getLineCount() - r5)) < dp54) {
                                        chatMessageCell.totalHeight += AndroidUtilities.dp(14.0f);
                                        chatMessageCell.captionHeight += AndroidUtilities.dp(14.0f);
                                        c3 = 2;
                                        c = c3;
                                    }
                                }
                            }
                            c3 = c;
                            c = c3;
                        } catch (Exception e33) {
                            FileLog.e(e33);
                        }
                    }
                } else {
                    c2 = 2;
                }
                groupedMessagePosition = chatMessageCell.currentPosition;
                if ((groupedMessagePosition != null || (groupedMessagePosition.flags & 8) != 0) && chatMessageCell.captionLayout == null && (i7 = chatMessageCell.widthBeforeNewTimeLine) != -1 && chatMessageCell.availableTimeWidth - i7 < chatMessageCell.timeWidth) {
                    chatMessageCell.totalHeight += AndroidUtilities.dp(14.0f);
                }
                messageObject3 = chatMessageCell.currentMessageObject;
                if (messageObject3.eventId == 0 && !messageObject3.isMediaEmpty() && chatMessageCell.currentMessageObject.messageOwner.media.webpage != null) {
                    int dp55 = chatMessageCell.backgroundWidth - AndroidUtilities.dp(41.0f);
                    chatMessageCell.hasOldCaptionPreview = r5;
                    chatMessageCell.linkPreviewHeight = 0;
                    TLRPC$WebPage tLRPC$WebPage2 = chatMessageCell.currentMessageObject.messageOwner.media.webpage;
                    try {
                        int ceil23 = (int) Math.ceil(Theme.chat_replyNamePaint.measureText(tLRPC$WebPage2.site_name) + f);
                        chatMessageCell.siteNameWidth = ceil23;
                        StaticLayout staticLayout24 = new StaticLayout(tLRPC$WebPage2.site_name, Theme.chat_replyNamePaint, Math.min(ceil23, dp55), Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
                        chatMessageCell.siteNameLayout = staticLayout24;
                        chatMessageCell.siteNameRtl = staticLayout24.getLineLeft(0) != 0.0f;
                        StaticLayout staticLayout25 = chatMessageCell.siteNameLayout;
                        int lineBottom5 = staticLayout25.getLineBottom(staticLayout25.getLineCount() - r5);
                        chatMessageCell.linkPreviewHeight += lineBottom5;
                        chatMessageCell.totalHeight += lineBottom5;
                    } catch (Exception e34) {
                        FileLog.e(e34);
                    }
                    try {
                        chatMessageCell.descriptionX = 0;
                        if (chatMessageCell.linkPreviewHeight != 0) {
                            chatMessageCell.totalHeight += AndroidUtilities.dp(2.0f);
                        }
                        StaticLayout createStaticLayout = StaticLayoutEx.createStaticLayout(tLRPC$WebPage2.description, Theme.chat_replyTextPaint, dp55, Layout.Alignment.ALIGN_NORMAL, 1.0f, AndroidUtilities.dp(f), false, TextUtils.TruncateAt.END, dp55, 6);
                        chatMessageCell.descriptionLayout = createStaticLayout;
                        int lineBottom6 = createStaticLayout.getLineBottom(createStaticLayout.getLineCount() - r5);
                        chatMessageCell.linkPreviewHeight += lineBottom6;
                        chatMessageCell.totalHeight += lineBottom6;
                        boolean z59 = false;
                        for (int i261 = 0; i261 < chatMessageCell.descriptionLayout.getLineCount(); i261++) {
                            int ceil24 = (int) Math.ceil(chatMessageCell.descriptionLayout.getLineLeft(i261));
                            if (ceil24 != 0) {
                                int i262 = chatMessageCell.descriptionX;
                                if (i262 == 0) {
                                    chatMessageCell.descriptionX = -ceil24;
                                } else {
                                    chatMessageCell.descriptionX = Math.max(i262, -ceil24);
                                }
                            } else {
                                z59 = true;
                            }
                        }
                        if (z59) {
                            chatMessageCell.descriptionX = 0;
                        }
                    } catch (Exception e35) {
                        FileLog.e(e35);
                    }
                    int i263 = messageObject2.type;
                    if (i263 == r5 || i263 == 3) {
                        chatMessageCell.totalHeight += AndroidUtilities.dp(6.0f);
                    }
                    int dp56 = chatMessageCell.totalHeight + AndroidUtilities.dp(17.0f);
                    chatMessageCell.totalHeight = dp56;
                    if (c != 0) {
                        chatMessageCell.totalHeight = dp56 - AndroidUtilities.dp(14.0f);
                        if (c == c2) {
                            chatMessageCell.captionHeight -= AndroidUtilities.dp(14.0f);
                        }
                    }
                }
                if (messageObject.isSponsored()) {
                    chatMessageCell.drawInstantView = r5;
                    if (messageObject2.sponsoredChannelPost != 0) {
                        chatMessageCell.drawInstantViewType = 12;
                    } else {
                        int i264 = r5 == true ? 1 : 0;
                        int i265 = r5 == true ? 1 : 0;
                        int i266 = r5 == true ? 1 : 0;
                        int i267 = r5 == true ? 1 : 0;
                        int i268 = r5 == true ? 1 : 0;
                        int i269 = r5 == true ? 1 : 0;
                        int i270 = r5 == true ? 1 : 0;
                        int i271 = r5 == true ? 1 : 0;
                        int i272 = r5 == true ? 1 : 0;
                        int i273 = r5 == true ? 1 : 0;
                        int i274 = r5 == true ? 1 : 0;
                        int i275 = r5 == true ? 1 : 0;
                        int i276 = r5 == true ? 1 : 0;
                        int i277 = r5 == true ? 1 : 0;
                        int i278 = r5 == true ? 1 : 0;
                        int i279 = r5 == true ? 1 : 0;
                        int i280 = r5 == true ? 1 : 0;
                        int i281 = r5 == true ? 1 : 0;
                        int i282 = r5 == true ? 1 : 0;
                        int i283 = r5 == true ? 1 : 0;
                        int i284 = r5 == true ? 1 : 0;
                        int i285 = r5 == true ? 1 : 0;
                        int i286 = r5 == true ? 1 : 0;
                        int i287 = r5 == true ? 1 : 0;
                        int i288 = r5 == true ? 1 : 0;
                        int i289 = r5 == true ? 1 : 0;
                        chatMessageCell.drawInstantViewType = i264;
                    }
                    long peerId2 = MessageObject.getPeerId(messageObject2.messageOwner.from_id);
                    if (peerId2 > 0 && (user = MessagesController.getInstance(chatMessageCell.currentAccount).getUser(Long.valueOf(peerId2))) != null && user.bot) {
                        chatMessageCell.drawInstantViewType = 10;
                    }
                    createInstantViewButton();
                }
                chatMessageCell.botButtons.clear();
                if (z42) {
                    chatMessageCell.botButtonsByData.clear();
                    chatMessageCell.botButtonsByPosition.clear();
                    chatMessageCell.botButtonsLayout = null;
                }
                if (!messageObject2.isRestrictedMessage && chatMessageCell.currentPosition == null) {
                    tLRPC$ReplyMarkup = messageObject2.messageOwner.reply_markup;
                    if (tLRPC$ReplyMarkup instanceof TLRPC$TL_replyInlineMarkup) {
                        int size14 = tLRPC$ReplyMarkup instanceof TLRPC$TL_replyInlineMarkup ? tLRPC$ReplyMarkup.rows.size() : 1;
                        int dp57 = (AndroidUtilities.dp(48.0f) * size14) + AndroidUtilities.dp(f);
                        chatMessageCell.keyboardHeight = dp57;
                        chatMessageCell.substractBackgroundHeight = dp57;
                        int dp58 = chatMessageCell.backgroundWidth - AndroidUtilities.dp(chatMessageCell.mediaBackground ? 0.0f : 9.0f);
                        chatMessageCell.widthForButtons = dp58;
                        if (messageObject2.wantedBotKeyboardWidth > dp58) {
                            int i290 = -AndroidUtilities.dp(z10 ? 62.0f : 10.0f);
                            if (AndroidUtilities.isTablet()) {
                                i6 = AndroidUtilities.getMinTabletSide();
                            } else {
                                i6 = Math.min(getParentWidth(), AndroidUtilities.displaySize.y) - AndroidUtilities.dp(5.0f);
                            }
                            chatMessageCell.widthForButtons = Math.max(chatMessageCell.backgroundWidth, Math.min(messageObject2.wantedBotKeyboardWidth, i290 + i6));
                        }
                        HashMap hashMap3 = new HashMap(chatMessageCell.botButtonsByData);
                        StringBuilder sb = messageObject2.botButtonsLayout;
                        if (sb != null && (str = chatMessageCell.botButtonsLayout) != null && str.equals(sb.toString())) {
                            hashMap = new HashMap(chatMessageCell.botButtonsByPosition);
                        } else {
                            StringBuilder sb2 = messageObject2.botButtonsLayout;
                            if (sb2 != null) {
                                chatMessageCell.botButtonsLayout = sb2.toString();
                            }
                            hashMap = null;
                        }
                        chatMessageCell.botButtonsByData.clear();
                        if (messageObject2.messageOwner.reply_markup instanceof TLRPC$TL_replyInlineMarkup) {
                            int i291 = 0;
                            int i292 = 0;
                            while (i292 < size14) {
                                TLRPC$TL_keyboardButtonRow tLRPC$TL_keyboardButtonRow = messageObject2.messageOwner.reply_markup.rows.get(i292);
                                int size15 = tLRPC$TL_keyboardButtonRow.buttons.size();
                                if (size15 != 0) {
                                    int dp59 = ((chatMessageCell.widthForButtons - (AndroidUtilities.dp(5.0f) * (size15 - 1))) - AndroidUtilities.dp(2.0f)) / size15;
                                    int i293 = 0;
                                    while (i293 < tLRPC$TL_keyboardButtonRow.buttons.size()) {
                                        BotButton botButton2 = new BotButton();
                                        botButton2.button = tLRPC$TL_keyboardButtonRow.buttons.get(i293);
                                        String bytesToHex = Utilities.bytesToHex(botButton2.button.data);
                                        String str38 = i292 + "" + i293;
                                        if (hashMap != null) {
                                            botButton = (BotButton) hashMap.get(str38);
                                        } else {
                                            botButton = (BotButton) hashMap3.get(bytesToHex);
                                        }
                                        if (botButton != null) {
                                            botButton2.progressAlpha = botButton.progressAlpha;
                                            botButton2.angle = botButton.angle;
                                            hashMap2 = hashMap;
                                            botButton2.lastUpdateTime = botButton.lastUpdateTime;
                                        } else {
                                            hashMap2 = hashMap;
                                            botButton2.lastUpdateTime = System.currentTimeMillis();
                                        }
                                        chatMessageCell.botButtonsByData.put(bytesToHex, botButton2);
                                        chatMessageCell.botButtonsByPosition.put(str38, botButton2);
                                        botButton2.x = (AndroidUtilities.dp(5.0f) + dp59) * i293;
                                        botButton2.y = (AndroidUtilities.dp(48.0f) * i292) + AndroidUtilities.dp(5.0f);
                                        botButton2.width = dp59;
                                        botButton2.height = AndroidUtilities.dp(44.0f);
                                        TextPaint textPaint2 = (TextPaint) chatMessageCell.getThemedPaint("paintChatBotButton");
                                        if ((botButton2.button instanceof TLRPC$TL_keyboardButtonBuy) && (messageObject2.messageOwner.media.flags & 4) != 0) {
                                            ellipsize = LocaleController.getString("PaymentReceipt", R.string.PaymentReceipt);
                                        } else {
                                            ellipsize = TextUtils.ellipsize(Emoji.replaceEmoji(botButton2.button.text == null ? "" : botButton2.button.text, textPaint2.getFontMetricsInt(), AndroidUtilities.dp(15.0f), false), textPaint2, dp59 - AndroidUtilities.dp(10.0f), TextUtils.TruncateAt.END);
                                        }
                                        botButton2.title = new StaticLayout(ellipsize, textPaint2, dp59 - AndroidUtilities.dp(10.0f), Layout.Alignment.ALIGN_CENTER, 1.0f, 0.0f, false);
                                        chatMessageCell.botButtons.add(botButton2);
                                        if (i293 == tLRPC$TL_keyboardButtonRow.buttons.size() - 1) {
                                            i291 = Math.max(i291, botButton2.x + botButton2.width);
                                        }
                                        if (messageObject.isFromUser() && (botButton2.button instanceof TLRPC$TL_keyboardButtonUrl)) {
                                            try {
                                                Uri parse2 = Uri.parse(botButton2.button.url);
                                                String lowerCase2 = parse2.getHost().toLowerCase();
                                                botButton2.isInviteButton = parse2.getQueryParameter("startgroup") != null && ((("http".equals(parse2.getScheme()) || "https".equals(parse2.getScheme())) && ("t.me".equals(lowerCase2) || "telegram.me".equals(lowerCase2) || "telegram.dog".equals(lowerCase2))) || ("tg".equals(parse2.getScheme()) && (botButton2.button.url.startsWith("tg:resolve") || botButton2.button.url.startsWith("tg://resolve"))));
                                            } catch (Exception unused4) {
                                            }
                                        }
                                        i293++;
                                        hashMap = hashMap2;
                                    }
                                }
                                i292++;
                                hashMap = hashMap;
                            }
                            i5 = i291;
                        } else {
                            i5 = 0;
                        }
                        chatMessageCell.widthForButtons = i5;
                        if (chatMessageCell.drawCommentButton) {
                            chatMessageCell.totalHeight += AndroidUtilities.dp(shouldDrawTimeOnMedia() ? 41.3f : 43.0f);
                            chatMessageCell.createSelectorDrawable(1);
                        }
                        z14 = chatMessageCell.drawPinnedBottom;
                        if (!z14 && chatMessageCell.drawPinnedTop) {
                            chatMessageCell.totalHeight -= AndroidUtilities.dp(2.0f);
                        } else if (!z14) {
                            chatMessageCell.totalHeight -= AndroidUtilities.dp(f);
                        } else if (chatMessageCell.drawPinnedTop && chatMessageCell.pinnedBottom && (groupedMessagePosition2 = chatMessageCell.currentPosition) != null && groupedMessagePosition2.siblingHeights == null) {
                            chatMessageCell.totalHeight -= AndroidUtilities.dp(f);
                        }
                        if (!messageObject.isAnyKindOfSticker() && chatMessageCell.totalHeight < AndroidUtilities.dp(70.0f)) {
                            int dp60 = AndroidUtilities.dp(70.0f);
                            int i294 = chatMessageCell.totalHeight;
                            int i295 = dp60 - i294;
                            chatMessageCell.additionalTimeOffsetY = i295;
                            chatMessageCell.totalHeight = i294 + i295;
                        } else if (messageObject.isAnimatedEmoji()) {
                            chatMessageCell.additionalTimeOffsetY = AndroidUtilities.dp(16.0f);
                            chatMessageCell.totalHeight += AndroidUtilities.dp(16.0f);
                        }
                        if (!chatMessageCell.drawPhotoImage) {
                            chatMessageCell.photoImage.setImageBitmap((Drawable) null);
                        }
                        if (chatMessageCell.documentAttachType != 5) {
                            if (MessageObject.isDocumentHasThumb(chatMessageCell.documentAttach)) {
                                chatMessageCell.radialProgress.setImageOverlay(FileLoader.getClosestPhotoSizeWithSize(chatMessageCell.documentAttach.thumbs, 90), chatMessageCell.documentAttach, messageObject2);
                            } else {
                                String artworkUrl = messageObject2.getArtworkUrl(true);
                                if (!TextUtils.isEmpty(artworkUrl)) {
                                    chatMessageCell.radialProgress.setImageOverlay(artworkUrl);
                                } else {
                                    chatMessageCell.radialProgress.setImageOverlay(null, null, null);
                                }
                            }
                        } else {
                            chatMessageCell.radialProgress.setImageOverlay(null, null, null);
                        }
                        if (z13) {
                            int dp61 = AndroidUtilities.dp(4.0f);
                            int i296 = SharedConfig.bubbleRadius;
                            if (i296 > 2) {
                                i2 = AndroidUtilities.dp(i296 - 2);
                            } else {
                                i2 = AndroidUtilities.dp(i296);
                            }
                            int min4 = Math.min(AndroidUtilities.dp(3.0f), i2);
                            if (dp61 > i2) {
                                dp61 = i2;
                            }
                            if (chatMessageCell.hasLinkPreview || chatMessageCell.hasGamePreview || chatMessageCell.hasInvoicePreview) {
                                i2 = dp61;
                            }
                            int i297 = (chatMessageCell.forwardedNameLayout[0] == null && chatMessageCell.replyNameLayout == null && !chatMessageCell.drawNameLayout) ? i2 : dp61;
                            if (chatMessageCell.captionLayout != null || chatMessageCell.drawCommentButton) {
                                i2 = dp61;
                            }
                            if (chatMessageCell.documentAttachType == 1) {
                                i4 = dp61;
                                i3 = i4;
                            } else {
                                i3 = i2;
                                i4 = i297;
                            }
                            MessageObject.GroupedMessagePosition groupedMessagePosition26 = chatMessageCell.currentPosition;
                            if (groupedMessagePosition26 != null && chatMessageCell.currentMessagesGroup != null) {
                                int i298 = groupedMessagePosition26.flags;
                                if ((i298 & 2) == 0) {
                                    i4 = dp61;
                                    i3 = i4;
                                }
                                if ((i298 & 1) == 0) {
                                    i2 = dp61;
                                    i297 = i2;
                                }
                                if ((i298 & 8) == 0) {
                                    i2 = dp61;
                                    i3 = i2;
                                }
                                if ((i298 & 4) == 0) {
                                    i4 = dp61;
                                    if (chatMessageCell.pinnedTop) {
                                        if (chatMessageCell.currentMessageObject.isOutOwner()) {
                                            i4 = min4;
                                        } else {
                                            dp61 = min4;
                                        }
                                    }
                                    if (chatMessageCell.pinnedBottom) {
                                        if (chatMessageCell.currentMessageObject.isOutOwner()) {
                                            i3 = min4;
                                        } else {
                                            i2 = min4;
                                        }
                                    }
                                    if (!chatMessageCell.mediaBackground || chatMessageCell.currentMessageObject.isOutOwner()) {
                                        min4 = i2;
                                    }
                                    chatMessageCell.photoImage.setRoundRadius(dp61, i4, i3, min4);
                                }
                            }
                            dp61 = i297;
                            if (chatMessageCell.pinnedTop) {
                            }
                            if (chatMessageCell.pinnedBottom) {
                            }
                            if (!chatMessageCell.mediaBackground) {
                            }
                            min4 = i2;
                            chatMessageCell.photoImage.setRoundRadius(dp61, i4, i3, min4);
                        }
                        if (chatMessageCell.captionLayout == null && (chatMessageCell.animatedEmojiStack == null || z3)) {
                            updateAnimatedEmojis();
                        }
                    }
                }
                chatMessageCell.substractBackgroundHeight = 0;
                chatMessageCell.keyboardHeight = 0;
                if (chatMessageCell.drawCommentButton) {
                }
                z14 = chatMessageCell.drawPinnedBottom;
                if (!z14) {
                }
                if (!z14) {
                }
                if (!messageObject.isAnyKindOfSticker()) {
                }
                if (messageObject.isAnimatedEmoji()) {
                }
                if (!chatMessageCell.drawPhotoImage) {
                }
                if (chatMessageCell.documentAttachType != 5) {
                }
                if (z13) {
                }
                if (chatMessageCell.captionLayout == null) {
                    updateAnimatedEmojis();
                }
            } else {
                messageObject2 = messageObject;
            }
            if (z42) {
                chatMessageCell.currentUrl = null;
                chatMessageCell.currentWebFile = null;
                chatMessageCell.lastWebFile = null;
                chatMessageCell.loadingProgressLayout = null;
                chatMessageCell.animatingLoadingProgressProgress = 0.0f;
                chatMessageCell.lastLoadingSizeTotal = 0L;
                chatMessageCell.selectedBackgroundProgress = 0.0f;
                ValueAnimator valueAnimator = chatMessageCell.statusDrawableAnimator;
                if (valueAnimator != null) {
                    valueAnimator.removeAllListeners();
                    chatMessageCell.statusDrawableAnimator.cancel();
                }
                chatMessageCell.transitionParams.lastStatusDrawableParams = -1;
                chatMessageCell.statusDrawableAnimationInProgress = false;
                if (chatMessageCell.documentAttachType == 5) {
                    chatMessageCell.toSeekBarProgress = MediaController.getInstance().isPlayingMessage(chatMessageCell.currentMessageObject) ? 1.0f : 0.0f;
                }
                chatMessageCell.seekBarWaveform.setProgress(0.0f);
            }
            transcribeButton = chatMessageCell.transcribeButton;
            if (transcribeButton != null) {
                TLRPC$Message tLRPC$Message6 = chatMessageCell.currentMessageObject.messageOwner;
                transcribeButton.setOpen(tLRPC$Message6 != null && tLRPC$Message6.voiceTranscriptionOpen && tLRPC$Message6.voiceTranscriptionFinal, !z42);
                chatMessageCell.transcribeButton.setLoading(TranscribeButton.isTranscribing(chatMessageCell.currentMessageObject), !z42);
            }
            updateWaveform();
            if (!z42 || messageObject2.cancelEditing) {
                z9 = true;
                z8 = false;
                z7 = false;
            } else {
                z9 = true;
                z8 = false;
                z7 = true;
            }
            chatMessageCell.updateButtonState(z8, z7, z9);
            if (!chatMessageCell.currentMessageObject.loadingCancelled && chatMessageCell.buttonState == 2 && chatMessageCell.documentAttachType == 3 && DownloadController.getInstance(chatMessageCell.currentAccount).canDownloadMedia(messageObject2)) {
                FileLoader.getInstance(chatMessageCell.currentAccount).loadFile(chatMessageCell.documentAttach, chatMessageCell.currentMessageObject, 1, 0);
                chatMessageCell.buttonState = 4;
                chatMessageCell.radialProgress.setIcon(getIconForCurrentState(), false, false);
            }
            chatMessageCellDelegate = chatMessageCell.delegate;
            if (chatMessageCellDelegate != null && chatMessageCellDelegate.getTextSelectionHelper() != null && !z42 && z3) {
                chatMessageCell.delegate.getTextSelectionHelper().checkDataChanged(messageObject2);
            }
            chatMessageCell.accessibilityVirtualViewBounds.clear();
            chatMessageCell.transitionParams.updatePhotoImageX = true;
            updateFlagSecure();
        }
        z3 = true;
        MessageObject messageObject122 = chatMessageCell.currentMessageObject;
        if (messageObject122 == null) {
        }
        if (groupedMessages == chatMessageCell.currentMessagesGroup) {
        }
        chatMessageCell.accessibilityText = null;
        if (!chatMessageCell.drawCommentButton) {
        }
        z4 = true;
        if (!z3) {
            chatMessageCell.setCurrentDiceValue(chatMessageCell.isUpdating);
        }
        if (!z3) {
        }
        z6 = false;
        if (!z5) {
            if ((groupedMessages.messages.size() <= 1 ? chatMessageCell.currentMessagesGroup.positions.get(chatMessageCell.currentMessageObject) : null) == chatMessageCell.currentPosition) {
            }
        }
        if (!z3) {
        }
        chatMessageCell.wasPinned = chatMessageCell.isPinned;
        chatMessageCell.pinnedBottom = z;
        chatMessageCell.pinnedTop = z2;
        chatMessageCell.currentMessageObject = messageObject;
        chatMessageCell.currentMessagesGroup = groupedMessages;
        chatMessageCell.lastTime = -2;
        chatMessageCell.lastPostAuthor = messageObject.messageOwner.post_author;
        chatMessageCell.isHighlightedAnimated = false;
        chatMessageCell.widthBeforeNewTimeLine = -1;
        if (groupedMessages == null) {
        }
        chatMessageCell.currentMessagesGroup = null;
        chatMessageCell.currentPosition = null;
        groupedMessages2 = chatMessageCell.currentMessagesGroup;
        if (groupedMessages2 != null) {
        }
        chatMessageCell.drawPinnedTop = chatMessageCell.pinnedTop;
        chatMessageCell.drawPinnedBottom = chatMessageCell.pinnedBottom;
        chatMessageCell.isPlayingRound = !chatMessageCell.isRoundVideo && MediaController.getInstance().isPlayingMessage(chatMessageCell.currentMessageObject) && (chatMessageCellDelegate2 = chatMessageCell.delegate) != null && !chatMessageCellDelegate2.keyboardIsOpened() && !chatMessageCell.delegate.isLandscape();
        chatMessageCell.photoImage.setCrossfadeWithOldImage(false);
        chatMessageCell.photoImage.setCrossfadeDuration(ImageReceiver.DEFAULT_CROSSFADE_DURATION);
        chatMessageCell.photoImage.setGradientBitmap(null);
        TLRPC$Message tLRPC$Message42 = messageObject.messageOwner;
        chatMessageCell.lastSendState = tLRPC$Message42.send_state;
        chatMessageCell.lastDeleteDate = tLRPC$Message42.destroyTime;
        chatMessageCell.lastViewsCount = tLRPC$Message42.views;
        chatMessageCell.lastRepliesCount = getRepliesCount();
        if (z42) {
        }
        chatMessageCell.gamePreviewPressed = false;
        chatMessageCell.sideButtonPressed = false;
        chatMessageCell.hasNewLineForTime = false;
        chatMessageCell.flipImage = false;
        if (chatMessageCell.isThreadChat) {
        }
        chatMessageCell.isThreadPost = z43;
        chatMessageCell.isAvatarVisible = z43 && chatMessageCell.isChat && !messageObject.isOutOwner() && messageObject.needDrawAvatar() && ((groupedMessagePosition16 = chatMessageCell.currentPosition) == null || groupedMessagePosition16.edge);
        if (!chatMessageCell.isChat) {
        }
        if (messageObject.customAvatarDrawable == null) {
        }
        chatMessageCell.wasLayout = false;
        chatMessageCell.groupPhotoInvisible = false;
        chatMessageCell.animatingDrawVideoImageButton = 0;
        chatMessageCell.drawVideoSize = false;
        chatMessageCell.canStreamVideo = false;
        chatMessageCell.animatingNoSound = 0;
        if (!MessagesController.getInstance(chatMessageCell.currentAccount).isChatNoForwards(messageObject.getChatId())) {
        }
        chatMessageCell.drawSideButton = 0;
        chatMessageCell.replyNameLayout = null;
        chatMessageCell.adminLayout = null;
        chatMessageCell.checkOnlyButtonPressed = false;
        chatMessageCell.replyTextLayout = null;
        AnimatedEmojiSpan.release(chatMessageCell, chatMessageCell.animatedEmojiReplyStack);
        chatMessageCell.lastReplyMessage = null;
        chatMessageCell.hasEmbed = false;
        chatMessageCell.autoPlayingMedia = false;
        chatMessageCell.replyNameWidth = 0;
        chatMessageCell.replyTextWidth = 0;
        chatMessageCell.viaWidth = 0;
        chatMessageCell.viaNameWidth = 0;
        chatMessageCell.addedCaptionHeight = 0;
        chatMessageCell.currentReplyPhoto = null;
        chatMessageCell.currentUser = null;
        chatMessageCell.currentChat = null;
        chatMessageCell.currentViaBotUser = null;
        chatMessageCell.instantViewLayout = null;
        chatMessageCell.drawNameLayout = false;
        chatMessageCell.lastLoadingSizeTotal = 0L;
        if (chatMessageCell.scheduledInvalidate) {
        }
        chatMessageCell.links.clear();
        chatMessageCell.pressedLink = null;
        chatMessageCell.pressedLinkType = -1;
        messageObject.forceUpdate = false;
        chatMessageCell.drawPhotoImage = false;
        chatMessageCell.drawMediaCheckBox = false;
        chatMessageCell.hasLinkPreview = false;
        chatMessageCell.hasOldCaptionPreview = false;
        chatMessageCell.hasGamePreview = false;
        chatMessageCell.hasInvoicePreview = false;
        chatMessageCell.commentButtonPressed = false;
        chatMessageCell.instantButtonPressed = false;
        chatMessageCell.instantPressed = false;
        if (!z6) {
            i123 = 0;
            while (true) {
                drawableArr = chatMessageCell.selectorDrawable;
                if (i123 < drawableArr.length) {
                }
                i123++;
            }
        }
        chatMessageCell.spoilerPressed = null;
        chatMessageCell.isCaptionSpoilerPressed = false;
        chatMessageCell.isSpoilerRevealing = false;
        chatMessageCell.linkPreviewPressed = false;
        chatMessageCell.buttonPressed = 0;
        chatMessageCell.additionalTimeOffsetY = 0;
        chatMessageCell.miniButtonPressed = 0;
        chatMessageCell.pressedBotButton = -1;
        chatMessageCell.pressedVoteButton = -1;
        chatMessageCell.pollHintPressed = false;
        chatMessageCell.psaHintPressed = false;
        chatMessageCell.linkPreviewHeight = 0;
        chatMessageCell.mediaOffsetY = 0;
        chatMessageCell.documentAttachType = 0;
        chatMessageCell.documentAttach = null;
        chatMessageCell.descriptionLayout = null;
        chatMessageCell.titleLayout = null;
        chatMessageCell.videoInfoLayout = null;
        chatMessageCell.photosCountLayout = null;
        chatMessageCell.siteNameLayout = null;
        chatMessageCell.authorLayout = null;
        chatMessageCell.captionLayout = null;
        chatMessageCell.captionWidth = 0;
        chatMessageCell.captionHeight = 0;
        chatMessageCell.captionOffsetX = 0;
        chatMessageCell.currentCaption = null;
        chatMessageCell.docTitleLayout = null;
        chatMessageCell.drawImageButton = false;
        chatMessageCell.drawVideoImageButton = false;
        chatMessageCell.currentPhotoObject = null;
        chatMessageCell.photoParentObject = null;
        chatMessageCell.currentPhotoObjectThumb = null;
        chatMessageCell.currentPhotoObjectThumbStripped = null;
        if (!z3) {
        }
        chatMessageCell.currentPhotoFilter = null;
        chatMessageCell.buttonState = -1;
        chatMessageCell.miniButtonState = -1;
        chatMessageCell.hasMiniProgress = 0;
        if (chatMessageCell.addedForTest) {
            ImageLoader.getInstance().removeTestWebFile(chatMessageCell.currentUrl);
        }
        chatMessageCell.addedForTest = false;
        chatMessageCell.photoNotSet = false;
        chatMessageCell.drawBackground = true;
        chatMessageCell.drawName = false;
        chatMessageCell.useSeekBarWaveform = false;
        chatMessageCell.useTranscribeButton = false;
        chatMessageCell.drawInstantView = false;
        chatMessageCell.drawInstantViewType = 0;
        chatMessageCell.drawForwardedName = false;
        chatMessageCell.drawCommentButton = false;
        chatMessageCell.photoImage.setSideClip(0.0f);
        chatMessageCell.photoImage.setAspectFit(false);
        chatMessageCell.gradientShader = null;
        chatMessageCell.motionBackgroundDrawable = null;
        chatMessageCell.imageBackgroundColor = 0;
        chatMessageCell.imageBackgroundGradientColor1 = 0;
        chatMessageCell.imageBackgroundGradientColor2 = 0;
        chatMessageCell.imageBackgroundIntensity = 0.0f;
        chatMessageCell.imageBackgroundGradientColor3 = 0;
        chatMessageCell.imageBackgroundGradientRotation = 45;
        chatMessageCell.imageBackgroundSideColor = 0;
        chatMessageCell.mediaBackground = false;
        chatMessageCell.photoImage.animatedFileDrawableRepeatMaxCount = 0;
        TLRPC$MessageFwdHeader tLRPC$MessageFwdHeader22 = messageObject.messageOwner.fwd_from;
        if (tLRPC$MessageFwdHeader22 == null) {
        }
        chatMessageCell.hasPsaHint = z11;
        if (z11) {
        }
        chatMessageCell.photoImage.setAlpha(1.0f);
        if (!z3) {
        }
        chatMessageCell.pollButtons.clear();
        chatMessageCell.availableTimeWidth = 0;
        chatMessageCell.photoImage.setForceLoading(false);
        chatMessageCell.photoImage.setNeedsQualityThumb(false);
        chatMessageCell.photoImage.setShouldGenerateQualityThumb(false);
        chatMessageCell.photoImage.setAllowDecodeSingleFrame(false);
        chatMessageCell.photoImage.setColorFilter(null);
        chatMessageCell.photoImage.setMediaStartEndTime(-1L, -1L);
        if (!z42) {
        }
        messageObject.reactionsChanged = false;
        groupedMessagePosition14 = chatMessageCell.currentPosition;
        if (groupedMessagePosition14 == null) {
        }
        if (groupedMessagePosition14 == null) {
        }
        if (z3) {
        }
        groupedMessages3 = chatMessageCell.currentMessagesGroup;
        if (groupedMessages3 == null) {
        }
        z12 = messageObject.isLinkedToChat(chatMessageCell.linkedChatId);
        if (!chatMessageCell.hasDiscussion) {
        }
        chatMessageCell.commentLayout = null;
        chatMessageCell.drawCommentNumber = false;
        i = messageObject.type;
        float f92 = 102.0f;
        if (i != 0) {
        }
        if (chatMessageCell.currentPosition != null) {
        }
        if (!messageObject2.isRestrictedMessage) {
        }
        c2 = 2;
        if (chatMessageCell.captionLayout != null) {
        }
        groupedMessagePosition = chatMessageCell.currentPosition;
        if (groupedMessagePosition != null) {
        }
        chatMessageCell.totalHeight += AndroidUtilities.dp(14.0f);
        messageObject3 = chatMessageCell.currentMessageObject;
        if (messageObject3.eventId == 0) {
        }
        if (messageObject.isSponsored()) {
        }
        chatMessageCell.botButtons.clear();
        if (z42) {
        }
        if (!messageObject2.isRestrictedMessage) {
            tLRPC$ReplyMarkup = messageObject2.messageOwner.reply_markup;
            if (tLRPC$ReplyMarkup instanceof TLRPC$TL_replyInlineMarkup) {
            }
        }
        chatMessageCell.substractBackgroundHeight = 0;
        chatMessageCell.keyboardHeight = 0;
        if (chatMessageCell.drawCommentButton) {
        }
        z14 = chatMessageCell.drawPinnedBottom;
        if (!z14) {
        }
        if (!z14) {
        }
        if (!messageObject.isAnyKindOfSticker()) {
        }
        if (messageObject.isAnimatedEmoji()) {
        }
        if (!chatMessageCell.drawPhotoImage) {
        }
        if (chatMessageCell.documentAttachType != 5) {
        }
        if (z13) {
        }
        if (chatMessageCell.captionLayout == null) {
        }
        if (z42) {
        }
        transcribeButton = chatMessageCell.transcribeButton;
        if (transcribeButton != null) {
        }
        updateWaveform();
        if (!z42) {
        }
        z9 = true;
        z8 = false;
        z7 = false;
        chatMessageCell.updateButtonState(z8, z7, z9);
        if (!chatMessageCell.currentMessageObject.loadingCancelled) {
            FileLoader.getInstance(chatMessageCell.currentAccount).loadFile(chatMessageCell.documentAttach, chatMessageCell.currentMessageObject, 1, 0);
            chatMessageCell.buttonState = 4;
            chatMessageCell.radialProgress.setIcon(getIconForCurrentState(), false, false);
        }
        chatMessageCellDelegate = chatMessageCell.delegate;
        if (chatMessageCellDelegate != null) {
            chatMessageCell.delegate.getTextSelectionHelper().checkDataChanged(messageObject2);
        }
        chatMessageCell.accessibilityVirtualViewBounds.clear();
        chatMessageCell.transitionParams.updatePhotoImageX = true;
        updateFlagSecure();
    }

    public static /* synthetic */ int lambda$setMessageContent$5(PollButton pollButton, PollButton pollButton2) {
        if (pollButton.decimal > pollButton2.decimal) {
            return -1;
        }
        if (pollButton.decimal < pollButton2.decimal) {
            return 1;
        }
        if (pollButton.decimal != pollButton2.decimal) {
            return 0;
        }
        if (pollButton.percent > pollButton2.percent) {
            return 1;
        }
        return pollButton.percent < pollButton2.percent ? -1 : 0;
    }

    public /* synthetic */ void lambda$setMessageContent$7(final MessageObject messageObject, final long j, final String str, final Drawable drawable, final TLRPC$Document tLRPC$Document) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.Cells.ChatMessageCell$$ExternalSyntheticLambda5
            @Override // java.lang.Runnable
            public final void run() {
                ChatMessageCell.this.lambda$setMessageContent$6(messageObject, tLRPC$Document, j, str, drawable);
            }
        });
    }

    public /* synthetic */ void lambda$setMessageContent$6(MessageObject messageObject, TLRPC$Document tLRPC$Document, long j, String str, Drawable drawable) {
        Long l;
        messageObject.emojiAnimatedSticker = tLRPC$Document;
        if (messageObject == this.currentMessageObject && (l = this.fetchingAnimatedEmojiDocument) != null && l.longValue() == j) {
            this.fetchingAnimatedEmojiDocument = null;
            this.photoImage.setCrossfadeWithOldImage(true);
            this.photoImage.setImage(ImageLocation.getForDocument(tLRPC$Document), str, null, str, null, null, drawable, tLRPC$Document.size, null, tLRPC$Document, 1);
        }
    }

    private void updateFlagSecure() {
        Runnable runnable;
        TLRPC$Message tLRPC$Message;
        MessageObject messageObject = this.currentMessageObject;
        boolean z = (messageObject == null || (tLRPC$Message = messageObject.messageOwner) == null || !tLRPC$Message.noforwards) ? false : true;
        Activity findActivity = AndroidUtilities.findActivity(getContext());
        if (z && this.unregisterFlagSecure == null && findActivity != null) {
            this.unregisterFlagSecure = AndroidUtilities.registerFlagSecure(findActivity.getWindow());
        } else if (z || (runnable = this.unregisterFlagSecure) == null) {
        } else {
            runnable.run();
            this.unregisterFlagSecure = null;
        }
    }

    public void checkVideoPlayback(boolean z, Bitmap bitmap) {
        if (this.currentMessageObject.isVideo()) {
            if (MediaController.getInstance().isPlayingMessage(this.currentMessageObject)) {
                this.photoImage.setAllowStartAnimation(false);
                this.photoImage.stopAnimation();
                return;
            }
            this.photoImage.setAllowStartAnimation(true);
            this.photoImage.startAnimation();
            return;
        }
        if (z) {
            MessageObject playingMessageObject = MediaController.getInstance().getPlayingMessageObject();
            z = playingMessageObject == null || !playingMessageObject.isRoundVideo();
        }
        this.photoImage.setAllowStartAnimation(z);
        if (bitmap != null) {
            this.photoImage.startCrossfadeFromStaticThumb(bitmap);
        }
        if (z) {
            this.photoImage.startAnimation();
        } else {
            this.photoImage.stopAnimation();
        }
    }

    private static boolean spanSupportsLongPress(CharacterStyle characterStyle) {
        return (characterStyle instanceof URLSpanMono) || (characterStyle instanceof URLSpan);
    }

    @Override // org.telegram.ui.Cells.BaseCell
    protected boolean onLongPress() {
        int i;
        int i2;
        boolean z = false;
        if (this.isRoundVideo && this.isPlayingRound && MediaController.getInstance().isPlayingMessage(this.currentMessageObject) && ((this.lastTouchX - this.photoImage.getCenterX()) * (this.lastTouchX - this.photoImage.getCenterX())) + ((this.lastTouchY - this.photoImage.getCenterY()) * (this.lastTouchY - this.photoImage.getCenterY())) < (this.photoImage.getImageWidth() / 2.0f) * (this.photoImage.getImageWidth() / 2.0f) && (this.lastTouchX > this.photoImage.getCenterX() + (this.photoImage.getImageWidth() / 4.0f) || this.lastTouchX < this.photoImage.getCenterX() - (this.photoImage.getImageWidth() / 4.0f))) {
            boolean z2 = this.lastTouchX > this.photoImage.getCenterX();
            if (this.videoPlayerRewinder == null) {
                this.videoForwardDrawable = new VideoForwardDrawable(true);
                this.videoPlayerRewinder = new VideoPlayerRewinder() { // from class: org.telegram.ui.Cells.ChatMessageCell.4
                    @Override // org.telegram.messenger.video.VideoPlayerRewinder
                    protected void onRewindCanceled() {
                        ChatMessageCell.this.onTouchEvent(MotionEvent.obtain(0L, 0L, 3, 0.0f, 0.0f, 0));
                        ChatMessageCell.this.videoForwardDrawable.setShowing(false);
                    }

                    @Override // org.telegram.messenger.video.VideoPlayerRewinder
                    protected void updateRewindProgressUi(long j, float f, boolean z3) {
                        ChatMessageCell.this.videoForwardDrawable.setTime(Math.abs(j));
                        if (z3) {
                            ChatMessageCell.this.currentMessageObject.audioProgress = f;
                            ChatMessageCell.this.updatePlayingMessageProgress();
                        }
                    }

                    @Override // org.telegram.messenger.video.VideoPlayerRewinder
                    protected void onRewindStart(boolean z3) {
                        ChatMessageCell.this.videoForwardDrawable.setDelegate(new VideoForwardDrawable.VideoForwardDrawableDelegate() { // from class: org.telegram.ui.Cells.ChatMessageCell.4.1
                            @Override // org.telegram.ui.Components.VideoForwardDrawable.VideoForwardDrawableDelegate
                            public void onAnimationEnd() {
                            }

                            @Override // org.telegram.ui.Components.VideoForwardDrawable.VideoForwardDrawableDelegate
                            public void invalidate() {
                                ChatMessageCell.this.invalidate();
                            }
                        });
                        ChatMessageCell.this.videoForwardDrawable.setOneShootAnimation(false);
                        ChatMessageCell.this.videoForwardDrawable.setLeftSide(!z3);
                        ChatMessageCell.this.videoForwardDrawable.setShowing(true);
                        ChatMessageCell.this.invalidate();
                    }
                };
                getParent().requestDisallowInterceptTouchEvent(true);
            }
            this.videoPlayerRewinder.startRewind(MediaController.getInstance().getVideoPlayer(), z2, MediaController.getInstance().getPlaybackSpeed(false));
            return false;
        }
        LinkSpanDrawable linkSpanDrawable = this.pressedLink;
        if (linkSpanDrawable != null) {
            if (linkSpanDrawable.getSpan() instanceof URLSpanMono) {
                this.hadLongPress = true;
                this.delegate.didPressUrl(this, this.pressedLink.getSpan(), true);
                return true;
            } else if (this.pressedLink.getSpan() instanceof URLSpanNoUnderline) {
                URLSpanNoUnderline uRLSpanNoUnderline = (URLSpanNoUnderline) this.pressedLink.getSpan();
                if (ChatActivity.isClickableLink(uRLSpanNoUnderline.getURL()) || uRLSpanNoUnderline.getURL().startsWith("/")) {
                    this.hadLongPress = true;
                    this.delegate.didPressUrl(this, this.pressedLink.getSpan(), true);
                    return true;
                }
            } else if (this.pressedLink.getSpan() instanceof URLSpan) {
                this.hadLongPress = true;
                this.delegate.didPressUrl(this, this.pressedLink.getSpan(), true);
                return true;
            }
        }
        resetPressedLink(-1);
        if (this.buttonPressed != 0 || this.miniButtonPressed != 0 || this.videoButtonPressed != 0 || this.pressedBotButton != -1) {
            this.buttonPressed = 0;
            this.miniButtonPressed = 0;
            this.videoButtonPressed = 0;
            this.pressedBotButton = -1;
            invalidate();
        }
        this.linkPreviewPressed = false;
        this.sideButtonPressed = false;
        this.imagePressed = false;
        this.timePressed = false;
        this.gamePreviewPressed = false;
        if (this.pressedVoteButton != -1 || this.pollHintPressed || this.psaHintPressed || this.instantPressed || this.otherPressed || this.commentButtonPressed) {
            this.commentButtonPressed = false;
            this.instantButtonPressed = false;
            this.instantPressed = false;
            this.pressedVoteButton = -1;
            this.pollHintPressed = false;
            this.psaHintPressed = false;
            this.otherPressed = false;
            if (Build.VERSION.SDK_INT >= 21) {
                int i3 = 0;
                while (true) {
                    Drawable[] drawableArr = this.selectorDrawable;
                    if (i3 >= drawableArr.length) {
                        break;
                    }
                    if (drawableArr[i3] != null) {
                        drawableArr[i3].setState(StateSet.NOTHING);
                    }
                    i3++;
                }
            }
            invalidate();
        }
        ChatMessageCellDelegate chatMessageCellDelegate = this.delegate;
        if (chatMessageCellDelegate != null) {
            if (this.avatarPressed) {
                TLRPC$User tLRPC$User = this.currentUser;
                if (tLRPC$User != null) {
                    if (tLRPC$User.id != 0) {
                        z = chatMessageCellDelegate.didLongPressUserAvatar(this, tLRPC$User, this.lastTouchX, this.lastTouchY);
                    }
                } else {
                    TLRPC$Chat tLRPC$Chat = this.currentChat;
                    if (tLRPC$Chat != null) {
                        TLRPC$MessageFwdHeader tLRPC$MessageFwdHeader = this.currentMessageObject.messageOwner.fwd_from;
                        if (tLRPC$MessageFwdHeader != null) {
                            if ((tLRPC$MessageFwdHeader.flags & 16) != 0) {
                                i2 = tLRPC$MessageFwdHeader.saved_from_msg_id;
                            } else {
                                i2 = tLRPC$MessageFwdHeader.channel_post;
                            }
                            i = i2;
                        } else {
                            i = 0;
                        }
                        z = chatMessageCellDelegate.didLongPressChannelAvatar(this, tLRPC$Chat, i, this.lastTouchX, this.lastTouchY);
                    }
                }
            }
            if (!z) {
                this.delegate.didLongPress(this, this.lastTouchX, this.lastTouchY);
            }
        }
        return true;
    }

    public void showHintButton(boolean z, boolean z2, int i) {
        float f = 1.0f;
        if (i == -1 || i == 0) {
            if (this.hintButtonVisible == z) {
                return;
            }
            this.hintButtonVisible = z;
            if (!z2) {
                this.hintButtonProgress = z ? 1.0f : 0.0f;
            } else {
                invalidate();
            }
        }
        if ((i == -1 || i == 1) && this.psaButtonVisible != z) {
            this.psaButtonVisible = z;
            if (!z2) {
                if (!z) {
                    f = 0.0f;
                }
                this.psaButtonProgress = f;
                return;
            }
            setInvalidatesParent(true);
            invalidate();
        }
    }

    public void setCheckPressed(boolean z, boolean z2) {
        this.isCheckPressed = z;
        this.isPressed = z2;
        updateRadialProgressBackground();
        if (this.useSeekBarWaveform) {
            this.seekBarWaveform.setSelected(isDrawSelectionBackground());
        } else {
            this.seekBar.setSelected(isDrawSelectionBackground());
        }
        invalidate();
    }

    public void setInvalidateSpoilersParent(boolean z) {
        this.invalidateSpoilersParent = z;
    }

    public void setInvalidatesParent(boolean z) {
        this.invalidatesParent = z;
    }

    @Override // android.view.View, org.telegram.ui.Cells.TextSelectionHelper.SelectableView
    public void invalidate() {
        ChatMessageCellDelegate chatMessageCellDelegate;
        if (this.currentMessageObject == null) {
            return;
        }
        super.invalidate();
        if ((this.invalidatesParent || (this.currentMessagesGroup != null && !this.links.isEmpty())) && getParent() != null) {
            View view = (View) getParent();
            if (view.getParent() != null) {
                view.invalidate();
                ((View) view.getParent()).invalidate();
            }
        }
        if (!this.isBlurred || (chatMessageCellDelegate = this.delegate) == null) {
            return;
        }
        chatMessageCellDelegate.invalidateBlur();
    }

    @Override // android.view.View
    public void invalidate(int i, int i2, int i3, int i4) {
        ChatMessageCellDelegate chatMessageCellDelegate;
        if (this.currentMessageObject == null) {
            return;
        }
        super.invalidate(i, i2, i3, i4);
        if (this.invalidatesParent && getParent() != null) {
            ((View) getParent()).invalidate(((int) getX()) + i, ((int) getY()) + i2, ((int) getX()) + i3, ((int) getY()) + i4);
        }
        if (!this.isBlurred || (chatMessageCellDelegate = this.delegate) == null) {
            return;
        }
        chatMessageCellDelegate.invalidateBlur();
    }

    public boolean isHighlightedAnimated() {
        return this.isHighlightedAnimated;
    }

    public void setHighlightedAnimated() {
        this.isHighlightedAnimated = true;
        this.highlightProgress = 1000;
        this.lastHighlightProgressTime = System.currentTimeMillis();
        invalidate();
        if (getParent() != null) {
            ((View) getParent()).invalidate();
        }
    }

    public boolean isHighlighted() {
        return this.isHighlighted;
    }

    public void setHighlighted(boolean z) {
        if (this.isHighlighted == z) {
            return;
        }
        this.isHighlighted = z;
        if (!z) {
            this.lastHighlightProgressTime = System.currentTimeMillis();
            this.isHighlightedAnimated = true;
            this.highlightProgress = 300;
        } else {
            this.isHighlightedAnimated = false;
            this.highlightProgress = 0;
        }
        updateRadialProgressBackground();
        if (this.useSeekBarWaveform) {
            this.seekBarWaveform.setSelected(isDrawSelectionBackground());
        } else {
            this.seekBar.setSelected(isDrawSelectionBackground());
        }
        invalidate();
        if (getParent() == null) {
            return;
        }
        ((View) getParent()).invalidate();
    }

    @Override // android.view.View
    public void setPressed(boolean z) {
        super.setPressed(z);
        updateRadialProgressBackground();
        if (this.useSeekBarWaveform) {
            this.seekBarWaveform.setSelected(isDrawSelectionBackground());
        } else {
            this.seekBar.setSelected(isDrawSelectionBackground());
        }
        invalidate();
    }

    private void updateRadialProgressBackground() {
        if (this.drawRadialCheckBackground) {
            return;
        }
        boolean z = true;
        boolean z2 = (this.isHighlighted || this.isPressed || isPressed()) && (!this.drawPhotoImage || !this.photoImage.hasBitmapImage());
        this.radialProgress.setPressed(z2 || this.buttonPressed != 0, false);
        if (this.hasMiniProgress != 0) {
            this.radialProgress.setPressed(z2 || this.miniButtonPressed != 0, true);
        }
        RadialProgress2 radialProgress2 = this.videoRadialProgress;
        if (!z2 && this.videoButtonPressed == 0) {
            z = false;
        }
        radialProgress2.setPressed(z, false);
    }

    @Override // org.telegram.ui.Components.SeekBar.SeekBarDelegate
    public void onSeekBarDrag(float f) {
        MessageObject messageObject = this.currentMessageObject;
        if (messageObject == null) {
            return;
        }
        messageObject.audioProgress = f;
        MediaController.getInstance().seekToProgress(this.currentMessageObject, f);
        updatePlayingMessageProgress();
    }

    @Override // org.telegram.ui.Components.SeekBar.SeekBarDelegate
    public void onSeekBarContinuousDrag(float f) {
        MessageObject messageObject = this.currentMessageObject;
        if (messageObject == null) {
            return;
        }
        messageObject.audioProgress = f;
        messageObject.audioProgressSec = (int) (messageObject.getDuration() * f);
        updatePlayingMessageProgress();
    }

    public boolean isAnimatingPollAnswer() {
        return this.animatePollAnswerAlpha;
    }

    private void updateWaveform() {
        TLRPC$Message tLRPC$Message;
        if (this.currentMessageObject == null || this.documentAttachType != 3) {
            return;
        }
        boolean z = false;
        int i = 0;
        while (true) {
            if (i >= this.documentAttach.attributes.size()) {
                break;
            }
            TLRPC$DocumentAttribute tLRPC$DocumentAttribute = this.documentAttach.attributes.get(i);
            if (tLRPC$DocumentAttribute instanceof TLRPC$TL_documentAttributeAudio) {
                byte[] bArr = tLRPC$DocumentAttribute.waveform;
                if (bArr == null || bArr.length == 0) {
                    MediaController.getInstance().generateWaveform(this.currentMessageObject);
                }
                byte[] bArr2 = tLRPC$DocumentAttribute.waveform;
                this.useSeekBarWaveform = bArr2 != null;
                this.seekBarWaveform.setWaveform(bArr2);
            } else {
                i++;
            }
        }
        if (this.currentMessageObject.isVoice() && this.useSeekBarWaveform && (tLRPC$Message = this.currentMessageObject.messageOwner) != null && !(tLRPC$Message.media instanceof TLRPC$TL_messageMediaWebPage) && UserConfig.getInstance(this.currentAccount).isPremium()) {
            z = true;
        }
        this.useTranscribeButton = z;
        updateSeekBarWaveformWidth();
    }

    private void updateSeekBarWaveformWidth() {
        if (this.seekBarWaveform != null) {
            int dp = (-AndroidUtilities.dp((this.hasLinkPreview ? 10 : 0) + 92)) - AndroidUtilities.dp(this.useTranscribeButton ? 34.0f : 0.0f);
            TransitionParams transitionParams = this.transitionParams;
            if (transitionParams.animateBackgroundBoundsInner && this.documentAttachType == 3) {
                int i = this.backgroundWidth;
                this.seekBarWaveform.setSize(((int) ((i - transitionParams.deltaLeft) + transitionParams.deltaRight)) + dp, AndroidUtilities.dp(30.0f), i + dp, ((int) ((i - transitionParams.toDeltaLeft) + transitionParams.toDeltaRight)) + dp);
                return;
            }
            this.seekBarWaveform.setSize(this.backgroundWidth + dp, AndroidUtilities.dp(30.0f));
        }
    }

    private int createDocumentLayout(int i, MessageObject messageObject) {
        int i2;
        int i3;
        int i4 = i;
        if (messageObject.type == 0) {
            this.documentAttach = messageObject.messageOwner.media.webpage.document;
        } else {
            this.documentAttach = messageObject.getDocument();
        }
        TLRPC$Document tLRPC$Document = this.documentAttach;
        int i5 = 0;
        if (tLRPC$Document == null) {
            return 0;
        }
        if (MessageObject.isVoiceDocument(tLRPC$Document)) {
            this.documentAttachType = 3;
            int i6 = 0;
            while (true) {
                if (i6 >= this.documentAttach.attributes.size()) {
                    i3 = 0;
                    break;
                }
                TLRPC$DocumentAttribute tLRPC$DocumentAttribute = this.documentAttach.attributes.get(i6);
                if (tLRPC$DocumentAttribute instanceof TLRPC$TL_documentAttributeAudio) {
                    i3 = tLRPC$DocumentAttribute.duration;
                    break;
                }
                i6++;
            }
            this.widthBeforeNewTimeLine = (i4 - AndroidUtilities.dp(94.0f)) - ((int) Math.ceil(Theme.chat_audioTimePaint.measureText("00:00")));
            this.availableTimeWidth = i4 - AndroidUtilities.dp(18.0f);
            measureTime(messageObject);
            int dp = AndroidUtilities.dp(174.0f) + this.timeWidth;
            if (!this.hasLinkPreview) {
                this.backgroundWidth = Math.min(i4, dp + ((int) Math.ceil(Theme.chat_audioTimePaint.measureText(AndroidUtilities.formatLongDuration(i3)))));
            }
            this.seekBarWaveform.setMessageObject(messageObject);
            return 0;
        } else if (MessageObject.isVideoDocument(this.documentAttach)) {
            this.documentAttachType = 4;
            if (!messageObject.needDrawBluredPreview()) {
                updatePlayingMessageProgress();
                String format = String.format("%s", AndroidUtilities.formatFileSize(this.documentAttach.size));
                this.docTitleWidth = (int) Math.ceil(Theme.chat_infoPaint.measureText(format));
                this.docTitleLayout = new StaticLayout(format, Theme.chat_infoPaint, this.docTitleWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
            }
            return 0;
        } else if (MessageObject.isMusicDocument(this.documentAttach)) {
            this.documentAttachType = 5;
            int dp2 = i4 - AndroidUtilities.dp(92.0f);
            if (dp2 < 0) {
                dp2 = AndroidUtilities.dp(100.0f);
            }
            int i7 = dp2;
            StaticLayout staticLayout = new StaticLayout(TextUtils.ellipsize(messageObject.getMusicTitle().replace('\n', ' '), Theme.chat_audioTitlePaint, i7 - AndroidUtilities.dp(12.0f), TextUtils.TruncateAt.END), Theme.chat_audioTitlePaint, i7, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
            this.songLayout = staticLayout;
            if (staticLayout.getLineCount() > 0) {
                this.songX = -((int) Math.ceil(this.songLayout.getLineLeft(0)));
            }
            StaticLayout staticLayout2 = new StaticLayout(TextUtils.ellipsize(messageObject.getMusicAuthor().replace('\n', ' '), Theme.chat_audioPerformerPaint, i7, TextUtils.TruncateAt.END), Theme.chat_audioPerformerPaint, i7, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
            this.performerLayout = staticLayout2;
            if (staticLayout2.getLineCount() > 0) {
                this.performerX = -((int) Math.ceil(this.performerLayout.getLineLeft(0)));
            }
            int i8 = 0;
            while (true) {
                if (i8 >= this.documentAttach.attributes.size()) {
                    break;
                }
                TLRPC$DocumentAttribute tLRPC$DocumentAttribute2 = this.documentAttach.attributes.get(i8);
                if (tLRPC$DocumentAttribute2 instanceof TLRPC$TL_documentAttributeAudio) {
                    i5 = tLRPC$DocumentAttribute2.duration;
                    break;
                }
                i8++;
            }
            int ceil = (int) Math.ceil(Theme.chat_audioTimePaint.measureText(AndroidUtilities.formatShortDuration(i5, i5)));
            this.widthBeforeNewTimeLine = (this.backgroundWidth - AndroidUtilities.dp(86.0f)) - ceil;
            this.availableTimeWidth = this.backgroundWidth - AndroidUtilities.dp(28.0f);
            return ceil;
        } else if (MessageObject.isGifDocument(this.documentAttach, messageObject.hasValidGroupId())) {
            this.documentAttachType = 2;
            if (!messageObject.needDrawBluredPreview()) {
                String string = LocaleController.getString("AttachGif", R.string.AttachGif);
                this.infoWidth = (int) Math.ceil(Theme.chat_infoPaint.measureText(string));
                this.infoLayout = new StaticLayout(string, Theme.chat_infoPaint, this.infoWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
                String format2 = String.format("%s", AndroidUtilities.formatFileSize(this.documentAttach.size));
                this.docTitleWidth = (int) Math.ceil(Theme.chat_infoPaint.measureText(format2));
                this.docTitleLayout = new StaticLayout(format2, Theme.chat_infoPaint, this.docTitleWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
            }
            return 0;
        } else {
            String str = this.documentAttach.mime_type;
            boolean z = (str != null && (str.toLowerCase().startsWith("image/") || this.documentAttach.mime_type.toLowerCase().startsWith("video/mp4"))) || MessageObject.isDocumentHasThumb(this.documentAttach);
            this.drawPhotoImage = z;
            if (!z) {
                i4 += AndroidUtilities.dp(30.0f);
            }
            this.documentAttachType = 1;
            String documentFileName = FileLoader.getDocumentFileName(this.documentAttach);
            if (documentFileName.length() == 0) {
                documentFileName = LocaleController.getString("AttachDocument", R.string.AttachDocument);
            }
            StaticLayout createStaticLayout = StaticLayoutEx.createStaticLayout(documentFileName, Theme.chat_docNamePaint, i4, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false, TextUtils.TruncateAt.MIDDLE, i4, 2, false);
            this.docTitleLayout = createStaticLayout;
            this.docTitleOffsetX = Integer.MIN_VALUE;
            if (createStaticLayout != null && createStaticLayout.getLineCount() > 0) {
                int i9 = 0;
                while (i5 < this.docTitleLayout.getLineCount()) {
                    i9 = Math.max(i9, (int) Math.ceil(this.docTitleLayout.getLineWidth(i5)));
                    this.docTitleOffsetX = Math.max(this.docTitleOffsetX, (int) Math.ceil(-this.docTitleLayout.getLineLeft(i5)));
                    i5++;
                }
                i2 = Math.min(i4, i9);
            } else {
                this.docTitleOffsetX = 0;
                i2 = i4;
            }
            int dp3 = i4 - AndroidUtilities.dp(30.0f);
            TextPaint textPaint = Theme.chat_infoPaint;
            int min = Math.min(dp3, (int) Math.ceil(textPaint.measureText("000.0 mm / " + AndroidUtilities.formatFileSize(this.documentAttach.size))));
            this.infoWidth = min;
            CharSequence ellipsize = TextUtils.ellipsize(AndroidUtilities.formatFileSize(this.documentAttach.size) + " " + FileLoader.getDocumentExtension(this.documentAttach), Theme.chat_infoPaint, (float) min, TextUtils.TruncateAt.END);
            try {
                if (this.infoWidth < 0) {
                    this.infoWidth = AndroidUtilities.dp(10.0f);
                }
                this.infoLayout = new StaticLayout(ellipsize, Theme.chat_infoPaint, this.infoWidth + AndroidUtilities.dp(6.0f), Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
            } catch (Exception e) {
                FileLog.e(e);
            }
            if (this.drawPhotoImage) {
                this.currentPhotoObject = FileLoader.getClosestPhotoSizeWithSize(messageObject.photoThumbs, 320);
                this.currentPhotoObjectThumb = FileLoader.getClosestPhotoSizeWithSize(messageObject.photoThumbs, 40);
                if ((DownloadController.getInstance(this.currentAccount).getAutodownloadMask() & 1) == 0) {
                    this.currentPhotoObject = null;
                }
                TLRPC$PhotoSize tLRPC$PhotoSize = this.currentPhotoObject;
                if (tLRPC$PhotoSize == null || tLRPC$PhotoSize == this.currentPhotoObjectThumb) {
                    this.currentPhotoObject = null;
                    this.photoImage.setNeedsQualityThumb(true);
                    this.photoImage.setShouldGenerateQualityThumb(true);
                } else {
                    BitmapDrawable bitmapDrawable = this.currentMessageObject.strippedThumb;
                    if (bitmapDrawable != null) {
                        this.currentPhotoObjectThumb = null;
                        this.currentPhotoObjectThumbStripped = bitmapDrawable;
                    }
                }
                this.currentPhotoFilter = "86_86_b";
                this.photoImage.setImage(ImageLocation.getForObject(this.currentPhotoObject, messageObject.photoThumbsObject), "86_86", ImageLocation.getForObject(this.currentPhotoObjectThumb, messageObject.photoThumbsObject), this.currentPhotoFilter, this.currentPhotoObjectThumbStripped, 0L, null, messageObject, 1);
            }
            return i2;
        }
    }

    private void calcBackgroundWidth(int i, int i2, int i3) {
        ReactionsLayoutInBubble reactionsLayoutInBubble = this.reactionsLayoutInBubble;
        boolean z = reactionsLayoutInBubble.isEmpty;
        int i4 = (z || reactionsLayoutInBubble.isSmall) ? this.currentMessageObject.lastLineWidth : reactionsLayoutInBubble.lastLineX;
        boolean z2 = false;
        if (!z && !reactionsLayoutInBubble.isSmall) {
            if (i - i4 < i2 || this.currentMessageObject.hasRtl) {
                z2 = true;
            }
            if (this.hasInvoicePreview) {
                this.totalHeight += AndroidUtilities.dp(14.0f);
            }
        } else if (this.hasLinkPreview || this.hasOldCaptionPreview || this.hasGamePreview || this.hasInvoicePreview || i - i4 < i2 || this.currentMessageObject.hasRtl) {
            z2 = true;
        }
        if (z2) {
            this.totalHeight += AndroidUtilities.dp(14.0f);
            this.hasNewLineForTime = true;
            int max = Math.max(i3, i4) + AndroidUtilities.dp(31.0f);
            this.backgroundWidth = max;
            this.backgroundWidth = Math.max(max, (this.currentMessageObject.isOutOwner() ? this.timeWidth + AndroidUtilities.dp(17.0f) : this.timeWidth) + AndroidUtilities.dp(31.0f));
            return;
        }
        int extraTextX = (i3 - getExtraTextX()) - i4;
        if (extraTextX >= 0 && extraTextX <= i2) {
            this.backgroundWidth = ((i3 + i2) - extraTextX) + AndroidUtilities.dp(31.0f);
        } else {
            this.backgroundWidth = Math.max(i3, i4 + i2) + AndroidUtilities.dp(31.0f);
        }
    }

    public void setHighlightedText(String str) {
        MessageObject messageObject = this.messageObjectToSet;
        if (messageObject == null) {
            messageObject = this.currentMessageObject;
        }
        if (messageObject == null || messageObject.messageOwner.message == null || TextUtils.isEmpty(str)) {
            if (this.urlPathSelection.isEmpty()) {
                return;
            }
            this.linkSelectionBlockNum = -1;
            resetUrlPaths();
            invalidate();
            return;
        }
        String lowerCase = str.toLowerCase();
        String lowerCase2 = messageObject.messageOwner.message.toLowerCase();
        int length = lowerCase2.length();
        int i = -1;
        int i2 = -1;
        for (int i3 = 0; i3 < length; i3++) {
            int min = Math.min(lowerCase.length(), length - i3);
            int i4 = 0;
            for (int i5 = 0; i5 < min; i5++) {
                boolean z = lowerCase2.charAt(i3 + i5) == lowerCase.charAt(i5);
                if (z) {
                    if (i4 != 0 || i3 == 0 || " !\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~\n".indexOf(lowerCase2.charAt(i3 - 1)) >= 0) {
                        i4++;
                    } else {
                        z = false;
                    }
                }
                if (!z || i5 == min - 1) {
                    if (i4 > 0 && i4 > i2) {
                        i = i3;
                        i2 = i4;
                    }
                }
            }
        }
        if (i == -1) {
            if (this.urlPathSelection.isEmpty()) {
                return;
            }
            this.linkSelectionBlockNum = -1;
            resetUrlPaths();
            invalidate();
            return;
        }
        int length2 = lowerCase2.length();
        for (int i6 = i + i2; i6 < length2 && " !\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~\n".indexOf(lowerCase2.charAt(i6)) < 0; i6++) {
            i2++;
        }
        int i7 = i + i2;
        if (this.captionLayout != null && !TextUtils.isEmpty(messageObject.caption)) {
            resetUrlPaths();
            try {
                LinkPath obtainNewUrlPath = obtainNewUrlPath();
                obtainNewUrlPath.setCurrentLayout(this.captionLayout, i, 0.0f);
                this.captionLayout.getSelectionPath(i, i7, obtainNewUrlPath);
            } catch (Exception e) {
                FileLog.e(e);
            }
            invalidate();
        } else if (messageObject.textLayoutBlocks != null) {
            for (int i8 = 0; i8 < messageObject.textLayoutBlocks.size(); i8++) {
                MessageObject.TextLayoutBlock textLayoutBlock = messageObject.textLayoutBlocks.get(i8);
                if (i >= textLayoutBlock.charactersOffset && i < textLayoutBlock.charactersEnd) {
                    this.linkSelectionBlockNum = i8;
                    resetUrlPaths();
                    try {
                        LinkPath obtainNewUrlPath2 = obtainNewUrlPath();
                        obtainNewUrlPath2.setCurrentLayout(textLayoutBlock.textLayout, i, 0.0f);
                        textLayoutBlock.textLayout.getSelectionPath(i, i7, obtainNewUrlPath2);
                        if (i7 >= textLayoutBlock.charactersOffset + i2) {
                            for (int i9 = i8 + 1; i9 < messageObject.textLayoutBlocks.size(); i9++) {
                                MessageObject.TextLayoutBlock textLayoutBlock2 = messageObject.textLayoutBlocks.get(i9);
                                int i10 = textLayoutBlock2.charactersEnd - textLayoutBlock2.charactersOffset;
                                LinkPath obtainNewUrlPath3 = obtainNewUrlPath();
                                obtainNewUrlPath3.setCurrentLayout(textLayoutBlock2.textLayout, 0, textLayoutBlock2.height);
                                textLayoutBlock2.textLayout.getSelectionPath(0, i7 - textLayoutBlock2.charactersOffset, obtainNewUrlPath3);
                                if (i7 < (textLayoutBlock.charactersOffset + i10) - 1) {
                                    break;
                                }
                            }
                        }
                    } catch (Exception e2) {
                        FileLog.e(e2);
                    }
                    invalidate();
                    return;
                }
            }
        }
    }

    @Override // android.view.View
    protected boolean verifyDrawable(Drawable drawable) {
        if (!super.verifyDrawable(drawable)) {
            Drawable[] drawableArr = this.selectorDrawable;
            if (drawable != drawableArr[0] && drawable != drawableArr[1]) {
                return false;
            }
        }
        return true;
    }

    @Override // android.view.View, android.graphics.drawable.Drawable.Callback
    public void invalidateDrawable(Drawable drawable) {
        super.invalidateDrawable(drawable);
        if (this.currentMessagesGroup != null) {
            invalidateWithParent();
        }
    }

    private boolean isCurrentLocationTimeExpired(MessageObject messageObject) {
        return this.currentMessageObject.messageOwner.media.period % 60 == 0 ? Math.abs(ConnectionsManager.getInstance(this.currentAccount).getCurrentTime() - messageObject.messageOwner.date) > messageObject.messageOwner.media.period : Math.abs(ConnectionsManager.getInstance(this.currentAccount).getCurrentTime() - messageObject.messageOwner.date) > messageObject.messageOwner.media.period + (-5);
    }

    public void checkLocationExpired() {
        boolean isCurrentLocationTimeExpired;
        MessageObject messageObject = this.currentMessageObject;
        if (messageObject == null || (isCurrentLocationTimeExpired = isCurrentLocationTimeExpired(messageObject)) == this.locationExpired) {
            return;
        }
        this.locationExpired = isCurrentLocationTimeExpired;
        if (!isCurrentLocationTimeExpired) {
            AndroidUtilities.runOnUIThread(this.invalidateRunnable, 1000L);
            this.scheduledInvalidate = true;
            int dp = this.backgroundWidth - AndroidUtilities.dp(91.0f);
            this.docTitleLayout = new StaticLayout(TextUtils.ellipsize(LocaleController.getString("AttachLiveLocation", R.string.AttachLiveLocation), Theme.chat_locationTitlePaint, dp, TextUtils.TruncateAt.END), Theme.chat_locationTitlePaint, dp, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
            return;
        }
        MessageObject messageObject2 = this.currentMessageObject;
        this.currentMessageObject = null;
        setMessageObject(messageObject2, this.currentMessagesGroup, this.pinnedBottom, this.pinnedTop);
    }

    public void setIsUpdating(boolean z) {
        this.isUpdating = true;
    }

    public void setMessageObject(MessageObject messageObject, MessageObject.GroupedMessages groupedMessages, boolean z, boolean z2) {
        if (this.attachedToWindow) {
            setMessageContent(messageObject, groupedMessages, z, z2);
            return;
        }
        this.messageObjectToSet = messageObject;
        this.groupedMessagesToSet = groupedMessages;
        this.bottomNearToSet = z;
        this.topNearToSet = z2;
    }

    private int getAdditionalWidthForPosition(MessageObject.GroupedMessagePosition groupedMessagePosition) {
        int i = 0;
        if (groupedMessagePosition != null) {
            if ((groupedMessagePosition.flags & 2) == 0) {
                i = 0 + AndroidUtilities.dp(4.0f);
            }
            return (groupedMessagePosition.flags & 1) == 0 ? i + AndroidUtilities.dp(4.0f) : i;
        }
        return 0;
    }

    public void createSelectorDrawable(final int i) {
        int i2;
        if (Build.VERSION.SDK_INT < 21) {
            return;
        }
        String str = "chat_outPreviewInstantText";
        if (this.psaHintPressed) {
            i2 = getThemedColor(this.currentMessageObject.isOutOwner() ? "chat_outViews" : "chat_inViews");
        } else {
            i2 = getThemedColor(this.currentMessageObject.isOutOwner() ? str : "chat_inPreviewInstantText");
        }
        Drawable[] drawableArr = this.selectorDrawable;
        if (drawableArr[i] == null) {
            final Paint paint = new Paint(1);
            paint.setColor(-1);
            Drawable drawable = new Drawable() { // from class: org.telegram.ui.Cells.ChatMessageCell.5
                RectF rect = new RectF();
                Path path = new Path();

                @Override // android.graphics.drawable.Drawable
                public int getOpacity() {
                    return -2;
                }

                @Override // android.graphics.drawable.Drawable
                public void setAlpha(int i3) {
                }

                @Override // android.graphics.drawable.Drawable
                public void setColorFilter(ColorFilter colorFilter) {
                }

                @Override // android.graphics.drawable.Drawable
                public void draw(Canvas canvas) {
                    Rect bounds = getBounds();
                    this.rect.set(bounds.left, bounds.top, bounds.right, bounds.bottom);
                    if (ChatMessageCell.this.selectorDrawableMaskType[i] != 3 && ChatMessageCell.this.selectorDrawableMaskType[i] != 4) {
                        float f = 0.0f;
                        if (ChatMessageCell.this.selectorDrawableMaskType[i] == 2) {
                            this.path.reset();
                            boolean z = ChatMessageCell.this.currentMessageObject != null && ChatMessageCell.this.currentMessageObject.isOutOwner();
                            for (int i3 = 0; i3 < 4; i3++) {
                                if (!ChatMessageCell.this.instantTextNewLine) {
                                    if (i3 == 2 && !z) {
                                        float[] fArr = ChatMessageCell.radii;
                                        int i4 = i3 * 2;
                                        float dp = AndroidUtilities.dp(SharedConfig.bubbleRadius);
                                        ChatMessageCell.radii[i4 + 1] = dp;
                                        fArr[i4] = dp;
                                    } else if (i3 != 3 || !z) {
                                        if ((ChatMessageCell.this.mediaBackground || ChatMessageCell.this.pinnedBottom) && (i3 == 2 || i3 == 3)) {
                                            float[] fArr2 = ChatMessageCell.radii;
                                            int i5 = i3 * 2;
                                            float[] fArr3 = ChatMessageCell.radii;
                                            int i6 = i5 + 1;
                                            float dp2 = AndroidUtilities.dp(ChatMessageCell.this.pinnedBottom ? Math.min(5, SharedConfig.bubbleRadius) : SharedConfig.bubbleRadius);
                                            fArr3[i6] = dp2;
                                            fArr2[i5] = dp2;
                                        }
                                    } else {
                                        float[] fArr4 = ChatMessageCell.radii;
                                        int i7 = i3 * 2;
                                        float dp3 = AndroidUtilities.dp(SharedConfig.bubbleRadius);
                                        ChatMessageCell.radii[i7 + 1] = dp3;
                                        fArr4[i7] = dp3;
                                    }
                                }
                                float[] fArr5 = ChatMessageCell.radii;
                                int i8 = i3 * 2;
                                ChatMessageCell.radii[i8 + 1] = 0.0f;
                                fArr5[i8] = 0.0f;
                            }
                            this.path.addRoundRect(this.rect, ChatMessageCell.radii, Path.Direction.CW);
                            this.path.close();
                            canvas.drawPath(this.path, paint);
                            return;
                        }
                        RectF rectF = this.rect;
                        float dp4 = ChatMessageCell.this.selectorDrawableMaskType[i] == 0 ? AndroidUtilities.dp(6.0f) : 0.0f;
                        if (ChatMessageCell.this.selectorDrawableMaskType[i] == 0) {
                            f = AndroidUtilities.dp(6.0f);
                        }
                        canvas.drawRoundRect(rectF, dp4, f, paint);
                        return;
                    }
                    canvas.drawCircle(this.rect.centerX(), this.rect.centerY(), AndroidUtilities.dp(ChatMessageCell.this.selectorDrawableMaskType[i] == 3 ? 16.0f : 20.0f), paint);
                }
            };
            int[][] iArr = {StateSet.WILD_CARD};
            int[] iArr2 = new int[1];
            if (!this.currentMessageObject.isOutOwner()) {
                str = "chat_inPreviewInstantText";
            }
            iArr2[0] = getThemedColor(str) & 436207615;
            this.selectorDrawable[i] = new RippleDrawable(new ColorStateList(iArr, iArr2), null, drawable);
            this.selectorDrawable[i].setCallback(this);
        } else {
            Theme.setSelectorDrawableColor(drawableArr[i], i2 & 436207615, true);
        }
        this.selectorDrawable[i].setVisible(true, false);
    }

    private void createInstantViewButton() {
        String str;
        int measureText;
        if (Build.VERSION.SDK_INT >= 21 && this.drawInstantView) {
            createSelectorDrawable(0);
        }
        if (!this.drawInstantView || this.instantViewLayout != null) {
            return;
        }
        this.instantWidth = AndroidUtilities.dp(33.0f);
        int i = this.drawInstantViewType;
        if (i == 12) {
            str = LocaleController.getString("OpenChannelPost", R.string.OpenChannelPost);
        } else if (i == 1) {
            str = LocaleController.getString("OpenChannel", R.string.OpenChannel);
        } else if (i == 13) {
            str = LocaleController.getString("SendMessage", R.string.SendMessage).toUpperCase();
        } else if (i == 10) {
            str = LocaleController.getString("OpenBot", R.string.OpenBot);
        } else if (i == 2) {
            str = LocaleController.getString("OpenGroup", R.string.OpenGroup);
        } else if (i == 3) {
            str = LocaleController.getString("OpenMessage", R.string.OpenMessage);
        } else if (i == 5) {
            str = LocaleController.getString("ViewContact", R.string.ViewContact);
        } else if (i == 6) {
            str = LocaleController.getString("OpenBackground", R.string.OpenBackground);
        } else if (i == 7) {
            str = LocaleController.getString("OpenTheme", R.string.OpenTheme);
        } else if (i == 8) {
            if (this.pollVoted || this.pollClosed) {
                str = LocaleController.getString("PollViewResults", R.string.PollViewResults);
            } else {
                str = LocaleController.getString("PollSubmitVotes", R.string.PollSubmitVotes);
            }
        } else if (i == 9 || i == 11) {
            TLRPC$TL_webPage tLRPC$TL_webPage = (TLRPC$TL_webPage) this.currentMessageObject.messageOwner.media.webpage;
            if (tLRPC$TL_webPage != null && tLRPC$TL_webPage.url.contains("voicechat=")) {
                str = LocaleController.getString("VoipGroupJoinAsSpeaker", R.string.VoipGroupJoinAsSpeaker);
            } else {
                str = LocaleController.getString("VoipGroupJoinAsLinstener", R.string.VoipGroupJoinAsLinstener);
            }
        } else {
            str = LocaleController.getString("InstantView", R.string.InstantView);
        }
        if (this.currentMessageObject.isSponsored() && this.backgroundWidth < (measureText = (int) (Theme.chat_instantViewPaint.measureText(str) + AndroidUtilities.dp(75.0f)))) {
            this.backgroundWidth = measureText;
        }
        int dp = this.backgroundWidth - AndroidUtilities.dp(75.0f);
        this.instantViewLayout = new StaticLayout(TextUtils.ellipsize(str, Theme.chat_instantViewPaint, dp, TextUtils.TruncateAt.END), Theme.chat_instantViewPaint, dp + AndroidUtilities.dp(2.0f), Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
        if (this.drawInstantViewType == 8) {
            this.instantWidth = this.backgroundWidth - AndroidUtilities.dp(13.0f);
        } else {
            this.instantWidth = this.backgroundWidth - AndroidUtilities.dp(34.0f);
        }
        int dp2 = this.totalHeight + AndroidUtilities.dp(46.0f);
        this.totalHeight = dp2;
        if (this.currentMessageObject.type == 12) {
            this.totalHeight = dp2 + AndroidUtilities.dp(14.0f);
        }
        if (this.currentMessageObject.isSponsored() && this.hasNewLineForTime) {
            this.totalHeight += AndroidUtilities.dp(16.0f);
        }
        StaticLayout staticLayout = this.instantViewLayout;
        if (staticLayout == null || staticLayout.getLineCount() <= 0) {
            return;
        }
        double d = this.instantWidth;
        double ceil = Math.ceil(this.instantViewLayout.getLineWidth(0));
        Double.isNaN(d);
        this.instantTextX = (((int) (d - ceil)) / 2) + (this.drawInstantViewType == 0 ? AndroidUtilities.dp(8.0f) : 0);
        int lineLeft = (int) this.instantViewLayout.getLineLeft(0);
        this.instantTextLeftX = lineLeft;
        this.instantTextX += -lineLeft;
    }

    @Override // android.view.View, android.view.ViewParent
    public void requestLayout() {
        if (this.inLayout) {
            return;
        }
        super.requestLayout();
    }

    @Override // android.view.View
    protected void onMeasure(int i, int i2) {
        MessageObject messageObject = this.currentMessageObject;
        if (messageObject != null && (messageObject.checkLayout() || this.lastHeight != AndroidUtilities.displaySize.y)) {
            this.inLayout = true;
            MessageObject messageObject2 = this.currentMessageObject;
            this.currentMessageObject = null;
            setMessageObject(messageObject2, this.currentMessagesGroup, this.pinnedBottom, this.pinnedTop);
            this.inLayout = false;
        }
        updateSelectionTextPosition();
        setMeasuredDimension(View.MeasureSpec.getSize(i), this.totalHeight + this.keyboardHeight);
    }

    public void forceResetMessageObject() {
        MessageObject messageObject = this.messageObjectToSet;
        if (messageObject == null) {
            messageObject = this.currentMessageObject;
        }
        this.currentMessageObject = null;
        setMessageObject(messageObject, this.currentMessagesGroup, this.pinnedBottom, this.pinnedTop);
    }

    private int getGroupPhotosWidth() {
        int parentWidth = getParentWidth();
        MessageObject messageObject = this.currentMessageObject;
        if (messageObject != null && messageObject.preview) {
            parentWidth = this.parentWidth;
        }
        if (AndroidUtilities.isInMultiwindow || !AndroidUtilities.isTablet()) {
            return parentWidth;
        }
        if (AndroidUtilities.isSmallTablet() && getResources().getConfiguration().orientation != 2) {
            return parentWidth;
        }
        int i = (parentWidth / 100) * 35;
        if (i < AndroidUtilities.dp(320.0f)) {
            i = AndroidUtilities.dp(320.0f);
        }
        return parentWidth - i;
    }

    private int getExtraTextX() {
        int i = SharedConfig.bubbleRadius;
        if (i >= 15) {
            return AndroidUtilities.dp(2.0f);
        }
        if (i < 11) {
            return 0;
        }
        return AndroidUtilities.dp(1.0f);
    }

    private int getExtraTimeX() {
        int i;
        if (!this.currentMessageObject.isOutOwner() && ((!this.mediaBackground || this.captionLayout != null) && (i = SharedConfig.bubbleRadius) > 11)) {
            return AndroidUtilities.dp((i - 11) / 1.5f);
        }
        if (!this.currentMessageObject.isOutOwner() && this.isPlayingRound && this.isAvatarVisible && this.currentMessageObject.type == 5) {
            return (int) ((AndroidUtilities.roundPlayingMessageSize - AndroidUtilities.roundMessageSize) * 0.7f);
        }
        return 0;
    }

    @Override // android.view.ViewGroup, android.view.View
    @SuppressLint({"DrawAllocation"})
    protected void onLayout(boolean z, int i, int i2, int i3, int i4) {
        int i5;
        int i6;
        int i7;
        int i8;
        int i9;
        int i10;
        int i11;
        int i12;
        int i13;
        int i14;
        if (this.currentMessageObject == null) {
            return;
        }
        int measuredHeight = getMeasuredHeight() + (getMeasuredWidth() << 16);
        int i15 = 10;
        if (this.lastSize != measuredHeight || !this.wasLayout) {
            this.layoutWidth = getMeasuredWidth();
            this.layoutHeight = getMeasuredHeight() - this.substractBackgroundHeight;
            if (this.timeTextWidth < 0) {
                this.timeTextWidth = AndroidUtilities.dp(10.0f);
            }
            this.timeLayout = new StaticLayout(this.currentTimeString, Theme.chat_timePaint, AndroidUtilities.dp(100.0f) + this.timeTextWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
            if (this.mediaBackground) {
                if (this.currentMessageObject.isOutOwner()) {
                    this.timeX = (this.layoutWidth - this.timeWidth) - AndroidUtilities.dp(42.0f);
                } else {
                    this.timeX = (this.backgroundWidth - AndroidUtilities.dp(4.0f)) - this.timeWidth;
                    if (this.currentMessageObject.isAnyKindOfSticker()) {
                        this.timeX = Math.max(AndroidUtilities.dp(26.0f), this.timeX);
                    }
                    if (this.isAvatarVisible) {
                        this.timeX += AndroidUtilities.dp(48.0f);
                    }
                    MessageObject.GroupedMessagePosition groupedMessagePosition = this.currentPosition;
                    if (groupedMessagePosition != null && (i14 = groupedMessagePosition.leftSpanOffset) != 0) {
                        this.timeX += (int) Math.ceil((i14 / 1000.0f) * getGroupPhotosWidth());
                    }
                    if (this.captionLayout != null && this.currentPosition != null) {
                        this.timeX += AndroidUtilities.dp(4.0f);
                    }
                }
                if (SharedConfig.bubbleRadius >= 10 && this.captionLayout == null && (i13 = this.documentAttachType) != 7 && i13 != 6) {
                    this.timeX -= AndroidUtilities.dp(2.0f);
                }
            } else if (this.currentMessageObject.isOutOwner()) {
                this.timeX = (this.layoutWidth - this.timeWidth) - AndroidUtilities.dp(38.5f);
            } else {
                this.timeX = (this.backgroundWidth - AndroidUtilities.dp(9.0f)) - this.timeWidth;
                if (this.currentMessageObject.isAnyKindOfSticker()) {
                    this.timeX = Math.max(0, this.timeX);
                }
                if (this.isAvatarVisible) {
                    this.timeX += AndroidUtilities.dp(48.0f);
                }
                if (shouldDrawTimeOnMedia()) {
                    this.timeX -= AndroidUtilities.dp(7.0f);
                }
            }
            this.timeX -= getExtraTimeX();
            if ((this.currentMessageObject.messageOwner.flags & 1024) != 0) {
                this.viewsLayout = new StaticLayout(this.currentViewsString, Theme.chat_timePaint, this.viewsTextWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
            } else {
                this.viewsLayout = null;
            }
            if (this.currentRepliesString != null && !this.currentMessageObject.scheduled) {
                this.repliesLayout = new StaticLayout(this.currentRepliesString, Theme.chat_timePaint, this.repliesTextWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
            } else {
                this.repliesLayout = null;
            }
            if (this.isAvatarVisible) {
                this.avatarImage.setImageCoords(AndroidUtilities.dp(6.0f), this.avatarImage.getImageY(), AndroidUtilities.dp(42.0f), AndroidUtilities.dp(42.0f));
            }
            this.wasLayout = true;
        }
        this.lastSize = measuredHeight;
        if (this.currentMessageObject.type == 0) {
            this.textY = AndroidUtilities.dp(10.0f) + this.namesOffset;
        }
        if (this.isRoundVideo) {
            updatePlayingMessageProgress();
        }
        int i16 = this.documentAttachType;
        if (i16 == 3) {
            if (this.currentMessageObject.isOutOwner()) {
                this.seekBarX = (this.layoutWidth - this.backgroundWidth) + AndroidUtilities.dp(57.0f);
                this.buttonX = (this.layoutWidth - this.backgroundWidth) + AndroidUtilities.dp(14.0f);
                this.timeAudioX = (this.layoutWidth - this.backgroundWidth) + AndroidUtilities.dp(67.0f);
            } else if (this.isChat && !this.isThreadPost && this.currentMessageObject.needDrawAvatar()) {
                this.seekBarX = AndroidUtilities.dp(114.0f);
                this.buttonX = AndroidUtilities.dp(71.0f);
                this.timeAudioX = AndroidUtilities.dp(124.0f);
            } else {
                this.seekBarX = AndroidUtilities.dp(66.0f);
                this.buttonX = AndroidUtilities.dp(23.0f);
                this.timeAudioX = AndroidUtilities.dp(76.0f);
            }
            if (this.hasLinkPreview) {
                this.seekBarX += AndroidUtilities.dp(10.0f);
                this.buttonX += AndroidUtilities.dp(10.0f);
                this.timeAudioX += AndroidUtilities.dp(10.0f);
            }
            updateSeekBarWaveformWidth();
            SeekBar seekBar = this.seekBar;
            int i17 = this.backgroundWidth;
            if (!this.hasLinkPreview) {
                i15 = 0;
            }
            seekBar.setSize(i17 - AndroidUtilities.dp(i15 + 72), AndroidUtilities.dp(30.0f));
            this.seekBarY = AndroidUtilities.dp(13.0f) + this.namesOffset + this.mediaOffsetY;
            int dp = AndroidUtilities.dp(13.0f) + this.namesOffset + this.mediaOffsetY;
            this.buttonY = dp;
            RadialProgress2 radialProgress2 = this.radialProgress;
            int i18 = this.buttonX;
            radialProgress2.setProgressRect(i18, dp, AndroidUtilities.dp(44.0f) + i18, this.buttonY + AndroidUtilities.dp(44.0f));
            updatePlayingMessageProgress();
        } else if (i16 == 5) {
            if (this.currentMessageObject.isOutOwner()) {
                this.seekBarX = (this.layoutWidth - this.backgroundWidth) + AndroidUtilities.dp(56.0f);
                this.buttonX = (this.layoutWidth - this.backgroundWidth) + AndroidUtilities.dp(14.0f);
                this.timeAudioX = (this.layoutWidth - this.backgroundWidth) + AndroidUtilities.dp(67.0f);
            } else if (this.isChat && !this.isThreadPost && this.currentMessageObject.needDrawAvatar()) {
                this.seekBarX = AndroidUtilities.dp(113.0f);
                this.buttonX = AndroidUtilities.dp(71.0f);
                this.timeAudioX = AndroidUtilities.dp(124.0f);
            } else {
                this.seekBarX = AndroidUtilities.dp(65.0f);
                this.buttonX = AndroidUtilities.dp(23.0f);
                this.timeAudioX = AndroidUtilities.dp(76.0f);
            }
            if (this.hasLinkPreview) {
                this.seekBarX += AndroidUtilities.dp(10.0f);
                this.buttonX += AndroidUtilities.dp(10.0f);
                this.timeAudioX += AndroidUtilities.dp(10.0f);
            }
            SeekBar seekBar2 = this.seekBar;
            int i19 = this.backgroundWidth;
            if (!this.hasLinkPreview) {
                i15 = 0;
            }
            seekBar2.setSize(i19 - AndroidUtilities.dp(i15 + 65), AndroidUtilities.dp(30.0f));
            this.seekBarY = AndroidUtilities.dp(29.0f) + this.namesOffset + this.mediaOffsetY;
            int dp2 = AndroidUtilities.dp(13.0f) + this.namesOffset + this.mediaOffsetY;
            this.buttonY = dp2;
            RadialProgress2 radialProgress22 = this.radialProgress;
            int i20 = this.buttonX;
            radialProgress22.setProgressRect(i20, dp2, AndroidUtilities.dp(44.0f) + i20, this.buttonY + AndroidUtilities.dp(44.0f));
            updatePlayingMessageProgress();
        } else if (i16 == 1 && !this.drawPhotoImage) {
            if (this.currentMessageObject.isOutOwner()) {
                this.buttonX = (this.layoutWidth - this.backgroundWidth) + AndroidUtilities.dp(14.0f);
            } else if (this.isChat && !this.isThreadPost && this.currentMessageObject.needDrawAvatar()) {
                this.buttonX = AndroidUtilities.dp(71.0f);
            } else {
                this.buttonX = AndroidUtilities.dp(23.0f);
            }
            if (this.hasLinkPreview) {
                this.buttonX += AndroidUtilities.dp(10.0f);
            }
            int dp3 = AndroidUtilities.dp(13.0f) + this.namesOffset + this.mediaOffsetY;
            this.buttonY = dp3;
            RadialProgress2 radialProgress23 = this.radialProgress;
            int i21 = this.buttonX;
            radialProgress23.setProgressRect(i21, dp3, AndroidUtilities.dp(44.0f) + i21, this.buttonY + AndroidUtilities.dp(44.0f));
            this.photoImage.setImageCoords(this.buttonX - AndroidUtilities.dp(10.0f), this.buttonY - AndroidUtilities.dp(10.0f), this.photoImage.getImageWidth(), this.photoImage.getImageHeight());
        } else {
            MessageObject messageObject = this.currentMessageObject;
            int i22 = messageObject.type;
            if (i22 == 12) {
                if (messageObject.isOutOwner()) {
                    i12 = (this.layoutWidth - this.backgroundWidth) + AndroidUtilities.dp(14.0f);
                } else if (this.isChat && !this.isThreadPost && this.currentMessageObject.needDrawAvatar()) {
                    i12 = AndroidUtilities.dp(72.0f);
                } else {
                    i12 = AndroidUtilities.dp(23.0f);
                }
                this.photoImage.setImageCoords(i12, AndroidUtilities.dp(13.0f) + this.namesOffset, AndroidUtilities.dp(44.0f), AndroidUtilities.dp(44.0f));
                return;
            }
            if (i22 == 0 && (this.hasLinkPreview || this.hasGamePreview || this.hasInvoicePreview)) {
                if (this.hasGamePreview) {
                    i8 = this.unmovedTextX - AndroidUtilities.dp(10.0f);
                } else {
                    if (this.hasInvoicePreview) {
                        i11 = this.unmovedTextX;
                        i10 = AndroidUtilities.dp(1.0f);
                    } else {
                        i11 = this.unmovedTextX;
                        i10 = AndroidUtilities.dp(1.0f);
                    }
                    i8 = i11 + i10;
                }
                if (this.isSmallImage) {
                    i5 = i8 + this.backgroundWidth;
                    i9 = AndroidUtilities.dp(81.0f);
                    i5 -= i9;
                } else {
                    i7 = this.hasInvoicePreview ? -AndroidUtilities.dp(6.3f) : AndroidUtilities.dp(10.0f);
                    i5 = i8 + i7;
                }
            } else {
                if (messageObject.isOutOwner()) {
                    if (this.mediaBackground) {
                        i5 = this.layoutWidth - this.backgroundWidth;
                        i9 = AndroidUtilities.dp(3.0f);
                    } else {
                        i8 = this.layoutWidth - this.backgroundWidth;
                        i7 = AndroidUtilities.dp(6.0f);
                        i5 = i8 + i7;
                    }
                } else {
                    if (this.isChat && this.isAvatarVisible && !this.isPlayingRound) {
                        i5 = AndroidUtilities.dp(63.0f);
                    } else {
                        i5 = AndroidUtilities.dp(15.0f);
                    }
                    MessageObject.GroupedMessagePosition groupedMessagePosition2 = this.currentPosition;
                    if (groupedMessagePosition2 != null && !groupedMessagePosition2.edge) {
                        i9 = AndroidUtilities.dp(10.0f);
                    }
                }
                i5 -= i9;
            }
            MessageObject.GroupedMessagePosition groupedMessagePosition3 = this.currentPosition;
            if (groupedMessagePosition3 != null) {
                if ((groupedMessagePosition3.flags & 1) == 0) {
                    i5 -= AndroidUtilities.dp(2.0f);
                }
                if (this.currentPosition.leftSpanOffset != 0) {
                    i5 += (int) Math.ceil((i6 / 1000.0f) * getGroupPhotosWidth());
                }
            }
            if (this.currentMessageObject.type != 0) {
                i5 -= AndroidUtilities.dp(2.0f);
            }
            TransitionParams transitionParams = this.transitionParams;
            if (!transitionParams.imageChangeBoundsTransition || transitionParams.updatePhotoImageX) {
                transitionParams.updatePhotoImageX = false;
                ImageReceiver imageReceiver = this.photoImage;
                imageReceiver.setImageCoords(i5, imageReceiver.getImageY(), this.photoImage.getImageWidth(), this.photoImage.getImageHeight());
            }
            this.buttonX = (int) (i5 + ((this.photoImage.getImageWidth() - AndroidUtilities.dp(48.0f)) / 2.0f));
            int imageY = (int) (this.photoImage.getImageY() + ((this.photoImage.getImageHeight() - AndroidUtilities.dp(48.0f)) / 2.0f));
            this.buttonY = imageY;
            RadialProgress2 radialProgress24 = this.radialProgress;
            int i23 = this.buttonX;
            radialProgress24.setProgressRect(i23, imageY, AndroidUtilities.dp(48.0f) + i23, this.buttonY + AndroidUtilities.dp(48.0f));
            this.deleteProgressRect.set(this.buttonX + AndroidUtilities.dp(5.0f), this.buttonY + AndroidUtilities.dp(5.0f), this.buttonX + AndroidUtilities.dp(43.0f), this.buttonY + AndroidUtilities.dp(43.0f));
            int i24 = this.documentAttachType;
            if (i24 != 4 && i24 != 2) {
                return;
            }
            this.videoButtonX = (int) (this.photoImage.getImageX() + AndroidUtilities.dp(8.0f));
            int imageY2 = (int) (this.photoImage.getImageY() + AndroidUtilities.dp(8.0f));
            this.videoButtonY = imageY2;
            RadialProgress2 radialProgress25 = this.videoRadialProgress;
            int i25 = this.videoButtonX;
            radialProgress25.setProgressRect(i25, imageY2, AndroidUtilities.dp(24.0f) + i25, this.videoButtonY + AndroidUtilities.dp(24.0f));
        }
    }

    public boolean needDelayRoundProgressDraw() {
        int i = this.documentAttachType;
        return (i == 7 || i == 4) && this.currentMessageObject.type != 5 && MediaController.getInstance().isPlayingMessage(this.currentMessageObject);
    }

    /* JADX WARN: Removed duplicated region for block: B:32:0x0069  */
    /* JADX WARN: Removed duplicated region for block: B:39:0x007f  */
    /* JADX WARN: Removed duplicated region for block: B:46:0x0094  */
    /* JADX WARN: Removed duplicated region for block: B:47:0x009d  */
    /* JADX WARN: Removed duplicated region for block: B:50:0x00a6  */
    /* JADX WARN: Removed duplicated region for block: B:57:0x00cb  */
    /* JADX WARN: Removed duplicated region for block: B:60:0x0128  */
    /* JADX WARN: Removed duplicated region for block: B:61:0x013b  */
    /* JADX WARN: Removed duplicated region for block: B:64:0x0140  */
    /* JADX WARN: Removed duplicated region for block: B:69:0x018c  */
    /* JADX WARN: Removed duplicated region for block: B:70:0x0191  */
    /* JADX WARN: Removed duplicated region for block: B:73:0x0197  */
    /* JADX WARN: Removed duplicated region for block: B:74:0x024c  */
    /* JADX WARN: Removed duplicated region for block: B:77:0x0255  */
    /* JADX WARN: Removed duplicated region for block: B:83:0x026d  */
    /* JADX WARN: Removed duplicated region for block: B:88:0x02b4  */
    /* JADX WARN: Removed duplicated region for block: B:90:0x02cc  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void drawRoundProgress(Canvas canvas) {
        float interpolation;
        TransitionParams transitionParams;
        int i;
        VideoForwardDrawable videoForwardDrawable;
        int i2;
        float f;
        int i3;
        float dp = this.isPlayingRound ? AndroidUtilities.dp(4.0f) : 0.0f;
        boolean z = false;
        boolean z2 = MediaController.getInstance().isPlayingMessage(this.currentMessageObject) && MediaController.getInstance().isMessagePaused();
        if (z2 && this.roundSeekbarTouched == 1) {
            z = true;
        }
        if (z2) {
            float f2 = this.roundToPauseProgress;
            if (f2 != 1.0f) {
                float f3 = f2 + 0.07272727f;
                this.roundToPauseProgress = f3;
                if (f3 > 1.0f) {
                    this.roundToPauseProgress = 1.0f;
                } else {
                    invalidate();
                }
                if (z) {
                    float f4 = this.roundToPauseProgress2;
                    if (f4 != 1.0f) {
                        float f5 = f4 + 0.10666667f;
                        this.roundToPauseProgress2 = f5;
                        if (f5 > 1.0f) {
                            this.roundToPauseProgress2 = 1.0f;
                        } else {
                            invalidate();
                        }
                        interpolation = z2 ? AndroidUtilities.overshootInterpolator.getInterpolation(this.roundToPauseProgress) : this.roundToPauseProgress;
                        transitionParams = this.transitionParams;
                        if (transitionParams.animatePlayingRound) {
                            dp = (this.isPlayingRound ? transitionParams.animateChangeProgress : 1.0f - transitionParams.animateChangeProgress) * AndroidUtilities.dp(4.0f);
                        }
                        float dp2 = dp + (AndroidUtilities.dp(16.0f) * interpolation);
                        if (this.roundToPauseProgress > 0.0f) {
                            Theme.getRadialSeekbarShadowDrawable().draw(canvas, this.photoImage.getCenterX(), this.photoImage.getCenterY(), this.photoImage.getImageWidth() / 2.0f, this.roundToPauseProgress);
                        }
                        this.rect.set(this.photoImage.getImageX() + AndroidUtilities.dpf2(1.5f) + dp2, this.photoImage.getImageY() + AndroidUtilities.dpf2(1.5f) + dp2, (this.photoImage.getImageX2() - AndroidUtilities.dpf2(1.5f)) - dp2, (this.photoImage.getImageY2() - AndroidUtilities.dpf2(1.5f)) - dp2);
                        if (this.roundProgressAlpha != 1.0f) {
                            int alpha = Theme.chat_radialProgressPaint.getAlpha();
                            Theme.chat_radialProgressPaint.setAlpha((int) (this.roundProgressAlpha * alpha));
                            i = alpha;
                        } else {
                            i = -1;
                        }
                        videoForwardDrawable = this.videoForwardDrawable;
                        if (videoForwardDrawable != null && videoForwardDrawable.isAnimating()) {
                            this.videoForwardDrawable.setBounds((int) this.photoImage.getImageX(), (int) this.photoImage.getImageY(), (int) (this.photoImage.getImageX() + this.photoImage.getImageWidth()), (int) (this.photoImage.getImageY() + this.photoImage.getImageHeight()));
                            this.videoForwardDrawable.draw(canvas);
                        }
                        int alpha2 = Theme.chat_radialProgressPaint.getAlpha();
                        float strokeWidth = Theme.chat_radialProgressPaint.getStrokeWidth();
                        float f6 = this.roundProgressAlpha == 1.0f ? this.currentMessageObject.audioProgress : this.lastDrawingAudioProgress;
                        if (interpolation > 0.0f) {
                            float width = this.rect.width() / 2.0f;
                            Theme.chat_radialProgressPaint.setStrokeWidth((0.5f * strokeWidth * this.roundToPauseProgress) + strokeWidth);
                            Theme.chat_radialProgressPaint.setAlpha((int) (alpha2 * this.roundToPauseProgress * 0.3f));
                            canvas.drawCircle(this.rect.centerX(), this.rect.centerY(), width, Theme.chat_radialProgressPaint);
                            Theme.chat_radialProgressPaint.setAlpha(alpha2);
                            double centerX = this.rect.centerX();
                            double d = ((-360.0f) * f6) + 180.0f;
                            double sin = Math.sin(Math.toRadians(d));
                            i2 = i;
                            double d2 = width;
                            Double.isNaN(d2);
                            Double.isNaN(centerX);
                            this.seekbarRoundX = (float) (centerX + (sin * d2));
                            double centerY = this.rect.centerY();
                            double cos = Math.cos(Math.toRadians(d));
                            Double.isNaN(d2);
                            Double.isNaN(centerY);
                            this.seekbarRoundY = (float) (centerY + (cos * d2));
                            Theme.chat_radialProgressPausedSeekbarPaint.setColor(-1);
                            Theme.chat_radialProgressPausedSeekbarPaint.setAlpha((int) (Math.min(1.0f, interpolation) * 255.0f));
                            canvas.drawCircle(this.seekbarRoundX, this.seekbarRoundY, AndroidUtilities.dp(3.0f) + (AndroidUtilities.dp(5.0f) * interpolation) + (AndroidUtilities.dp(3.0f) * this.roundToPauseProgress2), Theme.chat_radialProgressPausedSeekbarPaint);
                        } else {
                            i2 = i;
                        }
                        f = this.roundSeekbarOutAlpha;
                        if (f != 0.0f) {
                            float f7 = f - 0.10666667f;
                            this.roundSeekbarOutAlpha = f7;
                            if (f7 < 0.0f) {
                                this.roundSeekbarOutAlpha = 0.0f;
                            } else {
                                invalidate();
                            }
                        }
                        if (this.roundSeekbarOutAlpha != 0.0f) {
                            int i4 = i2;
                            i3 = i4 == -1 ? Theme.chat_radialProgressPaint.getAlpha() : i4;
                            float f8 = alpha2;
                            Theme.chat_radialProgressPaint.setAlpha((int) ((1.0f - this.roundSeekbarOutAlpha) * f8));
                            canvas.drawArc(this.rect, -90.0f, f6 * 360.0f, false, Theme.chat_radialProgressPaint);
                            Theme.chat_radialProgressPaint.setAlpha((int) (f8 * this.roundSeekbarOutAlpha));
                            canvas.drawArc(this.rect, -90.0f, this.roundSeekbarOutProgress * 360.0f, false, Theme.chat_radialProgressPaint);
                        } else {
                            canvas.drawArc(this.rect, -90.0f, f6 * 360.0f, false, Theme.chat_radialProgressPaint);
                            i3 = i2;
                        }
                        if (i3 != -1) {
                            Theme.chat_radialProgressPaint.setAlpha(i3);
                        }
                        Theme.chat_radialProgressPaint.setStrokeWidth(strokeWidth);
                    }
                }
                if (!z) {
                    float f9 = this.roundToPauseProgress2;
                    if (f9 != 0.0f) {
                        float f10 = f9 - 0.10666667f;
                        this.roundToPauseProgress2 = f10;
                        if (f10 < 0.0f) {
                            this.roundToPauseProgress2 = 0.0f;
                        } else {
                            invalidate();
                        }
                    }
                }
                interpolation = z2 ? AndroidUtilities.overshootInterpolator.getInterpolation(this.roundToPauseProgress) : this.roundToPauseProgress;
                transitionParams = this.transitionParams;
                if (transitionParams.animatePlayingRound) {
                }
                float dp22 = dp + (AndroidUtilities.dp(16.0f) * interpolation);
                if (this.roundToPauseProgress > 0.0f) {
                }
                this.rect.set(this.photoImage.getImageX() + AndroidUtilities.dpf2(1.5f) + dp22, this.photoImage.getImageY() + AndroidUtilities.dpf2(1.5f) + dp22, (this.photoImage.getImageX2() - AndroidUtilities.dpf2(1.5f)) - dp22, (this.photoImage.getImageY2() - AndroidUtilities.dpf2(1.5f)) - dp22);
                if (this.roundProgressAlpha != 1.0f) {
                }
                videoForwardDrawable = this.videoForwardDrawable;
                if (videoForwardDrawable != null) {
                    this.videoForwardDrawable.setBounds((int) this.photoImage.getImageX(), (int) this.photoImage.getImageY(), (int) (this.photoImage.getImageX() + this.photoImage.getImageWidth()), (int) (this.photoImage.getImageY() + this.photoImage.getImageHeight()));
                    this.videoForwardDrawable.draw(canvas);
                }
                int alpha22 = Theme.chat_radialProgressPaint.getAlpha();
                float strokeWidth2 = Theme.chat_radialProgressPaint.getStrokeWidth();
                if (this.roundProgressAlpha == 1.0f) {
                }
                if (interpolation > 0.0f) {
                }
                f = this.roundSeekbarOutAlpha;
                if (f != 0.0f) {
                }
                if (this.roundSeekbarOutAlpha != 0.0f) {
                }
                if (i3 != -1) {
                }
                Theme.chat_radialProgressPaint.setStrokeWidth(strokeWidth2);
            }
        }
        if (!z2) {
            float f11 = this.roundToPauseProgress;
            if (f11 != 0.0f) {
                float f12 = f11 - 0.10666667f;
                this.roundToPauseProgress = f12;
                if (f12 < 0.0f) {
                    this.roundToPauseProgress = 0.0f;
                } else {
                    invalidate();
                }
            }
        }
        if (z) {
        }
        if (!z) {
        }
        interpolation = z2 ? AndroidUtilities.overshootInterpolator.getInterpolation(this.roundToPauseProgress) : this.roundToPauseProgress;
        transitionParams = this.transitionParams;
        if (transitionParams.animatePlayingRound) {
        }
        float dp222 = dp + (AndroidUtilities.dp(16.0f) * interpolation);
        if (this.roundToPauseProgress > 0.0f) {
        }
        this.rect.set(this.photoImage.getImageX() + AndroidUtilities.dpf2(1.5f) + dp222, this.photoImage.getImageY() + AndroidUtilities.dpf2(1.5f) + dp222, (this.photoImage.getImageX2() - AndroidUtilities.dpf2(1.5f)) - dp222, (this.photoImage.getImageY2() - AndroidUtilities.dpf2(1.5f)) - dp222);
        if (this.roundProgressAlpha != 1.0f) {
        }
        videoForwardDrawable = this.videoForwardDrawable;
        if (videoForwardDrawable != null) {
        }
        int alpha222 = Theme.chat_radialProgressPaint.getAlpha();
        float strokeWidth22 = Theme.chat_radialProgressPaint.getStrokeWidth();
        if (this.roundProgressAlpha == 1.0f) {
        }
        if (interpolation > 0.0f) {
        }
        f = this.roundSeekbarOutAlpha;
        if (f != 0.0f) {
        }
        if (this.roundSeekbarOutAlpha != 0.0f) {
        }
        if (i3 != -1) {
        }
        Theme.chat_radialProgressPaint.setStrokeWidth(strokeWidth22);
    }

    /* JADX WARN: Removed duplicated region for block: B:41:0x00b8  */
    /* JADX WARN: Removed duplicated region for block: B:61:? A[RETURN, SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void updatePollAnimations(long j) {
        if (this.pollVoteInProgress) {
            float f = this.voteRadOffset + (((float) (360 * j)) / 2000.0f);
            this.voteRadOffset = f;
            int i = 360;
            this.voteRadOffset = f - (((int) (f / 360.0f)) * 360);
            float f2 = this.voteCurrentProgressTime + ((float) j);
            this.voteCurrentProgressTime = f2;
            if (f2 >= 500.0f) {
                this.voteCurrentProgressTime = 500.0f;
            }
            if (this.voteRisingCircleLength) {
                this.voteCurrentCircleLength = (AndroidUtilities.accelerateInterpolator.getInterpolation(this.voteCurrentProgressTime / 500.0f) * 266.0f) + 4.0f;
            } else {
                if (!this.firstCircleLength) {
                    i = 270;
                }
                this.voteCurrentCircleLength = 4.0f - (i * (1.0f - AndroidUtilities.decelerateInterpolator.getInterpolation(this.voteCurrentProgressTime / 500.0f)));
            }
            if (this.voteCurrentProgressTime == 500.0f) {
                boolean z = this.voteRisingCircleLength;
                if (z) {
                    this.voteRadOffset += 270.0f;
                    this.voteCurrentCircleLength = -266.0f;
                }
                this.voteRisingCircleLength = !z;
                if (this.firstCircleLength) {
                    this.firstCircleLength = false;
                }
                this.voteCurrentProgressTime = 0.0f;
            }
            invalidate();
        }
        boolean z2 = this.hintButtonVisible;
        if (z2) {
            float f3 = this.hintButtonProgress;
            if (f3 < 1.0f) {
                float f4 = f3 + (((float) j) / 180.0f);
                this.hintButtonProgress = f4;
                if (f4 > 1.0f) {
                    this.hintButtonProgress = 1.0f;
                }
                invalidate();
                if (this.animatePollAnswer) {
                    return;
                }
                float f5 = this.pollAnimationProgressTime + ((float) j);
                this.pollAnimationProgressTime = f5;
                if (f5 >= 300.0f) {
                    this.pollAnimationProgressTime = 300.0f;
                }
                float interpolation = AndroidUtilities.decelerateInterpolator.getInterpolation(this.pollAnimationProgressTime / 300.0f);
                this.pollAnimationProgress = interpolation;
                if (interpolation >= 1.0f) {
                    this.pollAnimationProgress = 1.0f;
                    this.animatePollAnswer = false;
                    this.animatePollAnswerAlpha = false;
                    this.pollVoteInProgress = false;
                    if (this.pollUnvoteInProgress && this.animatePollAvatars) {
                        int i2 = 0;
                        while (true) {
                            ImageReceiver[] imageReceiverArr = this.pollAvatarImages;
                            if (i2 >= imageReceiverArr.length) {
                                break;
                            }
                            imageReceiverArr[i2].setImageBitmap((Drawable) null);
                            this.pollAvatarImagesVisible[i2] = false;
                            i2++;
                        }
                    }
                    this.pollUnvoteInProgress = false;
                    int size = this.pollButtons.size();
                    for (int i3 = 0; i3 < size; i3++) {
                        this.pollButtons.get(i3).prevChosen = false;
                    }
                }
                invalidate();
                return;
            }
        }
        if (!z2) {
            float f6 = this.hintButtonProgress;
            if (f6 > 0.0f) {
                float f7 = f6 - (((float) j) / 180.0f);
                this.hintButtonProgress = f7;
                if (f7 < 0.0f) {
                    this.hintButtonProgress = 0.0f;
                }
                invalidate();
            }
        }
        if (this.animatePollAnswer) {
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:391:0x08ac  */
    /* JADX WARN: Removed duplicated region for block: B:396:0x08f4  */
    /* JADX WARN: Removed duplicated region for block: B:399:0x08fb  */
    /* JADX WARN: Removed duplicated region for block: B:409:0x098e  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void drawContent(Canvas canvas) {
        String str;
        int i;
        Drawable drawable;
        float dp;
        int dp2;
        int dp3;
        StaticLayout staticLayout;
        StaticLayout staticLayout2;
        int i2;
        int i3;
        int i4;
        AudioVisualizerDrawable audioVisualizerDrawable;
        float f;
        float f2;
        Drawable drawable2;
        float f3;
        int i5;
        boolean isPlayingMessage;
        ViewGroup viewGroup;
        MessageObject messageObject;
        ArrayList<MessageObject.TextLayoutBlock> arrayList;
        boolean z = this.needNewVisiblePart && this.currentMessageObject.type == 0;
        boolean hasSpoilers = hasSpoilers();
        if (z || hasSpoilers) {
            getLocalVisibleRect(this.scrollRect);
            if (hasSpoilers) {
                Rect rect = this.scrollRect;
                updateSpoilersVisiblePart(rect.top, rect.bottom);
            }
            if (z) {
                Rect rect2 = this.scrollRect;
                int i6 = rect2.top;
                setVisiblePart(i6, rect2.bottom - i6, this.parentHeight, this.parentViewTopOffset, this.viewTop, this.parentWidth, this.backgroundHeight, this.blurredViewTopOffset, this.blurredViewBottomOffset);
                this.needNewVisiblePart = false;
            }
        }
        float f4 = this.buttonX;
        float f5 = this.buttonY;
        if (this.transitionParams.animateButton) {
            float f6 = this.transitionParams.animateFromButtonX;
            TransitionParams transitionParams = this.transitionParams;
            float f7 = transitionParams.animateChangeProgress;
            f4 = (f6 * (1.0f - f7)) + (this.buttonX * f7);
            float f8 = transitionParams.animateFromButtonY;
            float f9 = this.transitionParams.animateChangeProgress;
            f5 = (f8 * (1.0f - f9)) + (this.buttonY * f9);
            int i7 = (int) f4;
            int i8 = (int) f5;
            this.radialProgress.setProgressRect(i7, i8, AndroidUtilities.dp(44.0f) + i7, AndroidUtilities.dp(44.0f) + i8);
        }
        float f10 = f5;
        updateSeekBarWaveformWidth();
        this.forceNotDrawTime = this.currentMessagesGroup != null;
        this.photoImage.setPressed(((this.isHighlightedAnimated || this.isHighlighted) && this.currentPosition != null) ? 2 : 0);
        this.photoImage.setVisible(!PhotoViewer.isShowingImage(this.currentMessageObject) && !SecretMediaViewer.getInstance().isShowingImage(this.currentMessageObject), false);
        if (!this.photoImage.getVisible()) {
            this.mediaWasInvisible = true;
            this.timeWasInvisible = true;
            int i9 = this.animatingNoSound;
            if (i9 == 1) {
                this.animatingNoSoundProgress = 0.0f;
                this.animatingNoSound = 0;
            } else if (i9 == 2) {
                this.animatingNoSoundProgress = 1.0f;
                this.animatingNoSound = 0;
            }
        } else if (this.groupPhotoInvisible) {
            this.timeWasInvisible = true;
        } else {
            boolean z2 = this.mediaWasInvisible;
            if (z2 || this.timeWasInvisible) {
                if (z2) {
                    this.controlsAlpha = 0.0f;
                    this.mediaWasInvisible = false;
                }
                if (this.timeWasInvisible) {
                    this.timeAlpha = 0.0f;
                    this.timeWasInvisible = false;
                }
                this.lastControlsAlphaChangeTime = System.currentTimeMillis();
                this.totalChangeTime = 0L;
            }
        }
        this.radialProgress.setProgressColor(getThemedColor("chat_mediaProgress"));
        this.videoRadialProgress.setProgressColor(getThemedColor("chat_mediaProgress"));
        this.imageDrawn = false;
        this.radialProgress.setCircleCrossfadeColor(null, 0.0f, 1.0f);
        MessageObject messageObject2 = this.currentMessageObject;
        float f11 = 11.0f;
        if (messageObject2.type == 0) {
            if (messageObject2.isOutOwner()) {
                this.textX = getCurrentBackgroundLeft() + AndroidUtilities.dp(11.0f) + getExtraTextX();
            } else {
                this.textX = getCurrentBackgroundLeft() + AndroidUtilities.dp((this.mediaBackground || !this.drawPinnedBottom) ? 17.0f : 11.0f) + getExtraTextX();
            }
            if (this.hasGamePreview) {
                this.textX += AndroidUtilities.dp(11.0f);
                int dp4 = AndroidUtilities.dp(14.0f) + this.namesOffset;
                this.textY = dp4;
                StaticLayout staticLayout3 = this.siteNameLayout;
                if (staticLayout3 != null) {
                    this.textY = dp4 + staticLayout3.getLineBottom(staticLayout3.getLineCount() - 1);
                }
            } else if (this.hasInvoicePreview) {
                int dp5 = AndroidUtilities.dp(14.0f) + this.namesOffset;
                this.textY = dp5;
                StaticLayout staticLayout4 = this.siteNameLayout;
                if (staticLayout4 != null) {
                    this.textY = dp5 + staticLayout4.getLineBottom(staticLayout4.getLineCount() - 1);
                }
            } else {
                this.textY = AndroidUtilities.dp(10.0f) + this.namesOffset;
            }
            this.unmovedTextX = this.textX;
            if (this.currentMessageObject.textXOffset != 0.0f && this.replyNameLayout != null) {
                int dp6 = this.backgroundWidth - AndroidUtilities.dp(31.0f);
                MessageObject messageObject3 = this.currentMessageObject;
                int i10 = dp6 - messageObject3.textWidth;
                if (!this.hasNewLineForTime) {
                    i10 -= this.timeWidth + AndroidUtilities.dp((messageObject3.isOutOwner() ? 20 : 0) + 4);
                }
                if (i10 > 0) {
                    this.textX += i10 - getExtraTimeX();
                }
            }
            if (this.enterTransitionInProgress || (messageObject = this.currentMessageObject) == null || messageObject.preview) {
                str = "chat_mediaProgress";
                i = 5;
            } else {
                if (!this.drawForBlur && this.animatedEmojiStack != null && (((arrayList = messageObject.textLayoutBlocks) != null && !arrayList.isEmpty()) || (this.transitionParams.animateOutTextBlocks != null && !this.transitionParams.animateOutTextBlocks.isEmpty()))) {
                    this.animatedEmojiStack.clearPositions();
                }
                TransitionParams transitionParams2 = this.transitionParams;
                if (transitionParams2.animateChangeProgress != 1.0f && transitionParams2.animateMessageText) {
                    canvas.save();
                    Theme.MessageDrawable messageDrawable = this.currentBackgroundDrawable;
                    if (messageDrawable != null) {
                        Rect bounds = messageDrawable.getBounds();
                        if (this.currentMessageObject.isOutOwner() && !this.mediaBackground && !this.pinnedBottom) {
                            canvas.clipRect(bounds.left + AndroidUtilities.dp(4.0f), bounds.top + AndroidUtilities.dp(4.0f), bounds.right - AndroidUtilities.dp(10.0f), bounds.bottom - AndroidUtilities.dp(4.0f));
                        } else {
                            canvas.clipRect(bounds.left + AndroidUtilities.dp(4.0f), bounds.top + AndroidUtilities.dp(4.0f), bounds.right - AndroidUtilities.dp(4.0f), bounds.bottom - AndroidUtilities.dp(4.0f));
                        }
                    }
                    i = 5;
                    str = "chat_mediaProgress";
                    drawMessageText(canvas, this.transitionParams.animateOutTextBlocks, false, 1.0f - this.transitionParams.animateChangeProgress, false);
                    drawMessageText(canvas, this.currentMessageObject.textLayoutBlocks, true, this.transitionParams.animateChangeProgress, false);
                    canvas.restore();
                } else {
                    str = "chat_mediaProgress";
                    i = 5;
                    drawMessageText(canvas, this.currentMessageObject.textLayoutBlocks, true, 1.0f, false);
                }
            }
            if (!this.enterTransitionInProgress || this.currentMessageObject.isVoice()) {
                drawLinkPreview(canvas, 1.0f);
            }
            this.drawTime = true;
        } else {
            str = "chat_mediaProgress";
            i = 5;
            if (this.drawPhotoImage) {
                if (this.isRoundVideo && MediaController.getInstance().isPlayingMessage(this.currentMessageObject) && MediaController.getInstance().isVideoDrawingReady() && canvas.isHardwareAccelerated()) {
                    this.imageDrawn = true;
                    this.drawTime = true;
                } else {
                    int i11 = this.currentMessageObject.type;
                    if (i11 == 5 && Theme.chat_roundVideoShadow != null) {
                        float imageX = this.photoImage.getImageX() - AndroidUtilities.dp(3.0f);
                        float imageY = this.photoImage.getImageY() - AndroidUtilities.dp(2.0f);
                        Theme.chat_roundVideoShadow.setAlpha(255);
                        Theme.chat_roundVideoShadow.setBounds((int) imageX, (int) imageY, (int) (imageX + this.photoImage.getImageWidth() + AndroidUtilities.dp(6.0f)), (int) (imageY + this.photoImage.getImageHeight() + AndroidUtilities.dp(6.0f)));
                        Theme.chat_roundVideoShadow.draw(canvas);
                        if (!this.photoImage.hasBitmapImage() || this.photoImage.getCurrentAlpha() != 1.0f) {
                            Theme.chat_docBackPaint.setColor(getThemedColor(this.currentMessageObject.isOutOwner() ? "chat_outBubble" : "chat_inBubble"));
                            canvas.drawCircle(this.photoImage.getCenterX(), this.photoImage.getCenterY(), this.photoImage.getImageWidth() / 2.0f, Theme.chat_docBackPaint);
                        }
                    } else if (i11 == 4) {
                        this.rect.set(this.photoImage.getImageX(), this.photoImage.getImageY(), this.photoImage.getImageX2(), this.photoImage.getImageY2());
                        Theme.chat_docBackPaint.setColor(getThemedColor(this.currentMessageObject.isOutOwner() ? "chat_outLocationBackground" : "chat_inLocationBackground"));
                        int[] roundRadius = this.photoImage.getRoundRadius();
                        this.rectPath.reset();
                        for (int i12 = 0; i12 < roundRadius.length; i12++) {
                            float[] fArr = radii;
                            int i13 = i12 * 2;
                            float f12 = roundRadius[i12];
                            fArr[i13 + 1] = f12;
                            fArr[i13] = f12;
                        }
                        this.rectPath.addRoundRect(this.rect, radii, Path.Direction.CW);
                        this.rectPath.close();
                        canvas.drawPath(this.rectPath, Theme.chat_docBackPaint);
                        Drawable drawable3 = Theme.chat_locationDrawable[this.currentMessageObject.isOutOwner() ? 1 : 0];
                        BaseCell.setDrawableBounds(drawable3, this.rect.centerX() - (drawable3.getIntrinsicWidth() / 2), this.rect.centerY() - (drawable3.getIntrinsicHeight() / 2));
                        drawable3.draw(canvas);
                    }
                    CheckBoxBase checkBoxBase = this.mediaCheckBox;
                    boolean z3 = checkBoxBase != null && (this.checkBoxVisible || checkBoxBase.getProgress() != 0.0f || this.checkBoxAnimationInProgress) && this.currentMessagesGroup != null;
                    this.drawMediaCheckBox = z3;
                    if (z3 && ((this.mediaCheckBox.isChecked() || this.mediaCheckBox.getProgress() != 0.0f || this.checkBoxAnimationInProgress) && !textIsSelectionMode())) {
                        if (!this.currentMessagesGroup.isDocuments) {
                            Theme.chat_replyLinePaint.setColor(getThemedColor(this.currentMessageObject.isOutOwner() ? "chat_outBubbleSelected" : "chat_inBubbleSelected"));
                            this.rect.set(this.photoImage.getImageX(), this.photoImage.getImageY(), this.photoImage.getImageX2(), this.photoImage.getImageY2());
                            int[] roundRadius2 = this.photoImage.getRoundRadius();
                            this.rectPath.reset();
                            for (int i14 = 0; i14 < roundRadius2.length; i14++) {
                                float[] fArr2 = radii;
                                int i15 = i14 * 2;
                                float f13 = roundRadius2[i14];
                                fArr2[i15 + 1] = f13;
                                fArr2[i15] = f13;
                            }
                            this.rectPath.addRoundRect(this.rect, radii, Path.Direction.CW);
                            this.rectPath.close();
                            canvas.drawPath(this.rectPath, Theme.chat_replyLinePaint);
                        }
                        this.photoImage.setSideClip(AndroidUtilities.dp(14.0f) * this.mediaCheckBox.getProgress());
                        if (this.checkBoxAnimationInProgress) {
                            this.mediaCheckBox.setBackgroundAlpha(this.checkBoxAnimationProgress);
                        } else {
                            CheckBoxBase checkBoxBase2 = this.mediaCheckBox;
                            checkBoxBase2.setBackgroundAlpha(this.checkBoxVisible ? 1.0f : checkBoxBase2.getProgress());
                        }
                    } else {
                        this.photoImage.setSideClip(0.0f);
                    }
                    ChatMessageCellDelegate chatMessageCellDelegate = this.delegate;
                    if (chatMessageCellDelegate == null || chatMessageCellDelegate.getPinchToZoomHelper() == null || !this.delegate.getPinchToZoomHelper().isInOverlayModeFor(this)) {
                        float y = getY() + this.photoImage.getImageY();
                        float imageHeight = this.photoImage.getImageHeight() + y;
                        this.photoImageOutOfBounds = false;
                        float f14 = this.parentBoundsTop;
                        if ((f14 != 0.0f || this.parentBoundsBottom != 0) && (imageHeight < f14 || y > this.parentBoundsBottom)) {
                            this.photoImageOutOfBounds = true;
                        }
                        if (!this.photoImageOutOfBounds || this.drawForBlur) {
                            this.photoImage.setSkipUpdateFrame(this.drawForBlur);
                            if (this.flipImage) {
                                canvas.save();
                                canvas.scale(-1.0f, 1.0f, this.photoImage.getCenterX(), this.photoImage.getCenterY());
                                this.imageDrawn = this.photoImage.draw(canvas);
                                canvas.restore();
                            } else {
                                this.imageDrawn = this.photoImage.draw(canvas);
                            }
                            this.photoImage.setSkipUpdateFrame(false);
                        }
                    }
                    boolean z4 = this.drawTime;
                    boolean visible = this.photoImage.getVisible();
                    boolean z5 = visible || (this.currentMessageObject.shouldDrawReactionsInLayout() && this.currentMessageObject.hasReactions());
                    this.drawTime = z5;
                    if (this.currentPosition != null && z4 != z5 && (viewGroup = (ViewGroup) getParent()) != null) {
                        if (!this.currentPosition.last) {
                            int childCount = viewGroup.getChildCount();
                            for (int i16 = 0; i16 < childCount; i16++) {
                                View childAt = viewGroup.getChildAt(i16);
                                if (childAt != this && (childAt instanceof ChatMessageCell)) {
                                    ChatMessageCell chatMessageCell = (ChatMessageCell) childAt;
                                    if (chatMessageCell.getCurrentMessagesGroup() == this.currentMessagesGroup) {
                                        MessageObject.GroupedMessagePosition currentPosition = chatMessageCell.getCurrentPosition();
                                        if (currentPosition.last && currentPosition.maxY == this.currentPosition.maxY && (chatMessageCell.timeX - AndroidUtilities.dp(4.0f)) + chatMessageCell.getLeft() < getRight()) {
                                            chatMessageCell.groupPhotoInvisible = !visible;
                                            chatMessageCell.invalidate();
                                            viewGroup.invalidate();
                                        }
                                    }
                                }
                            }
                        } else {
                            viewGroup.invalidate();
                        }
                    }
                }
            } else {
                int i17 = this.documentAttachType;
                if (i17 == 5 || i17 == 1) {
                    CheckBoxBase checkBoxBase3 = this.mediaCheckBox;
                    boolean z6 = checkBoxBase3 != null && (this.checkBoxVisible || checkBoxBase3.getProgress() != 0.0f || this.checkBoxAnimationInProgress) && this.currentMessagesGroup != null;
                    this.drawMediaCheckBox = z6;
                    if (z6) {
                        this.radialProgress.setCircleCrossfadeColor(this.currentMessageObject.isOutOwner() ? "chat_outTimeText" : "chat_inTimeText", this.checkBoxAnimationProgress, 1.0f - this.mediaCheckBox.getProgress());
                    }
                    if (this.drawMediaCheckBox && !textIsSelectionMode() && (this.mediaCheckBox.isChecked() || this.mediaCheckBox.getProgress() != 0.0f || this.checkBoxAnimationInProgress)) {
                        if (this.checkBoxAnimationInProgress) {
                            this.mediaCheckBox.setBackgroundAlpha(this.checkBoxAnimationProgress);
                            if (this.radialProgress.getMiniIcon() == 4) {
                                this.radialProgress.setMiniIconScale(this.checkBoxAnimationProgress);
                            }
                        } else {
                            CheckBoxBase checkBoxBase4 = this.mediaCheckBox;
                            checkBoxBase4.setBackgroundAlpha(this.checkBoxVisible ? 1.0f : checkBoxBase4.getProgress());
                        }
                    } else {
                        CheckBoxBase checkBoxBase5 = this.mediaCheckBox;
                        if (checkBoxBase5 != null) {
                            checkBoxBase5.setBackgroundAlpha(1.0f);
                        }
                    }
                }
            }
        }
        int i18 = this.documentAttachType;
        String str2 = "chat_outAudioProgress";
        if (i18 == 2) {
            if (this.photoImage.getVisible() && !this.hasGamePreview && !this.currentMessageObject.needDrawBluredPreview()) {
                int alpha = ((BitmapDrawable) Theme.chat_msgMediaMenuDrawable).getPaint().getAlpha();
                Theme.chat_msgMediaMenuDrawable.setAlpha((int) (alpha * this.controlsAlpha));
                Drawable drawable4 = Theme.chat_msgMediaMenuDrawable;
                int imageX2 = (int) ((this.photoImage.getImageX() + this.photoImage.getImageWidth()) - AndroidUtilities.dp(14.0f));
                this.otherX = imageX2;
                int imageY2 = (int) (this.photoImage.getImageY() + AndroidUtilities.dp(8.1f));
                this.otherY = imageY2;
                BaseCell.setDrawableBounds(drawable4, imageX2, imageY2);
                Theme.chat_msgMediaMenuDrawable.draw(canvas);
                Theme.chat_msgMediaMenuDrawable.setAlpha(alpha);
            }
        } else if (i18 == 7) {
            if (this.durationLayout != null && ((isPlayingMessage = MediaController.getInstance().isPlayingMessage(this.currentMessageObject)) || this.roundProgressAlpha != 0.0f)) {
                if (isPlayingMessage) {
                    this.roundProgressAlpha = 1.0f;
                } else {
                    float f15 = this.roundProgressAlpha - 0.10666667f;
                    this.roundProgressAlpha = f15;
                    if (f15 < 0.0f) {
                        this.roundProgressAlpha = 0.0f;
                    } else {
                        invalidate();
                    }
                }
                drawRoundProgress(canvas);
            }
        } else if (i18 == i) {
            if (this.currentMessageObject.isOutOwner()) {
                Theme.chat_audioTitlePaint.setColor(getThemedColor("chat_outAudioTitleText"));
                Theme.chat_audioPerformerPaint.setColor(getThemedColor(isDrawSelectionBackground() ? "chat_outAudioPerfomerSelectedText" : "chat_outAudioPerfomerText"));
                Theme.chat_audioTimePaint.setColor(getThemedColor(isDrawSelectionBackground() ? "chat_outAudioDurationSelectedText" : "chat_outAudioDurationText"));
                this.radialProgress.setProgressColor(getThemedColor((isDrawSelectionBackground() || this.buttonPressed != 0) ? "chat_outAudioSelectedProgress" : str2));
            } else {
                Theme.chat_audioTitlePaint.setColor(getThemedColor("chat_inAudioTitleText"));
                Theme.chat_audioPerformerPaint.setColor(getThemedColor(isDrawSelectionBackground() ? "chat_inAudioPerfomerSelectedText" : "chat_inAudioPerfomerText"));
                Theme.chat_audioTimePaint.setColor(getThemedColor(isDrawSelectionBackground() ? "chat_inAudioDurationSelectedText" : "chat_inAudioDurationText"));
                this.radialProgress.setProgressColor(getThemedColor((isDrawSelectionBackground() || this.buttonPressed != 0) ? "chat_inAudioSelectedProgress" : "chat_inAudioProgress"));
            }
            this.radialProgress.setBackgroundDrawable(isDrawSelectionBackground() ? this.currentBackgroundSelectedDrawable : this.currentBackgroundDrawable);
            this.radialProgress.draw(canvas);
            canvas.save();
            canvas.translate(this.timeAudioX + this.songX, AndroidUtilities.dp(13.0f) + this.namesOffset + this.mediaOffsetY);
            this.songLayout.draw(canvas);
            canvas.restore();
            boolean isPlayingMessage2 = MediaController.getInstance().isPlayingMessage(this.currentMessageObject);
            if (isPlayingMessage2) {
                float f16 = this.toSeekBarProgress;
                if (f16 != 1.0f) {
                    float f17 = f16 + 0.16f;
                    this.toSeekBarProgress = f17;
                    if (f17 > 1.0f) {
                        this.toSeekBarProgress = 1.0f;
                    }
                    invalidate();
                    f = 0.0f;
                    f2 = this.toSeekBarProgress;
                    if (f2 > f) {
                        if (f2 != 1.0f) {
                            canvas.saveLayerAlpha(this.seekBarX, this.seekBarY, i5 + this.seekBar.getWidth() + AndroidUtilities.dp(24.0f), this.seekBarY + AndroidUtilities.dp(24.0f), (int) (this.toSeekBarProgress * 255.0f), 31);
                        } else {
                            canvas.save();
                        }
                        canvas.translate(this.seekBarX, this.seekBarY);
                        this.seekBar.draw(canvas);
                        canvas.restore();
                    }
                    if (this.toSeekBarProgress < 1.0f) {
                        float f18 = this.timeAudioX + this.performerX;
                        float dp7 = AndroidUtilities.dp(35.0f) + this.namesOffset + this.mediaOffsetY;
                        if (this.toSeekBarProgress != 0.0f) {
                            f3 = dp7;
                            canvas.saveLayerAlpha(f18, dp7, f18 + this.performerLayout.getWidth(), dp7 + this.performerLayout.getHeight(), (int) ((1.0f - this.toSeekBarProgress) * 255.0f), 31);
                        } else {
                            f3 = dp7;
                            canvas.save();
                        }
                        float f19 = this.toSeekBarProgress;
                        if (f19 != 0.0f) {
                            float f20 = ((1.0f - f19) * 0.3f) + 0.7f;
                            canvas.scale(f20, f20, f18, f3 + (this.performerLayout.getHeight() / 2.0f));
                        }
                        canvas.translate(f18, f3);
                        this.performerLayout.draw(canvas);
                        canvas.restore();
                    }
                    canvas.save();
                    canvas.translate(this.timeAudioX, AndroidUtilities.dp(57.0f) + this.namesOffset + this.mediaOffsetY);
                    this.durationLayout.draw(canvas);
                    canvas.restore();
                    if (shouldDrawMenuDrawable()) {
                        if (this.currentMessageObject.isOutOwner()) {
                            drawable2 = getThemedDrawable(isDrawSelectionBackground() ? "drawableMsgOutMenuSelected" : "drawableMsgOutMenu");
                        } else {
                            drawable2 = isDrawSelectionBackground() ? Theme.chat_msgInMenuSelectedDrawable : Theme.chat_msgInMenuDrawable;
                        }
                        int dp8 = (((int) f4) + this.backgroundWidth) - AndroidUtilities.dp(this.currentMessageObject.type == 0 ? 58.0f : 48.0f);
                        this.otherX = dp8;
                        int dp9 = ((int) f10) - AndroidUtilities.dp(2.0f);
                        this.otherY = dp9;
                        BaseCell.setDrawableBounds(drawable2, dp8, dp9);
                        TransitionParams transitionParams3 = this.transitionParams;
                        if (transitionParams3.animateChangeProgress != 1.0f && transitionParams3.animateShouldDrawMenuDrawable) {
                            drawable2.setAlpha((int) (this.transitionParams.animateChangeProgress * 255.0f));
                        }
                        drawable2.draw(canvas);
                        TransitionParams transitionParams4 = this.transitionParams;
                        if (transitionParams4.animateChangeProgress != 1.0f && transitionParams4.animateShouldDrawMenuDrawable) {
                            drawable2.setAlpha(255);
                        }
                    }
                }
            }
            if (!isPlayingMessage2) {
                float f21 = this.toSeekBarProgress;
                f = 0.0f;
                if (f21 != 0.0f) {
                    float f22 = f21 - 0.16f;
                    this.toSeekBarProgress = f22;
                    if (f22 < 0.0f) {
                        this.toSeekBarProgress = 0.0f;
                    }
                    invalidate();
                }
                f2 = this.toSeekBarProgress;
                if (f2 > f) {
                }
                if (this.toSeekBarProgress < 1.0f) {
                }
                canvas.save();
                canvas.translate(this.timeAudioX, AndroidUtilities.dp(57.0f) + this.namesOffset + this.mediaOffsetY);
                this.durationLayout.draw(canvas);
                canvas.restore();
                if (shouldDrawMenuDrawable()) {
                }
            }
            f = 0.0f;
            f2 = this.toSeekBarProgress;
            if (f2 > f) {
            }
            if (this.toSeekBarProgress < 1.0f) {
            }
            canvas.save();
            canvas.translate(this.timeAudioX, AndroidUtilities.dp(57.0f) + this.namesOffset + this.mediaOffsetY);
            this.durationLayout.draw(canvas);
            canvas.restore();
            if (shouldDrawMenuDrawable()) {
            }
        } else if (i18 == 3) {
            if (this.currentMessageObject.isOutOwner()) {
                Theme.chat_audioTimePaint.setColor(getThemedColor(isDrawSelectionBackground() ? "chat_outAudioDurationSelectedText" : "chat_outAudioDurationText"));
                this.radialProgress.setProgressColor(getThemedColor((isDrawSelectionBackground() || this.buttonPressed != 0) ? "chat_outAudioSelectedProgress" : str2));
            } else {
                Theme.chat_audioTimePaint.setColor(getThemedColor(isDrawSelectionBackground() ? "chat_inAudioDurationSelectedText" : "chat_inAudioDurationText"));
                this.radialProgress.setProgressColor(getThemedColor((isDrawSelectionBackground() || this.buttonPressed != 0) ? "chat_inAudioSelectedProgress" : "chat_inAudioProgress"));
            }
            if (MediaController.getInstance().isPlayingMessage(this.currentMessageObject)) {
                audioVisualizerDrawable = Theme.getCurrentAudiVisualizerDrawable();
            } else {
                audioVisualizerDrawable = Theme.getAnimatedOutAudioVisualizerDrawable(this.currentMessageObject);
            }
            if (audioVisualizerDrawable != null) {
                audioVisualizerDrawable.setParentView(this);
                audioVisualizerDrawable.draw(canvas, f4 + AndroidUtilities.dp(22.0f), f10 + AndroidUtilities.dp(22.0f), this.currentMessageObject.isOutOwner(), this.resourcesProvider);
            }
            if (!this.enterTransitionInProgress) {
                this.radialProgress.setBackgroundDrawable(isDrawSelectionBackground() ? this.currentBackgroundSelectedDrawable : this.currentBackgroundDrawable);
                this.radialProgress.draw(canvas);
            }
            int i19 = this.seekBarX;
            int i20 = this.timeAudioX;
            if (this.transitionParams.animateButton) {
                int i21 = this.buttonX;
                float f23 = this.transitionParams.animateFromButtonX;
                float f24 = this.transitionParams.animateChangeProgress;
                int i22 = i21 - ((int) ((f23 * (1.0f - f24)) + (this.buttonX * f24)));
                i19 -= i22;
                i20 -= i22;
            }
            canvas.save();
            if (this.useSeekBarWaveform) {
                canvas.translate(AndroidUtilities.dp(13.0f) + i19, this.seekBarY);
                this.seekBarWaveform.draw(canvas, this);
            } else {
                canvas.translate(i19, this.seekBarY);
                this.seekBar.draw(canvas);
            }
            canvas.restore();
            if (this.useTranscribeButton) {
                canvas.save();
                int i23 = this.backgroundWidth;
                TransitionParams transitionParams5 = this.transitionParams;
                if (transitionParams5.animateBackgroundBoundsInner && this.documentAttachType == 3) {
                    i23 = (int) ((i23 - transitionParams5.deltaLeft) + transitionParams5.deltaRight);
                }
                float dp10 = i19 + AndroidUtilities.dp(21.0f) + (i23 - AndroidUtilities.dp(((this.hasLinkPreview ? 10 : 0) + 92) + 36));
                this.transcribeX = dp10;
                float f25 = this.seekBarY;
                this.transcribeY = f25;
                canvas.translate(dp10, f25);
                if (this.transcribeButton == null) {
                    TranscribeButton transcribeButton = new TranscribeButton(this, this.seekBarWaveform);
                    this.transcribeButton = transcribeButton;
                    TLRPC$Message tLRPC$Message = this.currentMessageObject.messageOwner;
                    transcribeButton.setOpen(tLRPC$Message != null && tLRPC$Message.voiceTranscriptionOpen && tLRPC$Message.voiceTranscriptionFinal, false);
                    this.transcribeButton.setLoading(TranscribeButton.isTranscribing(this.currentMessageObject), false);
                }
                this.transcribeButton.setColor(this.currentMessageObject.isOut(), getThemedColor(this.currentMessageObject.isOutOwner() ? "chat_outReactionButtonBackground" : "chat_inReactionButtonBackground"), getThemedColor("windowBackgroundWhiteGrayText"));
                this.transcribeButton.draw(canvas);
                canvas.restore();
            }
            canvas.save();
            canvas.translate(i20, AndroidUtilities.dp(44.0f) + this.namesOffset + this.mediaOffsetY);
            this.durationLayout.draw(canvas);
            canvas.restore();
            MessageObject messageObject4 = this.currentMessageObject;
            if (messageObject4.type != 0 && messageObject4.isContentUnread()) {
                Theme.chat_docBackPaint.setColor(getThemedColor(this.currentMessageObject.isOutOwner() ? "chat_outVoiceSeekbarFill" : "chat_inVoiceSeekbarFill"));
                canvas.drawCircle(i20 + this.timeWidthAudio + AndroidUtilities.dp(6.0f), AndroidUtilities.dp(51.0f) + this.namesOffset + this.mediaOffsetY, AndroidUtilities.dp(3.0f), Theme.chat_docBackPaint);
            }
        }
        if (this.captionLayout != null) {
            updateCaptionLayout();
        }
        updateReactionLayoutPosition();
        if (shouldDrawCaptionLayout()) {
            drawCaptionLayout(canvas, false, 1.0f);
        }
        if (this.hasOldCaptionPreview) {
            MessageObject messageObject5 = this.currentMessageObject;
            int i24 = messageObject5.type;
            if (i24 == 1 || this.documentAttachType == 4 || i24 == 8) {
                i2 = (int) (this.photoImage.getImageX() + AndroidUtilities.dp(5.0f));
            } else {
                int i25 = this.backgroundDrawableLeft;
                if (!messageObject5.isOutOwner()) {
                    f11 = 17.0f;
                }
                i2 = i25 + AndroidUtilities.dp(f11);
            }
            int i26 = i2;
            int dp11 = ((this.totalHeight - AndroidUtilities.dp(this.drawPinnedTop ? 9.0f : 10.0f)) - this.linkPreviewHeight) - AndroidUtilities.dp(8.0f);
            Theme.chat_replyLinePaint.setColor(getThemedColor(this.currentMessageObject.isOutOwner() ? "chat_outPreviewLine" : "chat_inPreviewLine"));
            canvas.drawRect(i26, dp11 - AndroidUtilities.dp(3.0f), AndroidUtilities.dp(2.0f) + i26, this.linkPreviewHeight + dp11, Theme.chat_replyLinePaint);
            if (this.siteNameLayout != null) {
                Theme.chat_replyNamePaint.setColor(getThemedColor(this.currentMessageObject.isOutOwner() ? "chat_outSiteNameText" : "chat_inSiteNameText"));
                canvas.save();
                if (this.siteNameRtl) {
                    i4 = (this.backgroundWidth - this.siteNameWidth) - AndroidUtilities.dp(32.0f);
                } else {
                    i4 = this.hasInvoicePreview ? 0 : AndroidUtilities.dp(10.0f);
                }
                canvas.translate(i4 + i26, dp11 - AndroidUtilities.dp(3.0f));
                this.siteNameLayout.draw(canvas);
                canvas.restore();
                StaticLayout staticLayout5 = this.siteNameLayout;
                i3 = staticLayout5.getLineBottom(staticLayout5.getLineCount() - 1) + dp11;
            } else {
                i3 = dp11;
            }
            if (this.currentMessageObject.isOutOwner()) {
                Theme.chat_replyTextPaint.setColor(getThemedColor("chat_messageTextOut"));
            } else {
                Theme.chat_replyTextPaint.setColor(getThemedColor("chat_messageTextIn"));
            }
            if (this.descriptionLayout != null) {
                if (i3 != dp11) {
                    i3 += AndroidUtilities.dp(2.0f);
                }
                this.descriptionY = i3 - AndroidUtilities.dp(3.0f);
                canvas.save();
                canvas.translate(i26 + AndroidUtilities.dp(10.0f) + this.descriptionX, this.descriptionY);
                this.descriptionLayout.draw(canvas);
                canvas.restore();
            }
            this.drawTime = true;
        }
        if (this.documentAttachType == 1) {
            if (this.currentMessageObject.isOutOwner()) {
                Theme.chat_docNamePaint.setColor(getThemedColor("chat_outFileNameText"));
                Theme.chat_infoPaint.setColor(getThemedColor(isDrawSelectionBackground() ? "chat_outFileInfoSelectedText" : "chat_outFileInfoText"));
                Theme.chat_docBackPaint.setColor(getThemedColor(isDrawSelectionBackground() ? "chat_outFileBackgroundSelected" : "chat_outFileBackground"));
                drawable = getThemedDrawable(isDrawSelectionBackground() ? "drawableMsgOutMenuSelected" : "drawableMsgOutMenu");
            } else {
                Theme.chat_docNamePaint.setColor(getThemedColor("chat_inFileNameText"));
                Theme.chat_infoPaint.setColor(getThemedColor(isDrawSelectionBackground() ? "chat_inFileInfoSelectedText" : "chat_inFileInfoText"));
                Theme.chat_docBackPaint.setColor(getThemedColor(isDrawSelectionBackground() ? "chat_inFileBackgroundSelected" : "chat_inFileBackground"));
                drawable = isDrawSelectionBackground() ? Theme.chat_msgInMenuSelectedDrawable : Theme.chat_msgInMenuDrawable;
            }
            if (this.drawPhotoImage) {
                if (this.currentMessageObject.type == 0) {
                    int imageX3 = (int) ((this.photoImage.getImageX() + this.backgroundWidth) - AndroidUtilities.dp(56.0f));
                    this.otherX = imageX3;
                    int imageY3 = (int) (this.photoImage.getImageY() + AndroidUtilities.dp(4.0f));
                    this.otherY = imageY3;
                    BaseCell.setDrawableBounds(drawable, imageX3, imageY3);
                } else {
                    int imageX4 = (int) ((this.photoImage.getImageX() + this.backgroundWidth) - AndroidUtilities.dp(40.0f));
                    this.otherX = imageX4;
                    int imageY4 = (int) (this.photoImage.getImageY() + AndroidUtilities.dp(4.0f));
                    this.otherY = imageY4;
                    BaseCell.setDrawableBounds(drawable, imageX4, imageY4);
                }
                dp = (int) (this.photoImage.getImageX() + this.photoImage.getImageWidth() + AndroidUtilities.dp(10.0f));
                dp2 = (int) (this.photoImage.getImageY() + AndroidUtilities.dp(8.0f));
                dp3 = (int) (this.photoImage.getImageY() + (this.docTitleLayout != null ? staticLayout2.getLineBottom(staticLayout2.getLineCount() - 1) + AndroidUtilities.dp(13.0f) : AndroidUtilities.dp(8.0f)));
                if (!this.imageDrawn) {
                    if (this.currentMessageObject.isOutOwner()) {
                        this.radialProgress.setColors("chat_outLoader", "chat_outLoaderSelected", "chat_outMediaIcon", "chat_outMediaIconSelected");
                        this.radialProgress.setProgressColor(getThemedColor(isDrawSelectionBackground() ? "chat_outFileProgressSelected" : "chat_outFileProgress"));
                        this.videoRadialProgress.setColors("chat_outLoader", "chat_outLoaderSelected", "chat_outMediaIcon", "chat_outMediaIconSelected");
                        this.videoRadialProgress.setProgressColor(getThemedColor(isDrawSelectionBackground() ? "chat_outFileProgressSelected" : "chat_outFileProgress"));
                    } else {
                        this.radialProgress.setColors("chat_inLoader", "chat_inLoaderSelected", "chat_inMediaIcon", "chat_inMediaIconSelected");
                        this.radialProgress.setProgressColor(getThemedColor(isDrawSelectionBackground() ? "chat_inFileProgressSelected" : "chat_inFileProgress"));
                        this.videoRadialProgress.setColors("chat_inLoader", "chat_inLoaderSelected", "chat_inMediaIcon", "chat_inMediaIconSelected");
                        this.videoRadialProgress.setProgressColor(getThemedColor(isDrawSelectionBackground() ? "chat_inFileProgressSelected" : "chat_inFileProgress"));
                    }
                    this.rect.set(this.photoImage.getImageX(), this.photoImage.getImageY(), this.photoImage.getImageX() + this.photoImage.getImageWidth(), this.photoImage.getImageY() + this.photoImage.getImageHeight());
                    int[] roundRadius3 = this.photoImage.getRoundRadius();
                    this.rectPath.reset();
                    for (int i27 = 0; i27 < roundRadius3.length; i27++) {
                        float[] fArr3 = radii;
                        int i28 = i27 * 2;
                        fArr3[i28] = roundRadius3[i27];
                        fArr3[i28 + 1] = roundRadius3[i27];
                    }
                    this.rectPath.addRoundRect(this.rect, radii, Path.Direction.CW);
                    this.rectPath.close();
                    canvas.drawPath(this.rectPath, Theme.chat_docBackPaint);
                } else {
                    this.radialProgress.setColors("chat_mediaLoaderPhoto", "chat_mediaLoaderPhotoSelected", "chat_mediaLoaderPhotoIcon", "chat_mediaLoaderPhotoIconSelected");
                    String str3 = str;
                    this.radialProgress.setProgressColor(getThemedColor(str3));
                    this.videoRadialProgress.setColors("chat_mediaLoaderPhoto", "chat_mediaLoaderPhotoSelected", "chat_mediaLoaderPhotoIcon", "chat_mediaLoaderPhotoIconSelected");
                    this.videoRadialProgress.setProgressColor(getThemedColor(str3));
                    if (this.buttonState == -1 && this.radialProgress.getIcon() != 4) {
                        this.radialProgress.setIcon(4, true, true);
                    }
                }
            } else {
                int dp12 = (((int) f4) + this.backgroundWidth) - AndroidUtilities.dp(this.currentMessageObject.type == 0 ? 58.0f : 48.0f);
                this.otherX = dp12;
                int i29 = (int) f10;
                int dp13 = i29 - AndroidUtilities.dp(2.0f);
                this.otherY = dp13;
                BaseCell.setDrawableBounds(drawable, dp12, dp13);
                dp = f4 + AndroidUtilities.dp(53.0f);
                dp2 = AndroidUtilities.dp(4.0f) + i29;
                dp3 = i29 + AndroidUtilities.dp(27.0f);
                StaticLayout staticLayout6 = this.docTitleLayout;
                if (staticLayout6 != null && staticLayout6.getLineCount() > 1) {
                    dp3 += ((this.docTitleLayout.getLineCount() - 1) * AndroidUtilities.dp(16.0f)) + AndroidUtilities.dp(2.0f);
                }
                if (this.currentMessageObject.isOutOwner()) {
                    this.radialProgress.setProgressColor(getThemedColor((isDrawSelectionBackground() || this.buttonPressed != 0) ? "chat_outAudioSelectedProgress" : str2));
                    RadialProgress2 radialProgress2 = this.videoRadialProgress;
                    if (isDrawSelectionBackground() || this.videoButtonPressed != 0) {
                        str2 = "chat_outAudioSelectedProgress";
                    }
                    radialProgress2.setProgressColor(getThemedColor(str2));
                } else {
                    this.radialProgress.setProgressColor(getThemedColor((isDrawSelectionBackground() || this.buttonPressed != 0) ? "chat_inAudioSelectedProgress" : "chat_inAudioProgress"));
                    this.videoRadialProgress.setProgressColor(getThemedColor((isDrawSelectionBackground() || this.videoButtonPressed != 0) ? "chat_inAudioSelectedProgress" : "chat_inAudioProgress"));
                }
            }
            int i30 = dp2;
            float f26 = dp;
            if (shouldDrawMenuDrawable()) {
                TransitionParams transitionParams6 = this.transitionParams;
                if (transitionParams6.animateChangeProgress != 1.0f && transitionParams6.animateShouldDrawMenuDrawable) {
                    drawable.setAlpha((int) (this.transitionParams.animateChangeProgress * 255.0f));
                }
                drawable.draw(canvas);
                TransitionParams transitionParams7 = this.transitionParams;
                if (transitionParams7.animateChangeProgress != 1.0f && transitionParams7.animateShouldDrawMenuDrawable) {
                    drawable.setAlpha(255);
                }
            }
            try {
                if (this.docTitleLayout != null) {
                    canvas.save();
                    canvas.translate(this.docTitleOffsetX + f26, i30);
                    this.docTitleLayout.draw(canvas);
                    canvas.restore();
                }
            } catch (Exception e) {
                FileLog.e(e);
            }
            try {
                if (this.infoLayout != null) {
                    canvas.save();
                    canvas.translate(f26, dp3);
                    if (this.buttonState == 1 && (staticLayout = this.loadingProgressLayout) != null) {
                        staticLayout.draw(canvas);
                    } else {
                        this.infoLayout.draw(canvas);
                    }
                    canvas.restore();
                }
            } catch (Exception e2) {
                FileLog.e(e2);
            }
        }
        MessageObject messageObject6 = this.currentMessageObject;
        if (messageObject6.type == 4 && !(messageObject6.messageOwner.media instanceof TLRPC$TL_messageMediaGeoLive) && this.currentMapProvider == 2 && this.photoImage.hasNotThumb()) {
            int intrinsicWidth = (int) (Theme.chat_redLocationIcon.getIntrinsicWidth() * 0.8f);
            int intrinsicHeight = (int) (Theme.chat_redLocationIcon.getIntrinsicHeight() * 0.8f);
            int imageX5 = (int) (this.photoImage.getImageX() + ((this.photoImage.getImageWidth() - intrinsicWidth) / 2.0f));
            int imageY5 = (int) (this.photoImage.getImageY() + ((this.photoImage.getImageHeight() / 2.0f) - intrinsicHeight));
            Theme.chat_redLocationIcon.setAlpha((int) (this.photoImage.getCurrentAlpha() * 255.0f));
            Theme.chat_redLocationIcon.setBounds(imageX5, imageY5, intrinsicWidth + imageX5, intrinsicHeight + imageY5);
            Theme.chat_redLocationIcon.draw(canvas);
        }
        this.transitionParams.recordDrawingState();
    }

    /* JADX WARN: Code restructure failed: missing block: B:9:0x0017, code lost:
        if ((r1 & 1) != 0) goto L10;
     */
    /* JADX WARN: Removed duplicated region for block: B:70:0x011a  */
    /* JADX WARN: Removed duplicated region for block: B:71:0x0136  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void updateReactionLayoutPosition() {
        int i;
        float f;
        ReactionsLayoutInBubble reactionsLayoutInBubble;
        ReactionsLayoutInBubble reactionsLayoutInBubble2 = this.reactionsLayoutInBubble;
        int i2 = 0;
        if (!reactionsLayoutInBubble2.isEmpty) {
            MessageObject.GroupedMessagePosition groupedMessagePosition = this.currentPosition;
            if (groupedMessagePosition != null) {
                int i3 = groupedMessagePosition.flags;
                if ((i3 & 8) != 0) {
                }
            }
            if (!reactionsLayoutInBubble2.isSmall) {
                float f2 = 11.0f;
                if (this.currentMessageObject.isOutOwner()) {
                    this.reactionsLayoutInBubble.x = getCurrentBackgroundLeft() + AndroidUtilities.dp(11.0f);
                } else {
                    ReactionsLayoutInBubble reactionsLayoutInBubble3 = this.reactionsLayoutInBubble;
                    int currentBackgroundLeft = getCurrentBackgroundLeft();
                    if (this.mediaBackground || !this.drawPinnedBottom) {
                        f2 = 17.0f;
                    }
                    reactionsLayoutInBubble3.x = currentBackgroundLeft + AndroidUtilities.dp(f2);
                    if (this.mediaBackground) {
                        this.reactionsLayoutInBubble.x -= AndroidUtilities.dp(9.0f);
                    }
                }
                ReactionsLayoutInBubble reactionsLayoutInBubble4 = this.reactionsLayoutInBubble;
                int backgroundDrawableBottom = getBackgroundDrawableBottom() - AndroidUtilities.dp(10.0f);
                ReactionsLayoutInBubble reactionsLayoutInBubble5 = this.reactionsLayoutInBubble;
                reactionsLayoutInBubble4.y = backgroundDrawableBottom - reactionsLayoutInBubble5.height;
                reactionsLayoutInBubble5.y -= this.drawCommentButton ? AndroidUtilities.dp(43.0f) : 0;
                if (this.hasNewLineForTime) {
                    this.reactionsLayoutInBubble.y -= AndroidUtilities.dp(16.0f);
                }
                if (this.captionLayout != null) {
                    MessageObject messageObject = this.currentMessageObject;
                    if ((messageObject.type != 2 && ((!messageObject.isOut() || !this.drawForwardedName || this.drawPhotoImage) && (this.currentMessageObject.type != 9 || !this.drawPhotoImage))) || (this.currentPosition != null && this.currentMessagesGroup != null)) {
                        this.reactionsLayoutInBubble.y -= AndroidUtilities.dp(14.0f);
                    }
                }
                ReactionsLayoutInBubble reactionsLayoutInBubble6 = this.reactionsLayoutInBubble;
                reactionsLayoutInBubble6.y += reactionsLayoutInBubble6.positionOffsetY;
            }
        }
        ReactionsLayoutInBubble reactionsLayoutInBubble7 = this.reactionsLayoutInBubble;
        if (!reactionsLayoutInBubble7.isSmall || reactionsLayoutInBubble7.isEmpty) {
            return;
        }
        if (shouldDrawTimeOnMedia()) {
            if (this.drawCommentButton) {
                i2 = AndroidUtilities.dp(41.3f);
            }
        } else if (this.currentMessageObject.isSponsored()) {
            i = -AndroidUtilities.dp(48.0f);
            if (this.hasNewLineForTime) {
                i -= AndroidUtilities.dp(16.0f);
            }
            ReactionsLayoutInBubble reactionsLayoutInBubble8 = this.reactionsLayoutInBubble;
            if (!shouldDrawTimeOnMedia()) {
                f = ((this.photoImage.getImageY2() + this.additionalTimeOffsetY) - AndroidUtilities.dp(7.3f)) - this.timeLayout.getHeight();
            } else {
                f = ((this.layoutHeight - AndroidUtilities.dp((this.pinnedBottom || this.pinnedTop) ? 7.5f : 6.5f)) - this.timeLayout.getHeight()) + i;
            }
            reactionsLayoutInBubble8.y = (int) f;
            this.reactionsLayoutInBubble.y = (int) (reactionsLayoutInBubble.y + ((this.timeLayout.getHeight() / 2.0f) - AndroidUtilities.dp(7.0f)));
            this.reactionsLayoutInBubble.x = this.timeX;
        } else if (this.drawCommentButton) {
            i2 = AndroidUtilities.dp(43.0f);
        }
        i = -i2;
        ReactionsLayoutInBubble reactionsLayoutInBubble82 = this.reactionsLayoutInBubble;
        if (!shouldDrawTimeOnMedia()) {
        }
        reactionsLayoutInBubble82.y = (int) f;
        this.reactionsLayoutInBubble.y = (int) (reactionsLayoutInBubble.y + ((this.timeLayout.getHeight() / 2.0f) - AndroidUtilities.dp(7.0f)));
        this.reactionsLayoutInBubble.x = this.timeX;
    }

    /* JADX WARN: Type inference failed for: r11v1, types: [int, boolean] */
    /* JADX WARN: Type inference failed for: r11v45 */
    /* JADX WARN: Type inference failed for: r11v54 */
    public void drawLinkPreview(Canvas canvas, float f) {
        int dp;
        int i;
        int dp2;
        int i2;
        int i3;
        int i4;
        int i5;
        ?? r11;
        Drawable drawable;
        int i6;
        int i7;
        int i8;
        int i9;
        boolean z;
        boolean z2;
        int i10;
        int i11;
        int i12;
        Paint paint;
        if (this.currentMessageObject.isSponsored() || this.hasLinkPreview || this.hasGamePreview || this.hasInvoicePreview) {
            if (this.hasGamePreview) {
                dp = AndroidUtilities.dp(14.0f) + this.namesOffset;
                i2 = this.unmovedTextX - AndroidUtilities.dp(10.0f);
            } else {
                if (this.hasInvoicePreview) {
                    dp = AndroidUtilities.dp(14.0f) + this.namesOffset;
                    i = this.unmovedTextX;
                    dp2 = AndroidUtilities.dp(1.0f);
                } else if (this.currentMessageObject.isSponsored()) {
                    dp = (this.textY + this.currentMessageObject.textHeight) - AndroidUtilities.dp(2.0f);
                    if (this.hasNewLineForTime) {
                        dp += AndroidUtilities.dp(16.0f);
                    }
                    i = this.unmovedTextX;
                    dp2 = AndroidUtilities.dp(1.0f);
                } else {
                    dp = this.textY + this.currentMessageObject.textHeight + AndroidUtilities.dp(8.0f);
                    i = this.unmovedTextX;
                    dp2 = AndroidUtilities.dp(1.0f);
                }
                i2 = i + dp2;
            }
            int i13 = dp;
            int i14 = i2;
            if (!this.hasInvoicePreview && !this.currentMessageObject.isSponsored()) {
                Theme.chat_replyLinePaint.setColor(getThemedColor(this.currentMessageObject.isOutOwner() ? "chat_outPreviewLine" : "chat_inPreviewLine"));
                if (f != 1.0f) {
                    Theme.chat_replyLinePaint.setAlpha((int) (paint.getAlpha() * f));
                }
                canvas.drawRect(i14, i13 - AndroidUtilities.dp(3.0f), AndroidUtilities.dp(2.0f) + i14, this.linkPreviewHeight + i13 + AndroidUtilities.dp(3.0f), Theme.chat_replyLinePaint);
            }
            if (this.siteNameLayout != null) {
                int dp3 = i13 - AndroidUtilities.dp(1.0f);
                Theme.chat_replyNamePaint.setColor(getThemedColor(this.currentMessageObject.isOutOwner() ? "chat_outSiteNameText" : "chat_inSiteNameText"));
                if (f != 1.0f) {
                    Theme.chat_replyNamePaint.setAlpha((int) (Theme.chat_replyLinePaint.getAlpha() * f));
                }
                canvas.save();
                if (this.siteNameRtl) {
                    i12 = (this.backgroundWidth - this.siteNameWidth) - AndroidUtilities.dp(32.0f);
                    if (this.isSmallImage) {
                        i12 -= AndroidUtilities.dp(54.0f);
                    }
                } else {
                    i12 = this.hasInvoicePreview ? 0 : AndroidUtilities.dp(10.0f);
                }
                canvas.translate(i12 + i14, i13 - AndroidUtilities.dp(3.0f));
                this.siteNameLayout.draw(canvas);
                canvas.restore();
                StaticLayout staticLayout = this.siteNameLayout;
                i4 = staticLayout.getLineBottom(staticLayout.getLineCount() - 1) + i13;
                i3 = dp3;
            } else {
                i4 = i13;
                i3 = 0;
            }
            if ((this.hasGamePreview || this.hasInvoicePreview) && (i11 = this.currentMessageObject.textHeight) != 0) {
                i13 += i11 + AndroidUtilities.dp(4.0f);
                i4 += this.currentMessageObject.textHeight + AndroidUtilities.dp(4.0f);
            }
            if ((!this.drawPhotoImage || !this.drawInstantView || (i10 = this.drawInstantViewType) == 9 || i10 == 13 || i10 == 11 || i10 == 1) && (this.drawInstantViewType != 6 || this.imageBackgroundColor == 0)) {
                r11 = 1;
                i5 = 0;
            } else {
                if (i4 != i13) {
                    i4 += AndroidUtilities.dp(2.0f);
                }
                int i15 = i4;
                if (this.imageBackgroundSideColor != 0) {
                    int dp4 = AndroidUtilities.dp(10.0f) + i14;
                    ImageReceiver imageReceiver = this.photoImage;
                    float f2 = dp4;
                    imageReceiver.setImageCoords(((this.imageBackgroundSideWidth - imageReceiver.getImageWidth()) / 2.0f) + f2, i15, this.photoImage.getImageWidth(), this.photoImage.getImageHeight());
                    this.rect.set(f2, this.photoImage.getImageY(), dp4 + this.imageBackgroundSideWidth, this.photoImage.getImageY2());
                    Theme.chat_instantViewPaint.setColor(ColorUtils.setAlphaComponent(this.imageBackgroundSideColor, (int) (f * 255.0f)));
                    canvas.drawRoundRect(this.rect, AndroidUtilities.dp(4.0f), AndroidUtilities.dp(4.0f), Theme.chat_instantViewPaint);
                } else {
                    this.photoImage.setImageCoords(AndroidUtilities.dp(10.0f) + i14, i15, this.photoImage.getImageWidth(), this.photoImage.getImageHeight());
                }
                if (this.imageBackgroundColor != 0) {
                    this.rect.set(this.photoImage.getImageX(), this.photoImage.getImageY(), this.photoImage.getImageX2(), this.photoImage.getImageY2());
                    if (this.imageBackgroundGradientColor1 != 0) {
                        if (this.imageBackgroundGradientColor2 != 0) {
                            if (this.motionBackgroundDrawable == null) {
                                MotionBackgroundDrawable motionBackgroundDrawable = new MotionBackgroundDrawable(this.imageBackgroundColor, this.imageBackgroundGradientColor1, this.imageBackgroundGradientColor2, this.imageBackgroundGradientColor3, true);
                                this.motionBackgroundDrawable = motionBackgroundDrawable;
                                if (this.imageBackgroundIntensity < 0.0f) {
                                    this.photoImage.setGradientBitmap(motionBackgroundDrawable.getBitmap());
                                }
                                if (!this.photoImage.hasImageSet()) {
                                    this.motionBackgroundDrawable.setRoundRadius(AndroidUtilities.dp(4.0f));
                                }
                            }
                        } else {
                            if (this.gradientShader == null) {
                                Rect gradientPoints = BackgroundGradientDrawable.getGradientPoints(AndroidUtilities.getWallpaperRotation(this.imageBackgroundGradientRotation, false), (int) this.rect.width(), (int) this.rect.height());
                                this.gradientShader = new LinearGradient(gradientPoints.left, gradientPoints.top, gradientPoints.right, gradientPoints.bottom, new int[]{this.imageBackgroundColor, this.imageBackgroundGradientColor1}, (float[]) null, Shader.TileMode.CLAMP);
                            }
                            Theme.chat_instantViewPaint.setShader(this.gradientShader);
                            if (f != 1.0f) {
                                Theme.chat_instantViewPaint.setAlpha((int) (f * 255.0f));
                            }
                        }
                    } else {
                        Theme.chat_instantViewPaint.setShader(null);
                        Theme.chat_instantViewPaint.setColor(this.imageBackgroundColor);
                        if (f != 1.0f) {
                            Theme.chat_instantViewPaint.setAlpha((int) (f * 255.0f));
                        }
                    }
                    MotionBackgroundDrawable motionBackgroundDrawable2 = this.motionBackgroundDrawable;
                    if (motionBackgroundDrawable2 != null) {
                        RectF rectF = this.rect;
                        motionBackgroundDrawable2.setBounds((int) rectF.left, (int) rectF.top, (int) rectF.right, (int) rectF.bottom);
                        this.motionBackgroundDrawable.draw(canvas);
                        i9 = i15;
                        z2 = true;
                        i5 = 0;
                    } else if (this.imageBackgroundSideColor != 0) {
                        i9 = i15;
                        i5 = 0;
                        z2 = true;
                        canvas.drawRect(this.photoImage.getImageX(), this.photoImage.getImageY(), this.photoImage.getImageX2(), this.photoImage.getImageY2(), Theme.chat_instantViewPaint);
                    } else {
                        i9 = i15;
                        z2 = true;
                        i5 = 0;
                        canvas.drawRoundRect(this.rect, AndroidUtilities.dp(4.0f), AndroidUtilities.dp(4.0f), Theme.chat_instantViewPaint);
                    }
                    Theme.chat_instantViewPaint.setShader(null);
                    Theme.chat_instantViewPaint.setAlpha(255);
                    z = z2;
                } else {
                    i9 = i15;
                    z = true;
                    i5 = 0;
                }
                if (this.drawPhotoImage && this.drawInstantView && this.drawInstantViewType != 9) {
                    if (this.drawImageButton) {
                        int dp5 = AndroidUtilities.dp(48.0f);
                        float f3 = dp5;
                        int imageX = (int) (this.photoImage.getImageX() + ((this.photoImage.getImageWidth() - f3) / 2.0f));
                        this.buttonX = imageX;
                        this.buttonX = imageX;
                        int imageY = (int) (this.photoImage.getImageY() + ((this.photoImage.getImageHeight() - f3) / 2.0f));
                        this.buttonY = imageY;
                        this.buttonY = imageY;
                        RadialProgress2 radialProgress2 = this.radialProgress;
                        int i16 = this.buttonX;
                        radialProgress2.setProgressRect(i16, imageY, i16 + dp5, dp5 + imageY);
                    }
                    ChatMessageCellDelegate chatMessageCellDelegate = this.delegate;
                    if (chatMessageCellDelegate == null || chatMessageCellDelegate.getPinchToZoomHelper() == null || !this.delegate.getPinchToZoomHelper().isInOverlayModeFor(this)) {
                        if (f != 1.0f) {
                            this.photoImage.setAlpha(f);
                            this.imageDrawn = this.photoImage.draw(canvas);
                            this.photoImage.setAlpha(1.0f);
                        } else {
                            this.imageDrawn = this.photoImage.draw(canvas);
                        }
                    }
                }
                i4 = (int) (i9 + this.photoImage.getImageHeight() + AndroidUtilities.dp(6.0f));
                r11 = z;
            }
            if (this.currentMessageObject.isOutOwner()) {
                int i17 = (int) (f * 255.0f);
                Theme.chat_replyNamePaint.setColor(ColorUtils.setAlphaComponent(getThemedColor("chat_messageTextOut"), i17));
                Theme.chat_replyTextPaint.setColor(ColorUtils.setAlphaComponent(getThemedColor("chat_messageTextOut"), i17));
            } else {
                int i18 = (int) (f * 255.0f);
                Theme.chat_replyNamePaint.setColor(ColorUtils.setAlphaComponent(getThemedColor("chat_messageTextIn"), i18));
                Theme.chat_replyTextPaint.setColor(ColorUtils.setAlphaComponent(getThemedColor("chat_messageTextIn"), i18));
            }
            if (this.titleLayout != null) {
                if (i4 != i13) {
                    i4 += AndroidUtilities.dp(2.0f);
                }
                if (i3 == 0) {
                    i3 = i4 - AndroidUtilities.dp(1.0f);
                }
                canvas.save();
                canvas.translate(AndroidUtilities.dp(10.0f) + i14 + this.titleX, i4 - AndroidUtilities.dp(3.0f));
                this.titleLayout.draw(canvas);
                canvas.restore();
                StaticLayout staticLayout2 = this.titleLayout;
                i4 += staticLayout2.getLineBottom(staticLayout2.getLineCount() - r11);
            }
            if (this.authorLayout != null) {
                if (i4 != i13) {
                    i4 += AndroidUtilities.dp(2.0f);
                }
                if (i3 == 0) {
                    i3 = i4 - AndroidUtilities.dp(1.0f);
                }
                canvas.save();
                canvas.translate(AndroidUtilities.dp(10.0f) + i14 + this.authorX, i4 - AndroidUtilities.dp(3.0f));
                this.authorLayout.draw(canvas);
                canvas.restore();
                StaticLayout staticLayout3 = this.authorLayout;
                i4 += staticLayout3.getLineBottom(staticLayout3.getLineCount() - r11);
            }
            if (this.descriptionLayout != null) {
                if (i4 != i13) {
                    i4 += AndroidUtilities.dp(2.0f);
                }
                if (i3 == 0) {
                    i3 = i4 - AndroidUtilities.dp(1.0f);
                }
                this.descriptionY = i4 - AndroidUtilities.dp(3.0f);
                canvas.save();
                canvas.translate((this.hasInvoicePreview ? 0 : AndroidUtilities.dp(10.0f)) + i14 + this.descriptionX, this.descriptionY);
                if (this.linkBlockNum == -10 && this.links.draw(canvas)) {
                    invalidate();
                }
                ChatMessageCellDelegate chatMessageCellDelegate2 = this.delegate;
                if (chatMessageCellDelegate2 != null && chatMessageCellDelegate2.getTextSelectionHelper() != null && getDelegate().getTextSelectionHelper().isSelected(this.currentMessageObject)) {
                    this.delegate.getTextSelectionHelper().drawDescription(this.currentMessageObject.isOutOwner(), this.descriptionLayout, canvas);
                }
                this.descriptionLayout.draw(canvas);
                canvas.restore();
                StaticLayout staticLayout4 = this.descriptionLayout;
                int lineCount = staticLayout4.getLineCount();
                int i19 = r11 == true ? 1 : 0;
                int i20 = r11 == true ? 1 : 0;
                int i21 = r11 == true ? 1 : 0;
                int i22 = r11 == true ? 1 : 0;
                int i23 = r11 == true ? 1 : 0;
                int i24 = r11 == true ? 1 : 0;
                int i25 = r11 == true ? 1 : 0;
                i4 += staticLayout4.getLineBottom(lineCount - i19);
            }
            int i26 = i3;
            if (this.drawPhotoImage && (!this.drawInstantView || (i8 = this.drawInstantViewType) == 9 || i8 == 11 || i8 == 13 || i8 == r11)) {
                if (i4 != i13) {
                    i4 += AndroidUtilities.dp(2.0f);
                }
                if (this.isSmallImage) {
                    this.photoImage.setImageCoords((this.backgroundWidth + i14) - AndroidUtilities.dp(81.0f), i26, this.photoImage.getImageWidth(), this.photoImage.getImageHeight());
                } else {
                    this.photoImage.setImageCoords((this.hasInvoicePreview ? -AndroidUtilities.dp(6.3f) : AndroidUtilities.dp(10.0f)) + i14, i4, this.photoImage.getImageWidth(), this.photoImage.getImageHeight());
                    if (this.drawImageButton) {
                        int dp6 = AndroidUtilities.dp(48.0f);
                        float f4 = dp6;
                        int imageX2 = (int) (this.photoImage.getImageX() + ((this.photoImage.getImageWidth() - f4) / 2.0f));
                        this.buttonX = imageX2;
                        this.buttonX = imageX2;
                        int imageY2 = (int) (this.photoImage.getImageY() + ((this.photoImage.getImageHeight() - f4) / 2.0f));
                        this.buttonY = imageY2;
                        this.buttonY = imageY2;
                        RadialProgress2 radialProgress22 = this.radialProgress;
                        int i27 = this.buttonX;
                        radialProgress22.setProgressRect(i27, imageY2, i27 + dp6, dp6 + imageY2);
                    }
                }
                if (this.isRoundVideo && MediaController.getInstance().isPlayingMessage(this.currentMessageObject) && MediaController.getInstance().isVideoDrawingReady() && canvas.isHardwareAccelerated()) {
                    this.imageDrawn = r11;
                    this.drawTime = r11;
                } else {
                    ChatMessageCellDelegate chatMessageCellDelegate3 = this.delegate;
                    if (chatMessageCellDelegate3 == null || chatMessageCellDelegate3.getPinchToZoomHelper() == null || !this.delegate.getPinchToZoomHelper().isInOverlayModeFor(this)) {
                        if (f != 1.0f) {
                            this.photoImage.setAlpha(f);
                            this.imageDrawn = this.photoImage.draw(canvas);
                            this.photoImage.setAlpha(1.0f);
                        } else {
                            this.imageDrawn = this.photoImage.draw(canvas);
                        }
                    }
                }
            }
            int i28 = this.documentAttachType;
            if (i28 == 4 || i28 == 2) {
                this.videoButtonX = (int) (this.photoImage.getImageX() + AndroidUtilities.dp(8.0f));
                int imageY3 = (int) (this.photoImage.getImageY() + AndroidUtilities.dp(8.0f));
                this.videoButtonY = imageY3;
                RadialProgress2 radialProgress23 = this.videoRadialProgress;
                int i29 = this.videoButtonX;
                radialProgress23.setProgressRect(i29, imageY3, AndroidUtilities.dp(24.0f) + i29, this.videoButtonY + AndroidUtilities.dp(24.0f));
            }
            Paint themedPaint = getThemedPaint("paintChatTimeBackground");
            if (this.photosCountLayout != null && this.photoImage.getVisible()) {
                int imageX3 = (int) (((this.photoImage.getImageX() + this.photoImage.getImageWidth()) - AndroidUtilities.dp(8.0f)) - this.photosCountWidth);
                int imageY4 = (int) ((this.photoImage.getImageY() + this.photoImage.getImageHeight()) - AndroidUtilities.dp(19.0f));
                this.rect.set(imageX3 - AndroidUtilities.dp(4.0f), imageY4 - AndroidUtilities.dp(1.5f), this.photosCountWidth + imageX3 + AndroidUtilities.dp(4.0f), imageY4 + AndroidUtilities.dp(14.5f));
                int alpha = themedPaint.getAlpha();
                themedPaint.setAlpha((int) (alpha * this.controlsAlpha));
                Theme.chat_durationPaint.setAlpha((int) (this.controlsAlpha * 255.0f));
                canvas.drawRoundRect(this.rect, AndroidUtilities.dp(4.0f), AndroidUtilities.dp(4.0f), themedPaint);
                themedPaint.setAlpha(alpha);
                canvas.save();
                canvas.translate(imageX3, imageY4);
                this.photosCountLayout.draw(canvas);
                canvas.restore();
                Theme.chat_durationPaint.setAlpha(255);
            }
            if (this.videoInfoLayout != null && ((!this.drawPhotoImage || this.photoImage.getVisible()) && this.imageBackgroundSideColor == 0)) {
                if (this.hasGamePreview || this.hasInvoicePreview || this.documentAttachType == 8) {
                    if (this.drawPhotoImage) {
                        i6 = (int) (this.photoImage.getImageX() + AndroidUtilities.dp(8.5f));
                        i7 = (int) (this.photoImage.getImageY() + AndroidUtilities.dp(6.0f));
                        this.rect.set(i6 - AndroidUtilities.dp(4.0f), i7 - AndroidUtilities.dp(1.5f), this.durationWidth + i6 + AndroidUtilities.dp(4.0f), AndroidUtilities.dp(this.documentAttachType == 8 ? 14.5f : 16.5f) + i7);
                        canvas.drawRoundRect(this.rect, AndroidUtilities.dp(4.0f), AndroidUtilities.dp(4.0f), themedPaint);
                    } else {
                        i7 = i4;
                        i6 = i14;
                    }
                } else {
                    i6 = (int) (((this.photoImage.getImageX() + this.photoImage.getImageWidth()) - AndroidUtilities.dp(8.0f)) - this.durationWidth);
                    int imageY5 = (int) ((this.photoImage.getImageY() + this.photoImage.getImageHeight()) - AndroidUtilities.dp(19.0f));
                    this.rect.set(i6 - AndroidUtilities.dp(4.0f), imageY5 - AndroidUtilities.dp(1.5f), this.durationWidth + i6 + AndroidUtilities.dp(4.0f), AndroidUtilities.dp(14.5f) + imageY5);
                    canvas.drawRoundRect(this.rect, AndroidUtilities.dp(4.0f), AndroidUtilities.dp(4.0f), getThemedPaint("paintChatTimeBackground"));
                    i7 = imageY5;
                }
                canvas.save();
                canvas.translate(i6, i7);
                if (this.hasInvoicePreview) {
                    if (this.drawPhotoImage) {
                        Theme.chat_shipmentPaint.setColor(getThemedColor("chat_previewGameText"));
                    } else if (this.currentMessageObject.isOutOwner()) {
                        Theme.chat_shipmentPaint.setColor(getThemedColor("chat_messageTextOut"));
                    } else {
                        Theme.chat_shipmentPaint.setColor(getThemedColor("chat_messageTextIn"));
                    }
                }
                this.videoInfoLayout.draw(canvas);
                canvas.restore();
            }
            if (!this.drawInstantView) {
                return;
            }
            int dp7 = i13 + this.linkPreviewHeight + AndroidUtilities.dp(10.0f);
            Paint paint2 = Theme.chat_instantViewRectPaint;
            if (this.currentMessageObject.isOutOwner()) {
                drawable = getThemedDrawable("drawableMsgOutInstant");
                Theme.chat_instantViewPaint.setColor(getThemedColor("chat_outPreviewInstantText"));
                paint2.setColor(getThemedColor("chat_outPreviewInstantText"));
            } else {
                drawable = Theme.chat_msgInInstantDrawable;
                Theme.chat_instantViewPaint.setColor(getThemedColor("chat_inPreviewInstantText"));
                paint2.setColor(getThemedColor("chat_inPreviewInstantText"));
            }
            this.instantButtonRect.set(i14, dp7, this.instantWidth + i14, AndroidUtilities.dp(36.0f) + dp7);
            if (Build.VERSION.SDK_INT >= 21) {
                this.selectorDrawableMaskType[i5] = i5;
                this.selectorDrawable[i5].setBounds(i14, dp7, this.instantWidth + i14, AndroidUtilities.dp(36.0f) + dp7);
                this.selectorDrawable[i5].draw(canvas);
            }
            canvas.drawRoundRect(this.instantButtonRect, AndroidUtilities.dp(6.0f), AndroidUtilities.dp(6.0f), paint2);
            if (this.drawInstantViewType == 0) {
                BaseCell.setDrawableBounds(drawable, ((this.instantTextLeftX + this.instantTextX) + i14) - AndroidUtilities.dp(15.0f), AndroidUtilities.dp(11.5f) + dp7, AndroidUtilities.dp(9.0f), AndroidUtilities.dp(13.0f));
                drawable.draw(canvas);
            }
            if (this.instantViewLayout == null) {
                return;
            }
            canvas.save();
            canvas.translate(i14 + this.instantTextX, dp7 + AndroidUtilities.dp(10.5f));
            this.instantViewLayout.draw(canvas);
            canvas.restore();
        }
    }

    public boolean shouldDrawMenuDrawable() {
        return this.currentMessagesGroup == null || (this.currentPosition.flags & 4) != 0;
    }

    private void drawBotButtons(Canvas canvas, ArrayList<BotButton> arrayList, float f) {
        int dp;
        BotButton botButton;
        Drawable drawable;
        if (this.currentMessageObject.isOutOwner()) {
            dp = (getMeasuredWidth() - this.widthForButtons) - AndroidUtilities.dp(10.0f);
        } else {
            dp = this.backgroundDrawableLeft + AndroidUtilities.dp((this.mediaBackground || this.drawPinnedBottom) ? 1.0f : 7.0f);
        }
        int i = dp;
        float f2 = 2.0f;
        float dp2 = (this.layoutHeight - AndroidUtilities.dp(2.0f)) + this.transitionParams.deltaBottom;
        float f3 = 0.0f;
        for (int i2 = 0; i2 < arrayList.size(); i2++) {
            BotButton botButton2 = arrayList.get(i2);
            float f4 = botButton2.y + botButton2.height;
            if (f4 > f3) {
                f3 = f4;
            }
        }
        this.rect.set(0.0f, dp2, getMeasuredWidth(), f3 + dp2);
        if (f != 1.0f) {
            canvas.saveLayerAlpha(this.rect, (int) (f * 255.0f), 31);
        } else {
            canvas.save();
        }
        int i3 = 0;
        while (i3 < arrayList.size()) {
            BotButton botButton3 = arrayList.get(i3);
            float dp3 = ((botButton3.y + this.layoutHeight) - AndroidUtilities.dp(f2)) + this.transitionParams.deltaBottom;
            this.rect.set(botButton3.x + i, dp3, botButton3.x + i + botButton3.width, botButton3.height + dp3);
            applyServiceShaderMatrix();
            canvas.drawRoundRect(this.rect, AndroidUtilities.dp(6.0f), AndroidUtilities.dp(6.0f), getThemedPaint(i3 == this.pressedBotButton ? "paintChatActionBackgroundSelected" : "paintChatActionBackground"));
            if (hasGradientService()) {
                canvas.drawRoundRect(this.rect, AndroidUtilities.dp(6.0f), AndroidUtilities.dp(6.0f), Theme.chat_actionBackgroundGradientDarkenPaint);
            }
            canvas.save();
            boolean z = true;
            canvas.translate(botButton3.x + i + AndroidUtilities.dp(5.0f), ((AndroidUtilities.dp(44.0f) - botButton3.title.getLineBottom(botButton3.title.getLineCount() - 1)) / 2) + dp3);
            botButton3.title.draw(canvas);
            canvas.restore();
            if (!(botButton3.button instanceof TLRPC$TL_keyboardButtonWebView)) {
                if (botButton3.button instanceof TLRPC$TL_keyboardButtonUrl) {
                    if (botButton3.isInviteButton) {
                        drawable = getThemedDrawable("drawable_botInvite");
                    } else {
                        drawable = getThemedDrawable("drawableBotLink");
                    }
                    BaseCell.setDrawableBounds(drawable, (((botButton3.x + botButton3.width) - AndroidUtilities.dp(3.0f)) - drawable.getIntrinsicWidth()) + i, dp3 + AndroidUtilities.dp(3.0f));
                    drawable.draw(canvas);
                } else if (!(botButton3.button instanceof TLRPC$TL_keyboardButtonSwitchInline)) {
                    if ((botButton3.button instanceof TLRPC$TL_keyboardButtonCallback) || (botButton3.button instanceof TLRPC$TL_keyboardButtonRequestGeoLocation) || (botButton3.button instanceof TLRPC$TL_keyboardButtonGame) || (botButton3.button instanceof TLRPC$TL_keyboardButtonBuy) || (botButton3.button instanceof TLRPC$TL_keyboardButtonUrlAuth)) {
                        if (botButton3.button instanceof TLRPC$TL_keyboardButtonBuy) {
                            BaseCell.setDrawableBounds(Theme.chat_botCardDrawable, (((botButton3.x + botButton3.width) - AndroidUtilities.dp(5.0f)) - Theme.chat_botCardDrawable.getIntrinsicWidth()) + i, AndroidUtilities.dp(4.0f) + dp3);
                            Theme.chat_botCardDrawable.draw(canvas);
                        }
                        if (((!(botButton3.button instanceof TLRPC$TL_keyboardButtonCallback) && !(botButton3.button instanceof TLRPC$TL_keyboardButtonGame) && !(botButton3.button instanceof TLRPC$TL_keyboardButtonBuy) && !(botButton3.button instanceof TLRPC$TL_keyboardButtonUrlAuth)) || !SendMessagesHelper.getInstance(this.currentAccount).isSendingCallback(this.currentMessageObject, botButton3.button)) && (!(botButton3.button instanceof TLRPC$TL_keyboardButtonRequestGeoLocation) || !SendMessagesHelper.getInstance(this.currentAccount).isSendingCurrentLocation(this.currentMessageObject, botButton3.button))) {
                            z = false;
                        }
                        if (z || botButton3.progressAlpha != 0.0f) {
                            Theme.chat_botProgressPaint.setAlpha(Math.min(255, (int) (botButton3.progressAlpha * 255.0f)));
                            int dp4 = ((botButton3.x + botButton3.width) - AndroidUtilities.dp(12.0f)) + i;
                            if (botButton3.button instanceof TLRPC$TL_keyboardButtonBuy) {
                                dp3 += AndroidUtilities.dp(26.0f);
                            }
                            this.rect.set(dp4, AndroidUtilities.dp(4.0f) + dp3, dp4 + AndroidUtilities.dp(8.0f), dp3 + AndroidUtilities.dp(12.0f));
                            canvas.drawArc(this.rect, botButton3.angle, 220.0f, false, Theme.chat_botProgressPaint);
                            invalidate();
                            long currentTimeMillis = System.currentTimeMillis();
                            if (Math.abs(botButton3.lastUpdateTime - System.currentTimeMillis()) < 1000) {
                                long j = currentTimeMillis - botButton3.lastUpdateTime;
                                botButton = botButton3;
                                BotButton.access$2816(botButton, ((float) (360 * j)) / 2000.0f);
                                BotButton.access$2820(botButton, (botButton.angle / 360) * 360);
                                if (z) {
                                    if (botButton.progressAlpha < 1.0f) {
                                        BotButton.access$2716(botButton, ((float) j) / 200.0f);
                                        if (botButton.progressAlpha > 1.0f) {
                                            botButton.progressAlpha = 1.0f;
                                        }
                                    }
                                } else if (botButton.progressAlpha > 0.0f) {
                                    BotButton.access$2724(botButton, ((float) j) / 200.0f);
                                    if (botButton.progressAlpha < 0.0f) {
                                        botButton.progressAlpha = 0.0f;
                                    }
                                }
                            } else {
                                botButton = botButton3;
                            }
                            botButton.lastUpdateTime = currentTimeMillis;
                        }
                    }
                } else {
                    Drawable themedDrawable = getThemedDrawable("drawableBotInline");
                    BaseCell.setDrawableBounds(themedDrawable, (((botButton3.x + botButton3.width) - AndroidUtilities.dp(3.0f)) - themedDrawable.getIntrinsicWidth()) + i, dp3 + AndroidUtilities.dp(3.0f));
                    themedDrawable.draw(canvas);
                }
            } else {
                Drawable themedDrawable2 = getThemedDrawable("drawableBotWebView");
                BaseCell.setDrawableBounds(themedDrawable2, (((botButton3.x + botButton3.width) - AndroidUtilities.dp(3.0f)) - themedDrawable2.getIntrinsicWidth()) + i, dp3 + AndroidUtilities.dp(3.0f));
                themedDrawable2.draw(canvas);
            }
            i3++;
            f2 = 2.0f;
        }
        canvas.restore();
    }

    /* JADX WARN: Removed duplicated region for block: B:49:0x0136  */
    /* JADX WARN: Removed duplicated region for block: B:50:0x0141  */
    /* JADX WARN: Removed duplicated region for block: B:65:0x0176 A[LOOP:1: B:63:0x016e->B:65:0x0176, LOOP_END] */
    /* JADX WARN: Removed duplicated region for block: B:82:0x01f4  */
    /* JADX WARN: Removed duplicated region for block: B:85:0x020b  */
    /* JADX WARN: Removed duplicated region for block: B:99:? A[RETURN, SYNTHETIC] */
    @SuppressLint({"Range"})
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void drawMessageText(Canvas canvas, ArrayList<MessageObject.TextLayoutBlock> arrayList, boolean z, float f, boolean z2) {
        int i;
        int i2;
        boolean z3;
        int i3;
        int i4;
        int i5;
        int color;
        int i6;
        int i7;
        MessageObject.TextLayoutBlock textLayoutBlock;
        int i8;
        int i9;
        int i10;
        int i11;
        Exception e;
        int i12;
        if (arrayList == null || arrayList.isEmpty() || f == 0.0f) {
            return;
        }
        if (z) {
            if (this.fullyDraw) {
                this.firstVisibleBlockNum = 0;
                this.lastVisibleBlockNum = arrayList.size();
            }
            i2 = this.firstVisibleBlockNum;
            i = this.lastVisibleBlockNum;
        } else {
            i = arrayList.size();
            i2 = 0;
        }
        int i13 = this.textY;
        float f2 = i13;
        TransitionParams transitionParams = this.transitionParams;
        if (transitionParams.animateText) {
            float f3 = transitionParams.animateFromTextY;
            float f4 = transitionParams.animateChangeProgress;
            f2 = (f3 * (1.0f - f4)) + (i13 * f4);
        }
        float f5 = f2;
        if (i2 < 0) {
            return;
        }
        if (f == 1.0f) {
            i5 = 0;
            i4 = 0;
            i3 = Integer.MIN_VALUE;
        } else if (z2) {
            int alpha = Theme.chat_msgTextPaint.getAlpha();
            int alpha2 = Color.alpha(Theme.chat_msgTextPaint.linkColor);
            Theme.chat_msgTextPaint.setAlpha((int) (alpha * f));
            TextPaint textPaint = Theme.chat_msgTextPaint;
            textPaint.linkColor = ColorUtils.setAlphaComponent(textPaint.linkColor, (int) (alpha2 * f));
            i4 = alpha;
            i5 = alpha2;
            i3 = Integer.MIN_VALUE;
            z3 = true;
            color = (this.currentMessageObject.isOut() || ChatObject.isChannelAndNotMegaGroup(this.currentMessageObject.getChatId(), this.currentAccount)) ? Theme.chat_msgTextPaint.getColor() : getThemedColor("chat_outTimeText");
            i6 = i2;
            while (i6 <= i && i6 < arrayList.size()) {
                textLayoutBlock = arrayList.get(i6);
                canvas.save();
                canvas.translate(this.textX - (!textLayoutBlock.isRtl() ? (int) Math.ceil(this.currentMessageObject.textXOffset) : 0), f5 + textLayoutBlock.textYOffset + this.transitionYOffsetForDrawables);
                if (i6 == this.linkBlockNum && !z2 && this.links.draw(canvas)) {
                    invalidate();
                }
                if (i6 == this.linkSelectionBlockNum && !this.urlPathSelection.isEmpty() && !z2) {
                    for (i12 = 0; i12 < this.urlPathSelection.size(); i12++) {
                        canvas.drawPath(this.urlPathSelection.get(i12), Theme.chat_textSearchSelectionPaint);
                    }
                }
                if (this.delegate.getTextSelectionHelper() != null && this.transitionParams.animateChangeProgress == 1.0f && !z2) {
                    this.delegate.getTextSelectionHelper().draw(this.currentMessageObject, textLayoutBlock, canvas);
                }
                try {
                    Emoji.emojiDrawingYOffset = -this.transitionYOffsetForDrawables;
                    i10 = i6;
                    i11 = i5;
                    i9 = i4;
                    i8 = i3;
                } catch (Exception e2) {
                    e = e2;
                    i10 = i6;
                    i11 = i5;
                    i9 = i4;
                    i8 = i3;
                }
                try {
                    SpoilerEffect.renderWithRipple(this, this.invalidateSpoilersParent, color, 0, textLayoutBlock.spoilersPatchedTextLayout, textLayoutBlock.textLayout, textLayoutBlock.spoilers, canvas, false);
                    Emoji.emojiDrawingYOffset = 0.0f;
                } catch (Exception e3) {
                    e = e3;
                    FileLog.e(e);
                    canvas.restore();
                    i6 = i10 + 1;
                    i5 = i11;
                    i4 = i9;
                    i3 = i8;
                }
                canvas.restore();
                i6 = i10 + 1;
                i5 = i11;
                i4 = i9;
                i3 = i8;
            }
            int i14 = i5;
            int i15 = i4;
            i7 = i3;
            if (z3) {
                Theme.chat_msgTextPaint.setAlpha(i15);
                TextPaint textPaint2 = Theme.chat_msgTextPaint;
                textPaint2.linkColor = ColorUtils.setAlphaComponent(textPaint2.linkColor, i14);
            }
            if (i7 != Integer.MIN_VALUE) {
                return;
            }
            canvas.restoreToCount(i7);
            return;
        } else {
            Theme.MessageDrawable messageDrawable = this.currentBackgroundDrawable;
            if (messageDrawable != null) {
                int i16 = messageDrawable.getBounds().top;
                int i17 = this.currentBackgroundDrawable.getBounds().bottom;
                if (getY() < 0.0f) {
                    i16 = (int) (-getY());
                }
                float y = getY() + getMeasuredHeight();
                int i18 = this.parentHeight;
                if (y > i18) {
                    i17 = (int) (i18 - getY());
                }
                this.rect.set(getCurrentBackgroundLeft(), i16, this.currentBackgroundDrawable.getBounds().right, i17);
            } else {
                this.rect.set(0.0f, 0.0f, getMeasuredWidth(), getMeasuredHeight());
            }
            i3 = canvas.saveLayerAlpha(this.rect, (int) (255.0f * f), 31);
            i5 = 0;
            i4 = 0;
        }
        z3 = false;
        color = (this.currentMessageObject.isOut() || ChatObject.isChannelAndNotMegaGroup(this.currentMessageObject.getChatId(), this.currentAccount)) ? Theme.chat_msgTextPaint.getColor() : getThemedColor("chat_outTimeText");
        i6 = i2;
        while (i6 <= i) {
            textLayoutBlock = arrayList.get(i6);
            canvas.save();
            canvas.translate(this.textX - (!textLayoutBlock.isRtl() ? (int) Math.ceil(this.currentMessageObject.textXOffset) : 0), f5 + textLayoutBlock.textYOffset + this.transitionYOffsetForDrawables);
            if (i6 == this.linkBlockNum) {
                invalidate();
            }
            if (i6 == this.linkSelectionBlockNum) {
                while (i12 < this.urlPathSelection.size()) {
                }
            }
            if (this.delegate.getTextSelectionHelper() != null) {
                this.delegate.getTextSelectionHelper().draw(this.currentMessageObject, textLayoutBlock, canvas);
            }
            Emoji.emojiDrawingYOffset = -this.transitionYOffsetForDrawables;
            i10 = i6;
            i11 = i5;
            i9 = i4;
            i8 = i3;
            SpoilerEffect.renderWithRipple(this, this.invalidateSpoilersParent, color, 0, textLayoutBlock.spoilersPatchedTextLayout, textLayoutBlock.textLayout, textLayoutBlock.spoilers, canvas, false);
            Emoji.emojiDrawingYOffset = 0.0f;
            canvas.restore();
            i6 = i10 + 1;
            i5 = i11;
            i4 = i9;
            i3 = i8;
        }
        int i142 = i5;
        int i152 = i4;
        i7 = i3;
        if (z3) {
        }
        if (i7 != Integer.MIN_VALUE) {
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:10:0x0021  */
    /* JADX WARN: Removed duplicated region for block: B:15:0x003a  */
    /* JADX WARN: Removed duplicated region for block: B:21:0x0045  */
    /* JADX WARN: Removed duplicated region for block: B:22:0x0047  */
    /* JADX WARN: Removed duplicated region for block: B:24:0x004a  */
    /* JADX WARN: Removed duplicated region for block: B:25:0x004c  */
    /* JADX WARN: Removed duplicated region for block: B:28:0x0052  */
    /* JADX WARN: Removed duplicated region for block: B:32:0x0060  */
    /* JADX WARN: Removed duplicated region for block: B:34:0x0063 A[LOOP:1: B:34:0x0063->B:36:0x0066, LOOP_START, PHI: r2 r5 
      PHI: (r2v1 int) = (r2v0 int), (r2v2 int) binds: [B:33:0x0061, B:36:0x0066] A[DONT_GENERATE, DONT_INLINE]
      PHI: (r5v1 int) = (r5v0 int), (r5v2 int) binds: [B:33:0x0061, B:36:0x0066] A[DONT_GENERATE, DONT_INLINE]] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public AnimatedEmojiSpan[] getAnimatedEmojiSpans() {
        AnimatedEmojiSpan[] animatedEmojiSpanArr;
        MessageObject messageObject;
        AnimatedEmojiSpan[] animatedEmojiSpanArr2;
        int i;
        MessageObject messageObject2 = this.currentMessageObject;
        AnimatedEmojiSpan[] animatedEmojiSpanArr3 = null;
        int i2 = 0;
        if (messageObject2 != null) {
            CharSequence charSequence = messageObject2.messageText;
            if (charSequence instanceof Spanned) {
                animatedEmojiSpanArr = (AnimatedEmojiSpan[]) ((Spanned) charSequence).getSpans(0, charSequence.length(), AnimatedEmojiSpan.class);
                messageObject = this.currentMessageObject;
                if (messageObject != null) {
                    CharSequence charSequence2 = messageObject.caption;
                    if (charSequence2 instanceof Spanned) {
                        animatedEmojiSpanArr2 = (AnimatedEmojiSpan[]) ((Spanned) charSequence2).getSpans(0, charSequence2.length(), AnimatedEmojiSpan.class);
                        if ((animatedEmojiSpanArr != null && animatedEmojiSpanArr.length != 0) || (animatedEmojiSpanArr2 != null && animatedEmojiSpanArr2.length != 0)) {
                            animatedEmojiSpanArr3 = new AnimatedEmojiSpan[(animatedEmojiSpanArr != null ? 0 : animatedEmojiSpanArr.length) + (animatedEmojiSpanArr2 != null ? 0 : animatedEmojiSpanArr2.length)];
                            if (animatedEmojiSpanArr == null) {
                                int i3 = 0;
                                i = 0;
                                while (i3 < animatedEmojiSpanArr.length) {
                                    animatedEmojiSpanArr3[i] = animatedEmojiSpanArr[i3];
                                    i3++;
                                    i++;
                                }
                            } else {
                                i = 0;
                            }
                            if (animatedEmojiSpanArr2 != null) {
                                while (i2 < animatedEmojiSpanArr2.length) {
                                    animatedEmojiSpanArr3[i] = animatedEmojiSpanArr2[i2];
                                    i2++;
                                    i++;
                                }
                            }
                        }
                        return animatedEmojiSpanArr3;
                    }
                }
                animatedEmojiSpanArr2 = null;
                if (animatedEmojiSpanArr != null) {
                    animatedEmojiSpanArr3 = new AnimatedEmojiSpan[(animatedEmojiSpanArr != null ? 0 : animatedEmojiSpanArr.length) + (animatedEmojiSpanArr2 != null ? 0 : animatedEmojiSpanArr2.length)];
                    if (animatedEmojiSpanArr == null) {
                    }
                    if (animatedEmojiSpanArr2 != null) {
                    }
                    return animatedEmojiSpanArr3;
                }
                animatedEmojiSpanArr3 = new AnimatedEmojiSpan[(animatedEmojiSpanArr != null ? 0 : animatedEmojiSpanArr.length) + (animatedEmojiSpanArr2 != null ? 0 : animatedEmojiSpanArr2.length)];
                if (animatedEmojiSpanArr == null) {
                }
                if (animatedEmojiSpanArr2 != null) {
                }
                return animatedEmojiSpanArr3;
            }
        }
        animatedEmojiSpanArr = null;
        messageObject = this.currentMessageObject;
        if (messageObject != null) {
        }
        animatedEmojiSpanArr2 = null;
        if (animatedEmojiSpanArr != null) {
        }
        animatedEmojiSpanArr3 = new AnimatedEmojiSpan[(animatedEmojiSpanArr != null ? 0 : animatedEmojiSpanArr.length) + (animatedEmojiSpanArr2 != null ? 0 : animatedEmojiSpanArr2.length)];
        if (animatedEmojiSpanArr == null) {
        }
        if (animatedEmojiSpanArr2 != null) {
        }
        return animatedEmojiSpanArr3;
    }

    public void updateCaptionLayout() {
        float f;
        float f2;
        float f3;
        MessageObject messageObject = this.currentMessageObject;
        int i = messageObject.type;
        if (i == 1 || this.documentAttachType == 4 || i == 8) {
            TransitionParams transitionParams = this.transitionParams;
            if (transitionParams.imageChangeBoundsTransition) {
                f2 = transitionParams.animateToImageX;
                f = transitionParams.animateToImageY;
                f3 = transitionParams.animateToImageH;
            } else {
                f2 = this.photoImage.getImageX();
                f = this.photoImage.getImageY();
                f3 = this.photoImage.getImageHeight();
            }
            this.captionX = f2 + AndroidUtilities.dp(5.0f) + this.captionOffsetX;
            this.captionY = f + f3 + AndroidUtilities.dp(6.0f);
        } else {
            float f4 = 41.3f;
            float f5 = 9.0f;
            float f6 = 11.0f;
            if (this.hasOldCaptionPreview) {
                int i2 = this.backgroundDrawableLeft;
                if (!messageObject.isOutOwner()) {
                    f6 = 17.0f;
                }
                this.captionX = i2 + AndroidUtilities.dp(f6) + this.captionOffsetX;
                int i3 = this.totalHeight - this.captionHeight;
                if (!this.drawPinnedTop) {
                    f5 = 10.0f;
                }
                float dp = ((i3 - AndroidUtilities.dp(f5)) - this.linkPreviewHeight) - AndroidUtilities.dp(17.0f);
                this.captionY = dp;
                if (this.drawCommentButton && this.drawSideButton != 3) {
                    if (!shouldDrawTimeOnMedia()) {
                        f4 = 43.0f;
                    }
                    this.captionY = dp - AndroidUtilities.dp(f4);
                }
            } else {
                int i4 = this.backgroundDrawableLeft;
                if (!messageObject.isOutOwner() && !this.mediaBackground && !this.drawPinnedBottom) {
                    f6 = 17.0f;
                }
                this.captionX = i4 + AndroidUtilities.dp(f6) + this.captionOffsetX;
                int i5 = this.totalHeight - this.captionHeight;
                if (!this.drawPinnedTop) {
                    f5 = 10.0f;
                }
                float dp2 = i5 - AndroidUtilities.dp(f5);
                this.captionY = dp2;
                if (this.drawCommentButton && this.drawSideButton != 3) {
                    if (!shouldDrawTimeOnMedia()) {
                        f4 = 43.0f;
                    }
                    this.captionY = dp2 - AndroidUtilities.dp(f4);
                }
                ReactionsLayoutInBubble reactionsLayoutInBubble = this.reactionsLayoutInBubble;
                if (!reactionsLayoutInBubble.isEmpty && !reactionsLayoutInBubble.isSmall) {
                    this.captionY -= reactionsLayoutInBubble.totalHeight;
                }
            }
        }
        this.captionX += getExtraTextX();
    }

    private boolean textIsSelectionMode() {
        return getCurrentMessagesGroup() == null && this.delegate.getTextSelectionHelper() != null && this.delegate.getTextSelectionHelper().isSelected(this.currentMessageObject);
    }

    public float getViewTop() {
        return this.viewTop;
    }

    public int getBackgroundHeight() {
        return this.backgroundHeight;
    }

    public int getMiniIconForCurrentState() {
        int i = this.miniButtonState;
        if (i < 0) {
            return 4;
        }
        return i == 0 ? 2 : 3;
    }

    public int getIconForCurrentState() {
        int i = this.documentAttachType;
        if (i == 3 || i == 5) {
            if (this.currentMessageObject.isOutOwner()) {
                this.radialProgress.setColors("chat_outLoader", "chat_outLoaderSelected", "chat_outMediaIcon", "chat_outMediaIconSelected");
            } else {
                this.radialProgress.setColors("chat_inLoader", "chat_inLoaderSelected", "chat_inMediaIcon", "chat_inMediaIconSelected");
            }
            int i2 = this.buttonState;
            if (i2 == 1) {
                return 1;
            }
            if (i2 == 2) {
                return 2;
            }
            return i2 == 4 ? 3 : 0;
        }
        if (i == 1 && !this.drawPhotoImage) {
            if (this.currentMessageObject.isOutOwner()) {
                this.radialProgress.setColors("chat_outLoader", "chat_outLoaderSelected", "chat_outMediaIcon", "chat_outMediaIconSelected");
            } else {
                this.radialProgress.setColors("chat_inLoader", "chat_inLoaderSelected", "chat_inMediaIcon", "chat_inMediaIconSelected");
            }
            int i3 = this.buttonState;
            if (i3 == -1) {
                return 5;
            }
            if (i3 == 0) {
                return 2;
            }
            if (i3 == 1) {
                return 3;
            }
        } else {
            this.radialProgress.setColors("chat_mediaLoaderPhoto", "chat_mediaLoaderPhotoSelected", "chat_mediaLoaderPhotoIcon", "chat_mediaLoaderPhotoIconSelected");
            this.videoRadialProgress.setColors("chat_mediaLoaderPhoto", "chat_mediaLoaderPhotoSelected", "chat_mediaLoaderPhotoIcon", "chat_mediaLoaderPhotoIconSelected");
            int i4 = this.buttonState;
            if (i4 >= 0 && i4 < 4) {
                if (i4 == 0) {
                    return 2;
                }
                if (i4 == 1) {
                    return 3;
                }
                return (i4 != 2 && this.autoPlayingMedia) ? 4 : 0;
            } else if (i4 == -1) {
                if (this.documentAttachType == 1) {
                    if (this.drawPhotoImage && (this.currentPhotoObject != null || this.currentPhotoObjectThumb != null)) {
                        if (this.photoImage.hasBitmapImage()) {
                            return 4;
                        }
                        MessageObject messageObject = this.currentMessageObject;
                        if (messageObject.mediaExists || messageObject.attachPathExists) {
                            return 4;
                        }
                    }
                    return 5;
                } else if (this.currentMessageObject.needDrawBluredPreview()) {
                    MessageObject messageObject2 = this.currentMessageObject;
                    if (messageObject2.messageOwner.destroyTime == 0) {
                        return 7;
                    }
                    return messageObject2.isOutOwner() ? 9 : 11;
                } else if (this.hasEmbed) {
                    return 0;
                }
            }
        }
        return 4;
    }

    /* JADX WARN: Removed duplicated region for block: B:59:0x00e7  */
    /* JADX WARN: Removed duplicated region for block: B:60:0x00f5  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private int getMaxNameWidth() {
        int i;
        int i2;
        int dp;
        int i3;
        int i4;
        int i5;
        MessageObject.GroupedMessagePosition groupedMessagePosition;
        int i6 = this.documentAttachType;
        if (i6 == 6 || i6 == 8 || this.currentMessageObject.type == 5) {
            if (AndroidUtilities.isTablet()) {
                if (this.isChat && !this.isThreadPost && !this.currentMessageObject.isOutOwner() && this.currentMessageObject.needDrawAvatar()) {
                    i4 = AndroidUtilities.getMinTabletSide();
                    i3 = AndroidUtilities.dp(42.0f);
                    i = i4 - i3;
                    if (!this.isPlayingRound) {
                    }
                } else {
                    i = AndroidUtilities.getMinTabletSide();
                    if (!this.isPlayingRound) {
                        i2 = i - (this.backgroundWidth - (AndroidUtilities.roundPlayingMessageSize - AndroidUtilities.roundMessageSize));
                        dp = AndroidUtilities.dp(57.0f);
                    } else {
                        i2 = i - this.backgroundWidth;
                        dp = AndroidUtilities.dp(57.0f);
                    }
                }
            } else if (this.isChat && !this.isThreadPost && !this.currentMessageObject.isOutOwner() && this.currentMessageObject.needDrawAvatar()) {
                i4 = Math.min(getParentWidth(), AndroidUtilities.displaySize.y);
                i3 = AndroidUtilities.dp(42.0f);
                i = i4 - i3;
                if (!this.isPlayingRound) {
                }
            } else {
                i = Math.min(getParentWidth(), AndroidUtilities.displaySize.y);
                if (!this.isPlayingRound) {
                }
            }
        } else {
            MessageObject.GroupedMessages groupedMessages = this.currentMessagesGroup;
            if (groupedMessages != null && !groupedMessages.isDocuments) {
                if (AndroidUtilities.isTablet()) {
                    i5 = AndroidUtilities.getMinTabletSide();
                } else {
                    i5 = getParentWidth();
                }
                int i7 = 0;
                int i8 = 0;
                for (int i9 = 0; i9 < this.currentMessagesGroup.posArray.size(); i9++) {
                    if (this.currentMessagesGroup.posArray.get(i9).minY != 0) {
                        break;
                    }
                    double d = i8;
                    double ceil = Math.ceil(((groupedMessagePosition.pw + groupedMessagePosition.leftSpanOffset) / 1000.0f) * i5);
                    Double.isNaN(d);
                    i8 = (int) (d + ceil);
                }
                if (this.isAvatarVisible) {
                    i7 = 48;
                }
                return i8 - AndroidUtilities.dp(i7 + 31);
            }
            i2 = this.backgroundWidth;
            dp = AndroidUtilities.dp(this.mediaBackground ? 22.0f : 31.0f);
        }
        return i2 - dp;
    }

    /* JADX WARN: Code restructure failed: missing block: B:85:0x011c, code lost:
        if ((r9 & 2) != 0) goto L90;
     */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void updateButtonState(boolean z, boolean z2, boolean z3) {
        boolean z4;
        boolean z5;
        int i;
        int i2;
        MessageObject.GroupedMessagePosition groupedMessagePosition;
        int i3;
        int i4;
        int i5;
        MessageObject messageObject = this.currentMessageObject;
        if (messageObject == null) {
            return;
        }
        boolean z6 = (!z2 || (!PhotoViewer.isShowingImage(messageObject) && this.attachedToWindow)) ? z2 : false;
        this.drawRadialCheckBackground = false;
        String str = null;
        MessageObject messageObject2 = this.currentMessageObject;
        int i6 = messageObject2.type;
        boolean z7 = true;
        if (i6 == 1) {
            TLRPC$PhotoSize tLRPC$PhotoSize = this.currentPhotoObject;
            if (tLRPC$PhotoSize == null) {
                this.radialProgress.setIcon(4, z, z6);
                return;
            } else {
                str = FileLoader.getAttachFileName(tLRPC$PhotoSize);
                z4 = this.currentMessageObject.mediaExists;
            }
        } else if (i6 == 8 || (i5 = this.documentAttachType) == 7 || i5 == 4 || i5 == 8 || i6 == 9 || i5 == 3 || i5 == 5) {
            if (messageObject2.useCustomPhoto) {
                this.buttonState = 1;
                this.radialProgress.setIcon(getIconForCurrentState(), z, z6);
                return;
            } else if (messageObject2.attachPathExists && !TextUtils.isEmpty(messageObject2.messageOwner.attachPath)) {
                str = this.currentMessageObject.messageOwner.attachPath;
                z4 = true;
            } else {
                if (!this.currentMessageObject.isSendError() || (i4 = this.documentAttachType) == 3 || i4 == 5) {
                    str = this.currentMessageObject.getFileName();
                    z4 = this.currentMessageObject.mediaExists;
                }
                z4 = false;
            }
        } else if (i5 != 0) {
            str = FileLoader.getAttachFileName(this.documentAttach);
            z4 = this.currentMessageObject.mediaExists;
        } else {
            TLRPC$PhotoSize tLRPC$PhotoSize2 = this.currentPhotoObject;
            if (tLRPC$PhotoSize2 != null) {
                str = FileLoader.getAttachFileName(tLRPC$PhotoSize2);
                z4 = this.currentMessageObject.mediaExists;
            }
            z4 = false;
        }
        TLRPC$Document tLRPC$Document = this.documentAttach;
        boolean canDownloadMedia = (tLRPC$Document == null || tLRPC$Document.dc_id != Integer.MIN_VALUE) ? DownloadController.getInstance(this.currentAccount).canDownloadMedia(this.currentMessageObject) : false;
        this.canStreamVideo = (this.currentMessageObject.isSent() || this.currentMessageObject.isForwarded()) && ((i3 = this.documentAttachType) == 4 || i3 == 7 || (i3 == 2 && canDownloadMedia)) && this.currentMessageObject.canStreamVideo() && !this.currentMessageObject.needDrawBluredPreview();
        if (SharedConfig.streamMedia && ((int) this.currentMessageObject.getDialogId()) != 0 && !this.currentMessageObject.isSecretMedia()) {
            if (this.documentAttachType != 5) {
                if (this.canStreamVideo && (groupedMessagePosition = this.currentPosition) != null) {
                    int i7 = groupedMessagePosition.flags;
                    if ((i7 & 1) != 0) {
                    }
                }
            }
            this.hasMiniProgress = z4 ? 1 : 2;
            z4 = true;
        }
        if (this.currentMessageObject.isSendError() || (TextUtils.isEmpty(str) && (this.currentMessageObject.isAnyKindOfSticker() || (!this.currentMessageObject.isSending() && !this.currentMessageObject.isEditing())))) {
            this.radialProgress.setIcon(4, z, false);
            this.radialProgress.setMiniIcon(4, z, false);
            this.videoRadialProgress.setIcon(4, z, false);
            this.videoRadialProgress.setMiniIcon(4, z, false);
            return;
        }
        HashMap<String, String> hashMap = this.currentMessageObject.messageOwner.params;
        boolean z8 = hashMap != null && hashMap.containsKey("query_id");
        int i8 = this.documentAttachType;
        float f = 0.0f;
        if (i8 == 3 || i8 == 5) {
            if ((this.currentMessageObject.isOut() && ((this.currentMessageObject.isSending() && !this.currentMessageObject.isForwarded()) || (this.currentMessageObject.isEditing() && this.currentMessageObject.isEditingMedia()))) || (this.currentMessageObject.isSendError() && z8)) {
                if (!TextUtils.isEmpty(this.currentMessageObject.messageOwner.attachPath)) {
                    DownloadController downloadController = DownloadController.getInstance(this.currentAccount);
                    MessageObject messageObject3 = this.currentMessageObject;
                    downloadController.addLoadingFileObserver(messageObject3.messageOwner.attachPath, messageObject3, this);
                    this.wasSending = true;
                    this.buttonState = 4;
                    boolean isSendingMessage = SendMessagesHelper.getInstance(this.currentAccount).isSendingMessage(this.currentMessageObject.getId());
                    if (this.currentPosition != null && isSendingMessage && this.buttonState == 4) {
                        this.drawRadialCheckBackground = true;
                        getIconForCurrentState();
                        this.radialProgress.setIcon(6, z, z6);
                    } else {
                        this.radialProgress.setIcon(getIconForCurrentState(), z, z6);
                    }
                    this.radialProgress.setMiniIcon(4, z, z6);
                    if (!z8) {
                        long[] fileProgressSizes = ImageLoader.getInstance().getFileProgressSizes(this.currentMessageObject.messageOwner.attachPath);
                        if (fileProgressSizes == null && isSendingMessage) {
                            f = 1.0f;
                        } else if (fileProgressSizes != null) {
                            f = DownloadController.getProgress(fileProgressSizes);
                        }
                        this.radialProgress.setProgress(f, false);
                    } else {
                        this.radialProgress.setProgress(0.0f, false);
                    }
                } else {
                    this.buttonState = -1;
                    getIconForCurrentState();
                    this.radialProgress.setIcon(12, z, false);
                    this.radialProgress.setProgress(0.0f, false);
                    this.radialProgress.setMiniIcon(4, z, false);
                }
            } else if (this.hasMiniProgress != 0) {
                this.radialProgress.setMiniProgressBackgroundColor(getThemedColor(this.currentMessageObject.isOutOwner() ? "chat_outLoader" : "chat_inLoader"));
                if (!MediaController.getInstance().isPlayingMessage(this.currentMessageObject) || MediaController.getInstance().isMessagePaused()) {
                    this.buttonState = 0;
                } else {
                    this.buttonState = 1;
                }
                this.radialProgress.setIcon(getIconForCurrentState(), z, z6);
                if (this.hasMiniProgress == 1) {
                    DownloadController.getInstance(this.currentAccount).removeLoadingFileObserver(this);
                    this.miniButtonState = -1;
                } else {
                    DownloadController.getInstance(this.currentAccount).addLoadingFileObserver(str, this.currentMessageObject, this);
                    if (!FileLoader.getInstance(this.currentAccount).isLoadingFile(str)) {
                        createLoadingProgressLayout(this.documentAttach);
                        this.miniButtonState = 0;
                    } else {
                        this.miniButtonState = 1;
                        long[] fileProgressSizes2 = ImageLoader.getInstance().getFileProgressSizes(str);
                        if (fileProgressSizes2 != null) {
                            this.radialProgress.setProgress(DownloadController.getProgress(fileProgressSizes2), z6);
                            createLoadingProgressLayout(fileProgressSizes2[0], fileProgressSizes2[1]);
                        } else {
                            this.radialProgress.setProgress(0.0f, z6);
                            createLoadingProgressLayout(0L, this.currentMessageObject.getSize());
                        }
                    }
                }
                this.radialProgress.setMiniIcon(getMiniIconForCurrentState(), z, z6);
            } else if (z4) {
                DownloadController.getInstance(this.currentAccount).removeLoadingFileObserver(this);
                if (!MediaController.getInstance().isPlayingMessage(this.currentMessageObject) || MediaController.getInstance().isMessagePaused()) {
                    this.buttonState = 0;
                } else {
                    this.buttonState = 1;
                }
                this.radialProgress.setIcon(getIconForCurrentState(), z, z6);
            } else {
                DownloadController.getInstance(this.currentAccount).addLoadingFileObserver(str, this.currentMessageObject, this);
                if (!FileLoader.getInstance(this.currentAccount).isLoadingFile(str)) {
                    this.buttonState = 2;
                } else {
                    this.buttonState = 4;
                    long[] fileProgressSizes3 = ImageLoader.getInstance().getFileProgressSizes(str);
                    if (fileProgressSizes3 != null) {
                        this.radialProgress.setProgress(DownloadController.getProgress(fileProgressSizes3), z6);
                        createLoadingProgressLayout(fileProgressSizes3[0], fileProgressSizes3[1]);
                    } else {
                        createLoadingProgressLayout(this.documentAttach);
                        this.radialProgress.setProgress(0.0f, z6);
                    }
                }
                this.radialProgress.setIcon(getIconForCurrentState(), z, z6);
            }
            updatePlayingMessageProgress();
        } else {
            MessageObject messageObject4 = this.currentMessageObject;
            if (messageObject4.type == 0 && i8 != 1 && i8 != 2 && i8 != 7 && i8 != 4 && i8 != 8 && i8 != 9) {
                if (this.currentPhotoObject == null || !this.drawImageButton) {
                    return;
                }
                if (!z4) {
                    DownloadController.getInstance(this.currentAccount).addLoadingFileObserver(str, this.currentMessageObject, this);
                    if (!FileLoader.getInstance(this.currentAccount).isLoadingFile(str)) {
                        MessageObject messageObject5 = this.currentMessageObject;
                        if (!messageObject5.loadingCancelled && (((i2 = this.documentAttachType) == 0 && canDownloadMedia) || (i2 == 2 && MessageObject.isGifDocument(this.documentAttach, messageObject5.hasValidGroupId()) && canDownloadMedia))) {
                            this.buttonState = 1;
                        } else {
                            this.buttonState = 0;
                        }
                    } else {
                        this.buttonState = 1;
                        long[] fileProgressSizes4 = ImageLoader.getInstance().getFileProgressSizes(str);
                        if (fileProgressSizes4 != null) {
                            f = DownloadController.getProgress(fileProgressSizes4);
                        }
                        if (fileProgressSizes4 != null && fileProgressSizes4[0] == fileProgressSizes4[1]) {
                            createLoadingProgressLayout(fileProgressSizes4[0], fileProgressSizes4[1]);
                        } else if (this.currentMessageObject.getDocument() != null) {
                            MessageObject messageObject6 = this.currentMessageObject;
                            createLoadingProgressLayout(messageObject6.loadedFileSize, messageObject6.getSize());
                        }
                    }
                    this.radialProgress.setProgress(f, false);
                } else {
                    DownloadController.getInstance(this.currentAccount).removeLoadingFileObserver(this);
                    if (this.documentAttachType == 2 && !this.photoImage.isAllowStartAnimation()) {
                        this.buttonState = 2;
                    } else {
                        this.buttonState = -1;
                    }
                }
                this.radialProgress.setIcon(getIconForCurrentState(), z, z6);
                invalidate();
            } else if (messageObject4.isOut() && ((this.currentMessageObject.isSending() && !this.currentMessageObject.isForwarded()) || (this.currentMessageObject.isEditing() && this.currentMessageObject.isEditingMedia()))) {
                if (!TextUtils.isEmpty(this.currentMessageObject.messageOwner.attachPath)) {
                    DownloadController downloadController2 = DownloadController.getInstance(this.currentAccount);
                    MessageObject messageObject7 = this.currentMessageObject;
                    downloadController2.addLoadingFileObserver(messageObject7.messageOwner.attachPath, messageObject7, this);
                    this.wasSending = true;
                    String str2 = this.currentMessageObject.messageOwner.attachPath;
                    boolean z9 = str2 == null || !str2.startsWith("http");
                    TLRPC$Message tLRPC$Message = this.currentMessageObject.messageOwner;
                    HashMap<String, String> hashMap2 = tLRPC$Message.params;
                    if (tLRPC$Message.message != null && hashMap2 != null && (hashMap2.containsKey(RemoteMessageConst.Notification.URL) || hashMap2.containsKey("bot"))) {
                        this.buttonState = -1;
                        z9 = false;
                    } else {
                        this.buttonState = 1;
                    }
                    boolean isSendingMessage2 = SendMessagesHelper.getInstance(this.currentAccount).isSendingMessage(this.currentMessageObject.getId());
                    if (this.currentPosition != null && isSendingMessage2 && this.buttonState == 1) {
                        this.drawRadialCheckBackground = true;
                        getIconForCurrentState();
                        this.radialProgress.setIcon(6, z, z6);
                    } else {
                        this.radialProgress.setIcon(getIconForCurrentState(), z, z6);
                    }
                    if (z9) {
                        long[] fileProgressSizes5 = ImageLoader.getInstance().getFileProgressSizes(this.currentMessageObject.messageOwner.attachPath);
                        if (fileProgressSizes5 == null && isSendingMessage2) {
                            f = 1.0f;
                        } else if (fileProgressSizes5 != null) {
                            f = DownloadController.getProgress(fileProgressSizes5);
                            createLoadingProgressLayout(fileProgressSizes5[0], fileProgressSizes5[1]);
                        }
                        this.radialProgress.setProgress(f, false);
                    } else {
                        this.radialProgress.setProgress(0.0f, false);
                    }
                    invalidate();
                } else {
                    getIconForCurrentState();
                    if (this.currentMessageObject.isSticker() || this.currentMessageObject.isAnimatedSticker() || this.currentMessageObject.isLocation() || this.currentMessageObject.isGif()) {
                        this.buttonState = -1;
                        this.radialProgress.setIcon(4, z, false);
                    } else {
                        this.buttonState = 1;
                        this.radialProgress.setIcon(12, z, false);
                    }
                    this.radialProgress.setProgress(0.0f, false);
                }
                this.videoRadialProgress.setIcon(4, z, false);
            } else {
                if (this.wasSending && !TextUtils.isEmpty(this.currentMessageObject.messageOwner.attachPath)) {
                    DownloadController.getInstance(this.currentAccount).removeLoadingFileObserver(this);
                }
                int i9 = this.documentAttachType;
                if ((i9 == 4 || i9 == 2 || i9 == 7) && this.autoPlayingMedia) {
                    z5 = FileLoader.getInstance(this.currentAccount).isLoadingVideo(this.documentAttach, MediaController.getInstance().isPlayingMessage(this.currentMessageObject));
                    AnimatedFileDrawable animation = this.photoImage.getAnimation();
                    if (animation != null) {
                        MessageObject messageObject8 = this.currentMessageObject;
                        if (messageObject8.hadAnimationNotReadyLoading) {
                            if (animation.hasBitmap()) {
                                this.currentMessageObject.hadAnimationNotReadyLoading = false;
                            }
                        } else {
                            messageObject8.hadAnimationNotReadyLoading = z5 && !animation.hasBitmap();
                        }
                    } else if (this.documentAttachType == 2 && !z4) {
                        this.currentMessageObject.hadAnimationNotReadyLoading = true;
                    }
                } else {
                    z5 = false;
                }
                if (this.hasMiniProgress != 0) {
                    this.radialProgress.setMiniProgressBackgroundColor(getThemedColor("chat_inLoaderPhoto"));
                    this.buttonState = 3;
                    this.radialProgress.setIcon(getIconForCurrentState(), z, z6);
                    if (this.hasMiniProgress == 1) {
                        DownloadController.getInstance(this.currentAccount).removeLoadingFileObserver(this);
                        this.miniButtonState = -1;
                    } else {
                        DownloadController.getInstance(this.currentAccount).addLoadingFileObserver(str, this.currentMessageObject, this);
                        if (!FileLoader.getInstance(this.currentAccount).isLoadingFile(str)) {
                            this.miniButtonState = 0;
                        } else {
                            this.miniButtonState = 1;
                            long[] fileProgressSizes6 = ImageLoader.getInstance().getFileProgressSizes(str);
                            if (fileProgressSizes6 != null) {
                                createLoadingProgressLayout(fileProgressSizes6[0], fileProgressSizes6[1]);
                                this.radialProgress.setProgress(DownloadController.getProgress(fileProgressSizes6), z6);
                            } else {
                                createLoadingProgressLayout(this.documentAttach);
                                this.radialProgress.setProgress(0.0f, z6);
                            }
                        }
                    }
                    this.radialProgress.setMiniIcon(getMiniIconForCurrentState(), z, z6);
                } else if (z4 || (((i = this.documentAttachType) == 4 || i == 2 || i == 7) && this.autoPlayingMedia && !this.currentMessageObject.hadAnimationNotReadyLoading && !z5)) {
                    DownloadController.getInstance(this.currentAccount).removeLoadingFileObserver(this);
                    if (this.drawVideoImageButton && z6) {
                        int i10 = this.animatingDrawVideoImageButton;
                        if (i10 != 1 && this.animatingDrawVideoImageButtonProgress > 0.0f) {
                            if (i10 == 0) {
                                this.animatingDrawVideoImageButtonProgress = 1.0f;
                            }
                            this.animatingDrawVideoImageButton = 1;
                        }
                    } else if (this.animatingDrawVideoImageButton == 0) {
                        this.animatingDrawVideoImageButton = 1;
                    }
                    this.drawVideoImageButton = false;
                    this.drawVideoSize = false;
                    if (this.currentMessageObject.needDrawBluredPreview()) {
                        this.buttonState = -1;
                    } else {
                        int i11 = this.documentAttachType;
                        if (i11 == 2 && this.currentMessageObject.gifState == 1.0f) {
                            if (this.photoImage.isAnimationRunning()) {
                                this.currentMessageObject.gifState = 0.0f;
                                this.buttonState = -1;
                            } else {
                                this.buttonState = 2;
                            }
                        } else if (i11 == 4 && !this.hasEmbed) {
                            this.buttonState = 3;
                        } else {
                            this.buttonState = -1;
                        }
                    }
                    RadialProgress2 radialProgress2 = this.videoRadialProgress;
                    if (this.animatingDrawVideoImageButton == 0) {
                        z7 = false;
                    }
                    radialProgress2.setIcon(4, z, z7);
                    this.radialProgress.setIcon(getIconForCurrentState(), z, z6);
                    if (!z3 && this.photoNotSet) {
                        setMessageObject(this.currentMessageObject, this.currentMessagesGroup, this.pinnedBottom, this.pinnedTop);
                    }
                    invalidate();
                } else {
                    this.drawVideoSize = i == 4 || i == 2;
                    if ((i == 4 || i == 2 || i == 7) && this.canStreamVideo && !this.drawVideoImageButton && z6) {
                        int i12 = this.animatingDrawVideoImageButton;
                        if (i12 != 2 && this.animatingDrawVideoImageButtonProgress < 1.0f) {
                            if (i12 == 0) {
                                this.animatingDrawVideoImageButtonProgress = 0.0f;
                            }
                            this.animatingDrawVideoImageButton = 2;
                        }
                    } else if (this.animatingDrawVideoImageButton == 0) {
                        this.animatingDrawVideoImageButtonProgress = 1.0f;
                    }
                    DownloadController.getInstance(this.currentAccount).addLoadingFileObserver(str, this.currentMessageObject, this);
                    if (!FileLoader.getInstance(this.currentAccount).isLoadingFile(str)) {
                        MessageObject messageObject9 = this.currentMessageObject;
                        if (!messageObject9.loadingCancelled && canDownloadMedia) {
                            this.buttonState = 1;
                        } else if (messageObject9.type == 4) {
                            this.buttonState = -1;
                        } else {
                            this.buttonState = 0;
                        }
                        int i13 = messageObject9.type;
                        boolean z10 = i13 == 3 || i13 == 8 || this.documentAttachType == 4;
                        MessageObject.GroupedMessagePosition groupedMessagePosition2 = this.currentPosition;
                        boolean z11 = groupedMessagePosition2 == null || (groupedMessagePosition2.flags & 3) == 3;
                        int i14 = this.documentAttachType;
                        if ((i14 == 4 || (i14 == 2 && canDownloadMedia)) && this.canStreamVideo && z10 && z11) {
                            this.drawVideoImageButton = true;
                            getIconForCurrentState();
                            this.radialProgress.setIcon(this.autoPlayingMedia ? 4 : 0, z, z6);
                            this.videoRadialProgress.setIcon(2, z, z6);
                        } else {
                            this.drawVideoImageButton = false;
                            this.radialProgress.setIcon(getIconForCurrentState(), z, z6);
                            this.videoRadialProgress.setIcon(4, z, false);
                            if (!this.drawVideoSize && this.animatingDrawVideoImageButton == 0) {
                                this.animatingDrawVideoImageButtonProgress = 0.0f;
                            }
                        }
                    } else {
                        this.buttonState = 1;
                        long[] fileProgressSizes7 = ImageLoader.getInstance().getFileProgressSizes(str);
                        if (fileProgressSizes7 != null) {
                            createLoadingProgressLayout(fileProgressSizes7[0], fileProgressSizes7[1]);
                        } else {
                            createLoadingProgressLayout(this.documentAttach);
                        }
                        MessageObject messageObject10 = this.currentMessageObject;
                        int i15 = messageObject10.type;
                        boolean z12 = i15 == 3 || i15 == 8 || this.documentAttachType == 4;
                        MessageObject.GroupedMessagePosition groupedMessagePosition3 = this.currentPosition;
                        boolean z13 = groupedMessagePosition3 == null || (groupedMessagePosition3.flags & 3) == 3;
                        if ((this.documentAttachType == 4 || (MessageObject.isGifDocument(this.documentAttach, messageObject10.hasValidGroupId()) && canDownloadMedia)) && this.canStreamVideo && z12 && z13) {
                            this.drawVideoImageButton = true;
                            getIconForCurrentState();
                            this.radialProgress.setIcon((this.autoPlayingMedia || this.documentAttachType == 2) ? 4 : 0, z, z6);
                            RadialProgress2 radialProgress22 = this.videoRadialProgress;
                            if (fileProgressSizes7 != null) {
                                f = DownloadController.getProgress(fileProgressSizes7);
                            }
                            radialProgress22.setProgress(f, z6);
                            this.videoRadialProgress.setIcon(14, z, z6);
                        } else {
                            this.drawVideoImageButton = false;
                            this.radialProgress.setProgress(fileProgressSizes7 != null ? DownloadController.getProgress(fileProgressSizes7) : 0.0f, z6);
                            this.radialProgress.setIcon(getIconForCurrentState(), z, z6);
                            this.videoRadialProgress.setIcon(4, z, false);
                            if (!this.drawVideoSize && this.animatingDrawVideoImageButton == 0) {
                                this.animatingDrawVideoImageButtonProgress = 0.0f;
                            }
                        }
                    }
                    invalidate();
                }
            }
        }
        if (this.hasMiniProgress != 0) {
            return;
        }
        this.radialProgress.setMiniIcon(4, false, z6);
    }

    private void didPressMiniButton(boolean z) {
        int i = this.miniButtonState;
        if (i != 0) {
            if (i != 1) {
                return;
            }
            int i2 = this.documentAttachType;
            if ((i2 == 3 || i2 == 5) && MediaController.getInstance().isPlayingMessage(this.currentMessageObject)) {
                MediaController.getInstance().cleanupPlayer(true, true);
            }
            this.miniButtonState = 0;
            this.currentMessageObject.loadingCancelled = true;
            FileLoader.getInstance(this.currentAccount).cancelLoadFile(this.documentAttach);
            this.radialProgress.setMiniIcon(getMiniIconForCurrentState(), false, true);
            invalidate();
            return;
        }
        this.miniButtonState = 1;
        this.radialProgress.setProgress(0.0f, false);
        MessageObject messageObject = this.currentMessageObject;
        if (messageObject != null && !messageObject.isAnyKindOfSticker()) {
            this.currentMessageObject.putInDownloadsStore = true;
        }
        int i3 = this.documentAttachType;
        if (i3 == 3 || i3 == 5) {
            FileLoader.getInstance(this.currentAccount).loadFile(this.documentAttach, this.currentMessageObject, 1, 0);
            this.currentMessageObject.loadingCancelled = false;
        } else if (i3 == 4) {
            createLoadingProgressLayout(this.documentAttach);
            FileLoader fileLoader = FileLoader.getInstance(this.currentAccount);
            TLRPC$Document tLRPC$Document = this.documentAttach;
            MessageObject messageObject2 = this.currentMessageObject;
            fileLoader.loadFile(tLRPC$Document, messageObject2, 1, messageObject2.shouldEncryptPhotoOrVideo() ? 2 : 0);
            this.currentMessageObject.loadingCancelled = false;
        }
        this.radialProgress.setMiniIcon(getMiniIconForCurrentState(), false, true);
        invalidate();
    }

    private void didPressButton(boolean z, boolean z2) {
        String str;
        TLRPC$PhotoSize tLRPC$PhotoSize;
        MessageObject messageObject = this.currentMessageObject;
        if (messageObject != null && !messageObject.isAnyKindOfSticker()) {
            this.currentMessageObject.putInDownloadsStore = true;
        }
        int i = this.buttonState;
        int i2 = 2;
        if (i == 0 && (!this.drawVideoImageButton || z2)) {
            int i3 = this.documentAttachType;
            if (i3 == 3 || i3 == 5) {
                if (this.miniButtonState == 0) {
                    FileLoader.getInstance(this.currentAccount).loadFile(this.documentAttach, this.currentMessageObject, 1, 0);
                    this.currentMessageObject.loadingCancelled = false;
                }
                if (!this.delegate.needPlayMessage(this.currentMessageObject)) {
                    return;
                }
                if (this.hasMiniProgress == 2 && this.miniButtonState != 1) {
                    this.miniButtonState = 1;
                    this.radialProgress.setProgress(0.0f, false);
                    this.radialProgress.setMiniIcon(getMiniIconForCurrentState(), false, true);
                }
                updatePlayingMessageProgress();
                this.buttonState = 1;
                this.radialProgress.setIcon(getIconForCurrentState(), false, true);
                invalidate();
                return;
            }
            if (z2) {
                this.videoRadialProgress.setProgress(0.0f, false);
            } else {
                this.radialProgress.setProgress(0.0f, false);
            }
            if (this.currentPhotoObject != null && (this.photoImage.hasNotThumb() || this.currentPhotoObjectThumb == null)) {
                tLRPC$PhotoSize = this.currentPhotoObject;
                str = ((tLRPC$PhotoSize instanceof TLRPC$TL_photoStrippedSize) || "s".equals(tLRPC$PhotoSize.type)) ? this.currentPhotoFilterThumb : this.currentPhotoFilter;
            } else {
                tLRPC$PhotoSize = this.currentPhotoObjectThumb;
                str = this.currentPhotoFilterThumb;
            }
            String str2 = str;
            MessageObject messageObject2 = this.currentMessageObject;
            int i4 = messageObject2.type;
            if (i4 == 1) {
                this.photoImage.setForceLoading(true);
                ImageReceiver imageReceiver = this.photoImage;
                ImageLocation forObject = ImageLocation.getForObject(this.currentPhotoObject, this.photoParentObject);
                String str3 = this.currentPhotoFilter;
                ImageLocation forObject2 = ImageLocation.getForObject(this.currentPhotoObjectThumb, this.photoParentObject);
                String str4 = this.currentPhotoFilterThumb;
                BitmapDrawable bitmapDrawable = this.currentPhotoObjectThumbStripped;
                long j = this.currentPhotoObject.size;
                MessageObject messageObject3 = this.currentMessageObject;
                imageReceiver.setImage(forObject, str3, forObject2, str4, bitmapDrawable, j, null, messageObject3, messageObject3.shouldEncryptPhotoOrVideo() ? 2 : 0);
            } else if (i4 == 8) {
                FileLoader.getInstance(this.currentAccount).loadFile(this.documentAttach, this.currentMessageObject, 1, 0);
                if (this.currentMessageObject.loadedFileSize > 0) {
                    createLoadingProgressLayout(this.documentAttach);
                }
            } else if (this.isRoundVideo) {
                if (messageObject2.isSecretMedia()) {
                    FileLoader.getInstance(this.currentAccount).loadFile(this.currentMessageObject.getDocument(), this.currentMessageObject, 1, 1);
                } else {
                    MessageObject messageObject4 = this.currentMessageObject;
                    messageObject4.gifState = 2.0f;
                    TLRPC$Document document = messageObject4.getDocument();
                    this.photoImage.setForceLoading(true);
                    this.photoImage.setImage(ImageLocation.getForDocument(document), null, ImageLocation.getForObject(tLRPC$PhotoSize, document), str2, document.size, null, this.currentMessageObject, 0);
                }
            } else if (i4 == 9) {
                FileLoader.getInstance(this.currentAccount).loadFile(this.documentAttach, this.currentMessageObject, 1, 0);
                if (this.currentMessageObject.loadedFileSize > 0) {
                    createLoadingProgressLayout(this.documentAttach);
                }
            } else {
                int i5 = this.documentAttachType;
                if (i5 == 4) {
                    FileLoader fileLoader = FileLoader.getInstance(this.currentAccount);
                    TLRPC$Document tLRPC$Document = this.documentAttach;
                    MessageObject messageObject5 = this.currentMessageObject;
                    if (!messageObject5.shouldEncryptPhotoOrVideo()) {
                        i2 = 0;
                    }
                    fileLoader.loadFile(tLRPC$Document, messageObject5, 1, i2);
                    MessageObject messageObject6 = this.currentMessageObject;
                    if (messageObject6.loadedFileSize > 0) {
                        createLoadingProgressLayout(messageObject6.getDocument());
                    }
                } else if (i4 != 0 || i5 == 0) {
                    this.photoImage.setForceLoading(true);
                    this.photoImage.setImage(ImageLocation.getForObject(this.currentPhotoObject, this.photoParentObject), this.currentPhotoFilter, ImageLocation.getForObject(this.currentPhotoObjectThumb, this.photoParentObject), this.currentPhotoFilterThumb, this.currentPhotoObjectThumbStripped, 0L, null, this.currentMessageObject, 0);
                } else if (i5 == 2) {
                    this.photoImage.setForceLoading(true);
                    this.photoImage.setImage(ImageLocation.getForDocument(this.documentAttach), null, ImageLocation.getForDocument(this.currentPhotoObject, this.documentAttach), this.currentPhotoFilterThumb, this.documentAttach.size, null, this.currentMessageObject, 0);
                    MessageObject messageObject7 = this.currentMessageObject;
                    messageObject7.gifState = 2.0f;
                    if (messageObject7.loadedFileSize > 0) {
                        createLoadingProgressLayout(messageObject7.getDocument());
                    }
                } else if (i5 == 1) {
                    FileLoader.getInstance(this.currentAccount).loadFile(this.documentAttach, this.currentMessageObject, 0, 0);
                } else if (i5 == 8) {
                    this.photoImage.setImage(ImageLocation.getForDocument(this.documentAttach), this.currentPhotoFilter, ImageLocation.getForDocument(this.currentPhotoObject, this.documentAttach), "b1", 0L, "jpg", this.currentMessageObject, 1);
                }
            }
            this.currentMessageObject.loadingCancelled = false;
            this.buttonState = 1;
            if (z2) {
                this.videoRadialProgress.setIcon(14, false, z);
            } else {
                this.radialProgress.setIcon(getIconForCurrentState(), false, z);
            }
            invalidate();
        } else if (i == 1 && (!this.drawVideoImageButton || z2)) {
            this.photoImage.setForceLoading(false);
            int i6 = this.documentAttachType;
            if (i6 == 3 || i6 == 5) {
                if (!MediaController.getInstance().lambda$startAudioAgain$7(this.currentMessageObject)) {
                    return;
                }
                this.buttonState = 0;
                this.radialProgress.setIcon(getIconForCurrentState(), false, z);
                invalidate();
            } else if (this.currentMessageObject.isOut() && !this.drawVideoImageButton && (this.currentMessageObject.isSending() || this.currentMessageObject.isEditing())) {
                if (this.radialProgress.getIcon() == 6) {
                    return;
                }
                this.delegate.didPressCancelSendButton(this);
            } else {
                MessageObject messageObject8 = this.currentMessageObject;
                messageObject8.loadingCancelled = true;
                int i7 = this.documentAttachType;
                if (i7 == 2 || i7 == 4 || i7 == 1 || i7 == 8) {
                    FileLoader.getInstance(this.currentAccount).cancelLoadFile(this.documentAttach);
                } else {
                    int i8 = messageObject8.type;
                    if (i8 == 0 || i8 == 1 || i8 == 8 || i8 == 5) {
                        ImageLoader.getInstance().cancelForceLoadingForImageReceiver(this.photoImage);
                        this.photoImage.cancelLoadImage();
                    } else if (i8 == 9) {
                        FileLoader.getInstance(this.currentAccount).cancelLoadFile(this.currentMessageObject.getDocument());
                    }
                }
                this.buttonState = 0;
                if (z2) {
                    this.videoRadialProgress.setIcon(2, false, z);
                } else {
                    this.radialProgress.setIcon(getIconForCurrentState(), false, z);
                }
                invalidate();
            }
        } else if (i == 2) {
            int i9 = this.documentAttachType;
            if (i9 == 3 || i9 == 5) {
                this.radialProgress.setProgress(0.0f, false);
                FileLoader.getInstance(this.currentAccount).loadFile(this.documentAttach, this.currentMessageObject, 1, 0);
                this.currentMessageObject.loadingCancelled = false;
                this.buttonState = 4;
                this.radialProgress.setIcon(getIconForCurrentState(), true, z);
                invalidate();
                return;
            }
            if (this.isRoundVideo) {
                MessageObject playingMessageObject = MediaController.getInstance().getPlayingMessageObject();
                if (playingMessageObject == null || !playingMessageObject.isRoundVideo()) {
                    this.photoImage.setAllowStartAnimation(true);
                    this.photoImage.startAnimation();
                }
            } else {
                this.photoImage.setAllowStartAnimation(true);
                this.photoImage.startAnimation();
            }
            this.currentMessageObject.gifState = 0.0f;
            this.buttonState = -1;
            this.radialProgress.setIcon(getIconForCurrentState(), false, z);
        } else if (i == 3 || i == 0) {
            if (this.hasMiniProgress == 2 && this.miniButtonState != 1) {
                this.miniButtonState = 1;
                this.radialProgress.setProgress(0.0f, false);
                this.radialProgress.setMiniIcon(getMiniIconForCurrentState(), false, z);
            }
            this.delegate.didPressImage(this, 0.0f, 0.0f);
        } else if (i != 4) {
        } else {
            int i10 = this.documentAttachType;
            if (i10 != 3 && i10 != 5) {
                return;
            }
            if ((this.currentMessageObject.isOut() && (this.currentMessageObject.isSending() || this.currentMessageObject.isEditing())) || this.currentMessageObject.isSendError()) {
                if (this.delegate == null || this.radialProgress.getIcon() == 6) {
                    return;
                }
                this.delegate.didPressCancelSendButton(this);
                return;
            }
            this.currentMessageObject.loadingCancelled = true;
            FileLoader.getInstance(this.currentAccount).cancelLoadFile(this.documentAttach);
            this.buttonState = 2;
            this.radialProgress.setIcon(getIconForCurrentState(), false, z);
            invalidate();
        }
    }

    @Override // org.telegram.messenger.DownloadController.FileDownloadProgressListener
    public void onFailedDownload(String str, boolean z) {
        int i = this.documentAttachType;
        updateButtonState(true, i == 3 || i == 5, false);
    }

    /* JADX WARN: Code restructure failed: missing block: B:40:0x00b8, code lost:
        if ((r7 & 2) != 0) goto L41;
     */
    @Override // org.telegram.messenger.DownloadController.FileDownloadProgressListener
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void onSuccessDownload(String str) {
        TLRPC$Document tLRPC$Document;
        if (this.documentAttachType == 6 && this.currentMessageObject.isDice()) {
            DownloadController.getInstance(this.currentAccount).removeLoadingFileObserver(this);
            setCurrentDiceValue(true);
            return;
        }
        int i = this.documentAttachType;
        if (i == 3 || i == 5) {
            updateButtonState(false, true, false);
            updateWaveform();
            return;
        }
        if (this.drawVideoImageButton) {
            this.videoRadialProgress.setProgress(1.0f, true);
        } else {
            this.radialProgress.setProgress(1.0f, true);
        }
        if (!this.currentMessageObject.needDrawBluredPreview() && !this.autoPlayingMedia && (tLRPC$Document = this.documentAttach) != null) {
            int i2 = this.documentAttachType;
            if (i2 == 7) {
                ImageReceiver imageReceiver = this.photoImage;
                ImageLocation forDocument = ImageLocation.getForDocument(tLRPC$Document);
                ImageLocation forObject = ImageLocation.getForObject(this.currentPhotoObject, this.photoParentObject);
                TLRPC$PhotoSize tLRPC$PhotoSize = this.currentPhotoObject;
                imageReceiver.setImage(forDocument, ImageLoader.AUTOPLAY_FILTER, forObject, ((tLRPC$PhotoSize instanceof TLRPC$TL_photoStrippedSize) || (tLRPC$PhotoSize != null && "s".equals(tLRPC$PhotoSize.type))) ? this.currentPhotoFilterThumb : this.currentPhotoFilter, ImageLocation.getForObject(this.currentPhotoObjectThumb, this.photoParentObject), this.currentPhotoFilterThumb, this.currentPhotoObjectThumbStripped, this.documentAttach.size, null, this.currentMessageObject, 0);
                this.photoImage.setAllowStartAnimation(true);
                this.photoImage.startAnimation();
                this.autoPlayingMedia = true;
            } else {
                if (SharedConfig.autoplayVideo && i2 == 4) {
                    MessageObject.GroupedMessagePosition groupedMessagePosition = this.currentPosition;
                    if (groupedMessagePosition != null) {
                        int i3 = groupedMessagePosition.flags;
                        if ((i3 & 1) != 0) {
                        }
                    }
                    this.animatingNoSound = 2;
                    ImageReceiver imageReceiver2 = this.photoImage;
                    ImageLocation forDocument2 = ImageLocation.getForDocument(tLRPC$Document);
                    ImageLocation forObject2 = ImageLocation.getForObject(this.currentPhotoObject, this.photoParentObject);
                    TLRPC$PhotoSize tLRPC$PhotoSize2 = this.currentPhotoObject;
                    imageReceiver2.setImage(forDocument2, ImageLoader.AUTOPLAY_FILTER, forObject2, ((tLRPC$PhotoSize2 instanceof TLRPC$TL_photoStrippedSize) || (tLRPC$PhotoSize2 != null && "s".equals(tLRPC$PhotoSize2.type))) ? this.currentPhotoFilterThumb : this.currentPhotoFilter, ImageLocation.getForObject(this.currentPhotoObjectThumb, this.photoParentObject), this.currentPhotoFilterThumb, this.currentPhotoObjectThumbStripped, this.documentAttach.size, null, this.currentMessageObject, 0);
                    if (!PhotoViewer.isPlayingMessage(this.currentMessageObject)) {
                        this.photoImage.setAllowStartAnimation(true);
                        this.photoImage.startAnimation();
                    } else {
                        this.photoImage.setAllowStartAnimation(false);
                    }
                    this.autoPlayingMedia = true;
                }
                if (i2 == 2) {
                    ImageReceiver imageReceiver3 = this.photoImage;
                    ImageLocation forDocument3 = ImageLocation.getForDocument(tLRPC$Document);
                    ImageLocation forObject3 = ImageLocation.getForObject(this.currentPhotoObject, this.photoParentObject);
                    TLRPC$PhotoSize tLRPC$PhotoSize3 = this.currentPhotoObject;
                    imageReceiver3.setImage(forDocument3, ImageLoader.AUTOPLAY_FILTER, forObject3, ((tLRPC$PhotoSize3 instanceof TLRPC$TL_photoStrippedSize) || (tLRPC$PhotoSize3 != null && "s".equals(tLRPC$PhotoSize3.type))) ? this.currentPhotoFilterThumb : this.currentPhotoFilter, ImageLocation.getForObject(this.currentPhotoObjectThumb, this.photoParentObject), this.currentPhotoFilterThumb, this.currentPhotoObjectThumbStripped, this.documentAttach.size, null, this.currentMessageObject, 0);
                    if (SharedConfig.autoplayGifs) {
                        this.photoImage.setAllowStartAnimation(true);
                        this.photoImage.startAnimation();
                    } else {
                        this.photoImage.setAllowStartAnimation(false);
                        this.photoImage.stopAnimation();
                    }
                    this.autoPlayingMedia = true;
                }
            }
        }
        MessageObject messageObject = this.currentMessageObject;
        if (messageObject.type == 0) {
            if (!this.autoPlayingMedia && this.documentAttachType == 2 && messageObject.gifState != 1.0f) {
                this.buttonState = 2;
                didPressButton(true, false);
                return;
            } else if (!this.photoNotSet) {
                updateButtonState(false, true, false);
                return;
            } else {
                setMessageObject(messageObject, this.currentMessagesGroup, this.pinnedBottom, this.pinnedTop);
                return;
            }
        }
        if (!this.photoNotSet) {
            updateButtonState(false, true, false);
        }
        if (!this.photoNotSet) {
            return;
        }
        setMessageObject(this.currentMessageObject, this.currentMessagesGroup, this.pinnedBottom, this.pinnedTop);
    }

    @Override // org.telegram.messenger.ImageReceiver.ImageReceiverDelegate
    public void didSetImage(ImageReceiver imageReceiver, boolean z, boolean z2, boolean z3) {
        int i;
        MessageObject messageObject = this.currentMessageObject;
        if (messageObject == null || !z) {
            return;
        }
        if (setCurrentDiceValue(!z3 && !messageObject.wasUnread) || z2) {
            return;
        }
        MessageObject messageObject2 = this.currentMessageObject;
        if (messageObject2.mediaExists || messageObject2.attachPathExists) {
            return;
        }
        int i2 = messageObject2.type;
        if ((i2 != 0 || ((i = this.documentAttachType) != 8 && i != 0 && i != 6)) && i2 != 1) {
            return;
        }
        messageObject2.mediaExists = true;
        updateButtonState(false, true, false);
    }

    public boolean setCurrentDiceValue(boolean z) {
        MessagesController.DiceFrameSuccess diceFrameSuccess;
        if (this.currentMessageObject.isDice()) {
            Drawable drawable = this.photoImage.getDrawable();
            if (drawable instanceof RLottieDrawable) {
                RLottieDrawable rLottieDrawable = (RLottieDrawable) drawable;
                String diceEmoji = this.currentMessageObject.getDiceEmoji();
                TLRPC$TL_messages_stickerSet stickerSetByEmojiOrName = MediaDataController.getInstance(this.currentAccount).getStickerSetByEmojiOrName(diceEmoji);
                if (stickerSetByEmojiOrName != null) {
                    int diceValue = this.currentMessageObject.getDiceValue();
                    if ("🎰".equals(this.currentMessageObject.getDiceEmoji())) {
                        if (diceValue >= 0 && diceValue <= 64) {
                            ((SlotsDrawable) rLottieDrawable).setDiceNumber(this, diceValue, stickerSetByEmojiOrName, z);
                            if (this.currentMessageObject.isOut()) {
                                rLottieDrawable.setOnFinishCallback(this.diceFinishCallback, Integer.MAX_VALUE);
                            }
                            this.currentMessageObject.wasUnread = false;
                        }
                        if (!rLottieDrawable.hasBaseDice() && stickerSetByEmojiOrName.documents.size() > 0) {
                            ((SlotsDrawable) rLottieDrawable).setBaseDice(this, stickerSetByEmojiOrName);
                        }
                    } else {
                        if (!rLottieDrawable.hasBaseDice() && stickerSetByEmojiOrName.documents.size() > 0) {
                            TLRPC$Document tLRPC$Document = stickerSetByEmojiOrName.documents.get(0);
                            if (rLottieDrawable.setBaseDice(FileLoader.getInstance(this.currentAccount).getPathToAttach(tLRPC$Document, true))) {
                                DownloadController.getInstance(this.currentAccount).removeLoadingFileObserver(this);
                            } else {
                                DownloadController.getInstance(this.currentAccount).addLoadingFileObserver(FileLoader.getAttachFileName(tLRPC$Document), this.currentMessageObject, this);
                                FileLoader.getInstance(this.currentAccount).loadFile(tLRPC$Document, stickerSetByEmojiOrName, 1, 1);
                            }
                        }
                        if (diceValue >= 0 && diceValue < stickerSetByEmojiOrName.documents.size()) {
                            if (!z && this.currentMessageObject.isOut() && (diceFrameSuccess = MessagesController.getInstance(this.currentAccount).diceSuccess.get(diceEmoji)) != null && diceFrameSuccess.num == diceValue) {
                                rLottieDrawable.setOnFinishCallback(this.diceFinishCallback, diceFrameSuccess.frame);
                            }
                            TLRPC$Document tLRPC$Document2 = stickerSetByEmojiOrName.documents.get(Math.max(diceValue, 0));
                            if (rLottieDrawable.setDiceNumber(FileLoader.getInstance(this.currentAccount).getPathToAttach(tLRPC$Document2, true), z)) {
                                DownloadController.getInstance(this.currentAccount).removeLoadingFileObserver(this);
                            } else {
                                DownloadController.getInstance(this.currentAccount).addLoadingFileObserver(FileLoader.getAttachFileName(tLRPC$Document2), this.currentMessageObject, this);
                                FileLoader.getInstance(this.currentAccount).loadFile(tLRPC$Document2, stickerSetByEmojiOrName, 1, 1);
                            }
                            this.currentMessageObject.wasUnread = false;
                        }
                    }
                } else {
                    MediaDataController.getInstance(this.currentAccount).loadStickersByEmojiOrName(diceEmoji, true, true);
                }
            }
            return true;
        }
        return false;
    }

    @Override // org.telegram.messenger.ImageReceiver.ImageReceiverDelegate
    public void onAnimationReady(ImageReceiver imageReceiver) {
        MessageObject messageObject = this.currentMessageObject;
        if (messageObject == null || imageReceiver != this.photoImage || !messageObject.isAnimatedSticker()) {
            return;
        }
        this.delegate.setShouldNotRepeatSticker(this.currentMessageObject);
    }

    @Override // org.telegram.messenger.DownloadController.FileDownloadProgressListener
    public void onProgressDownload(String str, long j, long j2) {
        float min = j2 == 0 ? 0.0f : Math.min(1.0f, ((float) j) / ((float) j2));
        this.currentMessageObject.loadedFileSize = j;
        createLoadingProgressLayout(j, j2);
        if (this.drawVideoImageButton) {
            this.videoRadialProgress.setProgress(min, true);
        } else {
            this.radialProgress.setProgress(min, true);
        }
        int i = this.documentAttachType;
        if (i == 3 || i == 5) {
            if (this.hasMiniProgress != 0) {
                if (this.miniButtonState == 1) {
                    return;
                }
                updateButtonState(false, false, false);
            } else if (this.buttonState == 4) {
            } else {
                updateButtonState(false, false, false);
            }
        } else if (this.hasMiniProgress != 0) {
            if (this.miniButtonState == 1) {
                return;
            }
            updateButtonState(false, false, false);
        } else if (this.buttonState == 1) {
        } else {
            updateButtonState(false, false, false);
        }
    }

    @Override // org.telegram.messenger.DownloadController.FileDownloadProgressListener
    public void onProgressUpload(String str, long j, long j2, boolean z) {
        int i;
        float min = j2 == 0 ? 0.0f : Math.min(1.0f, ((float) j) / ((float) j2));
        this.currentMessageObject.loadedFileSize = j;
        this.radialProgress.setProgress(min, true);
        if (j == j2 && this.currentPosition != null && SendMessagesHelper.getInstance(this.currentAccount).isSendingMessage(this.currentMessageObject.getId()) && ((i = this.buttonState) == 1 || (i == 4 && this.documentAttachType == 5))) {
            this.drawRadialCheckBackground = true;
            getIconForCurrentState();
            this.radialProgress.setIcon(6, false, true);
        }
        createLoadingProgressLayout(j, j2);
    }

    private void createLoadingProgressLayout(TLRPC$Document tLRPC$Document) {
        if (tLRPC$Document == null) {
            return;
        }
        long[] fileProgressSizes = ImageLoader.getInstance().getFileProgressSizes(FileLoader.getDocumentFileName(tLRPC$Document));
        if (fileProgressSizes != null) {
            createLoadingProgressLayout(fileProgressSizes[0], fileProgressSizes[1]);
        } else {
            createLoadingProgressLayout(this.currentMessageObject.loadedFileSize, tLRPC$Document.size);
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:16:0x004b  */
    /* JADX WARN: Removed duplicated region for block: B:21:0x006a  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void createLoadingProgressLayout(long j, long j2) {
        boolean z;
        String str;
        int ceil;
        int i;
        String str2;
        long j3 = j2;
        if (j3 <= 0 || this.documentAttach == null) {
            this.loadingProgressLayout = null;
            return;
        }
        long j4 = this.lastLoadingSizeTotal;
        if (j4 == 0) {
            this.lastLoadingSizeTotal = j3;
        } else if (j > j4) {
            j3 = j4;
            String formatFileSize = AndroidUtilities.formatFileSize(j3);
            int ceil2 = (int) Math.ceil(Theme.chat_infoPaint.measureText(String.format("000.0 mm / %s", formatFileSize)));
            String str3 = "100%";
            if (this.documentAttachType != 1) {
                str = ceil2 <= Math.max(this.infoWidth, this.docTitleWidth) ? String.format("%s / %s", AndroidUtilities.formatFileSize(j4), formatFileSize) : AndroidUtilities.formatFileSize(j4);
                z = true;
            } else {
                MessageObject.GroupedMessagePosition groupedMessagePosition = this.currentPosition;
                z = groupedMessagePosition == null || (groupedMessagePosition.flags & 3) == 3;
                if (!z) {
                    int min = (int) (Math.min(1.0f, ((float) j4) / ((float) j3)) * 100.0f);
                    str = min >= 100 ? str3 : String.format(Locale.US, "%2d%%", Integer.valueOf(min));
                } else {
                    str = String.format("%s / %s", AndroidUtilities.formatFileSize(j4), formatFileSize);
                }
            }
            ceil = (int) Math.ceil(Theme.chat_infoPaint.measureText(str));
            if (z || ceil <= this.backgroundWidth - AndroidUtilities.dp(48.0f)) {
                str2 = str;
                i = ceil;
            } else {
                int min2 = (int) (Math.min(1.0f, ((float) j4) / ((float) j3)) * 100.0f);
                if (min2 < 100) {
                    str3 = String.format(Locale.US, "%2d%%", Integer.valueOf(min2));
                }
                i = (int) Math.ceil(Theme.chat_infoPaint.measureText(str3));
                str2 = str3;
            }
            this.loadingProgressLayout = new StaticLayout(str2, Theme.chat_infoPaint, i, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
        } else {
            j3 = j4;
        }
        j4 = j;
        String formatFileSize2 = AndroidUtilities.formatFileSize(j3);
        int ceil22 = (int) Math.ceil(Theme.chat_infoPaint.measureText(String.format("000.0 mm / %s", formatFileSize2)));
        String str32 = "100%";
        if (this.documentAttachType != 1) {
        }
        ceil = (int) Math.ceil(Theme.chat_infoPaint.measureText(str));
        if (z) {
        }
        str2 = str;
        i = ceil;
        this.loadingProgressLayout = new StaticLayout(str2, Theme.chat_infoPaint, i, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
    }

    @Override // android.view.View
    public void onProvideStructure(ViewStructure viewStructure) {
        super.onProvideStructure(viewStructure);
        if (!this.allowAssistant || Build.VERSION.SDK_INT < 23) {
            return;
        }
        CharSequence charSequence = this.currentMessageObject.messageText;
        if (charSequence != null && charSequence.length() > 0) {
            viewStructure.setText(this.currentMessageObject.messageText);
            return;
        }
        CharSequence charSequence2 = this.currentMessageObject.caption;
        if (charSequence2 == null || charSequence2.length() <= 0) {
            return;
        }
        viewStructure.setText(this.currentMessageObject.caption);
    }

    public void setDelegate(ChatMessageCellDelegate chatMessageCellDelegate) {
        this.delegate = chatMessageCellDelegate;
    }

    public ChatMessageCellDelegate getDelegate() {
        return this.delegate;
    }

    public void setAllowAssistant(boolean z) {
        this.allowAssistant = z;
    }

    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:101:0x0218  */
    /* JADX WARN: Removed duplicated region for block: B:104:0x0232  */
    /* JADX WARN: Removed duplicated region for block: B:109:0x024d  */
    /* JADX WARN: Removed duplicated region for block: B:112:0x0286  */
    /* JADX WARN: Removed duplicated region for block: B:121:0x02ca  */
    /* JADX WARN: Removed duplicated region for block: B:124:0x02e0  */
    /* JADX WARN: Removed duplicated region for block: B:136:0x0319  */
    /* JADX WARN: Removed duplicated region for block: B:138:0x032b  */
    /* JADX WARN: Removed duplicated region for block: B:159:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:35:0x00b6  */
    /* JADX WARN: Removed duplicated region for block: B:36:0x00c5  */
    /* JADX WARN: Removed duplicated region for block: B:78:0x0172  */
    /* JADX WARN: Removed duplicated region for block: B:84:0x018a  */
    /* JADX WARN: Removed duplicated region for block: B:85:0x0194  */
    /* JADX WARN: Removed duplicated region for block: B:95:0x01e8  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void measureTime(MessageObject messageObject) {
        String str;
        String str2;
        int ceil;
        MessageObject messageObject2;
        TLRPC$Message tLRPC$Message;
        ReactionsLayoutInBubble reactionsLayoutInBubble;
        int i;
        int i2;
        String format;
        String format2;
        TLRPC$Message tLRPC$Message2;
        MessageObject.GroupedMessages groupedMessages;
        TLRPC$User user;
        String str3;
        long fromChatId = messageObject.getFromChatId();
        CharSequence charSequence = "";
        if (!messageObject.scheduled) {
            TLRPC$Message tLRPC$Message3 = messageObject.messageOwner;
            if (tLRPC$Message3.post_author != null) {
                if (!this.isMegagroup || messageObject.getFromChatId() != messageObject.getDialogId()) {
                    str = messageObject.messageOwner.post_author.replace("\n", charSequence);
                }
            } else {
                TLRPC$MessageFwdHeader tLRPC$MessageFwdHeader = tLRPC$Message3.fwd_from;
                if (tLRPC$MessageFwdHeader != null && (str3 = tLRPC$MessageFwdHeader.post_author) != null) {
                    str = str3.replace("\n", charSequence);
                } else if (tLRPC$MessageFwdHeader != null && tLRPC$MessageFwdHeader.imported) {
                    str = tLRPC$MessageFwdHeader.date == tLRPC$Message3.date ? LocaleController.getString("ImportedMessage", R.string.ImportedMessage) : LocaleController.formatImportedDate(messageObject.messageOwner.fwd_from.date) + " " + LocaleController.getString("ImportedMessage", R.string.ImportedMessage);
                } else if (!messageObject.isOutOwner() && fromChatId > 0 && messageObject.messageOwner.post && (user = MessagesController.getInstance(this.currentAccount).getUser(Long.valueOf(fromChatId))) != null) {
                    str = ContactsController.formatName(user.first_name, user.last_name).replace('\n', ' ');
                }
            }
            TLRPC$User user2 = !this.currentMessageObject.isFromUser() ? MessagesController.getInstance(this.currentAccount).getUser(Long.valueOf(fromChatId)) : null;
            boolean hasReplies = messageObject.hasReplies();
            if (!messageObject.scheduled && !messageObject.isLiveLocation() && !messageObject.messageOwner.edit_hide && messageObject.getDialogId() != 777000) {
                tLRPC$Message2 = messageObject.messageOwner;
                if (tLRPC$Message2.via_bot_id == 0 && tLRPC$Message2.via_bot_name == null && (user2 == null || !user2.bot)) {
                    if (this.currentPosition != null || (groupedMessages = this.currentMessagesGroup) == null || groupedMessages.messages.isEmpty()) {
                        this.edited = (messageObject.messageOwner.flags & 32768) == 0 || messageObject.isEditing();
                    } else {
                        this.edited = false;
                        hasReplies = this.currentMessagesGroup.messages.get(0).hasReplies();
                        if (!this.currentMessagesGroup.messages.get(0).messageOwner.edit_hide) {
                            int size = this.currentMessagesGroup.messages.size();
                            for (int i3 = 0; i3 < size; i3++) {
                                MessageObject messageObject3 = this.currentMessagesGroup.messages.get(i3);
                                if ((messageObject3.messageOwner.flags & 32768) != 0 || messageObject3.isEditing()) {
                                    this.edited = true;
                                    break;
                                }
                            }
                        }
                    }
                    this.edited = !this.edited && !this.currentMessageObject.isVoiceTranscriptionOpen();
                    if (!this.currentMessageObject.isSponsored()) {
                        str2 = LocaleController.getString("SponsoredMessage", R.string.SponsoredMessage);
                    } else {
                        MessageObject messageObject4 = this.currentMessageObject;
                        if (messageObject4.scheduled && messageObject4.messageOwner.date == 2147483646) {
                            str2 = charSequence;
                        } else if (this.edited) {
                            str2 = LocaleController.getString("EditedMessage", R.string.EditedMessage) + " " + LocaleController.getInstance().formatterDay.format(messageObject.messageOwner.date * 1000);
                        } else {
                            str2 = LocaleController.getInstance().formatterDay.format(messageObject.messageOwner.date * 1000);
                        }
                    }
                    if (str == null) {
                        TLRPC$MessageFwdHeader tLRPC$MessageFwdHeader2 = messageObject.messageOwner.fwd_from;
                        if (tLRPC$MessageFwdHeader2 != null && tLRPC$MessageFwdHeader2.imported) {
                            this.currentTimeString = " " + str2;
                        } else {
                            this.currentTimeString = ", " + str2;
                        }
                    } else {
                        this.currentTimeString = str2;
                    }
                    ceil = (int) Math.ceil(Theme.chat_timePaint.measureText(this.currentTimeString));
                    this.timeWidth = ceil;
                    this.timeTextWidth = ceil;
                    messageObject2 = this.currentMessageObject;
                    if (messageObject2.scheduled && messageObject2.messageOwner.date == 2147483646) {
                        this.timeWidth = ceil - AndroidUtilities.dp(8.0f);
                    }
                    tLRPC$Message = messageObject.messageOwner;
                    if ((tLRPC$Message.flags & 1024) != 0) {
                        this.currentViewsString = String.format("%s", LocaleController.formatShortNumber(Math.max(1, tLRPC$Message.views), null));
                        int ceil2 = (int) Math.ceil(Theme.chat_timePaint.measureText(format2));
                        this.viewsTextWidth = ceil2;
                        this.timeWidth += ceil2 + Theme.chat_msgInViewsDrawable.getIntrinsicWidth() + AndroidUtilities.dp(10.0f);
                    }
                    if (!this.isChat && this.isMegagroup && !this.isThreadChat && hasReplies) {
                        this.currentRepliesString = String.format("%s", LocaleController.formatShortNumber(getRepliesCount(), null));
                        int ceil3 = (int) Math.ceil(Theme.chat_timePaint.measureText(format));
                        this.repliesTextWidth = ceil3;
                        this.timeWidth += ceil3 + Theme.chat_msgInRepliesDrawable.getIntrinsicWidth() + AndroidUtilities.dp(10.0f);
                    } else {
                        this.currentRepliesString = null;
                    }
                    if (this.isPinned) {
                        this.timeWidth += Theme.chat_msgInPinnedDrawable.getIntrinsicWidth() + AndroidUtilities.dp(3.0f);
                    }
                    if (messageObject.scheduled) {
                        if (messageObject.isSendError()) {
                            this.timeWidth += AndroidUtilities.dp(18.0f);
                        } else if (messageObject.isSending() && messageObject.messageOwner.peer_id.channel_id != 0 && !messageObject.isSupergroup()) {
                            this.timeWidth += AndroidUtilities.dp(18.0f);
                        }
                    }
                    reactionsLayoutInBubble = this.reactionsLayoutInBubble;
                    if (reactionsLayoutInBubble.isSmall) {
                        reactionsLayoutInBubble.measure(Integer.MAX_VALUE, 3);
                        this.timeWidth += this.reactionsLayoutInBubble.width;
                    }
                    if (str != null) {
                        return;
                    }
                    if (this.availableTimeWidth == 0) {
                        this.availableTimeWidth = AndroidUtilities.dp(1000.0f);
                    }
                    int i4 = this.availableTimeWidth - this.timeWidth;
                    if (messageObject.isOutOwner()) {
                        if (messageObject.type == 5) {
                            i2 = AndroidUtilities.dp(20.0f);
                        } else {
                            i2 = AndroidUtilities.dp(96.0f);
                        }
                        i4 -= i2;
                    }
                    int ceil4 = (int) Math.ceil(Theme.chat_timePaint.measureText((CharSequence) str, 0, str.length()));
                    if (ceil4 <= i4) {
                        i = ceil4;
                        charSequence = str;
                    } else if (i4 <= 0) {
                        i = 0;
                    } else {
                        charSequence = TextUtils.ellipsize(str, Theme.chat_timePaint, i4, TextUtils.TruncateAt.END);
                        i = i4;
                    }
                    this.currentTimeString = ((Object) charSequence) + this.currentTimeString;
                    this.timeTextWidth = this.timeTextWidth + i;
                    this.timeWidth = this.timeWidth + i;
                    return;
                }
            }
            this.edited = false;
            this.edited = !this.edited && !this.currentMessageObject.isVoiceTranscriptionOpen();
            if (!this.currentMessageObject.isSponsored()) {
            }
            if (str == null) {
            }
            ceil = (int) Math.ceil(Theme.chat_timePaint.measureText(this.currentTimeString));
            this.timeWidth = ceil;
            this.timeTextWidth = ceil;
            messageObject2 = this.currentMessageObject;
            if (messageObject2.scheduled) {
                this.timeWidth = ceil - AndroidUtilities.dp(8.0f);
            }
            tLRPC$Message = messageObject.messageOwner;
            if ((tLRPC$Message.flags & 1024) != 0) {
            }
            if (!this.isChat) {
            }
            this.currentRepliesString = null;
            if (this.isPinned) {
            }
            if (messageObject.scheduled) {
            }
            reactionsLayoutInBubble = this.reactionsLayoutInBubble;
            if (reactionsLayoutInBubble.isSmall) {
            }
            if (str != null) {
            }
        }
        str = null;
        if (!this.currentMessageObject.isFromUser()) {
        }
        boolean hasReplies2 = messageObject.hasReplies();
        if (!messageObject.scheduled) {
            tLRPC$Message2 = messageObject.messageOwner;
            if (tLRPC$Message2.via_bot_id == 0) {
                if (this.currentPosition != null) {
                }
                this.edited = (messageObject.messageOwner.flags & 32768) == 0 || messageObject.isEditing();
                this.edited = !this.edited && !this.currentMessageObject.isVoiceTranscriptionOpen();
                if (!this.currentMessageObject.isSponsored()) {
                }
                if (str == null) {
                }
                ceil = (int) Math.ceil(Theme.chat_timePaint.measureText(this.currentTimeString));
                this.timeWidth = ceil;
                this.timeTextWidth = ceil;
                messageObject2 = this.currentMessageObject;
                if (messageObject2.scheduled) {
                }
                tLRPC$Message = messageObject.messageOwner;
                if ((tLRPC$Message.flags & 1024) != 0) {
                }
                if (!this.isChat) {
                }
                this.currentRepliesString = null;
                if (this.isPinned) {
                }
                if (messageObject.scheduled) {
                }
                reactionsLayoutInBubble = this.reactionsLayoutInBubble;
                if (reactionsLayoutInBubble.isSmall) {
                }
                if (str != null) {
                }
            }
        }
        this.edited = false;
        this.edited = !this.edited && !this.currentMessageObject.isVoiceTranscriptionOpen();
        if (!this.currentMessageObject.isSponsored()) {
        }
        if (str == null) {
        }
        ceil = (int) Math.ceil(Theme.chat_timePaint.measureText(this.currentTimeString));
        this.timeWidth = ceil;
        this.timeTextWidth = ceil;
        messageObject2 = this.currentMessageObject;
        if (messageObject2.scheduled) {
        }
        tLRPC$Message = messageObject.messageOwner;
        if ((tLRPC$Message.flags & 1024) != 0) {
        }
        if (!this.isChat) {
        }
        this.currentRepliesString = null;
        if (this.isPinned) {
        }
        if (messageObject.scheduled) {
        }
        reactionsLayoutInBubble = this.reactionsLayoutInBubble;
        if (reactionsLayoutInBubble.isSmall) {
        }
        if (str != null) {
        }
    }

    private boolean shouldDrawSelectionOverlay() {
        return hasSelectionOverlay() && ((isPressed() && this.isCheckPressed) || ((!this.isCheckPressed && this.isPressed) || this.isHighlighted || this.isHighlightedAnimated)) && !textIsSelectionMode() && ((this.currentMessagesGroup == null || this.drawSelectionBackground) && this.currentBackgroundDrawable != null);
    }

    private Integer getSelectionOverlayColor() {
        Theme.ResourcesProvider resourcesProvider = this.resourcesProvider;
        if (resourcesProvider == null) {
            return null;
        }
        MessageObject messageObject = this.currentMessageObject;
        return resourcesProvider.getColor((messageObject == null || !messageObject.isOut()) ? "chat_inBubbleSelectedOverlay" : "chat_outBubbleSelectedOverlay");
    }

    private boolean hasSelectionOverlay() {
        Integer selectionOverlayColor = getSelectionOverlayColor();
        return (selectionOverlayColor == null || selectionOverlayColor.intValue() == -65536) ? false : true;
    }

    private boolean isDrawSelectionBackground() {
        return ((isPressed() && this.isCheckPressed) || ((!this.isCheckPressed && this.isPressed) || this.isHighlighted)) && !textIsSelectionMode() && !hasSelectionOverlay();
    }

    public boolean isOpenChatByShare(MessageObject messageObject) {
        TLRPC$MessageFwdHeader tLRPC$MessageFwdHeader = messageObject.messageOwner.fwd_from;
        return (tLRPC$MessageFwdHeader == null || tLRPC$MessageFwdHeader.saved_from_peer == null) ? false : true;
    }

    private boolean checkNeedDrawShareButton(MessageObject messageObject) {
        MessageObject messageObject2 = this.currentMessageObject;
        if (messageObject2.deleted || messageObject2.isSponsored()) {
            return false;
        }
        MessageObject.GroupedMessagePosition groupedMessagePosition = this.currentPosition;
        if (groupedMessagePosition != null && !this.currentMessagesGroup.isDocuments && !groupedMessagePosition.last) {
            return false;
        }
        return messageObject.needDrawShareButton();
    }

    public boolean isInsideBackground(float f, float f2) {
        if (this.currentBackgroundDrawable != null) {
            int i = this.backgroundDrawableLeft;
            if (f >= i && f <= i + this.backgroundDrawableRight) {
                return true;
            }
        }
        return false;
    }

    private void updateCurrentUserAndChat() {
        TLRPC$Peer tLRPC$Peer;
        MessagesController messagesController = MessagesController.getInstance(this.currentAccount);
        TLRPC$MessageFwdHeader tLRPC$MessageFwdHeader = this.currentMessageObject.messageOwner.fwd_from;
        long clientUserId = UserConfig.getInstance(this.currentAccount).getClientUserId();
        if (tLRPC$MessageFwdHeader != null && (tLRPC$MessageFwdHeader.from_id instanceof TLRPC$TL_peerChannel) && this.currentMessageObject.getDialogId() == clientUserId) {
            this.currentChat = MessagesController.getInstance(this.currentAccount).getChat(Long.valueOf(tLRPC$MessageFwdHeader.from_id.channel_id));
        } else if (tLRPC$MessageFwdHeader != null && (tLRPC$Peer = tLRPC$MessageFwdHeader.saved_from_peer) != null) {
            long j = tLRPC$Peer.user_id;
            if (j != 0) {
                TLRPC$Peer tLRPC$Peer2 = tLRPC$MessageFwdHeader.from_id;
                if (tLRPC$Peer2 instanceof TLRPC$TL_peerUser) {
                    this.currentUser = messagesController.getUser(Long.valueOf(tLRPC$Peer2.user_id));
                } else {
                    this.currentUser = messagesController.getUser(Long.valueOf(j));
                }
            } else if (tLRPC$Peer.channel_id != 0) {
                if (this.currentMessageObject.isSavedFromMegagroup()) {
                    TLRPC$Peer tLRPC$Peer3 = tLRPC$MessageFwdHeader.from_id;
                    if (tLRPC$Peer3 instanceof TLRPC$TL_peerUser) {
                        this.currentUser = messagesController.getUser(Long.valueOf(tLRPC$Peer3.user_id));
                        return;
                    }
                }
                this.currentChat = messagesController.getChat(Long.valueOf(tLRPC$MessageFwdHeader.saved_from_peer.channel_id));
            } else {
                long j2 = tLRPC$Peer.chat_id;
                if (j2 == 0) {
                    return;
                }
                TLRPC$Peer tLRPC$Peer4 = tLRPC$MessageFwdHeader.from_id;
                if (tLRPC$Peer4 instanceof TLRPC$TL_peerUser) {
                    this.currentUser = messagesController.getUser(Long.valueOf(tLRPC$Peer4.user_id));
                } else {
                    this.currentChat = messagesController.getChat(Long.valueOf(j2));
                }
            }
        } else if (tLRPC$MessageFwdHeader != null && (tLRPC$MessageFwdHeader.from_id instanceof TLRPC$TL_peerUser) && (tLRPC$MessageFwdHeader.imported || this.currentMessageObject.getDialogId() == clientUserId)) {
            this.currentUser = messagesController.getUser(Long.valueOf(tLRPC$MessageFwdHeader.from_id.user_id));
        } else if (tLRPC$MessageFwdHeader != null && !TextUtils.isEmpty(tLRPC$MessageFwdHeader.from_name) && (tLRPC$MessageFwdHeader.imported || this.currentMessageObject.getDialogId() == clientUserId)) {
            TLRPC$TL_user tLRPC$TL_user = new TLRPC$TL_user();
            this.currentUser = tLRPC$TL_user;
            tLRPC$TL_user.first_name = tLRPC$MessageFwdHeader.from_name;
        } else {
            long fromChatId = this.currentMessageObject.getFromChatId();
            if (DialogObject.isUserDialog(fromChatId) && !this.currentMessageObject.messageOwner.post) {
                this.currentUser = messagesController.getUser(Long.valueOf(fromChatId));
            } else if (DialogObject.isChatDialog(fromChatId)) {
                this.currentChat = messagesController.getChat(Long.valueOf(-fromChatId));
            } else {
                TLRPC$Message tLRPC$Message = this.currentMessageObject.messageOwner;
                if (!tLRPC$Message.post) {
                    return;
                }
                this.currentChat = messagesController.getChat(Long.valueOf(tLRPC$Message.peer_id.channel_id));
            }
        }
    }

    /* JADX WARN: Can't wrap try/catch for region: R(22:35|(1:37)|38|(1:47)(2:44|(17:46|55|73|(1:75)(1:(1:77)(1:78))|79|(1:81)(1:82)|83|(8:85|(1:87)|88|(1:90)(3:92|(1:94)(1:95)|96)|91|97|(1:99)(1:100)|101)(1:102)|431|103|104|428|105|(3:107|(1:109)|110)(1:111)|(1:113)(1:114)|117|(1:119)))|48|(2:56|(16:72|73|(0)(0)|79|(0)(0)|83|(0)(0)|431|103|104|428|105|(0)(0)|(0)(0)|117|(0))(3:68|(1:70)|71))(1:54)|55|73|(0)(0)|79|(0)(0)|83|(0)(0)|431|103|104|428|105|(0)(0)|(0)(0)|117|(0)) */
    /* JADX WARN: Code restructure failed: missing block: B:115:0x038e, code lost:
        r0 = move-exception;
     */
    /* JADX WARN: Code restructure failed: missing block: B:116:0x038f, code lost:
        org.telegram.messenger.FileLog.e(r0);
     */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:102:0x02fa  */
    /* JADX WARN: Removed duplicated region for block: B:107:0x032f A[Catch: Exception -> 0x038e, TryCatch #1 {Exception -> 0x038e, blocks: (B:105:0x030c, B:107:0x032f, B:109:0x0343, B:110:0x034e, B:111:0x0357, B:113:0x035b, B:114:0x038a), top: B:428:0x030c }] */
    /* JADX WARN: Removed duplicated region for block: B:111:0x0357 A[Catch: Exception -> 0x038e, TryCatch #1 {Exception -> 0x038e, blocks: (B:105:0x030c, B:107:0x032f, B:109:0x0343, B:110:0x034e, B:111:0x0357, B:113:0x035b, B:114:0x038a), top: B:428:0x030c }] */
    /* JADX WARN: Removed duplicated region for block: B:113:0x035b A[Catch: Exception -> 0x038e, TryCatch #1 {Exception -> 0x038e, blocks: (B:105:0x030c, B:107:0x032f, B:109:0x0343, B:110:0x034e, B:111:0x0357, B:113:0x035b, B:114:0x038a), top: B:428:0x030c }] */
    /* JADX WARN: Removed duplicated region for block: B:114:0x038a A[Catch: Exception -> 0x038e, TRY_LEAVE, TryCatch #1 {Exception -> 0x038e, blocks: (B:105:0x030c, B:107:0x032f, B:109:0x0343, B:110:0x034e, B:111:0x0357, B:113:0x035b, B:114:0x038a), top: B:428:0x030c }] */
    /* JADX WARN: Removed duplicated region for block: B:119:0x039b  */
    /* JADX WARN: Removed duplicated region for block: B:75:0x01e0  */
    /* JADX WARN: Removed duplicated region for block: B:76:0x01e3  */
    /* JADX WARN: Removed duplicated region for block: B:81:0x0200  */
    /* JADX WARN: Removed duplicated region for block: B:82:0x0203  */
    /* JADX WARN: Removed duplicated region for block: B:85:0x020e  */
    /* JADX WARN: Type inference failed for: r0v17, types: [android.text.SpannableStringBuilder, java.lang.CharSequence] */
    /* JADX WARN: Type inference failed for: r0v18 */
    /* JADX WARN: Type inference failed for: r0v3, types: [android.text.StaticLayout[]] */
    /* JADX WARN: Type inference failed for: r0v35, types: [java.lang.CharSequence] */
    /* JADX WARN: Type inference failed for: r10v1, types: [java.lang.CharSequence, java.lang.String] */
    /* JADX WARN: Type inference failed for: r10v2, types: [java.lang.CharSequence] */
    /* JADX WARN: Type inference failed for: r10v4 */
    /* JADX WARN: Type inference failed for: r10v6, types: [java.lang.CharSequence] */
    /* JADX WARN: Type inference failed for: r10v7, types: [java.lang.CharSequence] */
    /* JADX WARN: Type inference failed for: r4v1, types: [org.telegram.tgnet.TLRPC$Chat, org.telegram.tgnet.TLRPC$User, java.lang.String] */
    /* JADX WARN: Type inference failed for: r4v101 */
    /* JADX WARN: Type inference failed for: r4v105 */
    /* JADX WARN: Type inference failed for: r4v158, types: [java.lang.String] */
    /* JADX WARN: Type inference failed for: r4v160 */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void setMessageObjectInternal(MessageObject messageObject) {
        SpannableStringBuilder spannableStringBuilder;
        String str;
        String str2;
        String str3;
        ?? r4;
        String str4;
        CharSequence charSequence;
        int i;
        TextStyleSpan[] textStyleSpanArr;
        int i2;
        TLRPC$PhotoSize tLRPC$PhotoSize;
        int i3;
        String str5;
        CharSequence charSequence2;
        MessageObject messageObject2;
        TLRPC$Message tLRPC$Message;
        int i4;
        MessageObject messageObject3;
        MessageObject.GroupedMessagePosition groupedMessagePosition;
        String str6;
        SpannableStringBuilder spannableStringBuilder2;
        String str7;
        String str8;
        int i5;
        String str9;
        StaticLayout staticLayout;
        int themedColor;
        SpannableStringBuilder spannableStringBuilder3;
        String str10;
        ChatMessageCellDelegate chatMessageCellDelegate;
        TLRPC$Chat tLRPC$Chat;
        TLRPC$Message tLRPC$Message2 = messageObject.messageOwner;
        if ((tLRPC$Message2.flags & 1024) != 0 || tLRPC$Message2.replies != null) {
            MessageObject messageObject4 = this.currentMessageObject;
            if (!messageObject4.scheduled && !messageObject4.isSponsored() && !this.currentMessageObject.viewsReloaded) {
                MessagesController.getInstance(this.currentAccount).addToViewsQueue(this.currentMessageObject);
                this.currentMessageObject.viewsReloaded = true;
            }
        }
        updateCurrentUserAndChat();
        setAvatar(messageObject);
        measureTime(messageObject);
        this.namesOffset = 0;
        TLRPC$Message tLRPC$Message3 = messageObject.messageOwner;
        if (tLRPC$Message3.via_bot_id != 0) {
            TLRPC$User user = MessagesController.getInstance(this.currentAccount).getUser(Long.valueOf(messageObject.messageOwner.via_bot_id));
            if (user != null && !TextUtils.isEmpty(user.username)) {
                str = "@" + user.username;
                spannableStringBuilder = AndroidUtilities.replaceTags(String.format(" %s <b>%s</b>", LocaleController.getString("ViaBot", R.string.ViaBot), str));
                this.viaWidth = (int) Math.ceil(Theme.chat_replyNamePaint.measureText(spannableStringBuilder, 0, spannableStringBuilder.length()));
                this.currentViaBotUser = user;
            }
            str = null;
            spannableStringBuilder = null;
        } else {
            if (!TextUtils.isEmpty(tLRPC$Message3.via_bot_name)) {
                str = "@" + messageObject.messageOwner.via_bot_name;
                spannableStringBuilder = AndroidUtilities.replaceTags(String.format(" %s <b>%s</b>", LocaleController.getString("ViaBot", R.string.ViaBot), str));
                this.viaWidth = (int) Math.ceil(Theme.chat_replyNamePaint.measureText(spannableStringBuilder, 0, spannableStringBuilder.length()));
            }
            str = null;
            spannableStringBuilder = null;
        }
        boolean isNeedAuthorName = isNeedAuthorName();
        boolean z = (messageObject.messageOwner.fwd_from == null || messageObject.type == 14) && str != null;
        ?? r10 = "";
        if (!this.hasPsaHint && (isNeedAuthorName || z)) {
            this.drawNameLayout = true;
            int maxNameWidth = getMaxNameWidth();
            this.nameWidth = maxNameWidth;
            if (maxNameWidth < 0) {
                this.nameWidth = AndroidUtilities.dp(100.0f);
            }
            if (!this.isMegagroup || (tLRPC$Chat = this.currentChat) == null || messageObject.messageOwner.post_author == null) {
                str2 = str;
                str8 = "ViaBot";
            } else {
                str2 = str;
                str8 = "ViaBot";
                if (tLRPC$Chat.id == (-this.currentMessageObject.getFromChatId())) {
                    str10 = messageObject.messageOwner.post_author.replace("\n", r10);
                    i5 = (int) Math.ceil(Theme.chat_adminPaint.measureText(str10));
                    this.nameWidth -= i5;
                    str7 = str10;
                    str9 = messageObject.customName;
                    if (str9 != null) {
                        this.currentNameString = str9;
                    } else if (isNeedAuthorName) {
                        this.currentNameString = getAuthorName();
                    } else {
                        this.currentNameString = r10;
                    }
                    CharSequence ellipsize = TextUtils.ellipsize(this.currentNameString.replace('\n', ' ').replace((char) 8207, ' '), Theme.chat_namePaint, this.nameWidth - (z ? this.viaWidth : 0), TextUtils.TruncateAt.END);
                    if (z) {
                        int ceil = (int) Math.ceil(Theme.chat_namePaint.measureText(ellipsize, 0, ellipsize.length()));
                        this.viaNameWidth = ceil;
                        if (ceil != 0) {
                            this.viaNameWidth = ceil + AndroidUtilities.dp(4.0f);
                        }
                        if (this.currentMessageObject.shouldDrawWithoutBackground()) {
                            themedColor = getThemedColor("chat_stickerViaBotNameText");
                        } else {
                            themedColor = getThemedColor(this.currentMessageObject.isOutOwner() ? "chat_outViaBotNameText" : "chat_inViaBotNameText");
                        }
                        str3 = str8;
                        String string = LocaleController.getString(str3, R.string.ViaBot);
                        if (this.currentNameString.length() > 0) {
                            SpannableStringBuilder spannableStringBuilder4 = new SpannableStringBuilder(String.format("%s %s %s", ellipsize, string, str2));
                            TypefaceSpan typefaceSpan = new TypefaceSpan(Typeface.DEFAULT, 0, themedColor);
                            this.viaSpan1 = typefaceSpan;
                            spannableStringBuilder4.setSpan(typefaceSpan, ellipsize.length() + 1, ellipsize.length() + 1 + string.length(), 33);
                            TypefaceSpan typefaceSpan2 = new TypefaceSpan(AndroidUtilities.getTypeface(AndroidUtilities.TYPEFACE_ROBOTO_MEDIUM), 0, themedColor);
                            this.viaSpan2 = typefaceSpan2;
                            spannableStringBuilder4.setSpan(typefaceSpan2, ellipsize.length() + 2 + string.length(), spannableStringBuilder4.length(), 33);
                            spannableStringBuilder3 = spannableStringBuilder4;
                        } else {
                            SpannableStringBuilder spannableStringBuilder5 = new SpannableStringBuilder(String.format("%s %s", string, str2));
                            TypefaceSpan typefaceSpan3 = new TypefaceSpan(Typeface.DEFAULT, 0, themedColor);
                            this.viaSpan1 = typefaceSpan3;
                            spannableStringBuilder5.setSpan(typefaceSpan3, 0, string.length() + 1, 33);
                            TypefaceSpan typefaceSpan4 = new TypefaceSpan(AndroidUtilities.getTypeface(AndroidUtilities.TYPEFACE_ROBOTO_MEDIUM), 0, themedColor);
                            this.viaSpan2 = typefaceSpan4;
                            spannableStringBuilder5.setSpan(typefaceSpan4, string.length() + 1, spannableStringBuilder5.length(), 33);
                            spannableStringBuilder3 = spannableStringBuilder5;
                        }
                        ellipsize = TextUtils.ellipsize(spannableStringBuilder3, Theme.chat_namePaint, this.nameWidth, TextUtils.TruncateAt.END);
                    } else {
                        str3 = str8;
                    }
                    ellipsize = Emoji.replaceEmoji(ellipsize, Theme.chat_namePaint.getFontMetricsInt(), AndroidUtilities.dp(14.0f), false);
                    staticLayout = new StaticLayout(ellipsize, Theme.chat_namePaint, this.nameWidth + AndroidUtilities.dp(2.0f), Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
                    this.nameLayout = staticLayout;
                    if (staticLayout.getLineCount() > 0) {
                        this.nameWidth = (int) Math.ceil(this.nameLayout.getLineWidth(0));
                        if (!messageObject.isAnyKindOfSticker()) {
                            this.namesOffset += AndroidUtilities.dp(19.0f);
                        }
                        this.nameOffsetX = this.nameLayout.getLineLeft(0);
                    } else {
                        this.nameWidth = 0;
                    }
                    if (str7 != null) {
                        StaticLayout staticLayout2 = new StaticLayout(str7, Theme.chat_adminPaint, i5 + AndroidUtilities.dp(2.0f), Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
                        this.adminLayout = staticLayout2;
                        this.nameWidth = (int) (this.nameWidth + staticLayout2.getLineWidth(0) + AndroidUtilities.dp(8.0f));
                    } else {
                        this.adminLayout = null;
                    }
                    r4 = 0;
                    r4 = 0;
                    if (this.currentNameString.length() == 0) {
                        this.currentNameString = null;
                    }
                }
            }
            if (this.isMegagroup && this.currentChat != null && this.currentMessageObject.isForwardedChannelPost()) {
                str10 = LocaleController.getString("DiscussChannel", R.string.DiscussChannel);
                i5 = (int) Math.ceil(Theme.chat_adminPaint.measureText(str10));
                this.nameWidth -= i5;
            } else if (this.currentUser != null && !this.currentMessageObject.isOutOwner() && !this.currentMessageObject.isAnyKindOfSticker() && this.currentMessageObject.type != 5 && (chatMessageCellDelegate = this.delegate) != null && (str10 = chatMessageCellDelegate.getAdminRank(this.currentUser.id)) != null) {
                if (str10.length() == 0) {
                    str10 = LocaleController.getString("ChatAdmin", R.string.ChatAdmin);
                }
                i5 = (int) Math.ceil(Theme.chat_adminPaint.measureText(str10));
                this.nameWidth -= i5;
            } else {
                i5 = 0;
                str7 = null;
                str9 = messageObject.customName;
                if (str9 != null) {
                }
                CharSequence ellipsize2 = TextUtils.ellipsize(this.currentNameString.replace('\n', ' ').replace((char) 8207, ' '), Theme.chat_namePaint, this.nameWidth - (z ? this.viaWidth : 0), TextUtils.TruncateAt.END);
                if (z) {
                }
                ellipsize2 = Emoji.replaceEmoji(ellipsize2, Theme.chat_namePaint.getFontMetricsInt(), AndroidUtilities.dp(14.0f), false);
                staticLayout = new StaticLayout(ellipsize2, Theme.chat_namePaint, this.nameWidth + AndroidUtilities.dp(2.0f), Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
                this.nameLayout = staticLayout;
                if (staticLayout.getLineCount() > 0) {
                }
                if (str7 != null) {
                }
                r4 = 0;
                r4 = 0;
                if (this.currentNameString.length() == 0) {
                }
            }
            str7 = str10;
            str9 = messageObject.customName;
            if (str9 != null) {
            }
            CharSequence ellipsize22 = TextUtils.ellipsize(this.currentNameString.replace('\n', ' ').replace((char) 8207, ' '), Theme.chat_namePaint, this.nameWidth - (z ? this.viaWidth : 0), TextUtils.TruncateAt.END);
            if (z) {
            }
            ellipsize22 = Emoji.replaceEmoji(ellipsize22, Theme.chat_namePaint.getFontMetricsInt(), AndroidUtilities.dp(14.0f), false);
            staticLayout = new StaticLayout(ellipsize22, Theme.chat_namePaint, this.nameWidth + AndroidUtilities.dp(2.0f), Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
            this.nameLayout = staticLayout;
            if (staticLayout.getLineCount() > 0) {
            }
            if (str7 != null) {
            }
            r4 = 0;
            r4 = 0;
            if (this.currentNameString.length() == 0) {
            }
        } else {
            str2 = str;
            str3 = "ViaBot";
            r4 = 0;
            this.currentNameString = null;
            this.nameLayout = null;
            this.nameWidth = 0;
        }
        this.currentForwardUser = r4;
        this.currentForwardNameString = r4;
        this.currentForwardChannel = r4;
        this.currentForwardName = r4;
        ?? r0 = this.forwardedNameLayout;
        r0[0] = r4;
        r0[1] = r4;
        this.replyPanelIsForward = false;
        this.forwardedNameWidth = 0;
        if (messageObject.isForwarded()) {
            TLRPC$Peer tLRPC$Peer = messageObject.messageOwner.fwd_from.from_id;
            if (tLRPC$Peer instanceof TLRPC$TL_peerChannel) {
                this.currentForwardChannel = MessagesController.getInstance(this.currentAccount).getChat(Long.valueOf(messageObject.messageOwner.fwd_from.from_id.channel_id));
            } else if (tLRPC$Peer instanceof TLRPC$TL_peerChat) {
                this.currentForwardChannel = MessagesController.getInstance(this.currentAccount).getChat(Long.valueOf(messageObject.messageOwner.fwd_from.from_id.chat_id));
            } else if (tLRPC$Peer instanceof TLRPC$TL_peerUser) {
                this.currentForwardUser = MessagesController.getInstance(this.currentAccount).getUser(Long.valueOf(messageObject.messageOwner.fwd_from.from_id.user_id));
            }
        }
        if (this.drawForwardedName && messageObject.needDrawForwarded() && ((groupedMessagePosition = this.currentPosition) == null || groupedMessagePosition.minY == 0)) {
            TLRPC$MessageFwdHeader tLRPC$MessageFwdHeader = messageObject.messageOwner.fwd_from;
            String str11 = tLRPC$MessageFwdHeader.from_name;
            if (str11 != null) {
                this.currentForwardName = str11;
            }
            TLRPC$User tLRPC$User = this.currentForwardUser;
            if (tLRPC$User != null || this.currentForwardChannel != null || this.currentForwardName != null) {
                TLRPC$Chat tLRPC$Chat2 = this.currentForwardChannel;
                if (tLRPC$Chat2 != null) {
                    if (tLRPC$User != null) {
                        this.currentForwardNameString = String.format("%s (%s)", tLRPC$Chat2.title, UserObject.getUserName(tLRPC$User));
                    } else if (!TextUtils.isEmpty(tLRPC$MessageFwdHeader.post_author)) {
                        this.currentForwardNameString = String.format("%s (%s)", this.currentForwardChannel.title, messageObject.messageOwner.fwd_from.post_author);
                    } else {
                        this.currentForwardNameString = this.currentForwardChannel.title;
                    }
                } else if (tLRPC$User != null) {
                    this.currentForwardNameString = UserObject.getUserName(tLRPC$User);
                } else {
                    this.currentForwardNameString = this.currentForwardName;
                }
                this.forwardedNameWidth = getMaxNameWidth();
                String forwardedMessageText = getForwardedMessageText(messageObject);
                if (this.hasPsaHint) {
                    this.forwardedNameWidth -= AndroidUtilities.dp(36.0f);
                }
                String string2 = LocaleController.getString("From", R.string.From);
                String string3 = LocaleController.getString("FromFormatted", R.string.FromFormatted);
                int indexOf = string3.indexOf("%1$s");
                TextPaint textPaint = Theme.chat_forwardNamePaint;
                int ceil2 = (int) Math.ceil(textPaint.measureText(string2 + " "));
                CharSequence ellipsize3 = TextUtils.ellipsize(this.currentForwardNameString.replace('\n', ' '), Theme.chat_replyNamePaint, (float) ((this.forwardedNameWidth - ceil2) - this.viaWidth), TextUtils.TruncateAt.END);
                try {
                    str6 = String.format(string3, ellipsize3);
                } catch (Exception unused) {
                    str6 = ellipsize3.toString();
                }
                if (spannableStringBuilder != null) {
                    spannableStringBuilder2 = new SpannableStringBuilder(String.format("%s %s %s", str6, LocaleController.getString(str3, R.string.ViaBot), str2));
                    this.viaNameWidth = (int) Math.ceil(Theme.chat_forwardNamePaint.measureText(str6));
                    spannableStringBuilder2.setSpan(new TypefaceSpan(AndroidUtilities.getTypeface(AndroidUtilities.TYPEFACE_ROBOTO_MEDIUM)), (spannableStringBuilder2.length() - str2.length()) - 1, spannableStringBuilder2.length(), 33);
                } else {
                    spannableStringBuilder2 = new SpannableStringBuilder(String.format(string3, ellipsize3));
                }
                this.forwardNameCenterX = ceil2 + (((int) Math.ceil(Theme.chat_forwardNamePaint.measureText(ellipsize3, 0, ellipsize3.length()))) / 2);
                if (indexOf >= 0 && (this.currentForwardName == null || messageObject.messageOwner.fwd_from.from_id != null)) {
                    spannableStringBuilder2.setSpan(new TypefaceSpan(AndroidUtilities.getTypeface(AndroidUtilities.TYPEFACE_ROBOTO_MEDIUM)), indexOf, ellipsize3.length() + indexOf, 33);
                }
                CharSequence ellipsize4 = TextUtils.ellipsize(spannableStringBuilder2, Theme.chat_forwardNamePaint, this.forwardedNameWidth, TextUtils.TruncateAt.END);
                try {
                    ellipsize4 = Emoji.replaceEmoji(ellipsize4, Theme.chat_forwardNamePaint.getFontMetricsInt(), AndroidUtilities.dp(14.0f), false);
                } catch (Exception unused2) {
                }
                try {
                    this.forwardedNameLayout[1] = new StaticLayout(ellipsize4, Theme.chat_forwardNamePaint, this.forwardedNameWidth + AndroidUtilities.dp(2.0f), Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
                    this.forwardedNameLayout[0] = new StaticLayout(TextUtils.ellipsize(AndroidUtilities.replaceTags(forwardedMessageText), Theme.chat_forwardNamePaint, this.forwardedNameWidth, TextUtils.TruncateAt.END), Theme.chat_forwardNamePaint, this.forwardedNameWidth + AndroidUtilities.dp(2.0f), Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
                    int max = Math.max((int) Math.ceil(this.forwardedNameLayout[0].getLineWidth(0)), (int) Math.ceil(this.forwardedNameLayout[1].getLineWidth(0)));
                    this.forwardedNameWidth = max;
                    if (this.hasPsaHint) {
                        this.forwardedNameWidth = max + AndroidUtilities.dp(36.0f);
                    }
                    this.forwardNameOffsetX[0] = this.forwardedNameLayout[0].getLineLeft(0);
                    this.forwardNameOffsetX[1] = this.forwardedNameLayout[1].getLineLeft(0);
                    if (messageObject.type != 5 && !messageObject.isAnyKindOfSticker()) {
                        this.namesOffset += AndroidUtilities.dp(36.0f);
                    }
                } catch (Exception e) {
                    FileLog.e(e);
                }
            }
        }
        if (((!this.isThreadChat || messageObject.getReplyTopMsgId() != 0) && messageObject.hasValidReplyMessageObject()) || (messageObject.messageOwner.fwd_from != null && messageObject.isDice())) {
            MessageObject.GroupedMessagePosition groupedMessagePosition2 = this.currentPosition;
            if (groupedMessagePosition2 == null || groupedMessagePosition2.minY == 0) {
                if (!messageObject.isAnyKindOfSticker() && messageObject.type != 5) {
                    int dp = this.namesOffset + AndroidUtilities.dp(42.0f);
                    this.namesOffset = dp;
                    if (messageObject.type != 0) {
                        this.namesOffset = dp + AndroidUtilities.dp(5.0f);
                    }
                }
                int maxNameWidth2 = getMaxNameWidth();
                if (!messageObject.shouldDrawWithoutBackground()) {
                    maxNameWidth2 -= AndroidUtilities.dp(10.0f);
                } else if (messageObject.type == 5) {
                    maxNameWidth2 += AndroidUtilities.dp(13.0f);
                }
                if ((!this.isThreadChat || messageObject.getReplyTopMsgId() != 0) && messageObject.hasValidReplyMessageObject()) {
                    MessageObject messageObject5 = messageObject.replyMessageObject;
                    this.lastReplyMessage = messageObject5.messageOwner;
                    TLRPC$PhotoSize closestPhotoSizeWithSize = FileLoader.getClosestPhotoSizeWithSize(messageObject5.photoThumbs2, 320);
                    TLRPC$PhotoSize closestPhotoSizeWithSize2 = FileLoader.getClosestPhotoSizeWithSize(messageObject.replyMessageObject.photoThumbs2, 40);
                    MessageObject messageObject6 = messageObject.replyMessageObject;
                    TLObject tLObject = messageObject6.photoThumbsObject2;
                    if (closestPhotoSizeWithSize == null) {
                        if (messageObject6.mediaExists) {
                            closestPhotoSizeWithSize = FileLoader.getClosestPhotoSizeWithSize(messageObject6.photoThumbs, AndroidUtilities.getPhotoSize());
                            i3 = closestPhotoSizeWithSize != null ? closestPhotoSizeWithSize.size : 0;
                            i4 = 0;
                        } else {
                            closestPhotoSizeWithSize = FileLoader.getClosestPhotoSizeWithSize(messageObject6.photoThumbs, 320);
                            i3 = 0;
                            i4 = 1;
                        }
                        i2 = i4;
                        tLRPC$PhotoSize = FileLoader.getClosestPhotoSizeWithSize(messageObject.replyMessageObject.photoThumbs, 40);
                        tLObject = messageObject.replyMessageObject.photoThumbsObject;
                    } else {
                        tLRPC$PhotoSize = closestPhotoSizeWithSize2;
                        i3 = 0;
                        i2 = 1;
                    }
                    if (tLRPC$PhotoSize == closestPhotoSizeWithSize) {
                        tLRPC$PhotoSize = null;
                    }
                    if (closestPhotoSizeWithSize == null || messageObject.replyMessageObject.isAnyKindOfSticker() || ((messageObject.isAnyKindOfSticker() && !AndroidUtilities.isTablet()) || messageObject.replyMessageObject.isSecretMedia() || messageObject.replyMessageObject.isWebpageDocument())) {
                        this.replyImageReceiver.setImageBitmap((Drawable) null);
                        this.needReplyImage = false;
                    } else {
                        if (messageObject.replyMessageObject.isRoundVideo()) {
                            this.replyImageReceiver.setRoundRadius(AndroidUtilities.dp(22.0f));
                        } else {
                            this.replyImageReceiver.setRoundRadius(AndroidUtilities.dp(2.0f));
                        }
                        this.currentReplyPhoto = closestPhotoSizeWithSize;
                        this.replyImageReceiver.setImage(ImageLocation.getForObject(closestPhotoSizeWithSize, tLObject), "50_50", ImageLocation.getForObject(tLRPC$PhotoSize, tLObject), "50_50_b", i3, null, messageObject.replyMessageObject, i2);
                        this.needReplyImage = true;
                        maxNameWidth2 -= AndroidUtilities.dp(44.0f);
                    }
                    if (messageObject.hideSendersName) {
                        TLRPC$Peer tLRPC$Peer2 = messageObject.sendAsPeer;
                        if (tLRPC$Peer2 != null) {
                            if (tLRPC$Peer2.channel_id != 0) {
                                TLRPC$Chat chat = MessagesController.getInstance(this.currentAccount).getChat(Long.valueOf(messageObject.sendAsPeer.channel_id));
                                str5 = chat != null ? chat.title : null;
                            } else {
                                str5 = UserObject.getUserName(MessagesController.getInstance(this.currentAccount).getUser(Long.valueOf(messageObject.sendAsPeer.user_id)));
                            }
                        } else {
                            str5 = UserObject.getUserName(AccountInstance.getInstance(this.currentAccount).getUserConfig().getCurrentUser());
                        }
                    } else {
                        str5 = messageObject.customReplyName;
                        if (str5 == null && (str5 = messageObject.replyMessageObject.getForwardedName()) == null) {
                            long fromChatId = messageObject.replyMessageObject.getFromChatId();
                            if (fromChatId > 0) {
                                TLRPC$User user2 = MessagesController.getInstance(this.currentAccount).getUser(Long.valueOf(fromChatId));
                                if (user2 != null) {
                                    str5 = UserObject.getUserName(user2);
                                }
                            } else if (fromChatId < 0) {
                                TLRPC$Chat chat2 = MessagesController.getInstance(this.currentAccount).getChat(Long.valueOf(-fromChatId));
                                if (chat2 != null) {
                                    str5 = chat2.title;
                                }
                            } else {
                                TLRPC$Chat chat3 = MessagesController.getInstance(this.currentAccount).getChat(Long.valueOf(messageObject.replyMessageObject.messageOwner.peer_id.channel_id));
                                if (chat3 != null) {
                                    str5 = chat3.title;
                                }
                            }
                        }
                    }
                    if (str5 == null) {
                        str5 = LocaleController.getString("Loading", R.string.Loading);
                    }
                    MessageObject messageObject7 = messageObject.replyMessageObject;
                    TLRPC$MessageMedia tLRPC$MessageMedia = messageObject7.messageOwner.media;
                    if (tLRPC$MessageMedia instanceof TLRPC$TL_messageMediaGame) {
                        charSequence2 = TextUtils.ellipsize(Emoji.replaceEmoji(tLRPC$MessageMedia.game.title, Theme.chat_replyTextPaint.getFontMetricsInt(), AndroidUtilities.dp(14.0f), false), Theme.chat_replyTextPaint, maxNameWidth2, TextUtils.TruncateAt.END);
                    } else if (tLRPC$MessageMedia instanceof TLRPC$TL_messageMediaInvoice) {
                        charSequence2 = TextUtils.ellipsize(Emoji.replaceEmoji(tLRPC$MessageMedia.title, Theme.chat_replyTextPaint.getFontMetricsInt(), AndroidUtilities.dp(14.0f), false), Theme.chat_replyTextPaint, maxNameWidth2, TextUtils.TruncateAt.END);
                    } else if (!TextUtils.isEmpty(messageObject7.caption)) {
                        String charSequence3 = messageObject.replyMessageObject.caption.toString();
                        if (charSequence3.length() > 150) {
                            charSequence3 = charSequence3.substring(0, ImageReceiver.DEFAULT_CROSSFADE_DURATION);
                        }
                        CharSequence replaceEmoji = Emoji.replaceEmoji(charSequence3.replace('\n', ' '), Theme.chat_replyTextPaint.getFontMetricsInt(), AndroidUtilities.dp(14.0f), false);
                        TLRPC$Message tLRPC$Message4 = messageObject.replyMessageObject.messageOwner;
                        if (tLRPC$Message4 != null) {
                            replaceEmoji = MessageObject.replaceAnimatedEmoji(replaceEmoji, tLRPC$Message4.entities, Theme.chat_replyTextPaint.getFontMetricsInt());
                        }
                        charSequence2 = TextUtils.ellipsize(replaceEmoji, Theme.chat_replyTextPaint, maxNameWidth2, TextUtils.TruncateAt.END);
                        if ((charSequence2 instanceof Spannable) && (tLRPC$Message = (messageObject2 = messageObject.replyMessageObject).messageOwner) != null) {
                            MediaDataController.addTextStyleRuns(tLRPC$Message.entities, messageObject2.caption, (Spannable) charSequence2);
                        }
                    } else {
                        CharSequence charSequence4 = messageObject.replyMessageObject.messageText;
                        if (charSequence4 == null || charSequence4.length() <= 0) {
                            charSequence2 = null;
                        } else {
                            String charSequence5 = messageObject.replyMessageObject.messageText.toString();
                            if (charSequence5.length() > 150) {
                                charSequence5 = charSequence5.substring(0, ImageReceiver.DEFAULT_CROSSFADE_DURATION);
                            }
                            CharSequence replaceEmoji2 = Emoji.replaceEmoji(charSequence5.replace('\n', ' '), Theme.chat_replyTextPaint.getFontMetricsInt(), AndroidUtilities.dp(14.0f), false);
                            TLRPC$Message tLRPC$Message5 = messageObject.replyMessageObject.messageOwner;
                            if (tLRPC$Message5 != null) {
                                replaceEmoji2 = MessageObject.replaceAnimatedEmoji(replaceEmoji2, tLRPC$Message5.entities, Theme.chat_replyTextPaint.getFontMetricsInt());
                            }
                            charSequence2 = TextUtils.ellipsize(replaceEmoji2, Theme.chat_replyTextPaint, maxNameWidth2, TextUtils.TruncateAt.END);
                            if (charSequence2 instanceof Spannable) {
                                MediaDataController.addTextStyleRuns(messageObject.replyMessageObject, (Spannable) charSequence2);
                            }
                        }
                    }
                    i = maxNameWidth2;
                    charSequence = charSequence2;
                    str4 = str5;
                } else {
                    charSequence = null;
                    this.replyImageReceiver.setImageBitmap((Drawable) null);
                    this.needReplyImage = false;
                    this.replyPanelIsForward = true;
                    TLRPC$Peer tLRPC$Peer3 = messageObject.messageOwner.fwd_from.from_id;
                    if (tLRPC$Peer3 instanceof TLRPC$TL_peerChannel) {
                        this.currentForwardChannel = MessagesController.getInstance(this.currentAccount).getChat(Long.valueOf(messageObject.messageOwner.fwd_from.from_id.channel_id));
                    } else if (tLRPC$Peer3 instanceof TLRPC$TL_peerChat) {
                        this.currentForwardChannel = MessagesController.getInstance(this.currentAccount).getChat(Long.valueOf(messageObject.messageOwner.fwd_from.from_id.chat_id));
                    } else if (tLRPC$Peer3 instanceof TLRPC$TL_peerUser) {
                        this.currentForwardUser = MessagesController.getInstance(this.currentAccount).getUser(Long.valueOf(messageObject.messageOwner.fwd_from.from_id.user_id));
                    }
                    String str12 = messageObject.messageOwner.fwd_from.from_name;
                    if (str12 != null) {
                        this.currentForwardName = str12;
                    }
                    TLRPC$User tLRPC$User2 = this.currentForwardUser;
                    if (tLRPC$User2 == null && this.currentForwardChannel == null && this.currentForwardName == null) {
                        i = maxNameWidth2;
                        str4 = null;
                    } else {
                        TLRPC$Chat tLRPC$Chat3 = this.currentForwardChannel;
                        if (tLRPC$Chat3 != null) {
                            if (tLRPC$User2 != null) {
                                this.currentForwardNameString = String.format("%s (%s)", tLRPC$Chat3.title, UserObject.getUserName(tLRPC$User2));
                            } else {
                                this.currentForwardNameString = tLRPC$Chat3.title;
                            }
                        } else if (tLRPC$User2 != null) {
                            this.currentForwardNameString = UserObject.getUserName(tLRPC$User2);
                        } else {
                            this.currentForwardNameString = this.currentForwardName;
                        }
                        str4 = getForwardedMessageText(messageObject);
                        String string4 = LocaleController.getString("From", R.string.From);
                        String string5 = LocaleController.getString("FromFormatted", R.string.FromFormatted);
                        int indexOf2 = string5.indexOf("%1$s");
                        TextPaint textPaint2 = Theme.chat_replyNamePaint;
                        int ceil3 = (int) Math.ceil(textPaint2.measureText(string4 + " "));
                        String str13 = this.currentForwardNameString;
                        CharSequence ellipsize5 = TextUtils.ellipsize(str13 == null ? r10 : str13.replace('\n', ' '), Theme.chat_replyNamePaint, maxNameWidth2 - ceil3, TextUtils.TruncateAt.END);
                        SpannableStringBuilder spannableStringBuilder6 = new SpannableStringBuilder(String.format(string5, ellipsize5));
                        if (indexOf2 >= 0 && (this.currentForwardName == null || messageObject.messageOwner.fwd_from.from_id != null)) {
                            spannableStringBuilder6.setSpan(new TypefaceSpan(AndroidUtilities.getTypeface(AndroidUtilities.TYPEFACE_ROBOTO_MEDIUM)), indexOf2, ellipsize5.length() + indexOf2, 33);
                        }
                        CharSequence ellipsize6 = TextUtils.ellipsize(spannableStringBuilder6, Theme.chat_replyTextPaint, maxNameWidth2, TextUtils.TruncateAt.END);
                        this.forwardNameCenterX = ceil3 + (((int) Math.ceil(Theme.chat_replyNamePaint.measureText(ellipsize5, 0, ellipsize5.length()))) / 2);
                        charSequence = ellipsize6;
                        i = maxNameWidth2;
                    }
                }
                if (str4 != null) {
                    r10 = TextUtils.ellipsize(str4.replace('\n', ' '), Theme.chat_replyNamePaint, i, TextUtils.TruncateAt.END);
                }
                try {
                    r10 = Emoji.replaceEmoji(r10, Theme.chat_replyNamePaint.getFontMetricsInt(), AndroidUtilities.dp(14.0f), false);
                } catch (Exception unused3) {
                }
                CharSequence charSequence6 = r10;
                try {
                    this.replyNameWidth = AndroidUtilities.dp((this.needReplyImage ? 44 : 0) + 4);
                    if (charSequence6 != null) {
                        StaticLayout staticLayout3 = new StaticLayout(charSequence6, Theme.chat_replyNamePaint, i + AndroidUtilities.dp(6.0f), Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
                        this.replyNameLayout = staticLayout3;
                        if (staticLayout3.getLineCount() > 0) {
                            this.replyNameWidth += ((int) Math.ceil(this.replyNameLayout.getLineWidth(0))) + AndroidUtilities.dp(8.0f);
                            this.replyNameOffset = (int) this.replyNameLayout.getLineLeft(0);
                        }
                    }
                } catch (Exception e2) {
                    FileLog.e(e2);
                }
                try {
                    this.replyTextWidth = AndroidUtilities.dp((this.needReplyImage ? 44 : 0) + 4);
                    if (charSequence != null) {
                        ?? spannableStringBuilder7 = new SpannableStringBuilder(charSequence);
                        boolean z2 = false;
                        for (TextStyleSpan textStyleSpan : (TextStyleSpan[]) spannableStringBuilder7.getSpans(0, spannableStringBuilder7.length(), TextStyleSpan.class)) {
                            if ((textStyleSpan.getTextStyleRun().flags & 4) != 0) {
                                spannableStringBuilder7.removeSpan(textStyleSpan);
                                z2 = true;
                            }
                        }
                        if (z2) {
                            spannableStringBuilder7 = TextUtils.ellipsize(spannableStringBuilder7, Theme.chat_replyTextPaint, i, TextUtils.TruncateAt.END);
                        }
                        StaticLayout staticLayout4 = new StaticLayout(spannableStringBuilder7, Theme.chat_replyTextPaint, i + AndroidUtilities.dp(10.0f), Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
                        this.replyTextLayout = staticLayout4;
                        if (staticLayout4.getLineCount() > 0) {
                            this.replyTextWidth += ((int) Math.ceil(this.replyTextLayout.getLineWidth(0))) + AndroidUtilities.dp(8.0f);
                            this.replyTextOffset = (int) this.replyTextLayout.getLineLeft(0);
                        }
                        this.replySpoilers.clear();
                        if (getMessageObject().replyMessageObject != null && !getMessageObject().replyMessageObject.isSpoilersRevealed) {
                            SpoilerEffect.addSpoilers(this, this.replyTextLayout, this.replySpoilersPool, this.replySpoilers);
                        }
                        this.animatedEmojiReplyStack = AnimatedEmojiSpan.update(0, (View) this, false, this.animatedEmojiReplyStack, this.replyTextLayout);
                    }
                } catch (Exception e3) {
                    FileLog.e(e3);
                }
            }
        } else if (!this.isThreadChat && messageObject.getReplyMsgId() != 0 && ((messageObject3 = messageObject.replyMessageObject) == null || !(messageObject3.messageOwner instanceof TLRPC$TL_messageEmpty))) {
            if (!messageObject.isAnyKindOfSticker() && messageObject.type != 5) {
                int dp2 = this.namesOffset + AndroidUtilities.dp(42.0f);
                this.namesOffset = dp2;
                if (messageObject.type != 0) {
                    this.namesOffset = dp2 + AndroidUtilities.dp(5.0f);
                }
            }
            this.needReplyImage = false;
            int maxNameWidth3 = getMaxNameWidth();
            if (!messageObject.shouldDrawWithoutBackground()) {
                maxNameWidth3 -= AndroidUtilities.dp(10.0f);
            } else if (messageObject.type == 5) {
                maxNameWidth3 += AndroidUtilities.dp(13.0f);
            }
            StaticLayout staticLayout5 = new StaticLayout(LocaleController.getString("Loading", R.string.Loading), Theme.chat_replyNamePaint, maxNameWidth3 + AndroidUtilities.dp(6.0f), Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
            this.replyNameLayout = staticLayout5;
            if (staticLayout5.getLineCount() > 0) {
                this.replyNameWidth += ((int) Math.ceil(this.replyNameLayout.getLineWidth(0))) + AndroidUtilities.dp(8.0f);
                this.replyNameOffset = (int) this.replyNameLayout.getLineLeft(0);
            }
        }
        requestLayout();
    }

    private boolean isNeedAuthorName() {
        return (this.isPinnedChat && this.currentMessageObject.type == 0) || ((!this.pinnedTop || (ChatObject.isChannel(this.currentChat) && !this.currentChat.megagroup)) && this.drawName && this.isChat && (!this.currentMessageObject.isOutOwner() || (this.currentMessageObject.isSupergroup() && this.currentMessageObject.isFromGroup()))) || (this.currentMessageObject.isImportedForward() && this.currentMessageObject.messageOwner.fwd_from.from_id == null);
    }

    private String getAuthorName() {
        TLRPC$Chat tLRPC$Chat;
        String str;
        String str2;
        TLRPC$User tLRPC$User = this.currentUser;
        if (tLRPC$User != null) {
            return UserObject.getUserName(tLRPC$User);
        }
        TLRPC$Chat tLRPC$Chat2 = this.currentChat;
        if (tLRPC$Chat2 != null) {
            return tLRPC$Chat2.title;
        }
        MessageObject messageObject = this.currentMessageObject;
        if (messageObject == null || !messageObject.isSponsored()) {
            return "DELETED";
        }
        TLRPC$ChatInvite tLRPC$ChatInvite = this.currentMessageObject.sponsoredChatInvite;
        return (tLRPC$ChatInvite == null || (str2 = tLRPC$ChatInvite.title) == null) ? (tLRPC$ChatInvite == null || (tLRPC$Chat = tLRPC$ChatInvite.chat) == null || (str = tLRPC$Chat.title) == null) ? "" : str : str2;
    }

    private String getForwardedMessageText(MessageObject messageObject) {
        if (this.hasPsaHint) {
            String string = LocaleController.getString("PsaMessage_" + messageObject.messageOwner.fwd_from.psa_type);
            return string == null ? LocaleController.getString("PsaMessageDefault", R.string.PsaMessageDefault) : string;
        }
        return LocaleController.getString("ForwardedMessage", R.string.ForwardedMessage);
    }

    public int getExtraInsetHeight() {
        int i = this.addedCaptionHeight;
        if (this.drawCommentButton) {
            i += AndroidUtilities.dp(shouldDrawTimeOnMedia() ? 41.3f : 43.0f);
        }
        return (this.reactionsLayoutInBubble.isEmpty || !this.currentMessageObject.shouldDrawReactionsInLayout()) ? i : i + this.reactionsLayoutInBubble.totalHeight;
    }

    public ImageReceiver getAvatarImage() {
        if (this.isAvatarVisible) {
            return this.avatarImage;
        }
        return null;
    }

    public float getCheckBoxTranslation() {
        return this.checkBoxTranslation;
    }

    public boolean shouldDrawAlphaLayer() {
        MessageObject.GroupedMessages groupedMessages = this.currentMessagesGroup;
        return (groupedMessages == null || !groupedMessages.transitionParams.backgroundChangeBounds) && getAlpha() != 1.0f;
    }

    public float getCaptionX() {
        return this.captionX;
    }

    public boolean isDrawPinnedBottom() {
        MessageObject.GroupedMessagePosition groupedMessagePosition = this.currentPosition;
        return this.mediaBackground || this.drawPinnedBottom || (groupedMessagePosition != null && (groupedMessagePosition.flags & 8) == 0 && this.currentMessagesGroup.isDocuments);
    }

    public void drawCheckBox(Canvas canvas) {
        float f;
        MessageObject messageObject = this.currentMessageObject;
        if (messageObject == null || messageObject.isSending() || this.currentMessageObject.isSendError() || this.checkBox == null) {
            return;
        }
        if (!this.checkBoxVisible && !this.checkBoxAnimationInProgress) {
            return;
        }
        MessageObject.GroupedMessagePosition groupedMessagePosition = this.currentPosition;
        if (groupedMessagePosition != null) {
            int i = groupedMessagePosition.flags;
            if ((i & 8) == 0 || (i & 1) == 0) {
                return;
            }
        }
        canvas.save();
        float y = getY();
        MessageObject.GroupedMessages groupedMessages = this.currentMessagesGroup;
        if (groupedMessages != null && groupedMessages.messages.size() > 1) {
            f = (getTop() + this.currentMessagesGroup.transitionParams.offsetTop) - getTranslationY();
        } else {
            f = y + this.transitionParams.deltaTop;
        }
        canvas.translate(0.0f, f + this.transitionYOffsetForDrawables);
        this.checkBox.draw(canvas);
        canvas.restore();
    }

    /* JADX WARN: Removed duplicated region for block: B:21:0x0041  */
    /* JADX WARN: Removed duplicated region for block: B:22:0x0046  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void setBackgroundTopY(boolean z) {
        int i;
        int i2;
        int i3 = 0;
        while (i3 < 2) {
            if (i3 == 1 && !z) {
                return;
            }
            Theme.MessageDrawable messageDrawable = i3 == 0 ? this.currentBackgroundDrawable : this.currentBackgroundSelectedDrawable;
            if (messageDrawable != null) {
                int i4 = this.parentWidth;
                int i5 = this.parentHeight;
                if (i5 == 0) {
                    i4 = getParentWidth();
                    i5 = AndroidUtilities.displaySize.y;
                    if (getParent() instanceof View) {
                        View view = (View) getParent();
                        int measuredWidth = view.getMeasuredWidth();
                        i = view.getMeasuredHeight();
                        i2 = measuredWidth;
                        float y = !z ? getY() : getTop();
                        float f = this.parentViewTopOffset;
                        messageDrawable.setTop((int) (y + f), i2, i, (int) f, this.blurredViewTopOffset, this.blurredViewBottomOffset, this.pinnedTop, !this.pinnedBottom || this.transitionParams.changePinnedBottomProgress != 1.0f);
                    }
                }
                i2 = i4;
                i = i5;
                if (!z) {
                }
                float f2 = this.parentViewTopOffset;
                messageDrawable.setTop((int) (y + f2), i2, i, (int) f2, this.blurredViewTopOffset, this.blurredViewBottomOffset, this.pinnedTop, !this.pinnedBottom || this.transitionParams.changePinnedBottomProgress != 1.0f);
            }
            i3++;
        }
    }

    public void setBackgroundTopY(int i) {
        int i2;
        int i3;
        Theme.MessageDrawable messageDrawable = this.currentBackgroundDrawable;
        int i4 = this.parentWidth;
        int i5 = this.parentHeight;
        if (i5 == 0) {
            i4 = getParentWidth();
            i5 = AndroidUtilities.displaySize.y;
            if (getParent() instanceof View) {
                View view = (View) getParent();
                i3 = view.getMeasuredWidth();
                i2 = view.getMeasuredHeight();
                float f = this.parentViewTopOffset;
                messageDrawable.setTop((int) (i + f), i3, i2, (int) f, this.blurredViewTopOffset, this.blurredViewBottomOffset, this.pinnedTop, !this.pinnedBottom || this.transitionParams.changePinnedBottomProgress != 1.0f);
            }
        }
        i2 = i5;
        i3 = i4;
        float f2 = this.parentViewTopOffset;
        messageDrawable.setTop((int) (i + f2), i3, i2, (int) f2, this.blurredViewTopOffset, this.blurredViewBottomOffset, this.pinnedTop, !this.pinnedBottom || this.transitionParams.changePinnedBottomProgress != 1.0f);
    }

    public void setDrawableBoundsInner(Drawable drawable, int i, int i2, int i3, int i4) {
        if (drawable != null) {
            float f = i4 + i2;
            TransitionParams transitionParams = this.transitionParams;
            float f2 = transitionParams.deltaBottom;
            this.transitionYOffsetForDrawables = (f + f2) - ((int) (f + f2));
            drawable.setBounds((int) (i + transitionParams.deltaLeft), (int) (i2 + transitionParams.deltaTop), (int) (i + i3 + transitionParams.deltaRight), (int) (f + f2));
        }
    }

    @Override // android.view.View
    @SuppressLint({"WrongCall"})
    protected void onDraw(Canvas canvas) {
        int i;
        boolean z;
        MessageObject.GroupedMessagePosition groupedMessagePosition;
        Theme.MessageDrawable messageDrawable;
        int i2;
        int i3;
        int i4;
        int i5;
        if (this.currentMessageObject == null) {
            return;
        }
        if (!this.wasLayout) {
            onLayout(false, getLeft(), getTop(), getRight(), getBottom());
        }
        if (this.currentMessageObject.isOutOwner()) {
            Theme.chat_msgTextPaint.setColor(getThemedColor("chat_messageTextOut"));
            Theme.chat_msgGameTextPaint.setColor(getThemedColor("chat_messageTextOut"));
            Theme.chat_msgGameTextPaint.linkColor = getThemedColor("chat_messageLinkOut");
            Theme.chat_replyTextPaint.linkColor = getThemedColor("chat_messageLinkOut");
            Theme.chat_msgTextPaint.linkColor = getThemedColor("chat_messageLinkOut");
        } else {
            Theme.chat_msgTextPaint.setColor(getThemedColor("chat_messageTextIn"));
            Theme.chat_msgGameTextPaint.setColor(getThemedColor("chat_messageTextIn"));
            Theme.chat_msgGameTextPaint.linkColor = getThemedColor("chat_messageLinkIn");
            Theme.chat_replyTextPaint.linkColor = getThemedColor("chat_messageLinkIn");
            Theme.chat_msgTextPaint.linkColor = getThemedColor("chat_messageLinkIn");
        }
        if (this.documentAttach != null) {
            int i6 = this.documentAttachType;
            if (i6 == 3) {
                if (this.currentMessageObject.isOutOwner()) {
                    this.seekBarWaveform.setColors(getThemedColor("chat_outVoiceSeekbar"), getThemedColor("chat_outVoiceSeekbarFill"), getThemedColor("chat_outVoiceSeekbarSelected"));
                    this.seekBar.setColors(getThemedColor("chat_outAudioSeekbar"), getThemedColor("chat_outAudioCacheSeekbar"), getThemedColor("chat_outAudioSeekbarFill"), getThemedColor("chat_outAudioSeekbarFill"), getThemedColor("chat_outAudioSeekbarSelected"));
                } else {
                    this.seekBarWaveform.setColors(getThemedColor("chat_inVoiceSeekbar"), getThemedColor("chat_inVoiceSeekbarFill"), getThemedColor("chat_inVoiceSeekbarSelected"));
                    this.seekBar.setColors(getThemedColor("chat_inAudioSeekbar"), getThemedColor("chat_inAudioCacheSeekbar"), getThemedColor("chat_inAudioSeekbarFill"), getThemedColor("chat_inAudioSeekbarFill"), getThemedColor("chat_inAudioSeekbarSelected"));
                }
            } else if (i6 == 5) {
                if (this.currentMessageObject.isOutOwner()) {
                    this.seekBar.setColors(getThemedColor("chat_outAudioSeekbar"), getThemedColor("chat_outAudioCacheSeekbar"), getThemedColor("chat_outAudioSeekbarFill"), getThemedColor("chat_outAudioSeekbarFill"), getThemedColor("chat_outAudioSeekbarSelected"));
                } else {
                    this.seekBar.setColors(getThemedColor("chat_inAudioSeekbar"), getThemedColor("chat_inAudioCacheSeekbar"), getThemedColor("chat_inAudioSeekbarFill"), getThemedColor("chat_inAudioSeekbarFill"), getThemedColor("chat_inAudioSeekbarSelected"));
                }
            }
        }
        MessageObject messageObject = this.currentMessageObject;
        if (messageObject.type == 5) {
            Theme.chat_timePaint.setColor(getThemedColor("chat_serviceText"));
        } else if (this.mediaBackground) {
            if (messageObject.shouldDrawWithoutBackground()) {
                Theme.chat_timePaint.setColor(getThemedColor("chat_serviceText"));
            } else {
                Theme.chat_timePaint.setColor(getThemedColor("chat_mediaTimeText"));
            }
        } else if (messageObject.isOutOwner()) {
            Theme.chat_timePaint.setColor(getThemedColor(isDrawSelectionBackground() ? "chat_outTimeSelectedText" : "chat_outTimeText"));
        } else {
            Theme.chat_timePaint.setColor(getThemedColor(isDrawSelectionBackground() ? "chat_inTimeSelectedText" : "chat_inTimeText"));
        }
        drawBackgroundInternal(canvas, false);
        long j = 17;
        if (this.isHighlightedAnimated) {
            long currentTimeMillis = System.currentTimeMillis();
            long abs = Math.abs(currentTimeMillis - this.lastHighlightProgressTime);
            if (abs > 17) {
                abs = 17;
            }
            int i7 = (int) (this.highlightProgress - abs);
            this.highlightProgress = i7;
            this.lastHighlightProgressTime = currentTimeMillis;
            if (i7 <= 0) {
                this.highlightProgress = 0;
                this.isHighlightedAnimated = false;
            }
            invalidate();
            if (getParent() != null) {
                ((View) getParent()).invalidate();
            }
        }
        if (this.alphaInternal != 1.0f) {
            int measuredHeight = getMeasuredHeight();
            int measuredWidth = getMeasuredWidth();
            Theme.MessageDrawable messageDrawable2 = this.currentBackgroundDrawable;
            if (messageDrawable2 != null) {
                i5 = messageDrawable2.getBounds().top;
                i4 = this.currentBackgroundDrawable.getBounds().bottom;
                i3 = this.currentBackgroundDrawable.getBounds().left;
                i2 = this.currentBackgroundDrawable.getBounds().right;
            } else {
                i2 = measuredWidth;
                i3 = 0;
                i4 = measuredHeight;
                i5 = 0;
            }
            if (this.drawSideButton != 0) {
                if (this.currentMessageObject.isOutOwner()) {
                    i3 -= AndroidUtilities.dp(40.0f);
                } else {
                    i2 += AndroidUtilities.dp(40.0f);
                }
            }
            if (getY() < 0.0f) {
                i5 = (int) (-getY());
            }
            float y = getY() + getMeasuredHeight();
            int i8 = this.parentHeight;
            if (y > i8) {
                i4 = (int) (i8 - getY());
            }
            this.rect.set(i3, i5, i2, i4);
            i = canvas.saveLayerAlpha(this.rect, (int) (this.alphaInternal * 255.0f), 31);
        } else {
            i = Integer.MIN_VALUE;
        }
        if (!this.transitionParams.animateBackgroundBoundsInner || (messageDrawable = this.currentBackgroundDrawable) == null || this.isRoundVideo) {
            z = false;
        } else {
            Rect bounds = messageDrawable.getBounds();
            canvas.save();
            canvas.clipRect(bounds.left + AndroidUtilities.dp(4.0f), bounds.top + AndroidUtilities.dp(4.0f), bounds.right - AndroidUtilities.dp(4.0f), bounds.bottom - AndroidUtilities.dp(4.0f));
            z = true;
        }
        drawContent(canvas);
        if (z) {
            canvas.restore();
        }
        ChatMessageCellDelegate chatMessageCellDelegate = this.delegate;
        if (chatMessageCellDelegate == null || chatMessageCellDelegate.canDrawOutboundsContent() || this.transitionParams.messageEntering || getAlpha() != 1.0f) {
            drawOutboundsContent(canvas);
        }
        if (this.replyNameLayout != null) {
            float f = 12.0f;
            if (this.currentMessageObject.shouldDrawWithoutBackground()) {
                if (this.currentMessageObject.isOutOwner()) {
                    int dp = AndroidUtilities.dp(23.0f);
                    this.replyStartX = dp;
                    if (this.isPlayingRound) {
                        this.replyStartX = dp - (AndroidUtilities.roundPlayingMessageSize - AndroidUtilities.roundMessageSize);
                    }
                } else if (this.currentMessageObject.type == 5) {
                    this.replyStartX = this.backgroundDrawableLeft + this.backgroundDrawableRight + AndroidUtilities.dp(4.0f);
                } else {
                    this.replyStartX = this.backgroundDrawableLeft + this.backgroundDrawableRight + AndroidUtilities.dp(17.0f);
                }
                if (this.drawForwardedName) {
                    this.replyStartY = this.forwardNameY + AndroidUtilities.dp(38.0f);
                } else {
                    this.replyStartY = AndroidUtilities.dp(12.0f);
                }
            } else {
                if (this.currentMessageObject.isOutOwner()) {
                    this.replyStartX = this.backgroundDrawableLeft + AndroidUtilities.dp(12.0f) + getExtraTextX();
                } else if (this.mediaBackground) {
                    this.replyStartX = this.backgroundDrawableLeft + AndroidUtilities.dp(12.0f) + getExtraTextX();
                } else {
                    int i9 = this.backgroundDrawableLeft;
                    if (!this.drawPinnedBottom) {
                        f = 18.0f;
                    }
                    this.replyStartX = i9 + AndroidUtilities.dp(f) + getExtraTextX();
                }
                this.replyStartY = AndroidUtilities.dp(12 + ((!this.drawForwardedName || this.forwardedNameLayout[0] == null) ? 0 : 36) + ((!this.drawNameLayout || this.nameLayout == null) ? 0 : 20));
            }
        }
        if (this.currentPosition == null && !this.transitionParams.animateBackgroundBoundsInner && (!this.enterTransitionInProgress || this.currentMessageObject.isVoice())) {
            drawNamesLayout(canvas, 1.0f);
        }
        if ((!this.autoPlayingMedia || !MediaController.getInstance().isPlayingMessageAndReadyToDraw(this.currentMessageObject) || this.isRoundVideo) && !this.transitionParams.animateBackgroundBoundsInner) {
            drawOverlays(canvas);
        }
        if ((this.drawTime || !this.mediaBackground) && !this.forceNotDrawTime && !this.transitionParams.animateBackgroundBoundsInner && (!this.enterTransitionInProgress || this.currentMessageObject.isVoice())) {
            drawTime(canvas, 1.0f, false);
        }
        if ((this.controlsAlpha != 1.0f || this.timeAlpha != 1.0f) && this.currentMessageObject.type != 5) {
            long currentTimeMillis2 = System.currentTimeMillis();
            long abs2 = Math.abs(this.lastControlsAlphaChangeTime - currentTimeMillis2);
            if (abs2 <= 17) {
                j = abs2;
            }
            long j2 = this.totalChangeTime + j;
            this.totalChangeTime = j2;
            if (j2 > 100) {
                this.totalChangeTime = 100L;
            }
            this.lastControlsAlphaChangeTime = currentTimeMillis2;
            if (this.controlsAlpha != 1.0f) {
                this.controlsAlpha = AndroidUtilities.decelerateInterpolator.getInterpolation(((float) this.totalChangeTime) / 100.0f);
            }
            if (this.timeAlpha != 1.0f) {
                this.timeAlpha = AndroidUtilities.decelerateInterpolator.getInterpolation(((float) this.totalChangeTime) / 100.0f);
            }
            invalidate();
            if (this.forceNotDrawTime && (groupedMessagePosition = this.currentPosition) != null && groupedMessagePosition.last && getParent() != null) {
                ((View) getParent()).invalidate();
            }
        }
        if (this.drawBackground && shouldDrawSelectionOverlay() && this.currentMessagesGroup == null) {
            if (this.selectionOverlayPaint == null) {
                this.selectionOverlayPaint = new Paint(1);
            }
            this.selectionOverlayPaint.setColor(getSelectionOverlayColor().intValue());
            int alpha = this.selectionOverlayPaint.getAlpha();
            this.selectionOverlayPaint.setAlpha((int) (alpha * getHighlightAlpha() * getAlpha()));
            if (this.selectionOverlayPaint.getAlpha() > 0) {
                canvas.save();
                canvas.clipRect(0, 0, getMeasuredWidth(), getMeasuredHeight());
                this.currentBackgroundDrawable.drawCached(canvas, this.backgroundCacheParams, this.selectionOverlayPaint);
                canvas.restore();
            }
            this.selectionOverlayPaint.setAlpha(alpha);
        }
        if (i != Integer.MIN_VALUE) {
            canvas.restoreToCount(i);
        }
        updateSelectionTextPosition();
    }

    @SuppressLint({"WrongCall"})
    public void drawBackgroundInternal(Canvas canvas, boolean z) {
        float f;
        Drawable drawable;
        boolean z2;
        Theme.MessageDrawable messageDrawable;
        int i;
        int i2;
        MessageObject.GroupedMessages groupedMessages;
        int i3;
        int i4;
        MessageObject.GroupedMessagePosition groupedMessagePosition;
        Drawable drawable2;
        int i5;
        int i6;
        int i7;
        int i8;
        Drawable drawable3;
        int i9;
        int i10;
        int i11;
        int i12;
        if (this.currentMessageObject == null) {
            return;
        }
        boolean z3 = this.wasLayout;
        if (!z3 && !this.animationRunning) {
            forceLayout();
            return;
        }
        if (!z3) {
            onLayout(false, getLeft(), getTop(), getRight(), getBottom());
        }
        MessageObject.GroupedMessagePosition groupedMessagePosition2 = this.currentPosition;
        boolean z4 = groupedMessagePosition2 != null && (groupedMessagePosition2.flags & 8) == 0 && this.currentMessagesGroup.isDocuments && !this.drawPinnedBottom;
        if (this.currentMessageObject.isOutOwner()) {
            if (this.transitionParams.changePinnedBottomProgress >= 1.0f && !this.mediaBackground && !this.drawPinnedBottom && !z4) {
                this.currentBackgroundDrawable = (Theme.MessageDrawable) getThemedDrawable("drawableMsgOut");
                this.currentBackgroundSelectedDrawable = (Theme.MessageDrawable) getThemedDrawable("drawableMsgOutSelected");
                this.transitionParams.drawPinnedBottomBackground = false;
            } else {
                this.currentBackgroundDrawable = (Theme.MessageDrawable) getThemedDrawable("drawableMsgOutMedia");
                this.currentBackgroundSelectedDrawable = (Theme.MessageDrawable) getThemedDrawable("drawableMsgOutMediaSelected");
                this.transitionParams.drawPinnedBottomBackground = true;
            }
            setBackgroundTopY(true);
            if (isDrawSelectionBackground() && (this.currentPosition == null || getBackground() != null)) {
                drawable3 = this.currentBackgroundSelectedDrawable.getShadowDrawable();
            } else {
                drawable3 = this.currentBackgroundDrawable.getShadowDrawable();
            }
            Drawable drawable4 = drawable3;
            this.backgroundDrawableLeft = (this.layoutWidth - this.backgroundWidth) - (!this.mediaBackground ? 0 : AndroidUtilities.dp(9.0f));
            int dp = this.backgroundWidth - (this.mediaBackground ? 0 : AndroidUtilities.dp(3.0f));
            this.backgroundDrawableRight = dp;
            MessageObject.GroupedMessages groupedMessages2 = this.currentMessagesGroup;
            if (groupedMessages2 != null && !groupedMessages2.isDocuments && !this.currentPosition.edge) {
                this.backgroundDrawableRight = dp + AndroidUtilities.dp(10.0f);
            }
            int i13 = this.backgroundDrawableLeft;
            if (!z4 && this.transitionParams.changePinnedBottomProgress != 1.0f) {
                if (!this.mediaBackground) {
                    this.backgroundDrawableRight -= AndroidUtilities.dp(6.0f);
                }
            } else if (!this.mediaBackground && this.drawPinnedBottom) {
                this.backgroundDrawableRight -= AndroidUtilities.dp(6.0f);
            }
            MessageObject.GroupedMessagePosition groupedMessagePosition3 = this.currentPosition;
            if (groupedMessagePosition3 != null) {
                if ((groupedMessagePosition3.flags & 2) == 0) {
                    this.backgroundDrawableRight += AndroidUtilities.dp(SharedConfig.bubbleRadius + 2);
                }
                if ((this.currentPosition.flags & 1) == 0) {
                    i13 -= AndroidUtilities.dp(SharedConfig.bubbleRadius + 2);
                    this.backgroundDrawableRight += AndroidUtilities.dp(SharedConfig.bubbleRadius + 2);
                }
                if ((this.currentPosition.flags & 4) == 0) {
                    i11 = 0 - AndroidUtilities.dp(SharedConfig.bubbleRadius + 3);
                    i10 = AndroidUtilities.dp(SharedConfig.bubbleRadius + 3) + 0;
                } else {
                    i11 = 0;
                    i10 = 0;
                }
                if ((this.currentPosition.flags & 8) == 0) {
                    i10 += AndroidUtilities.dp(SharedConfig.bubbleRadius + 3);
                }
                i9 = i13;
            } else {
                i9 = i13;
                i11 = 0;
                i10 = 0;
            }
            boolean z5 = this.drawPinnedBottom;
            if (z5 && this.drawPinnedTop) {
                i12 = 0;
            } else if (z5) {
                i12 = AndroidUtilities.dp(1.0f);
            } else {
                i12 = AndroidUtilities.dp(2.0f);
            }
            int dp2 = i11 + (this.drawPinnedTop ? 0 : AndroidUtilities.dp(1.0f));
            this.backgroundDrawableTop = dp2;
            int i14 = (this.layoutHeight - i12) + i10;
            if (z4) {
                setDrawableBoundsInner(this.currentBackgroundDrawable, i9, dp2 - i11, this.backgroundDrawableRight, (i14 - i10) + 10);
                setDrawableBoundsInner(this.currentBackgroundSelectedDrawable, this.backgroundDrawableLeft, this.backgroundDrawableTop, this.backgroundDrawableRight - AndroidUtilities.dp(6.0f), i14);
            } else {
                int i15 = i9;
                setDrawableBoundsInner(this.currentBackgroundDrawable, i15, dp2, this.backgroundDrawableRight, i14);
                setDrawableBoundsInner(this.currentBackgroundSelectedDrawable, i15, this.backgroundDrawableTop, this.backgroundDrawableRight, i14);
            }
            setDrawableBoundsInner(drawable4, i9, this.backgroundDrawableTop, this.backgroundDrawableRight, i14);
            drawable = drawable4;
            f = 1.0f;
        } else {
            f = 1.0f;
            if (this.transitionParams.changePinnedBottomProgress >= 1.0f && !this.mediaBackground && !this.drawPinnedBottom && !z4) {
                this.currentBackgroundDrawable = (Theme.MessageDrawable) getThemedDrawable("drawableMsgIn");
                this.currentBackgroundSelectedDrawable = (Theme.MessageDrawable) getThemedDrawable("drawableMsgInSelected");
                this.transitionParams.drawPinnedBottomBackground = false;
            } else {
                this.currentBackgroundDrawable = (Theme.MessageDrawable) getThemedDrawable("drawableMsgInMedia");
                this.currentBackgroundSelectedDrawable = (Theme.MessageDrawable) getThemedDrawable("drawableMsgInMediaSelected");
                this.transitionParams.drawPinnedBottomBackground = true;
            }
            setBackgroundTopY(true);
            if (isDrawSelectionBackground() && (this.currentPosition == null || getBackground() != null)) {
                drawable2 = this.currentBackgroundSelectedDrawable.getShadowDrawable();
            } else {
                drawable2 = this.currentBackgroundDrawable.getShadowDrawable();
            }
            Drawable drawable5 = drawable2;
            this.backgroundDrawableLeft = AndroidUtilities.dp(((!this.isChat || !this.isAvatarVisible) ? 0 : 48) + (!this.mediaBackground ? 3 : 9));
            this.backgroundDrawableRight = this.backgroundWidth - (this.mediaBackground ? 0 : AndroidUtilities.dp(3.0f));
            MessageObject.GroupedMessages groupedMessages3 = this.currentMessagesGroup;
            if (groupedMessages3 != null && !groupedMessages3.isDocuments) {
                if (!this.currentPosition.edge) {
                    this.backgroundDrawableLeft -= AndroidUtilities.dp(10.0f);
                    this.backgroundDrawableRight += AndroidUtilities.dp(10.0f);
                }
                if (this.currentPosition.leftSpanOffset != 0) {
                    this.backgroundDrawableLeft += (int) Math.ceil((i8 / 1000.0f) * getGroupPhotosWidth());
                }
            }
            boolean z6 = this.mediaBackground;
            if ((!z6 && this.drawPinnedBottom) || (!z4 && this.transitionParams.changePinnedBottomProgress != 1.0f)) {
                if (this.drawPinnedBottom || !z6) {
                    this.backgroundDrawableRight -= AndroidUtilities.dp(6.0f);
                }
                if (!this.mediaBackground) {
                    this.backgroundDrawableLeft += AndroidUtilities.dp(6.0f);
                }
            }
            MessageObject.GroupedMessagePosition groupedMessagePosition4 = this.currentPosition;
            if (groupedMessagePosition4 != null) {
                if ((groupedMessagePosition4.flags & 2) == 0) {
                    this.backgroundDrawableRight += AndroidUtilities.dp(SharedConfig.bubbleRadius + 2);
                }
                if ((this.currentPosition.flags & 1) == 0) {
                    this.backgroundDrawableLeft -= AndroidUtilities.dp(SharedConfig.bubbleRadius + 2);
                    this.backgroundDrawableRight += AndroidUtilities.dp(SharedConfig.bubbleRadius + 2);
                }
                if ((this.currentPosition.flags & 4) == 0) {
                    i6 = 0 - AndroidUtilities.dp(SharedConfig.bubbleRadius + 3);
                    i5 = AndroidUtilities.dp(SharedConfig.bubbleRadius + 3) + 0;
                } else {
                    i6 = 0;
                    i5 = 0;
                }
                if ((this.currentPosition.flags & 8) == 0) {
                    i5 += AndroidUtilities.dp(SharedConfig.bubbleRadius + 4);
                }
            } else {
                i6 = 0;
                i5 = 0;
            }
            boolean z7 = this.drawPinnedBottom;
            if (z7 && this.drawPinnedTop) {
                i7 = 0;
            } else if (z7) {
                i7 = AndroidUtilities.dp(1.0f);
            } else {
                i7 = AndroidUtilities.dp(2.0f);
            }
            int dp3 = (this.drawPinnedTop ? 0 : AndroidUtilities.dp(1.0f)) + i6;
            this.backgroundDrawableTop = dp3;
            int i16 = (this.layoutHeight - i7) + i5;
            setDrawableBoundsInner(this.currentBackgroundDrawable, this.backgroundDrawableLeft, dp3, this.backgroundDrawableRight, i16);
            if (z4) {
                setDrawableBoundsInner(this.currentBackgroundSelectedDrawable, AndroidUtilities.dp(6.0f) + this.backgroundDrawableLeft, this.backgroundDrawableTop, this.backgroundDrawableRight - AndroidUtilities.dp(6.0f), i16);
            } else {
                setDrawableBoundsInner(this.currentBackgroundSelectedDrawable, this.backgroundDrawableLeft, this.backgroundDrawableTop, this.backgroundDrawableRight, i16);
            }
            setDrawableBoundsInner(drawable5, this.backgroundDrawableLeft, this.backgroundDrawableTop, this.backgroundDrawableRight, i16);
            drawable = drawable5;
        }
        if (!this.currentMessageObject.isOutOwner() && this.transitionParams.changePinnedBottomProgress != f && !this.mediaBackground && !this.drawPinnedBottom) {
            this.backgroundDrawableLeft -= AndroidUtilities.dp(6.0f);
            this.backgroundDrawableRight += AndroidUtilities.dp(6.0f);
        }
        if (this.hasPsaHint) {
            MessageObject.GroupedMessagePosition groupedMessagePosition5 = this.currentPosition;
            if (groupedMessagePosition5 == null || (groupedMessagePosition5.flags & 2) != 0) {
                i3 = this.currentBackgroundDrawable.getBounds().right;
            } else {
                int groupPhotosWidth = getGroupPhotosWidth();
                i3 = 0;
                for (int i17 = 0; i17 < this.currentMessagesGroup.posArray.size(); i17++) {
                    if (this.currentMessagesGroup.posArray.get(i17).minY != 0) {
                        break;
                    }
                    double d = i3;
                    double ceil = Math.ceil(((groupedMessagePosition.pw + groupedMessagePosition.leftSpanOffset) / 1000.0f) * groupPhotosWidth);
                    Double.isNaN(d);
                    i3 = (int) (d + ceil);
                }
            }
            Drawable drawable6 = Theme.chat_psaHelpDrawable[this.currentMessageObject.isOutOwner() ? 1 : 0];
            if (this.currentMessageObject.type == 5) {
                i4 = AndroidUtilities.dp(12.0f);
            } else {
                i4 = AndroidUtilities.dp((this.drawNameLayout ? 19 : 0) + 10);
            }
            this.psaHelpX = (i3 - drawable6.getIntrinsicWidth()) - AndroidUtilities.dp(this.currentMessageObject.isOutOwner() ? 20.0f : 14.0f);
            this.psaHelpY = i4 + AndroidUtilities.dp(4.0f);
        }
        boolean z8 = this.checkBoxVisible;
        if (z8 || this.checkBoxAnimationInProgress) {
            if ((z8 && this.checkBoxAnimationProgress == f) || (!z8 && this.checkBoxAnimationProgress == 0.0f)) {
                this.checkBoxAnimationInProgress = false;
            }
            this.checkBoxTranslation = (int) Math.ceil((z8 ? CubicBezierInterpolator.EASE_OUT : CubicBezierInterpolator.EASE_IN).getInterpolation(this.checkBoxAnimationProgress) * AndroidUtilities.dp(35.0f));
            if (!this.currentMessageObject.isOutOwner()) {
                updateTranslation();
            }
            int dp4 = AndroidUtilities.dp(21.0f);
            this.checkBox.setBounds(AndroidUtilities.dp(-27.0f) + this.checkBoxTranslation, (this.currentBackgroundDrawable.getBounds().bottom - AndroidUtilities.dp(8.0f)) - dp4, dp4, dp4);
            if (this.checkBoxAnimationInProgress) {
                long elapsedRealtime = SystemClock.elapsedRealtime();
                long j = elapsedRealtime - this.lastCheckBoxAnimationTime;
                this.lastCheckBoxAnimationTime = elapsedRealtime;
                if (this.checkBoxVisible) {
                    float f2 = this.checkBoxAnimationProgress + (((float) j) / 200.0f);
                    this.checkBoxAnimationProgress = f2;
                    if (f2 > f) {
                        this.checkBoxAnimationProgress = f;
                    }
                } else {
                    float f3 = this.checkBoxAnimationProgress - (((float) j) / 200.0f);
                    this.checkBoxAnimationProgress = f3;
                    if (f3 <= 0.0f) {
                        this.checkBoxAnimationProgress = 0.0f;
                    }
                }
                invalidate();
                ((View) getParent()).invalidate();
            }
        }
        if (!z && drawBackgroundInParent()) {
            return;
        }
        if (this.transitionYOffsetForDrawables != 0.0f) {
            canvas.save();
            canvas.translate(0.0f, this.transitionYOffsetForDrawables);
            z2 = true;
        } else {
            z2 = false;
        }
        if (this.drawBackground && this.currentBackgroundDrawable != null && ((this.currentPosition == null || (isDrawSelectionBackground() && (this.currentMessageObject.isMusic() || this.currentMessageObject.isDocument()))) && (!this.enterTransitionInProgress || this.currentMessageObject.isVoice()))) {
            float f4 = this.alphaInternal;
            if (z) {
                f4 *= getAlpha();
            }
            if (hasSelectionOverlay()) {
                this.currentSelectedBackgroundAlpha = 0.0f;
                int i18 = (int) (f4 * 255.0f);
                this.currentBackgroundDrawable.setAlpha(i18);
                this.currentBackgroundDrawable.drawCached(canvas, this.backgroundCacheParams);
                if (drawable != null && this.currentPosition == null) {
                    drawable.setAlpha(i18);
                    drawable.draw(canvas);
                }
            } else {
                if (this.isHighlightedAnimated) {
                    this.currentBackgroundDrawable.setAlpha((int) (f4 * 255.0f));
                    this.currentBackgroundDrawable.drawCached(canvas, this.backgroundCacheParams);
                    float highlightAlpha = getHighlightAlpha();
                    this.currentSelectedBackgroundAlpha = highlightAlpha;
                    if (this.currentPosition == null) {
                        this.currentBackgroundSelectedDrawable.setAlpha((int) (highlightAlpha * f4 * 255.0f));
                        this.currentBackgroundSelectedDrawable.drawCached(canvas, this.backgroundCacheParams);
                    }
                } else if (this.selectedBackgroundProgress != 0.0f && ((groupedMessages = this.currentMessagesGroup) == null || !groupedMessages.isDocuments)) {
                    this.currentBackgroundDrawable.setAlpha((int) (f4 * 255.0f));
                    this.currentBackgroundDrawable.drawCached(canvas, this.backgroundCacheParams);
                    float f5 = this.selectedBackgroundProgress;
                    this.currentSelectedBackgroundAlpha = f5;
                    this.currentBackgroundSelectedDrawable.setAlpha((int) (f5 * f4 * 255.0f));
                    this.currentBackgroundSelectedDrawable.drawCached(canvas, this.backgroundCacheParams);
                    if (this.currentBackgroundDrawable.getGradientShader() == null) {
                        drawable = null;
                    }
                } else if (isDrawSelectionBackground() && (this.currentPosition == null || this.currentMessageObject.isMusic() || this.currentMessageObject.isDocument() || getBackground() != null)) {
                    if (this.currentPosition != null) {
                        canvas.save();
                        canvas.clipRect(0, 0, getMeasuredWidth(), getMeasuredHeight());
                    }
                    this.currentSelectedBackgroundAlpha = f;
                    this.currentBackgroundSelectedDrawable.setAlpha((int) (f4 * 255.0f));
                    this.currentBackgroundSelectedDrawable.drawCached(canvas, this.backgroundCacheParams);
                    if (this.currentPosition != null) {
                        canvas.restore();
                    }
                } else {
                    this.currentSelectedBackgroundAlpha = 0.0f;
                    this.currentBackgroundDrawable.setAlpha((int) (f4 * 255.0f));
                    this.currentBackgroundDrawable.drawCached(canvas, this.backgroundCacheParams);
                }
                if (drawable != null && this.currentPosition == null) {
                    drawable.setAlpha((int) (f4 * 255.0f));
                    drawable.draw(canvas);
                }
                if (this.transitionParams.changePinnedBottomProgress != f && this.currentPosition == null) {
                    if (this.currentMessageObject.isOutOwner()) {
                        Theme.MessageDrawable messageDrawable2 = (Theme.MessageDrawable) getThemedDrawable("drawableMsgOut");
                        Rect bounds = this.currentBackgroundDrawable.getBounds();
                        messageDrawable2.setBounds(bounds.left, bounds.top, bounds.right + AndroidUtilities.dp(6.0f), bounds.bottom);
                        canvas.save();
                        canvas.clipRect(bounds.right - AndroidUtilities.dp(12.0f), bounds.bottom - AndroidUtilities.dp(16.0f), bounds.right + AndroidUtilities.dp(12.0f), bounds.bottom);
                        int i19 = this.parentWidth;
                        int i20 = this.parentHeight;
                        if (i20 == 0) {
                            i19 = getParentWidth();
                            i20 = AndroidUtilities.displaySize.y;
                            if (getParent() instanceof View) {
                                View view = (View) getParent();
                                int measuredWidth = view.getMeasuredWidth();
                                i = view.getMeasuredHeight();
                                i2 = measuredWidth;
                                float y = getY();
                                float f6 = this.parentViewTopOffset;
                                messageDrawable2.setTop((int) (y + f6), i2, i, (int) f6, this.blurredViewTopOffset, this.blurredViewBottomOffset, this.pinnedTop, this.pinnedBottom);
                                messageDrawable2.setAlpha((int) (((!this.mediaBackground || this.pinnedBottom) ? f - this.transitionParams.changePinnedBottomProgress : this.transitionParams.changePinnedBottomProgress) * 255.0f));
                                messageDrawable2.draw(canvas);
                                messageDrawable2.setAlpha(255);
                                canvas.restore();
                            }
                        }
                        i2 = i19;
                        i = i20;
                        float y2 = getY();
                        float f62 = this.parentViewTopOffset;
                        messageDrawable2.setTop((int) (y2 + f62), i2, i, (int) f62, this.blurredViewTopOffset, this.blurredViewBottomOffset, this.pinnedTop, this.pinnedBottom);
                        messageDrawable2.setAlpha((int) (((!this.mediaBackground || this.pinnedBottom) ? f - this.transitionParams.changePinnedBottomProgress : this.transitionParams.changePinnedBottomProgress) * 255.0f));
                        messageDrawable2.draw(canvas);
                        messageDrawable2.setAlpha(255);
                        canvas.restore();
                    } else {
                        if (this.transitionParams.drawPinnedBottomBackground) {
                            messageDrawable = (Theme.MessageDrawable) getThemedDrawable("drawableMsgIn");
                        } else {
                            messageDrawable = (Theme.MessageDrawable) getThemedDrawable("drawableMsgInMedia");
                        }
                        messageDrawable.setAlpha((int) (((this.mediaBackground || this.pinnedBottom) ? f - this.transitionParams.changePinnedBottomProgress : this.transitionParams.changePinnedBottomProgress) * 255.0f));
                        Rect bounds2 = this.currentBackgroundDrawable.getBounds();
                        messageDrawable.setBounds(bounds2.left - AndroidUtilities.dp(6.0f), bounds2.top, bounds2.right, bounds2.bottom);
                        canvas.save();
                        canvas.clipRect(bounds2.left - AndroidUtilities.dp(6.0f), bounds2.bottom - AndroidUtilities.dp(16.0f), bounds2.left + AndroidUtilities.dp(6.0f), bounds2.bottom);
                        messageDrawable.draw(canvas);
                        messageDrawable.setAlpha(255);
                        canvas.restore();
                    }
                }
            }
        }
        if (!z2) {
            return;
        }
        canvas.restore();
    }

    public boolean drawBackgroundInParent() {
        MessageObject messageObject;
        if (!this.canDrawBackgroundInParent || (messageObject = this.currentMessageObject) == null || !messageObject.isOutOwner()) {
            return false;
        }
        Theme.ResourcesProvider resourcesProvider = this.resourcesProvider;
        return resourcesProvider != null ? resourcesProvider.getCurrentColor("chat_outBubbleGradient") != null : Theme.getColorOrNull("chat_outBubbleGradient") != null;
    }

    public void drawCommentButton(Canvas canvas, float f) {
        if (this.drawSideButton != 3) {
            return;
        }
        int dp = AndroidUtilities.dp(32.0f);
        if (this.commentLayout != null) {
            this.sideStartY -= AndroidUtilities.dp(18.0f);
            dp += AndroidUtilities.dp(18.0f);
        }
        RectF rectF = this.rect;
        float f2 = this.sideStartX;
        rectF.set(f2, this.sideStartY, AndroidUtilities.dp(32.0f) + f2, this.sideStartY + dp);
        applyServiceShaderMatrix();
        String str = "paintChatActionBackground";
        if (f != 1.0f) {
            int alpha = getThemedPaint(str).getAlpha();
            getThemedPaint(str).setAlpha((int) (alpha * f));
            canvas.drawRoundRect(this.rect, AndroidUtilities.dp(16.0f), AndroidUtilities.dp(16.0f), getThemedPaint(str));
            getThemedPaint(str).setAlpha(alpha);
        } else {
            RectF rectF2 = this.rect;
            float dp2 = AndroidUtilities.dp(16.0f);
            float dp3 = AndroidUtilities.dp(16.0f);
            if (this.sideButtonPressed) {
                str = "paintChatActionBackgroundSelected";
            }
            canvas.drawRoundRect(rectF2, dp2, dp3, getThemedPaint(str));
        }
        if (hasGradientService()) {
            if (f != 1.0f) {
                int alpha2 = Theme.chat_actionBackgroundGradientDarkenPaint.getAlpha();
                Theme.chat_actionBackgroundGradientDarkenPaint.setAlpha((int) (alpha2 * f));
                canvas.drawRoundRect(this.rect, AndroidUtilities.dp(16.0f), AndroidUtilities.dp(16.0f), Theme.chat_actionBackgroundGradientDarkenPaint);
                Theme.chat_actionBackgroundGradientDarkenPaint.setAlpha(alpha2);
            } else {
                canvas.drawRoundRect(this.rect, AndroidUtilities.dp(16.0f), AndroidUtilities.dp(16.0f), Theme.chat_actionBackgroundGradientDarkenPaint);
            }
        }
        Drawable themeDrawable = Theme.getThemeDrawable("drawableCommentSticker");
        BaseCell.setDrawableBounds(themeDrawable, this.sideStartX + AndroidUtilities.dp(4.0f), this.sideStartY + AndroidUtilities.dp(4.0f));
        if (f != 1.0f) {
            themeDrawable.setAlpha((int) (f * 255.0f));
            themeDrawable.draw(canvas);
            themeDrawable.setAlpha(255);
        } else {
            themeDrawable.draw(canvas);
        }
        if (this.commentLayout == null) {
            return;
        }
        Theme.chat_stickerCommentCountPaint.setColor(getThemedColor("chat_stickerReplyNameText"));
        Theme.chat_stickerCommentCountPaint.setAlpha((int) (f * 255.0f));
        if (this.transitionParams.animateComments) {
            if (this.transitionParams.animateCommentsLayout != null) {
                canvas.save();
                TextPaint textPaint = Theme.chat_stickerCommentCountPaint;
                double d = this.transitionParams.animateChangeProgress;
                Double.isNaN(d);
                double d2 = f;
                Double.isNaN(d2);
                textPaint.setAlpha((int) ((1.0d - d) * 255.0d * d2));
                canvas.translate(this.sideStartX + ((AndroidUtilities.dp(32.0f) - this.transitionParams.animateTotalCommentWidth) / 2), this.sideStartY + AndroidUtilities.dp(30.0f));
                this.transitionParams.animateCommentsLayout.draw(canvas);
                canvas.restore();
            }
            Theme.chat_stickerCommentCountPaint.setAlpha((int) (this.transitionParams.animateChangeProgress * 255.0f));
        }
        canvas.save();
        canvas.translate(this.sideStartX + ((AndroidUtilities.dp(32.0f) - this.totalCommentWidth) / 2), this.sideStartY + AndroidUtilities.dp(30.0f));
        this.commentLayout.draw(canvas);
        canvas.restore();
    }

    public void applyServiceShaderMatrix() {
        applyServiceShaderMatrix(getMeasuredWidth(), this.backgroundHeight, getX(), this.viewTop);
    }

    private void applyServiceShaderMatrix(int i, int i2, float f, float f2) {
        Theme.ResourcesProvider resourcesProvider = this.resourcesProvider;
        if (resourcesProvider != null) {
            resourcesProvider.applyServiceShaderMatrix(i, i2, f, f2);
        } else {
            Theme.applyServiceShaderMatrix(i, i2, f, f2);
        }
    }

    public boolean hasOutboundsContent() {
        AnimatedEmojiSpan.EmojiGroupedSpans emojiGroupedSpans;
        if (getAlpha() != 1.0f) {
            return false;
        }
        if ((this.transitionParams.transitionBotButtons.isEmpty() || !this.transitionParams.animateBotButtonsChanged) && this.botButtons.isEmpty() && this.drawSideButton == 0 && ((emojiGroupedSpans = this.animatedEmojiStack) == null || emojiGroupedSpans.holders.isEmpty())) {
            if (this.currentMessagesGroup != null) {
                return false;
            }
            TransitionParams transitionParams = this.transitionParams;
            if (((!transitionParams.animateReplaceCaptionLayout || transitionParams.animateChangeProgress == 1.0f) && (transitionParams.animateChangeProgress == 1.0f || !transitionParams.animateMessageText)) || transitionParams.animateOutAnimateEmoji == null || this.transitionParams.animateOutAnimateEmoji.holders.isEmpty()) {
                return false;
            }
        }
        return true;
    }

    public void drawOutboundsContent(Canvas canvas) {
        drawAnimatedEmojis(canvas);
        float f = 1.0f;
        if (!this.transitionParams.transitionBotButtons.isEmpty()) {
            TransitionParams transitionParams = this.transitionParams;
            if (transitionParams.animateBotButtonsChanged) {
                drawBotButtons(canvas, transitionParams.transitionBotButtons, 1.0f - this.transitionParams.animateChangeProgress);
            }
        }
        if (!this.botButtons.isEmpty()) {
            ArrayList<BotButton> arrayList = this.botButtons;
            TransitionParams transitionParams2 = this.transitionParams;
            if (transitionParams2.animateBotButtonsChanged) {
                f = transitionParams2.animateChangeProgress;
            }
            drawBotButtons(canvas, arrayList, f);
        }
        drawSideButton(canvas);
    }

    public void drawAnimatedEmojis(Canvas canvas) {
        drawAnimatedEmojiMessageText(canvas);
    }

    private void drawAnimatedEmojiMessageText(Canvas canvas) {
        TransitionParams transitionParams = this.transitionParams;
        if (transitionParams.animateChangeProgress != 1.0f && transitionParams.animateMessageText) {
            canvas.save();
            Theme.MessageDrawable messageDrawable = this.currentBackgroundDrawable;
            if (messageDrawable != null) {
                Rect bounds = messageDrawable.getBounds();
                if (this.currentMessageObject.isOutOwner() && !this.mediaBackground && !this.pinnedBottom) {
                    canvas.clipRect(bounds.left + AndroidUtilities.dp(4.0f), bounds.top + AndroidUtilities.dp(4.0f), bounds.right - AndroidUtilities.dp(10.0f), bounds.bottom - AndroidUtilities.dp(4.0f));
                } else {
                    canvas.clipRect(bounds.left + AndroidUtilities.dp(4.0f), bounds.top + AndroidUtilities.dp(4.0f), bounds.right - AndroidUtilities.dp(4.0f), bounds.bottom - AndroidUtilities.dp(4.0f));
                }
            }
            drawAnimatedEmojiMessageText(canvas, this.transitionParams.animateOutTextBlocks, this.transitionParams.animateOutAnimateEmoji, false, 1.0f - this.transitionParams.animateChangeProgress);
            drawAnimatedEmojiMessageText(canvas, this.currentMessageObject.textLayoutBlocks, this.animatedEmojiStack, true, this.transitionParams.animateChangeProgress);
            canvas.restore();
            return;
        }
        drawAnimatedEmojiMessageText(canvas, this.currentMessageObject.textLayoutBlocks, this.animatedEmojiStack, true, 1.0f);
    }

    private void drawAnimatedEmojiMessageText(Canvas canvas, ArrayList<MessageObject.TextLayoutBlock> arrayList, AnimatedEmojiSpan.EmojiGroupedSpans emojiGroupedSpans, boolean z, float f) {
        if (arrayList == null || arrayList.isEmpty() || f == 0.0f) {
            return;
        }
        int i = this.textY;
        float f2 = i;
        TransitionParams transitionParams = this.transitionParams;
        if (transitionParams.animateText) {
            float f3 = transitionParams.animateFromTextY;
            float f4 = transitionParams.animateChangeProgress;
            f2 = (f3 * (1.0f - f4)) + (i * f4);
        }
        float f5 = f2;
        for (int i2 = 0; i2 < arrayList.size(); i2++) {
            MessageObject.TextLayoutBlock textLayoutBlock = arrayList.get(i2);
            canvas.save();
            canvas.translate(this.textX - (textLayoutBlock.isRtl() ? (int) Math.ceil(this.currentMessageObject.textXOffset) : 0), textLayoutBlock.textYOffset + f5 + this.transitionYOffsetForDrawables);
            getY();
            getY();
            AnimatedEmojiSpan.drawAnimatedEmojis(canvas, textLayoutBlock.textLayout, emojiGroupedSpans, 0.0f, textLayoutBlock.spoilers, 0.0f, 0.0f, 0.0f, f);
            canvas.restore();
        }
    }

    public void drawAnimatedEmojiCaption(Canvas canvas, float f) {
        TransitionParams transitionParams = this.transitionParams;
        if (!transitionParams.animateReplaceCaptionLayout || transitionParams.animateChangeProgress == 1.0f) {
            drawAnimatedEmojiCaption(canvas, this.captionLayout, this.animatedEmojiStack, f);
            return;
        }
        drawAnimatedEmojiCaption(canvas, transitionParams.animateOutCaptionLayout, this.transitionParams.animateOutAnimateEmoji, (1.0f - this.transitionParams.animateChangeProgress) * f);
        drawAnimatedEmojiCaption(canvas, this.captionLayout, this.animatedEmojiStack, f * this.transitionParams.animateChangeProgress);
    }

    /* JADX WARN: Can't wrap try/catch for region: R(8:15|(3:17|(1:19)(2:21|(6:23|30|36|31|34|35)(2:24|(1:28)))|20)|29|30|36|31|34|35) */
    /* JADX WARN: Code restructure failed: missing block: B:32:0x008a, code lost:
        r12 = move-exception;
     */
    /* JADX WARN: Code restructure failed: missing block: B:33:0x008b, code lost:
        org.telegram.messenger.FileLog.e(r12);
     */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void drawAnimatedEmojiCaption(Canvas canvas, Layout layout, AnimatedEmojiSpan.EmojiGroupedSpans emojiGroupedSpans, float f) {
        float f2;
        float f3;
        if (layout != null) {
            if ((this.currentMessageObject.deleted && this.currentPosition != null) || f <= 0.0f) {
                return;
            }
            canvas.save();
            MessageObject.GroupedMessages groupedMessages = this.currentMessagesGroup;
            if (groupedMessages != null) {
                f *= groupedMessages.transitionParams.captionEnterProgress;
            }
            float f4 = f;
            if (f4 == 0.0f) {
                return;
            }
            float f5 = this.captionY;
            float f6 = this.captionX;
            TransitionParams transitionParams = this.transitionParams;
            if (transitionParams.animateBackgroundBoundsInner) {
                if (transitionParams.transformGroupToSingleMessage) {
                    f5 -= getTranslationY();
                    f3 = this.transitionParams.deltaLeft;
                } else if (transitionParams.moveCaption) {
                    float f7 = this.captionX;
                    TransitionParams transitionParams2 = this.transitionParams;
                    float f8 = transitionParams2.animateChangeProgress;
                    float f9 = (f7 * f8) + (transitionParams2.captionFromX * (1.0f - f8));
                    float f10 = (this.captionY * f8) + (transitionParams2.captionFromY * (1.0f - f8));
                    f6 = f9;
                    f2 = f10;
                    canvas.translate(f6, f2);
                    AnimatedEmojiSpan.drawAnimatedEmojis(canvas, layout, emojiGroupedSpans, 0.0f, this.captionSpoilers, 0.0f, 0.0f, f2, f4);
                    canvas.restore();
                } else if (!this.currentMessageObject.isVoice() || !TextUtils.isEmpty(this.currentMessageObject.caption)) {
                    f3 = this.transitionParams.deltaLeft;
                }
                f6 += f3;
            }
            f2 = f5;
            canvas.translate(f6, f2);
            AnimatedEmojiSpan.drawAnimatedEmojis(canvas, layout, emojiGroupedSpans, 0.0f, this.captionSpoilers, 0.0f, 0.0f, f2, f4);
            canvas.restore();
        }
    }

    private void drawSideButton(Canvas canvas) {
        if (this.drawSideButton != 0) {
            if (this.currentMessageObject.isOutOwner()) {
                float dp = this.transitionParams.lastBackgroundLeft - AndroidUtilities.dp(40.0f);
                this.sideStartX = dp;
                MessageObject.GroupedMessages groupedMessages = this.currentMessagesGroup;
                if (groupedMessages != null) {
                    this.sideStartX = dp + (groupedMessages.transitionParams.offsetLeft - this.animationOffsetX);
                }
            } else {
                float dp2 = this.transitionParams.lastBackgroundRight + AndroidUtilities.dp(8.0f);
                this.sideStartX = dp2;
                MessageObject.GroupedMessages groupedMessages2 = this.currentMessagesGroup;
                if (groupedMessages2 != null) {
                    this.sideStartX = dp2 + (groupedMessages2.transitionParams.offsetRight - this.animationOffsetX);
                }
            }
            float dp3 = (this.layoutHeight - AndroidUtilities.dp(41.0f)) + this.transitionParams.deltaBottom;
            this.sideStartY = dp3;
            MessageObject.GroupedMessages groupedMessages3 = this.currentMessagesGroup;
            if (groupedMessages3 != null) {
                MessageObject.GroupedMessages.TransitionParams transitionParams = groupedMessages3.transitionParams;
                float f = dp3 + transitionParams.offsetBottom;
                this.sideStartY = f;
                if (transitionParams.backgroundChangeBounds) {
                    this.sideStartY = f - getTranslationY();
                }
            }
            ReactionsLayoutInBubble reactionsLayoutInBubble = this.reactionsLayoutInBubble;
            if (!reactionsLayoutInBubble.isSmall && reactionsLayoutInBubble.drawServiceShaderBackground) {
                this.sideStartY -= reactionsLayoutInBubble.getCurrentTotalHeight(this.transitionParams.animateChangeProgress);
            }
            if (!this.currentMessageObject.isOutOwner() && this.isRoundVideo && this.isAvatarVisible) {
                float f2 = (AndroidUtilities.roundPlayingMessageSize - AndroidUtilities.roundMessageSize) * 0.7f;
                boolean z = this.isPlayingRound;
                float f3 = z ? f2 : 0.0f;
                TransitionParams transitionParams2 = this.transitionParams;
                if (transitionParams2.animatePlayingRound) {
                    f3 = (z ? transitionParams2.animateChangeProgress : 1.0f - transitionParams2.animateChangeProgress) * f2;
                }
                this.sideStartX -= f3;
            }
            if (this.drawSideButton == 3) {
                if (this.enterTransitionInProgress && !this.currentMessageObject.isVoice()) {
                    return;
                }
                drawCommentButton(canvas, 1.0f);
                return;
            }
            RectF rectF = this.rect;
            float f4 = this.sideStartX;
            rectF.set(f4, this.sideStartY, AndroidUtilities.dp(32.0f) + f4, this.sideStartY + AndroidUtilities.dp(32.0f));
            applyServiceShaderMatrix();
            canvas.drawRoundRect(this.rect, AndroidUtilities.dp(16.0f), AndroidUtilities.dp(16.0f), getThemedPaint(this.sideButtonPressed ? "paintChatActionBackgroundSelected" : "paintChatActionBackground"));
            if (hasGradientService()) {
                canvas.drawRoundRect(this.rect, AndroidUtilities.dp(16.0f), AndroidUtilities.dp(16.0f), Theme.chat_actionBackgroundGradientDarkenPaint);
            }
            if (this.drawSideButton == 2) {
                Drawable themedDrawable = getThemedDrawable("drawableGoIcon");
                if (this.currentMessageObject.isOutOwner()) {
                    BaseCell.setDrawableBounds(themedDrawable, this.sideStartX + AndroidUtilities.dp(10.0f), this.sideStartY + AndroidUtilities.dp(9.0f));
                    canvas.save();
                    canvas.scale(-1.0f, 1.0f, themedDrawable.getBounds().centerX(), themedDrawable.getBounds().centerY());
                } else {
                    BaseCell.setDrawableBounds(themedDrawable, this.sideStartX + AndroidUtilities.dp(12.0f), this.sideStartY + AndroidUtilities.dp(9.0f));
                }
                themedDrawable.draw(canvas);
                if (!this.currentMessageObject.isOutOwner()) {
                    return;
                }
                canvas.restore();
                return;
            }
            Drawable themedDrawable2 = getThemedDrawable("drawableShareIcon");
            BaseCell.setDrawableBounds(themedDrawable2, this.sideStartX + AndroidUtilities.dp(8.0f), this.sideStartY + AndroidUtilities.dp(9.0f));
            themedDrawable2.draw(canvas);
        }
    }

    public void setTimeAlpha(float f) {
        this.timeAlpha = f;
    }

    public float getTimeAlpha() {
        return this.timeAlpha;
    }

    public int getBackgroundDrawableLeft() {
        int i;
        int i2 = 0;
        if (this.currentMessageObject.isOutOwner()) {
            int i3 = this.layoutWidth - this.backgroundWidth;
            if (this.mediaBackground) {
                i2 = AndroidUtilities.dp(9.0f);
            }
            return i3 - i2;
        }
        if (this.isChat && this.isAvatarVisible) {
            i2 = 48;
        }
        int dp = AndroidUtilities.dp(i2 + (!this.mediaBackground ? 3 : 9));
        MessageObject.GroupedMessages groupedMessages = this.currentMessagesGroup;
        if (groupedMessages != null && !groupedMessages.isDocuments && (i = this.currentPosition.leftSpanOffset) != 0) {
            dp += (int) Math.ceil((i / 1000.0f) * getGroupPhotosWidth());
        }
        return (this.mediaBackground || !this.drawPinnedBottom) ? dp : dp + AndroidUtilities.dp(6.0f);
    }

    public int getBackgroundDrawableRight() {
        int dp = this.backgroundWidth - (this.mediaBackground ? 0 : AndroidUtilities.dp(3.0f));
        if (!this.mediaBackground && this.drawPinnedBottom && this.currentMessageObject.isOutOwner()) {
            dp -= AndroidUtilities.dp(6.0f);
        }
        if (!this.mediaBackground && this.drawPinnedBottom && !this.currentMessageObject.isOutOwner()) {
            dp -= AndroidUtilities.dp(6.0f);
        }
        return getBackgroundDrawableLeft() + dp;
    }

    public int getBackgroundDrawableTop() {
        MessageObject.GroupedMessagePosition groupedMessagePosition = this.currentPosition;
        int i = 0;
        int dp = (groupedMessagePosition == null || (groupedMessagePosition.flags & 4) != 0) ? 0 : 0 - AndroidUtilities.dp(3.0f);
        if (!this.drawPinnedTop) {
            i = AndroidUtilities.dp(1.0f);
        }
        return dp + i;
    }

    public int getBackgroundDrawableBottom() {
        int i;
        MessageObject.GroupedMessagePosition groupedMessagePosition = this.currentPosition;
        int i2 = 0;
        if (groupedMessagePosition != null) {
            int i3 = 4;
            i = (groupedMessagePosition.flags & 4) == 0 ? AndroidUtilities.dp(3.0f) + 0 : 0;
            if ((this.currentPosition.flags & 8) == 0) {
                if (this.currentMessageObject.isOutOwner()) {
                    i3 = 3;
                }
                i += AndroidUtilities.dp(i3);
            }
        } else {
            i = 0;
        }
        boolean z = this.drawPinnedBottom;
        if (!z || !this.drawPinnedTop) {
            if (z) {
                i2 = AndroidUtilities.dp(1.0f);
            } else {
                i2 = AndroidUtilities.dp(2.0f);
            }
        }
        return ((getBackgroundDrawableTop() + this.layoutHeight) - i2) + i;
    }

    /* JADX WARN: Removed duplicated region for block: B:34:0x008b  */
    /* JADX WARN: Removed duplicated region for block: B:39:? A[RETURN, SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void drawBackground(Canvas canvas, int i, int i2, int i3, int i4, boolean z, boolean z2, boolean z3, int i5) {
        int i6;
        int i7;
        Theme.MessageDrawable messageDrawable;
        if (this.currentMessageObject.isOutOwner()) {
            if (!this.mediaBackground && !z2) {
                this.currentBackgroundDrawable = (Theme.MessageDrawable) getThemedDrawable(z3 ? "drawableMsgOutSelected" : "drawableMsgOut");
            } else {
                this.currentBackgroundDrawable = (Theme.MessageDrawable) getThemedDrawable(z3 ? "drawableMsgOutMediaSelected" : "drawableMsgOutMedia");
            }
        } else if (!this.mediaBackground && !z2) {
            this.currentBackgroundDrawable = (Theme.MessageDrawable) getThemedDrawable(z3 ? "drawableMsgInSelected" : "drawableMsgIn");
        } else {
            this.currentBackgroundDrawable = (Theme.MessageDrawable) getThemedDrawable(z3 ? "drawableMsgInMediaSelected" : "drawableMsgInMedia");
        }
        int i8 = this.parentWidth;
        int i9 = this.parentHeight;
        if (i9 == 0) {
            i8 = getParentWidth();
            i9 = AndroidUtilities.displaySize.y;
            if (getParent() instanceof View) {
                View view = (View) getParent();
                int measuredWidth = view.getMeasuredWidth();
                i6 = view.getMeasuredHeight();
                i7 = measuredWidth;
                messageDrawable = this.currentBackgroundDrawable;
                if (messageDrawable != null) {
                    return;
                }
                messageDrawable.setTop(i5, i7, i6, (int) this.parentViewTopOffset, this.blurredViewTopOffset, this.blurredViewBottomOffset, z, z2);
                Drawable shadowDrawable = this.currentBackgroundDrawable.getShadowDrawable();
                if (shadowDrawable != null) {
                    shadowDrawable.setAlpha((int) (getAlpha() * 255.0f));
                    shadowDrawable.setBounds(i, i2, i3, i4);
                    shadowDrawable.draw(canvas);
                    shadowDrawable.setAlpha(255);
                }
                this.currentBackgroundDrawable.setAlpha((int) (getAlpha() * 255.0f));
                this.currentBackgroundDrawable.setBounds(i, i2, i3, i4);
                this.currentBackgroundDrawable.drawCached(canvas, this.backgroundCacheParams);
                this.currentBackgroundDrawable.setAlpha(255);
                return;
            }
        }
        i7 = i8;
        i6 = i9;
        messageDrawable = this.currentBackgroundDrawable;
        if (messageDrawable != null) {
        }
    }

    public boolean hasNameLayout() {
        if (!this.drawNameLayout || this.nameLayout == null) {
            if (this.drawForwardedName) {
                StaticLayout[] staticLayoutArr = this.forwardedNameLayout;
                if (staticLayoutArr[0] != null && staticLayoutArr[1] != null) {
                    MessageObject.GroupedMessagePosition groupedMessagePosition = this.currentPosition;
                    if (groupedMessagePosition == null) {
                        return true;
                    }
                    if (groupedMessagePosition.minY == 0 && groupedMessagePosition.minX == 0) {
                        return true;
                    }
                }
            }
            return this.replyNameLayout != null;
        }
        return true;
    }

    public boolean isDrawNameLayout() {
        return this.drawNameLayout && this.nameLayout != null;
    }

    public boolean isAdminLayoutChanged() {
        return !TextUtils.equals(this.lastPostAuthor, this.currentMessageObject.messageOwner.post_author);
    }

    /* JADX WARN: Removed duplicated region for block: B:172:0x04aa  */
    /* JADX WARN: Removed duplicated region for block: B:177:0x04cc  */
    /* JADX WARN: Removed duplicated region for block: B:178:0x04ce  */
    /* JADX WARN: Removed duplicated region for block: B:181:0x04d9  */
    /* JADX WARN: Removed duplicated region for block: B:185:0x04f6  */
    /* JADX WARN: Removed duplicated region for block: B:188:0x04fc  */
    /* JADX WARN: Removed duplicated region for block: B:298:0x07bb  */
    /* JADX WARN: Removed duplicated region for block: B:306:0x0813  */
    /* JADX WARN: Removed duplicated region for block: B:309:0x081a  */
    /* JADX WARN: Removed duplicated region for block: B:342:0x08fd  */
    /* JADX WARN: Removed duplicated region for block: B:430:0x0c04  */
    /* JADX WARN: Removed duplicated region for block: B:437:? A[RETURN, SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void drawNamesLayout(Canvas canvas, float f) {
        int i;
        int i2;
        boolean z;
        boolean z2;
        float f2;
        String str;
        boolean z3;
        int i3;
        float f3;
        MessageObject.GroupedMessagePosition groupedMessagePosition;
        float f4;
        boolean z4;
        int i4;
        float f5;
        float f6;
        float f7;
        int i5;
        float f8;
        int i6;
        float f9;
        float f10;
        float f11;
        float f12;
        MessageObject.GroupedMessagePosition groupedMessagePosition2;
        MessageObject.GroupedMessages groupedMessages;
        long elapsedRealtime = SystemClock.elapsedRealtime();
        long j = elapsedRealtime - this.lastNamesAnimationTime;
        if (j > 17) {
            j = 17;
        }
        this.lastNamesAnimationTime = elapsedRealtime;
        if (!this.currentMessageObject.deleted || (groupedMessages = this.currentMessagesGroup) == null || groupedMessages.messages.size() < 1) {
            if (f != 1.0f) {
                this.rect.set(0.0f, 0.0f, getMaxNameWidth(), getMeasuredHeight());
                i = canvas.saveLayerAlpha(this.rect, (int) (255.0f * f), 31);
            } else {
                i = Integer.MIN_VALUE;
            }
            float max = Math.max(0.0f, Math.min(1.0f, this.currentMessageObject.type == 5 ? 1.0f - ((this.photoImage.getImageWidth() - AndroidUtilities.roundMessageSize) / (AndroidUtilities.roundPlayingMessageSize - AndroidUtilities.roundMessageSize)) : 1.0f));
            float f13 = 17.0f;
            if (this.drawNameLayout && this.nameLayout != null) {
                canvas.save();
                if (this.currentMessageObject.shouldDrawWithoutBackground()) {
                    Theme.chat_namePaint.setColor(getThemedColor("chat_stickerNameText"));
                    if (this.currentMessageObject.isOutOwner()) {
                        this.nameX = AndroidUtilities.dp(28.0f);
                    } else {
                        this.nameX = this.backgroundDrawableLeft + this.transitionParams.deltaLeft + this.backgroundDrawableRight + AndroidUtilities.dp(22.0f);
                    }
                    this.nameY = this.layoutHeight - AndroidUtilities.dp(38.0f);
                    float f14 = (!this.currentMessageObject.isOut() || (!this.checkBoxVisible && !this.checkBoxAnimationInProgress)) ? 1.0f : 1.0f - this.checkBoxAnimationProgress;
                    this.rect.set(((int) this.nameX) - AndroidUtilities.dp(12.0f), ((int) this.nameY) - AndroidUtilities.dp(5.0f), ((int) this.nameX) + AndroidUtilities.dp(12.0f) + this.nameWidth, ((int) this.nameY) + AndroidUtilities.dp(22.0f));
                    int alpha = getThemedPaint("paintChatActionBackground").getAlpha();
                    getThemedPaint("paintChatActionBackground").setAlpha((int) (alpha * f14 * max));
                    applyServiceShaderMatrix();
                    canvas.drawRoundRect(this.rect, AndroidUtilities.dp(6.0f), AndroidUtilities.dp(6.0f), getThemedPaint("paintChatActionBackground"));
                    if (hasGradientService()) {
                        int alpha2 = Theme.chat_actionBackgroundGradientDarkenPaint.getAlpha();
                        Theme.chat_actionBackgroundGradientDarkenPaint.setAlpha((int) (alpha2 * this.timeAlpha * max));
                        canvas.drawRoundRect(this.rect, AndroidUtilities.dp(6.0f), AndroidUtilities.dp(6.0f), Theme.chat_actionBackgroundGradientDarkenPaint);
                        Theme.chat_actionBackgroundGradientDarkenPaint.setAlpha(alpha2);
                    }
                    if (this.viaSpan1 != null || this.viaSpan2 != null) {
                        int alpha3 = (((int) (Color.alpha(getThemedColor("chat_stickerViaBotNameText")) * f14)) << 24) | (getThemedColor("chat_stickerViaBotNameText") & 16777215);
                        TypefaceSpan typefaceSpan = this.viaSpan1;
                        if (typefaceSpan != null) {
                            typefaceSpan.setColor(alpha3);
                        }
                        TypefaceSpan typefaceSpan2 = this.viaSpan2;
                        if (typefaceSpan2 != null) {
                            typefaceSpan2.setColor(alpha3);
                        }
                    }
                    this.nameX -= this.nameOffsetX;
                    getThemedPaint("paintChatActionBackground").setAlpha(alpha);
                } else {
                    if (this.mediaBackground || this.currentMessageObject.isOutOwner()) {
                        this.nameX = (((this.backgroundDrawableLeft + this.transitionParams.deltaLeft) + AndroidUtilities.dp(11.0f)) - this.nameOffsetX) + getExtraTextX();
                    } else {
                        this.nameX = (((this.backgroundDrawableLeft + this.transitionParams.deltaLeft) + AndroidUtilities.dp((this.mediaBackground || !this.drawPinnedBottom) ? 17.0f : 11.0f)) - this.nameOffsetX) + getExtraTextX();
                    }
                    if (this.currentUser != null) {
                        Theme.MessageDrawable messageDrawable = this.currentBackgroundDrawable;
                        if (messageDrawable != null && messageDrawable.hasGradient()) {
                            Theme.chat_namePaint.setColor(getThemedColor("chat_messageTextOut"));
                        } else {
                            Theme.chat_namePaint.setColor(getThemedColor(AvatarDrawable.getNameColorNameForId(this.currentUser.id)));
                        }
                    } else if (this.currentChat != null) {
                        if (this.currentMessageObject.isOutOwner() && ChatObject.isChannel(this.currentChat)) {
                            Theme.MessageDrawable messageDrawable2 = this.currentBackgroundDrawable;
                            if (messageDrawable2 != null && messageDrawable2.hasGradient()) {
                                Theme.chat_namePaint.setColor(getThemedColor("chat_messageTextOut"));
                            } else {
                                Theme.chat_namePaint.setColor(getThemedColor("chat_outForwardedNameText"));
                            }
                        } else if (ChatObject.isChannel(this.currentChat) && !this.currentChat.megagroup) {
                            Theme.chat_namePaint.setColor(Theme.changeColorAccent(getThemedColor(AvatarDrawable.getNameColorNameForId(5L))));
                        } else if (this.currentMessageObject.isOutOwner()) {
                            Theme.chat_namePaint.setColor(getThemedColor("chat_outForwardedNameText"));
                        } else {
                            Theme.chat_namePaint.setColor(getThemedColor(AvatarDrawable.getNameColorNameForId(this.currentChat.id)));
                        }
                    } else {
                        Theme.chat_namePaint.setColor(getThemedColor(AvatarDrawable.getNameColorNameForId(0L)));
                    }
                    this.nameY = AndroidUtilities.dp(this.drawPinnedTop ? 9.0f : 10.0f);
                    if (this.viaSpan1 != null || this.viaSpan2 != null) {
                        int themedColor = getThemedColor(this.currentMessageObject.isOutOwner() ? "chat_outViaBotNameText" : "chat_inViaBotNameText");
                        TypefaceSpan typefaceSpan3 = this.viaSpan1;
                        if (typefaceSpan3 != null) {
                            typefaceSpan3.setColor(themedColor);
                        }
                        TypefaceSpan typefaceSpan4 = this.viaSpan2;
                        if (typefaceSpan4 != null) {
                            typefaceSpan4.setColor(themedColor);
                        }
                    }
                }
                MessageObject.GroupedMessages groupedMessages2 = this.currentMessagesGroup;
                if (groupedMessages2 != null) {
                    MessageObject.GroupedMessages.TransitionParams transitionParams = groupedMessages2.transitionParams;
                    if (transitionParams.backgroundChangeBounds) {
                        this.nameX += transitionParams.offsetLeft;
                        this.nameY += transitionParams.offsetTop - getTranslationY();
                    }
                }
                this.nameX += this.animationOffsetX;
                float f15 = this.nameY;
                TransitionParams transitionParams2 = this.transitionParams;
                this.nameY = f15 + transitionParams2.deltaTop;
                if (!transitionParams2.animateSign) {
                    f8 = this.nameX;
                } else {
                    f8 = this.transitionParams.animateNameX + ((this.nameX - this.transitionParams.animateNameX) * this.transitionParams.animateChangeProgress);
                }
                canvas.translate(f8, this.nameY);
                this.nameLayout.draw(canvas);
                canvas.restore();
                if (this.adminLayout != null) {
                    if (this.currentMessageObject.shouldDrawWithoutBackground()) {
                        i6 = getThemedColor("chat_stickerReplyNameText");
                    } else if (this.currentMessageObject.isOutOwner()) {
                        i6 = getThemedColor(isDrawSelectionBackground() ? "chat_outAdminSelectedText" : "chat_outAdminText");
                    } else {
                        i6 = getThemedColor(isDrawSelectionBackground() ? "chat_adminSelectedText" : "chat_adminText");
                    }
                    Theme.chat_adminPaint.setColor(i6);
                    canvas.save();
                    MessageObject.GroupedMessages groupedMessages3 = this.currentMessagesGroup;
                    if (groupedMessages3 != null && !groupedMessages3.isDocuments) {
                        int groupPhotosWidth = getGroupPhotosWidth();
                        int i7 = 0;
                        int i8 = 0;
                        while (i7 < this.currentMessagesGroup.posArray.size()) {
                            if (this.currentMessagesGroup.posArray.get(i7).minY != 0) {
                                break;
                            }
                            double d = i8;
                            int i9 = i;
                            double ceil = Math.ceil(((groupedMessagePosition2.pw + groupedMessagePosition2.leftSpanOffset) / 1000.0f) * groupPhotosWidth);
                            Double.isNaN(d);
                            i8 = (int) (d + ceil);
                            i7++;
                            i = i9;
                        }
                        i2 = i;
                        if (!this.mediaBackground && this.currentMessageObject.isOutOwner()) {
                            f12 = (this.backgroundDrawableLeft + i8) - AndroidUtilities.dp(17.0f);
                            f11 = this.adminLayout.getLineWidth(0);
                        } else {
                            f12 = (this.backgroundDrawableLeft + i8) - AndroidUtilities.dp(11.0f);
                            f11 = this.adminLayout.getLineWidth(0);
                        }
                        f9 = (f12 - f11) - (getExtraTextX() + AndroidUtilities.dp(8.0f));
                        if (!this.currentMessageObject.isOutOwner()) {
                            f10 = AndroidUtilities.dp(48.0f);
                        }
                        canvas.translate(f9, this.nameY + AndroidUtilities.dp(0.5f));
                        if (this.transitionParams.animateSign) {
                            Theme.chat_adminPaint.setAlpha((int) (Color.alpha(i6) * this.transitionParams.animateChangeProgress));
                        }
                        this.adminLayout.draw(canvas);
                        canvas.restore();
                        z = this.drawForwardedName;
                        z2 = this.replyNameLayout != null;
                        StaticLayout[] staticLayoutArr = this.forwardedNameLayout;
                        int i10 = this.forwardedNameWidth;
                        if (!this.transitionParams.animateForwardedLayout) {
                            f2 = 1.0f;
                        } else if (!this.currentMessageObject.needDrawForwarded()) {
                            TransitionParams transitionParams3 = this.transitionParams;
                            staticLayoutArr = transitionParams3.animatingForwardedNameLayout;
                            f2 = 1.0f - transitionParams3.animateChangeProgress;
                            i10 = transitionParams3.animateForwardNameWidth;
                            z = true;
                        } else {
                            f2 = this.transitionParams.animateChangeProgress;
                        }
                        if (z || staticLayoutArr[0] == null || staticLayoutArr[1] == null || !((groupedMessagePosition = this.currentPosition) == null || (groupedMessagePosition.minY == 0 && groupedMessagePosition.minX == 0))) {
                            str = "chat_stickerReplyNameText";
                            z3 = true;
                        } else {
                            MessageObject messageObject = this.currentMessageObject;
                            if (messageObject.type == 5 || messageObject.isAnyKindOfSticker()) {
                                Theme.chat_forwardNamePaint.setColor(getThemedColor("chat_stickerReplyNameText"));
                                if (this.currentMessageObject.needDrawForwarded()) {
                                    if (this.currentMessageObject.isOutOwner()) {
                                        f6 = AndroidUtilities.dp(23.0f);
                                        this.forwardNameX = f6;
                                    } else {
                                        f6 = this.backgroundDrawableLeft + this.backgroundDrawableRight + AndroidUtilities.dp(17.0f);
                                        this.forwardNameX = f6;
                                    }
                                } else {
                                    f6 = this.transitionParams.animateForwardNameX;
                                }
                                if ((this.currentMessageObject.isOutOwner() && this.currentMessageObject.type == 5 && this.transitionParams.animatePlayingRound) || this.isPlayingRound) {
                                    f6 -= AndroidUtilities.dp(78.0f) * (this.isPlayingRound ? this.transitionParams.animateChangeProgress : 1.0f - this.transitionParams.animateChangeProgress);
                                }
                                this.forwardNameY = AndroidUtilities.dp(12.0f);
                                int dp = i10 + AndroidUtilities.dp(14.0f);
                                if (z2) {
                                    int i11 = (int) f6;
                                    str = "chat_stickerReplyNameText";
                                    this.rect.set(i11 - AndroidUtilities.dp(7.0f), this.forwardNameY - AndroidUtilities.dp(6.0f), (i11 - AndroidUtilities.dp(7.0f)) + Math.max(dp, Math.max(this.replyNameWidth, this.replyTextWidth) + AndroidUtilities.dp(14.0f)), this.forwardNameY + AndroidUtilities.dp(38.0f) + AndroidUtilities.dp(41.0f));
                                    z3 = false;
                                } else {
                                    str = "chat_stickerReplyNameText";
                                    int i12 = (int) f6;
                                    this.rect.set(i12 - AndroidUtilities.dp(7.0f), this.forwardNameY - AndroidUtilities.dp(6.0f), (i12 - AndroidUtilities.dp(7.0f)) + dp, this.forwardNameY + AndroidUtilities.dp(38.0f));
                                    z3 = true;
                                }
                                applyServiceShaderMatrix();
                                int i13 = -1;
                                if (f2 != 1.0f || max != 1.0f) {
                                    i13 = getThemedPaint("paintChatActionBackground").getAlpha();
                                    getThemedPaint("paintChatActionBackground").setAlpha((int) (i13 * f2 * max));
                                }
                                canvas.drawRoundRect(this.rect, AndroidUtilities.dp(6.0f), AndroidUtilities.dp(6.0f), getThemedPaint("paintChatActionBackground"));
                                if (hasGradientService()) {
                                    if (f2 == 1.0f && max == 1.0f) {
                                        i5 = -1;
                                    } else {
                                        i5 = Theme.chat_actionBackgroundGradientDarkenPaint.getAlpha();
                                        Theme.chat_actionBackgroundGradientDarkenPaint.setAlpha((int) (i5 * f2 * max));
                                    }
                                    f7 = f6;
                                    canvas.drawRoundRect(this.rect, AndroidUtilities.dp(6.0f), AndroidUtilities.dp(6.0f), Theme.chat_actionBackgroundGradientDarkenPaint);
                                } else {
                                    f7 = f6;
                                    i5 = -1;
                                }
                                if (i13 >= 0) {
                                    getThemedPaint("paintChatActionBackground").setAlpha(i13);
                                }
                                if (i5 >= 0) {
                                    Theme.chat_actionBackgroundGradientDarkenPaint.setAlpha(i5);
                                }
                                f4 = f7;
                            } else {
                                this.forwardNameY = AndroidUtilities.dp((this.drawNameLayout ? 19 : 0) + 10);
                                if (this.currentMessageObject.isOutOwner()) {
                                    if (this.hasPsaHint) {
                                        Theme.chat_forwardNamePaint.setColor(getThemedColor("chat_outPsaNameText"));
                                    } else {
                                        Theme.chat_forwardNamePaint.setColor(getThemedColor("chat_outForwardedNameText"));
                                    }
                                    if (this.currentMessageObject.needDrawForwarded()) {
                                        float dp2 = this.backgroundDrawableLeft + AndroidUtilities.dp(11.0f) + getExtraTextX();
                                        this.forwardNameX = dp2;
                                        f4 = dp2 + this.transitionParams.deltaLeft;
                                    } else {
                                        f4 = this.transitionParams.animateForwardNameX;
                                    }
                                } else {
                                    if (this.hasPsaHint) {
                                        Theme.chat_forwardNamePaint.setColor(getThemedColor("chat_inPsaNameText"));
                                    } else {
                                        Theme.chat_forwardNamePaint.setColor(getThemedColor("chat_inForwardedNameText"));
                                    }
                                    if (this.currentMessageObject.needDrawForwarded()) {
                                        if (this.mediaBackground) {
                                            f4 = this.backgroundDrawableLeft + AndroidUtilities.dp(11.0f) + getExtraTextX();
                                            this.forwardNameX = f4;
                                        } else {
                                            int i14 = this.backgroundDrawableLeft;
                                            if (this.drawPinnedBottom) {
                                                f13 = 11.0f;
                                            }
                                            f4 = i14 + AndroidUtilities.dp(f13) + getExtraTextX();
                                            this.forwardNameX = f4;
                                        }
                                    } else {
                                        f4 = this.transitionParams.animateForwardNameX;
                                    }
                                }
                                str = "chat_stickerReplyNameText";
                                z3 = true;
                            }
                            if (this.transitionParams.animateForwardedLayout && this.currentBackgroundDrawable != null && this.currentMessagesGroup == null) {
                                MessageObject messageObject2 = this.currentMessageObject;
                                if (messageObject2.type != 5 && !messageObject2.isAnyKindOfSticker()) {
                                    Rect bounds = this.currentBackgroundDrawable.getBounds();
                                    canvas.save();
                                    if (this.currentMessageObject.isOutOwner() && !this.mediaBackground && !this.pinnedBottom) {
                                        canvas.clipRect(bounds.left + AndroidUtilities.dp(4.0f), bounds.top + AndroidUtilities.dp(4.0f), bounds.right - AndroidUtilities.dp(10.0f), bounds.bottom - AndroidUtilities.dp(4.0f));
                                    } else {
                                        canvas.clipRect(bounds.left + AndroidUtilities.dp(4.0f), bounds.top + AndroidUtilities.dp(4.0f), bounds.right - AndroidUtilities.dp(4.0f), bounds.bottom - AndroidUtilities.dp(4.0f));
                                    }
                                    z4 = true;
                                    for (i4 = 0; i4 < 2; i4++) {
                                        canvas.save();
                                        canvas.translate(f4 - this.forwardNameOffsetX[i4], this.forwardNameY + (AndroidUtilities.dp(16.0f) * i4));
                                        if (f2 != 1.0f || max != 1.0f) {
                                            int alpha4 = staticLayoutArr[i4].getPaint().getAlpha();
                                            staticLayoutArr[i4].getPaint().setAlpha((int) (alpha4 * f2 * max));
                                            staticLayoutArr[i4].draw(canvas);
                                            staticLayoutArr[i4].getPaint().setAlpha(alpha4);
                                        } else {
                                            staticLayoutArr[i4].draw(canvas);
                                        }
                                        canvas.restore();
                                    }
                                    if (z4) {
                                        canvas.restore();
                                    }
                                    if (this.hasPsaHint) {
                                        if (this.psaButtonVisible || this.psaButtonProgress > 0.0f) {
                                            Drawable drawable = Theme.chat_psaHelpDrawable[this.currentMessageObject.isOutOwner() ? 1 : 0];
                                            int intrinsicWidth = this.psaHelpX + (drawable.getIntrinsicWidth() / 2);
                                            int intrinsicHeight = this.psaHelpY + (drawable.getIntrinsicHeight() / 2);
                                            if (this.psaButtonVisible) {
                                                float f16 = this.psaButtonProgress;
                                                if (f16 < 1.0f) {
                                                    f5 = AnimationProperties.overshootInterpolator.getInterpolation(f16);
                                                    int intrinsicWidth2 = ((int) (drawable.getIntrinsicWidth() * f5)) / 2;
                                                    int intrinsicHeight2 = ((int) (drawable.getIntrinsicHeight() * f5)) / 2;
                                                    drawable.setBounds(intrinsicWidth - intrinsicWidth2, intrinsicHeight - intrinsicHeight2, intrinsicWidth + intrinsicWidth2, intrinsicHeight + intrinsicHeight2);
                                                    drawable.draw(canvas);
                                                    if (Build.VERSION.SDK_INT >= 21 && this.selectorDrawable[0] != null && this.selectorDrawableMaskType[0] == 3) {
                                                        canvas.save();
                                                        float f17 = this.psaButtonProgress;
                                                        canvas.scale(f17, f17, this.selectorDrawable[0].getBounds().centerX(), this.selectorDrawable[0].getBounds().centerY());
                                                        this.selectorDrawable[0].draw(canvas);
                                                        canvas.restore();
                                                    }
                                                }
                                            }
                                            f5 = this.psaButtonProgress;
                                            int intrinsicWidth22 = ((int) (drawable.getIntrinsicWidth() * f5)) / 2;
                                            int intrinsicHeight22 = ((int) (drawable.getIntrinsicHeight() * f5)) / 2;
                                            drawable.setBounds(intrinsicWidth - intrinsicWidth22, intrinsicHeight - intrinsicHeight22, intrinsicWidth + intrinsicWidth22, intrinsicHeight + intrinsicHeight22);
                                            drawable.draw(canvas);
                                            if (Build.VERSION.SDK_INT >= 21) {
                                                canvas.save();
                                                float f172 = this.psaButtonProgress;
                                                canvas.scale(f172, f172, this.selectorDrawable[0].getBounds().centerX(), this.selectorDrawable[0].getBounds().centerY());
                                                this.selectorDrawable[0].draw(canvas);
                                                canvas.restore();
                                            }
                                        }
                                        boolean z5 = this.psaButtonVisible;
                                        if (z5) {
                                            float f18 = this.psaButtonProgress;
                                            if (f18 < 1.0f) {
                                                this.psaButtonProgress = f18 + (((float) j) / 180.0f);
                                                invalidate();
                                                if (this.psaButtonProgress > 1.0f) {
                                                    this.psaButtonProgress = 1.0f;
                                                    setInvalidatesParent(false);
                                                }
                                            }
                                        }
                                        if (!z5) {
                                            float f19 = this.psaButtonProgress;
                                            if (f19 > 0.0f) {
                                                this.psaButtonProgress = f19 - (((float) j) / 180.0f);
                                                invalidate();
                                                if (this.psaButtonProgress < 0.0f) {
                                                    this.psaButtonProgress = 0.0f;
                                                    setInvalidatesParent(false);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            z4 = false;
                            while (i4 < 2) {
                            }
                            if (z4) {
                            }
                            if (this.hasPsaHint) {
                            }
                        }
                        if (z2) {
                            float f20 = this.replyStartX;
                            int i15 = this.replyStartY;
                            float f21 = i15;
                            MessageObject.GroupedMessages groupedMessages4 = this.currentMessagesGroup;
                            if (groupedMessages4 != null) {
                                MessageObject.GroupedMessages.TransitionParams transitionParams4 = groupedMessages4.transitionParams;
                                if (transitionParams4.backgroundChangeBounds) {
                                    f20 += transitionParams4.offsetLeft;
                                }
                            }
                            TransitionParams transitionParams5 = this.transitionParams;
                            if (transitionParams5.animateBackgroundBoundsInner) {
                                if (this.isRoundVideo) {
                                    f3 = transitionParams5.deltaLeft + transitionParams5.deltaRight;
                                } else {
                                    f3 = transitionParams5.deltaLeft;
                                }
                                f20 += f3;
                                float f22 = transitionParams5.animateChangeProgress;
                                f21 = (i15 * f22) + (transitionParams5.animateFromReplyY * (1.0f - f22));
                            }
                            if (this.currentMessageObject.shouldDrawWithoutBackground()) {
                                Theme.chat_replyLinePaint.setColor(getThemedColor("chat_stickerReplyLine"));
                                Theme.chat_replyLinePaint.setAlpha((int) (Theme.chat_replyLinePaint.getAlpha() * this.timeAlpha * max));
                                Theme.chat_replyNamePaint.setColor(getThemedColor(str));
                                Theme.chat_replyNamePaint.setAlpha((int) (Theme.chat_replyNamePaint.getAlpha() * this.timeAlpha * max));
                                Theme.chat_replyTextPaint.setColor(getThemedColor("chat_stickerReplyMessageText"));
                                Theme.chat_replyTextPaint.setAlpha((int) (Theme.chat_replyTextPaint.getAlpha() * this.timeAlpha * max));
                                if (z3) {
                                    int i16 = (int) f20;
                                    this.rect.set(i16 - AndroidUtilities.dp(7.0f), f21 - AndroidUtilities.dp(6.0f), (i16 - AndroidUtilities.dp(7.0f)) + Math.max(this.replyNameWidth, this.replyTextWidth) + AndroidUtilities.dp(14.0f), AndroidUtilities.dp(41.0f) + f21);
                                    applyServiceShaderMatrix();
                                    int alpha5 = getThemedPaint("paintChatActionBackground").getAlpha();
                                    getThemedPaint("paintChatActionBackground").setAlpha((int) (alpha5 * this.timeAlpha * max));
                                    canvas.drawRoundRect(this.rect, AndroidUtilities.dp(6.0f), AndroidUtilities.dp(6.0f), getThemedPaint("paintChatActionBackground"));
                                    getThemedPaint("paintChatActionBackground").setAlpha(alpha5);
                                    if (hasGradientService()) {
                                        int alpha6 = Theme.chat_actionBackgroundGradientDarkenPaint.getAlpha();
                                        Theme.chat_actionBackgroundGradientDarkenPaint.setAlpha((int) (alpha6 * this.timeAlpha * max));
                                        canvas.drawRoundRect(this.rect, AndroidUtilities.dp(6.0f), AndroidUtilities.dp(6.0f), Theme.chat_actionBackgroundGradientDarkenPaint);
                                        Theme.chat_actionBackgroundGradientDarkenPaint.setAlpha(alpha6);
                                    }
                                }
                            } else if (this.currentMessageObject.isOutOwner()) {
                                Theme.chat_replyLinePaint.setColor(getThemedColor("chat_outReplyLine"));
                                Theme.chat_replyNamePaint.setColor(getThemedColor("chat_outReplyNameText"));
                                if (this.currentMessageObject.hasValidReplyMessageObject()) {
                                    MessageObject messageObject3 = this.currentMessageObject.replyMessageObject;
                                    if (messageObject3.type == 0 || !TextUtils.isEmpty(messageObject3.caption)) {
                                        TLRPC$MessageMedia tLRPC$MessageMedia = this.currentMessageObject.replyMessageObject.messageOwner.media;
                                        if (!(tLRPC$MessageMedia instanceof TLRPC$TL_messageMediaGame) && !(tLRPC$MessageMedia instanceof TLRPC$TL_messageMediaInvoice)) {
                                            Theme.chat_replyTextPaint.setColor(getThemedColor("chat_outReplyMessageText"));
                                        }
                                    }
                                }
                                Theme.chat_replyTextPaint.setColor(getThemedColor(isDrawSelectionBackground() ? "chat_outReplyMediaMessageSelectedText" : "chat_outReplyMediaMessageText"));
                            } else {
                                Theme.chat_replyLinePaint.setColor(getThemedColor("chat_inReplyLine"));
                                Theme.chat_replyNamePaint.setColor(getThemedColor("chat_inReplyNameText"));
                                if (this.currentMessageObject.hasValidReplyMessageObject()) {
                                    MessageObject messageObject4 = this.currentMessageObject.replyMessageObject;
                                    if (messageObject4.type == 0 || !TextUtils.isEmpty(messageObject4.caption)) {
                                        TLRPC$MessageMedia tLRPC$MessageMedia2 = this.currentMessageObject.replyMessageObject.messageOwner.media;
                                        if (!(tLRPC$MessageMedia2 instanceof TLRPC$TL_messageMediaGame) && !(tLRPC$MessageMedia2 instanceof TLRPC$TL_messageMediaInvoice)) {
                                            Theme.chat_replyTextPaint.setColor(getThemedColor("chat_inReplyMessageText"));
                                        }
                                    }
                                }
                                Theme.chat_replyTextPaint.setColor(getThemedColor(isDrawSelectionBackground() ? "chat_inReplyMediaMessageSelectedText" : "chat_inReplyMediaMessageText"));
                            }
                            this.forwardNameX = (f20 - this.replyTextOffset) + AndroidUtilities.dp((this.needReplyImage ? 44 : 0) + 10);
                            MessageObject.GroupedMessagePosition groupedMessagePosition3 = this.currentPosition;
                            if ((groupedMessagePosition3 == null || (groupedMessagePosition3.minY == 0 && groupedMessagePosition3.minX == 0)) && (!this.enterTransitionInProgress || this.currentMessageObject.isVoice())) {
                                RectF rectF = AndroidUtilities.rectTmp;
                                rectF.set(f20, f21, AndroidUtilities.dp(2.0f) + f20, AndroidUtilities.dp(35.0f) + f21);
                                canvas.drawRoundRect(rectF, AndroidUtilities.dp(1.0f), AndroidUtilities.dp(1.0f), Theme.chat_replyLinePaint);
                                if (this.needReplyImage) {
                                    this.replyImageReceiver.setAlpha(max);
                                    this.replyImageReceiver.setImageCoords(AndroidUtilities.dp(10.0f) + f20, f21, AndroidUtilities.dp(35.0f), AndroidUtilities.dp(35.0f));
                                    this.replyImageReceiver.draw(canvas);
                                }
                                if (this.replyNameLayout != null) {
                                    canvas.save();
                                    canvas.translate((f20 - this.replyNameOffset) + AndroidUtilities.dp((this.needReplyImage ? 44 : 0) + 10), f21);
                                    this.replyNameLayout.draw(canvas);
                                    canvas.restore();
                                }
                                if (this.replyTextLayout != null) {
                                    canvas.save();
                                    canvas.translate(this.forwardNameX, f21 + AndroidUtilities.dp(19.0f));
                                    SpoilerEffect.renderWithRipple(this, this.invalidateSpoilersParent, (!this.currentMessageObject.isOut() || ChatObject.isChannelAndNotMegaGroup(this.currentMessageObject.getChatId(), this.currentAccount)) ? this.replyTextLayout.getPaint().getColor() : getThemedColor("chat_outTimeText"), -AndroidUtilities.dp(2.0f), this.spoilersPatchedReplyTextLayout, this.replyTextLayout, this.replySpoilers, canvas, false);
                                    AnimatedEmojiSpan.drawAnimatedEmojis(canvas, this.replyTextLayout, this.animatedEmojiReplyStack, 0.0f, this.replySpoilers, 0.0f, 0.0f, 0.0f, f);
                                    canvas.restore();
                                }
                            }
                        }
                        i3 = i2;
                        if (i3 == Integer.MIN_VALUE) {
                            return;
                        }
                        canvas.restoreToCount(i3);
                        return;
                    }
                    i2 = i;
                    if (this.currentMessageObject.shouldDrawWithoutBackground()) {
                        if (this.currentMessageObject.isOutOwner()) {
                            f9 = AndroidUtilities.dp(28.0f) + this.nameWidth;
                            f10 = this.adminLayout.getLineWidth(0);
                        } else {
                            f9 = this.backgroundDrawableLeft + this.transitionParams.deltaLeft + this.backgroundDrawableRight + AndroidUtilities.dp(22.0f) + this.nameWidth;
                            f10 = this.adminLayout.getLineWidth(0);
                        }
                    } else if (!this.mediaBackground && this.currentMessageObject.isOutOwner()) {
                        f9 = (this.backgroundDrawableLeft + this.backgroundDrawableRight) - AndroidUtilities.dp(17.0f);
                        f10 = this.adminLayout.getLineWidth(0);
                    } else {
                        f9 = (this.backgroundDrawableLeft + this.backgroundDrawableRight) - AndroidUtilities.dp(11.0f);
                        f10 = this.adminLayout.getLineWidth(0);
                    }
                    f9 -= f10;
                    canvas.translate(f9, this.nameY + AndroidUtilities.dp(0.5f));
                    if (this.transitionParams.animateSign) {
                    }
                    this.adminLayout.draw(canvas);
                    canvas.restore();
                    z = this.drawForwardedName;
                    if (this.replyNameLayout != null) {
                    }
                    StaticLayout[] staticLayoutArr2 = this.forwardedNameLayout;
                    int i102 = this.forwardedNameWidth;
                    if (!this.transitionParams.animateForwardedLayout) {
                    }
                    if (z) {
                    }
                    str = "chat_stickerReplyNameText";
                    z3 = true;
                    if (z2) {
                    }
                    i3 = i2;
                    if (i3 == Integer.MIN_VALUE) {
                    }
                }
            }
            i2 = i;
            z = this.drawForwardedName;
            if (this.replyNameLayout != null) {
            }
            StaticLayout[] staticLayoutArr22 = this.forwardedNameLayout;
            int i1022 = this.forwardedNameWidth;
            if (!this.transitionParams.animateForwardedLayout) {
            }
            if (z) {
            }
            str = "chat_stickerReplyNameText";
            z3 = true;
            if (z2) {
            }
            i3 = i2;
            if (i3 == Integer.MIN_VALUE) {
            }
        }
    }

    public boolean hasCaptionLayout() {
        return this.captionLayout != null;
    }

    public boolean hasCommentLayout() {
        return this.drawCommentButton;
    }

    public StaticLayout getCaptionLayout() {
        return this.captionLayout;
    }

    public void setDrawSelectionBackground(boolean z) {
        if (this.drawSelectionBackground != z) {
            this.drawSelectionBackground = z;
            invalidate();
        }
    }

    public boolean isDrawingSelectionBackground() {
        return this.drawSelectionBackground || this.isHighlightedAnimated || this.isHighlighted;
    }

    public float getHighlightAlpha() {
        int i;
        if (this.drawSelectionBackground || !this.isHighlightedAnimated || (i = this.highlightProgress) >= 300) {
            return 1.0f;
        }
        return i / 300.0f;
    }

    public void setCheckBoxVisible(boolean z, boolean z2) {
        MessageObject.GroupedMessages groupedMessages;
        MessageObject.GroupedMessages groupedMessages2;
        if (z && this.checkBox == null) {
            CheckBoxBase checkBoxBase = new CheckBoxBase(this, 21, this.resourcesProvider);
            this.checkBox = checkBoxBase;
            if (this.attachedToWindow) {
                checkBoxBase.onAttachedToWindow();
            }
        }
        if (z && this.mediaCheckBox == null && (((groupedMessages = this.currentMessagesGroup) != null && groupedMessages.messages.size() > 1) || ((groupedMessages2 = this.groupedMessagesToSet) != null && groupedMessages2.messages.size() > 1))) {
            CheckBoxBase checkBoxBase2 = new CheckBoxBase(this, 21, this.resourcesProvider);
            this.mediaCheckBox = checkBoxBase2;
            checkBoxBase2.setUseDefaultCheck(true);
            if (this.attachedToWindow) {
                this.mediaCheckBox.onAttachedToWindow();
            }
        }
        float f = 1.0f;
        if (this.checkBoxVisible == z) {
            if (z2 == this.checkBoxAnimationInProgress || z2) {
                return;
            }
            if (!z) {
                f = 0.0f;
            }
            this.checkBoxAnimationProgress = f;
            invalidate();
            return;
        }
        this.checkBoxAnimationInProgress = z2;
        this.checkBoxVisible = z;
        if (z2) {
            this.lastCheckBoxAnimationTime = SystemClock.elapsedRealtime();
        } else {
            if (!z) {
                f = 0.0f;
            }
            this.checkBoxAnimationProgress = f;
        }
        invalidate();
    }

    public void setChecked(boolean z, boolean z2, boolean z3) {
        CheckBoxBase checkBoxBase = this.checkBox;
        if (checkBoxBase != null) {
            checkBoxBase.setChecked(z2, z3);
        }
        CheckBoxBase checkBoxBase2 = this.mediaCheckBox;
        if (checkBoxBase2 != null) {
            checkBoxBase2.setChecked(z, z3);
        }
        this.backgroundDrawable.setSelected(z2, z3);
    }

    public void setLastTouchCoords(float f, float f2) {
        this.lastTouchX = f;
        this.lastTouchY = f2;
        this.backgroundDrawable.setTouchCoords(f + getTranslationX(), this.lastTouchY);
    }

    public MessageBackgroundDrawable getBackgroundDrawable() {
        return this.backgroundDrawable;
    }

    public Theme.MessageDrawable getCurrentBackgroundDrawable(boolean z) {
        if (z) {
            MessageObject.GroupedMessagePosition groupedMessagePosition = this.currentPosition;
            boolean z2 = groupedMessagePosition != null && (groupedMessagePosition.flags & 8) == 0 && this.currentMessagesGroup.isDocuments && !this.drawPinnedBottom;
            if (this.currentMessageObject.isOutOwner()) {
                if (!this.mediaBackground && !this.drawPinnedBottom && !z2) {
                    this.currentBackgroundDrawable = (Theme.MessageDrawable) getThemedDrawable("drawableMsgOut");
                } else {
                    this.currentBackgroundDrawable = (Theme.MessageDrawable) getThemedDrawable("drawableMsgOutMedia");
                }
            } else if (!this.mediaBackground && !this.drawPinnedBottom && !z2) {
                this.currentBackgroundDrawable = (Theme.MessageDrawable) getThemedDrawable("drawableMsgIn");
            } else {
                this.currentBackgroundDrawable = (Theme.MessageDrawable) getThemedDrawable("drawableMsgInMedia");
            }
        }
        this.currentBackgroundDrawable.getBackgroundDrawable();
        return this.currentBackgroundDrawable;
    }

    private boolean shouldDrawCaptionLayout() {
        MessageObject.GroupedMessagePosition groupedMessagePosition;
        MessageObject.GroupedMessages groupedMessages;
        MessageObject messageObject = this.currentMessageObject;
        return !messageObject.preview && ((groupedMessagePosition = this.currentPosition) == null || ((groupedMessages = this.currentMessagesGroup) != null && groupedMessages.isDocuments && (groupedMessagePosition.flags & 8) == 0)) && !this.transitionParams.animateBackgroundBoundsInner && (!this.enterTransitionInProgress || !messageObject.isVoice());
    }

    public void drawCaptionLayout(Canvas canvas, boolean z, float f) {
        if (this.animatedEmojiStack != null && (this.captionLayout != null || this.transitionParams.animateOutCaptionLayout != null)) {
            this.animatedEmojiStack.clearPositions();
        }
        TransitionParams transitionParams = this.transitionParams;
        float f2 = 1.0f;
        if (!transitionParams.animateReplaceCaptionLayout || transitionParams.animateChangeProgress == 1.0f) {
            drawCaptionLayout(canvas, this.captionLayout, z, f);
        } else {
            drawCaptionLayout(canvas, transitionParams.animateOutCaptionLayout, z, (1.0f - this.transitionParams.animateChangeProgress) * f);
            drawCaptionLayout(canvas, this.captionLayout, z, this.transitionParams.animateChangeProgress * f);
        }
        if (!z) {
            drawAnimatedEmojiCaption(canvas, f);
        }
        MessageObject messageObject = this.currentMessageObject;
        if (messageObject != null && messageObject.messageOwner != null && messageObject.isVoiceTranscriptionOpen()) {
            MessageObject messageObject2 = this.currentMessageObject;
            if (!messageObject2.messageOwner.voiceTranscriptionFinal && TranscribeButton.isTranscribing(messageObject2)) {
                invalidate();
            }
        }
        if (!z) {
            MessageObject.GroupedMessagePosition groupedMessagePosition = this.currentPosition;
            if (groupedMessagePosition != null) {
                int i = groupedMessagePosition.flags;
                if ((i & 8) == 0 || (i & 1) == 0) {
                    return;
                }
            }
            ReactionsLayoutInBubble reactionsLayoutInBubble = this.reactionsLayoutInBubble;
            if (reactionsLayoutInBubble.isSmall) {
                return;
            }
            if (reactionsLayoutInBubble.drawServiceShaderBackground) {
                applyServiceShaderMatrix();
            }
            ReactionsLayoutInBubble reactionsLayoutInBubble2 = this.reactionsLayoutInBubble;
            if (reactionsLayoutInBubble2.drawServiceShaderBackground || !this.transitionParams.animateBackgroundBoundsInner || this.currentPosition != null) {
                TransitionParams transitionParams2 = this.transitionParams;
                if (transitionParams2.animateChange) {
                    f2 = transitionParams2.animateChangeProgress;
                }
                reactionsLayoutInBubble2.draw(canvas, f2, null);
                return;
            }
            canvas.save();
            canvas.clipRect(0.0f, 0.0f, getMeasuredWidth(), getBackgroundDrawableBottom() + this.transitionParams.deltaBottom);
            ReactionsLayoutInBubble reactionsLayoutInBubble3 = this.reactionsLayoutInBubble;
            TransitionParams transitionParams3 = this.transitionParams;
            if (transitionParams3.animateChange) {
                f2 = transitionParams3.animateChangeProgress;
            }
            reactionsLayoutInBubble3.draw(canvas, f2, null);
            canvas.restore();
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:215:0x04f0  */
    /* JADX WARN: Removed duplicated region for block: B:225:0x053e  */
    /* JADX WARN: Removed duplicated region for block: B:226:0x0558  */
    /* JADX WARN: Removed duplicated region for block: B:229:0x0567  */
    /* JADX WARN: Removed duplicated region for block: B:230:0x056c  */
    /* JADX WARN: Removed duplicated region for block: B:233:0x0586  */
    /* JADX WARN: Removed duplicated region for block: B:235:0x0589  */
    /* JADX WARN: Removed duplicated region for block: B:241:0x05a0  */
    /* JADX WARN: Removed duplicated region for block: B:258:0x0645  */
    /* JADX WARN: Removed duplicated region for block: B:365:? A[RETURN, SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void drawCaptionLayout(Canvas canvas, StaticLayout staticLayout, boolean z, float f) {
        int i;
        Rect rect;
        float f2;
        int dp;
        int extraTextX;
        int i2;
        int i3;
        int i4;
        int i5;
        float f3;
        boolean z2;
        int i6;
        int i7;
        int i8;
        boolean shouldDrawThreadProgress;
        long j;
        float f4;
        InfiniteProgress infiniteProgress;
        int i9;
        int i10;
        int themedColor;
        int i11;
        int i12;
        int i13;
        MessageObject.GroupedMessagePosition groupedMessagePosition;
        MessageObject.GroupedMessagePosition groupedMessagePosition2;
        int i14 = 1;
        if (this.currentBackgroundDrawable != null && this.drawCommentButton && this.timeLayout != null) {
            float f5 = 18.0f;
            float dp2 = ((this.layoutHeight + this.transitionParams.deltaBottom) - AndroidUtilities.dp(18.0f)) - this.timeLayout.getHeight();
            MessageObject.GroupedMessages groupedMessages = this.currentMessagesGroup;
            if (groupedMessages != null) {
                MessageObject.GroupedMessages.TransitionParams transitionParams = groupedMessages.transitionParams;
                dp2 += transitionParams.offsetBottom;
                if (transitionParams.backgroundChangeBounds) {
                    dp2 -= getTranslationY();
                }
            }
            float f6 = dp2;
            if (this.mediaBackground) {
                dp = this.backgroundDrawableLeft + AndroidUtilities.dp(12.0f);
                extraTextX = getExtraTextX();
            } else {
                int i15 = this.backgroundDrawableLeft;
                if (this.drawPinnedBottom) {
                    f5 = 12.0f;
                }
                dp = i15 + AndroidUtilities.dp(f5);
                extraTextX = getExtraTextX();
            }
            int i16 = dp + extraTextX;
            int extraTextX2 = i16 - getExtraTextX();
            if (this.currentMessagesGroup == null || this.currentMessageObject.isMusic() || this.currentMessageObject.isDocument()) {
                i2 = i16;
                i3 = extraTextX2 + (this.backgroundWidth - (this.mediaBackground ? 0 : AndroidUtilities.dp(9.0f)));
            } else {
                int groupPhotosWidth = getGroupPhotosWidth();
                float f7 = 1000.0f;
                if ((this.currentPosition.flags & 1) == 0) {
                    double d = extraTextX2;
                    double ceil = Math.ceil((groupedMessagePosition.pw / 1000.0f) * groupPhotosWidth);
                    Double.isNaN(d);
                    i3 = (int) (d + ceil);
                    i2 = i16;
                } else {
                    int i17 = 0;
                    int i18 = 0;
                    while (i17 < this.currentMessagesGroup.posArray.size()) {
                        if (this.currentMessagesGroup.posArray.get(i17).minY != 0) {
                            break;
                        }
                        double d2 = i18;
                        double ceil2 = Math.ceil(((groupedMessagePosition2.pw + groupedMessagePosition2.leftSpanOffset) / f7) * groupPhotosWidth);
                        Double.isNaN(d2);
                        i18 = (int) (d2 + ceil2);
                        i17++;
                        i16 = i16;
                        f7 = 1000.0f;
                    }
                    i2 = i16;
                    i3 = extraTextX2 + (i18 - AndroidUtilities.dp(9.0f));
                }
            }
            if (this.pinnedBottom) {
                i5 = 2;
                i4 = 3;
            } else if (this.pinnedTop) {
                i5 = 4;
                i4 = 1;
            } else {
                i5 = 3;
                i4 = 0;
            }
            int currentBackgroundLeft = getCurrentBackgroundLeft() + AndroidUtilities.dp((this.currentMessageObject.isOutOwner() || this.mediaBackground || this.drawPinnedBottom) ? 2.0f : 8.0f);
            float dp3 = this.layoutHeight - AndroidUtilities.dp(45.1f - i4);
            MessageObject.GroupedMessagePosition groupedMessagePosition3 = this.currentPosition;
            if (groupedMessagePosition3 != null && (groupedMessagePosition3.flags & 1) == 0 && !this.currentMessagesGroup.hasSibling) {
                i3 += AndroidUtilities.dp(14.0f);
                currentBackgroundLeft -= AndroidUtilities.dp(10.0f);
            }
            this.commentButtonRect.set(currentBackgroundLeft, (int) dp3, i3 - AndroidUtilities.dp(14.0f), this.layoutHeight - AndroidUtilities.dp(i5));
            Drawable[] drawableArr = this.selectorDrawable;
            if (drawableArr[1] != null && this.selectorDrawableMaskType[1] == 2) {
                drawableArr[1].setBounds(this.commentButtonRect);
                this.selectorDrawable[1].draw(canvas);
            }
            MessageObject.GroupedMessagePosition groupedMessagePosition4 = this.currentPosition;
            if (groupedMessagePosition4 == null || ((groupedMessagePosition4.flags & 1) != 0 && groupedMessagePosition4.minX == 0 && groupedMessagePosition4.maxX == 0)) {
                String str = "chat_inPreviewInstantText";
                Theme.chat_instantViewPaint.setColor(getThemedColor(str));
                if (this.commentAvatarImages != null) {
                    int dp4 = AndroidUtilities.dp(17.0f);
                    int extraTextX3 = getExtraTextX() + i2;
                    int length = this.commentAvatarImages.length - 1;
                    int i19 = 2;
                    z2 = false;
                    while (length >= 0) {
                        if (this.commentAvatarImagesVisible[length] && this.commentAvatarImages[length].hasImageSet()) {
                            this.commentAvatarImages[length].setImageX((dp4 * length) + extraTextX3);
                            this.commentAvatarImages[length].setImageY((f6 - AndroidUtilities.dp(4.0f)) + (this.pinnedBottom ? AndroidUtilities.dp(2.0f) : 0));
                            ImageReceiver[] imageReceiverArr = this.commentAvatarImages;
                            if (length != imageReceiverArr.length - i14) {
                                canvas.drawCircle(imageReceiverArr[length].getCenterX(), this.commentAvatarImages[length].getCenterY(), AndroidUtilities.dp(13.0f), this.currentBackgroundDrawable.getPaint());
                            }
                            this.commentAvatarImages[length].draw(canvas);
                            if (length != 0) {
                                i19 += 17;
                            }
                            z2 = true;
                        }
                        length--;
                        i14 = 1;
                    }
                    i6 = i19;
                } else {
                    i6 = 2;
                    z2 = false;
                }
                if (this.mediaBackground && staticLayout == null) {
                    ReactionsLayoutInBubble reactionsLayoutInBubble = this.reactionsLayoutInBubble;
                    if (reactionsLayoutInBubble.isEmpty || reactionsLayoutInBubble.isSmall) {
                        i7 = i2;
                        if (this.commentLayout == null && this.drawSideButton != 3) {
                            TextPaint textPaint = Theme.chat_replyNamePaint;
                            if (this.currentMessageObject.isOutOwner()) {
                                str = "chat_outPreviewInstantText";
                            }
                            textPaint.setColor(getThemedColor(str));
                            float f8 = i6 + 33;
                            int dp5 = i7 + AndroidUtilities.dp(f8);
                            this.commentX = dp5;
                            if (this.drawCommentNumber) {
                                this.commentX = dp5 + this.commentNumberWidth + AndroidUtilities.dp(4.0f);
                            }
                            int alpha = Theme.chat_replyNamePaint.getAlpha();
                            if (!this.transitionParams.animateComments || this.transitionParams.animateCommentsLayout == null) {
                                i9 = alpha;
                            } else {
                                canvas.save();
                                TextPaint textPaint2 = Theme.chat_replyNamePaint;
                                double d3 = alpha;
                                i9 = alpha;
                                double d4 = this.transitionParams.animateChangeProgress;
                                Double.isNaN(d4);
                                Double.isNaN(d3);
                                textPaint2.setAlpha((int) (d3 * (1.0d - d4)));
                                canvas.translate(this.transitionParams.animateCommentX + ((this.commentX - this.transitionParams.animateCommentX) * this.transitionParams.animateChangeProgress), (f6 - AndroidUtilities.dp(0.1f)) + (this.pinnedBottom ? AndroidUtilities.dp(2.0f) : 0));
                                this.transitionParams.animateCommentsLayout.draw(canvas);
                                canvas.restore();
                            }
                            canvas.save();
                            canvas.translate(AndroidUtilities.dp(f8) + i7, (f6 - AndroidUtilities.dp(0.1f)) + (this.pinnedBottom ? AndroidUtilities.dp(2.0f) : 0));
                            if (!this.currentMessageObject.isSent()) {
                                Theme.chat_replyNamePaint.setAlpha(127);
                                Theme.chat_commentArrowDrawable.setAlpha(127);
                                Theme.chat_commentDrawable.setAlpha(127);
                            } else {
                                Theme.chat_commentArrowDrawable.setAlpha(255);
                                Theme.chat_commentDrawable.setAlpha(255);
                            }
                            if (this.drawCommentNumber || (this.transitionParams.animateComments && this.transitionParams.animateDrawCommentNumber)) {
                                if (!this.drawCommentNumber || !this.transitionParams.animateComments) {
                                    i10 = i9;
                                } else if (this.transitionParams.animateDrawCommentNumber) {
                                    i10 = i9;
                                    Theme.chat_replyNamePaint.setAlpha(i10);
                                } else {
                                    i10 = i9;
                                    Theme.chat_replyNamePaint.setAlpha((int) (i10 * this.transitionParams.animateChangeProgress));
                                }
                                this.commentNumberLayout.draw(canvas);
                                if (this.drawCommentNumber) {
                                    canvas.translate(this.commentNumberWidth + AndroidUtilities.dp(4.0f), 0.0f);
                                }
                            } else {
                                i10 = i9;
                            }
                            if (this.transitionParams.animateComments && this.transitionParams.animateCommentsLayout != null) {
                                Theme.chat_replyNamePaint.setAlpha((int) (i10 * this.transitionParams.animateChangeProgress));
                            } else {
                                Theme.chat_replyNamePaint.setAlpha((int) (i10 * f));
                            }
                            this.commentLayout.draw(canvas);
                            canvas.restore();
                            int dp6 = i7 + this.commentWidth + AndroidUtilities.dp(f8) + AndroidUtilities.dp(9.0f);
                            this.commentUnreadX = dp6;
                            if (this.drawCommentNumber) {
                                this.commentUnreadX = dp6 + this.commentNumberWidth + AndroidUtilities.dp(4.0f);
                            }
                            TLRPC$MessageReplies tLRPC$MessageReplies = null;
                            MessageObject.GroupedMessages groupedMessages2 = this.currentMessagesGroup;
                            if (groupedMessages2 != null && !groupedMessages2.messages.isEmpty()) {
                                MessageObject messageObject = this.currentMessagesGroup.messages.get(0);
                                if (messageObject.hasReplies()) {
                                    tLRPC$MessageReplies = messageObject.messageOwner.replies;
                                }
                            } else if (this.currentMessageObject.hasReplies()) {
                                tLRPC$MessageReplies = this.currentMessageObject.messageOwner.replies;
                            }
                            boolean z3 = (tLRPC$MessageReplies == null || (i12 = tLRPC$MessageReplies.read_max_id) == 0 || i12 >= tLRPC$MessageReplies.max_id) ? false : true;
                            this.commentDrawUnread = z3;
                            if (z3) {
                                Theme.chat_docBackPaint.setColor(getThemedColor("chat_inInstant"));
                                if (!this.transitionParams.animateComments) {
                                    i11 = this.commentUnreadX;
                                } else {
                                    if (!this.transitionParams.animateCommentDrawUnread) {
                                        Theme.chat_docBackPaint.setAlpha((int) (Color.alpha(themedColor) * this.transitionParams.animateChangeProgress));
                                    }
                                    i11 = (int) (this.transitionParams.animateCommentUnreadX + ((this.commentUnreadX - this.transitionParams.animateCommentUnreadX) * this.transitionParams.animateChangeProgress));
                                }
                                canvas.drawCircle(i11, f6 + AndroidUtilities.dp(8.0f) + (this.pinnedBottom ? AndroidUtilities.dp(2.0f) : 0), AndroidUtilities.dp(2.5f), Theme.chat_docBackPaint);
                            }
                        }
                        if (!z2) {
                            BaseCell.setDrawableBounds(Theme.chat_commentDrawable, i7, (f6 - AndroidUtilities.dp(4.0f)) + (this.pinnedBottom ? AndroidUtilities.dp(2.0f) : 0));
                            if (f != 1.0f) {
                                Theme.chat_commentDrawable.setAlpha((int) (f * 255.0f));
                                Theme.chat_commentDrawable.draw(canvas);
                                Theme.chat_commentDrawable.setAlpha(255);
                            } else {
                                Theme.chat_commentDrawable.draw(canvas);
                            }
                        }
                        this.commentArrowX = i3 - AndroidUtilities.dp(44.0f);
                        if (this.transitionParams.animateComments) {
                            i8 = this.commentArrowX;
                        } else {
                            i8 = (int) (this.transitionParams.animateCommentArrowX + ((this.commentArrowX - this.transitionParams.animateCommentArrowX) * this.transitionParams.animateChangeProgress));
                        }
                        float dp7 = (f6 - AndroidUtilities.dp(4.0f)) + (!this.pinnedBottom ? AndroidUtilities.dp(2.0f) : 0);
                        shouldDrawThreadProgress = this.delegate.shouldDrawThreadProgress(this);
                        long elapsedRealtime = SystemClock.elapsedRealtime();
                        j = elapsedRealtime - this.commentProgressLastUpadteTime;
                        this.commentProgressLastUpadteTime = elapsedRealtime;
                        if (j > 17) {
                            j = 17;
                        }
                        if (!shouldDrawThreadProgress) {
                            float f9 = this.commentProgressAlpha;
                            if (f9 < 1.0f) {
                                float f10 = f9 + (((float) j) / 180.0f);
                                this.commentProgressAlpha = f10;
                                if (f10 > 1.0f) {
                                    this.commentProgressAlpha = 1.0f;
                                }
                            }
                            f4 = 0.0f;
                        } else {
                            float f11 = this.commentProgressAlpha;
                            f4 = 0.0f;
                            if (f11 > 0.0f) {
                                float f12 = f11 - (((float) j) / 180.0f);
                                this.commentProgressAlpha = f12;
                                if (f12 < 0.0f) {
                                    this.commentProgressAlpha = 0.0f;
                                }
                            }
                        }
                        if ((!shouldDrawThreadProgress || this.commentProgressAlpha > f4) && (infiniteProgress = this.commentProgress) != null) {
                            infiniteProgress.setColor(getThemedColor("chat_inInstant"));
                            this.commentProgress.setAlpha(this.commentProgressAlpha);
                            this.commentProgress.draw(canvas, AndroidUtilities.dp(11.0f) + i8, dp7 + AndroidUtilities.dp(12.0f), this.commentProgressAlpha);
                            invalidate();
                        }
                        if (shouldDrawThreadProgress || this.commentProgressAlpha < 1.0f) {
                            int intrinsicWidth = Theme.chat_commentArrowDrawable.getIntrinsicWidth() / 2;
                            float f13 = i8 + intrinsicWidth;
                            float intrinsicHeight = Theme.chat_commentArrowDrawable.getIntrinsicHeight() / 2;
                            float f14 = dp7 + intrinsicHeight;
                            Drawable drawable = Theme.chat_commentArrowDrawable;
                            float f15 = intrinsicWidth;
                            float f16 = this.commentProgressAlpha;
                            drawable.setBounds((int) (f13 - ((1.0f - f16) * f15)), (int) (f14 - ((1.0f - f16) * intrinsicHeight)), (int) (f13 + (f15 * (1.0f - f16))), (int) (f14 + (intrinsicHeight * (1.0f - f16))));
                            Theme.chat_commentArrowDrawable.setAlpha((int) ((1.0f - this.commentProgressAlpha) * 255.0f * f));
                            Theme.chat_commentArrowDrawable.draw(canvas);
                        }
                        if (staticLayout == null) {
                            return;
                        }
                        if (z && this.links.isEmpty()) {
                            return;
                        }
                        MessageObject messageObject2 = this.currentMessageObject;
                        if ((messageObject2.deleted && this.currentPosition != null) || f == 0.0f) {
                            return;
                        }
                        if (messageObject2.isOutOwner()) {
                            Theme.chat_msgTextPaint.setColor(getThemedColor("chat_messageTextOut"));
                            Theme.chat_msgTextPaint.linkColor = getThemedColor("chat_messageLinkOut");
                        } else {
                            Theme.chat_msgTextPaint.setColor(getThemedColor("chat_messageTextIn"));
                            Theme.chat_msgTextPaint.linkColor = getThemedColor("chat_messageLinkIn");
                        }
                        canvas.save();
                        MessageObject.GroupedMessages groupedMessages3 = this.currentMessagesGroup;
                        float f17 = groupedMessages3 != null ? groupedMessages3.transitionParams.captionEnterProgress * f : f;
                        if (f17 == 0.0f) {
                            return;
                        }
                        float f18 = this.captionY;
                        float f19 = this.captionX;
                        TransitionParams transitionParams2 = this.transitionParams;
                        if (transitionParams2.animateBackgroundBoundsInner) {
                            if (transitionParams2.transformGroupToSingleMessage) {
                                f18 -= getTranslationY();
                                f2 = this.transitionParams.deltaLeft;
                            } else if (transitionParams2.moveCaption) {
                                float f20 = this.captionX;
                                TransitionParams transitionParams3 = this.transitionParams;
                                float f21 = transitionParams3.animateChangeProgress;
                                float f22 = (f20 * f21) + (transitionParams3.captionFromX * (1.0f - f21));
                                float f23 = (transitionParams3.captionFromY * (1.0f - f21)) + (this.captionY * f21);
                                f19 = f22;
                                f18 = f23;
                            } else if (!this.currentMessageObject.isVoice() || !TextUtils.isEmpty(this.currentMessageObject.caption)) {
                                f2 = this.transitionParams.deltaLeft;
                            }
                            f19 += f2;
                        }
                        if (f17 != 1.0f) {
                            this.rect.set(f19, f18, staticLayout.getWidth() + f19, staticLayout.getHeight() + f18);
                            i = canvas.saveLayerAlpha(this.rect, (int) (f17 * 255.0f), 31);
                        } else {
                            i = Integer.MIN_VALUE;
                        }
                        if (this.transitionParams.animateBackgroundBoundsInner && this.currentBackgroundDrawable != null && this.currentMessagesGroup == null) {
                            int height = (!this.drawCommentButton || (rect = this.commentButtonRect) == null) ? 0 : rect.height();
                            ReactionsLayoutInBubble reactionsLayoutInBubble2 = this.reactionsLayoutInBubble;
                            int i20 = height + ((reactionsLayoutInBubble2 == null || reactionsLayoutInBubble2.isSmall) ? 0 : reactionsLayoutInBubble2.height);
                            if (this.currentMessageObject.isOutOwner() && !this.mediaBackground && !this.pinnedBottom) {
                                canvas.clipRect(getBackgroundDrawableLeft() + this.transitionParams.deltaLeft + AndroidUtilities.dp(4.0f), getBackgroundDrawableTop() + this.transitionParams.deltaTop + AndroidUtilities.dp(4.0f), (getBackgroundDrawableRight() + this.transitionParams.deltaRight) - AndroidUtilities.dp(10.0f), ((getBackgroundDrawableBottom() + this.transitionParams.deltaBottom) - AndroidUtilities.dp(4.0f)) - i20);
                            } else {
                                canvas.clipRect(getBackgroundDrawableLeft() + this.transitionParams.deltaLeft + AndroidUtilities.dp(4.0f), getBackgroundDrawableTop() + this.transitionParams.deltaTop + AndroidUtilities.dp(4.0f), (getBackgroundDrawableRight() + this.transitionParams.deltaRight) - AndroidUtilities.dp(4.0f), ((getBackgroundDrawableBottom() + this.transitionParams.deltaBottom) - AndroidUtilities.dp(4.0f)) - i20);
                            }
                        }
                        canvas.translate(f19, f18);
                        if (this.links.draw(canvas)) {
                            invalidate();
                        }
                        if (!this.urlPathSelection.isEmpty()) {
                            for (int i21 = 0; i21 < this.urlPathSelection.size(); i21++) {
                                canvas.drawPath(this.urlPathSelection.get(i21), Theme.chat_textSearchSelectionPaint);
                            }
                        }
                        if (!z) {
                            try {
                                if (getDelegate() != null && getDelegate().getTextSelectionHelper() != null && getDelegate().getTextSelectionHelper().isSelected(this.currentMessageObject)) {
                                    getDelegate().getTextSelectionHelper().drawCaption(this.currentMessageObject.isOutOwner(), staticLayout, canvas);
                                }
                                getY();
                                getY();
                                Emoji.emojiDrawingYOffset = -this.transitionYOffsetForDrawables;
                                SpoilerEffect.renderWithRipple(this, this.invalidateSpoilersParent, (!this.currentMessageObject.isOut() || ChatObject.isChannelAndNotMegaGroup(this.currentMessageObject.getChatId(), this.currentAccount)) ? staticLayout.getPaint().getColor() : getThemedColor("chat_outTimeText"), 0, this.captionPatchedSpoilersLayout, staticLayout, this.captionSpoilers, canvas, this.currentMessagesGroup != null);
                                Emoji.emojiDrawingYOffset = 0.0f;
                            } catch (Exception e) {
                                FileLog.e(e);
                            }
                        }
                        if (i != Integer.MIN_VALUE) {
                            canvas.restoreToCount(i);
                        }
                        canvas.restore();
                        return;
                    }
                }
                if (isDrawSelectionBackground()) {
                    Theme.chat_replyLinePaint.setColor(getThemedColor(this.currentMessageObject.isOutOwner() ? "chat_outVoiceSeekbarSelected" : "chat_inVoiceSeekbarSelected"));
                } else {
                    Theme.chat_replyLinePaint.setColor(getThemedColor(this.currentMessageObject.isOutOwner() ? "chat_outVoiceSeekbar" : "chat_inVoiceSeekbar"));
                }
                TransitionParams transitionParams4 = this.transitionParams;
                float dp8 = (this.layoutHeight - AndroidUtilities.dp(f3)) + transitionParams4.deltaBottom;
                MessageObject.GroupedMessages groupedMessages4 = this.currentMessagesGroup;
                if (groupedMessages4 != null) {
                    MessageObject.GroupedMessages.TransitionParams transitionParams5 = groupedMessages4.transitionParams;
                    dp8 += transitionParams5.offsetBottom;
                    if (transitionParams5.backgroundChangeBounds) {
                        dp8 -= getTranslationY();
                    }
                } else {
                    i3 = (i2 + ((int) ((this.backgroundWidth - transitionParams4.deltaLeft) + transitionParams4.deltaRight))) - AndroidUtilities.dp(12.0f);
                }
                float f24 = dp8;
                int i22 = i2;
                i7 = i22;
                canvas.drawLine(i22, f24, i13 - AndroidUtilities.dp(14.0f), f24, Theme.chat_replyLinePaint);
                i3 = i3;
                if (this.commentLayout == null) {
                }
                if (!z2) {
                }
                this.commentArrowX = i3 - AndroidUtilities.dp(44.0f);
                if (this.transitionParams.animateComments) {
                }
                float dp72 = (f6 - AndroidUtilities.dp(4.0f)) + (!this.pinnedBottom ? AndroidUtilities.dp(2.0f) : 0);
                shouldDrawThreadProgress = this.delegate.shouldDrawThreadProgress(this);
                long elapsedRealtime2 = SystemClock.elapsedRealtime();
                j = elapsedRealtime2 - this.commentProgressLastUpadteTime;
                this.commentProgressLastUpadteTime = elapsedRealtime2;
                if (j > 17) {
                }
                if (!shouldDrawThreadProgress) {
                }
                if (!shouldDrawThreadProgress) {
                }
                infiniteProgress.setColor(getThemedColor("chat_inInstant"));
                this.commentProgress.setAlpha(this.commentProgressAlpha);
                this.commentProgress.draw(canvas, AndroidUtilities.dp(11.0f) + i8, dp72 + AndroidUtilities.dp(12.0f), this.commentProgressAlpha);
                invalidate();
                if (shouldDrawThreadProgress) {
                }
                int intrinsicWidth2 = Theme.chat_commentArrowDrawable.getIntrinsicWidth() / 2;
                float f132 = i8 + intrinsicWidth2;
                float intrinsicHeight2 = Theme.chat_commentArrowDrawable.getIntrinsicHeight() / 2;
                float f142 = dp72 + intrinsicHeight2;
                Drawable drawable2 = Theme.chat_commentArrowDrawable;
                float f152 = intrinsicWidth2;
                float f162 = this.commentProgressAlpha;
                drawable2.setBounds((int) (f132 - ((1.0f - f162) * f152)), (int) (f142 - ((1.0f - f162) * intrinsicHeight2)), (int) (f132 + (f152 * (1.0f - f162))), (int) (f142 + (intrinsicHeight2 * (1.0f - f162))));
                Theme.chat_commentArrowDrawable.setAlpha((int) ((1.0f - this.commentProgressAlpha) * 255.0f * f));
                Theme.chat_commentArrowDrawable.draw(canvas);
                if (staticLayout == null) {
                }
            }
        }
        if (staticLayout == null) {
        }
    }

    public boolean needDrawTime() {
        return !this.forceNotDrawTime;
    }

    public boolean shouldDrawTimeOnMedia() {
        int i = this.overideShouldDrawTimeOnMedia;
        if (i != 0) {
            return i == 1;
        } else if (!this.mediaBackground || this.captionLayout != null) {
            return false;
        } else {
            ReactionsLayoutInBubble reactionsLayoutInBubble = this.reactionsLayoutInBubble;
            return reactionsLayoutInBubble.isEmpty || reactionsLayoutInBubble.isSmall || this.currentMessageObject.isAnyKindOfSticker() || this.currentMessageObject.isRoundVideo();
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:53:0x0102  */
    /* JADX WARN: Removed duplicated region for block: B:54:0x0126  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void drawTime(Canvas canvas, float f, boolean z) {
        float f2;
        TransitionParams transitionParams;
        float f3;
        float f4;
        float f5;
        ChatMessageCellDelegate chatMessageCellDelegate;
        if (this.drawFromPinchToZoom || (chatMessageCellDelegate = this.delegate) == null || chatMessageCellDelegate.getPinchToZoomHelper() == null || !this.delegate.getPinchToZoomHelper().isInOverlayModeFor(this) || !shouldDrawTimeOnMedia()) {
            int i = 0;
            while (i < 2) {
                if (i != 0 || !isDrawSelectionBackground() || this.currentSelectedBackgroundAlpha != 1.0f || shouldDrawTimeOnMedia()) {
                    if (i == 1 && ((!isDrawSelectionBackground() && this.currentSelectedBackgroundAlpha == 0.0f) || shouldDrawTimeOnMedia())) {
                        break;
                    }
                    boolean z2 = i == 1;
                    if (i == 1) {
                        f5 = this.currentSelectedBackgroundAlpha;
                    } else if (!shouldDrawTimeOnMedia()) {
                        f5 = 1.0f - this.currentSelectedBackgroundAlpha;
                    } else {
                        f2 = f;
                        if (!this.transitionParams.animateShouldDrawTimeOnMedia && this.transitionParams.animateChangeProgress != 1.0f) {
                            if (shouldDrawTimeOnMedia()) {
                                this.overideShouldDrawTimeOnMedia = 1;
                                boolean z3 = z2;
                                drawTimeInternal(canvas, f2 * this.transitionParams.animateChangeProgress, z, this.timeX, this.timeLayout, this.timeWidth, z3);
                                this.overideShouldDrawTimeOnMedia = 2;
                                TransitionParams transitionParams2 = this.transitionParams;
                                drawTimeInternal(canvas, f2 * (1.0f - transitionParams2.animateChangeProgress), z, transitionParams2.animateFromTimeX, transitionParams2.animateTimeLayout, this.transitionParams.animateTimeWidth, z3);
                            } else {
                                this.overideShouldDrawTimeOnMedia = 2;
                                boolean z4 = z2;
                                drawTimeInternal(canvas, f2 * this.transitionParams.animateChangeProgress, z, this.timeX, this.timeLayout, this.timeWidth, z4);
                                this.overideShouldDrawTimeOnMedia = 1;
                                TransitionParams transitionParams3 = this.transitionParams;
                                drawTimeInternal(canvas, f2 * (1.0f - transitionParams3.animateChangeProgress), z, transitionParams3.animateFromTimeX, transitionParams3.animateTimeLayout, this.transitionParams.animateTimeWidth, z4);
                            }
                            this.overideShouldDrawTimeOnMedia = 0;
                        } else {
                            transitionParams = this.transitionParams;
                            if (!transitionParams.shouldAnimateTimeX) {
                                float f6 = transitionParams.animateChangeProgress;
                                f4 = (this.timeX * f6) + (transitionParams.animateFromTimeX * (1.0f - f6));
                                f3 = (this.timeWidth * f6) + (transitionParams.animateTimeWidth * (1.0f - this.transitionParams.animateChangeProgress));
                            } else {
                                float f7 = this.timeX + transitionParams.deltaRight;
                                f3 = this.timeWidth;
                                f4 = f7;
                            }
                            drawTimeInternal(canvas, f2, z, f4, this.timeLayout, f3, z2);
                        }
                    }
                    f2 = f5 * f;
                    if (!this.transitionParams.animateShouldDrawTimeOnMedia) {
                    }
                    transitionParams = this.transitionParams;
                    if (!transitionParams.shouldAnimateTimeX) {
                    }
                    drawTimeInternal(canvas, f2, z, f4, this.timeLayout, f3, z2);
                }
                i++;
            }
            if (!this.transitionParams.animateBackgroundBoundsInner) {
                return;
            }
            drawOverlays(canvas);
        }
    }

    private void drawTimeInternal(Canvas canvas, float f, boolean z, float f2, StaticLayout staticLayout, float f3, boolean z2) {
        int i;
        float f4;
        float f5;
        boolean z3;
        int i2;
        boolean z4;
        int i3;
        Paint paint;
        int i4;
        int i5;
        float f6;
        float f7;
        TextPaint textPaint;
        if (((!this.drawTime || this.groupPhotoInvisible) && shouldDrawTimeOnMedia()) || staticLayout == null) {
            return;
        }
        MessageObject messageObject = this.currentMessageObject;
        if ((messageObject.deleted && this.currentPosition != null) || (i = messageObject.type) == 16) {
            return;
        }
        if (i == 5) {
            Theme.chat_timePaint.setColor(getThemedColor("chat_serviceText"));
        } else if (shouldDrawTimeOnMedia()) {
            if (this.currentMessageObject.shouldDrawWithoutBackground()) {
                Theme.chat_timePaint.setColor(getThemedColor("chat_serviceText"));
            } else {
                Theme.chat_timePaint.setColor(getThemedColor("chat_mediaTimeText"));
            }
        } else if (this.currentMessageObject.isOutOwner()) {
            Theme.chat_timePaint.setColor(getThemedColor(z2 ? "chat_outTimeSelectedText" : "chat_outTimeText"));
        } else {
            Theme.chat_timePaint.setColor(getThemedColor(z2 ? "chat_inTimeSelectedText" : "chat_inTimeText"));
        }
        float f8 = getTransitionParams().animateDrawingTimeAlpha ? getTransitionParams().animateChangeProgress * f : f;
        if (f8 != 1.0f) {
            Theme.chat_timePaint.setAlpha((int) (textPaint.getAlpha() * f8));
        }
        canvas.save();
        if (this.drawPinnedBottom && !shouldDrawTimeOnMedia()) {
            canvas.translate(0.0f, AndroidUtilities.dp(2.0f));
        }
        TransitionParams transitionParams = this.transitionParams;
        float f9 = this.layoutHeight + transitionParams.deltaBottom;
        if (transitionParams.shouldAnimateTimeX) {
            float f10 = transitionParams.animateChangeProgress;
            f4 = (transitionParams.animateFromTimeX * (1.0f - f10)) + (this.timeX * f10);
        } else {
            f4 = f2;
        }
        MessageObject.GroupedMessages groupedMessages = this.currentMessagesGroup;
        if (groupedMessages == null || !groupedMessages.transitionParams.backgroundChangeBounds) {
            f5 = f2;
        } else {
            f9 -= getTranslationY();
            float f11 = this.currentMessagesGroup.transitionParams.offsetRight;
            f5 = f2 + f11;
            f4 += f11;
        }
        if (this.drawPinnedBottom && shouldDrawTimeOnMedia()) {
            f9 += AndroidUtilities.dp(1.0f);
        }
        float f12 = f9;
        TransitionParams transitionParams2 = this.transitionParams;
        boolean z5 = transitionParams2.animateBackgroundBoundsInner;
        if (z5) {
            float f13 = this.animationOffsetX;
            f5 += f13;
            f4 += f13;
        }
        float f14 = f5;
        ReactionsLayoutInBubble reactionsLayoutInBubble = this.reactionsLayoutInBubble;
        if (reactionsLayoutInBubble.isSmall) {
            if (z5 && transitionParams2.deltaRight != 0.0f) {
                f7 = reactionsLayoutInBubble.getCurrentWidth(1.0f);
            } else {
                f7 = reactionsLayoutInBubble.getCurrentWidth(transitionParams2.animateChangeProgress);
            }
            f4 += f7;
        }
        if (this.transitionParams.animateEditedEnter) {
            f4 -= this.transitionParams.animateEditedWidthDiff * (1.0f - this.transitionParams.animateChangeProgress);
        }
        float f15 = f4;
        if (shouldDrawTimeOnMedia()) {
            int i6 = -(this.drawCommentButton ? AndroidUtilities.dp(41.3f) : 0);
            if (this.currentMessageObject.shouldDrawWithoutBackground()) {
                paint = getThemedPaint("paintChatActionBackground");
            } else {
                paint = getThemedPaint("paintChatTimeBackground");
            }
            int alpha = paint.getAlpha();
            paint.setAlpha((int) (alpha * this.timeAlpha * f8));
            Theme.chat_timePaint.setAlpha((int) (this.timeAlpha * 255.0f * f8));
            int i7 = this.documentAttachType;
            float f16 = 4.0f;
            if (i7 != 7 && i7 != 6) {
                int[] roundRadius = this.photoImage.getRoundRadius();
                i4 = Math.min(AndroidUtilities.dp(8.0f), Math.max(roundRadius[2], roundRadius[3]));
                z3 = SharedConfig.bubbleRadius >= 10;
            } else {
                i4 = AndroidUtilities.dp(4.0f);
                z3 = false;
            }
            if (z3) {
                f16 = 6.0f;
            }
            float dp = f14 - AndroidUtilities.dp(f16);
            float imageY2 = this.photoImage.getImageY2() + this.additionalTimeOffsetY;
            float dp2 = imageY2 - AndroidUtilities.dp(23.0f);
            this.rect.set(dp, dp2, dp + f3 + AndroidUtilities.dp((z3 ? 12 : 8) + (this.currentMessageObject.isOutOwner() ? 20 : 0)), AndroidUtilities.dp(17.0f) + dp2);
            applyServiceShaderMatrix();
            float f17 = i4;
            canvas.drawRoundRect(this.rect, f17, f17, paint);
            if (paint == getThemedPaint("paintChatActionBackground") && hasGradientService()) {
                int alpha2 = Theme.chat_actionBackgroundGradientDarkenPaint.getAlpha();
                Theme.chat_actionBackgroundGradientDarkenPaint.setAlpha((int) (alpha2 * this.timeAlpha * f8));
                canvas.drawRoundRect(this.rect, f17, f17, Theme.chat_actionBackgroundGradientDarkenPaint);
                Theme.chat_actionBackgroundGradientDarkenPaint.setAlpha(alpha2);
            }
            paint.setAlpha(alpha);
            float f18 = -staticLayout.getLineLeft(0);
            if (this.reactionsLayoutInBubble.isSmall) {
                updateReactionLayoutPosition();
                this.reactionsLayoutInBubble.draw(canvas, this.transitionParams.animateChangeProgress, null);
            }
            if ((!ChatObject.isChannel(this.currentChat) || this.currentChat.megagroup) && (this.currentMessageObject.messageOwner.flags & 1024) == 0 && this.repliesLayout == null && !this.isPinned) {
                i5 = i6;
            } else {
                float lineWidth = f18 + (this.timeWidth - staticLayout.getLineWidth(0));
                ReactionsLayoutInBubble reactionsLayoutInBubble2 = this.reactionsLayoutInBubble;
                if (reactionsLayoutInBubble2.isSmall && !reactionsLayoutInBubble2.isEmpty) {
                    lineWidth -= reactionsLayoutInBubble2.width;
                }
                float f19 = lineWidth;
                int createStatusDrawableParams = this.transitionParams.createStatusDrawableParams();
                int i8 = this.transitionParams.lastStatusDrawableParams;
                if (i8 >= 0 && i8 != createStatusDrawableParams && !this.statusDrawableAnimationInProgress) {
                    createStatusDrawableAnimator(i8, createStatusDrawableParams, z);
                }
                boolean z6 = this.statusDrawableAnimationInProgress;
                if (z6) {
                    createStatusDrawableParams = this.animateToStatusDrawableParams;
                }
                boolean z7 = (createStatusDrawableParams & 4) != 0;
                boolean z8 = (createStatusDrawableParams & 8) != 0;
                if (z6) {
                    int i9 = this.animateFromStatusDrawableParams;
                    boolean z9 = (i9 & 4) != 0;
                    boolean z10 = (i9 & 8) != 0;
                    float f20 = i6;
                    float f21 = f8;
                    f6 = f19;
                    i5 = i6;
                    drawClockOrErrorLayout(canvas, z9, z10, f12, f21, f20, f14, 1.0f - this.statusDrawableProgress, z2);
                    drawClockOrErrorLayout(canvas, z7, z8, f12, f21, f20, f14, this.statusDrawableProgress, z2);
                    if (!this.currentMessageObject.isOutOwner()) {
                        if (!z9 && !z10) {
                            drawViewsAndRepliesLayout(canvas, f12, f8, f20, f14, 1.0f - this.statusDrawableProgress, z2);
                        }
                        if (!z7 && !z8) {
                            drawViewsAndRepliesLayout(canvas, f12, f8, f20, f14, this.statusDrawableProgress, z2);
                        }
                    }
                } else {
                    f6 = f19;
                    i5 = i6;
                    if (!this.currentMessageObject.isOutOwner() && !z7 && !z8) {
                        drawViewsAndRepliesLayout(canvas, f12, f8, i5, f14, 1.0f, z2);
                    }
                    drawClockOrErrorLayout(canvas, z7, z8, f12, f8, i5, f14, 1.0f, z2);
                }
                if (this.currentMessageObject.isOutOwner()) {
                    drawViewsAndRepliesLayout(canvas, f12, f8, i5, f14, 1.0f, z2);
                }
                TransitionParams transitionParams3 = this.transitionParams;
                transitionParams3.lastStatusDrawableParams = transitionParams3.createStatusDrawableParams();
                if (z7 && z && getParent() != null) {
                    ((View) getParent()).invalidate();
                }
                f18 = f6;
            }
            canvas.save();
            float f22 = f15 + f18;
            this.drawTimeX = f22;
            float dp3 = (imageY2 - AndroidUtilities.dp(7.3f)) - staticLayout.getHeight();
            this.drawTimeY = dp3;
            canvas.translate(f22, dp3);
            staticLayout.draw(canvas);
            canvas.restore();
            Theme.chat_timePaint.setAlpha(255);
            i2 = i5;
        } else {
            if (this.currentMessageObject.isSponsored()) {
                i3 = -AndroidUtilities.dp(48.0f);
                if (this.hasNewLineForTime) {
                    i3 -= AndroidUtilities.dp(16.0f);
                }
            } else {
                i3 = -(this.drawCommentButton ? AndroidUtilities.dp(43.0f) : 0);
            }
            int i10 = i3;
            float f23 = -staticLayout.getLineLeft(0);
            if (this.reactionsLayoutInBubble.isSmall) {
                updateReactionLayoutPosition();
                this.reactionsLayoutInBubble.draw(canvas, this.transitionParams.animateChangeProgress, null);
            }
            if ((ChatObject.isChannel(this.currentChat) && !this.currentChat.megagroup) || (this.currentMessageObject.messageOwner.flags & 1024) != 0 || this.repliesLayout != null || this.transitionParams.animateReplies || this.isPinned || this.transitionParams.animatePinned) {
                float lineWidth2 = f23 + (this.timeWidth - staticLayout.getLineWidth(0));
                ReactionsLayoutInBubble reactionsLayoutInBubble3 = this.reactionsLayoutInBubble;
                if (reactionsLayoutInBubble3.isSmall && !reactionsLayoutInBubble3.isEmpty) {
                    lineWidth2 -= reactionsLayoutInBubble3.width;
                }
                float f24 = lineWidth2;
                int createStatusDrawableParams2 = this.transitionParams.createStatusDrawableParams();
                int i11 = this.transitionParams.lastStatusDrawableParams;
                if (i11 >= 0 && i11 != createStatusDrawableParams2 && !this.statusDrawableAnimationInProgress) {
                    createStatusDrawableAnimator(i11, createStatusDrawableParams2, z);
                }
                boolean z11 = this.statusDrawableAnimationInProgress;
                if (z11) {
                    createStatusDrawableParams2 = this.animateToStatusDrawableParams;
                }
                boolean z12 = (createStatusDrawableParams2 & 4) != 0;
                boolean z13 = (createStatusDrawableParams2 & 8) != 0;
                if (z11) {
                    int i12 = this.animateFromStatusDrawableParams;
                    boolean z14 = (i12 & 4) != 0;
                    boolean z15 = (i12 & 8) != 0;
                    float f25 = i10;
                    float f26 = f8;
                    drawClockOrErrorLayout(canvas, z14, z15, f12, f26, f25, f14, 1.0f - this.statusDrawableProgress, z2);
                    drawClockOrErrorLayout(canvas, z12, z13, f12, f26, f25, f14, this.statusDrawableProgress, z2);
                    if (!this.currentMessageObject.isOutOwner()) {
                        if (!z14 && !z15) {
                            drawViewsAndRepliesLayout(canvas, f12, f8, f25, f14, 1.0f - this.statusDrawableProgress, z2);
                        }
                        if (!z12 && !z13) {
                            drawViewsAndRepliesLayout(canvas, f12, f8, f25, f14, this.statusDrawableProgress, z2);
                        }
                    }
                } else {
                    if (!this.currentMessageObject.isOutOwner() && !z12 && !z13) {
                        drawViewsAndRepliesLayout(canvas, f12, f8, i10, f14, 1.0f, z2);
                    }
                    drawClockOrErrorLayout(canvas, z12, z13, f12, f8, i10, f14, 1.0f, z2);
                }
                if (this.currentMessageObject.isOutOwner()) {
                    drawViewsAndRepliesLayout(canvas, f12, f8, i10, f14, 1.0f, z2);
                }
                TransitionParams transitionParams4 = this.transitionParams;
                transitionParams4.lastStatusDrawableParams = transitionParams4.createStatusDrawableParams();
                if (z12 && z && getParent() != null) {
                    ((View) getParent()).invalidate();
                }
                f23 = f24;
            }
            canvas.save();
            float f27 = 6.5f;
            if (this.transitionParams.animateEditedEnter) {
                TransitionParams transitionParams5 = this.transitionParams;
                if (transitionParams5.animateChangeProgress != 1.0f) {
                    if (transitionParams5.animateEditedLayout != null) {
                        float f28 = f15 + f23;
                        if (this.pinnedBottom || this.pinnedTop) {
                            f27 = 7.5f;
                        }
                        canvas.translate(f28, ((f12 - AndroidUtilities.dp(f27)) - staticLayout.getHeight()) + i10);
                        int alpha3 = Theme.chat_timePaint.getAlpha();
                        Theme.chat_timePaint.setAlpha((int) (alpha3 * this.transitionParams.animateChangeProgress));
                        this.transitionParams.animateEditedLayout.draw(canvas);
                        Theme.chat_timePaint.setAlpha(alpha3);
                        this.transitionParams.animateTimeLayout.draw(canvas);
                    } else {
                        int alpha4 = Theme.chat_timePaint.getAlpha();
                        canvas.save();
                        float f29 = i10;
                        canvas.translate(this.transitionParams.animateFromTimeX + f23, ((f12 - AndroidUtilities.dp((this.pinnedBottom || this.pinnedTop) ? 7.5f : 6.5f)) - staticLayout.getHeight()) + f29);
                        float f30 = alpha4;
                        Theme.chat_timePaint.setAlpha((int) ((1.0f - this.transitionParams.animateChangeProgress) * f30));
                        this.transitionParams.animateTimeLayout.draw(canvas);
                        canvas.restore();
                        float f31 = f15 + f23;
                        if (this.pinnedBottom || this.pinnedTop) {
                            f27 = 7.5f;
                        }
                        canvas.translate(f31, ((f12 - AndroidUtilities.dp(f27)) - staticLayout.getHeight()) + f29);
                        Theme.chat_timePaint.setAlpha((int) (f30 * this.transitionParams.animateChangeProgress));
                        staticLayout.draw(canvas);
                        Theme.chat_timePaint.setAlpha(alpha4);
                    }
                    canvas.restore();
                    i2 = i10;
                    z3 = false;
                }
            }
            float f32 = f15 + f23;
            this.drawTimeX = f32;
            if (this.pinnedBottom || this.pinnedTop) {
                f27 = 7.5f;
            }
            float dp4 = ((f12 - AndroidUtilities.dp(f27)) - staticLayout.getHeight()) + i10;
            this.drawTimeY = dp4;
            canvas.translate(f32, dp4);
            staticLayout.draw(canvas);
            canvas.restore();
            i2 = i10;
            z3 = false;
        }
        if (this.currentMessageObject.isOutOwner()) {
            int createStatusDrawableParams3 = this.transitionParams.createStatusDrawableParams();
            int i13 = this.transitionParams.lastStatusDrawableParams;
            if (i13 >= 0 && i13 != createStatusDrawableParams3 && !this.statusDrawableAnimationInProgress) {
                createStatusDrawableAnimator(i13, createStatusDrawableParams3, z);
            }
            if (this.statusDrawableAnimationInProgress) {
                createStatusDrawableParams3 = this.animateToStatusDrawableParams;
            }
            boolean z16 = (createStatusDrawableParams3 & 1) != 0;
            boolean z17 = (createStatusDrawableParams3 & 2) != 0;
            boolean z18 = (createStatusDrawableParams3 & 4) != 0;
            boolean z19 = (createStatusDrawableParams3 & 8) != 0;
            if (this.transitionYOffsetForDrawables != 0.0f) {
                canvas.save();
                canvas.translate(0.0f, this.transitionYOffsetForDrawables);
                z4 = true;
            } else {
                z4 = false;
            }
            if (this.statusDrawableAnimationInProgress) {
                int i14 = this.animateFromStatusDrawableParams;
                boolean z20 = (i14 & 1) != 0;
                boolean z21 = (i14 & 2) != 0;
                boolean z22 = (i14 & 4) != 0;
                boolean z23 = (i14 & 8) != 0;
                if (!z22 && z21 && z17 && !z20 && z16) {
                    drawStatusDrawable(canvas, z16, z17, z18, z19, f8, z3, i2, f12, this.statusDrawableProgress, true, z2);
                } else {
                    float f33 = i2;
                    float f34 = f8;
                    boolean z24 = z3;
                    drawStatusDrawable(canvas, z20, z21, z22, z23, f34, z24, f33, f12, 1.0f - this.statusDrawableProgress, false, z2);
                    drawStatusDrawable(canvas, z16, z17, z18, z19, f34, z24, f33, f12, this.statusDrawableProgress, false, z2);
                }
            } else {
                drawStatusDrawable(canvas, z16, z17, z18, z19, f8, z3, i2, f12, 1.0f, false, z2);
            }
            if (z4) {
                canvas.restore();
            }
            TransitionParams transitionParams6 = this.transitionParams;
            transitionParams6.lastStatusDrawableParams = transitionParams6.createStatusDrawableParams();
            if (z && z18 && getParent() != null) {
                ((View) getParent()).invalidate();
            }
        }
        canvas.restore();
    }

    public void createStatusDrawableAnimator(int i, int i2, final boolean z) {
        boolean z2 = false;
        boolean z3 = (i2 & 1) != 0;
        boolean z4 = (i2 & 2) != 0;
        boolean z5 = (i & 1) != 0;
        boolean z6 = (i & 2) != 0;
        if (!((i & 4) != 0) && z6 && z4 && !z5 && z3) {
            z2 = true;
        }
        if (!this.transitionParams.messageEntering || z2) {
            this.statusDrawableProgress = 0.0f;
            ValueAnimator ofFloat = ValueAnimator.ofFloat(0.0f, 1.0f);
            this.statusDrawableAnimator = ofFloat;
            if (z2) {
                ofFloat.setDuration(220L);
            } else {
                ofFloat.setDuration(150L);
            }
            this.statusDrawableAnimator.setInterpolator(CubicBezierInterpolator.DEFAULT);
            this.animateFromStatusDrawableParams = i;
            this.animateToStatusDrawableParams = i2;
            this.statusDrawableAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.Cells.ChatMessageCell$$ExternalSyntheticLambda0
                @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                public final void onAnimationUpdate(ValueAnimator valueAnimator) {
                    ChatMessageCell.this.lambda$createStatusDrawableAnimator$8(z, valueAnimator);
                }
            });
            this.statusDrawableAnimator.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.Cells.ChatMessageCell.6
                @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                public void onAnimationEnd(Animator animator) {
                    int createStatusDrawableParams = ChatMessageCell.this.transitionParams.createStatusDrawableParams();
                    if (ChatMessageCell.this.animateToStatusDrawableParams == createStatusDrawableParams) {
                        ChatMessageCell.this.statusDrawableAnimationInProgress = false;
                        ChatMessageCell.this.transitionParams.lastStatusDrawableParams = ChatMessageCell.this.animateToStatusDrawableParams;
                        return;
                    }
                    ChatMessageCell chatMessageCell = ChatMessageCell.this;
                    chatMessageCell.createStatusDrawableAnimator(chatMessageCell.animateToStatusDrawableParams, createStatusDrawableParams, z);
                }
            });
            this.statusDrawableAnimationInProgress = true;
            this.statusDrawableAnimator.start();
        }
    }

    public /* synthetic */ void lambda$createStatusDrawableAnimator$8(boolean z, ValueAnimator valueAnimator) {
        this.statusDrawableProgress = ((Float) valueAnimator.getAnimatedValue()).floatValue();
        invalidate();
        if (!z || getParent() == null) {
            return;
        }
        ((View) getParent()).invalidate();
    }

    private void drawClockOrErrorLayout(Canvas canvas, boolean z, boolean z2, float f, float f2, float f3, float f4, float f5, boolean z3) {
        float f6;
        int i;
        float f7;
        int i2 = 0;
        boolean z4 = f5 != 1.0f;
        float f8 = (f5 * 0.5f) + 0.5f;
        float f9 = f2 * f5;
        if (z) {
            if (this.currentMessageObject.isOutOwner()) {
                return;
            }
            MsgClockDrawable msgClockDrawable = Theme.chat_msgClockDrawable;
            String str = "chat_mediaSentClock";
            if (shouldDrawTimeOnMedia()) {
                i = getThemedColor(str);
            } else {
                if (z3) {
                    str = "chat_outSentClockSelected";
                }
                i = getThemedColor(str);
            }
            msgClockDrawable.setColor(i);
            if (shouldDrawTimeOnMedia()) {
                f7 = (this.photoImage.getImageY2() + this.additionalTimeOffsetY) - AndroidUtilities.dp(9.0f);
            } else {
                f7 = (f - AndroidUtilities.dp((this.pinnedBottom || this.pinnedTop) ? 9.5f : 8.5f)) + f3;
            }
            if (!this.currentMessageObject.scheduled) {
                i2 = AndroidUtilities.dp(11.0f);
            }
            BaseCell.setDrawableBounds(msgClockDrawable, f4 + i2, f7 - msgClockDrawable.getIntrinsicHeight());
            msgClockDrawable.setAlpha((int) (f9 * 255.0f));
            if (z4) {
                canvas.save();
                canvas.scale(f8, f8, msgClockDrawable.getBounds().centerX(), msgClockDrawable.getBounds().centerY());
            }
            msgClockDrawable.draw(canvas);
            msgClockDrawable.setAlpha(255);
            invalidate();
            if (!z4) {
                return;
            }
            canvas.restore();
        } else if (!z2 || this.currentMessageObject.isOutOwner()) {
        } else {
            if (!this.currentMessageObject.scheduled) {
                i2 = AndroidUtilities.dp(11.0f);
            }
            float f10 = f4 + i2;
            float f11 = 21.5f;
            if (shouldDrawTimeOnMedia()) {
                f6 = (this.photoImage.getImageY2() + this.additionalTimeOffsetY) - AndroidUtilities.dp(21.5f);
            } else {
                if (!this.pinnedBottom && !this.pinnedTop) {
                    f11 = 20.5f;
                }
                f6 = (f - AndroidUtilities.dp(f11)) + f3;
            }
            this.rect.set(f10, f6, AndroidUtilities.dp(14.0f) + f10, AndroidUtilities.dp(14.0f) + f6);
            int alpha = Theme.chat_msgErrorPaint.getAlpha();
            int i3 = (int) (f9 * 255.0f);
            Theme.chat_msgErrorPaint.setAlpha(i3);
            if (z4) {
                canvas.save();
                canvas.scale(f8, f8, this.rect.centerX(), this.rect.centerY());
            }
            canvas.drawRoundRect(this.rect, AndroidUtilities.dp(1.0f), AndroidUtilities.dp(1.0f), Theme.chat_msgErrorPaint);
            Theme.chat_msgErrorPaint.setAlpha(alpha);
            Drawable themedDrawable = getThemedDrawable("drawableMsgError");
            BaseCell.setDrawableBounds(themedDrawable, f10 + AndroidUtilities.dp(6.0f), f6 + AndroidUtilities.dp(2.0f));
            themedDrawable.setAlpha(i3);
            themedDrawable.draw(canvas);
            themedDrawable.setAlpha(255);
            if (!z4) {
                return;
            }
            canvas.restore();
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:100:0x01e3  */
    /* JADX WARN: Removed duplicated region for block: B:105:0x01fb  */
    /* JADX WARN: Removed duplicated region for block: B:107:0x020d  */
    /* JADX WARN: Removed duplicated region for block: B:110:0x0218  */
    /* JADX WARN: Removed duplicated region for block: B:89:0x0152  */
    /* JADX WARN: Removed duplicated region for block: B:92:0x0180  */
    /* JADX WARN: Removed duplicated region for block: B:96:0x01c7  */
    /* JADX WARN: Removed duplicated region for block: B:99:0x01df  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void drawViewsAndRepliesLayout(Canvas canvas, float f, float f2, float f3, float f4, float f5, boolean z) {
        float f6;
        boolean z2;
        float f7;
        Drawable drawable;
        float f8;
        Drawable drawable2;
        float f9;
        float f10;
        Drawable drawable3;
        float f11;
        StaticLayout staticLayout;
        float f12;
        boolean z3 = f5 != 1.0f;
        float f13 = (f5 * 0.5f) + 0.5f;
        float f14 = f2 * f5;
        ReactionsLayoutInBubble reactionsLayoutInBubble = this.reactionsLayoutInBubble;
        float currentWidth = reactionsLayoutInBubble.isSmall ? reactionsLayoutInBubble.getCurrentWidth(1.0f) : 0.0f;
        int alpha = Theme.chat_timePaint.getAlpha();
        if (shouldDrawTimeOnMedia()) {
            f6 = ((this.photoImage.getImageY2() + this.additionalTimeOffsetY) - AndroidUtilities.dp(7.3f)) - this.timeLayout.getHeight();
        } else {
            f6 = ((f - AndroidUtilities.dp((this.pinnedBottom || this.pinnedTop) ? 7.5f : 6.5f)) - this.timeLayout.getHeight()) + f3;
        }
        if (this.repliesLayout != null || this.transitionParams.animateReplies) {
            TransitionParams transitionParams = this.transitionParams;
            float f15 = (transitionParams.shouldAnimateTimeX ? this.timeX : f4) + currentWidth;
            boolean z4 = transitionParams.animateReplies && this.transitionParams.animateRepliesLayout == null && this.repliesLayout != null;
            boolean z5 = this.transitionParams.animateReplies && this.transitionParams.animateRepliesLayout != null && this.repliesLayout == null;
            boolean z6 = (!this.transitionParams.animateReplies || this.transitionParams.animateRepliesLayout == null || this.repliesLayout == null) ? false : true;
            TransitionParams transitionParams2 = this.transitionParams;
            if (!transitionParams2.shouldAnimateTimeX || z4) {
                f10 = transitionParams2.deltaRight + f15;
            } else if (z5) {
                f10 = transitionParams2.animateFromTimeXReplies;
            } else {
                float f16 = transitionParams2.animateFromTimeXReplies;
                float f17 = this.transitionParams.animateChangeProgress;
                f10 = (f16 * (1.0f - f17)) + (f15 * f17);
            }
            MessageObject.GroupedMessages groupedMessages = this.currentMessagesGroup;
            if (groupedMessages != null) {
                MessageObject.GroupedMessages.TransitionParams transitionParams3 = groupedMessages.transitionParams;
                if (transitionParams3.backgroundChangeBounds) {
                    f10 += transitionParams3.offsetRight;
                }
            }
            if (this.transitionParams.animateBackgroundBoundsInner) {
                f10 += this.animationOffsetX;
            }
            if (shouldDrawTimeOnMedia()) {
                if (this.currentMessageObject.shouldDrawWithoutBackground()) {
                    drawable3 = getThemedDrawable("drawableMsgStickerReplies");
                } else {
                    drawable3 = Theme.chat_msgMediaRepliesDrawable;
                }
            } else if (!this.currentMessageObject.isOutOwner()) {
                drawable3 = z ? Theme.chat_msgInRepliesSelectedDrawable : Theme.chat_msgInRepliesDrawable;
            } else {
                drawable3 = getThemedDrawable("drawableMsgOutReplies");
            }
            BaseCell.setDrawableBounds(drawable3, f10, f6);
            if (z4) {
                f12 = this.transitionParams.animateChangeProgress;
            } else if (z5) {
                f12 = 1.0f - this.transitionParams.animateChangeProgress;
            } else {
                f11 = f14;
                drawable3.setAlpha((int) (f11 * 255.0f));
                if (z3) {
                    canvas.save();
                    canvas.scale(f13, f13, (((drawable3.getIntrinsicWidth() + AndroidUtilities.dp(3.0f)) + this.repliesTextWidth) / 2.0f) + f10, drawable3.getBounds().centerY());
                }
                drawable3.draw(canvas);
                drawable3.setAlpha(255);
                if (!this.transitionParams.animateReplies) {
                    if (z6) {
                        canvas.save();
                        TextPaint textPaint = Theme.chat_timePaint;
                        double d = alpha;
                        z2 = z3;
                        double d2 = this.transitionParams.animateChangeProgress;
                        Double.isNaN(d2);
                        Double.isNaN(d);
                        textPaint.setAlpha((int) (d * (1.0d - d2)));
                        canvas.translate(drawable3.getIntrinsicWidth() + f10 + AndroidUtilities.dp(3.0f), f6);
                        this.transitionParams.animateRepliesLayout.draw(canvas);
                        canvas.restore();
                    } else {
                        z2 = z3;
                    }
                    Theme.chat_timePaint.setAlpha((int) (alpha * f11));
                } else {
                    z2 = z3;
                }
                canvas.save();
                canvas.translate(drawable3.getIntrinsicWidth() + f10 + AndroidUtilities.dp(3.0f), f6);
                staticLayout = this.repliesLayout;
                if (staticLayout == null) {
                    staticLayout.draw(canvas);
                } else if (this.transitionParams.animateRepliesLayout != null) {
                    this.transitionParams.animateRepliesLayout.draw(canvas);
                }
                canvas.restore();
                if (this.repliesLayout != null) {
                    currentWidth += drawable3.getIntrinsicWidth() + this.repliesTextWidth + AndroidUtilities.dp(10.0f);
                }
                if (z2) {
                    canvas.restore();
                }
                if (this.transitionParams.animateReplies) {
                    Theme.chat_timePaint.setAlpha(alpha);
                }
                this.transitionParams.lastTimeXReplies = f10;
            }
            f11 = f12 * f14;
            drawable3.setAlpha((int) (f11 * 255.0f));
            if (z3) {
            }
            drawable3.draw(canvas);
            drawable3.setAlpha(255);
            if (!this.transitionParams.animateReplies) {
            }
            canvas.save();
            canvas.translate(drawable3.getIntrinsicWidth() + f10 + AndroidUtilities.dp(3.0f), f6);
            staticLayout = this.repliesLayout;
            if (staticLayout == null) {
            }
            canvas.restore();
            if (this.repliesLayout != null) {
            }
            if (z2) {
            }
            if (this.transitionParams.animateReplies) {
            }
            this.transitionParams.lastTimeXReplies = f10;
        } else {
            z2 = z3;
        }
        if (this.viewsLayout != null) {
            TransitionParams transitionParams4 = this.transitionParams;
            boolean z7 = transitionParams4.shouldAnimateTimeX;
            float f18 = (z7 ? this.timeX : f4) + currentWidth;
            if (!z7) {
                f8 = transitionParams4.deltaRight + f18;
            } else {
                float f19 = transitionParams4.animateFromTimeXViews;
                float f20 = this.transitionParams.animateChangeProgress;
                f8 = (f19 * (1.0f - f20)) + (f18 * f20);
            }
            MessageObject.GroupedMessages groupedMessages2 = this.currentMessagesGroup;
            if (groupedMessages2 != null) {
                MessageObject.GroupedMessages.TransitionParams transitionParams5 = groupedMessages2.transitionParams;
                if (transitionParams5.backgroundChangeBounds) {
                    f8 += transitionParams5.offsetRight;
                }
            }
            if (this.transitionParams.animateBackgroundBoundsInner) {
                f8 += this.animationOffsetX;
            }
            if (shouldDrawTimeOnMedia()) {
                if (this.currentMessageObject.shouldDrawWithoutBackground()) {
                    drawable2 = getThemedDrawable("drawableMsgStickerViews");
                } else {
                    drawable2 = Theme.chat_msgMediaViewsDrawable;
                }
            } else if (!this.currentMessageObject.isOutOwner()) {
                drawable2 = z ? Theme.chat_msgInViewsSelectedDrawable : Theme.chat_msgInViewsDrawable;
            } else {
                drawable2 = getThemedDrawable(z ? "drawableMsgOutViewsSelected" : "drawableMsgOutViews");
            }
            float f21 = 5.5f;
            if (shouldDrawTimeOnMedia()) {
                f9 = ((this.photoImage.getImageY2() + this.additionalTimeOffsetY) - AndroidUtilities.dp(5.5f)) - this.timeLayout.getHeight();
            } else {
                if (!this.pinnedBottom && !this.pinnedTop) {
                    f21 = 4.5f;
                }
                f9 = ((f - AndroidUtilities.dp(f21)) - this.timeLayout.getHeight()) + f3;
            }
            BaseCell.setDrawableBounds(drawable2, f8, f9);
            if (z2) {
                canvas.save();
                canvas.scale(f13, f13, (((drawable2.getIntrinsicWidth() + AndroidUtilities.dp(3.0f)) + this.viewsTextWidth) / 2.0f) + f8, drawable2.getBounds().centerY());
            }
            drawable2.setAlpha((int) (f14 * 255.0f));
            drawable2.draw(canvas);
            drawable2.setAlpha(255);
            if (this.transitionParams.animateViewsLayout != null) {
                canvas.save();
                TextPaint textPaint2 = Theme.chat_timePaint;
                double d3 = alpha;
                double d4 = this.transitionParams.animateChangeProgress;
                Double.isNaN(d4);
                Double.isNaN(d3);
                textPaint2.setAlpha((int) (d3 * (1.0d - d4)));
                canvas.translate(drawable2.getIntrinsicWidth() + f8 + AndroidUtilities.dp(3.0f), f6);
                this.transitionParams.animateViewsLayout.draw(canvas);
                canvas.restore();
                Theme.chat_timePaint.setAlpha((int) (alpha * this.transitionParams.animateChangeProgress));
            }
            canvas.save();
            canvas.translate(drawable2.getIntrinsicWidth() + f8 + AndroidUtilities.dp(3.0f), f6);
            this.viewsLayout.draw(canvas);
            canvas.restore();
            if (z2) {
                canvas.restore();
            }
            currentWidth += this.viewsTextWidth + Theme.chat_msgInViewsDrawable.getIntrinsicWidth() + AndroidUtilities.dp(10.0f);
            if (this.transitionParams.animateViewsLayout != null) {
                Theme.chat_timePaint.setAlpha(alpha);
            }
            this.transitionParams.lastTimeXViews = f8;
        }
        if (this.isPinned || this.transitionParams.animatePinned) {
            TransitionParams transitionParams6 = this.transitionParams;
            float f22 = (transitionParams6.shouldAnimateTimeX ? this.timeX : f4) + currentWidth;
            boolean z8 = transitionParams6.animatePinned && this.isPinned;
            boolean z9 = this.transitionParams.animatePinned && !this.isPinned;
            TransitionParams transitionParams7 = this.transitionParams;
            if (!transitionParams7.shouldAnimateTimeX || z8) {
                f7 = transitionParams7.deltaRight + f22;
            } else if (z9) {
                f7 = transitionParams7.animateFromTimeXPinned;
            } else {
                float f23 = transitionParams7.animateFromTimeXPinned;
                float f24 = transitionParams7.animateChangeProgress;
                f7 = (f23 * (1.0f - f24)) + (f22 * f24);
            }
            MessageObject.GroupedMessages groupedMessages3 = this.currentMessagesGroup;
            if (groupedMessages3 != null) {
                MessageObject.GroupedMessages.TransitionParams transitionParams8 = groupedMessages3.transitionParams;
                if (transitionParams8.backgroundChangeBounds) {
                    f7 += transitionParams8.offsetRight;
                }
            }
            if (transitionParams7.animateBackgroundBoundsInner) {
                f7 += this.animationOffsetX;
            }
            if (shouldDrawTimeOnMedia()) {
                if (this.currentMessageObject.shouldDrawWithoutBackground()) {
                    drawable = getThemedDrawable("drawableMsgStickerPinned");
                } else {
                    drawable = Theme.chat_msgMediaPinnedDrawable;
                }
            } else if (!this.currentMessageObject.isOutOwner()) {
                drawable = z ? Theme.chat_msgInPinnedSelectedDrawable : Theme.chat_msgInPinnedDrawable;
            } else {
                drawable = getThemedDrawable(z ? "drawableMsgOutPinnedSelected" : "drawableMsgOutPinned");
            }
            if (this.transitionParams.animatePinned) {
                if (this.isPinned) {
                    drawable.setAlpha((int) (f14 * 255.0f * this.transitionParams.animateChangeProgress));
                    BaseCell.setDrawableBounds(drawable, f7, f6);
                } else {
                    drawable.setAlpha((int) (f14 * 255.0f * (1.0f - this.transitionParams.animateChangeProgress)));
                    BaseCell.setDrawableBounds(drawable, f7, f6);
                }
            } else {
                drawable.setAlpha((int) (f14 * 255.0f));
                BaseCell.setDrawableBounds(drawable, f7, f6);
            }
            if (z2) {
                canvas.save();
                canvas.scale(f13, f13, (drawable.getIntrinsicWidth() / 2.0f) + f7, drawable.getBounds().centerY());
            }
            drawable.draw(canvas);
            drawable.setAlpha(255);
            if (z2) {
                canvas.restore();
            }
            this.transitionParams.lastTimeXPinned = f7;
        }
    }

    private void drawStatusDrawable(Canvas canvas, boolean z, boolean z2, boolean z3, boolean z4, float f, boolean z5, float f2, float f3, float f4, boolean z6, boolean z7) {
        int dp;
        int dp2;
        Drawable drawable;
        Drawable drawable2;
        int i;
        boolean z8 = f4 != 1.0f && !z6;
        float f5 = (f4 * 0.5f) + 0.5f;
        float f6 = z8 ? f * f4 : f;
        float imageY2 = (this.photoImage.getImageY2() + this.additionalTimeOffsetY) - AndroidUtilities.dp(8.5f);
        if (z3) {
            MsgClockDrawable msgClockDrawable = Theme.chat_msgClockDrawable;
            if (shouldDrawTimeOnMedia()) {
                float f7 = 24.0f;
                if (this.currentMessageObject.shouldDrawWithoutBackground()) {
                    i = getThemedColor("chat_serviceText");
                    int i2 = this.layoutWidth;
                    if (!z5) {
                        f7 = 22.0f;
                    }
                    BaseCell.setDrawableBounds(msgClockDrawable, (i2 - AndroidUtilities.dp(f7)) - msgClockDrawable.getIntrinsicWidth(), (imageY2 - msgClockDrawable.getIntrinsicHeight()) + f2);
                    msgClockDrawable.setAlpha((int) (this.timeAlpha * 255.0f * f6));
                } else {
                    i = getThemedColor("chat_mediaSentClock");
                    int i3 = this.layoutWidth;
                    if (!z5) {
                        f7 = 22.0f;
                    }
                    BaseCell.setDrawableBounds(msgClockDrawable, (i3 - AndroidUtilities.dp(f7)) - msgClockDrawable.getIntrinsicWidth(), (imageY2 - msgClockDrawable.getIntrinsicHeight()) + f2);
                    msgClockDrawable.setAlpha((int) (f6 * 255.0f));
                }
            } else {
                int themedColor = getThemedColor("chat_outSentClock");
                BaseCell.setDrawableBounds(msgClockDrawable, (this.layoutWidth - AndroidUtilities.dp(18.5f)) - msgClockDrawable.getIntrinsicWidth(), ((f3 - AndroidUtilities.dp(8.5f)) - msgClockDrawable.getIntrinsicHeight()) + f2);
                msgClockDrawable.setAlpha((int) (f6 * 255.0f));
                i = themedColor;
            }
            msgClockDrawable.setColor(i);
            if (z8) {
                canvas.save();
                canvas.scale(f5, f5, msgClockDrawable.getBounds().centerX(), msgClockDrawable.getBounds().centerY());
            }
            msgClockDrawable.draw(canvas);
            msgClockDrawable.setAlpha(255);
            if (z8) {
                canvas.restore();
            }
            invalidate();
        }
        float f8 = 23.5f;
        float f9 = 9.0f;
        if (z2) {
            if (shouldDrawTimeOnMedia()) {
                if (z6) {
                    canvas.save();
                }
                float f10 = 28.3f;
                if (this.currentMessageObject.shouldDrawWithoutBackground()) {
                    drawable2 = getThemedDrawable("drawableMsgStickerCheck");
                    if (z) {
                        if (z6) {
                            canvas.translate(AndroidUtilities.dp(4.8f) * (1.0f - f4), 0.0f);
                        }
                        int i4 = this.layoutWidth;
                        if (!z5) {
                            f10 = 26.3f;
                        }
                        BaseCell.setDrawableBounds(drawable2, (i4 - AndroidUtilities.dp(f10)) - drawable2.getIntrinsicWidth(), (imageY2 - drawable2.getIntrinsicHeight()) + f2);
                    } else {
                        BaseCell.setDrawableBounds(drawable2, (this.layoutWidth - AndroidUtilities.dp(z5 ? 23.5f : 21.5f)) - drawable2.getIntrinsicWidth(), (imageY2 - drawable2.getIntrinsicHeight()) + f2);
                    }
                    drawable2.setAlpha((int) (this.timeAlpha * 255.0f * f6));
                } else {
                    if (z) {
                        if (z6) {
                            canvas.translate(AndroidUtilities.dp(4.8f) * (1.0f - f4), 0.0f);
                        }
                        Drawable drawable3 = Theme.chat_msgMediaCheckDrawable;
                        int i5 = this.layoutWidth;
                        if (!z5) {
                            f10 = 26.3f;
                        }
                        BaseCell.setDrawableBounds(drawable3, (i5 - AndroidUtilities.dp(f10)) - Theme.chat_msgMediaCheckDrawable.getIntrinsicWidth(), (imageY2 - Theme.chat_msgMediaCheckDrawable.getIntrinsicHeight()) + f2);
                    } else {
                        BaseCell.setDrawableBounds(Theme.chat_msgMediaCheckDrawable, (this.layoutWidth - AndroidUtilities.dp(z5 ? 23.5f : 21.5f)) - Theme.chat_msgMediaCheckDrawable.getIntrinsicWidth(), (imageY2 - Theme.chat_msgMediaCheckDrawable.getIntrinsicHeight()) + f2);
                    }
                    Theme.chat_msgMediaCheckDrawable.setAlpha((int) (this.timeAlpha * 255.0f * f6));
                    drawable2 = Theme.chat_msgMediaCheckDrawable;
                }
                if (z8) {
                    canvas.save();
                    canvas.scale(f5, f5, drawable2.getBounds().centerX(), drawable2.getBounds().centerY());
                }
                drawable2.draw(canvas);
                if (z8) {
                    canvas.restore();
                }
                if (z6) {
                    canvas.restore();
                }
                drawable2.setAlpha(255);
            } else {
                if (z6) {
                    canvas.save();
                }
                if (z) {
                    if (z6) {
                        canvas.translate(AndroidUtilities.dp(4.0f) * (1.0f - f4), 0.0f);
                    }
                    drawable = getThemedDrawable(z7 ? "drawableMsgOutCheckReadSelected" : "drawableMsgOutCheckRead");
                    BaseCell.setDrawableBounds(drawable, (this.layoutWidth - AndroidUtilities.dp(22.5f)) - drawable.getIntrinsicWidth(), ((f3 - AndroidUtilities.dp((this.pinnedBottom || this.pinnedTop) ? 9.0f : 8.0f)) - drawable.getIntrinsicHeight()) + f2);
                } else {
                    drawable = getThemedDrawable(z7 ? "drawableMsgOutCheckSelected" : "drawableMsgOutCheck");
                    BaseCell.setDrawableBounds(drawable, (this.layoutWidth - AndroidUtilities.dp(18.5f)) - drawable.getIntrinsicWidth(), ((f3 - AndroidUtilities.dp((this.pinnedBottom || this.pinnedTop) ? 9.0f : 8.0f)) - drawable.getIntrinsicHeight()) + f2);
                }
                drawable.setAlpha((int) (f6 * 255.0f));
                if (z8) {
                    canvas.save();
                    canvas.scale(f5, f5, drawable.getBounds().centerX(), drawable.getBounds().centerY());
                }
                drawable.draw(canvas);
                if (z8) {
                    canvas.restore();
                }
                if (z6) {
                    canvas.restore();
                }
                drawable.setAlpha(255);
            }
        }
        if (z) {
            if (shouldDrawTimeOnMedia()) {
                Drawable themedDrawable = this.currentMessageObject.shouldDrawWithoutBackground() ? getThemedDrawable("drawableMsgStickerHalfCheck") : Theme.chat_msgMediaHalfCheckDrawable;
                int i6 = this.layoutWidth;
                if (!z5) {
                    f8 = 21.5f;
                }
                BaseCell.setDrawableBounds(themedDrawable, (i6 - AndroidUtilities.dp(f8)) - themedDrawable.getIntrinsicWidth(), (imageY2 - themedDrawable.getIntrinsicHeight()) + f2);
                themedDrawable.setAlpha((int) (this.timeAlpha * 255.0f * f6));
                if (z8 || z6) {
                    canvas.save();
                    canvas.scale(f5, f5, themedDrawable.getBounds().centerX(), themedDrawable.getBounds().centerY());
                }
                themedDrawable.draw(canvas);
                if (z8 || z6) {
                    canvas.restore();
                }
                themedDrawable.setAlpha(255);
            } else {
                Drawable themedDrawable2 = getThemedDrawable(z7 ? "drawableMsgOutHalfCheckSelected" : "drawableMsgOutHalfCheck");
                float dp3 = (this.layoutWidth - AndroidUtilities.dp(18.0f)) - themedDrawable2.getIntrinsicWidth();
                if (!this.pinnedBottom && !this.pinnedTop) {
                    f9 = 8.0f;
                }
                BaseCell.setDrawableBounds(themedDrawable2, dp3, ((f3 - AndroidUtilities.dp(f9)) - themedDrawable2.getIntrinsicHeight()) + f2);
                themedDrawable2.setAlpha((int) (f6 * 255.0f));
                if (z8 || z6) {
                    canvas.save();
                    canvas.scale(f5, f5, themedDrawable2.getBounds().centerX(), themedDrawable2.getBounds().centerY());
                }
                themedDrawable2.draw(canvas);
                if (z8 || z6) {
                    canvas.restore();
                }
                themedDrawable2.setAlpha(255);
            }
        }
        if (z4) {
            if (shouldDrawTimeOnMedia()) {
                dp = this.layoutWidth - AndroidUtilities.dp(34.5f);
                dp2 = AndroidUtilities.dp(26.5f);
            } else {
                dp = this.layoutWidth - AndroidUtilities.dp(32.0f);
                dp2 = AndroidUtilities.dp((this.pinnedBottom || this.pinnedTop) ? 22.0f : 21.0f);
            }
            float f11 = (f3 - dp2) + f2;
            this.rect.set(dp, f11, AndroidUtilities.dp(14.0f) + dp, AndroidUtilities.dp(14.0f) + f11);
            int alpha = Theme.chat_msgErrorPaint.getAlpha();
            Theme.chat_msgErrorPaint.setAlpha((int) (alpha * f6));
            canvas.drawRoundRect(this.rect, AndroidUtilities.dp(1.0f), AndroidUtilities.dp(1.0f), Theme.chat_msgErrorPaint);
            Theme.chat_msgErrorPaint.setAlpha(alpha);
            BaseCell.setDrawableBounds(Theme.chat_msgErrorDrawable, dp + AndroidUtilities.dp(6.0f), f11 + AndroidUtilities.dp(2.0f));
            Theme.chat_msgErrorDrawable.setAlpha((int) (f6 * 255.0f));
            if (z8) {
                canvas.save();
                canvas.scale(f5, f5, Theme.chat_msgErrorDrawable.getBounds().centerX(), Theme.chat_msgErrorDrawable.getBounds().centerY());
            }
            Theme.chat_msgErrorDrawable.draw(canvas);
            Theme.chat_msgErrorDrawable.setAlpha(255);
            if (!z8) {
                return;
            }
            canvas.restore();
        }
    }

    /* JADX WARN: Code restructure failed: missing block: B:333:0x09c9, code lost:
        if (r1[0] == 3) goto L335;
     */
    /* JADX WARN: Code restructure failed: missing block: B:594:0x1122, code lost:
        if (r3 == 2) goto L597;
     */
    /* JADX WARN: Removed duplicated region for block: B:475:0x0dc6  */
    /* JADX WARN: Removed duplicated region for block: B:737:0x13ec  */
    /* JADX WARN: Removed duplicated region for block: B:741:0x1405  */
    /* JADX WARN: Removed duplicated region for block: B:749:0x1426  */
    /* JADX WARN: Removed duplicated region for block: B:753:0x143d  */
    /* JADX WARN: Removed duplicated region for block: B:775:0x147b  */
    /* JADX WARN: Removed duplicated region for block: B:779:0x148c  */
    /* JADX WARN: Removed duplicated region for block: B:825:0x159a  */
    /* JADX WARN: Removed duplicated region for block: B:831:0x15ae  */
    /* JADX WARN: Removed duplicated region for block: B:835:0x15bc  */
    /* JADX WARN: Removed duplicated region for block: B:869:0x1682  */
    /* JADX WARN: Removed duplicated region for block: B:872:0x1689  */
    /* JADX WARN: Removed duplicated region for block: B:922:0x17d2  */
    /* JADX WARN: Removed duplicated region for block: B:929:0x17f1  */
    /* JADX WARN: Removed duplicated region for block: B:932:0x1845  */
    /* JADX WARN: Removed duplicated region for block: B:955:0x0dcf A[SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:956:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Type inference failed for: r2v441, types: [boolean] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void drawOverlays(Canvas canvas) {
        float f;
        float f2;
        float f3;
        ReactionsLayoutInBubble reactionsLayoutInBubble;
        float f4;
        boolean z;
        int i;
        long j;
        int i2;
        float f5;
        float f6;
        float f7;
        boolean z2;
        boolean z3;
        float f8;
        float f9;
        int i3;
        int i4;
        StaticLayout staticLayout;
        int i5;
        int i6;
        int i7;
        Drawable drawable;
        int i8;
        int i9;
        int dp;
        float f10;
        String format;
        Drawable drawable2;
        String str;
        float f11;
        float f12;
        int i10;
        int i11;
        String formatDurationNoHours;
        int i12;
        int i13;
        float f13;
        float f14;
        int i14;
        float f15;
        int i15;
        Drawable drawable3;
        Drawable drawable4;
        int imageX;
        int imageY;
        float f16;
        float f17;
        StaticLayout staticLayout2;
        String str2;
        int i16;
        AnimatedFileDrawable animation;
        ChatMessageCellDelegate chatMessageCellDelegate;
        if (this.drawFromPinchToZoom || (chatMessageCellDelegate = this.delegate) == null || chatMessageCellDelegate.getPinchToZoomHelper() == null || !this.delegate.getPinchToZoomHelper().isInOverlayModeFor(this)) {
            long elapsedRealtime = SystemClock.elapsedRealtime();
            long j2 = elapsedRealtime - this.lastAnimationTime;
            if (j2 > 17) {
                j2 = 17;
            }
            this.lastAnimationTime = elapsedRealtime;
            if (this.currentMessageObject.hadAnimationNotReadyLoading && this.photoImage.getVisible() && !this.currentMessageObject.needDrawBluredPreview() && (((i16 = this.documentAttachType) == 7 || i16 == 4 || i16 == 2) && (animation = this.photoImage.getAnimation()) != null && animation.hasBitmap())) {
                this.currentMessageObject.hadAnimationNotReadyLoading = false;
                updateButtonState(false, true, false);
            }
            if (!this.hasGamePreview) {
                MessageObject messageObject = this.currentMessageObject;
                int i17 = messageObject.type;
                long j3 = j2;
                if (i17 == 3 || i17 == 1 || (i7 = this.documentAttachType) == 4 || i7 == 2) {
                    if (this.photoImage.getVisible()) {
                        if (!this.currentMessageObject.needDrawBluredPreview() && this.documentAttachType == 4) {
                            int alpha = ((BitmapDrawable) Theme.chat_msgMediaMenuDrawable).getPaint().getAlpha();
                            if (this.drawMediaCheckBox) {
                                Theme.chat_msgMediaMenuDrawable.setAlpha((int) (alpha * this.controlsAlpha * (1.0f - this.checkBoxAnimationProgress)));
                            } else {
                                Theme.chat_msgMediaMenuDrawable.setAlpha((int) (alpha * this.controlsAlpha));
                            }
                            Drawable drawable5 = Theme.chat_msgMediaMenuDrawable;
                            int imageX2 = (int) ((this.photoImage.getImageX() + this.photoImage.getImageWidth()) - AndroidUtilities.dp(14.0f));
                            this.otherX = imageX2;
                            int imageY2 = (int) (this.photoImage.getImageY() + AndroidUtilities.dp(8.1f));
                            this.otherY = imageY2;
                            BaseCell.setDrawableBounds(drawable5, imageX2, imageY2);
                            Theme.chat_msgMediaMenuDrawable.draw(canvas);
                            Theme.chat_msgMediaMenuDrawable.setAlpha(alpha);
                        }
                        boolean isPlayingMessage = MediaController.getInstance().isPlayingMessage(this.currentMessageObject);
                        if (this.animatingNoSoundPlaying != isPlayingMessage) {
                            this.animatingNoSoundPlaying = isPlayingMessage;
                            this.animatingNoSound = isPlayingMessage ? 1 : 2;
                            this.animatingNoSoundProgress = isPlayingMessage ? 1.0f : 0.0f;
                        }
                        MessageObject.GroupedMessagePosition groupedMessagePosition = this.currentPosition;
                        boolean z4 = groupedMessagePosition == null || (groupedMessagePosition.flags & 3) == 3;
                        int i18 = this.documentAttachType;
                        int i19 = i18 != 4 ? 2 : 2;
                        int i20 = this.buttonState;
                        if (i20 == 1 || i20 == i19 || i20 == 0 || i20 == 3 || i20 == -1 || this.currentMessageObject.needDrawBluredPreview()) {
                            if (this.autoPlayingMedia) {
                                updatePlayingMessageProgress();
                            }
                            if ((this.infoLayout != null || this.loadingProgressLayout != null) && (!this.forceNotDrawTime || this.autoPlayingMedia || this.drawVideoImageButton || this.animatingLoadingProgressProgress != 0.0f || ((z4 && this.docTitleLayout != null) || (this.loadingProgressLayout != null && this.currentPosition != null && ((i6 = this.buttonState) == 1 || (i6 == 3 && this.miniButtonState == 1)))))) {
                                if (!z4) {
                                    f8 = this.animatingLoadingProgressProgress;
                                    z3 = true;
                                    z2 = false;
                                    f7 = 0.0f;
                                } else {
                                    boolean z5 = (this.buttonState == 1 || this.miniButtonState == 1 || this.animatingLoadingProgressProgress != 0.0f) && !this.currentMessageObject.isSecretMedia() && ((i5 = this.documentAttachType) == 4 || i5 == 2 || i5 == 1);
                                    MessageObject messageObject2 = this.currentMessageObject;
                                    int i21 = messageObject2.type;
                                    float f18 = ((i21 == 3 || i21 == 8 || this.documentAttachType == 4) && (!messageObject2.needDrawBluredPreview() || this.docTitleLayout != null)) ? this.animatingDrawVideoImageButtonProgress : 0.0f;
                                    z2 = f18 > 0.0f && this.docTitleLayout != null;
                                    if (z2 || (!z5 && this.infoLayout != null)) {
                                        f7 = f18;
                                        z3 = z5;
                                        f8 = 1.0f;
                                    } else {
                                        float f19 = f18;
                                        z3 = z5;
                                        f8 = this.animatingLoadingProgressProgress;
                                        f7 = f19;
                                    }
                                }
                                Theme.chat_infoPaint.setColor(getThemedColor("chat_mediaInfoText"));
                                int imageX3 = (int) (this.photoImage.getImageX() + AndroidUtilities.dp(4.0f));
                                int imageY3 = (int) (this.photoImage.getImageY() + AndroidUtilities.dp(4.0f));
                                int intrinsicWidth = (!this.autoPlayingMedia || (isPlayingMessage && this.animatingNoSound == 0)) ? 0 : (int) ((Theme.chat_msgNoSoundDrawable.getIntrinsicWidth() + AndroidUtilities.dp(4.0f)) * this.animatingNoSoundProgress);
                                if (z3 && (staticLayout = this.loadingProgressLayout) != null) {
                                    i4 = (int) staticLayout.getLineWidth(0);
                                    i3 = 0;
                                    f9 = 8.0f;
                                } else {
                                    f9 = 8.0f;
                                    i3 = intrinsicWidth;
                                    i4 = this.infoWidth;
                                }
                                int ceil = (int) Math.ceil(AndroidUtilities.dp(f9) + i4 + i3 + ((((Math.max((this.infoWidth == i4 ? i3 : 0) + i4, this.docTitleWidth) + (this.canStreamVideo ? AndroidUtilities.dp(32.0f) : 0)) - i4) - i3) * f7));
                                if (f7 != 0.0f && this.docTitleLayout == null) {
                                    f7 = 0.0f;
                                }
                                canvas.save();
                                float f20 = imageX3;
                                float f21 = imageY3;
                                canvas.scale(f8, f8, f20, f21);
                                int alpha2 = getThemedPaint("paintChatTimeBackground").getAlpha();
                                z = z4;
                                getThemedPaint("paintChatTimeBackground").setAlpha((int) (alpha2 * this.controlsAlpha * f8));
                                if (z2 || ((z3 && this.loadingProgressLayout != null) || (!z3 && this.infoLayout != null))) {
                                    this.rect.set(f20, f21, imageX3 + ceil, imageY3 + AndroidUtilities.dp((15.5f * f7) + 16.5f));
                                    int[] roundRadius = this.photoImage.getRoundRadius();
                                    float min = Math.min(AndroidUtilities.dp(8.0f), Math.max(roundRadius[0], roundRadius[1]));
                                    canvas.drawRoundRect(this.rect, min, min, getThemedPaint("paintChatTimeBackground"));
                                }
                                Theme.chat_infoPaint.setAlpha((int) (this.controlsAlpha * 255.0f * f8));
                                int imageX4 = (int) (this.photoImage.getImageX() + AndroidUtilities.dp((this.canStreamVideo ? 30.0f * f7 : 0.0f) + 8.0f));
                                this.noSoundCenterX = imageX4;
                                canvas.translate(imageX4, this.photoImage.getImageY() + AndroidUtilities.dp((0.2f * f7) + 5.5f));
                                StaticLayout staticLayout3 = this.infoLayout;
                                if (staticLayout3 != null && (!z3 || z2)) {
                                    staticLayout3.draw(canvas);
                                }
                                if (i3 != 0 && (!z3 || z2)) {
                                    canvas.save();
                                    Drawable drawable6 = Theme.chat_msgNoSoundDrawable;
                                    float f22 = this.animatingNoSoundProgress;
                                    drawable6.setAlpha((int) (f22 * 255.0f * f22 * this.controlsAlpha));
                                    int dp2 = AndroidUtilities.dp(this.animatingNoSoundProgress * 14.0f);
                                    int dp3 = (AndroidUtilities.dp(14.0f) - dp2) / 2;
                                    int dp4 = this.infoWidth + AndroidUtilities.dp(4.0f);
                                    canvas.translate(dp4, 0.0f);
                                    Theme.chat_msgNoSoundDrawable.setBounds(0, dp3, dp2, dp3 + dp2);
                                    Theme.chat_msgNoSoundDrawable.draw(canvas);
                                    this.noSoundCenterX += dp4 + (dp2 / 2);
                                    canvas.restore();
                                }
                                if (z3 && this.loadingProgressLayout != null) {
                                    canvas.save();
                                    if (z2) {
                                        Theme.chat_infoPaint.setAlpha((int) (this.controlsAlpha * 255.0f * f7));
                                        canvas.translate(0.0f, AndroidUtilities.dp(f7 * 14.3f));
                                    }
                                    this.loadingProgressLayout.draw(canvas);
                                    canvas.restore();
                                } else if (z2) {
                                    Theme.chat_infoPaint.setAlpha((int) (this.controlsAlpha * 255.0f * f7));
                                    canvas.translate(0.0f, AndroidUtilities.dp(f7 * 14.3f));
                                    this.docTitleLayout.draw(canvas);
                                }
                                canvas.restore();
                                Theme.chat_infoPaint.setAlpha(255);
                                getThemedPaint("paintChatTimeBackground").setAlpha(alpha2);
                                i = this.animatingDrawVideoImageButton;
                                if (i != 1) {
                                    j = j3;
                                    float f23 = this.animatingDrawVideoImageButtonProgress - (((float) j) / 160.0f);
                                    this.animatingDrawVideoImageButtonProgress = f23;
                                    if (f23 <= 0.0f) {
                                        this.animatingDrawVideoImageButtonProgress = 0.0f;
                                        this.animatingDrawVideoImageButton = 0;
                                    }
                                    invalidate();
                                } else {
                                    j = j3;
                                    if (i == 2) {
                                        float f24 = this.animatingDrawVideoImageButtonProgress + (((float) j) / 160.0f);
                                        this.animatingDrawVideoImageButtonProgress = f24;
                                        if (f24 >= 1.0f) {
                                            this.animatingDrawVideoImageButtonProgress = 1.0f;
                                            this.animatingDrawVideoImageButton = 0;
                                        }
                                        invalidate();
                                    }
                                }
                                i2 = this.animatingNoSound;
                                if (i2 != 1) {
                                    float f25 = this.animatingNoSoundProgress - (((float) j) / 180.0f);
                                    this.animatingNoSoundProgress = f25;
                                    if (f25 <= 0.0f) {
                                        this.animatingNoSoundProgress = 0.0f;
                                        this.animatingNoSound = 0;
                                    }
                                    invalidate();
                                } else if (i2 == 2) {
                                    float f26 = this.animatingNoSoundProgress + (((float) j) / 180.0f);
                                    this.animatingNoSoundProgress = f26;
                                    if (f26 >= 1.0f) {
                                        this.animatingNoSoundProgress = 1.0f;
                                        this.animatingNoSound = 0;
                                    }
                                    invalidate();
                                }
                                f5 = ((this.buttonState != 1 || this.miniButtonState == 1) && this.loadingProgressLayout != null) ? 1.0f : 0.0f;
                                if (f5 == 0.0f && this.infoLayout != null && z) {
                                    this.animatingLoadingProgressProgress = 0.0f;
                                }
                                f6 = this.animatingLoadingProgressProgress;
                                if (f6 >= f5) {
                                    float f27 = f6 + (((float) j) / 160.0f);
                                    this.animatingLoadingProgressProgress = f27;
                                    if (f27 > f5) {
                                        this.animatingLoadingProgressProgress = f5;
                                    }
                                    invalidate();
                                } else if (f6 != f5) {
                                    float f28 = f6 - (((float) j) / 160.0f);
                                    this.animatingLoadingProgressProgress = f28;
                                    if (f28 < f5) {
                                        this.animatingLoadingProgressProgress = f5;
                                    }
                                    invalidate();
                                }
                            }
                        }
                        z = z4;
                        i = this.animatingDrawVideoImageButton;
                        if (i != 1) {
                        }
                        i2 = this.animatingNoSound;
                        if (i2 != 1) {
                        }
                        if (this.buttonState != 1) {
                        }
                        if (f5 == 0.0f) {
                            this.animatingLoadingProgressProgress = 0.0f;
                        }
                        f6 = this.animatingLoadingProgressProgress;
                        if (f6 >= f5) {
                        }
                    }
                } else if (i17 == 4) {
                    if (this.docTitleLayout != null) {
                        if (messageObject.isOutOwner()) {
                            Theme.chat_locationTitlePaint.setColor(getThemedColor("chat_messageTextOut"));
                            Theme.chat_locationAddressPaint.setColor(getThemedColor(isDrawSelectionBackground() ? "chat_outVenueInfoSelectedText" : "chat_outVenueInfoText"));
                        } else {
                            Theme.chat_locationTitlePaint.setColor(getThemedColor("chat_messageTextIn"));
                            Theme.chat_locationAddressPaint.setColor(getThemedColor(isDrawSelectionBackground() ? "chat_inVenueInfoSelectedText" : "chat_inVenueInfoText"));
                        }
                        if (this.currentMessageObject.messageOwner.media instanceof TLRPC$TL_messageMediaGeoLive) {
                            int imageY22 = (int) (this.photoImage.getImageY2() + AndroidUtilities.dp(30.0f));
                            if (this.locationExpired) {
                                TransitionParams transitionParams = this.transitionParams;
                                if (!transitionParams.animateLocationIsExpired) {
                                    transitionParams.lastDrawLocationExpireText = null;
                                    transitionParams.lastDrawDocTitleLayout = null;
                                    transitionParams.lastDrawInfoLayout = null;
                                    BaseCell.setDrawableBounds(Theme.chat_msgAvatarLiveLocationDrawable, (int) ((this.photoImage.getImageX() + (this.photoImage.getImageWidth() / 2.0f)) - AndroidUtilities.dp(31.0f)), (int) ((this.photoImage.getImageY() + (this.photoImage.getImageHeight() / 2.0f)) - AndroidUtilities.dp(38.0f)));
                                    Theme.chat_msgAvatarLiveLocationDrawable.draw(canvas);
                                    this.locationImageReceiver.setImageCoords(imageX + AndroidUtilities.dp(5.0f), imageY + AndroidUtilities.dp(5.0f), AndroidUtilities.dp(52.0f), AndroidUtilities.dp(52.0f));
                                    this.locationImageReceiver.draw(canvas);
                                }
                            }
                            this.forceNotDrawTime = true;
                            StaticLayout staticLayout4 = this.docTitleLayout;
                            StaticLayout staticLayout5 = this.infoLayout;
                            TransitionParams transitionParams2 = this.transitionParams;
                            if (transitionParams2.animateLocationIsExpired) {
                                float f29 = transitionParams2.lastDrawLocationExpireProgress;
                                String str3 = transitionParams2.lastDrawLocationExpireText;
                                staticLayout2 = transitionParams2.lastDrawDocTitleLayout;
                                StaticLayout staticLayout6 = transitionParams2.lastDrawInfoLayout;
                                f16 = 1.0f - transitionParams2.animateChangeProgress;
                                str2 = str3;
                                staticLayout5 = staticLayout6;
                                f17 = f29;
                            } else {
                                int i22 = this.currentMessageObject.messageOwner.media.period;
                                staticLayout2 = staticLayout4;
                                f17 = 1.0f - (Math.abs(ConnectionsManager.getInstance(this.currentAccount).getCurrentTime() - this.currentMessageObject.messageOwner.date) / i22);
                                f16 = 1.0f;
                                str2 = LocaleController.formatLocationLeftTime(Math.abs(i22 - (ConnectionsManager.getInstance(this.currentAccount).getCurrentTime() - this.currentMessageObject.messageOwner.date)));
                            }
                            this.rect.set(this.photoImage.getImageX2() - AndroidUtilities.dp(43.0f), imageY22 - AndroidUtilities.dp(15.0f), this.photoImage.getImageX2() - AndroidUtilities.dp(13.0f), AndroidUtilities.dp(15.0f) + imageY22);
                            if (this.currentMessageObject.isOutOwner()) {
                                Theme.chat_radialProgress2Paint.setColor(getThemedColor("chat_outInstant"));
                                Theme.chat_livePaint.setColor(getThemedColor("chat_outInstant"));
                            } else {
                                Theme.chat_radialProgress2Paint.setColor(getThemedColor("chat_inInstant"));
                                Theme.chat_livePaint.setColor(getThemedColor("chat_inInstant"));
                            }
                            int alpha3 = Theme.chat_locationTitlePaint.getAlpha();
                            int alpha4 = Theme.chat_locationAddressPaint.getAlpha();
                            int alpha5 = Theme.chat_livePaint.getAlpha();
                            if (f16 != 1.0f) {
                                Theme.chat_locationTitlePaint.setAlpha((int) (alpha3 * f16));
                                Theme.chat_locationAddressPaint.setAlpha((int) (alpha4 * f16));
                                Theme.chat_livePaint.setAlpha((int) (alpha5 * f16));
                                canvas.save();
                                canvas.translate(0.0f, (-AndroidUtilities.dp(50.0f)) * this.transitionParams.animateChangeProgress);
                            }
                            Theme.chat_radialProgress2Paint.setAlpha((int) (50.0f * f16));
                            canvas.drawCircle(this.rect.centerX(), this.rect.centerY(), AndroidUtilities.dp(15.0f), Theme.chat_radialProgress2Paint);
                            Theme.chat_radialProgress2Paint.setAlpha((int) (f16 * 255.0f));
                            StaticLayout staticLayout7 = staticLayout5;
                            String str4 = str2;
                            StaticLayout staticLayout8 = staticLayout2;
                            float f30 = f17;
                            canvas.drawArc(this.rect, -90.0f, f17 * (-360.0f), false, Theme.chat_radialProgress2Paint);
                            canvas.drawText(str4, this.rect.centerX() - (Theme.chat_livePaint.measureText(str4) / 2.0f), imageY22 + AndroidUtilities.dp(4.0f), Theme.chat_livePaint);
                            if (staticLayout8 != null && staticLayout7 != null) {
                                canvas.save();
                                canvas.translate(this.photoImage.getImageX() + AndroidUtilities.dp(10.0f), this.photoImage.getImageY2() + AndroidUtilities.dp(10.0f));
                                staticLayout8.draw(canvas);
                                canvas.translate(0.0f, AndroidUtilities.dp(23.0f));
                                staticLayout7.draw(canvas);
                                canvas.restore();
                            }
                            if (f16 != 1.0f) {
                                Theme.chat_locationTitlePaint.setAlpha(alpha3);
                                Theme.chat_locationAddressPaint.setAlpha(alpha4);
                                Theme.chat_livePaint.setAlpha(alpha5);
                                canvas.restore();
                            }
                            TransitionParams transitionParams3 = this.transitionParams;
                            transitionParams3.lastDrawLocationExpireProgress = f30;
                            transitionParams3.lastDrawLocationExpireText = str4;
                            transitionParams3.lastDrawDocTitleLayout = staticLayout8;
                            transitionParams3.lastDrawInfoLayout = staticLayout7;
                            BaseCell.setDrawableBounds(Theme.chat_msgAvatarLiveLocationDrawable, (int) ((this.photoImage.getImageX() + (this.photoImage.getImageWidth() / 2.0f)) - AndroidUtilities.dp(31.0f)), (int) ((this.photoImage.getImageY() + (this.photoImage.getImageHeight() / 2.0f)) - AndroidUtilities.dp(38.0f)));
                            Theme.chat_msgAvatarLiveLocationDrawable.draw(canvas);
                            this.locationImageReceiver.setImageCoords(imageX + AndroidUtilities.dp(5.0f), imageY + AndroidUtilities.dp(5.0f), AndroidUtilities.dp(52.0f), AndroidUtilities.dp(52.0f));
                            this.locationImageReceiver.draw(canvas);
                        } else {
                            canvas.save();
                            canvas.translate(this.photoImage.getImageX() + AndroidUtilities.dp(6.0f), this.photoImage.getImageY2() + AndroidUtilities.dp(8.0f));
                            this.docTitleLayout.draw(canvas);
                            if (this.infoLayout != null) {
                                canvas.translate(0.0f, AndroidUtilities.dp(21.0f));
                                this.infoLayout.draw(canvas);
                            }
                            canvas.restore();
                        }
                    }
                } else if (i17 == 16) {
                    if (messageObject.isOutOwner()) {
                        Theme.chat_audioTitlePaint.setColor(getThemedColor("chat_messageTextOut"));
                        Theme.chat_contactPhonePaint.setColor(getThemedColor(isDrawSelectionBackground() ? "chat_outTimeSelectedText" : "chat_outTimeText"));
                    } else {
                        Theme.chat_audioTitlePaint.setColor(getThemedColor("chat_messageTextIn"));
                        Theme.chat_contactPhonePaint.setColor(getThemedColor(isDrawSelectionBackground() ? "chat_inTimeSelectedText" : "chat_inTimeText"));
                    }
                    this.forceNotDrawTime = true;
                    if (this.currentMessageObject.isOutOwner()) {
                        i15 = (this.layoutWidth - this.backgroundWidth) + AndroidUtilities.dp(16.0f);
                    } else if (this.isChat && !this.isThreadPost && this.currentMessageObject.needDrawAvatar()) {
                        i15 = AndroidUtilities.dp(74.0f);
                    } else {
                        i15 = AndroidUtilities.dp(25.0f);
                    }
                    this.otherX = i15;
                    if (this.titleLayout != null) {
                        canvas.save();
                        canvas.translate(i15, AndroidUtilities.dp(12.0f) + this.namesOffset);
                        this.titleLayout.draw(canvas);
                        canvas.restore();
                    }
                    if (this.docTitleLayout != null) {
                        canvas.save();
                        canvas.translate(AndroidUtilities.dp(19.0f) + i15, AndroidUtilities.dp(37.0f) + this.namesOffset);
                        this.docTitleLayout.draw(canvas);
                        canvas.restore();
                    }
                    ?? isVideoCall = this.currentMessageObject.isVideoCall();
                    if (this.currentMessageObject.isOutOwner()) {
                        drawable3 = Theme.chat_msgCallUpGreenDrawable;
                        if (this.currentMessageObject.isVideoCall()) {
                            isDrawSelectionBackground();
                            drawable4 = getThemedDrawable("drawableMsgOutCallVideo");
                        } else {
                            drawable4 = getThemedDrawable(isDrawSelectionBackground() ? "drawableMsgOutCallAudioSelected" : "drawableMsgOutCallAudio");
                        }
                    } else {
                        TLRPC$PhoneCallDiscardReason tLRPC$PhoneCallDiscardReason = this.currentMessageObject.messageOwner.action.reason;
                        if ((tLRPC$PhoneCallDiscardReason instanceof TLRPC$TL_phoneCallDiscardReasonMissed) || (tLRPC$PhoneCallDiscardReason instanceof TLRPC$TL_phoneCallDiscardReasonBusy)) {
                            drawable3 = Theme.chat_msgCallDownRedDrawable;
                        } else {
                            drawable3 = Theme.chat_msgCallDownGreenDrawable;
                        }
                        drawable4 = isDrawSelectionBackground() ? Theme.chat_msgInCallSelectedDrawable[isVideoCall] : Theme.chat_msgInCallDrawable[isVideoCall == true ? 1 : 0];
                    }
                    BaseCell.setDrawableBounds(drawable3, i15 - AndroidUtilities.dp(1.0f), AndroidUtilities.dp(37.0f) + this.namesOffset);
                    drawable3.draw(canvas);
                    if (Build.VERSION.SDK_INT >= 21) {
                        Drawable[] drawableArr = this.selectorDrawable;
                        if (drawableArr[0] != null && this.selectorDrawableMaskType[0] == 4) {
                            drawableArr[0].draw(canvas);
                        }
                    }
                    boolean z6 = this.pinnedBottom;
                    if (!z6 && !this.pinnedTop) {
                        this.otherY = AndroidUtilities.dp(18.5f);
                    } else if (z6 && this.pinnedTop) {
                        this.otherY = AndroidUtilities.dp(18.0f);
                    } else if (!z6) {
                        this.otherY = AndroidUtilities.dp(17.0f);
                    } else {
                        this.otherY = AndroidUtilities.dp(19.0f);
                    }
                    BaseCell.setDrawableBounds(drawable4, i15 + AndroidUtilities.dp(isVideoCall == 0 ? 201.0f : 200.0f), this.otherY);
                    drawable4.draw(canvas);
                } else if (i17 == 17) {
                    long currentTimeMillis = System.currentTimeMillis();
                    long j4 = currentTimeMillis - this.voteLastUpdateTime;
                    if (j4 > 17) {
                        j4 = 17;
                    }
                    this.voteLastUpdateTime = currentTimeMillis;
                    if (this.currentMessageObject.isOutOwner()) {
                        i9 = getThemedColor("chat_messageTextOut");
                        i8 = getThemedColor(isDrawSelectionBackground() ? "chat_outTimeSelectedText" : "chat_outTimeText");
                    } else {
                        i9 = getThemedColor("chat_messageTextIn");
                        i8 = getThemedColor(isDrawSelectionBackground() ? "chat_inTimeSelectedText" : "chat_inTimeText");
                    }
                    Theme.chat_audioTitlePaint.setColor(i9);
                    Theme.chat_audioPerformerPaint.setColor(i9);
                    Theme.chat_instantViewPaint.setColor(i9);
                    Theme.chat_timePaint.setColor(i8);
                    Theme.chat_livePaint.setColor(i8);
                    Theme.chat_locationAddressPaint.setColor(i8);
                    canvas.save();
                    TransitionParams transitionParams4 = this.transitionParams;
                    if (transitionParams4.animateForwardedLayout) {
                        float f31 = transitionParams4.animateChangeProgress;
                        float f32 = (this.namesOffset * f31) + (transitionParams4.animateForwardedNamesOffset * (1.0f - f31));
                        if (this.currentMessageObject.needDrawForwarded()) {
                            f32 -= this.namesOffset;
                        }
                        canvas.translate(0.0f, f32);
                    }
                    if (this.currentMessageObject.isOutOwner()) {
                        dp = (this.layoutWidth - this.backgroundWidth) + AndroidUtilities.dp(11.0f);
                    } else if (this.isChat && !this.isThreadPost && this.currentMessageObject.needDrawAvatar()) {
                        dp = AndroidUtilities.dp(68.0f);
                    } else {
                        dp = AndroidUtilities.dp(20.0f);
                    }
                    int i23 = dp;
                    if (this.titleLayout != null) {
                        canvas.save();
                        canvas.translate(getExtraTextX() + i23, AndroidUtilities.dp(15.0f) + this.namesOffset);
                        this.titleLayout.draw(canvas);
                        canvas.restore();
                    }
                    StaticLayout staticLayout9 = this.titleLayout;
                    int height = (staticLayout9 != null ? staticLayout9.getHeight() : 0) + AndroidUtilities.dp(20.0f) + this.namesOffset;
                    if (this.docTitleLayout != null) {
                        canvas.save();
                        canvas.translate(this.docTitleOffsetX + i23 + getExtraTextX(), height);
                        this.docTitleLayout.draw(canvas);
                        canvas.restore();
                        TLRPC$TL_messageMediaPoll tLRPC$TL_messageMediaPoll = (TLRPC$TL_messageMediaPoll) this.currentMessageObject.messageOwner.media;
                        if (this.lastPoll.quiz && ((this.pollVoted || this.pollClosed) && !TextUtils.isEmpty(tLRPC$TL_messageMediaPoll.results.solution))) {
                            Drawable themedDrawable = getThemedDrawable(this.currentMessageObject.isOutOwner() ? "drawable_chat_pollHintDrawableOut" : "drawable_chat_pollHintDrawableIn");
                            if (this.pollVoteInProgress) {
                                themedDrawable.setAlpha((int) (this.pollAnimationProgress * 255.0f));
                            } else {
                                themedDrawable.setAlpha(255);
                            }
                            int i24 = this.docTitleOffsetX;
                            if (i24 < 0 || (i24 == 0 && this.docTitleLayout.getLineLeft(0) == 0.0f)) {
                                this.pollHintX = (this.currentBackgroundDrawable.getBounds().right - themedDrawable.getIntrinsicWidth()) - AndroidUtilities.dp(this.currentMessageObject.isOutOwner() ? 17.0f : 11.0f);
                            } else {
                                this.pollHintX = getCurrentBackgroundLeft() + AndroidUtilities.dp(11.0f);
                            }
                            this.pollHintY = height - AndroidUtilities.dp(6.0f);
                            int intrinsicWidth2 = this.pollHintX + (themedDrawable.getIntrinsicWidth() / 2);
                            int intrinsicHeight = this.pollHintY + (themedDrawable.getIntrinsicHeight() / 2);
                            if (this.hintButtonVisible) {
                                float f33 = this.hintButtonProgress;
                                if (f33 < 1.0f) {
                                    f15 = AnimationProperties.overshootInterpolator.getInterpolation(f33);
                                    int intrinsicWidth3 = ((int) (themedDrawable.getIntrinsicWidth() * f15)) / 2;
                                    int intrinsicHeight2 = ((int) (themedDrawable.getIntrinsicHeight() * f15)) / 2;
                                    themedDrawable.setBounds(intrinsicWidth2 - intrinsicWidth3, intrinsicHeight - intrinsicHeight2, intrinsicWidth2 + intrinsicWidth3, intrinsicHeight + intrinsicHeight2);
                                    themedDrawable.draw(canvas);
                                }
                            }
                            f15 = this.hintButtonProgress;
                            int intrinsicWidth32 = ((int) (themedDrawable.getIntrinsicWidth() * f15)) / 2;
                            int intrinsicHeight22 = ((int) (themedDrawable.getIntrinsicHeight() * f15)) / 2;
                            themedDrawable.setBounds(intrinsicWidth2 - intrinsicWidth32, intrinsicHeight - intrinsicHeight22, intrinsicWidth2 + intrinsicWidth32, intrinsicHeight + intrinsicHeight22);
                            themedDrawable.draw(canvas);
                        } else {
                            this.pollHintX = -1;
                        }
                        if (this.pollAvatarImages != null && !this.isBot) {
                            int ceil2 = (int) Math.ceil(this.docTitleLayout.getLineLeft(0));
                            if (this.docTitleOffsetX != 0 || ceil2 != 0) {
                                int i25 = -AndroidUtilities.dp(13.0f);
                                int i26 = this.docTitleOffsetX;
                                if (i26 != 0) {
                                    i14 = ((i26 + i23) - AndroidUtilities.dp(23.0f)) - getExtraTextX();
                                } else {
                                    i14 = ((ceil2 + i23) - AndroidUtilities.dp(23.0f)) - getExtraTextX();
                                }
                                i12 = i14;
                                i13 = i25;
                            } else {
                                i13 = AndroidUtilities.dp(13.0f);
                                i12 = ((int) Math.ceil(this.docTitleLayout.getLineWidth(0))) + i23 + AndroidUtilities.dp(7.0f) + getExtraTextX();
                            }
                            for (int length = this.pollAvatarImages.length - 1; length >= 0; length--) {
                                if (this.pollAvatarImagesVisible[length] && this.pollAvatarImages[length].hasImageSet()) {
                                    this.pollAvatarImages[length].setImageX((i13 * length) + i12);
                                    this.pollAvatarImages[length].setImageY(height - AndroidUtilities.dp(1.0f));
                                    ImageReceiver[] imageReceiverArr = this.pollAvatarImages;
                                    if (length != imageReceiverArr.length - 1) {
                                        canvas.drawCircle(imageReceiverArr[length].getCenterX(), this.pollAvatarImages[length].getCenterY(), AndroidUtilities.dp(9.0f), this.currentBackgroundDrawable.getPaint());
                                    }
                                    if (this.animatePollAvatars && this.animatePollAnswerAlpha) {
                                        if (this.pollUnvoteInProgress) {
                                            f13 = 1.0f;
                                            f14 = (1.0f - this.pollAnimationProgress) / 0.3f;
                                        } else {
                                            f13 = 1.0f;
                                            f14 = this.pollAnimationProgress;
                                        }
                                        this.pollAvatarImages[length].setAlpha(Math.min(f14, f13));
                                    }
                                    this.pollAvatarImages[length].draw(canvas);
                                }
                            }
                        }
                    }
                    if ((!this.pollClosed && !this.pollVoted) || this.pollVoteInProgress) {
                        TLRPC$Poll tLRPC$Poll = this.lastPoll;
                        if (tLRPC$Poll.quiz && tLRPC$Poll.close_period != 0) {
                            long max = Math.max(0L, (this.lastPoll.close_date * 1000) - ConnectionsManager.getInstance(this.currentAccount).getCurrentTimeMillis());
                            if (this.closeTimeText == null || this.lastPollCloseTime != max) {
                                this.closeTimeText = AndroidUtilities.formatDurationNoHours((int) Math.ceil(((float) max) / 1000.0f), false);
                                this.closeTimeWidth = (int) Math.ceil(Theme.chat_timePaint.measureText(formatDurationNoHours));
                                this.lastPollCloseTime = max;
                            }
                            if (max <= 0 && !this.pollClosed) {
                                if (this.currentMessageObject.pollLastCheckTime + 1000 < SystemClock.elapsedRealtime()) {
                                    this.currentMessageObject.pollLastCheckTime = 0L;
                                }
                                this.delegate.needReloadPolls();
                            }
                            int dp5 = (this.currentBackgroundDrawable.getBounds().right - this.closeTimeWidth) - AndroidUtilities.dp(this.currentMessageObject.isOutOwner() ? 40.0f : 34.0f);
                            if (max <= 5000) {
                                Theme.chat_timePaint.setColor(getThemedColor(this.currentMessageObject.isOutOwner() ? "chat_outPollWrongAnswer" : "chat_inPollWrongAnswer"));
                            }
                            if (this.animatePollAnswer) {
                                Theme.chat_timePaint.setAlpha((int) ((1.0f - this.pollAnimationProgress) * 255.0f));
                            }
                            canvas.drawText(this.closeTimeText, dp5, AndroidUtilities.dp(11.0f) + height, Theme.chat_timePaint);
                            Theme.chat_pollTimerPaint.setColor(Theme.chat_timePaint.getColor());
                            int dp6 = dp5 + this.closeTimeWidth + AndroidUtilities.dp(13.0f);
                            int dp7 = AndroidUtilities.dp(5.1f);
                            int dp8 = height + AndroidUtilities.dp(6.0f);
                            if (max <= 60000) {
                                this.rect.set(dp6 - dp7, dp8 - dp7, dp6 + dp7, dp7 + dp8);
                                float min2 = (((float) max) / (Math.min(60, this.lastPoll.close_period) * 1000.0f)) * (-360.0f);
                                i11 = dp8;
                                i10 = dp6;
                                canvas.drawArc(this.rect, -90.0f, min2, false, Theme.chat_pollTimerPaint);
                                this.timerParticles.draw(canvas, Theme.chat_pollTimerPaint, this.rect, min2, this.pollVoteInProgress ? 1.0f - this.pollAnimationProgress : 1.0f);
                            } else {
                                i11 = dp8;
                                i10 = dp6;
                                canvas.drawCircle(i10, i11, dp7, Theme.chat_pollTimerPaint);
                            }
                            if (max > 60000 || this.timerTransitionProgress != 0.0f) {
                                Theme.chat_pollTimerPaint.setAlpha((int) (this.timerTransitionProgress * 255.0f));
                                float f34 = i10;
                                canvas.drawLine(f34 - (AndroidUtilities.dp(2.1f) * this.timerTransitionProgress), i11 - AndroidUtilities.dp(7.5f), f34 + (AndroidUtilities.dp(2.1f) * this.timerTransitionProgress), i11 - AndroidUtilities.dp(7.5f), Theme.chat_pollTimerPaint);
                                float f35 = i11;
                                canvas.drawLine(f34, f35 - (AndroidUtilities.dp(3.0f) * this.timerTransitionProgress), f34, f35, Theme.chat_pollTimerPaint);
                                if (max <= 60000) {
                                    float f36 = this.timerTransitionProgress - (((float) j4) / 180.0f);
                                    this.timerTransitionProgress = f36;
                                    if (f36 < 0.0f) {
                                        this.timerTransitionProgress = 0.0f;
                                    }
                                }
                            }
                            invalidate();
                        }
                    }
                    if (Build.VERSION.SDK_INT >= 21 && this.selectorDrawable[0] != null) {
                        int[] iArr = this.selectorDrawableMaskType;
                        int i27 = iArr[0] != 1 ? 3 : 3;
                        if (iArr[0] == i27) {
                            canvas.save();
                            float f37 = this.hintButtonProgress;
                            canvas.scale(f37, f37, this.selectorDrawable[0].getBounds().centerX(), this.selectorDrawable[0].getBounds().centerY());
                        }
                        this.selectorDrawable[0].draw(canvas);
                        if (this.selectorDrawableMaskType[0] == 3) {
                            canvas.restore();
                        }
                    }
                    int size = this.pollButtons.size();
                    int i28 = 0;
                    for (int i29 = 0; i29 < size; i29++) {
                        PollButton pollButton = this.pollButtons.get(i29);
                        pollButton.x = i23;
                        canvas.save();
                        canvas.translate(AndroidUtilities.dp(35.0f) + i23, pollButton.y + this.namesOffset);
                        pollButton.title.draw(canvas);
                        if (this.animatePollAnswerAlpha) {
                            if (this.pollUnvoteInProgress) {
                                f11 = 1.0f;
                                f12 = 1.0f - this.pollAnimationProgress;
                            } else {
                                f11 = 1.0f;
                                f12 = this.pollAnimationProgress;
                            }
                            f10 = Math.min(f12 / 0.3f, f11) * 255.0f;
                        } else {
                            f10 = 255.0f;
                        }
                        int i30 = (int) f10;
                        boolean z7 = this.pollVoted;
                        if (z7 || this.pollClosed || this.animatePollAnswerAlpha) {
                            if (this.lastPoll.quiz && z7 && pollButton.chosen) {
                                if (pollButton.correct) {
                                    str = this.currentMessageObject.isOutOwner() ? "chat_outPollCorrectAnswer" : "chat_inPollCorrectAnswer";
                                } else {
                                    str = this.currentMessageObject.isOutOwner() ? "chat_outPollWrongAnswer" : "chat_inPollWrongAnswer";
                                }
                                if (!this.currentBackgroundDrawable.hasGradient() || Theme.hasThemeKey(str)) {
                                    Theme.chat_docBackPaint.setColor(getThemedColor(str));
                                } else {
                                    Theme.chat_docBackPaint.setColor(getThemedColor(this.currentMessageObject.isOutOwner() ? "chat_outAudioSeekbarFill" : "chat_inAudioSeekbarFill"));
                                }
                            } else {
                                Theme.chat_docBackPaint.setColor(getThemedColor(this.currentMessageObject.isOutOwner() ? "chat_outAudioSeekbarFill" : "chat_inAudioSeekbarFill"));
                            }
                            if (this.animatePollAnswerAlpha) {
                                float f38 = i30;
                                Theme.chat_instantViewPaint.setAlpha((int) ((Theme.chat_instantViewPaint.getAlpha() / 255.0f) * f38));
                                Theme.chat_docBackPaint.setAlpha((int) (f38 * (Theme.chat_docBackPaint.getAlpha() / 255.0f)));
                            }
                            canvas.drawText(String.format("%d%%", Integer.valueOf((int) Math.ceil(pollButton.prevPercent + ((pollButton.percent - pollButton.prevPercent) * this.pollAnimationProgress)))), (-AndroidUtilities.dp(6.5f)) - ((int) Math.ceil(Theme.chat_instantViewPaint.measureText(format))), AndroidUtilities.dp(14.0f), Theme.chat_instantViewPaint);
                            this.rect.set(0.0f, pollButton.height + AndroidUtilities.dp(6.0f), (this.backgroundWidth - AndroidUtilities.dp(76.0f)) * (pollButton.prevPercentProgress + ((pollButton.percentProgress - pollButton.prevPercentProgress) * this.pollAnimationProgress)), pollButton.height + AndroidUtilities.dp(11.0f));
                            canvas.drawRoundRect(this.rect, AndroidUtilities.dp(2.0f), AndroidUtilities.dp(2.0f), Theme.chat_docBackPaint);
                            if (pollButton.chosen || pollButton.prevChosen || (this.lastPoll.quiz && pollButton.correct && (this.pollVoted || this.pollClosed))) {
                                float dp9 = this.rect.left - AndroidUtilities.dp(13.5f);
                                float centerY = this.rect.centerY();
                                canvas.drawCircle(dp9, centerY, AndroidUtilities.dp(7.0f), Theme.chat_docBackPaint);
                                if (this.lastPoll.quiz && pollButton.chosen && !pollButton.correct) {
                                    drawable2 = Theme.chat_pollCrossDrawable[this.currentMessageObject.isOutOwner() ? 1 : 0];
                                } else {
                                    drawable2 = Theme.chat_pollCheckDrawable[this.currentMessageObject.isOutOwner() ? 1 : 0];
                                }
                                drawable2.setAlpha(i30);
                                BaseCell.setDrawableBounds(drawable2, dp9 - (drawable2.getIntrinsicWidth() / 2), centerY - (drawable2.getIntrinsicHeight() / 2));
                                drawable2.draw(canvas);
                            }
                        }
                        if ((!this.pollVoted && !this.pollClosed) || this.animatePollAnswerAlpha) {
                            if (isDrawSelectionBackground()) {
                                Theme.chat_replyLinePaint.setColor(getThemedColor(this.currentMessageObject.isOutOwner() ? "chat_outVoiceSeekbarSelected" : "chat_inVoiceSeekbarSelected"));
                            } else {
                                Theme.chat_replyLinePaint.setColor(getThemedColor(this.currentMessageObject.isOutOwner() ? "chat_outVoiceSeekbar" : "chat_inVoiceSeekbar"));
                            }
                            if (this.animatePollAnswerAlpha) {
                                Theme.chat_replyLinePaint.setAlpha((int) ((255 - i30) * (Theme.chat_replyLinePaint.getAlpha() / 255.0f)));
                            }
                            canvas.drawLine(-AndroidUtilities.dp(2.0f), pollButton.height + AndroidUtilities.dp(13.0f), this.backgroundWidth - AndroidUtilities.dp(58.0f), pollButton.height + AndroidUtilities.dp(13.0f), Theme.chat_replyLinePaint);
                            if (this.pollVoteInProgress && i29 == this.pollVoteInProgressNum) {
                                Theme.chat_instantViewRectPaint.setColor(getThemedColor(this.currentMessageObject.isOutOwner() ? "chat_outAudioSeekbarFill" : "chat_inAudioSeekbarFill"));
                                if (this.animatePollAnswerAlpha) {
                                    Theme.chat_instantViewRectPaint.setAlpha((int) ((255 - i30) * (Theme.chat_instantViewRectPaint.getAlpha() / 255.0f)));
                                }
                                this.rect.set((-AndroidUtilities.dp(22.0f)) - AndroidUtilities.dp(8.5f), AndroidUtilities.dp(9.0f) - AndroidUtilities.dp(8.5f), (-AndroidUtilities.dp(23.0f)) + AndroidUtilities.dp(8.5f), AndroidUtilities.dp(9.0f) + AndroidUtilities.dp(8.5f));
                                canvas.drawArc(this.rect, this.voteRadOffset, this.voteCurrentCircleLength, false, Theme.chat_instantViewRectPaint);
                            } else {
                                if (this.currentMessageObject.isOutOwner()) {
                                    Theme.chat_instantViewRectPaint.setColor(getThemedColor(isDrawSelectionBackground() ? "chat_outMenuSelected" : "chat_outMenu"));
                                } else {
                                    Theme.chat_instantViewRectPaint.setColor(getThemedColor(isDrawSelectionBackground() ? "chat_inMenuSelected" : "chat_inMenu"));
                                }
                                if (this.animatePollAnswerAlpha) {
                                    Theme.chat_instantViewRectPaint.setAlpha((int) ((255 - i30) * (Theme.chat_instantViewRectPaint.getAlpha() / 255.0f)));
                                }
                                canvas.drawCircle(-AndroidUtilities.dp(22.0f), AndroidUtilities.dp(9.0f), AndroidUtilities.dp(8.5f), Theme.chat_instantViewRectPaint);
                                if (this.lastPoll.multiple_choice) {
                                    int dp10 = AndroidUtilities.dp(8.5f);
                                    String str5 = "checkboxCheck";
                                    if (this.currentMessageObject.isOutOwner() && getThemedColor(str5) == -1) {
                                        str5 = "chat_outBubble";
                                    }
                                    this.pollCheckBox[i29].setColor(null, this.currentMessageObject.isOutOwner() ? "chat_outAudioSeekbarFill" : "chat_inAudioSeekbarFill", str5);
                                    int i31 = dp10 / 2;
                                    this.pollCheckBox[i29].setBounds((-AndroidUtilities.dp(22.0f)) - i31, AndroidUtilities.dp(9.0f) - i31, dp10, dp10);
                                    this.pollCheckBox[i29].draw(canvas);
                                    canvas.restore();
                                    if (i29 != size - 1) {
                                        i28 = pollButton.y + this.namesOffset + pollButton.height;
                                    }
                                }
                            }
                        }
                        canvas.restore();
                        if (i29 != size - 1) {
                        }
                    }
                    if (this.drawInstantView) {
                        int currentBackgroundLeft = getCurrentBackgroundLeft() + AndroidUtilities.dp((this.currentMessageObject.isOutOwner() || this.mediaBackground || this.drawPinnedBottom) ? 2.0f : 8.0f);
                        int dp11 = i28 + AndroidUtilities.dp(13.0f);
                        if (this.currentMessageObject.isOutOwner()) {
                            Theme.chat_instantViewPaint.setColor(getThemedColor("chat_outPreviewInstantText"));
                        } else {
                            Theme.chat_instantViewPaint.setColor(getThemedColor("chat_inPreviewInstantText"));
                        }
                        this.instantButtonRect.set(currentBackgroundLeft, dp11, this.instantWidth + currentBackgroundLeft, AndroidUtilities.dp(44.0f) + dp11);
                        Drawable[] drawableArr2 = this.selectorDrawable;
                        if (drawableArr2[0] != null && this.selectorDrawableMaskType[0] == 2) {
                            drawableArr2[0].setBounds(currentBackgroundLeft, dp11, this.instantWidth + currentBackgroundLeft, AndroidUtilities.dp(44.0f) + dp11);
                            this.selectorDrawable[0].draw(canvas);
                        }
                        if (this.instantViewLayout != null) {
                            canvas.save();
                            canvas.translate(currentBackgroundLeft + this.instantTextX, dp11 + AndroidUtilities.dp(14.5f));
                            this.instantViewLayout.draw(canvas);
                            canvas.restore();
                        }
                    } else if (this.infoLayout != null) {
                        TLRPC$Poll tLRPC$Poll2 = this.lastPoll;
                        if (tLRPC$Poll2.public_voters || tLRPC$Poll2.multiple_choice) {
                            i28 += AndroidUtilities.dp(6.0f);
                        }
                        canvas.save();
                        canvas.translate(i23 + this.infoX, i28 + AndroidUtilities.dp(22.0f));
                        this.infoLayout.draw(canvas);
                        canvas.restore();
                    }
                    updatePollAnimations(j4);
                    canvas.restore();
                } else if (i17 == 12) {
                    if (messageObject.isOutOwner()) {
                        Theme.chat_contactNamePaint.setColor(getThemedColor("chat_outContactNameText"));
                        Theme.chat_contactPhonePaint.setColor(getThemedColor(isDrawSelectionBackground() ? "chat_outContactPhoneSelectedText" : "chat_outContactPhoneText"));
                    } else {
                        Theme.chat_contactNamePaint.setColor(getThemedColor("chat_inContactNameText"));
                        Theme.chat_contactPhonePaint.setColor(getThemedColor(isDrawSelectionBackground() ? "chat_inContactPhoneSelectedText" : "chat_inContactPhoneText"));
                    }
                    if (this.titleLayout != null) {
                        canvas.save();
                        canvas.translate(this.photoImage.getImageX() + this.photoImage.getImageWidth() + AndroidUtilities.dp(9.0f), AndroidUtilities.dp(16.0f) + this.namesOffset);
                        this.titleLayout.draw(canvas);
                        canvas.restore();
                    }
                    if (this.docTitleLayout != null) {
                        canvas.save();
                        canvas.translate(this.photoImage.getImageX() + this.photoImage.getImageWidth() + AndroidUtilities.dp(9.0f), AndroidUtilities.dp(39.0f) + this.namesOffset);
                        this.docTitleLayout.draw(canvas);
                        canvas.restore();
                    }
                    if (this.currentMessageObject.isOutOwner()) {
                        drawable = getThemedDrawable(isDrawSelectionBackground() ? "drawableMsgOutMenuSelected" : "drawableMsgOutMenu");
                    } else {
                        drawable = isDrawSelectionBackground() ? Theme.chat_msgInMenuSelectedDrawable : Theme.chat_msgInMenuDrawable;
                    }
                    int imageX5 = (int) ((this.photoImage.getImageX() + this.backgroundWidth) - AndroidUtilities.dp(48.0f));
                    this.otherX = imageX5;
                    int imageY4 = (int) (this.photoImage.getImageY() - AndroidUtilities.dp(2.0f));
                    this.otherY = imageY4;
                    BaseCell.setDrawableBounds(drawable, imageX5, imageY4);
                    drawable.draw(canvas);
                    if (this.drawInstantView) {
                        int imageX6 = (int) (this.photoImage.getImageX() - AndroidUtilities.dp(2.0f));
                        int dp12 = this.layoutHeight - AndroidUtilities.dp(66.0f);
                        ReactionsLayoutInBubble reactionsLayoutInBubble2 = this.reactionsLayoutInBubble;
                        if (!reactionsLayoutInBubble2.isEmpty && !reactionsLayoutInBubble2.isSmall) {
                            dp12 -= reactionsLayoutInBubble2.totalHeight;
                        }
                        if (this.drawCommentButton) {
                            dp12 -= AndroidUtilities.dp(shouldDrawTimeOnMedia() ? 39.3f : 41.0f);
                        }
                        Paint paint = Theme.chat_instantViewRectPaint;
                        if (this.currentMessageObject.isOutOwner()) {
                            Theme.chat_instantViewPaint.setColor(getThemedColor("chat_outPreviewInstantText"));
                            paint.setColor(getThemedColor("chat_outPreviewInstantText"));
                        } else {
                            Theme.chat_instantViewPaint.setColor(getThemedColor("chat_inPreviewInstantText"));
                            paint.setColor(getThemedColor("chat_inPreviewInstantText"));
                        }
                        this.instantButtonRect.set(imageX6, dp12, this.instantWidth + imageX6, AndroidUtilities.dp(36.0f) + dp12);
                        if (Build.VERSION.SDK_INT >= 21) {
                            this.selectorDrawableMaskType[0] = 0;
                            this.selectorDrawable[0].setBounds(imageX6, dp12, this.instantWidth + imageX6, AndroidUtilities.dp(36.0f) + dp12);
                            this.selectorDrawable[0].draw(canvas);
                        }
                        canvas.drawRoundRect(this.instantButtonRect, AndroidUtilities.dp(6.0f), AndroidUtilities.dp(6.0f), paint);
                        if (this.instantViewLayout != null) {
                            canvas.save();
                            canvas.translate(imageX6 + this.instantTextX, dp12 + AndroidUtilities.dp(10.5f));
                            this.instantViewLayout.draw(canvas);
                            canvas.restore();
                        }
                    }
                }
            }
            if (this.drawImageButton && this.photoImage.getVisible()) {
                float f39 = this.controlsAlpha;
                if (f39 != 1.0f) {
                    this.radialProgress.setOverrideAlpha(f39);
                }
                if (this.photoImage.hasImageSet()) {
                    this.radialProgress.setBackgroundDrawable(null);
                } else {
                    this.radialProgress.setBackgroundDrawable(isDrawSelectionBackground() ? this.currentBackgroundSelectedDrawable : this.currentBackgroundDrawable);
                }
                if (!this.currentMessageObject.needDrawBluredPreview() || !MediaController.getInstance().isPlayingMessage(this.currentMessageObject)) {
                    this.radialProgress.draw(canvas);
                }
            }
            if (this.buttonState == -1 && this.currentMessageObject.needDrawBluredPreview() && !MediaController.getInstance().isPlayingMessage(this.currentMessageObject) && this.photoImage.getVisible()) {
                MessageObject messageObject3 = this.currentMessageObject;
                if (messageObject3.messageOwner.destroyTime != 0) {
                    if (!messageObject3.isOutOwner()) {
                        float max2 = ((float) Math.max(0L, (this.currentMessageObject.messageOwner.destroyTime * 1000) - (System.currentTimeMillis() + (ConnectionsManager.getInstance(this.currentAccount).getTimeDifference() * 1000)))) / (this.currentMessageObject.messageOwner.ttl * 1000.0f);
                        Theme.chat_deleteProgressPaint.setAlpha((int) (this.controlsAlpha * 255.0f));
                        canvas.drawArc(this.deleteProgressRect, -90.0f, max2 * (-360.0f), true, Theme.chat_deleteProgressPaint);
                        if (max2 != 0.0f) {
                            int dp13 = AndroidUtilities.dp(2.0f);
                            RectF rectF = this.deleteProgressRect;
                            int i32 = ((int) rectF.left) - dp13;
                            int i33 = ((int) rectF.top) - dp13;
                            int i34 = dp13 * 2;
                            invalidate(i32, i33, ((int) rectF.right) + i34, ((int) rectF.bottom) + i34);
                            updateSecretTimeText(this.currentMessageObject);
                            if ((!this.drawVideoImageButton || this.animatingDrawVideoImageButton != 0) && this.photoImage.getVisible()) {
                                f4 = this.controlsAlpha;
                                if (f4 != 1.0f) {
                                    this.videoRadialProgress.setOverrideAlpha(f4);
                                }
                                this.videoRadialProgress.draw(canvas);
                            }
                            if (this.drawMediaCheckBox) {
                                int i35 = this.documentAttachType;
                                if (i35 != 5 && (i35 != 1 || this.drawPhotoImage)) {
                                    int dp14 = AndroidUtilities.dp(21.0f);
                                    this.mediaCheckBox.setBackgroundType(0);
                                    this.mediaCheckBox.setBounds(((int) this.photoImage.getImageX2()) - AndroidUtilities.dp(25.0f), ((int) this.photoImage.getImageY()) + AndroidUtilities.dp(4.0f), dp14, dp14);
                                    this.mediaCheckBox.setColor(null, null, this.currentMessageObject.isOutOwner() ? "chat_outBubbleSelected" : "chat_inBubbleSelected");
                                    this.mediaCheckBox.setBackgroundDrawable(null);
                                    this.mediaCheckBox.draw(canvas);
                                }
                                int dp15 = AndroidUtilities.dp(20.0f);
                                this.mediaCheckBox.setBackgroundType(this.radialProgress.getMiniIcon() != 4 ? 12 : 13);
                                this.mediaCheckBox.setBounds(this.buttonX + AndroidUtilities.dp(28.0f), this.buttonY + AndroidUtilities.dp(28.0f), dp15, dp15);
                                this.mediaCheckBox.setColor(this.currentMessageObject.isOutOwner() ? "chat_outTimeText" : "chat_inTimeText", this.currentMessageObject.isOutOwner() ? "chat_outLoader" : "chat_inLoader", this.currentMessageObject.isOutOwner() ? "chat_outBubble" : "chat_inBubble");
                                this.mediaCheckBox.setBackgroundDrawable(isDrawSelectionBackground() ? this.currentBackgroundSelectedDrawable : this.currentBackgroundDrawable);
                                this.mediaCheckBox.draw(canvas);
                            }
                            if (this.documentAttachType != 7) {
                                return;
                            }
                            boolean isPlayingMessage2 = MediaController.getInstance().isPlayingMessage(this.currentMessageObject);
                            MessageObject messageObject4 = this.currentMessageObject;
                            if (messageObject4.type == 5) {
                                if (messageObject4.isOutOwner()) {
                                    float f40 = (AndroidUtilities.roundPlayingMessageSize - AndroidUtilities.roundMessageSize) * 0.2f;
                                    boolean z8 = this.isPlayingRound;
                                    float f41 = z8 ? f40 : 0.0f;
                                    TransitionParams transitionParams5 = this.transitionParams;
                                    if (transitionParams5.animatePlayingRound) {
                                        f3 = f40 * (z8 ? transitionParams5.animateChangeProgress : 1.0f - transitionParams5.animateChangeProgress);
                                    } else {
                                        f3 = f41;
                                    }
                                } else {
                                    f3 = 0.0f;
                                }
                                float dp16 = this.backgroundDrawableLeft + this.transitionParams.deltaLeft + AndroidUtilities.dp(8.0f) + this.roundPlayingDrawableProgress + f3;
                                float dp17 = this.layoutHeight - AndroidUtilities.dp(28 - (this.drawPinnedBottom ? 2 : 0));
                                if (!this.reactionsLayoutInBubble.isEmpty) {
                                    dp17 -= reactionsLayoutInBubble.totalHeight;
                                }
                                TransitionParams transitionParams6 = this.transitionParams;
                                transitionParams6.lastDrawRoundVideoDotY = dp17;
                                if (transitionParams6.animateRoundVideoDotY) {
                                    float f42 = transitionParams6.animateFromRoundVideoDotY;
                                    float f43 = transitionParams6.animateChangeProgress;
                                    dp17 = (dp17 * f43) + (f42 * (1.0f - f43));
                                }
                                this.rect.set(dp16, dp17, this.timeWidthAudio + dp16 + AndroidUtilities.dp(22.0f), AndroidUtilities.dp(17.0f) + dp17);
                                int alpha6 = getThemedPaint("paintChatActionBackground").getAlpha();
                                getThemedPaint("paintChatActionBackground").setAlpha((int) (alpha6 * this.timeAlpha));
                                applyServiceShaderMatrix();
                                canvas.drawRoundRect(this.rect, AndroidUtilities.dp(6.0f), AndroidUtilities.dp(6.0f), getThemedPaint("paintChatActionBackground"));
                                if (hasGradientService()) {
                                    int alpha7 = Theme.chat_actionBackgroundGradientDarkenPaint.getAlpha();
                                    Theme.chat_actionBackgroundGradientDarkenPaint.setAlpha((int) (alpha7 * this.timeAlpha));
                                    canvas.drawRoundRect(this.rect, AndroidUtilities.dp(6.0f), AndroidUtilities.dp(6.0f), Theme.chat_actionBackgroundGradientDarkenPaint);
                                    Theme.chat_actionBackgroundGradientDarkenPaint.setAlpha(alpha7);
                                }
                                getThemedPaint("paintChatActionBackground").setAlpha(alpha6);
                                boolean z9 = isPlayingMessage2 || !this.currentMessageObject.isContentUnread();
                                if (z9) {
                                    float f44 = this.roundPlayingDrawableProgress;
                                    if (f44 != 1.0f) {
                                        float f45 = f44 + 0.10666667f;
                                        this.roundPlayingDrawableProgress = f45;
                                        if (f45 > 1.0f) {
                                            this.roundPlayingDrawableProgress = 1.0f;
                                        } else {
                                            invalidate();
                                        }
                                        if (z9) {
                                            if (isPlayingMessage2 && !MediaController.getInstance().isMessagePaused()) {
                                                this.roundVideoPlayingDrawable.start();
                                            } else {
                                                this.roundVideoPlayingDrawable.stop();
                                            }
                                        }
                                        if (this.roundPlayingDrawableProgress < 1.0f) {
                                            float dp18 = this.timeWidthAudio + dp16 + AndroidUtilities.dp(12.0f);
                                            float dp19 = AndroidUtilities.dp(8.3f) + dp17;
                                            canvas.save();
                                            float f46 = this.roundPlayingDrawableProgress;
                                            canvas.scale(1.0f - f46, 1.0f - f46, dp18, dp19);
                                            Theme.chat_docBackPaint.setColor(getThemedColor("chat_serviceText"));
                                            Theme.chat_docBackPaint.setAlpha((int) (this.timeAlpha * 255.0f * (1.0f - this.roundPlayingDrawableProgress)));
                                            canvas.drawCircle(dp18, dp19, AndroidUtilities.dp(3.0f), Theme.chat_docBackPaint);
                                            canvas.restore();
                                        }
                                        if (this.roundPlayingDrawableProgress > 0.0f) {
                                            BaseCell.setDrawableBounds(this.roundVideoPlayingDrawable, this.timeWidthAudio + dp16 + AndroidUtilities.dp(6.0f), AndroidUtilities.dp(2.3f) + dp17);
                                            canvas.save();
                                            float f47 = this.roundPlayingDrawableProgress;
                                            canvas.scale(f47, f47, this.roundVideoPlayingDrawable.getBounds().centerX(), this.roundVideoPlayingDrawable.getBounds().centerY());
                                            this.roundVideoPlayingDrawable.setAlpha((int) (this.roundPlayingDrawableProgress * 255.0f));
                                            this.roundVideoPlayingDrawable.draw(canvas);
                                            canvas.restore();
                                        }
                                        f = dp16 + AndroidUtilities.dp(4.0f);
                                        f2 = dp17 + AndroidUtilities.dp(1.7f);
                                    }
                                }
                                if (!z9) {
                                    float f48 = this.roundPlayingDrawableProgress;
                                    if (f48 != 0.0f) {
                                        float f49 = f48 - 0.10666667f;
                                        this.roundPlayingDrawableProgress = f49;
                                        if (f49 < 0.0f) {
                                            this.roundPlayingDrawableProgress = 0.0f;
                                        } else {
                                            invalidate();
                                        }
                                    }
                                }
                                if (z9) {
                                }
                                if (this.roundPlayingDrawableProgress < 1.0f) {
                                }
                                if (this.roundPlayingDrawableProgress > 0.0f) {
                                }
                                f = dp16 + AndroidUtilities.dp(4.0f);
                                f2 = dp17 + AndroidUtilities.dp(1.7f);
                            } else {
                                f = this.backgroundDrawableLeft + AndroidUtilities.dp((messageObject4.isOutOwner() || this.drawPinnedBottom) ? 12.0f : 18.0f);
                                f2 = (this.layoutHeight - AndroidUtilities.dp(6.3f - (this.drawPinnedBottom ? 2 : 0))) - this.timeLayout.getHeight();
                            }
                            if (this.durationLayout == null) {
                                return;
                            }
                            Theme.chat_timePaint.setAlpha((int) (this.timeAlpha * 255.0f));
                            canvas.save();
                            canvas.translate(f, f2);
                            this.durationLayout.draw(canvas);
                            canvas.restore();
                            Theme.chat_timePaint.setAlpha(255);
                            return;
                        }
                    }
                    updateSecretTimeText(this.currentMessageObject);
                    if (!this.drawVideoImageButton) {
                    }
                    f4 = this.controlsAlpha;
                    if (f4 != 1.0f) {
                    }
                    this.videoRadialProgress.draw(canvas);
                    if (this.drawMediaCheckBox) {
                    }
                    if (this.documentAttachType != 7) {
                    }
                }
            }
            if (!this.drawVideoImageButton) {
            }
            f4 = this.controlsAlpha;
            if (f4 != 1.0f) {
            }
            this.videoRadialProgress.draw(canvas);
            if (this.drawMediaCheckBox) {
            }
            if (this.documentAttachType != 7) {
            }
        }
    }

    @Override // org.telegram.messenger.DownloadController.FileDownloadProgressListener
    public int getObserverTag() {
        return this.TAG;
    }

    public MessageObject getMessageObject() {
        MessageObject messageObject = this.messageObjectToSet;
        return messageObject != null ? messageObject : this.currentMessageObject;
    }

    public TLRPC$Document getStreamingMedia() {
        int i = this.documentAttachType;
        if (i == 4 || i == 7 || i == 2) {
            return this.documentAttach;
        }
        return null;
    }

    public boolean drawPinnedBottom() {
        MessageObject.GroupedMessages groupedMessages = this.currentMessagesGroup;
        if (groupedMessages != null && groupedMessages.isDocuments) {
            MessageObject.GroupedMessagePosition groupedMessagePosition = this.currentPosition;
            if (groupedMessagePosition != null && (groupedMessagePosition.flags & 8) != 0) {
                return this.pinnedBottom;
            }
            return true;
        }
        return this.pinnedBottom;
    }

    public boolean drawPinnedTop() {
        MessageObject.GroupedMessages groupedMessages = this.currentMessagesGroup;
        if (groupedMessages != null && groupedMessages.isDocuments) {
            MessageObject.GroupedMessagePosition groupedMessagePosition = this.currentPosition;
            if (groupedMessagePosition != null && (groupedMessagePosition.flags & 4) != 0) {
                return this.pinnedTop;
            }
            return true;
        }
        return this.pinnedTop;
    }

    public boolean isPinnedBottom() {
        return this.pinnedBottom;
    }

    public boolean isPinnedTop() {
        return this.pinnedTop;
    }

    public MessageObject.GroupedMessages getCurrentMessagesGroup() {
        return this.currentMessagesGroup;
    }

    public MessageObject.GroupedMessagePosition getCurrentPosition() {
        return this.currentPosition;
    }

    public int getLayoutHeight() {
        return this.layoutHeight;
    }

    @Override // android.view.View
    public boolean performAccessibilityAction(int i, Bundle bundle) {
        ChatMessageCellDelegate chatMessageCellDelegate;
        ChatMessageCellDelegate chatMessageCellDelegate2 = this.delegate;
        if (chatMessageCellDelegate2 == null || !chatMessageCellDelegate2.onAccessibilityAction(i, bundle)) {
            if (i == 16) {
                int iconForCurrentState = getIconForCurrentState();
                if (iconForCurrentState != 4 && iconForCurrentState != 5) {
                    didPressButton(true, false);
                } else if (this.currentMessageObject.type == 16) {
                    this.delegate.didPressOther(this, this.otherX, this.otherY);
                } else {
                    didClickedImage();
                }
                return true;
            }
            if (i == R.id.acc_action_small_button) {
                didPressMiniButton(true);
            } else if (i == R.id.acc_action_msg_options) {
                ChatMessageCellDelegate chatMessageCellDelegate3 = this.delegate;
                if (chatMessageCellDelegate3 != null) {
                    if (this.currentMessageObject.type == 16) {
                        chatMessageCellDelegate3.didLongPress(this, 0.0f, 0.0f);
                    } else {
                        chatMessageCellDelegate3.didPressOther(this, this.otherX, this.otherY);
                    }
                }
            } else if (i == R.id.acc_action_open_forwarded_origin && (chatMessageCellDelegate = this.delegate) != null) {
                TLRPC$Chat tLRPC$Chat = this.currentForwardChannel;
                if (tLRPC$Chat != null) {
                    chatMessageCellDelegate.didPressChannelAvatar(this, tLRPC$Chat, this.currentMessageObject.messageOwner.fwd_from.channel_post, this.lastTouchX, this.lastTouchY);
                } else {
                    TLRPC$User tLRPC$User = this.currentForwardUser;
                    if (tLRPC$User != null) {
                        chatMessageCellDelegate.didPressUserAvatar(this, tLRPC$User, this.lastTouchX, this.lastTouchY);
                    } else if (this.currentForwardName != null) {
                        chatMessageCellDelegate.didPressHiddenForward(this);
                    }
                }
            }
            if ((!this.currentMessageObject.isVoice() && !this.currentMessageObject.isRoundVideo() && (!this.currentMessageObject.isMusic() || !MediaController.getInstance().isPlayingMessage(this.currentMessageObject))) || !this.seekBarAccessibilityDelegate.performAccessibilityActionInternal(i, bundle)) {
                return super.performAccessibilityAction(i, bundle);
            }
            return true;
        }
        return false;
    }

    public void setAnimationRunning(boolean z, boolean z2) {
        this.animationRunning = z;
        if (z) {
            this.willRemoved = z2;
        } else {
            this.willRemoved = false;
        }
        if (getParent() != null || !this.attachedToWindow) {
            return;
        }
        onDetachedFromWindow();
    }

    @Override // android.view.View
    public boolean onHoverEvent(MotionEvent motionEvent) {
        int x = (int) motionEvent.getX();
        int y = (int) motionEvent.getY();
        if (motionEvent.getAction() == 9 || motionEvent.getAction() == 7) {
            for (int i = 0; i < this.accessibilityVirtualViewBounds.size(); i++) {
                if (this.accessibilityVirtualViewBounds.valueAt(i).contains(x, y)) {
                    int keyAt = this.accessibilityVirtualViewBounds.keyAt(i);
                    if (keyAt == this.currentFocusedVirtualView) {
                        return true;
                    }
                    this.currentFocusedVirtualView = keyAt;
                    sendAccessibilityEventForVirtualView(keyAt, 32768);
                    return true;
                }
            }
        } else if (motionEvent.getAction() == 10) {
            this.currentFocusedVirtualView = 0;
        }
        return super.onHoverEvent(motionEvent);
    }

    @Override // android.view.View
    public void onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo accessibilityNodeInfo) {
        super.onInitializeAccessibilityNodeInfo(accessibilityNodeInfo);
    }

    @Override // android.view.View
    public AccessibilityNodeProvider getAccessibilityNodeProvider() {
        return new MessageAccessibilityNodeProvider();
    }

    public void sendAccessibilityEventForVirtualView(int i, int i2) {
        sendAccessibilityEventForVirtualView(i, i2, null);
    }

    private void sendAccessibilityEventForVirtualView(int i, int i2, String str) {
        if (((AccessibilityManager) getContext().getSystemService("accessibility")).isTouchExplorationEnabled()) {
            AccessibilityEvent obtain = AccessibilityEvent.obtain(i2);
            obtain.setPackageName(getContext().getPackageName());
            obtain.setSource(this, i);
            if (str != null) {
                obtain.getText().add(str);
            }
            if (getParent() == null) {
                return;
            }
            getParent().requestSendAccessibilityEvent(this, obtain);
        }
    }

    public static Point getMessageSize(int i, int i2) {
        return getMessageSize(i, i2, 0, 0);
    }

    /* JADX WARN: Removed duplicated region for block: B:13:0x0042  */
    /* JADX WARN: Removed duplicated region for block: B:16:0x004c  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private static Point getMessageSize(int i, int i2, int i3, int i4) {
        int min;
        if (i4 == 0 || i3 == 0) {
            if (AndroidUtilities.isTablet()) {
                min = AndroidUtilities.getMinTabletSide();
            } else if (i >= i2) {
                android.graphics.Point point = AndroidUtilities.displaySize;
                i3 = Math.min(point.x, point.y) - AndroidUtilities.dp(64.0f);
                i4 = AndroidUtilities.dp(100.0f) + i3;
                if (i3 > AndroidUtilities.getPhotoSize()) {
                    i3 = AndroidUtilities.getPhotoSize();
                }
                if (i4 > AndroidUtilities.getPhotoSize()) {
                    i4 = AndroidUtilities.getPhotoSize();
                }
            } else {
                android.graphics.Point point2 = AndroidUtilities.displaySize;
                min = Math.min(point2.x, point2.y);
            }
            i3 = (int) (min * 0.7f);
            i4 = AndroidUtilities.dp(100.0f) + i3;
            if (i3 > AndroidUtilities.getPhotoSize()) {
            }
            if (i4 > AndroidUtilities.getPhotoSize()) {
            }
        }
        float f = i;
        float f2 = i3;
        float f3 = f / f2;
        int i5 = (int) (f / f3);
        float f4 = i2;
        int i6 = (int) (f4 / f3);
        if (i5 == 0) {
            i5 = AndroidUtilities.dp(150.0f);
        }
        if (i6 == 0) {
            i6 = AndroidUtilities.dp(150.0f);
        }
        if (i6 > i4) {
            i5 = (int) (i5 / (i6 / i4));
        } else if (i6 < AndroidUtilities.dp(120.0f)) {
            i4 = AndroidUtilities.dp(120.0f);
            float f5 = f / (f4 / i4);
            if (f5 < f2) {
                i5 = (int) f5;
            }
        } else {
            i4 = i6;
        }
        return new Point(i5, i4);
    }

    public StaticLayout getDescriptionlayout() {
        return this.descriptionLayout;
    }

    public void setSelectedBackgroundProgress(float f) {
        this.selectedBackgroundProgress = f;
        invalidate();
    }

    public int computeHeight(MessageObject messageObject, MessageObject.GroupedMessages groupedMessages) {
        this.photoImage.setIgnoreImageSet(true);
        this.avatarImage.setIgnoreImageSet(true);
        this.replyImageReceiver.setIgnoreImageSet(true);
        this.locationImageReceiver.setIgnoreImageSet(true);
        if (groupedMessages != null && groupedMessages.messages.size() != 1) {
            int i = 0;
            for (int i2 = 0; i2 < groupedMessages.messages.size(); i2++) {
                MessageObject messageObject2 = groupedMessages.messages.get(i2);
                MessageObject.GroupedMessagePosition groupedMessagePosition = groupedMessages.positions.get(messageObject2);
                if (groupedMessagePosition != null && (groupedMessagePosition.flags & 1) != 0) {
                    setMessageContent(messageObject2, groupedMessages, false, false);
                    i += this.totalHeight + this.keyboardHeight;
                }
            }
            return i;
        }
        setMessageContent(messageObject, groupedMessages, false, false);
        this.photoImage.setIgnoreImageSet(false);
        this.avatarImage.setIgnoreImageSet(false);
        this.replyImageReceiver.setIgnoreImageSet(false);
        this.locationImageReceiver.setIgnoreImageSet(false);
        return this.totalHeight + this.keyboardHeight;
    }

    public void shakeView() {
        PropertyValuesHolder ofKeyframe = PropertyValuesHolder.ofKeyframe(View.ROTATION, Keyframe.ofFloat(0.0f, 0.0f), Keyframe.ofFloat(0.2f, 3.0f), Keyframe.ofFloat(0.4f, -3.0f), Keyframe.ofFloat(0.6f, 3.0f), Keyframe.ofFloat(0.8f, -3.0f), Keyframe.ofFloat(1.0f, 0.0f));
        Keyframe ofFloat = Keyframe.ofFloat(0.0f, 1.0f);
        Keyframe ofFloat2 = Keyframe.ofFloat(0.5f, 0.97f);
        Keyframe ofFloat3 = Keyframe.ofFloat(1.0f, 1.0f);
        PropertyValuesHolder ofKeyframe2 = PropertyValuesHolder.ofKeyframe(View.SCALE_X, ofFloat, ofFloat2, ofFloat3);
        PropertyValuesHolder ofKeyframe3 = PropertyValuesHolder.ofKeyframe(View.SCALE_Y, ofFloat, ofFloat2, ofFloat3);
        AnimatorSet animatorSet = new AnimatorSet();
        this.shakeAnimation = animatorSet;
        animatorSet.playTogether(ObjectAnimator.ofPropertyValuesHolder(this, ofKeyframe), ObjectAnimator.ofPropertyValuesHolder(this, ofKeyframe2), ObjectAnimator.ofPropertyValuesHolder(this, ofKeyframe3));
        this.shakeAnimation.setDuration(500L);
        this.shakeAnimation.start();
    }

    private void cancelShakeAnimation() {
        AnimatorSet animatorSet = this.shakeAnimation;
        if (animatorSet != null) {
            animatorSet.cancel();
            this.shakeAnimation = null;
            setScaleX(1.0f);
            setScaleY(1.0f);
            setRotation(0.0f);
        }
    }

    public void setSlidingOffset(float f) {
        if (this.slidingOffsetX != f) {
            this.slidingOffsetX = f;
            updateTranslation();
        }
    }

    public void setAnimationOffsetX(float f) {
        if (this.animationOffsetX != f) {
            this.animationOffsetX = f;
            updateTranslation();
        }
    }

    private void updateTranslation() {
        MessageObject messageObject = this.currentMessageObject;
        if (messageObject == null) {
            return;
        }
        setTranslationX(this.slidingOffsetX + this.animationOffsetX + (!messageObject.isOutOwner() ? this.checkBoxTranslation : 0));
    }

    public float getNonAnimationTranslationX(boolean z) {
        boolean z2;
        MessageObject messageObject = this.currentMessageObject;
        if (messageObject != null && !messageObject.isOutOwner()) {
            if (z && ((z2 = this.checkBoxVisible) || this.checkBoxAnimationInProgress)) {
                this.checkBoxTranslation = (int) Math.ceil((z2 ? CubicBezierInterpolator.EASE_OUT : CubicBezierInterpolator.EASE_IN).getInterpolation(this.checkBoxAnimationProgress) * AndroidUtilities.dp(35.0f));
            }
            return this.slidingOffsetX + this.checkBoxTranslation;
        }
        return this.slidingOffsetX;
    }

    public float getSlidingOffsetX() {
        return this.slidingOffsetX;
    }

    public boolean willRemovedAfterAnimation() {
        return this.willRemoved;
    }

    public float getAnimationOffsetX() {
        return this.animationOffsetX;
    }

    @Override // android.view.View
    public void setTranslationX(float f) {
        super.setTranslationX(f);
    }

    public SeekBar getSeekBar() {
        return this.seekBar;
    }

    public SeekBarWaveform getSeekBarWaveform() {
        return this.seekBarWaveform;
    }

    /* loaded from: classes3.dex */
    public class MessageAccessibilityNodeProvider extends AccessibilityNodeProvider {
        private Path linkPath;
        private Rect rect;
        private RectF rectF;

        private MessageAccessibilityNodeProvider() {
            ChatMessageCell.this = r1;
            this.linkPath = new Path();
            this.rectF = new RectF();
            this.rect = new Rect();
        }

        /* loaded from: classes3.dex */
        private class ProfileSpan extends ClickableSpan {
            private TLRPC$User user;

            public ProfileSpan(TLRPC$User tLRPC$User) {
                MessageAccessibilityNodeProvider.this = r1;
                this.user = tLRPC$User;
            }

            @Override // android.text.style.ClickableSpan
            public void onClick(View view) {
                if (ChatMessageCell.this.delegate != null) {
                    ChatMessageCell.this.delegate.didPressUserAvatar(ChatMessageCell.this, this.user, 0.0f, 0.0f);
                }
            }
        }

        @Override // android.view.accessibility.AccessibilityNodeProvider
        public AccessibilityNodeInfo createAccessibilityNodeInfo(int i) {
            String str;
            int i2;
            String str2;
            String str3;
            int i3;
            CharacterStyle[] characterStyleArr;
            CharacterStyle[] characterStyleArr2;
            String str4;
            AccessibilityNodeInfo.CollectionItemInfo collectionItemInfo;
            String str5;
            String str6;
            CharacterStyle[] characterStyleArr3;
            boolean z;
            TLRPC$TL_messagePeerReaction tLRPC$TL_messagePeerReaction;
            String str7;
            int i4;
            String str8;
            int[] iArr = {0, 0};
            ChatMessageCell.this.getLocationOnScreen(iArr);
            int i5 = 10;
            if (i == -1) {
                AccessibilityNodeInfo obtain = AccessibilityNodeInfo.obtain(ChatMessageCell.this);
                ChatMessageCell.this.onInitializeAccessibilityNodeInfo(obtain);
                if (ChatMessageCell.this.accessibilityText == null) {
                    SpannableStringBuilder spannableStringBuilder = new SpannableStringBuilder();
                    ChatMessageCell chatMessageCell = ChatMessageCell.this;
                    if (chatMessageCell.isChat && chatMessageCell.currentUser != null && !ChatMessageCell.this.currentMessageObject.isOut()) {
                        spannableStringBuilder.append((CharSequence) UserObject.getUserName(ChatMessageCell.this.currentUser));
                        spannableStringBuilder.setSpan(new ProfileSpan(ChatMessageCell.this.currentUser), 0, spannableStringBuilder.length(), 33);
                        spannableStringBuilder.append('\n');
                    }
                    if (ChatMessageCell.this.drawForwardedName) {
                        int i6 = 0;
                        while (i6 < 2) {
                            if (ChatMessageCell.this.forwardedNameLayout[i6] != null) {
                                spannableStringBuilder.append(ChatMessageCell.this.forwardedNameLayout[i6].getText());
                                spannableStringBuilder.append(i6 == 0 ? " " : "\n");
                            }
                            i6++;
                        }
                    }
                    if (!TextUtils.isEmpty(ChatMessageCell.this.currentMessageObject.messageText)) {
                        spannableStringBuilder.append(ChatMessageCell.this.currentMessageObject.messageText);
                    }
                    if (ChatMessageCell.this.documentAttach == null || !((ChatMessageCell.this.documentAttachType == 1 || ChatMessageCell.this.documentAttachType == 2 || ChatMessageCell.this.documentAttachType == 4) && ChatMessageCell.this.buttonState == 1 && ChatMessageCell.this.loadingProgressLayout != null)) {
                        str5 = " ";
                    } else {
                        spannableStringBuilder.append((CharSequence) "\n");
                        boolean isSending = ChatMessageCell.this.currentMessageObject.isSending();
                        str5 = " ";
                        spannableStringBuilder.append((CharSequence) LocaleController.formatString(isSending ? "AccDescrUploadProgress" : "AccDescrDownloadProgress", isSending ? R.string.AccDescrUploadProgress : R.string.AccDescrDownloadProgress, AndroidUtilities.formatFileSize(ChatMessageCell.this.currentMessageObject.loadedFileSize), AndroidUtilities.formatFileSize(ChatMessageCell.this.lastLoadingSizeTotal)));
                    }
                    if (!ChatMessageCell.this.currentMessageObject.isMusic()) {
                        if (ChatMessageCell.this.currentMessageObject.isVoice() || ChatMessageCell.this.isRoundVideo) {
                            spannableStringBuilder.append((CharSequence) ", ");
                            spannableStringBuilder.append((CharSequence) LocaleController.formatDuration(ChatMessageCell.this.currentMessageObject.getDuration()));
                            spannableStringBuilder.append((CharSequence) ", ");
                            if (ChatMessageCell.this.currentMessageObject.isContentUnread()) {
                                spannableStringBuilder.append((CharSequence) LocaleController.getString("AccDescrMsgNotPlayed", R.string.AccDescrMsgNotPlayed));
                            } else {
                                spannableStringBuilder.append((CharSequence) LocaleController.getString("AccDescrMsgPlayed", R.string.AccDescrMsgPlayed));
                            }
                        }
                    } else {
                        spannableStringBuilder.append((CharSequence) "\n");
                        spannableStringBuilder.append((CharSequence) LocaleController.formatString("AccDescrMusicInfo", R.string.AccDescrMusicInfo, ChatMessageCell.this.currentMessageObject.getMusicAuthor(), ChatMessageCell.this.currentMessageObject.getMusicTitle()));
                        spannableStringBuilder.append((CharSequence) ", ");
                        spannableStringBuilder.append((CharSequence) LocaleController.formatDuration(ChatMessageCell.this.currentMessageObject.getDuration()));
                    }
                    if (ChatMessageCell.this.lastPoll != null) {
                        spannableStringBuilder.append((CharSequence) ", ");
                        spannableStringBuilder.append((CharSequence) ChatMessageCell.this.lastPoll.question);
                        spannableStringBuilder.append((CharSequence) ", ");
                        if (!ChatMessageCell.this.pollClosed) {
                            if (ChatMessageCell.this.lastPoll.quiz) {
                                if (ChatMessageCell.this.lastPoll.public_voters) {
                                    str8 = LocaleController.getString("QuizPoll", R.string.QuizPoll);
                                } else {
                                    str8 = LocaleController.getString("AnonymousQuizPoll", R.string.AnonymousQuizPoll);
                                }
                            } else if (ChatMessageCell.this.lastPoll.public_voters) {
                                str8 = LocaleController.getString("PublicPoll", R.string.PublicPoll);
                            } else {
                                str8 = LocaleController.getString("AnonymousPoll", R.string.AnonymousPoll);
                            }
                        } else {
                            str8 = LocaleController.getString("FinalResults", R.string.FinalResults);
                        }
                        spannableStringBuilder.append((CharSequence) str8);
                    }
                    if (!ChatMessageCell.this.currentMessageObject.isVoiceTranscriptionOpen()) {
                        if (ChatMessageCell.this.currentMessageObject.messageOwner.media != null && !TextUtils.isEmpty(ChatMessageCell.this.currentMessageObject.caption)) {
                            spannableStringBuilder.append((CharSequence) "\n");
                            spannableStringBuilder.append(ChatMessageCell.this.currentMessageObject.caption);
                        }
                    } else {
                        spannableStringBuilder.append((CharSequence) "\n");
                        spannableStringBuilder.append(ChatMessageCell.this.currentMessageObject.getVoiceTranscription());
                    }
                    if (ChatMessageCell.this.documentAttach != null) {
                        if (ChatMessageCell.this.documentAttachType == 4) {
                            spannableStringBuilder.append((CharSequence) ", ");
                            spannableStringBuilder.append((CharSequence) LocaleController.formatDuration(ChatMessageCell.this.currentMessageObject.getDuration()));
                        }
                        if (ChatMessageCell.this.buttonState == 0 || ChatMessageCell.this.documentAttachType == 1) {
                            spannableStringBuilder.append((CharSequence) ", ");
                            spannableStringBuilder.append((CharSequence) AndroidUtilities.formatFileSize(ChatMessageCell.this.documentAttach.size));
                        }
                    }
                    if (ChatMessageCell.this.currentMessageObject.isOut()) {
                        if (!ChatMessageCell.this.currentMessageObject.isSent()) {
                            str6 = str5;
                            if (!ChatMessageCell.this.currentMessageObject.isSending()) {
                                if (ChatMessageCell.this.currentMessageObject.isSendError()) {
                                    spannableStringBuilder.append((CharSequence) "\n");
                                    spannableStringBuilder.append((CharSequence) LocaleController.getString("AccDescrMsgSendingError", R.string.AccDescrMsgSendingError));
                                }
                            } else {
                                spannableStringBuilder.append((CharSequence) "\n");
                                spannableStringBuilder.append((CharSequence) LocaleController.getString("AccDescrMsgSending", R.string.AccDescrMsgSending));
                                float progress = ChatMessageCell.this.radialProgress.getProgress();
                                if (progress > 0.0f) {
                                    spannableStringBuilder.append((CharSequence) ", ").append((CharSequence) Integer.toString(Math.round(progress * 100.0f))).append((CharSequence) "%");
                                }
                            }
                        } else {
                            spannableStringBuilder.append((CharSequence) "\n");
                            if (ChatMessageCell.this.currentMessageObject.scheduled) {
                                spannableStringBuilder.append((CharSequence) LocaleController.formatString("AccDescrScheduledDate", R.string.AccDescrScheduledDate, ChatMessageCell.this.currentTimeString));
                                str6 = str5;
                            } else {
                                StringBuilder sb = new StringBuilder();
                                sb.append(LocaleController.getString("TodayAt", R.string.TodayAt));
                                str6 = str5;
                                sb.append(str6);
                                sb.append(ChatMessageCell.this.currentTimeString);
                                spannableStringBuilder.append((CharSequence) LocaleController.formatString("AccDescrSentDate", R.string.AccDescrSentDate, sb.toString()));
                                spannableStringBuilder.append((CharSequence) ", ");
                                if (ChatMessageCell.this.currentMessageObject.isUnread()) {
                                    i4 = R.string.AccDescrMsgUnread;
                                    str7 = "AccDescrMsgUnread";
                                } else {
                                    i4 = R.string.AccDescrMsgRead;
                                    str7 = "AccDescrMsgRead";
                                }
                                spannableStringBuilder.append((CharSequence) LocaleController.getString(str7, i4));
                            }
                        }
                    } else {
                        str6 = str5;
                        spannableStringBuilder.append((CharSequence) "\n");
                        spannableStringBuilder.append((CharSequence) LocaleController.formatString("AccDescrReceivedDate", R.string.AccDescrReceivedDate, LocaleController.getString("TodayAt", R.string.TodayAt) + str6 + ChatMessageCell.this.currentTimeString));
                    }
                    if (ChatMessageCell.this.getRepliesCount() > 0 && !ChatMessageCell.this.hasCommentLayout()) {
                        spannableStringBuilder.append((CharSequence) "\n");
                        spannableStringBuilder.append((CharSequence) LocaleController.formatPluralString("AccDescrNumberOfReplies", ChatMessageCell.this.getRepliesCount(), new Object[0]));
                    }
                    if (ChatMessageCell.this.currentMessageObject.messageOwner.reactions != null && ChatMessageCell.this.currentMessageObject.messageOwner.reactions.results != null) {
                        if (ChatMessageCell.this.currentMessageObject.messageOwner.reactions.results.size() == 1) {
                            TLRPC$TL_reactionCount tLRPC$TL_reactionCount = ChatMessageCell.this.currentMessageObject.messageOwner.reactions.results.get(0);
                            int i7 = tLRPC$TL_reactionCount.count;
                            if (i7 == 1) {
                                spannableStringBuilder.append((CharSequence) "\n");
                                String str9 = "";
                                if (ChatMessageCell.this.currentMessageObject.messageOwner.reactions.recent_reactions == null || ChatMessageCell.this.currentMessageObject.messageOwner.reactions.recent_reactions.size() != 1 || (tLRPC$TL_messagePeerReaction = ChatMessageCell.this.currentMessageObject.messageOwner.reactions.recent_reactions.get(0)) == null) {
                                    z = false;
                                } else {
                                    TLRPC$User user = MessagesController.getInstance(ChatMessageCell.this.currentAccount).getUser(Long.valueOf(MessageObject.getPeerId(tLRPC$TL_messagePeerReaction.peer_id)));
                                    z = UserObject.isUserSelf(user);
                                    if (user != null) {
                                        str9 = UserObject.getFirstName(user);
                                    }
                                }
                                if (z) {
                                    spannableStringBuilder.append((CharSequence) LocaleController.formatString("AccDescrYouReactedWith", R.string.AccDescrYouReactedWith, tLRPC$TL_reactionCount.reaction));
                                } else {
                                    spannableStringBuilder.append((CharSequence) LocaleController.formatString("AccDescrReactedWith", R.string.AccDescrReactedWith, str9, tLRPC$TL_reactionCount.reaction));
                                }
                            } else if (i7 > 1) {
                                spannableStringBuilder.append((CharSequence) "\n");
                                spannableStringBuilder.append((CharSequence) LocaleController.formatPluralString("AccDescrNumberOfPeopleReactions", tLRPC$TL_reactionCount.count, tLRPC$TL_reactionCount.reaction));
                            }
                        } else {
                            spannableStringBuilder.append((CharSequence) LocaleController.getString("Reactions", R.string.Reactions)).append((CharSequence) ": ");
                            int size = ChatMessageCell.this.currentMessageObject.messageOwner.reactions.results.size();
                            for (int i8 = 0; i8 < size; i8++) {
                                TLRPC$TL_reactionCount tLRPC$TL_reactionCount2 = ChatMessageCell.this.currentMessageObject.messageOwner.reactions.results.get(i8);
                                if (tLRPC$TL_reactionCount2 != null) {
                                    spannableStringBuilder.append((CharSequence) tLRPC$TL_reactionCount2.reaction).append((CharSequence) str6).append((CharSequence) (tLRPC$TL_reactionCount2.count + ""));
                                    if (i8 + 1 < size) {
                                        spannableStringBuilder.append((CharSequence) ", ");
                                    }
                                }
                            }
                            spannableStringBuilder.append((CharSequence) "\n");
                        }
                    }
                    if ((ChatMessageCell.this.currentMessageObject.messageOwner.flags & 1024) != 0) {
                        spannableStringBuilder.append((CharSequence) "\n");
                        spannableStringBuilder.append((CharSequence) LocaleController.formatPluralString("AccDescrNumberOfViews", ChatMessageCell.this.currentMessageObject.messageOwner.views, new Object[0]));
                    }
                    spannableStringBuilder.append((CharSequence) "\n");
                    for (final CharacterStyle characterStyle : (CharacterStyle[]) spannableStringBuilder.getSpans(0, spannableStringBuilder.length(), ClickableSpan.class)) {
                        int spanStart = spannableStringBuilder.getSpanStart(characterStyle);
                        int spanEnd = spannableStringBuilder.getSpanEnd(characterStyle);
                        spannableStringBuilder.removeSpan(characterStyle);
                        spannableStringBuilder.setSpan(new ClickableSpan() { // from class: org.telegram.ui.Cells.ChatMessageCell.MessageAccessibilityNodeProvider.1
                            @Override // android.text.style.ClickableSpan
                            public void onClick(View view) {
                                CharacterStyle characterStyle2 = characterStyle;
                                if (!(characterStyle2 instanceof ProfileSpan)) {
                                    if (ChatMessageCell.this.delegate == null) {
                                        return;
                                    }
                                    ChatMessageCell.this.delegate.didPressUrl(ChatMessageCell.this, characterStyle, false);
                                    return;
                                }
                                ((ProfileSpan) characterStyle2).onClick(view);
                            }
                        }, spanStart, spanEnd, 33);
                    }
                    ChatMessageCell.this.accessibilityText = spannableStringBuilder;
                }
                int i9 = Build.VERSION.SDK_INT;
                if (i9 < 24) {
                    obtain.setContentDescription(ChatMessageCell.this.accessibilityText.toString());
                } else {
                    obtain.setText(ChatMessageCell.this.accessibilityText);
                }
                obtain.setEnabled(true);
                if (i9 >= 19 && (collectionItemInfo = obtain.getCollectionItemInfo()) != null) {
                    obtain.setCollectionItemInfo(AccessibilityNodeInfo.CollectionItemInfo.obtain(collectionItemInfo.getRowIndex(), 1, 0, 1, false));
                }
                if (i9 >= 21) {
                    obtain.addAction(new AccessibilityNodeInfo.AccessibilityAction(R.id.acc_action_msg_options, LocaleController.getString("AccActionMessageOptions", R.string.AccActionMessageOptions)));
                    int iconForCurrentState = ChatMessageCell.this.getIconForCurrentState();
                    if (iconForCurrentState == 0) {
                        str4 = LocaleController.getString("AccActionPlay", R.string.AccActionPlay);
                    } else if (iconForCurrentState == 1) {
                        str4 = LocaleController.getString("AccActionPause", R.string.AccActionPause);
                    } else if (iconForCurrentState == 2) {
                        str4 = LocaleController.getString("AccActionDownload", R.string.AccActionDownload);
                    } else if (iconForCurrentState == 3) {
                        str4 = LocaleController.getString("AccActionCancelDownload", R.string.AccActionCancelDownload);
                    } else if (iconForCurrentState == 5) {
                        str4 = LocaleController.getString("AccActionOpenFile", R.string.AccActionOpenFile);
                    } else {
                        str4 = ChatMessageCell.this.currentMessageObject.type == 16 ? LocaleController.getString("CallAgain", R.string.CallAgain) : null;
                    }
                    obtain.addAction(new AccessibilityNodeInfo.AccessibilityAction(16, str4));
                    obtain.addAction(new AccessibilityNodeInfo.AccessibilityAction(32, LocaleController.getString("AccActionEnterSelectionMode", R.string.AccActionEnterSelectionMode)));
                    if (ChatMessageCell.this.getMiniIconForCurrentState() == 2) {
                        obtain.addAction(new AccessibilityNodeInfo.AccessibilityAction(R.id.acc_action_small_button, LocaleController.getString("AccActionDownload", R.string.AccActionDownload)));
                    }
                } else {
                    obtain.addAction(16);
                    obtain.addAction(32);
                }
                if ((ChatMessageCell.this.currentMessageObject.isVoice() || ChatMessageCell.this.currentMessageObject.isRoundVideo() || ChatMessageCell.this.currentMessageObject.isMusic()) && MediaController.getInstance().isPlayingMessage(ChatMessageCell.this.currentMessageObject)) {
                    ChatMessageCell.this.seekBarAccessibilityDelegate.onInitializeAccessibilityNodeInfoInternal(obtain);
                }
                if (ChatMessageCell.this.useTranscribeButton && ChatMessageCell.this.transcribeButton != null) {
                    obtain.addChild(ChatMessageCell.this, 493);
                }
                if (i9 < 24) {
                    ChatMessageCell chatMessageCell2 = ChatMessageCell.this;
                    if (chatMessageCell2.isChat && chatMessageCell2.currentUser != null && !ChatMessageCell.this.currentMessageObject.isOut()) {
                        obtain.addChild(ChatMessageCell.this, 5000);
                    }
                    if (ChatMessageCell.this.currentMessageObject.messageText instanceof Spannable) {
                        Spannable spannable = (Spannable) ChatMessageCell.this.currentMessageObject.messageText;
                        int i10 = 0;
                        for (CharacterStyle characterStyle2 : (CharacterStyle[]) spannable.getSpans(0, spannable.length(), ClickableSpan.class)) {
                            obtain.addChild(ChatMessageCell.this, i10 + 2000);
                            i10++;
                        }
                    }
                    if ((ChatMessageCell.this.currentMessageObject.caption instanceof Spannable) && ChatMessageCell.this.captionLayout != null) {
                        Spannable spannable2 = (Spannable) ChatMessageCell.this.currentMessageObject.caption;
                        int i11 = 0;
                        for (CharacterStyle characterStyle3 : (CharacterStyle[]) spannable2.getSpans(0, spannable2.length(), ClickableSpan.class)) {
                            obtain.addChild(ChatMessageCell.this, i11 + 3000);
                            i11++;
                        }
                    }
                }
                Iterator it = ChatMessageCell.this.botButtons.iterator();
                int i12 = 0;
                while (it.hasNext()) {
                    BotButton botButton = (BotButton) it.next();
                    obtain.addChild(ChatMessageCell.this, i12 + 1000);
                    i12++;
                }
                if (ChatMessageCell.this.hintButtonVisible && ChatMessageCell.this.pollHintX != -1 && ChatMessageCell.this.currentMessageObject.isPoll()) {
                    obtain.addChild(ChatMessageCell.this, 495);
                }
                Iterator it2 = ChatMessageCell.this.pollButtons.iterator();
                int i13 = 0;
                while (it2.hasNext()) {
                    PollButton pollButton = (PollButton) it2.next();
                    obtain.addChild(ChatMessageCell.this, i13 + 500);
                    i13++;
                }
                if (ChatMessageCell.this.drawInstantView && !ChatMessageCell.this.instantButtonRect.isEmpty()) {
                    obtain.addChild(ChatMessageCell.this, 499);
                }
                if (ChatMessageCell.this.commentLayout != null) {
                    obtain.addChild(ChatMessageCell.this, 496);
                }
                if (ChatMessageCell.this.drawSideButton == 1) {
                    obtain.addChild(ChatMessageCell.this, 498);
                }
                ChatMessageCell chatMessageCell3 = ChatMessageCell.this;
                if (chatMessageCell3.replyNameLayout != null) {
                    obtain.addChild(chatMessageCell3, 497);
                }
                if (ChatMessageCell.this.forwardedNameLayout[0] != null && ChatMessageCell.this.forwardedNameLayout[1] != null) {
                    if (Build.VERSION.SDK_INT >= 21) {
                        obtain.addAction(new AccessibilityNodeInfo.AccessibilityAction(R.id.acc_action_open_forwarded_origin, LocaleController.getString("AccActionOpenForwardedOrigin", R.string.AccActionOpenForwardedOrigin)));
                    } else {
                        obtain.addChild(ChatMessageCell.this, 494);
                    }
                }
                if (ChatMessageCell.this.drawSelectionBackground || ChatMessageCell.this.getBackground() != null) {
                    obtain.setSelected(true);
                }
                return obtain;
            }
            AccessibilityNodeInfo obtain2 = AccessibilityNodeInfo.obtain();
            obtain2.setSource(ChatMessageCell.this, i);
            obtain2.setParent(ChatMessageCell.this);
            obtain2.setPackageName(ChatMessageCell.this.getContext().getPackageName());
            if (i == 5000) {
                if (ChatMessageCell.this.currentUser == null) {
                    return null;
                }
                obtain2.setText(UserObject.getUserName(ChatMessageCell.this.currentUser));
                Rect rect = this.rect;
                int i14 = (int) ChatMessageCell.this.nameX;
                int i15 = (int) ChatMessageCell.this.nameY;
                int i16 = (int) (ChatMessageCell.this.nameX + ChatMessageCell.this.nameWidth);
                float f = ChatMessageCell.this.nameY;
                if (ChatMessageCell.this.nameLayout != null) {
                    i5 = ChatMessageCell.this.nameLayout.getHeight();
                }
                rect.set(i14, i15, i16, (int) (f + i5));
                obtain2.setBoundsInParent(this.rect);
                if (ChatMessageCell.this.accessibilityVirtualViewBounds.get(i) == null) {
                    ChatMessageCell.this.accessibilityVirtualViewBounds.put(i, new Rect(this.rect));
                }
                this.rect.offset(iArr[0], iArr[1]);
                obtain2.setBoundsInScreen(this.rect);
                obtain2.setClassName("android.widget.TextView");
                obtain2.setEnabled(true);
                obtain2.setClickable(true);
                obtain2.setLongClickable(true);
                obtain2.addAction(16);
                obtain2.addAction(32);
            } else if (i >= 3000) {
                if (!(ChatMessageCell.this.currentMessageObject.caption instanceof Spannable) || ChatMessageCell.this.captionLayout == null) {
                    return null;
                }
                Spannable spannable3 = (Spannable) ChatMessageCell.this.currentMessageObject.caption;
                ClickableSpan linkById = getLinkById(i, true);
                if (linkById == null) {
                    return null;
                }
                int[] realSpanStartAndEnd = ChatMessageCell.this.getRealSpanStartAndEnd(spannable3, linkById);
                obtain2.setText(spannable3.subSequence(realSpanStartAndEnd[0], realSpanStartAndEnd[1]).toString());
                ChatMessageCell.this.captionLayout.getText().length();
                ChatMessageCell.this.captionLayout.getSelectionPath(realSpanStartAndEnd[0], realSpanStartAndEnd[1], this.linkPath);
                this.linkPath.computeBounds(this.rectF, true);
                Rect rect2 = this.rect;
                RectF rectF = this.rectF;
                rect2.set((int) rectF.left, (int) rectF.top, (int) rectF.right, (int) rectF.bottom);
                this.rect.offset((int) ChatMessageCell.this.captionX, (int) ChatMessageCell.this.captionY);
                obtain2.setBoundsInParent(this.rect);
                if (ChatMessageCell.this.accessibilityVirtualViewBounds.get(i) == null) {
                    ChatMessageCell.this.accessibilityVirtualViewBounds.put(i, new Rect(this.rect));
                }
                this.rect.offset(iArr[0], iArr[1]);
                obtain2.setBoundsInScreen(this.rect);
                obtain2.setClassName("android.widget.TextView");
                obtain2.setEnabled(true);
                obtain2.setClickable(true);
                obtain2.setLongClickable(true);
                obtain2.addAction(16);
                obtain2.addAction(32);
            } else if (i >= 2000) {
                if (!(ChatMessageCell.this.currentMessageObject.messageText instanceof Spannable)) {
                    return null;
                }
                Spannable spannable4 = (Spannable) ChatMessageCell.this.currentMessageObject.messageText;
                ClickableSpan linkById2 = getLinkById(i, false);
                if (linkById2 == null) {
                    return null;
                }
                int[] realSpanStartAndEnd2 = ChatMessageCell.this.getRealSpanStartAndEnd(spannable4, linkById2);
                obtain2.setText(spannable4.subSequence(realSpanStartAndEnd2[0], realSpanStartAndEnd2[1]).toString());
                Iterator<MessageObject.TextLayoutBlock> it3 = ChatMessageCell.this.currentMessageObject.textLayoutBlocks.iterator();
                while (true) {
                    if (!it3.hasNext()) {
                        break;
                    }
                    MessageObject.TextLayoutBlock next = it3.next();
                    int length = next.textLayout.getText().length();
                    int i17 = next.charactersOffset;
                    if (i17 <= realSpanStartAndEnd2[0] && length + i17 >= realSpanStartAndEnd2[1]) {
                        next.textLayout.getSelectionPath(realSpanStartAndEnd2[0] - i17, realSpanStartAndEnd2[1] - i17, this.linkPath);
                        this.linkPath.computeBounds(this.rectF, true);
                        Rect rect3 = this.rect;
                        RectF rectF2 = this.rectF;
                        rect3.set((int) rectF2.left, (int) rectF2.top, (int) rectF2.right, (int) rectF2.bottom);
                        this.rect.offset(0, (int) next.textYOffset);
                        this.rect.offset(ChatMessageCell.this.textX, ChatMessageCell.this.textY);
                        obtain2.setBoundsInParent(this.rect);
                        if (ChatMessageCell.this.accessibilityVirtualViewBounds.get(i) == null) {
                            ChatMessageCell.this.accessibilityVirtualViewBounds.put(i, new Rect(this.rect));
                        }
                        this.rect.offset(iArr[0], iArr[1]);
                        obtain2.setBoundsInScreen(this.rect);
                    }
                }
                obtain2.setClassName("android.widget.TextView");
                obtain2.setEnabled(true);
                obtain2.setClickable(true);
                obtain2.setLongClickable(true);
                obtain2.addAction(16);
                obtain2.addAction(32);
            } else if (i >= 1000) {
                int i18 = i - 1000;
                if (i18 >= ChatMessageCell.this.botButtons.size()) {
                    return null;
                }
                BotButton botButton2 = (BotButton) ChatMessageCell.this.botButtons.get(i18);
                obtain2.setText(botButton2.title.getText());
                obtain2.setClassName("android.widget.Button");
                obtain2.setEnabled(true);
                obtain2.setClickable(true);
                obtain2.addAction(16);
                this.rect.set(botButton2.x, botButton2.y, botButton2.x + botButton2.width, botButton2.y + botButton2.height);
                this.rect.offset(ChatMessageCell.this.currentMessageObject.isOutOwner() ? (ChatMessageCell.this.getMeasuredWidth() - ChatMessageCell.this.widthForButtons) - AndroidUtilities.dp(10.0f) : ChatMessageCell.this.backgroundDrawableLeft + AndroidUtilities.dp(ChatMessageCell.this.mediaBackground ? 1.0f : 7.0f), ChatMessageCell.this.layoutHeight);
                obtain2.setBoundsInParent(this.rect);
                if (ChatMessageCell.this.accessibilityVirtualViewBounds.get(i) == null) {
                    ChatMessageCell.this.accessibilityVirtualViewBounds.put(i, new Rect(this.rect));
                }
                this.rect.offset(iArr[0], iArr[1]);
                obtain2.setBoundsInScreen(this.rect);
            } else if (i >= 500) {
                int i19 = i - 500;
                if (i19 >= ChatMessageCell.this.pollButtons.size()) {
                    return null;
                }
                PollButton pollButton2 = (PollButton) ChatMessageCell.this.pollButtons.get(i19);
                StringBuilder sb2 = new StringBuilder(pollButton2.title.getText());
                if (ChatMessageCell.this.pollVoted) {
                    obtain2.setSelected(pollButton2.chosen);
                    sb2.append(", ");
                    sb2.append(pollButton2.percent);
                    sb2.append("%");
                    if (ChatMessageCell.this.lastPoll != null && ChatMessageCell.this.lastPoll.quiz && (pollButton2.chosen || pollButton2.correct)) {
                        sb2.append(", ");
                        if (pollButton2.correct) {
                            i3 = R.string.AccDescrQuizCorrectAnswer;
                            str3 = "AccDescrQuizCorrectAnswer";
                        } else {
                            i3 = R.string.AccDescrQuizIncorrectAnswer;
                            str3 = "AccDescrQuizIncorrectAnswer";
                        }
                        sb2.append(LocaleController.getString(str3, i3));
                    }
                } else {
                    obtain2.setClassName("android.widget.Button");
                }
                obtain2.setText(sb2);
                obtain2.setEnabled(true);
                obtain2.addAction(16);
                int i20 = pollButton2.y + ChatMessageCell.this.namesOffset;
                int dp = ChatMessageCell.this.backgroundWidth - AndroidUtilities.dp(76.0f);
                Rect rect4 = this.rect;
                int i21 = pollButton2.x;
                rect4.set(i21, i20, dp + i21, pollButton2.height + i20);
                obtain2.setBoundsInParent(this.rect);
                if (ChatMessageCell.this.accessibilityVirtualViewBounds.get(i) == null) {
                    ChatMessageCell.this.accessibilityVirtualViewBounds.put(i, new Rect(this.rect));
                }
                this.rect.offset(iArr[0], iArr[1]);
                obtain2.setBoundsInScreen(this.rect);
                obtain2.setClickable(true);
            } else if (i == 495) {
                obtain2.setClassName("android.widget.Button");
                obtain2.setEnabled(true);
                obtain2.setText(LocaleController.getString("AccDescrQuizExplanation", R.string.AccDescrQuizExplanation));
                obtain2.addAction(16);
                this.rect.set(ChatMessageCell.this.pollHintX - AndroidUtilities.dp(8.0f), ChatMessageCell.this.pollHintY - AndroidUtilities.dp(8.0f), ChatMessageCell.this.pollHintX + AndroidUtilities.dp(32.0f), ChatMessageCell.this.pollHintY + AndroidUtilities.dp(32.0f));
                obtain2.setBoundsInParent(this.rect);
                if (ChatMessageCell.this.accessibilityVirtualViewBounds.get(i) == null || !((Rect) ChatMessageCell.this.accessibilityVirtualViewBounds.get(i)).equals(this.rect)) {
                    ChatMessageCell.this.accessibilityVirtualViewBounds.put(i, new Rect(this.rect));
                }
                this.rect.offset(iArr[0], iArr[1]);
                obtain2.setBoundsInScreen(this.rect);
                obtain2.setClickable(true);
            } else if (i == 499) {
                obtain2.setClassName("android.widget.Button");
                obtain2.setEnabled(true);
                if (ChatMessageCell.this.instantViewLayout != null) {
                    obtain2.setText(ChatMessageCell.this.instantViewLayout.getText());
                }
                obtain2.addAction(16);
                ChatMessageCell.this.instantButtonRect.round(this.rect);
                obtain2.setBoundsInParent(this.rect);
                if (ChatMessageCell.this.accessibilityVirtualViewBounds.get(i) == null || !((Rect) ChatMessageCell.this.accessibilityVirtualViewBounds.get(i)).equals(this.rect)) {
                    ChatMessageCell.this.accessibilityVirtualViewBounds.put(i, new Rect(this.rect));
                }
                this.rect.offset(iArr[0], iArr[1]);
                obtain2.setBoundsInScreen(this.rect);
                obtain2.setClickable(true);
            } else if (i == 498) {
                obtain2.setClassName("android.widget.ImageButton");
                obtain2.setEnabled(true);
                ChatMessageCell chatMessageCell4 = ChatMessageCell.this;
                if (chatMessageCell4.isOpenChatByShare(chatMessageCell4.currentMessageObject)) {
                    obtain2.setContentDescription(LocaleController.getString("AccDescrOpenChat", R.string.AccDescrOpenChat));
                } else {
                    obtain2.setContentDescription(LocaleController.getString("ShareFile", R.string.ShareFile));
                }
                obtain2.addAction(16);
                this.rect.set((int) ChatMessageCell.this.sideStartX, (int) ChatMessageCell.this.sideStartY, ((int) ChatMessageCell.this.sideStartX) + AndroidUtilities.dp(40.0f), ((int) ChatMessageCell.this.sideStartY) + AndroidUtilities.dp(32.0f));
                obtain2.setBoundsInParent(this.rect);
                if (ChatMessageCell.this.accessibilityVirtualViewBounds.get(i) == null || !((Rect) ChatMessageCell.this.accessibilityVirtualViewBounds.get(i)).equals(this.rect)) {
                    ChatMessageCell.this.accessibilityVirtualViewBounds.put(i, new Rect(this.rect));
                }
                this.rect.offset(iArr[0], iArr[1]);
                obtain2.setBoundsInScreen(this.rect);
                obtain2.setClickable(true);
            } else if (i == 497) {
                obtain2.setEnabled(true);
                StringBuilder sb3 = new StringBuilder();
                sb3.append(LocaleController.getString("Reply", R.string.Reply));
                sb3.append(", ");
                StaticLayout staticLayout = ChatMessageCell.this.replyNameLayout;
                if (staticLayout != null) {
                    sb3.append(staticLayout.getText());
                    sb3.append(", ");
                }
                StaticLayout staticLayout2 = ChatMessageCell.this.replyTextLayout;
                if (staticLayout2 != null) {
                    sb3.append(staticLayout2.getText());
                }
                obtain2.setContentDescription(sb3.toString());
                obtain2.addAction(16);
                Rect rect5 = this.rect;
                ChatMessageCell chatMessageCell5 = ChatMessageCell.this;
                int i22 = chatMessageCell5.replyStartX;
                rect5.set(i22, chatMessageCell5.replyStartY, Math.max(chatMessageCell5.replyNameWidth, ChatMessageCell.this.replyTextWidth) + i22, ChatMessageCell.this.replyStartY + AndroidUtilities.dp(35.0f));
                obtain2.setBoundsInParent(this.rect);
                if (ChatMessageCell.this.accessibilityVirtualViewBounds.get(i) == null || !((Rect) ChatMessageCell.this.accessibilityVirtualViewBounds.get(i)).equals(this.rect)) {
                    ChatMessageCell.this.accessibilityVirtualViewBounds.put(i, new Rect(this.rect));
                }
                this.rect.offset(iArr[0], iArr[1]);
                obtain2.setBoundsInScreen(this.rect);
                obtain2.setClickable(true);
            } else if (i == 494) {
                obtain2.setEnabled(true);
                StringBuilder sb4 = new StringBuilder();
                if (ChatMessageCell.this.forwardedNameLayout[0] != null && ChatMessageCell.this.forwardedNameLayout[1] != null) {
                    int i23 = 0;
                    while (i23 < 2) {
                        sb4.append(ChatMessageCell.this.forwardedNameLayout[i23].getText());
                        sb4.append(i23 == 0 ? " " : "\n");
                        i23++;
                    }
                }
                obtain2.setContentDescription(sb4.toString());
                obtain2.addAction(16);
                int min = (int) Math.min(ChatMessageCell.this.forwardNameX - ChatMessageCell.this.forwardNameOffsetX[0], ChatMessageCell.this.forwardNameX - ChatMessageCell.this.forwardNameOffsetX[1]);
                this.rect.set(min, ChatMessageCell.this.forwardNameY, ChatMessageCell.this.forwardedNameWidth + min, ChatMessageCell.this.forwardNameY + AndroidUtilities.dp(32.0f));
                obtain2.setBoundsInParent(this.rect);
                if (ChatMessageCell.this.accessibilityVirtualViewBounds.get(i) == null || !((Rect) ChatMessageCell.this.accessibilityVirtualViewBounds.get(i)).equals(this.rect)) {
                    ChatMessageCell.this.accessibilityVirtualViewBounds.put(i, new Rect(this.rect));
                }
                this.rect.offset(iArr[0], iArr[1]);
                obtain2.setBoundsInScreen(this.rect);
                obtain2.setClickable(true);
            } else if (i == 496) {
                obtain2.setClassName("android.widget.Button");
                obtain2.setEnabled(true);
                int repliesCount = ChatMessageCell.this.getRepliesCount();
                if (ChatMessageCell.this.currentMessageObject != null && !ChatMessageCell.this.currentMessageObject.shouldDrawWithoutBackground() && !ChatMessageCell.this.currentMessageObject.isAnimatedEmoji()) {
                    if (ChatMessageCell.this.isRepliesChat) {
                        str2 = LocaleController.getString("ViewInChat", R.string.ViewInChat);
                    } else {
                        str2 = repliesCount == 0 ? LocaleController.getString("LeaveAComment", R.string.LeaveAComment) : LocaleController.formatPluralString("CommentsCount", repliesCount, new Object[0]);
                    }
                } else {
                    str2 = (ChatMessageCell.this.isRepliesChat || repliesCount <= 0) ? null : LocaleController.formatShortNumber(repliesCount, null);
                }
                if (str2 != null) {
                    obtain2.setText(str2);
                }
                obtain2.addAction(16);
                this.rect.set(ChatMessageCell.this.commentButtonRect);
                obtain2.setBoundsInParent(this.rect);
                if (ChatMessageCell.this.accessibilityVirtualViewBounds.get(i) == null || !((Rect) ChatMessageCell.this.accessibilityVirtualViewBounds.get(i)).equals(this.rect)) {
                    ChatMessageCell.this.accessibilityVirtualViewBounds.put(i, new Rect(this.rect));
                }
                this.rect.offset(iArr[0], iArr[1]);
                obtain2.setBoundsInScreen(this.rect);
                obtain2.setClickable(true);
            } else if (i == 493) {
                obtain2.setClassName("android.widget.Button");
                obtain2.setEnabled(true);
                if (ChatMessageCell.this.currentMessageObject.isVoiceTranscriptionOpen()) {
                    i2 = R.string.AccActionCloseTranscription;
                    str = "AccActionCloseTranscription";
                } else {
                    i2 = R.string.AccActionOpenTranscription;
                    str = "AccActionOpenTranscription";
                }
                obtain2.setText(LocaleController.getString(str, i2));
                obtain2.addAction(16);
                this.rect.set((int) ChatMessageCell.this.transcribeX, (int) ChatMessageCell.this.transcribeY, (int) (ChatMessageCell.this.transcribeX + AndroidUtilities.dp(30.0f)), (int) (ChatMessageCell.this.transcribeY + AndroidUtilities.dp(30.0f)));
                obtain2.setBoundsInParent(this.rect);
                this.rect.offset(iArr[0], iArr[1]);
                obtain2.setBoundsInScreen(this.rect);
                obtain2.setClickable(true);
            }
            obtain2.setFocusable(true);
            obtain2.setVisibleToUser(true);
            return obtain2;
        }

        @Override // android.view.accessibility.AccessibilityNodeProvider
        public boolean performAction(int i, int i2, Bundle bundle) {
            if (i == -1) {
                ChatMessageCell.this.performAccessibilityAction(i2, bundle);
            } else if (i2 == 64) {
                ChatMessageCell.this.sendAccessibilityEventForVirtualView(i, 32768);
            } else {
                boolean z = false;
                if (i2 == 16) {
                    if (i == 5000) {
                        if (ChatMessageCell.this.delegate != null) {
                            ChatMessageCellDelegate chatMessageCellDelegate = ChatMessageCell.this.delegate;
                            ChatMessageCell chatMessageCell = ChatMessageCell.this;
                            chatMessageCellDelegate.didPressUserAvatar(chatMessageCell, chatMessageCell.currentUser, 0.0f, 0.0f);
                        }
                    } else if (i >= 3000) {
                        ClickableSpan linkById = getLinkById(i, true);
                        if (linkById != null) {
                            ChatMessageCell.this.delegate.didPressUrl(ChatMessageCell.this, linkById, false);
                            ChatMessageCell.this.sendAccessibilityEventForVirtualView(i, 1);
                        }
                    } else if (i >= 2000) {
                        ClickableSpan linkById2 = getLinkById(i, false);
                        if (linkById2 != null) {
                            ChatMessageCell.this.delegate.didPressUrl(ChatMessageCell.this, linkById2, false);
                            ChatMessageCell.this.sendAccessibilityEventForVirtualView(i, 1);
                        }
                    } else if (i >= 1000) {
                        int i3 = i - 1000;
                        if (i3 >= ChatMessageCell.this.botButtons.size()) {
                            return false;
                        }
                        BotButton botButton = (BotButton) ChatMessageCell.this.botButtons.get(i3);
                        if (ChatMessageCell.this.delegate != null && botButton.button != null) {
                            ChatMessageCell.this.delegate.didPressBotButton(ChatMessageCell.this, botButton.button);
                        }
                        ChatMessageCell.this.sendAccessibilityEventForVirtualView(i, 1);
                    } else if (i >= 500) {
                        int i4 = i - 500;
                        if (i4 >= ChatMessageCell.this.pollButtons.size()) {
                            return false;
                        }
                        PollButton pollButton = (PollButton) ChatMessageCell.this.pollButtons.get(i4);
                        if (ChatMessageCell.this.delegate != null) {
                            ArrayList<TLRPC$TL_pollAnswer> arrayList = new ArrayList<>();
                            arrayList.add(pollButton.answer);
                            ChatMessageCell.this.delegate.didPressVoteButtons(ChatMessageCell.this, arrayList, -1, 0, 0);
                        }
                        ChatMessageCell.this.sendAccessibilityEventForVirtualView(i, 1);
                    } else if (i == 495) {
                        if (ChatMessageCell.this.delegate != null) {
                            ChatMessageCell.this.delegate.didPressHint(ChatMessageCell.this, 0);
                        }
                    } else if (i == 499) {
                        if (ChatMessageCell.this.delegate != null) {
                            ChatMessageCellDelegate chatMessageCellDelegate2 = ChatMessageCell.this.delegate;
                            ChatMessageCell chatMessageCell2 = ChatMessageCell.this;
                            chatMessageCellDelegate2.didPressInstantButton(chatMessageCell2, chatMessageCell2.drawInstantViewType);
                        }
                    } else if (i == 498) {
                        if (ChatMessageCell.this.delegate != null) {
                            ChatMessageCell.this.delegate.didPressSideButton(ChatMessageCell.this);
                        }
                    } else if (i == 497) {
                        if (ChatMessageCell.this.delegate != null) {
                            ChatMessageCell chatMessageCell3 = ChatMessageCell.this;
                            if ((!chatMessageCell3.isThreadChat || chatMessageCell3.currentMessageObject.getReplyTopMsgId() != 0) && ChatMessageCell.this.currentMessageObject.hasValidReplyMessageObject()) {
                                ChatMessageCellDelegate chatMessageCellDelegate3 = ChatMessageCell.this.delegate;
                                ChatMessageCell chatMessageCell4 = ChatMessageCell.this;
                                chatMessageCellDelegate3.didPressReplyMessage(chatMessageCell4, chatMessageCell4.currentMessageObject.getReplyMsgId());
                            }
                        }
                    } else if (i == 494) {
                        if (ChatMessageCell.this.delegate != null) {
                            if (ChatMessageCell.this.currentForwardChannel != null) {
                                ChatMessageCellDelegate chatMessageCellDelegate4 = ChatMessageCell.this.delegate;
                                ChatMessageCell chatMessageCell5 = ChatMessageCell.this;
                                chatMessageCellDelegate4.didPressChannelAvatar(chatMessageCell5, chatMessageCell5.currentForwardChannel, ChatMessageCell.this.currentMessageObject.messageOwner.fwd_from.channel_post, ChatMessageCell.this.lastTouchX, ChatMessageCell.this.lastTouchY);
                            } else if (ChatMessageCell.this.currentForwardUser != null) {
                                ChatMessageCellDelegate chatMessageCellDelegate5 = ChatMessageCell.this.delegate;
                                ChatMessageCell chatMessageCell6 = ChatMessageCell.this;
                                chatMessageCellDelegate5.didPressUserAvatar(chatMessageCell6, chatMessageCell6.currentForwardUser, ChatMessageCell.this.lastTouchX, ChatMessageCell.this.lastTouchY);
                            } else if (ChatMessageCell.this.currentForwardName != null) {
                                ChatMessageCell.this.delegate.didPressHiddenForward(ChatMessageCell.this);
                            }
                        }
                    } else if (i == 496) {
                        if (ChatMessageCell.this.delegate != null) {
                            ChatMessageCell chatMessageCell7 = ChatMessageCell.this;
                            if (chatMessageCell7.isRepliesChat) {
                                chatMessageCell7.delegate.didPressSideButton(ChatMessageCell.this);
                            } else {
                                chatMessageCell7.delegate.didPressCommentButton(ChatMessageCell.this);
                            }
                        }
                    } else if (i == 493 && ChatMessageCell.this.transcribeButton != null) {
                        ChatMessageCell.this.transcribeButton.onTap();
                    }
                } else if (i2 == 32) {
                    if (i >= 3000) {
                        z = true;
                    }
                    ClickableSpan linkById3 = getLinkById(i, z);
                    if (linkById3 != null) {
                        ChatMessageCell.this.delegate.didPressUrl(ChatMessageCell.this, linkById3, true);
                        ChatMessageCell.this.sendAccessibilityEventForVirtualView(i, 2);
                    }
                }
            }
            return true;
        }

        private ClickableSpan getLinkById(int i, boolean z) {
            if (i == 5000) {
                return null;
            }
            if (z) {
                int i2 = i - 3000;
                if (!(ChatMessageCell.this.currentMessageObject.caption instanceof Spannable) || i2 < 0) {
                    return null;
                }
                Spannable spannable = (Spannable) ChatMessageCell.this.currentMessageObject.caption;
                ClickableSpan[] clickableSpanArr = (ClickableSpan[]) spannable.getSpans(0, spannable.length(), ClickableSpan.class);
                if (clickableSpanArr.length > i2) {
                    return clickableSpanArr[i2];
                }
                return null;
            }
            int i3 = i - 2000;
            if (!(ChatMessageCell.this.currentMessageObject.messageText instanceof Spannable) || i3 < 0) {
                return null;
            }
            Spannable spannable2 = (Spannable) ChatMessageCell.this.currentMessageObject.messageText;
            ClickableSpan[] clickableSpanArr2 = (ClickableSpan[]) spannable2.getSpans(0, spannable2.length(), ClickableSpan.class);
            if (clickableSpanArr2.length > i3) {
                return clickableSpanArr2[i3];
            }
            return null;
        }
    }

    public void setImageCoords(float f, float f2, float f3, float f4) {
        this.photoImage.setImageCoords(f, f2, f3, f4);
        int i = this.documentAttachType;
        if (i == 4 || i == 2) {
            this.videoButtonX = (int) (this.photoImage.getImageX() + AndroidUtilities.dp(8.0f));
            int imageY = (int) (this.photoImage.getImageY() + AndroidUtilities.dp(8.0f));
            this.videoButtonY = imageY;
            RadialProgress2 radialProgress2 = this.videoRadialProgress;
            int i2 = this.videoButtonX;
            radialProgress2.setProgressRect(i2, imageY, AndroidUtilities.dp(24.0f) + i2, this.videoButtonY + AndroidUtilities.dp(24.0f));
            this.buttonX = (int) (f + ((this.photoImage.getImageWidth() - AndroidUtilities.dp(48.0f)) / 2.0f));
            int imageY2 = (int) (this.photoImage.getImageY() + ((this.photoImage.getImageHeight() - AndroidUtilities.dp(48.0f)) / 2.0f));
            this.buttonY = imageY2;
            RadialProgress2 radialProgress22 = this.radialProgress;
            int i3 = this.buttonX;
            radialProgress22.setProgressRect(i3, imageY2, AndroidUtilities.dp(48.0f) + i3, this.buttonY + AndroidUtilities.dp(48.0f));
        }
    }

    @Override // android.view.View
    public float getAlpha() {
        if (this.ALPHA_PROPERTY_WORKAROUND) {
            return this.alphaInternal;
        }
        return super.getAlpha();
    }

    @Override // android.view.View
    public void setAlpha(float f) {
        boolean z = true;
        boolean z2 = f == 1.0f;
        if (getAlpha() != 1.0f) {
            z = false;
        }
        if (z2 != z) {
            invalidate();
        }
        if (this.ALPHA_PROPERTY_WORKAROUND) {
            this.alphaInternal = f;
            invalidate();
            return;
        }
        super.setAlpha(f);
    }

    public int getCurrentBackgroundLeft() {
        int i = this.currentBackgroundDrawable.getBounds().left;
        return (this.currentMessageObject.isOutOwner() || this.transitionParams.changePinnedBottomProgress == 1.0f || this.mediaBackground || this.drawPinnedBottom) ? i : i - AndroidUtilities.dp(6.0f);
    }

    public TransitionParams getTransitionParams() {
        return this.transitionParams;
    }

    public int getTopMediaOffset() {
        MessageObject messageObject = this.currentMessageObject;
        if (messageObject == null || messageObject.type != 14) {
            return 0;
        }
        return this.mediaOffsetY + this.namesOffset;
    }

    public int getTextX() {
        return this.textX;
    }

    public int getTextY() {
        return this.textY;
    }

    public boolean isPlayingRound() {
        return this.isRoundVideo && this.isPlayingRound;
    }

    public int getParentWidth() {
        int i;
        MessageObject messageObject = this.currentMessageObject;
        if (messageObject == null) {
            messageObject = this.messageObjectToSet;
        }
        return (messageObject == null || !messageObject.preview || (i = this.parentWidth) <= 0) ? AndroidUtilities.displaySize.x : i;
    }

    /* loaded from: classes3.dex */
    public class TransitionParams {
        public boolean animateBackgroundBoundsInner;
        boolean animateBotButtonsChanged;
        private boolean animateButton;
        public boolean animateChange;
        private int animateCommentArrowX;
        private boolean animateCommentDrawUnread;
        private int animateCommentUnreadX;
        private float animateCommentX;
        private boolean animateComments;
        private StaticLayout animateCommentsLayout;
        private boolean animateDrawCommentNumber;
        public boolean animateDrawingTimeAlpha;
        private boolean animateEditedEnter;
        private StaticLayout animateEditedLayout;
        private int animateEditedWidthDiff;
        int animateForwardNameWidth;
        float animateForwardNameX;
        public boolean animateForwardedLayout;
        public int animateForwardedNamesOffset;
        private float animateFromButtonX;
        private float animateFromButtonY;
        public float animateFromReplyY;
        public float animateFromRoundVideoDotY;
        public float animateFromTextY;
        public int animateFromTimeX;
        public float animateFromTimeXPinned;
        private float animateFromTimeXReplies;
        private float animateFromTimeXViews;
        public boolean animateLocationIsExpired;
        boolean animateMessageText;
        private float animateNameX;
        private AnimatedEmojiSpan.EmojiGroupedSpans animateOutAnimateEmoji;
        private StaticLayout animateOutCaptionLayout;
        private ArrayList<MessageObject.TextLayoutBlock> animateOutTextBlocks;
        private boolean animatePinned;
        public boolean animatePlayingRound;
        public boolean animateRadius;
        boolean animateReplaceCaptionLayout;
        private boolean animateReplies;
        private StaticLayout animateRepliesLayout;
        public boolean animateRoundVideoDotY;
        private boolean animateShouldDrawMenuDrawable;
        private boolean animateShouldDrawTimeOnMedia;
        private boolean animateSign;
        public boolean animateText;
        private StaticLayout animateTimeLayout;
        private int animateTimeWidth;
        public float animateToImageH;
        public float animateToImageW;
        public float animateToImageX;
        public float animateToImageY;
        public int[] animateToRadius;
        private int animateTotalCommentWidth;
        private StaticLayout animateViewsLayout;
        public float captionFromX;
        public float captionFromY;
        public float deltaBottom;
        public float deltaLeft;
        public float deltaRight;
        public float deltaTop;
        public boolean drawPinnedBottomBackground;
        public boolean ignoreAlpha;
        public boolean imageChangeBoundsTransition;
        public int lastBackgroundLeft;
        public int lastBackgroundRight;
        private float lastButtonX;
        private float lastButtonY;
        private int lastCommentArrowX;
        private boolean lastCommentDrawUnread;
        private StaticLayout lastCommentLayout;
        private int lastCommentUnreadX;
        private float lastCommentX;
        private int lastCommentsCount;
        private boolean lastDrawCommentNumber;
        public StaticLayout lastDrawDocTitleLayout;
        public StaticLayout lastDrawInfoLayout;
        public float lastDrawLocationExpireProgress;
        public String lastDrawLocationExpireText;
        public float lastDrawReplyY;
        public float lastDrawRoundVideoDotY;
        public boolean lastDrawTime;
        private StaticLayout lastDrawingCaptionLayout;
        public float lastDrawingCaptionX;
        public float lastDrawingCaptionY;
        private boolean lastDrawingEdited;
        public float lastDrawingImageH;
        public float lastDrawingImageW;
        public float lastDrawingImageX;
        public float lastDrawingImageY;
        private ArrayList<MessageObject.TextLayoutBlock> lastDrawingTextBlocks;
        public float lastDrawingTextY;
        public boolean lastDrawnForwardedName;
        int lastForwardNameWidth;
        float lastForwardNameX;
        public int lastForwardedNamesOffset;
        private boolean lastIsPinned;
        private boolean lastIsPlayingRound;
        public boolean lastLocatinIsExpired;
        private int lastRepliesCount;
        private StaticLayout lastRepliesLayout;
        private boolean lastShouldDrawMenuDrawable;
        private boolean lastShouldDrawTimeOnMedia;
        private String lastSignMessage;
        private StaticLayout lastTimeLayout;
        private int lastTimeWidth;
        public int lastTimeX;
        public float lastTimeXPinned;
        private float lastTimeXReplies;
        private float lastTimeXViews;
        public int lastTopOffset;
        private int lastTotalCommentWidth;
        private int lastViewsCount;
        private StaticLayout lastViewsLayout;
        public boolean messageEntering;
        private boolean moveCaption;
        public boolean shouldAnimateTimeX;
        public float toDeltaLeft;
        public float toDeltaRight;
        public boolean transformGroupToSingleMessage;
        public boolean updatePhotoImageX;
        public boolean wasDraw;
        public int[] imageRoundRadius = new int[4];
        public float captionEnterProgress = 1.0f;
        public float changePinnedBottomProgress = 1.0f;
        public Rect lastDrawingBackgroundRect = new Rect();
        public float animateChangeProgress = 1.0f;
        private ArrayList<BotButton> lastDrawBotButtons = new ArrayList<>();
        private ArrayList<BotButton> transitionBotButtons = new ArrayList<>();
        public int lastStatusDrawableParams = -1;
        public StaticLayout[] lastDrawnForwardedNameLayout = new StaticLayout[2];
        public StaticLayout[] animatingForwardedNameLayout = new StaticLayout[2];

        public boolean supportChangeAnimation() {
            return true;
        }

        public TransitionParams() {
            ChatMessageCell.this = r2;
        }

        public void recordDrawingState() {
            this.wasDraw = true;
            this.lastDrawingImageX = ChatMessageCell.this.photoImage.getImageX();
            this.lastDrawingImageY = ChatMessageCell.this.photoImage.getImageY();
            this.lastDrawingImageW = ChatMessageCell.this.photoImage.getImageWidth();
            this.lastDrawingImageH = ChatMessageCell.this.photoImage.getImageHeight();
            System.arraycopy(ChatMessageCell.this.photoImage.getRoundRadius(), 0, this.imageRoundRadius, 0, 4);
            if (ChatMessageCell.this.currentBackgroundDrawable != null) {
                this.lastDrawingBackgroundRect.set(ChatMessageCell.this.currentBackgroundDrawable.getBounds());
            }
            this.lastDrawingTextBlocks = ChatMessageCell.this.currentMessageObject.textLayoutBlocks;
            this.lastDrawingEdited = ChatMessageCell.this.edited;
            this.lastDrawingCaptionX = ChatMessageCell.this.captionX;
            this.lastDrawingCaptionY = ChatMessageCell.this.captionY;
            this.lastDrawingCaptionLayout = ChatMessageCell.this.captionLayout;
            this.lastDrawBotButtons.clear();
            if (!ChatMessageCell.this.botButtons.isEmpty()) {
                this.lastDrawBotButtons.addAll(ChatMessageCell.this.botButtons);
            }
            if (ChatMessageCell.this.commentLayout != null) {
                this.lastCommentsCount = ChatMessageCell.this.getRepliesCount();
                this.lastTotalCommentWidth = ChatMessageCell.this.totalCommentWidth;
                this.lastCommentLayout = ChatMessageCell.this.commentLayout;
                this.lastCommentArrowX = ChatMessageCell.this.commentArrowX;
                this.lastCommentUnreadX = ChatMessageCell.this.commentUnreadX;
                this.lastCommentDrawUnread = ChatMessageCell.this.commentDrawUnread;
                this.lastCommentX = ChatMessageCell.this.commentX;
                this.lastDrawCommentNumber = ChatMessageCell.this.drawCommentNumber;
            }
            this.lastRepliesCount = ChatMessageCell.this.getRepliesCount();
            this.lastViewsCount = ChatMessageCell.this.getMessageObject().messageOwner.views;
            this.lastRepliesLayout = ChatMessageCell.this.repliesLayout;
            this.lastViewsLayout = ChatMessageCell.this.viewsLayout;
            ChatMessageCell chatMessageCell = ChatMessageCell.this;
            this.lastIsPinned = chatMessageCell.isPinned;
            this.lastSignMessage = chatMessageCell.lastPostAuthor;
            this.lastButtonX = ChatMessageCell.this.buttonX;
            this.lastButtonY = ChatMessageCell.this.buttonY;
            this.lastDrawTime = !ChatMessageCell.this.forceNotDrawTime;
            this.lastTimeX = ChatMessageCell.this.timeX;
            this.lastTimeLayout = ChatMessageCell.this.timeLayout;
            this.lastTimeWidth = ChatMessageCell.this.timeWidth;
            this.lastShouldDrawTimeOnMedia = ChatMessageCell.this.shouldDrawTimeOnMedia();
            this.lastTopOffset = ChatMessageCell.this.getTopMediaOffset();
            this.lastShouldDrawMenuDrawable = ChatMessageCell.this.shouldDrawMenuDrawable();
            this.lastLocatinIsExpired = ChatMessageCell.this.locationExpired;
            this.lastIsPlayingRound = ChatMessageCell.this.isPlayingRound;
            this.lastDrawingTextY = ChatMessageCell.this.textY;
            int unused = ChatMessageCell.this.textX;
            this.lastDrawnForwardedNameLayout[0] = ChatMessageCell.this.forwardedNameLayout[0];
            this.lastDrawnForwardedNameLayout[1] = ChatMessageCell.this.forwardedNameLayout[1];
            this.lastDrawnForwardedName = ChatMessageCell.this.currentMessageObject.needDrawForwarded();
            this.lastForwardNameX = ChatMessageCell.this.forwardNameX;
            this.lastForwardedNamesOffset = ChatMessageCell.this.namesOffset;
            this.lastForwardNameWidth = ChatMessageCell.this.forwardedNameWidth;
            this.lastBackgroundLeft = ChatMessageCell.this.getCurrentBackgroundLeft();
            this.lastBackgroundRight = ChatMessageCell.this.currentBackgroundDrawable.getBounds().right;
            ChatMessageCell.this.reactionsLayoutInBubble.recordDrawingState();
            ChatMessageCell chatMessageCell2 = ChatMessageCell.this;
            if (chatMessageCell2.replyNameLayout != null) {
                this.lastDrawReplyY = chatMessageCell2.replyStartY;
            } else {
                this.lastDrawReplyY = 0.0f;
            }
        }

        public void recordDrawingStatePreview() {
            this.lastDrawnForwardedNameLayout[0] = ChatMessageCell.this.forwardedNameLayout[0];
            this.lastDrawnForwardedNameLayout[1] = ChatMessageCell.this.forwardedNameLayout[1];
            this.lastDrawnForwardedName = ChatMessageCell.this.currentMessageObject.needDrawForwarded();
            this.lastForwardNameX = ChatMessageCell.this.forwardNameX;
            this.lastForwardedNamesOffset = ChatMessageCell.this.namesOffset;
            this.lastForwardNameWidth = ChatMessageCell.this.forwardedNameWidth;
        }

        /* JADX WARN: Removed duplicated region for block: B:102:0x029e  */
        /* JADX WARN: Removed duplicated region for block: B:113:0x02dd  */
        /* JADX WARN: Removed duplicated region for block: B:116:0x02ed  */
        /* JADX WARN: Removed duplicated region for block: B:125:0x0322  */
        /* JADX WARN: Removed duplicated region for block: B:126:0x0327  */
        /* JADX WARN: Removed duplicated region for block: B:129:0x032c  */
        /* JADX WARN: Removed duplicated region for block: B:136:0x0348  */
        /* JADX WARN: Removed duplicated region for block: B:141:0x0364  */
        /* JADX WARN: Removed duplicated region for block: B:152:0x03b6  */
        /* JADX WARN: Removed duplicated region for block: B:155:0x03cb  */
        /* JADX WARN: Removed duplicated region for block: B:157:0x03d1  */
        /* JADX WARN: Removed duplicated region for block: B:166:0x041d  */
        /* JADX WARN: Removed duplicated region for block: B:169:0x0429  */
        /* JADX WARN: Removed duplicated region for block: B:172:0x0435  */
        /* JADX WARN: Removed duplicated region for block: B:175:0x0445  */
        /* JADX WARN: Removed duplicated region for block: B:178:0x0454  */
        /* JADX WARN: Removed duplicated region for block: B:183:0x048c  */
        /* JADX WARN: Removed duplicated region for block: B:186:0x0499  */
        /* JADX WARN: Removed duplicated region for block: B:197:0x04cc  */
        /* JADX WARN: Removed duplicated region for block: B:40:0x00d5  */
        /* JADX WARN: Removed duplicated region for block: B:52:0x0188  */
        /* JADX WARN: Removed duplicated region for block: B:60:0x01b8  */
        /* JADX WARN: Removed duplicated region for block: B:83:0x023e  */
        /* JADX WARN: Removed duplicated region for block: B:95:0x027a  */
        /* JADX WARN: Removed duplicated region for block: B:99:0x0298  */
        /*
            Code decompiled incorrectly, please refer to instructions dump.
        */
        public boolean animateChange() {
            boolean z;
            StaticLayout staticLayout;
            StaticLayout staticLayout2;
            boolean z2;
            ChatMessageCell chatMessageCell;
            boolean z3;
            ChatMessageCell chatMessageCell2;
            ReactionsLayoutInBubble reactionsLayoutInBubble;
            StaticLayout staticLayout3;
            boolean z4;
            int i = 0;
            if (!this.wasDraw) {
                return false;
            }
            this.animateMessageText = false;
            if (ChatMessageCell.this.currentMessageObject.textLayoutBlocks != this.lastDrawingTextBlocks) {
                if (ChatMessageCell.this.currentMessageObject.textLayoutBlocks != null && this.lastDrawingTextBlocks != null && ChatMessageCell.this.currentMessageObject.textLayoutBlocks.size() == this.lastDrawingTextBlocks.size()) {
                    for (int i2 = 0; i2 < this.lastDrawingTextBlocks.size(); i2++) {
                        String charSequence = ChatMessageCell.this.currentMessageObject.textLayoutBlocks.get(i2).textLayout == null ? null : ChatMessageCell.this.currentMessageObject.textLayoutBlocks.get(i2).textLayout.getText().toString();
                        String charSequence2 = this.lastDrawingTextBlocks.get(i2).textLayout == null ? null : this.lastDrawingTextBlocks.get(i2).textLayout.getText().toString();
                        if ((charSequence != null || charSequence2 == null) && ((charSequence == null || charSequence2 != null) && charSequence.equals(charSequence2))) {
                        }
                    }
                    z4 = true;
                    if (z4 || ChatMessageCell.this.animatedEmojiStack != null) {
                        this.animateMessageText = true;
                        ArrayList<MessageObject.TextLayoutBlock> arrayList = this.lastDrawingTextBlocks;
                        this.animateOutTextBlocks = arrayList;
                        this.animateOutAnimateEmoji = AnimatedEmojiSpan.update(0, ChatMessageCell.this, (AnimatedEmojiSpan.EmojiGroupedSpans) null, arrayList);
                        ChatMessageCell chatMessageCell3 = ChatMessageCell.this;
                        chatMessageCell3.animatedEmojiStack = AnimatedEmojiSpan.update(0, chatMessageCell3, chatMessageCell3.animatedEmojiStack, chatMessageCell3.currentMessageObject.textLayoutBlocks);
                        z = true;
                        if (ChatMessageCell.this.edited || this.lastDrawingEdited || ChatMessageCell.this.timeLayout == null) {
                            if (!ChatMessageCell.this.edited && this.lastDrawingEdited && ChatMessageCell.this.timeLayout != null) {
                                this.animateTimeLayout = this.lastTimeLayout;
                                int i3 = ChatMessageCell.this.timeWidth;
                                int i4 = this.lastTimeWidth;
                                this.animateEditedWidthDiff = i3 - i4;
                                this.animateEditedEnter = true;
                                this.animateTimeWidth = i4;
                                this.animateFromTimeX = this.lastTimeX;
                                this.shouldAnimateTimeX = true;
                                z = true;
                            }
                            staticLayout = ChatMessageCell.this.captionLayout;
                            staticLayout2 = this.lastDrawingCaptionLayout;
                            if (staticLayout != staticLayout2) {
                                if (ChatMessageCell.this.captionLayout != null && this.lastDrawingCaptionLayout != null) {
                                    ChatMessageCell.this.updateCaptionLayout();
                                    if (this.lastDrawingCaptionX != ChatMessageCell.this.captionX || this.lastDrawingCaptionY != ChatMessageCell.this.captionY) {
                                        this.moveCaption = true;
                                        this.captionFromX = this.lastDrawingCaptionX;
                                        this.captionFromY = this.lastDrawingCaptionY;
                                        z = true;
                                    }
                                }
                                if (this.lastDrawBotButtons.isEmpty()) {
                                }
                                if (this.lastDrawBotButtons.size() != ChatMessageCell.this.botButtons.size()) {
                                }
                                if (!this.animateBotButtonsChanged) {
                                }
                                if (this.animateBotButtonsChanged) {
                                }
                                if (ChatMessageCell.this.documentAttachType != 3) {
                                }
                                this.animateFromButtonX = this.lastButtonX;
                                this.animateFromButtonY = this.lastButtonY;
                                this.animateButton = true;
                                z = true;
                                z2 = this.lastIsPinned;
                                chatMessageCell = ChatMessageCell.this;
                                if (z2 != chatMessageCell.isPinned) {
                                }
                                if (this.lastRepliesLayout == null) {
                                }
                                this.animateRepliesLayout = this.lastRepliesLayout;
                                this.animateReplies = true;
                                z = true;
                                z3 = true;
                                if (this.lastViewsLayout != null) {
                                }
                                if (ChatMessageCell.this.commentLayout != null) {
                                }
                                if (!TextUtils.equals(this.lastSignMessage, ChatMessageCell.this.lastPostAuthor)) {
                                }
                                if (this.lastDrawTime == ChatMessageCell.this.forceNotDrawTime) {
                                }
                                z = true;
                                if (this.lastShouldDrawMenuDrawable != ChatMessageCell.this.shouldDrawMenuDrawable()) {
                                }
                                if (this.lastLocatinIsExpired != ChatMessageCell.this.locationExpired) {
                                }
                                if (this.lastIsPlayingRound != ChatMessageCell.this.isPlayingRound) {
                                }
                                if (this.lastDrawingTextY != ChatMessageCell.this.textY) {
                                }
                                if (ChatMessageCell.this.currentMessageObject != null) {
                                }
                                ChatMessageCell.this.updateReactionLayoutPosition();
                                if (ChatMessageCell.this.reactionsLayoutInBubble.animateChange()) {
                                }
                                if (ChatMessageCell.this.currentMessageObject.isRoundVideo()) {
                                }
                                if (ChatMessageCell.this.replyNameLayout != null) {
                                }
                                return z;
                            }
                            String charSequence3 = staticLayout2 == null ? null : staticLayout2.getText().toString();
                            String charSequence4 = ChatMessageCell.this.captionLayout == null ? null : ChatMessageCell.this.captionLayout.getText().toString();
                            if ((charSequence4 == null) != (charSequence3 == null) || (charSequence3 != null && !charSequence3.equals(charSequence4))) {
                                this.animateReplaceCaptionLayout = true;
                                StaticLayout staticLayout4 = this.lastDrawingCaptionLayout;
                                this.animateOutCaptionLayout = staticLayout4;
                                this.animateOutAnimateEmoji = AnimatedEmojiSpan.update(0, ChatMessageCell.this, (AnimatedEmojiSpan.EmojiGroupedSpans) null, staticLayout4);
                                ChatMessageCell chatMessageCell4 = ChatMessageCell.this;
                                chatMessageCell4.animatedEmojiStack = AnimatedEmojiSpan.update(0, chatMessageCell4, chatMessageCell4.animatedEmojiStack, chatMessageCell4.captionLayout);
                            } else {
                                ChatMessageCell.this.updateCaptionLayout();
                                if (this.lastDrawingCaptionX != ChatMessageCell.this.captionX || this.lastDrawingCaptionY != ChatMessageCell.this.captionY) {
                                    this.moveCaption = true;
                                    this.captionFromX = this.lastDrawingCaptionX;
                                    this.captionFromY = this.lastDrawingCaptionY;
                                }
                                if (this.lastDrawBotButtons.isEmpty() || !ChatMessageCell.this.botButtons.isEmpty()) {
                                    if (this.lastDrawBotButtons.size() != ChatMessageCell.this.botButtons.size()) {
                                        this.animateBotButtonsChanged = true;
                                    }
                                    if (!this.animateBotButtonsChanged) {
                                        for (int i5 = 0; i5 < ChatMessageCell.this.botButtons.size(); i5++) {
                                            BotButton botButton = (BotButton) ChatMessageCell.this.botButtons.get(i5);
                                            BotButton botButton2 = this.lastDrawBotButtons.get(i5);
                                            if (botButton.x != botButton2.x || botButton.width != botButton2.width) {
                                                this.animateBotButtonsChanged = true;
                                                break;
                                            }
                                        }
                                    }
                                    if (this.animateBotButtonsChanged) {
                                        this.transitionBotButtons.addAll(this.lastDrawBotButtons);
                                    }
                                }
                                if ((ChatMessageCell.this.documentAttachType != 3 || ChatMessageCell.this.documentAttachType == 1) && (ChatMessageCell.this.buttonX != this.lastButtonX || ChatMessageCell.this.buttonY != this.lastButtonY)) {
                                    this.animateFromButtonX = this.lastButtonX;
                                    this.animateFromButtonY = this.lastButtonY;
                                    this.animateButton = true;
                                    z = true;
                                }
                                z2 = this.lastIsPinned;
                                chatMessageCell = ChatMessageCell.this;
                                if (z2 != chatMessageCell.isPinned) {
                                    this.animatePinned = true;
                                    z = true;
                                    z3 = true;
                                } else {
                                    z3 = false;
                                }
                                if ((this.lastRepliesLayout == null || chatMessageCell.repliesLayout != null) && this.lastRepliesCount != ChatMessageCell.this.getRepliesCount()) {
                                    this.animateRepliesLayout = this.lastRepliesLayout;
                                    this.animateReplies = true;
                                    z = true;
                                    z3 = true;
                                }
                                if (this.lastViewsLayout != null && this.lastViewsCount != ChatMessageCell.this.getMessageObject().messageOwner.views) {
                                    this.animateViewsLayout = this.lastViewsLayout;
                                    z = true;
                                    z3 = true;
                                }
                                if (ChatMessageCell.this.commentLayout != null && this.lastCommentsCount != ChatMessageCell.this.getRepliesCount()) {
                                    staticLayout3 = this.lastCommentLayout;
                                    if (staticLayout3 == null && !TextUtils.equals(staticLayout3.getText(), ChatMessageCell.this.commentLayout.getText())) {
                                        this.animateCommentsLayout = this.lastCommentLayout;
                                    } else {
                                        this.animateCommentsLayout = null;
                                    }
                                    this.animateTotalCommentWidth = this.lastTotalCommentWidth;
                                    this.animateCommentX = this.lastCommentX;
                                    this.animateCommentArrowX = this.lastCommentArrowX;
                                    this.animateCommentUnreadX = this.lastCommentUnreadX;
                                    this.animateCommentDrawUnread = this.lastCommentDrawUnread;
                                    this.animateDrawCommentNumber = this.lastDrawCommentNumber;
                                    this.animateComments = true;
                                    z = true;
                                }
                                if (!TextUtils.equals(this.lastSignMessage, ChatMessageCell.this.lastPostAuthor)) {
                                    this.animateSign = true;
                                    this.animateNameX = ChatMessageCell.this.nameX;
                                    z = true;
                                }
                                if (this.lastDrawTime == ChatMessageCell.this.forceNotDrawTime) {
                                    this.animateDrawingTimeAlpha = true;
                                    this.animateViewsLayout = null;
                                } else if (this.lastShouldDrawTimeOnMedia == ChatMessageCell.this.shouldDrawTimeOnMedia()) {
                                    if (z3 || Math.abs(ChatMessageCell.this.timeX - this.lastTimeX) > 1) {
                                        this.shouldAnimateTimeX = true;
                                        this.animateTimeWidth = this.lastTimeWidth;
                                        this.animateFromTimeX = this.lastTimeX;
                                        this.animateFromTimeXViews = this.lastTimeXViews;
                                        this.animateFromTimeXReplies = this.lastTimeXReplies;
                                        this.animateFromTimeXPinned = this.lastTimeXPinned;
                                    }
                                    if (this.lastShouldDrawMenuDrawable != ChatMessageCell.this.shouldDrawMenuDrawable()) {
                                        this.animateShouldDrawMenuDrawable = true;
                                    }
                                    if (this.lastLocatinIsExpired != ChatMessageCell.this.locationExpired) {
                                        this.animateLocationIsExpired = true;
                                    }
                                    if (this.lastIsPlayingRound != ChatMessageCell.this.isPlayingRound) {
                                        this.animatePlayingRound = true;
                                        z = true;
                                    }
                                    if (this.lastDrawingTextY != ChatMessageCell.this.textY) {
                                        this.animateText = true;
                                        this.animateFromTextY = this.lastDrawingTextY;
                                        z = true;
                                    }
                                    if (ChatMessageCell.this.currentMessageObject != null && this.lastDrawnForwardedName != ChatMessageCell.this.currentMessageObject.needDrawForwarded()) {
                                        this.animateForwardedLayout = true;
                                        StaticLayout[] staticLayoutArr = this.animatingForwardedNameLayout;
                                        StaticLayout[] staticLayoutArr2 = this.lastDrawnForwardedNameLayout;
                                        staticLayoutArr[0] = staticLayoutArr2[0];
                                        staticLayoutArr[1] = staticLayoutArr2[1];
                                        this.animateForwardNameX = this.lastForwardNameX;
                                        this.animateForwardedNamesOffset = this.lastForwardedNamesOffset;
                                        this.animateForwardNameWidth = this.lastForwardNameWidth;
                                        z = true;
                                    }
                                    ChatMessageCell.this.updateReactionLayoutPosition();
                                    if (ChatMessageCell.this.reactionsLayoutInBubble.animateChange()) {
                                        z = true;
                                    }
                                    if (ChatMessageCell.this.currentMessageObject.isRoundVideo()) {
                                        int i6 = ChatMessageCell.this.layoutHeight;
                                        if (ChatMessageCell.this.drawPinnedBottom) {
                                            i = 2;
                                        }
                                        float dp = i6 - AndroidUtilities.dp(28 - i);
                                        if (!ChatMessageCell.this.reactionsLayoutInBubble.isEmpty) {
                                            dp -= reactionsLayoutInBubble.totalHeight;
                                        }
                                        float f = this.lastDrawRoundVideoDotY;
                                        if (dp != f) {
                                            this.animateRoundVideoDotY = true;
                                            this.animateFromRoundVideoDotY = f;
                                            z = true;
                                        }
                                    }
                                    if (ChatMessageCell.this.replyNameLayout != null) {
                                        float f2 = this.lastDrawReplyY;
                                        if (chatMessageCell2.replyStartX != f2 && f2 != 0.0f) {
                                            this.animateFromReplyY = f2;
                                            return true;
                                        }
                                    }
                                    return z;
                                } else {
                                    this.animateEditedEnter = false;
                                    this.animateShouldDrawTimeOnMedia = true;
                                    this.animateFromTimeX = this.lastTimeX;
                                    this.animateTimeLayout = this.lastTimeLayout;
                                    this.animateTimeWidth = this.lastTimeWidth;
                                }
                                z = true;
                                if (this.lastShouldDrawMenuDrawable != ChatMessageCell.this.shouldDrawMenuDrawable()) {
                                }
                                if (this.lastLocatinIsExpired != ChatMessageCell.this.locationExpired) {
                                }
                                if (this.lastIsPlayingRound != ChatMessageCell.this.isPlayingRound) {
                                }
                                if (this.lastDrawingTextY != ChatMessageCell.this.textY) {
                                }
                                if (ChatMessageCell.this.currentMessageObject != null) {
                                    this.animateForwardedLayout = true;
                                    StaticLayout[] staticLayoutArr3 = this.animatingForwardedNameLayout;
                                    StaticLayout[] staticLayoutArr22 = this.lastDrawnForwardedNameLayout;
                                    staticLayoutArr3[0] = staticLayoutArr22[0];
                                    staticLayoutArr3[1] = staticLayoutArr22[1];
                                    this.animateForwardNameX = this.lastForwardNameX;
                                    this.animateForwardedNamesOffset = this.lastForwardedNamesOffset;
                                    this.animateForwardNameWidth = this.lastForwardNameWidth;
                                    z = true;
                                }
                                ChatMessageCell.this.updateReactionLayoutPosition();
                                if (ChatMessageCell.this.reactionsLayoutInBubble.animateChange()) {
                                }
                                if (ChatMessageCell.this.currentMessageObject.isRoundVideo()) {
                                }
                                if (ChatMessageCell.this.replyNameLayout != null) {
                                }
                                return z;
                            }
                            z = true;
                            if (this.lastDrawBotButtons.isEmpty()) {
                            }
                            if (this.lastDrawBotButtons.size() != ChatMessageCell.this.botButtons.size()) {
                            }
                            if (!this.animateBotButtonsChanged) {
                            }
                            if (this.animateBotButtonsChanged) {
                            }
                            if (ChatMessageCell.this.documentAttachType != 3) {
                            }
                            this.animateFromButtonX = this.lastButtonX;
                            this.animateFromButtonY = this.lastButtonY;
                            this.animateButton = true;
                            z = true;
                            z2 = this.lastIsPinned;
                            chatMessageCell = ChatMessageCell.this;
                            if (z2 != chatMessageCell.isPinned) {
                            }
                            if (this.lastRepliesLayout == null) {
                            }
                            this.animateRepliesLayout = this.lastRepliesLayout;
                            this.animateReplies = true;
                            z = true;
                            z3 = true;
                            if (this.lastViewsLayout != null) {
                                this.animateViewsLayout = this.lastViewsLayout;
                                z = true;
                                z3 = true;
                            }
                            if (ChatMessageCell.this.commentLayout != null) {
                                staticLayout3 = this.lastCommentLayout;
                                if (staticLayout3 == null) {
                                }
                                this.animateCommentsLayout = null;
                                this.animateTotalCommentWidth = this.lastTotalCommentWidth;
                                this.animateCommentX = this.lastCommentX;
                                this.animateCommentArrowX = this.lastCommentArrowX;
                                this.animateCommentUnreadX = this.lastCommentUnreadX;
                                this.animateCommentDrawUnread = this.lastCommentDrawUnread;
                                this.animateDrawCommentNumber = this.lastDrawCommentNumber;
                                this.animateComments = true;
                                z = true;
                            }
                            if (!TextUtils.equals(this.lastSignMessage, ChatMessageCell.this.lastPostAuthor)) {
                            }
                            if (this.lastDrawTime == ChatMessageCell.this.forceNotDrawTime) {
                            }
                            z = true;
                            if (this.lastShouldDrawMenuDrawable != ChatMessageCell.this.shouldDrawMenuDrawable()) {
                            }
                            if (this.lastLocatinIsExpired != ChatMessageCell.this.locationExpired) {
                            }
                            if (this.lastIsPlayingRound != ChatMessageCell.this.isPlayingRound) {
                            }
                            if (this.lastDrawingTextY != ChatMessageCell.this.textY) {
                            }
                            if (ChatMessageCell.this.currentMessageObject != null) {
                            }
                            ChatMessageCell.this.updateReactionLayoutPosition();
                            if (ChatMessageCell.this.reactionsLayoutInBubble.animateChange()) {
                            }
                            if (ChatMessageCell.this.currentMessageObject.isRoundVideo()) {
                            }
                            if (ChatMessageCell.this.replyNameLayout != null) {
                            }
                            return z;
                        }
                        String string = LocaleController.getString("EditedMessage", R.string.EditedMessage);
                        String charSequence5 = ChatMessageCell.this.timeLayout.getText().toString();
                        int indexOf = charSequence5.indexOf(string);
                        if (indexOf >= 0) {
                            if (indexOf == 0) {
                                this.animateEditedLayout = new StaticLayout(string, Theme.chat_timePaint, ChatMessageCell.this.timeTextWidth + AndroidUtilities.dp(100.0f), Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
                                SpannableStringBuilder spannableStringBuilder = new SpannableStringBuilder();
                                spannableStringBuilder.append((CharSequence) string);
                                spannableStringBuilder.append((CharSequence) charSequence5.substring(string.length()));
                                spannableStringBuilder.setSpan(new EmptyStubSpan(), 0, string.length(), 0);
                                this.animateTimeLayout = new StaticLayout(spannableStringBuilder, Theme.chat_timePaint, ChatMessageCell.this.timeTextWidth + AndroidUtilities.dp(100.0f), Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
                                this.animateEditedWidthDiff = ChatMessageCell.this.timeWidth - this.lastTimeWidth;
                            } else {
                                this.animateEditedWidthDiff = 0;
                                this.animateEditedLayout = null;
                                this.animateTimeLayout = this.lastTimeLayout;
                            }
                            this.animateEditedEnter = true;
                            this.animateTimeWidth = this.lastTimeWidth;
                            this.animateFromTimeX = this.lastTimeX;
                            this.shouldAnimateTimeX = true;
                            z = true;
                        }
                        staticLayout = ChatMessageCell.this.captionLayout;
                        staticLayout2 = this.lastDrawingCaptionLayout;
                        if (staticLayout != staticLayout2) {
                        }
                    }
                }
                z4 = false;
                if (z4) {
                }
                this.animateMessageText = true;
                ArrayList<MessageObject.TextLayoutBlock> arrayList2 = this.lastDrawingTextBlocks;
                this.animateOutTextBlocks = arrayList2;
                this.animateOutAnimateEmoji = AnimatedEmojiSpan.update(0, ChatMessageCell.this, (AnimatedEmojiSpan.EmojiGroupedSpans) null, arrayList2);
                ChatMessageCell chatMessageCell32 = ChatMessageCell.this;
                chatMessageCell32.animatedEmojiStack = AnimatedEmojiSpan.update(0, chatMessageCell32, chatMessageCell32.animatedEmojiStack, chatMessageCell32.currentMessageObject.textLayoutBlocks);
                z = true;
                if (ChatMessageCell.this.edited) {
                }
                if (!ChatMessageCell.this.edited) {
                    this.animateTimeLayout = this.lastTimeLayout;
                    int i32 = ChatMessageCell.this.timeWidth;
                    int i42 = this.lastTimeWidth;
                    this.animateEditedWidthDiff = i32 - i42;
                    this.animateEditedEnter = true;
                    this.animateTimeWidth = i42;
                    this.animateFromTimeX = this.lastTimeX;
                    this.shouldAnimateTimeX = true;
                    z = true;
                }
                staticLayout = ChatMessageCell.this.captionLayout;
                staticLayout2 = this.lastDrawingCaptionLayout;
                if (staticLayout != staticLayout2) {
                }
            }
            z = false;
            if (ChatMessageCell.this.edited) {
            }
            if (!ChatMessageCell.this.edited) {
            }
            staticLayout = ChatMessageCell.this.captionLayout;
            staticLayout2 = this.lastDrawingCaptionLayout;
            if (staticLayout != staticLayout2) {
            }
        }

        public void onDetach() {
            this.wasDraw = false;
        }

        public void resetAnimation() {
            this.animateChange = false;
            this.animatePinned = false;
            this.animateBackgroundBoundsInner = false;
            this.deltaLeft = 0.0f;
            this.deltaRight = 0.0f;
            this.deltaBottom = 0.0f;
            this.deltaTop = 0.0f;
            this.toDeltaLeft = 0.0f;
            this.toDeltaRight = 0.0f;
            if (this.imageChangeBoundsTransition && this.animateToImageW != 0.0f && this.animateToImageH != 0.0f) {
                ChatMessageCell.this.photoImage.setImageCoords(this.animateToImageX, this.animateToImageY, this.animateToImageW, this.animateToImageH);
            }
            if (this.animateRadius) {
                ChatMessageCell.this.photoImage.setRoundRadius(this.animateToRadius);
            }
            this.animateToImageX = 0.0f;
            this.animateToImageY = 0.0f;
            this.animateToImageW = 0.0f;
            this.animateToImageH = 0.0f;
            this.imageChangeBoundsTransition = false;
            this.changePinnedBottomProgress = 1.0f;
            this.captionEnterProgress = 1.0f;
            this.animateRadius = false;
            this.animateChangeProgress = 1.0f;
            this.animateMessageText = false;
            this.animateOutTextBlocks = null;
            this.animateEditedLayout = null;
            this.animateTimeLayout = null;
            this.animateEditedEnter = false;
            this.animateReplaceCaptionLayout = false;
            this.transformGroupToSingleMessage = false;
            this.animateOutCaptionLayout = null;
            AnimatedEmojiSpan.release(ChatMessageCell.this, this.animateOutAnimateEmoji);
            this.animateOutAnimateEmoji = null;
            this.moveCaption = false;
            this.animateDrawingTimeAlpha = false;
            this.transitionBotButtons.clear();
            this.animateButton = false;
            this.animateReplies = false;
            this.animateRepliesLayout = null;
            this.animateComments = false;
            this.animateCommentsLayout = null;
            this.animateViewsLayout = null;
            this.animateShouldDrawTimeOnMedia = false;
            this.animateShouldDrawMenuDrawable = false;
            this.shouldAnimateTimeX = false;
            this.animateSign = false;
            this.animateDrawingTimeAlpha = false;
            this.animateLocationIsExpired = false;
            this.animatePlayingRound = false;
            this.animateText = false;
            this.animateForwardedLayout = false;
            StaticLayout[] staticLayoutArr = this.animatingForwardedNameLayout;
            staticLayoutArr[0] = null;
            staticLayoutArr[1] = null;
            this.animateRoundVideoDotY = false;
            ChatMessageCell.this.reactionsLayoutInBubble.resetAnimation();
        }

        /* JADX WARN: Removed duplicated region for block: B:24:0x006b  */
        /* JADX WARN: Removed duplicated region for block: B:25:0x006d  */
        /* JADX WARN: Removed duplicated region for block: B:28:0x0072  */
        /* JADX WARN: Removed duplicated region for block: B:31:0x0077  */
        /*
            Code decompiled incorrectly, please refer to instructions dump.
        */
        public int createStatusDrawableParams() {
            boolean z;
            boolean z2;
            int i;
            int i2 = 8;
            int i3 = 4;
            boolean z3 = true;
            if (ChatMessageCell.this.currentMessageObject.isOutOwner()) {
                if (ChatMessageCell.this.currentMessageObject.isSending() || ChatMessageCell.this.currentMessageObject.isEditing()) {
                    i = 0;
                    z3 = false;
                    z2 = true;
                } else if (ChatMessageCell.this.currentMessageObject.isSendError()) {
                    i = 0;
                    z3 = false;
                    z2 = false;
                    z = true;
                    int i4 = i | (!z3 ? 2 : 0);
                    if (!z2) {
                        i3 = 0;
                    }
                    int i5 = i4 | i3;
                    if (!z) {
                        i2 = 0;
                    }
                    return i5 | i2;
                } else {
                    if (ChatMessageCell.this.currentMessageObject.isSent()) {
                        i = (ChatMessageCell.this.currentMessageObject.scheduled || ChatMessageCell.this.currentMessageObject.isUnread()) ? 0 : 1;
                    } else {
                        i = 0;
                        z3 = false;
                    }
                    z2 = false;
                }
                z = false;
                int i42 = i | (!z3 ? 2 : 0);
                if (!z2) {
                }
                int i52 = i42 | i3;
                if (!z) {
                }
                return i52 | i2;
            }
            if (!ChatMessageCell.this.currentMessageObject.isSending() && !ChatMessageCell.this.currentMessageObject.isEditing()) {
                z3 = false;
            }
            boolean isSendError = ChatMessageCell.this.currentMessageObject.isSendError();
            if (!z3) {
                i3 = 0;
            }
            if (!isSendError) {
                i2 = 0;
            }
            return i3 | i2;
        }
    }

    private int getThemedColor(String str) {
        Theme.ResourcesProvider resourcesProvider = this.resourcesProvider;
        Integer color = resourcesProvider != null ? resourcesProvider.getColor(str) : null;
        return color != null ? color.intValue() : Theme.getColor(str);
    }

    private Drawable getThemedDrawable(String str) {
        Theme.ResourcesProvider resourcesProvider = this.resourcesProvider;
        Drawable drawable = resourcesProvider != null ? resourcesProvider.getDrawable(str) : null;
        return drawable != null ? drawable : Theme.getThemeDrawable(str);
    }

    private Paint getThemedPaint(String str) {
        Theme.ResourcesProvider resourcesProvider = this.resourcesProvider;
        Paint paint = resourcesProvider != null ? resourcesProvider.getPaint(str) : null;
        return paint != null ? paint : Theme.getThemePaint(str);
    }

    private boolean hasGradientService() {
        Theme.ResourcesProvider resourcesProvider = this.resourcesProvider;
        return resourcesProvider != null ? resourcesProvider.hasGradientService() : Theme.hasGradientService();
    }
}

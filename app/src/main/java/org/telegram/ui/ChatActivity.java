package org.telegram.ui;

import android.animation.Animator;
import android.animation.AnimatorListenerAdapter;
import android.animation.AnimatorSet;
import android.animation.ObjectAnimator;
import android.animation.ValueAnimator;
import android.annotation.SuppressLint;
import android.annotation.TargetApi;
import android.app.Activity;
import android.app.DatePickerDialog;
import android.app.Dialog;
import android.content.ClipData;
import android.content.ClipboardManager;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.res.Configuration;
import android.graphics.Bitmap;
import android.graphics.BitmapShader;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.ColorMatrix;
import android.graphics.ColorMatrixColorFilter;
import android.graphics.Matrix;
import android.graphics.Outline;
import android.graphics.Paint;
import android.graphics.Path;
import android.graphics.Point;
import android.graphics.PorterDuff;
import android.graphics.PorterDuffColorFilter;
import android.graphics.PorterDuffXfermode;
import android.graphics.Rect;
import android.graphics.RectF;
import android.graphics.Shader;
import android.graphics.Typeface;
import android.graphics.drawable.Drawable;
import android.net.Uri;
import android.os.Build;
import android.os.Bundle;
import android.os.SystemClock;
import android.os.Vibrator;
import android.text.Layout;
import android.text.Spannable;
import android.text.SpannableString;
import android.text.SpannableStringBuilder;
import android.text.Spanned;
import android.text.StaticLayout;
import android.text.TextPaint;
import android.text.TextUtils;
import android.text.style.CharacterStyle;
import android.text.style.ForegroundColorSpan;
import android.text.style.URLSpan;
import android.util.Pair;
import android.util.Property;
import android.util.SparseArray;
import android.util.SparseIntArray;
import android.view.KeyEvent;
import android.view.Menu;
import android.view.MotionEvent;
import android.view.TextureView;
import android.view.View;
import android.view.ViewConfiguration;
import android.view.ViewGroup;
import android.view.ViewOutlineProvider;
import android.view.ViewTreeObserver;
import android.view.accessibility.AccessibilityNodeInfo;
import android.view.animation.DecelerateInterpolator;
import android.widget.EditText;
import android.widget.FrameLayout;
import android.widget.HorizontalScrollView;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.Space;
import android.widget.TextView;
import android.widget.Toast;
import androidx.collection.LongSparseArray;
import androidx.core.content.ContextCompat;
import androidx.core.content.FileProvider;
import androidx.core.graphics.ColorUtils;
import androidx.exifinterface.media.ExifInterface;
import androidx.recyclerview.widget.ChatListItemAnimator;
import androidx.recyclerview.widget.GridLayoutManager;
import androidx.recyclerview.widget.GridLayoutManagerFixed;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.LinearSmoothScrollerCustom;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewpager.widget.PagerAdapter;
import androidx.viewpager.widget.ViewPager;
import com.google.android.exoplayer2.ui.AspectRatioFrameLayout;
import com.google.zxing.common.detector.MathUtils;
import j$.util.Comparator$CC;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.InputStream;
import java.net.URLDecoder;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicReference;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import org.telegram.PhoneFormat.PhoneFormat;
import org.telegram.messenger.AccountInstance;
import org.telegram.messenger.AndroidUtilities;
import org.telegram.messenger.ApplicationLoader;
import org.telegram.messenger.BuildVars;
import org.telegram.messenger.ChatObject;
import org.telegram.messenger.ChatThemeController;
import org.telegram.messenger.ContactsController;
import org.telegram.messenger.DialogObject;
import org.telegram.messenger.Emoji;
import org.telegram.messenger.EmojiData;
import org.telegram.messenger.FileLoader;
import org.telegram.messenger.FileLog;
import org.telegram.messenger.ForwardingMessagesParams;
import org.telegram.messenger.ImageLocation;
import org.telegram.messenger.ImageReceiver;
import org.telegram.messenger.LanguageDetector;
import org.telegram.messenger.LocaleController;
import org.telegram.messenger.MediaController;
import org.telegram.messenger.MediaDataController;
import org.telegram.messenger.MessageObject;
import org.telegram.messenger.MessagesController;
import org.telegram.messenger.MessagesStorage;
import org.telegram.messenger.NotificationCenter;
import org.telegram.messenger.SecretChatHelper;
import org.telegram.messenger.SendMessagesHelper;
import org.telegram.messenger.SharedConfig;
import org.telegram.messenger.UserConfig;
import org.telegram.messenger.UserObject;
import org.telegram.messenger.Utilities;
import org.telegram.messenger.VideoEditedInfo;
import org.telegram.messenger.browser.Browser;
import org.telegram.messenger.voip.VoIPService;
import org.telegram.tgnet.ConnectionsManager;
import org.telegram.tgnet.TLObject;
import org.telegram.tgnet.TLRPC$BotInfo;
import org.telegram.tgnet.TLRPC$BotInlineResult;
import org.telegram.tgnet.TLRPC$Chat;
import org.telegram.tgnet.TLRPC$ChatFull;
import org.telegram.tgnet.TLRPC$ChatInvite;
import org.telegram.tgnet.TLRPC$ChatParticipant;
import org.telegram.tgnet.TLRPC$ChatParticipants;
import org.telegram.tgnet.TLRPC$DecryptedMessageAction;
import org.telegram.tgnet.TLRPC$Dialog;
import org.telegram.tgnet.TLRPC$Document;
import org.telegram.tgnet.TLRPC$DraftMessage;
import org.telegram.tgnet.TLRPC$EncryptedChat;
import org.telegram.tgnet.TLRPC$FileLocation;
import org.telegram.tgnet.TLRPC$InputPeer;
import org.telegram.tgnet.TLRPC$InputStickerSet;
import org.telegram.tgnet.TLRPC$KeyboardButton;
import org.telegram.tgnet.TLRPC$Message;
import org.telegram.tgnet.TLRPC$MessageAction;
import org.telegram.tgnet.TLRPC$MessageEntity;
import org.telegram.tgnet.TLRPC$MessageFwdHeader;
import org.telegram.tgnet.TLRPC$MessageMedia;
import org.telegram.tgnet.TLRPC$MessageReplies;
import org.telegram.tgnet.TLRPC$Peer;
import org.telegram.tgnet.TLRPC$PhoneCallDiscardReason;
import org.telegram.tgnet.TLRPC$PhotoSize;
import org.telegram.tgnet.TLRPC$Poll;
import org.telegram.tgnet.TLRPC$PollResults;
import org.telegram.tgnet.TLRPC$ReplyMarkup;
import org.telegram.tgnet.TLRPC$TL_attachMenuBot;
import org.telegram.tgnet.TLRPC$TL_attachMenuBotsBot;
import org.telegram.tgnet.TLRPC$TL_availableReaction;
import org.telegram.tgnet.TLRPC$TL_botCommand;
import org.telegram.tgnet.TLRPC$TL_botInlineMessageMediaAuto;
import org.telegram.tgnet.TLRPC$TL_botInlineMessageMediaInvoice;
import org.telegram.tgnet.TLRPC$TL_channelForbidden;
import org.telegram.tgnet.TLRPC$TL_channelFull;
import org.telegram.tgnet.TLRPC$TL_channels_exportMessageLink;
import org.telegram.tgnet.TLRPC$TL_channels_sendAsPeers;
import org.telegram.tgnet.TLRPC$TL_channels_viewSponsoredMessage;
import org.telegram.tgnet.TLRPC$TL_chatAdminRights;
import org.telegram.tgnet.TLRPC$TL_chatBannedRights;
import org.telegram.tgnet.TLRPC$TL_chatFull;
import org.telegram.tgnet.TLRPC$TL_chatInviteExported;
import org.telegram.tgnet.TLRPC$TL_contacts_acceptContact;
import org.telegram.tgnet.TLRPC$TL_contacts_resolveUsername;
import org.telegram.tgnet.TLRPC$TL_contacts_resolvedPeer;
import org.telegram.tgnet.TLRPC$TL_decryptedMessageActionSetMessageTTL;
import org.telegram.tgnet.TLRPC$TL_document;
import org.telegram.tgnet.TLRPC$TL_encryptedChat;
import org.telegram.tgnet.TLRPC$TL_encryptedChatDiscarded;
import org.telegram.tgnet.TLRPC$TL_encryptedChatRequested;
import org.telegram.tgnet.TLRPC$TL_encryptedChatWaiting;
import org.telegram.tgnet.TLRPC$TL_error;
import org.telegram.tgnet.TLRPC$TL_exportedMessageLink;
import org.telegram.tgnet.TLRPC$TL_fileLocationUnavailable;
import org.telegram.tgnet.TLRPC$TL_game;
import org.telegram.tgnet.TLRPC$TL_groupCall;
import org.telegram.tgnet.TLRPC$TL_inlineBotSwitchPM;
import org.telegram.tgnet.TLRPC$TL_inputMediaPoll;
import org.telegram.tgnet.TLRPC$TL_inputMessageEntityMentionName;
import org.telegram.tgnet.TLRPC$TL_inputStickerSetID;
import org.telegram.tgnet.TLRPC$TL_inputStickerSetShortName;
import org.telegram.tgnet.TLRPC$TL_keyboardButtonBuy;
import org.telegram.tgnet.TLRPC$TL_keyboardButtonCallback;
import org.telegram.tgnet.TLRPC$TL_keyboardButtonGame;
import org.telegram.tgnet.TLRPC$TL_keyboardButtonRow;
import org.telegram.tgnet.TLRPC$TL_keyboardButtonSwitchInline;
import org.telegram.tgnet.TLRPC$TL_keyboardButtonUrl;
import org.telegram.tgnet.TLRPC$TL_keyboardButtonUrlAuth;
import org.telegram.tgnet.TLRPC$TL_keyboardButtonUserProfile;
import org.telegram.tgnet.TLRPC$TL_message;
import org.telegram.tgnet.TLRPC$TL_messageActionChannelMigrateFrom;
import org.telegram.tgnet.TLRPC$TL_messageActionChatAddUser;
import org.telegram.tgnet.TLRPC$TL_messageActionChatCreate;
import org.telegram.tgnet.TLRPC$TL_messageActionChatDeleteUser;
import org.telegram.tgnet.TLRPC$TL_messageActionChatEditPhoto;
import org.telegram.tgnet.TLRPC$TL_messageActionChatJoinedByRequest;
import org.telegram.tgnet.TLRPC$TL_messageActionChatMigrateTo;
import org.telegram.tgnet.TLRPC$TL_messageActionEmpty;
import org.telegram.tgnet.TLRPC$TL_messageActionGameScore;
import org.telegram.tgnet.TLRPC$TL_messageActionGeoProximityReached;
import org.telegram.tgnet.TLRPC$TL_messageActionGiftPremium;
import org.telegram.tgnet.TLRPC$TL_messageActionGroupCall;
import org.telegram.tgnet.TLRPC$TL_messageActionGroupCallScheduled;
import org.telegram.tgnet.TLRPC$TL_messageActionInviteToGroupCall;
import org.telegram.tgnet.TLRPC$TL_messageActionPaymentSent;
import org.telegram.tgnet.TLRPC$TL_messageActionPhoneCall;
import org.telegram.tgnet.TLRPC$TL_messageActionPinMessage;
import org.telegram.tgnet.TLRPC$TL_messageActionSecureValuesSent;
import org.telegram.tgnet.TLRPC$TL_messageActionSetChatTheme;
import org.telegram.tgnet.TLRPC$TL_messageActionSetMessagesTTL;
import org.telegram.tgnet.TLRPC$TL_messageEmpty;
import org.telegram.tgnet.TLRPC$TL_messageEncryptedAction;
import org.telegram.tgnet.TLRPC$TL_messageEntityBold;
import org.telegram.tgnet.TLRPC$TL_messageEntityCode;
import org.telegram.tgnet.TLRPC$TL_messageEntityCustomEmoji;
import org.telegram.tgnet.TLRPC$TL_messageEntityItalic;
import org.telegram.tgnet.TLRPC$TL_messageEntityMentionName;
import org.telegram.tgnet.TLRPC$TL_messageEntityPre;
import org.telegram.tgnet.TLRPC$TL_messageEntitySpoiler;
import org.telegram.tgnet.TLRPC$TL_messageEntityStrike;
import org.telegram.tgnet.TLRPC$TL_messageEntityTextUrl;
import org.telegram.tgnet.TLRPC$TL_messageEntityUnderline;
import org.telegram.tgnet.TLRPC$TL_messageMediaGame;
import org.telegram.tgnet.TLRPC$TL_messageMediaPhoto;
import org.telegram.tgnet.TLRPC$TL_messageMediaPoll;
import org.telegram.tgnet.TLRPC$TL_messageMediaWebPage;
import org.telegram.tgnet.TLRPC$TL_messagePeerReaction;
import org.telegram.tgnet.TLRPC$TL_messageReactions;
import org.telegram.tgnet.TLRPC$TL_messageReplyHeader;
import org.telegram.tgnet.TLRPC$TL_messages_acceptUrlAuth;
import org.telegram.tgnet.TLRPC$TL_messages_discussionMessage;
import org.telegram.tgnet.TLRPC$TL_messages_editMessage;
import org.telegram.tgnet.TLRPC$TL_messages_getAttachMenuBot;
import org.telegram.tgnet.TLRPC$TL_messages_getDiscussionMessage;
import org.telegram.tgnet.TLRPC$TL_messages_getHistory;
import org.telegram.tgnet.TLRPC$TL_messages_getMessageEditData;
import org.telegram.tgnet.TLRPC$TL_messages_getReplies;
import org.telegram.tgnet.TLRPC$TL_messages_getUnreadMentions;
import org.telegram.tgnet.TLRPC$TL_messages_getWebPagePreview;
import org.telegram.tgnet.TLRPC$TL_messages_rateTranscribedAudio;
import org.telegram.tgnet.TLRPC$TL_messages_requestUrlAuth;
import org.telegram.tgnet.TLRPC$TL_messages_sendScheduledMessages;
import org.telegram.tgnet.TLRPC$TL_messages_toggleBotInAttachMenu;
import org.telegram.tgnet.TLRPC$TL_payments_bankCardData;
import org.telegram.tgnet.TLRPC$TL_payments_getBankCardData;
import org.telegram.tgnet.TLRPC$TL_payments_getPaymentReceipt;
import org.telegram.tgnet.TLRPC$TL_payments_paymentReceipt;
import org.telegram.tgnet.TLRPC$TL_peerChannel;
import org.telegram.tgnet.TLRPC$TL_peerChat;
import org.telegram.tgnet.TLRPC$TL_peerUser;
import org.telegram.tgnet.TLRPC$TL_phoneCallDiscardReasonBusy;
import org.telegram.tgnet.TLRPC$TL_phoneCallDiscardReasonMissed;
import org.telegram.tgnet.TLRPC$TL_photoSizeEmpty;
import org.telegram.tgnet.TLRPC$TL_poll;
import org.telegram.tgnet.TLRPC$TL_pollAnswer;
import org.telegram.tgnet.TLRPC$TL_premiumGiftOption;
import org.telegram.tgnet.TLRPC$TL_reactionCount;
import org.telegram.tgnet.TLRPC$TL_replyInlineMarkup;
import org.telegram.tgnet.TLRPC$TL_replyKeyboardForceReply;
import org.telegram.tgnet.TLRPC$TL_updates_channelDifferenceTooLong;
import org.telegram.tgnet.TLRPC$TL_urlAuthResultAccepted;
import org.telegram.tgnet.TLRPC$TL_urlAuthResultDefault;
import org.telegram.tgnet.TLRPC$TL_urlAuthResultRequest;
import org.telegram.tgnet.TLRPC$TL_webPage;
import org.telegram.tgnet.TLRPC$TL_webPagePending;
import org.telegram.tgnet.TLRPC$TL_webPageUrlPending;
import org.telegram.tgnet.TLRPC$Updates;
import org.telegram.tgnet.TLRPC$User;
import org.telegram.tgnet.TLRPC$UserFull;
import org.telegram.tgnet.TLRPC$VideoSize;
import org.telegram.tgnet.TLRPC$WebPage;
import org.telegram.tgnet.TLRPC$messages_Messages;
import org.telegram.ui.ActionBar.ActionBar;
import org.telegram.ui.ActionBar.ActionBarLayout;
import org.telegram.ui.ActionBar.ActionBarMenu;
import org.telegram.ui.ActionBar.ActionBarMenuItem;
import org.telegram.ui.ActionBar.ActionBarMenuSubItem;
import org.telegram.ui.ActionBar.ActionBarPopupWindow;
import org.telegram.ui.ActionBar.AdjustPanLayoutHelper;
import org.telegram.ui.ActionBar.AlertDialog;
import org.telegram.ui.ActionBar.BackDrawable;
import org.telegram.ui.ActionBar.BaseFragment;
import org.telegram.ui.ActionBar.BottomSheet;
import org.telegram.ui.ActionBar.EmojiThemes;
import org.telegram.ui.ActionBar.SimpleTextView;
import org.telegram.ui.ActionBar.Theme;
import org.telegram.ui.ActionBar.ThemeDescription;
import org.telegram.ui.Adapters.MentionsAdapter;
import org.telegram.ui.Adapters.MessagesSearchAdapter;
import org.telegram.ui.Adapters.StickersAdapter;
import org.telegram.ui.AvatarPreviewer;
import org.telegram.ui.Cells.BotHelpCell;
import org.telegram.ui.Cells.BotSwitchCell;
import org.telegram.ui.Cells.ChatActionCell;
import org.telegram.ui.Cells.ChatLoadingCell;
import org.telegram.ui.Cells.ChatMessageCell;
import org.telegram.ui.Cells.ChatUnreadCell;
import org.telegram.ui.Cells.CheckBoxCell;
import org.telegram.ui.Cells.ContextLinkCell;
import org.telegram.ui.Cells.DialogCell;
import org.telegram.ui.Cells.MentionCell;
import org.telegram.ui.Cells.StickerCell;
import org.telegram.ui.Cells.TextSelectionHelper;
import org.telegram.ui.Components.AlertsCreator;
import org.telegram.ui.Components.AnimatedEmojiDrawable;
import org.telegram.ui.Components.AnimatedEmojiSpan;
import org.telegram.ui.Components.AnimatedFileDrawable;
import org.telegram.ui.Components.AnimationProperties;
import org.telegram.ui.Components.AttachBotIntroTopView;
import org.telegram.ui.Components.AutoDeletePopupWrapper;
import org.telegram.ui.Components.BackButtonMenu;
import org.telegram.ui.Components.BackupImageView;
import org.telegram.ui.Components.BluredView;
import org.telegram.ui.Components.BlurredFrameLayout;
import org.telegram.ui.Components.BotCommandsMenuContainer;
import org.telegram.ui.Components.BotCommandsMenuView;
import org.telegram.ui.Components.Bulletin;
import org.telegram.ui.Components.BulletinFactory;
import org.telegram.ui.Components.ChatActivityEnterTopView;
import org.telegram.ui.Components.ChatActivityEnterView;
import org.telegram.ui.Components.ChatAttachAlert;
import org.telegram.ui.Components.ChatAttachAlertDocumentLayout;
import org.telegram.ui.Components.ChatAttachAlertPhotoLayout;
import org.telegram.ui.Components.ChatAvatarContainer;
import org.telegram.ui.Components.ChatBigEmptyView;
import org.telegram.ui.Components.ChatGreetingsView;
import org.telegram.ui.Components.ChatNotificationsPopupWrapper;
import org.telegram.ui.Components.ChatScrimPopupContainerLayout;
import org.telegram.ui.Components.ChatThemeBottomSheet;
import org.telegram.ui.Components.ChecksHintView;
import org.telegram.ui.Components.CircularProgressDrawable;
import org.telegram.ui.Components.ClippingImageView;
import org.telegram.ui.Components.CombinedDrawable;
import org.telegram.ui.Components.CounterView;
import org.telegram.ui.Components.CrossfadeDrawable;
import org.telegram.ui.Components.CubicBezierInterpolator;
import org.telegram.ui.Components.EditTextCaption;
import org.telegram.ui.Components.EmbedBottomSheet;
import org.telegram.ui.Components.EmojiPacksAlert;
import org.telegram.ui.Components.EmojiView;
import org.telegram.ui.Components.ExtendedGridLayoutManager;
import org.telegram.ui.Components.FireworksOverlay;
import org.telegram.ui.Components.ForwardingPreviewView;
import org.telegram.ui.Components.FragmentContextView;
import org.telegram.ui.Components.GigagroupConvertAlert;
import org.telegram.ui.Components.HideViewAfterAnimation;
import org.telegram.ui.Components.HintView;
import org.telegram.ui.Components.ImportingAlert;
import org.telegram.ui.Components.InstantCameraView;
import org.telegram.ui.Components.InviteMembersBottomSheet;
import org.telegram.ui.Components.JoinGroupAlert;
import org.telegram.ui.Components.LayoutHelper;
import org.telegram.ui.Components.MentionsContainerView;
import org.telegram.ui.Components.MessageBackgroundDrawable;
import org.telegram.ui.Components.MessageContainsEmojiButton;
import org.telegram.ui.Components.MotionBackgroundDrawable;
import org.telegram.ui.Components.NumberTextView;
import org.telegram.ui.Components.PhonebookShareAlert;
import org.telegram.ui.Components.PinnedLineView;
import org.telegram.ui.Components.PipRoundVideoView;
import org.telegram.ui.Components.PollVotesAlert;
import org.telegram.ui.Components.PopupSwipeBackLayout;
import org.telegram.ui.Components.Premium.GiftPremiumBottomSheet;
import org.telegram.ui.Components.Premium.PremiumFeatureBottomSheet;
import org.telegram.ui.Components.Premium.PremiumPreviewBottomSheet;
import org.telegram.ui.Components.RLottieDrawable;
import org.telegram.ui.Components.RadialProgressView;
import org.telegram.ui.Components.ReactedHeaderView;
import org.telegram.ui.Components.ReactedUsersListView;
import org.telegram.ui.Components.ReactionTabHolderView;
import org.telegram.ui.Components.Reactions.ReactionsEffectOverlay;
import org.telegram.ui.Components.Reactions.ReactionsLayoutInBubble;
import org.telegram.ui.Components.ReactionsContainerLayout;
import org.telegram.ui.Components.RecyclerAnimationScrollHelper;
import org.telegram.ui.Components.RecyclerListView;
import org.telegram.ui.Components.ReportAlert;
import org.telegram.ui.Components.SearchCounterView;
import org.telegram.ui.Components.ShareAlert;
import org.telegram.ui.Components.SizeNotifierFrameLayout;
import org.telegram.ui.Components.StickersAlert;
import org.telegram.ui.Components.TextSelectionHint;
import org.telegram.ui.Components.TextStyleSpan;
import org.telegram.ui.Components.ThemeEditorView;
import org.telegram.ui.Components.TranscribeButton;
import org.telegram.ui.Components.TranslateAlert;
import org.telegram.ui.Components.TrendingStickersAlert;
import org.telegram.ui.Components.TypefaceSpan;
import org.telegram.ui.Components.URLSpanBotCommand;
import org.telegram.ui.Components.URLSpanMono;
import org.telegram.ui.Components.URLSpanNoUnderline;
import org.telegram.ui.Components.URLSpanReplacement;
import org.telegram.ui.Components.URLSpanUserMention;
import org.telegram.ui.Components.UndoView;
import org.telegram.ui.Components.ViewHelper;
import org.telegram.ui.Components.voip.VoIPHelper;
import org.telegram.ui.ContentPreviewViewer;
import org.telegram.ui.Delegates.ChatActivityMemberRequestsDelegate;
import org.telegram.ui.DialogsActivity;
import org.telegram.ui.LocationActivity;
import org.telegram.ui.PhotoAlbumPickerActivity;
import org.telegram.ui.PhotoViewer;
import org.telegram.ui.PinchToZoomHelper;
/* loaded from: classes3.dex */
public class ChatActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate, DialogsActivity.DialogsActivityDelegate, LocationActivity.LocationActivityDelegate, ChatAttachAlertDocumentLayout.DocumentSelectActivityDelegate {
    public static Pattern privateMsgUrlPattern;
    public static Pattern publicMsgUrlPattern;
    public static Pattern voiceChatUrlPattern;
    private long activityResumeTime;
    private ActionBarMenuSubItem addContactItem;
    private TextView addToContactsButton;
    private boolean addToContactsButtonArchive;
    private TextView alertNameTextView;
    private TextView alertTextView;
    private FrameLayout alertView;
    private AnimatorSet alertViewAnimator;
    private float alertViewEnterProgress;
    private boolean allowContextBotPanel;
    public boolean allowExpandPreviewByClick;
    private boolean allowStickersPanel;
    boolean animateTo;
    private ClippingImageView animatingImageView;
    private Paint aspectPaint;
    private Path aspectPath;
    private AspectRatioFrameLayout aspectRatioFrameLayout;
    private ActionBarMenuItem attachItem;
    private String attachMenuBotStartCommand;
    private String attachMenuBotToOpen;
    private ActionBarMenuItem audioCallIconItem;
    private ChatAvatarContainer avatarContainer;
    private ChatActivity backToPreviousFragment;
    private ChatBigEmptyView bigEmptyView;
    private BluredView blurredView;
    public int blurredViewBottomOffset;
    public int blurredViewTopOffset;
    private MessageObject botButtons;
    private ArrayList<Object> botContextResults;
    private MessageObject botReplyButtons;
    private String botUser;
    private int botsCount;
    private BlurredFrameLayout bottomMessagesActionContainer;
    private FrameLayout bottomOverlay;
    private AnimatorSet bottomOverlayAnimation;
    private BlurredFrameLayout bottomOverlayChat;
    private UnreadCounterTextView bottomOverlayChatText;
    private ImageView bottomOverlayImage;
    private RadialProgressView bottomOverlayProgress;
    private TextView bottomOverlayText;
    private float bottomPanelTranslationY;
    private float bottomPanelTranslationYReverse;
    Bulletin.Delegate bulletinDelegate;
    private int canEditMessagesCount;
    private int canForwardMessagesCount;
    private int canSaveDocumentsCount;
    private int canSaveMusicCount;
    private boolean canShowPagedownButton;
    private Runnable cancelFixedPositionRunnable;
    private int cantDeleteMessagesCount;
    private int cantForwardMessagesCount;
    private int cantSaveMessagesCount;
    private ValueAnimator changeBoundAnimator;
    private ChatActivityDelegate chatActivityDelegate;
    private ChatActivityEnterTopView chatActivityEnterTopView;
    protected ChatActivityEnterView chatActivityEnterView;
    private boolean chatActivityEnterViewAnimateBeforeSending;
    private int chatActivityEnterViewAnimateFromTop;
    private ChatActivityAdapter chatAdapter;
    private ChatAttachAlert chatAttachAlert;
    private int chatEmojiViewPadding;
    private long chatEnterTime;
    protected TLRPC$ChatFull chatInfo;
    private TLRPC$ChatInvite chatInvite;
    private Runnable chatInviteRunnable;
    private long chatInviterId;
    private GridLayoutManagerFixed chatLayoutManager;
    private long chatLeaveTime;
    private ChatListItemAnimator chatListItemAnimator;
    private RecyclerListView chatListView;
    private float chatListViewPaddingTop;
    private int chatListViewPaddingVisibleOffset;
    private int chatMode;
    private ChatNotificationsPopupWrapper chatNotificationsPopupWrapper;
    private RecyclerAnimationScrollHelper chatScrollHelper;
    private ChatThemeBottomSheet chatThemeBottomSheet;
    private boolean chatWasReset;
    private TextView chatWithAdminTextView;
    private Runnable checkPaddingsRunnable;
    private boolean checkTextureViewPosition;
    private ChecksHintView checksHintView;
    private ActionBarMenuSubItem clearHistoryItem;
    private boolean clearingHistory;
    private Dialog closeChatDialog;
    private ImageView closePinned;
    private ImageView closeReportSpam;
    private int commentLoadingGuid;
    private int commentLoadingMessageId;
    private int commentMessagesLoadingGuid;
    private int commentMessagesRequestId;
    private int commentRequestId;
    private int contentPaddingTop;
    private float contentPanTranslation;
    public SizeNotifierFrameLayout contentView;
    private boolean createGroupCall;
    private int createUnreadMessageAfterId;
    private boolean createUnreadMessageAfterIdLoading;
    protected TLRPC$Chat currentChat;
    protected TLRPC$EncryptedChat currentEncryptedChat;
    private boolean currentFloatingDateOnScreen;
    private boolean currentFloatingTopIsNotMessage;
    private String currentPicturePath;
    private int currentPinnedMessageId;
    protected TLRPC$User currentUser;
    private Runnable delayedReadRunnable;
    int dialogFilterId;
    int dialogFolderId;
    private long dialog_id;
    private Long dialog_id_Long;
    private int distanceToPeer;
    private ChatMessageCell drawLaterRoundProgressCell;
    public float drawingChatLisViewYoffset;
    private ChatMessageCell dummyMessageCell;
    private AnimatorSet editButtonAnimation;
    private int editTextEnd;
    private ActionBarMenuItem editTextItem;
    private int editTextStart;
    private MessageObject editingMessageObject;
    private int editingMessageObjectReqId;
    private EmojiAnimationsOverlay emojiAnimationsOverlay;
    private View emojiButtonRed;
    private TextView emptyView;
    private FrameLayout emptyViewContainer;
    private FireworksOverlay fireworksOverlay;
    private boolean firstUnreadSent;
    private int first_unread_id;
    private boolean fixPaddingsInLayout;
    private AnimatorSet floatingDateAnimation;
    private ChatActionCell floatingDateView;
    private float floatingDateViewOffset;
    private boolean forceHistoryEmpty;
    private int forceNextPinnedMessageId;
    private boolean forceScrollToFirst;
    private boolean forceScrollToTop;
    private TextView forwardButton;
    private AnimatorSet forwardButtonAnimation;
    private HintView forwardHintView;
    private MessageObject forwardingMessage;
    private MessageObject.GroupedMessages forwardingMessageGroup;
    private ForwardingMessagesParams forwardingMessages;
    ForwardingPreviewView forwardingPreviewView;
    private ArrayList<CharSequence> foundUrls;
    private TLRPC$WebPage foundWebPage;
    private FragmentContextView fragmentContextView;
    private FragmentContextView fragmentLocationContextView;
    public boolean fragmentOpened;
    private AnimatorSet fragmentTransition;
    private boolean fromPullingDownTransition;
    private HintView fwdRestrictedBottomHint;
    private HintView fwdRestrictedTopHint;
    private HintView gifHintTextView;
    private boolean globalIgnoreLayout;
    private ChatGreetingsView greetingsViewContainer;
    private ChatObject.Call groupCall;
    private boolean hasAllMentionsLocal;
    private boolean hasBotsCommands;
    private boolean hasUnfavedSelected;
    private ActionBarMenuItem headerItem;
    private Runnable hideAlertViewRunnable;
    private boolean hideForwardEndReached;
    private MessageObject hintMessageObject;
    private int hintMessageType;
    private boolean ignoreAttachOnPause;
    private ChatActionCell infoTopView;
    private Animator infoTopViewAnimator;
    private long inlineReturn;
    private InstantCameraView instantCameraView;
    private boolean invalidateChatListViewTopPadding;
    private boolean invalidateMessagesVisiblePart;
    private boolean isComments;
    private boolean isFullyVisible;
    private boolean isPauseOnThemePreview;
    private boolean lastCallCheckFromServer;
    private float lastTouchY;
    private int linkSearchRequestId;
    private boolean livestream;
    private int loadedPinnedMessagesCount;
    private boolean loading;
    private boolean loadingForward;
    private boolean loadingFromOldPosition;
    private boolean loadingPinnedMessagesList;
    private int loadsCount;
    private boolean locationAlertShown;
    private boolean maybeStartTrackingSlidingView;
    private HintView mediaBanTooltip;
    public MentionsContainerView mentionContainer;
    private AnimatorSet mentionListAnimation;
    private FrameLayout mentiondownButton;
    private ValueAnimator mentiondownButtonAnimation;
    private SimpleTextView mentiondownButtonCounter;
    private ImageView mentiondownButtonImage;
    private float mentionsButtonEnterProgress;
    private RecyclerListView.OnItemClickListener mentionsOnItemClickListener;
    private ActionBarMenuSubItem menuDeleteItem;
    private long mergeDialogId;
    private Animator messageEditTextAnimator;
    public MessageEnterTransitionContainer messageEnterTransitionContainer;
    private MessagesSearchAdapter messagesSearchAdapter;
    private RecyclerListView messagesSearchListView;
    private AnimatorSet messagesSearchListViewAnimation;
    private ActionBarMenuSubItem muteItem;
    private View muteItemGap;
    private MessageObject needAnimateToMessage;
    private boolean needSelectFromMessageId;
    private int newMentionsCount;
    private int newUnreadMessageCount;
    private boolean nextScrollForce;
    private int nextScrollForcePinnedMessageId;
    private int nextScrollFromMessageId;
    private int nextScrollLoadIndex;
    private boolean nextScrollSelect;
    private int nextScrollToMessageId;
    private HintView noSoundHintView;
    private Runnable onChatMessagesLoaded;
    public Runnable onThemeChange;
    public boolean openAnimationEnded;
    private long openAnimationStartTime;
    private boolean openImport;
    protected boolean openKeyboardOnAttachMenuClose;
    private boolean openSearchKeyboard;
    private View overlayView;
    private FrameLayout pagedownButton;
    private ValueAnimator pagedownButtonAnimation;
    private CounterView pagedownButtonCounter;
    private float pagedownButtonEnterProgress;
    private ImageView pagedownButtonImage;
    private boolean pagedownButtonShowedByScroll;
    private boolean pausedOnLastMessage;
    private String pendingLinkSearchString;
    private ChatActivityMemberRequestsDelegate pendingRequestsDelegate;
    private int pinBullerinTag;
    private Bulletin pinBulletin;
    private PinchToZoomHelper pinchToZoomHelper;
    private NumberTextView pinnedCounterTextView;
    private int pinnedCounterTextViewX;
    private boolean pinnedEndReached;
    private int pinnedImageCacheType;
    private TLRPC$PhotoSize pinnedImageLocation;
    private TLObject pinnedImageLocationObject;
    private int pinnedImageSize;
    private TLRPC$PhotoSize pinnedImageThumbLocation;
    private PinnedLineView pinnedLineView;
    private AnimatorSet pinnedListAnimator;
    private ImageView pinnedListButton;
    private float pinnedMessageEnterOffset;
    private BlurredFrameLayout pinnedMessageView;
    private AnimatorSet pinnedMessageViewAnimator;
    private RadialProgressView pinnedProgress;
    private boolean pinnedProgressIsShowing;
    private ChatMessageCell pollHintCell;
    private HintView pollHintView;
    private int pollHintX;
    private int pollHintY;
    private boolean postponedScrollIsCanceled;
    private int postponedScrollMessageId;
    private int postponedScrollMinMessageId;
    private int postponedScrollToLastMessageQueryIndex;
    private TLRPC$Document preloadedGreetingsSticker;
    private boolean premiumInvoiceBot;
    private RadialProgressView progressBar;
    private AlertDialog progressDialog;
    private FrameLayout progressView;
    private View progressView2;
    private float pullingBottomOffset;
    private float pullingDownAnimateProgress;
    private ChatActivity pullingDownAnimateToActivity;
    private Animator pullingDownBackAnimator;
    private ChatPullingDownDrawable pullingDownDrawable;
    private float pullingDownOffset;
    private ValueAnimator reactionsMentionButtonAnimation;
    private float reactionsMentionButtonEnterProgress;
    private int reactionsMentionCount;
    private FrameLayout reactionsMentiondownButton;
    private CounterView reactionsMentiondownButtonCounter;
    private ImageView reactionsMentiondownButtonImage;
    private TextView replyButton;
    private AnimatorSet replyButtonAnimation;
    private ImageView replyCloseImageView;
    private ImageView replyIconImageView;
    private int replyImageCacheType;
    private TLRPC$PhotoSize replyImageLocation;
    private TLObject replyImageLocationObject;
    private int replyImageSize;
    private TLRPC$PhotoSize replyImageThumbLocation;
    private BackupImageView replyImageView;
    private View replyLineView;
    private int replyMaxReadId;
    private MessageObject replyMessageHeaderObject;
    private SimpleTextView replyNameTextView;
    private SimpleTextView replyObjectHintTextView;
    private SimpleTextView replyObjectTextView;
    private TLRPC$Chat replyOriginalChat;
    private int replyOriginalMessageId;
    private MessageObject replyingMessageObject;
    private TextView reportSpamButton;
    private AnimatorSet reportSpamViewAnimator;
    private int returnToLoadIndex;
    private int returnToMessageId;
    private AnimatorSet runningAnimation;
    private TLRPC$TL_messages_discussionMessage savedDiscussionMessage;
    private TLRPC$messages_Messages savedHistory;
    private boolean savedNoDiscussion;
    private boolean savedNoHistory;
    private HintView scheduledOrNoSoundHint;
    private AnimatorSet scrimAnimatorSet;
    private Paint scrimPaint;
    public ActionBarPopupWindow scrimPopupWindow;
    private ActionBarMenuSubItem[] scrimPopupWindowItems;
    private int scrimPopupX;
    private int scrimPopupY;
    private View scrimView;
    private ValueAnimator scrimViewAlphaAnimator;
    private String scrimViewReaction;
    private int scrollAnimationIndex;
    private boolean scrollByTouch;
    private int scrollCallbackAnimationIndex;
    private MessageObject scrollToMessage;
    private boolean scrollToThreadMessage;
    private boolean scrollToTopOnResume;
    private boolean scrollToTopUnReadOnResume;
    private boolean scrollToVideo;
    private boolean scrollingChatListView;
    private boolean scrollingFloatingDate;
    private HintView searchAsListHint;
    private boolean searchAsListHintShown;
    private View searchAsListTogglerView;
    private ImageView searchCalendarButton;
    private BlurredFrameLayout searchContainer;
    private SearchCounterView searchCountText;
    private ImageView searchDownButton;
    private ValueAnimator searchExpandAnimator;
    private float searchExpandProgress;
    private ActionBarMenuItem searchIconItem;
    private ActionBarMenuItem searchItem;
    private boolean searchItemVisible;
    private ImageView searchUpButton;
    private ImageView searchUserButton;
    private TLRPC$Chat searchingChatMessages;
    private boolean searchingForUser;
    private TLRPC$User searchingUserMessages;
    private NumberTextView selectedMessagesCountTextView;
    private MessageObject selectedObject;
    private MessageObject.GroupedMessages selectedObjectGroup;
    private MessageObject selectedObjectToEditCaption;
    private TLRPC$TL_channels_sendAsPeers sendAsPeersObj;
    private boolean setPinnedTextTranslationX;
    private boolean showAudioCallAsIcon;
    private boolean showCloseChatDialogLater;
    private boolean showPinBulletin;
    private boolean showScrollToMessageError;
    private boolean showSearchAsIcon;
    private boolean showTapForForwardingOptionsHit;
    private ChatMessageCell slidingView;
    private HintView slowModeHint;
    private boolean sponsoredMessagesAdded;
    private int startFromVideoMessageId;
    private int startLoadFromDate;
    private int startLoadFromMessageId;
    private String startVideoEdit;
    private boolean startedTrackingSlidingView;
    private StickersAdapter stickersAdapter;
    private RecyclerListView stickersListView;
    private RecyclerListView.OnItemClickListener stickersOnItemClickListener;
    private FrameLayout stickersPanel;
    private ImageView stickersPanelArrow;
    private Runnable tapForForwardingOptionsHitRunnable;
    private TextSelectionHelper.ChatListTextSelectionHelper textSelectionHelper;
    private TextSelectionHint textSelectionHint;
    private boolean textSelectionHintWasShowed;
    public ThemeDelegate themeDelegate;
    private int threadMaxInboxReadId;
    private int threadMaxOutboxReadId;
    private boolean threadMessageAdded;
    private int threadMessageId;
    private MessageObject threadMessageObject;
    private ArrayList<MessageObject> threadMessageObjects;
    private int threadUnreadMessagesCount;
    private View timeItem2;
    private HintView timerHintView;
    private boolean toPullingDownTransition;
    private BlurredFrameLayout topChatPanelView;
    private float topChatPanelViewOffset;
    private UndoView topUndoView;
    private float topViewOffset;
    private int topViewWasVisible;
    private int totalPinnedMessagesCount;
    private int transitionAnimationIndex;
    private UndoView undoView;
    private MessageObject unreadMessageObject;
    private Runnable unregisterFlagSecureNoforwards;
    private Runnable unregisterFlagSecurePasscode;
    private Runnable unselectRunnable;
    Runnable updatePinnedProgressRunnable;
    Runnable updateReactionRunnable;
    private boolean userBlocked;
    protected TLRPC$UserFull userInfo;
    private FrameLayout videoPlayerContainer;
    private TextureView videoTextureView;
    private String voiceChatHash;
    private HintView voiceHintTextView;
    private Runnable waitingForCharaterEnterRunnable;
    private boolean waitingForReplyMessageLoad;
    private boolean waitingForSendingMessageLoad;
    private boolean wasManualScroll;
    private boolean wasPaused;
    private static final int[] allowedNotificationsDuringChatListAnimations = {NotificationCenter.messagesRead, NotificationCenter.threadMessagesRead, NotificationCenter.commentsRead, NotificationCenter.messagesReadEncrypted, NotificationCenter.messagesReadContent, NotificationCenter.didLoadPinnedMessages, NotificationCenter.newDraftReceived, NotificationCenter.updateMentionsCount, NotificationCenter.didUpdateConnectionState, NotificationCenter.updateInterfaces, NotificationCenter.updateDefaultSendAsPeer, NotificationCenter.closeChats, NotificationCenter.chatInfoCantLoad, NotificationCenter.userInfoDidLoad, NotificationCenter.pinnedInfoDidLoad, NotificationCenter.didSetNewWallpapper, NotificationCenter.didApplyNewTheme};
    private static boolean replacingChatActivity = false;
    private ArrayList<ChatMessageCell> chatMessageCellsCache = new ArrayList<>();
    private HashMap<MessageObject, Boolean> alreadyPlayedStickers = new HashMap<>();
    private ArrayList<View> actionModeViews = new ArrayList<>();
    private BackupImageView[] pinnedMessageImageView = new BackupImageView[2];
    private TrackingWidthSimpleTextView[] pinnedNameTextView = new TrackingWidthSimpleTextView[2];
    private SimpleTextView[] pinnedMessageTextView = new SimpleTextView[2];
    private PinnedMessageButton[] pinnedMessageButton = new PinnedMessageButton[2];
    private AnimatorSet[] pinnedNextAnimation = new AnimatorSet[2];
    private boolean pinnedMessageButtonShown = false;
    private int hideDateDelay = 500;
    private int scheduledMessagesCount = -1;
    private int reportType = -1;
    private boolean threadMessageVisible = true;
    private SparseArray<MessageObject> pendingSendMessagesDict = new SparseArray<>();
    private ArrayList<MessageObject> pendingSendMessages = new ArrayList<>();
    public ArrayList<MessageObject> animatingMessageObjects = new ArrayList<>();
    private HashMap<TLRPC$Document, Integer> animatingDocuments = new HashMap<>();
    private int scrollToPositionOnRecreate = -1;
    private int scrollToOffsetOnRecreate = 0;
    private ArrayList<MessageObject> pollsToCheck = new ArrayList<>(10);
    private ArrayList<MessageObject> reactionsToCheck = new ArrayList<>(10);
    private ArrayList<Integer> pinnedMessageIds = new ArrayList<>();
    private HashMap<Integer, MessageObject> pinnedMessageObjects = new HashMap<>();
    private SparseArray<Boolean> loadingPinnedMessages = new SparseArray<>();
    private int[] currentPinnedMessageIndex = new int[1];
    private int lastStableId = 10;
    private boolean allowContextBotPanelSecond = true;
    private int runningAnimationIndex = -1;
    private boolean paused = true;
    boolean firstOpen = true;
    private int lastLoadIndex = 1;
    private SparseArray<MessageObject>[] selectedMessagesIds = {new SparseArray<>(), new SparseArray<>()};
    private SparseArray<MessageObject>[] selectedMessagesCanCopyIds = {new SparseArray<>(), new SparseArray<>()};
    private SparseArray<MessageObject>[] selectedMessagesCanStarIds = {new SparseArray<>(), new SparseArray<>()};
    private ArrayList<Integer> waitingForLoad = new ArrayList<>();
    private boolean needRemovePreviousSameChatActivity = true;
    private int prevSetUnreadCount = Integer.MIN_VALUE;
    private ArrayList<ChatMessageCell> animateSendingViews = new ArrayList<>();
    private SparseArray<MessageObject>[] messagesDict = {new SparseArray<>(), new SparseArray<>()};
    private SparseArray<MessageObject> repliesMessagesDict = new SparseArray<>();
    private SparseArray<ArrayList<Integer>> replyMessageOwners = new SparseArray<>();
    private HashMap<String, ArrayList<MessageObject>> messagesByDays = new HashMap<>();
    protected ArrayList<MessageObject> messages = new ArrayList<>();
    private SparseArray<MessageObject> waitingForReplies = new SparseArray<>();
    private LongSparseArray<ArrayList<MessageObject>> polls = new LongSparseArray<>();
    private LongSparseArray<MessageObject.GroupedMessages> groupedMessagesMap = new LongSparseArray<>();
    private int[] maxMessageId = {Integer.MAX_VALUE, Integer.MAX_VALUE};
    private int[] minMessageId = {Integer.MIN_VALUE, Integer.MIN_VALUE};
    private int[] maxDate = {Integer.MIN_VALUE, Integer.MIN_VALUE};
    private int[] minDate = new int[2];
    private boolean[] endReached = new boolean[2];
    private boolean[] cacheEndReached = new boolean[2];
    private boolean[] forwardEndReached = {true, true};
    private boolean firstLoading = true;
    private int last_message_id = 0;
    private int startLoadFromMessageOffset = Integer.MAX_VALUE;
    private int startFromVideoTimestamp = -1;
    private boolean first = true;
    private int highlightMessageId = Integer.MAX_VALUE;
    private int scrollToMessagePosition = -10000;
    private LongSparseArray<TLRPC$BotInfo> botInfo = new LongSparseArray<>();
    private Runnable destroyTextureViewRunnable = new ChatActivity$$ExternalSyntheticLambda128(this);
    private Paint actionBarBackgroundPaint = new Paint(1);
    private float scrimPaintAlpha = 0.0f;
    private float scrimViewAlpha = 1.0f;
    private boolean scrimPopupWindowHideDimOnDismiss = true;
    private Runnable updateDeleteItemRunnable = new AnonymousClass1();
    private boolean swipeBackEnabled = true;
    private Runnable fragmentTransitionRunnable = new AnonymousClass2();
    private final DialogInterface.OnCancelListener postponedScrollCancelListener = new ChatActivity$$ExternalSyntheticLambda19(this);
    private NotificationCenter.PostponeNotificationCallback postponeNotificationsWhileLoadingCallback = new AnonymousClass3();
    private int fixedKeyboardHeight = -1;
    private PhotoViewer.PhotoViewerProvider photoViewerProvider = new AnonymousClass4();
    private PhotoViewer.PhotoViewerProvider botContextProvider = new AnonymousClass5();
    RecyclerListView.OnItemLongClickListenerExtended onItemLongClickListener = new AnonymousClass6();
    RecyclerListView.OnItemClickListenerExtended onItemClickListener = new AnonymousClass8();
    private final ChatScrollCallback chatScrollHelperCallback = new ChatScrollCallback();
    private final Runnable showScheduledOrNoSoundRunnable = new ChatActivity$$ExternalSyntheticLambda130(this);

    /* loaded from: classes3.dex */
    public interface ChatActivityDelegate {

        /* renamed from: org.telegram.ui.ChatActivity$ChatActivityDelegate$-CC */
        /* loaded from: classes3.dex */
        public final /* synthetic */ class CC {
            public static void $default$onReport(ChatActivityDelegate chatActivityDelegate) {
            }

            public static void $default$onUnpin(ChatActivityDelegate chatActivityDelegate, boolean z, boolean z2) {
            }

            public static void $default$openReplyMessage(ChatActivityDelegate chatActivityDelegate, int i) {
            }

            public static void $default$openSearch(ChatActivityDelegate chatActivityDelegate, String str) {
            }
        }

        void onReport();

        void onUnpin(boolean z, boolean z2);

        void openReplyMessage(int i);

        void openSearch(String str);
    }

    public static /* synthetic */ boolean lambda$createView$23(View view, MotionEvent motionEvent) {
        return true;
    }

    public static /* synthetic */ boolean lambda$createView$24(View view, MotionEvent motionEvent) {
        return true;
    }

    public static /* synthetic */ boolean lambda$createView$56(View view, MotionEvent motionEvent) {
        return true;
    }

    public static /* synthetic */ void lambda$markSponsoredAsRead$246(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
    }

    public static /* synthetic */ boolean lambda$showChatThemeBottomSheet$249(MotionEvent motionEvent) {
        return true;
    }

    @Override // org.telegram.ui.Components.ChatAttachAlertDocumentLayout.DocumentSelectActivityDelegate
    public /* synthetic */ void startMusicSelectActivity() {
        ChatAttachAlertDocumentLayout.DocumentSelectActivityDelegate.CC.$default$startMusicSelectActivity(this);
    }

    static /* synthetic */ float access$12116(ChatActivity chatActivity, float f) {
        float f2 = chatActivity.pullingDownOffset + f;
        chatActivity.pullingDownOffset = f2;
        return f2;
    }

    static /* synthetic */ int access$23910(ChatActivity chatActivity) {
        int i = chatActivity.newMentionsCount;
        chatActivity.newMentionsCount = i - 1;
        return i;
    }

    static /* synthetic */ int access$26808(ChatActivity chatActivity) {
        int i = chatActivity.scheduledMessagesCount;
        chatActivity.scheduledMessagesCount = i + 1;
        return i;
    }

    static /* synthetic */ int access$26812(ChatActivity chatActivity, int i) {
        int i2 = chatActivity.scheduledMessagesCount + i;
        chatActivity.scheduledMessagesCount = i2;
        return i2;
    }

    static /* synthetic */ int access$31704(ChatActivity chatActivity) {
        int i = chatActivity.pinBullerinTag + 1;
        chatActivity.pinBullerinTag = i;
        return i;
    }

    /* renamed from: org.telegram.ui.ChatActivity$1 */
    /* loaded from: classes3.dex */
    public class AnonymousClass1 implements Runnable {
        AnonymousClass1() {
            ChatActivity.this = r1;
        }

        @Override // java.lang.Runnable
        public void run() {
            String str;
            if (ChatActivity.this.selectedObject == null || ChatActivity.this.menuDeleteItem == null) {
                return;
            }
            int max = Math.max(0, ChatActivity.this.selectedObject.messageOwner.ttl_period - (ChatActivity.this.getConnectionsManager().getCurrentTime() - ChatActivity.this.selectedObject.messageOwner.date));
            if (max < 86400) {
                str = AndroidUtilities.formatDuration(max, false);
            } else {
                str = LocaleController.formatPluralString("Days", Math.round(max / 86400.0f), new Object[0]);
            }
            ChatActivity.this.menuDeleteItem.setSubtext(LocaleController.formatString("AutoDeleteIn", 2131624565, str));
            AndroidUtilities.runOnUIThread(ChatActivity.this.updateDeleteItemRunnable, 1000L);
        }
    }

    /* renamed from: org.telegram.ui.ChatActivity$2 */
    /* loaded from: classes3.dex */
    public class AnonymousClass2 implements Runnable {
        AnonymousClass2() {
            ChatActivity.this = r1;
        }

        @Override // java.lang.Runnable
        public void run() {
            if (ChatActivity.this.fragmentTransition == null || ChatActivity.this.fragmentTransition.isRunning()) {
                return;
            }
            ChatActivity.this.fragmentTransition.start();
        }
    }

    public /* synthetic */ void lambda$new$1(DialogInterface dialogInterface) {
        this.postponedScrollIsCanceled = true;
        this.postponedScrollMessageId = 0;
        this.nextScrollToMessageId = 0;
        this.forceNextPinnedMessageId = 0;
        invalidateMessagesVisiblePart();
        showPinnedProgress(false);
    }

    /* renamed from: org.telegram.ui.ChatActivity$3 */
    /* loaded from: classes3.dex */
    public class AnonymousClass3 implements NotificationCenter.PostponeNotificationCallback {
        AnonymousClass3() {
            ChatActivity.this = r1;
        }

        @Override // org.telegram.messenger.NotificationCenter.PostponeNotificationCallback
        public boolean needPostpone(int i, int i2, Object[] objArr) {
            if (i == NotificationCenter.didReceiveNewMessages) {
                long longValue = ((Long) objArr[0]).longValue();
                if (ChatActivity.this.firstLoading && longValue == ChatActivity.this.dialog_id) {
                    return true;
                }
            }
            return false;
        }
    }

    public void deleteHistory(int i, int i2, boolean z) {
        this.chatAdapter.frozenMessages.clear();
        for (int i3 = 0; i3 < this.messages.size(); i3++) {
            MessageObject messageObject = this.messages.get(i3);
            int i4 = messageObject.messageOwner.date;
            if (i4 <= i || i4 >= i2) {
                this.chatAdapter.frozenMessages.add(messageObject);
            }
        }
        RecyclerListView recyclerListView = this.chatListView;
        if (recyclerListView != null) {
            recyclerListView.setEmptyView(null);
        }
        if (this.chatAdapter.frozenMessages.isEmpty()) {
            showProgressView(true);
        }
        ChatActivityAdapter chatActivityAdapter = this.chatAdapter;
        chatActivityAdapter.isFrozen = true;
        chatActivityAdapter.notifyDataSetChanged(true);
        getUndoView().showWithAction(this.dialog_id, 81, new ChatActivity$$ExternalSyntheticLambda166(this, i, i2, z), new ChatActivity$$ExternalSyntheticLambda132(this));
    }

    public /* synthetic */ void lambda$deleteHistory$3(int i, int i2, boolean z) {
        getMessagesController().deleteMessagesRange(this.dialog_id, ChatObject.isChannel(this.currentChat) ? this.dialog_id : 0L, i, i2, z, new ChatActivity$$ExternalSyntheticLambda137(this));
    }

    public /* synthetic */ void lambda$deleteHistory$2() {
        this.chatAdapter.frozenMessages.clear();
        ChatActivityAdapter chatActivityAdapter = this.chatAdapter;
        chatActivityAdapter.isFrozen = false;
        chatActivityAdapter.notifyDataSetChanged(true);
        showProgressView(false);
    }

    public /* synthetic */ void lambda$deleteHistory$4() {
        this.chatAdapter.frozenMessages.clear();
        ChatActivityAdapter chatActivityAdapter = this.chatAdapter;
        chatActivityAdapter.isFrozen = false;
        chatActivityAdapter.notifyDataSetChanged(true);
        showProgressView(false);
    }

    public void showHeaderItem(boolean z) {
        if (z) {
            if (this.chatActivityEnterView.hasText() && TextUtils.isEmpty(this.chatActivityEnterView.getSlowModeTimer())) {
                ActionBarMenuItem actionBarMenuItem = this.attachItem;
                if (actionBarMenuItem != null) {
                    actionBarMenuItem.setVisibility(0);
                }
                ActionBarMenuItem actionBarMenuItem2 = this.headerItem;
                if (actionBarMenuItem2 == null) {
                    return;
                }
                actionBarMenuItem2.setVisibility(8);
                return;
            }
            ActionBarMenuItem actionBarMenuItem3 = this.attachItem;
            if (actionBarMenuItem3 != null) {
                actionBarMenuItem3.setVisibility(8);
            }
            ActionBarMenuItem actionBarMenuItem4 = this.headerItem;
            if (actionBarMenuItem4 == null) {
                return;
            }
            actionBarMenuItem4.setVisibility(0);
            return;
        }
        ActionBarMenuItem actionBarMenuItem5 = this.attachItem;
        if (actionBarMenuItem5 != null) {
            actionBarMenuItem5.setVisibility(8);
        }
        ActionBarMenuItem actionBarMenuItem6 = this.headerItem;
        if (actionBarMenuItem6 == null) {
            return;
        }
        actionBarMenuItem6.setVisibility(8);
    }

    /* loaded from: classes3.dex */
    public class UnreadCounterTextView extends View {
        boolean animatedFromBottom;
        private int circleWidth;
        int counterColor;
        private String currentCounterString;
        CharSequence lastText;
        private int layoutTextWidth;
        int panelBackgroundColor;
        ValueAnimator replaceAnimator;
        private int rippleColor;
        Drawable selectableBackground;
        int textColor;
        private StaticLayout textLayout;
        private StaticLayout textLayoutOut;
        private int textWidth;
        private TextPaint textPaint = new TextPaint(1);
        private Paint paint = new Paint(1);
        private RectF rect = new RectF();
        private TextPaint layoutPaint = new TextPaint(1);
        float replaceProgress = 1.0f;

        /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
        public UnreadCounterTextView(Context context) {
            super(context);
            ChatActivity.this = r2;
            this.textPaint.setTextSize(AndroidUtilities.dp(13.0f));
            this.textPaint.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
            this.layoutPaint.setTextSize(AndroidUtilities.dp(15.0f));
            this.layoutPaint.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
        }

        public void setText(CharSequence charSequence, boolean z) {
            if (this.lastText == charSequence) {
                return;
            }
            this.lastText = charSequence;
            this.animatedFromBottom = z;
            this.textLayoutOut = this.textLayout;
            this.layoutTextWidth = (int) Math.ceil(this.layoutPaint.measureText(charSequence, 0, charSequence.length()));
            this.textLayout = new StaticLayout(charSequence, this.layoutPaint, this.layoutTextWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, true);
            setContentDescription(charSequence);
            invalidate();
            if (this.textLayoutOut == null) {
                return;
            }
            ValueAnimator valueAnimator = this.replaceAnimator;
            if (valueAnimator != null) {
                valueAnimator.cancel();
            }
            this.replaceProgress = 0.0f;
            ValueAnimator ofFloat = ValueAnimator.ofFloat(0.0f, 1.0f);
            this.replaceAnimator = ofFloat;
            ofFloat.addUpdateListener(new ChatActivity$UnreadCounterTextView$$ExternalSyntheticLambda0(this));
            this.replaceAnimator.setDuration(150L);
            this.replaceAnimator.start();
        }

        public /* synthetic */ void lambda$setText$0(ValueAnimator valueAnimator) {
            this.replaceProgress = ((Float) valueAnimator.getAnimatedValue()).floatValue();
            invalidate();
        }

        public void setText(CharSequence charSequence) {
            this.layoutTextWidth = (int) Math.ceil(this.layoutPaint.measureText(charSequence, 0, charSequence.length()));
            this.textLayout = new StaticLayout(charSequence, this.layoutPaint, this.layoutTextWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, true);
            setContentDescription(charSequence);
            invalidate();
        }

        @Override // android.view.View
        protected void drawableStateChanged() {
            super.drawableStateChanged();
            Drawable drawable = this.selectableBackground;
            if (drawable != null) {
                drawable.setState(getDrawableState());
            }
        }

        @Override // android.view.View
        public boolean verifyDrawable(Drawable drawable) {
            Drawable drawable2 = this.selectableBackground;
            if (drawable2 != null) {
                return drawable2 == drawable || super.verifyDrawable(drawable);
            }
            return super.verifyDrawable(drawable);
        }

        @Override // android.view.View
        public void jumpDrawablesToCurrentState() {
            super.jumpDrawablesToCurrentState();
            Drawable drawable = this.selectableBackground;
            if (drawable != null) {
                drawable.jumpToCurrentState();
            }
        }

        @Override // android.view.View
        public boolean onTouchEvent(MotionEvent motionEvent) {
            StaticLayout staticLayout;
            int i;
            if (motionEvent.getAction() == 0 && (staticLayout = this.textLayout) != null) {
                int ceil = (int) Math.ceil(staticLayout.getLineWidth(0));
                if (getMeasuredWidth() != ((View) getParent()).getMeasuredWidth()) {
                    if (ChatActivity.this.botInfo != null) {
                        i = getMeasuredWidth();
                    } else {
                        int i2 = this.circleWidth;
                        i = ceil + (i2 > 0 ? i2 + AndroidUtilities.dp(8.0f) : 0) + AndroidUtilities.dp(48.0f);
                    }
                } else {
                    i = getMeasuredWidth() - AndroidUtilities.dp(96.0f);
                }
                int measuredWidth = (getMeasuredWidth() - i) / 2;
                float f = i / 2.0f;
                this.rect.set(measuredWidth, (getMeasuredHeight() / 2.0f) - f, measuredWidth + i, (getMeasuredHeight() / 2.0f) + f);
                if (!this.rect.contains(motionEvent.getX(), motionEvent.getY())) {
                    setPressed(false);
                    return false;
                }
            }
            return super.onTouchEvent(motionEvent);
        }

        @Override // android.view.View
        protected void onDraw(Canvas canvas) {
            int measuredWidth;
            StaticLayout staticLayout = this.textLayout;
            int themedColor = ChatActivity.this.getThemedColor(isEnabled() ? "chat_fieldOverlayText" : "windowBackgroundWhiteGrayText");
            if (this.textColor != themedColor) {
                TextPaint textPaint = this.layoutPaint;
                this.textColor = themedColor;
                textPaint.setColor(themedColor);
            }
            int themedColor2 = ChatActivity.this.getThemedColor("chat_messagePanelBackground");
            if (this.panelBackgroundColor != themedColor2) {
                TextPaint textPaint2 = this.textPaint;
                this.panelBackgroundColor = themedColor2;
                textPaint2.setColor(themedColor2);
            }
            int themedColor3 = ChatActivity.this.getThemedColor("chat_goDownButtonCounterBackground");
            if (this.counterColor != themedColor3) {
                Paint paint = this.paint;
                this.counterColor = themedColor3;
                paint.setColor(themedColor3);
            }
            if (getParent() != null) {
                int measuredWidth2 = getMeasuredWidth();
                int measuredWidth3 = (getMeasuredWidth() - measuredWidth2) / 2;
                if (this.rippleColor != ChatActivity.this.getThemedColor("chat_fieldOverlayText") || this.selectableBackground == null) {
                    int dp = AndroidUtilities.dp(60.0f);
                    int themedColor4 = ChatActivity.this.getThemedColor("chat_fieldOverlayText");
                    this.rippleColor = themedColor4;
                    Drawable createSimpleSelectorCircleDrawable = Theme.createSimpleSelectorCircleDrawable(dp, 0, ColorUtils.setAlphaComponent(themedColor4, 26));
                    this.selectableBackground = createSimpleSelectorCircleDrawable;
                    createSimpleSelectorCircleDrawable.setCallback(this);
                }
                int dp2 = getLeft() + measuredWidth3 <= 0 ? measuredWidth3 - AndroidUtilities.dp(20.0f) : measuredWidth3;
                int i = measuredWidth3 + measuredWidth2;
                if (i > ((View) getParent()).getMeasuredWidth()) {
                    i += AndroidUtilities.dp(20.0f);
                }
                int i2 = measuredWidth2 / 2;
                this.selectableBackground.setBounds(dp2, (getMeasuredHeight() / 2) - i2, i, (getMeasuredHeight() / 2) + i2);
                this.selectableBackground.draw(canvas);
            }
            if (this.textLayout != null) {
                canvas.save();
                if (this.replaceProgress != 1.0f && this.textLayoutOut != null) {
                    int alpha = this.layoutPaint.getAlpha();
                    canvas.save();
                    canvas.translate(((getMeasuredWidth() - this.textLayoutOut.getWidth()) / 2) - (this.circleWidth / 2), (getMeasuredHeight() - this.textLayout.getHeight()) / 2);
                    float f = -1.0f;
                    canvas.translate(0.0f, (this.animatedFromBottom ? -1.0f : 1.0f) * AndroidUtilities.dp(18.0f) * this.replaceProgress);
                    float f2 = alpha;
                    this.layoutPaint.setAlpha((int) ((1.0f - this.replaceProgress) * f2));
                    this.textLayoutOut.draw(canvas);
                    canvas.restore();
                    canvas.save();
                    canvas.translate(((getMeasuredWidth() - this.layoutTextWidth) / 2) - (this.circleWidth / 2), (getMeasuredHeight() - this.textLayout.getHeight()) / 2);
                    if (this.animatedFromBottom) {
                        f = 1.0f;
                    }
                    canvas.translate(0.0f, f * AndroidUtilities.dp(18.0f) * (1.0f - this.replaceProgress));
                    this.layoutPaint.setAlpha((int) (f2 * this.replaceProgress));
                    this.textLayout.draw(canvas);
                    canvas.restore();
                    this.layoutPaint.setAlpha(alpha);
                } else {
                    canvas.translate(((getMeasuredWidth() - this.layoutTextWidth) / 2) - (this.circleWidth / 2), (getMeasuredHeight() - this.textLayout.getHeight()) / 2);
                    this.textLayout.draw(canvas);
                }
                canvas.restore();
            }
            if (this.currentCounterString == null || staticLayout == null) {
                return;
            }
            int ceil = (int) Math.ceil(staticLayout.getLineWidth(0));
            this.rect.set(((((getMeasuredWidth() - ceil) / 2) + ceil) - (this.circleWidth / 2)) + AndroidUtilities.dp(6.0f), (getMeasuredHeight() / 2) - AndroidUtilities.dp(10.0f), measuredWidth + this.circleWidth, (getMeasuredHeight() / 2) + AndroidUtilities.dp(10.0f));
            canvas.drawRoundRect(this.rect, AndroidUtilities.dp(10.0f), AndroidUtilities.dp(10.0f), this.paint);
            canvas.drawText(this.currentCounterString, this.rect.centerX() - (this.textWidth / 2.0f), this.rect.top + AndroidUtilities.dp(14.5f), this.textPaint);
        }
    }

    /* renamed from: org.telegram.ui.ChatActivity$4 */
    /* loaded from: classes3.dex */
    public class AnonymousClass4 extends PhotoViewer.EmptyPhotoViewerProvider {
        AnonymousClass4() {
            ChatActivity.this = r1;
        }

        @Override // org.telegram.ui.PhotoViewer.EmptyPhotoViewerProvider, org.telegram.ui.PhotoViewer.PhotoViewerProvider
        public PhotoViewer.PlaceProviderObject getPlaceForPhoto(MessageObject messageObject, TLRPC$FileLocation tLRPC$FileLocation, int i, boolean z) {
            return ChatActivity.this.getPlaceForPhoto(messageObject, tLRPC$FileLocation, z, false);
        }
    }

    /* renamed from: org.telegram.ui.ChatActivity$5 */
    /* loaded from: classes3.dex */
    public class AnonymousClass5 extends PhotoViewer.EmptyPhotoViewerProvider {
        AnonymousClass5() {
            ChatActivity.this = r1;
        }

        /* JADX WARN: Removed duplicated region for block: B:24:0x008f A[LOOP:0: B:11:0x0035->B:24:0x008f, LOOP_END] */
        /* JADX WARN: Removed duplicated region for block: B:27:0x0058 A[SYNTHETIC] */
        @Override // org.telegram.ui.PhotoViewer.EmptyPhotoViewerProvider, org.telegram.ui.PhotoViewer.PhotoViewerProvider
        /*
            Code decompiled incorrectly, please refer to instructions dump.
        */
        public PhotoViewer.PlaceProviderObject getPlaceForPhoto(MessageObject messageObject, TLRPC$FileLocation tLRPC$FileLocation, int i, boolean z) {
            MentionsContainerView mentionsContainerView;
            ImageReceiver imageReceiver;
            if (i >= 0 && i < ChatActivity.this.botContextResults.size() && (mentionsContainerView = ChatActivity.this.mentionContainer) != null && mentionsContainerView.getListView() != null) {
                int childCount = ChatActivity.this.mentionContainer.getListView().getChildCount();
                Object obj = ChatActivity.this.botContextResults.get(i);
                int i2 = 0;
                for (int i3 = 0; i3 < childCount; i3++) {
                    View childAt = ChatActivity.this.mentionContainer.getListView().getChildAt(i3);
                    if (childAt instanceof ContextLinkCell) {
                        ContextLinkCell contextLinkCell = (ContextLinkCell) childAt;
                        if (contextLinkCell.getResult() == obj) {
                            imageReceiver = contextLinkCell.getPhotoImage();
                            if (imageReceiver == null) {
                                int[] iArr = new int[2];
                                childAt.getLocationInWindow(iArr);
                                PhotoViewer.PlaceProviderObject placeProviderObject = new PhotoViewer.PlaceProviderObject();
                                placeProviderObject.viewX = iArr[0];
                                int i4 = iArr[1];
                                if (Build.VERSION.SDK_INT < 21) {
                                    i2 = AndroidUtilities.statusBarHeight;
                                }
                                placeProviderObject.viewY = i4 - i2;
                                placeProviderObject.parentView = ChatActivity.this.mentionContainer.getListView();
                                placeProviderObject.imageReceiver = imageReceiver;
                                placeProviderObject.thumb = imageReceiver.getBitmapSafe();
                                placeProviderObject.radius = imageReceiver.getRoundRadius();
                                return placeProviderObject;
                            }
                        }
                    }
                    imageReceiver = null;
                    if (imageReceiver == null) {
                    }
                }
            }
            return null;
        }

        @Override // org.telegram.ui.PhotoViewer.EmptyPhotoViewerProvider, org.telegram.ui.PhotoViewer.PhotoViewerProvider
        public void sendButtonPressed(int i, VideoEditedInfo videoEditedInfo, boolean z, int i2, boolean z2) {
            if (i < 0 || i >= ChatActivity.this.botContextResults.size()) {
                return;
            }
            ChatActivity chatActivity = ChatActivity.this;
            chatActivity.lambda$createView$45((TLRPC$BotInlineResult) chatActivity.botContextResults.get(i), z, i2);
        }
    }

    /* renamed from: org.telegram.ui.ChatActivity$6 */
    /* loaded from: classes3.dex */
    public class AnonymousClass6 implements RecyclerListView.OnItemLongClickListenerExtended {
        @Override // org.telegram.ui.Components.RecyclerListView.OnItemLongClickListenerExtended
        public /* synthetic */ void onLongClickRelease() {
            RecyclerListView.OnItemLongClickListenerExtended.CC.$default$onLongClickRelease(this);
        }

        @Override // org.telegram.ui.Components.RecyclerListView.OnItemLongClickListenerExtended
        public /* synthetic */ void onMove(float f, float f2) {
            RecyclerListView.OnItemLongClickListenerExtended.CC.$default$onMove(this, f, f2);
        }

        AnonymousClass6() {
            ChatActivity.this = r1;
        }

        @Override // org.telegram.ui.Components.RecyclerListView.OnItemLongClickListenerExtended
        public boolean onItemClick(View view, int i, float f, float f2) {
            boolean z;
            boolean z2 = false;
            if (ChatActivity.this.textSelectionHelper.isTryingSelect() || ChatActivity.this.textSelectionHelper.isSelectionMode() || ((BaseFragment) ChatActivity.this).inPreviewMode) {
                return false;
            }
            ChatActivity.this.wasManualScroll = true;
            if (!((BaseFragment) ChatActivity.this).actionBar.isActionModeShowed() && (ChatActivity.this.reportType < 0 || ((view instanceof ChatActionCell) && (((ChatActionCell) view).getMessageObject().messageOwner.action instanceof TLRPC$TL_messageActionSetMessagesTTL)))) {
                z = ChatActivity.this.createMenu(view, false, true, f, f2);
            } else {
                if (view instanceof ChatMessageCell) {
                    z2 = !((ChatMessageCell) view).isInsideBackground(f, f2);
                }
                ChatActivity.this.processRowSelect(view, z2, f, f2);
                z = true;
            }
            if (!(view instanceof ChatMessageCell)) {
                return z;
            }
            ChatActivity.this.startMultiselect(i);
            return true;
        }
    }

    public void startMultiselect(int i) {
        int i2 = i - this.chatAdapter.messagesStartRow;
        if (i2 < 0 || i2 >= this.messages.size()) {
            return;
        }
        MessageObject messageObject = this.messages.get(i2);
        boolean z = this.selectedMessagesIds[0].get(messageObject.getId(), null) == null && this.selectedMessagesIds[1].get(messageObject.getId(), null) == null;
        SparseArray sparseArray = new SparseArray();
        for (int i3 = 0; i3 < this.selectedMessagesIds[0].size(); i3++) {
            sparseArray.put(this.selectedMessagesIds[0].keyAt(i3), this.selectedMessagesIds[0].valueAt(i3));
        }
        for (int i4 = 0; i4 < this.selectedMessagesIds[1].size(); i4++) {
            sparseArray.put(this.selectedMessagesIds[1].keyAt(i4), this.selectedMessagesIds[1].valueAt(i4));
        }
        this.chatListView.startMultiselect(i, false, new AnonymousClass7(z, sparseArray));
    }

    /* renamed from: org.telegram.ui.ChatActivity$7 */
    /* loaded from: classes3.dex */
    public class AnonymousClass7 implements RecyclerListView.onMultiSelectionChanged {
        boolean limitReached;
        final /* synthetic */ SparseArray val$alreadySelectedMessagesIds;
        final /* synthetic */ boolean val$unselect;

        AnonymousClass7(boolean z, SparseArray sparseArray) {
            ChatActivity.this = r1;
            this.val$unselect = z;
            this.val$alreadySelectedMessagesIds = sparseArray;
        }

        @Override // org.telegram.ui.Components.RecyclerListView.onMultiSelectionChanged
        public void onSelectionChanged(int i, boolean z, float f, float f2) {
            int i2 = i - ChatActivity.this.chatAdapter.messagesStartRow;
            if (this.val$unselect) {
                z = !z;
            }
            if (i2 < 0 || i2 >= ChatActivity.this.messages.size()) {
                return;
            }
            MessageObject messageObject = ChatActivity.this.messages.get(i2);
            if (z && (ChatActivity.this.selectedMessagesIds[0].indexOfKey(messageObject.getId()) >= 0 || ChatActivity.this.selectedMessagesIds[1].indexOfKey(messageObject.getId()) >= 0)) {
                return;
            }
            if ((!z && ChatActivity.this.selectedMessagesIds[0].indexOfKey(messageObject.getId()) < 0 && ChatActivity.this.selectedMessagesIds[1].indexOfKey(messageObject.getId()) < 0) || messageObject.contentType != 0) {
                return;
            }
            if (z && ChatActivity.this.selectedMessagesIds[0].size() + ChatActivity.this.selectedMessagesIds[1].size() >= 100) {
                this.limitReached = true;
            } else {
                this.limitReached = false;
            }
            RecyclerView.ViewHolder findViewHolderForAdapterPosition = ChatActivity.this.chatListView.findViewHolderForAdapterPosition(i);
            if (findViewHolderForAdapterPosition != null) {
                View view = findViewHolderForAdapterPosition.itemView;
                if (view instanceof ChatMessageCell) {
                    ChatActivity.this.processRowSelect(view, false, f, f2);
                    return;
                }
            }
            ChatActivity.this.addToSelectedMessages(messageObject, false);
            ChatActivity.this.updateActionModeTitle();
            ChatActivity.this.updateVisibleRows();
        }

        @Override // org.telegram.ui.Components.RecyclerListView.onMultiSelectionChanged
        public boolean canSelect(int i) {
            int i2 = i - ChatActivity.this.chatAdapter.messagesStartRow;
            if (i2 < 0 || i2 >= ChatActivity.this.messages.size()) {
                return false;
            }
            MessageObject messageObject = ChatActivity.this.messages.get(i2);
            if (messageObject.contentType != 0) {
                return false;
            }
            if (!this.val$unselect && this.val$alreadySelectedMessagesIds.get(messageObject.getId(), null) == null) {
                return true;
            }
            return this.val$unselect && this.val$alreadySelectedMessagesIds.get(messageObject.getId(), null) != null;
        }

        @Override // org.telegram.ui.Components.RecyclerListView.onMultiSelectionChanged
        public int checkPosition(int i, boolean z) {
            MessageObject.GroupedMessages groupedMessages;
            int i2 = i - ChatActivity.this.chatAdapter.messagesStartRow;
            if (i2 >= 0 && i2 < ChatActivity.this.messages.size()) {
                MessageObject messageObject = ChatActivity.this.messages.get(i2);
                if (messageObject.contentType == 0 && messageObject.hasValidGroupId() && (groupedMessages = (MessageObject.GroupedMessages) ChatActivity.this.groupedMessagesMap.get(messageObject.getGroupId())) != null) {
                    ArrayList<MessageObject> arrayList = groupedMessages.messages;
                    return ChatActivity.this.chatAdapter.messagesStartRow + ChatActivity.this.messages.indexOf(arrayList.get(z ? 0 : arrayList.size() - 1));
                }
            }
            return i;
        }

        @Override // org.telegram.ui.Components.RecyclerListView.onMultiSelectionChanged
        public boolean limitReached() {
            return this.limitReached;
        }

        @Override // org.telegram.ui.Components.RecyclerListView.onMultiSelectionChanged
        public void getPaddings(int[] iArr) {
            iArr[0] = (int) ChatActivity.this.chatListViewPaddingTop;
            iArr[1] = ChatActivity.this.blurredViewBottomOffset;
        }

        @Override // org.telegram.ui.Components.RecyclerListView.onMultiSelectionChanged
        public void scrollBy(int i) {
            ChatActivity.this.chatListView.scrollBy(0, i);
        }
    }

    /* renamed from: org.telegram.ui.ChatActivity$8 */
    /* loaded from: classes3.dex */
    public class AnonymousClass8 implements RecyclerListView.OnItemClickListenerExtended {
        AnonymousClass8() {
            ChatActivity.this = r1;
        }

        @Override // org.telegram.ui.Components.RecyclerListView.OnItemClickListenerExtended
        public void onItemClick(View view, int i, float f, float f2) {
            if (((BaseFragment) ChatActivity.this).inPreviewMode) {
                return;
            }
            ChatActivity.this.wasManualScroll = true;
            boolean z = false;
            if (view instanceof ChatActionCell) {
                ChatActionCell chatActionCell = (ChatActionCell) view;
                if (chatActionCell.getMessageObject().isDateObject) {
                    Bundle bundle = new Bundle();
                    int i2 = chatActionCell.getMessageObject().messageOwner.date;
                    bundle.putLong("dialog_id", ChatActivity.this.dialog_id);
                    bundle.putInt("type", 0);
                    ChatActivity.this.presentFragment(new CalendarActivity(bundle, 0, i2));
                    return;
                }
            }
            if (!((BaseFragment) ChatActivity.this).actionBar.isActionModeShowed() && ChatActivity.this.reportType < 0) {
                ChatActivity.this.createMenu(view, true, false, f, f2);
                return;
            }
            if (view instanceof ChatMessageCell) {
                ChatMessageCell chatMessageCell = (ChatMessageCell) view;
                if (ChatActivity.this.textSelectionHelper.isSelected(chatMessageCell.getMessageObject())) {
                    return;
                }
                z = !chatMessageCell.isInsideBackground(f, f2);
            }
            ChatActivity.this.processRowSelect(view, z, f, f2);
        }

        @Override // org.telegram.ui.Components.RecyclerListView.OnItemClickListenerExtended
        public boolean hasDoubleTap(View view, int i) {
            TLRPC$ChatFull tLRPC$ChatFull;
            TLRPC$TL_availableReaction tLRPC$TL_availableReaction = ChatActivity.this.getMediaDataController().getReactionsMap().get(ChatActivity.this.getMediaDataController().getDoubleTapReaction());
            if (tLRPC$TL_availableReaction == null) {
                return false;
            }
            boolean z = ChatActivity.this.dialog_id >= 0;
            if (!z && (tLRPC$ChatFull = ChatActivity.this.chatInfo) != null) {
                Iterator<String> it = tLRPC$ChatFull.available_reactions.iterator();
                while (true) {
                    if (it.hasNext()) {
                        if (it.next().equals(tLRPC$TL_availableReaction.reaction)) {
                            z = true;
                            break;
                        }
                    } else {
                        break;
                    }
                }
            }
            if (!z || !(view instanceof ChatMessageCell)) {
                return false;
            }
            ChatMessageCell chatMessageCell = (ChatMessageCell) view;
            return !chatMessageCell.getMessageObject().isSending() && !chatMessageCell.getMessageObject().isEditing() && chatMessageCell.getMessageObject().type != 16 && !((BaseFragment) ChatActivity.this).actionBar.isActionModeShowed() && !ChatActivity.this.isSecretChat() && !ChatActivity.this.isInScheduleMode() && !chatMessageCell.getMessageObject().isSponsored();
        }

        @Override // org.telegram.ui.Components.RecyclerListView.OnItemClickListenerExtended
        public void onDoubleTap(View view, int i, float f, float f2) {
            TLRPC$ChatFull tLRPC$ChatFull;
            if (!(view instanceof ChatMessageCell) || ChatActivity.this.getParentActivity() == null || ChatActivity.this.isSecretChat() || ChatActivity.this.isInScheduleMode() || ChatActivity.this.isInPreviewMode()) {
                return;
            }
            ChatMessageCell chatMessageCell = (ChatMessageCell) view;
            MessageObject primaryMessageObject = chatMessageCell.getPrimaryMessageObject();
            boolean z = false;
            ReactionsEffectOverlay.removeCurrent(false);
            TLRPC$TL_availableReaction tLRPC$TL_availableReaction = ChatActivity.this.getMediaDataController().getReactionsMap().get(ChatActivity.this.getMediaDataController().getDoubleTapReaction());
            if (tLRPC$TL_availableReaction == null || chatMessageCell.getMessageObject().isSponsored()) {
                return;
            }
            boolean z2 = true;
            if (ChatActivity.this.dialog_id >= 0) {
                z = true;
            }
            if (!z && (tLRPC$ChatFull = ChatActivity.this.chatInfo) != null) {
                Iterator<String> it = tLRPC$ChatFull.available_reactions.iterator();
                while (it.hasNext()) {
                    if (it.next().equals(tLRPC$TL_availableReaction.reaction)) {
                        break;
                    }
                }
            }
            z2 = z;
            if (!z2) {
                return;
            }
            ChatActivity.this.selectReaction(primaryMessageObject, null, f, f2, tLRPC$TL_availableReaction, true, false);
        }
    }

    public /* synthetic */ void lambda$new$5() {
        ChatActivityEnterView chatActivityEnterView;
        View sendButton;
        if (getParentActivity() == null || this.fragmentView == null || (chatActivityEnterView = this.chatActivityEnterView) == null || (sendButton = chatActivityEnterView.getSendButton()) == null || this.chatActivityEnterView.getEditField().getText().length() < 5) {
            return;
        }
        SharedConfig.increaseScheduledOrNoSuoundHintShowed();
        if (this.scheduledOrNoSoundHint == null) {
            HintView hintView = new HintView(getParentActivity(), 4, this.themeDelegate);
            this.scheduledOrNoSoundHint = hintView;
            hintView.setShowingDuration(5000L);
            this.scheduledOrNoSoundHint.setAlpha(0.0f);
            this.scheduledOrNoSoundHint.setVisibility(4);
            this.scheduledOrNoSoundHint.setText(LocaleController.getString("ScheduledOrNoSoundHint", 2131628148));
            this.contentView.addView(this.scheduledOrNoSoundHint, LayoutHelper.createFrame(-2, -2.0f, 51, 10.0f, 0.0f, 10.0f, 0.0f));
        }
        this.scheduledOrNoSoundHint.showForView(sendButton, true);
    }

    public ChatActivity(Bundle bundle) {
        super(bundle);
    }

    /* JADX WARN: Removed duplicated region for block: B:163:0x076f  */
    /* JADX WARN: Removed duplicated region for block: B:164:0x0780  */
    /* JADX WARN: Removed duplicated region for block: B:170:0x0796  */
    /* JADX WARN: Removed duplicated region for block: B:171:0x07d1  */
    /* JADX WARN: Removed duplicated region for block: B:215:0x0928  */
    /* JADX WARN: Removed duplicated region for block: B:248:0x09ea  */
    /* JADX WARN: Removed duplicated region for block: B:260:0x0a1b  */
    @Override // org.telegram.ui.ActionBar.BaseFragment
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public boolean onFragmentCreate() {
        int i;
        TLRPC$Message tLRPC$Message;
        boolean z;
        boolean z2;
        boolean z3;
        boolean z4;
        boolean z5;
        TLRPC$ChatFull tLRPC$ChatFull;
        TLRPC$ChatInvite tLRPC$ChatInvite;
        TLRPC$Chat chat;
        boolean z6;
        char c;
        char c2;
        String str;
        boolean z7;
        long j = this.arguments.getLong("chat_id", 0L);
        long j2 = this.arguments.getLong("user_id", 0L);
        int i2 = this.arguments.getInt("enc_id", 0);
        this.dialogFolderId = this.arguments.getInt("dialog_folder_id", 0);
        this.dialogFilterId = this.arguments.getInt("dialog_filter_id", 0);
        this.chatMode = this.arguments.getInt("chatMode", 0);
        this.voiceChatHash = this.arguments.getString("voicechat", null);
        this.livestream = !TextUtils.isEmpty(this.arguments.getString("livestream", null));
        this.attachMenuBotToOpen = this.arguments.getString("attach_bot", null);
        this.attachMenuBotStartCommand = this.arguments.getString("attach_bot_start_command", null);
        this.inlineReturn = this.arguments.getLong("inline_return", 0L);
        String string = this.arguments.getString("inline_query");
        this.premiumInvoiceBot = this.arguments.getBoolean("premium_bot", false);
        this.startLoadFromMessageId = this.arguments.getInt("message_id", 0);
        this.startLoadFromDate = this.arguments.getInt("start_from_date", 0);
        this.startFromVideoTimestamp = this.arguments.getInt("video_timestamp", -1);
        this.threadUnreadMessagesCount = this.arguments.getInt("unread_count", 0);
        if (this.startFromVideoTimestamp >= 0) {
            this.startFromVideoMessageId = this.startLoadFromMessageId;
        }
        this.reportType = this.arguments.getInt("report", -1);
        this.arguments.getBoolean("pulled", false);
        boolean z8 = this.arguments.getBoolean("historyPreloaded", false);
        int i3 = this.highlightMessageId;
        if (i3 != 0 && i3 != Integer.MAX_VALUE) {
            this.startLoadFromMessageId = i3;
        }
        int i4 = this.arguments.getInt("migrated_to", 0);
        this.scrollToTopOnResume = this.arguments.getBoolean("scrollToTopOnResume", false);
        this.needRemovePreviousSameChatActivity = this.arguments.getBoolean("need_remove_previous_same_chat_activity", true);
        if (j != 0) {
            TLRPC$Chat chat2 = getMessagesController().getChat(Long.valueOf(j));
            this.currentChat = chat2;
            if (chat2 == null) {
                CountDownLatch countDownLatch = new CountDownLatch(1);
                MessagesStorage messagesStorage = getMessagesStorage();
                i = i4;
                tLRPC$Message = null;
                messagesStorage.getStorageQueue().postRunnable(new ChatActivity$$ExternalSyntheticLambda182(this, messagesStorage, j, countDownLatch));
                try {
                    countDownLatch.await();
                } catch (Exception e) {
                    FileLog.e(e);
                }
                if (this.currentChat == null) {
                    return false;
                }
                getMessagesController().putChat(this.currentChat, true);
                z7 = false;
            } else {
                i = i4;
                z7 = false;
                tLRPC$Message = null;
            }
            this.dialog_id = -j;
            if (ChatObject.isChannel(this.currentChat)) {
                getMessagesController().startShortPoll(this.currentChat, this.classGuid, z7);
            }
        } else {
            i = i4;
            tLRPC$Message = null;
            if (j2 != 0) {
                TLRPC$User user = getMessagesController().getUser(Long.valueOf(j2));
                this.currentUser = user;
                if (user == null) {
                    MessagesStorage messagesStorage2 = getMessagesStorage();
                    CountDownLatch countDownLatch2 = new CountDownLatch(1);
                    str = string;
                    messagesStorage2.getStorageQueue().postRunnable(new ChatActivity$$ExternalSyntheticLambda181(this, messagesStorage2, j2, countDownLatch2));
                    try {
                        countDownLatch2.await();
                    } catch (Exception e2) {
                        FileLog.e(e2);
                    }
                    if (this.currentUser == null) {
                        return false;
                    }
                    getMessagesController().putUser(this.currentUser, true);
                } else {
                    str = string;
                }
                this.dialog_id = j2;
                String string2 = this.arguments.getString("botUser");
                this.botUser = string2;
                if (str != null) {
                    getMessagesController().sendBotStart(this.currentUser, str);
                } else if (this.premiumInvoiceBot && !TextUtils.isEmpty(string2)) {
                    getMessagesController().sendBotStart(this.currentUser, this.botUser);
                    this.botUser = null;
                    this.premiumInvoiceBot = false;
                }
            } else if (i2 == 0) {
                return false;
            } else {
                this.currentEncryptedChat = getMessagesController().getEncryptedChat(Integer.valueOf(i2));
                MessagesStorage messagesStorage3 = getMessagesStorage();
                if (this.currentEncryptedChat == null) {
                    CountDownLatch countDownLatch3 = new CountDownLatch(1);
                    messagesStorage3.getStorageQueue().postRunnable(new ChatActivity$$ExternalSyntheticLambda180(this, messagesStorage3, i2, countDownLatch3));
                    try {
                        countDownLatch3.await();
                    } catch (Exception e3) {
                        FileLog.e(e3);
                    }
                    if (this.currentEncryptedChat == null) {
                        return false;
                    }
                    getMessagesController().putEncryptedChat(this.currentEncryptedChat, true);
                }
                TLRPC$User user2 = getMessagesController().getUser(Long.valueOf(this.currentEncryptedChat.user_id));
                this.currentUser = user2;
                if (user2 == null) {
                    CountDownLatch countDownLatch4 = new CountDownLatch(1);
                    messagesStorage3.getStorageQueue().postRunnable(new ChatActivity$$ExternalSyntheticLambda183(this, messagesStorage3, countDownLatch4));
                    try {
                        countDownLatch4.await();
                    } catch (Exception e4) {
                        FileLog.e(e4);
                    }
                    if (this.currentUser == null) {
                        return false;
                    }
                    c = 1;
                    getMessagesController().putUser(this.currentUser, true);
                    c2 = 0;
                } else {
                    c2 = 0;
                    c = 1;
                }
                this.dialog_id = DialogObject.makeEncryptedDialogId(i2);
                int[] iArr = this.maxMessageId;
                iArr[c] = Integer.MIN_VALUE;
                iArr[c2] = Integer.MIN_VALUE;
                int[] iArr2 = this.minMessageId;
                iArr2[c] = Integer.MAX_VALUE;
                iArr2[c2] = Integer.MAX_VALUE;
            }
        }
        this.dialog_id_Long = Long.valueOf(this.dialog_id);
        ThemeDelegate themeDelegate = new ThemeDelegate();
        this.themeDelegate = themeDelegate;
        if (themeDelegate.isThemeChangeAvailable()) {
            NotificationCenter.getGlobalInstance().addObserver(this, NotificationCenter.needSetDayNightTheme);
        }
        if (this.currentUser != null && Build.VERSION.SDK_INT < 23) {
            MediaController.getInstance().startMediaObserver();
        }
        getNotificationCenter().addPostponeNotificationsCallback(this.postponeNotificationsWhileLoadingCallback);
        if (this.chatMode != 1) {
            if (this.threadMessageId == 0) {
                getNotificationCenter().addObserver(this, NotificationCenter.screenshotTook);
                getNotificationCenter().addObserver(this, NotificationCenter.encryptedChatUpdated);
                getNotificationCenter().addObserver(this, NotificationCenter.messagesReadEncrypted);
                getNotificationCenter().addObserver(this, NotificationCenter.botKeyboardDidLoad);
                getNotificationCenter().addObserver(this, NotificationCenter.updateMentionsCount);
                getNotificationCenter().addObserver(this, NotificationCenter.newDraftReceived);
                getNotificationCenter().addObserver(this, NotificationCenter.chatOnlineCountDidLoad);
                getNotificationCenter().addObserver(this, NotificationCenter.peerSettingsDidLoad);
                getNotificationCenter().addObserver(this, NotificationCenter.didLoadPinnedMessages);
                getNotificationCenter().addObserver(this, NotificationCenter.commentsRead);
                getNotificationCenter().addObserver(this, NotificationCenter.changeRepliesCounter);
                getNotificationCenter().addObserver(this, NotificationCenter.messagesRead);
                getNotificationCenter().addObserver(this, NotificationCenter.didLoadChatInviter);
                getNotificationCenter().addObserver(this, NotificationCenter.groupCallUpdated);
            } else {
                getNotificationCenter().addObserver(this, NotificationCenter.threadMessagesRead);
            }
            getNotificationCenter().addObserver(this, NotificationCenter.removeAllMessagesFromDialog);
            getNotificationCenter().addObserver(this, NotificationCenter.messagesReadContent);
            getNotificationCenter().addObserver(this, NotificationCenter.chatSearchResultsAvailable);
            getNotificationCenter().addObserver(this, NotificationCenter.chatSearchResultsLoading);
            getNotificationCenter().addObserver(this, NotificationCenter.didUpdateMessagesViews);
            getNotificationCenter().addObserver(this, NotificationCenter.didUpdatePollResults);
            if (this.currentEncryptedChat != null) {
                getNotificationCenter().addObserver(this, NotificationCenter.didVerifyMessagesStickers);
            }
        }
        getNotificationCenter().addObserver(this, NotificationCenter.messagesDidLoad);
        NotificationCenter.getGlobalInstance().addObserver(this, NotificationCenter.emojiLoaded);
        NotificationCenter.getGlobalInstance().addObserver(this, NotificationCenter.invalidateMotionBackground);
        getNotificationCenter().addObserver(this, NotificationCenter.didUpdateConnectionState);
        getNotificationCenter().addObserver(this, NotificationCenter.updateInterfaces);
        getNotificationCenter().addObserver(this, NotificationCenter.updateDefaultSendAsPeer);
        if (this.chatMode != 2) {
            getNotificationCenter().addObserver(this, NotificationCenter.didReceiveNewMessages);
        }
        if (this.chatMode == 0) {
            getNotificationCenter().addObserver(this, NotificationCenter.didLoadSponsoredMessages);
        }
        getNotificationCenter().addObserver(this, NotificationCenter.didLoadSendAsPeers);
        getNotificationCenter().addObserver(this, NotificationCenter.closeChats);
        getNotificationCenter().addObserver(this, NotificationCenter.messagesDeleted);
        getNotificationCenter().addObserver(this, NotificationCenter.historyCleared);
        getNotificationCenter().addObserver(this, NotificationCenter.messageReceivedByServer);
        getNotificationCenter().addObserver(this, NotificationCenter.messageReceivedByAck);
        getNotificationCenter().addObserver(this, NotificationCenter.messageSendError);
        getNotificationCenter().addObserver(this, NotificationCenter.chatInfoDidLoad);
        getNotificationCenter().addObserver(this, NotificationCenter.contactsDidLoad);
        getNotificationCenter().addObserver(this, NotificationCenter.messagePlayingProgressDidChanged);
        getNotificationCenter().addObserver(this, NotificationCenter.messagePlayingDidReset);
        getNotificationCenter().addObserver(this, NotificationCenter.messagePlayingGoingToStop);
        getNotificationCenter().addObserver(this, NotificationCenter.messagePlayingPlayStateChanged);
        getNotificationCenter().addObserver(this, NotificationCenter.blockedUsersDidLoad);
        getNotificationCenter().addObserver(this, NotificationCenter.fileNewChunkAvailable);
        getNotificationCenter().addObserver(this, NotificationCenter.didCreatedNewDeleteTask);
        getNotificationCenter().addObserver(this, NotificationCenter.messagePlayingDidStart);
        getNotificationCenter().addObserver(this, NotificationCenter.updateMessageMedia);
        getNotificationCenter().addObserver(this, NotificationCenter.voiceTranscriptionUpdate);
        getNotificationCenter().addObserver(this, NotificationCenter.replaceMessagesObjects);
        getNotificationCenter().addObserver(this, NotificationCenter.notificationsSettingsUpdated);
        getNotificationCenter().addObserver(this, NotificationCenter.replyMessagesDidLoad);
        getNotificationCenter().addObserver(this, NotificationCenter.didReceivedWebpages);
        getNotificationCenter().addObserver(this, NotificationCenter.didReceivedWebpagesInUpdates);
        getNotificationCenter().addObserver(this, NotificationCenter.botInfoDidLoad);
        getNotificationCenter().addObserver(this, NotificationCenter.chatInfoCantLoad);
        getNotificationCenter().addObserver(this, NotificationCenter.userInfoDidLoad);
        getNotificationCenter().addObserver(this, NotificationCenter.pinnedInfoDidLoad);
        NotificationCenter.getGlobalInstance().addObserver(this, NotificationCenter.didSetNewWallpapper);
        NotificationCenter.getGlobalInstance().addObserver(this, NotificationCenter.didApplyNewTheme);
        NotificationCenter.getGlobalInstance().addObserver(this, NotificationCenter.goingToPreviewTheme);
        getNotificationCenter().addObserver(this, NotificationCenter.channelRightsUpdated);
        getNotificationCenter().addObserver(this, NotificationCenter.audioRecordTooShort);
        getNotificationCenter().addObserver(this, NotificationCenter.didUpdateReactions);
        getNotificationCenter().addObserver(this, NotificationCenter.videoLoadingStateChanged);
        getNotificationCenter().addObserver(this, NotificationCenter.scheduledMessagesUpdated);
        getNotificationCenter().addObserver(this, NotificationCenter.diceStickersDidLoad);
        getNotificationCenter().addObserver(this, NotificationCenter.dialogDeleted);
        getNotificationCenter().addObserver(this, NotificationCenter.chatAvailableReactionsUpdated);
        getNotificationCenter().addObserver(this, NotificationCenter.dialogsUnreadReactionsCounterChanged);
        getNotificationCenter().addObserver(this, NotificationCenter.groupStickersDidLoad);
        super.onFragmentCreate();
        if (this.chatMode == 2) {
            ArrayList arrayList = new ArrayList();
            int size = this.pinnedMessageIds.size();
            for (int i5 = 0; i5 < size; i5++) {
                MessageObject messageObject = this.pinnedMessageObjects.get(this.pinnedMessageIds.get(i5));
                if (messageObject != null) {
                    MessageObject messageObject2 = new MessageObject(messageObject.currentAccount, messageObject.messageOwner, true, false);
                    messageObject2.replyMessageObject = messageObject.replyMessageObject;
                    messageObject2.mediaExists = messageObject.mediaExists;
                    messageObject2.attachPathExists = messageObject.attachPathExists;
                    arrayList.add(messageObject2);
                }
            }
            int i6 = this.lastLoadIndex;
            this.lastLoadIndex = i6 + 1;
            this.waitingForLoad.add(Integer.valueOf(i6));
            getNotificationCenter().postNotificationName(NotificationCenter.messagesDidLoad, Long.valueOf(this.dialog_id), Integer.valueOf(arrayList.size()), arrayList, Boolean.FALSE, 0, Integer.valueOf(this.last_message_id), 0, 0, 2, Boolean.TRUE, Integer.valueOf(this.classGuid), Integer.valueOf(i6), this.pinnedMessageIds.get(0), 0, 2);
            z = true;
        } else {
            z = true;
            if (!this.forceHistoryEmpty) {
                this.loading = true;
            }
        }
        if (isThreadChat()) {
            if (this.highlightMessageId == this.startLoadFromMessageId) {
                this.needSelectFromMessageId = z;
            }
        } else {
            getMessagesController().setLastCreatedDialogId(this.dialog_id, this.chatMode == z, z);
            if (this.chatMode == 0) {
                if (this.currentEncryptedChat == null) {
                    getMediaDataController().loadBotKeyboard(this.dialog_id);
                }
                getMessagesController().loadPeerSettings(this.currentUser, this.currentChat);
                if (this.startLoadFromMessageId == 0) {
                    SharedPreferences notificationsSettings = MessagesController.getNotificationsSettings(this.currentAccount);
                    int i7 = notificationsSettings.getInt("diditem" + this.dialog_id, 0);
                    if (i7 != 0) {
                        this.wasManualScroll = true;
                        this.loadingFromOldPosition = true;
                        this.startLoadFromMessageOffset = notificationsSettings.getInt("diditemo" + this.dialog_id, 0);
                        this.startLoadFromMessageId = i7;
                    }
                } else {
                    this.showScrollToMessageError = true;
                    this.needSelectFromMessageId = true;
                }
            }
        }
        if (this.currentChat != null) {
            this.chatInfo = getMessagesController().getChatFull(this.currentChat.id);
            this.groupCall = getMessagesController().getGroupCall(this.currentChat.id, true);
            if (ChatObject.isChannel(this.currentChat) && !getMessagesController().isChannelAdminsLoaded(this.currentChat.id)) {
                getMessagesController().loadChannelAdmins(this.currentChat.id, true);
            }
            fillInviterId(false);
            if (this.chatMode != 2) {
                MessagesStorage messagesStorage4 = getMessagesStorage();
                TLRPC$Chat tLRPC$Chat = this.currentChat;
                messagesStorage4.loadChatInfo(tLRPC$Chat.id, ChatObject.isChannel(tLRPC$Chat), null, true, false, this.startLoadFromMessageId);
            }
            if (this.chatMode == 0 && this.chatInfo != null && ChatObject.isChannel(this.currentChat) && this.chatInfo.migrated_from_chat_id != 0 && !isThreadChat()) {
                TLRPC$ChatFull tLRPC$ChatFull2 = this.chatInfo;
                this.mergeDialogId = -tLRPC$ChatFull2.migrated_from_chat_id;
                this.maxMessageId[1] = tLRPC$ChatFull2.migrated_from_max_id;
            }
            z6 = this.chatInfo == null;
            checkGroupCallJoin(false);
        } else if (this.currentUser != null) {
            if (this.chatMode != 2) {
                getMessagesController().loadUserInfo(this.currentUser, true, this.classGuid, this.startLoadFromMessageId);
            }
            z6 = this.userInfo == null;
        } else {
            z2 = false;
            z3 = this.forceHistoryEmpty;
            if (!z3) {
                boolean[] zArr = this.endReached;
                zArr[1] = true;
                zArr[0] = true;
                boolean[] zArr2 = this.forwardEndReached;
                zArr2[1] = true;
                zArr2[0] = true;
                this.firstLoading = false;
            }
            if (this.chatMode != 2 && !z3) {
                this.waitingForLoad.add(Integer.valueOf(this.lastLoadIndex));
                if (this.startLoadFromDate == 0) {
                    MessagesController messagesController = getMessagesController();
                    long j3 = this.dialog_id;
                    long j4 = this.mergeDialogId;
                    int i8 = this.startLoadFromDate;
                    int i9 = this.classGuid;
                    int i10 = this.chatMode;
                    int i11 = this.threadMessageId;
                    int i12 = this.replyMaxReadId;
                    int i13 = this.lastLoadIndex;
                    this.lastLoadIndex = i13 + 1;
                    messagesController.loadMessages(j3, j4, false, 30, 0, i8, true, 0, i9, 4, 0, i10, i11, i12, i13);
                } else if (this.startLoadFromMessageId == 0 || (isThreadChat() && this.startLoadFromMessageId != this.highlightMessageId)) {
                    if (z8) {
                        this.lastLoadIndex++;
                    } else {
                        MessagesController messagesController2 = getMessagesController();
                        long j5 = this.dialog_id;
                        long j6 = this.mergeDialogId;
                        int i14 = (AndroidUtilities.isTablet() || isThreadChat()) ? 30 : 20;
                        int i15 = this.startLoadFromMessageId;
                        int i16 = this.classGuid;
                        int i17 = this.chatMode;
                        int i18 = this.threadMessageId;
                        int i19 = this.replyMaxReadId;
                        int i20 = this.lastLoadIndex;
                        this.lastLoadIndex = i20 + 1;
                        messagesController2.loadMessages(j5, j6, z2, i14, i15, 0, true, 0, i16, 2, 0, i17, i18, i19, i20);
                    }
                } else if (i != 0) {
                    this.mergeDialogId = i;
                    MessagesController messagesController3 = getMessagesController();
                    long j7 = this.mergeDialogId;
                    int i21 = this.loadingFromOldPosition ? 50 : (AndroidUtilities.isTablet() || isThreadChat()) ? 30 : 20;
                    int i22 = this.startLoadFromMessageId;
                    int i23 = this.classGuid;
                    int i24 = this.chatMode;
                    int i25 = this.threadMessageId;
                    int i26 = this.replyMaxReadId;
                    int i27 = this.lastLoadIndex;
                    this.lastLoadIndex = i27 + 1;
                    messagesController3.loadMessages(j7, 0L, z2, i21, i22, 0, true, 0, i23, 3, 0, i24, i25, i26, i27);
                } else {
                    MessagesController messagesController4 = getMessagesController();
                    long j8 = this.dialog_id;
                    long j9 = this.mergeDialogId;
                    int i28 = this.loadingFromOldPosition ? 50 : (AndroidUtilities.isTablet() || isThreadChat()) ? 30 : 20;
                    int i29 = this.startLoadFromMessageId;
                    int i30 = this.classGuid;
                    int i31 = this.chatMode;
                    int i32 = this.threadMessageId;
                    int i33 = this.replyMaxReadId;
                    int i34 = this.lastLoadIndex;
                    this.lastLoadIndex = i34 + 1;
                    messagesController4.loadMessages(j8, j9, z2, i28, i29, 0, true, 0, i30, 3, 0, i31, i32, i33, i34);
                }
            }
            if (this.chatMode == 0 && !isThreadChat()) {
                this.waitingForLoad.add(Integer.valueOf(this.lastLoadIndex));
                MessagesController messagesController5 = getMessagesController();
                long j10 = this.dialog_id;
                long j11 = this.mergeDialogId;
                int i35 = this.classGuid;
                int i36 = this.threadMessageId;
                int i37 = this.replyMaxReadId;
                int i38 = this.lastLoadIndex;
                this.lastLoadIndex = i38 + 1;
                messagesController5.loadMessages(j10, j11, false, 1, 0, 0, true, 0, i35, 2, 0, 1, i36, i37, i38);
            }
            if (this.chatMode != 0) {
                if (j2 != 0 && this.currentUser.bot) {
                    z5 = false;
                    z4 = true;
                    getMediaDataController().loadBotInfo(j2, j2, true, this.classGuid);
                } else {
                    z5 = false;
                    z5 = false;
                    z4 = true;
                    z4 = true;
                    if (this.chatInfo instanceof TLRPC$TL_chatFull) {
                        for (int i39 = 0; i39 < this.chatInfo.participants.participants.size(); i39++) {
                            TLRPC$User user3 = getMessagesController().getUser(Long.valueOf(this.chatInfo.participants.participants.get(i39).user_id));
                            if (user3 != null && user3.bot) {
                                getMediaDataController().loadBotInfo(user3.id, -this.chatInfo.id, true, this.classGuid);
                            }
                        }
                    }
                }
                if (AndroidUtilities.isTablet()) {
                    NotificationCenter notificationCenter = getNotificationCenter();
                    int i40 = NotificationCenter.openedChatChanged;
                    Object[] objArr = new Object[2];
                    Long valueOf = Long.valueOf(this.dialog_id);
                    char c3 = z5 ? 1 : 0;
                    char c4 = z5 ? 1 : 0;
                    char c5 = z5 ? 1 : 0;
                    char c6 = z5 ? 1 : 0;
                    char c7 = z5 ? 1 : 0;
                    objArr[c3] = valueOf;
                    Boolean bool = Boolean.FALSE;
                    char c8 = z4 ? 1 : 0;
                    char c9 = z4 ? 1 : 0;
                    char c10 = z4 ? 1 : 0;
                    char c11 = z4 ? 1 : 0;
                    char c12 = z4 ? 1 : 0;
                    objArr[c8] = bool;
                    notificationCenter.postNotificationName(i40, objArr);
                }
                TLRPC$User tLRPC$User = this.currentUser;
                if (tLRPC$User != null && !UserObject.isReplyUser(tLRPC$User)) {
                    this.userBlocked = getMessagesController().blockePeers.indexOfKey(this.currentUser.id) >= 0;
                }
                TLRPC$EncryptedChat tLRPC$EncryptedChat = this.currentEncryptedChat;
                if (tLRPC$EncryptedChat != null && AndroidUtilities.getMyLayerVersion(tLRPC$EncryptedChat.layer) != SecretChatHelper.CURRENT_SECRET_CHAT_LAYER) {
                    getSecretChatHelper().sendNotifyLayerMessage(this.currentEncryptedChat, tLRPC$Message);
                }
            } else {
                z5 = false;
                z4 = true;
            }
            tLRPC$ChatFull = this.chatInfo;
            if (tLRPC$ChatFull != null && tLRPC$ChatFull.linked_chat_id != 0 && (chat = getMessagesController().getChat(Long.valueOf(this.chatInfo.linked_chat_id))) != null && chat.megagroup) {
                getMessagesController().startShortPoll(chat, this.classGuid, z5);
            }
            tLRPC$ChatInvite = this.chatInvite;
            if (tLRPC$ChatInvite != null) {
                int currentTime = tLRPC$ChatInvite.expires - getConnectionsManager().getCurrentTime();
                int i41 = currentTime < 0 ? 10 : currentTime;
                ChatActivity$$ExternalSyntheticLambda138 chatActivity$$ExternalSyntheticLambda138 = new ChatActivity$$ExternalSyntheticLambda138(this);
                this.chatInviteRunnable = chatActivity$$ExternalSyntheticLambda138;
                AndroidUtilities.runOnUIThread(chatActivity$$ExternalSyntheticLambda138, i41 * 1000);
            }
            return z4;
        }
        z2 = z6;
        z3 = this.forceHistoryEmpty;
        if (!z3) {
        }
        if (this.chatMode != 2) {
            this.waitingForLoad.add(Integer.valueOf(this.lastLoadIndex));
            if (this.startLoadFromDate == 0) {
            }
        }
        if (this.chatMode == 0) {
            this.waitingForLoad.add(Integer.valueOf(this.lastLoadIndex));
            MessagesController messagesController52 = getMessagesController();
            long j102 = this.dialog_id;
            long j112 = this.mergeDialogId;
            int i352 = this.classGuid;
            int i362 = this.threadMessageId;
            int i372 = this.replyMaxReadId;
            int i382 = this.lastLoadIndex;
            this.lastLoadIndex = i382 + 1;
            messagesController52.loadMessages(j102, j112, false, 1, 0, 0, true, 0, i352, 2, 0, 1, i362, i372, i382);
        }
        if (this.chatMode != 0) {
        }
        tLRPC$ChatFull = this.chatInfo;
        if (tLRPC$ChatFull != null) {
            getMessagesController().startShortPoll(chat, this.classGuid, z5);
        }
        tLRPC$ChatInvite = this.chatInvite;
        if (tLRPC$ChatInvite != null) {
        }
        return z4;
    }

    public /* synthetic */ void lambda$onFragmentCreate$6(MessagesStorage messagesStorage, long j, CountDownLatch countDownLatch) {
        this.currentChat = messagesStorage.getChat(j);
        countDownLatch.countDown();
    }

    public /* synthetic */ void lambda$onFragmentCreate$7(MessagesStorage messagesStorage, long j, CountDownLatch countDownLatch) {
        this.currentUser = messagesStorage.getUser(j);
        countDownLatch.countDown();
    }

    public /* synthetic */ void lambda$onFragmentCreate$8(MessagesStorage messagesStorage, int i, CountDownLatch countDownLatch) {
        this.currentEncryptedChat = messagesStorage.getEncryptedChat(i);
        countDownLatch.countDown();
    }

    public /* synthetic */ void lambda$onFragmentCreate$9(MessagesStorage messagesStorage, CountDownLatch countDownLatch) {
        this.currentUser = messagesStorage.getUser(this.currentEncryptedChat.user_id);
        countDownLatch.countDown();
    }

    public /* synthetic */ void lambda$onFragmentCreate$12() {
        this.chatInviteRunnable = null;
        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity(), this.themeDelegate);
        if (ChatObject.isChannel(this.currentChat) && !this.currentChat.megagroup) {
            builder.setMessage(LocaleController.getString("JoinByPeekChannelText", 2131626359));
            builder.setTitle(LocaleController.getString("JoinByPeekChannelTitle", 2131626360));
        } else {
            builder.setMessage(LocaleController.getString("JoinByPeekGroupText", 2131626361));
            builder.setTitle(LocaleController.getString("JoinByPeekGroupTitle", 2131626362));
        }
        builder.setPositiveButton(LocaleController.getString("JoinByPeekJoin", 2131626363), new ChatActivity$$ExternalSyntheticLambda27(this));
        builder.setNegativeButton(LocaleController.getString("Cancel", 2131624832), new ChatActivity$$ExternalSyntheticLambda29(this));
        showDialog(builder.create());
    }

    public /* synthetic */ void lambda$onFragmentCreate$10(DialogInterface dialogInterface, int i) {
        UnreadCounterTextView unreadCounterTextView = this.bottomOverlayChatText;
        if (unreadCounterTextView != null) {
            unreadCounterTextView.callOnClick();
        }
    }

    public /* synthetic */ void lambda$onFragmentCreate$11(DialogInterface dialogInterface, int i) {
        finishFragment();
    }

    private void fillInviterId(boolean z) {
        TLRPC$Chat tLRPC$Chat = this.currentChat;
        if (tLRPC$Chat == null || this.chatInfo == null || ChatObject.isNotInChat(tLRPC$Chat) || this.currentChat.creator) {
            return;
        }
        TLRPC$ChatFull tLRPC$ChatFull = this.chatInfo;
        long j = tLRPC$ChatFull.inviterId;
        if (j != 0) {
            this.chatInviterId = j;
            return;
        }
        TLRPC$ChatParticipants tLRPC$ChatParticipants = tLRPC$ChatFull.participants;
        if (tLRPC$ChatParticipants != null) {
            TLRPC$ChatParticipant tLRPC$ChatParticipant = tLRPC$ChatParticipants.self_participant;
            if (tLRPC$ChatParticipant != null) {
                this.chatInviterId = tLRPC$ChatParticipant.inviter_id;
                return;
            }
            long clientUserId = getUserConfig().getClientUserId();
            int size = this.chatInfo.participants.participants.size();
            for (int i = 0; i < size; i++) {
                TLRPC$ChatParticipant tLRPC$ChatParticipant2 = this.chatInfo.participants.participants.get(i);
                if (tLRPC$ChatParticipant2.user_id == clientUserId) {
                    this.chatInviterId = tLRPC$ChatParticipant2.inviter_id;
                    return;
                }
            }
        }
        if (!z || this.chatInviterId != 0) {
            return;
        }
        getMessagesController().checkChatInviter(this.currentChat.id, false);
    }

    private void hideUndoViews() {
        UndoView undoView = this.undoView;
        if (undoView != null) {
            undoView.hide(true, 0);
        }
        Bulletin bulletin = this.pinBulletin;
        if (bulletin != null) {
            bulletin.hide(false, 0L);
        }
        UndoView undoView2 = this.topUndoView;
        if (undoView2 != null) {
            undoView2.hide(true, 0);
        }
    }

    public int getOtherSameChatsDiff() {
        ArrayList<BaseFragment> arrayList;
        ActionBarLayout actionBarLayout = this.parentLayout;
        int i = 0;
        if (actionBarLayout == null || (arrayList = actionBarLayout.fragmentsStack) == null) {
            return 0;
        }
        int indexOf = arrayList.indexOf(this);
        if (indexOf == -1) {
            indexOf = this.parentLayout.fragmentsStack.size();
        }
        while (true) {
            if (i >= this.parentLayout.fragmentsStack.size()) {
                i = indexOf;
                break;
            }
            BaseFragment baseFragment = this.parentLayout.fragmentsStack.get(i);
            if (baseFragment != this && (baseFragment instanceof ChatActivity) && ((ChatActivity) baseFragment).dialog_id == this.dialog_id) {
                break;
            }
            i++;
        }
        return i - indexOf;
    }

    @Override // org.telegram.ui.ActionBar.BaseFragment
    public void onFragmentDestroy() {
        ArrayList<BaseFragment> arrayList;
        super.onFragmentDestroy();
        ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        if (chatActivityEnterView != null) {
            chatActivityEnterView.onDestroy();
        }
        ChatAvatarContainer chatAvatarContainer = this.avatarContainer;
        if (chatAvatarContainer != null) {
            chatAvatarContainer.onDestroy();
        }
        MentionsContainerView mentionsContainerView = this.mentionContainer;
        if (mentionsContainerView != null && mentionsContainerView.getAdapter() != null) {
            this.mentionContainer.getAdapter().onDestroy();
        }
        ChatAttachAlert chatAttachAlert = this.chatAttachAlert;
        if (chatAttachAlert != null) {
            chatAttachAlert.dismissInternal();
        }
        getNotificationCenter().onAnimationFinish(this.transitionAnimationIndex);
        getNotificationCenter().onAnimationFinish(this.scrollAnimationIndex);
        getNotificationCenter().onAnimationFinish(this.scrollCallbackAnimationIndex);
        hideUndoViews();
        Runnable runnable = this.chatInviteRunnable;
        if (runnable != null) {
            AndroidUtilities.cancelRunOnUIThread(runnable);
            this.chatInviteRunnable = null;
        }
        getNotificationCenter().removePostponeNotificationsCallback(this.postponeNotificationsWhileLoadingCallback);
        getMessagesController().setLastCreatedDialogId(this.dialog_id, this.chatMode == 1, false);
        getNotificationCenter().removeObserver(this, NotificationCenter.messagesDidLoad);
        NotificationCenter.getGlobalInstance().removeObserver(this, NotificationCenter.emojiLoaded);
        NotificationCenter.getGlobalInstance().removeObserver(this, NotificationCenter.invalidateMotionBackground);
        getNotificationCenter().removeObserver(this, NotificationCenter.didUpdateConnectionState);
        getNotificationCenter().removeObserver(this, NotificationCenter.updateInterfaces);
        getNotificationCenter().removeObserver(this, NotificationCenter.updateDefaultSendAsPeer);
        getNotificationCenter().removeObserver(this, NotificationCenter.didReceiveNewMessages);
        getNotificationCenter().removeObserver(this, NotificationCenter.closeChats);
        getNotificationCenter().removeObserver(this, NotificationCenter.messagesRead);
        getNotificationCenter().removeObserver(this, NotificationCenter.threadMessagesRead);
        getNotificationCenter().removeObserver(this, NotificationCenter.commentsRead);
        getNotificationCenter().removeObserver(this, NotificationCenter.changeRepliesCounter);
        getNotificationCenter().removeObserver(this, NotificationCenter.messagesDeleted);
        getNotificationCenter().removeObserver(this, NotificationCenter.historyCleared);
        getNotificationCenter().removeObserver(this, NotificationCenter.messageReceivedByServer);
        getNotificationCenter().removeObserver(this, NotificationCenter.messageReceivedByAck);
        getNotificationCenter().removeObserver(this, NotificationCenter.messageSendError);
        getNotificationCenter().removeObserver(this, NotificationCenter.chatInfoDidLoad);
        getNotificationCenter().removeObserver(this, NotificationCenter.didLoadChatInviter);
        getNotificationCenter().removeObserver(this, NotificationCenter.groupCallUpdated);
        getNotificationCenter().removeObserver(this, NotificationCenter.encryptedChatUpdated);
        getNotificationCenter().removeObserver(this, NotificationCenter.messagesReadEncrypted);
        getNotificationCenter().removeObserver(this, NotificationCenter.removeAllMessagesFromDialog);
        getNotificationCenter().removeObserver(this, NotificationCenter.contactsDidLoad);
        getNotificationCenter().removeObserver(this, NotificationCenter.messagePlayingProgressDidChanged);
        getNotificationCenter().removeObserver(this, NotificationCenter.messagePlayingDidReset);
        getNotificationCenter().removeObserver(this, NotificationCenter.screenshotTook);
        getNotificationCenter().removeObserver(this, NotificationCenter.blockedUsersDidLoad);
        getNotificationCenter().removeObserver(this, NotificationCenter.fileNewChunkAvailable);
        getNotificationCenter().removeObserver(this, NotificationCenter.didCreatedNewDeleteTask);
        getNotificationCenter().removeObserver(this, NotificationCenter.messagePlayingDidStart);
        getNotificationCenter().removeObserver(this, NotificationCenter.messagePlayingGoingToStop);
        getNotificationCenter().removeObserver(this, NotificationCenter.updateMessageMedia);
        getNotificationCenter().removeObserver(this, NotificationCenter.voiceTranscriptionUpdate);
        getNotificationCenter().removeObserver(this, NotificationCenter.replaceMessagesObjects);
        getNotificationCenter().removeObserver(this, NotificationCenter.notificationsSettingsUpdated);
        getNotificationCenter().removeObserver(this, NotificationCenter.replyMessagesDidLoad);
        getNotificationCenter().removeObserver(this, NotificationCenter.didReceivedWebpages);
        getNotificationCenter().removeObserver(this, NotificationCenter.didReceivedWebpagesInUpdates);
        getNotificationCenter().removeObserver(this, NotificationCenter.messagesReadContent);
        getNotificationCenter().removeObserver(this, NotificationCenter.botInfoDidLoad);
        getNotificationCenter().removeObserver(this, NotificationCenter.botKeyboardDidLoad);
        getNotificationCenter().removeObserver(this, NotificationCenter.chatSearchResultsAvailable);
        getNotificationCenter().removeObserver(this, NotificationCenter.chatSearchResultsLoading);
        getNotificationCenter().removeObserver(this, NotificationCenter.messagePlayingPlayStateChanged);
        getNotificationCenter().removeObserver(this, NotificationCenter.didUpdateMessagesViews);
        getNotificationCenter().removeObserver(this, NotificationCenter.chatInfoCantLoad);
        getNotificationCenter().removeObserver(this, NotificationCenter.didLoadPinnedMessages);
        getNotificationCenter().removeObserver(this, NotificationCenter.peerSettingsDidLoad);
        getNotificationCenter().removeObserver(this, NotificationCenter.newDraftReceived);
        getNotificationCenter().removeObserver(this, NotificationCenter.userInfoDidLoad);
        getNotificationCenter().removeObserver(this, NotificationCenter.pinnedInfoDidLoad);
        NotificationCenter.getGlobalInstance().removeObserver(this, NotificationCenter.didSetNewWallpapper);
        NotificationCenter.getGlobalInstance().removeObserver(this, NotificationCenter.didApplyNewTheme);
        NotificationCenter.getGlobalInstance().removeObserver(this, NotificationCenter.goingToPreviewTheme);
        getNotificationCenter().removeObserver(this, NotificationCenter.channelRightsUpdated);
        getNotificationCenter().removeObserver(this, NotificationCenter.updateMentionsCount);
        getNotificationCenter().removeObserver(this, NotificationCenter.audioRecordTooShort);
        getNotificationCenter().removeObserver(this, NotificationCenter.didUpdatePollResults);
        getNotificationCenter().removeObserver(this, NotificationCenter.didUpdateReactions);
        getNotificationCenter().removeObserver(this, NotificationCenter.chatOnlineCountDidLoad);
        getNotificationCenter().removeObserver(this, NotificationCenter.videoLoadingStateChanged);
        getNotificationCenter().removeObserver(this, NotificationCenter.scheduledMessagesUpdated);
        getNotificationCenter().removeObserver(this, NotificationCenter.diceStickersDidLoad);
        getNotificationCenter().removeObserver(this, NotificationCenter.dialogDeleted);
        getNotificationCenter().removeObserver(this, NotificationCenter.chatAvailableReactionsUpdated);
        getNotificationCenter().removeObserver(this, NotificationCenter.didLoadSponsoredMessages);
        getNotificationCenter().removeObserver(this, NotificationCenter.didLoadSendAsPeers);
        getNotificationCenter().removeObserver(this, NotificationCenter.dialogsUnreadReactionsCounterChanged);
        getNotificationCenter().removeObserver(this, NotificationCenter.groupStickersDidLoad);
        if (this.currentEncryptedChat != null) {
            getNotificationCenter().removeObserver(this, NotificationCenter.didVerifyMessagesStickers);
        }
        NotificationCenter.getGlobalInstance().removeObserver(this, NotificationCenter.needSetDayNightTheme);
        if (this.chatMode == 0 && AndroidUtilities.isTablet()) {
            getNotificationCenter().postNotificationName(NotificationCenter.openedChatChanged, Long.valueOf(this.dialog_id), Boolean.TRUE);
        }
        if (this.currentUser != null) {
            MediaController.getInstance().stopMediaObserver();
        }
        Runnable runnable2 = this.unregisterFlagSecureNoforwards;
        if (runnable2 != null) {
            runnable2.run();
            this.unregisterFlagSecureNoforwards = null;
        }
        Runnable runnable3 = this.unregisterFlagSecurePasscode;
        if (runnable3 != null) {
            runnable3.run();
            this.unregisterFlagSecurePasscode = null;
        }
        if (this.currentUser != null) {
            getMessagesController().cancelLoadFullUser(this.currentUser.id);
        }
        AndroidUtilities.removeAdjustResize(getParentActivity(), this.classGuid);
        StickersAdapter stickersAdapter = this.stickersAdapter;
        if (stickersAdapter != null) {
            stickersAdapter.onDestroy();
        }
        ChatAttachAlert chatAttachAlert2 = this.chatAttachAlert;
        if (chatAttachAlert2 != null) {
            chatAttachAlert2.onDestroy();
        }
        AndroidUtilities.unlockOrientation(getParentActivity());
        if (ChatObject.isChannel(this.currentChat)) {
            getMessagesController().startShortPoll(this.currentChat, this.classGuid, true);
            TLRPC$ChatFull tLRPC$ChatFull = this.chatInfo;
            if (tLRPC$ChatFull != null && tLRPC$ChatFull.linked_chat_id != 0) {
                getMessagesController().startShortPoll(getMessagesController().getChat(Long.valueOf(this.chatInfo.linked_chat_id)), this.classGuid, true);
            }
        }
        TextSelectionHelper.ChatListTextSelectionHelper chatListTextSelectionHelper = this.textSelectionHelper;
        if (chatListTextSelectionHelper != null) {
            chatListTextSelectionHelper.clear();
        }
        ChatListItemAnimator chatListItemAnimator = this.chatListItemAnimator;
        if (chatListItemAnimator != null) {
            chatListItemAnimator.onDestroy();
        }
        PinchToZoomHelper pinchToZoomHelper = this.pinchToZoomHelper;
        if (pinchToZoomHelper != null) {
            pinchToZoomHelper.clear();
        }
        this.chatThemeBottomSheet = null;
        ActionBarLayout parentLayout = getParentLayout();
        if (parentLayout != null && (arrayList = parentLayout.fragmentsStack) != null) {
            BackButtonMenu.clearPulledDialogs(this, arrayList.indexOf(this) - (!replacingChatActivity ? 1 : 0));
        }
        replacingChatActivity = false;
    }

    /* renamed from: org.telegram.ui.ChatActivity$9 */
    /* loaded from: classes3.dex */
    class AnonymousClass9 extends TextSelectionHelper.ChatListTextSelectionHelper {
        AnonymousClass9() {
            ChatActivity.this = r1;
        }

        @Override // org.telegram.ui.Cells.TextSelectionHelper
        public int getParentTopPadding() {
            return (int) ChatActivity.this.chatListViewPaddingTop;
        }

        @Override // org.telegram.ui.Cells.TextSelectionHelper
        public int getParentBottomPadding() {
            return ChatActivity.this.blurredViewBottomOffset;
        }

        @Override // org.telegram.ui.Cells.TextSelectionHelper
        public int getThemedColor(String str) {
            Integer color = ChatActivity.this.themeDelegate.getColor(str);
            return color != null ? color.intValue() : super.getThemedColor(str);
        }

        @Override // org.telegram.ui.Cells.TextSelectionHelper
        protected Theme.ResourcesProvider getResourcesProvider() {
            return ChatActivity.this.themeDelegate;
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:314:0x0c36  */
    /* JADX WARN: Removed duplicated region for block: B:317:0x0d6c  */
    /* JADX WARN: Removed duplicated region for block: B:320:0x0d93  */
    /* JADX WARN: Removed duplicated region for block: B:337:0x10ad  */
    /* JADX WARN: Removed duplicated region for block: B:340:0x1127  */
    /* JADX WARN: Removed duplicated region for block: B:343:0x11d2  */
    /* JADX WARN: Removed duplicated region for block: B:346:0x1228  */
    /* JADX WARN: Removed duplicated region for block: B:354:0x141e  */
    /* JADX WARN: Removed duplicated region for block: B:355:0x1420  */
    /* JADX WARN: Removed duplicated region for block: B:358:0x1438  */
    /* JADX WARN: Removed duplicated region for block: B:359:0x143b  */
    /* JADX WARN: Removed duplicated region for block: B:362:0x1493  */
    /* JADX WARN: Removed duplicated region for block: B:363:0x14b2  */
    /* JADX WARN: Removed duplicated region for block: B:366:0x1562  */
    /* JADX WARN: Removed duplicated region for block: B:367:0x1581  */
    /* JADX WARN: Removed duplicated region for block: B:370:0x1698  */
    /* JADX WARN: Removed duplicated region for block: B:371:0x16b7  */
    /* JADX WARN: Removed duplicated region for block: B:374:0x1792  */
    /* JADX WARN: Removed duplicated region for block: B:377:0x18d0  */
    /* JADX WARN: Removed duplicated region for block: B:386:0x1910  */
    /* JADX WARN: Removed duplicated region for block: B:394:0x19e1  */
    /* JADX WARN: Removed duplicated region for block: B:398:0x1b12  */
    /* JADX WARN: Removed duplicated region for block: B:408:0x1c55  */
    /* JADX WARN: Removed duplicated region for block: B:418:0x1f97  */
    /* JADX WARN: Removed duplicated region for block: B:421:0x2166  */
    /* JADX WARN: Removed duplicated region for block: B:441:0x221c  */
    /* JADX WARN: Removed duplicated region for block: B:443:0x222c  */
    /* JADX WARN: Removed duplicated region for block: B:446:0x2282  */
    /* JADX WARN: Removed duplicated region for block: B:449:0x229f  */
    /* JADX WARN: Removed duplicated region for block: B:456:0x22c5  */
    /* JADX WARN: Removed duplicated region for block: B:459:0x22ce  */
    /* JADX WARN: Removed duplicated region for block: B:460:0x22dd  */
    /* JADX WARN: Removed duplicated region for block: B:463:0x2327  */
    @Override // org.telegram.ui.ActionBar.BaseFragment
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public View createView(Context context) {
        ActionBarMenu actionBarMenu;
        float f;
        float f2;
        CharSequence charSequence;
        MentionsContainerView mentionsContainerView;
        AnonymousClass14 anonymousClass14;
        TLRPC$Chat tLRPC$Chat;
        float f3;
        int i;
        CharSequence charSequence2;
        Drawable drawable;
        Drawable drawable2;
        Drawable drawable3;
        TLRPC$ChatFull tLRPC$ChatFull;
        int i2;
        int i3;
        TLRPC$Chat tLRPC$Chat2;
        boolean z;
        long j;
        MessageObject messageObject;
        ViewGroup viewGroup;
        TLRPC$Dialog tLRPC$Dialog;
        TLRPC$Chat chat;
        String str;
        TLRPC$User tLRPC$User;
        TLRPC$Chat tLRPC$Chat3;
        TLRPC$UserFull tLRPC$UserFull;
        TLRPC$UserFull tLRPC$UserFull2;
        int i4;
        TLRPC$User tLRPC$User2;
        TLRPC$User tLRPC$User3;
        MessageObject messageObject2;
        this.textSelectionHelper = new AnonymousClass9();
        if (this.reportType >= 0) {
            this.actionBar.setBackgroundColor(getThemedColor("actionBarActionModeDefault"));
            this.actionBar.setItemsColor(getThemedColor("actionBarActionModeDefaultIcon"), false);
            this.actionBar.setItemsBackgroundColor(getThemedColor("actionBarActionModeDefaultSelector"), false);
            this.actionBar.setTitleColor(getThemedColor("actionBarActionModeDefaultIcon"));
            this.actionBar.setSubtitleColor(getThemedColor("actionBarActionModeDefaultIcon"));
        }
        this.actionBarBackgroundPaint.setColor(getThemedColor("actionBarDefault"));
        if (this.chatMessageCellsCache.isEmpty()) {
            for (int i5 = 0; i5 < 15; i5++) {
                this.chatMessageCellsCache.add(new ChatMessageCell(context, true, this.themeDelegate));
            }
        }
        for (int i6 = 1; i6 >= 0; i6--) {
            this.selectedMessagesIds[i6].clear();
            this.selectedMessagesCanCopyIds[i6].clear();
            this.selectedMessagesCanStarIds[i6].clear();
        }
        this.scheduledOrNoSoundHint = null;
        this.infoTopView = null;
        this.aspectRatioFrameLayout = null;
        this.videoTextureView = null;
        this.searchAsListHint = null;
        this.mediaBanTooltip = null;
        this.noSoundHintView = null;
        this.forwardHintView = null;
        this.checksHintView = null;
        this.textSelectionHint = null;
        this.emojiButtonRed = null;
        this.gifHintTextView = null;
        this.pollHintView = null;
        this.timerHintView = null;
        this.videoPlayerContainer = null;
        this.voiceHintTextView = null;
        this.blurredView = null;
        this.dummyMessageCell = null;
        this.cantDeleteMessagesCount = 0;
        this.canEditMessagesCount = 0;
        this.cantForwardMessagesCount = 0;
        this.canForwardMessagesCount = 0;
        this.cantSaveMessagesCount = 0;
        this.canSaveMusicCount = 0;
        this.canSaveDocumentsCount = 0;
        this.hasOwnBackground = true;
        ChatAttachAlert chatAttachAlert = this.chatAttachAlert;
        if (chatAttachAlert != null) {
            try {
                if (chatAttachAlert.isShowing()) {
                    this.chatAttachAlert.dismiss();
                }
            } catch (Exception unused) {
            }
            this.chatAttachAlert.onDestroy();
            this.chatAttachAlert = null;
        }
        StickersAdapter stickersAdapter = this.stickersAdapter;
        if (stickersAdapter != null) {
            stickersAdapter.onDestroy();
            this.stickersAdapter = null;
        }
        Theme.createChatResources(context, false);
        this.actionBar.setAddToContainer(false);
        if (this.inPreviewMode) {
            this.actionBar.setBackButtonDrawable(null);
        } else {
            this.actionBar.setBackButtonDrawable(new BackDrawable(this.reportType >= 0));
        }
        this.actionBar.setActionBarMenuOnItemClick(new AnonymousClass10(context));
        ImageView backButton = this.actionBar.getBackButton();
        backButton.setOnLongClickListener(new ChatActivity$$ExternalSyntheticLambda100(this, backButton));
        this.actionBar.setInterceptTouchEventListener(new ChatActivity$$ExternalSyntheticLambda103(this));
        ChatAvatarContainer chatAvatarContainer = this.avatarContainer;
        if (chatAvatarContainer != null) {
            chatAvatarContainer.onDestroy();
        }
        ChatAvatarContainer chatAvatarContainer2 = new ChatAvatarContainer(context, this, this.currentEncryptedChat != null, this.themeDelegate);
        this.avatarContainer = chatAvatarContainer2;
        chatAvatarContainer2.allowShorterStatus = true;
        chatAvatarContainer2.premiumIconHiddable = true;
        AndroidUtilities.updateViewVisibilityAnimated(chatAvatarContainer2, true, 1.0f, false);
        if (this.inPreviewMode || this.inBubbleMode) {
            this.avatarContainer.setOccupyStatusBar(false);
        }
        int i7 = this.reportType;
        if (i7 >= 0) {
            if (i7 == 0) {
                this.actionBar.setTitle(LocaleController.getString("ReportChatSpam", 2131628001));
            } else if (i7 == 1) {
                this.actionBar.setTitle(LocaleController.getString("ReportChatViolence", 2131628002));
            } else if (i7 == 2) {
                this.actionBar.setTitle(LocaleController.getString("ReportChatChild", 2131627993));
            } else if (i7 == 5) {
                this.actionBar.setTitle(LocaleController.getString("ReportChatPornography", 2131627999));
            } else if (i7 == 3) {
                this.actionBar.setTitle(LocaleController.getString("ReportChatIllegalDrugs", 2131627996));
            } else if (i7 == 4) {
                this.actionBar.setTitle(LocaleController.getString("ReportChatPersonalDetails", 2131627998));
            }
            this.actionBar.setSubtitle(LocaleController.getString("ReportSelectMessages", 2131628007));
        } else {
            int i8 = this.startLoadFromDate;
            if (i8 != 0) {
                this.actionBar.setOnClickListener(new ChatActivity$$ExternalSyntheticLambda82(this, i8));
                this.actionBar.setTitle(LocaleController.formatDateChat(this.startLoadFromDate, false));
                this.actionBar.setSubtitle(LocaleController.getString("Loading", 2131626520));
                TLRPC$TL_messages_getHistory tLRPC$TL_messages_getHistory = new TLRPC$TL_messages_getHistory();
                tLRPC$TL_messages_getHistory.peer = getMessagesController().getInputPeer(this.dialog_id);
                tLRPC$TL_messages_getHistory.offset_date = this.startLoadFromDate;
                tLRPC$TL_messages_getHistory.limit = 1;
                tLRPC$TL_messages_getHistory.add_offset = -1;
                getConnectionsManager().bindRequestToGuid(getConnectionsManager().sendRequest(tLRPC$TL_messages_getHistory, new ChatActivity$$ExternalSyntheticLambda220(this)), this.classGuid);
            } else {
                this.actionBar.addView(this.avatarContainer, 0, LayoutHelper.createFrame(-2, -1.0f, 51, !this.inPreviewMode ? 56.0f : this.chatMode == 2 ? 10 : 0, 0.0f, 40.0f, 0.0f));
            }
        }
        ActionBarMenu createMenu = this.actionBar.createMenu();
        if (this.currentEncryptedChat == null && this.chatMode == 0 && this.reportType < 0) {
            ActionBarMenuItem addItem = createMenu.addItem(40, 2131165456);
            this.searchIconItem = addItem;
            addItem.setContentDescription(LocaleController.getString("Search", 2131628155));
            ActionBarMenuItem actionBarMenuItemSearchListener = createMenu.addItem(0, 2131165456, this.themeDelegate).setIsSearchField(true).setActionBarMenuItemSearchListener(new AnonymousClass11());
            this.searchItem = actionBarMenuItemSearchListener;
            actionBarMenuItemSearchListener.setSearchFieldHint(LocaleController.getString("Search", 2131628155));
            if ((this.threadMessageId == 0 && !UserObject.isReplyUser(this.currentUser)) || ((messageObject2 = this.threadMessageObject) != null && messageObject2.getRepliesCount() == 0)) {
                this.searchItem.setVisibility(8);
            }
            this.searchItemVisible = false;
        }
        ActionBarMenuItem addItem2 = createMenu.addItem(0, 2131165453, this.themeDelegate);
        this.editTextItem = addItem2;
        addItem2.setContentDescription(LocaleController.getString("AccDescrMoreOptions", 2131624003));
        this.editTextItem.setTag(null);
        this.editTextItem.setVisibility(8);
        this.editTextItem.addSubItem(57, LocaleController.getString("Spoiler", 2131628466));
        SpannableStringBuilder spannableStringBuilder = new SpannableStringBuilder(LocaleController.getString("Bold", 2131624714));
        spannableStringBuilder.setSpan(new TypefaceSpan(AndroidUtilities.getTypeface("fonts/rmedium.ttf")), 0, spannableStringBuilder.length(), 33);
        this.editTextItem.addSubItem(50, spannableStringBuilder);
        SpannableStringBuilder spannableStringBuilder2 = new SpannableStringBuilder(LocaleController.getString("Italic", 2131626357));
        spannableStringBuilder2.setSpan(new TypefaceSpan(AndroidUtilities.getTypeface("fonts/ritalic.ttf")), 0, spannableStringBuilder2.length(), 33);
        this.editTextItem.addSubItem(51, spannableStringBuilder2);
        SpannableStringBuilder spannableStringBuilder3 = new SpannableStringBuilder(LocaleController.getString("Mono", 2131626782));
        spannableStringBuilder3.setSpan(new TypefaceSpan(Typeface.MONOSPACE), 0, spannableStringBuilder3.length(), 33);
        this.editTextItem.addSubItem(52, spannableStringBuilder3);
        TLRPC$EncryptedChat tLRPC$EncryptedChat = this.currentEncryptedChat;
        if (tLRPC$EncryptedChat == null || AndroidUtilities.getPeerLayerVersion(tLRPC$EncryptedChat.layer) >= 101) {
            SpannableStringBuilder spannableStringBuilder4 = new SpannableStringBuilder(LocaleController.getString("Strike", 2131628547));
            TextStyleSpan.TextStyleRun textStyleRun = new TextStyleSpan.TextStyleRun();
            textStyleRun.flags |= 8;
            spannableStringBuilder4.setSpan(new TextStyleSpan(textStyleRun), 0, spannableStringBuilder4.length(), 33);
            this.editTextItem.addSubItem(55, spannableStringBuilder4);
            SpannableStringBuilder spannableStringBuilder5 = new SpannableStringBuilder(LocaleController.getString("Underline", 2131628796));
            TextStyleSpan.TextStyleRun textStyleRun2 = new TextStyleSpan.TextStyleRun();
            textStyleRun2.flags |= 16;
            spannableStringBuilder5.setSpan(new TextStyleSpan(textStyleRun2), 0, spannableStringBuilder5.length(), 33);
            this.editTextItem.addSubItem(56, spannableStringBuilder5);
        }
        this.editTextItem.addSubItem(53, LocaleController.getString("CreateLink", 2131625288));
        this.editTextItem.addSubItem(54, LocaleController.getString("Regular", 2131627943));
        if (this.chatMode != 0 || this.threadMessageId != 0 || UserObject.isReplyUser(this.currentUser) || this.reportType >= 0) {
            actionBarMenu = createMenu;
        } else {
            if (this.currentUser != null) {
                ActionBarMenuItem addItem3 = createMenu.addItem(32, 2131165464, this.themeDelegate);
                this.audioCallIconItem = addItem3;
                addItem3.setContentDescription(LocaleController.getString("Call", 2131624792));
                TLRPC$UserFull userFull = getMessagesController().getUserFull(this.currentUser.id);
                if (userFull != null && userFull.phone_calls_available) {
                    this.showAudioCallAsIcon = !this.inPreviewMode;
                    this.audioCallIconItem.setVisibility(0);
                } else {
                    this.showAudioCallAsIcon = false;
                    this.audioCallIconItem.setVisibility(8);
                }
                tLRPC$UserFull = userFull;
            } else {
                tLRPC$UserFull = null;
            }
            ActionBarMenuItem addItem4 = createMenu.addItem(0, 2131165453, this.themeDelegate);
            this.headerItem = addItem4;
            addItem4.setContentDescription(LocaleController.getString("AccDescrMoreOptions", 2131624003));
            TLRPC$User tLRPC$User4 = this.currentUser;
            if (tLRPC$User4 == null || !tLRPC$User4.self) {
                tLRPC$UserFull2 = tLRPC$UserFull;
                i4 = 33;
                actionBarMenu = createMenu;
                ChatNotificationsPopupWrapper chatNotificationsPopupWrapper = new ChatNotificationsPopupWrapper(context, this.currentAccount, this.headerItem.getPopupLayout().getSwipeBack(), false, false, new AnonymousClass12(), getResourceProvider());
                this.chatNotificationsPopupWrapper = chatNotificationsPopupWrapper;
                ActionBarMenuSubItem addSwipeBackItem = this.headerItem.addSwipeBackItem(2131165820, null, null, chatNotificationsPopupWrapper.windowLayout);
                this.muteItem = addSwipeBackItem;
                addSwipeBackItem.setOnClickListener(new ChatActivity$$ExternalSyntheticLambda72(this));
                this.muteItemGap = this.headerItem.addColoredGap();
            } else {
                tLRPC$UserFull2 = tLRPC$UserFull;
                actionBarMenu = createMenu;
                i4 = 33;
            }
            if (this.currentUser != null) {
                this.headerItem.addSubItem(32, 2131165663, LocaleController.getString("Call", 2131624792), this.themeDelegate);
                if (Build.VERSION.SDK_INT >= 18) {
                    this.headerItem.addSubItem(i4, 2131165979, LocaleController.getString("VideoCall", 2131628954), this.themeDelegate);
                }
                if (tLRPC$UserFull2 != null && tLRPC$UserFull2.phone_calls_available) {
                    this.headerItem.showSubItem(32);
                    if (tLRPC$UserFull2.video_calls_available) {
                        this.headerItem.showSubItem(i4);
                    } else {
                        this.headerItem.hideSubItem(i4);
                    }
                } else {
                    this.headerItem.hideSubItem(32);
                    this.headerItem.hideSubItem(i4);
                }
            }
            if (this.searchItem != null) {
                this.headerItem.addSubItem(40, 2131165927, LocaleController.getString("Search", 2131628155), this.themeDelegate);
            }
            TLRPC$Chat tLRPC$Chat4 = this.currentChat;
            if (tLRPC$Chat4 != null && !tLRPC$Chat4.creator && !ChatObject.hasAdminRights(tLRPC$Chat4)) {
                this.headerItem.addSubItem(21, 2131165903, LocaleController.getString("ReportChat", 2131627992), this.themeDelegate);
            }
            if (this.currentUser != null) {
                this.addContactItem = this.headerItem.addSubItem(17, 2131165631, "", this.themeDelegate);
            }
            if (this.currentEncryptedChat != null) {
                this.timeItem2 = this.headerItem.addSubItem(13, 2131165643, LocaleController.getString("SetTimer", 2131628313), this.themeDelegate);
            }
            this.clearHistoryItem = this.headerItem.addSubItem(15, 2131165682, LocaleController.getString("ClearHistory", 2131625154), this.themeDelegate);
            if (this.themeDelegate.isThemeChangeAvailable()) {
                this.headerItem.addSubItem(27, 2131165688, LocaleController.getString("ChangeColors", 2131624863), this.themeDelegate);
            }
            if (ChatObject.isChannel(this.currentChat)) {
                TLRPC$Chat tLRPC$Chat5 = this.currentChat;
                if (!tLRPC$Chat5.creator) {
                    if (!ChatObject.isNotInChat(tLRPC$Chat5)) {
                        if (this.currentChat.megagroup) {
                            this.headerItem.addSubItem(16, 2131165775, LocaleController.getString("LeaveMegaMenu", 2131626442), this.themeDelegate);
                        } else {
                            this.headerItem.addSubItem(16, 2131165775, LocaleController.getString("LeaveChannelMenu", 2131626434), this.themeDelegate);
                        }
                    }
                    tLRPC$User2 = this.currentUser;
                    if (tLRPC$User2 != null && tLRPC$User2.self) {
                        this.headerItem.addSubItem(24, 2131165762, LocaleController.getString("AddShortcut", 2131624289), this.themeDelegate);
                    }
                    tLRPC$User3 = this.currentUser;
                    if (tLRPC$User3 != null && this.currentEncryptedChat == null && tLRPC$User3.bot) {
                        this.headerItem.addSubItem(31, 2131165940, LocaleController.getString("BotSettings", 2131624744), this.themeDelegate);
                        this.headerItem.addSubItem(30, 2131165758, LocaleController.getString("BotHelp", 2131624726), this.themeDelegate);
                        updateBotButtons();
                    }
                }
            }
            if (!ChatObject.isChannel(this.currentChat)) {
                if (this.currentChat != null) {
                    this.headerItem.addSubItem(16, 2131165775, LocaleController.getString("DeleteAndExit", 2131625398), this.themeDelegate);
                } else {
                    this.headerItem.addSubItem(16, 2131165702, LocaleController.getString("DeleteChatUser", 2131625413), this.themeDelegate);
                }
            }
            tLRPC$User2 = this.currentUser;
            if (tLRPC$User2 != null) {
                this.headerItem.addSubItem(24, 2131165762, LocaleController.getString("AddShortcut", 2131624289), this.themeDelegate);
            }
            tLRPC$User3 = this.currentUser;
            if (tLRPC$User3 != null) {
                this.headerItem.addSubItem(31, 2131165940, LocaleController.getString("BotSettings", 2131624744), this.themeDelegate);
                this.headerItem.addSubItem(30, 2131165758, LocaleController.getString("BotHelp", 2131624726), this.themeDelegate);
                updateBotButtons();
            }
        }
        ActionBarMenu actionBarMenu2 = actionBarMenu;
        actionBarMenu2.setVisibility(this.inMenuMode ? 8 : 0);
        updateTitle();
        this.avatarContainer.updateOnlineCount();
        this.avatarContainer.updateSubtitle();
        updateTitleIcons();
        if (this.chatMode == 0 && !isThreadChat() && this.reportType < 0) {
            ActionBarMenuItem allowCloseAnimation = actionBarMenu2.addItem(14, 2131165453, this.themeDelegate).setOverrideMenuClick(true).setAllowCloseAnimation(false);
            this.attachItem = allowCloseAnimation;
            allowCloseAnimation.setContentDescription(LocaleController.getString("AccDescrMoreOptions", 2131624003));
            this.attachItem.setVisibility(8);
        }
        this.actionModeViews.clear();
        if (this.inPreviewMode) {
            ActionBarMenuItem actionBarMenuItem = this.headerItem;
            if (actionBarMenuItem != null) {
                actionBarMenuItem.setAlpha(0.0f);
            }
            ActionBarMenuItem actionBarMenuItem2 = this.attachItem;
            if (actionBarMenuItem2 != null) {
                actionBarMenuItem2.setAlpha(0.0f);
            }
        }
        ActionBarMenu createActionMode = this.actionBar.createActionMode();
        NumberTextView numberTextView = new NumberTextView(createActionMode.getContext());
        this.selectedMessagesCountTextView = numberTextView;
        numberTextView.setTextSize(18);
        this.selectedMessagesCountTextView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
        this.selectedMessagesCountTextView.setTextColor(getThemedColor("actionBarActionModeDefaultIcon"));
        createActionMode.addView(this.selectedMessagesCountTextView, LayoutHelper.createLinear(0, -1, 1.0f, 65, 0, 0, 0));
        this.selectedMessagesCountTextView.setOnTouchListener(ChatActivity$$ExternalSyntheticLambda108.INSTANCE);
        if (this.currentEncryptedChat == null) {
            this.actionModeViews.add(createActionMode.addItemWithWidth(25, 2131165709, AndroidUtilities.dp(54.0f), LocaleController.getString("SaveToMusic", 2131628137)));
            this.actionModeViews.add(createActionMode.addItemWithWidth(23, 2131165714, AndroidUtilities.dp(54.0f), LocaleController.getString("Edit", 2131625553)));
            this.actionModeViews.add(createActionMode.addItemWithWidth(22, 2131165728, AndroidUtilities.dp(54.0f), LocaleController.getString("AddToFavorites", 2131624300)));
            this.actionModeViews.add(createActionMode.addItemWithWidth(10, 2131165697, AndroidUtilities.dp(54.0f), LocaleController.getString("Copy", 2131625272)));
            this.actionModeViews.add(createActionMode.addItemWithWidth(11, 2131165741, AndroidUtilities.dp(54.0f), LocaleController.getString("Forward", 2131625981)));
            this.actionModeViews.add(createActionMode.addItemWithWidth(12, 2131165702, AndroidUtilities.dp(54.0f), LocaleController.getString("Delete", 2131625384)));
        } else {
            this.actionModeViews.add(createActionMode.addItemWithWidth(23, 2131165714, AndroidUtilities.dp(54.0f), LocaleController.getString("Edit", 2131625553)));
            this.actionModeViews.add(createActionMode.addItemWithWidth(22, 2131165728, AndroidUtilities.dp(54.0f), LocaleController.getString("AddToFavorites", 2131624300)));
            this.actionModeViews.add(createActionMode.addItemWithWidth(10, 2131165697, AndroidUtilities.dp(54.0f), LocaleController.getString("Copy", 2131625272)));
            this.actionModeViews.add(createActionMode.addItemWithWidth(12, 2131165702, AndroidUtilities.dp(54.0f), LocaleController.getString("Delete", 2131625384)));
        }
        createActionMode.getItem(23).setVisibility((this.canEditMessagesCount == 1 && this.selectedMessagesIds[0].size() + this.selectedMessagesIds[1].size() == 1) ? 0 : 8);
        createActionMode.getItem(10).setVisibility((getMessagesController().isChatNoForwards(this.currentChat) || this.selectedMessagesCanCopyIds[0].size() + this.selectedMessagesCanCopyIds[1].size() == 0) ? 8 : 0);
        createActionMode.getItem(22).setVisibility(this.selectedMessagesCanStarIds[0].size() + this.selectedMessagesCanStarIds[1].size() != 0 ? 0 : 8);
        createActionMode.getItem(12).setVisibility(this.cantDeleteMessagesCount == 0 ? 0 : 8);
        checkActionBarMenu(false);
        this.scrimPaint = new Paint();
        AnonymousClass13 anonymousClass13 = new AnonymousClass13(context, this.parentLayout, context);
        this.fragmentView = anonymousClass13;
        AnonymousClass13 anonymousClass132 = anonymousClass13;
        this.contentView = anonymousClass132;
        anonymousClass132.needBlur = true;
        anonymousClass132.needBlurBottom = true;
        if (this.inBubbleMode) {
            anonymousClass132.setOccupyStatusBar(false);
        }
        this.contentView.setBackgroundImage(Theme.getCachedWallpaper(), Theme.isWallpaperMotion());
        FrameLayout frameLayout = new FrameLayout(context);
        this.emptyViewContainer = frameLayout;
        frameLayout.setVisibility(4);
        this.contentView.addView(this.emptyViewContainer, LayoutHelper.createFrame(-1, -2, 17));
        this.emptyViewContainer.setOnTouchListener(ChatActivity$$ExternalSyntheticLambda107.INSTANCE);
        int i9 = getArguments().getInt("nearby_distance", -1);
        if ((i9 >= 0 || this.preloadedGreetingsSticker != null) && this.currentUser != null && !this.userBlocked) {
            f = 2.0f;
            f2 = 14.0f;
            ChatGreetingsView chatGreetingsView = new ChatGreetingsView(context, this.currentUser, i9, this.currentAccount, this.preloadedGreetingsSticker, this.themeDelegate);
            this.greetingsViewContainer = chatGreetingsView;
            chatGreetingsView.setListener(new ChatActivity$$ExternalSyntheticLambda242(this));
            this.greetingsViewContainer.setBackground(Theme.createServiceDrawable(AndroidUtilities.dp(10.0f), this.greetingsViewContainer, this.contentView, getThemedPaint("paintChatActionBackground")));
            this.emptyViewContainer.addView(this.greetingsViewContainer, LayoutHelper.createFrame(-1, -2.0f, 16, 68.0f, 0.0f, 68.0f, 0.0f));
        } else {
            f2 = 14.0f;
            f = 2.0f;
            if (this.currentEncryptedChat == null) {
                if (!isThreadChat() && this.chatMode == 0 && (((tLRPC$User = this.currentUser) != null && tLRPC$User.self) || ((tLRPC$Chat3 = this.currentChat) != null && tLRPC$Chat3.creator && !ChatObject.isChannelAndNotMegaGroup(tLRPC$Chat3)))) {
                    ChatBigEmptyView chatBigEmptyView = new ChatBigEmptyView(context, this.contentView, this.currentChat != null ? 1 : 2, this.themeDelegate);
                    this.bigEmptyView = chatBigEmptyView;
                    this.emptyViewContainer.addView(chatBigEmptyView, new FrameLayout.LayoutParams(-2, -2, 17));
                    if (this.currentChat != null) {
                        this.bigEmptyView.setStatusText(AndroidUtilities.replaceTags(LocaleController.getString("GroupEmptyTitle1", 2131626142)));
                    }
                } else {
                    if (isThreadChat()) {
                        if (this.isComments) {
                            str = LocaleController.getString("NoComments", 2131626866);
                        } else {
                            str = LocaleController.getString("NoReplies", 2131626909);
                        }
                    } else if (this.chatMode == 1) {
                        str = LocaleController.getString("NoScheduledMessages", 2131626914);
                    } else {
                        TLRPC$User tLRPC$User5 = this.currentUser;
                        if (tLRPC$User5 != null) {
                            long j2 = tLRPC$User5.id;
                            if (j2 != 777000 && j2 != 429000 && j2 != 4244000 && MessagesController.isSupportUser(tLRPC$User5)) {
                                str = LocaleController.getString("GotAQuestion", 2131626129);
                            }
                        }
                        TLRPC$User tLRPC$User6 = this.currentUser;
                        str = (tLRPC$User6 == null || tLRPC$User6.self || tLRPC$User6.deleted || this.userBlocked) ? LocaleController.getString("NoMessages", 2131626889) : null;
                    }
                    if (str == null) {
                        ChatGreetingsView chatGreetingsView2 = new ChatGreetingsView(context, this.currentUser, i9, this.currentAccount, this.preloadedGreetingsSticker, this.themeDelegate);
                        this.greetingsViewContainer = chatGreetingsView2;
                        chatGreetingsView2.setListener(new ChatActivity$$ExternalSyntheticLambda243(this));
                        this.greetingsViewContainer.setBackground(Theme.createServiceDrawable(AndroidUtilities.dp(10.0f), this.greetingsViewContainer, this.contentView, getThemedPaint("paintChatActionBackground")));
                        this.emptyViewContainer.addView(this.greetingsViewContainer, LayoutHelper.createFrame(-1, -2.0f, 16, 68.0f, 0.0f, 68.0f, 0.0f));
                    } else {
                        TextView textView = new TextView(context);
                        this.emptyView = textView;
                        textView.setText(str);
                        this.emptyView.setTextSize(1, 14.0f);
                        this.emptyView.setGravity(17);
                        this.emptyView.setTextColor(getThemedColor("chat_serviceText"));
                        this.emptyView.setBackground(Theme.createServiceDrawable(AndroidUtilities.dp(6.0f), this.emptyView, this.contentView, getThemedPaint("paintChatActionBackground")));
                        this.emptyView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
                        this.emptyView.setPadding(AndroidUtilities.dp(10.0f), AndroidUtilities.dp(2.0f), AndroidUtilities.dp(10.0f), AndroidUtilities.dp(3.0f));
                        this.emptyViewContainer.addView(this.emptyView, new FrameLayout.LayoutParams(-2, -2, 17));
                    }
                }
            } else {
                this.bigEmptyView = new ChatBigEmptyView(context, this.contentView, 0, this.themeDelegate);
                if (this.currentEncryptedChat.admin_id == getUserConfig().getClientUserId()) {
                    this.bigEmptyView.setStatusText(LocaleController.formatString("EncryptedPlaceholderTitleOutgoing", 2131625673, UserObject.getFirstName(this.currentUser)));
                } else {
                    this.bigEmptyView.setStatusText(LocaleController.formatString("EncryptedPlaceholderTitleIncoming", 2131625672, UserObject.getFirstName(this.currentUser)));
                }
                this.emptyViewContainer.addView(this.bigEmptyView, new FrameLayout.LayoutParams(-2, -2, 17));
            }
        }
        ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        if (chatActivityEnterView != null) {
            chatActivityEnterView.onDestroy();
            if (!this.chatActivityEnterView.isEditingMessage()) {
                charSequence = this.chatActivityEnterView.getFieldText();
                mentionsContainerView = this.mentionContainer;
                if (mentionsContainerView != null && mentionsContainerView.getAdapter() != null) {
                    this.mentionContainer.getAdapter().onDestroy();
                }
                anonymousClass14 = new AnonymousClass14(context, this.themeDelegate);
                this.chatListView = anonymousClass14;
                if (this.currentEncryptedChat != null && Build.VERSION.SDK_INT >= 19) {
                    anonymousClass14.setImportantForAccessibility(4);
                }
                this.chatListView.setAccessibilityEnabled(false);
                this.chatListView.setNestedScrollingEnabled(false);
                this.chatListView.setInstantClick(true);
                this.chatListView.setDisableHighlightState(true);
                this.chatListView.setTag(1);
                this.chatListView.setVerticalScrollBarEnabled(!SharedConfig.chatBlurEnabled());
                RecyclerListView recyclerListView = this.chatListView;
                ChatActivityAdapter chatActivityAdapter = new ChatActivityAdapter(context);
                this.chatAdapter = chatActivityAdapter;
                recyclerListView.setAdapter(chatActivityAdapter);
                this.chatListView.setClipToPadding(false);
                this.chatListView.setAnimateEmptyView(true, 1);
                this.chatListView.setScrollBarStyle(33554432);
                this.chatListViewPaddingTop = 0.0f;
                invalidateChatListViewTopPadding();
                if (MessagesController.getGlobalMainSettings().getBoolean("view_animations", true)) {
                    this.chatListItemAnimator = new AnonymousClass15(this, this.chatListView, this.themeDelegate);
                }
                AnonymousClass16 anonymousClass16 = new AnonymousClass16(context, 1000, 1, true);
                this.chatLayoutManager = anonymousClass16;
                anonymousClass16.setSpanSizeLookup(new AnonymousClass17());
                this.chatListView.setLayoutManager(this.chatLayoutManager);
                this.chatListView.addItemDecoration(new AnonymousClass18(this));
                this.contentView.addView(this.chatListView, LayoutHelper.createFrame(-1, -1.0f));
                this.chatListView.setOnItemLongClickListener(this.onItemLongClickListener);
                this.chatListView.setOnItemClickListener(this.onItemClickListener);
                this.chatListView.setOnScrollListener(new AnonymousClass19());
                ClippingImageView clippingImageView = new ClippingImageView(context);
                this.animatingImageView = clippingImageView;
                clippingImageView.setVisibility(8);
                this.contentView.addView(this.animatingImageView, LayoutHelper.createFrame(-1, -1.0f));
                FrameLayout frameLayout2 = new FrameLayout(context);
                this.progressView = frameLayout2;
                frameLayout2.setVisibility(4);
                this.contentView.addView(this.progressView, LayoutHelper.createFrame(-1, -1, 51));
                View view = new View(context);
                this.progressView2 = view;
                view.setBackground(Theme.createServiceDrawable(AndroidUtilities.dp(18.0f), this.progressView2, this.contentView, getThemedPaint("paintChatActionBackground")));
                this.progressView.addView(this.progressView2, LayoutHelper.createFrame(36, 36, 17));
                RadialProgressView radialProgressView = new RadialProgressView(context, this.themeDelegate);
                this.progressBar = radialProgressView;
                radialProgressView.setSize(AndroidUtilities.dp(28.0f));
                this.progressBar.setProgressColor(getThemedColor("chat_serviceText"));
                this.progressView.addView(this.progressBar, LayoutHelper.createFrame(32, 32, 17));
                AnonymousClass20 anonymousClass20 = new AnonymousClass20(context, false, this.themeDelegate);
                this.floatingDateView = anonymousClass20;
                anonymousClass20.setCustomDate((int) (System.currentTimeMillis() / 1000), false, false);
                this.floatingDateView.setAlpha(0.0f);
                this.floatingDateView.setImportantForAccessibility(2);
                this.floatingDateView.setInvalidateColors(true);
                this.contentView.addView(this.floatingDateView, LayoutHelper.createFrame(-2, -2.0f, 49, 0.0f, 4.0f, 0.0f, 0.0f));
                this.floatingDateView.setOnClickListener(new ChatActivity$$ExternalSyntheticLambda79(this));
                tLRPC$Chat = this.currentChat;
                if (tLRPC$Chat != null) {
                    ChatActivityMemberRequestsDelegate chatActivityMemberRequestsDelegate = new ChatActivityMemberRequestsDelegate(this, tLRPC$Chat, new ChatActivity$$ExternalSyntheticLambda255(this));
                    this.pendingRequestsDelegate = chatActivityMemberRequestsDelegate;
                    chatActivityMemberRequestsDelegate.setChatInfo(this.chatInfo, false);
                    this.contentView.addView(this.pendingRequestsDelegate.getView(), -1, this.pendingRequestsDelegate.getViewHeight());
                }
                if (this.currentEncryptedChat != null) {
                    AnonymousClass21 anonymousClass21 = new AnonymousClass21(context, this.contentView);
                    this.pinnedMessageView = anonymousClass21;
                    anonymousClass21.setTag(1);
                    this.pinnedMessageEnterOffset = -AndroidUtilities.dp(50.0f);
                    this.pinnedMessageView.setVisibility(8);
                    this.pinnedMessageView.setBackgroundResource(2131165274);
                    this.pinnedMessageView.backgroundColor = getThemedColor("chat_topPanelBackground");
                    this.pinnedMessageView.backgroundPaddingBottom = AndroidUtilities.dp(f);
                    this.pinnedMessageView.getBackground().mutate().setColorFilter(new PorterDuffColorFilter(getThemedColor("chat_topPanelBackground"), PorterDuff.Mode.MULTIPLY));
                    this.contentView.addView(this.pinnedMessageView, LayoutHelper.createFrame(-1, 50, 51));
                    this.pinnedMessageView.setOnClickListener(new ChatActivity$$ExternalSyntheticLambda65(this));
                    this.pinnedMessageView.setEnabled(!isInPreviewMode());
                    View view2 = new View(context);
                    view2.setBackground(Theme.getSelectorDrawable(false));
                    this.pinnedMessageView.addView(view2, LayoutHelper.createFrame(-1, -1.0f, 51, 0.0f, 0.0f, 0.0f, 2.0f));
                    PinnedLineView pinnedLineView = new PinnedLineView(context, this.themeDelegate);
                    this.pinnedLineView = pinnedLineView;
                    this.pinnedMessageView.addView(pinnedLineView, LayoutHelper.createFrame(2, 48.0f, 51, 8.0f, 0.0f, 0.0f, 0.0f));
                    NumberTextView numberTextView2 = new NumberTextView(context);
                    this.pinnedCounterTextView = numberTextView2;
                    numberTextView2.setAddNumber();
                    this.pinnedCounterTextView.setTextSize(14);
                    this.pinnedCounterTextView.setTextColor(getThemedColor("chat_topPanelTitle"));
                    this.pinnedCounterTextView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
                    this.pinnedMessageView.addView(this.pinnedCounterTextView, LayoutHelper.createFrame(-1, 18.0f, 51, 18.0f, 7.0f, 44.0f, 0.0f));
                    for (int i10 = 0; i10 < 2; i10++) {
                        this.pinnedNameTextView[i10] = new TrackingWidthSimpleTextView(context);
                        this.pinnedNameTextView[i10].setTextSize(14);
                        this.pinnedNameTextView[i10].setTextColor(getThemedColor("chat_topPanelTitle"));
                        this.pinnedNameTextView[i10].setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
                        this.pinnedMessageView.addView(this.pinnedNameTextView[i10], LayoutHelper.createFrame(-1, 18.0f, 51, 18.0f, 7.3f, 44.0f, 0.0f));
                        this.pinnedMessageTextView[i10] = new AnonymousClass22(context);
                        this.pinnedMessageTextView[i10].setTextSize(14);
                        this.pinnedMessageTextView[i10].setTextColor(getThemedColor("chat_topPanelMessage"));
                        this.pinnedMessageView.addView(this.pinnedMessageTextView[i10], LayoutHelper.createFrame(-1, 18.0f, 51, 18.0f, 25.3f, 44.0f, 0.0f));
                        this.pinnedMessageButton[i10] = new PinnedMessageButton(this, context);
                        this.pinnedMessageView.addView(this.pinnedMessageButton[i10], LayoutHelper.createFrame(-2, 28.0f, 53, 0.0f, 10.0f, 14.0f, 0.0f));
                        this.pinnedMessageImageView[i10] = new BackupImageView(context);
                        this.pinnedMessageImageView[i10].setRoundRadius(AndroidUtilities.dp(f));
                        this.pinnedMessageView.addView(this.pinnedMessageImageView[i10], LayoutHelper.createFrame(32, 32.0f, 51, 17.0f, 8.0f, 0.0f, 0.0f));
                        if (i10 == 1) {
                            this.pinnedNameTextView[i10].setVisibility(4);
                            this.pinnedMessageButton[i10].setVisibility(4);
                            this.pinnedMessageTextView[i10].setVisibility(4);
                            this.pinnedMessageImageView[i10].setVisibility(4);
                        }
                    }
                    ImageView imageView = new ImageView(context);
                    this.pinnedListButton = imageView;
                    imageView.setImageResource(2131165867);
                    this.pinnedListButton.setColorFilter(new PorterDuffColorFilter(getThemedColor("chat_topPanelClose"), PorterDuff.Mode.MULTIPLY));
                    this.pinnedListButton.setScaleType(ImageView.ScaleType.CENTER);
                    this.pinnedListButton.setContentDescription(LocaleController.getString("AccPinnedMessagesList", 2131624116));
                    this.pinnedListButton.setVisibility(4);
                    this.pinnedListButton.setAlpha(0.0f);
                    this.pinnedListButton.setScaleX(0.4f);
                    this.pinnedListButton.setScaleY(0.4f);
                    int i11 = Build.VERSION.SDK_INT;
                    if (i11 >= 21) {
                        this.pinnedListButton.setBackgroundDrawable(Theme.createSelectorDrawable(getThemedColor("inappPlayerClose") & 436207615));
                    }
                    this.pinnedMessageView.addView(this.pinnedListButton, LayoutHelper.createFrame(36, 48.0f, 53, 0.0f, 0.0f, 7.0f, 0.0f));
                    this.pinnedListButton.setOnClickListener(new ChatActivity$$ExternalSyntheticLambda63(this));
                    ImageView imageView2 = new ImageView(context);
                    this.closePinned = imageView2;
                    imageView2.setImageResource(2131165619);
                    this.closePinned.setColorFilter(new PorterDuffColorFilter(getThemedColor("chat_topPanelClose"), PorterDuff.Mode.MULTIPLY));
                    this.closePinned.setScaleType(ImageView.ScaleType.CENTER);
                    this.closePinned.setContentDescription(LocaleController.getString("Close", 2131625183));
                    RadialProgressView radialProgressView2 = new RadialProgressView(context, this.themeDelegate);
                    this.pinnedProgress = radialProgressView2;
                    radialProgressView2.setVisibility(8);
                    this.pinnedProgress.setSize(AndroidUtilities.dp(16.0f));
                    f3 = 2.0f;
                    this.pinnedProgress.setStrokeWidth(2.0f);
                    this.pinnedProgress.setProgressColor(getThemedColor("chat_topPanelLine"));
                    this.pinnedMessageView.addView(this.pinnedProgress, LayoutHelper.createFrame(36, 48.0f, 53, 0.0f, 0.0f, 2.0f, 0.0f));
                    if (this.threadMessageId != 0) {
                        this.closePinned.setVisibility(8);
                    }
                    if (i11 >= 21) {
                        this.closePinned.setBackgroundDrawable(Theme.createSelectorDrawable(getThemedColor("inappPlayerClose") & 436207615, 1, AndroidUtilities.dp(f2)));
                    }
                    this.pinnedMessageView.addView(this.closePinned, LayoutHelper.createFrame(36, 48.0f, 53, 0.0f, 0.0f, 2.0f, 0.0f));
                    this.closePinned.setOnClickListener(new ChatActivity$$ExternalSyntheticLambda62(this));
                } else {
                    f3 = 2.0f;
                }
                AnonymousClass23 anonymousClass23 = new AnonymousClass23(context, this.contentView);
                this.topChatPanelView = anonymousClass23;
                anonymousClass23.backgroundColor = getThemedColor("chat_topPanelBackground");
                this.topChatPanelView.backgroundPaddingBottom = AndroidUtilities.dp(f3);
                this.topChatPanelView.setTag(1);
                this.topChatPanelViewOffset = -AndroidUtilities.dp(50.0f);
                invalidateChatListViewTopPadding();
                this.topChatPanelView.setVisibility(8);
                this.topChatPanelView.setBackgroundResource(2131165274);
                this.topChatPanelView.getBackground().setColorFilter(new PorterDuffColorFilter(getThemedColor("chat_topPanelBackground"), PorterDuff.Mode.MULTIPLY));
                this.contentView.addView(this.topChatPanelView, LayoutHelper.createFrame(-1, 50, 51));
                TextView textView2 = new TextView(context);
                this.reportSpamButton = textView2;
                textView2.setTextColor(getThemedColor("chat_reportSpam"));
                i = Build.VERSION.SDK_INT;
                if (i >= 21) {
                    this.reportSpamButton.setBackground(Theme.createSelectorDrawable(getThemedColor("chat_reportSpam") & 436207615, 3));
                }
                this.reportSpamButton.setTag("chat_reportSpam");
                this.reportSpamButton.setTextSize(1, f2);
                this.reportSpamButton.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
                this.reportSpamButton.setSingleLine(true);
                this.reportSpamButton.setMaxLines(1);
                this.reportSpamButton.setGravity(17);
                this.topChatPanelView.addView(this.reportSpamButton, LayoutHelper.createFrame(-1, -1.0f, 51, 0.0f, 0.0f, 0.0f, 1.0f));
                this.reportSpamButton.setOnClickListener(new ChatActivity$$ExternalSyntheticLambda80(this));
                TextView textView3 = new TextView(context);
                this.addToContactsButton = textView3;
                textView3.setTextColor(getThemedColor("chat_addContact"));
                this.addToContactsButton.setVisibility(8);
                this.addToContactsButton.setTextSize(1, f2);
                this.addToContactsButton.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
                this.addToContactsButton.setSingleLine(true);
                this.addToContactsButton.setMaxLines(1);
                this.addToContactsButton.setPadding(AndroidUtilities.dp(4.0f), 0, AndroidUtilities.dp(4.0f), 0);
                this.addToContactsButton.setGravity(17);
                if (i >= 21) {
                    this.addToContactsButton.setBackground(Theme.createSelectorDrawable(getThemedColor("chat_addContact") & 436207615, 3));
                }
                this.topChatPanelView.addView(this.addToContactsButton, LayoutHelper.createFrame(-1, -1.0f, 51, 0.0f, 0.0f, 0.0f, 1.0f));
                this.addToContactsButton.setOnClickListener(new ChatActivity$$ExternalSyntheticLambda87(this, context));
                ImageView imageView3 = new ImageView(context);
                this.closeReportSpam = imageView3;
                imageView3.setImageResource(2131165619);
                this.closeReportSpam.setContentDescription(LocaleController.getString("Close", 2131625183));
                if (i >= 21) {
                    this.closeReportSpam.setBackground(Theme.createSelectorDrawable(getThemedColor("chat_topPanelClose") & 436207615));
                }
                this.closeReportSpam.setColorFilter(new PorterDuffColorFilter(getThemedColor("chat_topPanelClose"), PorterDuff.Mode.MULTIPLY));
                this.closeReportSpam.setScaleType(ImageView.ScaleType.CENTER);
                this.topChatPanelView.addView(this.closeReportSpam, LayoutHelper.createFrame(36, 48.0f, 53, 0.0f, 0.0f, 2.0f, 0.0f));
                this.closeReportSpam.setOnClickListener(new ChatActivity$$ExternalSyntheticLambda76(this));
                FrameLayout frameLayout3 = new FrameLayout(context);
                this.alertView = frameLayout3;
                frameLayout3.setTag(1);
                this.alertView.setVisibility(8);
                this.alertView.setBackgroundResource(2131165274);
                this.alertView.getBackground().setColorFilter(new PorterDuffColorFilter(getThemedColor("chat_topPanelBackground"), PorterDuff.Mode.MULTIPLY));
                this.contentView.addView(this.alertView, LayoutHelper.createFrame(-1, 50, 51));
                TextView textView4 = new TextView(context);
                this.alertNameTextView = textView4;
                textView4.setTextSize(1, f2);
                this.alertNameTextView.setTextColor(getThemedColor("chat_topPanelTitle"));
                this.alertNameTextView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
                this.alertNameTextView.setSingleLine(true);
                this.alertNameTextView.setEllipsize(TextUtils.TruncateAt.END);
                this.alertNameTextView.setMaxLines(1);
                this.alertView.addView(this.alertNameTextView, LayoutHelper.createFrame(-2, -2.0f, 51, 8.0f, 5.0f, 8.0f, 0.0f));
                TextView textView5 = new TextView(context);
                this.alertTextView = textView5;
                textView5.setTextSize(1, f2);
                this.alertTextView.setTextColor(getThemedColor("chat_topPanelMessage"));
                this.alertTextView.setSingleLine(true);
                this.alertTextView.setEllipsize(TextUtils.TruncateAt.END);
                this.alertTextView.setMaxLines(1);
                this.alertView.addView(this.alertTextView, LayoutHelper.createFrame(-2, -2.0f, 51, 8.0f, 23.0f, 8.0f, 0.0f));
                FrameLayout frameLayout4 = new FrameLayout(context);
                this.pagedownButton = frameLayout4;
                frameLayout4.setVisibility(4);
                this.contentView.addView(this.pagedownButton, LayoutHelper.createFrame(66, 61.0f, 85, 0.0f, 0.0f, -3.0f, 5.0f));
                this.pagedownButton.setOnClickListener(new ChatActivity$$ExternalSyntheticLambda75(this));
                FrameLayout frameLayout5 = new FrameLayout(context);
                this.mentiondownButton = frameLayout5;
                frameLayout5.setVisibility(4);
                this.contentView.addView(this.mentiondownButton, LayoutHelper.createFrame(46, 61.0f, 85, 0.0f, 0.0f, 7.0f, 5.0f));
                this.mentiondownButton.setOnClickListener(new AnonymousClass24());
                this.mentiondownButton.setOnLongClickListener(new ChatActivity$$ExternalSyntheticLambda98(this));
                updateMessageListAccessibilityVisibility();
                FrameLayout frameLayout6 = new FrameLayout(context);
                this.reactionsMentiondownButton = frameLayout6;
                this.contentView.addView(frameLayout6, LayoutHelper.createFrame(46, 61.0f, 85, 0.0f, 0.0f, 7.0f, 5.0f));
                charSequence2 = charSequence;
                AnonymousClass25 anonymousClass25 = new AnonymousClass25(context, this.dialog_id, this.threadMessageId, this, this.themeDelegate);
                this.mentionContainer = anonymousClass25;
                this.contentView.addView(anonymousClass25, LayoutHelper.createFrame(-1, 110, 83));
                AnonymousClass26 anonymousClass26 = new AnonymousClass26();
                this.mentionContainer.getListView().setOnTouchListener(new ChatActivity$$ExternalSyntheticLambda106(this, anonymousClass26));
                if (ChatObject.isChannel(this.currentChat) || this.currentChat.megagroup) {
                    this.mentionContainer.getAdapter().setBotInfo(this.botInfo);
                }
                this.mentionContainer.getAdapter().setParentFragment(this);
                this.mentionContainer.getAdapter().setChatInfo(this.chatInfo);
                this.mentionContainer.getAdapter().setNeedUsernames(this.currentChat == null);
                this.mentionContainer.getAdapter().setNeedBotContext(true);
                this.mentionContainer.getAdapter().setBotsCount(this.currentChat == null ? this.botsCount : 1);
                MentionsContainerView.MentionsListView listView = this.mentionContainer.getListView();
                ChatActivity$$ExternalSyntheticLambda249 chatActivity$$ExternalSyntheticLambda249 = new ChatActivity$$ExternalSyntheticLambda249(this);
                this.mentionsOnItemClickListener = chatActivity$$ExternalSyntheticLambda249;
                listView.setOnItemClickListener(chatActivity$$ExternalSyntheticLambda249);
                this.mentionContainer.getListView().setOnItemLongClickListener(new ChatActivity$$ExternalSyntheticLambda252(this));
                ImageView imageView4 = new ImageView(context);
                this.pagedownButtonImage = imageView4;
                imageView4.setImageResource(2131166031);
                this.pagedownButtonImage.setScaleType(ImageView.ScaleType.CENTER);
                this.pagedownButtonImage.setColorFilter(new PorterDuffColorFilter(getThemedColor("chat_goDownButtonIcon"), PorterDuff.Mode.MULTIPLY));
                this.pagedownButtonImage.setPadding(0, AndroidUtilities.dp(2.0f), 0, 0);
                if (i < 21) {
                    this.pagedownButtonImage.setOutlineProvider(new AnonymousClass27(this));
                    drawable = Theme.createSimpleSelectorCircleDrawable(AndroidUtilities.dp(42.0f), getThemedColor("chat_goDownButton"), getThemedColor("listSelectorSDK21"));
                } else {
                    drawable = Theme.createCircleDrawable(AndroidUtilities.dp(42.0f), getThemedColor("chat_goDownButton"));
                }
                Drawable mutate = context.getResources().getDrawable(2131166032).mutate();
                mutate.setColorFilter(new PorterDuffColorFilter(getThemedColor("chat_goDownButtonShadow"), PorterDuff.Mode.MULTIPLY));
                CombinedDrawable combinedDrawable = new CombinedDrawable(mutate, drawable, 0, 0);
                combinedDrawable.setIconSize(AndroidUtilities.dp(42.0f), AndroidUtilities.dp(42.0f));
                this.pagedownButtonImage.setBackgroundDrawable(combinedDrawable);
                this.pagedownButton.addView(this.pagedownButtonImage, LayoutHelper.createFrame(46, 46, 81));
                this.pagedownButton.setContentDescription(LocaleController.getString("AccDescrPageDown", 2131624032));
                AnonymousClass28 anonymousClass28 = new AnonymousClass28(context, this.themeDelegate);
                this.pagedownButtonCounter = anonymousClass28;
                anonymousClass28.setReverse(true);
                this.pagedownButton.addView(this.pagedownButtonCounter, LayoutHelper.createFrame(-1, 28, 51));
                ImageView imageView5 = new ImageView(context);
                this.mentiondownButtonImage = imageView5;
                imageView5.setImageResource(2131165610);
                this.mentiondownButtonImage.setScaleType(ImageView.ScaleType.CENTER);
                this.mentiondownButtonImage.setColorFilter(new PorterDuffColorFilter(getThemedColor("chat_goDownButtonIcon"), PorterDuff.Mode.MULTIPLY));
                this.mentiondownButtonImage.setPadding(0, AndroidUtilities.dp(2.0f), 0, 0);
                if (i < 21) {
                    this.pagedownButtonImage.setOutlineProvider(new AnonymousClass29(this));
                    drawable2 = Theme.createSimpleSelectorCircleDrawable(AndroidUtilities.dp(42.0f), getThemedColor("chat_goDownButton"), getThemedColor("listSelectorSDK21"));
                } else {
                    drawable2 = Theme.createCircleDrawable(AndroidUtilities.dp(42.0f), getThemedColor("chat_goDownButton"));
                }
                Drawable mutate2 = context.getResources().getDrawable(2131166032).mutate();
                mutate2.setColorFilter(new PorterDuffColorFilter(getThemedColor("chat_goDownButtonShadow"), PorterDuff.Mode.MULTIPLY));
                CombinedDrawable combinedDrawable2 = new CombinedDrawable(mutate2, drawable2, 0, 0);
                combinedDrawable2.setIconSize(AndroidUtilities.dp(42.0f), AndroidUtilities.dp(42.0f));
                this.mentiondownButtonImage.setBackgroundDrawable(combinedDrawable2);
                this.mentiondownButton.addView(this.mentiondownButtonImage, LayoutHelper.createFrame(46, 46, 83));
                SimpleTextView simpleTextView = new SimpleTextView(context);
                this.mentiondownButtonCounter = simpleTextView;
                simpleTextView.setVisibility(4);
                this.mentiondownButtonCounter.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
                this.mentiondownButtonCounter.setTextSize(13);
                this.mentiondownButtonCounter.setTextColor(getThemedColor("chat_goDownButtonCounter"));
                this.mentiondownButtonCounter.setGravity(17);
                this.mentiondownButtonCounter.setBackgroundDrawable(Theme.createRoundRectDrawable(AndroidUtilities.dp(11.5f), getThemedColor("chat_goDownButtonCounterBackground")));
                this.mentiondownButtonCounter.setMinWidth(AndroidUtilities.dp(23.0f));
                this.mentiondownButtonCounter.setPadding(AndroidUtilities.dp(8.0f), AndroidUtilities.dp(1.0f), AndroidUtilities.dp(8.0f), 0);
                this.mentiondownButton.addView(this.mentiondownButtonCounter, LayoutHelper.createFrame(-2, 23, 49));
                this.mentiondownButton.setContentDescription(LocaleController.getString("AccDescrMentionDown", 2131624000));
                this.reactionsMentiondownButton.setOnClickListener(new ChatActivity$$ExternalSyntheticLambda60(this));
                this.reactionsMentiondownButton.setOnLongClickListener(new ChatActivity$$ExternalSyntheticLambda99(this));
                this.reactionsMentiondownButton.setVisibility(4);
                ImageView imageView6 = new ImageView(context);
                this.reactionsMentiondownButtonImage = imageView6;
                imageView6.setImageResource(2131166111);
                this.reactionsMentiondownButtonImage.setScaleType(ImageView.ScaleType.CENTER);
                this.reactionsMentiondownButtonImage.setColorFilter(new PorterDuffColorFilter(getThemedColor("chat_goDownButtonIcon"), PorterDuff.Mode.MULTIPLY));
                if (i < 21) {
                    this.reactionsMentiondownButtonImage.setOutlineProvider(new AnonymousClass30(this));
                    drawable3 = Theme.createSimpleSelectorCircleDrawable(AndroidUtilities.dp(42.0f), getThemedColor("chat_goDownButton"), getThemedColor("listSelectorSDK21"));
                } else {
                    drawable3 = Theme.createCircleDrawable(AndroidUtilities.dp(42.0f), getThemedColor("chat_goDownButton"));
                }
                Drawable mutate3 = context.getResources().getDrawable(2131166032).mutate();
                mutate3.setColorFilter(new PorterDuffColorFilter(getThemedColor("chat_goDownButtonShadow"), PorterDuff.Mode.MULTIPLY));
                CombinedDrawable combinedDrawable3 = new CombinedDrawable(mutate3, drawable3, 0, 0);
                combinedDrawable3.setIconSize(AndroidUtilities.dp(42.0f), AndroidUtilities.dp(42.0f));
                this.reactionsMentiondownButtonImage.setBackgroundDrawable(combinedDrawable3);
                this.reactionsMentiondownButton.addView(this.reactionsMentiondownButtonImage, LayoutHelper.createFrame(46, 46, 83));
                CounterView counterView = new CounterView(context, this.themeDelegate);
                this.reactionsMentiondownButtonCounter = counterView;
                this.reactionsMentiondownButton.addView(counterView, LayoutHelper.createFrame(-1, 28, 51));
                this.reactionsMentiondownButton.setContentDescription(LocaleController.getString("AccDescrReactionMentionDown", 2131624051));
                this.fragmentLocationContextView = new FragmentContextView(context, this, true, this.themeDelegate);
                this.fragmentContextView = new AnonymousClass31(context, this, false, this.themeDelegate);
                this.contentView.addView(this.fragmentLocationContextView, LayoutHelper.createFrame(-1, 38.0f, 51, 0.0f, -36.0f, 0.0f, 0.0f));
                this.contentView.addView(this.fragmentContextView, LayoutHelper.createFrame(-1, 38.0f, 51, 0.0f, -36.0f, 0.0f, 0.0f));
                this.fragmentContextView.setAdditionalContextView(this.fragmentLocationContextView);
                this.fragmentLocationContextView.setAdditionalContextView(this.fragmentContextView);
                this.fragmentContextView.setEnabled(!this.inPreviewMode);
                this.fragmentLocationContextView.setEnabled(!this.inPreviewMode);
                if (this.chatMode != 0) {
                    this.fragmentContextView.setSupportsCalls(false);
                }
                RecyclerListView recyclerListView2 = new RecyclerListView(context, this.themeDelegate);
                this.messagesSearchListView = recyclerListView2;
                recyclerListView2.setBackgroundColor(getThemedColor("windowBackgroundWhite"));
                LinearLayoutManager linearLayoutManager = new LinearLayoutManager(context);
                linearLayoutManager.setOrientation(1);
                this.messagesSearchListView.setLayoutManager(linearLayoutManager);
                this.messagesSearchListView.setVisibility(8);
                this.messagesSearchListView.setAlpha(0.0f);
                RecyclerListView recyclerListView3 = this.messagesSearchListView;
                MessagesSearchAdapter messagesSearchAdapter = new MessagesSearchAdapter(context, this.themeDelegate);
                this.messagesSearchAdapter = messagesSearchAdapter;
                recyclerListView3.setAdapter(messagesSearchAdapter);
                this.contentView.addView(this.messagesSearchListView, LayoutHelper.createFrame(-1, -1.0f, 51, 0.0f, 0.0f, 0.0f, 48.0f));
                this.messagesSearchListView.setOnItemClickListener(new ChatActivity$$ExternalSyntheticLambda248(this));
                this.messagesSearchListView.setOnScrollListener(new AnonymousClass32(linearLayoutManager));
                AnonymousClass33 anonymousClass33 = new AnonymousClass33(context, this, true, this.themeDelegate);
                this.topUndoView = anonymousClass33;
                this.contentView.addView(anonymousClass33, LayoutHelper.createFrame(-1, -2.0f, 51, 8.0f, 8.0f, 8.0f, 0.0f));
                this.contentView.addView(this.actionBar);
                View view3 = new View(context);
                this.overlayView = view3;
                view3.setOnTouchListener(new ChatActivity$$ExternalSyntheticLambda102(this));
                this.contentView.addView(this.overlayView, LayoutHelper.createFrame(-1, -1, 51));
                this.overlayView.setVisibility(8);
                this.contentView.setClipChildren(false);
                InstantCameraView instantCameraView = new InstantCameraView(context, this, this.themeDelegate);
                this.instantCameraView = instantCameraView;
                this.contentView.addView(instantCameraView, LayoutHelper.createFrame(-1, -1, 51));
                AnonymousClass34 anonymousClass34 = new AnonymousClass34(context, this.contentView);
                this.bottomMessagesActionContainer = anonymousClass34;
                anonymousClass34.drawBlur = false;
                anonymousClass34.isTopView = false;
                anonymousClass34.setVisibility(4);
                this.bottomMessagesActionContainer.setWillNotDraw(false);
                this.bottomMessagesActionContainer.setPadding(0, AndroidUtilities.dp(2.0f), 0, 0);
                this.contentView.addView(this.bottomMessagesActionContainer, LayoutHelper.createFrame(-1, 51, 80));
                this.bottomMessagesActionContainer.setOnTouchListener(ChatActivity$$ExternalSyntheticLambda109.INSTANCE);
                AnonymousClass35 anonymousClass35 = new AnonymousClass35(getParentActivity(), this.contentView, this, true, this.themeDelegate);
                this.chatActivityEnterView = anonymousClass35;
                anonymousClass35.setDelegate(new AnonymousClass36(actionBarMenu2));
                this.chatActivityEnterView.setDialogId(this.dialog_id, this.currentAccount);
                tLRPC$ChatFull = this.chatInfo;
                if (tLRPC$ChatFull != null) {
                    this.chatActivityEnterView.setChatInfo(tLRPC$ChatFull);
                }
                this.chatActivityEnterView.setId(1000);
                this.chatActivityEnterView.setBotsCount(this.botsCount, this.hasBotsCommands, false);
                this.chatActivityEnterView.updateBotWebView(false);
                this.chatActivityEnterView.setMinimumHeight(AndroidUtilities.dp(51.0f));
                ChatActivityEnterView chatActivityEnterView2 = this.chatActivityEnterView;
                TLRPC$EncryptedChat tLRPC$EncryptedChat2 = this.currentEncryptedChat;
                chatActivityEnterView2.setAllowStickersAndGifs(true, true, tLRPC$EncryptedChat2 != null || AndroidUtilities.getPeerLayerVersion(tLRPC$EncryptedChat2.layer) >= 46);
                if (this.inPreviewMode) {
                    this.chatActivityEnterView.setVisibility(4);
                }
                if (ChatObject.isChannel(this.currentChat) || this.currentChat.megagroup) {
                    this.chatActivityEnterView.setBotInfo(this.botInfo, false);
                }
                SizeNotifierFrameLayout sizeNotifierFrameLayout = this.contentView;
                sizeNotifierFrameLayout.addView(this.chatActivityEnterView, sizeNotifierFrameLayout.getChildCount() - 1, LayoutHelper.createFrame(-1, -2, 83));
                this.chatActivityEnterView.checkChannelRights();
                this.chatActivityEnterTopView = new AnonymousClass37(context);
                View view4 = new View(context);
                this.replyLineView = view4;
                view4.setBackgroundColor(getThemedColor("chat_replyPanelLine"));
                this.chatActivityEnterView.addTopView(this.chatActivityEnterTopView, this.replyLineView, 48);
                FrameLayout frameLayout7 = new FrameLayout(context);
                this.chatActivityEnterTopView.addReplyView(frameLayout7, LayoutHelper.createFrame(-1, -1.0f, 0, 0.0f, 0.0f, 52.0f, 0.0f));
                frameLayout7.setOnClickListener(new ChatActivity$$ExternalSyntheticLambda81(this));
                ImageView imageView7 = new ImageView(context);
                this.replyIconImageView = imageView7;
                imageView7.setColorFilter(new PorterDuffColorFilter(getThemedColor("chat_replyPanelIcons"), PorterDuff.Mode.MULTIPLY));
                this.replyIconImageView.setScaleType(ImageView.ScaleType.CENTER);
                frameLayout7.addView(this.replyIconImageView, LayoutHelper.createFrame(52, 46, 51));
                ImageView imageView8 = new ImageView(context);
                this.replyCloseImageView = imageView8;
                imageView8.setColorFilter(new PorterDuffColorFilter(getThemedColor("chat_replyPanelClose"), PorterDuff.Mode.MULTIPLY));
                this.replyCloseImageView.setImageResource(2131165532);
                this.replyCloseImageView.setScaleType(ImageView.ScaleType.CENTER);
                if (i >= 21) {
                    this.replyCloseImageView.setBackgroundDrawable(Theme.createSelectorDrawable(getThemedColor("inappPlayerClose") & 436207615, 1, AndroidUtilities.dp(18.0f)));
                }
                this.chatActivityEnterTopView.addView(this.replyCloseImageView, LayoutHelper.createFrame(52, 46.0f, 53, 0.0f, 0.5f, 0.0f, 0.0f));
                this.replyCloseImageView.setOnClickListener(new ChatActivity$$ExternalSyntheticLambda68(this));
                SimpleTextView simpleTextView2 = new SimpleTextView(context);
                this.replyNameTextView = simpleTextView2;
                simpleTextView2.setTextSize(14);
                this.replyNameTextView.setTextColor(getThemedColor("chat_replyPanelName"));
                this.replyNameTextView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
                frameLayout7.addView(this.replyNameTextView, LayoutHelper.createFrame(-1, 18.0f, 51, 52.0f, 6.0f, 0.0f, 0.0f));
                SimpleTextView simpleTextView3 = new SimpleTextView(context);
                this.replyObjectTextView = simpleTextView3;
                simpleTextView3.setTextSize(14);
                this.replyObjectTextView.setTextColor(getThemedColor("windowBackgroundWhiteGrayText"));
                frameLayout7.addView(this.replyObjectTextView, LayoutHelper.createFrame(-1, 18.0f, 51, 52.0f, 24.0f, 0.0f, 0.0f));
                SimpleTextView simpleTextView4 = new SimpleTextView(context);
                this.replyObjectHintTextView = simpleTextView4;
                simpleTextView4.setTextSize(14);
                this.replyObjectHintTextView.setTextColor(getThemedColor("windowBackgroundWhiteGrayText"));
                this.replyObjectHintTextView.setText(LocaleController.getString("TapForForwardingOptions", 2131628600));
                this.replyObjectHintTextView.setAlpha(0.0f);
                frameLayout7.addView(this.replyObjectHintTextView, LayoutHelper.createFrame(-1, 18.0f, 51, 52.0f, 24.0f, 0.0f, 0.0f));
                BackupImageView backupImageView = new BackupImageView(context);
                this.replyImageView = backupImageView;
                backupImageView.setRoundRadius(AndroidUtilities.dp(2.0f));
                frameLayout7.addView(this.replyImageView, LayoutHelper.createFrame(34, 34.0f, 51, 52.0f, 6.0f, 0.0f, 0.0f));
                FrameLayout frameLayout8 = new FrameLayout(context);
                this.stickersPanel = frameLayout8;
                frameLayout8.setVisibility(8);
                this.contentView.addView(this.stickersPanel, LayoutHelper.createFrame(-2, 81.5f, 83, 0.0f, 0.0f, 0.0f, 38.0f));
                ChatActivityEnterTopView.EditView editView = new ChatActivityEnterTopView.EditView(context);
                editView.setMotionEventSplittingEnabled(false);
                editView.setOrientation(0);
                editView.setOnClickListener(new ChatActivity$$ExternalSyntheticLambda66(this));
                this.chatActivityEnterTopView.addEditView(editView, LayoutHelper.createFrame(-1, -1.0f, 0, 0.0f, 0.0f, 48.0f, 0.0f));
                i2 = 0;
                while (i2 < 2) {
                    boolean z2 = i2 == 0;
                    AnonymousClass38 anonymousClass38 = new AnonymousClass38(context, z2);
                    anonymousClass38.setOrientation(0);
                    ViewHelper.setPadding(anonymousClass38, 10.0f, 0.0f, 10.0f, 0.0f);
                    editView.addButton(anonymousClass38, LayoutHelper.createLinear(-2, -1));
                    ImageView imageView9 = new ImageView(context);
                    imageView9.setScaleType(ImageView.ScaleType.CENTER);
                    imageView9.setImageResource(z2 ? 2131165861 : 2131165900);
                    anonymousClass38.addImageView(imageView9, LayoutHelper.createLinear(24, -1));
                    anonymousClass38.addView(new Space(context), LayoutHelper.createLinear(10, -1));
                    TextView textView6 = new TextView(context);
                    textView6.setMaxLines(1);
                    textView6.setSingleLine(true);
                    textView6.setTextSize(1, 14.0f);
                    textView6.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
                    textView6.setGravity(19);
                    textView6.setEllipsize(TextUtils.TruncateAt.END);
                    anonymousClass38.addTextView(textView6, LayoutHelper.createLinear(-2, -1));
                    anonymousClass38.updateColors();
                    anonymousClass38.setOnClickListener(new ChatActivity$$ExternalSyntheticLambda91(this, anonymousClass38, frameLayout7));
                    i2++;
                }
                AnonymousClass39 anonymousClass39 = new AnonymousClass39(context, this.themeDelegate, anonymousClass26);
                this.stickersListView = anonymousClass39;
                anonymousClass39.setTag(3);
                this.stickersListView.setOnTouchListener(new ChatActivity$$ExternalSyntheticLambda105(this, anonymousClass26));
                this.stickersListView.setDisallowInterceptTouchEvents(true);
                LinearLayoutManager linearLayoutManager2 = new LinearLayoutManager(context);
                linearLayoutManager2.setOrientation(0);
                this.stickersListView.setLayoutManager(linearLayoutManager2);
                this.stickersListView.setClipToPadding(false);
                this.stickersListView.setOverScrollMode(2);
                this.stickersPanel.addView(this.stickersListView, LayoutHelper.createFrame(-1, 78.0f));
                initStickers();
                ImageView imageView10 = new ImageView(context);
                this.stickersPanelArrow = imageView10;
                imageView10.setImageResource(2131166167);
                this.stickersPanelArrow.setColorFilter(new PorterDuffColorFilter(getThemedColor("chat_stickersHintPanel"), PorterDuff.Mode.MULTIPLY));
                this.stickersPanel.addView(this.stickersPanelArrow, LayoutHelper.createFrame(-2, -2.0f, 83, 53.0f, 0.0f, 53.0f, 0.0f));
                AnonymousClass40 anonymousClass40 = new AnonymousClass40(context, this.contentView);
                this.searchContainer = anonymousClass40;
                anonymousClass40.drawBlur = false;
                anonymousClass40.isTopView = false;
                anonymousClass40.setWillNotDraw(false);
                this.searchContainer.setVisibility(4);
                this.searchContainer.setPadding(0, AndroidUtilities.dp(3.0f), 0, 0);
                this.searchContainer.setClipToPadding(false);
                View view5 = new View(context);
                this.searchAsListTogglerView = view5;
                view5.setOnTouchListener(new ChatActivity$$ExternalSyntheticLambda104(this));
                i3 = Build.VERSION.SDK_INT;
                if (i3 >= 21) {
                    this.searchAsListTogglerView.setBackground(Theme.getSelectorDrawable(getThemedColor("actionBarActionModeDefaultSelector"), false));
                }
                this.searchAsListTogglerView.setOnClickListener(new ChatActivity$$ExternalSyntheticLambda70(this));
                this.searchContainer.addView(this.searchAsListTogglerView, LayoutHelper.createFrame(-1, -1.0f, 0, 0.0f, (Theme.chat_composeShadowDrawable.getIntrinsicHeight() / AndroidUtilities.density) - 3.0f, 0.0f, 0.0f));
                ImageView imageView11 = new ImageView(context);
                this.searchUpButton = imageView11;
                imageView11.setScaleType(ImageView.ScaleType.CENTER);
                this.searchUpButton.setImageResource(2131165749);
                this.searchUpButton.setColorFilter(new PorterDuffColorFilter(getThemedColor("chat_searchPanelIcons"), PorterDuff.Mode.MULTIPLY));
                this.searchUpButton.setBackgroundDrawable(Theme.createSelectorDrawable(getThemedColor("actionBarActionModeDefaultSelector"), 1));
                this.searchContainer.addView(this.searchUpButton, LayoutHelper.createFrame(48, 48.0f, 53, 0.0f, 0.0f, 48.0f, 0.0f));
                this.searchUpButton.setOnClickListener(new ChatActivity$$ExternalSyntheticLambda78(this));
                this.searchUpButton.setContentDescription(LocaleController.getString("AccDescrSearchNext", 2131624060));
                ImageView imageView12 = new ImageView(context);
                this.searchDownButton = imageView12;
                imageView12.setScaleType(ImageView.ScaleType.CENTER);
                this.searchDownButton.setImageResource(2131165748);
                this.searchDownButton.setColorFilter(new PorterDuffColorFilter(getThemedColor("chat_searchPanelIcons"), PorterDuff.Mode.MULTIPLY));
                this.searchDownButton.setBackgroundDrawable(Theme.createSelectorDrawable(getThemedColor("actionBarActionModeDefaultSelector"), 1));
                this.searchContainer.addView(this.searchDownButton, LayoutHelper.createFrame(48, 48.0f, 53, 0.0f, 0.0f, 0.0f, 0.0f));
                this.searchDownButton.setOnClickListener(new ChatActivity$$ExternalSyntheticLambda59(this));
                this.searchDownButton.setContentDescription(LocaleController.getString("AccDescrSearchPrev", 2131624061));
                tLRPC$Chat2 = this.currentChat;
                if (tLRPC$Chat2 != null && (!ChatObject.isChannel(tLRPC$Chat2) || this.currentChat.megagroup)) {
                    ImageView imageView13 = new ImageView(context);
                    this.searchUserButton = imageView13;
                    imageView13.setScaleType(ImageView.ScaleType.CENTER);
                    this.searchUserButton.setImageResource(2131165977);
                    this.searchUserButton.setColorFilter(new PorterDuffColorFilter(getThemedColor("chat_searchPanelIcons"), PorterDuff.Mode.MULTIPLY));
                    this.searchUserButton.setBackgroundDrawable(Theme.createSelectorDrawable(getThemedColor("actionBarActionModeDefaultSelector"), 1));
                    this.searchContainer.addView(this.searchUserButton, LayoutHelper.createFrame(48, 48.0f, 51, 48.0f, 0.0f, 0.0f, 0.0f));
                    this.searchUserButton.setOnClickListener(new ChatActivity$$ExternalSyntheticLambda77(this));
                    this.searchUserButton.setContentDescription(LocaleController.getString("AccDescrSearchByUser", 2131624059));
                }
                ImageView imageView14 = new ImageView(context);
                this.searchCalendarButton = imageView14;
                imageView14.setScaleType(ImageView.ScaleType.CENTER);
                this.searchCalendarButton.setImageResource(2131165661);
                this.searchCalendarButton.setColorFilter(new PorterDuffColorFilter(getThemedColor("chat_searchPanelIcons"), PorterDuff.Mode.MULTIPLY));
                this.searchCalendarButton.setBackgroundDrawable(Theme.createSelectorDrawable(getThemedColor("actionBarActionModeDefaultSelector"), 1));
                this.searchContainer.addView(this.searchCalendarButton, LayoutHelper.createFrame(48, 48, 51));
                this.searchCalendarButton.setOnClickListener(new ChatActivity$$ExternalSyntheticLambda64(this));
                this.searchCalendarButton.setContentDescription(LocaleController.getString("JumpToDate", 2131626382));
                SearchCounterView searchCounterView = new SearchCounterView(context, this.themeDelegate);
                this.searchCountText = searchCounterView;
                searchCounterView.setGravity(3);
                this.searchContainer.addView(this.searchCountText, LayoutHelper.createFrame(-2, -2.0f, 16, 0.0f, 0.0f, 108.0f, 0.0f));
                AnonymousClass42 anonymousClass42 = new AnonymousClass42(context);
                this.bottomOverlay = anonymousClass42;
                anonymousClass42.setWillNotDraw(false);
                this.bottomOverlay.setVisibility(4);
                this.bottomOverlay.setFocusable(true);
                this.bottomOverlay.setFocusableInTouchMode(true);
                this.bottomOverlay.setClickable(true);
                this.bottomOverlay.setPadding(0, AndroidUtilities.dp(2.0f), 0, 0);
                this.contentView.addView(this.bottomOverlay, LayoutHelper.createFrame(-1, 51, 80));
                TextView textView7 = new TextView(context);
                this.bottomOverlayText = textView7;
                textView7.setTextSize(1, 14.0f);
                this.bottomOverlayText.setGravity(17);
                this.bottomOverlayText.setMaxLines(2);
                this.bottomOverlayText.setEllipsize(TextUtils.TruncateAt.END);
                this.bottomOverlayText.setLineSpacing(AndroidUtilities.dp(2.0f), 1.0f);
                this.bottomOverlayText.setTextColor(getThemedColor("chat_secretChatStatusText"));
                this.bottomOverlay.addView(this.bottomOverlayText, LayoutHelper.createFrame(-2, -2.0f, 17, 14.0f, 0.0f, 14.0f, 0.0f));
                AnonymousClass43 anonymousClass43 = new AnonymousClass43(context, this.contentView);
                this.bottomOverlayChat = anonymousClass43;
                anonymousClass43.isTopView = false;
                anonymousClass43.drawBlur = false;
                anonymousClass43.setWillNotDraw(false);
                this.bottomOverlayChat.setPadding(0, AndroidUtilities.dp(1.5f), 0, 0);
                this.bottomOverlayChat.setVisibility(4);
                this.bottomOverlayChat.setClipChildren(false);
                this.contentView.addView(this.bottomOverlayChat, LayoutHelper.createFrame(-1, 51, 80));
                UnreadCounterTextView unreadCounterTextView = new UnreadCounterTextView(context);
                this.bottomOverlayChatText = unreadCounterTextView;
                this.bottomOverlayChat.addView(unreadCounterTextView, LayoutHelper.createFrame(-1, -1.0f, 0, 0.0f, 1.5f, 0.0f, 0.0f));
                this.bottomOverlayChatText.setOnClickListener(new ChatActivity$$ExternalSyntheticLambda86(this, context));
                RadialProgressView radialProgressView3 = new RadialProgressView(context, this.themeDelegate);
                this.bottomOverlayProgress = radialProgressView3;
                radialProgressView3.setSize(AndroidUtilities.dp(22.0f));
                this.bottomOverlayProgress.setProgressColor(getThemedColor("chat_fieldOverlayText"));
                this.bottomOverlayProgress.setVisibility(4);
                this.bottomOverlayProgress.setScaleX(0.1f);
                this.bottomOverlayProgress.setScaleY(0.1f);
                this.bottomOverlayProgress.setAlpha(1.0f);
                this.bottomOverlayChat.addView(this.bottomOverlayProgress, LayoutHelper.createFrame(30, 30, 17));
                this.bottomOverlayImage = new ImageView(context);
                int themedColor = getThemedColor("chat_fieldOverlayText");
                this.bottomOverlayImage.setImageResource(2131165758);
                this.bottomOverlayImage.setColorFilter(new PorterDuffColorFilter(themedColor, PorterDuff.Mode.MULTIPLY));
                this.bottomOverlayImage.setScaleType(ImageView.ScaleType.CENTER);
                if (i3 >= 21) {
                    this.bottomOverlayImage.setBackgroundDrawable(Theme.createSelectorDrawable(Color.argb(24, Color.red(themedColor), Color.green(themedColor), Color.blue(themedColor)), 1));
                }
                this.bottomOverlayChat.addView(this.bottomOverlayImage, LayoutHelper.createFrame(48, 48.0f, 53, 3.0f, 1.5f, 0.0f, 0.0f));
                this.bottomOverlayImage.setContentDescription(LocaleController.getString("SettingsHelp", 2131628326));
                this.bottomOverlayImage.setOnClickListener(new ChatActivity$$ExternalSyntheticLambda74(this));
                TextView textView8 = new TextView(context);
                this.replyButton = textView8;
                textView8.setText(LocaleController.getString("Reply", 2131627989));
                this.replyButton.setGravity(16);
                this.replyButton.setTextSize(1, 15.0f);
                this.replyButton.setPadding(AndroidUtilities.dp(14.0f), 0, AndroidUtilities.dp(21.0f), 0);
                this.replyButton.setBackgroundDrawable(Theme.createSelectorDrawable(getThemedColor("actionBarActionModeDefaultSelector"), 3));
                this.replyButton.setTextColor(getThemedColor("actionBarActionModeDefaultIcon"));
                this.replyButton.setCompoundDrawablePadding(AndroidUtilities.dp(7.0f));
                this.replyButton.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
                Drawable mutate4 = context.getResources().getDrawable(2131165541).mutate();
                mutate4.setColorFilter(new PorterDuffColorFilter(getThemedColor("actionBarActionModeDefaultIcon"), PorterDuff.Mode.MULTIPLY));
                this.replyButton.setCompoundDrawablesWithIntrinsicBounds(mutate4, (Drawable) null, (Drawable) null, (Drawable) null);
                this.replyButton.setOnClickListener(new ChatActivity$$ExternalSyntheticLambda58(this));
                this.bottomMessagesActionContainer.addView(this.replyButton, LayoutHelper.createFrame(-2, -1, 51));
                TextView textView9 = new TextView(context);
                this.forwardButton = textView9;
                textView9.setText(LocaleController.getString("Forward", 2131625981));
                this.forwardButton.setGravity(16);
                this.forwardButton.setTextSize(1, 15.0f);
                this.forwardButton.setPadding(AndroidUtilities.dp(21.0f), 0, AndroidUtilities.dp(21.0f), 0);
                this.forwardButton.setCompoundDrawablePadding(AndroidUtilities.dp(6.0f));
                this.forwardButton.setBackgroundDrawable(Theme.createSelectorDrawable(getThemedColor("actionBarActionModeDefaultSelector"), 3));
                this.forwardButton.setTextColor(getThemedColor("actionBarActionModeDefaultIcon"));
                this.forwardButton.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
                Drawable mutate5 = context.getResources().getDrawable(2131165534).mutate();
                mutate5.setColorFilter(new PorterDuffColorFilter(getThemedColor("actionBarActionModeDefaultIcon"), PorterDuff.Mode.MULTIPLY));
                this.forwardButton.setCompoundDrawablesWithIntrinsicBounds(mutate5, (Drawable) null, (Drawable) null, (Drawable) null);
                this.forwardButton.setOnClickListener(new ChatActivity$$ExternalSyntheticLambda73(this));
                this.bottomMessagesActionContainer.addView(this.forwardButton, LayoutHelper.createFrame(-2, -1, 53));
                this.contentView.addView(this.searchContainer, LayoutHelper.createFrame(-1, 51, 80));
                SizeNotifierFrameLayout sizeNotifierFrameLayout2 = this.contentView;
                MessageEnterTransitionContainer messageEnterTransitionContainer = new MessageEnterTransitionContainer(this.contentView, this.currentAccount);
                this.messageEnterTransitionContainer = messageEnterTransitionContainer;
                sizeNotifierFrameLayout2.addView(messageEnterTransitionContainer);
                UndoView undoView = new UndoView(context, this, false, this.themeDelegate);
                this.undoView = undoView;
                undoView.setAdditionalTranslationY(AndroidUtilities.dp(51.0f));
                this.contentView.addView(this.undoView, LayoutHelper.createFrame(-1, -2.0f, 83, 8.0f, 0.0f, 8.0f, 8.0f));
                if (this.currentChat != null) {
                    HintView hintView = new HintView(getParentActivity(), 2, this.themeDelegate);
                    this.slowModeHint = hintView;
                    hintView.setAlpha(0.0f);
                    this.slowModeHint.setVisibility(4);
                    this.contentView.addView(this.slowModeHint, LayoutHelper.createFrame(-2, -2.0f, 51, 19.0f, 0.0f, 19.0f, 0.0f));
                }
                this.chatAdapter.updateRowsSafe();
                if (this.loading || !this.messages.isEmpty()) {
                    z = false;
                    showProgressView(false);
                    this.chatListView.setEmptyView(this.emptyViewContainer);
                } else {
                    showProgressView(this.chatAdapter.botInfoRow < 0);
                    this.chatListView.setEmptyView(null);
                    z = false;
                }
                checkBotKeyboard();
                updateBottomOverlay();
                updateSecretStatus();
                updateTopPanel(z);
                updatePinnedMessageView(z);
                updateInfoTopView(z);
                RecyclerAnimationScrollHelper recyclerAnimationScrollHelper = new RecyclerAnimationScrollHelper(this.chatListView, this.chatLayoutManager);
                this.chatScrollHelper = recyclerAnimationScrollHelper;
                recyclerAnimationScrollHelper.setScrollListener(new ChatActivity$$ExternalSyntheticLambda246(this));
                this.chatScrollHelper.setAnimationCallback(this.chatScrollHelperCallback);
                if (this.currentEncryptedChat != null && (SharedConfig.passcodeHash.length() == 0 || SharedConfig.allowScreenCapture)) {
                    this.unregisterFlagSecurePasscode = AndroidUtilities.registerFlagSecure(getParentActivity().getWindow());
                }
                if (getMessagesController().isChatNoForwards(this.currentChat)) {
                    this.unregisterFlagSecureNoforwards = AndroidUtilities.registerFlagSecure(getParentActivity().getWindow());
                }
                if (charSequence2 != null) {
                    this.chatActivityEnterView.setFieldText(charSequence2);
                }
                fixLayoutInternal();
                this.textSelectionHelper.setCallback(new AnonymousClass45());
                this.contentView.addView(this.textSelectionHelper.getOverlayView(context));
                FireworksOverlay fireworksOverlay = new FireworksOverlay(context);
                this.fireworksOverlay = fireworksOverlay;
                this.contentView.addView(fireworksOverlay, LayoutHelper.createFrame(-1, -1.0f));
                this.textSelectionHelper.setParentView(this.chatListView);
                j = getArguments().getInt("search_from_user_id", 0);
                long j3 = getArguments().getInt("search_from_chat_id", 0);
                if (j == 0) {
                    TLRPC$User user = getMessagesController().getUser(Long.valueOf(j));
                    if (user != null) {
                        openSearchWithText("");
                        this.searchUserButton.callOnClick();
                        searchUserMessages(user, null);
                    }
                } else if (j3 != 0 && (chat = getMessagesController().getChat(Long.valueOf(j3))) != null) {
                    openSearchWithText("");
                    this.searchUserButton.callOnClick();
                    searchUserMessages(null, chat);
                }
                messageObject = this.replyingMessageObject;
                if (messageObject != null) {
                    this.chatActivityEnterView.setReplyingMessageObject(messageObject);
                }
                if (i3 < 21) {
                    viewGroup = (ViewGroup) getParentActivity().getWindow().getDecorView();
                } else {
                    viewGroup = this.contentView;
                }
                AnonymousClass46 anonymousClass46 = new AnonymousClass46(this, viewGroup, this.contentView);
                this.pinchToZoomHelper = anonymousClass46;
                anonymousClass46.setCallback(new AnonymousClass47());
                this.pinchToZoomHelper.setClipBoundsListener(new ChatActivity$$ExternalSyntheticLambda257(this));
                this.emojiAnimationsOverlay = new AnonymousClass48(this, this.contentView, this.chatListView, this.currentAccount, this.dialog_id, this.threadMessageId);
                this.actionBar.setDrawBlurBackground(this.contentView);
                tLRPC$Dialog = getMessagesController().dialogs_dict.get(this.dialog_id);
                if (tLRPC$Dialog != null) {
                    this.reactionsMentionCount = tLRPC$Dialog.unread_reactions_count;
                    updateReactionsMentionButton(false);
                }
                return this.fragmentView;
            }
        }
        charSequence = null;
        mentionsContainerView = this.mentionContainer;
        if (mentionsContainerView != null) {
            this.mentionContainer.getAdapter().onDestroy();
        }
        anonymousClass14 = new AnonymousClass14(context, this.themeDelegate);
        this.chatListView = anonymousClass14;
        if (this.currentEncryptedChat != null) {
            anonymousClass14.setImportantForAccessibility(4);
        }
        this.chatListView.setAccessibilityEnabled(false);
        this.chatListView.setNestedScrollingEnabled(false);
        this.chatListView.setInstantClick(true);
        this.chatListView.setDisableHighlightState(true);
        this.chatListView.setTag(1);
        this.chatListView.setVerticalScrollBarEnabled(!SharedConfig.chatBlurEnabled());
        RecyclerListView recyclerListView4 = this.chatListView;
        ChatActivityAdapter chatActivityAdapter2 = new ChatActivityAdapter(context);
        this.chatAdapter = chatActivityAdapter2;
        recyclerListView4.setAdapter(chatActivityAdapter2);
        this.chatListView.setClipToPadding(false);
        this.chatListView.setAnimateEmptyView(true, 1);
        this.chatListView.setScrollBarStyle(33554432);
        this.chatListViewPaddingTop = 0.0f;
        invalidateChatListViewTopPadding();
        if (MessagesController.getGlobalMainSettings().getBoolean("view_animations", true)) {
        }
        AnonymousClass16 anonymousClass162 = new AnonymousClass16(context, 1000, 1, true);
        this.chatLayoutManager = anonymousClass162;
        anonymousClass162.setSpanSizeLookup(new AnonymousClass17());
        this.chatListView.setLayoutManager(this.chatLayoutManager);
        this.chatListView.addItemDecoration(new AnonymousClass18(this));
        this.contentView.addView(this.chatListView, LayoutHelper.createFrame(-1, -1.0f));
        this.chatListView.setOnItemLongClickListener(this.onItemLongClickListener);
        this.chatListView.setOnItemClickListener(this.onItemClickListener);
        this.chatListView.setOnScrollListener(new AnonymousClass19());
        ClippingImageView clippingImageView2 = new ClippingImageView(context);
        this.animatingImageView = clippingImageView2;
        clippingImageView2.setVisibility(8);
        this.contentView.addView(this.animatingImageView, LayoutHelper.createFrame(-1, -1.0f));
        FrameLayout frameLayout22 = new FrameLayout(context);
        this.progressView = frameLayout22;
        frameLayout22.setVisibility(4);
        this.contentView.addView(this.progressView, LayoutHelper.createFrame(-1, -1, 51));
        View view6 = new View(context);
        this.progressView2 = view6;
        view6.setBackground(Theme.createServiceDrawable(AndroidUtilities.dp(18.0f), this.progressView2, this.contentView, getThemedPaint("paintChatActionBackground")));
        this.progressView.addView(this.progressView2, LayoutHelper.createFrame(36, 36, 17));
        RadialProgressView radialProgressView4 = new RadialProgressView(context, this.themeDelegate);
        this.progressBar = radialProgressView4;
        radialProgressView4.setSize(AndroidUtilities.dp(28.0f));
        this.progressBar.setProgressColor(getThemedColor("chat_serviceText"));
        this.progressView.addView(this.progressBar, LayoutHelper.createFrame(32, 32, 17));
        AnonymousClass20 anonymousClass202 = new AnonymousClass20(context, false, this.themeDelegate);
        this.floatingDateView = anonymousClass202;
        anonymousClass202.setCustomDate((int) (System.currentTimeMillis() / 1000), false, false);
        this.floatingDateView.setAlpha(0.0f);
        this.floatingDateView.setImportantForAccessibility(2);
        this.floatingDateView.setInvalidateColors(true);
        this.contentView.addView(this.floatingDateView, LayoutHelper.createFrame(-2, -2.0f, 49, 0.0f, 4.0f, 0.0f, 0.0f));
        this.floatingDateView.setOnClickListener(new ChatActivity$$ExternalSyntheticLambda79(this));
        tLRPC$Chat = this.currentChat;
        if (tLRPC$Chat != null) {
        }
        if (this.currentEncryptedChat != null) {
        }
        AnonymousClass23 anonymousClass232 = new AnonymousClass23(context, this.contentView);
        this.topChatPanelView = anonymousClass232;
        anonymousClass232.backgroundColor = getThemedColor("chat_topPanelBackground");
        this.topChatPanelView.backgroundPaddingBottom = AndroidUtilities.dp(f3);
        this.topChatPanelView.setTag(1);
        this.topChatPanelViewOffset = -AndroidUtilities.dp(50.0f);
        invalidateChatListViewTopPadding();
        this.topChatPanelView.setVisibility(8);
        this.topChatPanelView.setBackgroundResource(2131165274);
        this.topChatPanelView.getBackground().setColorFilter(new PorterDuffColorFilter(getThemedColor("chat_topPanelBackground"), PorterDuff.Mode.MULTIPLY));
        this.contentView.addView(this.topChatPanelView, LayoutHelper.createFrame(-1, 50, 51));
        TextView textView22 = new TextView(context);
        this.reportSpamButton = textView22;
        textView22.setTextColor(getThemedColor("chat_reportSpam"));
        i = Build.VERSION.SDK_INT;
        if (i >= 21) {
        }
        this.reportSpamButton.setTag("chat_reportSpam");
        this.reportSpamButton.setTextSize(1, f2);
        this.reportSpamButton.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
        this.reportSpamButton.setSingleLine(true);
        this.reportSpamButton.setMaxLines(1);
        this.reportSpamButton.setGravity(17);
        this.topChatPanelView.addView(this.reportSpamButton, LayoutHelper.createFrame(-1, -1.0f, 51, 0.0f, 0.0f, 0.0f, 1.0f));
        this.reportSpamButton.setOnClickListener(new ChatActivity$$ExternalSyntheticLambda80(this));
        TextView textView32 = new TextView(context);
        this.addToContactsButton = textView32;
        textView32.setTextColor(getThemedColor("chat_addContact"));
        this.addToContactsButton.setVisibility(8);
        this.addToContactsButton.setTextSize(1, f2);
        this.addToContactsButton.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
        this.addToContactsButton.setSingleLine(true);
        this.addToContactsButton.setMaxLines(1);
        this.addToContactsButton.setPadding(AndroidUtilities.dp(4.0f), 0, AndroidUtilities.dp(4.0f), 0);
        this.addToContactsButton.setGravity(17);
        if (i >= 21) {
        }
        this.topChatPanelView.addView(this.addToContactsButton, LayoutHelper.createFrame(-1, -1.0f, 51, 0.0f, 0.0f, 0.0f, 1.0f));
        this.addToContactsButton.setOnClickListener(new ChatActivity$$ExternalSyntheticLambda87(this, context));
        ImageView imageView32 = new ImageView(context);
        this.closeReportSpam = imageView32;
        imageView32.setImageResource(2131165619);
        this.closeReportSpam.setContentDescription(LocaleController.getString("Close", 2131625183));
        if (i >= 21) {
        }
        this.closeReportSpam.setColorFilter(new PorterDuffColorFilter(getThemedColor("chat_topPanelClose"), PorterDuff.Mode.MULTIPLY));
        this.closeReportSpam.setScaleType(ImageView.ScaleType.CENTER);
        this.topChatPanelView.addView(this.closeReportSpam, LayoutHelper.createFrame(36, 48.0f, 53, 0.0f, 0.0f, 2.0f, 0.0f));
        this.closeReportSpam.setOnClickListener(new ChatActivity$$ExternalSyntheticLambda76(this));
        FrameLayout frameLayout32 = new FrameLayout(context);
        this.alertView = frameLayout32;
        frameLayout32.setTag(1);
        this.alertView.setVisibility(8);
        this.alertView.setBackgroundResource(2131165274);
        this.alertView.getBackground().setColorFilter(new PorterDuffColorFilter(getThemedColor("chat_topPanelBackground"), PorterDuff.Mode.MULTIPLY));
        this.contentView.addView(this.alertView, LayoutHelper.createFrame(-1, 50, 51));
        TextView textView42 = new TextView(context);
        this.alertNameTextView = textView42;
        textView42.setTextSize(1, f2);
        this.alertNameTextView.setTextColor(getThemedColor("chat_topPanelTitle"));
        this.alertNameTextView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
        this.alertNameTextView.setSingleLine(true);
        this.alertNameTextView.setEllipsize(TextUtils.TruncateAt.END);
        this.alertNameTextView.setMaxLines(1);
        this.alertView.addView(this.alertNameTextView, LayoutHelper.createFrame(-2, -2.0f, 51, 8.0f, 5.0f, 8.0f, 0.0f));
        TextView textView52 = new TextView(context);
        this.alertTextView = textView52;
        textView52.setTextSize(1, f2);
        this.alertTextView.setTextColor(getThemedColor("chat_topPanelMessage"));
        this.alertTextView.setSingleLine(true);
        this.alertTextView.setEllipsize(TextUtils.TruncateAt.END);
        this.alertTextView.setMaxLines(1);
        this.alertView.addView(this.alertTextView, LayoutHelper.createFrame(-2, -2.0f, 51, 8.0f, 23.0f, 8.0f, 0.0f));
        FrameLayout frameLayout42 = new FrameLayout(context);
        this.pagedownButton = frameLayout42;
        frameLayout42.setVisibility(4);
        this.contentView.addView(this.pagedownButton, LayoutHelper.createFrame(66, 61.0f, 85, 0.0f, 0.0f, -3.0f, 5.0f));
        this.pagedownButton.setOnClickListener(new ChatActivity$$ExternalSyntheticLambda75(this));
        FrameLayout frameLayout52 = new FrameLayout(context);
        this.mentiondownButton = frameLayout52;
        frameLayout52.setVisibility(4);
        this.contentView.addView(this.mentiondownButton, LayoutHelper.createFrame(46, 61.0f, 85, 0.0f, 0.0f, 7.0f, 5.0f));
        this.mentiondownButton.setOnClickListener(new AnonymousClass24());
        this.mentiondownButton.setOnLongClickListener(new ChatActivity$$ExternalSyntheticLambda98(this));
        updateMessageListAccessibilityVisibility();
        FrameLayout frameLayout62 = new FrameLayout(context);
        this.reactionsMentiondownButton = frameLayout62;
        this.contentView.addView(frameLayout62, LayoutHelper.createFrame(46, 61.0f, 85, 0.0f, 0.0f, 7.0f, 5.0f));
        charSequence2 = charSequence;
        AnonymousClass25 anonymousClass252 = new AnonymousClass25(context, this.dialog_id, this.threadMessageId, this, this.themeDelegate);
        this.mentionContainer = anonymousClass252;
        this.contentView.addView(anonymousClass252, LayoutHelper.createFrame(-1, 110, 83));
        AnonymousClass26 anonymousClass262 = new AnonymousClass26();
        this.mentionContainer.getListView().setOnTouchListener(new ChatActivity$$ExternalSyntheticLambda106(this, anonymousClass262));
        if (ChatObject.isChannel(this.currentChat)) {
        }
        this.mentionContainer.getAdapter().setBotInfo(this.botInfo);
        this.mentionContainer.getAdapter().setParentFragment(this);
        this.mentionContainer.getAdapter().setChatInfo(this.chatInfo);
        this.mentionContainer.getAdapter().setNeedUsernames(this.currentChat == null);
        this.mentionContainer.getAdapter().setNeedBotContext(true);
        this.mentionContainer.getAdapter().setBotsCount(this.currentChat == null ? this.botsCount : 1);
        MentionsContainerView.MentionsListView listView2 = this.mentionContainer.getListView();
        ChatActivity$$ExternalSyntheticLambda249 chatActivity$$ExternalSyntheticLambda2492 = new ChatActivity$$ExternalSyntheticLambda249(this);
        this.mentionsOnItemClickListener = chatActivity$$ExternalSyntheticLambda2492;
        listView2.setOnItemClickListener(chatActivity$$ExternalSyntheticLambda2492);
        this.mentionContainer.getListView().setOnItemLongClickListener(new ChatActivity$$ExternalSyntheticLambda252(this));
        ImageView imageView42 = new ImageView(context);
        this.pagedownButtonImage = imageView42;
        imageView42.setImageResource(2131166031);
        this.pagedownButtonImage.setScaleType(ImageView.ScaleType.CENTER);
        this.pagedownButtonImage.setColorFilter(new PorterDuffColorFilter(getThemedColor("chat_goDownButtonIcon"), PorterDuff.Mode.MULTIPLY));
        this.pagedownButtonImage.setPadding(0, AndroidUtilities.dp(2.0f), 0, 0);
        if (i < 21) {
        }
        Drawable mutate6 = context.getResources().getDrawable(2131166032).mutate();
        mutate6.setColorFilter(new PorterDuffColorFilter(getThemedColor("chat_goDownButtonShadow"), PorterDuff.Mode.MULTIPLY));
        CombinedDrawable combinedDrawable4 = new CombinedDrawable(mutate6, drawable, 0, 0);
        combinedDrawable4.setIconSize(AndroidUtilities.dp(42.0f), AndroidUtilities.dp(42.0f));
        this.pagedownButtonImage.setBackgroundDrawable(combinedDrawable4);
        this.pagedownButton.addView(this.pagedownButtonImage, LayoutHelper.createFrame(46, 46, 81));
        this.pagedownButton.setContentDescription(LocaleController.getString("AccDescrPageDown", 2131624032));
        AnonymousClass28 anonymousClass282 = new AnonymousClass28(context, this.themeDelegate);
        this.pagedownButtonCounter = anonymousClass282;
        anonymousClass282.setReverse(true);
        this.pagedownButton.addView(this.pagedownButtonCounter, LayoutHelper.createFrame(-1, 28, 51));
        ImageView imageView52 = new ImageView(context);
        this.mentiondownButtonImage = imageView52;
        imageView52.setImageResource(2131165610);
        this.mentiondownButtonImage.setScaleType(ImageView.ScaleType.CENTER);
        this.mentiondownButtonImage.setColorFilter(new PorterDuffColorFilter(getThemedColor("chat_goDownButtonIcon"), PorterDuff.Mode.MULTIPLY));
        this.mentiondownButtonImage.setPadding(0, AndroidUtilities.dp(2.0f), 0, 0);
        if (i < 21) {
        }
        Drawable mutate22 = context.getResources().getDrawable(2131166032).mutate();
        mutate22.setColorFilter(new PorterDuffColorFilter(getThemedColor("chat_goDownButtonShadow"), PorterDuff.Mode.MULTIPLY));
        CombinedDrawable combinedDrawable22 = new CombinedDrawable(mutate22, drawable2, 0, 0);
        combinedDrawable22.setIconSize(AndroidUtilities.dp(42.0f), AndroidUtilities.dp(42.0f));
        this.mentiondownButtonImage.setBackgroundDrawable(combinedDrawable22);
        this.mentiondownButton.addView(this.mentiondownButtonImage, LayoutHelper.createFrame(46, 46, 83));
        SimpleTextView simpleTextView5 = new SimpleTextView(context);
        this.mentiondownButtonCounter = simpleTextView5;
        simpleTextView5.setVisibility(4);
        this.mentiondownButtonCounter.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
        this.mentiondownButtonCounter.setTextSize(13);
        this.mentiondownButtonCounter.setTextColor(getThemedColor("chat_goDownButtonCounter"));
        this.mentiondownButtonCounter.setGravity(17);
        this.mentiondownButtonCounter.setBackgroundDrawable(Theme.createRoundRectDrawable(AndroidUtilities.dp(11.5f), getThemedColor("chat_goDownButtonCounterBackground")));
        this.mentiondownButtonCounter.setMinWidth(AndroidUtilities.dp(23.0f));
        this.mentiondownButtonCounter.setPadding(AndroidUtilities.dp(8.0f), AndroidUtilities.dp(1.0f), AndroidUtilities.dp(8.0f), 0);
        this.mentiondownButton.addView(this.mentiondownButtonCounter, LayoutHelper.createFrame(-2, 23, 49));
        this.mentiondownButton.setContentDescription(LocaleController.getString("AccDescrMentionDown", 2131624000));
        this.reactionsMentiondownButton.setOnClickListener(new ChatActivity$$ExternalSyntheticLambda60(this));
        this.reactionsMentiondownButton.setOnLongClickListener(new ChatActivity$$ExternalSyntheticLambda99(this));
        this.reactionsMentiondownButton.setVisibility(4);
        ImageView imageView62 = new ImageView(context);
        this.reactionsMentiondownButtonImage = imageView62;
        imageView62.setImageResource(2131166111);
        this.reactionsMentiondownButtonImage.setScaleType(ImageView.ScaleType.CENTER);
        this.reactionsMentiondownButtonImage.setColorFilter(new PorterDuffColorFilter(getThemedColor("chat_goDownButtonIcon"), PorterDuff.Mode.MULTIPLY));
        if (i < 21) {
        }
        Drawable mutate32 = context.getResources().getDrawable(2131166032).mutate();
        mutate32.setColorFilter(new PorterDuffColorFilter(getThemedColor("chat_goDownButtonShadow"), PorterDuff.Mode.MULTIPLY));
        CombinedDrawable combinedDrawable32 = new CombinedDrawable(mutate32, drawable3, 0, 0);
        combinedDrawable32.setIconSize(AndroidUtilities.dp(42.0f), AndroidUtilities.dp(42.0f));
        this.reactionsMentiondownButtonImage.setBackgroundDrawable(combinedDrawable32);
        this.reactionsMentiondownButton.addView(this.reactionsMentiondownButtonImage, LayoutHelper.createFrame(46, 46, 83));
        CounterView counterView2 = new CounterView(context, this.themeDelegate);
        this.reactionsMentiondownButtonCounter = counterView2;
        this.reactionsMentiondownButton.addView(counterView2, LayoutHelper.createFrame(-1, 28, 51));
        this.reactionsMentiondownButton.setContentDescription(LocaleController.getString("AccDescrReactionMentionDown", 2131624051));
        this.fragmentLocationContextView = new FragmentContextView(context, this, true, this.themeDelegate);
        this.fragmentContextView = new AnonymousClass31(context, this, false, this.themeDelegate);
        this.contentView.addView(this.fragmentLocationContextView, LayoutHelper.createFrame(-1, 38.0f, 51, 0.0f, -36.0f, 0.0f, 0.0f));
        this.contentView.addView(this.fragmentContextView, LayoutHelper.createFrame(-1, 38.0f, 51, 0.0f, -36.0f, 0.0f, 0.0f));
        this.fragmentContextView.setAdditionalContextView(this.fragmentLocationContextView);
        this.fragmentLocationContextView.setAdditionalContextView(this.fragmentContextView);
        this.fragmentContextView.setEnabled(!this.inPreviewMode);
        this.fragmentLocationContextView.setEnabled(!this.inPreviewMode);
        if (this.chatMode != 0) {
        }
        RecyclerListView recyclerListView22 = new RecyclerListView(context, this.themeDelegate);
        this.messagesSearchListView = recyclerListView22;
        recyclerListView22.setBackgroundColor(getThemedColor("windowBackgroundWhite"));
        LinearLayoutManager linearLayoutManager3 = new LinearLayoutManager(context);
        linearLayoutManager3.setOrientation(1);
        this.messagesSearchListView.setLayoutManager(linearLayoutManager3);
        this.messagesSearchListView.setVisibility(8);
        this.messagesSearchListView.setAlpha(0.0f);
        RecyclerListView recyclerListView32 = this.messagesSearchListView;
        MessagesSearchAdapter messagesSearchAdapter2 = new MessagesSearchAdapter(context, this.themeDelegate);
        this.messagesSearchAdapter = messagesSearchAdapter2;
        recyclerListView32.setAdapter(messagesSearchAdapter2);
        this.contentView.addView(this.messagesSearchListView, LayoutHelper.createFrame(-1, -1.0f, 51, 0.0f, 0.0f, 0.0f, 48.0f));
        this.messagesSearchListView.setOnItemClickListener(new ChatActivity$$ExternalSyntheticLambda248(this));
        this.messagesSearchListView.setOnScrollListener(new AnonymousClass32(linearLayoutManager3));
        AnonymousClass33 anonymousClass332 = new AnonymousClass33(context, this, true, this.themeDelegate);
        this.topUndoView = anonymousClass332;
        this.contentView.addView(anonymousClass332, LayoutHelper.createFrame(-1, -2.0f, 51, 8.0f, 8.0f, 8.0f, 0.0f));
        this.contentView.addView(this.actionBar);
        View view32 = new View(context);
        this.overlayView = view32;
        view32.setOnTouchListener(new ChatActivity$$ExternalSyntheticLambda102(this));
        this.contentView.addView(this.overlayView, LayoutHelper.createFrame(-1, -1, 51));
        this.overlayView.setVisibility(8);
        this.contentView.setClipChildren(false);
        InstantCameraView instantCameraView2 = new InstantCameraView(context, this, this.themeDelegate);
        this.instantCameraView = instantCameraView2;
        this.contentView.addView(instantCameraView2, LayoutHelper.createFrame(-1, -1, 51));
        AnonymousClass34 anonymousClass342 = new AnonymousClass34(context, this.contentView);
        this.bottomMessagesActionContainer = anonymousClass342;
        anonymousClass342.drawBlur = false;
        anonymousClass342.isTopView = false;
        anonymousClass342.setVisibility(4);
        this.bottomMessagesActionContainer.setWillNotDraw(false);
        this.bottomMessagesActionContainer.setPadding(0, AndroidUtilities.dp(2.0f), 0, 0);
        this.contentView.addView(this.bottomMessagesActionContainer, LayoutHelper.createFrame(-1, 51, 80));
        this.bottomMessagesActionContainer.setOnTouchListener(ChatActivity$$ExternalSyntheticLambda109.INSTANCE);
        AnonymousClass35 anonymousClass352 = new AnonymousClass35(getParentActivity(), this.contentView, this, true, this.themeDelegate);
        this.chatActivityEnterView = anonymousClass352;
        anonymousClass352.setDelegate(new AnonymousClass36(actionBarMenu2));
        this.chatActivityEnterView.setDialogId(this.dialog_id, this.currentAccount);
        tLRPC$ChatFull = this.chatInfo;
        if (tLRPC$ChatFull != null) {
        }
        this.chatActivityEnterView.setId(1000);
        this.chatActivityEnterView.setBotsCount(this.botsCount, this.hasBotsCommands, false);
        this.chatActivityEnterView.updateBotWebView(false);
        this.chatActivityEnterView.setMinimumHeight(AndroidUtilities.dp(51.0f));
        ChatActivityEnterView chatActivityEnterView22 = this.chatActivityEnterView;
        TLRPC$EncryptedChat tLRPC$EncryptedChat22 = this.currentEncryptedChat;
        chatActivityEnterView22.setAllowStickersAndGifs(true, true, tLRPC$EncryptedChat22 != null || AndroidUtilities.getPeerLayerVersion(tLRPC$EncryptedChat22.layer) >= 46);
        if (this.inPreviewMode) {
        }
        if (ChatObject.isChannel(this.currentChat)) {
        }
        this.chatActivityEnterView.setBotInfo(this.botInfo, false);
        SizeNotifierFrameLayout sizeNotifierFrameLayout3 = this.contentView;
        sizeNotifierFrameLayout3.addView(this.chatActivityEnterView, sizeNotifierFrameLayout3.getChildCount() - 1, LayoutHelper.createFrame(-1, -2, 83));
        this.chatActivityEnterView.checkChannelRights();
        this.chatActivityEnterTopView = new AnonymousClass37(context);
        View view42 = new View(context);
        this.replyLineView = view42;
        view42.setBackgroundColor(getThemedColor("chat_replyPanelLine"));
        this.chatActivityEnterView.addTopView(this.chatActivityEnterTopView, this.replyLineView, 48);
        FrameLayout frameLayout72 = new FrameLayout(context);
        this.chatActivityEnterTopView.addReplyView(frameLayout72, LayoutHelper.createFrame(-1, -1.0f, 0, 0.0f, 0.0f, 52.0f, 0.0f));
        frameLayout72.setOnClickListener(new ChatActivity$$ExternalSyntheticLambda81(this));
        ImageView imageView72 = new ImageView(context);
        this.replyIconImageView = imageView72;
        imageView72.setColorFilter(new PorterDuffColorFilter(getThemedColor("chat_replyPanelIcons"), PorterDuff.Mode.MULTIPLY));
        this.replyIconImageView.setScaleType(ImageView.ScaleType.CENTER);
        frameLayout72.addView(this.replyIconImageView, LayoutHelper.createFrame(52, 46, 51));
        ImageView imageView82 = new ImageView(context);
        this.replyCloseImageView = imageView82;
        imageView82.setColorFilter(new PorterDuffColorFilter(getThemedColor("chat_replyPanelClose"), PorterDuff.Mode.MULTIPLY));
        this.replyCloseImageView.setImageResource(2131165532);
        this.replyCloseImageView.setScaleType(ImageView.ScaleType.CENTER);
        if (i >= 21) {
        }
        this.chatActivityEnterTopView.addView(this.replyCloseImageView, LayoutHelper.createFrame(52, 46.0f, 53, 0.0f, 0.5f, 0.0f, 0.0f));
        this.replyCloseImageView.setOnClickListener(new ChatActivity$$ExternalSyntheticLambda68(this));
        SimpleTextView simpleTextView22 = new SimpleTextView(context);
        this.replyNameTextView = simpleTextView22;
        simpleTextView22.setTextSize(14);
        this.replyNameTextView.setTextColor(getThemedColor("chat_replyPanelName"));
        this.replyNameTextView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
        frameLayout72.addView(this.replyNameTextView, LayoutHelper.createFrame(-1, 18.0f, 51, 52.0f, 6.0f, 0.0f, 0.0f));
        SimpleTextView simpleTextView32 = new SimpleTextView(context);
        this.replyObjectTextView = simpleTextView32;
        simpleTextView32.setTextSize(14);
        this.replyObjectTextView.setTextColor(getThemedColor("windowBackgroundWhiteGrayText"));
        frameLayout72.addView(this.replyObjectTextView, LayoutHelper.createFrame(-1, 18.0f, 51, 52.0f, 24.0f, 0.0f, 0.0f));
        SimpleTextView simpleTextView42 = new SimpleTextView(context);
        this.replyObjectHintTextView = simpleTextView42;
        simpleTextView42.setTextSize(14);
        this.replyObjectHintTextView.setTextColor(getThemedColor("windowBackgroundWhiteGrayText"));
        this.replyObjectHintTextView.setText(LocaleController.getString("TapForForwardingOptions", 2131628600));
        this.replyObjectHintTextView.setAlpha(0.0f);
        frameLayout72.addView(this.replyObjectHintTextView, LayoutHelper.createFrame(-1, 18.0f, 51, 52.0f, 24.0f, 0.0f, 0.0f));
        BackupImageView backupImageView2 = new BackupImageView(context);
        this.replyImageView = backupImageView2;
        backupImageView2.setRoundRadius(AndroidUtilities.dp(2.0f));
        frameLayout72.addView(this.replyImageView, LayoutHelper.createFrame(34, 34.0f, 51, 52.0f, 6.0f, 0.0f, 0.0f));
        FrameLayout frameLayout82 = new FrameLayout(context);
        this.stickersPanel = frameLayout82;
        frameLayout82.setVisibility(8);
        this.contentView.addView(this.stickersPanel, LayoutHelper.createFrame(-2, 81.5f, 83, 0.0f, 0.0f, 0.0f, 38.0f));
        ChatActivityEnterTopView.EditView editView2 = new ChatActivityEnterTopView.EditView(context);
        editView2.setMotionEventSplittingEnabled(false);
        editView2.setOrientation(0);
        editView2.setOnClickListener(new ChatActivity$$ExternalSyntheticLambda66(this));
        this.chatActivityEnterTopView.addEditView(editView2, LayoutHelper.createFrame(-1, -1.0f, 0, 0.0f, 0.0f, 48.0f, 0.0f));
        i2 = 0;
        while (i2 < 2) {
        }
        AnonymousClass39 anonymousClass392 = new AnonymousClass39(context, this.themeDelegate, anonymousClass262);
        this.stickersListView = anonymousClass392;
        anonymousClass392.setTag(3);
        this.stickersListView.setOnTouchListener(new ChatActivity$$ExternalSyntheticLambda105(this, anonymousClass262));
        this.stickersListView.setDisallowInterceptTouchEvents(true);
        LinearLayoutManager linearLayoutManager22 = new LinearLayoutManager(context);
        linearLayoutManager22.setOrientation(0);
        this.stickersListView.setLayoutManager(linearLayoutManager22);
        this.stickersListView.setClipToPadding(false);
        this.stickersListView.setOverScrollMode(2);
        this.stickersPanel.addView(this.stickersListView, LayoutHelper.createFrame(-1, 78.0f));
        initStickers();
        ImageView imageView102 = new ImageView(context);
        this.stickersPanelArrow = imageView102;
        imageView102.setImageResource(2131166167);
        this.stickersPanelArrow.setColorFilter(new PorterDuffColorFilter(getThemedColor("chat_stickersHintPanel"), PorterDuff.Mode.MULTIPLY));
        this.stickersPanel.addView(this.stickersPanelArrow, LayoutHelper.createFrame(-2, -2.0f, 83, 53.0f, 0.0f, 53.0f, 0.0f));
        AnonymousClass40 anonymousClass402 = new AnonymousClass40(context, this.contentView);
        this.searchContainer = anonymousClass402;
        anonymousClass402.drawBlur = false;
        anonymousClass402.isTopView = false;
        anonymousClass402.setWillNotDraw(false);
        this.searchContainer.setVisibility(4);
        this.searchContainer.setPadding(0, AndroidUtilities.dp(3.0f), 0, 0);
        this.searchContainer.setClipToPadding(false);
        View view52 = new View(context);
        this.searchAsListTogglerView = view52;
        view52.setOnTouchListener(new ChatActivity$$ExternalSyntheticLambda104(this));
        i3 = Build.VERSION.SDK_INT;
        if (i3 >= 21) {
        }
        this.searchAsListTogglerView.setOnClickListener(new ChatActivity$$ExternalSyntheticLambda70(this));
        this.searchContainer.addView(this.searchAsListTogglerView, LayoutHelper.createFrame(-1, -1.0f, 0, 0.0f, (Theme.chat_composeShadowDrawable.getIntrinsicHeight() / AndroidUtilities.density) - 3.0f, 0.0f, 0.0f));
        ImageView imageView112 = new ImageView(context);
        this.searchUpButton = imageView112;
        imageView112.setScaleType(ImageView.ScaleType.CENTER);
        this.searchUpButton.setImageResource(2131165749);
        this.searchUpButton.setColorFilter(new PorterDuffColorFilter(getThemedColor("chat_searchPanelIcons"), PorterDuff.Mode.MULTIPLY));
        this.searchUpButton.setBackgroundDrawable(Theme.createSelectorDrawable(getThemedColor("actionBarActionModeDefaultSelector"), 1));
        this.searchContainer.addView(this.searchUpButton, LayoutHelper.createFrame(48, 48.0f, 53, 0.0f, 0.0f, 48.0f, 0.0f));
        this.searchUpButton.setOnClickListener(new ChatActivity$$ExternalSyntheticLambda78(this));
        this.searchUpButton.setContentDescription(LocaleController.getString("AccDescrSearchNext", 2131624060));
        ImageView imageView122 = new ImageView(context);
        this.searchDownButton = imageView122;
        imageView122.setScaleType(ImageView.ScaleType.CENTER);
        this.searchDownButton.setImageResource(2131165748);
        this.searchDownButton.setColorFilter(new PorterDuffColorFilter(getThemedColor("chat_searchPanelIcons"), PorterDuff.Mode.MULTIPLY));
        this.searchDownButton.setBackgroundDrawable(Theme.createSelectorDrawable(getThemedColor("actionBarActionModeDefaultSelector"), 1));
        this.searchContainer.addView(this.searchDownButton, LayoutHelper.createFrame(48, 48.0f, 53, 0.0f, 0.0f, 0.0f, 0.0f));
        this.searchDownButton.setOnClickListener(new ChatActivity$$ExternalSyntheticLambda59(this));
        this.searchDownButton.setContentDescription(LocaleController.getString("AccDescrSearchPrev", 2131624061));
        tLRPC$Chat2 = this.currentChat;
        if (tLRPC$Chat2 != null) {
            ImageView imageView132 = new ImageView(context);
            this.searchUserButton = imageView132;
            imageView132.setScaleType(ImageView.ScaleType.CENTER);
            this.searchUserButton.setImageResource(2131165977);
            this.searchUserButton.setColorFilter(new PorterDuffColorFilter(getThemedColor("chat_searchPanelIcons"), PorterDuff.Mode.MULTIPLY));
            this.searchUserButton.setBackgroundDrawable(Theme.createSelectorDrawable(getThemedColor("actionBarActionModeDefaultSelector"), 1));
            this.searchContainer.addView(this.searchUserButton, LayoutHelper.createFrame(48, 48.0f, 51, 48.0f, 0.0f, 0.0f, 0.0f));
            this.searchUserButton.setOnClickListener(new ChatActivity$$ExternalSyntheticLambda77(this));
            this.searchUserButton.setContentDescription(LocaleController.getString("AccDescrSearchByUser", 2131624059));
        }
        ImageView imageView142 = new ImageView(context);
        this.searchCalendarButton = imageView142;
        imageView142.setScaleType(ImageView.ScaleType.CENTER);
        this.searchCalendarButton.setImageResource(2131165661);
        this.searchCalendarButton.setColorFilter(new PorterDuffColorFilter(getThemedColor("chat_searchPanelIcons"), PorterDuff.Mode.MULTIPLY));
        this.searchCalendarButton.setBackgroundDrawable(Theme.createSelectorDrawable(getThemedColor("actionBarActionModeDefaultSelector"), 1));
        this.searchContainer.addView(this.searchCalendarButton, LayoutHelper.createFrame(48, 48, 51));
        this.searchCalendarButton.setOnClickListener(new ChatActivity$$ExternalSyntheticLambda64(this));
        this.searchCalendarButton.setContentDescription(LocaleController.getString("JumpToDate", 2131626382));
        SearchCounterView searchCounterView2 = new SearchCounterView(context, this.themeDelegate);
        this.searchCountText = searchCounterView2;
        searchCounterView2.setGravity(3);
        this.searchContainer.addView(this.searchCountText, LayoutHelper.createFrame(-2, -2.0f, 16, 0.0f, 0.0f, 108.0f, 0.0f));
        AnonymousClass42 anonymousClass422 = new AnonymousClass42(context);
        this.bottomOverlay = anonymousClass422;
        anonymousClass422.setWillNotDraw(false);
        this.bottomOverlay.setVisibility(4);
        this.bottomOverlay.setFocusable(true);
        this.bottomOverlay.setFocusableInTouchMode(true);
        this.bottomOverlay.setClickable(true);
        this.bottomOverlay.setPadding(0, AndroidUtilities.dp(2.0f), 0, 0);
        this.contentView.addView(this.bottomOverlay, LayoutHelper.createFrame(-1, 51, 80));
        TextView textView72 = new TextView(context);
        this.bottomOverlayText = textView72;
        textView72.setTextSize(1, 14.0f);
        this.bottomOverlayText.setGravity(17);
        this.bottomOverlayText.setMaxLines(2);
        this.bottomOverlayText.setEllipsize(TextUtils.TruncateAt.END);
        this.bottomOverlayText.setLineSpacing(AndroidUtilities.dp(2.0f), 1.0f);
        this.bottomOverlayText.setTextColor(getThemedColor("chat_secretChatStatusText"));
        this.bottomOverlay.addView(this.bottomOverlayText, LayoutHelper.createFrame(-2, -2.0f, 17, 14.0f, 0.0f, 14.0f, 0.0f));
        AnonymousClass43 anonymousClass432 = new AnonymousClass43(context, this.contentView);
        this.bottomOverlayChat = anonymousClass432;
        anonymousClass432.isTopView = false;
        anonymousClass432.drawBlur = false;
        anonymousClass432.setWillNotDraw(false);
        this.bottomOverlayChat.setPadding(0, AndroidUtilities.dp(1.5f), 0, 0);
        this.bottomOverlayChat.setVisibility(4);
        this.bottomOverlayChat.setClipChildren(false);
        this.contentView.addView(this.bottomOverlayChat, LayoutHelper.createFrame(-1, 51, 80));
        UnreadCounterTextView unreadCounterTextView2 = new UnreadCounterTextView(context);
        this.bottomOverlayChatText = unreadCounterTextView2;
        this.bottomOverlayChat.addView(unreadCounterTextView2, LayoutHelper.createFrame(-1, -1.0f, 0, 0.0f, 1.5f, 0.0f, 0.0f));
        this.bottomOverlayChatText.setOnClickListener(new ChatActivity$$ExternalSyntheticLambda86(this, context));
        RadialProgressView radialProgressView32 = new RadialProgressView(context, this.themeDelegate);
        this.bottomOverlayProgress = radialProgressView32;
        radialProgressView32.setSize(AndroidUtilities.dp(22.0f));
        this.bottomOverlayProgress.setProgressColor(getThemedColor("chat_fieldOverlayText"));
        this.bottomOverlayProgress.setVisibility(4);
        this.bottomOverlayProgress.setScaleX(0.1f);
        this.bottomOverlayProgress.setScaleY(0.1f);
        this.bottomOverlayProgress.setAlpha(1.0f);
        this.bottomOverlayChat.addView(this.bottomOverlayProgress, LayoutHelper.createFrame(30, 30, 17));
        this.bottomOverlayImage = new ImageView(context);
        int themedColor2 = getThemedColor("chat_fieldOverlayText");
        this.bottomOverlayImage.setImageResource(2131165758);
        this.bottomOverlayImage.setColorFilter(new PorterDuffColorFilter(themedColor2, PorterDuff.Mode.MULTIPLY));
        this.bottomOverlayImage.setScaleType(ImageView.ScaleType.CENTER);
        if (i3 >= 21) {
        }
        this.bottomOverlayChat.addView(this.bottomOverlayImage, LayoutHelper.createFrame(48, 48.0f, 53, 3.0f, 1.5f, 0.0f, 0.0f));
        this.bottomOverlayImage.setContentDescription(LocaleController.getString("SettingsHelp", 2131628326));
        this.bottomOverlayImage.setOnClickListener(new ChatActivity$$ExternalSyntheticLambda74(this));
        TextView textView82 = new TextView(context);
        this.replyButton = textView82;
        textView82.setText(LocaleController.getString("Reply", 2131627989));
        this.replyButton.setGravity(16);
        this.replyButton.setTextSize(1, 15.0f);
        this.replyButton.setPadding(AndroidUtilities.dp(14.0f), 0, AndroidUtilities.dp(21.0f), 0);
        this.replyButton.setBackgroundDrawable(Theme.createSelectorDrawable(getThemedColor("actionBarActionModeDefaultSelector"), 3));
        this.replyButton.setTextColor(getThemedColor("actionBarActionModeDefaultIcon"));
        this.replyButton.setCompoundDrawablePadding(AndroidUtilities.dp(7.0f));
        this.replyButton.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
        Drawable mutate42 = context.getResources().getDrawable(2131165541).mutate();
        mutate42.setColorFilter(new PorterDuffColorFilter(getThemedColor("actionBarActionModeDefaultIcon"), PorterDuff.Mode.MULTIPLY));
        this.replyButton.setCompoundDrawablesWithIntrinsicBounds(mutate42, (Drawable) null, (Drawable) null, (Drawable) null);
        this.replyButton.setOnClickListener(new ChatActivity$$ExternalSyntheticLambda58(this));
        this.bottomMessagesActionContainer.addView(this.replyButton, LayoutHelper.createFrame(-2, -1, 51));
        TextView textView92 = new TextView(context);
        this.forwardButton = textView92;
        textView92.setText(LocaleController.getString("Forward", 2131625981));
        this.forwardButton.setGravity(16);
        this.forwardButton.setTextSize(1, 15.0f);
        this.forwardButton.setPadding(AndroidUtilities.dp(21.0f), 0, AndroidUtilities.dp(21.0f), 0);
        this.forwardButton.setCompoundDrawablePadding(AndroidUtilities.dp(6.0f));
        this.forwardButton.setBackgroundDrawable(Theme.createSelectorDrawable(getThemedColor("actionBarActionModeDefaultSelector"), 3));
        this.forwardButton.setTextColor(getThemedColor("actionBarActionModeDefaultIcon"));
        this.forwardButton.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
        Drawable mutate52 = context.getResources().getDrawable(2131165534).mutate();
        mutate52.setColorFilter(new PorterDuffColorFilter(getThemedColor("actionBarActionModeDefaultIcon"), PorterDuff.Mode.MULTIPLY));
        this.forwardButton.setCompoundDrawablesWithIntrinsicBounds(mutate52, (Drawable) null, (Drawable) null, (Drawable) null);
        this.forwardButton.setOnClickListener(new ChatActivity$$ExternalSyntheticLambda73(this));
        this.bottomMessagesActionContainer.addView(this.forwardButton, LayoutHelper.createFrame(-2, -1, 53));
        this.contentView.addView(this.searchContainer, LayoutHelper.createFrame(-1, 51, 80));
        SizeNotifierFrameLayout sizeNotifierFrameLayout22 = this.contentView;
        MessageEnterTransitionContainer messageEnterTransitionContainer2 = new MessageEnterTransitionContainer(this.contentView, this.currentAccount);
        this.messageEnterTransitionContainer = messageEnterTransitionContainer2;
        sizeNotifierFrameLayout22.addView(messageEnterTransitionContainer2);
        UndoView undoView2 = new UndoView(context, this, false, this.themeDelegate);
        this.undoView = undoView2;
        undoView2.setAdditionalTranslationY(AndroidUtilities.dp(51.0f));
        this.contentView.addView(this.undoView, LayoutHelper.createFrame(-1, -2.0f, 83, 8.0f, 0.0f, 8.0f, 8.0f));
        if (this.currentChat != null) {
        }
        this.chatAdapter.updateRowsSafe();
        if (this.loading) {
        }
        z = false;
        showProgressView(false);
        this.chatListView.setEmptyView(this.emptyViewContainer);
        checkBotKeyboard();
        updateBottomOverlay();
        updateSecretStatus();
        updateTopPanel(z);
        updatePinnedMessageView(z);
        updateInfoTopView(z);
        RecyclerAnimationScrollHelper recyclerAnimationScrollHelper2 = new RecyclerAnimationScrollHelper(this.chatListView, this.chatLayoutManager);
        this.chatScrollHelper = recyclerAnimationScrollHelper2;
        recyclerAnimationScrollHelper2.setScrollListener(new ChatActivity$$ExternalSyntheticLambda246(this));
        this.chatScrollHelper.setAnimationCallback(this.chatScrollHelperCallback);
        if (this.currentEncryptedChat != null) {
            this.unregisterFlagSecurePasscode = AndroidUtilities.registerFlagSecure(getParentActivity().getWindow());
        }
        if (getMessagesController().isChatNoForwards(this.currentChat)) {
        }
        if (charSequence2 != null) {
        }
        fixLayoutInternal();
        this.textSelectionHelper.setCallback(new AnonymousClass45());
        this.contentView.addView(this.textSelectionHelper.getOverlayView(context));
        FireworksOverlay fireworksOverlay2 = new FireworksOverlay(context);
        this.fireworksOverlay = fireworksOverlay2;
        this.contentView.addView(fireworksOverlay2, LayoutHelper.createFrame(-1, -1.0f));
        this.textSelectionHelper.setParentView(this.chatListView);
        j = getArguments().getInt("search_from_user_id", 0);
        long j32 = getArguments().getInt("search_from_chat_id", 0);
        if (j == 0) {
        }
        messageObject = this.replyingMessageObject;
        if (messageObject != null) {
        }
        if (i3 < 21) {
        }
        AnonymousClass46 anonymousClass462 = new AnonymousClass46(this, viewGroup, this.contentView);
        this.pinchToZoomHelper = anonymousClass462;
        anonymousClass462.setCallback(new AnonymousClass47());
        this.pinchToZoomHelper.setClipBoundsListener(new ChatActivity$$ExternalSyntheticLambda257(this));
        this.emojiAnimationsOverlay = new AnonymousClass48(this, this.contentView, this.chatListView, this.currentAccount, this.dialog_id, this.threadMessageId);
        this.actionBar.setDrawBlurBackground(this.contentView);
        tLRPC$Dialog = getMessagesController().dialogs_dict.get(this.dialog_id);
        if (tLRPC$Dialog != null) {
        }
        return this.fragmentView;
    }

    /* renamed from: org.telegram.ui.ChatActivity$10 */
    /* loaded from: classes3.dex */
    public class AnonymousClass10 extends ActionBar.ActionBarMenuOnItemClick {
        final /* synthetic */ Context val$context;

        AnonymousClass10(Context context) {
            ChatActivity.this = r1;
            this.val$context = context;
        }

        @Override // org.telegram.ui.ActionBar.ActionBar.ActionBarMenuOnItemClick
        public void onItemClick(int i) {
            TLRPC$User tLRPC$User;
            TLRPC$ChatFull tLRPC$ChatFull;
            TLRPC$User tLRPC$User2;
            if (i == -1) {
                if (((BaseFragment) ChatActivity.this).actionBar.isActionModeShowed()) {
                    ChatActivity.this.clearSelectionMode();
                    return;
                } else if (ChatActivity.this.checkRecordLocked(true)) {
                    return;
                } else {
                    ChatActivity.this.finishFragment();
                    return;
                }
            }
            MessageObject messageObject = null;
            boolean z = false;
            if (i == 10) {
                SpannableStringBuilder spannableStringBuilder = new SpannableStringBuilder();
                long j = 0;
                for (int i2 = 1; i2 >= 0; i2--) {
                    ArrayList arrayList = new ArrayList();
                    for (int i3 = 0; i3 < ChatActivity.this.selectedMessagesCanCopyIds[i2].size(); i3++) {
                        arrayList.add(Integer.valueOf(ChatActivity.this.selectedMessagesCanCopyIds[i2].keyAt(i3)));
                    }
                    if (ChatActivity.this.currentEncryptedChat == null) {
                        Collections.sort(arrayList);
                    } else {
                        Collections.sort(arrayList, Collections.reverseOrder());
                    }
                    for (int i4 = 0; i4 < arrayList.size(); i4++) {
                        MessageObject messageObject2 = (MessageObject) ChatActivity.this.selectedMessagesCanCopyIds[i2].get(((Integer) arrayList.get(i4)).intValue());
                        if (spannableStringBuilder.length() != 0) {
                            spannableStringBuilder.append((CharSequence) "\n\n");
                        }
                        spannableStringBuilder.append(ChatActivity.this.getMessageContent(messageObject2, j, arrayList.size() != 1 && ((tLRPC$User2 = ChatActivity.this.currentUser) == null || !tLRPC$User2.self)));
                        j = messageObject2.getFromChatId();
                    }
                }
                if (spannableStringBuilder.length() != 0) {
                    AndroidUtilities.addToClipboard(spannableStringBuilder);
                    ChatActivity.this.undoView.showWithAction(0L, 58, (Runnable) null);
                }
                ChatActivity.this.clearSelectionMode();
            } else if (i == 12) {
                if (ChatActivity.this.getParentActivity() == null) {
                    return;
                }
                ChatActivity.this.createDeleteMessagesAlert(null, null);
            } else if (i == 11) {
                ChatActivity.this.openForward(true);
            } else if (i == 25) {
                ArrayList arrayList2 = new ArrayList();
                for (int i5 = 1; i5 >= 0; i5--) {
                    for (int i6 = 0; i6 < ChatActivity.this.selectedMessagesIds[i5].size(); i6++) {
                        arrayList2.add((MessageObject) ChatActivity.this.selectedMessagesIds[i5].valueAt(i6));
                    }
                    ChatActivity.this.selectedMessagesIds[i5].clear();
                    ChatActivity.this.selectedMessagesCanCopyIds[i5].clear();
                    ChatActivity.this.selectedMessagesCanStarIds[i5].clear();
                }
                if (ChatActivity.this.canSaveMusicCount > 0) {
                    z = true;
                }
                ChatActivity.this.hideActionMode();
                ChatActivity.this.updatePinnedMessageView(true);
                ChatActivity.this.updateVisibleRows();
                MediaController.saveFilesFromMessages(ChatActivity.this.getParentActivity(), ChatActivity.this.getAccountInstance(), arrayList2, new ChatActivity$10$$ExternalSyntheticLambda2(this, z));
            } else if (i == 13) {
                if (ChatActivity.this.getParentActivity() == null) {
                    return;
                }
                ChatActivity chatActivity = ChatActivity.this;
                Activity parentActivity = chatActivity.getParentActivity();
                ChatActivity chatActivity2 = ChatActivity.this;
                chatActivity.showDialog(AlertsCreator.createTTLAlert(parentActivity, chatActivity2.currentEncryptedChat, chatActivity2.themeDelegate).create());
            } else if (i == 15 || i == 16 || i == 26) {
                if (ChatActivity.this.getParentActivity() == null) {
                    return;
                }
                ChatActivity chatActivity3 = ChatActivity.this;
                TLRPC$ChatFull tLRPC$ChatFull2 = chatActivity3.chatInfo;
                boolean z2 = tLRPC$ChatFull2 != null && tLRPC$ChatFull2.can_delete_channel;
                if (i == 26 || (i == 15 && chatActivity3.currentEncryptedChat == null && (((tLRPC$User = chatActivity3.currentUser) != null && !UserObject.isUserSelf(tLRPC$User) && !UserObject.isDeleted(ChatActivity.this.currentUser)) || ((tLRPC$ChatFull = ChatActivity.this.chatInfo) != null && tLRPC$ChatFull.can_delete_channel)))) {
                    ChatActivity chatActivity4 = ChatActivity.this;
                    AlertsCreator.createClearDaysDialogAlert(chatActivity4, -1, chatActivity4.currentUser, chatActivity4.currentChat, z2, new AnonymousClass1(z2), ChatActivity.this.getResourceProvider());
                    return;
                }
                ChatActivity chatActivity5 = ChatActivity.this;
                AlertsCreator.createClearOrDeleteDialogAlert(chatActivity5, i == 15, chatActivity5.currentChat, chatActivity5.currentUser, chatActivity5.currentEncryptedChat != null, true, z2, new ChatActivity$10$$ExternalSyntheticLambda1(this, i, z2), ChatActivity.this.themeDelegate);
            } else if (i == 17) {
                ChatActivity chatActivity6 = ChatActivity.this;
                if (chatActivity6.currentUser == null || chatActivity6.getParentActivity() == null) {
                    return;
                }
                if (ChatActivity.this.addToContactsButton.getTag() != null) {
                    ChatActivity chatActivity7 = ChatActivity.this;
                    chatActivity7.shareMyContact(((Integer) chatActivity7.addToContactsButton.getTag()).intValue(), null);
                    return;
                }
                Bundle bundle = new Bundle();
                bundle.putLong("user_id", ChatActivity.this.currentUser.id);
                bundle.putBoolean("addContact", true);
                ChatActivity.this.presentFragment(new ContactAddActivity(bundle));
            } else if (i == 18) {
                ChatActivity.this.toggleMute(false);
            } else if (i == 24) {
                try {
                    ChatActivity.this.getMediaDataController().installShortcut(ChatActivity.this.currentUser.id);
                } catch (Exception e) {
                    FileLog.e(e);
                }
            } else if (i == 21) {
                Activity parentActivity2 = ChatActivity.this.getParentActivity();
                long j2 = ChatActivity.this.dialog_id;
                ChatActivity chatActivity8 = ChatActivity.this;
                AlertsCreator.createReportAlert(parentActivity2, j2, 0, chatActivity8, chatActivity8.themeDelegate, null);
            } else if (i == 22) {
                for (int i7 = 0; i7 < 2; i7++) {
                    for (int i8 = 0; i8 < ChatActivity.this.selectedMessagesCanStarIds[i7].size(); i8++) {
                        MessageObject messageObject3 = (MessageObject) ChatActivity.this.selectedMessagesCanStarIds[i7].valueAt(i8);
                        ChatActivity.this.getMediaDataController().addRecentSticker(2, messageObject3, messageObject3.getDocument(), (int) (System.currentTimeMillis() / 1000), !ChatActivity.this.hasUnfavedSelected);
                    }
                }
                ChatActivity.this.clearSelectionMode();
            } else if (i == 23) {
                for (int i9 = 1; i9 >= 0; i9--) {
                    if (messageObject == null && ChatActivity.this.selectedMessagesIds[i9].size() == 1) {
                        ArrayList arrayList3 = new ArrayList();
                        for (int i10 = 0; i10 < ChatActivity.this.selectedMessagesIds[i9].size(); i10++) {
                            arrayList3.add(Integer.valueOf(ChatActivity.this.selectedMessagesIds[i9].keyAt(i10)));
                        }
                        messageObject = (MessageObject) ChatActivity.this.messagesDict[i9].get(((Integer) arrayList3.get(0)).intValue());
                    }
                    ChatActivity.this.selectedMessagesIds[i9].clear();
                    ChatActivity.this.selectedMessagesCanCopyIds[i9].clear();
                    ChatActivity.this.selectedMessagesCanStarIds[i9].clear();
                }
                ChatActivity.this.startEditingMessageObject(messageObject);
                ChatActivity.this.hideActionMode();
                ChatActivity.this.updatePinnedMessageView(true);
                ChatActivity.this.updateVisibleRows();
            } else if (i == 14) {
                ActionBarMenuSubItem actionBarMenuSubItem = new ActionBarMenuSubItem(this.val$context, false, true, true, ChatActivity.this.getResourceProvider());
                actionBarMenuSubItem.setTextAndIcon(LocaleController.getString("AttachMenu", 2131624511), 2131165527);
                actionBarMenuSubItem.setOnClickListener(new ChatActivity$10$$ExternalSyntheticLambda0(this));
                ChatActivity.this.headerItem.toggleSubMenu(actionBarMenuSubItem, ChatActivity.this.attachItem);
            } else if (i == 30) {
                ChatActivity.this.getSendMessagesHelper().sendMessage("/help", ChatActivity.this.dialog_id, null, null, null, false, null, null, null, true, 0, null);
            } else if (i == 31) {
                ChatActivity.this.getSendMessagesHelper().sendMessage("/settings", ChatActivity.this.dialog_id, null, null, null, false, null, null, null, true, 0, null);
            } else if (i == 40) {
                ChatActivity.this.openSearchWithText(null);
            } else if (i == 32 || i == 33) {
                ChatActivity chatActivity9 = ChatActivity.this;
                if (chatActivity9.currentUser == null || chatActivity9.getParentActivity() == null) {
                    return;
                }
                ChatActivity chatActivity10 = ChatActivity.this;
                TLRPC$User tLRPC$User3 = chatActivity10.currentUser;
                boolean z3 = i == 33;
                TLRPC$UserFull tLRPC$UserFull = chatActivity10.userInfo;
                VoIPHelper.startCall(tLRPC$User3, z3, tLRPC$UserFull != null && tLRPC$UserFull.video_calls_available, chatActivity10.getParentActivity(), ChatActivity.this.getMessagesController().getUserFull(ChatActivity.this.currentUser.id), ChatActivity.this.getAccountInstance());
            } else if (i == 50) {
                ChatActivityEnterView chatActivityEnterView = ChatActivity.this.chatActivityEnterView;
                if (chatActivityEnterView == null) {
                    return;
                }
                chatActivityEnterView.getEditField().setSelectionOverride(ChatActivity.this.editTextStart, ChatActivity.this.editTextEnd);
                ChatActivity.this.chatActivityEnterView.getEditField().makeSelectedBold();
            } else if (i == 51) {
                ChatActivityEnterView chatActivityEnterView2 = ChatActivity.this.chatActivityEnterView;
                if (chatActivityEnterView2 == null) {
                    return;
                }
                chatActivityEnterView2.getEditField().setSelectionOverride(ChatActivity.this.editTextStart, ChatActivity.this.editTextEnd);
                ChatActivity.this.chatActivityEnterView.getEditField().makeSelectedItalic();
            } else if (i == 57) {
                ChatActivityEnterView chatActivityEnterView3 = ChatActivity.this.chatActivityEnterView;
                if (chatActivityEnterView3 == null) {
                    return;
                }
                chatActivityEnterView3.getEditField().setSelectionOverride(ChatActivity.this.editTextStart, ChatActivity.this.editTextEnd);
                ChatActivity.this.chatActivityEnterView.getEditField().makeSelectedSpoiler();
            } else if (i == 52) {
                ChatActivityEnterView chatActivityEnterView4 = ChatActivity.this.chatActivityEnterView;
                if (chatActivityEnterView4 == null) {
                    return;
                }
                chatActivityEnterView4.getEditField().setSelectionOverride(ChatActivity.this.editTextStart, ChatActivity.this.editTextEnd);
                ChatActivity.this.chatActivityEnterView.getEditField().makeSelectedMono();
            } else if (i == 55) {
                ChatActivityEnterView chatActivityEnterView5 = ChatActivity.this.chatActivityEnterView;
                if (chatActivityEnterView5 == null) {
                    return;
                }
                chatActivityEnterView5.getEditField().setSelectionOverride(ChatActivity.this.editTextStart, ChatActivity.this.editTextEnd);
                ChatActivity.this.chatActivityEnterView.getEditField().makeSelectedStrike();
            } else if (i == 56) {
                ChatActivityEnterView chatActivityEnterView6 = ChatActivity.this.chatActivityEnterView;
                if (chatActivityEnterView6 == null) {
                    return;
                }
                chatActivityEnterView6.getEditField().setSelectionOverride(ChatActivity.this.editTextStart, ChatActivity.this.editTextEnd);
                ChatActivity.this.chatActivityEnterView.getEditField().makeSelectedUnderline();
            } else if (i == 53) {
                ChatActivityEnterView chatActivityEnterView7 = ChatActivity.this.chatActivityEnterView;
                if (chatActivityEnterView7 == null) {
                    return;
                }
                chatActivityEnterView7.getEditField().setSelectionOverride(ChatActivity.this.editTextStart, ChatActivity.this.editTextEnd);
                ChatActivity.this.chatActivityEnterView.getEditField().makeSelectedUrl();
            } else if (i != 54) {
                if (i != 27) {
                    return;
                }
                ChatActivity.this.showChatThemeBottomSheet();
            } else {
                ChatActivityEnterView chatActivityEnterView8 = ChatActivity.this.chatActivityEnterView;
                if (chatActivityEnterView8 == null) {
                    return;
                }
                chatActivityEnterView8.getEditField().setSelectionOverride(ChatActivity.this.editTextStart, ChatActivity.this.editTextEnd);
                ChatActivity.this.chatActivityEnterView.getEditField().makeSelectedRegular();
            }
        }

        public /* synthetic */ void lambda$onItemClick$0(boolean z, int i) {
            if (i <= 0 || ChatActivity.this.getParentActivity() == null) {
                return;
            }
            BulletinFactory.of(ChatActivity.this).createDownloadBulletin(z ? BulletinFactory.FileType.AUDIOS : BulletinFactory.FileType.UNKNOWNS, i, ChatActivity.this.themeDelegate).show();
        }

        /* renamed from: org.telegram.ui.ChatActivity$10$1 */
        /* loaded from: classes3.dex */
        public class AnonymousClass1 implements MessagesStorage.BooleanCallback {
            final /* synthetic */ boolean val$canDeleteHistory;

            AnonymousClass1(boolean z) {
                AnonymousClass10.this = r1;
                this.val$canDeleteHistory = z;
            }

            @Override // org.telegram.messenger.MessagesStorage.BooleanCallback
            public void run(boolean z) {
                if (z) {
                    ChatActivity chatActivity = ChatActivity.this;
                    if (chatActivity.currentUser != null || this.val$canDeleteHistory) {
                        chatActivity.getMessagesStorage().getMessagesCount(ChatActivity.this.dialog_id, new ChatActivity$10$1$$ExternalSyntheticLambda1(this, this.val$canDeleteHistory));
                        return;
                    }
                }
                ChatActivity.this.performHistoryClear(z, this.val$canDeleteHistory);
            }

            public /* synthetic */ void lambda$run$0(boolean z, boolean z2) {
                ChatActivity.this.performHistoryClear(true, z);
            }

            public /* synthetic */ void lambda$run$1(boolean z, int i) {
                if (i >= 50) {
                    ChatActivity chatActivity = ChatActivity.this;
                    AlertsCreator.createClearOrDeleteDialogAlert(chatActivity, true, false, true, chatActivity.currentChat, chatActivity.currentUser, false, false, z, new ChatActivity$10$1$$ExternalSyntheticLambda0(this, z), ChatActivity.this.themeDelegate);
                    return;
                }
                ChatActivity.this.performHistoryClear(true, z);
            }
        }

        public /* synthetic */ void lambda$onItemClick$1(int i, boolean z, boolean z2) {
            if (i == 15 && ChatObject.isChannel(ChatActivity.this.currentChat)) {
                TLRPC$Chat tLRPC$Chat = ChatActivity.this.currentChat;
                if (!tLRPC$Chat.megagroup || !TextUtils.isEmpty(tLRPC$Chat.username)) {
                    ChatActivity.this.getMessagesController().deleteDialog(ChatActivity.this.dialog_id, 2, z2);
                    return;
                }
            }
            if (i != 15) {
                NotificationCenter notificationCenter = ChatActivity.this.getNotificationCenter();
                ChatActivity chatActivity = ChatActivity.this;
                int i2 = NotificationCenter.closeChats;
                notificationCenter.removeObserver(chatActivity, i2);
                ChatActivity.this.getNotificationCenter().postNotificationName(i2, new Object[0]);
                ChatActivity.this.finishFragment();
                NotificationCenter notificationCenter2 = ChatActivity.this.getNotificationCenter();
                int i3 = NotificationCenter.needDeleteDialog;
                ChatActivity chatActivity2 = ChatActivity.this;
                notificationCenter2.postNotificationName(i3, Long.valueOf(ChatActivity.this.dialog_id), chatActivity2.currentUser, chatActivity2.currentChat, Boolean.valueOf(z2));
                return;
            }
            ChatActivity.this.performHistoryClear(z2, z);
        }

        public /* synthetic */ void lambda$onItemClick$2(View view) {
            ChatActivity.this.headerItem.closeSubMenu();
            if (ChatActivity.this.chatAttachAlert != null) {
                ChatActivity.this.chatAttachAlert.setEditingMessageObject(null);
            }
            ChatActivity.this.openAttachMenu();
        }
    }

    public /* synthetic */ boolean lambda$createView$14(View view, View view2) {
        ActionBarPopupWindow show = BackButtonMenu.show(this, view, this.dialog_id, this.themeDelegate);
        this.scrimPopupWindow = show;
        if (show != null) {
            show.setOnDismissListener(new ChatActivity$$ExternalSyntheticLambda112(this));
            this.chatListView.stopScroll();
            this.chatLayoutManager.setCanScrollVertically(false);
            dimBehindView(view, 0.3f);
            hideHints(false);
            UndoView undoView = this.topUndoView;
            if (undoView != null) {
                undoView.hide(true, 1);
            }
            UndoView undoView2 = this.undoView;
            if (undoView2 != null) {
                undoView2.hide(true, 1);
            }
            ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
            if (chatActivityEnterView != null) {
                chatActivityEnterView.getEditField().setAllowDrawCursor(false);
            }
            return true;
        }
        return false;
    }

    public /* synthetic */ void lambda$createView$13() {
        this.scrimPopupWindow = null;
        this.menuDeleteItem = null;
        this.scrimPopupWindowItems = null;
        this.chatLayoutManager.setCanScrollVertically(true);
        if (this.scrimPopupWindowHideDimOnDismiss) {
            dimBehindView(false);
        } else {
            this.scrimPopupWindowHideDimOnDismiss = true;
        }
        ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        if (chatActivityEnterView != null) {
            chatActivityEnterView.getEditField().setAllowDrawCursor(true);
        }
    }

    public /* synthetic */ boolean lambda$createView$15(View view, MotionEvent motionEvent) {
        ChatThemeBottomSheet chatThemeBottomSheet = this.chatThemeBottomSheet;
        if (chatThemeBottomSheet != null) {
            chatThemeBottomSheet.close();
            return true;
        }
        return false;
    }

    public /* synthetic */ void lambda$createView$16(int i, View view) {
        jumpToDate(i);
    }

    public /* synthetic */ void lambda$createView$20(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLObject instanceof TLRPC$messages_Messages) {
            if (!((TLRPC$messages_Messages) tLObject).messages.isEmpty()) {
                TLRPC$TL_messages_getHistory tLRPC$TL_messages_getHistory = new TLRPC$TL_messages_getHistory();
                tLRPC$TL_messages_getHistory.peer = getMessagesController().getInputPeer(this.dialog_id);
                tLRPC$TL_messages_getHistory.offset_date = this.startLoadFromDate + 86400;
                tLRPC$TL_messages_getHistory.limit = 1;
                getConnectionsManager().sendRequest(tLRPC$TL_messages_getHistory, new ChatActivity$$ExternalSyntheticLambda226(this, tLObject));
                return;
            }
            this.actionBar.setSubtitle(LocaleController.getString("NoMessagesForThisDay", 2131626890));
        }
    }

    public /* synthetic */ void lambda$createView$19(TLObject tLObject, TLObject tLObject2, TLRPC$TL_error tLRPC$TL_error) {
        int i;
        if (tLObject2 instanceof TLRPC$messages_Messages) {
            TLRPC$messages_Messages tLRPC$messages_Messages = (TLRPC$messages_Messages) tLObject2;
            if (!tLRPC$messages_Messages.messages.isEmpty()) {
                i = ((TLRPC$messages_Messages) tLObject).offset_id_offset - tLRPC$messages_Messages.offset_id_offset;
            } else {
                i = ((TLRPC$messages_Messages) tLObject).offset_id_offset;
            }
            AndroidUtilities.runOnUIThread(new ChatActivity$$ExternalSyntheticLambda162(this, i));
        }
    }

    public /* synthetic */ void lambda$createView$17(int i) {
        this.actionBar.setSubtitle(LocaleController.formatPluralString("messages", i, new Object[0]));
    }

    public /* synthetic */ void lambda$createView$18(int i) {
        if (i != 0) {
            AndroidUtilities.runOnUIThread(new ChatActivity$$ExternalSyntheticLambda161(this, i));
        } else {
            this.actionBar.setSubtitle(LocaleController.getString("NoMessagesForThisDay", 2131626890));
        }
    }

    /* renamed from: org.telegram.ui.ChatActivity$11 */
    /* loaded from: classes3.dex */
    public class AnonymousClass11 extends ActionBarMenuItem.ActionBarMenuItemSearchListener {
        AnonymousClass11() {
            ChatActivity.this = r1;
        }

        @Override // org.telegram.ui.ActionBar.ActionBarMenuItem.ActionBarMenuItemSearchListener
        public boolean canCollapseSearch() {
            if (ChatActivity.this.messagesSearchListView.getTag() != null) {
                ChatActivity.this.showMessagesSearchListView(false);
                return false;
            }
            return true;
        }

        @Override // org.telegram.ui.ActionBar.ActionBarMenuItem.ActionBarMenuItemSearchListener
        public void onSearchCollapse() {
            TLRPC$Chat tLRPC$Chat;
            ChatActivity.this.searchCalendarButton.setVisibility(0);
            if (ChatActivity.this.searchUserButton != null) {
                ChatActivity.this.searchUserButton.setVisibility(0);
            }
            if (ChatActivity.this.searchingForUser) {
                ChatActivity.this.mentionContainer.getAdapter().searchUsernameOrHashtag(null, 0, null, false, true);
                ChatActivity.this.searchingForUser = false;
            }
            ChatActivity.this.mentionContainer.setReversed(false);
            ChatActivity.this.mentionContainer.getAdapter().setSearchingMentions(false);
            ChatActivity.this.searchingUserMessages = null;
            ChatActivity.this.searchingChatMessages = null;
            ChatActivity.this.searchItem.setSearchFieldHint(LocaleController.getString("Search", 2131628155));
            ChatActivity.this.searchItem.setSearchFieldCaption(null);
            AndroidUtilities.updateViewVisibilityAnimated(ChatActivity.this.avatarContainer, true, 0.95f, true);
            if (ChatActivity.this.editTextItem != null && ChatActivity.this.editTextItem.getTag() != null) {
                if (ChatActivity.this.headerItem != null) {
                    ChatActivity.this.headerItem.setVisibility(8);
                }
                if (ChatActivity.this.editTextItem != null) {
                    ChatActivity.this.editTextItem.setVisibility(0);
                }
                if (ChatActivity.this.attachItem != null) {
                    ChatActivity.this.attachItem.setVisibility(8);
                }
                if (ChatActivity.this.searchIconItem != null && ChatActivity.this.showSearchAsIcon) {
                    ChatActivity.this.searchIconItem.setVisibility(8);
                }
                if (ChatActivity.this.audioCallIconItem != null && ChatActivity.this.showAudioCallAsIcon) {
                    ChatActivity.this.audioCallIconItem.setVisibility(8);
                }
            } else if (!ChatActivity.this.chatActivityEnterView.hasText() || !TextUtils.isEmpty(ChatActivity.this.chatActivityEnterView.getSlowModeTimer()) || ((tLRPC$Chat = ChatActivity.this.currentChat) != null && !ChatObject.canSendMessages(tLRPC$Chat))) {
                if (ChatActivity.this.headerItem != null) {
                    ChatActivity.this.headerItem.setVisibility(0);
                }
                if (ChatActivity.this.audioCallIconItem != null && ChatActivity.this.showAudioCallAsIcon) {
                    ChatActivity.this.audioCallIconItem.setVisibility(0);
                }
                if (ChatActivity.this.searchIconItem != null && ChatActivity.this.showSearchAsIcon) {
                    ChatActivity.this.searchIconItem.setVisibility(0);
                }
                if (ChatActivity.this.editTextItem != null) {
                    ChatActivity.this.editTextItem.setVisibility(8);
                }
                if (ChatActivity.this.attachItem != null) {
                    ChatActivity.this.attachItem.setVisibility(8);
                }
            } else {
                if (ChatActivity.this.headerItem != null) {
                    ChatActivity.this.headerItem.setVisibility(8);
                }
                if (ChatActivity.this.editTextItem != null) {
                    ChatActivity.this.editTextItem.setVisibility(8);
                }
                if (ChatActivity.this.attachItem != null) {
                    ChatActivity.this.attachItem.setVisibility(0);
                }
                if (ChatActivity.this.searchIconItem != null && ChatActivity.this.showSearchAsIcon) {
                    ChatActivity.this.searchIconItem.setVisibility(8);
                }
                if (ChatActivity.this.audioCallIconItem != null && ChatActivity.this.showAudioCallAsIcon) {
                    ChatActivity.this.audioCallIconItem.setVisibility(8);
                }
            }
            if ((ChatActivity.this.threadMessageId == 0 && !UserObject.isReplyUser(ChatActivity.this.currentUser)) || (ChatActivity.this.threadMessageObject != null && ChatActivity.this.threadMessageObject.getRepliesCount() == 0)) {
                ChatActivity.this.searchItem.setVisibility(8);
            }
            ChatActivity.this.searchItemVisible = false;
            ChatActivity.this.getMediaDataController().clearFoundMessageObjects();
            if (ChatActivity.this.messagesSearchAdapter != null) {
                ChatActivity.this.messagesSearchAdapter.notifyDataSetChanged();
            }
            ChatActivity.this.removeSelectedMessageHighlight();
            ChatActivity.this.updateBottomOverlay();
            ChatActivity.this.updatePinnedMessageView(true);
            ChatActivity.this.updateVisibleRows();
        }

        @Override // org.telegram.ui.ActionBar.ActionBarMenuItem.ActionBarMenuItemSearchListener
        public void onSearchExpand() {
            if (ChatActivity.this.threadMessageId != 0 || UserObject.isReplyUser(ChatActivity.this.currentUser)) {
                ChatActivity.this.openSearchWithText(null);
            }
            if (!ChatActivity.this.openSearchKeyboard) {
                return;
            }
            ChatActivity.this.saveKeyboardPositionBeforeTransition();
            AndroidUtilities.requestAdjustResize(ChatActivity.this.getParentActivity(), ((BaseFragment) ChatActivity.this).classGuid);
            AndroidUtilities.runOnUIThread(new ChatActivity$11$$ExternalSyntheticLambda0(this), 500L);
        }

        public /* synthetic */ void lambda$onSearchExpand$0() {
            ChatActivity.this.searchItem.getSearchField().requestFocus();
            AndroidUtilities.showKeyboard(ChatActivity.this.searchItem.getSearchField());
            ChatActivity.this.removeKeyboardPositionBeforeTransition();
        }

        @Override // org.telegram.ui.ActionBar.ActionBarMenuItem.ActionBarMenuItemSearchListener
        public void onSearchPressed(EditText editText) {
            ChatActivity.this.updateSearchButtons(0, 0, -1);
            ChatActivity.this.getMediaDataController().searchMessagesInChat(editText.getText().toString(), ChatActivity.this.dialog_id, ChatActivity.this.mergeDialogId, ((BaseFragment) ChatActivity.this).classGuid, 0, ChatActivity.this.threadMessageId, ChatActivity.this.searchingUserMessages, ChatActivity.this.searchingChatMessages);
        }

        @Override // org.telegram.ui.ActionBar.ActionBarMenuItem.ActionBarMenuItemSearchListener
        public void onTextChanged(EditText editText) {
            ChatActivity.this.showMessagesSearchListView(false);
            if (!ChatActivity.this.searchingForUser) {
                if (ChatActivity.this.searchingUserMessages != null || ChatActivity.this.searchingChatMessages != null || ChatActivity.this.searchUserButton == null || !TextUtils.equals(editText.getText(), LocaleController.getString("SearchFrom", 2131628173))) {
                    return;
                }
                ChatActivity.this.searchUserButton.callOnClick();
                return;
            }
            MentionsAdapter adapter = ChatActivity.this.mentionContainer.getAdapter();
            adapter.searchUsernameOrHashtag("@" + editText.getText().toString(), 0, ChatActivity.this.messages, true, true);
        }

        @Override // org.telegram.ui.ActionBar.ActionBarMenuItem.ActionBarMenuItemSearchListener
        public void onCaptionCleared() {
            if (ChatActivity.this.searchingUserMessages != null || ChatActivity.this.searchingChatMessages != null) {
                ChatActivity.this.searchUserButton.callOnClick();
                return;
            }
            if (ChatActivity.this.searchingForUser) {
                ChatActivity.this.mentionContainer.getAdapter().searchUsernameOrHashtag(null, 0, null, false, true);
                ChatActivity.this.searchingForUser = false;
                ChatActivity.this.searchItem.setSearchFieldText("", true);
            }
            ChatActivity.this.searchItem.setSearchFieldHint(LocaleController.getString("Search", 2131628155));
            ChatActivity.this.searchCalendarButton.setVisibility(0);
            ChatActivity.this.searchUserButton.setVisibility(0);
            ChatActivity.this.searchingUserMessages = null;
            ChatActivity.this.searchingChatMessages = null;
        }

        @Override // org.telegram.ui.ActionBar.ActionBarMenuItem.ActionBarMenuItemSearchListener
        public boolean forceShowClear() {
            return ChatActivity.this.searchingForUser;
        }
    }

    /* renamed from: org.telegram.ui.ChatActivity$12 */
    /* loaded from: classes3.dex */
    class AnonymousClass12 implements ChatNotificationsPopupWrapper.Callback {
        AnonymousClass12() {
            ChatActivity.this = r1;
        }

        @Override // org.telegram.ui.Components.ChatNotificationsPopupWrapper.Callback
        public void dismiss() {
            ChatActivity.this.headerItem.toggleSubMenu();
        }

        @Override // org.telegram.ui.Components.ChatNotificationsPopupWrapper.Callback
        public void toggleSound() {
            SharedPreferences notificationsSettings = MessagesController.getNotificationsSettings(((BaseFragment) ChatActivity.this).currentAccount);
            boolean z = !notificationsSettings.getBoolean("sound_enabled_" + ChatActivity.this.dialog_id, true);
            notificationsSettings.edit().putBoolean("sound_enabled_" + ChatActivity.this.dialog_id, z).apply();
            if (BulletinFactory.canShowBulletin(ChatActivity.this)) {
                ChatActivity chatActivity = ChatActivity.this;
                BulletinFactory.createSoundEnabledBulletin(chatActivity, !z, chatActivity.getResourceProvider()).show();
            }
            ChatActivity.this.updateTitleIcons();
        }

        @Override // org.telegram.ui.Components.ChatNotificationsPopupWrapper.Callback
        public void muteFor(int i) {
            if (i == 0) {
                if (ChatActivity.this.getMessagesController().isDialogMuted(ChatActivity.this.dialog_id)) {
                    ChatActivity.this.toggleMute(true);
                }
                if (!BulletinFactory.canShowBulletin(ChatActivity.this)) {
                    return;
                }
                ChatActivity chatActivity = ChatActivity.this;
                BulletinFactory.createMuteBulletin(chatActivity, 4, i, chatActivity.getResourceProvider()).show();
                return;
            }
            ChatActivity.this.getNotificationsController().muteUntil(ChatActivity.this.dialog_id, i);
            if (!BulletinFactory.canShowBulletin(ChatActivity.this)) {
                return;
            }
            ChatActivity chatActivity2 = ChatActivity.this;
            BulletinFactory.createMuteBulletin(chatActivity2, 5, i, chatActivity2.getResourceProvider()).show();
        }

        @Override // org.telegram.ui.Components.ChatNotificationsPopupWrapper.Callback
        public void showCustomize() {
            if (ChatActivity.this.dialog_id != 0) {
                ChatActivity chatActivity = ChatActivity.this;
                if (chatActivity.currentUser != null) {
                    chatActivity.getMessagesController().putUser(ChatActivity.this.currentUser, true);
                }
                Bundle bundle = new Bundle();
                bundle.putLong("dialog_id", ChatActivity.this.dialog_id);
                ChatActivity chatActivity2 = ChatActivity.this;
                chatActivity2.presentFragment(new ProfileNotificationsActivity(bundle, chatActivity2.themeDelegate));
            }
        }

        @Override // org.telegram.ui.Components.ChatNotificationsPopupWrapper.Callback
        public void toggleMute() {
            ChatActivity.this.toggleMute(true);
            ChatActivity chatActivity = ChatActivity.this;
            BulletinFactory.createMuteBulletin(chatActivity, chatActivity.getMessagesController().isDialogMuted(ChatActivity.this.dialog_id), ChatActivity.this.themeDelegate).show();
        }
    }

    public /* synthetic */ void lambda$createView$22(View view) {
        if (MessagesController.getInstance(this.currentAccount).isDialogMuted(this.dialog_id)) {
            updateTitleIcons(true);
            AndroidUtilities.runOnUIThread(new ChatActivity$$ExternalSyntheticLambda126(this), 150L);
            this.headerItem.toggleSubMenu();
            BulletinFactory.createMuteBulletin(this, false, this.themeDelegate).show();
            return;
        }
        this.muteItem.openSwipeBack();
    }

    public /* synthetic */ void lambda$createView$21() {
        toggleMute(true);
    }

    /* renamed from: org.telegram.ui.ChatActivity$13 */
    /* loaded from: classes3.dex */
    public class AnonymousClass13 extends SizeNotifierFrameLayout {
        int backgroundColor;
        Paint backgroundPaint;
        int lastHeight;
        int lastWidth;
        private long pressTime;
        final /* synthetic */ Context val$context;
        private float x;
        private float y;
        int inputFieldHeight = 0;
        ArrayList<ChatMessageCell> drawTimeAfter = new ArrayList<>();
        ArrayList<ChatMessageCell> drawNamesAfter = new ArrayList<>();
        ArrayList<ChatMessageCell> drawCaptionAfter = new ArrayList<>();

        /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
        AnonymousClass13(Context context, ActionBarLayout actionBarLayout, Context context2) {
            super(context, actionBarLayout);
            ChatActivity.this = r1;
            this.val$context = context2;
            this.adjustPanLayoutHelper = new AnonymousClass1(this);
        }

        @Override // org.telegram.ui.Components.SizeNotifierFrameLayout
        public void drawList(Canvas canvas, boolean z) {
            float dp = (ChatActivity.this.chatListViewPaddingTop - ChatActivity.this.chatListViewPaddingVisibleOffset) - AndroidUtilities.dp(4.0f);
            for (int i = 0; i < ChatActivity.this.chatListView.getChildCount(); i++) {
                View childAt = ChatActivity.this.chatListView.getChildAt(i);
                if ((!z || childAt.getY() <= AndroidUtilities.dp(40.0f) + dp) && (z || childAt.getY() + childAt.getMeasuredHeight() >= AndroidUtilities.dp(203.0f))) {
                    canvas.save();
                    if (z) {
                        canvas.translate(ChatActivity.this.chatListView.getX() + childAt.getX(), (ChatActivity.this.chatListView.getY() + childAt.getY()) - ChatActivity.this.contentPanTranslation);
                    } else {
                        canvas.translate(ChatActivity.this.chatListView.getX() + childAt.getX(), ChatActivity.this.chatListView.getTop() + childAt.getY());
                    }
                    if (childAt instanceof ChatMessageCell) {
                        ChatMessageCell chatMessageCell = (ChatMessageCell) childAt;
                        chatMessageCell.drawForBlur = true;
                        if (chatMessageCell.drawBackgroundInParent()) {
                            chatMessageCell.drawBackgroundInternal(canvas, true);
                        }
                        childAt.draw(canvas);
                        if (chatMessageCell.hasOutboundsContent()) {
                            ((ChatMessageCell) childAt).drawOutboundsContent(canvas);
                        }
                        chatMessageCell.drawForBlur = false;
                    } else {
                        childAt.draw(canvas);
                    }
                    canvas.restore();
                }
            }
        }

        @Override // org.telegram.ui.Components.SizeNotifierFrameLayout
        protected int getScrollOffset() {
            return ChatActivity.this.chatListView.computeVerticalScrollOffset();
        }

        @Override // org.telegram.ui.Components.SizeNotifierFrameLayout
        protected float getBottomOffset() {
            return ChatActivity.this.chatListView.getBottom();
        }

        @Override // org.telegram.ui.Components.SizeNotifierFrameLayout
        protected float getListTranslationY() {
            return ChatActivity.this.chatListView.getTranslationY();
        }

        /* renamed from: org.telegram.ui.ChatActivity$13$1 */
        /* loaded from: classes3.dex */
        public class AnonymousClass1 extends AdjustPanLayoutHelper {
            /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
            AnonymousClass1(View view) {
                super(view);
                AnonymousClass13.this = r1;
            }

            @Override // org.telegram.ui.ActionBar.AdjustPanLayoutHelper
            public void onTransitionStart(boolean z, int i) {
                ChatActivity.this.wasManualScroll = true;
                ChatActivityEnterView chatActivityEnterView = ChatActivity.this.chatActivityEnterView;
                if (chatActivityEnterView != null) {
                    chatActivityEnterView.onAdjustPanTransitionStart(z, i);
                }
                MentionsContainerView mentionsContainerView = ChatActivity.this.mentionContainer;
                if (mentionsContainerView != null) {
                    mentionsContainerView.onPanTransitionStart();
                }
                if (ChatActivity.this.mediaBanTooltip != null) {
                    ChatActivity.this.mediaBanTooltip.hide(false);
                }
            }

            @Override // org.telegram.ui.ActionBar.AdjustPanLayoutHelper
            public void onTransitionEnd() {
                ChatActivityEnterView chatActivityEnterView = ChatActivity.this.chatActivityEnterView;
                if (chatActivityEnterView != null) {
                    chatActivityEnterView.onAdjustPanTransitionEnd();
                }
                MentionsContainerView mentionsContainerView = ChatActivity.this.mentionContainer;
                if (mentionsContainerView != null) {
                    mentionsContainerView.onPanTransitionEnd();
                }
            }

            @Override // org.telegram.ui.ActionBar.AdjustPanLayoutHelper
            public void onPanTranslationUpdate(float f, float f2, boolean z) {
                if (ChatActivity.this.getParentLayout() == null || !ChatActivity.this.getParentLayout().isPreviewOpenAnimationInProgress()) {
                    ChatActivity.this.contentPanTranslation = f;
                    if (ChatActivity.this.chatAttachAlert == null || !ChatActivity.this.chatAttachAlert.isShowing()) {
                        ((BaseFragment) ChatActivity.this).actionBar.setTranslationY(f);
                        float f3 = f / 2.0f;
                        ChatActivity.this.emptyViewContainer.setTranslationY(f3);
                        ChatActivity.this.progressView.setTranslationY(f3);
                        int i = (int) f;
                        ChatActivity.this.contentView.setBackgroundTranslation(i);
                        ChatActivity.this.instantCameraView.onPanTranslationUpdate(f);
                        if (ChatActivity.this.blurredView != null) {
                            ChatActivity.this.blurredView.drawable.onPanTranslationUpdate(f);
                        }
                        ChatActivity.this.setFragmentPanTranslationOffset(i);
                        ChatActivity.this.invalidateChatListViewTopPadding();
                        ChatActivity.this.invalidateMessagesVisiblePart();
                    } else {
                        AnonymousClass13.this.setNonNoveTranslation(f);
                    }
                    ChatActivity.this.chatListView.invalidate();
                    ChatActivity.this.updateBulletinLayout();
                    ChatActivityEnterView chatActivityEnterView = ChatActivity.this.chatActivityEnterView;
                    if (chatActivityEnterView != null) {
                        chatActivityEnterView.onAdjustPanTransitionUpdate(f, f2, z);
                    }
                    MentionsContainerView mentionsContainerView = ChatActivity.this.mentionContainer;
                    if (mentionsContainerView == null) {
                        return;
                    }
                    mentionsContainerView.onPanTransitionUpdate(f);
                }
            }

            @Override // org.telegram.ui.ActionBar.AdjustPanLayoutHelper
            protected boolean heightAnimationEnabled() {
                ActionBarLayout parentLayout = ChatActivity.this.getParentLayout();
                if (((BaseFragment) ChatActivity.this).inPreviewMode || ((BaseFragment) ChatActivity.this).inBubbleMode || AndroidUtilities.isInMultiwindow || parentLayout == null || ChatActivity.this.fixedKeyboardHeight > 0 || System.currentTimeMillis() - ChatActivity.this.activityResumeTime < 250) {
                    return false;
                }
                if ((ChatActivity.this != parentLayout.getLastFragment() || !parentLayout.isTransitionAnimationInProgress()) && !parentLayout.isPreviewOpenAnimationInProgress() && !((BaseFragment) ChatActivity.this).isPaused) {
                    ChatActivity chatActivity = ChatActivity.this;
                    if (chatActivity.openAnimationEnded && (chatActivity.chatAttachAlert == null || !ChatActivity.this.chatAttachAlert.isShowing())) {
                        ChatActivityEnterView chatActivityEnterView = ChatActivity.this.chatActivityEnterView;
                        return chatActivityEnterView == null || chatActivityEnterView.getTrendingStickersAlert() == null || !ChatActivity.this.chatActivityEnterView.getTrendingStickersAlert().isShowing();
                    }
                }
                return false;
            }

            @Override // org.telegram.ui.ActionBar.AdjustPanLayoutHelper
            protected int startOffset() {
                if (AnonymousClass13.this.getKeyboardHeight() > AndroidUtilities.dp(20.0f) || !ChatActivity.this.chatActivityEnterView.isPopupShowing()) {
                    return 0;
                }
                return ChatActivity.this.chatActivityEnterView.getEmojiPadding();
            }
        }

        @Override // org.telegram.ui.Components.SizeNotifierFrameLayout, android.view.ViewGroup, android.view.View
        public void onAttachedToWindow() {
            super.onAttachedToWindow();
            this.adjustPanLayoutHelper.onAttach();
            ChatActivity.this.chatActivityEnterView.setAdjustPanLayoutHelper(this.adjustPanLayoutHelper);
            MessageObject playingMessageObject = MediaController.getInstance().getPlayingMessageObject();
            if (playingMessageObject != null && ((playingMessageObject.isRoundVideo() || playingMessageObject.isVideo()) && playingMessageObject.eventId == 0 && playingMessageObject.getDialogId() == ChatActivity.this.dialog_id)) {
                MediaController.getInstance().setTextureView(ChatActivity.this.createTextureView(false), ChatActivity.this.aspectRatioFrameLayout, ChatActivity.this.videoPlayerContainer, true);
            }
            if (ChatActivity.this.pullingDownDrawable != null) {
                ChatActivity.this.pullingDownDrawable.onAttach();
            }
            ChatActivity.this.emojiAnimationsOverlay.onAttachedToWindow();
        }

        @Override // org.telegram.ui.Components.SizeNotifierFrameLayout, android.view.ViewGroup, android.view.View
        public void onDetachedFromWindow() {
            super.onDetachedFromWindow();
            this.adjustPanLayoutHelper.onDetach();
            if (ChatActivity.this.pullingDownDrawable != null) {
                ChatActivity.this.pullingDownDrawable.onDetach();
                ChatActivity.this.pullingDownDrawable = null;
            }
            ChatActivity.this.emojiAnimationsOverlay.onDetachedFromWindow();
            AndroidUtilities.runOnUIThread(ChatActivity$13$$ExternalSyntheticLambda1.INSTANCE);
        }

        /* JADX WARN: Removed duplicated region for block: B:66:0x01f7  */
        /* JADX WARN: Removed duplicated region for block: B:68:0x01fa  */
        /* JADX WARN: Removed duplicated region for block: B:69:0x020e  */
        @Override // android.view.ViewGroup, android.view.View
        /*
            Code decompiled incorrectly, please refer to instructions dump.
        */
        public boolean dispatchTouchEvent(MotionEvent motionEvent) {
            float f;
            boolean z;
            boolean z2;
            Rect rect;
            if (AndroidUtilities.isInMultiwindow || ChatActivity.this.isInBubbleMode()) {
                f = (ChatActivity.this.chatActivityEnterView.getEmojiView() != null ? ChatActivity.this.chatActivityEnterView.getEmojiView() : ChatActivity.this.chatActivityEnterView).getY();
            } else {
                f = ChatActivity.this.chatActivityEnterView.getY();
            }
            if (ChatActivity.this.scrimView == null) {
                ChatActivityEnterView chatActivityEnterView = ChatActivity.this.chatActivityEnterView;
                if (chatActivityEnterView != null && chatActivityEnterView.isStickersExpanded() && motionEvent.getY() < f) {
                    return false;
                }
                ChatActivity.this.lastTouchY = motionEvent.getY();
                TextSelectionHelper<Cell>.TextSelectionOverlay overlayView = ChatActivity.this.textSelectionHelper.getOverlayView(this.val$context);
                motionEvent.offsetLocation(-overlayView.getX(), -overlayView.getY());
                if (ChatActivity.this.textSelectionHelper.isSelectionMode() && ChatActivity.this.textSelectionHelper.getOverlayView(this.val$context).onTouchEvent(motionEvent)) {
                    return true;
                }
                motionEvent.offsetLocation(overlayView.getX(), overlayView.getY());
                if (overlayView.checkOnTap(motionEvent)) {
                    motionEvent.setAction(3);
                }
                if (motionEvent.getAction() != 0 || !ChatActivity.this.textSelectionHelper.isSelectionMode() || (motionEvent.getY() >= ChatActivity.this.chatListView.getTop() && motionEvent.getY() <= ChatActivity.this.chatListView.getBottom())) {
                    if (ChatActivity.this.pinchToZoomHelper.isInOverlayMode()) {
                        return ChatActivity.this.pinchToZoomHelper.onTouchEvent(motionEvent);
                    }
                    if (AvatarPreviewer.hasVisibleInstance()) {
                        AvatarPreviewer.getInstance().onTouchEvent(motionEvent);
                        return true;
                    }
                    if (ChatActivity.this.isInPreviewMode() && ChatActivity.this.allowExpandPreviewByClick) {
                        if (motionEvent.getAction() == 0) {
                            int[] iArr = new int[2];
                            getLocationInWindow(iArr);
                            int[] iArr2 = new int[2];
                            if (ChatActivity.this.pagedownButton != null) {
                                ChatActivity.this.pagedownButton.getLocationInWindow(iArr2);
                                Rect rect2 = AndroidUtilities.rectTmp2;
                                rect2.set(iArr2[0] - iArr[0], iArr2[1] - iArr[1], (iArr2[0] - iArr[0]) + ChatActivity.this.pagedownButton.getMeasuredWidth(), (iArr2[1] - iArr[1]) + ChatActivity.this.pagedownButton.getMeasuredHeight());
                                if (rect2.contains((int) motionEvent.getX(), (int) motionEvent.getY())) {
                                    z2 = true;
                                    if (!z2 && ChatActivity.this.mentiondownButton != null) {
                                        ChatActivity.this.mentiondownButton.getLocationInWindow(iArr2);
                                        rect = AndroidUtilities.rectTmp2;
                                        rect.set(iArr2[0] - iArr[0], iArr2[1] - iArr[1], (iArr2[0] - iArr[0]) + ChatActivity.this.mentiondownButton.getMeasuredWidth(), (iArr2[1] - iArr[1]) + ChatActivity.this.mentiondownButton.getMeasuredHeight());
                                        if (rect.contains((int) motionEvent.getX(), (int) motionEvent.getY())) {
                                            z2 = true;
                                        }
                                    }
                                    if (z2) {
                                        this.x = motionEvent.getX();
                                        this.y = motionEvent.getY();
                                        this.pressTime = SystemClock.elapsedRealtime();
                                        z = true;
                                        return !super.dispatchTouchEvent(motionEvent) || z;
                                    }
                                    this.pressTime = -1L;
                                }
                            }
                            z2 = false;
                            if (!z2) {
                                ChatActivity.this.mentiondownButton.getLocationInWindow(iArr2);
                                rect = AndroidUtilities.rectTmp2;
                                rect.set(iArr2[0] - iArr[0], iArr2[1] - iArr[1], (iArr2[0] - iArr[0]) + ChatActivity.this.mentiondownButton.getMeasuredWidth(), (iArr2[1] - iArr[1]) + ChatActivity.this.mentiondownButton.getMeasuredHeight());
                                if (rect.contains((int) motionEvent.getX(), (int) motionEvent.getY())) {
                                }
                            }
                            if (z2) {
                            }
                        } else if (motionEvent.getAction() == 1) {
                            if (MathUtils.distance(this.x, this.y, motionEvent.getX(), motionEvent.getY()) < AndroidUtilities.dp(6.0f) && SystemClock.elapsedRealtime() - this.pressTime <= ViewConfiguration.getTapTimeout()) {
                                ((BaseFragment) ChatActivity.this).parentLayout.expandPreviewFragment();
                                motionEvent.setAction(3);
                            }
                            this.pressTime = -1L;
                        } else if (motionEvent.getAction() == 3) {
                            this.pressTime = -1L;
                        }
                    }
                    z = false;
                    if (!super.dispatchTouchEvent(motionEvent)) {
                    }
                }
                motionEvent.offsetLocation(-overlayView.getX(), -overlayView.getY());
                if (!ChatActivity.this.textSelectionHelper.getOverlayView(this.val$context).onTouchEvent(motionEvent)) {
                    return true;
                }
                motionEvent.offsetLocation(overlayView.getX(), overlayView.getY());
                return super.dispatchTouchEvent(motionEvent);
            }
            return false;
        }

        @Override // android.view.View
        protected void onDraw(Canvas canvas) {
            if (getTag(67108867) != null) {
                return;
            }
            if (getTag(67108867) == null) {
                if (ChatActivity.this.instantCameraView.blurFullyDrawing()) {
                    return;
                }
                if (ChatActivity.this.blurredView != null && ChatActivity.this.blurredView.fullyDrawing() && ChatActivity.this.blurredView.getTag() != null) {
                    return;
                }
            }
            super.onDraw(canvas);
        }

        /* JADX WARN: Code restructure failed: missing block: B:47:0x00bd, code lost:
            r0 = false;
         */
        /* JADX WARN: Removed duplicated region for block: B:111:0x0230  */
        /* JADX WARN: Removed duplicated region for block: B:142:0x0331  */
        /* JADX WARN: Removed duplicated region for block: B:92:0x015e  */
        @Override // android.view.ViewGroup
        /*
            Code decompiled incorrectly, please refer to instructions dump.
        */
        protected boolean drawChild(Canvas canvas, View view, long j) {
            boolean z;
            boolean z2;
            boolean z3;
            int i = 0;
            if ((ChatActivity.this.scrimView != null || ChatActivity.this.messageEnterTransitionContainer.isRunning()) && (view == ChatActivity.this.pagedownButton || view == ChatActivity.this.mentiondownButton || view == ChatActivity.this.floatingDateView || view == ChatActivity.this.fireworksOverlay || view == ChatActivity.this.reactionsMentiondownButton || view == ChatActivity.this.gifHintTextView || view == ChatActivity.this.undoView || view == ChatActivity.this.topUndoView)) {
                return false;
            }
            if (view == ChatActivity.this.fragmentContextView && ChatActivity.this.fragmentContextView.isCallStyle()) {
                return true;
            }
            if (view == ChatActivity.this.undoView && PhotoViewer.getInstance().isVisible()) {
                return true;
            }
            if (ChatActivity.this.toPullingDownTransition && view == ChatActivity.this.chatListView) {
                return true;
            }
            if (getTag(67108867) != null) {
                boolean z4 = ((Integer) getTag(67108867)).intValue() == 0 ? true : true;
                if (!z4) {
                    return false;
                }
            } else if (getTag(67108867) == null && (ChatActivity.this.instantCameraView.blurFullyDrawing() || (ChatActivity.this.blurredView != null && ChatActivity.this.blurredView.fullyDrawing() && ChatActivity.this.blurredView.getTag() != null))) {
                if (view == ((BaseFragment) ChatActivity.this).actionBar || view == ChatActivity.this.chatListView || view == ChatActivity.this.pinnedMessageView || view == ChatActivity.this.fragmentContextView) {
                    return false;
                }
            }
            MessageObject playingMessageObject = MediaController.getInstance().getPlayingMessageObject();
            if (playingMessageObject == null || playingMessageObject.eventId != 0) {
                z2 = false;
            } else {
                z2 = playingMessageObject.isRoundVideo();
                if (z2 || playingMessageObject.isVideo()) {
                    z = true;
                    if (view != ChatActivity.this.videoPlayerContainer) {
                        canvas.save();
                        canvas.translate(0.0f, (-ChatActivity.this.pullingDownOffset) - (ChatActivity.this.pullingDownAnimateProgress != 0.0f ? (ChatActivity.this.chatListView.getMeasuredHeight() - ChatActivity.this.pullingDownOffset) * ChatActivity.this.pullingDownAnimateProgress : 0.0f));
                        if (playingMessageObject != null && playingMessageObject.type == 5) {
                            if (Theme.chat_roundVideoShadow != null && ChatActivity.this.aspectRatioFrameLayout.isDrawingReady()) {
                                int x = ((int) view.getX()) - AndroidUtilities.dp(3.0f);
                                int y = ((int) view.getY()) - AndroidUtilities.dp(2.0f);
                                canvas.save();
                                canvas.scale(ChatActivity.this.videoPlayerContainer.getScaleX(), ChatActivity.this.videoPlayerContainer.getScaleY(), view.getX(), view.getY());
                                Theme.chat_roundVideoShadow.setAlpha(255);
                                Theme.chat_roundVideoShadow.setBounds(x, y, AndroidUtilities.roundPlayingMessageSize + x + AndroidUtilities.dp(6.0f), AndroidUtilities.roundPlayingMessageSize + y + AndroidUtilities.dp(6.0f));
                                Theme.chat_roundVideoShadow.draw(canvas);
                                canvas.restore();
                            }
                            z3 = super.drawChild(canvas, view, j);
                        } else if (view.getTag() == null) {
                            float translationY = view.getTranslationY();
                            view.setTranslationY(-AndroidUtilities.dp(1000.0f));
                            z3 = super.drawChild(canvas, view, j);
                            view.setTranslationY(translationY);
                        } else {
                            z3 = false;
                        }
                        canvas.restore();
                    } else {
                        boolean drawChild = super.drawChild(canvas, view, j);
                        if (z && view == ChatActivity.this.chatListView && playingMessageObject.type != 5 && ChatActivity.this.videoPlayerContainer != null && ChatActivity.this.videoPlayerContainer.getTag() != null) {
                            canvas.save();
                            canvas.translate(0.0f, ((-ChatActivity.this.pullingDownOffset) - (ChatActivity.this.pullingDownAnimateProgress != 0.0f ? (ChatActivity.this.chatListView.getMeasuredHeight() - ChatActivity.this.pullingDownOffset) * ChatActivity.this.pullingDownAnimateProgress : 0.0f)) + ChatActivity.this.pullingBottomOffset);
                            super.drawChild(canvas, ChatActivity.this.videoPlayerContainer, j);
                            if (ChatActivity.this.drawLaterRoundProgressCell != null) {
                                canvas.save();
                                canvas.translate(ChatActivity.this.drawLaterRoundProgressCell.getX(), ChatActivity.this.drawLaterRoundProgressCell.getTop() + ChatActivity.this.chatListView.getY());
                                if (z2) {
                                    ChatActivity.this.drawLaterRoundProgressCell.drawRoundProgress(canvas);
                                    invalidate();
                                    ChatActivity.this.drawLaterRoundProgressCell.invalidate();
                                } else {
                                    ChatActivity.this.drawLaterRoundProgressCell.drawOverlays(canvas);
                                    if (ChatActivity.this.drawLaterRoundProgressCell.needDrawTime()) {
                                        ChatActivity.this.drawLaterRoundProgressCell.drawTime(canvas, ChatActivity.this.drawLaterRoundProgressCell.getAlpha(), true);
                                    }
                                }
                                canvas.restore();
                            }
                            canvas.restore();
                        }
                        z3 = drawChild;
                    }
                    if (view == ((BaseFragment) ChatActivity.this).actionBar && ((BaseFragment) ChatActivity.this).parentLayout != null) {
                        ActionBarLayout actionBarLayout = ((BaseFragment) ChatActivity.this).parentLayout;
                        if (((BaseFragment) ChatActivity.this).actionBar.getVisibility() == 0) {
                            int translationY2 = ((int) ((BaseFragment) ChatActivity.this).actionBar.getTranslationY()) + ((BaseFragment) ChatActivity.this).actionBar.getMeasuredHeight();
                            if (((BaseFragment) ChatActivity.this).inPreviewMode && Build.VERSION.SDK_INT >= 21) {
                                i = AndroidUtilities.statusBarHeight;
                            }
                            i += translationY2;
                        }
                        actionBarLayout.drawHeaderShadow(canvas, i);
                    }
                    return z3;
                }
            }
            z = false;
            if (view != ChatActivity.this.videoPlayerContainer) {
            }
            if (view == ((BaseFragment) ChatActivity.this).actionBar) {
                ActionBarLayout actionBarLayout2 = ((BaseFragment) ChatActivity.this).parentLayout;
                if (((BaseFragment) ChatActivity.this).actionBar.getVisibility() == 0) {
                }
                actionBarLayout2.drawHeaderShadow(canvas, i);
            }
            return z3;
        }

        @Override // org.telegram.ui.Components.SizeNotifierFrameLayout
        protected boolean isActionBarVisible() {
            return ((BaseFragment) ChatActivity.this).actionBar.getVisibility() == 0;
        }

        private void drawChildElement(Canvas canvas, float f, ChatMessageCell chatMessageCell, int i) {
            canvas.save();
            float left = ChatActivity.this.chatListView.getLeft() + chatMessageCell.getLeft();
            float y = ChatActivity.this.chatListView.getY() + chatMessageCell.getY();
            float alpha = chatMessageCell.shouldDrawAlphaLayer() ? chatMessageCell.getAlpha() : 1.0f;
            canvas.clipRect(ChatActivity.this.chatListView.getLeft(), f, ChatActivity.this.chatListView.getRight(), (ChatActivity.this.chatListView.getY() + ChatActivity.this.chatListView.getMeasuredHeight()) - ChatActivity.this.blurredViewBottomOffset);
            canvas.translate(left, y);
            boolean z = true;
            chatMessageCell.setInvalidatesParent(true);
            if (i == 0) {
                chatMessageCell.drawTime(canvas, alpha, true);
            } else if (i == 1) {
                chatMessageCell.drawNamesLayout(canvas, alpha);
            } else {
                if (chatMessageCell.getCurrentPosition() == null || (chatMessageCell.getCurrentPosition().flags & 1) != 0) {
                    z = false;
                }
                chatMessageCell.drawCaptionLayout(canvas, z, alpha);
            }
            chatMessageCell.setInvalidatesParent(false);
            canvas.restore();
        }

        @Override // org.telegram.ui.Components.SizeNotifierFrameLayout, android.view.ViewGroup, android.view.View
        public void dispatchDraw(Canvas canvas) {
            int i;
            int i2;
            MessageObject.GroupedMessagePosition groupedMessagePosition;
            MessageObject.GroupedMessages groupedMessages;
            ChatMessageCell chatMessageCell;
            MessageObject.GroupedMessages groupedMessages2;
            int i3;
            int i4;
            float f;
            View view;
            ChatMessageCell chatMessageCell2;
            boolean z;
            Object obj;
            boolean z2;
            ChatActivity chatActivity;
            float f2;
            float f3;
            View view2;
            Object obj2;
            float f4;
            float f5;
            ChatMessageCell chatMessageCell3;
            ChatMessageCell chatMessageCell4;
            boolean z3;
            ChatActivity chatActivity2;
            ChatActivity.this.chatActivityEnterView.checkAnimation();
            ChatActivity.this.updateChatListViewTopPadding();
            if (ChatActivity.this.invalidateMessagesVisiblePart || (ChatActivity.this.chatListItemAnimator != null && ChatActivity.this.chatListItemAnimator.isRunning())) {
                ChatActivity.this.invalidateMessagesVisiblePart = false;
                ChatActivity.this.updateMessagesVisiblePart(false);
            }
            ChatActivity.this.updateTextureViewPosition(false);
            ChatActivity.this.updatePagedownButtonsPosition();
            super.dispatchDraw(canvas);
            float f6 = 0.0f;
            boolean z4 = true;
            if (ChatActivity.this.fragmentContextView != null && ChatActivity.this.fragmentContextView.isCallStyle()) {
                float alpha = (ChatActivity.this.blurredView == null || ChatActivity.this.blurredView.getVisibility() != 0) ? 1.0f : 1.0f - ChatActivity.this.blurredView.getAlpha();
                if (alpha > 0.0f) {
                    if (alpha != 1.0f) {
                        canvas.saveLayerAlpha(ChatActivity.this.fragmentContextView.getX(), ChatActivity.this.fragmentContextView.getY() - AndroidUtilities.dp(30.0f), ChatActivity.this.fragmentContextView.getX() + ChatActivity.this.fragmentContextView.getMeasuredWidth(), ChatActivity.this.fragmentContextView.getY() + ChatActivity.this.fragmentContextView.getMeasuredHeight(), (int) (alpha * 255.0f), 31);
                    } else {
                        canvas.save();
                    }
                    canvas.translate(ChatActivity.this.fragmentContextView.getX(), ChatActivity.this.fragmentContextView.getY());
                    ChatActivity.this.fragmentContextView.setDrawOverlay(true);
                    ChatActivity.this.fragmentContextView.draw(canvas);
                    ChatActivity.this.fragmentContextView.setDrawOverlay(false);
                    canvas.restore();
                }
            }
            ChatActivityEnterView chatActivityEnterView = ChatActivity.this.chatActivityEnterView;
            if (chatActivityEnterView != null && chatActivityEnterView.panelAnimationInProgress() && ChatActivity.this.chatActivityEnterView.getEmojiPadding() < ChatActivity.this.bottomPanelTranslationY) {
                int themedColor = ChatActivity.this.getThemedColor("chat_emojiPanelBackground");
                if (this.backgroundPaint == null) {
                    this.backgroundPaint = new Paint();
                }
                if (this.backgroundColor != themedColor) {
                    Paint paint = this.backgroundPaint;
                    this.backgroundColor = themedColor;
                    paint.setColor(themedColor);
                }
                canvas.drawRect(0.0f, getMeasuredHeight() - (((int) (ChatActivity.this.bottomPanelTranslationY - ChatActivity.this.chatActivityEnterView.getEmojiPadding())) + 3), getMeasuredWidth(), getMeasuredHeight(), this.backgroundPaint);
                ChatActivity chatActivity3 = ChatActivity.this;
                chatActivity3.setFragmentPanTranslationOffset(chatActivity3.chatActivityEnterView.getEmojiPadding());
            }
            int size = ChatActivity.this.animateSendingViews.size();
            for (int i5 = 0; i5 < size; i5++) {
                ChatMessageCell chatMessageCell5 = (ChatMessageCell) ChatActivity.this.animateSendingViews.get(i5);
                MessageObject.SendAnimationData sendAnimationData = chatMessageCell5.getMessageObject().sendAnimationData;
                if (sendAnimationData != null) {
                    canvas.save();
                    ImageReceiver photoImage = chatMessageCell5.getPhotoImage();
                    canvas.translate(sendAnimationData.currentX, sendAnimationData.currentY);
                    float f7 = sendAnimationData.currentScale;
                    canvas.scale(f7, f7);
                    canvas.translate(-photoImage.getCenterX(), -photoImage.getCenterY());
                    chatMessageCell5.setTimeAlpha(sendAnimationData.timeAlpha);
                    ((ChatMessageCell) ChatActivity.this.animateSendingViews.get(i5)).draw(canvas);
                    canvas.restore();
                }
            }
            if (ChatActivity.this.scrimViewReaction == null || ChatActivity.this.scrimView == null) {
                ChatActivity.this.scrimPaint.setAlpha((int) (ChatActivity.this.scrimPaintAlpha * 255.0f * (ChatActivity.this.scrimView != null ? ChatActivity.this.scrimViewAlpha : 1.0f)));
                canvas.drawRect(0.0f, 0.0f, getMeasuredWidth(), getMeasuredHeight(), ChatActivity.this.scrimPaint);
            }
            if (ChatActivity.this.scrimView != null) {
                if (ChatActivity.this.scrimView == ChatActivity.this.reactionsMentiondownButton || ChatActivity.this.scrimView == ChatActivity.this.mentiondownButton) {
                    if (ChatActivity.this.scrimViewAlpha < 1.0f) {
                        ChatActivity.this.scrimPaint.setAlpha((int) (ChatActivity.this.scrimPaintAlpha * 255.0f * (1.0f - ChatActivity.this.scrimViewAlpha)));
                        canvas.drawRect(0.0f, 0.0f, getMeasuredWidth(), getMeasuredHeight(), ChatActivity.this.scrimPaint);
                    }
                } else if (!(ChatActivity.this.scrimView instanceof ImageView)) {
                    float y = ((ChatActivity.this.chatListView.getY() + ChatActivity.this.chatListViewPaddingTop) - ChatActivity.this.chatListViewPaddingVisibleOffset) - AndroidUtilities.dp(4.0f);
                    MessageObject.GroupedMessages currentMessagesGroup = ChatActivity.this.scrimView instanceof ChatMessageCell ? ((ChatMessageCell) ChatActivity.this.scrimView).getCurrentMessagesGroup() : null;
                    int childCount = ChatActivity.this.chatListView.getChildCount();
                    boolean z5 = false;
                    int i6 = 0;
                    while (i6 < childCount) {
                        View childAt = ChatActivity.this.chatListView.getChildAt(i6);
                        if (childAt instanceof ChatMessageCell) {
                            chatMessageCell = (ChatMessageCell) childAt;
                            groupedMessages = chatMessageCell.getCurrentMessagesGroup();
                            groupedMessagePosition = chatMessageCell.getCurrentPosition();
                        } else {
                            chatMessageCell = null;
                            groupedMessages = null;
                            groupedMessagePosition = null;
                        }
                        if ((childAt == ChatActivity.this.scrimView || (currentMessagesGroup != null && currentMessagesGroup == groupedMessages)) && childAt.getAlpha() != f6) {
                            if (z5 || chatMessageCell == null || currentMessagesGroup == null || (chatMessageCell3 = currentMessagesGroup.transitionParams.cell) == null) {
                                chatMessageCell2 = chatMessageCell;
                                view = childAt;
                                i4 = i6;
                                i3 = childCount;
                                groupedMessages2 = currentMessagesGroup;
                                f = y;
                                obj = null;
                                z = true;
                                z2 = z5;
                            } else {
                                float nonAnimationTranslationX = chatMessageCell3.getNonAnimationTranslationX(z4);
                                MessageObject.GroupedMessages.TransitionParams transitionParams = currentMessagesGroup.transitionParams;
                                float f8 = transitionParams.left + nonAnimationTranslationX + transitionParams.offsetLeft;
                                float f9 = transitionParams.top + transitionParams.offsetTop;
                                float f10 = transitionParams.right + nonAnimationTranslationX + transitionParams.offsetRight;
                                float f11 = transitionParams.bottom + transitionParams.offsetBottom;
                                if (!transitionParams.backgroundChangeBounds) {
                                    f9 += transitionParams.cell.getTranslationY();
                                    f11 += currentMessagesGroup.transitionParams.cell.getTranslationY();
                                }
                                if (f9 < (ChatActivity.this.chatListViewPaddingTop - ChatActivity.this.chatListViewPaddingVisibleOffset) - AndroidUtilities.dp(20.0f)) {
                                    f9 = (ChatActivity.this.chatListViewPaddingTop - ChatActivity.this.chatListViewPaddingVisibleOffset) - AndroidUtilities.dp(20.0f);
                                }
                                if (f11 > ChatActivity.this.chatListView.getMeasuredHeight() + AndroidUtilities.dp(20.0f)) {
                                    f11 = ChatActivity.this.chatListView.getMeasuredHeight() + AndroidUtilities.dp(20.0f);
                                }
                                int size2 = currentMessagesGroup.messages.size();
                                int i7 = 0;
                                while (true) {
                                    if (i7 >= size2) {
                                        chatMessageCell4 = chatMessageCell;
                                        z3 = true;
                                        break;
                                    }
                                    MessageObject messageObject = currentMessagesGroup.messages.get(i7);
                                    chatMessageCell4 = chatMessageCell;
                                    if (ChatActivity.this.selectedMessagesIds[messageObject.getDialogId() == ChatActivity.this.dialog_id ? (char) 0 : (char) 1].indexOfKey(messageObject.getId()) < 0) {
                                        z3 = false;
                                        break;
                                    } else {
                                        i7++;
                                        chatMessageCell = chatMessageCell4;
                                    }
                                }
                                canvas.save();
                                MentionsContainerView mentionsContainerView = ChatActivity.this.mentionContainer;
                                float clipTop = (mentionsContainerView != null ? mentionsContainerView.clipTop() : 0.0f) + y;
                                float measuredWidth = getMeasuredWidth();
                                float y2 = ChatActivity.this.chatListView.getY() + ChatActivity.this.chatListView.getMeasuredHeight();
                                view = childAt;
                                float f12 = y2 - chatActivity2.blurredViewBottomOffset;
                                MentionsContainerView mentionsContainerView2 = ChatActivity.this.mentionContainer;
                                canvas.clipRect(0.0f, clipTop, measuredWidth, f12 - (mentionsContainerView2 != null ? mentionsContainerView2.clipBottom() : 0.0f));
                                canvas.translate(0.0f, ChatActivity.this.chatListView.getY());
                                MessageObject.GroupedMessages.TransitionParams transitionParams2 = currentMessagesGroup.transitionParams;
                                chatMessageCell2 = chatMessageCell4;
                                i4 = i6;
                                i3 = childCount;
                                groupedMessages2 = currentMessagesGroup;
                                obj = null;
                                f = y;
                                boolean z6 = z3;
                                z = true;
                                transitionParams2.cell.drawBackground(canvas, (int) f8, (int) f9, (int) f10, (int) f11, transitionParams2.pinnedTop, transitionParams2.pinnedBotton, z6, ChatActivity.this.contentView.getKeyboardHeight());
                                canvas.restore();
                                z2 = true;
                            }
                            if (chatMessageCell2 != null && chatMessageCell2.getPhotoImage().isAnimationRunning()) {
                                invalidate();
                            }
                            float left = ChatActivity.this.chatListView.getLeft();
                            float right = ChatActivity.this.chatListView.getRight();
                            float y3 = ChatActivity.this.chatListView.getY() + ChatActivity.this.chatListView.getMeasuredHeight();
                            float f13 = y3 - chatActivity.blurredViewBottomOffset;
                            MentionsContainerView mentionsContainerView3 = ChatActivity.this.mentionContainer;
                            if (mentionsContainerView3 != null) {
                                f2 = f + mentionsContainerView3.clipTop();
                                f13 -= ChatActivity.this.mentionContainer.clipBottom();
                            } else {
                                f2 = f;
                            }
                            if (chatMessageCell2 == null || !chatMessageCell2.getTransitionParams().animateBackgroundBoundsInner) {
                                left = Math.max(left, ChatActivity.this.chatListView.getLeft() + view.getX());
                                f2 = Math.max(f2, ChatActivity.this.chatListView.getTop() + view.getY());
                                right = Math.min(right, ChatActivity.this.chatListView.getLeft() + view.getX() + view.getMeasuredWidth());
                                f13 = Math.min(f13, ChatActivity.this.chatListView.getY() + view.getY() + view.getMeasuredHeight());
                            }
                            float f14 = right;
                            float f15 = f13;
                            float f16 = f2;
                            float f17 = left;
                            if (f16 < f15) {
                                if (view.getAlpha() != 1.0f) {
                                    f3 = f16;
                                    f5 = f15;
                                    canvas.saveLayerAlpha(f17, f16, f14, f15, (int) (view.getAlpha() * 255.0f), 31);
                                } else {
                                    f3 = f16;
                                    f5 = f15;
                                    canvas.save();
                                }
                                if (chatMessageCell2 != null) {
                                    chatMessageCell2.setInvalidatesParent(z);
                                    chatMessageCell2.setScrimReaction(ChatActivity.this.scrimViewReaction);
                                }
                                f15 = f5;
                                canvas.clipRect(f17, f3, f14, f15);
                                canvas.translate(ChatActivity.this.chatListView.getLeft() + view.getX(), ChatActivity.this.chatListView.getY() + view.getY());
                                if (chatMessageCell2 != null && groupedMessages2 == null && chatMessageCell2.drawBackgroundInParent()) {
                                    chatMessageCell2.drawBackgroundInternal(canvas, z);
                                }
                                view2 = view;
                                view2.draw(canvas);
                                if (chatMessageCell2 != null && chatMessageCell2.hasOutboundsContent()) {
                                    chatMessageCell2.drawOutboundsContent(canvas);
                                }
                                canvas.restore();
                                if (chatMessageCell2 != null) {
                                    chatMessageCell2.setInvalidatesParent(false);
                                    obj2 = null;
                                    chatMessageCell2.setScrimReaction(null);
                                } else {
                                    obj2 = null;
                                }
                            } else {
                                obj2 = obj;
                                f3 = f16;
                                view2 = view;
                            }
                            MessageObject.GroupedMessagePosition groupedMessagePosition2 = groupedMessagePosition;
                            if (groupedMessagePosition2 != null || (chatMessageCell2 != null && chatMessageCell2.getTransitionParams().animateBackgroundBoundsInner)) {
                                if (groupedMessagePosition2 == null || groupedMessagePosition2.last || (groupedMessagePosition2.minX == 0 && groupedMessagePosition2.minY == 0)) {
                                    if (groupedMessagePosition2 == null || groupedMessagePosition2.last) {
                                        this.drawTimeAfter.add(chatMessageCell2);
                                    }
                                    if (groupedMessagePosition2 == null || (groupedMessagePosition2.minX == 0 && groupedMessagePosition2.minY == 0 && chatMessageCell2.hasNameLayout())) {
                                        this.drawNamesAfter.add(chatMessageCell2);
                                    }
                                }
                                if (groupedMessagePosition2 == null || (groupedMessagePosition2.flags & 8) != 0) {
                                    this.drawCaptionAfter.add(chatMessageCell2);
                                }
                            }
                            if (ChatActivity.this.scrimViewReaction != null && chatMessageCell2 != null) {
                                ChatActivity.this.scrimPaint.setAlpha((int) (ChatActivity.this.scrimPaintAlpha * 255.0f * ChatActivity.this.scrimViewAlpha));
                                View view3 = view2;
                                canvas.drawRect(0.0f, 0.0f, getMeasuredWidth(), getMeasuredHeight(), ChatActivity.this.scrimPaint);
                                if (f3 < f15) {
                                    float alpha2 = view3.getAlpha() * ChatActivity.this.scrimViewAlpha;
                                    if (alpha2 < 1.0f) {
                                        f4 = f15;
                                        canvas.saveLayerAlpha(f17, f3, f14, f15, (int) (alpha2 * 255.0f), 31);
                                    } else {
                                        f4 = f15;
                                        canvas.save();
                                    }
                                    canvas.clipRect(f17, f3, f14, f4);
                                    canvas.translate(ChatActivity.this.chatListView.getLeft() + view3.getX(), ChatActivity.this.chatListView.getY() + view3.getY());
                                    chatMessageCell2.drawScrimReaction(canvas, ChatActivity.this.scrimViewReaction);
                                    canvas.restore();
                                }
                            }
                            z5 = z2;
                        } else {
                            i4 = i6;
                            i3 = childCount;
                            groupedMessages2 = currentMessagesGroup;
                            f = y;
                        }
                        i6 = i4 + 1;
                        y = f;
                        childCount = i3;
                        currentMessagesGroup = groupedMessages2;
                        z4 = true;
                        f6 = 0.0f;
                    }
                    float f18 = y;
                    int size3 = this.drawTimeAfter.size();
                    if (size3 > 0) {
                        for (int i8 = 0; i8 < size3; i8++) {
                            drawChildElement(canvas, f18, this.drawTimeAfter.get(i8), 0);
                        }
                        this.drawTimeAfter.clear();
                    }
                    int size4 = this.drawNamesAfter.size();
                    if (size4 > 0) {
                        for (int i9 = 0; i9 < size4; i9++) {
                            drawChildElement(canvas, f18, this.drawNamesAfter.get(i9), 1);
                        }
                        this.drawNamesAfter.clear();
                    }
                    int size5 = this.drawCaptionAfter.size();
                    if (size5 > 0) {
                        for (int i10 = 0; i10 < size5; i10++) {
                            ChatMessageCell chatMessageCell6 = this.drawCaptionAfter.get(i10);
                            if (chatMessageCell6.getCurrentPosition() != null || chatMessageCell6.getTransitionParams().animateBackgroundBoundsInner) {
                                drawChildElement(canvas, f18, chatMessageCell6, 2);
                            }
                        }
                        this.drawCaptionAfter.clear();
                    }
                } else {
                    int save = canvas.save();
                    if (ChatActivity.this.scrimViewAlpha < 1.0f) {
                        canvas.saveLayerAlpha(ChatActivity.this.scrimView.getLeft(), ChatActivity.this.scrimView.getTop(), ChatActivity.this.scrimView.getRight(), ChatActivity.this.scrimView.getBottom(), (int) (ChatActivity.this.scrimViewAlpha * 255.0f), 31);
                    }
                    canvas.translate(ChatActivity.this.scrimView.getLeft(), ChatActivity.this.scrimView.getTop());
                    if (ChatActivity.this.scrimView == ((BaseFragment) ChatActivity.this).actionBar.getBackButton()) {
                        float max = Math.max(ChatActivity.this.scrimView.getMeasuredWidth(), ChatActivity.this.scrimView.getMeasuredHeight()) / 2;
                        canvas.drawCircle(max, max, 0.7f * max, ChatActivity.this.actionBarBackgroundPaint);
                    }
                    ChatActivity.this.scrimView.draw(canvas);
                    canvas.restoreToCount(save);
                    if (ChatActivity.this.scrimViewAlpha < 1.0f) {
                        ChatActivity.this.scrimPaint.setAlpha((int) (ChatActivity.this.scrimPaintAlpha * 255.0f * (1.0f - ChatActivity.this.scrimViewAlpha)));
                        canvas.drawRect(0.0f, 0.0f, getMeasuredWidth(), getMeasuredHeight(), ChatActivity.this.scrimPaint);
                    }
                }
                if (ChatActivity.this.scrimViewReaction == null && ChatActivity.this.scrimViewAlpha < 1.0f) {
                    ChatActivity.this.scrimPaint.setAlpha((int) (ChatActivity.this.scrimPaintAlpha * 255.0f * (1.0f - ChatActivity.this.scrimViewAlpha)));
                    canvas.drawRect(0.0f, 0.0f, getMeasuredWidth(), getMeasuredHeight(), ChatActivity.this.scrimPaint);
                }
            }
            if (ChatActivity.this.scrimView != null || ChatActivity.this.messageEnterTransitionContainer.isRunning()) {
                MentionsContainerView mentionsContainerView4 = ChatActivity.this.mentionContainer;
                if (mentionsContainerView4 == null || mentionsContainerView4.getVisibility() != 0) {
                    if (ChatActivity.this.pagedownButton != null && ChatActivity.this.pagedownButton.getTag() != null) {
                        super.drawChild(canvas, ChatActivity.this.pagedownButton, SystemClock.uptimeMillis());
                    }
                    if (ChatActivity.this.mentiondownButton != null && ChatActivity.this.mentiondownButton.getTag() != null) {
                        super.drawChild(canvas, ChatActivity.this.mentiondownButton, SystemClock.uptimeMillis());
                    }
                    if (ChatActivity.this.reactionsMentiondownButton != null && ChatActivity.this.reactionsMentiondownButton.getTag() != null) {
                        super.drawChild(canvas, ChatActivity.this.reactionsMentiondownButton, SystemClock.uptimeMillis());
                    }
                }
                if (ChatActivity.this.floatingDateView != null && ChatActivity.this.floatingDateView.getTag() != null) {
                    super.drawChild(canvas, ChatActivity.this.floatingDateView, SystemClock.uptimeMillis());
                }
                if (ChatActivity.this.fireworksOverlay != null) {
                    super.drawChild(canvas, ChatActivity.this.fireworksOverlay, SystemClock.uptimeMillis());
                }
                if (ChatActivity.this.gifHintTextView != null) {
                    super.drawChild(canvas, ChatActivity.this.gifHintTextView, SystemClock.uptimeMillis());
                }
                if (ChatActivity.this.undoView != null && ChatActivity.this.undoView.getVisibility() == 0) {
                    super.drawChild(canvas, ChatActivity.this.undoView, SystemClock.uptimeMillis());
                }
                if (ChatActivity.this.topUndoView != null && ChatActivity.this.undoView.getVisibility() == 0) {
                    super.drawChild(canvas, ChatActivity.this.topUndoView, SystemClock.uptimeMillis());
                }
            }
            if (ChatActivity.this.fixedKeyboardHeight > 0 && this.keyboardHeight < AndroidUtilities.dp(20.0f)) {
                int themedColor2 = ChatActivity.this.getThemedColor("windowBackgroundWhite");
                if (this.backgroundPaint == null) {
                    this.backgroundPaint = new Paint();
                }
                if (this.backgroundColor != themedColor2) {
                    Paint paint2 = this.backgroundPaint;
                    this.backgroundColor = themedColor2;
                    paint2.setColor(themedColor2);
                }
                canvas.drawRect(0.0f, getMeasuredHeight() - ChatActivity.this.fixedKeyboardHeight, getMeasuredWidth(), getMeasuredHeight(), this.backgroundPaint);
            }
            if (ChatActivity.this.pullingDownDrawable != null && ChatActivity.this.pullingDownDrawable.needDrawBottomPanel()) {
                ChatActivityEnterView chatActivityEnterView2 = ChatActivity.this.chatActivityEnterView;
                if (chatActivityEnterView2 == null || chatActivityEnterView2.getVisibility() != 0) {
                    i2 = ChatActivity.this.bottomOverlayChat.getTop() + AndroidUtilities.dp2(2.0f);
                    i = ChatActivity.this.bottomOverlayChat.getBottom();
                } else {
                    i2 = ChatActivity.this.chatActivityEnterView.getTop() + AndroidUtilities.dp2(2.0f);
                    i = ChatActivity.this.chatActivityEnterView.getBottom();
                }
                ChatActivity.this.pullingDownDrawable.drawBottomPanel(canvas, i2 - ((int) ((ChatActivity.this.pullingDownAnimateToActivity == null ? 0.0f : ChatActivity.this.pullingDownAnimateToActivity.pullingBottomOffset) * ChatActivity.this.pullingDownAnimateProgress)), i, getMeasuredWidth());
            }
            if (ChatActivity.this.pullingDownAnimateToActivity != null) {
                canvas.saveLayerAlpha(0.0f, 0.0f, getMeasuredWidth(), getMeasuredHeight(), (int) (ChatActivity.this.pullingDownAnimateProgress * 255.0f), 31);
                ((BaseFragment) ChatActivity.this.pullingDownAnimateToActivity).fragmentView.draw(canvas);
                canvas.restore();
            }
            ChatActivity.this.emojiAnimationsOverlay.draw(canvas);
        }

        /* JADX WARN: Removed duplicated region for block: B:118:0x02f2  */
        /* JADX WARN: Removed duplicated region for block: B:121:0x0317  */
        /* JADX WARN: Removed duplicated region for block: B:122:0x031b  */
        /* JADX WARN: Removed duplicated region for block: B:125:0x0338  */
        /* JADX WARN: Removed duplicated region for block: B:129:0x0349  */
        /* JADX WARN: Removed duplicated region for block: B:254:0x06c2  */
        /* JADX WARN: Removed duplicated region for block: B:257:0x070e  */
        @Override // android.widget.FrameLayout, android.view.View
        /*
            Code decompiled incorrectly, please refer to instructions dump.
        */
        protected void onMeasure(int i, int i2) {
            boolean z;
            int childCount;
            int i3;
            int i4;
            int i5;
            int i6;
            int i7;
            ChatActivity chatActivity;
            int i8;
            int i9;
            int i10;
            int childAdapterPosition;
            ChatActivity chatActivity2;
            TLRPC$User tLRPC$User;
            ChatActivity chatActivity3;
            int size = View.MeasureSpec.getSize(i);
            int size2 = View.MeasureSpec.getSize(i2);
            int i11 = 8;
            if (this.lastWidth != size) {
                ChatActivity.this.globalIgnoreLayout = true;
                this.lastWidth = i;
                if (((BaseFragment) ChatActivity.this).inPreviewMode || (tLRPC$User = (chatActivity2 = ChatActivity.this).currentUser) == null || !tLRPC$User.self) {
                    ChatActivity.this.showSearchAsIcon = false;
                } else {
                    SimpleTextView titleTextView = chatActivity2.avatarContainer.getTitleTextView();
                    if (size - AndroidUtilities.dp(152.0f) <= ((int) titleTextView.getPaint().measureText(titleTextView.getText(), 0, titleTextView.getText().length())) + AndroidUtilities.dp(10.0f)) {
                        ChatActivity.this.showSearchAsIcon = false;
                    } else {
                        ChatActivity.this.showSearchAsIcon = !chatActivity3.showAudioCallAsIcon;
                    }
                }
                if (ChatActivity.this.showSearchAsIcon || ChatActivity.this.showAudioCallAsIcon) {
                    if (ChatActivity.this.avatarContainer != null && ChatActivity.this.avatarContainer.getLayoutParams() != null) {
                        ((ViewGroup.MarginLayoutParams) ChatActivity.this.avatarContainer.getLayoutParams()).rightMargin = AndroidUtilities.dp(96.0f);
                    }
                } else if (ChatActivity.this.avatarContainer != null && ChatActivity.this.avatarContainer.getLayoutParams() != null) {
                    ((ViewGroup.MarginLayoutParams) ChatActivity.this.avatarContainer.getLayoutParams()).rightMargin = AndroidUtilities.dp(40.0f);
                }
                if (ChatActivity.this.showSearchAsIcon) {
                    if (!((BaseFragment) ChatActivity.this).actionBar.isSearchFieldVisible() && ChatActivity.this.searchIconItem != null) {
                        ChatActivity.this.searchIconItem.setVisibility(0);
                    }
                    if (ChatActivity.this.headerItem != null) {
                        ChatActivity.this.headerItem.hideSubItem(40);
                    }
                } else {
                    if (ChatActivity.this.headerItem != null) {
                        ChatActivity.this.headerItem.showSubItem(40);
                    }
                    if (ChatActivity.this.searchIconItem != null) {
                        ChatActivity.this.searchIconItem.setVisibility(8);
                    }
                }
                if (!((BaseFragment) ChatActivity.this).actionBar.isSearchFieldVisible() && ChatActivity.this.audioCallIconItem != null) {
                    ChatActivity.this.audioCallIconItem.setVisibility((!ChatActivity.this.showAudioCallAsIcon || ChatActivity.this.showSearchAsIcon) ? 8 : 0);
                }
                if (ChatActivity.this.headerItem != null) {
                    TLRPC$UserFull currentUserInfo = ChatActivity.this.getCurrentUserInfo();
                    if (ChatActivity.this.showAudioCallAsIcon) {
                        ChatActivity.this.headerItem.hideSubItem(32);
                    } else if (currentUserInfo != null && currentUserInfo.phone_calls_available) {
                        ChatActivity.this.headerItem.showSubItem(32, true);
                    }
                }
                ChatActivity.this.globalIgnoreLayout = false;
            }
            setMeasuredDimension(size, size2);
            int paddingTop = size2 - getPaddingTop();
            measureChildWithMargins(((BaseFragment) ChatActivity.this).actionBar, i, 0, i2, 0);
            int measuredHeight = ((BaseFragment) ChatActivity.this).actionBar.getMeasuredHeight();
            if (((BaseFragment) ChatActivity.this).actionBar.getVisibility() == 0) {
                paddingTop -= measuredHeight;
            }
            int i12 = this.keyboardHeight + ChatActivity.this.chatEmojiViewPadding;
            boolean z2 = this.keyboardHeight + ChatActivity.this.chatEmojiViewPadding >= AndroidUtilities.dp(20.0f);
            if (this.lastHeight != size2) {
                measureKeyboardHeight();
            }
            int keyboardHeight = getKeyboardHeight();
            if (ChatActivity.this.fixedKeyboardHeight > 0 && keyboardHeight <= AndroidUtilities.dp(20.0f)) {
                ChatActivity chatActivity4 = ChatActivity.this;
                chatActivity4.chatEmojiViewPadding = chatActivity4.fixedKeyboardHeight;
            } else if (keyboardHeight > AndroidUtilities.dp(20.0f)) {
                ChatActivity.this.chatEmojiViewPadding = 0;
            } else {
                ChatActivity chatActivity5 = ChatActivity.this;
                chatActivity5.chatEmojiViewPadding = chatActivity5.chatActivityEnterView.isPopupShowing() ? ChatActivity.this.chatActivityEnterView.getEmojiPadding() : 0;
            }
            setEmojiKeyboardHeight(ChatActivity.this.chatEmojiViewPadding);
            boolean z3 = this.keyboardHeight + ChatActivity.this.chatEmojiViewPadding >= AndroidUtilities.dp(20.0f);
            if (MediaController.getInstance().getPlayingMessageObject() != null && MediaController.getInstance().getPlayingMessageObject().isRoundVideo() && z2 != z3) {
                for (int i13 = 0; i13 < ChatActivity.this.chatListView.getChildCount(); i13++) {
                    View childAt = ChatActivity.this.chatListView.getChildAt(i13);
                    if (childAt instanceof ChatMessageCell) {
                        MessageObject messageObject = ((ChatMessageCell) childAt).getMessageObject();
                        if (messageObject.isRoundVideo() && MediaController.getInstance().isPlayingMessage(messageObject) && (childAdapterPosition = ChatActivity.this.chatListView.getChildAdapterPosition(childAt)) >= 0) {
                            GridLayoutManagerFixed gridLayoutManagerFixed = ChatActivity.this.chatLayoutManager;
                            float measuredHeight2 = ChatActivity.this.chatListView.getMeasuredHeight() - ChatActivity.this.chatListViewPaddingTop;
                            ChatActivity chatActivity6 = ChatActivity.this;
                            gridLayoutManagerFixed.scrollToPositionWithOffset(childAdapterPosition, (int) ((((measuredHeight2 - chatActivity6.blurredViewBottomOffset) + ((this.keyboardHeight + chatActivity6.chatEmojiViewPadding) - i12)) - (z3 ? AndroidUtilities.roundMessageSize : AndroidUtilities.roundPlayingMessageSize)) / 2.0f), false);
                            ChatActivity.this.chatAdapter.notifyItemChanged(childAdapterPosition);
                            this.adjustPanLayoutHelper.delayAnimation();
                            z = true;
                            if (!z) {
                                ChatActivity.this.chatActivityEnterView.runEmojiPanelAnimation();
                            }
                            childCount = getChildCount();
                            int i14 = keyboardHeight;
                            measureChildWithMargins(ChatActivity.this.chatActivityEnterView, i, 0, i2, 0);
                            if (!((BaseFragment) ChatActivity.this).inPreviewMode) {
                                this.inputFieldHeight = 0;
                                i3 = 0;
                            } else {
                                this.inputFieldHeight = ChatActivity.this.chatActivityEnterView.getMeasuredHeight();
                                i3 = AndroidUtilities.dp(49.0f);
                            }
                            ChatActivity chatActivity7 = ChatActivity.this;
                            chatActivity7.blurredViewTopOffset = 0;
                            chatActivity7.blurredViewBottomOffset = 0;
                            if (SharedConfig.chatBlurEnabled()) {
                                ChatActivity chatActivity8 = ChatActivity.this;
                                chatActivity8.blurredViewTopOffset = measuredHeight;
                                chatActivity8.blurredViewBottomOffset = AndroidUtilities.dp(203.0f);
                            }
                            i4 = 0;
                            while (i4 < childCount) {
                                View childAt2 = getChildAt(i4);
                                if (childAt2 != null && childAt2.getVisibility() != i11) {
                                    ChatActivity chatActivity9 = ChatActivity.this;
                                    if (childAt2 != chatActivity9.chatActivityEnterView && childAt2 != ((BaseFragment) chatActivity9).actionBar) {
                                        if (childAt2 != this.backgroundView) {
                                            if (childAt2 != ChatActivity.this.blurredView) {
                                                i7 = i14;
                                                if (childAt2 != ChatActivity.this.chatListView) {
                                                    if (childAt2 != ChatActivity.this.progressView) {
                                                        if (childAt2 != ChatActivity.this.instantCameraView && childAt2 != ChatActivity.this.overlayView) {
                                                            if (childAt2 != ChatActivity.this.emptyViewContainer) {
                                                                if (childAt2 == ChatActivity.this.messagesSearchListView) {
                                                                    childAt2.measure(View.MeasureSpec.makeMeasureSpec(size, 1073741824), View.MeasureSpec.makeMeasureSpec((size2 - measuredHeight) - AndroidUtilities.dp(48.0f), 1073741824));
                                                                } else if (ChatActivity.this.chatActivityEnterView.isPopupView(childAt2)) {
                                                                    if (((BaseFragment) ChatActivity.this).inBubbleMode) {
                                                                        childAt2.measure(View.MeasureSpec.makeMeasureSpec(size, 1073741824), View.MeasureSpec.makeMeasureSpec((paddingTop - this.inputFieldHeight) + measuredHeight + getPaddingTop(), 1073741824));
                                                                    } else if (AndroidUtilities.isInMultiwindow) {
                                                                        if (AndroidUtilities.isTablet()) {
                                                                            childAt2.measure(View.MeasureSpec.makeMeasureSpec(size, 1073741824), View.MeasureSpec.makeMeasureSpec(Math.min(AndroidUtilities.dp(320.0f), (((paddingTop - this.inputFieldHeight) + measuredHeight) - AndroidUtilities.statusBarHeight) + getPaddingTop()), 1073741824));
                                                                        } else {
                                                                            childAt2.measure(View.MeasureSpec.makeMeasureSpec(size, 1073741824), View.MeasureSpec.makeMeasureSpec((((paddingTop - this.inputFieldHeight) + measuredHeight) - AndroidUtilities.statusBarHeight) + getPaddingTop(), 1073741824));
                                                                        }
                                                                    } else {
                                                                        childAt2.measure(View.MeasureSpec.makeMeasureSpec(size, 1073741824), View.MeasureSpec.makeMeasureSpec(childAt2.getLayoutParams().height, 1073741824));
                                                                    }
                                                                } else {
                                                                    ChatActivity chatActivity10 = ChatActivity.this;
                                                                    MentionsContainerView mentionsContainerView = chatActivity10.mentionContainer;
                                                                    if (childAt2 != mentionsContainerView) {
                                                                        if (childAt2 == chatActivity10.textSelectionHelper.getOverlayView(this.val$context)) {
                                                                            int makeMeasureSpec = View.MeasureSpec.makeMeasureSpec(size, 1073741824);
                                                                            int i15 = ChatActivity.this.blurredViewTopOffset + paddingTop;
                                                                            if (i7 <= AndroidUtilities.dp(20.0f) || getLayoutParams().height >= 0) {
                                                                                ChatActivity.this.textSelectionHelper.setKeyboardSize(0);
                                                                            } else {
                                                                                i15 += i7;
                                                                                ChatActivity.this.textSelectionHelper.setKeyboardSize(i7);
                                                                            }
                                                                            childAt2.measure(makeMeasureSpec, View.MeasureSpec.makeMeasureSpec(i15, 1073741824));
                                                                        } else if (childAt2 == ChatActivity.this.forwardingPreviewView) {
                                                                            int makeMeasureSpec2 = View.MeasureSpec.makeMeasureSpec(size, 1073741824);
                                                                            int i16 = size2 - AndroidUtilities.statusBarHeight;
                                                                            if (i7 > AndroidUtilities.dp(20.0f) && getLayoutParams().height < 0) {
                                                                                i16 += i7;
                                                                            }
                                                                            childAt2.measure(makeMeasureSpec2, View.MeasureSpec.makeMeasureSpec(i16, 1073741824));
                                                                        } else {
                                                                            i6 = i7;
                                                                            i5 = i4;
                                                                            measureChildWithMargins(childAt2, i, 0, i2, 0);
                                                                        }
                                                                    } else {
                                                                        FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) mentionsContainerView.getLayoutParams();
                                                                        if (ChatActivity.this.mentionContainer.getAdapter().isBannedInline()) {
                                                                            childAt2.measure(View.MeasureSpec.makeMeasureSpec(size, 1073741824), View.MeasureSpec.makeMeasureSpec(paddingTop, Integer.MIN_VALUE));
                                                                        } else {
                                                                            ChatActivity.this.mentionContainer.setIgnoreLayout(true);
                                                                            LinearLayoutManager currentLayoutManager = ChatActivity.this.mentionContainer.getCurrentLayoutManager();
                                                                            if (currentLayoutManager instanceof ExtendedGridLayoutManager) {
                                                                                int rowsCount = ((ExtendedGridLayoutManager) currentLayoutManager).getRowsCount(size) * 102;
                                                                                if (ChatActivity.this.mentionContainer.getAdapter().isBotContext() && ChatActivity.this.mentionContainer.getAdapter().getBotContextSwitch() != null) {
                                                                                    rowsCount += 34;
                                                                                }
                                                                                i8 = (paddingTop - ChatActivity.this.chatActivityEnterView.getMeasuredHeight()) + (rowsCount != 0 ? AndroidUtilities.dp(2.0f) : 0);
                                                                                Math.max(0, i8 - AndroidUtilities.dp(Math.min(rowsCount, 122.399994f)));
                                                                            } else {
                                                                                int lastItemCount = ChatActivity.this.mentionContainer.getAdapter().getLastItemCount();
                                                                                if (ChatActivity.this.mentionContainer.getAdapter().isBotContext()) {
                                                                                    if (ChatActivity.this.mentionContainer.getAdapter().getBotContextSwitch() != null) {
                                                                                        lastItemCount--;
                                                                                        i10 = 36;
                                                                                    } else {
                                                                                        i10 = 0;
                                                                                    }
                                                                                    i9 = i10 + (lastItemCount * 68);
                                                                                } else {
                                                                                    i9 = (lastItemCount * 36) + 0;
                                                                                }
                                                                                i8 = (i9 != 0 ? AndroidUtilities.dp(2.0f) : 0) + (paddingTop - ChatActivity.this.chatActivityEnterView.getMeasuredHeight());
                                                                            }
                                                                            layoutParams.height = i8;
                                                                            layoutParams.topMargin = 0;
                                                                            ChatActivity.this.mentionContainer.setIgnoreLayout(false);
                                                                            childAt2.measure(View.MeasureSpec.makeMeasureSpec(size, 1073741824), View.MeasureSpec.makeMeasureSpec(layoutParams.height, 1073741824));
                                                                        }
                                                                        ChatActivity.this.mentionContainer.setTranslationY(chatActivity.chatActivityEnterView.getAnimatedTop());
                                                                    }
                                                                }
                                                            } else {
                                                                childAt2.measure(View.MeasureSpec.makeMeasureSpec(size, 1073741824), View.MeasureSpec.makeMeasureSpec(paddingTop, 1073741824));
                                                            }
                                                        } else {
                                                            i6 = i7;
                                                            i5 = i4;
                                                            childAt2.measure(View.MeasureSpec.makeMeasureSpec(size, 1073741824), View.MeasureSpec.makeMeasureSpec(((size2 - this.inputFieldHeight) - ChatActivity.this.chatEmojiViewPadding) + AndroidUtilities.dp(3.0f), 1073741824));
                                                        }
                                                        i4 = i5 + 1;
                                                        i14 = i6;
                                                        i11 = 8;
                                                    } else {
                                                        childAt2.measure(View.MeasureSpec.makeMeasureSpec(size, 1073741824), View.MeasureSpec.makeMeasureSpec(Math.max(AndroidUtilities.dp(10.0f), ((paddingTop - this.inputFieldHeight) - ((!((BaseFragment) ChatActivity.this).inPreviewMode || Build.VERSION.SDK_INT < 21) ? 0 : AndroidUtilities.statusBarHeight)) + AndroidUtilities.dp((ChatActivity.this.chatActivityEnterView.isTopViewVisible() ? 48 : 0) + 2)), 1073741824));
                                                    }
                                                } else {
                                                    int makeMeasureSpec3 = View.MeasureSpec.makeMeasureSpec(size, 1073741824);
                                                    int i17 = (paddingTop - i3) - ((!((BaseFragment) ChatActivity.this).inPreviewMode || Build.VERSION.SDK_INT < 21) ? 0 : AndroidUtilities.statusBarHeight);
                                                    ChatActivity chatActivity11 = ChatActivity.this;
                                                    int i18 = i17 + chatActivity11.blurredViewTopOffset + chatActivity11.blurredViewBottomOffset;
                                                    if (i7 > AndroidUtilities.dp(20.0f) && getLayoutParams().height < 0) {
                                                        i18 += i7;
                                                    }
                                                    childAt2.measure(makeMeasureSpec3, View.MeasureSpec.makeMeasureSpec(Math.max(AndroidUtilities.dp(10.0f), i18), 1073741824));
                                                }
                                            } else {
                                                i7 = i14;
                                                childAt2.measure(View.MeasureSpec.makeMeasureSpec(size, 1073741824), View.MeasureSpec.makeMeasureSpec((i7 <= AndroidUtilities.dp(20.0f) || getLayoutParams().height >= 0) ? size2 : size2 + i7, 1073741824));
                                            }
                                            i6 = i7;
                                            i5 = i4;
                                            i4 = i5 + 1;
                                            i14 = i6;
                                            i11 = 8;
                                        } else {
                                            childAt2.measure(View.MeasureSpec.makeMeasureSpec(size, 1073741824), View.MeasureSpec.makeMeasureSpec(size2, 1073741824));
                                        }
                                    }
                                }
                                i5 = i4;
                                i6 = i14;
                                i4 = i5 + 1;
                                i14 = i6;
                                i11 = 8;
                            }
                            if (ChatActivity.this.fixPaddingsInLayout) {
                                ChatActivity.this.globalIgnoreLayout = true;
                                ChatActivity.this.invalidateChatListViewTopPadding();
                                ChatActivity.this.invalidateMessagesVisiblePart();
                                ChatActivity.this.fixPaddingsInLayout = false;
                                ChatActivity.this.chatListView.measure(View.MeasureSpec.makeMeasureSpec(ChatActivity.this.chatListView.getMeasuredWidth(), 1073741824), View.MeasureSpec.makeMeasureSpec(ChatActivity.this.chatListView.getMeasuredHeight(), 1073741824));
                                ChatActivity.this.globalIgnoreLayout = false;
                            }
                            if (ChatActivity.this.scrollToPositionOnRecreate != -1) {
                                AndroidUtilities.runOnUIThread(new ChatActivity$13$$ExternalSyntheticLambda0(this, ChatActivity.this.scrollToPositionOnRecreate));
                                ChatActivity.this.scrollToPositionOnRecreate = -1;
                            }
                            ChatActivity.this.updateBulletinLayout();
                            this.lastHeight = size2;
                        }
                    }
                }
            }
            z = false;
            if (!z) {
            }
            childCount = getChildCount();
            int i142 = keyboardHeight;
            measureChildWithMargins(ChatActivity.this.chatActivityEnterView, i, 0, i2, 0);
            if (!((BaseFragment) ChatActivity.this).inPreviewMode) {
            }
            ChatActivity chatActivity72 = ChatActivity.this;
            chatActivity72.blurredViewTopOffset = 0;
            chatActivity72.blurredViewBottomOffset = 0;
            if (SharedConfig.chatBlurEnabled()) {
            }
            i4 = 0;
            while (i4 < childCount) {
            }
            if (ChatActivity.this.fixPaddingsInLayout) {
            }
            if (ChatActivity.this.scrollToPositionOnRecreate != -1) {
            }
            ChatActivity.this.updateBulletinLayout();
            this.lastHeight = size2;
        }

        public /* synthetic */ void lambda$onMeasure$1(int i) {
            ChatActivity.this.chatLayoutManager.scrollToPositionWithOffset(i, ChatActivity.this.scrollToOffsetOnRecreate);
        }

        @Override // android.view.View, android.view.ViewParent
        public void requestLayout() {
            if (ChatActivity.this.globalIgnoreLayout) {
                return;
            }
            super.requestLayout();
        }

        /* JADX WARN: Code restructure failed: missing block: B:116:0x0226, code lost:
            if (getLayoutParams().height < 0) goto L146;
         */
        /* JADX WARN: Code restructure failed: missing block: B:145:0x029d, code lost:
            if (getLayoutParams().height < 0) goto L146;
         */
        /* JADX WARN: Code restructure failed: missing block: B:146:0x029f, code lost:
            r8 = r8 - r2;
         */
        /* JADX WARN: Removed duplicated region for block: B:37:0x0091  */
        /* JADX WARN: Removed duplicated region for block: B:52:0x00da  */
        /* JADX WARN: Removed duplicated region for block: B:56:0x00f0  */
        /* JADX WARN: Removed duplicated region for block: B:64:0x0106  */
        /* JADX WARN: Removed duplicated region for block: B:65:0x0124  */
        @Override // org.telegram.ui.Components.SizeNotifierFrameLayout, android.widget.FrameLayout, android.view.ViewGroup, android.view.View
        /*
            Code decompiled incorrectly, please refer to instructions dump.
        */
        public void onLayout(boolean z, int i, int i2, int i3, int i4) {
            int i5;
            int i6;
            int i7;
            ChatActivity chatActivity;
            int i8;
            int i9;
            int i10;
            int i11;
            int i12;
            int childCount = getChildCount();
            int keyboardHeight = getKeyboardHeight();
            if (ChatActivity.this.fixedKeyboardHeight > 0 && keyboardHeight <= AndroidUtilities.dp(20.0f)) {
                i5 = ChatActivity.this.fixedKeyboardHeight;
            } else {
                i5 = (keyboardHeight > AndroidUtilities.dp(20.0f) || AndroidUtilities.isInMultiwindow || ((BaseFragment) ChatActivity.this).inBubbleMode) ? 0 : ChatActivity.this.chatActivityEnterView.getEmojiPadding();
            }
            if (!SharedConfig.smoothKeyboard) {
                setBottomClip(i5);
            }
            for (int i13 = 0; i13 < childCount; i13++) {
                View childAt = getChildAt(i13);
                if (childAt != null && childAt.getVisibility() != 8) {
                    FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) childAt.getLayoutParams();
                    int measuredWidth = childAt.getMeasuredWidth();
                    int measuredHeight = childAt.getMeasuredHeight();
                    int i14 = layoutParams.gravity;
                    if (i14 == -1) {
                        i14 = 51;
                    }
                    int i15 = i14 & 7;
                    int i16 = i14 & 112;
                    int i17 = i15 & 7;
                    if (i17 == 1) {
                        i12 = (((i3 - i) - measuredWidth) / 2) + layoutParams.leftMargin;
                        i11 = layoutParams.rightMargin;
                    } else if (i17 == 5) {
                        i12 = i3 - measuredWidth;
                        i11 = layoutParams.rightMargin;
                    } else {
                        i6 = layoutParams.leftMargin;
                        if (i16 == 16) {
                            if (i16 == 48) {
                                i7 = layoutParams.topMargin + getPaddingTop();
                                if (childAt != ((BaseFragment) ChatActivity.this).actionBar && ((BaseFragment) ChatActivity.this).actionBar.getVisibility() == 0) {
                                    i7 += ((BaseFragment) ChatActivity.this).actionBar.getMeasuredHeight();
                                    if (((BaseFragment) ChatActivity.this).inPreviewMode && Build.VERSION.SDK_INT >= 21) {
                                        i7 += AndroidUtilities.statusBarHeight;
                                    }
                                }
                            } else if (i16 == 80) {
                                i9 = ((i4 - i5) - i2) - measuredHeight;
                                i10 = layoutParams.bottomMargin;
                            } else {
                                i7 = layoutParams.topMargin;
                            }
                            if (childAt != ChatActivity.this.blurredView && childAt != this.backgroundView && !(childAt instanceof HintView) && !(childAt instanceof ChecksHintView)) {
                                chatActivity = ChatActivity.this;
                                if (childAt == chatActivity.mentionContainer) {
                                    if (childAt == chatActivity.pagedownButton || childAt == ChatActivity.this.mentiondownButton || childAt == ChatActivity.this.reactionsMentiondownButton) {
                                        if (!((BaseFragment) ChatActivity.this).inPreviewMode) {
                                            i8 = ChatActivity.this.chatActivityEnterView.getMeasuredHeight();
                                            i7 -= i8;
                                        }
                                    } else {
                                        if (childAt == ChatActivity.this.emptyViewContainer) {
                                            i8 = (this.inputFieldHeight / 2) - (((BaseFragment) ChatActivity.this).actionBar.getVisibility() == 0 ? ((BaseFragment) ChatActivity.this).actionBar.getMeasuredHeight() / 2 : 0);
                                        } else if (!ChatActivity.this.chatActivityEnterView.isPopupView(childAt)) {
                                            if (childAt != ChatActivity.this.gifHintTextView && childAt != ChatActivity.this.voiceHintTextView && childAt != ChatActivity.this.mediaBanTooltip) {
                                                if (childAt != ChatActivity.this.chatListView && childAt != ChatActivity.this.floatingDateView && childAt != ChatActivity.this.infoTopView) {
                                                    if (childAt != ChatActivity.this.progressView) {
                                                        if (childAt == ((BaseFragment) ChatActivity.this).actionBar) {
                                                            if (((BaseFragment) ChatActivity.this).inPreviewMode && Build.VERSION.SDK_INT >= 21) {
                                                                i7 += AndroidUtilities.statusBarHeight;
                                                            }
                                                            i8 = getPaddingTop();
                                                        } else if (childAt == ChatActivity.this.videoPlayerContainer) {
                                                            i7 = ((BaseFragment) ChatActivity.this).actionBar.getMeasuredHeight() - i5;
                                                            if (keyboardHeight > AndroidUtilities.dp(20.0f)) {
                                                            }
                                                        } else if (childAt != ChatActivity.this.instantCameraView && childAt != ChatActivity.this.overlayView && childAt != ChatActivity.this.animatingImageView) {
                                                            if (childAt == ChatActivity.this.textSelectionHelper.getOverlayView(this.val$context)) {
                                                                i7 -= i5;
                                                                if (keyboardHeight > AndroidUtilities.dp(20.0f) && getLayoutParams().height < 0) {
                                                                    i7 -= keyboardHeight;
                                                                }
                                                                i8 = ChatActivity.this.blurredViewTopOffset;
                                                            } else {
                                                                ChatActivity chatActivity2 = ChatActivity.this;
                                                                ChatActivityEnterView chatActivityEnterView = chatActivity2.chatActivityEnterView;
                                                                if (chatActivityEnterView != null && childAt == chatActivityEnterView.botCommandsMenuContainer) {
                                                                    i8 = this.inputFieldHeight;
                                                                } else if (childAt == chatActivity2.forwardingPreviewView) {
                                                                    i7 = AndroidUtilities.statusBarHeight;
                                                                }
                                                            }
                                                        }
                                                    } else if (ChatActivity.this.chatActivityEnterView.isTopViewVisible()) {
                                                        i8 = AndroidUtilities.dp(48.0f);
                                                    }
                                                } else {
                                                    ChatActivity chatActivity3 = ChatActivity.this;
                                                    int i18 = i7 - chatActivity3.blurredViewTopOffset;
                                                    if (!((BaseFragment) chatActivity3).inPreviewMode) {
                                                        i18 -= this.inputFieldHeight - AndroidUtilities.dp(51.0f);
                                                    }
                                                    i7 = i18 - i5;
                                                    if (keyboardHeight > AndroidUtilities.dp(20.0f)) {
                                                    }
                                                }
                                            } else {
                                                i8 = this.inputFieldHeight;
                                            }
                                        } else {
                                            i7 = (AndroidUtilities.isInMultiwindow || ((BaseFragment) ChatActivity.this).inBubbleMode) ? (ChatActivity.this.chatActivityEnterView.getTop() - childAt.getMeasuredHeight()) + AndroidUtilities.dp(1.0f) : ChatActivity.this.chatActivityEnterView.getBottom();
                                        }
                                        i7 -= i8;
                                    }
                                } else {
                                    i7 -= chatActivity.chatActivityEnterView.getMeasuredHeight() - AndroidUtilities.dp(2.0f);
                                    ChatActivity chatActivity4 = ChatActivity.this;
                                    chatActivity4.mentionContainer.setTranslationY(chatActivity4.chatActivityEnterView.getAnimatedTop());
                                }
                                childAt.layout(i6, i7, measuredWidth + i6, measuredHeight + i7);
                            }
                            i7 = 0;
                            childAt.layout(i6, i7, measuredWidth + i6, measuredHeight + i7);
                        } else {
                            i9 = ((((i4 - i5) - i2) - measuredHeight) / 2) + layoutParams.topMargin;
                            i10 = layoutParams.bottomMargin;
                        }
                        i7 = i9 - i10;
                        if (childAt != ChatActivity.this.blurredView) {
                            chatActivity = ChatActivity.this;
                            if (childAt == chatActivity.mentionContainer) {
                            }
                            childAt.layout(i6, i7, measuredWidth + i6, measuredHeight + i7);
                        }
                        i7 = 0;
                        childAt.layout(i6, i7, measuredWidth + i6, measuredHeight + i7);
                    }
                    i6 = i12 - i11;
                    if (i16 == 16) {
                    }
                    i7 = i9 - i10;
                    if (childAt != ChatActivity.this.blurredView) {
                    }
                    i7 = 0;
                    childAt.layout(i6, i7, measuredWidth + i6, measuredHeight + i7);
                }
            }
            ChatActivity.this.invalidateChatListViewTopPadding();
            ChatActivity.this.invalidateMessagesVisiblePart();
            ChatActivity.this.updateTextureViewPosition(false);
            if (!ChatActivity.this.scrollingChatListView) {
                ChatActivity.this.checkAutoDownloadMessages(false);
            }
            notifyHeightChanged();
        }

        public void setNonNoveTranslation(float f) {
            ChatActivity.this.contentView.setTranslationY(f);
            ((BaseFragment) ChatActivity.this).actionBar.setTranslationY(0.0f);
            ChatActivity.this.emptyViewContainer.setTranslationY(0.0f);
            ChatActivity.this.progressView.setTranslationY(0.0f);
            ChatActivity.this.contentPanTranslation = 0.0f;
            ChatActivity.this.contentView.setBackgroundTranslation(0);
            ChatActivity.this.instantCameraView.onPanTranslationUpdate(0.0f);
            if (ChatActivity.this.blurredView != null) {
                ChatActivity.this.blurredView.drawable.onPanTranslationUpdate(0.0f);
            }
            ChatActivity.this.setFragmentPanTranslationOffset(0);
            ChatActivity.this.invalidateChatListViewTopPadding();
        }

        @Override // android.view.View
        public void setPadding(int i, int i2, int i3, int i4) {
            ChatActivity.this.contentPaddingTop = i2;
            ChatActivity.this.invalidateChatListViewTopPadding();
            ChatActivity.this.invalidateMessagesVisiblePart();
        }

        @Override // android.view.ViewGroup, android.view.View
        public boolean dispatchKeyEvent(KeyEvent keyEvent) {
            ForwardingPreviewView forwardingPreviewView;
            if (keyEvent.getKeyCode() == 4 && keyEvent.getAction() == 1 && (forwardingPreviewView = ChatActivity.this.forwardingPreviewView) != null && forwardingPreviewView.isShowing()) {
                ChatActivity.this.forwardingPreviewView.dismiss(true);
                return true;
            }
            return super.dispatchKeyEvent(keyEvent);
        }

        @Override // org.telegram.ui.Components.SizeNotifierFrameLayout
        public Drawable getNewDrawable() {
            Drawable wallpaperDrawable = ChatActivity.this.themeDelegate.getWallpaperDrawable();
            return wallpaperDrawable != null ? wallpaperDrawable : super.getNewDrawable();
        }
    }

    public /* synthetic */ void lambda$createView$25(TLRPC$Document tLRPC$Document) {
        this.animatingDocuments.put(tLRPC$Document, 0);
        SendMessagesHelper.getInstance(this.currentAccount).sendSticker(tLRPC$Document, null, this.dialog_id, null, null, null, null, true, 0);
    }

    public /* synthetic */ void lambda$createView$26(TLRPC$Document tLRPC$Document) {
        this.animatingDocuments.put(tLRPC$Document, 0);
        SendMessagesHelper.getInstance(this.currentAccount).sendSticker(tLRPC$Document, null, this.dialog_id, null, null, null, null, true, 0);
    }

    /* renamed from: org.telegram.ui.ChatActivity$14 */
    /* loaded from: classes3.dex */
    public class AnonymousClass14 extends RecyclerListView {
        private float endTrackingX;
        private boolean ignoreLayout;
        private boolean invalidated;
        private long lastReplyButtonAnimationTime;
        private long lastTrackingAnimationTime;
        private int lastWidth;
        private float replyButtonProgress;
        private int startedTrackingPointerId;
        private int startedTrackingX;
        private int startedTrackingY;
        private float trackAnimationProgress;
        private boolean wasTrackingVibrate;
        private final ArrayList<ChatMessageCell> drawTimeAfter = new ArrayList<>();
        private final ArrayList<ChatMessageCell> drawNamesAfter = new ArrayList<>();
        private final ArrayList<ChatMessageCell> drawCaptionAfter = new ArrayList<>();
        private final ArrayList<MessageObject.GroupedMessages> drawingGroups = new ArrayList<>(10);
        int lastH = 0;

        /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
        AnonymousClass14(Context context, Theme.ResourcesProvider resourcesProvider) {
            super(context, resourcesProvider);
            ChatActivity.this = r1;
        }

        @Override // org.telegram.ui.Components.RecyclerListView, androidx.recyclerview.widget.RecyclerView, android.view.View, android.view.ViewParent
        public void requestLayout() {
            if (this.ignoreLayout) {
                return;
            }
            super.requestLayout();
        }

        @Override // org.telegram.ui.Components.RecyclerListView, android.view.View
        public void setTranslationY(float f) {
            BotCommandsMenuContainer botCommandsMenuContainer;
            if (f != getTranslationY()) {
                super.setTranslationY(f);
                if (ChatActivity.this.emptyViewContainer != null) {
                    ChatActivityEnterView chatActivityEnterView = ChatActivity.this.chatActivityEnterView;
                    if (chatActivityEnterView == null || !chatActivityEnterView.panelAnimationInProgress()) {
                        ChatActivity.this.emptyViewContainer.setTranslationY(f / 1.7f);
                    } else {
                        ChatActivity.this.emptyViewContainer.setTranslationY(f / 2.0f);
                    }
                }
                ChatActivityEnterView chatActivityEnterView2 = ChatActivity.this.chatActivityEnterView;
                if (chatActivityEnterView2 != null && (botCommandsMenuContainer = chatActivityEnterView2.botCommandsMenuContainer) != null) {
                    botCommandsMenuContainer.setTranslationY(f);
                }
                ChatActivity.this.invalidateChatListViewTopPadding();
                ChatActivity.this.invalidateMessagesVisiblePart();
            }
        }

        @Override // org.telegram.ui.Components.RecyclerListView, androidx.recyclerview.widget.RecyclerView, android.view.ViewGroup, android.view.View
        public void onLayout(boolean z, int i, int i2, int i3, int i4) {
            super.onLayout(z, i, i2, i3, i4);
            int i5 = i3 - i;
            if (this.lastWidth != i5) {
                this.lastWidth = i5;
                ChatActivity.this.hideHints(false);
            }
            int measuredHeight = getMeasuredHeight();
            if (this.lastH != measuredHeight) {
                this.ignoreLayout = true;
                if (ChatActivity.this.chatListItemAnimator != null) {
                    ChatActivity.this.chatListItemAnimator.endAnimations();
                }
                ChatActivity.this.chatScrollHelper.cancel();
                this.ignoreLayout = false;
                this.lastH = measuredHeight;
            }
            ChatActivity.this.forceScrollToTop = false;
            if (ChatActivity.this.textSelectionHelper == null || !ChatActivity.this.textSelectionHelper.isSelectionMode()) {
                return;
            }
            ChatActivity.this.textSelectionHelper.invalidate();
        }

        private void setGroupTranslationX(ChatMessageCell chatMessageCell, float f) {
            MessageObject.GroupedMessages currentMessagesGroup = chatMessageCell.getCurrentMessagesGroup();
            if (currentMessagesGroup == null) {
                return;
            }
            int childCount = getChildCount();
            for (int i = 0; i < childCount; i++) {
                View childAt = getChildAt(i);
                if (childAt != chatMessageCell && (childAt instanceof ChatMessageCell)) {
                    ChatMessageCell chatMessageCell2 = (ChatMessageCell) childAt;
                    if (chatMessageCell2.getCurrentMessagesGroup() == currentMessagesGroup) {
                        chatMessageCell2.setSlidingOffset(f);
                        chatMessageCell2.invalidate();
                    }
                }
            }
            invalidate();
        }

        @Override // androidx.recyclerview.widget.RecyclerView, android.view.ViewGroup, android.view.ViewParent
        public boolean requestChildRectangleOnScreen(View view, Rect rect, boolean z) {
            if (ChatActivity.this.scrimPopupWindow != null) {
                return false;
            }
            return super.requestChildRectangleOnScreen(view, rect, z);
        }

        @Override // org.telegram.ui.Components.RecyclerListView, androidx.recyclerview.widget.RecyclerView, android.view.ViewGroup
        public boolean onInterceptTouchEvent(MotionEvent motionEvent) {
            ChatActivity.this.textSelectionHelper.checkSelectionCancel(motionEvent);
            if (isFastScrollAnimationRunning()) {
                return false;
            }
            boolean onInterceptTouchEvent = super.onInterceptTouchEvent(motionEvent);
            if (!((BaseFragment) ChatActivity.this).actionBar.isActionModeShowed() && ChatActivity.this.reportType < 0) {
                processTouchEvent(motionEvent);
            }
            return onInterceptTouchEvent;
        }

        @Override // androidx.recyclerview.widget.RecyclerView
        public void setItemAnimator(RecyclerView.ItemAnimator itemAnimator) {
            if (isFastScrollAnimationRunning()) {
                return;
            }
            super.setItemAnimator(itemAnimator);
        }

        private void drawReplyButton(Canvas canvas) {
            float f;
            float f2;
            int i;
            if (ChatActivity.this.slidingView == null) {
                return;
            }
            float nonAnimationTranslationX = ChatActivity.this.slidingView.getNonAnimationTranslationX(false);
            long currentTimeMillis = System.currentTimeMillis();
            long min = Math.min(17L, currentTimeMillis - this.lastReplyButtonAnimationTime);
            this.lastReplyButtonAnimationTime = currentTimeMillis;
            boolean z = nonAnimationTranslationX <= ((float) (-AndroidUtilities.dp(50.0f)));
            if (z) {
                float f3 = this.replyButtonProgress;
                if (f3 < 1.0f) {
                    float f4 = f3 + (((float) min) / 180.0f);
                    this.replyButtonProgress = f4;
                    if (f4 > 1.0f) {
                        this.replyButtonProgress = 1.0f;
                    } else {
                        invalidate();
                    }
                }
            } else {
                float f5 = this.replyButtonProgress;
                if (f5 > 0.0f) {
                    float f6 = f5 - (((float) min) / 180.0f);
                    this.replyButtonProgress = f6;
                    if (f6 < 0.0f) {
                        this.replyButtonProgress = 0.0f;
                    } else {
                        invalidate();
                    }
                }
            }
            Paint themedPaint = getThemedPaint("paintChatActionBackground");
            int alpha = themedPaint.getAlpha();
            if (z) {
                float f7 = this.replyButtonProgress;
                f = f7 <= 0.8f ? (f7 / 0.8f) * 1.2f : 1.2f - (((f7 - 0.8f) / 0.2f) * 0.2f);
                i = (int) Math.min(255.0f, (f7 / 0.8f) * 255.0f);
                float f8 = alpha;
                f2 = Math.min(f8, (this.replyButtonProgress / 0.8f) * f8);
            } else {
                f = this.replyButtonProgress;
                i = (int) Math.min(255.0f, f * 255.0f);
                float f9 = alpha;
                f2 = Math.min(f9, this.replyButtonProgress * f9);
            }
            themedPaint.setAlpha((int) f2);
            float measuredWidth = getMeasuredWidth() + (ChatActivity.this.slidingView.getNonAnimationTranslationX(false) / 2.0f);
            float top = ChatActivity.this.slidingView.getTop() + (ChatActivity.this.slidingView.getMeasuredHeight() / 2);
            RectF rectF = AndroidUtilities.rectTmp;
            rectF.set((int) (measuredWidth - (AndroidUtilities.dp(16.0f) * f)), (int) (top - (AndroidUtilities.dp(16.0f) * f)), (int) ((AndroidUtilities.dp(16.0f) * f) + measuredWidth), (int) ((AndroidUtilities.dp(16.0f) * f) + top));
            Theme.applyServiceShaderMatrix(getMeasuredWidth(), AndroidUtilities.displaySize.y, 0.0f, getY() + rectF.top);
            canvas.drawRoundRect(rectF, AndroidUtilities.dp(16.0f), AndroidUtilities.dp(16.0f), themedPaint);
            if (ChatActivity.this.themeDelegate.hasGradientService()) {
                canvas.drawRoundRect(rectF, AndroidUtilities.dp(16.0f), AndroidUtilities.dp(16.0f), Theme.chat_actionBackgroundGradientDarkenPaint);
            }
            themedPaint.setAlpha(alpha);
            Drawable themedDrawable = getThemedDrawable("drawableReplyIcon");
            themedDrawable.setAlpha(i);
            themedDrawable.setBounds((int) (measuredWidth - (AndroidUtilities.dp(7.0f) * f)), (int) (top - (AndroidUtilities.dp(6.0f) * f)), (int) (measuredWidth + (AndroidUtilities.dp(7.0f) * f)), (int) (top + (AndroidUtilities.dp(5.0f) * f)));
            themedDrawable.draw(canvas);
            themedDrawable.setAlpha(255);
        }

        private void processTouchEvent(MotionEvent motionEvent) {
            TLRPC$Chat tLRPC$Chat;
            if (motionEvent != null) {
                ChatActivity.this.wasManualScroll = true;
            }
            if (motionEvent == null || motionEvent.getAction() != 0 || ChatActivity.this.startedTrackingSlidingView || ChatActivity.this.maybeStartTrackingSlidingView || ChatActivity.this.slidingView != null || ((BaseFragment) ChatActivity.this).inPreviewMode) {
                if (ChatActivity.this.slidingView == null || motionEvent == null || motionEvent.getAction() != 2 || motionEvent.getPointerId(0) != this.startedTrackingPointerId) {
                    if (ChatActivity.this.slidingView == null) {
                        return;
                    }
                    if (motionEvent != null) {
                        if (motionEvent.getPointerId(0) != this.startedTrackingPointerId) {
                            return;
                        }
                        if (motionEvent.getAction() != 3 && motionEvent.getAction() != 1 && motionEvent.getAction() != 6) {
                            return;
                        }
                    }
                    if (motionEvent != null && motionEvent.getAction() != 3 && Math.abs(ChatActivity.this.slidingView.getNonAnimationTranslationX(false)) >= AndroidUtilities.dp(50.0f)) {
                        ChatActivity chatActivity = ChatActivity.this;
                        chatActivity.showFieldPanelForReply(chatActivity.slidingView.getMessageObject());
                    }
                    float slidingOffsetX = ChatActivity.this.slidingView.getSlidingOffsetX();
                    this.endTrackingX = slidingOffsetX;
                    if (slidingOffsetX == 0.0f) {
                        ChatActivity.this.slidingView = null;
                    }
                    this.lastTrackingAnimationTime = System.currentTimeMillis();
                    this.trackAnimationProgress = 0.0f;
                    invalidate();
                    ChatActivity.this.maybeStartTrackingSlidingView = false;
                    ChatActivity.this.startedTrackingSlidingView = false;
                    ChatActivity.this.chatLayoutManager.setCanScrollVertically(true);
                    return;
                }
                int max = Math.max(AndroidUtilities.dp(-80.0f), Math.min(0, (int) (motionEvent.getX() - this.startedTrackingX)));
                int abs = Math.abs(((int) motionEvent.getY()) - this.startedTrackingY);
                if (getScrollState() != 0 || !ChatActivity.this.maybeStartTrackingSlidingView || ChatActivity.this.startedTrackingSlidingView || max > (-AndroidUtilities.getPixelsInCM(0.4f, true)) || Math.abs(max) / 3 <= abs) {
                    if (!ChatActivity.this.startedTrackingSlidingView) {
                        return;
                    }
                    if (Math.abs(max) >= AndroidUtilities.dp(50.0f)) {
                        if (!this.wasTrackingVibrate) {
                            try {
                                performHapticFeedback(3, 2);
                            } catch (Exception unused) {
                            }
                            this.wasTrackingVibrate = true;
                        }
                    } else {
                        this.wasTrackingVibrate = false;
                    }
                    float f = max;
                    ChatActivity.this.slidingView.setSlidingOffset(f);
                    MessageObject messageObject = ChatActivity.this.slidingView.getMessageObject();
                    if (messageObject.isRoundVideo() || messageObject.isVideo()) {
                        ChatActivity.this.updateTextureViewPosition(false);
                    }
                    setGroupTranslationX(ChatActivity.this.slidingView, f);
                    invalidate();
                    return;
                }
                MotionEvent obtain = MotionEvent.obtain(0L, 0L, 3, 0.0f, 0.0f, 0);
                ChatActivity.this.slidingView.onTouchEvent(obtain);
                super.onInterceptTouchEvent(obtain);
                obtain.recycle();
                ChatActivity.this.chatLayoutManager.setCanScrollVertically(false);
                ChatActivity.this.maybeStartTrackingSlidingView = false;
                ChatActivity.this.startedTrackingSlidingView = true;
                this.startedTrackingX = (int) motionEvent.getX();
                if (getParent() == null) {
                    return;
                }
                getParent().requestDisallowInterceptTouchEvent(true);
                return;
            }
            View pressedChildView = getPressedChildView();
            if (!(pressedChildView instanceof ChatMessageCell)) {
                return;
            }
            if (ChatActivity.this.slidingView != null) {
                ChatActivity.this.slidingView.setSlidingOffset(0.0f);
            }
            ChatActivity.this.slidingView = (ChatMessageCell) pressedChildView;
            MessageObject messageObject2 = ChatActivity.this.slidingView.getMessageObject();
            if (ChatActivity.this.chatMode != 0 || ((ChatActivity.this.threadMessageObjects != null && ChatActivity.this.threadMessageObjects.contains(messageObject2)) || ((ChatActivity.this.getMessageType(messageObject2) == 1 && (messageObject2.getDialogId() == ChatActivity.this.mergeDialogId || messageObject2.needDrawBluredPreview())) || ((ChatActivity.this.currentEncryptedChat == null && messageObject2.getId() < 0) || ((ChatActivity.this.bottomOverlayChat != null && ChatActivity.this.bottomOverlayChat.getVisibility() == 0) || (((tLRPC$Chat = ChatActivity.this.currentChat) != null && ((ChatObject.isNotInChat(tLRPC$Chat) && !ChatActivity.this.isThreadChat()) || ((ChatObject.isChannel(ChatActivity.this.currentChat) && !ChatObject.canPost(ChatActivity.this.currentChat) && !ChatActivity.this.currentChat.megagroup) || !ChatObject.canSendMessages(ChatActivity.this.currentChat)))) || ChatActivity.this.textSelectionHelper.isSelectionMode())))))) {
                ChatActivity.this.slidingView.setSlidingOffset(0.0f);
                ChatActivity.this.slidingView = null;
                return;
            }
            this.startedTrackingPointerId = motionEvent.getPointerId(0);
            ChatActivity.this.maybeStartTrackingSlidingView = true;
            this.startedTrackingX = (int) motionEvent.getX();
            this.startedTrackingY = (int) motionEvent.getY();
        }

        @Override // org.telegram.ui.Components.RecyclerListView, androidx.recyclerview.widget.RecyclerView, android.view.View
        public boolean onTouchEvent(MotionEvent motionEvent) {
            ChatActivity.this.textSelectionHelper.checkSelectionCancel(motionEvent);
            if (motionEvent.getAction() == 0) {
                ChatActivity.this.scrollByTouch = true;
            }
            if (ChatActivity.this.pullingDownOffset != 0.0f && (motionEvent.getAction() == 1 || motionEvent.getAction() == 3)) {
                float min = Math.min(1.0f, ChatActivity.this.pullingDownOffset / AndroidUtilities.dp(110.0f));
                if (motionEvent.getAction() != 1 || min != 1.0f || ChatActivity.this.pullingDownDrawable == null || ChatActivity.this.pullingDownDrawable.emptyStub) {
                    if (ChatActivity.this.pullingDownDrawable == null || !ChatActivity.this.pullingDownDrawable.emptyStub || System.currentTimeMillis() - ChatActivity.this.pullingDownDrawable.lastShowingReleaseTime >= 500 || !ChatActivity.this.pullingDownDrawable.animateSwipeToRelease) {
                        ValueAnimator ofFloat = ValueAnimator.ofFloat(ChatActivity.this.pullingDownOffset, 0.0f);
                        ChatActivity.this.pullingDownBackAnimator = ofFloat;
                        if (ChatActivity.this.pullingDownDrawable != null) {
                            ChatActivity.this.pullingDownDrawable.showBottomPanel(false);
                        }
                        ofFloat.addUpdateListener(new ChatActivity$14$$ExternalSyntheticLambda1(this));
                        ofFloat.setDuration(250L);
                        ofFloat.setInterpolator(ChatListItemAnimator.DEFAULT_INTERPOLATOR);
                        ofFloat.start();
                    } else {
                        AnimatorSet animatorSet = new AnimatorSet();
                        ChatActivity.this.pullingDownBackAnimator = animatorSet;
                        if (ChatActivity.this.pullingDownDrawable != null) {
                            ChatActivity.this.pullingDownDrawable.showBottomPanel(false);
                        }
                        ValueAnimator ofFloat2 = ValueAnimator.ofFloat(ChatActivity.this.pullingDownOffset, AndroidUtilities.dp(111.0f));
                        ofFloat2.addUpdateListener(new ChatActivity$14$$ExternalSyntheticLambda0(this));
                        ofFloat2.setDuration(400L);
                        ofFloat2.setInterpolator(CubicBezierInterpolator.DEFAULT);
                        ValueAnimator ofFloat3 = ValueAnimator.ofFloat(AndroidUtilities.dp(111.0f), 0.0f);
                        ofFloat3.addUpdateListener(new ChatActivity$14$$ExternalSyntheticLambda2(this));
                        ofFloat3.setStartDelay(600L);
                        ofFloat3.setDuration(250L);
                        ofFloat3.setInterpolator(ChatListItemAnimator.DEFAULT_INTERPOLATOR);
                        animatorSet.playSequentially(ofFloat2, ofFloat3);
                        animatorSet.start();
                    }
                } else if (ChatActivity.this.pullingDownDrawable.animationIsRunning()) {
                    ValueAnimator ofFloat4 = ValueAnimator.ofFloat(ChatActivity.this.pullingDownOffset, ChatActivity.this.pullingDownOffset + AndroidUtilities.dp(8.0f));
                    ChatActivity.this.pullingDownBackAnimator = ofFloat4;
                    ofFloat4.addUpdateListener(new ChatActivity$14$$ExternalSyntheticLambda3(this));
                    ofFloat4.setDuration(200L);
                    ofFloat4.setInterpolator(CubicBezierInterpolator.DEFAULT);
                    ofFloat4.start();
                    ChatActivity.this.pullingDownDrawable.runOnAnimationFinish(new ChatActivity$14$$ExternalSyntheticLambda4(this));
                } else {
                    ChatActivity.this.animateToNextChat();
                }
            }
            if (isFastScrollAnimationRunning()) {
                return false;
            }
            boolean onTouchEvent = super.onTouchEvent(motionEvent);
            if (((BaseFragment) ChatActivity.this).actionBar.isActionModeShowed() || ChatActivity.this.reportType >= 0) {
                return onTouchEvent;
            }
            processTouchEvent(motionEvent);
            return ChatActivity.this.startedTrackingSlidingView || onTouchEvent;
        }

        public /* synthetic */ void lambda$onTouchEvent$0(ValueAnimator valueAnimator) {
            ChatActivity.this.pullingDownOffset = ((Float) valueAnimator.getAnimatedValue()).floatValue();
            ChatActivity.this.chatListView.invalidate();
        }

        public /* synthetic */ void lambda$onTouchEvent$1() {
            ChatActivity.this.animateToNextChat();
        }

        public /* synthetic */ void lambda$onTouchEvent$2(ValueAnimator valueAnimator) {
            ChatActivity.this.pullingDownOffset = ((Float) valueAnimator.getAnimatedValue()).floatValue();
            ChatActivity.this.chatListView.invalidate();
        }

        public /* synthetic */ void lambda$onTouchEvent$3(ValueAnimator valueAnimator) {
            ChatActivity.this.pullingDownOffset = ((Float) valueAnimator.getAnimatedValue()).floatValue();
            ChatActivity.this.chatListView.invalidate();
        }

        public /* synthetic */ void lambda$onTouchEvent$4(ValueAnimator valueAnimator) {
            ChatActivity.this.pullingDownOffset = ((Float) valueAnimator.getAnimatedValue()).floatValue();
            ChatActivity.this.chatListView.invalidate();
        }

        @Override // androidx.recyclerview.widget.RecyclerView, android.view.ViewGroup, android.view.ViewParent
        public void requestDisallowInterceptTouchEvent(boolean z) {
            super.requestDisallowInterceptTouchEvent(z);
            if (ChatActivity.this.slidingView != null) {
                processTouchEvent(null);
            }
        }

        @Override // org.telegram.ui.Components.RecyclerListView
        public void onChildPressed(View view, float f, float f2, boolean z) {
            MessageObject.GroupedMessages currentMessagesGroup;
            super.onChildPressed(view, f, f2, z);
            if (view instanceof ChatMessageCell) {
                ChatMessageCell chatMessageCell = (ChatMessageCell) view;
                MessageObject messageObject = chatMessageCell.getMessageObject();
                if (messageObject.isMusic() || messageObject.isDocument() || (currentMessagesGroup = chatMessageCell.getCurrentMessagesGroup()) == null) {
                    return;
                }
                int childCount = getChildCount();
                for (int i = 0; i < childCount; i++) {
                    View childAt = getChildAt(i);
                    if (childAt != view && (childAt instanceof ChatMessageCell)) {
                        ChatMessageCell chatMessageCell2 = (ChatMessageCell) childAt;
                        if (chatMessageCell2.getCurrentMessagesGroup() == currentMessagesGroup) {
                            chatMessageCell2.setPressed(z);
                        }
                    }
                }
            }
        }

        @Override // androidx.recyclerview.widget.RecyclerView, android.view.View
        public void onDraw(Canvas canvas) {
            float f;
            super.onDraw(canvas);
            if (ChatActivity.this.slidingView != null) {
                float slidingOffsetX = ChatActivity.this.slidingView.getSlidingOffsetX();
                if (!ChatActivity.this.maybeStartTrackingSlidingView && !ChatActivity.this.startedTrackingSlidingView && this.endTrackingX != 0.0f && slidingOffsetX != 0.0f) {
                    long currentTimeMillis = System.currentTimeMillis();
                    float f2 = this.trackAnimationProgress + (((float) (currentTimeMillis - this.lastTrackingAnimationTime)) / 180.0f);
                    this.trackAnimationProgress = f2;
                    if (f2 > 1.0f) {
                        this.trackAnimationProgress = 1.0f;
                    }
                    this.lastTrackingAnimationTime = currentTimeMillis;
                    float interpolation = this.endTrackingX * (1.0f - AndroidUtilities.decelerateInterpolator.getInterpolation(this.trackAnimationProgress));
                    if (interpolation == 0.0f) {
                        this.endTrackingX = 0.0f;
                    }
                    setGroupTranslationX(ChatActivity.this.slidingView, interpolation);
                    ChatActivity.this.slidingView.setSlidingOffset(interpolation);
                    MessageObject messageObject = ChatActivity.this.slidingView.getMessageObject();
                    if (messageObject.isRoundVideo() || messageObject.isVideo()) {
                        ChatActivity.this.updateTextureViewPosition(false);
                    }
                    float f3 = this.trackAnimationProgress;
                    if (f3 == 1.0f || f3 == 0.0f) {
                        ChatActivity.this.slidingView.setSlidingOffset(0.0f);
                        ChatActivity.this.slidingView = null;
                    }
                    invalidate();
                }
                drawReplyButton(canvas);
            }
            if (ChatActivity.this.pullingDownOffset == 0.0f || ChatActivity.this.isInPreviewMode()) {
                if (ChatActivity.this.pullingDownDrawable == null) {
                    return;
                }
                ChatActivity.this.pullingDownDrawable.reset();
                return;
            }
            canvas.save();
            if (ChatActivity.this.pullingDownAnimateProgress != 0.0f) {
                f = ((ChatActivity.this.chatListView.getMeasuredHeight() - ChatActivity.this.pullingDownOffset) + (ChatActivity.this.pullingDownAnimateToActivity == null ? 0.0f : ChatActivity.this.pullingDownAnimateToActivity.pullingBottomOffset)) * ChatActivity.this.pullingDownAnimateProgress;
            } else {
                f = 0.0f;
            }
            canvas.translate(0.0f, (getMeasuredHeight() - ChatActivity.this.blurredViewBottomOffset) - f);
            if (ChatActivity.this.pullingDownDrawable == null) {
                ChatActivity chatActivity = ChatActivity.this;
                int i = ((BaseFragment) chatActivity).currentAccount;
                View view = ((BaseFragment) ChatActivity.this).fragmentView;
                long j = ChatActivity.this.dialog_id;
                ChatActivity chatActivity2 = ChatActivity.this;
                chatActivity.pullingDownDrawable = new ChatPullingDownDrawable(i, view, j, chatActivity2.dialogFolderId, chatActivity2.dialogFilterId, chatActivity2.themeDelegate);
                ChatActivity.this.pullingDownDrawable.onAttach();
            }
            ChatActivity.this.pullingDownDrawable.setWidth(getMeasuredWidth());
            ChatActivity.this.pullingDownDrawable.draw(canvas, ChatActivity.this.chatListView, Math.min(1.0f, ChatActivity.this.pullingDownOffset / AndroidUtilities.dp(110.0f)), 1.0f - ChatActivity.this.pullingDownAnimateProgress);
            canvas.restore();
            if (ChatActivity.this.pullingDownAnimateToActivity == null) {
                return;
            }
            canvas.saveLayerAlpha(0.0f, 0.0f, ChatActivity.this.pullingDownAnimateToActivity.chatListView.getMeasuredWidth(), ChatActivity.this.pullingDownAnimateToActivity.chatListView.getMeasuredHeight(), (int) (ChatActivity.this.pullingDownAnimateProgress * 255.0f), 31);
            canvas.translate(0.0f, (getMeasuredHeight() - ChatActivity.this.pullingDownOffset) - f);
            ChatActivity.this.pullingDownAnimateToActivity.chatListView.draw(canvas);
            canvas.restore();
        }

        @Override // org.telegram.ui.Components.RecyclerListView, android.view.ViewGroup, android.view.View
        public void dispatchDraw(Canvas canvas) {
            ChatActivity.this.drawLaterRoundProgressCell = null;
            this.invalidated = false;
            canvas.save();
            if (ChatActivity.this.fragmentTransition == null || (ChatActivity.this.fromPullingDownTransition && !ChatActivity.this.toPullingDownTransition)) {
                canvas.clipRect(0.0f, (ChatActivity.this.chatListViewPaddingTop - ChatActivity.this.chatListViewPaddingVisibleOffset) - AndroidUtilities.dp(4.0f), getMeasuredWidth(), getMeasuredHeight() - ChatActivity.this.blurredViewBottomOffset);
            }
            this.selectorRect.setEmpty();
            if (ChatActivity.this.pullingDownOffset != 0.0f) {
                canvas.save();
                float measuredHeight = ChatActivity.this.pullingDownAnimateProgress != 0.0f ? (ChatActivity.this.chatListView.getMeasuredHeight() - ChatActivity.this.pullingDownOffset) * ChatActivity.this.pullingDownAnimateProgress : 0.0f;
                ChatActivity chatActivity = ChatActivity.this;
                float f = (-chatActivity.pullingDownOffset) - measuredHeight;
                chatActivity.drawingChatLisViewYoffset = f;
                canvas.translate(0.0f, f);
                drawChatBackgroundElements(canvas);
                super.dispatchDraw(canvas);
                canvas.restore();
            } else {
                drawChatBackgroundElements(canvas);
                super.dispatchDraw(canvas);
            }
            canvas.restore();
        }

        /* JADX WARN: Code restructure failed: missing block: B:122:0x0360, code lost:
            if (r2.messages.size() != 1) goto L124;
         */
        /*
            Code decompiled incorrectly, please refer to instructions dump.
        */
        private void drawChatBackgroundElements(Canvas canvas) {
            float f;
            int i;
            int i2;
            boolean z;
            MessageObject.GroupedMessages currentMessagesGroup;
            MessageObject.GroupedMessages groupedMessages;
            ChatMessageCell chatMessageCell;
            boolean z2;
            int i3;
            Canvas canvas2 = canvas;
            int childCount = getChildCount();
            MessageObject.GroupedMessages groupedMessages2 = null;
            int i4 = 0;
            while (true) {
                f = 0.0f;
                i = 2;
                if (i4 >= childCount) {
                    break;
                }
                View childAt = getChildAt(i4);
                if (ChatActivity.this.chatAdapter.isBot && (childAt instanceof BotHelpCell)) {
                    float measuredHeight = ((((getMeasuredHeight() - ChatActivity.this.chatListViewPaddingTop) - ChatActivity.this.blurredViewBottomOffset) / 2.0f) - (childAt.getMeasuredHeight() / 2)) + ChatActivity.this.chatListViewPaddingTop;
                    if (!((BotHelpCell) childAt).animating() && !ChatActivity.this.chatListView.fastScrollAnimationRunning) {
                        if (childAt.getTop() > measuredHeight) {
                            childAt.setTranslationY(measuredHeight - childAt.getTop());
                        } else {
                            childAt.setTranslationY(0.0f);
                        }
                    }
                } else {
                    if (childAt instanceof ChatMessageCell) {
                        ChatMessageCell chatMessageCell2 = (ChatMessageCell) childAt;
                        MessageObject.GroupedMessages currentMessagesGroup2 = chatMessageCell2.getCurrentMessagesGroup();
                        if (currentMessagesGroup2 == null || currentMessagesGroup2 != groupedMessages2) {
                            MessageObject.GroupedMessagePosition currentPosition = chatMessageCell2.getCurrentPosition();
                            MessageBackgroundDrawable backgroundDrawable = chatMessageCell2.getBackgroundDrawable();
                            if ((backgroundDrawable.isAnimationInProgress() || chatMessageCell2.isDrawingSelectionBackground()) && (currentPosition == null || (currentPosition.flags & 2) != 0)) {
                                if (!chatMessageCell2.isHighlighted() && !chatMessageCell2.isHighlightedAnimated()) {
                                    int y = (int) chatMessageCell2.getY();
                                    canvas.save();
                                    if (currentPosition == null) {
                                        i3 = chatMessageCell2.getMeasuredHeight();
                                    } else {
                                        int measuredHeight2 = chatMessageCell2.getMeasuredHeight() + y;
                                        long j = 0;
                                        float f2 = 0.0f;
                                        for (int i5 = 0; i5 < childCount; i5++) {
                                            View childAt2 = getChildAt(i5);
                                            if (childAt2 instanceof ChatMessageCell) {
                                                ChatMessageCell chatMessageCell3 = (ChatMessageCell) childAt2;
                                                if (chatMessageCell3.getCurrentMessagesGroup() == currentMessagesGroup2) {
                                                    MessageBackgroundDrawable backgroundDrawable2 = chatMessageCell3.getBackgroundDrawable();
                                                    y = Math.min(y, (int) chatMessageCell3.getY());
                                                    measuredHeight2 = Math.max(measuredHeight2, ((int) chatMessageCell3.getY()) + chatMessageCell3.getMeasuredHeight());
                                                    long lastTouchTime = backgroundDrawable2.getLastTouchTime();
                                                    if (lastTouchTime > j) {
                                                        f = backgroundDrawable2.getTouchX() + chatMessageCell3.getX();
                                                        f2 = backgroundDrawable2.getTouchY() + chatMessageCell3.getY();
                                                        j = lastTouchTime;
                                                    }
                                                }
                                            }
                                        }
                                        backgroundDrawable.setTouchCoordsOverride(f, f2 - y);
                                        i3 = measuredHeight2 - y;
                                    }
                                    int i6 = i3 + y;
                                    canvas2.clipRect(0, y, getMeasuredWidth(), i6);
                                    Paint themedPaint = getThemedPaint("paintChatMessageBackgroundSelected");
                                    ThemeDelegate themeDelegate = ChatActivity.this.themeDelegate;
                                    if (themeDelegate != null && !themeDelegate.isDark && themedPaint != null) {
                                        backgroundDrawable.setCustomPaint(themedPaint);
                                        float top = (ChatActivity.this.isKeyboardVisible() ? ChatActivity.this.chatListView.getTop() : ((BaseFragment) ChatActivity.this).actionBar.getMeasuredHeight()) - ChatActivity.this.contentView.getBackgroundTranslationY();
                                        int backgroundSizeY = ChatActivity.this.contentView.getBackgroundSizeY();
                                        ThemeDelegate themeDelegate2 = ChatActivity.this.themeDelegate;
                                        if (themeDelegate2 != null) {
                                            themeDelegate2.applyServiceShaderMatrix(getMeasuredWidth(), backgroundSizeY, chatMessageCell2.getX(), top);
                                        } else {
                                            Theme.applyServiceShaderMatrix(getMeasuredWidth(), backgroundSizeY, chatMessageCell2.getX(), top);
                                        }
                                    } else {
                                        backgroundDrawable.setCustomPaint(null);
                                        backgroundDrawable.setColor(getThemedColor("chat_selectedBackground"));
                                    }
                                    backgroundDrawable.setBounds(0, y, getMeasuredWidth(), i6);
                                    backgroundDrawable.draw(canvas2);
                                    canvas.restore();
                                } else if (currentPosition == null) {
                                    Paint themedPaint2 = getThemedPaint("paintChatMessageBackgroundSelected");
                                    ThemeDelegate themeDelegate3 = ChatActivity.this.themeDelegate;
                                    if ((themeDelegate3 != null && themeDelegate3.isDark) || themedPaint2 == null) {
                                        themedPaint2 = Theme.chat_replyLinePaint;
                                        themedPaint2.setColor(getThemedColor("chat_selectedBackground"));
                                    } else {
                                        float top2 = (ChatActivity.this.isKeyboardVisible() ? ChatActivity.this.chatListView.getTop() : ((BaseFragment) ChatActivity.this).actionBar.getMeasuredHeight()) - ChatActivity.this.contentView.getBackgroundTranslationY();
                                        int backgroundSizeY2 = ChatActivity.this.contentView.getBackgroundSizeY();
                                        ThemeDelegate themeDelegate4 = ChatActivity.this.themeDelegate;
                                        if (themeDelegate4 != null) {
                                            themeDelegate4.applyServiceShaderMatrix(getMeasuredWidth(), backgroundSizeY2, chatMessageCell2.getX(), top2);
                                        } else {
                                            Theme.applyServiceShaderMatrix(getMeasuredWidth(), backgroundSizeY2, chatMessageCell2.getX(), top2);
                                        }
                                    }
                                    Paint paint = themedPaint2;
                                    canvas.save();
                                    canvas2.translate(0.0f, chatMessageCell2.getTranslationY());
                                    int alpha = paint.getAlpha();
                                    paint.setAlpha((int) (alpha * chatMessageCell2.getHighlightAlpha() * chatMessageCell2.getAlpha()));
                                    groupedMessages = currentMessagesGroup2;
                                    chatMessageCell = chatMessageCell2;
                                    canvas.drawRect(0.0f, chatMessageCell2.getTop(), getMeasuredWidth(), chatMessageCell2.getBottom(), paint);
                                    paint.setAlpha(alpha);
                                    canvas.restore();
                                    groupedMessages2 = groupedMessages;
                                }
                            }
                            groupedMessages = currentMessagesGroup2;
                            chatMessageCell = chatMessageCell2;
                            groupedMessages2 = groupedMessages;
                        } else {
                            groupedMessages = currentMessagesGroup2;
                            chatMessageCell = chatMessageCell2;
                        }
                        if (ChatActivity.this.scrimView != chatMessageCell && groupedMessages == null && chatMessageCell.drawBackgroundInParent()) {
                            canvas.save();
                            canvas2.translate(chatMessageCell.getX(), chatMessageCell.getY());
                            if (chatMessageCell.getScaleX() != 1.0f) {
                                z2 = true;
                                canvas2.scale(chatMessageCell.getScaleX(), chatMessageCell.getScaleY(), chatMessageCell.getPivotX(), chatMessageCell.getHeight() >> 1);
                            } else {
                                z2 = true;
                            }
                            chatMessageCell.drawBackgroundInternal(canvas2, z2);
                            canvas.restore();
                        }
                    } else if (childAt instanceof ChatActionCell) {
                        ChatActionCell chatActionCell = (ChatActionCell) childAt;
                        if (chatActionCell.hasGradientService()) {
                            canvas.save();
                            canvas2.translate(chatActionCell.getX(), chatActionCell.getY());
                            canvas2.scale(chatActionCell.getScaleX(), chatActionCell.getScaleY(), chatActionCell.getMeasuredWidth() / 2.0f, chatActionCell.getMeasuredHeight() / 2.0f);
                            chatActionCell.drawBackground(canvas2, true);
                            canvas.restore();
                        }
                    }
                    i4++;
                }
            }
            MessageObject.GroupedMessages currentMessagesGroup3 = ChatActivity.this.scrimView instanceof ChatMessageCell ? ((ChatMessageCell) ChatActivity.this.scrimView).getCurrentMessagesGroup() : null;
            int i7 = 0;
            while (i7 < 3) {
                this.drawingGroups.clear();
                if (i7 != i || ChatActivity.this.chatListView.isFastScrollAnimationRunning()) {
                    for (int i8 = 0; i8 < childCount; i8++) {
                        View childAt3 = ChatActivity.this.chatListView.getChildAt(i8);
                        if (childAt3 instanceof ChatMessageCell) {
                            ChatMessageCell chatMessageCell4 = (ChatMessageCell) childAt3;
                            if (childAt3.getY() <= ChatActivity.this.chatListView.getHeight() && childAt3.getY() + childAt3.getHeight() >= f && (currentMessagesGroup = chatMessageCell4.getCurrentMessagesGroup()) != null) {
                                int i9 = i7 == 0 ? 1 : 1;
                                if ((i7 != i9 || currentMessagesGroup.transitionParams.drawBackgroundForDeletedItems) && ((i7 != 0 || !chatMessageCell4.getMessageObject().deleted) && ((i7 != 1 || chatMessageCell4.getMessageObject().deleted) && ((i7 != i || chatMessageCell4.willRemovedAfterAnimation()) && (i7 == i || !chatMessageCell4.willRemovedAfterAnimation()))))) {
                                    if (!this.drawingGroups.contains(currentMessagesGroup)) {
                                        MessageObject.GroupedMessages.TransitionParams transitionParams = currentMessagesGroup.transitionParams;
                                        transitionParams.left = 0;
                                        transitionParams.top = 0;
                                        transitionParams.right = 0;
                                        transitionParams.bottom = 0;
                                        transitionParams.pinnedBotton = false;
                                        transitionParams.pinnedTop = false;
                                        transitionParams.cell = chatMessageCell4;
                                        this.drawingGroups.add(currentMessagesGroup);
                                    }
                                    currentMessagesGroup.transitionParams.pinnedTop = chatMessageCell4.isPinnedTop();
                                    currentMessagesGroup.transitionParams.pinnedBotton = chatMessageCell4.isPinnedBottom();
                                    int left = chatMessageCell4.getLeft() + chatMessageCell4.getBackgroundDrawableLeft();
                                    int left2 = chatMessageCell4.getLeft() + chatMessageCell4.getBackgroundDrawableRight();
                                    int top3 = chatMessageCell4.getTop() + chatMessageCell4.getBackgroundDrawableTop();
                                    int top4 = chatMessageCell4.getTop() + chatMessageCell4.getBackgroundDrawableBottom();
                                    if ((chatMessageCell4.getCurrentPosition().flags & 4) == 0) {
                                        top3 -= AndroidUtilities.dp(10.0f);
                                    }
                                    if ((chatMessageCell4.getCurrentPosition().flags & 8) == 0) {
                                        top4 += AndroidUtilities.dp(10.0f);
                                    }
                                    if (chatMessageCell4.willRemovedAfterAnimation()) {
                                        currentMessagesGroup.transitionParams.cell = chatMessageCell4;
                                    }
                                    MessageObject.GroupedMessages.TransitionParams transitionParams2 = currentMessagesGroup.transitionParams;
                                    int i10 = transitionParams2.top;
                                    if (i10 == 0 || top3 < i10) {
                                        transitionParams2.top = top3;
                                    }
                                    int i11 = transitionParams2.bottom;
                                    if (i11 == 0 || top4 > i11) {
                                        transitionParams2.bottom = top4;
                                    }
                                    int i12 = transitionParams2.left;
                                    if (i12 == 0 || left < i12) {
                                        transitionParams2.left = left;
                                    }
                                    int i13 = transitionParams2.right;
                                    if (i13 == 0 || left2 > i13) {
                                        transitionParams2.right = left2;
                                    }
                                }
                            }
                        }
                    }
                    int i14 = 0;
                    while (i14 < this.drawingGroups.size()) {
                        MessageObject.GroupedMessages groupedMessages3 = this.drawingGroups.get(i14);
                        if (groupedMessages3 == currentMessagesGroup3) {
                            i2 = i14;
                        } else {
                            float nonAnimationTranslationX = groupedMessages3.transitionParams.cell.getNonAnimationTranslationX(true);
                            MessageObject.GroupedMessages.TransitionParams transitionParams3 = groupedMessages3.transitionParams;
                            float f3 = transitionParams3.left + nonAnimationTranslationX + transitionParams3.offsetLeft;
                            float f4 = transitionParams3.top + transitionParams3.offsetTop;
                            float f5 = transitionParams3.right + nonAnimationTranslationX + transitionParams3.offsetRight;
                            float f6 = transitionParams3.bottom + transitionParams3.offsetBottom;
                            if (!transitionParams3.backgroundChangeBounds) {
                                f4 += transitionParams3.cell.getTranslationY();
                                f6 += groupedMessages3.transitionParams.cell.getTranslationY();
                            }
                            if (f4 < (ChatActivity.this.chatListViewPaddingTop - ChatActivity.this.chatListViewPaddingVisibleOffset) - AndroidUtilities.dp(20.0f)) {
                                f4 = (ChatActivity.this.chatListViewPaddingTop - ChatActivity.this.chatListViewPaddingVisibleOffset) - AndroidUtilities.dp(20.0f);
                            }
                            float f7 = f4;
                            if (f6 > ChatActivity.this.chatListView.getMeasuredHeight() + AndroidUtilities.dp(20.0f)) {
                                f6 = ChatActivity.this.chatListView.getMeasuredHeight() + AndroidUtilities.dp(20.0f);
                            }
                            float f8 = f6;
                            boolean z3 = (groupedMessages3.transitionParams.cell.getScaleX() == 1.0f && groupedMessages3.transitionParams.cell.getScaleY() == 1.0f) ? false : true;
                            if (z3) {
                                canvas.save();
                                canvas2.scale(groupedMessages3.transitionParams.cell.getScaleX(), groupedMessages3.transitionParams.cell.getScaleY(), ((f5 - f3) / 2.0f) + f3, f7 + ((f8 - f7) / 2.0f));
                            }
                            int size = groupedMessages3.messages.size();
                            int i15 = 0;
                            while (true) {
                                if (i15 >= size) {
                                    z = true;
                                    break;
                                }
                                MessageObject messageObject = groupedMessages3.messages.get(i15);
                                if (ChatActivity.this.selectedMessagesIds[messageObject.getDialogId() == ChatActivity.this.dialog_id ? (char) 0 : (char) 1].indexOfKey(messageObject.getId()) < 0) {
                                    z = false;
                                    break;
                                }
                                i15++;
                            }
                            MessageObject.GroupedMessages.TransitionParams transitionParams4 = groupedMessages3.transitionParams;
                            i2 = i14;
                            transitionParams4.cell.drawBackground(canvas, (int) f3, (int) f7, (int) f5, (int) f8, transitionParams4.pinnedTop, transitionParams4.pinnedBotton, z, ChatActivity.this.contentView.getKeyboardHeight());
                            MessageObject.GroupedMessages.TransitionParams transitionParams5 = groupedMessages3.transitionParams;
                            transitionParams5.cell = null;
                            transitionParams5.drawCaptionLayout = groupedMessages3.hasCaption;
                            if (z3) {
                                canvas.restore();
                                for (int i16 = 0; i16 < childCount; i16++) {
                                    View childAt4 = ChatActivity.this.chatListView.getChildAt(i16);
                                    if (childAt4 instanceof ChatMessageCell) {
                                        ChatMessageCell chatMessageCell5 = (ChatMessageCell) childAt4;
                                        if (chatMessageCell5.getCurrentMessagesGroup() == groupedMessages3) {
                                            int left3 = chatMessageCell5.getLeft();
                                            int top5 = chatMessageCell5.getTop();
                                            childAt4.setPivotX((f3 - left3) + ((f5 - f3) / 2.0f));
                                            childAt4.setPivotY((f7 - top5) + ((f8 - f7) / 2.0f));
                                        }
                                    }
                                }
                            }
                        }
                        i14 = i2 + 1;
                        canvas2 = canvas;
                    }
                }
                i7++;
                canvas2 = canvas;
                i = 2;
                f = 0.0f;
            }
        }

        /* JADX WARN: Removed duplicated region for block: B:140:0x0318  */
        /* JADX WARN: Removed duplicated region for block: B:142:0x0324  */
        /* JADX WARN: Removed duplicated region for block: B:34:0x0099  */
        /* JADX WARN: Removed duplicated region for block: B:36:0x00a0  */
        /* JADX WARN: Removed duplicated region for block: B:381:0x0808  */
        /* JADX WARN: Removed duplicated region for block: B:44:0x00c1  */
        @Override // androidx.recyclerview.widget.RecyclerView, android.view.ViewGroup
        /*
            Code decompiled incorrectly, please refer to instructions dump.
        */
        public boolean drawChild(Canvas canvas, View view, long j) {
            int i;
            int i2;
            ChatMessageCell chatMessageCell;
            boolean z;
            int i3;
            boolean z2;
            int i4;
            float f;
            boolean z3;
            int i5;
            ChatMessageCell chatMessageCell2;
            float f2;
            int i6;
            int i7;
            int i8;
            int i9;
            boolean z4;
            boolean z5;
            int i10;
            boolean z6;
            int i11;
            int i12;
            int i13;
            ChatMessageCell chatMessageCell3;
            boolean z7 = false;
            int i14 = 1;
            boolean z8 = view == ChatActivity.this.scrimView;
            float dp = (ChatActivity.this.chatListViewPaddingTop - ChatActivity.this.chatListViewPaddingVisibleOffset) - AndroidUtilities.dp(4.0f);
            if (view.getY() > getMeasuredHeight() || view.getY() + view.getMeasuredHeight() < dp) {
                z8 = true;
            }
            boolean z9 = view instanceof ChatMessageCell;
            MessageObject.GroupedMessages groupedMessages = null;
            if (z9) {
                ChatMessageCell chatMessageCell4 = (ChatMessageCell) view;
                if (ChatActivity.this.animateSendingViews.contains(chatMessageCell4)) {
                    z8 = true;
                }
                MessageObject.GroupedMessagePosition currentPosition = chatMessageCell4.getCurrentPosition();
                MessageObject.GroupedMessages currentMessagesGroup = chatMessageCell4.getCurrentMessagesGroup();
                if (currentPosition != null) {
                    int i15 = currentPosition.pw;
                    int i16 = currentPosition.spanSize;
                    if (i15 != i16 && i16 == 1000 && currentPosition.siblingHeights == null && currentMessagesGroup.hasSibling) {
                        i13 = chatMessageCell4.getBackgroundDrawableLeft();
                        i = 0;
                        if (chatMessageCell4.needDelayRoundProgressDraw()) {
                        }
                        if (!z8) {
                            chatMessageCell3 = (ChatMessageCell) ChatActivity.this.scrimView;
                            if (chatMessageCell3.getCurrentMessagesGroup() != null) {
                                z8 = true;
                            }
                        }
                        if (z8) {
                        }
                        int i17 = i13;
                        chatMessageCell = chatMessageCell4;
                        groupedMessages = currentMessagesGroup;
                        i2 = i17;
                    } else if (currentPosition.siblingHeights != null) {
                        i = view.getBottom() - AndroidUtilities.dp((chatMessageCell4.isPinnedBottom() ? 1 : 0) + 1);
                        i13 = 0;
                        if (chatMessageCell4.needDelayRoundProgressDraw()) {
                            ChatActivity.this.drawLaterRoundProgressCell = chatMessageCell4;
                        }
                        if (!z8 && (ChatActivity.this.scrimView instanceof ChatMessageCell)) {
                            chatMessageCell3 = (ChatMessageCell) ChatActivity.this.scrimView;
                            if (chatMessageCell3.getCurrentMessagesGroup() != null && chatMessageCell3.getCurrentMessagesGroup() == currentMessagesGroup) {
                                z8 = true;
                            }
                        }
                        if (z8) {
                            chatMessageCell4.getPhotoImage().skipDraw();
                        }
                        int i172 = i13;
                        chatMessageCell = chatMessageCell4;
                        groupedMessages = currentMessagesGroup;
                        i2 = i172;
                    }
                }
                i13 = 0;
                i = 0;
                if (chatMessageCell4.needDelayRoundProgressDraw()) {
                }
                if (!z8) {
                }
                if (z8) {
                }
                int i1722 = i13;
                chatMessageCell = chatMessageCell4;
                groupedMessages = currentMessagesGroup;
                i2 = i1722;
            } else {
                chatMessageCell = null;
                i2 = 0;
                i = 0;
            }
            if (i2 != 0) {
                canvas.save();
            } else if (i != 0) {
                canvas.save();
            }
            if (!z8) {
                boolean z10 = groupedMessages != null && groupedMessages.transitionParams.backgroundChangeBounds;
                if (z10) {
                    canvas.save();
                    float nonAnimationTranslationX = chatMessageCell.getNonAnimationTranslationX(true);
                    MessageObject.GroupedMessages.TransitionParams transitionParams = groupedMessages.transitionParams;
                    canvas.clipRect(transitionParams.left + nonAnimationTranslationX + transitionParams.offsetLeft + AndroidUtilities.dp(4.0f), transitionParams.top + transitionParams.offsetTop + AndroidUtilities.dp(4.0f), ((transitionParams.right + nonAnimationTranslationX) + transitionParams.offsetRight) - AndroidUtilities.dp(4.0f), (transitionParams.bottom + transitionParams.offsetBottom) - AndroidUtilities.dp(4.0f));
                }
                if (chatMessageCell != null && z10) {
                    z = super.drawChild(canvas, view, j);
                } else {
                    z = super.drawChild(canvas, view, j);
                }
                if (z10) {
                    canvas.restore();
                }
                if (chatMessageCell != null && chatMessageCell.hasOutboundsContent()) {
                    canvas.save();
                    canvas.translate(chatMessageCell.getX(), chatMessageCell.getY());
                    chatMessageCell.drawOutboundsContent(canvas);
                    canvas.restore();
                }
            } else {
                z = false;
            }
            if (i2 != 0 || i != 0) {
                canvas.restore();
            }
            if (view.getTranslationY() != 0.0f) {
                canvas.save();
                canvas.translate(0.0f, view.getTranslationY());
            }
            if (chatMessageCell != null) {
                chatMessageCell.drawCheckBox(canvas);
            }
            if (view.getTranslationY() != 0.0f) {
                canvas.restore();
            }
            int childCount = getChildCount();
            int i18 = 0;
            while (true) {
                if (i18 >= childCount) {
                    i18 = 0;
                    break;
                } else if (getChildAt(i18) == view) {
                    break;
                } else {
                    i18++;
                }
            }
            int i19 = childCount - 1;
            if (i18 == i19) {
                int size = this.drawTimeAfter.size();
                if (size > 0) {
                    for (int i20 = 0; i20 < size; i20++) {
                        chatMessageCell = this.drawTimeAfter.get(i20);
                        canvas.save();
                        canvas.translate(chatMessageCell.getLeft() + chatMessageCell.getNonAnimationTranslationX(false), chatMessageCell.getY());
                        chatMessageCell.drawTime(canvas, chatMessageCell.shouldDrawAlphaLayer() ? chatMessageCell.getAlpha() : 1.0f, true);
                        canvas.restore();
                    }
                    this.drawTimeAfter.clear();
                }
                int size2 = this.drawNamesAfter.size();
                if (size2 > 0) {
                    for (int i21 = 0; i21 < size2; i21++) {
                        chatMessageCell = this.drawNamesAfter.get(i21);
                        float left = chatMessageCell.getLeft() + chatMessageCell.getNonAnimationTranslationX(false);
                        float y = chatMessageCell.getY();
                        float alpha = chatMessageCell.shouldDrawAlphaLayer() ? chatMessageCell.getAlpha() : 1.0f;
                        canvas.save();
                        canvas.translate(left, y);
                        chatMessageCell.setInvalidatesParent(true);
                        chatMessageCell.drawNamesLayout(canvas, alpha);
                        chatMessageCell.setInvalidatesParent(false);
                        canvas.restore();
                    }
                    this.drawNamesAfter.clear();
                }
                int size3 = this.drawCaptionAfter.size();
                if (size3 > 0) {
                    int i22 = 0;
                    while (i22 < size3) {
                        chatMessageCell = this.drawCaptionAfter.get(i22);
                        boolean z11 = chatMessageCell.getCurrentPosition() != null && (chatMessageCell.getCurrentPosition().flags & i14) == 0;
                        float alpha2 = chatMessageCell.shouldDrawAlphaLayer() ? chatMessageCell.getAlpha() : 1.0f;
                        float left2 = chatMessageCell.getLeft() + chatMessageCell.getNonAnimationTranslationX(z7);
                        float y2 = chatMessageCell.getY();
                        canvas.save();
                        MessageObject.GroupedMessages currentMessagesGroup2 = chatMessageCell.getCurrentMessagesGroup();
                        if (currentMessagesGroup2 == null || !currentMessagesGroup2.transitionParams.backgroundChangeBounds) {
                            i12 = i19;
                            z6 = z;
                            i11 = size3;
                            i10 = i18;
                        } else {
                            float nonAnimationTranslationX2 = chatMessageCell.getNonAnimationTranslationX(true);
                            MessageObject.GroupedMessages.TransitionParams transitionParams2 = currentMessagesGroup2.transitionParams;
                            i11 = size3;
                            float f3 = transitionParams2.left + nonAnimationTranslationX2 + transitionParams2.offsetLeft;
                            z6 = z;
                            float f4 = transitionParams2.top + transitionParams2.offsetTop;
                            float f5 = transitionParams2.right + nonAnimationTranslationX2;
                            i12 = i19;
                            float f6 = f5 + transitionParams2.offsetRight;
                            i10 = i18;
                            float f7 = transitionParams2.bottom + transitionParams2.offsetBottom;
                            if (!transitionParams2.backgroundChangeBounds) {
                                f4 += chatMessageCell.getTranslationY();
                                f7 += chatMessageCell.getTranslationY();
                            }
                            canvas.clipRect(f3 + AndroidUtilities.dp(8.0f), f4 + AndroidUtilities.dp(8.0f), f6 - AndroidUtilities.dp(8.0f), f7 - AndroidUtilities.dp(8.0f));
                        }
                        if (chatMessageCell.getTransitionParams().wasDraw) {
                            canvas.translate(left2, y2);
                            chatMessageCell.setInvalidatesParent(true);
                            chatMessageCell.drawCaptionLayout(canvas, z11, alpha2);
                            chatMessageCell.setInvalidatesParent(false);
                            canvas.restore();
                        }
                        i22++;
                        i19 = i12;
                        size3 = i11;
                        z = z6;
                        i18 = i10;
                        z7 = false;
                        i14 = 1;
                    }
                    i4 = i19;
                    z2 = z;
                    i3 = i18;
                    this.drawCaptionAfter.clear();
                    if (view.getTranslationY() != 0.0f) {
                        canvas.save();
                        canvas.translate(0.0f, view.getTranslationY());
                    }
                    if (z9) {
                        ChatMessageCell chatMessageCell5 = (ChatMessageCell) view;
                        MessageObject.GroupedMessagePosition currentPosition2 = chatMessageCell5.getCurrentPosition();
                        if (currentPosition2 != null || chatMessageCell5.getTransitionParams().animateBackgroundBoundsInner) {
                            if (currentPosition2 == null || currentPosition2.last || (currentPosition2.minX == 0 && currentPosition2.minY == 0)) {
                                i9 = i4;
                                i8 = i3;
                                if (i8 == i9) {
                                    float alpha3 = chatMessageCell5.shouldDrawAlphaLayer() ? chatMessageCell5.getAlpha() : 1.0f;
                                    canvas.save();
                                    canvas.translate(chatMessageCell5.getLeft() + chatMessageCell5.getNonAnimationTranslationX(false), chatMessageCell5.getTop());
                                    chatMessageCell.setInvalidatesParent(true);
                                    if (currentPosition2 == null || currentPosition2.last) {
                                        chatMessageCell5.drawTime(canvas, alpha3, true);
                                    }
                                    if (currentPosition2 == null || (currentPosition2.minX == 0 && currentPosition2.minY == 0)) {
                                        chatMessageCell5.drawNamesLayout(canvas, alpha3);
                                    }
                                    chatMessageCell.setInvalidatesParent(false);
                                    canvas.restore();
                                } else {
                                    if (currentPosition2 == null || currentPosition2.last) {
                                        this.drawTimeAfter.add(chatMessageCell5);
                                    }
                                    if ((currentPosition2 == null || (currentPosition2.minX == 0 && currentPosition2.minY == 0)) && chatMessageCell5.hasNameLayout()) {
                                        this.drawNamesAfter.add(chatMessageCell5);
                                    }
                                }
                            } else {
                                i9 = i4;
                                i8 = i3;
                            }
                            if (currentPosition2 != null || chatMessageCell5.getTransitionParams().transformGroupToSingleMessage || chatMessageCell5.getTransitionParams().animateBackgroundBoundsInner) {
                                if (i8 == i9) {
                                    float alpha4 = chatMessageCell5.shouldDrawAlphaLayer() ? chatMessageCell5.getAlpha() : 1.0f;
                                    float left3 = chatMessageCell5.getLeft() + chatMessageCell5.getNonAnimationTranslationX(false);
                                    float top = chatMessageCell5.getTop();
                                    canvas.save();
                                    MessageObject.GroupedMessages currentMessagesGroup3 = chatMessageCell5.getCurrentMessagesGroup();
                                    if (currentMessagesGroup3 != null && currentMessagesGroup3.transitionParams.backgroundChangeBounds) {
                                        float nonAnimationTranslationX3 = chatMessageCell5.getNonAnimationTranslationX(true);
                                        MessageObject.GroupedMessages.TransitionParams transitionParams3 = currentMessagesGroup3.transitionParams;
                                        float f8 = transitionParams3.left + nonAnimationTranslationX3 + transitionParams3.offsetLeft;
                                        float f9 = transitionParams3.top + transitionParams3.offsetTop;
                                        float f10 = transitionParams3.right + nonAnimationTranslationX3 + transitionParams3.offsetRight;
                                        float f11 = transitionParams3.bottom + transitionParams3.offsetBottom;
                                        if (transitionParams3.backgroundChangeBounds) {
                                            f9 -= chatMessageCell5.getTranslationY();
                                            f11 -= chatMessageCell5.getTranslationY();
                                        }
                                        canvas.clipRect(f8 + AndroidUtilities.dp(8.0f), f9 + AndroidUtilities.dp(8.0f), f10 - AndroidUtilities.dp(8.0f), f11 - AndroidUtilities.dp(8.0f));
                                    }
                                    canvas.translate(left3, top);
                                    if (chatMessageCell5.getTransitionParams().wasDraw && (currentPosition2 == null || (currentPosition2.flags & 8) != 0)) {
                                        if (currentPosition2 != null) {
                                            z4 = true;
                                            if ((currentPosition2.flags & 1) == 0) {
                                                z5 = true;
                                                chatMessageCell5.setInvalidatesParent(z4);
                                                chatMessageCell5.drawCaptionLayout(canvas, z5, alpha4);
                                                chatMessageCell5.setInvalidatesParent(false);
                                            }
                                        } else {
                                            z4 = true;
                                        }
                                        z5 = false;
                                        chatMessageCell5.setInvalidatesParent(z4);
                                        chatMessageCell5.drawCaptionLayout(canvas, z5, alpha4);
                                        chatMessageCell5.setInvalidatesParent(false);
                                    }
                                    canvas.restore();
                                } else if (currentPosition2 == null || (currentPosition2.flags & 8) != 0) {
                                    this.drawCaptionAfter.add(chatMessageCell5);
                                }
                            }
                        }
                        MessageObject messageObject = chatMessageCell5.getMessageObject();
                        if (ChatActivity.this.videoPlayerContainer != null && ((messageObject.isRoundVideo() || messageObject.isVideo()) && MediaController.getInstance().isPlayingMessage(messageObject))) {
                            ImageReceiver photoImage = chatMessageCell5.getPhotoImage();
                            float imageX = photoImage.getImageX() + chatMessageCell5.getX();
                            float y3 = ((chatMessageCell5.getY() + photoImage.getImageY()) + ChatActivity.this.chatListView.getY()) - ChatActivity.this.videoPlayerContainer.getTop();
                            if (ChatActivity.this.videoPlayerContainer.getTranslationX() != imageX || ChatActivity.this.videoPlayerContainer.getTranslationY() != y3) {
                                ChatActivity.this.videoPlayerContainer.setTranslationX(imageX);
                                ChatActivity.this.videoPlayerContainer.setTranslationY(y3);
                                ((BaseFragment) ChatActivity.this).fragmentView.invalidate();
                                ChatActivity.this.videoPlayerContainer.invalidate();
                            }
                        }
                        ImageReceiver avatarImage = chatMessageCell5.getAvatarImage();
                        if (avatarImage != null) {
                            MessageObject.GroupedMessages validGroupedMessage = ChatActivity.this.getValidGroupedMessage(messageObject);
                            if (!chatMessageCell5.getMessageObject().deleted) {
                                boolean z12 = ChatActivity.this.chatListView.isFastScrollAnimationRunning() || (validGroupedMessage != null && validGroupedMessage.transitionParams.backgroundChangeBounds);
                                int top2 = z12 ? view.getTop() : (int) view.getY();
                                if (chatMessageCell5.drawPinnedBottom()) {
                                    if (chatMessageCell5.willRemovedAfterAnimation()) {
                                        i6 = ChatActivity.this.chatScrollHelper.positionToOldView.indexOfValue(view);
                                        if (i6 >= 0) {
                                            i6 = ChatActivity.this.chatScrollHelper.positionToOldView.keyAt(i6);
                                        }
                                    } else {
                                        i6 = ChatActivity.this.chatListView.getChildViewHolder(view).getAdapterPosition();
                                    }
                                    if (i6 >= 0) {
                                        if (validGroupedMessage == null || currentPosition2 == null) {
                                            i7 = i6 - 1;
                                        } else {
                                            int indexOf = validGroupedMessage.posArray.indexOf(currentPosition2);
                                            int size4 = validGroupedMessage.posArray.size();
                                            if ((currentPosition2.flags & 8) != 0) {
                                                i7 = (i6 - size4) + indexOf;
                                            } else {
                                                i7 = i6 - 1;
                                                for (int i23 = indexOf + 1; i23 < size4 && validGroupedMessage.posArray.get(i23).minY <= currentPosition2.maxY; i23++) {
                                                    i7--;
                                                }
                                            }
                                        }
                                        if (chatMessageCell5.willRemovedAfterAnimation()) {
                                            if (ChatActivity.this.chatScrollHelper.positionToOldView.get(i7) != null) {
                                                if (view.getTranslationY() != 0.0f) {
                                                    canvas.restore();
                                                }
                                                avatarImage.setVisible(false, false);
                                                return z2;
                                            }
                                        } else if (ChatActivity.this.chatListView.findViewHolderForAdapterPosition(i7) != null) {
                                            if (view.getTranslationY() != 0.0f) {
                                                canvas.restore();
                                            }
                                            avatarImage.setVisible(false, false);
                                            return z2;
                                        }
                                    }
                                }
                                float slidingOffsetX = chatMessageCell5.getSlidingOffsetX() + chatMessageCell5.getCheckBoxTranslation();
                                int top3 = (int) ((z12 ? view.getTop() : view.getY()) + chatMessageCell5.getLayoutHeight() + chatMessageCell5.getTransitionParams().deltaBottom);
                                int measuredHeight = ChatActivity.this.chatListView.getMeasuredHeight() - ChatActivity.this.chatListView.getPaddingBottom();
                                if (chatMessageCell5.isPlayingRound() || chatMessageCell5.getTransitionParams().animatePlayingRound) {
                                    if (chatMessageCell5.getTransitionParams().animatePlayingRound) {
                                        float f12 = chatMessageCell5.getTransitionParams().animateChangeProgress;
                                        if (!chatMessageCell5.isPlayingRound()) {
                                            f2 = 1.0f;
                                            f12 = 1.0f - f12;
                                        } else {
                                            f2 = 1.0f;
                                        }
                                        top3 = (int) ((top3 * f12) + (Math.min(top3, measuredHeight) * (f2 - f12)));
                                    }
                                } else if (top3 > measuredHeight) {
                                    top3 = measuredHeight;
                                }
                                if (!z12 && view.getTranslationY() != 0.0f) {
                                    canvas.restore();
                                }
                                if (chatMessageCell5.drawPinnedTop()) {
                                    if (chatMessageCell5.willRemovedAfterAnimation()) {
                                        i5 = ChatActivity.this.chatScrollHelper.positionToOldView.indexOfValue(view);
                                        if (i5 >= 0) {
                                            i5 = ChatActivity.this.chatScrollHelper.positionToOldView.keyAt(i5);
                                        }
                                    } else {
                                        i5 = ChatActivity.this.chatListView.getChildViewHolder(view).getAdapterPosition();
                                    }
                                    if (i5 >= 0) {
                                        int i24 = i5;
                                        ChatMessageCell chatMessageCell6 = chatMessageCell;
                                        int i25 = top2;
                                        int i26 = 0;
                                        while (i26 < 20) {
                                            i26++;
                                            if (validGroupedMessage == null || currentPosition2 == null) {
                                                i24++;
                                            } else {
                                                int indexOf2 = validGroupedMessage.posArray.indexOf(currentPosition2);
                                                if (indexOf2 < 0) {
                                                    break;
                                                }
                                                validGroupedMessage.posArray.size();
                                                if ((currentPosition2.flags & 4) != 0) {
                                                    i24 = i24 + indexOf2 + 1;
                                                } else {
                                                    i24++;
                                                    for (int i27 = indexOf2 - 1; i27 >= 0 && validGroupedMessage.posArray.get(i27).maxY >= currentPosition2.minY; i27--) {
                                                        i24++;
                                                    }
                                                }
                                            }
                                            if (chatMessageCell5.willRemovedAfterAnimation()) {
                                                View view2 = ChatActivity.this.chatScrollHelper.positionToOldView.get(i24);
                                                if (view2 == null) {
                                                    break;
                                                }
                                                i25 = view2.getTop();
                                                if (!(view2 instanceof ChatMessageCell)) {
                                                    break;
                                                }
                                                chatMessageCell2 = (ChatMessageCell) view2;
                                                if (!chatMessageCell2.drawPinnedTop()) {
                                                    top2 = i25;
                                                    chatMessageCell = chatMessageCell2;
                                                    break;
                                                }
                                                chatMessageCell6 = chatMessageCell2;
                                            } else {
                                                RecyclerView.ViewHolder findViewHolderForAdapterPosition = ChatActivity.this.chatListView.findViewHolderForAdapterPosition(i24);
                                                if (findViewHolderForAdapterPosition == null) {
                                                    break;
                                                }
                                                i25 = findViewHolderForAdapterPosition.itemView.getTop();
                                                View view3 = findViewHolderForAdapterPosition.itemView;
                                                if (!(view3 instanceof ChatMessageCell)) {
                                                    break;
                                                }
                                                chatMessageCell2 = (ChatMessageCell) view3;
                                                if (!chatMessageCell2.drawPinnedTop()) {
                                                    top2 = i25;
                                                    chatMessageCell = chatMessageCell2;
                                                    break;
                                                }
                                                chatMessageCell6 = chatMessageCell2;
                                            }
                                        }
                                        top2 = i25;
                                        chatMessageCell = chatMessageCell6;
                                    }
                                }
                                if (top3 - AndroidUtilities.dp(48.0f) < top2) {
                                    top3 = top2 + AndroidUtilities.dp(48.0f);
                                }
                                if (!chatMessageCell5.drawPinnedBottom()) {
                                    int bottom = z12 ? chatMessageCell5.getBottom() : (int) (chatMessageCell5.getY() + chatMessageCell5.getMeasuredHeight() + chatMessageCell5.getTransitionParams().deltaBottom);
                                    if (top3 > bottom) {
                                        top3 = bottom;
                                    }
                                }
                                canvas.save();
                                if (slidingOffsetX != 0.0f) {
                                    canvas.translate(slidingOffsetX, 0.0f);
                                }
                                if (chatMessageCell5.getCurrentMessagesGroup() != null && chatMessageCell5.getCurrentMessagesGroup().transitionParams.backgroundChangeBounds) {
                                    top3 = (int) (top3 - chatMessageCell5.getTranslationY());
                                }
                                avatarImage.setImageY(top3 - AndroidUtilities.dp(44.0f));
                                if (chatMessageCell.shouldDrawAlphaLayer()) {
                                    avatarImage.setAlpha(chatMessageCell.getAlpha());
                                    z3 = true;
                                    canvas.scale(chatMessageCell5.getScaleX(), chatMessageCell5.getScaleY(), chatMessageCell5.getX() + chatMessageCell5.getPivotX(), chatMessageCell5.getY() + (chatMessageCell5.getHeight() >> 1));
                                } else {
                                    z3 = true;
                                    avatarImage.setAlpha(1.0f);
                                }
                                avatarImage.setVisible(z3, false);
                                avatarImage.draw(canvas);
                                canvas.restore();
                                if (!z12) {
                                    f = 0.0f;
                                    if (view.getTranslationY() != 0.0f) {
                                        canvas.save();
                                    }
                                    if (view.getTranslationY() != f) {
                                        canvas.restore();
                                    }
                                    return z2;
                                }
                            } else {
                                if (view.getTranslationY() != 0.0f) {
                                    canvas.restore();
                                }
                                avatarImage.setVisible(false, false);
                                return z2;
                            }
                        }
                    }
                    f = 0.0f;
                    if (view.getTranslationY() != f) {
                    }
                    return z2;
                }
            }
            i4 = i19;
            z2 = z;
            i3 = i18;
            if (view.getTranslationY() != 0.0f) {
            }
            if (z9) {
            }
            f = 0.0f;
            if (view.getTranslationY() != f) {
            }
            return z2;
        }

        @Override // android.view.View
        public void onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo accessibilityNodeInfo) {
            AccessibilityNodeInfo.CollectionInfo collectionInfo;
            if (ChatActivity.this.currentEncryptedChat != null) {
                return;
            }
            super.onInitializeAccessibilityNodeInfo(accessibilityNodeInfo);
            if (Build.VERSION.SDK_INT < 19 || (collectionInfo = accessibilityNodeInfo.getCollectionInfo()) == null) {
                return;
            }
            accessibilityNodeInfo.setCollectionInfo(AccessibilityNodeInfo.CollectionInfo.obtain(collectionInfo.getRowCount(), 1, false));
        }

        @Override // android.view.View
        public AccessibilityNodeInfo createAccessibilityNodeInfo() {
            if (ChatActivity.this.currentEncryptedChat != null) {
                return null;
            }
            return super.createAccessibilityNodeInfo();
        }

        @Override // android.view.View
        public void invalidate() {
            if (!this.invalidated || ChatActivity.this.slidingView != null) {
                this.invalidated = true;
                super.invalidate();
                ChatActivity.this.contentView.invalidateBlur();
            }
        }
    }

    /* renamed from: org.telegram.ui.ChatActivity$15 */
    /* loaded from: classes3.dex */
    public class AnonymousClass15 extends ChatListItemAnimator {
        Runnable finishRunnable;

        /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
        AnonymousClass15(ChatActivity chatActivity, RecyclerListView recyclerListView, Theme.ResourcesProvider resourcesProvider) {
            super(chatActivity, recyclerListView, resourcesProvider);
            ChatActivity.this = r1;
        }

        @Override // androidx.recyclerview.widget.DefaultItemAnimator
        public void checkIsRunning() {
            if (ChatActivity.this.scrollAnimationIndex == -1) {
                ChatActivity chatActivity = ChatActivity.this;
                chatActivity.scrollAnimationIndex = chatActivity.getNotificationCenter().setAnimationInProgress(ChatActivity.this.scrollAnimationIndex, ChatActivity.allowedNotificationsDuringChatListAnimations, false);
            }
        }

        @Override // androidx.recyclerview.widget.ChatListItemAnimator
        public void onAnimationStart() {
            if (ChatActivity.this.scrollAnimationIndex == -1) {
                ChatActivity chatActivity = ChatActivity.this;
                chatActivity.scrollAnimationIndex = chatActivity.getNotificationCenter().setAnimationInProgress(ChatActivity.this.scrollAnimationIndex, ChatActivity.allowedNotificationsDuringChatListAnimations, false);
            }
            Runnable runnable = this.finishRunnable;
            if (runnable != null) {
                AndroidUtilities.cancelRunOnUIThread(runnable);
                this.finishRunnable = null;
            }
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("chatItemAnimator disable notifications");
            }
            ChatActivity.this.chatActivityEnterView.getAdjustPanLayoutHelper().runDelayedAnimation();
            ChatActivity.this.chatActivityEnterView.runEmojiPanelAnimation();
        }

        @Override // androidx.recyclerview.widget.ChatListItemAnimator, androidx.recyclerview.widget.DefaultItemAnimator
        public void onAllAnimationsDone() {
            super.onAllAnimationsDone();
            Runnable runnable = this.finishRunnable;
            if (runnable != null) {
                AndroidUtilities.cancelRunOnUIThread(runnable);
            }
            ChatActivity$15$$ExternalSyntheticLambda0 chatActivity$15$$ExternalSyntheticLambda0 = new ChatActivity$15$$ExternalSyntheticLambda0(this);
            this.finishRunnable = chatActivity$15$$ExternalSyntheticLambda0;
            AndroidUtilities.runOnUIThread(chatActivity$15$$ExternalSyntheticLambda0);
        }

        public /* synthetic */ void lambda$onAllAnimationsDone$0() {
            if (ChatActivity.this.scrollAnimationIndex != -1) {
                ChatActivity.this.getNotificationCenter().onAnimationFinish(ChatActivity.this.scrollAnimationIndex);
                ChatActivity.this.scrollAnimationIndex = -1;
            }
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("chatItemAnimator enable notifications");
            }
        }

        @Override // androidx.recyclerview.widget.ChatListItemAnimator, androidx.recyclerview.widget.DefaultItemAnimator, androidx.recyclerview.widget.RecyclerView.ItemAnimator
        public void endAnimations() {
            super.endAnimations();
            Runnable runnable = this.finishRunnable;
            if (runnable != null) {
                AndroidUtilities.cancelRunOnUIThread(runnable);
            }
            ChatActivity$15$$ExternalSyntheticLambda1 chatActivity$15$$ExternalSyntheticLambda1 = new ChatActivity$15$$ExternalSyntheticLambda1(this);
            this.finishRunnable = chatActivity$15$$ExternalSyntheticLambda1;
            AndroidUtilities.runOnUIThread(chatActivity$15$$ExternalSyntheticLambda1);
        }

        public /* synthetic */ void lambda$endAnimations$1() {
            if (ChatActivity.this.scrollAnimationIndex != -1) {
                ChatActivity.this.getNotificationCenter().onAnimationFinish(ChatActivity.this.scrollAnimationIndex);
                ChatActivity.this.scrollAnimationIndex = -1;
            }
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("chatItemAnimator enable notifications");
            }
        }
    }

    /* renamed from: org.telegram.ui.ChatActivity$16 */
    /* loaded from: classes3.dex */
    public class AnonymousClass16 extends GridLayoutManagerFixed {
        boolean computingScroll;

        @Override // androidx.recyclerview.widget.GridLayoutManager, androidx.recyclerview.widget.LinearLayoutManager, androidx.recyclerview.widget.RecyclerView.LayoutManager
        public boolean supportsPredictiveItemAnimations() {
            return true;
        }

        /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
        AnonymousClass16(Context context, int i, int i2, boolean z) {
            super(context, i, i2, z);
            ChatActivity.this = r1;
        }

        @Override // androidx.recyclerview.widget.LinearLayoutManager
        public int getStarForFixGap() {
            int i = (int) ChatActivity.this.chatListViewPaddingTop;
            return (!ChatActivity.this.isThreadChat() || ChatActivity.this.pinnedMessageView == null || ChatActivity.this.pinnedMessageView.getVisibility() != 0) ? i : (int) (i - Math.max(0.0f, AndroidUtilities.dp(48.0f) + ChatActivity.this.pinnedMessageEnterOffset));
        }

        @Override // androidx.recyclerview.widget.RecyclerView.LayoutManager
        protected int getParentStart() {
            if (this.computingScroll) {
                return (int) ChatActivity.this.chatListViewPaddingTop;
            }
            return 0;
        }

        @Override // androidx.recyclerview.widget.RecyclerView.LayoutManager
        public int getStartAfterPadding() {
            if (this.computingScroll) {
                return (int) ChatActivity.this.chatListViewPaddingTop;
            }
            return super.getStartAfterPadding();
        }

        @Override // androidx.recyclerview.widget.RecyclerView.LayoutManager
        public int getTotalSpace() {
            if (this.computingScroll) {
                return (int) ((getHeight() - ChatActivity.this.chatListViewPaddingTop) - getPaddingBottom());
            }
            return super.getTotalSpace();
        }

        @Override // androidx.recyclerview.widget.LinearLayoutManager, androidx.recyclerview.widget.RecyclerView.LayoutManager
        public int computeVerticalScrollExtent(RecyclerView.State state) {
            this.computingScroll = true;
            int computeVerticalScrollExtent = super.computeVerticalScrollExtent(state);
            this.computingScroll = false;
            return computeVerticalScrollExtent;
        }

        @Override // androidx.recyclerview.widget.GridLayoutManager, androidx.recyclerview.widget.LinearLayoutManager, androidx.recyclerview.widget.RecyclerView.LayoutManager
        public int computeVerticalScrollOffset(RecyclerView.State state) {
            this.computingScroll = true;
            int computeVerticalScrollOffset = super.computeVerticalScrollOffset(state);
            this.computingScroll = false;
            return computeVerticalScrollOffset;
        }

        @Override // androidx.recyclerview.widget.GridLayoutManager, androidx.recyclerview.widget.LinearLayoutManager, androidx.recyclerview.widget.RecyclerView.LayoutManager
        public int computeVerticalScrollRange(RecyclerView.State state) {
            this.computingScroll = true;
            int computeVerticalScrollRange = super.computeVerticalScrollRange(state);
            this.computingScroll = false;
            return computeVerticalScrollRange;
        }

        @Override // androidx.recyclerview.widget.LinearLayoutManager
        public void scrollToPositionWithOffset(int i, int i2, boolean z) {
            if (!z) {
                i2 = (int) ((i2 - getPaddingTop()) + ChatActivity.this.chatListViewPaddingTop);
            }
            super.scrollToPositionWithOffset(i, i2, z);
        }

        @Override // androidx.recyclerview.widget.LinearLayoutManager, androidx.recyclerview.widget.RecyclerView.LayoutManager
        public void smoothScrollToPosition(RecyclerView recyclerView, RecyclerView.State state, int i) {
            ChatActivity.this.scrollByTouch = false;
            LinearSmoothScrollerCustom linearSmoothScrollerCustom = new LinearSmoothScrollerCustom(recyclerView.getContext(), 0);
            linearSmoothScrollerCustom.setTargetPosition(i);
            startSmoothScroll(linearSmoothScrollerCustom);
        }

        @Override // androidx.recyclerview.widget.GridLayoutManagerFixed
        public boolean shouldLayoutChildFromOpositeSide(View view) {
            if (view instanceof ChatMessageCell) {
                return !((ChatMessageCell) view).getMessageObject().isOutOwner();
            }
            return false;
        }

        @Override // androidx.recyclerview.widget.GridLayoutManagerFixed
        protected boolean hasSiblingChild(int i) {
            int i2;
            byte b;
            if (i >= ChatActivity.this.chatAdapter.messagesStartRow && i < ChatActivity.this.chatAdapter.messagesEndRow && (i2 = i - ChatActivity.this.chatAdapter.messagesStartRow) >= 0 && i2 < ChatActivity.this.messages.size()) {
                MessageObject messageObject = ChatActivity.this.messages.get(i2);
                MessageObject.GroupedMessages validGroupedMessage = ChatActivity.this.getValidGroupedMessage(messageObject);
                if (validGroupedMessage != null) {
                    MessageObject.GroupedMessagePosition groupedMessagePosition = validGroupedMessage.positions.get(messageObject);
                    if (groupedMessagePosition.minX != groupedMessagePosition.maxX && (b = groupedMessagePosition.minY) == groupedMessagePosition.maxY && b != 0) {
                        int size = validGroupedMessage.posArray.size();
                        for (int i3 = 0; i3 < size; i3++) {
                            MessageObject.GroupedMessagePosition groupedMessagePosition2 = validGroupedMessage.posArray.get(i3);
                            if (groupedMessagePosition2 != groupedMessagePosition) {
                                byte b2 = groupedMessagePosition2.minY;
                                byte b3 = groupedMessagePosition.minY;
                                if (b2 <= b3 && groupedMessagePosition2.maxY >= b3) {
                                    return true;
                                }
                            }
                        }
                    }
                }
            }
            return false;
        }

        @Override // androidx.recyclerview.widget.GridLayoutManager, androidx.recyclerview.widget.LinearLayoutManager, androidx.recyclerview.widget.RecyclerView.LayoutManager
        public void onLayoutChildren(RecyclerView.Recycler recycler, RecyclerView.State state) {
            if (BuildVars.DEBUG_PRIVATE_VERSION) {
                super.onLayoutChildren(recycler, state);
                return;
            }
            try {
                super.onLayoutChildren(recycler, state);
            } catch (Exception e) {
                FileLog.e(e);
                AndroidUtilities.runOnUIThread(new ChatActivity$16$$ExternalSyntheticLambda0(this));
            }
        }

        public /* synthetic */ void lambda$onLayoutChildren$0() {
            ChatActivity.this.chatAdapter.notifyDataSetChanged(false);
        }

        @Override // androidx.recyclerview.widget.GridLayoutManager, androidx.recyclerview.widget.LinearLayoutManager, androidx.recyclerview.widget.RecyclerView.LayoutManager
        public int scrollVerticallyBy(int i, RecyclerView.Recycler recycler, RecyclerView.State state) {
            int i2;
            boolean z;
            float f;
            float f2;
            boolean z2 = false;
            if (i < 0 && ChatActivity.this.pullingDownOffset != 0.0f) {
                ChatActivity.access$12116(ChatActivity.this, i);
                if (ChatActivity.this.pullingDownOffset < 0.0f) {
                    i = (int) ChatActivity.this.pullingDownOffset;
                    ChatActivity.this.pullingDownOffset = 0.0f;
                    ChatActivity.this.chatListView.invalidate();
                } else {
                    i = 0;
                }
            }
            int childCount = ChatActivity.this.chatListView.getChildCount();
            int i3 = 0;
            while (true) {
                if (i3 >= childCount) {
                    i2 = 0;
                    z = false;
                    break;
                }
                View childAt = ChatActivity.this.chatListView.getChildAt(i3);
                float f3 = ChatActivity.this.chatListViewPaddingTop;
                if (ChatActivity.this.isThreadChat() && ChatActivity.this.pinnedMessageView != null && ChatActivity.this.pinnedMessageView.getVisibility() == 0) {
                    f3 -= Math.max(0.0f, AndroidUtilities.dp(48.0f) + ChatActivity.this.pinnedMessageEnterOffset);
                }
                if (ChatActivity.this.chatListView.getChildAdapterPosition(childAt) == ChatActivity.this.chatAdapter.getItemCount() - 1) {
                    i2 = super.scrollVerticallyBy(((float) (childAt.getTop() - i)) > f3 ? (int) (childAt.getTop() - f3) : i, recycler, state);
                    z = true;
                } else {
                    i3++;
                }
            }
            if (!z) {
                i2 = super.scrollVerticallyBy(i, recycler, state);
            }
            if (i > 0 && i2 == 0 && ChatObject.isChannel(ChatActivity.this.currentChat)) {
                ChatActivity chatActivity = ChatActivity.this;
                if (!chatActivity.currentChat.megagroup && chatActivity.chatListView.getScrollState() == 1 && !ChatActivity.this.chatListView.isFastScrollAnimationRunning() && !ChatActivity.this.chatListView.isMultiselect() && ChatActivity.this.reportType < 0) {
                    if (ChatActivity.this.pullingDownOffset == 0.0f && ChatActivity.this.pullingDownDrawable != null) {
                        ChatActivity.this.pullingDownDrawable.updateDialog();
                    }
                    if (ChatActivity.this.pullingDownBackAnimator != null) {
                        ChatActivity.this.pullingDownBackAnimator.removeAllListeners();
                        ChatActivity.this.pullingDownBackAnimator.cancel();
                    }
                    float f4 = 0.05f;
                    if (ChatActivity.this.pullingDownOffset < AndroidUtilities.dp(110.0f)) {
                        float dp = ChatActivity.this.pullingDownOffset / AndroidUtilities.dp(110.0f);
                        f = (1.0f - dp) * 0.65f;
                        f2 = dp * 0.45f;
                    } else {
                        if (ChatActivity.this.pullingDownOffset < AndroidUtilities.dp(160.0f)) {
                            float dp2 = (ChatActivity.this.pullingDownOffset - AndroidUtilities.dp(110.0f)) / AndroidUtilities.dp(50.0f);
                            f = (1.0f - dp2) * 0.45f;
                            f2 = dp2 * 0.05f;
                        }
                        float f5 = i * f4;
                        ChatActivity.access$12116(ChatActivity.this, f5);
                        ReactionsEffectOverlay.onScrolled((int) f5);
                        ChatActivity.this.chatListView.invalidate();
                    }
                    f4 = f + f2;
                    float f52 = i * f4;
                    ChatActivity.access$12116(ChatActivity.this, f52);
                    ReactionsEffectOverlay.onScrolled((int) f52);
                    ChatActivity.this.chatListView.invalidate();
                }
            }
            if (ChatActivity.this.pullingDownOffset == 0.0f) {
                ChatActivity.this.chatListView.setOverScrollMode(0);
            } else {
                ChatActivity.this.chatListView.setOverScrollMode(2);
            }
            if (ChatActivity.this.pullingDownDrawable != null) {
                ChatPullingDownDrawable chatPullingDownDrawable = ChatActivity.this.pullingDownDrawable;
                if (ChatActivity.this.pullingDownOffset > 0.0f && ChatActivity.this.chatListView.getScrollState() == 1) {
                    z2 = true;
                }
                chatPullingDownDrawable.showBottomPanel(z2);
            }
            return i2;
        }
    }

    /* renamed from: org.telegram.ui.ChatActivity$17 */
    /* loaded from: classes3.dex */
    class AnonymousClass17 extends GridLayoutManager.SpanSizeLookup {
        AnonymousClass17() {
            ChatActivity.this = r1;
        }

        @Override // androidx.recyclerview.widget.GridLayoutManager.SpanSizeLookup
        public int getSpanSize(int i) {
            int i2;
            if (i < ChatActivity.this.chatAdapter.messagesStartRow || i >= ChatActivity.this.chatAdapter.messagesEndRow || (i2 = i - ChatActivity.this.chatAdapter.messagesStartRow) < 0 || i2 >= ChatActivity.this.messages.size()) {
                return 1000;
            }
            MessageObject messageObject = ChatActivity.this.messages.get(i2);
            MessageObject.GroupedMessages validGroupedMessage = ChatActivity.this.getValidGroupedMessage(messageObject);
            if (validGroupedMessage == null) {
                return 1000;
            }
            return validGroupedMessage.positions.get(messageObject).spanSize;
        }
    }

    /* renamed from: org.telegram.ui.ChatActivity$18 */
    /* loaded from: classes3.dex */
    class AnonymousClass18 extends RecyclerView.ItemDecoration {
        AnonymousClass18(ChatActivity chatActivity) {
        }

        @Override // androidx.recyclerview.widget.RecyclerView.ItemDecoration
        public void getItemOffsets(Rect rect, View view, RecyclerView recyclerView, RecyclerView.State state) {
            ChatMessageCell chatMessageCell;
            MessageObject.GroupedMessages currentMessagesGroup;
            MessageObject.GroupedMessagePosition currentPosition;
            int i = 0;
            rect.bottom = 0;
            if (!(view instanceof ChatMessageCell) || (currentMessagesGroup = (chatMessageCell = (ChatMessageCell) view).getCurrentMessagesGroup()) == null || (currentPosition = chatMessageCell.getCurrentPosition()) == null || currentPosition.siblingHeights == null) {
                return;
            }
            Point point = AndroidUtilities.displaySize;
            float max = Math.max(point.x, point.y) * 0.5f;
            int extraInsetHeight = chatMessageCell.getExtraInsetHeight();
            int i2 = 0;
            while (true) {
                float[] fArr = currentPosition.siblingHeights;
                if (i2 >= fArr.length) {
                    break;
                }
                extraInsetHeight += (int) Math.ceil(fArr[i2] * max);
                i2++;
            }
            int round = extraInsetHeight + ((currentPosition.maxY - currentPosition.minY) * Math.round(AndroidUtilities.density * 7.0f));
            int size = currentMessagesGroup.posArray.size();
            while (true) {
                if (i < size) {
                    MessageObject.GroupedMessagePosition groupedMessagePosition = currentMessagesGroup.posArray.get(i);
                    byte b = groupedMessagePosition.minY;
                    byte b2 = currentPosition.minY;
                    if (b == b2 && ((groupedMessagePosition.minX != currentPosition.minX || groupedMessagePosition.maxX != currentPosition.maxX || b != b2 || groupedMessagePosition.maxY != currentPosition.maxY) && b == b2)) {
                        round -= ((int) Math.ceil(max * groupedMessagePosition.ph)) - AndroidUtilities.dp(4.0f);
                        break;
                    }
                    i++;
                } else {
                    break;
                }
            }
            rect.bottom = -round;
        }
    }

    /* renamed from: org.telegram.ui.ChatActivity$19 */
    /* loaded from: classes3.dex */
    class AnonymousClass19 extends RecyclerView.OnScrollListener {
        private boolean scrollUp;
        private float totalDy = 0.0f;
        private final int scrollValue = AndroidUtilities.dp(100.0f);

        AnonymousClass19() {
            ChatActivity.this = r1;
        }

        @Override // androidx.recyclerview.widget.RecyclerView.OnScrollListener
        public void onScrollStateChanged(RecyclerView recyclerView, int i) {
            if (i == 0) {
                if (ChatActivity.this.pollHintCell != null) {
                    ChatActivity.this.pollHintView.showForMessageCell(ChatActivity.this.pollHintCell, -1, ChatActivity.this.pollHintX, ChatActivity.this.pollHintY, true);
                    ChatActivity.this.pollHintCell = null;
                }
                ChatActivity.this.scrollingFloatingDate = false;
                ChatActivity.this.scrollingChatListView = false;
                ChatActivity.this.checkTextureViewPosition = false;
                ChatActivity.this.hideFloatingDateView(true);
                ChatActivity.this.checkAutoDownloadMessages(this.scrollUp);
                if (SharedConfig.getDevicePerformanceClass() == 0) {
                    NotificationCenter.getGlobalInstance().postNotificationName(NotificationCenter.startAllHeavyOperations, 512);
                }
                NotificationCenter.getGlobalInstance().postNotificationName(NotificationCenter.startSpoilers, new Object[0]);
                ChatActivity.this.chatListView.setOverScrollMode(0);
                ChatActivity.this.textSelectionHelper.stopScrolling();
                ChatActivity.this.updateVisibleRows();
                ChatActivity.this.scrollByTouch = false;
                return;
            }
            if (i == 2) {
                ChatActivity.this.wasManualScroll = true;
                ChatActivity.this.scrollingChatListView = true;
            } else if (i == 1) {
                ChatActivity.this.pollHintCell = null;
                ChatActivity.this.wasManualScroll = true;
                ChatActivity.this.scrollingFloatingDate = true;
                ChatActivity.this.checkTextureViewPosition = true;
                ChatActivity.this.scrollingChatListView = true;
            }
            if (SharedConfig.getDevicePerformanceClass() == 0) {
                NotificationCenter.getGlobalInstance().postNotificationName(NotificationCenter.stopAllHeavyOperations, 512);
            }
            NotificationCenter.getGlobalInstance().postNotificationName(NotificationCenter.stopSpoilers, new Object[0]);
        }

        @Override // androidx.recyclerview.widget.RecyclerView.OnScrollListener
        public void onScrolled(RecyclerView recyclerView, int i, int i2) {
            boolean z;
            ChatActivity.this.chatListView.invalidate();
            this.scrollUp = i2 < 0;
            int findFirstVisibleItemPosition = ChatActivity.this.chatLayoutManager.findFirstVisibleItemPosition();
            if (((i2 != 0 && ChatActivity.this.scrollByTouch && recyclerView.getScrollState() == 2) || recyclerView.getScrollState() == 1) && ChatActivity.this.forceNextPinnedMessageId != 0) {
                if (!this.scrollUp || ChatActivity.this.forceScrollToFirst) {
                    ChatActivity.this.forceNextPinnedMessageId = 0;
                } else if (!ChatActivity.this.chatListView.isFastScrollAnimationRunning() && findFirstVisibleItemPosition != -1) {
                    int findLastVisibleItemPosition = ChatActivity.this.chatLayoutManager.findLastVisibleItemPosition();
                    MessageObject messageObject = null;
                    while (true) {
                        if (findLastVisibleItemPosition < findFirstVisibleItemPosition) {
                            z = false;
                            break;
                        }
                        View findViewByPosition = ChatActivity.this.chatLayoutManager.findViewByPosition(findLastVisibleItemPosition);
                        if (findViewByPosition instanceof ChatMessageCell) {
                            messageObject = ((ChatMessageCell) findViewByPosition).getMessageObject();
                        } else if (findViewByPosition instanceof ChatActionCell) {
                            messageObject = ((ChatActionCell) findViewByPosition).getMessageObject();
                        }
                        if (messageObject != null && ChatActivity.this.forceNextPinnedMessageId == messageObject.getId()) {
                            z = true;
                            break;
                        }
                        findLastVisibleItemPosition--;
                    }
                    if (!z && messageObject != null && messageObject.getId() < ChatActivity.this.forceNextPinnedMessageId) {
                        ChatActivity.this.forceNextPinnedMessageId = 0;
                    }
                }
            }
            if (recyclerView.getScrollState() == 1) {
                ChatActivity.this.forceScrollToFirst = false;
                if (!ChatActivity.this.wasManualScroll && i2 != 0) {
                    ChatActivity.this.wasManualScroll = true;
                }
            }
            if (i2 != 0) {
                ChatActivity.this.hideHints(true);
            }
            if (i2 != 0 && ChatActivity.this.scrollingFloatingDate && !ChatActivity.this.currentFloatingTopIsNotMessage) {
                if (ChatActivity.this.highlightMessageId != Integer.MAX_VALUE) {
                    ChatActivity.this.removeSelectedMessageHighlight();
                    ChatActivity.this.updateVisibleRows();
                }
                ChatActivity.this.showFloatingDateView(true);
            }
            ChatActivity.this.checkScrollForLoad(true);
            if (findFirstVisibleItemPosition != -1) {
                ChatActivity.this.chatAdapter.getItemCount();
                if (findFirstVisibleItemPosition != 0 || !ChatActivity.this.forwardEndReached[0]) {
                    if (i2 > 0) {
                        if (ChatActivity.this.pagedownButton.getTag() == null) {
                            float f = this.totalDy + i2;
                            this.totalDy = f;
                            if (f > this.scrollValue) {
                                this.totalDy = 0.0f;
                                ChatActivity.this.canShowPagedownButton = true;
                                ChatActivity.this.updatePagedownButtonVisibility(true);
                                ChatActivity.this.pagedownButtonShowedByScroll = true;
                            }
                        }
                    } else if (ChatActivity.this.pagedownButtonShowedByScroll && ChatActivity.this.pagedownButton.getTag() != null) {
                        float f2 = this.totalDy + i2;
                        this.totalDy = f2;
                        if (f2 < (-this.scrollValue)) {
                            ChatActivity.this.canShowPagedownButton = false;
                            ChatActivity.this.updatePagedownButtonVisibility(true);
                            this.totalDy = 0.0f;
                        }
                    }
                } else if (i2 >= 0) {
                    ChatActivity.this.canShowPagedownButton = false;
                    ChatActivity.this.updatePagedownButtonVisibility(true);
                }
            }
            ChatActivity.this.invalidateMessagesVisiblePart();
            ChatActivity.this.textSelectionHelper.onParentScrolled();
            ChatActivity.this.emojiAnimationsOverlay.onScrolled(i2);
            ReactionsEffectOverlay.onScrolled(i2);
        }
    }

    /* renamed from: org.telegram.ui.ChatActivity$20 */
    /* loaded from: classes3.dex */
    class AnonymousClass20 extends ChatActionCell {
        /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
        AnonymousClass20(Context context, boolean z, ChatActionCell.ThemeDelegate themeDelegate) {
            super(context, z, themeDelegate);
            ChatActivity.this = r1;
        }

        @Override // android.view.View
        public void setTranslationY(float f) {
            if (getTranslationY() != f) {
                invalidate();
            }
            super.setTranslationY(f);
        }

        @Override // android.view.ViewGroup
        public boolean onInterceptTouchEvent(MotionEvent motionEvent) {
            if (getAlpha() == 0.0f || ((BaseFragment) ChatActivity.this).actionBar.isActionModeShowed() || ChatActivity.this.reportType >= 0) {
                return false;
            }
            return super.onInterceptTouchEvent(motionEvent);
        }

        @Override // org.telegram.ui.Cells.ChatActionCell, android.view.View
        public boolean onTouchEvent(MotionEvent motionEvent) {
            if (getAlpha() == 0.0f || ((BaseFragment) ChatActivity.this).actionBar.isActionModeShowed() || ChatActivity.this.reportType >= 0) {
                return false;
            }
            return super.onTouchEvent(motionEvent);
        }

        @Override // org.telegram.ui.Cells.ChatActionCell, android.view.View
        public void onDraw(Canvas canvas) {
            float y = ((ChatActivity.this.chatListView.getY() + ChatActivity.this.chatListViewPaddingTop) - getY()) - AndroidUtilities.dp(4.0f);
            if (y > 0.0f) {
                if (y >= getMeasuredHeight()) {
                    return;
                }
                canvas.save();
                canvas.clipRect(0.0f, y, getMeasuredWidth(), getMeasuredHeight());
                super.onDraw(canvas);
                canvas.restore();
                return;
            }
            super.onDraw(canvas);
        }
    }

    public /* synthetic */ void lambda$createView$27(View view) {
        if (this.floatingDateView.getAlpha() == 0.0f || this.actionBar.isActionModeShowed() || this.reportType >= 0) {
            return;
        }
        Calendar calendar = Calendar.getInstance();
        calendar.setTimeInMillis(this.floatingDateView.getCustomDate() * 1000);
        int i = calendar.get(1);
        int i2 = calendar.get(2);
        int i3 = calendar.get(5);
        calendar.clear();
        calendar.set(i, i2, i3);
        jumpToDate((int) (calendar.getTime().getTime() / 1000));
    }

    /* renamed from: org.telegram.ui.ChatActivity$21 */
    /* loaded from: classes3.dex */
    public class AnonymousClass21 extends BlurredFrameLayout {
        float lastY;
        float startY;

        /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
        AnonymousClass21(Context context, SizeNotifierFrameLayout sizeNotifierFrameLayout) {
            super(context, sizeNotifierFrameLayout);
            ChatActivity.this = r1;
            setOnLongClickListener(new ChatActivity$21$$ExternalSyntheticLambda0(this));
        }

        public /* synthetic */ boolean lambda$new$0(View view) {
            if (AndroidUtilities.isTablet() || ChatActivity.this.isThreadChat()) {
                return false;
            }
            this.startY = this.lastY;
            ChatActivity.this.openPinnedMessagesList(true);
            return true;
        }

        @Override // android.view.View
        public boolean onTouchEvent(MotionEvent motionEvent) {
            this.lastY = motionEvent.getY();
            if (motionEvent.getAction() == 1) {
                ChatActivity.this.finishPreviewFragment();
            } else if (motionEvent.getAction() == 2) {
                float f = this.startY - this.lastY;
                ChatActivity.this.movePreviewFragment(f);
                if (f < 0.0f) {
                    this.startY = this.lastY;
                }
            }
            return super.onTouchEvent(motionEvent);
        }

        @Override // android.widget.FrameLayout, android.view.View
        protected void onMeasure(int i, int i2) {
            super.onMeasure(i, i2);
            if (ChatActivity.this.setPinnedTextTranslationX) {
                for (int i3 = 0; i3 < ChatActivity.this.pinnedNextAnimation.length; i3++) {
                    if (ChatActivity.this.pinnedNextAnimation[i3] != null) {
                        ChatActivity.this.pinnedNextAnimation[i3].start();
                    }
                }
                ChatActivity.this.setPinnedTextTranslationX = false;
            }
        }

        @Override // android.view.ViewGroup
        protected boolean drawChild(Canvas canvas, View view, long j) {
            if (view == ChatActivity.this.pinnedLineView) {
                canvas.save();
                canvas.clipRect(0, 0, getMeasuredWidth(), AndroidUtilities.dp(48.0f));
            }
            if (view == ChatActivity.this.pinnedMessageTextView[0] || view == ChatActivity.this.pinnedMessageTextView[1]) {
                canvas.save();
                canvas.clipRect(0, 0, getMeasuredWidth() - AndroidUtilities.dp(38.0f), getMeasuredHeight());
                boolean drawChild = super.drawChild(canvas, view, j);
                canvas.restore();
                return drawChild;
            }
            boolean drawChild2 = super.drawChild(canvas, view, j);
            if (view != ChatActivity.this.pinnedLineView) {
                return drawChild2;
            }
            canvas.restore();
            return drawChild2;
        }
    }

    public /* synthetic */ void lambda$createView$28(View view) {
        int i;
        this.wasManualScroll = true;
        if (isThreadChat()) {
            scrollToMessageId(this.threadMessageId, 0, true, 0, true, 0);
            return;
        }
        int i2 = this.currentPinnedMessageId;
        if (i2 == 0) {
            return;
        }
        if (!this.pinnedMessageIds.isEmpty()) {
            ArrayList<Integer> arrayList = this.pinnedMessageIds;
            if (i2 == arrayList.get(arrayList.size() - 1).intValue()) {
                i = this.pinnedMessageIds.get(0).intValue() + 1;
                this.forceScrollToFirst = true;
            } else {
                i = i2 - 1;
                this.forceScrollToFirst = false;
            }
        } else {
            i = 0;
        }
        this.forceNextPinnedMessageId = i;
        scrollToMessageId(i2, 0, true, 0, true, !this.forceScrollToFirst ? -i : i);
        updateMessagesVisiblePart(false);
    }

    /* renamed from: org.telegram.ui.ChatActivity$22 */
    /* loaded from: classes3.dex */
    class AnonymousClass22 extends SimpleTextView {
        /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
        AnonymousClass22(Context context) {
            super(context);
            ChatActivity.this = r1;
        }

        @Override // android.view.View
        public void setTranslationY(float f) {
            super.setTranslationY(f);
            if (this != ChatActivity.this.pinnedMessageTextView[0] || ChatActivity.this.pinnedNextAnimation[1] == null) {
                return;
            }
            if (!ChatActivity.this.forceScrollToFirst || f >= 0.0f) {
                ChatActivity.this.pinnedLineView.setTranslationY(0.0f);
            } else {
                ChatActivity.this.pinnedLineView.setTranslationY(f / 2.0f);
            }
        }
    }

    public /* synthetic */ void lambda$createView$29(View view) {
        openPinnedMessagesList(false);
    }

    public /* synthetic */ void lambda$createView$31(View view) {
        boolean z;
        TLRPC$UserFull tLRPC$UserFull;
        if (getParentActivity() == null) {
            return;
        }
        TLRPC$Chat tLRPC$Chat = this.currentChat;
        if (tLRPC$Chat != null) {
            z = ChatObject.canPinMessages(tLRPC$Chat);
        } else {
            z = (this.currentEncryptedChat != null || (tLRPC$UserFull = this.userInfo) == null) ? false : tLRPC$UserFull.can_pin_message;
        }
        if (z) {
            AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity(), this.themeDelegate);
            builder.setTitle(LocaleController.getString("UnpinMessageAlertTitle", 2131628818));
            builder.setMessage(LocaleController.getString("UnpinMessageAlert", 2131628817));
            builder.setPositiveButton(LocaleController.getString("UnpinMessage", 2131628816), new ChatActivity$$ExternalSyntheticLambda25(this));
            builder.setNegativeButton(LocaleController.getString("Cancel", 2131624832), null);
            showDialog(builder.create());
        } else if (this.pinnedMessageIds.isEmpty()) {
        } else {
            SharedPreferences.Editor edit = MessagesController.getNotificationsSettings(this.currentAccount).edit();
            edit.putInt("pin_" + this.dialog_id, this.pinnedMessageIds.get(0).intValue()).commit();
            updatePinnedMessageView(true);
        }
    }

    public /* synthetic */ void lambda$createView$30(DialogInterface dialogInterface, int i) {
        MessageObject messageObject = this.pinnedMessageObjects.get(Integer.valueOf(this.currentPinnedMessageId));
        if (messageObject == null) {
            messageObject = this.messagesDict[0].get(this.currentPinnedMessageId);
        }
        unpinMessage(messageObject);
    }

    /* renamed from: org.telegram.ui.ChatActivity$23 */
    /* loaded from: classes3.dex */
    class AnonymousClass23 extends BlurredFrameLayout {
        private boolean ignoreLayout;

        /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
        AnonymousClass23(Context context, SizeNotifierFrameLayout sizeNotifierFrameLayout) {
            super(context, sizeNotifierFrameLayout);
            ChatActivity.this = r1;
        }

        @Override // android.widget.FrameLayout, android.view.View
        protected void onMeasure(int i, int i2) {
            int size = View.MeasureSpec.getSize(i);
            if (ChatActivity.this.addToContactsButton != null && ChatActivity.this.addToContactsButton.getVisibility() == 0 && ChatActivity.this.reportSpamButton != null && ChatActivity.this.reportSpamButton.getVisibility() == 0) {
                size = (size - AndroidUtilities.dp(31.0f)) / 2;
            }
            this.ignoreLayout = true;
            if (ChatActivity.this.reportSpamButton != null && ChatActivity.this.reportSpamButton.getVisibility() == 0) {
                FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) ChatActivity.this.reportSpamButton.getLayoutParams();
                layoutParams.width = size;
                if (ChatActivity.this.addToContactsButton == null || ChatActivity.this.addToContactsButton.getVisibility() != 0) {
                    ChatActivity.this.reportSpamButton.setPadding(AndroidUtilities.dp(48.0f), 0, AndroidUtilities.dp(48.0f), 0);
                    layoutParams.leftMargin = 0;
                } else {
                    ChatActivity.this.reportSpamButton.setPadding(AndroidUtilities.dp(4.0f), 0, AndroidUtilities.dp(4.0f), 0);
                    layoutParams.leftMargin = size;
                    layoutParams.width -= AndroidUtilities.dp(15.0f);
                }
            }
            if (ChatActivity.this.addToContactsButton != null && ChatActivity.this.addToContactsButton.getVisibility() == 0) {
                FrameLayout.LayoutParams layoutParams2 = (FrameLayout.LayoutParams) ChatActivity.this.addToContactsButton.getLayoutParams();
                layoutParams2.width = size;
                if (ChatActivity.this.reportSpamButton == null || ChatActivity.this.reportSpamButton.getVisibility() != 0) {
                    ChatActivity.this.addToContactsButton.setPadding(AndroidUtilities.dp(48.0f), 0, AndroidUtilities.dp(48.0f), 0);
                    layoutParams2.leftMargin = 0;
                } else {
                    ChatActivity.this.addToContactsButton.setPadding(AndroidUtilities.dp(11.0f), 0, AndroidUtilities.dp(4.0f), 0);
                }
            }
            this.ignoreLayout = false;
            super.onMeasure(i, i2);
        }

        @Override // android.view.View, android.view.ViewParent
        public void requestLayout() {
            if (this.ignoreLayout) {
                return;
            }
            super.requestLayout();
        }
    }

    public /* synthetic */ void lambda$createView$33(View view) {
        AlertsCreator.showBlockReportSpamAlert(this, this.dialog_id, this.currentUser, this.currentChat, this.currentEncryptedChat, this.reportSpamButton.getTag(2131230876) != null, this.chatInfo, new ChatActivity$$ExternalSyntheticLambda214(this), this.themeDelegate);
    }

    public /* synthetic */ void lambda$createView$32(int i) {
        if (i == 0) {
            updateTopPanel(true);
        } else {
            finishFragment();
        }
    }

    public /* synthetic */ void lambda$createView$36(Context context, View view) {
        if (this.addToContactsButtonArchive) {
            getMessagesController().addDialogToFolder(this.dialog_id, 0, 0, 0L);
            this.undoView.showWithAction(this.dialog_id, 23, (Runnable) null);
            SharedPreferences.Editor edit = MessagesController.getNotificationsSettings(this.currentAccount).edit();
            edit.putBoolean("dialog_bar_archived" + this.dialog_id, false);
            edit.putBoolean("dialog_bar_block" + this.dialog_id, false);
            edit.putBoolean("dialog_bar_report" + this.dialog_id, false);
            edit.commit();
            updateTopPanel(false);
            getNotificationsController().clearDialogNotificationsSettings(this.dialog_id);
        } else if (this.addToContactsButton.getTag() != null && ((Integer) this.addToContactsButton.getTag()).intValue() == 4) {
            TLRPC$ChatFull tLRPC$ChatFull = this.chatInfo;
            if (tLRPC$ChatFull == null || tLRPC$ChatFull.participants == null) {
                return;
            }
            LongSparseArray longSparseArray = new LongSparseArray();
            for (int i = 0; i < this.chatInfo.participants.participants.size(); i++) {
                longSparseArray.put(this.chatInfo.participants.participants.get(i).user_id, null);
            }
            long j = this.chatInfo.id;
            InviteMembersBottomSheet inviteMembersBottomSheet = new InviteMembersBottomSheet(context, this.currentAccount, longSparseArray, this.chatInfo.id, this, this.themeDelegate);
            inviteMembersBottomSheet.setDelegate(new ChatActivity$$ExternalSyntheticLambda256(this, j));
            inviteMembersBottomSheet.show();
        } else if (this.addToContactsButton.getTag() != null) {
            shareMyContact(1, null);
        } else {
            Bundle bundle = new Bundle();
            bundle.putLong("user_id", this.currentUser.id);
            bundle.putBoolean("addContact", true);
            ContactAddActivity contactAddActivity = new ContactAddActivity(bundle);
            contactAddActivity.setDelegate(new ChatActivity$$ExternalSyntheticLambda254(this));
            presentFragment(contactAddActivity);
        }
    }

    public /* synthetic */ void lambda$createView$34(long j, ArrayList arrayList, int i) {
        int size = arrayList.size();
        for (int i2 = 0; i2 < size; i2++) {
            getMessagesController().addUserToChat(j, (TLRPC$User) arrayList.get(i2), i, null, this, null);
        }
        getMessagesController().hidePeerSettingsBar(this.dialog_id, this.currentUser, this.currentChat);
        updateTopPanel(true);
        updateInfoTopView(true);
    }

    public /* synthetic */ void lambda$createView$35() {
        this.undoView.showWithAction(this.dialog_id, 8, this.currentUser);
    }

    public /* synthetic */ void lambda$createView$37(View view) {
        long j = this.dialog_id;
        if (this.currentEncryptedChat != null) {
            j = this.currentUser.id;
        }
        getMessagesController().hidePeerSettingsBar(j, this.currentUser, this.currentChat);
        updateTopPanel(true);
        updateInfoTopView(true);
    }

    public /* synthetic */ void lambda$createView$38(View view) {
        this.wasManualScroll = true;
        this.textSelectionHelper.cancelTextSelectionRunnable();
        int i = this.createUnreadMessageAfterId;
        if (i != 0) {
            scrollToMessageId(i, 0, false, this.returnToLoadIndex, true, 0);
            return;
        }
        int i2 = this.returnToMessageId;
        if (i2 > 0) {
            scrollToMessageId(i2, 0, true, this.returnToLoadIndex, true, 0);
            return;
        }
        scrollToLastMessage(false);
        if (this.pinnedMessageIds.isEmpty()) {
            return;
        }
        this.forceScrollToFirst = true;
        this.forceNextPinnedMessageId = this.pinnedMessageIds.get(0).intValue();
    }

    /* renamed from: org.telegram.ui.ChatActivity$24 */
    /* loaded from: classes3.dex */
    public class AnonymousClass24 implements View.OnClickListener {
        AnonymousClass24() {
            ChatActivity.this = r1;
        }

        private void loadLastUnreadMention() {
            ChatActivity.this.wasManualScroll = true;
            if (ChatActivity.this.hasAllMentionsLocal) {
                ChatActivity.this.getMessagesStorage().getUnreadMention(ChatActivity.this.dialog_id, new ChatActivity$24$$ExternalSyntheticLambda1(this));
                return;
            }
            MessagesStorage messagesStorage = ChatActivity.this.getMessagesStorage();
            TLRPC$TL_messages_getUnreadMentions tLRPC$TL_messages_getUnreadMentions = new TLRPC$TL_messages_getUnreadMentions();
            tLRPC$TL_messages_getUnreadMentions.peer = ChatActivity.this.getMessagesController().getInputPeer(ChatActivity.this.dialog_id);
            tLRPC$TL_messages_getUnreadMentions.limit = 1;
            tLRPC$TL_messages_getUnreadMentions.add_offset = ChatActivity.this.newMentionsCount - 1;
            ChatActivity.this.getConnectionsManager().sendRequest(tLRPC$TL_messages_getUnreadMentions, new ChatActivity$24$$ExternalSyntheticLambda2(this, messagesStorage));
        }

        public /* synthetic */ void lambda$loadLastUnreadMention$0(int i) {
            if (i == 0) {
                ChatActivity.this.hasAllMentionsLocal = false;
                loadLastUnreadMention();
                return;
            }
            ChatActivity.this.scrollToMessageId(i, 0, false, 0, true, 0);
        }

        public /* synthetic */ void lambda$loadLastUnreadMention$2(MessagesStorage messagesStorage, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
            AndroidUtilities.runOnUIThread(new ChatActivity$24$$ExternalSyntheticLambda0(this, tLObject, tLRPC$TL_error, messagesStorage));
        }

        public /* synthetic */ void lambda$loadLastUnreadMention$1(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error, MessagesStorage messagesStorage) {
            TLRPC$messages_Messages tLRPC$messages_Messages = (TLRPC$messages_Messages) tLObject;
            if (tLRPC$TL_error != null || tLRPC$messages_Messages.messages.isEmpty()) {
                if (tLRPC$messages_Messages != null) {
                    ChatActivity.this.newMentionsCount = tLRPC$messages_Messages.count;
                } else {
                    ChatActivity.this.newMentionsCount = 0;
                }
                messagesStorage.resetMentionsCount(ChatActivity.this.dialog_id, ChatActivity.this.newMentionsCount);
                if (ChatActivity.this.newMentionsCount == 0) {
                    ChatActivity.this.hasAllMentionsLocal = true;
                    ChatActivity.this.showMentionDownButton(false, true);
                    return;
                }
                ChatActivity.this.mentiondownButtonCounter.setText(String.format("%d", Integer.valueOf(ChatActivity.this.newMentionsCount)));
                loadLastUnreadMention();
                return;
            }
            int i = tLRPC$messages_Messages.messages.get(0).id;
            MessageObject messageObject = (MessageObject) ChatActivity.this.messagesDict[0].get(i);
            messagesStorage.markMessageAsMention(ChatActivity.this.dialog_id, i);
            if (messageObject != null) {
                TLRPC$Message tLRPC$Message = messageObject.messageOwner;
                tLRPC$Message.media_unread = true;
                tLRPC$Message.mentioned = true;
            }
            ChatActivity.this.scrollToMessageId(i, 0, false, 0, true, 0);
        }

        @Override // android.view.View.OnClickListener
        public void onClick(View view) {
            loadLastUnreadMention();
        }
    }

    public /* synthetic */ boolean lambda$createView$41(View view) {
        this.scrimPopupWindow = ReadAllMentionsMenu.show(1, getParentActivity(), this.contentView, view, getResourceProvider(), new ChatActivity$$ExternalSyntheticLambda156(this));
        dimBehindView((View) this.mentiondownButton, true);
        this.scrimPopupWindow.setOnDismissListener(new ChatActivity$$ExternalSyntheticLambda110(this));
        view.performHapticFeedback(0, 2);
        return true;
    }

    public /* synthetic */ void lambda$createView$39() {
        for (int i = 0; i < this.messages.size(); i++) {
            MessageObject messageObject = this.messages.get(i);
            if (messageObject.messageOwner.mentioned && !messageObject.isContentUnread()) {
                messageObject.setContentIsRead();
            }
        }
        this.newMentionsCount = 0;
        getMessagesController().markMentionsAsRead(this.dialog_id);
        this.hasAllMentionsLocal = true;
        showMentionDownButton(false, true);
        ActionBarPopupWindow actionBarPopupWindow = this.scrimPopupWindow;
        if (actionBarPopupWindow != null) {
            actionBarPopupWindow.dismiss();
        }
    }

    public /* synthetic */ void lambda$createView$40() {
        this.scrimPopupWindow = null;
        this.menuDeleteItem = null;
        this.scrimPopupWindowItems = null;
        this.chatLayoutManager.setCanScrollVertically(true);
        dimBehindView(false);
        ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        if (chatActivityEnterView != null) {
            chatActivityEnterView.getEditField().setAllowDrawCursor(true);
        }
    }

    /* renamed from: org.telegram.ui.ChatActivity$25 */
    /* loaded from: classes3.dex */
    class AnonymousClass25 extends MentionsContainerView {
        /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
        AnonymousClass25(Context context, long j, int i, ChatActivity chatActivity, Theme.ResourcesProvider resourcesProvider) {
            super(context, j, i, chatActivity, resourcesProvider);
            ChatActivity.this = r8;
        }

        @Override // org.telegram.ui.Components.MentionsContainerView
        protected boolean canOpen() {
            return ChatActivity.this.bottomOverlay.getVisibility() != 0 || ChatActivity.this.searchingForUser;
        }

        @Override // org.telegram.ui.Components.MentionsContainerView
        protected void onOpen() {
            if (ChatActivity.this.allowStickersPanel && ((!getAdapter().isBotContext() || ChatActivity.this.allowContextBotPanel || ChatActivity.this.allowContextBotPanelSecond) && ChatActivity.this.currentEncryptedChat != null && getAdapter().isBotContext())) {
                SharedPreferences globalMainSettings = MessagesController.getGlobalMainSettings();
                if (!globalMainSettings.getBoolean("secretbot", false)) {
                    AlertDialog.Builder builder = new AlertDialog.Builder(ChatActivity.this.getParentActivity(), ChatActivity.this.themeDelegate);
                    builder.setTitle(LocaleController.getString("AppName", 2131624384));
                    builder.setMessage(LocaleController.getString("SecretChatContextBotAlert", 2131628208));
                    builder.setPositiveButton(LocaleController.getString("OK", 2131627127), null);
                    ChatActivity.this.showDialog(builder.create());
                    globalMainSettings.edit().putBoolean("secretbot", true).commit();
                }
            }
            ChatActivity.this.updateMessageListAccessibilityVisibility();
        }

        @Override // org.telegram.ui.Components.MentionsContainerView
        protected void onClose() {
            ChatActivity.this.updateMessageListAccessibilityVisibility();
        }

        @Override // org.telegram.ui.Components.MentionsContainerView
        protected void onContextSearch(boolean z) {
            ChatActivityEnterView chatActivityEnterView = ChatActivity.this.chatActivityEnterView;
            if (chatActivityEnterView != null) {
                chatActivityEnterView.setCaption(getAdapter().getBotCaption());
                ChatActivity.this.chatActivityEnterView.showContextProgress(z);
            }
        }

        @Override // org.telegram.ui.Components.MentionsContainerView
        protected void onContextClick(TLRPC$BotInlineResult tLRPC$BotInlineResult) {
            if (ChatActivity.this.getParentActivity() == null || tLRPC$BotInlineResult.content == null) {
                return;
            }
            if (!tLRPC$BotInlineResult.type.equals("video") && !tLRPC$BotInlineResult.type.equals("web_player_video")) {
                ChatActivity.this.processExternalUrl(0, tLRPC$BotInlineResult.content.url, false);
                return;
            }
            int[] inlineResultWidthAndHeight = MessageObject.getInlineResultWidthAndHeight(tLRPC$BotInlineResult);
            Activity parentActivity = ChatActivity.this.getParentActivity();
            PhotoViewer.PhotoViewerProvider photoViewerProvider = ChatActivity.this.botContextProvider;
            String str = tLRPC$BotInlineResult.title;
            if (str == null) {
                str = "";
            }
            String str2 = tLRPC$BotInlineResult.description;
            String str3 = tLRPC$BotInlineResult.content.url;
            EmbedBottomSheet.show(parentActivity, null, photoViewerProvider, str, str2, str3, str3, inlineResultWidthAndHeight[0], inlineResultWidthAndHeight[1], ChatActivity.this.isKeyboardVisible());
        }
    }

    /* renamed from: org.telegram.ui.ChatActivity$26 */
    /* loaded from: classes3.dex */
    class AnonymousClass26 implements ContentPreviewViewer.ContentPreviewViewerDelegate {
        @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
        public /* synthetic */ boolean can() {
            return ContentPreviewViewer.ContentPreviewViewerDelegate.CC.$default$can(this);
        }

        @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
        public /* synthetic */ String getQuery(boolean z) {
            return ContentPreviewViewer.ContentPreviewViewerDelegate.CC.$default$getQuery(this, z);
        }

        @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
        public /* synthetic */ void gifAddedOrDeleted() {
            ContentPreviewViewer.ContentPreviewViewerDelegate.CC.$default$gifAddedOrDeleted(this);
        }

        @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
        public /* synthetic */ boolean needMenu() {
            return ContentPreviewViewer.ContentPreviewViewerDelegate.CC.$default$needMenu(this);
        }

        @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
        public /* synthetic */ boolean needOpen() {
            return ContentPreviewViewer.ContentPreviewViewerDelegate.CC.$default$needOpen(this);
        }

        @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
        public /* synthetic */ boolean needRemove() {
            return ContentPreviewViewer.ContentPreviewViewerDelegate.CC.$default$needRemove(this);
        }

        @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
        public boolean needSend() {
            return false;
        }

        @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
        public /* synthetic */ void remove(SendMessagesHelper.ImportingSticker importingSticker) {
            ContentPreviewViewer.ContentPreviewViewerDelegate.CC.$default$remove(this, importingSticker);
        }

        @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
        public /* synthetic */ void sendGif(Object obj, Object obj2, boolean z, int i) {
            ContentPreviewViewer.ContentPreviewViewerDelegate.CC.$default$sendGif(this, obj, obj2, z, i);
        }

        AnonymousClass26() {
            ChatActivity.this = r1;
        }

        @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
        public void sendSticker(TLRPC$Document tLRPC$Document, String str, Object obj, boolean z, int i) {
            ChatActivity.this.chatActivityEnterView.lambda$onStickerSelected$50(tLRPC$Document, str, obj, null, true, z, i);
        }

        @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
        public boolean canSchedule() {
            return ChatActivity.this.canScheduleMessage();
        }

        @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
        public boolean isInScheduleMode() {
            return ChatActivity.this.chatMode == 1;
        }

        @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
        public void openSet(TLRPC$InputStickerSet tLRPC$InputStickerSet, boolean z) {
            if (tLRPC$InputStickerSet == null || ChatActivity.this.getParentActivity() == null) {
                return;
            }
            TLRPC$TL_inputStickerSetID tLRPC$TL_inputStickerSetID = new TLRPC$TL_inputStickerSetID();
            tLRPC$TL_inputStickerSetID.access_hash = tLRPC$InputStickerSet.access_hash;
            tLRPC$TL_inputStickerSetID.id = tLRPC$InputStickerSet.id;
            Activity parentActivity = ChatActivity.this.getParentActivity();
            ChatActivity chatActivity = ChatActivity.this;
            StickersAlert stickersAlert = new StickersAlert(parentActivity, chatActivity, tLRPC$TL_inputStickerSetID, null, chatActivity.chatActivityEnterView, chatActivity.themeDelegate);
            stickersAlert.setCalcMandatoryInsets(ChatActivity.this.isKeyboardVisible());
            stickersAlert.setClearsInputField(z);
            ChatActivity.this.showDialog(stickersAlert);
        }

        @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
        public long getDialogId() {
            return ChatActivity.this.dialog_id;
        }
    }

    public /* synthetic */ boolean lambda$createView$42(ContentPreviewViewer.ContentPreviewViewerDelegate contentPreviewViewerDelegate, View view, MotionEvent motionEvent) {
        ContentPreviewViewer contentPreviewViewer = ContentPreviewViewer.getInstance();
        MentionsContainerView.MentionsListView listView = this.mentionContainer.getListView();
        RecyclerListView.OnItemClickListener onItemClickListener = this.mentionsOnItemClickListener;
        if (!this.mentionContainer.getAdapter().isStickers()) {
            contentPreviewViewerDelegate = null;
        }
        return contentPreviewViewer.onTouch(motionEvent, listView, 0, onItemClickListener, contentPreviewViewerDelegate, this.themeDelegate);
    }

    public /* synthetic */ void lambda$createView$46(View view, int i) {
        AnimatedEmojiSpan animatedEmojiSpan;
        char c;
        if (i == 0 || this.mentionContainer.getAdapter().isBannedInline()) {
            return;
        }
        int i2 = i - 1;
        Object item = this.mentionContainer.getAdapter().getItem(i2);
        int resultStartPosition = this.mentionContainer.getAdapter().getResultStartPosition();
        int resultLength = this.mentionContainer.getAdapter().getResultLength();
        MessageObject.SendAnimationData sendAnimationData = null;
        if (item instanceof TLRPC$TL_document) {
            if (this.chatMode == 0 && checkSlowMode(view)) {
                return;
            }
            if (view instanceof StickerCell) {
                sendAnimationData = ((StickerCell) view).getSendAnimationData();
            }
            MessageObject.SendAnimationData sendAnimationData2 = sendAnimationData;
            TLRPC$TL_document tLRPC$TL_document = (TLRPC$TL_document) item;
            Object itemParent = this.mentionContainer.getAdapter().getItemParent(i2);
            if (this.chatMode == 1) {
                AlertsCreator.createScheduleDatePickerDialog(getParentActivity(), this.dialog_id, new ChatActivity$$ExternalSyntheticLambda241(this, tLRPC$TL_document, this.stickersAdapter.getQuery(), itemParent), this.themeDelegate);
            } else {
                getSendMessagesHelper().sendSticker(tLRPC$TL_document, this.stickersAdapter.getQuery(), this.dialog_id, this.replyingMessageObject, getThreadMessage(), itemParent, sendAnimationData2, true, 0);
            }
            hideFieldPanel(false);
            this.chatActivityEnterView.addStickerToRecent(tLRPC$TL_document);
            this.chatActivityEnterView.setFieldText("");
        } else if (item instanceof TLRPC$Chat) {
            TLRPC$Chat tLRPC$Chat = (TLRPC$Chat) item;
            if (this.searchingForUser && this.searchContainer.getVisibility() == 0) {
                searchUserMessages(null, tLRPC$Chat);
            } else if (tLRPC$Chat.username == null) {
            } else {
                this.chatActivityEnterView.replaceWithText(resultStartPosition, resultLength, "@" + tLRPC$Chat.username + " ", false);
            }
        } else if (item instanceof TLRPC$User) {
            TLRPC$User tLRPC$User = (TLRPC$User) item;
            if (this.searchingForUser && this.searchContainer.getVisibility() == 0) {
                searchUserMessages(tLRPC$User, null);
            } else if (tLRPC$User.username != null) {
                this.chatActivityEnterView.replaceWithText(resultStartPosition, resultLength, "@" + tLRPC$User.username + " ", false);
            } else {
                SpannableString spannableString = new SpannableString(UserObject.getFirstName(tLRPC$User, false) + " ");
                spannableString.setSpan(new URLSpanUserMention("" + tLRPC$User.id, 3), 0, spannableString.length(), 33);
                this.chatActivityEnterView.replaceWithText(resultStartPosition, resultLength, spannableString, false);
            }
        } else if (item instanceof String) {
            if (this.mentionContainer.getAdapter().isBotCommands()) {
                if (this.chatMode == 1) {
                    AlertsCreator.createScheduleDatePickerDialog(getParentActivity(), this.dialog_id, new ChatActivity$$ExternalSyntheticLambda238(this, item), this.themeDelegate);
                    return;
                } else if (checkSlowMode(view)) {
                    return;
                } else {
                    getSendMessagesHelper().sendMessage((String) item, this.dialog_id, this.replyingMessageObject, getThreadMessage(), null, false, null, null, null, true, 0, null);
                    this.chatActivityEnterView.setFieldText("");
                    hideFieldPanel(false);
                    return;
                }
            }
            this.chatActivityEnterView.replaceWithText(resultStartPosition, resultLength, item + " ", false);
        } else if (item instanceof TLRPC$BotInlineResult) {
            if (this.chatActivityEnterView.getFieldText() == null) {
                return;
            }
            if (this.chatMode != 1 && checkSlowMode(view)) {
                return;
            }
            TLRPC$BotInlineResult tLRPC$BotInlineResult = (TLRPC$BotInlineResult) item;
            if (this.currentEncryptedChat != null) {
                if (!(tLRPC$BotInlineResult.send_message instanceof TLRPC$TL_botInlineMessageMediaAuto) || !"game".equals(tLRPC$BotInlineResult.type)) {
                    c = tLRPC$BotInlineResult.send_message instanceof TLRPC$TL_botInlineMessageMediaInvoice ? (char) 2 : (char) 0;
                } else {
                    c = 1;
                }
                if (c != 0) {
                    AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity(), this.themeDelegate);
                    builder.setTitle(LocaleController.getString("SendMessageTitle", 2131628265));
                    if (c == 1) {
                        builder.setMessage(LocaleController.getString("GameCantSendSecretChat", 2131626095));
                    } else {
                        builder.setMessage(LocaleController.getString("InvoiceCantSendSecretChat", 2131626341));
                    }
                    builder.setNegativeButton(LocaleController.getString("OK", 2131627127), null);
                    showDialog(builder.create());
                    return;
                }
            }
            if ((tLRPC$BotInlineResult.type.equals("photo") && (tLRPC$BotInlineResult.photo != null || tLRPC$BotInlineResult.content != null)) || ((tLRPC$BotInlineResult.type.equals("gif") && (tLRPC$BotInlineResult.document != null || tLRPC$BotInlineResult.content != null)) || (tLRPC$BotInlineResult.type.equals("video") && tLRPC$BotInlineResult.document != null))) {
                ArrayList<Object> arrayList = new ArrayList<>(this.mentionContainer.getAdapter().getSearchResultBotContext());
                this.botContextResults = arrayList;
                PhotoViewer.getInstance().setParentActivity(getParentActivity(), this.themeDelegate);
                PhotoViewer.getInstance().openPhotoForSelect(arrayList, this.mentionContainer.getAdapter().getItemPosition(i2), 3, false, this.botContextProvider, this);
            } else if (this.chatMode == 1) {
                AlertsCreator.createScheduleDatePickerDialog(getParentActivity(), this.dialog_id, new ChatActivity$$ExternalSyntheticLambda240(this, tLRPC$BotInlineResult), this.themeDelegate);
            } else {
                lambda$createView$45(tLRPC$BotInlineResult, true, 0);
            }
        } else if (item instanceof TLRPC$TL_inlineBotSwitchPM) {
            processInlineBotContextPM((TLRPC$TL_inlineBotSwitchPM) item);
        } else if (!(item instanceof MediaDataController.KeywordResult)) {
        } else {
            String str = ((MediaDataController.KeywordResult) item).emoji;
            this.chatActivityEnterView.addEmojiToRecent(str);
            if (str != null && str.startsWith("animated_")) {
                try {
                    long parseLong = Long.parseLong(str.substring(9));
                    TLRPC$Document findDocument = AnimatedEmojiDrawable.findDocument(this.currentAccount, parseLong);
                    SpannableString spannableString2 = new SpannableString(MessageObject.findAnimatedEmojiEmoticon(findDocument));
                    if (findDocument != null) {
                        animatedEmojiSpan = new AnimatedEmojiSpan(findDocument, this.chatActivityEnterView.getEditField().getPaint().getFontMetricsInt());
                    } else {
                        animatedEmojiSpan = new AnimatedEmojiSpan(parseLong, this.chatActivityEnterView.getEditField().getPaint().getFontMetricsInt());
                    }
                    spannableString2.setSpan(animatedEmojiSpan, 0, spannableString2.length(), 33);
                    this.chatActivityEnterView.replaceWithText(resultStartPosition, resultLength, spannableString2, false);
                } catch (Exception unused) {
                    this.chatActivityEnterView.replaceWithText(resultStartPosition, resultLength, str, true);
                }
            } else {
                this.chatActivityEnterView.replaceWithText(resultStartPosition, resultLength, str, true);
            }
            this.mentionContainer.updateVisibility(false);
        }
    }

    public /* synthetic */ void lambda$createView$43(TLRPC$TL_document tLRPC$TL_document, String str, Object obj, boolean z, int i) {
        SendMessagesHelper.getInstance(this.currentAccount).sendSticker(tLRPC$TL_document, str, this.dialog_id, this.replyingMessageObject, getThreadMessage(), obj, null, z, i);
    }

    public /* synthetic */ void lambda$createView$44(Object obj, boolean z, int i) {
        getSendMessagesHelper().sendMessage((String) obj, this.dialog_id, this.replyingMessageObject, getThreadMessage(), null, false, null, null, null, z, i, null);
        this.chatActivityEnterView.setFieldText("");
        hideFieldPanel(false);
    }

    public /* synthetic */ boolean lambda$createView$48(View view, int i) {
        boolean z = false;
        if (getParentActivity() != null && this.mentionContainer.getAdapter().isLongClickEnabled()) {
            Object item = this.mentionContainer.getAdapter().getItem(i);
            if (item instanceof String) {
                if (this.mentionContainer.getAdapter().isBotCommands()) {
                    if (!URLSpanBotCommand.enabled) {
                        return false;
                    }
                    this.chatActivityEnterView.setFieldText("");
                    ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
                    String str = (String) item;
                    TLRPC$Chat tLRPC$Chat = this.currentChat;
                    if (tLRPC$Chat != null && tLRPC$Chat.megagroup) {
                        z = true;
                    }
                    chatActivityEnterView.setCommand(null, str, true, z);
                    return true;
                }
                AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity(), this.themeDelegate);
                builder.setTitle(LocaleController.getString("AppName", 2131624384));
                builder.setMessage(LocaleController.getString("ClearSearch", 2131625169));
                builder.setPositiveButton(LocaleController.getString("ClearButton", 2131625146).toUpperCase(), new ChatActivity$$ExternalSyntheticLambda30(this));
                builder.setNegativeButton(LocaleController.getString("Cancel", 2131624832), null);
                showDialog(builder.create());
                return true;
            }
        }
        return false;
    }

    public /* synthetic */ void lambda$createView$47(DialogInterface dialogInterface, int i) {
        this.mentionContainer.getAdapter().clearRecentHashtags();
    }

    /* renamed from: org.telegram.ui.ChatActivity$27 */
    /* loaded from: classes3.dex */
    class AnonymousClass27 extends ViewOutlineProvider {
        AnonymousClass27(ChatActivity chatActivity) {
        }

        @Override // android.view.ViewOutlineProvider
        public void getOutline(View view, Outline outline) {
            outline.setOval(0, 0, AndroidUtilities.dp(42.0f), AndroidUtilities.dp(42.0f));
        }
    }

    /* renamed from: org.telegram.ui.ChatActivity$28 */
    /* loaded from: classes3.dex */
    class AnonymousClass28 extends CounterView {
        /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
        AnonymousClass28(Context context, Theme.ResourcesProvider resourcesProvider) {
            super(context, resourcesProvider);
            ChatActivity.this = r1;
        }

        @Override // android.view.View
        public void invalidate() {
            if (isInOutAnimation()) {
                ChatActivity.this.contentView.invalidate();
            }
            super.invalidate();
        }
    }

    /* renamed from: org.telegram.ui.ChatActivity$29 */
    /* loaded from: classes3.dex */
    class AnonymousClass29 extends ViewOutlineProvider {
        AnonymousClass29(ChatActivity chatActivity) {
        }

        @Override // android.view.ViewOutlineProvider
        public void getOutline(View view, Outline outline) {
            outline.setOval(0, 0, AndroidUtilities.dp(42.0f), AndroidUtilities.dp(42.0f));
        }
    }

    public /* synthetic */ void lambda$createView$50(View view) {
        this.wasManualScroll = true;
        getMessagesController().getNextReactionMention(this.dialog_id, this.reactionsMentionCount, new ChatActivity$$ExternalSyntheticLambda113(this));
    }

    public /* synthetic */ void lambda$createView$49(Integer num) {
        if (num.intValue() == 0) {
            this.reactionsMentionCount = 0;
            updateReactionsMentionButton(true);
            getMessagesController().markReactionsAsRead(this.dialog_id);
            return;
        }
        updateReactionsMentionButton(true);
        scrollToMessageId(num.intValue(), 0, false, 0, true, 0);
    }

    public /* synthetic */ boolean lambda$createView$53(View view) {
        this.scrimPopupWindow = ReadAllMentionsMenu.show(0, getParentActivity(), this.contentView, view, getResourceProvider(), new ChatActivity$$ExternalSyntheticLambda119(this));
        dimBehindView((View) this.reactionsMentiondownButton, true);
        this.scrimPopupWindow.setOnDismissListener(new ChatActivity$$ExternalSyntheticLambda111(this));
        view.performHapticFeedback(0, 2);
        return false;
    }

    public /* synthetic */ void lambda$createView$51() {
        for (int i = 0; i < this.messages.size(); i++) {
            this.messages.get(i).markReactionsAsRead();
        }
        this.reactionsMentionCount = 0;
        updateReactionsMentionButton(true);
        getMessagesController().markReactionsAsRead(this.dialog_id);
        ActionBarPopupWindow actionBarPopupWindow = this.scrimPopupWindow;
        if (actionBarPopupWindow != null) {
            actionBarPopupWindow.dismiss();
        }
    }

    public /* synthetic */ void lambda$createView$52() {
        this.scrimPopupWindow = null;
        this.menuDeleteItem = null;
        this.scrimPopupWindowItems = null;
        this.chatLayoutManager.setCanScrollVertically(true);
        dimBehindView(false);
        ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        if (chatActivityEnterView != null) {
            chatActivityEnterView.getEditField().setAllowDrawCursor(true);
        }
    }

    /* renamed from: org.telegram.ui.ChatActivity$30 */
    /* loaded from: classes3.dex */
    class AnonymousClass30 extends ViewOutlineProvider {
        AnonymousClass30(ChatActivity chatActivity) {
        }

        @Override // android.view.ViewOutlineProvider
        public void getOutline(View view, Outline outline) {
            outline.setOval(0, 0, AndroidUtilities.dp(42.0f), AndroidUtilities.dp(42.0f));
        }
    }

    /* renamed from: org.telegram.ui.ChatActivity$31 */
    /* loaded from: classes3.dex */
    class AnonymousClass31 extends FragmentContextView {
        /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
        AnonymousClass31(Context context, BaseFragment baseFragment, boolean z, Theme.ResourcesProvider resourcesProvider) {
            super(context, baseFragment, z, resourcesProvider);
            ChatActivity.this = r1;
        }

        @Override // org.telegram.ui.Components.FragmentContextView
        protected void playbackSpeedChanged(float f) {
            float f2 = f - 1.0f;
            if (Math.abs(f2) < 0.001f || Math.abs(f - 1.8f) < 0.001f) {
                ChatActivity.this.undoView.showWithAction(0L, Math.abs(f2) > 0.001f ? 50 : 51, Float.valueOf(f), null, null);
            }
        }
    }

    public /* synthetic */ void lambda$createView$54(View view, int i) {
        getMediaDataController().jumpToSearchedMessage(this.classGuid, i);
        showMessagesSearchListView(false);
    }

    /* renamed from: org.telegram.ui.ChatActivity$32 */
    /* loaded from: classes3.dex */
    class AnonymousClass32 extends RecyclerView.OnScrollListener {
        final /* synthetic */ LinearLayoutManager val$messagesSearchLayoutManager;

        AnonymousClass32(LinearLayoutManager linearLayoutManager) {
            ChatActivity.this = r1;
            this.val$messagesSearchLayoutManager = linearLayoutManager;
        }

        @Override // androidx.recyclerview.widget.RecyclerView.OnScrollListener
        public void onScrolled(RecyclerView recyclerView, int i, int i2) {
            int findLastVisibleItemPosition = this.val$messagesSearchLayoutManager.findLastVisibleItemPosition();
            if ((findLastVisibleItemPosition == -1 ? 0 : findLastVisibleItemPosition) <= 0 || findLastVisibleItemPosition <= this.val$messagesSearchLayoutManager.getItemCount() - 5) {
                return;
            }
            ChatActivity.this.getMediaDataController().loadMoreSearchMessages();
        }
    }

    /* renamed from: org.telegram.ui.ChatActivity$33 */
    /* loaded from: classes3.dex */
    class AnonymousClass33 extends UndoView {
        /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
        AnonymousClass33(Context context, BaseFragment baseFragment, boolean z, Theme.ResourcesProvider resourcesProvider) {
            super(context, baseFragment, z, resourcesProvider);
            ChatActivity.this = r1;
        }

        @Override // org.telegram.ui.Components.UndoView
        public void didPressUrl(CharacterStyle characterStyle) {
            ChatActivity.this.didPressMessageUrl(characterStyle, false, null, null);
        }

        @Override // org.telegram.ui.Components.UndoView
        public void showWithAction(long j, int i, Object obj, Object obj2, Runnable runnable, Runnable runnable2) {
            setAdditionalTranslationY((ChatActivity.this.fragmentContextView == null || !ChatActivity.this.fragmentContextView.isCallTypeVisible()) ? 0.0f : AndroidUtilities.dp(ChatActivity.this.fragmentContextView.getStyleHeight()));
            super.showWithAction(j, i, obj, obj2, runnable, runnable2);
        }
    }

    public /* synthetic */ boolean lambda$createView$55(View view, MotionEvent motionEvent) {
        if (motionEvent.getAction() == 0) {
            checkRecordLocked(false);
        }
        this.overlayView.getParent().requestDisallowInterceptTouchEvent(true);
        return true;
    }

    /* renamed from: org.telegram.ui.ChatActivity$34 */
    /* loaded from: classes3.dex */
    class AnonymousClass34 extends BlurredFrameLayout {
        /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
        AnonymousClass34(Context context, SizeNotifierFrameLayout sizeNotifierFrameLayout) {
            super(context, sizeNotifierFrameLayout);
            ChatActivity.this = r1;
        }

        @Override // android.view.View
        public void onDraw(Canvas canvas) {
            int intrinsicHeight = Theme.chat_composeShadowDrawable.getIntrinsicHeight();
            Theme.chat_composeShadowDrawable.setBounds(0, 0, getMeasuredWidth(), intrinsicHeight);
            Theme.chat_composeShadowDrawable.draw(canvas);
            Rect rect = AndroidUtilities.rectTmp2;
            rect.set(0, intrinsicHeight, getMeasuredWidth(), getMeasuredHeight());
            ChatActivity.this.contentView.drawBlurRect(canvas, getY(), rect, ChatActivity.this.getThemedPaint("paintChatComposeBackground"), false);
        }
    }

    /* renamed from: org.telegram.ui.ChatActivity$35 */
    /* loaded from: classes3.dex */
    public class AnonymousClass35 extends ChatActivityEnterView {
        int lastContentViewHeight;
        int messageEditTextPredrawHeigth;
        int messageEditTextPredrawScrollY;

        /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
        AnonymousClass35(Activity activity, SizeNotifierFrameLayout sizeNotifierFrameLayout, ChatActivity chatActivity, boolean z, Theme.ResourcesProvider resourcesProvider) {
            super(activity, sizeNotifierFrameLayout, chatActivity, z, resourcesProvider);
            ChatActivity.this = r7;
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView, android.view.ViewGroup
        public boolean onInterceptTouchEvent(MotionEvent motionEvent) {
            if (getAlpha() != 1.0f) {
                return false;
            }
            return super.onInterceptTouchEvent(motionEvent);
        }

        @Override // android.view.View
        public boolean onTouchEvent(MotionEvent motionEvent) {
            if (getAlpha() != 1.0f) {
                return false;
            }
            return super.onTouchEvent(motionEvent);
        }

        @Override // android.view.ViewGroup, android.view.View
        public boolean dispatchTouchEvent(MotionEvent motionEvent) {
            if (getAlpha() != 1.0f) {
                return false;
            }
            return super.dispatchTouchEvent(motionEvent);
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView
        protected boolean pannelAnimationEnabled() {
            return ChatActivity.this.openAnimationEnded;
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView
        public void checkAnimation() {
            View view;
            if (((BaseFragment) ChatActivity.this).actionBar.isActionModeShowed() || ChatActivity.this.reportType >= 0) {
                if (ChatActivity.this.messageEditTextAnimator != null) {
                    ChatActivity.this.messageEditTextAnimator.cancel();
                }
                if (ChatActivity.this.changeBoundAnimator != null) {
                    ChatActivity.this.changeBoundAnimator.cancel();
                }
                ChatActivity.this.chatActivityEnterViewAnimateFromTop = 0;
                this.shouldAnimateEditTextWithBounds = false;
                return;
            }
            int backgroundTop = getBackgroundTop();
            if (ChatActivity.this.chatActivityEnterViewAnimateFromTop != 0 && backgroundTop != ChatActivity.this.chatActivityEnterViewAnimateFromTop && this.lastContentViewHeight == ChatActivity.this.contentView.getMeasuredHeight()) {
                int i = (this.animatedTop + ChatActivity.this.chatActivityEnterViewAnimateFromTop) - backgroundTop;
                this.animatedTop = i;
                if (ChatActivity.this.changeBoundAnimator != null) {
                    ChatActivity.this.changeBoundAnimator.removeAllListeners();
                    ChatActivity.this.changeBoundAnimator.cancel();
                }
                float f = i;
                ChatActivity.this.chatListView.setTranslationY(f);
                View view2 = this.topView;
                if (view2 != null && view2.getVisibility() == 0) {
                    this.topView.setTranslationY(this.animatedTop + ((1.0f - this.topViewEnterProgress) * view.getLayoutParams().height));
                    View view3 = this.topLineView;
                    if (view3 != null) {
                        view3.setTranslationY(this.animatedTop);
                    }
                }
                MentionsContainerView mentionsContainerView = ChatActivity.this.mentionContainer;
                if (mentionsContainerView != null) {
                    mentionsContainerView.setTranslationY(f);
                }
                ChatActivity.this.changeBoundAnimator = ValueAnimator.ofFloat(f, 0.0f);
                ChatActivity.this.changeBoundAnimator.addUpdateListener(new ChatActivity$35$$ExternalSyntheticLambda1(this));
                ChatActivity.this.changeBoundAnimator.addListener(new AnonymousClass1());
                ChatActivity.this.changeBoundAnimator.setDuration(250L);
                ChatActivity.this.changeBoundAnimator.setInterpolator(ChatListItemAnimator.DEFAULT_INTERPOLATOR);
                if (!ChatActivity.this.waitingForSendingMessageLoad) {
                    ChatActivity.this.changeBoundAnimator.start();
                }
                ChatActivity.this.invalidateChatListViewTopPadding();
                ChatActivity.this.invalidateMessagesVisiblePart();
                ChatActivity.this.chatActivityEnterViewAnimateFromTop = 0;
            } else if (this.lastContentViewHeight != ChatActivity.this.contentView.getMeasuredHeight()) {
                ChatActivity.this.chatActivityEnterViewAnimateFromTop = 0;
            }
            if (this.shouldAnimateEditTextWithBounds) {
                EditTextCaption editTextCaption = this.messageEditText;
                editTextCaption.setOffsetY(editTextCaption.getOffsetY() - ((this.messageEditTextPredrawHeigth - this.messageEditText.getMeasuredHeight()) + (this.messageEditTextPredrawScrollY - this.messageEditText.getScrollY())));
                ValueAnimator ofFloat = ValueAnimator.ofFloat(this.messageEditText.getOffsetY(), 0.0f);
                ofFloat.addUpdateListener(new ChatActivity$35$$ExternalSyntheticLambda0(this));
                if (ChatActivity.this.messageEditTextAnimator != null) {
                    ChatActivity.this.messageEditTextAnimator.cancel();
                }
                ChatActivity.this.messageEditTextAnimator = ofFloat;
                ofFloat.setDuration(250L);
                ofFloat.setInterpolator(ChatListItemAnimator.DEFAULT_INTERPOLATOR);
                ofFloat.start();
                this.shouldAnimateEditTextWithBounds = false;
            }
            this.lastContentViewHeight = ChatActivity.this.contentView.getMeasuredHeight();
            ChatActivity.this.chatActivityEnterViewAnimateBeforeSending = false;
        }

        public /* synthetic */ void lambda$checkAnimation$0(ValueAnimator valueAnimator) {
            float floatValue = ((Float) valueAnimator.getAnimatedValue()).floatValue();
            this.animatedTop = (int) floatValue;
            View view = this.topView;
            if (view != null && view.getVisibility() == 0) {
                View view2 = this.topView;
                view2.setTranslationY(((1.0f - this.topViewEnterProgress) * view2.getLayoutParams().height) + floatValue);
                View view3 = this.topLineView;
                if (view3 != null) {
                    view3.setTranslationY(floatValue);
                }
            } else {
                MentionsContainerView mentionsContainerView = ChatActivity.this.mentionContainer;
                if (mentionsContainerView != null) {
                    mentionsContainerView.setTranslationY(floatValue);
                }
                ChatActivity.this.chatListView.setTranslationY(floatValue);
                ChatActivity.this.invalidateChatListViewTopPadding();
                ChatActivity.this.invalidateMessagesVisiblePart();
            }
            invalidate();
        }

        /* renamed from: org.telegram.ui.ChatActivity$35$1 */
        /* loaded from: classes3.dex */
        class AnonymousClass1 extends AnimatorListenerAdapter {
            AnonymousClass1() {
                AnonymousClass35.this = r1;
            }

            @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
            public void onAnimationEnd(Animator animator) {
                ((ChatActivityEnterView) AnonymousClass35.this).animatedTop = 0;
                if (((ChatActivityEnterView) AnonymousClass35.this).topView == null || ((ChatActivityEnterView) AnonymousClass35.this).topView.getVisibility() != 0) {
                    ChatActivity.this.chatListView.setTranslationY(0.0f);
                    MentionsContainerView mentionsContainerView = ChatActivity.this.mentionContainer;
                    if (mentionsContainerView != null) {
                        mentionsContainerView.setTranslationY(0.0f);
                    }
                } else {
                    ((ChatActivityEnterView) AnonymousClass35.this).topView.setTranslationY(((ChatActivityEnterView) AnonymousClass35.this).animatedTop + ((1.0f - ((ChatActivityEnterView) AnonymousClass35.this).topViewEnterProgress) * ((ChatActivityEnterView) AnonymousClass35.this).topView.getLayoutParams().height));
                    if (((ChatActivityEnterView) AnonymousClass35.this).topLineView != null) {
                        ((ChatActivityEnterView) AnonymousClass35.this).topLineView.setTranslationY(((ChatActivityEnterView) AnonymousClass35.this).animatedTop);
                    }
                }
                ChatActivity.this.changeBoundAnimator = null;
            }
        }

        public /* synthetic */ void lambda$checkAnimation$1(ValueAnimator valueAnimator) {
            this.messageEditText.setOffsetY(((Float) valueAnimator.getAnimatedValue()).floatValue());
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView
        protected void onLineCountChanged(int i, int i2) {
            if (ChatActivity.this.chatActivityEnterView != null) {
                this.shouldAnimateEditTextWithBounds = true;
                this.messageEditTextPredrawHeigth = this.messageEditText.getMeasuredHeight();
                this.messageEditTextPredrawScrollY = this.messageEditText.getScrollY();
                ChatActivity.this.contentView.invalidate();
                ChatActivity chatActivity = ChatActivity.this;
                chatActivity.chatActivityEnterViewAnimateFromTop = chatActivity.chatActivityEnterView.getBackgroundTop();
            }
        }
    }

    /* renamed from: org.telegram.ui.ChatActivity$36 */
    /* loaded from: classes3.dex */
    public class AnonymousClass36 implements ChatActivityEnterView.ChatActivityEnterViewDelegate {
        boolean isEditTextItemVisibilitySuppressed;
        int lastSize;
        final /* synthetic */ ActionBarMenu val$menu;

        AnonymousClass36(ActionBarMenu actionBarMenu) {
            ChatActivity.this = r1;
            this.val$menu = actionBarMenu;
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public int getContentViewHeight() {
            return ChatActivity.this.contentView.getHeight();
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public int measureKeyboardHeight() {
            return ChatActivity.this.contentView.measureKeyboardHeight();
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public TLRPC$TL_channels_sendAsPeers getSendAsPeers() {
            return ChatActivity.this.sendAsPeersObj;
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void onMessageSend(CharSequence charSequence, boolean z, int i) {
            if (ChatActivity.this.chatListItemAnimator != null) {
                ChatActivity chatActivity = ChatActivity.this;
                chatActivity.chatActivityEnterViewAnimateFromTop = chatActivity.chatActivityEnterView.getBackgroundTop();
                if (ChatActivity.this.chatActivityEnterViewAnimateFromTop != 0) {
                    ChatActivity.this.chatActivityEnterViewAnimateBeforeSending = true;
                }
            }
            MentionsContainerView mentionsContainerView = ChatActivity.this.mentionContainer;
            if (mentionsContainerView != null && mentionsContainerView.getAdapter() != null) {
                ChatActivity.this.mentionContainer.getAdapter().addHashtagsFromMessage(charSequence);
            }
            if (i != 0) {
                if (ChatActivity.this.scheduledMessagesCount == -1) {
                    ChatActivity.this.scheduledMessagesCount = 0;
                }
                if (charSequence != null) {
                    ChatActivity.access$26808(ChatActivity.this);
                }
                if (ChatActivity.this.forwardingMessages != null && !ChatActivity.this.forwardingMessages.messages.isEmpty()) {
                    ChatActivity chatActivity2 = ChatActivity.this;
                    ChatActivity.access$26812(chatActivity2, chatActivity2.forwardingMessages.messages.size());
                }
                ChatActivity.this.updateScheduledInterface(false);
            }
            ChatActivity.this.hideFieldPanel(z, i, true);
            ChatActivityEnterView chatActivityEnterView = ChatActivity.this.chatActivityEnterView;
            if (chatActivityEnterView == null || chatActivityEnterView.getEmojiView() == null) {
                return;
            }
            ChatActivity.this.chatActivityEnterView.getEmojiView().onMessageSend();
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void onSwitchRecordMode(boolean z) {
            ChatActivity.this.showVoiceHint(false, z);
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void onPreAudioVideoRecord() {
            ChatActivity.this.showVoiceHint(true, false);
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void onUpdateSlowModeButton(View view, boolean z, CharSequence charSequence) {
            ChatActivity.this.showSlowModeHint(view, z, charSequence);
            if (ChatActivity.this.headerItem == null || ChatActivity.this.headerItem.getVisibility() == 0) {
                return;
            }
            ChatActivity.this.headerItem.setVisibility(0);
            if (ChatActivity.this.attachItem == null) {
                return;
            }
            ChatActivity.this.attachItem.setVisibility(8);
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void onTextSelectionChanged(int i, int i2) {
            if (ChatActivity.this.editTextItem == null) {
                return;
            }
            if (i2 - i > 0) {
                if (ChatActivity.this.editTextItem.getTag() == null) {
                    ChatActivity.this.editTextItem.setTag(1);
                    if (ChatActivity.this.editTextItem.getVisibility() != 0) {
                        if (ChatActivity.this.chatMode == 0 && ChatActivity.this.threadMessageId == 0 && !UserObject.isReplyUser(ChatActivity.this.currentUser) && ChatActivity.this.reportType < 0) {
                            ChatActivity.this.editTextItem.setVisibility(0);
                            ChatActivity.this.headerItem.setVisibility(8);
                            ChatActivity.this.attachItem.setVisibility(8);
                        } else {
                            ValueAnimator ofFloat = ValueAnimator.ofFloat(AndroidUtilities.dp(48.0f), 0.0f);
                            ofFloat.setDuration(220L);
                            ofFloat.setInterpolator(CubicBezierInterpolator.DEFAULT);
                            ofFloat.addListener(new AnonymousClass1());
                            ofFloat.addUpdateListener(new ChatActivity$36$$ExternalSyntheticLambda0(this.val$menu));
                            ofFloat.start();
                        }
                    }
                }
                ChatActivity.this.editTextStart = i;
                ChatActivity.this.editTextEnd = i2;
            } else if (ChatActivity.this.editTextItem.getTag() == null) {
            } else {
                ChatActivity.this.editTextItem.setTag(null);
                if (ChatActivity.this.editTextItem.getVisibility() == 8) {
                    return;
                }
                if (ChatActivity.this.chatMode == 0 && ChatActivity.this.threadMessageId == 0 && !UserObject.isReplyUser(ChatActivity.this.currentUser) && ChatActivity.this.reportType < 0) {
                    ChatActivity.this.editTextItem.setVisibility(8);
                    if (!ChatActivity.this.chatActivityEnterView.hasText() || !TextUtils.isEmpty(ChatActivity.this.chatActivityEnterView.getSlowModeTimer())) {
                        ChatActivity.this.headerItem.setVisibility(0);
                        ChatActivity.this.attachItem.setVisibility(8);
                        return;
                    }
                    ChatActivity.this.headerItem.setVisibility(8);
                    ChatActivity.this.attachItem.setVisibility(0);
                    return;
                }
                ValueAnimator ofFloat2 = ValueAnimator.ofFloat(0.0f, AndroidUtilities.dp(48.0f));
                ofFloat2.setDuration(220L);
                ofFloat2.setInterpolator(CubicBezierInterpolator.DEFAULT);
                ofFloat2.addListener(new AnonymousClass2());
                ofFloat2.addUpdateListener(new ChatActivity$36$$ExternalSyntheticLambda1(this.val$menu));
                ofFloat2.start();
            }
        }

        /* renamed from: org.telegram.ui.ChatActivity$36$1 */
        /* loaded from: classes3.dex */
        class AnonymousClass1 extends AnimatorListenerAdapter {
            AnonymousClass1() {
                AnonymousClass36.this = r1;
            }

            @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
            public void onAnimationStart(Animator animator) {
                ((BaseFragment) ChatActivity.this).actionBar.setMenuOffsetSuppressed(true);
                ChatActivity.this.editTextItem.setVisibility(0);
                AnonymousClass36.this.val$menu.translateXItems(AndroidUtilities.dp(48.0f));
            }

            @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
            public void onAnimationEnd(Animator animator) {
                ((BaseFragment) ChatActivity.this).actionBar.setMenuOffsetSuppressed(false);
            }
        }

        public static /* synthetic */ void lambda$onTextSelectionChanged$0(ActionBarMenu actionBarMenu, ValueAnimator valueAnimator) {
            actionBarMenu.translateXItems(((Float) valueAnimator.getAnimatedValue()).floatValue());
        }

        /* renamed from: org.telegram.ui.ChatActivity$36$2 */
        /* loaded from: classes3.dex */
        class AnonymousClass2 extends AnimatorListenerAdapter {
            AnonymousClass2() {
                AnonymousClass36.this = r1;
            }

            @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
            public void onAnimationStart(Animator animator) {
                ((BaseFragment) ChatActivity.this).actionBar.setMenuOffsetSuppressed(true);
                AnonymousClass36.this.isEditTextItemVisibilitySuppressed = true;
            }

            @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
            public void onAnimationEnd(Animator animator) {
                ChatActivity.this.editTextItem.setVisibility(8);
                AnonymousClass36.this.val$menu.translateXItems(0.0f);
                ((BaseFragment) ChatActivity.this).actionBar.setMenuOffsetSuppressed(false);
                AnonymousClass36.this.isEditTextItemVisibilitySuppressed = false;
            }
        }

        public static /* synthetic */ void lambda$onTextSelectionChanged$1(ActionBarMenu actionBarMenu, ValueAnimator valueAnimator) {
            actionBarMenu.translateXItems(((Float) valueAnimator.getAnimatedValue()).floatValue());
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void onTextChanged(CharSequence charSequence, boolean z) {
            ChatActivityEnterView chatActivityEnterView;
            MediaController.getInstance().setInputFieldHasText(!TextUtils.isEmpty(charSequence) || ChatActivity.this.chatActivityEnterView.isEditingMessage());
            if (ChatActivity.this.stickersAdapter != null && (chatActivityEnterView = ChatActivity.this.chatActivityEnterView) != null && chatActivityEnterView.getVisibility() == 0 && (ChatActivity.this.bottomOverlay == null || ChatActivity.this.bottomOverlay.getVisibility() != 0)) {
                ChatActivity.this.stickersAdapter.searchEmojiByKeyword(charSequence);
            }
            MentionsContainerView mentionsContainerView = ChatActivity.this.mentionContainer;
            if (mentionsContainerView != null && mentionsContainerView.getAdapter() != null) {
                ChatActivity.this.mentionContainer.getAdapter().searchUsernameOrHashtag(charSequence.toString(), ChatActivity.this.chatActivityEnterView.getCursorPosition(), ChatActivity.this.messages, false, false);
            }
            if (ChatActivity.this.waitingForCharaterEnterRunnable != null) {
                AndroidUtilities.cancelRunOnUIThread(ChatActivity.this.waitingForCharaterEnterRunnable);
                ChatActivity.this.waitingForCharaterEnterRunnable = null;
            }
            TLRPC$Chat tLRPC$Chat = ChatActivity.this.currentChat;
            if ((tLRPC$Chat == null || ChatObject.canSendEmbed(tLRPC$Chat)) && ChatActivity.this.chatActivityEnterView.isMessageWebPageSearchEnabled()) {
                if (ChatActivity.this.chatActivityEnterView.isEditingMessage() && ChatActivity.this.chatActivityEnterView.isEditingCaption()) {
                    return;
                }
                if (z) {
                    ChatActivity.this.searchLinks(charSequence, true);
                    return;
                }
                ChatActivity.this.waitingForCharaterEnterRunnable = new AnonymousClass3(charSequence);
                AndroidUtilities.runOnUIThread(ChatActivity.this.waitingForCharaterEnterRunnable, AndroidUtilities.WEB_URL == null ? 3000L : 1000L);
            }
        }

        /* renamed from: org.telegram.ui.ChatActivity$36$3 */
        /* loaded from: classes3.dex */
        class AnonymousClass3 implements Runnable {
            final /* synthetic */ CharSequence val$text;

            AnonymousClass3(CharSequence charSequence) {
                AnonymousClass36.this = r1;
                this.val$text = charSequence;
            }

            @Override // java.lang.Runnable
            public void run() {
                if (this == ChatActivity.this.waitingForCharaterEnterRunnable) {
                    ChatActivity.this.searchLinks(this.val$text, false);
                    ChatActivity.this.waitingForCharaterEnterRunnable = null;
                }
            }
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void onTextSpansChanged(CharSequence charSequence) {
            ChatActivity.this.searchLinks(charSequence, true);
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void needSendTyping() {
            ChatActivity.this.getMessagesController().sendTyping(ChatActivity.this.dialog_id, ChatActivity.this.threadMessageId, 0, ((BaseFragment) ChatActivity.this).classGuid);
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void onAttachButtonHidden() {
            if (((BaseFragment) ChatActivity.this).actionBar.isSearchFieldVisible()) {
                return;
            }
            if (ChatActivity.this.editTextItem != null && !this.isEditTextItemVisibilitySuppressed) {
                ChatActivity.this.editTextItem.setVisibility(8);
            }
            if (!TextUtils.isEmpty(ChatActivity.this.chatActivityEnterView.getSlowModeTimer())) {
                return;
            }
            if (ChatActivity.this.headerItem != null) {
                ChatActivity.this.headerItem.setVisibility(8);
            }
            if (ChatActivity.this.attachItem == null) {
                return;
            }
            ChatActivity.this.attachItem.setVisibility(0);
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void onAttachButtonShow() {
            if (((BaseFragment) ChatActivity.this).actionBar.isSearchFieldVisible()) {
                return;
            }
            if (ChatActivity.this.headerItem != null) {
                ChatActivity.this.headerItem.setVisibility(0);
            }
            if (ChatActivity.this.editTextItem != null && !this.isEditTextItemVisibilitySuppressed) {
                ChatActivity.this.editTextItem.setVisibility(8);
            }
            if (ChatActivity.this.attachItem == null) {
                return;
            }
            ChatActivity.this.attachItem.setVisibility(8);
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void onMessageEditEnd(boolean z) {
            boolean z2;
            if (ChatActivity.this.chatListItemAnimator != null) {
                ChatActivity chatActivity = ChatActivity.this;
                chatActivity.chatActivityEnterViewAnimateFromTop = chatActivity.chatActivityEnterView.getBackgroundTop();
                if (ChatActivity.this.chatActivityEnterViewAnimateFromTop != 0) {
                    ChatActivity.this.chatActivityEnterViewAnimateBeforeSending = true;
                }
            }
            if (!z) {
                MentionsContainerView mentionsContainerView = ChatActivity.this.mentionContainer;
                if (mentionsContainerView != null) {
                    mentionsContainerView.getAdapter().setNeedBotContext(true);
                }
                if (ChatActivity.this.editingMessageObject != null) {
                    AndroidUtilities.runOnUIThread(new ChatActivity$36$$ExternalSyntheticLambda2(this), 30L);
                }
                if (ChatActivity.this.chatActivityEnterView.isPopupShowing()) {
                    ChatActivity.this.chatActivityEnterView.setFieldFocused();
                    z2 = true;
                } else {
                    z2 = false;
                }
                ChatActivity.this.chatActivityEnterView.setAllowStickersAndGifs(true, true, true, z2);
                if (ChatActivity.this.editingMessageObjectReqId != 0) {
                    ChatActivity.this.getConnectionsManager().cancelRequest(ChatActivity.this.editingMessageObjectReqId, true);
                    ChatActivity.this.editingMessageObjectReqId = 0;
                }
                ChatActivity.this.updatePinnedMessageView(true);
                ChatActivity.this.updateBottomOverlay();
                ChatActivity.this.updateVisibleRows();
            }
        }

        public /* synthetic */ void lambda$onMessageEditEnd$2() {
            ChatActivity.this.hideFieldPanel(true);
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void onWindowSizeChanged(int i) {
            if (i < AndroidUtilities.dp(72.0f) + ActionBar.getCurrentActionBarHeight()) {
                ChatActivity.this.allowStickersPanel = false;
                if (ChatActivity.this.stickersPanel.getVisibility() == 0) {
                    ChatActivity.this.stickersPanel.setVisibility(4);
                }
            } else {
                ChatActivity.this.allowStickersPanel = true;
                if (ChatActivity.this.stickersPanel.getVisibility() == 4) {
                    ChatActivity.this.stickersPanel.setVisibility(0);
                }
            }
            ChatActivity chatActivity = ChatActivity.this;
            chatActivity.allowContextBotPanel = !chatActivity.chatActivityEnterView.isPopupShowing();
            int i2 = i + (ChatActivity.this.chatActivityEnterView.isPopupShowing() ? 65536 : 0);
            if (this.lastSize != i2) {
                ChatActivity.this.chatActivityEnterViewAnimateFromTop = 0;
                ChatActivity.this.chatActivityEnterViewAnimateBeforeSending = false;
            }
            this.lastSize = i2;
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void onStickersTab(boolean z) {
            if (ChatActivity.this.emojiButtonRed != null) {
                ChatActivity.this.emojiButtonRed.setVisibility(8);
            }
            ChatActivity.this.allowContextBotPanelSecond = !z;
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void didPressAttachButton() {
            if (ChatActivity.this.chatAttachAlert != null) {
                ChatActivity.this.chatAttachAlert.setEditingMessageObject(null);
            }
            ChatActivity.this.openAttachMenu();
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void needStartRecordVideo(int i, boolean z, int i2) {
            if (ChatActivity.this.instantCameraView != null) {
                if (i == 0) {
                    ChatActivity.this.instantCameraView.showCamera();
                    ChatActivity.this.chatListView.stopScroll();
                    ChatActivity.this.chatAdapter.updateRowsSafe();
                    return;
                }
                boolean z2 = true;
                if (i == 1 || i == 3 || i == 4) {
                    ChatActivity.this.instantCameraView.send(i, z, i2);
                } else if (i != 2 && i != 5) {
                } else {
                    InstantCameraView instantCameraView = ChatActivity.this.instantCameraView;
                    if (i != 2) {
                        z2 = false;
                    }
                    instantCameraView.cancel(z2);
                }
            }
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void needChangeVideoPreviewState(int i, float f) {
            if (ChatActivity.this.instantCameraView != null) {
                ChatActivity.this.instantCameraView.changeVideoPreviewState(i, f);
            }
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void needStartRecordAudio(int i) {
            int i2 = i == 0 ? 8 : 0;
            if (ChatActivity.this.overlayView.getVisibility() != i2) {
                ChatActivity.this.overlayView.setVisibility(i2);
            }
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void needShowMediaBanHint() {
            ChatActivity.this.showMediaBannedHint();
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void onStickersExpandedChange() {
            ChatActivity.this.checkRaiseSensors();
            if (ChatActivity.this.chatActivityEnterView.isStickersExpanded()) {
                AndroidUtilities.setAdjustResizeToNothing(ChatActivity.this.getParentActivity(), ((BaseFragment) ChatActivity.this).classGuid);
                if (Bulletin.getVisibleBulletin() == null || !Bulletin.getVisibleBulletin().isShowing()) {
                    return;
                }
                Bulletin.getVisibleBulletin().hide();
                return;
            }
            AndroidUtilities.requestAdjustResize(ChatActivity.this.getParentActivity(), ((BaseFragment) ChatActivity.this).classGuid);
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void scrollToSendingMessage() {
            int sendingMessageId = ChatActivity.this.getSendMessagesHelper().getSendingMessageId(ChatActivity.this.dialog_id);
            if (sendingMessageId != 0) {
                ChatActivity.this.scrollToMessageId(sendingMessageId, 0, true, 0, true, 0);
            }
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public boolean hasScheduledMessages() {
            return ChatActivity.this.scheduledMessagesCount > 0 && ChatActivity.this.chatMode == 0;
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void onSendLongClick() {
            if (ChatActivity.this.scheduledOrNoSoundHint != null) {
                ChatActivity.this.scheduledOrNoSoundHint.hide();
            }
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void openScheduledMessages() {
            ChatActivity.this.openScheduledMessages();
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void onAudioVideoInterfaceUpdated() {
            ChatActivity.this.updatePagedownButtonVisibility(true);
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void bottomPanelTranslationYChanged(float f) {
            float f2 = 0.0f;
            if (f != 0.0f) {
                ChatActivity.this.wasManualScroll = true;
            }
            ChatActivity chatActivity = ChatActivity.this;
            chatActivity.bottomPanelTranslationY = chatActivity.chatActivityEnterView.panelAnimationInProgress() ? ChatActivity.this.chatActivityEnterView.getEmojiPadding() - f : 0.0f;
            ChatActivity chatActivity2 = ChatActivity.this;
            if (chatActivity2.chatActivityEnterView.panelAnimationInProgress()) {
                f2 = f;
            }
            chatActivity2.bottomPanelTranslationYReverse = f2;
            ChatActivity.this.chatActivityEnterView.setTranslationY(f);
            ChatActivity.this.mentionContainer.setTranslationY(f);
            ChatActivity chatActivity3 = ChatActivity.this;
            chatActivity3.contentView.setEmojiOffset(chatActivity3.chatActivityEnterView.panelAnimationInProgress(), ChatActivity.this.bottomPanelTranslationY);
            float topViewTranslation = f + ChatActivity.this.chatActivityEnterView.getTopViewTranslation();
            ChatActivity.this.mentionContainer.setTranslationY(topViewTranslation);
            ChatActivity.this.chatListView.setTranslationY(topViewTranslation);
            ChatActivity.this.invalidateChatListViewTopPadding();
            ChatActivity.this.invalidateMessagesVisiblePart();
            ChatActivity.this.updateTextureViewPosition(false);
            ChatActivity.this.contentView.invalidate();
            ChatActivity.this.updateBulletinLayout();
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void prepareMessageSending() {
            ChatActivity.this.waitingForSendingMessageLoad = true;
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void onTrendingStickersShowed(boolean z) {
            if (z) {
                AndroidUtilities.setAdjustResizeToNothing(ChatActivity.this.getParentActivity(), ((BaseFragment) ChatActivity.this).classGuid);
                ((BaseFragment) ChatActivity.this).fragmentView.requestLayout();
                return;
            }
            AndroidUtilities.requestAdjustResize(ChatActivity.this.getParentActivity(), ((BaseFragment) ChatActivity.this).classGuid);
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public boolean hasForwardingMessages() {
            return ChatActivity.this.forwardingMessages != null && !ChatActivity.this.forwardingMessages.messages.isEmpty();
        }
    }

    /* renamed from: org.telegram.ui.ChatActivity$37 */
    /* loaded from: classes3.dex */
    class AnonymousClass37 extends ChatActivityEnterTopView {
        @Override // android.view.View
        public boolean hasOverlappingRendering() {
            return false;
        }

        /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
        AnonymousClass37(Context context) {
            super(context);
            ChatActivity.this = r1;
        }

        @Override // android.view.View
        public void setTranslationY(float f) {
            super.setTranslationY(f);
            ChatActivityEnterView chatActivityEnterView = ChatActivity.this.chatActivityEnterView;
            if (chatActivityEnterView != null) {
                chatActivityEnterView.invalidate();
            }
            if (getVisibility() != 8) {
                ChatActivity.this.hideHints(true);
                if (ChatActivity.this.chatListView != null) {
                    ChatActivity.this.chatListView.setTranslationY(f);
                }
                if (ChatActivity.this.progressView != null) {
                    ChatActivity.this.progressView.setTranslationY(f);
                }
                ChatActivity.this.invalidateChatListViewTopPadding();
                ChatActivity.this.invalidateMessagesVisiblePart();
                if (((BaseFragment) ChatActivity.this).fragmentView == null) {
                    return;
                }
                ((BaseFragment) ChatActivity.this).fragmentView.invalidate();
            }
        }

        @Override // android.view.View
        public void setVisibility(int i) {
            super.setVisibility(i);
            if (i == 8) {
                if (ChatActivity.this.chatListView != null) {
                    ChatActivity.this.chatListView.setTranslationY(0.0f);
                }
                if (ChatActivity.this.progressView == null) {
                    return;
                }
                ChatActivity.this.progressView.setTranslationY(0.0f);
            }
        }
    }

    public /* synthetic */ void lambda$createView$57(View view) {
        ForwardingMessagesParams forwardingMessagesParams = this.forwardingMessages;
        if (forwardingMessagesParams != null && !forwardingMessagesParams.messages.isEmpty()) {
            SharedConfig.forwardingOptionsHintHintShowed();
            openForwardingPreview();
        } else if (this.replyingMessageObject != null && (!isThreadChat() || this.replyingMessageObject.getId() != this.threadMessageId)) {
            scrollToMessageId(this.replyingMessageObject.getId(), 0, true, 0, true, 0);
        } else {
            MessageObject messageObject = this.editingMessageObject;
            if (messageObject == null) {
                return;
            }
            if (messageObject.canEditMedia() && this.editingMessageObjectReqId == 0) {
                if (this.chatAttachAlert == null) {
                    createChatAttachView();
                }
                this.chatAttachAlert.setEditingMessageObject(this.editingMessageObject);
                openAttachMenu();
                return;
            }
            scrollToMessageId(this.editingMessageObject.getId(), 0, true, 0, true, 0);
        }
    }

    public /* synthetic */ void lambda$createView$58(View view) {
        ForwardingMessagesParams forwardingMessagesParams = this.forwardingMessages;
        if (forwardingMessagesParams == null || forwardingMessagesParams.messages.isEmpty()) {
            showFieldPanel(false, null, null, null, this.foundWebPage, true, 0, true, true);
        } else {
            openAnotherForward();
        }
    }

    public /* synthetic */ void lambda$createView$59(View view) {
        MessageObject messageObject = this.editingMessageObject;
        if (messageObject != null) {
            scrollToMessageId(messageObject.getId(), 0, true, 0, true, 0);
        }
    }

    /* renamed from: org.telegram.ui.ChatActivity$38 */
    /* loaded from: classes3.dex */
    class AnonymousClass38 extends ChatActivityEnterTopView.EditViewButton {
        final /* synthetic */ boolean val$firstButton;

        /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
        AnonymousClass38(Context context, boolean z) {
            super(context);
            ChatActivity.this = r1;
            this.val$firstButton = z;
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterTopView.EditViewButton
        public void setEditButton(boolean z) {
            super.setEditButton(z);
            if (this.val$firstButton) {
                getTextView().setMaxWidth(z ? AndroidUtilities.dp(116.0f) : Integer.MAX_VALUE);
            }
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterTopView.EditViewButton
        public void updateColors() {
            setBackground(Theme.createCircleSelectorDrawable(ChatActivity.this.getThemedColor("chat_replyPanelName") & 436207615, this.val$firstButton ? AndroidUtilities.dp(14.0f) : 0, 0));
            getImageView().setColorFilter(new PorterDuffColorFilter(ChatActivity.this.getThemedColor("chat_replyPanelName"), PorterDuff.Mode.MULTIPLY));
            getTextView().setTextColor(ChatActivity.this.getThemedColor("chat_replyPanelName"));
        }
    }

    public /* synthetic */ void lambda$createView$60(ChatActivityEnterTopView.EditViewButton editViewButton, FrameLayout frameLayout, View view) {
        MessageObject messageObject = this.editingMessageObject;
        if (messageObject == null || !messageObject.canEditMedia() || this.editingMessageObjectReqId != 0) {
            return;
        }
        if (editViewButton.isEditButton()) {
            openEditingMessageInPhotoEditor();
        } else {
            frameLayout.callOnClick();
        }
    }

    /* renamed from: org.telegram.ui.ChatActivity$39 */
    /* loaded from: classes3.dex */
    class AnonymousClass39 extends RecyclerListView {
        final /* synthetic */ ContentPreviewViewer.ContentPreviewViewerDelegate val$contentPreviewViewerDelegate;

        /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
        AnonymousClass39(Context context, Theme.ResourcesProvider resourcesProvider, ContentPreviewViewer.ContentPreviewViewerDelegate contentPreviewViewerDelegate) {
            super(context, resourcesProvider);
            ChatActivity.this = r1;
            this.val$contentPreviewViewerDelegate = contentPreviewViewerDelegate;
        }

        @Override // org.telegram.ui.Components.RecyclerListView, androidx.recyclerview.widget.RecyclerView, android.view.ViewGroup
        public boolean onInterceptTouchEvent(MotionEvent motionEvent) {
            return super.onInterceptTouchEvent(motionEvent) || ContentPreviewViewer.getInstance().onInterceptTouchEvent(motionEvent, ChatActivity.this.stickersListView, 0, this.val$contentPreviewViewerDelegate, ChatActivity.this.themeDelegate);
        }
    }

    public /* synthetic */ boolean lambda$createView$61(ContentPreviewViewer.ContentPreviewViewerDelegate contentPreviewViewerDelegate, View view, MotionEvent motionEvent) {
        return ContentPreviewViewer.getInstance().onTouch(motionEvent, this.stickersListView, 0, this.stickersOnItemClickListener, contentPreviewViewerDelegate, this.themeDelegate);
    }

    /* renamed from: org.telegram.ui.ChatActivity$40 */
    /* loaded from: classes3.dex */
    class AnonymousClass40 extends BlurredFrameLayout {
        /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
        AnonymousClass40(Context context, SizeNotifierFrameLayout sizeNotifierFrameLayout) {
            super(context, sizeNotifierFrameLayout);
            ChatActivity.this = r1;
        }

        @Override // android.view.View
        public void onDraw(Canvas canvas) {
            int intrinsicHeight = Theme.chat_composeShadowDrawable.getIntrinsicHeight();
            if (ChatActivity.this.chatActivityEnterView.getVisibility() != 0) {
                Theme.chat_composeShadowDrawable.setBounds(0, 0, getMeasuredWidth(), intrinsicHeight);
                Theme.chat_composeShadowDrawable.draw(canvas);
            }
            Rect rect = AndroidUtilities.rectTmp2;
            rect.set(0, intrinsicHeight, getMeasuredWidth(), getMeasuredHeight());
            ChatActivity.this.contentView.drawBlurRect(canvas, getY(), rect, ChatActivity.this.getThemedPaint("paintChatComposeBackground"), false);
        }

        @Override // android.view.ViewGroup
        protected void measureChildWithMargins(View view, int i, int i2, int i3, int i4) {
            if (view == ChatActivity.this.searchCountText) {
                int i5 = 14;
                if (ChatActivity.this.searchCalendarButton != null && ChatActivity.this.searchCalendarButton.getVisibility() != 8) {
                    i5 = 62;
                }
                if (ChatActivity.this.searchUserButton != null && ChatActivity.this.searchUserButton.getVisibility() != 8) {
                    i5 += 48;
                }
                ((ViewGroup.MarginLayoutParams) view.getLayoutParams()).leftMargin = AndroidUtilities.dp(i5);
            }
            super.measureChildWithMargins(view, i, i2, i3, i4);
        }
    }

    public /* synthetic */ boolean lambda$createView$62(View view, MotionEvent motionEvent) {
        return getMediaDataController().getFoundMessageObjects().size() <= 1;
    }

    public /* synthetic */ void lambda$createView$63(View view) {
        if (getMediaDataController().getFoundMessageObjects().size() > 1) {
            HintView hintView = this.searchAsListHint;
            if (hintView != null) {
                hintView.hide();
            }
            toggleMesagesSearchListView();
            if (SharedConfig.searchMessagesAsListUsed) {
                return;
            }
            SharedConfig.setSearchMessagesAsListUsed(true);
        }
    }

    public /* synthetic */ void lambda$createView$64(View view) {
        getMediaDataController().searchMessagesInChat(null, this.dialog_id, this.mergeDialogId, this.classGuid, 1, this.threadMessageId, this.searchingUserMessages, this.searchingChatMessages);
        showMessagesSearchListView(false);
        if (SharedConfig.searchMessagesAsListUsed || SharedConfig.searchMessagesAsListHintShows >= 3 || this.searchAsListHintShown || Math.random() > 0.25d) {
            return;
        }
        showSearchAsListHint();
        this.searchAsListHintShown = true;
        SharedConfig.increaseSearchAsListHintShows();
    }

    public /* synthetic */ void lambda$createView$65(View view) {
        getMediaDataController().searchMessagesInChat(null, this.dialog_id, this.mergeDialogId, this.classGuid, 2, this.threadMessageId, this.searchingUserMessages, this.searchingChatMessages);
        showMessagesSearchListView(false);
    }

    public /* synthetic */ void lambda$createView$66(View view) {
        MentionsContainerView mentionsContainerView = this.mentionContainer;
        if (mentionsContainerView != null) {
            mentionsContainerView.setReversed(true);
            this.mentionContainer.getAdapter().setSearchingMentions(true);
        }
        this.searchCalendarButton.setVisibility(8);
        this.searchUserButton.setVisibility(8);
        this.searchingForUser = true;
        this.searchingUserMessages = null;
        this.searchingChatMessages = null;
        this.searchItem.setSearchFieldHint(LocaleController.getString("SearchMembers", 2131628181));
        this.searchItem.setSearchFieldCaption(LocaleController.getString("SearchFrom", 2131628173));
        AndroidUtilities.showKeyboard(this.searchItem.getSearchField());
        this.searchItem.clearSearchText();
    }

    public /* synthetic */ void lambda$createView$67(View view) {
        if (getParentActivity() == null) {
            return;
        }
        AndroidUtilities.hideKeyboard(this.searchItem.getSearchField());
        showDialog(AlertsCreator.createCalendarPickerDialog(getParentActivity(), 1375315200000L, new AnonymousClass41(), this.themeDelegate).create());
    }

    /* renamed from: org.telegram.ui.ChatActivity$41 */
    /* loaded from: classes3.dex */
    public class AnonymousClass41 implements MessagesStorage.IntCallback {
        AnonymousClass41() {
            ChatActivity.this = r1;
        }

        @Override // org.telegram.messenger.MessagesStorage.IntCallback
        public void run(int i) {
            ChatActivity.this.jumpToDate(i);
        }
    }

    /* renamed from: org.telegram.ui.ChatActivity$42 */
    /* loaded from: classes3.dex */
    class AnonymousClass42 extends FrameLayout {
        /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
        AnonymousClass42(Context context) {
            super(context);
            ChatActivity.this = r1;
        }

        @Override // android.view.View
        public void onDraw(Canvas canvas) {
            int intrinsicHeight = Theme.chat_composeShadowDrawable.getIntrinsicHeight();
            Theme.chat_composeShadowDrawable.setBounds(0, 0, getMeasuredWidth(), intrinsicHeight);
            Theme.chat_composeShadowDrawable.draw(canvas);
            canvas.drawRect(0.0f, intrinsicHeight, getMeasuredWidth(), getMeasuredHeight(), ChatActivity.this.getThemedPaint("paintChatComposeBackground"));
        }
    }

    /* renamed from: org.telegram.ui.ChatActivity$43 */
    /* loaded from: classes3.dex */
    class AnonymousClass43 extends BlurredFrameLayout {
        /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
        AnonymousClass43(Context context, SizeNotifierFrameLayout sizeNotifierFrameLayout) {
            super(context, sizeNotifierFrameLayout);
            ChatActivity.this = r1;
        }

        @Override // android.widget.FrameLayout, android.view.View
        protected void onMeasure(int i, int i2) {
            ((FrameLayout.LayoutParams) ChatActivity.this.bottomOverlayChatText.getLayoutParams()).width = View.MeasureSpec.getSize(i);
            super.onMeasure(i, i2);
        }

        @Override // org.telegram.ui.Components.BlurredFrameLayout, android.view.ViewGroup, android.view.View
        public void dispatchDraw(Canvas canvas) {
            int intrinsicHeight = Theme.chat_composeShadowDrawable.getIntrinsicHeight();
            Theme.chat_composeShadowDrawable.setBounds(0, 0, getMeasuredWidth(), intrinsicHeight);
            Theme.chat_composeShadowDrawable.draw(canvas);
            if (!SharedConfig.chatBlurEnabled()) {
                canvas.drawRect(0.0f, intrinsicHeight, getMeasuredWidth(), getMeasuredHeight(), ChatActivity.this.getThemedPaint("paintChatComposeBackground"));
            } else {
                if (this.backgroundPaint == null) {
                    this.backgroundPaint = new Paint();
                }
                this.backgroundPaint.setColor(ChatActivity.this.getThemedColor("chat_messagePanelBackground"));
                Rect rect = AndroidUtilities.rectTmp2;
                rect.set(0, intrinsicHeight, getMeasuredWidth(), getMeasuredHeight());
                ChatActivity.this.contentView.drawBlurRect(canvas, getY(), rect, this.backgroundPaint, false);
            }
            super.dispatchDraw(canvas);
        }
    }

    public /* synthetic */ void lambda$createView$72(Context context, View view) {
        String str;
        if (getParentActivity() == null || this.pullingDownOffset != 0.0f) {
            return;
        }
        if (this.reportType >= 0) {
            showDialog(new AnonymousClass44(getParentActivity(), this.reportType));
            return;
        }
        boolean z = false;
        if (this.chatMode == 2) {
            finishFragment();
            ChatActivityDelegate chatActivityDelegate = this.chatActivityDelegate;
            if (this.bottomOverlayChatText.getTag() == null) {
                z = true;
            }
            chatActivityDelegate.onUnpin(true, z);
            return;
        }
        TLRPC$User tLRPC$User = this.currentUser;
        if (tLRPC$User != null && this.userBlocked) {
            if (tLRPC$User.bot) {
                String str2 = this.botUser;
                this.botUser = null;
                getMessagesController().unblockPeer(this.currentUser.id);
                if (str2 != null && str2.length() != 0) {
                    getMessagesController().sendBotStart(this.currentUser, str2);
                    return;
                } else {
                    getSendMessagesHelper().sendMessage("/start", this.dialog_id, null, null, null, false, null, null, null, true, 0, null);
                    return;
                }
            }
            AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity(), this.themeDelegate);
            builder.setMessage(LocaleController.getString("AreYouSureUnblockContact", 2131624480));
            builder.setPositiveButton(LocaleController.getString("OK", 2131627127), new ChatActivity$$ExternalSyntheticLambda31(this));
            builder.setTitle(LocaleController.getString("AppName", 2131624384));
            builder.setNegativeButton(LocaleController.getString("Cancel", 2131624832), null);
            showDialog(builder.create());
        } else if (UserObject.isReplyUser(tLRPC$User)) {
            toggleMute(true);
        } else {
            TLRPC$User tLRPC$User2 = this.currentUser;
            if (tLRPC$User2 != null && tLRPC$User2.bot && (str = this.botUser) != null) {
                if (str.length() != 0) {
                    getMessagesController().sendBotStart(this.currentUser, this.botUser);
                } else {
                    getSendMessagesHelper().sendMessage("/start", this.dialog_id, null, null, null, false, null, null, null, true, 0, null);
                }
                this.botUser = null;
                updateBottomOverlay();
                return;
            }
            if (ChatObject.isChannel(this.currentChat)) {
                TLRPC$Chat tLRPC$Chat = this.currentChat;
                if (!(tLRPC$Chat instanceof TLRPC$TL_channelForbidden)) {
                    if (ChatObject.isNotInChat(tLRPC$Chat)) {
                        if (this.currentChat.join_request) {
                            showBottomOverlayProgress(true, true);
                            MessagesController.getInstance(this.currentAccount).addUserToChat(this.currentChat.id, UserConfig.getInstance(this.currentAccount).getCurrentUser(), 0, null, null, true, new ChatActivity$$ExternalSyntheticLambda127(this), new ChatActivity$$ExternalSyntheticLambda212(this, context));
                            return;
                        }
                        Runnable runnable = this.chatInviteRunnable;
                        if (runnable != null) {
                            AndroidUtilities.cancelRunOnUIThread(runnable);
                            this.chatInviteRunnable = null;
                        }
                        showBottomOverlayProgress(true, true);
                        getMessagesController().addUserToChat(this.currentChat.id, getUserConfig().getCurrentUser(), 0, null, this, null);
                        NotificationCenter.getGlobalInstance().postNotificationName(NotificationCenter.closeSearchByActiveAction, new Object[0]);
                        if (!hasReportSpam() || this.reportSpamButton.getTag(2131230876) == null) {
                            return;
                        }
                        SharedPreferences.Editor edit = MessagesController.getNotificationsSettings(this.currentAccount).edit();
                        edit.putInt("dialog_bar_vis3" + this.dialog_id, 3).commit();
                        getNotificationCenter().postNotificationName(NotificationCenter.peerSettingsDidLoad, Long.valueOf(this.dialog_id));
                        return;
                    }
                    toggleMute(true);
                    return;
                }
            }
            TLRPC$ChatFull tLRPC$ChatFull = this.chatInfo;
            AlertsCreator.createClearOrDeleteDialogAlert(this, false, this.currentChat, this.currentUser, this.currentEncryptedChat != null, true, tLRPC$ChatFull != null && tLRPC$ChatFull.can_delete_channel, new ChatActivity$$ExternalSyntheticLambda213(this), this.themeDelegate);
        }
    }

    /* renamed from: org.telegram.ui.ChatActivity$44 */
    /* loaded from: classes3.dex */
    public class AnonymousClass44 extends ReportAlert {
        /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
        AnonymousClass44(Context context, int i) {
            super(context, i);
            ChatActivity.this = r1;
        }

        @Override // org.telegram.ui.Components.ReportAlert
        protected void onSend(int i, String str) {
            ArrayList arrayList = new ArrayList();
            for (int i2 = 0; i2 < ChatActivity.this.selectedMessagesIds[0].size(); i2++) {
                arrayList.add(Integer.valueOf(ChatActivity.this.selectedMessagesIds[0].keyAt(i2)));
            }
            ChatActivity chatActivity = ChatActivity.this;
            TLRPC$User tLRPC$User = chatActivity.currentUser;
            AlertsCreator.sendReport(tLRPC$User != null ? MessagesController.getInputPeer(tLRPC$User) : MessagesController.getInputPeer(chatActivity.currentChat), ChatActivity.this.reportType, str, arrayList);
            ChatActivity.this.finishFragment();
            ChatActivity.this.chatActivityDelegate.onReport();
        }
    }

    public /* synthetic */ void lambda$createView$68(DialogInterface dialogInterface, int i) {
        getMessagesController().unblockPeer(this.currentUser.id);
    }

    public /* synthetic */ void lambda$createView$69() {
        showBottomOverlayProgress(false, true);
    }

    public /* synthetic */ boolean lambda$createView$70(Context context, TLRPC$TL_error tLRPC$TL_error) {
        SharedPreferences.Editor edit = MessagesController.getNotificationsSettings(this.currentAccount).edit();
        edit.putLong("dialog_join_requested_time_" + this.dialog_id, System.currentTimeMillis()).commit();
        if (tLRPC$TL_error != null && "INVITE_REQUEST_SENT".equals(tLRPC$TL_error.text)) {
            JoinGroupAlert.showBulletin(context, this, ChatObject.isChannel(this.currentChat) && !this.currentChat.megagroup);
        }
        showBottomOverlayProgress(false, true);
        return false;
    }

    public /* synthetic */ void lambda$createView$71(boolean z) {
        NotificationCenter notificationCenter = getNotificationCenter();
        int i = NotificationCenter.closeChats;
        notificationCenter.removeObserver(this, i);
        getNotificationCenter().postNotificationName(i, new Object[0]);
        finishFragment();
        getNotificationCenter().postNotificationName(NotificationCenter.needDeleteDialog, Long.valueOf(this.dialog_id), this.currentUser, this.currentChat, Boolean.valueOf(z));
    }

    public /* synthetic */ void lambda$createView$73(View view) {
        this.undoView.showWithAction(this.dialog_id, 18, LocaleController.getString("BroadcastGroupInfo", 2131624772));
    }

    public /* synthetic */ void lambda$createView$74(View view) {
        int i;
        MessageObject messageObject = null;
        for (int i2 = 1; i2 >= 0; i2--) {
            if (messageObject == null && this.selectedMessagesIds[i2].size() != 0) {
                messageObject = this.messagesDict[i2].get(this.selectedMessagesIds[i2].keyAt(0));
            }
            this.selectedMessagesIds[i2].clear();
            this.selectedMessagesCanCopyIds[i2].clear();
            this.selectedMessagesCanStarIds[i2].clear();
        }
        hideActionMode();
        if (messageObject != null && ((i = messageObject.messageOwner.id) > 0 || (i < 0 && this.currentEncryptedChat != null))) {
            showFieldPanelForReply(messageObject);
        }
        updatePinnedMessageView(true);
        updateVisibleRows();
    }

    public /* synthetic */ void lambda$createView$75(View view) {
        openForward(false);
    }

    /* renamed from: org.telegram.ui.ChatActivity$45 */
    /* loaded from: classes3.dex */
    class AnonymousClass45 extends TextSelectionHelper.Callback {
        AnonymousClass45() {
            ChatActivity.this = r1;
        }

        @Override // org.telegram.ui.Cells.TextSelectionHelper.Callback
        public void onStateChanged(boolean z) {
            ChatActivity.this.swipeBackEnabled = !z;
            if (z) {
                if (ChatActivity.this.slidingView != null) {
                    ChatActivity.this.slidingView.setSlidingOffset(0.0f);
                    ChatActivity.this.slidingView = null;
                }
                ChatActivity.this.maybeStartTrackingSlidingView = false;
                ChatActivity.this.startedTrackingSlidingView = false;
                if (ChatActivity.this.textSelectionHint != null) {
                    ChatActivity.this.textSelectionHint.hide();
                }
            }
            ChatActivity.this.updatePagedownButtonVisibility(true);
        }

        @Override // org.telegram.ui.Cells.TextSelectionHelper.Callback
        public void onTextCopied() {
            if (((BaseFragment) ChatActivity.this).actionBar != null && ((BaseFragment) ChatActivity.this).actionBar.isActionModeShowed()) {
                ChatActivity.this.clearSelectionMode();
            }
            ChatActivity.this.undoView.showWithAction(0L, 58, (Runnable) null);
        }
    }

    /* renamed from: org.telegram.ui.ChatActivity$46 */
    /* loaded from: classes3.dex */
    class AnonymousClass46 extends PinchToZoomHelper {
        AnonymousClass46(ChatActivity chatActivity, ViewGroup viewGroup, ViewGroup viewGroup2) {
            super(viewGroup, viewGroup2);
        }

        @Override // org.telegram.ui.PinchToZoomHelper
        protected void drawOverlays(Canvas canvas, float f, float f2, float f3, float f4, float f5) {
            if (f > 0.0f) {
                View child = getChild();
                if (!(child instanceof ChatMessageCell)) {
                    return;
                }
                ChatMessageCell chatMessageCell = (ChatMessageCell) child;
                RectF rectF = AndroidUtilities.rectTmp;
                rectF.set(f2, (int) Math.max(f4, f3), chatMessageCell.getMeasuredWidth() + f2, (int) Math.min(f5, chatMessageCell.getMeasuredHeight() + f3));
                canvas.saveLayerAlpha(rectF, (int) (f * 255.0f), 31);
                canvas.translate(f2, f3);
                chatMessageCell.drawFromPinchToZoom = true;
                chatMessageCell.drawOverlays(canvas);
                if (chatMessageCell.shouldDrawTimeOnMedia() && chatMessageCell.getCurrentMessagesGroup() == null) {
                    chatMessageCell.drawTime(canvas, 1.0f, false);
                }
                chatMessageCell.drawFromPinchToZoom = false;
                canvas.restore();
            }
        }
    }

    /* renamed from: org.telegram.ui.ChatActivity$47 */
    /* loaded from: classes3.dex */
    class AnonymousClass47 implements PinchToZoomHelper.Callback {
        AnonymousClass47() {
            ChatActivity.this = r1;
        }

        @Override // org.telegram.ui.PinchToZoomHelper.Callback
        public TextureView getCurrentTextureView() {
            return ChatActivity.this.videoTextureView;
        }

        @Override // org.telegram.ui.PinchToZoomHelper.Callback
        public void onZoomStarted(MessageObject messageObject) {
            ChatActivity.this.chatListView.cancelClickRunnables(true);
            ChatActivity.this.chatListView.stopScroll();
            if (MediaController.getInstance().isPlayingMessage(messageObject)) {
                ChatActivity chatActivity = ChatActivity.this;
                chatActivity.contentView.removeView(chatActivity.videoPlayerContainer);
                ChatActivity.this.videoPlayerContainer = null;
                ChatActivity.this.videoTextureView = null;
                ChatActivity.this.aspectRatioFrameLayout = null;
            }
            for (int i = 0; i < ChatActivity.this.chatListView.getChildCount(); i++) {
                if (ChatActivity.this.chatListView.getChildAt(i) instanceof ChatMessageCell) {
                    ChatMessageCell chatMessageCell = (ChatMessageCell) ChatActivity.this.chatListView.getChildAt(i);
                    if (chatMessageCell.getMessageObject().getId() == messageObject.getId()) {
                        chatMessageCell.getPhotoImage().setVisible(false, true);
                    }
                }
            }
        }

        @Override // org.telegram.ui.PinchToZoomHelper.Callback
        public void onZoomFinished(MessageObject messageObject) {
            if (messageObject == null) {
                return;
            }
            if (MediaController.getInstance().isPlayingMessage(messageObject)) {
                for (int i = 0; i < ChatActivity.this.chatListView.getChildCount(); i++) {
                    if (ChatActivity.this.chatListView.getChildAt(i) instanceof ChatMessageCell) {
                        ChatMessageCell chatMessageCell = (ChatMessageCell) ChatActivity.this.chatListView.getChildAt(i);
                        if (chatMessageCell.getMessageObject().getId() == messageObject.getId()) {
                            AnimatedFileDrawable animation = chatMessageCell.getPhotoImage().getAnimation();
                            if (animation.isRunning()) {
                                animation.stop();
                            }
                            Bitmap animatedBitmap = animation.getAnimatedBitmap();
                            if (animatedBitmap != null) {
                                try {
                                    Bitmap videoBitmap = ChatActivity.this.pinchToZoomHelper.getVideoBitmap(animatedBitmap.getWidth(), animatedBitmap.getHeight());
                                    new Canvas(animatedBitmap).drawBitmap(videoBitmap, 0.0f, 0.0f, (Paint) null);
                                    videoBitmap.recycle();
                                } catch (Throwable th) {
                                    FileLog.e(th);
                                }
                            }
                        }
                    }
                }
                ChatActivity.this.createTextureView(true);
                MediaController.getInstance().setTextureView(ChatActivity.this.videoTextureView, ChatActivity.this.aspectRatioFrameLayout, ChatActivity.this.videoPlayerContainer, true);
            }
            ChatActivity.this.chatListView.invalidate();
        }
    }

    public /* synthetic */ void lambda$createView$76(float[] fArr) {
        fArr[1] = this.chatListView.getBottom() - this.blurredViewBottomOffset;
        fArr[0] = (this.chatListView.getTop() + this.chatListViewPaddingTop) - AndroidUtilities.dp(4.0f);
    }

    /* renamed from: org.telegram.ui.ChatActivity$48 */
    /* loaded from: classes3.dex */
    class AnonymousClass48 extends EmojiAnimationsOverlay {
        /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
        AnonymousClass48(ChatActivity chatActivity, FrameLayout frameLayout, RecyclerListView recyclerListView, int i, long j, int i2) {
            super(chatActivity, frameLayout, recyclerListView, i, j, i2);
            ChatActivity.this = r10;
        }

        @Override // org.telegram.ui.EmojiAnimationsOverlay
        public void onAllEffectsEnd() {
            ChatActivity.this.updateMessagesVisiblePart(false);
        }
    }

    private void playReactionAnimation(Integer num) {
        ChatMessageCell findMessageCell;
        if (this.fragmentView == null || (findMessageCell = findMessageCell(num.intValue(), false)) == null) {
            return;
        }
        TLRPC$TL_messagePeerReaction randomUnreadReaction = findMessageCell.getMessageObject().getRandomUnreadReaction();
        if (randomUnreadReaction != null && findMessageCell.reactionsLayoutInBubble.hasUnreadReactions) {
            ReactionsEffectOverlay.show(this, null, findMessageCell, 0.0f, 0.0f, randomUnreadReaction.reaction, this.currentAccount, !randomUnreadReaction.big ? 1 : 0);
            ReactionsEffectOverlay.startAnimation();
        }
        findMessageCell.markReactionsAsRead();
    }

    public void dimBehindView(View view, boolean z) {
        this.scrimView = view;
        dimBehindView(z ? 0.2f : 0.0f, (view == this.reactionsMentiondownButton || view == this.mentiondownButton) ? false : true);
    }

    private void dimBehindView(View view, float f) {
        this.scrimView = view;
        dimBehindView(f, (view == this.reactionsMentiondownButton || view == this.mentiondownButton) ? false : true);
    }

    public void dimBehindView(boolean z) {
        dimBehindView(z ? 0.2f : 0.0f, true);
    }

    private void dimBehindView(float f, boolean z) {
        ValueAnimator valueAnimator;
        boolean z2 = f > 0.0f;
        View view = this.scrimView;
        if (view instanceof ChatMessageCell) {
            ChatMessageCell chatMessageCell = (ChatMessageCell) view;
            chatMessageCell.setInvalidatesParent(z2);
            if (z2) {
                restartSticker(chatMessageCell);
            }
        }
        this.contentView.invalidate();
        this.chatListView.invalidate();
        AnimatorSet animatorSet = this.scrimAnimatorSet;
        if (animatorSet != null) {
            animatorSet.removeAllListeners();
            this.scrimAnimatorSet.cancel();
        }
        this.scrimAnimatorSet = new AnimatorSet();
        ArrayList arrayList = new ArrayList();
        float f2 = 1.0f;
        if (z2) {
            this.scrimViewAlpha = 1.0f;
            ValueAnimator valueAnimator2 = this.scrimViewAlphaAnimator;
            if (valueAnimator2 != null) {
                valueAnimator2.cancel();
            }
            valueAnimator = ValueAnimator.ofFloat(0.0f, f);
            arrayList.add(valueAnimator);
        } else {
            valueAnimator = ValueAnimator.ofFloat(this.scrimPaintAlpha, 0.0f);
            arrayList.add(valueAnimator);
        }
        valueAnimator.addUpdateListener(new ChatActivity$$ExternalSyntheticLambda7(this));
        if (!z2 || z) {
            FrameLayout frameLayout = this.pagedownButton;
            if (frameLayout != null) {
                Property property = View.ALPHA;
                float[] fArr = new float[1];
                fArr[0] = z2 ? 0.0f : 1.0f;
                arrayList.add(ObjectAnimator.ofFloat(frameLayout, property, fArr));
            }
            FrameLayout frameLayout2 = this.mentiondownButton;
            if (frameLayout2 != null) {
                Property property2 = View.ALPHA;
                float[] fArr2 = new float[1];
                fArr2[0] = z2 ? 0.0f : 1.0f;
                arrayList.add(ObjectAnimator.ofFloat(frameLayout2, property2, fArr2));
            }
            FrameLayout frameLayout3 = this.reactionsMentiondownButton;
            if (frameLayout3 != null) {
                Property property3 = View.ALPHA;
                float[] fArr3 = new float[1];
                if (z2) {
                    f2 = 0.0f;
                }
                fArr3[0] = f2;
                arrayList.add(ObjectAnimator.ofFloat(frameLayout3, property3, fArr3));
            }
        }
        this.scrimAnimatorSet.playTogether(arrayList);
        this.scrimAnimatorSet.setDuration(z2 ? 150L : 220L);
        this.scrimAnimatorSet.addListener(new AnonymousClass49(z2));
        if (this.scrimView != null && this.scrimViewAlpha <= 0.0f) {
            this.scrimView = null;
        }
        this.scrimAnimatorSet.start();
    }

    public /* synthetic */ void lambda$dimBehindView$77(ValueAnimator valueAnimator) {
        this.scrimPaintAlpha = ((Float) valueAnimator.getAnimatedValue()).floatValue();
        View view = this.fragmentView;
        if (view != null) {
            view.invalidate();
        }
    }

    /* renamed from: org.telegram.ui.ChatActivity$49 */
    /* loaded from: classes3.dex */
    public class AnonymousClass49 extends AnimatorListenerAdapter {
        final /* synthetic */ boolean val$enable;

        AnonymousClass49(boolean z) {
            ChatActivity.this = r1;
            this.val$enable = z;
        }

        @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
        public void onAnimationEnd(Animator animator) {
            if (!this.val$enable) {
                ChatActivity.this.scrimView = null;
                ChatActivity.this.scrimViewReaction = null;
                ChatActivity.this.contentView.invalidate();
                ChatActivity.this.chatListView.invalidate();
            }
        }
    }

    /* loaded from: classes3.dex */
    public class PinnedMessageButton extends TextView {
        public PinnedMessageButton(ChatActivity chatActivity, Context context) {
            super(context);
            setSingleLine(true);
            setLines(1);
            setMaxLines(1);
            setEllipsize(TextUtils.TruncateAt.END);
            setTextColor(chatActivity.getThemedColor("featuredStickers_buttonText"));
            setBackground(Theme.AdaptiveRipple.filledRect(chatActivity.getThemedColor("featuredStickers_addButton"), 16.0f));
            setTextSize(1, 14.0f);
            setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
            setGravity(17);
            setPadding(AndroidUtilities.dp(14.0f), 0, AndroidUtilities.dp(14.0f), 0);
        }

        @Override // android.widget.TextView, android.view.View
        protected void onMeasure(int i, int i2) {
            super.onMeasure(View.MeasureSpec.makeMeasureSpec(Math.min(View.MeasureSpec.getSize(i), (int) (AndroidUtilities.displaySize.x * 0.45f)), Integer.MIN_VALUE), i2);
        }
    }

    public void updatePagedownButtonsPosition() {
        float animatedTop = this.chatActivityEnterView.getAnimatedTop() + this.chatActivityEnterView.getTranslationY() + (this.chatActivityEnterTopView.getVisibility() == 0 ? this.chatActivityEnterTopView.getTranslationY() : 0.0f);
        FrameLayout frameLayout = this.pagedownButton;
        if (frameLayout != null) {
            frameLayout.setTranslationY((AndroidUtilities.dp(100.0f) * (1.0f - this.pagedownButtonEnterProgress)) + animatedTop);
        }
        FrameLayout frameLayout2 = this.mentiondownButton;
        if (frameLayout2 != null) {
            frameLayout2.setTranslationY(((AndroidUtilities.dp(100.0f) * (1.0f - this.mentionsButtonEnterProgress)) + animatedTop) - ((AndroidUtilities.dp(72.0f) * this.pagedownButtonEnterProgress) * this.mentionsButtonEnterProgress));
        }
        FrameLayout frameLayout3 = this.reactionsMentiondownButton;
        if (frameLayout3 != null) {
            frameLayout3.setTranslationY((animatedTop + (AndroidUtilities.dp(100.0f) * (1.0f - this.reactionsMentionButtonEnterProgress))) - ((((AndroidUtilities.dp(50.0f) + (AndroidUtilities.dp(22.0f) * this.pagedownButtonCounter.getEnterProgress())) * this.pagedownButtonEnterProgress) + (AndroidUtilities.dp(72.0f) * this.mentionsButtonEnterProgress)) * this.reactionsMentionButtonEnterProgress));
        }
    }

    private void updateReactionsMentionButton(boolean z) {
        if (this.reactionsMentiondownButtonCounter == null || getParentActivity() == null) {
            return;
        }
        int i = this.reactionsMentionCount;
        boolean z2 = i > 0 && this.chatMode == 0;
        this.reactionsMentiondownButtonCounter.setCount(i, z);
        if (z2 && this.reactionsMentiondownButton.getTag() == null) {
            this.reactionsMentiondownButton.setTag(1);
            ValueAnimator valueAnimator = this.reactionsMentionButtonAnimation;
            if (valueAnimator != null) {
                valueAnimator.removeAllListeners();
                this.reactionsMentionButtonAnimation.cancel();
                this.reactionsMentionButtonAnimation = null;
            }
            if (z) {
                this.reactionsMentiondownButton.setVisibility(0);
                ValueAnimator ofFloat = ValueAnimator.ofFloat(this.reactionsMentionButtonEnterProgress, 1.0f);
                this.reactionsMentionButtonAnimation = ofFloat;
                ofFloat.addUpdateListener(new ChatActivity$$ExternalSyntheticLambda9(this));
                this.reactionsMentionButtonAnimation.addListener(new AnonymousClass50());
                this.reactionsMentionButtonAnimation.setDuration(200L);
                this.reactionsMentionButtonAnimation.start();
                return;
            }
            this.reactionsMentiondownButton.setVisibility(0);
            this.reactionsMentionButtonEnterProgress = 1.0f;
            this.contentView.invalidate();
        } else if (z2 || this.reactionsMentiondownButton.getTag() == null) {
        } else {
            this.reactionsMentiondownButton.setTag(null);
            ValueAnimator valueAnimator2 = this.reactionsMentionButtonAnimation;
            if (valueAnimator2 != null) {
                valueAnimator2.removeAllListeners();
                this.reactionsMentionButtonAnimation.cancel();
                this.reactionsMentionButtonAnimation = null;
            }
            if (z) {
                this.reactionsMentiondownButton.setVisibility(0);
                ValueAnimator ofFloat2 = ValueAnimator.ofFloat(this.reactionsMentionButtonEnterProgress, 0.0f);
                this.reactionsMentionButtonAnimation = ofFloat2;
                ofFloat2.addUpdateListener(new ChatActivity$$ExternalSyntheticLambda13(this));
                this.reactionsMentionButtonAnimation.addListener(new AnonymousClass51());
                this.reactionsMentionButtonAnimation.setDuration(200L);
                this.reactionsMentionButtonAnimation.start();
                return;
            }
            this.reactionsMentiondownButton.setVisibility(4);
            this.reactionsMentionButtonEnterProgress = 0.0f;
            this.contentView.invalidate();
        }
    }

    public /* synthetic */ void lambda$updateReactionsMentionButton$78(ValueAnimator valueAnimator) {
        this.reactionsMentionButtonEnterProgress = ((Float) valueAnimator.getAnimatedValue()).floatValue();
        this.contentView.invalidate();
    }

    /* renamed from: org.telegram.ui.ChatActivity$50 */
    /* loaded from: classes3.dex */
    public class AnonymousClass50 extends AnimatorListenerAdapter {
        AnonymousClass50() {
            ChatActivity.this = r1;
        }

        @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
        public void onAnimationEnd(Animator animator) {
            ChatActivity.this.reactionsMentionButtonEnterProgress = 1.0f;
            ChatActivity.this.contentView.invalidate();
        }
    }

    public /* synthetic */ void lambda$updateReactionsMentionButton$79(ValueAnimator valueAnimator) {
        this.reactionsMentionButtonEnterProgress = ((Float) valueAnimator.getAnimatedValue()).floatValue();
        this.contentView.invalidate();
    }

    /* renamed from: org.telegram.ui.ChatActivity$51 */
    /* loaded from: classes3.dex */
    public class AnonymousClass51 extends AnimatorListenerAdapter {
        AnonymousClass51() {
            ChatActivity.this = r1;
        }

        @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
        public void onAnimationEnd(Animator animator) {
            ChatActivity.this.reactionsMentiondownButton.setVisibility(4);
            ChatActivity.this.reactionsMentionButtonEnterProgress = 0.0f;
            ChatActivity.this.contentView.invalidate();
        }
    }

    /* renamed from: org.telegram.ui.ChatActivity$52 */
    /* loaded from: classes3.dex */
    public class AnonymousClass52 extends ForwardingPreviewView {
        final /* synthetic */ boolean val$keyboardVisible;

        /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
        AnonymousClass52(Context context, ForwardingMessagesParams forwardingMessagesParams, TLRPC$User tLRPC$User, TLRPC$Chat tLRPC$Chat, int i, ForwardingPreviewView.ResourcesDelegate resourcesDelegate, boolean z) {
            super(context, forwardingMessagesParams, tLRPC$User, tLRPC$Chat, i, resourcesDelegate);
            ChatActivity.this = r8;
            this.val$keyboardVisible = z;
        }

        @Override // org.telegram.ui.Components.ForwardingPreviewView
        protected void onDismiss(boolean z) {
            ChatActivity.this.checkShowBlur(true);
            if (ChatActivity.this.forwardingMessages != null) {
                ArrayList<MessageObject> arrayList = new ArrayList<>();
                ChatActivity.this.forwardingMessages.getSelectedMessages(arrayList);
                ChatActivity.this.showFieldPanelForForward(true, arrayList);
            }
            if (this.val$keyboardVisible && z) {
                AndroidUtilities.runOnUIThread(new ChatActivity$52$$ExternalSyntheticLambda0(this), 50L);
            }
            AndroidUtilities.requestAdjustResize(ChatActivity.this.getParentActivity(), ((BaseFragment) ChatActivity.this).classGuid);
        }

        public /* synthetic */ void lambda$onDismiss$0() {
            ChatActivityEnterView chatActivityEnterView = ChatActivity.this.chatActivityEnterView;
            if (chatActivityEnterView != null) {
                chatActivityEnterView.openKeyboard();
            }
        }

        @Override // org.telegram.ui.Components.ForwardingPreviewView
        public void selectAnotherChat() {
            super.selectAnotherChat();
            dismiss(false);
            if (ChatActivity.this.forwardingMessages != null) {
                int size = ChatActivity.this.forwardingMessages.messages.size();
                int i = 0;
                boolean z = false;
                for (int i2 = 0; i2 < size; i2++) {
                    MessageObject messageObject = ChatActivity.this.forwardingMessages.messages.get(i2);
                    if (messageObject.isPoll()) {
                        if (i != 2) {
                            i = messageObject.isPublicPoll() ? 2 : 1;
                        }
                    } else if (messageObject.isInvoice()) {
                        z = true;
                    }
                    ChatActivity.this.selectedMessagesIds[0].put(messageObject.getId(), messageObject);
                }
                Bundle bundle = new Bundle();
                bundle.putBoolean("onlySelect", true);
                bundle.putInt("dialogsType", 3);
                bundle.putInt("hasPoll", i);
                bundle.putBoolean("hasInvoice", z);
                bundle.putInt("messagesCount", ChatActivity.this.forwardingMessages.messages.size());
                DialogsActivity dialogsActivity = new DialogsActivity(bundle);
                dialogsActivity.setDelegate(ChatActivity.this);
                ChatActivity.this.presentFragment(dialogsActivity);
            }
        }

        @Override // org.telegram.ui.Components.ForwardingPreviewView
        public void didSendPressed() {
            super.didSendPressed();
            dismiss(true);
            ChatActivity.this.chatActivityEnterView.getSendButton().callOnClick();
        }
    }

    private void openForwardingPreview() {
        TLRPC$TL_channels_sendAsPeers tLRPC$TL_channels_sendAsPeers;
        boolean isKeyboardVisible = this.chatActivityEnterView.isKeyboardVisible();
        this.forwardingPreviewView = new AnonymousClass52(this.contentView.getContext(), this.forwardingMessages, this.currentUser, this.currentChat, this.currentAccount, this.themeDelegate, isKeyboardVisible);
        TLRPC$ChatFull tLRPC$ChatFull = this.chatInfo;
        TLRPC$Peer tLRPC$Peer = tLRPC$ChatFull != null ? tLRPC$ChatFull.default_send_as : null;
        if (tLRPC$Peer == null && (tLRPC$TL_channels_sendAsPeers = this.sendAsPeersObj) != null && !tLRPC$TL_channels_sendAsPeers.peers.isEmpty()) {
            tLRPC$Peer = this.sendAsPeersObj.peers.get(0);
        }
        this.forwardingPreviewView.setSendAsPeer(tLRPC$Peer);
        checkShowBlur(true);
        this.contentView.addView(this.forwardingPreviewView);
        if (isKeyboardVisible) {
            this.chatActivityEnterView.showEmojiView();
            this.openKeyboardOnAttachMenuClose = true;
        }
        AndroidUtilities.setAdjustResizeToNothing(getParentActivity(), this.classGuid);
        this.fragmentView.requestLayout();
    }

    public void animateToNextChat() {
        if (this.pullingDownDrawable == null) {
            return;
        }
        addToPulledDialogsMyself();
        ChatPullingDownDrawable chatPullingDownDrawable = this.pullingDownDrawable;
        addToPulledDialogs(chatPullingDownDrawable.nextChat, chatPullingDownDrawable.nextDialogId, chatPullingDownDrawable.dialogFolderId, chatPullingDownDrawable.dialogFilterId);
        Bundle bundle = new Bundle();
        bundle.putLong("chat_id", this.pullingDownDrawable.getChatId());
        bundle.putInt("dialog_folder_id", this.pullingDownDrawable.dialogFolderId);
        bundle.putInt("dialog_filter_id", this.pullingDownDrawable.dialogFilterId);
        bundle.putBoolean("pulled", true);
        SharedPreferences.Editor edit = MessagesController.getNotificationsSettings(this.currentAccount).edit();
        edit.remove("diditem" + this.pullingDownDrawable.nextDialogId).apply();
        ChatActivity chatActivity = new ChatActivity(bundle);
        chatActivity.setPullingDownTransition(true);
        replacingChatActivity = true;
        presentFragment(chatActivity, true);
    }

    private void addToPulledDialogsMyself() {
        if (getParentLayout() == null) {
            return;
        }
        BackButtonMenu.addToPulledDialogs(this, getParentLayout().fragmentsStack.indexOf(this), this.currentChat, this.currentUser, this.dialog_id, this.dialogFilterId, this.dialogFolderId);
    }

    private void addToPulledDialogs(TLRPC$Chat tLRPC$Chat, long j, int i, int i2) {
        if (getParentLayout() == null) {
            return;
        }
        BackButtonMenu.addToPulledDialogs(this, getParentLayout().fragmentsStack.indexOf(this), tLRPC$Chat, null, j, i, i2);
    }

    private void setPullingDownTransition(boolean z) {
        this.fromPullingDownTransition = z;
    }

    public void updateBulletinLayout() {
        Bulletin visibleBulletin = Bulletin.getVisibleBulletin();
        if (visibleBulletin == null || this.bulletinDelegate == null) {
            return;
        }
        visibleBulletin.updatePosition();
    }

    private void searchUserMessages(TLRPC$User tLRPC$User, TLRPC$Chat tLRPC$Chat) {
        String str;
        this.searchingUserMessages = tLRPC$User;
        this.searchingChatMessages = tLRPC$Chat;
        if (this.searchItem == null || this.mentionContainer == null) {
            return;
        }
        if (tLRPC$User == null && tLRPC$Chat == null) {
            return;
        }
        if (tLRPC$User != null) {
            str = tLRPC$User.first_name;
            if (TextUtils.isEmpty(str)) {
                str = this.searchingUserMessages.last_name;
            }
        } else {
            str = tLRPC$Chat.title;
        }
        if (str == null) {
            return;
        }
        if (str.length() > 10) {
            str = str.substring(0, 10);
        }
        this.searchingForUser = false;
        String string = LocaleController.getString("SearchFrom", 2131628173);
        SpannableString spannableString = new SpannableString(string + " " + str);
        spannableString.setSpan(new ForegroundColorSpan(getThemedColor("actionBarDefaultSubtitle")), string.length() + 1, spannableString.length(), 33);
        this.searchItem.setSearchFieldCaption(spannableString);
        this.mentionContainer.getAdapter().searchUsernameOrHashtag(null, 0, null, false, true);
        this.searchItem.setSearchFieldHint(null);
        this.searchItem.clearSearchText();
        getMediaDataController().searchMessagesInChat("", this.dialog_id, this.mergeDialogId, this.classGuid, 0, this.threadMessageId, this.searchingUserMessages, this.searchingChatMessages);
    }

    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Type inference failed for: r0v16, types: [java.lang.CharSequence] */
    private void updateInfoTopView(boolean z) {
        View.OnClickListener onClickListener;
        ChatActivity$$ExternalSyntheticLambda61 chatActivity$$ExternalSyntheticLambda61;
        String str;
        int i;
        TLRPC$User tLRPC$User;
        if (this.contentView == null) {
            return;
        }
        SharedPreferences notificationsSettings = MessagesController.getNotificationsSettings(this.currentAccount);
        int i2 = notificationsSettings.getInt("dialog_bar_distance" + this.dialog_id, -1);
        this.distanceToPeer = i2;
        String str2 = null;
        if (i2 >= 0 && (tLRPC$User = this.currentUser) != null) {
            str2 = LocaleController.formatString("ChatDistanceToPeer", 2131625018, tLRPC$User.first_name, LocaleController.formatDistance(i2, 0));
            onClickListener = new ChatActivity$$ExternalSyntheticLambda69(this);
        } else {
            if (this.currentChat != null && this.chatInviterId != 0) {
                StringBuilder sb = new StringBuilder();
                sb.append("dialog_bar_vis3");
                sb.append(this.dialog_id);
                boolean z2 = notificationsSettings.getInt(sb.toString(), 0) == 2;
                boolean z3 = notificationsSettings.getBoolean("dialog_bar_report" + this.dialog_id, false);
                boolean z4 = notificationsSettings.getBoolean("dialog_bar_block" + this.dialog_id, false);
                if (z2 && (z3 || z4)) {
                    TLRPC$User user = getMessagesController().getUser(Long.valueOf(this.chatInviterId));
                    if (user != null) {
                        if (!ChatObject.isChannel(this.currentChat) || this.currentChat.megagroup) {
                            i = 2131624224;
                            str = "ActionUserInvitedToGroup";
                        } else {
                            i = 2131624223;
                            str = "ActionUserInvitedToChannel";
                        }
                        ?? replaceWithLink = MessageObject.replaceWithLink(LocaleController.getString(str, i), "un1", user);
                        chatActivity$$ExternalSyntheticLambda61 = new ChatActivity$$ExternalSyntheticLambda61(this);
                        str2 = replaceWithLink;
                    } else {
                        chatActivity$$ExternalSyntheticLambda61 = null;
                    }
                    onClickListener = chatActivity$$ExternalSyntheticLambda61;
                } else {
                    hideInfoView();
                }
            }
            onClickListener = null;
        }
        if (str2 == null) {
            return;
        }
        Animator animator = this.infoTopViewAnimator;
        if (animator != null) {
            animator.cancel();
        }
        if (this.infoTopView == null) {
            ChatActionCell chatActionCell = new ChatActionCell(this.contentView.getContext(), false, this.themeDelegate);
            this.infoTopView = chatActionCell;
            chatActionCell.setCustomText(str2);
            this.infoTopView.setInvalidateColors(true);
            this.infoTopView.setOnClickListener(onClickListener);
            this.contentView.addView(this.infoTopView, LayoutHelper.createFrame(-2, -2.0f, 49, 0.0f, 0.0f, 0.0f, 0.0f));
        }
        if (z) {
            if (this.infoTopView.getTag() != null) {
                return;
            }
            ValueAnimator ofFloat = ValueAnimator.ofFloat(0.0f, 1.0f);
            this.infoTopView.setTag(1);
            this.infoTopView.setAlpha(0.0f);
            ofFloat.addUpdateListener(new ChatActivity$$ExternalSyntheticLambda16(this, this.infoTopView));
            ofFloat.addListener(new AnonymousClass53());
            ofFloat.setDuration(150L);
            this.infoTopViewAnimator = ofFloat;
            ofFloat.start();
            return;
        }
        this.infoTopView.setTag(1);
        this.topViewOffset = AndroidUtilities.dp(30.0f);
        invalidateChatListViewTopPadding();
    }

    public /* synthetic */ void lambda$updateInfoTopView$80(View view) {
        presentFragment(new PeopleNearbyActivity());
    }

    public /* synthetic */ void lambda$updateInfoTopView$81(View view) {
        Bundle bundle = new Bundle();
        bundle.putLong("user_id", this.chatInviterId);
        presentFragment(new ProfileActivity(bundle));
    }

    public /* synthetic */ void lambda$updateInfoTopView$82(View view, ValueAnimator valueAnimator) {
        float floatValue = ((Float) valueAnimator.getAnimatedValue()).floatValue();
        this.topViewOffset = AndroidUtilities.dp(30.0f) * floatValue;
        invalidateChatListViewTopPadding();
        view.setAlpha(floatValue);
    }

    /* renamed from: org.telegram.ui.ChatActivity$53 */
    /* loaded from: classes3.dex */
    public class AnonymousClass53 extends AnimatorListenerAdapter {
        AnonymousClass53() {
            ChatActivity.this = r1;
        }

        @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
        public void onAnimationEnd(Animator animator) {
            ChatActivity.this.topViewOffset = AndroidUtilities.dp(30.0f);
            ChatActivity.this.invalidateChatListViewTopPadding();
        }
    }

    private void openAnotherForward() {
        ArrayList<MessageObject> arrayList;
        String str;
        ForwardingMessagesParams forwardingMessagesParams = this.forwardingMessages;
        if (forwardingMessagesParams == null || (arrayList = forwardingMessagesParams.messages) == null) {
            return;
        }
        int size = arrayList.size();
        long j = 0;
        long j2 = 0;
        for (int i = 0; i < size; i++) {
            MessageObject messageObject = this.forwardingMessages.messages.get(i);
            if (j == 0) {
                j2 = messageObject.getDialogId();
                j = messageObject.getFromChatId();
            } else if (j != messageObject.getFromChatId()) {
                break;
            }
        }
        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity(), this.themeDelegate);
        builder.setButtonsVertical(true);
        if (j2 > 0) {
            TLRPC$User user = getMessagesController().getUser(Long.valueOf(j2));
            if (user == null) {
                return;
            }
            str = LocaleController.formatString("CancelForwardPrivate", 2131624840, LocaleController.formatPluralString("MessagesBold", this.forwardingMessages.messages.size(), new Object[0]), ContactsController.formatName(user.first_name, user.last_name));
        } else {
            TLRPC$Chat chat = getMessagesController().getChat(Long.valueOf(-j2));
            if (chat == null) {
                return;
            }
            str = LocaleController.formatString("CancelForwardChat", 2131624838, LocaleController.formatPluralString("MessagesBold", this.forwardingMessages.messages.size(), new Object[0]), chat.title);
        }
        builder.setMessage(AndroidUtilities.replaceTags(str));
        builder.setTitle(LocaleController.formatPluralString("messages", this.forwardingMessages.messages.size(), new Object[0]));
        builder.setPositiveButton(LocaleController.getString("CancelForwarding", 2131624841), new ChatActivity$$ExternalSyntheticLambda28(this));
        builder.setNegativeButton(LocaleController.getString("ShowForwardingOptions", 2131628400), new ChatActivity$$ExternalSyntheticLambda32(this));
        AlertDialog create = builder.create();
        showDialog(create);
        TextView textView = (TextView) create.getButton(-1);
        if (textView == null) {
            return;
        }
        textView.setTextColor(getThemedColor("dialogTextRed2"));
    }

    public /* synthetic */ void lambda$openAnotherForward$83(DialogInterface dialogInterface, int i) {
        if (this.forwardingMessages != null) {
            this.forwardingMessages = null;
        }
        showFieldPanel(false, null, null, null, this.foundWebPage, true, 0, true, true);
    }

    public /* synthetic */ void lambda$openAnotherForward$84(DialogInterface dialogInterface, int i) {
        openForwardingPreview();
    }

    public void openPinnedMessagesList(boolean z) {
        ActionBarLayout actionBarLayout;
        if (getParentActivity() == null || (actionBarLayout = this.parentLayout) == null || actionBarLayout.getLastFragment() != this || this.pinnedMessageIds.isEmpty()) {
            return;
        }
        Bundle bundle = new Bundle();
        TLRPC$Chat tLRPC$Chat = this.currentChat;
        if (tLRPC$Chat != null) {
            bundle.putLong("chat_id", tLRPC$Chat.id);
        } else {
            bundle.putLong("user_id", this.currentUser.id);
        }
        bundle.putInt("chatMode", 2);
        ChatActivity chatActivity = new ChatActivity(bundle);
        chatActivity.pinnedMessageIds = new ArrayList<>(this.pinnedMessageIds);
        chatActivity.pinnedMessageObjects = new HashMap<>(this.pinnedMessageObjects);
        int size = this.pinnedMessageIds.size();
        for (int i = 0; i < size; i++) {
            Integer num = this.pinnedMessageIds.get(i);
            MessageObject messageObject = this.pinnedMessageObjects.get(num);
            MessageObject messageObject2 = this.messagesDict[0].get(num.intValue());
            if (messageObject == null) {
                messageObject = messageObject2;
            } else if (messageObject2 != null) {
                messageObject.mediaExists = messageObject2.mediaExists;
                messageObject.attachPathExists = messageObject2.attachPathExists;
            }
            if (messageObject != null) {
                chatActivity.pinnedMessageObjects.put(num, messageObject);
            }
        }
        chatActivity.loadedPinnedMessagesCount = this.loadedPinnedMessagesCount;
        chatActivity.totalPinnedMessagesCount = this.totalPinnedMessagesCount;
        chatActivity.pinnedEndReached = this.pinnedEndReached;
        chatActivity.userInfo = this.userInfo;
        chatActivity.chatInfo = this.chatInfo;
        chatActivity.chatActivityDelegate = new AnonymousClass54();
        if (z) {
            presentFragmentAsPreview(chatActivity);
            checkShowBlur(true);
            return;
        }
        presentFragment(chatActivity, false);
    }

    /* renamed from: org.telegram.ui.ChatActivity$54 */
    /* loaded from: classes3.dex */
    public class AnonymousClass54 implements ChatActivityDelegate {
        @Override // org.telegram.ui.ChatActivity.ChatActivityDelegate
        public /* synthetic */ void onReport() {
            ChatActivityDelegate.CC.$default$onReport(this);
        }

        AnonymousClass54() {
            ChatActivity.this = r1;
        }

        @Override // org.telegram.ui.ChatActivity.ChatActivityDelegate
        public void openReplyMessage(int i) {
            ChatActivity.this.scrollToMessageId(i, 0, true, 0, true, 0);
        }

        @Override // org.telegram.ui.ChatActivity.ChatActivityDelegate
        public void openSearch(String str) {
            ChatActivity.this.openSearchWithText(str);
        }

        @Override // org.telegram.ui.ChatActivity.ChatActivityDelegate
        public void onUnpin(boolean z, boolean z2) {
            if (!z) {
                MessageObject messageObject = (MessageObject) ChatActivity.this.pinnedMessageObjects.get(Integer.valueOf(ChatActivity.this.currentPinnedMessageId));
                if (messageObject == null) {
                    messageObject = (MessageObject) ChatActivity.this.messagesDict[0].get(ChatActivity.this.currentPinnedMessageId);
                }
                ChatActivity.this.unpinMessage(messageObject);
                return;
            }
            ArrayList arrayList = new ArrayList(ChatActivity.this.pinnedMessageIds);
            ArrayList arrayList2 = new ArrayList(ChatActivity.this.pinnedMessageObjects.values());
            if (z2) {
                SharedPreferences.Editor edit = MessagesController.getNotificationsSettings(((BaseFragment) ChatActivity.this).currentAccount).edit();
                edit.putInt("pin_" + ChatActivity.this.dialog_id, ((Integer) ChatActivity.this.pinnedMessageIds.get(0)).intValue()).commit();
                ChatActivity.this.updatePinnedMessageView(true);
            } else {
                ChatActivity.this.getNotificationCenter().postNotificationName(NotificationCenter.didLoadPinnedMessages, Long.valueOf(ChatActivity.this.dialog_id), arrayList, Boolean.FALSE, null, null, 0, 0, Boolean.TRUE);
            }
            if (ChatActivity.this.pinBulletin != null) {
                ChatActivity.this.pinBulletin.hide();
            }
            ChatActivity.this.showPinBulletin = true;
            int access$31704 = ChatActivity.access$31704(ChatActivity.this);
            int pinnedMessagesCount = ChatActivity.this.getPinnedMessagesCount();
            ChatActivity chatActivity = ChatActivity.this;
            chatActivity.pinBulletin = BulletinFactory.createUnpinAllMessagesBulletin(chatActivity, pinnedMessagesCount, z2, new ChatActivity$54$$ExternalSyntheticLambda1(this, z2, arrayList, arrayList2, pinnedMessagesCount, access$31704), new ChatActivity$54$$ExternalSyntheticLambda0(this, z2, access$31704), ChatActivity.this.themeDelegate);
        }

        public /* synthetic */ void lambda$onUnpin$0(boolean z, ArrayList arrayList, ArrayList arrayList2, int i, int i2) {
            if (z) {
                SharedPreferences.Editor edit = MessagesController.getNotificationsSettings(((BaseFragment) ChatActivity.this).currentAccount).edit();
                edit.remove("pin_" + ChatActivity.this.dialog_id).commit();
                ChatActivity.this.updatePinnedMessageView(true);
            } else {
                ChatActivity.this.getNotificationCenter().postNotificationName(NotificationCenter.didLoadPinnedMessages, Long.valueOf(ChatActivity.this.dialog_id), arrayList, Boolean.TRUE, arrayList2, null, 0, Integer.valueOf(i), Boolean.valueOf(ChatActivity.this.pinnedEndReached));
            }
            if (i2 == ChatActivity.this.pinBullerinTag) {
                ChatActivity.this.pinBulletin = null;
            }
        }

        public /* synthetic */ void lambda$onUnpin$1(boolean z, int i) {
            if (!z) {
                MessagesController messagesController = ChatActivity.this.getMessagesController();
                ChatActivity chatActivity = ChatActivity.this;
                messagesController.unpinAllMessages(chatActivity.currentChat, chatActivity.currentUser);
            }
            if (i == ChatActivity.this.pinBullerinTag) {
                ChatActivity.this.pinBulletin = null;
            }
        }
    }

    public void checkShowBlur(boolean z) {
        BluredView bluredView;
        BluredView bluredView2;
        ForwardingPreviewView forwardingPreviewView;
        ActionBarLayout actionBarLayout = this.parentLayout;
        boolean z2 = (actionBarLayout != null && actionBarLayout.isInPreviewMode() && !this.inPreviewMode) || ((forwardingPreviewView = this.forwardingPreviewView) != null && forwardingPreviewView.isShowing());
        if (!z2 || !((bluredView2 = this.blurredView) == null || bluredView2.getTag() == null)) {
            if (z2 || (bluredView = this.blurredView) == null || bluredView.getTag() == null) {
                return;
            }
            this.blurredView.animate().setListener(null).cancel();
            this.blurredView.animate().setListener(new HideViewAfterAnimation(this.blurredView)).alpha(0.0f).start();
            this.blurredView.setTag(null);
            this.chatListView.invalidate();
            this.fragmentView.invalidate();
            return;
        }
        BluredView bluredView3 = this.blurredView;
        if (bluredView3 == null) {
            AnonymousClass55 anonymousClass55 = new AnonymousClass55(this.fragmentView.getContext(), this.fragmentView, this.themeDelegate);
            this.blurredView = anonymousClass55;
            this.contentView.addView(anonymousClass55, LayoutHelper.createFrame(-1, -1.0f));
        } else {
            if (this.contentView.indexOfChild(bluredView3) != this.contentView.getChildCount() - 1) {
                this.contentView.removeView(this.blurredView);
                this.contentView.addView(this.blurredView);
            }
            this.blurredView.update();
            this.blurredView.setVisibility(0);
        }
        this.blurredView.setAlpha(0.0f);
        this.blurredView.animate().setListener(null).cancel();
        this.blurredView.animate().alpha(1.0f).setListener(new AnonymousClass56()).start();
        this.blurredView.setTag(1);
    }

    /* renamed from: org.telegram.ui.ChatActivity$55 */
    /* loaded from: classes3.dex */
    public class AnonymousClass55 extends BluredView {
        /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
        AnonymousClass55(Context context, View view, Theme.ResourcesProvider resourcesProvider) {
            super(context, view, resourcesProvider);
            ChatActivity.this = r1;
        }

        @Override // android.view.View
        public void setAlpha(float f) {
            super.setAlpha(f);
            ((BaseFragment) ChatActivity.this).fragmentView.invalidate();
        }

        @Override // android.view.View
        public void setVisibility(int i) {
            super.setVisibility(i);
            ((BaseFragment) ChatActivity.this).fragmentView.invalidate();
        }
    }

    /* renamed from: org.telegram.ui.ChatActivity$56 */
    /* loaded from: classes3.dex */
    public class AnonymousClass56 extends AnimatorListenerAdapter {
        AnonymousClass56() {
            ChatActivity.this = r1;
        }

        @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
        public void onAnimationEnd(Animator animator) {
            super.onAnimationEnd(animator);
            ChatActivity.this.chatListView.invalidate();
            ((BaseFragment) ChatActivity.this).fragmentView.invalidate();
        }
    }

    @Override // org.telegram.ui.ActionBar.BaseFragment
    public int getPreviewHeight() {
        if (this.chatMode == 2 && this.messages.size() == 2) {
            return getHeightForMessage(this.messages.get(0)) + AndroidUtilities.dp(80.0f) + ActionBar.getCurrentActionBarHeight();
        }
        return super.getPreviewHeight();
    }

    private void showProgressView(boolean z) {
        FrameLayout frameLayout = this.progressView;
        if (frameLayout == null) {
            return;
        }
        int i = 0;
        if (this.fragmentOpened) {
            if (z == this.animateTo) {
                return;
            }
            this.animateTo = z;
            if (z) {
                if (frameLayout.getVisibility() != 0) {
                    this.progressView.setVisibility(0);
                    this.progressView.setAlpha(0.0f);
                    this.progressView.setScaleX(0.3f);
                    this.progressView.setScaleY(0.3f);
                }
                this.progressView.animate().setListener(null).cancel();
                this.progressView.animate().alpha(1.0f).scaleX(1.0f).scaleY(1.0f).setDuration(150L).start();
                return;
            }
            frameLayout.animate().setListener(null).cancel();
            this.progressView.animate().alpha(0.0f).scaleX(0.3f).scaleY(0.3f).setDuration(150L).setListener(new AnonymousClass57()).start();
            return;
        }
        this.animateTo = z;
        if (!z) {
            i = 4;
        }
        frameLayout.setVisibility(i);
    }

    /* renamed from: org.telegram.ui.ChatActivity$57 */
    /* loaded from: classes3.dex */
    public class AnonymousClass57 extends AnimatorListenerAdapter {
        AnonymousClass57() {
            ChatActivity.this = r1;
        }

        @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
        public void onAnimationEnd(Animator animator) {
            ChatActivity.this.progressView.setVisibility(4);
        }
    }

    private void hideInfoView() {
        if (this.distanceToPeer >= 0) {
            this.distanceToPeer = -1;
            SharedPreferences.Editor edit = MessagesController.getNotificationsSettings(this.currentAccount).edit();
            edit.putInt("dialog_bar_distance" + this.dialog_id, -2).commit();
        }
        Animator animator = this.infoTopViewAnimator;
        if (animator != null) {
            animator.cancel();
        }
        ChatActionCell chatActionCell = this.infoTopView;
        if (chatActionCell == null || chatActionCell.getTag() == null) {
            return;
        }
        this.infoTopView.setTag(null);
        ChatActionCell chatActionCell2 = this.infoTopView;
        ValueAnimator ofFloat = ValueAnimator.ofFloat(1.0f, 0.0f);
        ofFloat.addUpdateListener(new ChatActivity$$ExternalSyntheticLambda15(this, chatActionCell2));
        ofFloat.addListener(new AnonymousClass58(chatActionCell2));
        ofFloat.setDuration(150L);
        this.infoTopViewAnimator = ofFloat;
        ofFloat.start();
    }

    public /* synthetic */ void lambda$hideInfoView$85(View view, ValueAnimator valueAnimator) {
        float floatValue = ((Float) valueAnimator.getAnimatedValue()).floatValue();
        this.topViewOffset = AndroidUtilities.dp(30.0f) * floatValue;
        invalidateChatListViewTopPadding();
        invalidateMessagesVisiblePart();
        view.setAlpha(floatValue);
    }

    /* renamed from: org.telegram.ui.ChatActivity$58 */
    /* loaded from: classes3.dex */
    public class AnonymousClass58 extends AnimatorListenerAdapter {
        final /* synthetic */ View val$topViewFinal;

        AnonymousClass58(View view) {
            ChatActivity.this = r1;
            this.val$topViewFinal = view;
        }

        @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
        public void onAnimationEnd(Animator animator) {
            ChatActivity.this.topViewOffset = 0.0f;
            if (animator == ChatActivity.this.infoTopViewAnimator) {
                ViewGroup viewGroup = (ViewGroup) this.val$topViewFinal.getParent();
                if (viewGroup != null) {
                    viewGroup.removeView(this.val$topViewFinal);
                }
                ChatActivity.this.infoTopView = null;
                ChatActivity.this.infoTopViewAnimator = null;
            }
        }
    }

    public void updateChatListViewTopPadding() {
        float f;
        RecyclerListView recyclerListView;
        View childAt;
        BlurredFrameLayout blurredFrameLayout;
        int i;
        int measuredHeight;
        int paddingBottom;
        ChatActivityEnterView chatActivityEnterView;
        if (!this.invalidateChatListViewTopPadding || this.chatListView == null) {
            return;
        }
        if (this.fixedKeyboardHeight > 0 && this.searchExpandProgress == 0.0f) {
            return;
        }
        float max = Math.max(0.0f, AndroidUtilities.dp(48.0f) + this.topChatPanelViewOffset);
        BlurredFrameLayout blurredFrameLayout2 = this.pinnedMessageView;
        float max2 = (blurredFrameLayout2 == null || blurredFrameLayout2.getVisibility() != 0) ? 0.0f : Math.max(0.0f, AndroidUtilities.dp(48.0f) + this.pinnedMessageEnterOffset);
        ChatActivityMemberRequestsDelegate chatActivityMemberRequestsDelegate = this.pendingRequestsDelegate;
        MessageObject messageObject = null;
        View view = chatActivityMemberRequestsDelegate != null ? chatActivityMemberRequestsDelegate.getView() : null;
        float max3 = (view == null || view.getVisibility() != 0) ? 0.0f : Math.max(0.0f, view.getHeight() + this.pendingRequestsDelegate.getViewEnterOffset());
        float f2 = this.chatListViewPaddingTop;
        float dp = AndroidUtilities.dp(4.0f) + this.contentPaddingTop + max + max2 + max3;
        this.chatListViewPaddingTop = dp;
        float f3 = dp + this.blurredViewTopOffset;
        this.chatListViewPaddingTop = f3;
        this.chatListViewPaddingVisibleOffset = 0;
        this.chatListViewPaddingTop = f3 + this.contentPanTranslation + this.bottomPanelTranslationY;
        if (this.searchExpandProgress == 0.0f || this.chatActivityEnterView.getVisibility() != 0) {
            f = 0.0f;
        } else {
            float f4 = this.chatListViewPaddingTop;
            f = this.searchExpandProgress * (this.chatActivityEnterView.getMeasuredHeight() - this.searchContainer.getMeasuredHeight());
            this.chatListViewPaddingTop = f4 - f;
        }
        if (this.bottomPanelTranslationY == 0.0f && !this.chatActivityEnterView.panelAnimationInProgress() && (this.contentView.getLayoutParams().height < 0 || (this.contentView.getKeyboardHeight() <= AndroidUtilities.dp(20.0f) && this.chatActivityEnterView.isPopupShowing()))) {
            this.chatListViewPaddingTop += (this.contentView.getKeyboardHeight() > AndroidUtilities.dp(20.0f) || AndroidUtilities.isInMultiwindow || this.inBubbleMode) ? this.contentView.getKeyboardHeight() : this.chatActivityEnterView.getEmojiPadding();
        }
        if (!this.inPreviewMode && (chatActivityEnterView = this.chatActivityEnterView) != null) {
            if (chatActivityEnterView.getAnimatedTop() != 0) {
                this.chatListViewPaddingTop += (this.chatActivityEnterView.getHeightWithTopView() - AndroidUtilities.dp(51.0f)) - this.chatActivityEnterView.getAnimatedTop();
            } else if (!this.chatActivityEnterView.panelAnimationInProgress()) {
                float heightWithTopView = this.chatListViewPaddingTop + (this.chatActivityEnterView.getHeightWithTopView() - AndroidUtilities.dp(51.0f));
                this.chatListViewPaddingTop = heightWithTopView;
                if (this.chatActivityEnterView.currentTopViewAnimation == null) {
                    this.chatListViewPaddingTop = heightWithTopView - this.chatListView.getTranslationY();
                }
            }
        }
        ChatActionCell chatActionCell = this.infoTopView;
        if (chatActionCell != null) {
            chatActionCell.setTranslationY((this.chatListViewPaddingTop - AndroidUtilities.dp(30.0f)) + this.topViewOffset);
            float f5 = this.chatListViewPaddingTop;
            float f6 = this.topViewOffset;
            this.chatListViewPaddingTop = f5 + f6;
            this.chatListViewPaddingVisibleOffset = (int) (this.chatListViewPaddingVisibleOffset + f6);
        }
        ChatActionCell chatActionCell2 = this.floatingDateView;
        if (chatActionCell2 != null) {
            chatActionCell2.setTranslationY((((this.chatListView.getTranslationY() - f) + this.chatListViewPaddingTop) + this.floatingDateViewOffset) - AndroidUtilities.dp(4.0f));
        }
        int measuredHeight2 = (this.chatListView.getMeasuredHeight() * 2) / 3;
        RecyclerListView recyclerListView2 = this.chatListView;
        if (recyclerListView2 != null && this.chatLayoutManager != null && this.chatAdapter != null) {
            if (recyclerListView2.getPaddingTop() != measuredHeight2) {
                int findFirstVisibleItemPosition = this.chatLayoutManager.findFirstVisibleItemPosition();
                int findLastVisibleItemPosition = this.chatLayoutManager.findLastVisibleItemPosition();
                if (findFirstVisibleItemPosition != -1) {
                    for (int i2 = findFirstVisibleItemPosition; i2 <= findLastVisibleItemPosition; i2++) {
                        View findViewByPosition = this.chatLayoutManager.findViewByPosition(i2);
                        if (findViewByPosition instanceof ChatMessageCell) {
                            messageObject = ((ChatMessageCell) findViewByPosition).getMessageObject();
                            measuredHeight = this.chatListView.getMeasuredHeight() - findViewByPosition.getBottom();
                            paddingBottom = this.chatListView.getPaddingBottom();
                        } else if (findViewByPosition instanceof ChatActionCell) {
                            messageObject = ((ChatActionCell) findViewByPosition).getMessageObject();
                            measuredHeight = this.chatListView.getMeasuredHeight() - findViewByPosition.getBottom();
                            paddingBottom = this.chatListView.getPaddingBottom();
                        }
                        i = measuredHeight - paddingBottom;
                        break;
                    }
                }
                i = 0;
                this.chatListView.setPadding(0, measuredHeight2, 0, AndroidUtilities.dp(3.0f) + this.blurredViewBottomOffset);
                if (findFirstVisibleItemPosition != -1 && messageObject != null) {
                    this.chatAdapter.updateRowsSafe();
                    int indexOf = this.messages.indexOf(messageObject);
                    if (indexOf >= 0) {
                        this.chatLayoutManager.scrollToPositionWithOffset(this.chatAdapter.messagesStartRow + indexOf, i);
                    }
                }
                invalidateMessagesVisiblePart();
            }
            this.chatListView.setTopGlowOffset((int) ((this.chatListViewPaddingTop - this.chatListViewPaddingVisibleOffset) - AndroidUtilities.dp(4.0f)));
            if (f2 != this.chatListViewPaddingTop) {
                int childCount = this.chatListView.getChildCount();
                int i3 = 0;
                while (true) {
                    if (i3 >= childCount) {
                        break;
                    }
                    if (this.chatListView.getChildAdapterPosition(this.chatListView.getChildAt(i3)) == this.chatAdapter.getItemCount() - 1) {
                        float f7 = this.chatListViewPaddingTop;
                        if (isThreadChat() && (blurredFrameLayout = this.pinnedMessageView) != null && blurredFrameLayout.getVisibility() == 0) {
                            f7 -= Math.max(0.0f, AndroidUtilities.dp(48.0f) + this.pinnedMessageEnterOffset);
                        }
                        if (childAt.getTop() > f7) {
                            this.chatListView.scrollBy(0, (int) (childAt.getTop() - f7));
                        }
                    } else {
                        i3++;
                    }
                }
            }
            if (!isThreadChat() && !this.wasManualScroll && this.unreadMessageObject != null && (recyclerListView = this.chatListView) != null) {
                recyclerListView.scrollBy(0, (int) (f2 - this.chatListViewPaddingTop));
            }
        }
        this.invalidateChatListViewTopPadding = false;
    }

    public void invalidateChatListViewTopPadding() {
        if (!this.invalidateChatListViewTopPadding) {
            this.invalidateChatListViewTopPadding = true;
            SizeNotifierFrameLayout sizeNotifierFrameLayout = this.contentView;
            if (sizeNotifierFrameLayout != null) {
                sizeNotifierFrameLayout.invalidate();
            }
            RecyclerListView recyclerListView = this.chatListView;
            if (recyclerListView != null) {
                recyclerListView.invalidate();
            }
        }
        float f = 0.0f;
        float max = this.contentPanTranslation + this.contentPaddingTop + Math.max(0.0f, AndroidUtilities.dp(48.0f) + this.topChatPanelViewOffset);
        BlurredFrameLayout blurredFrameLayout = this.pinnedMessageView;
        if (blurredFrameLayout != null) {
            float f2 = max + this.pinnedMessageEnterOffset;
            blurredFrameLayout.setTranslationY(f2);
            max = f2 + AndroidUtilities.dp(48.0f);
        }
        ChatActivityMemberRequestsDelegate chatActivityMemberRequestsDelegate = this.pendingRequestsDelegate;
        View view = chatActivityMemberRequestsDelegate != null ? chatActivityMemberRequestsDelegate.getView() : null;
        if (view != null) {
            view.setTranslationY(max + this.pendingRequestsDelegate.getViewEnterOffset());
        }
        if (this.fragmentContextView != null) {
            FragmentContextView fragmentContextView = this.fragmentLocationContextView;
            float dp = (fragmentContextView == null || fragmentContextView.getVisibility() != 0) ? 0.0f : AndroidUtilities.dp(36.0f) + 0.0f;
            FragmentContextView fragmentContextView2 = this.fragmentContextView;
            fragmentContextView2.setTranslationY(this.contentPanTranslation + dp + fragmentContextView2.getTopPadding());
        }
        if (this.fragmentLocationContextView != null) {
            FragmentContextView fragmentContextView3 = this.fragmentContextView;
            if (fragmentContextView3 != null && fragmentContextView3.getVisibility() == 0) {
                f = 0.0f + AndroidUtilities.dp(this.fragmentContextView.getStyleHeight()) + this.fragmentContextView.getTopPadding();
            }
            FragmentContextView fragmentContextView4 = this.fragmentLocationContextView;
            fragmentContextView4.setTranslationY(this.contentPanTranslation + f + fragmentContextView4.getTopPadding());
        }
        BlurredFrameLayout blurredFrameLayout2 = this.topChatPanelView;
        if (blurredFrameLayout2 != null) {
            blurredFrameLayout2.setTranslationY(this.contentPanTranslation + this.contentPaddingTop + this.topChatPanelViewOffset);
        }
        FrameLayout frameLayout = this.alertView;
        if (frameLayout != null && frameLayout.getVisibility() == 0) {
            this.alertView.setTranslationY((this.contentPanTranslation + this.contentPaddingTop) - (AndroidUtilities.dp(50.0f) * (1.0f - this.alertViewEnterProgress)));
        }
        BlurredFrameLayout blurredFrameLayout3 = this.bottomOverlayChat;
        if (blurredFrameLayout3 != null) {
            blurredFrameLayout3.setTranslationY(this.bottomPanelTranslationYReverse);
        }
        BlurredFrameLayout blurredFrameLayout4 = this.bottomMessagesActionContainer;
        if (blurredFrameLayout4 != null) {
            blurredFrameLayout4.setTranslationY(this.bottomPanelTranslationYReverse);
        }
        UndoView undoView = this.undoView;
        if (undoView != null) {
            undoView.setAdditionalTranslationY(this.chatActivityEnterView.getHeightWithTopView() - this.chatActivityEnterView.getAnimatedTop());
        }
    }

    public TextureView createTextureView(boolean z) {
        if (this.parentLayout == null) {
            return null;
        }
        AndroidUtilities.cancelRunOnUIThread(this.destroyTextureViewRunnable);
        if (this.videoPlayerContainer == null) {
            if (Build.VERSION.SDK_INT >= 21) {
                AnonymousClass59 anonymousClass59 = new AnonymousClass59(getParentActivity());
                this.videoPlayerContainer = anonymousClass59;
                anonymousClass59.setOutlineProvider(new AnonymousClass60(this));
                this.videoPlayerContainer.setClipToOutline(true);
            } else {
                this.videoPlayerContainer = new AnonymousClass61(getParentActivity());
                this.aspectPath = new Path();
                Paint paint = new Paint(1);
                this.aspectPaint = paint;
                paint.setColor(-16777216);
                this.aspectPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.CLEAR));
            }
            this.videoPlayerContainer.setWillNotDraw(false);
            AspectRatioFrameLayout aspectRatioFrameLayout = new AspectRatioFrameLayout(getParentActivity());
            this.aspectRatioFrameLayout = aspectRatioFrameLayout;
            aspectRatioFrameLayout.setBackgroundColor(0);
            if (z) {
                this.videoPlayerContainer.addView(this.aspectRatioFrameLayout, LayoutHelper.createFrame(-1, -1, 17));
            }
            TextureView textureView = new TextureView(getParentActivity());
            this.videoTextureView = textureView;
            textureView.setOpaque(false);
            this.aspectRatioFrameLayout.addView(this.videoTextureView, LayoutHelper.createFrame(-1, -1.0f));
        }
        ViewGroup viewGroup = (ViewGroup) this.videoPlayerContainer.getParent();
        if (viewGroup != null && viewGroup != this.contentView) {
            viewGroup.removeView(this.videoPlayerContainer);
            viewGroup = null;
        }
        if (viewGroup == null) {
            SizeNotifierFrameLayout sizeNotifierFrameLayout = this.contentView;
            FrameLayout frameLayout = this.videoPlayerContainer;
            int i = AndroidUtilities.roundPlayingMessageSize;
            sizeNotifierFrameLayout.addView(frameLayout, 1, new FrameLayout.LayoutParams(i, i));
        }
        this.videoPlayerContainer.setTag(null);
        this.aspectRatioFrameLayout.setDrawingReady(false);
        return this.videoTextureView;
    }

    /* renamed from: org.telegram.ui.ChatActivity$59 */
    /* loaded from: classes3.dex */
    public class AnonymousClass59 extends FrameLayout {
        /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
        AnonymousClass59(Context context) {
            super(context);
            ChatActivity.this = r1;
        }

        @Override // android.view.View
        public void setTranslationY(float f) {
            super.setTranslationY(f);
            ChatActivity.this.contentView.invalidate();
        }
    }

    /* renamed from: org.telegram.ui.ChatActivity$60 */
    /* loaded from: classes3.dex */
    public class AnonymousClass60 extends ViewOutlineProvider {
        AnonymousClass60(ChatActivity chatActivity) {
        }

        @Override // android.view.ViewOutlineProvider
        @TargetApi(21)
        public void getOutline(View view, Outline outline) {
            ImageReceiver imageReceiver = (ImageReceiver) view.getTag(2131230879);
            if (imageReceiver != null) {
                int[] roundRadius = imageReceiver.getRoundRadius();
                int i = 0;
                for (int i2 = 0; i2 < 4; i2++) {
                    i = Math.max(i, roundRadius[i2]);
                }
                outline.setRoundRect(0, 0, view.getMeasuredWidth(), view.getMeasuredHeight(), i);
                return;
            }
            int i3 = AndroidUtilities.roundPlayingMessageSize;
            outline.setOval(0, 0, i3, i3);
        }
    }

    /* renamed from: org.telegram.ui.ChatActivity$61 */
    /* loaded from: classes3.dex */
    public class AnonymousClass61 extends FrameLayout {
        RectF rect = new RectF();

        /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
        AnonymousClass61(Context context) {
            super(context);
            ChatActivity.this = r1;
        }

        @Override // android.view.View
        protected void onSizeChanged(int i, int i2, int i3, int i4) {
            super.onSizeChanged(i, i2, i3, i4);
            ChatActivity.this.aspectPath.reset();
            ImageReceiver imageReceiver = (ImageReceiver) getTag(2131230879);
            if (imageReceiver == null) {
                float f = i / 2;
                ChatActivity.this.aspectPath.addCircle(f, i2 / 2, f, Path.Direction.CW);
            } else {
                int[] roundRadius = imageReceiver.getRoundRadius();
                int i5 = 0;
                for (int i6 = 0; i6 < 4; i6++) {
                    i5 = Math.max(i5, roundRadius[i6]);
                }
                this.rect.set(0.0f, 0.0f, i, i2);
                ChatActivity.this.aspectPath.addRoundRect(this.rect, AndroidUtilities.dp(4.0f), AndroidUtilities.dp(4.0f), Path.Direction.CW);
            }
            ChatActivity.this.aspectPath.toggleInverseFillType();
        }

        @Override // android.view.View
        public void setTranslationY(float f) {
            super.setTranslationY(f);
            ChatActivity.this.contentView.invalidate();
        }

        @Override // android.view.View
        public void setVisibility(int i) {
            super.setVisibility(i);
            if (i == 0) {
                setLayerType(2, null);
            }
        }

        @Override // android.view.ViewGroup, android.view.View
        protected void dispatchDraw(Canvas canvas) {
            super.dispatchDraw(canvas);
            if (getTag() == null) {
                canvas.drawPath(ChatActivity.this.aspectPath, ChatActivity.this.aspectPaint);
            }
        }
    }

    /* renamed from: destroyTextureView */
    public void lambda$new$0() {
        FrameLayout frameLayout = this.videoPlayerContainer;
        if (frameLayout == null || frameLayout.getParent() == null) {
            return;
        }
        this.chatListView.invalidateViews();
        this.aspectRatioFrameLayout.setDrawingReady(false);
        this.videoPlayerContainer.setTag(null);
        if (Build.VERSION.SDK_INT < 21) {
            this.videoPlayerContainer.setLayerType(0, null);
        }
        this.contentView.removeView(this.videoPlayerContainer);
    }

    private boolean hasSelectedNoforwardsMessage() {
        TLRPC$Message tLRPC$Message;
        for (int i = 0; i < this.selectedMessagesIds.length; i++) {
            try {
                for (int i2 = 0; i2 < this.selectedMessagesIds[i].size(); i2++) {
                    MessageObject valueAt = this.selectedMessagesIds[i].valueAt(i2);
                    if (valueAt != null && (tLRPC$Message = valueAt.messageOwner) != null && tLRPC$Message.noforwards) {
                        return true;
                    }
                }
            } catch (Exception unused) {
            }
        }
        return false;
    }

    public void openForward(boolean z) {
        String str;
        if (getMessagesController().isChatNoForwards(this.currentChat) || hasSelectedNoforwardsMessage()) {
            if (getMessagesController().isChatNoForwards(this.currentChat)) {
                if (ChatObject.isChannel(this.currentChat) && !this.currentChat.megagroup) {
                    str = LocaleController.getString("ForwardsRestrictedInfoChannel", 2131626063);
                } else {
                    str = LocaleController.getString("ForwardsRestrictedInfoGroup", 2131626064);
                }
            } else {
                str = LocaleController.getString("ForwardsRestrictedInfoBot", 2131626062);
            }
            if (z) {
                if (this.fwdRestrictedTopHint == null) {
                    SizeNotifierFrameLayout sizeNotifierFrameLayout = (SizeNotifierFrameLayout) this.fragmentView;
                    int indexOfChild = sizeNotifierFrameLayout.indexOfChild(this.chatActivityEnterView);
                    if (indexOfChild == -1) {
                        return;
                    }
                    HintView hintView = new HintView((Context) getParentActivity(), 7, true);
                    this.fwdRestrictedTopHint = hintView;
                    sizeNotifierFrameLayout.addView(hintView, indexOfChild + 1, LayoutHelper.createFrame(-2, -2.0f, 51, 12.0f, 0.0f, 12.0f, 0.0f));
                    this.fwdRestrictedTopHint.setAlpha(0.0f);
                    this.fwdRestrictedTopHint.setVisibility(4);
                }
                this.fwdRestrictedTopHint.setText(str);
                this.fwdRestrictedTopHint.showForView(this.actionBar.getActionMode().getItem(11), true);
                return;
            }
            if (this.fwdRestrictedBottomHint == null) {
                SizeNotifierFrameLayout sizeNotifierFrameLayout2 = (SizeNotifierFrameLayout) this.fragmentView;
                int indexOfChild2 = sizeNotifierFrameLayout2.indexOfChild(this.chatActivityEnterView);
                if (indexOfChild2 == -1) {
                    return;
                }
                HintView hintView2 = new HintView(getParentActivity(), 9);
                this.fwdRestrictedBottomHint = hintView2;
                sizeNotifierFrameLayout2.addView(hintView2, indexOfChild2 + 1, LayoutHelper.createFrame(-2, -2.0f, 51, 12.0f, 0.0f, 12.0f, 0.0f));
                this.fwdRestrictedBottomHint.setAlpha(0.0f);
                this.fwdRestrictedBottomHint.setVisibility(4);
            }
            this.fwdRestrictedBottomHint.setText(str);
            this.fwdRestrictedBottomHint.showForView(this.forwardButton, true);
            return;
        }
        int i = 0;
        boolean z2 = false;
        for (int i2 = 0; i2 < 2; i2++) {
            for (int i3 = 0; i3 < this.selectedMessagesIds[i2].size(); i3++) {
                MessageObject valueAt = this.selectedMessagesIds[i2].valueAt(i3);
                if (valueAt.isPoll()) {
                    i = valueAt.isPublicPoll() ? 2 : 1;
                    if (i == 2) {
                        break;
                    }
                } else if (valueAt.isInvoice()) {
                    z2 = true;
                }
            }
            if (i == 2) {
                break;
            }
        }
        Bundle bundle = new Bundle();
        bundle.putBoolean("onlySelect", true);
        bundle.putInt("dialogsType", 3);
        bundle.putInt("messagesCount", this.canForwardMessagesCount);
        bundle.putInt("hasPoll", i);
        bundle.putBoolean("hasInvoice", z2);
        DialogsActivity dialogsActivity = new DialogsActivity(bundle);
        dialogsActivity.setDelegate(this);
        presentFragment(dialogsActivity);
    }

    private void showBottomOverlayProgress(boolean z, boolean z2) {
        if (!z || this.bottomOverlayProgress.getTag() == null) {
            if (!z && this.bottomOverlayProgress.getTag() == null) {
                return;
            }
            AnimatorSet animatorSet = this.bottomOverlayAnimation;
            Integer num = null;
            if (animatorSet != null) {
                animatorSet.cancel();
                this.bottomOverlayAnimation = null;
            }
            RadialProgressView radialProgressView = this.bottomOverlayProgress;
            if (z) {
                num = 1;
            }
            radialProgressView.setTag(num);
            float f = 0.0f;
            int i = 4;
            float f2 = 0.1f;
            if (z2) {
                this.bottomOverlayAnimation = new AnimatorSet();
                if (z) {
                    this.bottomOverlayProgress.setVisibility(0);
                    this.bottomOverlayAnimation.playTogether(ObjectAnimator.ofFloat(this.bottomOverlayChatText, View.SCALE_X, 0.1f), ObjectAnimator.ofFloat(this.bottomOverlayChatText, View.SCALE_Y, 0.1f), ObjectAnimator.ofFloat(this.bottomOverlayChatText, View.ALPHA, 0.0f), ObjectAnimator.ofFloat(this.bottomOverlayProgress, View.SCALE_X, 1.0f), ObjectAnimator.ofFloat(this.bottomOverlayProgress, View.SCALE_Y, 1.0f), ObjectAnimator.ofFloat(this.bottomOverlayProgress, View.ALPHA, 1.0f));
                    this.bottomOverlayAnimation.setStartDelay(200L);
                } else {
                    this.bottomOverlayChatText.setVisibility(0);
                    this.bottomOverlayAnimation.playTogether(ObjectAnimator.ofFloat(this.bottomOverlayProgress, View.SCALE_X, 0.1f), ObjectAnimator.ofFloat(this.bottomOverlayProgress, View.SCALE_Y, 0.1f), ObjectAnimator.ofFloat(this.bottomOverlayProgress, View.ALPHA, 0.0f), ObjectAnimator.ofFloat(this.bottomOverlayChatText, View.SCALE_X, 1.0f), ObjectAnimator.ofFloat(this.bottomOverlayChatText, View.SCALE_Y, 1.0f), ObjectAnimator.ofFloat(this.bottomOverlayChatText, View.ALPHA, 1.0f));
                }
                this.bottomOverlayAnimation.addListener(new AnonymousClass62(z));
                this.bottomOverlayAnimation.setDuration(150L);
                this.bottomOverlayAnimation.start();
                return;
            }
            this.bottomOverlayProgress.setVisibility(z ? 0 : 4);
            this.bottomOverlayProgress.setScaleX(z ? 1.0f : 0.1f);
            this.bottomOverlayProgress.setScaleY(z ? 1.0f : 0.1f);
            this.bottomOverlayProgress.setAlpha(1.0f);
            UnreadCounterTextView unreadCounterTextView = this.bottomOverlayChatText;
            if (!z) {
                i = 0;
            }
            unreadCounterTextView.setVisibility(i);
            this.bottomOverlayChatText.setScaleX(z ? 0.1f : 1.0f);
            UnreadCounterTextView unreadCounterTextView2 = this.bottomOverlayChatText;
            if (!z) {
                f2 = 1.0f;
            }
            unreadCounterTextView2.setScaleY(f2);
            UnreadCounterTextView unreadCounterTextView3 = this.bottomOverlayChatText;
            if (!z) {
                f = 1.0f;
            }
            unreadCounterTextView3.setAlpha(f);
        }
    }

    /* renamed from: org.telegram.ui.ChatActivity$62 */
    /* loaded from: classes3.dex */
    public class AnonymousClass62 extends AnimatorListenerAdapter {
        final /* synthetic */ boolean val$show;

        AnonymousClass62(boolean z) {
            ChatActivity.this = r1;
            this.val$show = z;
        }

        @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
        public void onAnimationEnd(Animator animator) {
            if (ChatActivity.this.bottomOverlayAnimation == null || !ChatActivity.this.bottomOverlayAnimation.equals(animator)) {
                return;
            }
            if (!this.val$show) {
                ChatActivity.this.bottomOverlayProgress.setVisibility(4);
            } else {
                ChatActivity.this.bottomOverlayChatText.setVisibility(4);
            }
        }

        @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
        public void onAnimationCancel(Animator animator) {
            if (ChatActivity.this.bottomOverlayAnimation == null || !ChatActivity.this.bottomOverlayAnimation.equals(animator)) {
                return;
            }
            ChatActivity.this.bottomOverlayAnimation = null;
        }
    }

    /* renamed from: sendBotInlineResult */
    public void lambda$createView$45(TLRPC$BotInlineResult tLRPC$BotInlineResult, boolean z, int i) {
        MentionsContainerView mentionsContainerView = this.mentionContainer;
        if (mentionsContainerView == null) {
            return;
        }
        long contextBotId = mentionsContainerView.getAdapter().getContextBotId();
        HashMap hashMap = new HashMap();
        hashMap.put("id", tLRPC$BotInlineResult.id);
        hashMap.put("query_id", "" + tLRPC$BotInlineResult.query_id);
        hashMap.put("bot", "" + contextBotId);
        hashMap.put("bot_name", this.mentionContainer.getAdapter().getContextBotName());
        SendMessagesHelper.prepareSendingBotContextResult(getAccountInstance(), tLRPC$BotInlineResult, hashMap, this.dialog_id, this.replyingMessageObject, getThreadMessage(), z, i);
        this.chatActivityEnterView.setFieldText("");
        hideFieldPanel(false);
        getMediaDataController().increaseInlineRaiting(contextBotId);
    }

    private void checkBotCommands() {
        TLRPC$Chat tLRPC$Chat;
        r0 = false;
        r0 = false;
        boolean z = false;
        URLSpanBotCommand.enabled = false;
        TLRPC$User tLRPC$User = this.currentUser;
        if (tLRPC$User != null && tLRPC$User.bot) {
            URLSpanBotCommand.enabled = !UserObject.isReplyUser(tLRPC$User);
            return;
        }
        TLRPC$ChatFull tLRPC$ChatFull = this.chatInfo;
        if (tLRPC$ChatFull instanceof TLRPC$TL_chatFull) {
            for (int i = 0; i < this.chatInfo.participants.participants.size(); i++) {
                TLRPC$User user = getMessagesController().getUser(Long.valueOf(this.chatInfo.participants.participants.get(i).user_id));
                if (user != null && user.bot) {
                    URLSpanBotCommand.enabled = true;
                    return;
                }
            }
        } else if (tLRPC$ChatFull instanceof TLRPC$TL_channelFull) {
            if (!tLRPC$ChatFull.bot_info.isEmpty() && (tLRPC$Chat = this.currentChat) != null && tLRPC$Chat.megagroup) {
                z = true;
            }
            URLSpanBotCommand.enabled = z;
        }
    }

    public MessageObject.GroupedMessages getValidGroupedMessage(MessageObject messageObject) {
        if (messageObject.getGroupId() != 0) {
            MessageObject.GroupedMessages groupedMessages = this.groupedMessagesMap.get(messageObject.getGroupId());
            if (groupedMessages != null && (groupedMessages.messages.size() <= 1 || groupedMessages.positions.get(messageObject) == null)) {
                return null;
            }
            return groupedMessages;
        }
        return null;
    }

    public void jumpToDate(int i) {
        int i2;
        TLRPC$Message tLRPC$Message;
        if (this.messages.isEmpty()) {
            return;
        }
        ArrayList<MessageObject> arrayList = this.messages;
        int i3 = 1;
        MessageObject messageObject = arrayList.get(arrayList.size() - 1);
        if ((this.messages.get(0).messageOwner.date >= i && messageObject.messageOwner.date <= i) || (messageObject.messageOwner.date >= i && this.endReached[0])) {
            for (int size = this.messages.size() - 1; size >= 0; size--) {
                MessageObject messageObject2 = this.messages.get(size);
                if (messageObject2.messageOwner.date >= i && messageObject2.getId() != 0) {
                    int id = messageObject2.getId();
                    if (messageObject2.getDialogId() != this.mergeDialogId) {
                        i3 = 0;
                    }
                    scrollToMessageId(id, 0, false, i3, true, 0);
                    return;
                }
            }
        } else if (!DialogObject.isEncryptedDialog(this.dialog_id)) {
            int findLastVisibleItemPosition = this.chatLayoutManager.findLastVisibleItemPosition();
            int findFirstVisibleItemPosition = this.chatLayoutManager.findFirstVisibleItemPosition();
            while (true) {
                if (findFirstVisibleItemPosition > findLastVisibleItemPosition) {
                    i2 = -1;
                    break;
                } else if (findFirstVisibleItemPosition < this.chatAdapter.messagesStartRow || findFirstVisibleItemPosition >= this.chatAdapter.messagesEndRow || (tLRPC$Message = this.messages.get(findFirstVisibleItemPosition - this.chatAdapter.messagesStartRow).messageOwner) == null) {
                    findFirstVisibleItemPosition++;
                } else {
                    int i4 = tLRPC$Message.date < i ? 1 : 0;
                    if (isSecretChat()) {
                        i4 ^= 1;
                    }
                    i2 = i4 ^ 1;
                }
            }
            this.chatScrollHelper.setScrollDirection(i2);
            AlertDialog alertDialog = this.progressDialog;
            if (alertDialog != null) {
                alertDialog.dismiss();
            }
            updatePinnedListButton(false);
            AlertDialog alertDialog2 = new AlertDialog(getParentActivity(), 3, this.themeDelegate);
            this.progressDialog = alertDialog2;
            alertDialog2.setOnCancelListener(this.postponedScrollCancelListener);
            this.progressDialog.showDelayed(1000L);
            int i5 = this.lastLoadIndex;
            this.postponedScrollToLastMessageQueryIndex = i5;
            this.waitingForLoad.add(Integer.valueOf(i5));
            this.postponedScrollMessageId = 0;
            this.postponedScrollIsCanceled = false;
            MessagesController messagesController = getMessagesController();
            long j = this.dialog_id;
            long j2 = this.mergeDialogId;
            int i6 = this.classGuid;
            int i7 = this.chatMode;
            int i8 = this.threadMessageId;
            int i9 = this.replyMaxReadId;
            int i10 = this.lastLoadIndex;
            this.lastLoadIndex = i10 + 1;
            messagesController.loadMessages(j, j2, false, 30, 0, i, true, 0, i6, 4, 0, i7, i8, i9, i10);
            this.floatingDateView.setAlpha(0.0f);
            this.floatingDateView.setTag(null);
        }
    }

    public void processInlineBotContextPM(TLRPC$TL_inlineBotSwitchPM tLRPC$TL_inlineBotSwitchPM) {
        MentionsContainerView mentionsContainerView;
        TLRPC$User contextBotUser;
        if (tLRPC$TL_inlineBotSwitchPM == null || (mentionsContainerView = this.mentionContainer) == null || (contextBotUser = mentionsContainerView.getAdapter().getContextBotUser()) == null) {
            return;
        }
        this.chatActivityEnterView.setFieldText("");
        long j = this.dialog_id;
        if (j == contextBotUser.id) {
            this.inlineReturn = j;
            getMessagesController().sendBotStart(this.currentUser, tLRPC$TL_inlineBotSwitchPM.start_param);
            return;
        }
        Bundle bundle = new Bundle();
        bundle.putLong("user_id", contextBotUser.id);
        bundle.putString("inline_query", tLRPC$TL_inlineBotSwitchPM.start_param);
        bundle.putLong("inline_return", this.dialog_id);
        if (!getMessagesController().checkCanOpenChat(bundle, this)) {
            return;
        }
        presentFragment(new ChatActivity(bundle));
    }

    private void createChatAttachView() {
        if (getParentActivity() != null && this.chatAttachAlert == null) {
            AnonymousClass63 anonymousClass63 = new AnonymousClass63(getParentActivity(), this, false, false, this.themeDelegate);
            this.chatAttachAlert = anonymousClass63;
            anonymousClass63.setDelegate(new AnonymousClass64());
        }
    }

    /* renamed from: org.telegram.ui.ChatActivity$63 */
    /* loaded from: classes3.dex */
    public class AnonymousClass63 extends ChatAttachAlert {
        /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
        AnonymousClass63(Context context, BaseFragment baseFragment, boolean z, boolean z2, Theme.ResourcesProvider resourcesProvider) {
            super(context, baseFragment, z, z2, resourcesProvider);
            ChatActivity.this = r7;
        }

        @Override // org.telegram.ui.Components.ChatAttachAlert, org.telegram.ui.ActionBar.BottomSheet
        public void dismissInternal() {
            if (ChatActivity.this.chatAttachAlert != null && ChatActivity.this.chatAttachAlert.isShowing()) {
                AndroidUtilities.requestAdjustResize(ChatActivity.this.getParentActivity(), ((BaseFragment) ChatActivity.this).classGuid);
            }
            super.dismissInternal();
            ChatActivity.this.onEditTextDialogClose(false, true);
        }

        @Override // org.telegram.ui.ActionBar.BottomSheet
        public void onDismissAnimationStart() {
            ChatActivity.this.chatAttachAlert.setFocusable(false);
            ChatActivity.this.chatActivityEnterView.getEditField().requestFocus();
            if (ChatActivity.this.chatAttachAlert != null && ChatActivity.this.chatAttachAlert.isShowing()) {
                AndroidUtilities.requestAdjustResize(ChatActivity.this.getParentActivity(), ((BaseFragment) ChatActivity.this).classGuid);
            }
            ChatActivity.this.onEditTextDialogClose(false, false);
        }
    }

    /* renamed from: org.telegram.ui.ChatActivity$64 */
    /* loaded from: classes3.dex */
    public class AnonymousClass64 implements ChatAttachAlert.ChatAttachViewDelegate {
        @Override // org.telegram.ui.Components.ChatAttachAlert.ChatAttachViewDelegate
        public /* synthetic */ void openAvatarsSearch() {
            ChatAttachAlert.ChatAttachViewDelegate.CC.$default$openAvatarsSearch(this);
        }

        AnonymousClass64() {
            ChatActivity.this = r1;
        }

        @Override // org.telegram.ui.Components.ChatAttachAlert.ChatAttachViewDelegate
        public void didPressedButton(int i, boolean z, boolean z2, int i2, boolean z3) {
            String str;
            if (ChatActivity.this.getParentActivity() == null || ChatActivity.this.chatAttachAlert == null) {
                return;
            }
            ChatActivity chatActivity = ChatActivity.this;
            chatActivity.editingMessageObject = chatActivity.chatAttachAlert.getEditingMessageObject();
            if (i == 8 || i == 7 || (i == 4 && !ChatActivity.this.chatAttachAlert.getPhotoLayout().getSelectedPhotos().isEmpty())) {
                if (i != 8) {
                    ChatActivity.this.chatAttachAlert.dismiss(true);
                }
                HashMap<Object, Object> selectedPhotos = ChatActivity.this.chatAttachAlert.getPhotoLayout().getSelectedPhotos();
                ArrayList<Object> selectedPhotosOrder = ChatActivity.this.chatAttachAlert.getPhotoLayout().getSelectedPhotosOrder();
                if (!selectedPhotos.isEmpty()) {
                    for (int i3 = 0; i3 < Math.ceil(selectedPhotos.size() / 10.0f); i3++) {
                        int i4 = i3 * 10;
                        int min = Math.min(10, selectedPhotos.size() - i4);
                        ArrayList arrayList = new ArrayList();
                        for (int i5 = 0; i5 < min; i5++) {
                            int i6 = i4 + i5;
                            if (i6 < selectedPhotosOrder.size()) {
                                MediaController.PhotoEntry photoEntry = (MediaController.PhotoEntry) selectedPhotos.get(selectedPhotosOrder.get(i6));
                                SendMessagesHelper.SendingMediaInfo sendingMediaInfo = new SendMessagesHelper.SendingMediaInfo();
                                boolean z4 = photoEntry.isVideo;
                                if (!z4 && (str = photoEntry.imagePath) != null) {
                                    sendingMediaInfo.path = str;
                                } else {
                                    String str2 = photoEntry.path;
                                    if (str2 != null) {
                                        sendingMediaInfo.path = str2;
                                    }
                                }
                                sendingMediaInfo.thumbPath = photoEntry.thumbPath;
                                sendingMediaInfo.isVideo = z4;
                                CharSequence charSequence = photoEntry.caption;
                                sendingMediaInfo.caption = charSequence != null ? charSequence.toString() : null;
                                sendingMediaInfo.entities = photoEntry.entities;
                                sendingMediaInfo.masks = photoEntry.stickers;
                                sendingMediaInfo.ttl = photoEntry.ttl;
                                sendingMediaInfo.videoEditedInfo = photoEntry.editedInfo;
                                sendingMediaInfo.canDeleteAfter = photoEntry.canDeleteAfter;
                                arrayList.add(sendingMediaInfo);
                                photoEntry.reset();
                            }
                        }
                        if (i3 == 0) {
                            ChatActivity.this.fillEditingMediaWithCaption(((SendMessagesHelper.SendingMediaInfo) arrayList.get(0)).caption, ((SendMessagesHelper.SendingMediaInfo) arrayList.get(0)).entities);
                        }
                        SendMessagesHelper.prepareSendingMedia(ChatActivity.this.getAccountInstance(), arrayList, ChatActivity.this.dialog_id, ChatActivity.this.replyingMessageObject, ChatActivity.this.getThreadMessage(), null, i == 4 || z3, z, ChatActivity.this.editingMessageObject, z2, i2);
                    }
                    ChatActivity.this.afterMessageSend();
                    ChatActivity.this.chatActivityEnterView.setFieldText("");
                }
                if (i2 == 0) {
                    return;
                }
                if (ChatActivity.this.scheduledMessagesCount == -1) {
                    ChatActivity.this.scheduledMessagesCount = 0;
                }
                ChatActivity.access$26812(ChatActivity.this, selectedPhotos.size());
                ChatActivity.this.updateScheduledInterface(true);
                return;
            }
            if (ChatActivity.this.chatAttachAlert != null) {
                ChatActivity.this.chatAttachAlert.dismissWithButtonClick(i);
            }
            ChatActivity.this.processSelectedAttach(i);
        }

        @Override // org.telegram.ui.Components.ChatAttachAlert.ChatAttachViewDelegate
        public void didSelectBot(TLRPC$User tLRPC$User) {
            if (ChatActivity.this.chatActivityEnterView == null || tLRPC$User == null || TextUtils.isEmpty(tLRPC$User.username)) {
                return;
            }
            ChatActivityEnterView chatActivityEnterView = ChatActivity.this.chatActivityEnterView;
            chatActivityEnterView.setFieldText("@" + tLRPC$User.username + " ");
            ChatActivity.this.chatActivityEnterView.openKeyboard();
        }

        @Override // org.telegram.ui.Components.ChatAttachAlert.ChatAttachViewDelegate
        public void onCameraOpened() {
            ChatActivity.this.chatActivityEnterView.closeKeyboard();
        }

        @Override // org.telegram.ui.Components.ChatAttachAlert.ChatAttachViewDelegate
        public boolean needEnterComment() {
            return ChatActivity.this.needEnterText();
        }

        @Override // org.telegram.ui.Components.ChatAttachAlert.ChatAttachViewDelegate
        public void doOnIdle(Runnable runnable) {
            ChatActivity.this.lambda$openDiscussionMessageChat$228(runnable);
        }
    }

    public boolean needEnterText() {
        boolean isKeyboardVisible = this.chatActivityEnterView.isKeyboardVisible();
        if (isKeyboardVisible) {
            this.chatActivityEnterView.showEmojiView();
            this.openKeyboardOnAttachMenuClose = true;
        }
        AndroidUtilities.setAdjustResizeToNothing(getParentActivity(), this.classGuid);
        this.fragmentView.requestLayout();
        return isKeyboardVisible;
    }

    public void onEditTextDialogClose(boolean z, boolean z2) {
        if (this.openKeyboardOnAttachMenuClose) {
            AndroidUtilities.runOnUIThread(new ChatActivity$$ExternalSyntheticLambda157(this), 50L);
            if (z2) {
                this.openKeyboardOnAttachMenuClose = false;
            }
        }
        if (z) {
            AndroidUtilities.requestAdjustResize(getParentActivity(), this.classGuid);
        }
    }

    public /* synthetic */ void lambda$onEditTextDialogClose$86() {
        this.chatActivityEnterView.openKeyboard();
    }

    /* renamed from: doOnIdle */
    public void lambda$openDiscussionMessageChat$228(Runnable runnable) {
        NotificationCenter.getInstance(this.currentAccount).doOnIdle(runnable);
    }

    public void performHistoryClear(boolean z, boolean z2) {
        this.clearingHistory = true;
        this.undoView.showWithAction(this.dialog_id, 0, new ChatActivity$$ExternalSyntheticLambda197(this, z), new ChatActivity$$ExternalSyntheticLambda122(this));
        this.chatAdapter.notifyDataSetChanged();
    }

    public /* synthetic */ void lambda$performHistoryClear$87(boolean z) {
        if (!this.pinnedMessageIds.isEmpty()) {
            SharedPreferences.Editor edit = MessagesController.getNotificationsSettings(this.currentAccount).edit();
            edit.putInt("pin_" + this.dialog_id, this.pinnedMessageIds.get(0).intValue()).commit();
            this.pinnedMessageIds.clear();
            this.pinnedMessageObjects.clear();
            this.currentPinnedMessageId = 0;
            this.loadedPinnedMessagesCount = 0;
            this.totalPinnedMessagesCount = 0;
            updatePinnedMessageView(true);
        }
        getMessagesController().deleteDialog(this.dialog_id, 1, z);
        this.clearingHistory = false;
        clearHistory(false, null);
        this.chatAdapter.notifyDataSetChanged();
    }

    public /* synthetic */ void lambda$performHistoryClear$88() {
        this.clearingHistory = false;
        this.chatAdapter.notifyDataSetChanged();
    }

    public long getDialogId() {
        return this.dialog_id;
    }

    public int getDialogFolderId() {
        return this.dialogFolderId;
    }

    public int getDialogFilterId() {
        return this.dialogFilterId;
    }

    public boolean openedWithLivestream() {
        return this.livestream;
    }

    public UndoView getUndoView() {
        return this.undoView;
    }

    public long getMergeDialogId() {
        return this.mergeDialogId;
    }

    public boolean hasReportSpam() {
        BlurredFrameLayout blurredFrameLayout = this.topChatPanelView;
        return (blurredFrameLayout == null || blurredFrameLayout.getTag() != null || this.reportSpamButton.getVisibility() == 8) ? false : true;
    }

    public boolean isReport() {
        return this.reportType >= 0;
    }

    public void setChatInvite(TLRPC$ChatInvite tLRPC$ChatInvite) {
        this.chatInvite = tLRPC$ChatInvite;
    }

    public void setBotUser(String str) {
        if (this.inlineReturn != 0) {
            getMessagesController().sendBotStart(this.currentUser, str);
            return;
        }
        this.botUser = str;
        updateBottomOverlay();
    }

    public void afterMessageSend() {
        hideFieldPanel(false);
        if (this.chatMode == 0) {
            getMediaDataController().cleanDraft(this.dialog_id, this.threadMessageId, true);
        }
    }

    private void toggleMesagesSearchListView() {
        RecyclerListView recyclerListView = this.messagesSearchListView;
        if (recyclerListView != null) {
            showMessagesSearchListView(recyclerListView.getTag() == null);
        }
    }

    public void showMessagesSearchListView(boolean z) {
        RecyclerListView recyclerListView = this.messagesSearchListView;
        if (recyclerListView != null) {
            if (z && recyclerListView.getTag() != null) {
                return;
            }
            if (!z && this.messagesSearchListView.getTag() == null) {
                return;
            }
            AnimatorSet animatorSet = this.messagesSearchListViewAnimation;
            Integer num = null;
            if (animatorSet != null) {
                animatorSet.cancel();
                this.messagesSearchListViewAnimation = null;
            }
            if (z) {
                this.messagesSearchListView.setVisibility(0);
            }
            RecyclerListView recyclerListView2 = this.messagesSearchListView;
            if (z) {
                num = 1;
            }
            recyclerListView2.setTag(num);
            AnimatorSet animatorSet2 = new AnimatorSet();
            this.messagesSearchListViewAnimation = animatorSet2;
            Animator[] animatorArr = new Animator[1];
            RecyclerListView recyclerListView3 = this.messagesSearchListView;
            Property property = View.ALPHA;
            float[] fArr = new float[1];
            fArr[0] = z ? 1.0f : 0.0f;
            animatorArr[0] = ObjectAnimator.ofFloat(recyclerListView3, property, fArr);
            animatorSet2.playTogether(animatorArr);
            this.messagesSearchListViewAnimation.setInterpolator(CubicBezierInterpolator.EASE_IN);
            this.messagesSearchListViewAnimation.setDuration(180L);
            this.messagesSearchListViewAnimation.addListener(new AnonymousClass65(z));
            this.messagesSearchListViewAnimation.start();
        }
    }

    /* renamed from: org.telegram.ui.ChatActivity$65 */
    /* loaded from: classes3.dex */
    public class AnonymousClass65 extends AnimatorListenerAdapter {
        final /* synthetic */ boolean val$show;

        AnonymousClass65(boolean z) {
            ChatActivity.this = r1;
            this.val$show = z;
        }

        @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
        public void onAnimationEnd(Animator animator) {
            if (animator.equals(ChatActivity.this.messagesSearchListViewAnimation)) {
                ChatActivity.this.messagesSearchListViewAnimation = null;
                if (this.val$show) {
                    return;
                }
                ChatActivity.this.messagesSearchListView.setVisibility(8);
            }
        }

        @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
        public void onAnimationCancel(Animator animator) {
            if (animator.equals(ChatActivity.this.messagesSearchListViewAnimation)) {
                ChatActivity.this.messagesSearchListViewAnimation = null;
            }
        }
    }

    public boolean playFirstUnreadVoiceMessage() {
        ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        if (chatActivityEnterView == null || !chatActivityEnterView.isRecordingAudioVideo()) {
            for (int size = this.messages.size() - 1; size >= 0; size--) {
                MessageObject messageObject = this.messages.get(size);
                if ((messageObject.isVoice() || messageObject.isRoundVideo()) && messageObject.isContentUnread() && !messageObject.isOut()) {
                    MediaController.getInstance().setVoiceMessagesPlaylist(MediaController.getInstance().playMessage(messageObject) ? createVoiceMessagesPlaylist(messageObject, true) : null, true);
                    return true;
                }
            }
            if (Build.VERSION.SDK_INT < 23 || getParentActivity() == null || getParentActivity().checkSelfPermission("android.permission.RECORD_AUDIO") == 0) {
                return false;
            }
            getParentActivity().requestPermissions(new String[]{"android.permission.RECORD_AUDIO"}, 3);
            return true;
        }
        return true;
    }

    public void openScheduledMessages() {
        ActionBarLayout actionBarLayout = this.parentLayout;
        if (actionBarLayout == null || actionBarLayout.getLastFragment() != this) {
            return;
        }
        Bundle bundle = new Bundle();
        TLRPC$EncryptedChat tLRPC$EncryptedChat = this.currentEncryptedChat;
        if (tLRPC$EncryptedChat != null) {
            bundle.putInt("enc_id", tLRPC$EncryptedChat.id);
        } else {
            TLRPC$Chat tLRPC$Chat = this.currentChat;
            if (tLRPC$Chat != null) {
                bundle.putLong("chat_id", tLRPC$Chat.id);
            } else {
                bundle.putLong("user_id", this.currentUser.id);
            }
        }
        bundle.putInt("chatMode", 1);
        ChatActivity chatActivity = new ChatActivity(bundle);
        chatActivity.chatActivityDelegate = new AnonymousClass66();
        presentFragment(chatActivity, false);
    }

    /* renamed from: org.telegram.ui.ChatActivity$66 */
    /* loaded from: classes3.dex */
    public class AnonymousClass66 implements ChatActivityDelegate {
        @Override // org.telegram.ui.ChatActivity.ChatActivityDelegate
        public /* synthetic */ void onReport() {
            ChatActivityDelegate.CC.$default$onReport(this);
        }

        @Override // org.telegram.ui.ChatActivity.ChatActivityDelegate
        public /* synthetic */ void onUnpin(boolean z, boolean z2) {
            ChatActivityDelegate.CC.$default$onUnpin(this, z, z2);
        }

        AnonymousClass66() {
            ChatActivity.this = r1;
        }

        @Override // org.telegram.ui.ChatActivity.ChatActivityDelegate
        public void openReplyMessage(int i) {
            ChatActivity.this.scrollToMessageId(i, 0, true, 0, true, 0);
        }

        @Override // org.telegram.ui.ChatActivity.ChatActivityDelegate
        public void openSearch(String str) {
            ChatActivity.this.openSearchWithText(str);
        }
    }

    private void initStickers() {
        if (this.chatActivityEnterView == null || getParentActivity() == null || this.stickersAdapter != null) {
            return;
        }
        this.stickersListView.setPadding(AndroidUtilities.dp(18.0f), 0, AndroidUtilities.dp(18.0f), 0);
        RecyclerListView recyclerListView = this.stickersListView;
        StickersAdapter stickersAdapter = new StickersAdapter(getParentActivity(), new ChatActivity$$ExternalSyntheticLambda236(this), this.themeDelegate);
        this.stickersAdapter = stickersAdapter;
        recyclerListView.setAdapter(stickersAdapter);
        RecyclerListView recyclerListView2 = this.stickersListView;
        ChatActivity$$ExternalSyntheticLambda250 chatActivity$$ExternalSyntheticLambda250 = new ChatActivity$$ExternalSyntheticLambda250(this);
        this.stickersOnItemClickListener = chatActivity$$ExternalSyntheticLambda250;
        recyclerListView2.setOnItemClickListener(chatActivity$$ExternalSyntheticLambda250);
    }

    public /* synthetic */ void lambda$initStickers$89(boolean z) {
        if (z) {
            int dp = this.stickersAdapter.isShowingKeywords() ? AndroidUtilities.dp(24.0f) : 0;
            if (dp != this.stickersListView.getPaddingTop() || this.stickersPanel.getTag() == null) {
                this.stickersListView.setPadding(AndroidUtilities.dp(18.0f), dp, AndroidUtilities.dp(18.0f), 0);
                this.stickersListView.scrollToPosition(0);
                ((FrameLayout.LayoutParams) this.stickersPanelArrow.getLayoutParams()).gravity = (this.chatActivityEnterView.isRtlText() ? 5 : 3) | 80;
                this.stickersPanelArrow.requestLayout();
            }
        }
        if (!z || this.stickersPanel.getTag() == null) {
            if (!z && this.stickersPanel.getTag() == null) {
                return;
            }
            if (z) {
                this.stickersPanel.setVisibility(this.allowStickersPanel ? 0 : 4);
                this.stickersPanel.setTag(1);
            } else {
                this.stickersPanel.setTag(null);
            }
            AnimatorSet animatorSet = this.runningAnimation;
            if (animatorSet != null) {
                animatorSet.cancel();
                this.runningAnimation = null;
            }
            if (this.stickersPanel.getVisibility() == 4) {
                if (z) {
                    return;
                }
                this.stickersPanel.setVisibility(8);
                return;
            }
            AnimatorSet animatorSet2 = new AnimatorSet();
            this.runningAnimation = animatorSet2;
            Animator[] animatorArr = new Animator[1];
            FrameLayout frameLayout = this.stickersPanel;
            Property property = View.ALPHA;
            float[] fArr = new float[2];
            float f = 0.0f;
            fArr[0] = z ? 0.0f : 1.0f;
            if (z) {
                f = 1.0f;
            }
            fArr[1] = f;
            animatorArr[0] = ObjectAnimator.ofFloat(frameLayout, property, fArr);
            animatorSet2.playTogether(animatorArr);
            this.runningAnimation.setDuration(150L);
            this.runningAnimationIndex = getNotificationCenter().setAnimationInProgress(this.runningAnimationIndex, null);
            this.runningAnimation.addListener(new AnonymousClass67(z));
            this.runningAnimation.start();
        }
    }

    /* renamed from: org.telegram.ui.ChatActivity$67 */
    /* loaded from: classes3.dex */
    public class AnonymousClass67 extends AnimatorListenerAdapter {
        final /* synthetic */ boolean val$show;

        AnonymousClass67(boolean z) {
            ChatActivity.this = r1;
            this.val$show = z;
        }

        @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
        public void onAnimationEnd(Animator animator) {
            ChatActivity.this.getNotificationCenter().onAnimationFinish(ChatActivity.this.runningAnimationIndex);
            if (ChatActivity.this.runningAnimation == null || !ChatActivity.this.runningAnimation.equals(animator)) {
                return;
            }
            if (!this.val$show) {
                ChatActivity.this.stickersAdapter.clearSearch();
                ChatActivity.this.stickersPanel.setVisibility(8);
                if (ContentPreviewViewer.getInstance().isVisible()) {
                    ContentPreviewViewer.getInstance().close();
                }
                ContentPreviewViewer.getInstance().reset();
            }
            ChatActivity.this.runningAnimation = null;
        }

        @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
        public void onAnimationCancel(Animator animator) {
            if (ChatActivity.this.runningAnimation == null || !ChatActivity.this.runningAnimation.equals(animator)) {
                return;
            }
            ChatActivity.this.runningAnimation = null;
        }
    }

    public /* synthetic */ void lambda$initStickers$90(View view, int i) {
        AnimatedEmojiSpan animatedEmojiSpan;
        Object item = this.stickersAdapter.getItem(i);
        if (item instanceof String) {
            String str = (String) item;
            if (str != null && str.startsWith("animated_")) {
                try {
                    long parseLong = Long.parseLong(str.substring(9));
                    TLRPC$Document findDocument = AnimatedEmojiDrawable.findDocument(this.currentAccount, parseLong);
                    SpannableString spannableString = new SpannableString(MessageObject.findAnimatedEmojiEmoticon(findDocument));
                    if (findDocument != null) {
                        animatedEmojiSpan = new AnimatedEmojiSpan(findDocument, this.chatActivityEnterView.getEditField().getPaint().getFontMetricsInt());
                    } else {
                        animatedEmojiSpan = new AnimatedEmojiSpan(parseLong, this.chatActivityEnterView.getEditField().getPaint().getFontMetricsInt());
                    }
                    spannableString.setSpan(animatedEmojiSpan, 0, spannableString.length(), 33);
                    this.chatActivityEnterView.setFieldText(spannableString, false);
                    return;
                } catch (Exception unused) {
                }
            }
            SpannableString spannableString2 = new SpannableString(str);
            Emoji.replaceEmoji(spannableString2, this.chatActivityEnterView.getEditField().getPaint().getFontMetricsInt(), AndroidUtilities.dp(20.0f), false);
            this.chatActivityEnterView.setFieldText(spannableString2, false);
        }
    }

    public void shareMyContact(int i, MessageObject messageObject) {
        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity(), this.themeDelegate);
        builder.setTitle(LocaleController.getString("ShareYouPhoneNumberTitle", 2131628356));
        TLRPC$User tLRPC$User = this.currentUser;
        if (tLRPC$User != null) {
            if (tLRPC$User.bot) {
                builder.setMessage(LocaleController.getString("AreYouSureShareMyContactInfoBot", 2131624478));
            } else {
                PhoneFormat phoneFormat = PhoneFormat.getInstance();
                TLRPC$User tLRPC$User2 = this.currentUser;
                builder.setMessage(AndroidUtilities.replaceTags(LocaleController.formatString("AreYouSureShareMyContactInfoUser", 2131624479, phoneFormat.format("+" + getUserConfig().getCurrentUser().phone), ContactsController.formatName(tLRPC$User2.first_name, tLRPC$User2.last_name))));
            }
        } else {
            builder.setMessage(LocaleController.getString("AreYouSureShareMyContactInfo", 2131624477));
        }
        builder.setPositiveButton(LocaleController.getString("ShareContact", 2131628335), new ChatActivity$$ExternalSyntheticLambda34(this, i, messageObject));
        builder.setNegativeButton(LocaleController.getString("Cancel", 2131624832), null);
        showDialog(builder.create());
    }

    public /* synthetic */ void lambda$shareMyContact$92(int i, MessageObject messageObject, DialogInterface dialogInterface, int i2) {
        if (i == 1) {
            TLRPC$TL_contacts_acceptContact tLRPC$TL_contacts_acceptContact = new TLRPC$TL_contacts_acceptContact();
            tLRPC$TL_contacts_acceptContact.id = getMessagesController().getInputUser(this.currentUser);
            getConnectionsManager().sendRequest(tLRPC$TL_contacts_acceptContact, new ChatActivity$$ExternalSyntheticLambda219(this));
            return;
        }
        SendMessagesHelper.getInstance(this.currentAccount).sendMessage(getUserConfig().getCurrentUser(), this.dialog_id, messageObject, getThreadMessage(), (TLRPC$ReplyMarkup) null, (HashMap<String, String>) null, true, 0);
        if (this.chatMode == 0) {
            moveScrollToLastMessage(false);
        }
        hideFieldPanel(false);
    }

    public /* synthetic */ void lambda$shareMyContact$91(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error != null) {
            return;
        }
        getMessagesController().processUpdates((TLRPC$Updates) tLObject, false);
    }

    public void showVoiceHint(boolean z, boolean z2) {
        ChatActivityEnterView chatActivityEnterView;
        int i;
        String str;
        if (getParentActivity() == null || this.fragmentView == null) {
            return;
        }
        if ((z && this.voiceHintTextView == null) || this.chatMode != 0 || (chatActivityEnterView = this.chatActivityEnterView) == null || chatActivityEnterView.getAudioVideoButtonContainer() == null || this.chatActivityEnterView.getAudioVideoButtonContainer().getVisibility() != 0) {
            return;
        }
        if (this.voiceHintTextView == null) {
            SizeNotifierFrameLayout sizeNotifierFrameLayout = (SizeNotifierFrameLayout) this.fragmentView;
            int indexOfChild = sizeNotifierFrameLayout.indexOfChild(this.chatActivityEnterView);
            if (indexOfChild == -1) {
                return;
            }
            HintView hintView = new HintView(getParentActivity(), 9, this.themeDelegate);
            this.voiceHintTextView = hintView;
            sizeNotifierFrameLayout.addView(hintView, indexOfChild + 1, LayoutHelper.createFrame(-2, -2.0f, 51, 10.0f, 0.0f, 10.0f, 0.0f));
        }
        if (z) {
            this.voiceHintTextView.hide();
            return;
        }
        if (this.chatActivityEnterView.hasRecordVideo()) {
            HintView hintView2 = this.voiceHintTextView;
            if (z2) {
                i = 2131626196;
                str = "HoldToVideo";
            } else {
                i = 2131626194;
                str = "HoldToAudio";
            }
            hintView2.setText(LocaleController.getString(str, i));
        } else {
            this.voiceHintTextView.setText(LocaleController.getString("HoldToAudioOnly", 2131626195));
        }
        this.voiceHintTextView.showForView(this.chatActivityEnterView.getAudioVideoButtonContainer(), true);
    }

    public boolean checkSlowMode(View view) {
        CharSequence slowModeTimer = this.chatActivityEnterView.getSlowModeTimer();
        if (slowModeTimer != null) {
            showSlowModeHint(view, true, slowModeTimer);
            return true;
        }
        return false;
    }

    public void hideHints(boolean z) {
        if (!z) {
            HintView hintView = this.slowModeHint;
            if (hintView != null) {
                hintView.hide();
            }
            HintView hintView2 = this.searchAsListHint;
            if (hintView2 != null) {
                hintView2.hide();
            }
            HintView hintView3 = this.scheduledOrNoSoundHint;
            if (hintView3 != null) {
                hintView3.hide();
            }
        }
        HintView hintView4 = this.fwdRestrictedBottomHint;
        if (hintView4 != null) {
            hintView4.hide();
        }
        HintView hintView5 = this.fwdRestrictedTopHint;
        if (hintView5 != null) {
            hintView5.hide();
        }
        HintView hintView6 = this.noSoundHintView;
        if (hintView6 != null) {
            hintView6.hide();
        }
        HintView hintView7 = this.forwardHintView;
        if (hintView7 != null) {
            hintView7.hide();
        }
        HintView hintView8 = this.pollHintView;
        if (hintView8 != null) {
            hintView8.hide();
        }
        HintView hintView9 = this.timerHintView;
        if (hintView9 != null) {
            hintView9.hide();
        }
        ChecksHintView checksHintView = this.checksHintView;
        if (checksHintView != null) {
            checksHintView.hide();
        }
    }

    public void showSlowModeHint(View view, boolean z, CharSequence charSequence) {
        HintView hintView;
        if (getParentActivity() == null || this.fragmentView == null) {
            return;
        }
        if (!z && ((hintView = this.slowModeHint) == null || hintView.getVisibility() != 0)) {
            return;
        }
        this.slowModeHint.setText(AndroidUtilities.replaceTags(LocaleController.formatString("SlowModeHint", 2131628423, charSequence)));
        if (!z) {
            return;
        }
        this.slowModeHint.showForView(view, true);
    }

    public void showTimerHint() {
        String str;
        if (getParentActivity() == null || this.fragmentView == null || this.chatInfo == null) {
            return;
        }
        if (this.timerHintView == null) {
            HintView hintView = new HintView(getParentActivity(), 7, true, this.themeDelegate);
            this.timerHintView = hintView;
            hintView.setAlpha(0.0f);
            this.timerHintView.setVisibility(4);
            this.timerHintView.setShowingDuration(4000L);
            this.contentView.addView(this.timerHintView, LayoutHelper.createFrame(-2, -2.0f, 51, 19.0f, 0.0f, 19.0f, 0.0f));
        }
        int i = this.chatInfo.ttl_period;
        if (i > 86400) {
            str = LocaleController.formatPluralString("Days", i / 86400, new Object[0]);
        } else if (i >= 3600) {
            str = LocaleController.formatPluralString("Hours", i / 3600, new Object[0]);
        } else if (i >= 60) {
            str = LocaleController.formatPluralString("Minutes", i / 60, new Object[0]);
        } else {
            str = LocaleController.formatPluralString("Seconds", i, new Object[0]);
        }
        this.timerHintView.setText(LocaleController.formatString("AutoDeleteSetInfo", 2131624571, str));
        this.timerHintView.showForView(this.avatarContainer.getTimeItem(), true);
    }

    private void showSearchAsListHint() {
        if (getParentActivity() == null || this.fragmentView == null || this.searchCountText == null) {
            return;
        }
        if (this.searchAsListHint == null) {
            HintView hintView = new HintView(getParentActivity(), 3, this.themeDelegate);
            this.searchAsListHint = hintView;
            hintView.setAlpha(0.0f);
            this.searchAsListHint.setVisibility(4);
            this.searchAsListHint.setText(LocaleController.getString("TapToViewAsList", 2131628616));
            this.contentView.addView(this.searchAsListHint, LayoutHelper.createFrame(-2, -2.0f, 51, 19.0f, 0.0f, 19.0f, 0.0f));
        }
        this.searchAsListHint.showForView(this.searchCountText, true);
    }

    private void showScheduledOrNoSoundHint() {
        TLRPC$ChatFull tLRPC$ChatFull;
        boolean z = UserObject.isUserSelf(this.currentUser) || ((tLRPC$ChatFull = this.chatInfo) != null && tLRPC$ChatFull.slowmode_next_send_date > 0 && this.chatMode == 0);
        if (SharedConfig.scheduledOrNoSoundHintShows >= 3 || System.currentTimeMillis() % 4 != 0 || z) {
            return;
        }
        AndroidUtilities.cancelRunOnUIThread(this.showScheduledOrNoSoundRunnable);
        AndroidUtilities.runOnUIThread(this.showScheduledOrNoSoundRunnable, 200L);
    }

    public void showMediaBannedHint() {
        SizeNotifierFrameLayout sizeNotifierFrameLayout;
        int indexOfChild;
        if (getParentActivity() != null) {
            if ((this.currentChat == null && this.userInfo == null) || this.fragmentView == null) {
                return;
            }
            HintView hintView = this.mediaBanTooltip;
            if ((hintView != null && hintView.getVisibility() == 0) || (indexOfChild = (sizeNotifierFrameLayout = (SizeNotifierFrameLayout) this.fragmentView).indexOfChild(this.chatActivityEnterView)) == -1) {
                return;
            }
            try {
                this.fragmentView.performHapticFeedback(3, 2);
            } catch (Exception e) {
                FileLog.e(e);
            }
            if (this.mediaBanTooltip == null) {
                HintView hintView2 = new HintView(getParentActivity(), 9, this.themeDelegate);
                this.mediaBanTooltip = hintView2;
                hintView2.setVisibility(8);
                sizeNotifierFrameLayout.addView(this.mediaBanTooltip, indexOfChild + 1, LayoutHelper.createFrame(-2, -2.0f, 51, 10.0f, 0.0f, 10.0f, 0.0f));
            }
            TLRPC$UserFull tLRPC$UserFull = this.userInfo;
            if (tLRPC$UserFull != null && tLRPC$UserFull.voice_messages_forbidden) {
                this.mediaBanTooltip.setText(AndroidUtilities.replaceTags(LocaleController.formatString(this.chatActivityEnterView.isInVideoMode() ? 2131628961 : 2131629019, this.currentUser.first_name)));
            } else if (ChatObject.isActionBannedByDefault(this.currentChat, 7)) {
                this.mediaBanTooltip.setText(LocaleController.getString("GlobalAttachMediaRestricted", 2131626124));
            } else {
                TLRPC$TL_chatBannedRights tLRPC$TL_chatBannedRights = this.currentChat.banned_rights;
                if (tLRPC$TL_chatBannedRights == null) {
                    return;
                }
                if (AndroidUtilities.isBannedForever(tLRPC$TL_chatBannedRights)) {
                    this.mediaBanTooltip.setText(LocaleController.getString("AttachMediaRestrictedForever", 2131624509));
                } else {
                    this.mediaBanTooltip.setText(LocaleController.formatString("AttachMediaRestricted", 2131624508, LocaleController.formatDateForBan(this.currentChat.banned_rights.until_date)));
                }
            }
            View sendButton = this.chatActivityEnterView.getSendButton();
            View audioVideoButtonContainer = this.chatActivityEnterView.getAudioVideoButtonContainer();
            if (sendButton.getAlpha() < audioVideoButtonContainer.getAlpha()) {
                sendButton = audioVideoButtonContainer;
            }
            this.mediaBanTooltip.showForView(sendButton, true);
        }
    }

    public void showNoSoundHint() {
        ChatMessageCell chatMessageCell;
        MessageObject messageObject;
        AnimatedFileDrawable animation;
        if (this.scrollingChatListView || SharedConfig.noSoundHintShowed || this.chatListView == null || getParentActivity() == null || this.fragmentView == null) {
            return;
        }
        HintView hintView = this.noSoundHintView;
        if (hintView != null && hintView.getTag() != null) {
            return;
        }
        if (this.noSoundHintView == null) {
            SizeNotifierFrameLayout sizeNotifierFrameLayout = (SizeNotifierFrameLayout) this.fragmentView;
            int indexOfChild = sizeNotifierFrameLayout.indexOfChild(this.chatActivityEnterView);
            if (indexOfChild == -1) {
                return;
            }
            HintView hintView2 = new HintView(getParentActivity(), 0, this.themeDelegate);
            this.noSoundHintView = hintView2;
            hintView2.setShowingDuration(10000L);
            sizeNotifierFrameLayout.addView(this.noSoundHintView, indexOfChild + 1, LayoutHelper.createFrame(-2, -2.0f, 51, 19.0f, 0.0f, 19.0f, 0.0f));
            this.noSoundHintView.setAlpha(0.0f);
            this.noSoundHintView.setVisibility(4);
        }
        int childCount = this.chatListView.getChildCount();
        for (int i = 0; i < childCount; i++) {
            View childAt = this.chatListView.getChildAt(i);
            if ((childAt instanceof ChatMessageCell) && (messageObject = (chatMessageCell = (ChatMessageCell) childAt).getMessageObject()) != null && messageObject.isVideo() && (animation = chatMessageCell.getPhotoImage().getAnimation()) != null && animation.getCurrentProgressMs() >= 3000 && this.noSoundHintView.showForMessageCell(chatMessageCell, true)) {
                SharedConfig.setNoSoundHintShowed(true);
                return;
            }
        }
    }

    private void checkChecksHint() {
        if (getMessagesController().pendingSuggestions.contains("NEWCOMER_TICKS")) {
            AndroidUtilities.runOnUIThread(new ChatActivity$$ExternalSyntheticLambda131(this), 1000L);
        }
    }

    public void showChecksHint() {
        ChatMessageCell chatMessageCell;
        MessageObject messageObject;
        if (this.scrollingChatListView || this.chatListView == null || getParentActivity() == null || this.fragmentView == null) {
            return;
        }
        ChecksHintView checksHintView = this.checksHintView;
        if (checksHintView != null && checksHintView.getTag() != null) {
            return;
        }
        if (this.checksHintView == null) {
            SizeNotifierFrameLayout sizeNotifierFrameLayout = (SizeNotifierFrameLayout) this.fragmentView;
            int indexOfChild = sizeNotifierFrameLayout.indexOfChild(this.chatActivityEnterView);
            if (indexOfChild == -1) {
                return;
            }
            ChecksHintView checksHintView2 = new ChecksHintView(getParentActivity(), this.themeDelegate);
            this.checksHintView = checksHintView2;
            sizeNotifierFrameLayout.addView(checksHintView2, indexOfChild + 1, LayoutHelper.createFrame(-2, -2.0f, 51, 10.0f, 0.0f, 10.0f, 0.0f));
            this.checksHintView.setAlpha(0.0f);
            this.checksHintView.setVisibility(4);
        }
        int childCount = this.chatListView.getChildCount();
        for (int i = 0; i < childCount; i++) {
            View childAt = this.chatListView.getChildAt(i);
            if ((childAt instanceof ChatMessageCell) && (messageObject = (chatMessageCell = (ChatMessageCell) childAt).getMessageObject()) != null && messageObject.isOutOwner() && messageObject.isSent() && this.checksHintView.showForMessageCell(chatMessageCell, true)) {
                getMessagesController().removeSuggestion(0L, "NEWCOMER_TICKS");
                return;
            }
        }
    }

    public void showForwardHint(ChatMessageCell chatMessageCell) {
        View view;
        if (this.scrollingChatListView || this.chatListView == null || getParentActivity() == null || (view = this.fragmentView) == null) {
            return;
        }
        if (this.forwardHintView == null) {
            SizeNotifierFrameLayout sizeNotifierFrameLayout = (SizeNotifierFrameLayout) view;
            int indexOfChild = sizeNotifierFrameLayout.indexOfChild(this.chatActivityEnterView);
            if (indexOfChild == -1) {
                return;
            }
            HintView hintView = new HintView(getParentActivity(), 1, this.themeDelegate);
            this.forwardHintView = hintView;
            sizeNotifierFrameLayout.addView(hintView, indexOfChild + 1, LayoutHelper.createFrame(-2, -2.0f, 51, 19.0f, 0.0f, 19.0f, 0.0f));
            this.forwardHintView.setAlpha(0.0f);
            this.forwardHintView.setVisibility(4);
        }
        this.forwardHintView.showForMessageCell(chatMessageCell, true);
    }

    /* JADX WARN: Removed duplicated region for block: B:23:0x0045  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void showTextSelectionHint(MessageObject messageObject) {
        boolean z;
        CharSequence charSequence;
        if (getParentActivity() == null || getMessagesController().isChatNoForwards(messageObject.getChatId())) {
            return;
        }
        TLRPC$Message tLRPC$Message = messageObject.messageOwner;
        if (tLRPC$Message != null && tLRPC$Message.noforwards) {
            return;
        }
        ArrayList<MessageObject.TextLayoutBlock> arrayList = messageObject.textLayoutBlocks;
        boolean z2 = false;
        if (arrayList != null && !arrayList.isEmpty()) {
            charSequence = messageObject.messageText;
            if (messageObject.textLayoutBlocks.size() > 1) {
                z = true;
                if (!z && charSequence != null) {
                    if (charSequence.length() > 200) {
                        z2 = true;
                    }
                    z = z2;
                }
                if (!z || SharedConfig.textSelectionHintShows > 2 || this.textSelectionHintWasShowed || this.lastTouchY > this.chatActivityEnterView.getTop() - AndroidUtilities.dp(60.0f)) {
                    return;
                }
                this.textSelectionHintWasShowed = true;
                SharedConfig.increaseTextSelectionHintShowed();
                if (this.textSelectionHint == null) {
                    AnonymousClass68 anonymousClass68 = new AnonymousClass68(getParentActivity(), this.themeDelegate);
                    this.textSelectionHint = anonymousClass68;
                    this.contentView.addView(anonymousClass68, LayoutHelper.createFrame(-2, 56.0f, 83, 8.0f, 0.0f, 8.0f, 8.0f));
                }
                this.textSelectionHint.show();
                return;
            }
        } else {
            charSequence = messageObject.caption;
        }
        z = false;
        if (!z) {
            if (charSequence.length() > 200) {
            }
            z = z2;
        }
        if (!z) {
        }
    }

    /* renamed from: org.telegram.ui.ChatActivity$68 */
    /* loaded from: classes3.dex */
    public class AnonymousClass68 extends TextSelectionHint {
        /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
        AnonymousClass68(Context context, Theme.ResourcesProvider resourcesProvider) {
            super(context, resourcesProvider);
            ChatActivity.this = r1;
        }

        @Override // org.telegram.ui.Components.TextSelectionHint, android.view.View
        public void onMeasure(int i, int i2) {
            super.onMeasure(i, i2);
            updatePosition();
        }

        @Override // org.telegram.ui.Components.TextSelectionHint, android.view.View
        public void onDraw(Canvas canvas) {
            super.onDraw(canvas);
            updatePosition();
        }

        public void updatePosition() {
            int top = ChatActivity.this.chatActivityEnterView.getTop() - ChatActivity.this.contentView.getMeasuredHeight();
            setTranslationY(top - ((top + (-(getMeasuredHeight() + AndroidUtilities.dp(16.0f)))) * (1.0f - getPrepareProgress())));
        }
    }

    private boolean showGifHint() {
        View view;
        ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        if (chatActivityEnterView != null && chatActivityEnterView.getVisibility() == 0) {
            SharedPreferences globalMainSettings = MessagesController.getGlobalMainSettings();
            if (globalMainSettings.getBoolean("gifhint", false)) {
                return false;
            }
            globalMainSettings.edit().putBoolean("gifhint", true).commit();
            if (getParentActivity() != null && (view = this.fragmentView) != null && this.gifHintTextView == null) {
                if (!this.allowContextBotPanelSecond) {
                    ChatActivityEnterView chatActivityEnterView2 = this.chatActivityEnterView;
                    if (chatActivityEnterView2 != null) {
                        chatActivityEnterView2.setOpenGifsTabFirst();
                    }
                    return false;
                }
                SizeNotifierFrameLayout sizeNotifierFrameLayout = (SizeNotifierFrameLayout) view;
                int indexOfChild = sizeNotifierFrameLayout.indexOfChild(this.chatActivityEnterView);
                if (indexOfChild == -1) {
                    return false;
                }
                this.chatActivityEnterView.setOpenGifsTabFirst();
                View view2 = new View(getParentActivity());
                this.emojiButtonRed = view2;
                view2.setBackgroundResource(2131166114);
                int i = indexOfChild + 1;
                sizeNotifierFrameLayout.addView(this.emojiButtonRed, i, LayoutHelper.createFrame(10, 10.0f, 83, 30.0f, 0.0f, 0.0f, 27.0f));
                HintView hintView = new HintView(getParentActivity(), 9, this.themeDelegate);
                this.gifHintTextView = hintView;
                hintView.setText(LocaleController.getString("TapHereGifs", 2131628602));
                sizeNotifierFrameLayout.addView(this.gifHintTextView, i, LayoutHelper.createFrame(-2, -2.0f, 83, 5.0f, 0.0f, 5.0f, 3.0f));
                AnimatorSet animatorSet = new AnimatorSet();
                animatorSet.playTogether(ObjectAnimator.ofFloat(this.gifHintTextView, View.ALPHA, 0.0f, 1.0f), ObjectAnimator.ofFloat(this.emojiButtonRed, View.ALPHA, 0.0f, 1.0f));
                animatorSet.addListener(new AnonymousClass69());
                animatorSet.setDuration(300L);
                animatorSet.start();
                View emojiButton = this.chatActivityEnterView.getEmojiButton();
                if (emojiButton != null) {
                    this.gifHintTextView.showForView(emojiButton, true);
                }
                return true;
            }
        }
        return false;
    }

    /* renamed from: org.telegram.ui.ChatActivity$69 */
    /* loaded from: classes3.dex */
    public class AnonymousClass69 extends AnimatorListenerAdapter {
        AnonymousClass69() {
            ChatActivity.this = r1;
        }

        @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
        public void onAnimationEnd(Animator animator) {
            AndroidUtilities.runOnUIThread(new ChatActivity$69$$ExternalSyntheticLambda0(this), 2000L);
        }

        public /* synthetic */ void lambda$onAnimationEnd$0() {
            if (ChatActivity.this.gifHintTextView == null) {
                return;
            }
            AnimatorSet animatorSet = new AnimatorSet();
            animatorSet.playTogether(ObjectAnimator.ofFloat(ChatActivity.this.gifHintTextView, View.ALPHA, 0.0f));
            animatorSet.addListener(new AnonymousClass1());
            animatorSet.setDuration(300L);
            animatorSet.start();
        }

        /* renamed from: org.telegram.ui.ChatActivity$69$1 */
        /* loaded from: classes3.dex */
        public class AnonymousClass1 extends AnimatorListenerAdapter {
            AnonymousClass1() {
                AnonymousClass69.this = r1;
            }

            @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
            public void onAnimationEnd(Animator animator) {
                if (ChatActivity.this.gifHintTextView != null) {
                    ChatActivity.this.gifHintTextView.setVisibility(8);
                }
            }
        }
    }

    public void openAttachMenu() {
        if (getParentActivity() != null) {
            ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
            if (chatActivityEnterView != null && !TextUtils.isEmpty(chatActivityEnterView.getSlowModeTimer())) {
                return;
            }
            createChatAttachView();
            this.chatAttachAlert.getPhotoLayout().loadGalleryPhotos();
            int i = Build.VERSION.SDK_INT;
            if (i == 21 || i == 22) {
                this.chatActivityEnterView.closeKeyboard();
            }
            TLRPC$Chat tLRPC$Chat = this.currentChat;
            if (tLRPC$Chat != null && !ChatObject.hasAdminRights(tLRPC$Chat) && this.currentChat.slowmode_enabled) {
                this.chatAttachAlert.setMaxSelectedPhotos(10, true);
            } else {
                this.chatAttachAlert.setMaxSelectedPhotos(-1, true);
            }
            this.chatAttachAlert.init();
            this.chatAttachAlert.getCommentTextView().setText(this.chatActivityEnterView.getFieldText());
            ChatAttachAlert chatAttachAlert = this.chatAttachAlert;
            chatAttachAlert.parentThemeDelegate = this.themeDelegate;
            showDialog(chatAttachAlert);
        }
    }

    public void checkAutoDownloadMessages(boolean z) {
        if (this.chatListView == null) {
            return;
        }
        showNoSoundHint();
    }

    public void showFloatingDateView(boolean z) {
        ChatActionCell chatActionCell = this.floatingDateView;
        if (chatActionCell == null) {
            return;
        }
        if (chatActionCell.getTag() == null) {
            AnimatorSet animatorSet = this.floatingDateAnimation;
            if (animatorSet != null) {
                animatorSet.cancel();
            }
            this.floatingDateView.setTag(1);
            AnimatorSet animatorSet2 = new AnimatorSet();
            this.floatingDateAnimation = animatorSet2;
            animatorSet2.setDuration(150L);
            this.floatingDateAnimation.playTogether(ObjectAnimator.ofFloat(this.floatingDateView, View.ALPHA, 1.0f));
            this.floatingDateAnimation.addListener(new AnonymousClass70());
            this.floatingDateAnimation.start();
        }
        if (z) {
            return;
        }
        invalidateMessagesVisiblePart();
        this.hideDateDelay = 1000;
    }

    /* renamed from: org.telegram.ui.ChatActivity$70 */
    /* loaded from: classes3.dex */
    public class AnonymousClass70 extends AnimatorListenerAdapter {
        AnonymousClass70() {
            ChatActivity.this = r1;
        }

        @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
        public void onAnimationEnd(Animator animator) {
            if (animator.equals(ChatActivity.this.floatingDateAnimation)) {
                ChatActivity.this.floatingDateAnimation = null;
            }
        }
    }

    public void hideFloatingDateView(boolean z) {
        if (this.floatingDateView.getTag() == null || this.currentFloatingDateOnScreen) {
            return;
        }
        if (this.scrollingFloatingDate && !this.currentFloatingTopIsNotMessage) {
            return;
        }
        this.floatingDateView.setTag(null);
        if (z) {
            AnimatorSet animatorSet = new AnimatorSet();
            this.floatingDateAnimation = animatorSet;
            animatorSet.setDuration(150L);
            this.floatingDateAnimation.playTogether(ObjectAnimator.ofFloat(this.floatingDateView, View.ALPHA, 0.0f));
            this.floatingDateAnimation.addListener(new AnonymousClass71());
            this.floatingDateAnimation.setStartDelay(this.hideDateDelay);
            this.floatingDateAnimation.start();
        } else {
            AnimatorSet animatorSet2 = this.floatingDateAnimation;
            if (animatorSet2 != null) {
                animatorSet2.cancel();
                this.floatingDateAnimation = null;
            }
            this.floatingDateView.setAlpha(0.0f);
        }
        this.hideDateDelay = 500;
    }

    /* renamed from: org.telegram.ui.ChatActivity$71 */
    /* loaded from: classes3.dex */
    public class AnonymousClass71 extends AnimatorListenerAdapter {
        AnonymousClass71() {
            ChatActivity.this = r1;
        }

        @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
        public void onAnimationEnd(Animator animator) {
            if (animator.equals(ChatActivity.this.floatingDateAnimation)) {
                ChatActivity.this.floatingDateAnimation = null;
            }
        }
    }

    @Override // org.telegram.ui.ActionBar.BaseFragment
    public void onRemoveFromParent() {
        MessageObject playingMessageObject = MediaController.getInstance().getPlayingMessageObject();
        if (playingMessageObject != null && playingMessageObject.isVideo()) {
            MediaController.getInstance().cleanupPlayer(true, true);
        } else {
            MediaController.getInstance().setTextureView(this.videoTextureView, null, null, false);
        }
    }

    public void setIgnoreAttachOnPause(boolean z) {
        this.ignoreAttachOnPause = z;
    }

    public ChatActivityEnterView getChatActivityEnterViewForStickers() {
        TLRPC$Chat tLRPC$Chat;
        if (this.bottomOverlayChat.getVisibility() == 0 || ((tLRPC$Chat = this.currentChat) != null && !ChatObject.canSendStickers(tLRPC$Chat))) {
            return null;
        }
        return this.chatActivityEnterView;
    }

    public ChatActivityEnterView getChatActivityEnterView() {
        return this.chatActivityEnterView;
    }

    public boolean isKeyboardVisible() {
        return this.contentView.getKeyboardHeight() > AndroidUtilities.dp(20.0f);
    }

    public void checkScrollForLoad(boolean z) {
        GridLayoutManagerFixed gridLayoutManagerFixed = this.chatLayoutManager;
        if (gridLayoutManagerFixed == null || this.paused || this.chatAdapter.isFrozen) {
            return;
        }
        int findFirstVisibleItemPosition = gridLayoutManagerFixed.findFirstVisibleItemPosition();
        int abs = findFirstVisibleItemPosition == -1 ? 0 : Math.abs(this.chatLayoutManager.findLastVisibleItemPosition() - findFirstVisibleItemPosition) + 1;
        if ((this.chatAdapter.getItemCount() - findFirstVisibleItemPosition) - abs <= (z ? 25 : 5) && !this.loading) {
            boolean[] zArr = this.endReached;
            if (!zArr[0]) {
                this.loading = true;
                this.waitingForLoad.add(Integer.valueOf(this.lastLoadIndex));
                if (this.messagesByDays.size() != 0) {
                    MessagesController messagesController = getMessagesController();
                    long j = this.dialog_id;
                    long j2 = this.mergeDialogId;
                    int i = this.maxMessageId[0];
                    boolean z2 = !this.cacheEndReached[0];
                    int i2 = this.minDate[0];
                    int i3 = this.classGuid;
                    int i4 = this.chatMode;
                    int i5 = this.threadMessageId;
                    int i6 = this.replyMaxReadId;
                    int i7 = this.lastLoadIndex;
                    this.lastLoadIndex = i7 + 1;
                    messagesController.loadMessages(j, j2, false, 50, i, 0, z2, i2, i3, 0, 0, i4, i5, i6, i7);
                } else {
                    MessagesController messagesController2 = getMessagesController();
                    long j3 = this.dialog_id;
                    long j4 = this.mergeDialogId;
                    boolean z3 = !this.cacheEndReached[0];
                    int i8 = this.minDate[0];
                    int i9 = this.classGuid;
                    int i10 = this.chatMode;
                    int i11 = this.threadMessageId;
                    int i12 = this.replyMaxReadId;
                    int i13 = this.lastLoadIndex;
                    this.lastLoadIndex = i13 + 1;
                    messagesController2.loadMessages(j3, j4, false, 50, 0, 0, z3, i8, i9, 0, 0, i10, i11, i12, i13);
                }
            } else if (this.mergeDialogId != 0 && !zArr[1]) {
                this.loading = true;
                this.waitingForLoad.add(Integer.valueOf(this.lastLoadIndex));
                MessagesController messagesController3 = getMessagesController();
                long j5 = this.mergeDialogId;
                int i14 = this.maxMessageId[1];
                boolean z4 = !this.cacheEndReached[1];
                int i15 = this.minDate[1];
                int i16 = this.classGuid;
                int i17 = this.chatMode;
                int i18 = this.threadMessageId;
                int i19 = this.replyMaxReadId;
                int i20 = this.lastLoadIndex;
                this.lastLoadIndex = i20 + 1;
                messagesController3.loadMessages(j5, 0L, false, 50, i14, 0, z4, i15, i16, 0, 0, i17, i18, i19, i20);
            }
        }
        if (abs <= 0 || this.loadingForward || findFirstVisibleItemPosition > 10) {
            return;
        }
        if (this.mergeDialogId != 0 && !this.forwardEndReached[1]) {
            this.waitingForLoad.add(Integer.valueOf(this.lastLoadIndex));
            MessagesController messagesController4 = getMessagesController();
            long j6 = this.mergeDialogId;
            int i21 = this.minMessageId[1];
            int i22 = this.maxDate[1];
            int i23 = this.classGuid;
            int i24 = this.chatMode;
            int i25 = this.threadMessageId;
            int i26 = this.replyMaxReadId;
            int i27 = this.lastLoadIndex;
            this.lastLoadIndex = i27 + 1;
            messagesController4.loadMessages(j6, 0L, false, 50, i21, 0, true, i22, i23, 1, 0, i24, i25, i26, i27);
            this.loadingForward = true;
        } else if (this.forwardEndReached[0]) {
        } else {
            this.waitingForLoad.add(Integer.valueOf(this.lastLoadIndex));
            MessagesController messagesController5 = getMessagesController();
            long j7 = this.dialog_id;
            long j8 = this.mergeDialogId;
            int i28 = this.minMessageId[0];
            int i29 = this.maxDate[0];
            int i30 = this.classGuid;
            int i31 = this.chatMode;
            int i32 = this.threadMessageId;
            int i33 = this.replyMaxReadId;
            int i34 = this.lastLoadIndex;
            this.lastLoadIndex = i34 + 1;
            messagesController5.loadMessages(j7, j8, false, 50, i28, 0, true, i29, i30, 1, 0, i31, i32, i33, i34);
            this.loadingForward = true;
        }
    }

    public void processSelectedAttach(int i) {
        TLRPC$TL_chatBannedRights tLRPC$TL_chatBannedRights;
        boolean z = false;
        if (i == 0) {
            int i2 = Build.VERSION.SDK_INT;
            if (i2 >= 23 && getParentActivity().checkSelfPermission("android.permission.CAMERA") != 0) {
                getParentActivity().requestPermissions(new String[]{"android.permission.CAMERA"}, 19);
                return;
            }
            try {
                Intent intent = new Intent("android.media.action.IMAGE_CAPTURE");
                File generatePicturePath = AndroidUtilities.generatePicturePath();
                if (generatePicturePath != null) {
                    if (i2 >= 24) {
                        intent.putExtra("output", FileProvider.getUriForFile(getParentActivity(), "org.telegram.messenger.beta.provider", generatePicturePath));
                        intent.addFlags(2);
                        intent.addFlags(1);
                    } else {
                        intent.putExtra("output", Uri.fromFile(generatePicturePath));
                    }
                    this.currentPicturePath = generatePicturePath.getAbsolutePath();
                }
                startActivityForResult(intent, 0);
            } catch (Exception e) {
                FileLog.e(e);
            }
        } else if (i == 1) {
            if (Build.VERSION.SDK_INT >= 23 && getParentActivity().checkSelfPermission("android.permission.READ_EXTERNAL_STORAGE") != 0) {
                try {
                    getParentActivity().requestPermissions(new String[]{"android.permission.READ_EXTERNAL_STORAGE"}, 4);
                    return;
                } catch (Throwable unused) {
                    return;
                }
            }
            PhotoAlbumPickerActivity photoAlbumPickerActivity = new PhotoAlbumPickerActivity(PhotoAlbumPickerActivity.SELECT_TYPE_ALL, !ChatObject.isChannel(this.currentChat) || (tLRPC$TL_chatBannedRights = this.currentChat.banned_rights) == null || !tLRPC$TL_chatBannedRights.send_gifs, true, this);
            TLRPC$Chat tLRPC$Chat = this.currentChat;
            if (tLRPC$Chat != null && !ChatObject.hasAdminRights(tLRPC$Chat) && this.currentChat.slowmode_enabled) {
                photoAlbumPickerActivity.setMaxSelectedPhotos(10, true);
            } else {
                MessageObject messageObject = this.editingMessageObject;
                int i3 = messageObject != null ? 1 : 0;
                if (messageObject == null) {
                    z = true;
                }
                photoAlbumPickerActivity.setMaxSelectedPhotos(i3, z);
            }
            photoAlbumPickerActivity.setDelegate(new AnonymousClass72());
            presentFragment(photoAlbumPickerActivity);
        } else if (i != 2) {
        } else {
            int i4 = Build.VERSION.SDK_INT;
            if (i4 >= 23 && getParentActivity().checkSelfPermission("android.permission.CAMERA") != 0) {
                try {
                    getParentActivity().requestPermissions(new String[]{"android.permission.CAMERA"}, 20);
                    return;
                } catch (Throwable unused2) {
                    return;
                }
            }
            try {
                Intent intent2 = new Intent("android.media.action.VIDEO_CAPTURE");
                File generateVideoPath = AndroidUtilities.generateVideoPath();
                if (generateVideoPath != null) {
                    if (i4 >= 24) {
                        intent2.putExtra("output", FileProvider.getUriForFile(getParentActivity(), "org.telegram.messenger.beta.provider", generateVideoPath));
                        intent2.addFlags(2);
                        intent2.addFlags(1);
                    } else if (i4 >= 18) {
                        intent2.putExtra("output", Uri.fromFile(generateVideoPath));
                    }
                    intent2.putExtra("android.intent.extra.sizeLimit", 2097152000L);
                    this.currentPicturePath = generateVideoPath.getAbsolutePath();
                }
                startActivityForResult(intent2, 2);
            } catch (Exception e2) {
                FileLog.e(e2);
            }
        }
    }

    /* renamed from: org.telegram.ui.ChatActivity$72 */
    /* loaded from: classes3.dex */
    public class AnonymousClass72 implements PhotoAlbumPickerActivity.PhotoAlbumPickerActivityDelegate {
        @Override // org.telegram.ui.PhotoAlbumPickerActivity.PhotoAlbumPickerActivityDelegate
        public void didSelectPhotos(ArrayList<SendMessagesHelper.SendingMediaInfo> arrayList, boolean z, int i) {
        }

        AnonymousClass72() {
            ChatActivity.this = r1;
        }

        @Override // org.telegram.ui.PhotoAlbumPickerActivity.PhotoAlbumPickerActivityDelegate
        public void startPhotoSelectActivity() {
            try {
                Intent intent = new Intent();
                intent.setType("video/*");
                intent.setAction("android.intent.action.GET_CONTENT");
                intent.putExtra("android.intent.extra.sizeLimit", 2097152000L);
                Intent intent2 = new Intent("android.intent.action.PICK");
                intent2.setType("image/*");
                Intent createChooser = Intent.createChooser(intent2, null);
                createChooser.putExtra("android.intent.extra.INITIAL_INTENTS", new Intent[]{intent});
                ChatActivity.this.startActivityForResult(createChooser, 1);
            } catch (Exception e) {
                FileLog.e(e);
            }
        }
    }

    public boolean allowSendGifs() {
        TLRPC$TL_chatBannedRights tLRPC$TL_chatBannedRights;
        return !ChatObject.isChannel(this.currentChat) || (tLRPC$TL_chatBannedRights = this.currentChat.banned_rights) == null || !tLRPC$TL_chatBannedRights.send_gifs;
    }

    public void openPollCreate(Boolean bool) {
        PollCreateActivity pollCreateActivity = new PollCreateActivity(this, bool);
        pollCreateActivity.setDelegate(new ChatActivity$$ExternalSyntheticLambda258(this));
        presentFragment(pollCreateActivity);
    }

    public /* synthetic */ void lambda$openPollCreate$93(TLRPC$TL_messageMediaPoll tLRPC$TL_messageMediaPoll, HashMap hashMap, boolean z, int i) {
        getSendMessagesHelper().sendMessage(tLRPC$TL_messageMediaPoll, this.dialog_id, this.replyingMessageObject, getThreadMessage(), (TLRPC$ReplyMarkup) null, (HashMap<String, String>) hashMap, z, i);
        afterMessageSend();
    }

    @Override // org.telegram.ui.Components.ChatAttachAlertDocumentLayout.DocumentSelectActivityDelegate
    public void didSelectFiles(ArrayList<String> arrayList, String str, ArrayList<MessageObject> arrayList2, boolean z, int i) {
        String str2;
        fillEditingMediaWithCaption(str, null);
        if (arrayList2.isEmpty() || TextUtils.isEmpty(str)) {
            str2 = str;
        } else {
            SendMessagesHelper.getInstance(this.currentAccount).sendMessage(str, this.dialog_id, null, null, null, true, null, null, null, true, 0, null);
            str2 = null;
        }
        getSendMessagesHelper().sendMessage(arrayList2, this.dialog_id, false, false, true, 0);
        SendMessagesHelper.prepareSendingDocuments(getAccountInstance(), arrayList, arrayList, null, str2, null, this.dialog_id, this.replyingMessageObject, getThreadMessage(), null, this.editingMessageObject, z, i);
        afterMessageSend();
    }

    @Override // org.telegram.ui.Components.ChatAttachAlertDocumentLayout.DocumentSelectActivityDelegate
    public void didSelectPhotos(ArrayList<SendMessagesHelper.SendingMediaInfo> arrayList, boolean z, int i) {
        fillEditingMediaWithCaption(arrayList.get(0).caption, arrayList.get(0).entities);
        SendMessagesHelper.prepareSendingMedia(getAccountInstance(), arrayList, this.dialog_id, this.replyingMessageObject, getThreadMessage(), null, true, false, this.editingMessageObject, z, i);
        afterMessageSend();
        if (i != 0) {
            if (this.scheduledMessagesCount == -1) {
                this.scheduledMessagesCount = 0;
            }
            this.scheduledMessagesCount += arrayList.size();
            updateScheduledInterface(true);
        }
    }

    public void didSelectSearchPhotos(ArrayList<SendMessagesHelper.SendingMediaInfo> arrayList, boolean z, int i) {
        boolean z2;
        if (arrayList.isEmpty()) {
            return;
        }
        int i2 = 0;
        while (true) {
            if (i2 >= arrayList.size()) {
                z2 = false;
                break;
            }
            SendMessagesHelper.SendingMediaInfo sendingMediaInfo = arrayList.get(i2);
            if (sendingMediaInfo.inlineResult == null && sendingMediaInfo.videoEditedInfo == null) {
                z2 = true;
                break;
            }
            i2++;
        }
        if (!z2 && !TextUtils.isEmpty(arrayList.get(0).caption)) {
            SendMessagesHelper.getInstance(this.currentAccount).sendMessage(arrayList.get(0).caption, this.dialog_id, this.replyingMessageObject, getThreadMessage(), null, false, arrayList.get(0).entities, null, null, z, i, null);
        }
        int i3 = 0;
        while (i3 < arrayList.size()) {
            SendMessagesHelper.SendingMediaInfo sendingMediaInfo2 = arrayList.get(i3);
            if (sendingMediaInfo2.inlineResult != null && sendingMediaInfo2.videoEditedInfo == null) {
                SendMessagesHelper.prepareSendingBotContextResult(getAccountInstance(), sendingMediaInfo2.inlineResult, sendingMediaInfo2.params, this.dialog_id, this.replyingMessageObject, getThreadMessage(), z, i);
                arrayList.remove(i3);
                i3--;
            }
            i3++;
        }
        if (arrayList.isEmpty()) {
            return;
        }
        fillEditingMediaWithCaption(arrayList.get(0).caption, arrayList.get(0).entities);
        SendMessagesHelper.prepareSendingMedia(getAccountInstance(), arrayList, this.dialog_id, this.replyingMessageObject, getThreadMessage(), null, false, true, this.editingMessageObject, z, i);
        afterMessageSend();
        if (i == 0) {
            return;
        }
        if (this.scheduledMessagesCount == -1) {
            this.scheduledMessagesCount = 0;
        }
        this.scheduledMessagesCount += arrayList.size();
        updateScheduledInterface(true);
    }

    @Override // org.telegram.ui.Components.ChatAttachAlertDocumentLayout.DocumentSelectActivityDelegate
    public void startDocumentSelectActivity() {
        try {
            Intent intent = new Intent("android.intent.action.GET_CONTENT");
            if (Build.VERSION.SDK_INT >= 18) {
                intent.putExtra("android.intent.extra.ALLOW_MULTIPLE", true);
            }
            intent.setType("*/*");
            startActivityForResult(intent, 21);
        } catch (Exception e) {
            FileLog.e(e);
        }
    }

    @Override // org.telegram.ui.ActionBar.BaseFragment
    public boolean dismissDialogOnPause(Dialog dialog) {
        return dialog != this.chatAttachAlert && super.dismissDialogOnPause(dialog);
    }

    /* JADX WARN: Removed duplicated region for block: B:36:0x007e A[ADDED_TO_REGION] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void searchLinks(CharSequence charSequence, boolean z) {
        TLRPC$WebPage tLRPC$WebPage;
        char c;
        if (this.currentEncryptedChat == null || getMessagesController().secretWebpagePreview != 0) {
            MessageObject messageObject = this.editingMessageObject;
            if (messageObject != null && !messageObject.isWebpage()) {
                return;
            }
            if (z && (tLRPC$WebPage = this.foundWebPage) != null) {
                String str = tLRPC$WebPage.url;
                if (str != null) {
                    int indexOf = TextUtils.indexOf(charSequence, str);
                    boolean z2 = true;
                    if (indexOf == -1) {
                        String str2 = this.foundWebPage.display_url;
                        if (str2 != null) {
                            indexOf = TextUtils.indexOf(charSequence, str2);
                            if (indexOf == -1 || this.foundWebPage.display_url.length() + indexOf != charSequence.length()) {
                                z2 = false;
                            }
                            if (indexOf != -1 && !z2) {
                                c = charSequence.charAt(this.foundWebPage.display_url.length() + indexOf);
                                if (indexOf != -1 && (z2 || c == ' ' || c == ',' || c == '.' || c == '!' || c == '/')) {
                                    return;
                                }
                            }
                        } else {
                            z2 = false;
                        }
                        c = 0;
                        if (indexOf != -1) {
                            return;
                        }
                    } else {
                        if (this.foundWebPage.url.length() + indexOf != charSequence.length()) {
                            z2 = false;
                        }
                        if (!z2) {
                            c = charSequence.charAt(this.foundWebPage.url.length() + indexOf);
                            if (indexOf != -1) {
                            }
                        }
                        c = 0;
                        if (indexOf != -1) {
                        }
                    }
                }
                this.pendingLinkSearchString = null;
                this.foundUrls = null;
                showFieldPanelForWebPage(false, this.foundWebPage, false);
            }
            Utilities.searchQueue.postRunnable(new ChatActivity$$ExternalSyntheticLambda171(this, charSequence, getMessagesController(), z));
        }
    }

    public /* synthetic */ void lambda$searchLinks$100(CharSequence charSequence, MessagesController messagesController, boolean z) {
        CharSequence charSequence2;
        URLSpanReplacement[] uRLSpanReplacementArr;
        boolean z2 = true;
        if (this.linkSearchRequestId != 0) {
            getConnectionsManager().cancelRequest(this.linkSearchRequestId, true);
            this.linkSearchRequestId = 0;
        }
        ArrayList<CharSequence> arrayList = null;
        try {
            Matcher matcher = AndroidUtilities.WEB_URL.matcher(charSequence);
            while (matcher.find()) {
                if (matcher.start() <= 0 || charSequence.charAt(matcher.start() - 1) != '@') {
                    if (arrayList == null) {
                        arrayList = new ArrayList<>();
                    }
                    arrayList.add(charSequence.subSequence(matcher.start(), matcher.end()));
                }
            }
            if ((charSequence instanceof Spannable) && (uRLSpanReplacementArr = (URLSpanReplacement[]) ((Spannable) charSequence).getSpans(0, charSequence.length(), URLSpanReplacement.class)) != null && uRLSpanReplacementArr.length > 0) {
                if (arrayList == null) {
                    arrayList = new ArrayList<>();
                }
                for (URLSpanReplacement uRLSpanReplacement : uRLSpanReplacementArr) {
                    arrayList.add(uRLSpanReplacement.getURL());
                }
            }
            if (arrayList != null && this.foundUrls != null && arrayList.size() == this.foundUrls.size()) {
                for (int i = 0; i < arrayList.size(); i++) {
                    if (!TextUtils.equals(arrayList.get(i), this.foundUrls.get(i))) {
                        z2 = false;
                    }
                }
                if (z2) {
                    return;
                }
            }
            this.foundUrls = arrayList;
        } catch (Exception e) {
            FileLog.e(e);
            String lowerCase = charSequence.toString().toLowerCase();
            if (charSequence.length() < 13 || (!lowerCase.contains("http://") && !lowerCase.contains("https://"))) {
                AndroidUtilities.runOnUIThread(new ChatActivity$$ExternalSyntheticLambda150(this));
                return;
            }
            charSequence2 = charSequence;
        }
        if (arrayList == null) {
            AndroidUtilities.runOnUIThread(new ChatActivity$$ExternalSyntheticLambda154(this));
            return;
        }
        charSequence2 = TextUtils.join(" ", arrayList);
        if (this.currentEncryptedChat != null && messagesController.secretWebpagePreview == 2) {
            AndroidUtilities.runOnUIThread(new ChatActivity$$ExternalSyntheticLambda179(this, messagesController, charSequence, z));
            return;
        }
        TLRPC$TL_messages_getWebPagePreview tLRPC$TL_messages_getWebPagePreview = new TLRPC$TL_messages_getWebPagePreview();
        if (charSequence2 instanceof String) {
            tLRPC$TL_messages_getWebPagePreview.message = (String) charSequence2;
        } else {
            tLRPC$TL_messages_getWebPagePreview.message = charSequence2.toString();
        }
        this.linkSearchRequestId = getConnectionsManager().sendRequest(tLRPC$TL_messages_getWebPagePreview, new ChatActivity$$ExternalSyntheticLambda227(this, tLRPC$TL_messages_getWebPagePreview));
        getConnectionsManager().bindRequestToGuid(this.linkSearchRequestId, this.classGuid);
    }

    public /* synthetic */ void lambda$searchLinks$94() {
        TLRPC$WebPage tLRPC$WebPage = this.foundWebPage;
        if (tLRPC$WebPage != null) {
            showFieldPanelForWebPage(false, tLRPC$WebPage, false);
            this.foundWebPage = null;
        }
    }

    public /* synthetic */ void lambda$searchLinks$95() {
        TLRPC$WebPage tLRPC$WebPage = this.foundWebPage;
        if (tLRPC$WebPage != null) {
            showFieldPanelForWebPage(false, tLRPC$WebPage, false);
            this.foundWebPage = null;
        }
    }

    public /* synthetic */ void lambda$searchLinks$97(MessagesController messagesController, CharSequence charSequence, boolean z) {
        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity(), this.themeDelegate);
        builder.setTitle(LocaleController.getString("AppName", 2131624384));
        builder.setPositiveButton(LocaleController.getString("OK", 2131627127), new ChatActivity$$ExternalSyntheticLambda39(this, messagesController, charSequence, z));
        builder.setNegativeButton(LocaleController.getString("Cancel", 2131624832), null);
        builder.setMessage(LocaleController.getString("SecretLinkPreviewAlert", 2131628217));
        showDialog(builder.create());
        messagesController.secretWebpagePreview = 0;
        MessagesController.getGlobalMainSettings().edit().putInt("secretWebpage2", messagesController.secretWebpagePreview).commit();
    }

    public /* synthetic */ void lambda$searchLinks$96(MessagesController messagesController, CharSequence charSequence, boolean z, DialogInterface dialogInterface, int i) {
        messagesController.secretWebpagePreview = 1;
        MessagesController.getGlobalMainSettings().edit().putInt("secretWebpage2", getMessagesController().secretWebpagePreview).commit();
        this.foundUrls = null;
        searchLinks(charSequence, z);
    }

    public /* synthetic */ void lambda$searchLinks$99(TLRPC$TL_messages_getWebPagePreview tLRPC$TL_messages_getWebPagePreview, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        AndroidUtilities.runOnUIThread(new ChatActivity$$ExternalSyntheticLambda191(this, tLRPC$TL_error, tLObject, tLRPC$TL_messages_getWebPagePreview));
    }

    public /* synthetic */ void lambda$searchLinks$98(TLRPC$TL_error tLRPC$TL_error, TLObject tLObject, TLRPC$TL_messages_getWebPagePreview tLRPC$TL_messages_getWebPagePreview) {
        this.linkSearchRequestId = 0;
        if (tLRPC$TL_error == null) {
            if (tLObject instanceof TLRPC$TL_messageMediaWebPage) {
                TLRPC$WebPage tLRPC$WebPage = ((TLRPC$TL_messageMediaWebPage) tLObject).webpage;
                this.foundWebPage = tLRPC$WebPage;
                if (!(tLRPC$WebPage instanceof TLRPC$TL_webPage) && !(tLRPC$WebPage instanceof TLRPC$TL_webPagePending)) {
                    if (tLRPC$WebPage == null) {
                        return;
                    }
                    showFieldPanelForWebPage(false, tLRPC$WebPage, false);
                    this.foundWebPage = null;
                    return;
                }
                if (tLRPC$WebPage instanceof TLRPC$TL_webPagePending) {
                    this.pendingLinkSearchString = tLRPC$TL_messages_getWebPagePreview.message;
                }
                if (this.currentEncryptedChat != null && (tLRPC$WebPage instanceof TLRPC$TL_webPagePending)) {
                    tLRPC$WebPage.url = tLRPC$TL_messages_getWebPagePreview.message;
                }
                showFieldPanelForWebPage(true, tLRPC$WebPage, false);
                return;
            }
            TLRPC$WebPage tLRPC$WebPage2 = this.foundWebPage;
            if (tLRPC$WebPage2 == null) {
                return;
            }
            showFieldPanelForWebPage(false, tLRPC$WebPage2, false);
            this.foundWebPage = null;
        }
    }

    private void forwardMessages(ArrayList<MessageObject> arrayList, boolean z, boolean z2, boolean z3, int i) {
        if (arrayList == null || arrayList.isEmpty()) {
            return;
        }
        boolean z4 = false;
        boolean z5 = i != 0;
        if (this.chatMode == 1) {
            z4 = true;
        }
        if (z5 == z4) {
            this.waitingForSendingMessageLoad = true;
        }
        int sendMessage = getSendMessagesHelper().sendMessage(arrayList, this.dialog_id, z, z2, z3, i);
        AlertsCreator.showSendMediaAlert(sendMessage, this, this.themeDelegate);
        if (sendMessage == 0) {
            return;
        }
        AndroidUtilities.runOnUIThread(new ChatActivity$$ExternalSyntheticLambda140(this));
    }

    public /* synthetic */ void lambda$forwardMessages$101() {
        this.waitingForSendingMessageLoad = false;
        hideFieldPanel(true);
    }

    public boolean shouldShowImport() {
        return this.openImport;
    }

    public void setOpenImport() {
        this.openImport = true;
    }

    private void checkBotKeyboard() {
        MessageObject messageObject;
        if (this.chatActivityEnterView == null || (messageObject = this.botButtons) == null || this.userBlocked) {
            return;
        }
        if (messageObject.messageOwner.reply_markup instanceof TLRPC$TL_replyKeyboardForceReply) {
            SharedPreferences mainSettings = MessagesController.getMainSettings(this.currentAccount);
            if (mainSettings.getInt("answered_" + this.dialog_id, 0) == this.botButtons.getId()) {
                return;
            }
            if (this.replyingMessageObject != null && this.chatActivityEnterView.getFieldText() != null) {
                return;
            }
            MessageObject messageObject2 = this.botButtons;
            this.botReplyButtons = messageObject2;
            this.chatActivityEnterView.setButtons(messageObject2);
            showFieldPanelForReply(this.botButtons);
            return;
        }
        MessageObject messageObject3 = this.replyingMessageObject;
        if (messageObject3 != null && this.botReplyButtons == messageObject3) {
            this.botReplyButtons = null;
            hideFieldPanel(true);
        }
        this.chatActivityEnterView.setButtons(this.botButtons);
    }

    public void hideFieldPanel(boolean z) {
        showFieldPanel(false, null, null, null, null, true, 0, false, z);
    }

    public void hideFieldPanel(boolean z, int i, boolean z2) {
        showFieldPanel(false, null, null, null, null, z, i, false, z2);
    }

    public void showFieldPanelForWebPage(boolean z, TLRPC$WebPage tLRPC$WebPage, boolean z2) {
        showFieldPanel(z, null, null, null, tLRPC$WebPage, true, 0, z2, true);
    }

    public void showFieldPanelForForward(boolean z, ArrayList<MessageObject> arrayList) {
        showFieldPanel(z, null, null, arrayList, null, true, 0, false, true);
    }

    public void showFieldPanelForReply(MessageObject messageObject) {
        showFieldPanel(true, messageObject, null, null, null, true, 0, false, true);
    }

    public void showFieldPanelForEdit(boolean z, MessageObject messageObject) {
        showFieldPanel(z, null, messageObject, null, null, true, 0, false, true);
    }

    /* JADX WARN: Removed duplicated region for block: B:142:0x0349  */
    /* JADX WARN: Removed duplicated region for block: B:335:0x07a6  */
    /* JADX WARN: Removed duplicated region for block: B:358:0x082d  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void showFieldPanel(boolean z, MessageObject messageObject, MessageObject messageObject2, ArrayList<MessageObject> arrayList, TLRPC$WebPage tLRPC$WebPage, boolean z2, int i, boolean z3, boolean z4) {
        MessageObject messageObject3;
        boolean z5;
        ArrayList<MessageObject> arrayList2;
        boolean z6;
        FrameLayout.LayoutParams layoutParams;
        FrameLayout.LayoutParams layoutParams2;
        FrameLayout.LayoutParams layoutParams3;
        TLObject tLObject;
        int i2;
        TLRPC$PhotoSize tLRPC$PhotoSize;
        int i3;
        TLRPC$PhotoSize tLRPC$PhotoSize2;
        int i4;
        TLRPC$Chat tLRPC$Chat;
        TLRPC$User tLRPC$User;
        long j;
        long j2;
        String str;
        String str2;
        ArrayList<TLRPC$MessageEntity> arrayList3;
        TLRPC$Chat tLRPC$Chat2;
        String str3;
        String str4;
        MessageObject messageObject4 = messageObject;
        ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        if (chatActivityEnterView == null) {
            return;
        }
        boolean z7 = false;
        if (z) {
            if (messageObject4 == null && arrayList == null && messageObject2 == null && tLRPC$WebPage == null) {
                return;
            }
            hideHints(false);
            if (this.searchItem != null && this.actionBar.isSearchFieldVisible()) {
                this.actionBar.closeSearchField(false);
                this.chatActivityEnterView.setFieldFocused();
                AndroidUtilities.runOnUIThread(new ChatActivity$$ExternalSyntheticLambda147(this), 100L);
            }
            if (messageObject4 == null || messageObject.getDialogId() == this.dialog_id) {
                arrayList2 = arrayList;
                z5 = false;
            } else {
                arrayList2 = new ArrayList<>();
                arrayList2.add(messageObject4);
                messageObject4 = null;
                z5 = true;
            }
            this.chatActivityEnterTopView.setEditMode(false);
            if (messageObject2 != null) {
                this.forwardingMessages = null;
                if (this.threadMessageId == 0) {
                    this.replyingMessageObject = null;
                    this.chatActivityEnterView.setReplyingMessageObject(null);
                }
                this.editingMessageObject = messageObject2;
                boolean isMediaEmpty = messageObject2.isMediaEmpty();
                this.chatActivityEnterView.setEditingMessageObject(messageObject2, !isMediaEmpty);
                if (this.foundWebPage != null) {
                    return;
                }
                this.chatActivityEnterView.setForceShowSendButton(false, false);
                boolean canEditMedia = messageObject2.canEditMedia();
                this.replyCloseImageView.setContentDescription(LocaleController.getString("AccDescrCancelEdit", 2131623969));
                if (!isMediaEmpty && canEditMedia) {
                    if (messageObject2.isPhoto()) {
                        str4 = LocaleController.getString("EditMessageEditPhoto", 2131625594);
                        str3 = LocaleController.getString("EditMessageReplacePhoto", 2131625601);
                    } else if (messageObject2.isVideo()) {
                        str4 = LocaleController.getString("EditMessageEditVideo", 2131625595);
                        str3 = LocaleController.getString("EditMessageReplaceVideo", 2131625602);
                    } else {
                        if (messageObject2.isGif()) {
                            str3 = LocaleController.getString("EditMessageReplaceGif", 2131625600);
                        } else if (messageObject2.isMusic()) {
                            str3 = LocaleController.getString("EditMessageReplaceAudio", 2131625598);
                        } else {
                            str3 = LocaleController.getString("EditMessageReplaceFile", 2131625599);
                        }
                        str4 = null;
                    }
                    ChatActivityEnterTopView.EditViewButton[] buttons = this.chatActivityEnterTopView.getEditView().getButtons();
                    buttons[0].setEditButton(str4 != null);
                    buttons[0].getTextView().setText(str4 != null ? str4 : str3);
                    buttons[0].getImageView().setImageResource(str4 != null ? 2131165861 : 2131165900);
                    buttons[1].setVisibility(str4 != null ? 0 : 8);
                    if (str4 != null) {
                        buttons[1].getTextView().setText(str3);
                    }
                    this.chatActivityEnterTopView.setEditMode(true);
                } else {
                    this.replyIconImageView.setImageResource(2131165439);
                    this.replyIconImageView.setContentDescription(LocaleController.getString("AccDescrEditing", 2131623981));
                    if (isMediaEmpty) {
                        this.replyNameTextView.setText(LocaleController.getString("EditMessage", 2131625593));
                    } else {
                        this.replyNameTextView.setText(LocaleController.getString("EditCaption", 2131625588));
                    }
                    if (canEditMedia) {
                        this.replyObjectTextView.setText(LocaleController.getString("EditMessageMedia", 2131625597));
                    } else {
                        CharSequence charSequence = messageObject2.messageText;
                        if (charSequence != null || messageObject2.caption != null) {
                            CharSequence charSequence2 = messageObject2.caption;
                            String charSequence3 = charSequence2 != null ? charSequence2.toString() : charSequence.toString();
                            if (charSequence3.length() > 150) {
                                charSequence3 = charSequence3.substring(0, 150);
                            }
                            Spannable spannableStringBuilder = new SpannableStringBuilder(Emoji.replaceEmoji(charSequence3.replace('\n', ' '), this.replyObjectTextView.getPaint().getFontMetricsInt(), AndroidUtilities.dp(14.0f), false));
                            MediaDataController.addTextStyleRuns(messageObject2, spannableStringBuilder);
                            TLRPC$Message tLRPC$Message = messageObject2.messageOwner;
                            if (tLRPC$Message != null) {
                                spannableStringBuilder = MessageObject.replaceAnimatedEmoji(spannableStringBuilder, tLRPC$Message.entities, this.replyObjectTextView.getPaint().getFontMetricsInt());
                            }
                            this.replyObjectTextView.setText(spannableStringBuilder);
                        }
                    }
                }
            } else {
                long j3 = 0;
                if (messageObject4 != null) {
                    this.forwardingMessages = null;
                    this.editingMessageObject = null;
                    this.replyingMessageObject = messageObject4;
                    this.chatActivityEnterView.setReplyingMessageObject(messageObject4);
                    this.chatActivityEnterView.setEditingMessageObject(null, false);
                    if (this.foundWebPage != null) {
                        return;
                    }
                    CharSequence restrictionReason = MessagesController.getRestrictionReason(messageObject4.messageOwner.restriction_reason);
                    this.chatActivityEnterView.setForceShowSendButton(false, false);
                    if (messageObject4.isFromUser()) {
                        if (messageObject4.messageOwner.from_id.channel_id != 0) {
                            TLRPC$Chat chat = getMessagesController().getChat(Long.valueOf(messageObject4.messageOwner.from_id.channel_id));
                            if (chat == null) {
                                return;
                            }
                            str = chat.title;
                        } else {
                            TLRPC$User user = getMessagesController().getUser(Long.valueOf(messageObject4.messageOwner.from_id.user_id));
                            if (user == null) {
                                return;
                            }
                            str = UserObject.getUserName(user);
                        }
                    } else {
                        if (ChatObject.isChannel(this.currentChat) && this.currentChat.megagroup && messageObject4.isForwardedChannelPost()) {
                            tLRPC$Chat2 = getMessagesController().getChat(Long.valueOf(messageObject4.messageOwner.fwd_from.from_id.channel_id));
                        } else {
                            tLRPC$Chat2 = getMessagesController().getChat(Long.valueOf(-messageObject4.getSenderId()));
                        }
                        if (tLRPC$Chat2 == null) {
                            return;
                        }
                        str = tLRPC$Chat2.title;
                    }
                    this.replyIconImageView.setImageResource(2131165840);
                    this.replyNameTextView.setText(str);
                    this.replyIconImageView.setContentDescription(LocaleController.getString("AccDescrReplying", 2131624056));
                    this.replyCloseImageView.setContentDescription(LocaleController.getString("AccDescrCancelReply", 2131623971));
                    if (TextUtils.isEmpty(restrictionReason)) {
                        TLRPC$MessageMedia tLRPC$MessageMedia = messageObject4.messageOwner.media;
                        if (tLRPC$MessageMedia instanceof TLRPC$TL_messageMediaGame) {
                            restrictionReason = Emoji.replaceEmoji(tLRPC$MessageMedia.game.title, this.replyObjectTextView.getPaint().getFontMetricsInt(), AndroidUtilities.dp(14.0f), false);
                            str2 = messageObject4.messageOwner.media.game.title;
                        } else {
                            CharSequence charSequence4 = messageObject4.messageText;
                            if (charSequence4 == null && messageObject4.caption == null) {
                                restrictionReason = null;
                            } else {
                                CharSequence charSequence5 = messageObject4.caption;
                                String charSequence6 = charSequence5 != null ? charSequence5.toString() : charSequence4.toString();
                                CharSequence replaceNewLines = AndroidUtilities.replaceNewLines(charSequence6.length() > 150 ? charSequence6.subSequence(0, 150) : charSequence6);
                                TLRPC$Message tLRPC$Message2 = messageObject4.messageOwner;
                                if (tLRPC$Message2 != null && (arrayList3 = tLRPC$Message2.entities) != null) {
                                    replaceNewLines = MessageObject.replaceAnimatedEmoji(replaceNewLines, arrayList3, this.replyObjectTextView.getPaint().getFontMetricsInt());
                                }
                                CharSequence replaceEmoji = Emoji.replaceEmoji(replaceNewLines, this.replyObjectTextView.getPaint().getFontMetricsInt(), AndroidUtilities.dp(14.0f), false);
                                str2 = charSequence6;
                                restrictionReason = replaceEmoji;
                            }
                        }
                        if (restrictionReason != null) {
                            if ((restrictionReason instanceof Spannable) && str2 != null) {
                                MediaDataController.addTextStyleRuns(messageObject4.messageOwner.entities, str2, (Spannable) restrictionReason);
                            }
                            this.replyObjectTextView.setText(restrictionReason);
                        }
                    }
                    str2 = restrictionReason;
                    if (restrictionReason != null) {
                    }
                } else if (arrayList2 != null) {
                    if (arrayList2.isEmpty()) {
                        return;
                    }
                    if (this.threadMessageId == 0) {
                        this.replyingMessageObject = null;
                        this.chatActivityEnterView.setReplyingMessageObject(null);
                    }
                    this.editingMessageObject = null;
                    this.chatActivityEnterView.setEditingMessageObject(null, false);
                    if (this.forwardingMessages == null) {
                        this.forwardingMessages = new ForwardingMessagesParams(arrayList2, this.dialog_id);
                    }
                    if (this.foundWebPage != null) {
                        return;
                    }
                    this.chatActivityEnterView.setForceShowSendButton(true, false);
                    ArrayList arrayList4 = new ArrayList();
                    this.replyIconImageView.setImageResource(2131165839);
                    this.replyIconImageView.setContentDescription(LocaleController.getString("AccDescrForwarding", 2131623985));
                    this.replyCloseImageView.setContentDescription(LocaleController.getString("AccDescrCancelForward", 2131623970));
                    MessageObject messageObject5 = arrayList2.get(0);
                    if (messageObject5.isFromUser()) {
                        arrayList4.add(Long.valueOf(messageObject5.messageOwner.from_id.user_id));
                    } else {
                        TLRPC$Chat chat2 = getMessagesController().getChat(Long.valueOf(messageObject5.messageOwner.peer_id.channel_id));
                        if (ChatObject.isChannel(chat2) && chat2.megagroup && messageObject5.isForwardedChannelPost()) {
                            arrayList4.add(Long.valueOf(-messageObject5.messageOwner.fwd_from.from_id.channel_id));
                        } else {
                            arrayList4.add(Long.valueOf(-messageObject5.messageOwner.peer_id.channel_id));
                        }
                    }
                    int i5 = (messageObject5.isAnimatedEmoji() || messageObject5.isDice()) ? 0 : messageObject5.type;
                    for (int i6 = 1; i6 < arrayList2.size(); i6++) {
                        MessageObject messageObject6 = arrayList2.get(i6);
                        if (messageObject6.isFromUser()) {
                            j = messageObject6.messageOwner.from_id.user_id;
                        } else {
                            TLRPC$Chat chat3 = getMessagesController().getChat(Long.valueOf(messageObject6.messageOwner.peer_id.channel_id));
                            if (ChatObject.isChannel(chat3) && chat3.megagroup && messageObject6.isForwardedChannelPost()) {
                                j2 = messageObject6.messageOwner.fwd_from.from_id.channel_id;
                            } else {
                                j2 = messageObject6.messageOwner.peer_id.channel_id;
                            }
                            j = -j2;
                        }
                        if (!arrayList4.contains(Long.valueOf(j))) {
                            arrayList4.add(Long.valueOf(j));
                        }
                        if (arrayList2.get(i6).type != i5) {
                            i5 = -1;
                        }
                    }
                    StringBuilder sb = new StringBuilder();
                    int i7 = 0;
                    while (true) {
                        if (i7 >= arrayList4.size()) {
                            break;
                        }
                        Long l = (Long) arrayList4.get(i7);
                        if (l.longValue() > j3) {
                            tLRPC$User = getMessagesController().getUser(l);
                            tLRPC$Chat = null;
                        } else {
                            tLRPC$Chat = getMessagesController().getChat(Long.valueOf(-l.longValue()));
                            tLRPC$User = null;
                        }
                        if (tLRPC$User != null || tLRPC$Chat != null) {
                            if (arrayList4.size() != 1) {
                                if (arrayList4.size() == 2 || sb.length() == 0) {
                                    if (sb.length() > 0) {
                                        sb.append(", ");
                                    }
                                    if (tLRPC$User != null) {
                                        if (!TextUtils.isEmpty(tLRPC$User.first_name)) {
                                            sb.append(tLRPC$User.first_name);
                                        } else if (!TextUtils.isEmpty(tLRPC$User.last_name)) {
                                            sb.append(tLRPC$User.last_name);
                                        } else {
                                            sb.append(" ");
                                        }
                                    } else {
                                        sb.append(tLRPC$Chat.title);
                                    }
                                } else {
                                    sb.append(" ");
                                    sb.append(LocaleController.formatPluralString("AndOther", arrayList4.size() - 1, new Object[0]));
                                    break;
                                }
                            } else if (tLRPC$User != null) {
                                sb.append(UserObject.getUserName(tLRPC$User));
                            } else {
                                sb.append(tLRPC$Chat.title);
                            }
                        }
                        i7++;
                        j3 = 0;
                    }
                    if (i5 == -1 || i5 == 0 || i5 == 10 || i5 == 11) {
                        this.replyNameTextView.setText(LocaleController.formatPluralString("PreviewForwardMessagesCount", arrayList2.size(), new Object[0]));
                    } else if (i5 == 1) {
                        this.replyNameTextView.setText(LocaleController.formatPluralString("PreviewForwardPhoto", arrayList2.size(), new Object[0]));
                        if (arrayList2.size() == 1) {
                            messageObject4 = arrayList2.get(0);
                        }
                    } else if (i5 == 4) {
                        this.replyNameTextView.setText(LocaleController.formatPluralString("PreviewForwardLocation", arrayList2.size(), new Object[0]));
                    } else if (i5 == 3) {
                        this.replyNameTextView.setText(LocaleController.formatPluralString("PreviewForwardVideo", arrayList2.size(), new Object[0]));
                        if (arrayList2.size() == 1) {
                            messageObject4 = arrayList2.get(0);
                        }
                    } else if (i5 == 12) {
                        this.replyNameTextView.setText(LocaleController.formatPluralString("PreviewForwardContact", arrayList2.size(), new Object[0]));
                    } else if (i5 == 2) {
                        this.replyNameTextView.setText(LocaleController.formatPluralString("PreviewForwardAudio", arrayList2.size(), new Object[0]));
                    } else if (i5 == 5) {
                        this.replyNameTextView.setText(LocaleController.formatPluralString("PreviewForwardRound", arrayList2.size(), new Object[0]));
                    } else if (i5 == 14) {
                        this.replyNameTextView.setText(LocaleController.formatPluralString("PreviewForwardMusic", arrayList2.size(), new Object[0]));
                    } else if (i5 == 13 || i5 == 15) {
                        this.replyNameTextView.setText(LocaleController.formatPluralString("PreviewForwardSticker", arrayList2.size(), new Object[0]));
                    } else if (i5 == 17) {
                        this.replyNameTextView.setText(LocaleController.formatPluralString("PreviewForwardPoll", arrayList2.size(), new Object[0]));
                    } else if (i5 == 8 || i5 == 9) {
                        if ((i5 == 9) & (arrayList2.size() == 1)) {
                            messageObject4 = arrayList2.get(0);
                        }
                        if (arrayList2.size() == 1 && i5 == 8) {
                            this.replyNameTextView.setText(LocaleController.getString("AttachGif", 2131624494));
                        } else {
                            this.replyNameTextView.setText(LocaleController.formatPluralString("PreviewForwardFile", arrayList2.size(), new Object[0]));
                        }
                    }
                    if (this.forwardingMessages.hideForwardSendersName) {
                        this.replyObjectTextView.setText(LocaleController.getString("HiddenSendersNameDescription", 2131626179));
                    } else if ((i5 == -1 || i5 == 0 || i5 == 10 || i5 == 11) && arrayList2.size() == 1 && arrayList2.get(0).messageText != null) {
                        MessageObject messageObject7 = arrayList2.get(0);
                        CharSequence spannableStringBuilder2 = new SpannableStringBuilder(messageObject7.messageText.toString());
                        if (spannableStringBuilder2.length() > 150) {
                            spannableStringBuilder2 = spannableStringBuilder2.subSequence(0, 150);
                        }
                        CharSequence replaceEmoji2 = Emoji.replaceEmoji(spannableStringBuilder2, this.replyObjectTextView.getPaint().getFontMetricsInt(), AndroidUtilities.dp(14.0f), false);
                        if (replaceEmoji2 instanceof Spannable) {
                            MediaDataController.addTextStyleRuns(messageObject7.messageOwner.entities, messageObject7.messageText, (Spannable) replaceEmoji2);
                            TLRPC$Message tLRPC$Message3 = messageObject7.messageOwner;
                            if (tLRPC$Message3 != null) {
                                replaceEmoji2 = MessageObject.replaceAnimatedEmoji(replaceEmoji2, tLRPC$Message3.entities, this.replyObjectTextView.getPaint().getFontMetricsInt());
                            }
                        }
                        this.replyObjectTextView.setText(replaceEmoji2);
                    } else {
                        this.replyObjectTextView.setText(LocaleController.formatString("ForwardingFromNames", 2131626061, sb));
                    }
                    z6 = !SharedConfig.forwardingOptionsHintShown;
                    if (messageObject4 == null) {
                        messageObject4 = (messageObject2 == null || this.chatActivityEnterTopView.isEditMode()) ? null : messageObject2;
                    }
                    layoutParams = (FrameLayout.LayoutParams) this.replyNameTextView.getLayoutParams();
                    layoutParams2 = (FrameLayout.LayoutParams) this.replyObjectTextView.getLayoutParams();
                    layoutParams3 = (FrameLayout.LayoutParams) this.replyObjectHintTextView.getLayoutParams();
                    if (messageObject4 != null || !TextUtils.isEmpty(MessagesController.getRestrictionReason(messageObject4.messageOwner.restriction_reason))) {
                        tLRPC$PhotoSize2 = null;
                        i3 = 0;
                        tLRPC$PhotoSize = null;
                        i2 = 1;
                        tLObject = null;
                    } else {
                        tLRPC$PhotoSize2 = FileLoader.getClosestPhotoSizeWithSize(messageObject4.photoThumbs2, 320);
                        tLRPC$PhotoSize = FileLoader.getClosestPhotoSizeWithSize(messageObject4.photoThumbs2, AndroidUtilities.dp(40.0f));
                        tLObject = messageObject4.photoThumbsObject2;
                        if (tLRPC$PhotoSize2 == null) {
                            if (messageObject4.mediaExists) {
                                tLRPC$PhotoSize2 = FileLoader.getClosestPhotoSizeWithSize(messageObject4.photoThumbs, AndroidUtilities.getPhotoSize());
                                i3 = tLRPC$PhotoSize2 != null ? tLRPC$PhotoSize2.size : 0;
                                i4 = 0;
                            } else {
                                tLRPC$PhotoSize2 = FileLoader.getClosestPhotoSizeWithSize(messageObject4.photoThumbs, 320);
                                i3 = 0;
                                i4 = 1;
                            }
                            TLRPC$PhotoSize closestPhotoSizeWithSize = FileLoader.getClosestPhotoSizeWithSize(messageObject4.photoThumbs, AndroidUtilities.dp(40.0f));
                            tLObject = messageObject4.photoThumbsObject;
                            i2 = i4;
                            tLRPC$PhotoSize = closestPhotoSizeWithSize;
                        } else {
                            i3 = 0;
                            i2 = 1;
                        }
                    }
                    if (tLRPC$PhotoSize2 == tLRPC$PhotoSize) {
                        tLRPC$PhotoSize = null;
                    }
                    if (tLRPC$PhotoSize2 != null || (tLRPC$PhotoSize2 instanceof TLRPC$TL_photoSizeEmpty) || (tLRPC$PhotoSize2.location instanceof TLRPC$TL_fileLocationUnavailable) || messageObject4.isAnyKindOfSticker() || messageObject4.isSecretMedia() || messageObject4.isWebpageDocument()) {
                        this.replyImageView.setImageBitmap(null);
                        this.replyImageLocation = null;
                        this.replyImageLocationObject = null;
                        this.replyImageView.setVisibility(4);
                        int dp = AndroidUtilities.dp(52.0f);
                        layoutParams3.leftMargin = dp;
                        layoutParams2.leftMargin = dp;
                        layoutParams.leftMargin = dp;
                    } else {
                        if (messageObject4.isRoundVideo()) {
                            this.replyImageView.setRoundRadius(AndroidUtilities.dp(17.0f));
                        } else {
                            this.replyImageView.setRoundRadius(AndroidUtilities.dp(2.0f));
                        }
                        this.replyImageSize = i3;
                        this.replyImageCacheType = i2;
                        this.replyImageLocation = tLRPC$PhotoSize2;
                        this.replyImageThumbLocation = tLRPC$PhotoSize;
                        this.replyImageLocationObject = tLObject;
                        this.replyImageView.setImage(ImageLocation.getForObject(tLRPC$PhotoSize2, tLObject), "50_50", ImageLocation.getForObject(tLRPC$PhotoSize, tLObject), "50_50_b", null, i3, i2, messageObject4);
                        this.replyImageView.setVisibility(0);
                        int dp2 = AndroidUtilities.dp(96.0f);
                        layoutParams3.leftMargin = dp2;
                        layoutParams2.leftMargin = dp2;
                        layoutParams.leftMargin = dp2;
                    }
                    this.replyNameTextView.setLayoutParams(layoutParams);
                    this.replyObjectTextView.setLayoutParams(layoutParams2);
                    this.replyObjectTextView.setLayoutParams(layoutParams3);
                    this.chatActivityEnterView.showTopView(true, z5);
                    z7 = z6;
                } else {
                    this.replyIconImageView.setImageResource(2131165783);
                    if (tLRPC$WebPage instanceof TLRPC$TL_webPagePending) {
                        this.replyNameTextView.setText(LocaleController.getString("GettingLinkInfo", 2131626098));
                        this.replyObjectTextView.setText(this.pendingLinkSearchString);
                    } else {
                        String str5 = tLRPC$WebPage.site_name;
                        if (str5 != null) {
                            this.replyNameTextView.setText(str5);
                        } else {
                            String str6 = tLRPC$WebPage.title;
                            if (str6 != null) {
                                this.replyNameTextView.setText(str6);
                            } else {
                                this.replyNameTextView.setText(LocaleController.getString("LinkPreview", 2131626504));
                            }
                        }
                        String str7 = tLRPC$WebPage.title;
                        if (str7 != null) {
                            this.replyObjectTextView.setText(str7);
                        } else {
                            String str8 = tLRPC$WebPage.description;
                            if (str8 != null) {
                                this.replyObjectTextView.setText(str8);
                            } else {
                                String str9 = tLRPC$WebPage.author;
                                if (str9 != null) {
                                    this.replyObjectTextView.setText(str9);
                                } else {
                                    this.replyObjectTextView.setText(tLRPC$WebPage.display_url);
                                }
                            }
                        }
                        this.chatActivityEnterView.setWebPage(tLRPC$WebPage, true);
                    }
                }
            }
            z6 = false;
            if (messageObject4 == null) {
            }
            layoutParams = (FrameLayout.LayoutParams) this.replyNameTextView.getLayoutParams();
            layoutParams2 = (FrameLayout.LayoutParams) this.replyObjectTextView.getLayoutParams();
            layoutParams3 = (FrameLayout.LayoutParams) this.replyObjectHintTextView.getLayoutParams();
            if (messageObject4 != null) {
            }
            tLRPC$PhotoSize2 = null;
            i3 = 0;
            tLRPC$PhotoSize = null;
            i2 = 1;
            tLObject = null;
            if (tLRPC$PhotoSize2 == tLRPC$PhotoSize) {
            }
            if (tLRPC$PhotoSize2 != null) {
            }
            this.replyImageView.setImageBitmap(null);
            this.replyImageLocation = null;
            this.replyImageLocationObject = null;
            this.replyImageView.setVisibility(4);
            int dp3 = AndroidUtilities.dp(52.0f);
            layoutParams3.leftMargin = dp3;
            layoutParams2.leftMargin = dp3;
            layoutParams.leftMargin = dp3;
            this.replyNameTextView.setLayoutParams(layoutParams);
            this.replyObjectTextView.setLayoutParams(layoutParams2);
            this.replyObjectTextView.setLayoutParams(layoutParams3);
            this.chatActivityEnterView.showTopView(true, z5);
            z7 = z6;
        } else if (this.replyingMessageObject == null && this.forwardingMessages == null && this.foundWebPage == null && this.editingMessageObject == null && !chatActivityEnterView.isTopViewVisible()) {
            return;
        } else {
            MessageObject messageObject8 = this.replyingMessageObject;
            if (messageObject8 != null && (messageObject8.messageOwner.reply_markup instanceof TLRPC$TL_replyKeyboardForceReply)) {
                MessagesController.getMainSettings(this.currentAccount).edit().putInt("answered_" + this.dialog_id, this.replyingMessageObject.getId()).commit();
            }
            if (this.foundWebPage != null) {
                this.foundWebPage = null;
                this.chatActivityEnterView.setWebPage(null, !z3);
                if (tLRPC$WebPage != null && ((messageObject3 = this.replyingMessageObject) != null || this.forwardingMessages != null || this.editingMessageObject != null)) {
                    MessageObject messageObject9 = this.editingMessageObject;
                    ForwardingMessagesParams forwardingMessagesParams = this.forwardingMessages;
                    showFieldPanel(true, messageObject3, messageObject9, forwardingMessagesParams != null ? forwardingMessagesParams.messages : null, null, z2, i, false, true);
                    return;
                }
            }
            if (this.forwardingMessages != null) {
                ArrayList<MessageObject> arrayList5 = new ArrayList<>();
                this.forwardingMessages.getSelectedMessages(arrayList5);
                ForwardingMessagesParams forwardingMessagesParams2 = this.forwardingMessages;
                forwardMessages(arrayList5, forwardingMessagesParams2.hideForwardSendersName, forwardingMessagesParams2.hideCaption, z2, (i == 0 || i == 2147483646) ? i : i + 1);
                this.forwardingMessages = null;
            }
            this.chatActivityEnterView.setForceShowSendButton(false, z4);
            if (!this.waitingForSendingMessageLoad) {
                this.chatActivityEnterView.hideTopView(z4);
            }
            this.chatActivityEnterView.setReplyingMessageObject(this.threadMessageObject);
            this.chatActivityEnterView.setEditingMessageObject(null, false);
            this.topViewWasVisible = 0;
            this.replyingMessageObject = this.threadMessageObject;
            this.editingMessageObject = null;
            this.replyImageLocation = null;
            this.replyImageLocationObject = null;
        }
        if (z7) {
            if (this.tapForForwardingOptionsHitRunnable != null) {
                return;
            }
            ChatActivity$$ExternalSyntheticLambda148 chatActivity$$ExternalSyntheticLambda148 = new ChatActivity$$ExternalSyntheticLambda148(this);
            this.tapForForwardingOptionsHitRunnable = chatActivity$$ExternalSyntheticLambda148;
            AndroidUtilities.runOnUIThread(chatActivity$$ExternalSyntheticLambda148, 6000L);
            return;
        }
        Runnable runnable = this.tapForForwardingOptionsHitRunnable;
        if (runnable != null) {
            AndroidUtilities.cancelRunOnUIThread(runnable);
            this.tapForForwardingOptionsHitRunnable = null;
        }
        this.replyObjectTextView.setAlpha(1.0f);
        this.replyObjectHintTextView.setAlpha(0.0f);
    }

    public /* synthetic */ void lambda$showFieldPanel$102() {
        ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        if (chatActivityEnterView != null) {
            chatActivityEnterView.openKeyboard();
        }
    }

    public /* synthetic */ void lambda$showFieldPanel$103() {
        this.showTapForForwardingOptionsHit = !this.showTapForForwardingOptionsHit;
        this.replyObjectTextView.setPivotX(0.0f);
        this.replyObjectHintTextView.setPivotX(0.0f);
        if (this.showTapForForwardingOptionsHit) {
            this.replyObjectTextView.animate().alpha(0.0f).scaleX(0.98f).scaleY(0.98f).setDuration(150L).start();
            this.replyObjectHintTextView.animate().alpha(1.0f).scaleX(1.0f).scaleY(1.0f).setDuration(150L).start();
        } else {
            this.replyObjectTextView.animate().alpha(1.0f).scaleX(1.0f).scaleY(1.0f).setDuration(150L).start();
            this.replyObjectHintTextView.animate().alpha(0.0f).scaleX(0.98f).scaleY(0.98f).setDuration(150L).start();
        }
        AndroidUtilities.runOnUIThread(this.tapForForwardingOptionsHitRunnable, 6000L);
    }

    private void moveScrollToLastMessage(boolean z) {
        if (this.chatListView == null || this.messages.isEmpty() || this.pinchToZoomHelper.isInOverlayMode()) {
            return;
        }
        this.chatLayoutManager.scrollToPositionWithOffset(z ? getSponsoredMessagesCount() + 0 : 0, 0);
        this.chatListView.stopScroll();
    }

    public Runnable sendSecretMessageRead(MessageObject messageObject, boolean z) {
        int i;
        if (messageObject == null || messageObject.isOut() || !messageObject.isSecretMedia()) {
            return null;
        }
        TLRPC$Message tLRPC$Message = messageObject.messageOwner;
        if (tLRPC$Message.destroyTime != 0 || (i = tLRPC$Message.ttl) <= 0) {
            return null;
        }
        tLRPC$Message.destroyTime = i + getConnectionsManager().getCurrentTime();
        if (z) {
            if (this.currentEncryptedChat != null) {
                MessagesController messagesController = getMessagesController();
                long j = this.dialog_id;
                TLRPC$Message tLRPC$Message2 = messageObject.messageOwner;
                messagesController.markMessageAsRead(j, tLRPC$Message2.random_id, tLRPC$Message2.ttl);
            } else {
                getMessagesController().markMessageAsRead2(this.dialog_id, messageObject.getId(), null, messageObject.messageOwner.ttl, 0L);
            }
            return null;
        }
        return new ChatActivity$$ExternalSyntheticLambda174(this, messageObject);
    }

    public /* synthetic */ void lambda$sendSecretMessageRead$104(MessageObject messageObject) {
        if (this.currentEncryptedChat != null) {
            MessagesController messagesController = getMessagesController();
            long j = this.dialog_id;
            TLRPC$Message tLRPC$Message = messageObject.messageOwner;
            messagesController.markMessageAsRead(j, tLRPC$Message.random_id, tLRPC$Message.ttl);
            return;
        }
        getMessagesController().markMessageAsRead2(this.dialog_id, messageObject.getId(), null, messageObject.messageOwner.ttl, 0L);
    }

    private void clearChatData() {
        this.messages.clear();
        this.messagesByDays.clear();
        this.waitingForLoad.clear();
        this.groupedMessagesMap.clear();
        this.threadMessageAdded = false;
        ChatActivityAdapter chatActivityAdapter = this.chatAdapter;
        if (chatActivityAdapter != null) {
            showProgressView(chatActivityAdapter.botInfoRow < 0);
        }
        RecyclerListView recyclerListView = this.chatListView;
        if (recyclerListView != null) {
            recyclerListView.setEmptyView(null);
        }
        for (int i = 0; i < 2; i++) {
            this.messagesDict[i].clear();
            if (this.currentEncryptedChat == null) {
                this.maxMessageId[i] = Integer.MAX_VALUE;
                this.minMessageId[i] = Integer.MIN_VALUE;
            } else {
                this.maxMessageId[i] = Integer.MIN_VALUE;
                this.minMessageId[i] = Integer.MAX_VALUE;
            }
            this.maxDate[i] = Integer.MIN_VALUE;
            this.minDate[i] = 0;
            this.endReached[i] = false;
            this.cacheEndReached[i] = false;
            this.forwardEndReached[i] = true;
        }
        this.first = true;
        this.firstLoading = true;
        this.loading = true;
        this.loadingForward = false;
        this.waitingForReplyMessageLoad = false;
        this.startLoadFromMessageId = 0;
        this.showScrollToMessageError = false;
        this.last_message_id = 0;
        this.unreadMessageObject = null;
        this.createUnreadMessageAfterId = 0;
        this.createUnreadMessageAfterIdLoading = false;
        this.needSelectFromMessageId = false;
        ChatActivityAdapter chatActivityAdapter2 = this.chatAdapter;
        if (chatActivityAdapter2 != null) {
            chatActivityAdapter2.notifyDataSetChanged(false);
        }
    }

    public void scrollToLastMessage(boolean z) {
        if (this.chatListView.isFastScrollAnimationRunning()) {
            return;
        }
        this.forceNextPinnedMessageId = 0;
        this.nextScrollToMessageId = 0;
        this.forceScrollToFirst = false;
        this.chatScrollHelper.setScrollDirection(0);
        if (this.forwardEndReached[0] && this.first_unread_id == 0 && this.startLoadFromMessageId == 0) {
            if (this.chatLayoutManager.findFirstCompletelyVisibleItemPosition() == 0) {
                this.canShowPagedownButton = false;
                updatePagedownButtonVisibility(true);
                removeSelectedMessageHighlight();
                updateVisibleRows();
                return;
            }
            this.chatAdapter.updateRowsSafe();
            this.chatScrollHelperCallback.scrollTo = null;
            int i = 0;
            if (z) {
                while (i < this.messages.size() && this.messages.get(i).isSponsored()) {
                    i++;
                }
            }
            this.chatScrollHelper.scrollToPosition(i, 0, true, true);
            return;
        }
        AlertDialog alertDialog = this.progressDialog;
        if (alertDialog != null) {
            alertDialog.dismiss();
        }
        updatePinnedListButton(false);
        AlertDialog alertDialog2 = new AlertDialog(getParentActivity(), 3, this.themeDelegate);
        this.progressDialog = alertDialog2;
        alertDialog2.setOnCancelListener(this.postponedScrollCancelListener);
        this.progressDialog.showDelayed(1000L);
        this.postponedScrollToLastMessageQueryIndex = this.lastLoadIndex;
        this.postponedScrollMessageId = 0;
        this.postponedScrollIsCanceled = false;
        this.waitingForLoad.clear();
        this.waitingForLoad.add(Integer.valueOf(this.lastLoadIndex));
        MessagesController messagesController = getMessagesController();
        long j = this.dialog_id;
        long j2 = this.mergeDialogId;
        int i2 = this.classGuid;
        int i3 = this.chatMode;
        int i4 = this.threadMessageId;
        int i5 = this.replyMaxReadId;
        int i6 = this.lastLoadIndex;
        this.lastLoadIndex = i6 + 1;
        messagesController.loadMessages(j, j2, false, 30, 0, 0, true, 0, i2, 0, 0, i3, i4, i5, i6);
    }

    public void updateTextureViewPosition(boolean z) {
        boolean z2;
        MessageObject playingMessageObject;
        if (this.fragmentView == null || this.paused) {
            return;
        }
        int childCount = this.chatListView.getChildCount();
        int i = 0;
        while (true) {
            if (i >= childCount) {
                z2 = false;
                break;
            }
            View childAt = this.chatListView.getChildAt(i);
            if (childAt instanceof ChatMessageCell) {
                ChatMessageCell chatMessageCell = (ChatMessageCell) childAt;
                MessageObject messageObject = chatMessageCell.getMessageObject();
                if (this.videoPlayerContainer != null && ((messageObject.isRoundVideo() || messageObject.isVideo()) && MediaController.getInstance().isPlayingMessage(messageObject))) {
                    ImageReceiver photoImage = chatMessageCell.getPhotoImage();
                    this.videoPlayerContainer.setTranslationX(photoImage.getImageX() + chatMessageCell.getX());
                    this.videoPlayerContainer.setTranslationY(((chatMessageCell.getY() + photoImage.getImageY()) + this.chatListView.getY()) - this.videoPlayerContainer.getTop());
                    FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) this.videoPlayerContainer.getLayoutParams();
                    if (messageObject.isRoundVideo()) {
                        this.videoPlayerContainer.setTag(2131230879, null);
                        int i2 = layoutParams.width;
                        int i3 = AndroidUtilities.roundPlayingMessageSize;
                        if (i2 != i3 || layoutParams.height != i3) {
                            layoutParams.height = i3;
                            layoutParams.width = i3;
                            this.aspectRatioFrameLayout.setResizeMode(0);
                            this.videoPlayerContainer.setLayoutParams(layoutParams);
                        }
                        float f = (AndroidUtilities.roundPlayingMessageSize + (AndroidUtilities.roundMessageInset * 2)) / AndroidUtilities.roundPlayingMessageSize;
                        float imageWidth = chatMessageCell.getPhotoImage().getImageWidth() / AndroidUtilities.roundPlayingMessageSize;
                        if (this.videoPlayerContainer.getScaleX() != imageWidth) {
                            this.videoPlayerContainer.invalidate();
                            this.fragmentView.invalidate();
                        }
                        this.videoPlayerContainer.setPivotX(0.0f);
                        this.videoPlayerContainer.setPivotY(0.0f);
                        this.videoPlayerContainer.setScaleX(imageWidth);
                        this.videoPlayerContainer.setScaleY(imageWidth);
                        this.videoTextureView.setScaleX(f);
                        this.videoTextureView.setScaleY(f);
                    } else {
                        this.videoPlayerContainer.setTag(2131230879, photoImage);
                        if (layoutParams.width != photoImage.getImageWidth() || layoutParams.height != photoImage.getImageHeight()) {
                            this.aspectRatioFrameLayout.setResizeMode(3);
                            layoutParams.width = (int) photoImage.getImageWidth();
                            layoutParams.height = (int) photoImage.getImageHeight();
                            this.videoPlayerContainer.setLayoutParams(layoutParams);
                        }
                        this.videoTextureView.setScaleX(1.0f);
                        this.videoTextureView.setScaleY(1.0f);
                    }
                    this.fragmentView.invalidate();
                    this.videoPlayerContainer.invalidate();
                    z2 = true;
                }
            }
            i++;
        }
        if (!z || this.videoPlayerContainer == null || (playingMessageObject = MediaController.getInstance().getPlayingMessageObject()) == null || playingMessageObject.eventId != 0) {
            return;
        }
        if (!z2) {
            if (this.checkTextureViewPosition && playingMessageObject.isVideo()) {
                MediaController.getInstance().cleanupPlayer(true, true);
                return;
            }
            this.videoPlayerContainer.setTranslationY((-AndroidUtilities.roundPlayingMessageSize) - 100);
            this.fragmentView.invalidate();
            if (!playingMessageObject.isRoundVideo() && !playingMessageObject.isVideo()) {
                return;
            }
            if (this.checkTextureViewPosition || PipRoundVideoView.getInstance() != null) {
                MediaController.getInstance().setCurrentVideoVisible(false);
                return;
            } else {
                scrollToMessageId(playingMessageObject.getId(), 0, false, 0, true, 0);
                return;
            }
        }
        MediaController.getInstance().setCurrentVideoVisible(true);
        if (playingMessageObject.isRoundVideo() || this.scrollToVideo) {
            return;
        }
        this.chatListView.invalidate();
    }

    public void invalidateMessagesVisiblePart() {
        this.invalidateMessagesVisiblePart = true;
        View view = this.fragmentView;
        if (view != null) {
            view.invalidate();
        }
    }

    private Integer findClosest(ArrayList<Integer> arrayList, int i, int[] iArr) {
        if (arrayList.isEmpty()) {
            return 0;
        }
        Integer num = arrayList.get(0);
        if (i >= num.intValue()) {
            iArr[0] = 0;
            return num;
        }
        int size = arrayList.size();
        int i2 = size - 1;
        Integer num2 = arrayList.get(i2);
        if (i <= num2.intValue()) {
            iArr[0] = i2;
            return num2;
        }
        int i3 = 0;
        int i4 = 0;
        while (i3 < size) {
            i4 = (i3 + size) / 2;
            Integer num3 = arrayList.get(i4);
            if (num3.intValue() == i) {
                iArr[0] = i4;
                return num3;
            } else if (i < num3.intValue()) {
                if (i4 > 0) {
                    int i5 = i4 - 1;
                    Integer num4 = arrayList.get(i5);
                    if (i > num4.intValue()) {
                        iArr[0] = i5;
                        return num4;
                    }
                }
                i3 = i4 + 1;
            } else if (i4 > 0 && i < arrayList.get(i4 - 1).intValue()) {
                iArr[0] = i4;
                return num3;
            } else {
                size = i4;
            }
        }
        iArr[0] = i4;
        return arrayList.get(i4);
    }

    /* JADX WARN: Removed duplicated region for block: B:261:0x055d  */
    /* JADX WARN: Removed duplicated region for block: B:264:0x0569  */
    /* JADX WARN: Removed duplicated region for block: B:39:0x00ce  */
    /* JADX WARN: Removed duplicated region for block: B:40:0x00d3  */
    /* JADX WARN: Removed duplicated region for block: B:42:0x00d6  */
    /* JADX WARN: Removed duplicated region for block: B:55:0x0126  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void updateMessagesVisiblePart(boolean z) {
        Integer num;
        MessageObject messageObject;
        int i;
        char c;
        int i2;
        int i3;
        boolean z2;
        AnimatorSet animatorSet;
        MessageObject messageObject2;
        long j;
        ArrayList<Integer> arrayList;
        int indexOf;
        int i4;
        int i5;
        ChatMessageCell chatMessageCell;
        int i6;
        boolean z3;
        float f;
        long j2;
        int i7;
        boolean z4;
        int i8;
        float f2;
        ChatMessageCell chatMessageCell2;
        int i9;
        boolean z5;
        MessageObject messageObject3;
        int i10;
        View view;
        MessageObject messageObject4;
        int i11;
        MessageObject messageObject5;
        int i12;
        View view2;
        ChatMessageCell chatMessageCell3;
        TLRPC$Message tLRPC$Message;
        TLRPC$MessageMedia tLRPC$MessageMedia;
        ChatListItemAnimator chatListItemAnimator;
        MessageObject messageObject6;
        boolean z6;
        RecyclerListView recyclerListView = this.chatListView;
        if (recyclerListView == null) {
            return;
        }
        int childCount = recyclerListView.getChildCount();
        int measuredHeight = this.chatListView.getMeasuredHeight();
        boolean z7 = this.threadMessageVisible;
        int i13 = this.currentPinnedMessageId;
        this.threadMessageVisible = this.firstLoading;
        int i14 = this.threadMessageId;
        if (i14 != 0 && this.currentChat != null) {
            num = Integer.valueOf(this.replyMaxReadId);
        } else {
            num = getMessagesController().dialogs_read_inbox_max.get(this.dialog_id_Long);
        }
        int i15 = 0;
        if (num == null) {
            num = 0;
        }
        Integer num2 = num;
        int heightWithKeyboard = (this.contentView.getHeightWithKeyboard() - (this.inPreviewMode ? 0 : AndroidUtilities.dp(48.0f))) - this.chatListView.getTop();
        this.pollsToCheck.clear();
        float f3 = this.chatListViewPaddingTop;
        long currentTimeMillis = System.currentTimeMillis();
        boolean z8 = SharedConfig.chatBlurEnabled() && Color.alpha(Theme.getColor("chat_BlurAlpha")) != 255;
        int i16 = Integer.MIN_VALUE;
        int i17 = -1;
        MessageObject messageObject7 = null;
        int i18 = -1;
        int i19 = Integer.MAX_VALUE;
        int i20 = Integer.MIN_VALUE;
        boolean z9 = false;
        View view3 = null;
        View view4 = null;
        View view5 = null;
        int i21 = Integer.MIN_VALUE;
        int i22 = Integer.MAX_VALUE;
        int i23 = Integer.MAX_VALUE;
        while (true) {
            messageObject = messageObject7;
            if (i15 >= childCount) {
                break;
            }
            View childAt = this.chatListView.getChildAt(i15);
            int childAdapterPosition = this.chatListView.getChildAdapterPosition(childAt);
            long j3 = currentTimeMillis;
            if (childAdapterPosition >= 0) {
                if (childAdapterPosition > i17 || i17 == -1) {
                    i17 = childAdapterPosition;
                }
                if (childAdapterPosition < i18 || i18 == -1) {
                    i5 = i17;
                    i4 = childAdapterPosition;
                    int y = (int) childAt.getY();
                    int measuredHeight2 = childAt.getMeasuredHeight() + y;
                    boolean z10 = childAt instanceof ChatMessageCell;
                    chatMessageCell = !z10 ? (ChatMessageCell) childAt : null;
                    if (chatMessageCell == null) {
                        if (childAt.getY() < f3) {
                            z3 = z10;
                            if (childAt.getY() + childAt.getMeasuredHeight() > f3) {
                                i6 = childCount;
                                z6 = true;
                                chatMessageCell.isBlurred = z6;
                            }
                        } else {
                            z3 = z10;
                        }
                        i6 = childCount;
                        if (childAt.getY() + childAt.getMeasuredHeight() <= this.chatListView.getMeasuredHeight() - this.blurredViewBottomOffset || childAt.getY() >= this.chatListView.getMeasuredHeight() - this.blurredViewBottomOffset) {
                            z6 = false;
                            chatMessageCell.isBlurred = z6;
                        }
                        z6 = true;
                        chatMessageCell.isBlurred = z6;
                    } else {
                        z3 = z10;
                        i6 = childCount;
                    }
                    f = measuredHeight2;
                    if (f > f3 - this.chatListViewPaddingVisibleOffset || y > this.chatListView.getMeasuredHeight() - this.blurredViewBottomOffset) {
                        f2 = f3;
                        i8 = measuredHeight;
                        z4 = z7;
                        i7 = i13;
                        int i24 = i20;
                        int i25 = i21;
                        int i26 = i22;
                        int i27 = i23;
                        j2 = j3;
                        chatMessageCell2 = chatMessageCell;
                        int i28 = i19;
                        if (chatMessageCell2 != null) {
                            if (!z8) {
                                chatMessageCell2.setVisibleOnScreen(false);
                            } else {
                                chatMessageCell2.setVisibleOnScreen(true);
                            }
                        }
                        i19 = i28;
                        i21 = i25;
                        i20 = i24;
                        i22 = i26;
                        i23 = i27;
                    } else {
                        if (chatMessageCell != null) {
                            chatMessageCell.setVisibleOnScreen(true);
                        }
                        int i29 = y >= 0 ? 0 : -y;
                        int measuredHeight3 = childAt.getMeasuredHeight();
                        if (measuredHeight3 > measuredHeight) {
                            measuredHeight3 = i29 + measuredHeight;
                        }
                        int keyboardHeight = this.contentView.getKeyboardHeight();
                        i8 = measuredHeight;
                        if ((keyboardHeight < AndroidUtilities.dp(20.0f) && this.chatActivityEnterView.isPopupShowing()) || this.chatActivityEnterView.panelAnimationInProgress()) {
                            keyboardHeight = this.chatActivityEnterView.getEmojiPadding();
                        }
                        if (chatMessageCell != null) {
                            MessageObject messageObject8 = chatMessageCell.getMessageObject();
                            z4 = z7;
                            i7 = i13;
                            if (messageObject8.getDialogId() != this.dialog_id || messageObject8.getId() <= i16) {
                                i12 = i16;
                                messageObject5 = messageObject;
                            } else {
                                i12 = messageObject8.getId();
                                messageObject5 = messageObject8;
                            }
                            i9 = i12;
                            MessageObject messageObject9 = messageObject5;
                            chatMessageCell.setParentBounds((this.chatListViewPaddingTop - this.chatListViewPaddingVisibleOffset) - AndroidUtilities.dp(4.0f), this.chatListView.getMeasuredHeight() - this.blurredViewBottomOffset);
                            chatMessageCell.setVisiblePart(i29, measuredHeight3 - i29, heightWithKeyboard, keyboardHeight, (childAt.getY() + (isKeyboardVisible() ? this.chatListView.getTop() : this.actionBar.getMeasuredHeight())) - this.contentView.getBackgroundTranslationY(), this.contentView.getMeasuredWidth(), this.contentView.getBackgroundSizeY(), this.blurredViewTopOffset, this.blurredViewBottomOffset);
                            markSponsoredAsRead(messageObject8);
                            if (!this.threadMessageVisible && (messageObject6 = this.threadMessageObject) != null && messageObject8 == messageObject6 && chatMessageCell.getBottom() > this.chatListViewPaddingTop) {
                                this.threadMessageVisible = true;
                            }
                            if (this.videoPlayerContainer != null && ((messageObject8.isVideo() || messageObject8.isRoundVideo()) && MediaController.getInstance().isPlayingMessage(messageObject8))) {
                                ImageReceiver photoImage = chatMessageCell.getPhotoImage();
                                if (y + photoImage.getImageY2() < 0.0f) {
                                    z9 = false;
                                } else {
                                    this.videoPlayerContainer.setTranslationX(photoImage.getImageX() + chatMessageCell.getX());
                                    this.videoPlayerContainer.setTranslationY(((chatMessageCell.getY() + photoImage.getImageY()) + this.chatListView.getY()) - this.videoPlayerContainer.getTop());
                                    this.fragmentView.invalidate();
                                    this.videoPlayerContainer.invalidate();
                                    z9 = true;
                                }
                            }
                            if (this.startFromVideoTimestamp >= 0 && this.fragmentOpened && !this.chatListView.isFastScrollAnimationRunning() && this.startFromVideoMessageId == messageObject8.getId() && (messageObject8.isVideo() || messageObject8.isRoundVideo() || messageObject8.isVoice() || messageObject8.isMusic())) {
                                messageObject8.forceSeekTo = this.startFromVideoTimestamp / messageObject8.getDuration();
                                AndroidUtilities.runOnUIThread(new ChatActivity$$ExternalSyntheticLambda176(this, messageObject8), 40L);
                                this.startFromVideoTimestamp = -1;
                            }
                            if (!this.fragmentOpened || !this.openAnimationEnded || (((chatListItemAnimator = this.chatListItemAnimator) != null && chatListItemAnimator.isRunning()) || !chatMessageCell.checkUnreadReactions(f3, this.chatListView.getMeasuredHeight() - this.blurredViewBottomOffset))) {
                                view2 = childAt;
                                chatMessageCell3 = chatMessageCell;
                                f2 = f3;
                                j2 = j3;
                                z5 = z3;
                                i10 = 1;
                            } else {
                                this.reactionsMentionCount--;
                                getMessagesStorage().markMessageReactionsAsRead(getDialogId(), chatMessageCell.getMessageObject().getId(), true);
                                if (this.reactionsMentionCount <= 0) {
                                    getMessagesController().markReactionsAsRead(this.dialog_id);
                                }
                                if (this.reactionsMentionCount >= 0) {
                                    TLRPC$TL_messagePeerReaction randomUnreadReaction = chatMessageCell.getMessageObject().getRandomUnreadReaction();
                                    if (randomUnreadReaction != null) {
                                        view2 = childAt;
                                        chatMessageCell3 = chatMessageCell;
                                        j2 = j3;
                                        z5 = z3;
                                        f2 = f3;
                                        ReactionsEffectOverlay.show(this, null, chatMessageCell, 0.0f, 0.0f, randomUnreadReaction.reaction, this.currentAccount, !randomUnreadReaction.big ? 1 : 0);
                                        ReactionsEffectOverlay.startAnimation();
                                    } else {
                                        view2 = childAt;
                                        chatMessageCell3 = chatMessageCell;
                                        f2 = f3;
                                        j2 = j3;
                                        z5 = z3;
                                    }
                                    chatMessageCell3.markReactionsAsRead();
                                } else {
                                    view2 = childAt;
                                    chatMessageCell3 = chatMessageCell;
                                    f2 = f3;
                                    j2 = j3;
                                    z5 = z3;
                                    this.reactionsMentionCount = 0;
                                }
                                i10 = 1;
                                updateReactionsMentionButton(true);
                            }
                            getDownloadController().checkUnviewedDownloads(chatMessageCell3.getId(), this.dialog_id);
                            ChatListItemAnimator chatListItemAnimator2 = this.chatListItemAnimator;
                            if ((chatListItemAnimator2 == null || !chatListItemAnimator2.isRunning()) && ((!messageObject8.isOutOwner() || messageObject8.forcePlayEffect) && (tLRPC$MessageMedia = (tLRPC$Message = messageObject8.messageOwner).media) != null && !tLRPC$MessageMedia.nopremium && !tLRPC$Message.premiumEffectWasPlayed && messageObject8.isPremiumSticker() && this.emojiAnimationsOverlay.isIdle() && this.emojiAnimationsOverlay.checkPosition(chatMessageCell3, this.chatListViewPaddingTop, this.chatListView.getMeasuredHeight() - this.blurredViewBottomOffset))) {
                                this.emojiAnimationsOverlay.onTapItem(chatMessageCell3, this, false);
                            }
                            messageObject4 = messageObject8;
                            messageObject3 = messageObject9;
                            view = view2;
                        } else {
                            view = childAt;
                            f2 = f3;
                            z4 = z7;
                            i7 = i13;
                            j2 = j3;
                            z5 = z3;
                            i10 = 1;
                            if (view instanceof ChatActionCell) {
                                ChatActionCell chatActionCell = (ChatActionCell) view;
                                MessageObject messageObject10 = chatActionCell.getMessageObject();
                                if (messageObject10 != null && messageObject10.getDialogId() == this.dialog_id && messageObject10.getId() > i16) {
                                    i16 = Math.max(i16, messageObject10.getId());
                                }
                                chatActionCell.setVisiblePart((view.getY() + (isKeyboardVisible() ? this.chatListView.getTop() : this.actionBar.getMeasuredHeight())) - this.contentView.getBackgroundTranslationY(), this.contentView.getBackgroundSizeY());
                                i9 = i16;
                                messageObject4 = messageObject10;
                                messageObject3 = messageObject;
                            } else {
                                if (view instanceof BotHelpCell) {
                                    view.invalidate();
                                }
                                i9 = i16;
                                messageObject3 = messageObject;
                                messageObject4 = null;
                            }
                        }
                        if (this.chatMode == i10 || messageObject4 == null) {
                            i19 = i19;
                            i21 = i21;
                            i20 = i20;
                        } else {
                            int id = messageObject4.getId();
                            if ((isThreadChat() || ((messageObject4.isOut() || !messageObject4.isUnread()) && (!messageObject4.messageOwner.from_scheduled || id <= num2.intValue()))) && (id <= 0 || !isThreadChat() || id <= num2.intValue() || id <= this.replyMaxReadId)) {
                                i19 = i19;
                                i21 = i21;
                                i20 = i20;
                            } else {
                                if (id > 0) {
                                    i21 = Math.max(i21, messageObject4.getId());
                                }
                                i19 = (id >= 0 || isThreadChat()) ? i19 : Math.min(i19, messageObject4.getId());
                                i20 = Math.max(i20, messageObject4.messageOwner.date);
                            }
                            if (messageObject4.type == 17 && messageObject4.getId() > 0) {
                                this.pollsToCheck.add(messageObject4);
                            }
                        }
                        if (f <= f2) {
                            if ((view instanceof ChatActionCell) && messageObject4.isDateObject) {
                                view.setAlpha(0.0f);
                            }
                            messageObject = messageObject3;
                        } else {
                            int bottom = view.getBottom();
                            int i30 = i22;
                            if (bottom < i30) {
                                if (z5 || (view instanceof ChatActionCell)) {
                                    view5 = view;
                                }
                                view4 = view;
                                i22 = bottom;
                            } else {
                                i22 = i30;
                            }
                            ChatListItemAnimator chatListItemAnimator3 = this.chatListItemAnimator;
                            if ((chatListItemAnimator3 == null || (!chatListItemAnimator3.willRemoved(view) && !this.chatListItemAnimator.willAddedFromAlpha(view))) && (view instanceof ChatActionCell) && messageObject4.isDateObject) {
                                if (view.getAlpha() != 1.0f) {
                                    view.setAlpha(1.0f);
                                }
                                i11 = i23;
                                if (bottom < i11) {
                                    view3 = view;
                                    messageObject = messageObject3;
                                    i23 = bottom;
                                }
                            } else {
                                i11 = i23;
                            }
                            messageObject = messageObject3;
                            i23 = i11;
                        }
                        i16 = i9;
                    }
                    i15++;
                    messageObject7 = messageObject;
                    f3 = f2;
                    i17 = i5;
                    i18 = i4;
                    childCount = i6;
                    measuredHeight = i8;
                    z7 = z4;
                    i13 = i7;
                    currentTimeMillis = j2;
                }
            }
            i5 = i17;
            i4 = i18;
            int y2 = (int) childAt.getY();
            int measuredHeight22 = childAt.getMeasuredHeight() + y2;
            boolean z102 = childAt instanceof ChatMessageCell;
            if (!z102) {
            }
            if (chatMessageCell == null) {
            }
            f = measuredHeight22;
            if (f > f3 - this.chatListViewPaddingVisibleOffset) {
            }
            f2 = f3;
            i8 = measuredHeight;
            z4 = z7;
            i7 = i13;
            int i242 = i20;
            int i252 = i21;
            int i262 = i22;
            int i272 = i23;
            j2 = j3;
            chatMessageCell2 = chatMessageCell;
            int i282 = i19;
            if (chatMessageCell2 != null) {
            }
            i19 = i282;
            i21 = i252;
            i20 = i242;
            i22 = i262;
            i23 = i272;
            i15++;
            messageObject7 = messageObject;
            f3 = f2;
            i17 = i5;
            i18 = i4;
            childCount = i6;
            measuredHeight = i8;
            z7 = z4;
            i13 = i7;
            currentTimeMillis = j2;
        }
        long j4 = currentTimeMillis;
        float f4 = f3;
        boolean z11 = z7;
        int i31 = i13;
        int i32 = i19;
        int i33 = i20;
        int i34 = i21;
        this.currentPinnedMessageId = 0;
        if (!this.pinnedMessageIds.isEmpty()) {
            if (i16 == Integer.MIN_VALUE) {
                int i35 = this.startLoadFromMessageId;
                if (i35 != 0) {
                    i16 = i35;
                } else if (!this.pinnedMessageIds.isEmpty()) {
                    i16 = this.pinnedMessageIds.get(0).intValue() + 1;
                }
            } else if (i16 < 0 && (indexOf = this.messages.indexOf(messageObject)) >= 0) {
                int i36 = indexOf - 1;
                while (true) {
                    if (i36 < 0) {
                        break;
                    }
                    MessageObject messageObject11 = this.messages.get(i36);
                    if (messageObject11.getId() > 0) {
                        i16 = messageObject11.getId();
                        break;
                    }
                    i36--;
                }
                if (i16 < 0) {
                    int i37 = indexOf + 1;
                    int size = this.messages.size();
                    while (true) {
                        if (i37 >= size) {
                            break;
                        }
                        MessageObject messageObject12 = this.messages.get(i37);
                        if (messageObject12.getId() > 0) {
                            i16 = messageObject12.getId();
                            break;
                        }
                        i37++;
                    }
                }
            }
            ArrayList<Integer> arrayList2 = this.pinnedMessageIds;
            int i38 = this.forceNextPinnedMessageId;
            if (i38 != 0) {
                i16 = i38;
            }
            this.currentPinnedMessageId = findClosest(arrayList2, i16, this.currentPinnedMessageIndex).intValue();
            if (!this.inMenuMode && !this.loadingPinnedMessagesList && !this.pinnedEndReached && !this.pinnedMessageIds.isEmpty() && this.currentPinnedMessageIndex[0] > this.pinnedMessageIds.size() - 2) {
                getMediaDataController().loadPinnedMessages(this.dialog_id, this.pinnedMessageIds.get(arrayList.size() - 1).intValue(), 0);
                this.loadingPinnedMessagesList = true;
            }
        }
        getMessagesController().addToPollsQueue(this.dialog_id, this.pollsToCheck);
        if (i17 >= 0 && i18 >= 0) {
            int i39 = (i18 - this.chatAdapter.messagesStartRow) - 10;
            int i40 = (i17 - this.chatAdapter.messagesStartRow) + 10;
            if (i39 < 0) {
                i39 = 0;
            }
            if (i40 > this.messages.size()) {
                i40 = this.messages.size();
            }
            this.reactionsToCheck.clear();
            while (i39 < i40) {
                MessageObject messageObject13 = this.messages.get(i39);
                if (this.threadMessageObject == messageObject13 || messageObject13.getId() <= 0 || messageObject13.messageOwner.action != null) {
                    j = j4;
                } else {
                    j = j4;
                    if (j - messageObject13.reactionsLastCheckTime > 15000) {
                        messageObject13.reactionsLastCheckTime = j;
                        this.reactionsToCheck.add(messageObject13);
                    }
                }
                i39++;
                j4 = j;
            }
            getMessagesController().loadReactionsForMessages(this.dialog_id, this.reactionsToCheck);
        }
        if (this.videoPlayerContainer != null) {
            if (!z9) {
                MessageObject playingMessageObject = MediaController.getInstance().getPlayingMessageObject();
                if (playingMessageObject != null) {
                    if (this.checkTextureViewPosition && playingMessageObject.isVideo()) {
                        MediaController.getInstance().cleanupPlayer(true, true);
                    } else {
                        this.videoPlayerContainer.setTranslationY((-AndroidUtilities.roundPlayingMessageSize) - 100);
                        this.fragmentView.invalidate();
                        if ((playingMessageObject.isRoundVideo() || playingMessageObject.isVideo()) && playingMessageObject.eventId == 0 && this.checkTextureViewPosition && !this.chatListView.isFastScrollAnimationRunning()) {
                            MediaController.getInstance().setCurrentVideoVisible(false);
                        }
                    }
                }
            } else {
                MediaController.getInstance().setCurrentVideoVisible(true);
            }
        }
        View view6 = view5;
        if (view6 != null) {
            if (view6 instanceof ChatMessageCell) {
                messageObject2 = ((ChatMessageCell) view6).getMessageObject();
            } else {
                messageObject2 = ((ChatActionCell) view6).getMessageObject();
            }
            this.floatingDateView.setCustomDate(messageObject2.messageOwner.date, this.chatMode == 1, true);
        }
        this.currentFloatingDateOnScreen = false;
        View view7 = view4;
        this.currentFloatingTopIsNotMessage = !(view7 instanceof ChatMessageCell) && !(view7 instanceof ChatActionCell);
        View view8 = view3;
        if (view8 != null) {
            if (view8.getY() > f4 || this.currentFloatingTopIsNotMessage) {
                if (view8.getAlpha() != 1.0f) {
                    view8.setAlpha(1.0f);
                }
                if (this.chatListView.getChildAdapterPosition(view8) == (this.chatAdapter.messagesStartRow + this.messages.size()) - 1) {
                    if (view8.getAlpha() != 1.0f) {
                        view8.setAlpha(1.0f);
                    }
                    AnimatorSet animatorSet2 = this.floatingDateAnimation;
                    if (animatorSet2 != null) {
                        animatorSet2.cancel();
                        animatorSet = null;
                        this.floatingDateAnimation = null;
                    } else {
                        animatorSet = null;
                    }
                    this.floatingDateView.setTag(animatorSet);
                    this.floatingDateView.setAlpha(0.0f);
                    this.currentFloatingDateOnScreen = false;
                } else {
                    animatorSet = null;
                    hideFloatingDateView(!this.currentFloatingTopIsNotMessage);
                }
                z2 = false;
            } else {
                if (view8.getAlpha() != 0.0f) {
                    view8.setAlpha(0.0f);
                }
                animatorSet = null;
                z2 = true;
            }
            float y3 = (view8.getY() + view8.getMeasuredHeight()) - f4;
            if (y3 <= this.floatingDateView.getMeasuredHeight() || y3 >= this.floatingDateView.getMeasuredHeight() * 2) {
                this.floatingDateViewOffset = 0.0f;
            } else if (this.chatListView.getChildAdapterPosition(view8) == (this.chatAdapter.messagesStartRow + this.messages.size()) - 1) {
                if (view8.getAlpha() != 1.0f) {
                    view8.setAlpha(1.0f);
                }
                AnimatorSet animatorSet3 = this.floatingDateAnimation;
                if (animatorSet3 != null) {
                    animatorSet3.cancel();
                    this.floatingDateAnimation = animatorSet;
                }
                this.floatingDateView.setTag(animatorSet);
                this.floatingDateView.setAlpha(0.0f);
                z2 = false;
            } else {
                this.floatingDateViewOffset = ((-this.floatingDateView.getMeasuredHeight()) * 2) + y3;
            }
            if (z2) {
                AnimatorSet animatorSet4 = this.floatingDateAnimation;
                if (animatorSet4 != null) {
                    animatorSet4.cancel();
                    this.floatingDateAnimation = animatorSet;
                }
                if (this.floatingDateView.getTag() == null) {
                    this.floatingDateView.setTag(1);
                }
                if (this.floatingDateView.getAlpha() != 1.0f) {
                    this.floatingDateView.setAlpha(1.0f);
                }
                this.currentFloatingDateOnScreen = true;
            }
        } else {
            hideFloatingDateView(true);
            this.floatingDateViewOffset = 0.0f;
        }
        if (isThreadChat()) {
            if (z11 != this.threadMessageVisible) {
                updatePinnedMessageView(this.openAnimationStartTime != 0 && SystemClock.elapsedRealtime() >= this.openAnimationStartTime + 150);
            }
        } else {
            int i41 = this.currentPinnedMessageId;
            if (i41 != 0) {
                MessageObject messageObject14 = this.pinnedMessageObjects.get(Integer.valueOf(i41));
                if (messageObject14 == null) {
                    messageObject14 = this.messagesDict[0].get(this.currentPinnedMessageId);
                }
                if (messageObject14 == null) {
                    if (this.loadingPinnedMessages.indexOfKey(this.currentPinnedMessageId) < 0) {
                        this.loadingPinnedMessages.put(this.currentPinnedMessageId, Boolean.TRUE);
                        ArrayList<Integer> arrayList3 = new ArrayList<>();
                        arrayList3.add(Integer.valueOf(this.currentPinnedMessageId));
                        getMediaDataController().loadPinnedMessages(this.dialog_id, ChatObject.isChannel(this.currentChat) ? this.currentChat.id : 0L, arrayList3, true);
                    }
                    i3 = i31;
                    this.currentPinnedMessageId = i3;
                } else {
                    i3 = i31;
                }
            } else {
                i3 = i31;
                if (i3 != 0 && !this.pinnedMessageIds.isEmpty()) {
                    this.currentPinnedMessageId = i3;
                }
            }
            boolean z12 = (this.fromPullingDownTransition && this.fragmentView.getVisibility() == 0) || (this.openAnimationStartTime != 0 && SystemClock.elapsedRealtime() >= this.openAnimationStartTime + 150);
            int i42 = this.currentPinnedMessageId;
            if (i3 != i42) {
                updatePinnedMessageView(z12, i3 == 0 ? 0 : i3 > i42 ? 1 : 2);
            } else {
                updatePinnedListButton(z12);
            }
        }
        ChatActionCell chatActionCell2 = this.floatingDateView;
        if (chatActionCell2 != null) {
            chatActionCell2.setTranslationY(((this.chatListView.getTranslationY() + this.chatListViewPaddingTop) + this.floatingDateViewOffset) - AndroidUtilities.dp(4.0f));
        }
        invalidateChatListViewTopPadding();
        if (this.firstLoading || this.paused || this.inPreviewMode || this.chatMode != 0 || getMessagesController().ignoreSetOnline) {
            return;
        }
        int i43 = 0;
        if (i34 == Integer.MIN_VALUE) {
            i2 = Integer.MAX_VALUE;
            if (i32 == Integer.MAX_VALUE) {
                if (!this.firstUnreadSent && this.currentEncryptedChat == null && this.chatLayoutManager.findFirstVisibleItemPosition() == 0) {
                    this.newUnreadMessageCount = 0;
                    if (z) {
                        AndroidUtilities.runOnUIThread(new ChatActivity$$ExternalSyntheticLambda146(this));
                    } else {
                        inlineUpdate2();
                    }
                    MessagesController messagesController = getMessagesController();
                    long j5 = this.dialog_id;
                    int[] iArr = this.minMessageId;
                    i = i14;
                    c = 0;
                    messagesController.markDialogAsRead(j5, iArr[0], iArr[0], this.maxDate[0], false, i, 0, true, 0);
                    this.firstUnreadSent = true;
                } else {
                    i = i14;
                    c = 0;
                }
                if (i == 0 || i34 <= 0 || this.replyMaxReadId == i34) {
                    return;
                }
                this.replyMaxReadId = i34;
                getMessagesStorage().updateRepliesMaxReadId(this.replyOriginalChat.id, this.replyOriginalMessageId, this.replyMaxReadId, true);
                NotificationCenter notificationCenter = getNotificationCenter();
                int i44 = NotificationCenter.commentsRead;
                Object[] objArr = new Object[3];
                objArr[c] = Long.valueOf(this.replyOriginalChat.id);
                objArr[1] = Integer.valueOf(this.replyOriginalMessageId);
                objArr[2] = Integer.valueOf(this.replyMaxReadId);
                notificationCenter.postNotificationName(i44, objArr);
                return;
            }
            i = i14;
        } else {
            i = i14;
            i2 = Integer.MAX_VALUE;
        }
        c = 0;
        int i45 = 0;
        for (int i46 = 0; i46 < this.messages.size(); i46++) {
            MessageObject messageObject15 = this.messages.get(i46);
            int id2 = messageObject15.getId();
            if (i34 != Integer.MIN_VALUE && id2 > 0 && id2 <= i34 && ((messageObject15.messageOwner.from_scheduled && id2 > num2.intValue()) || (messageObject15.isUnread() && !messageObject15.isOut()))) {
                if (messageObject15.messageOwner.from_scheduled) {
                    i43++;
                } else {
                    messageObject15.setIsRead();
                }
                i45++;
            }
            if (i32 != i2 && id2 < 0 && id2 >= i32 && messageObject15.isUnread()) {
                messageObject15.setIsRead();
                i45++;
            }
        }
        if ((this.forwardEndReached[0] && i34 == this.minMessageId[0]) || i32 == this.minMessageId[0]) {
            this.newUnreadMessageCount = 0;
        } else {
            int i47 = this.newUnreadMessageCount - i45;
            this.newUnreadMessageCount = i47;
            if (i47 < 0) {
                this.newUnreadMessageCount = 0;
            }
        }
        if (z) {
            AndroidUtilities.runOnUIThread(new ChatActivity$$ExternalSyntheticLambda133(this));
        } else {
            inlineUpdate1();
        }
        MessagesController messagesController2 = getMessagesController();
        long j6 = this.dialog_id;
        int[] iArr2 = this.minMessageId;
        messagesController2.markDialogAsRead(j6, i34, i32, i33, false, i, i45, i34 == iArr2[0] || i32 == iArr2[0], i43);
        this.firstUnreadSent = true;
        if (i == 0) {
        }
    }

    public /* synthetic */ void lambda$updateMessagesVisiblePart$105(MessageObject messageObject) {
        if (messageObject.isVideo()) {
            openPhotoViewerForMessage(null, messageObject);
        } else {
            MediaController.getInstance().playMessage(messageObject);
        }
    }

    public void inlineUpdate1() {
        int i = this.prevSetUnreadCount;
        int i2 = this.newUnreadMessageCount;
        if (i != i2) {
            this.prevSetUnreadCount = i2;
            this.pagedownButtonCounter.setCount(i2, this.openAnimationEnded);
        }
    }

    public void inlineUpdate2() {
        int i = this.prevSetUnreadCount;
        int i2 = this.newUnreadMessageCount;
        if (i != i2) {
            this.prevSetUnreadCount = i2;
            this.pagedownButtonCounter.setCount(i2, true);
        }
    }

    public void toggleMute(boolean z) {
        if (getMessagesController().isDialogMuted(this.dialog_id)) {
            getNotificationsController().muteDialog(this.dialog_id, false);
            if (z) {
                return;
            }
            BulletinFactory.createMuteBulletin(this, false, this.themeDelegate).show();
        } else if (z) {
            getNotificationsController().muteDialog(this.dialog_id, true);
        } else {
            BottomSheet createMuteAlert = AlertsCreator.createMuteAlert(this, this.dialog_id, this.themeDelegate);
            createMuteAlert.setCalcMandatoryInsets(isKeyboardVisible());
            showDialog(createMuteAlert);
        }
    }

    private int getScrollOffsetForMessage(MessageObject messageObject) {
        return getScrollOffsetForMessage(getHeightForMessage(messageObject));
    }

    private int getScrollOffsetForMessage(int i) {
        return (int) Math.max(-AndroidUtilities.dp(2.0f), (((this.chatListView.getMeasuredHeight() - this.blurredViewBottomOffset) - this.chatListViewPaddingTop) - i) / 2.0f);
    }

    private int getHeightForMessage(MessageObject messageObject) {
        boolean z = true;
        if (this.dummyMessageCell == null) {
            this.dummyMessageCell = new ChatMessageCell(getParentActivity(), true, this.themeDelegate);
        }
        this.dummyMessageCell.isChat = this.currentChat != null || UserObject.isUserSelf(this.currentUser);
        ChatMessageCell chatMessageCell = this.dummyMessageCell;
        TLRPC$User tLRPC$User = this.currentUser;
        chatMessageCell.isBot = tLRPC$User != null && tLRPC$User.bot;
        if (!ChatObject.isChannel(this.currentChat) || !this.currentChat.megagroup) {
            z = false;
        }
        chatMessageCell.isMegagroup = z;
        return this.dummyMessageCell.computeHeight(messageObject, this.groupedMessagesMap.get(messageObject.getGroupId()));
    }

    public void startMessageUnselect() {
        Runnable runnable = this.unselectRunnable;
        if (runnable != null) {
            AndroidUtilities.cancelRunOnUIThread(runnable);
        }
        ChatActivity$$ExternalSyntheticLambda136 chatActivity$$ExternalSyntheticLambda136 = new ChatActivity$$ExternalSyntheticLambda136(this);
        this.unselectRunnable = chatActivity$$ExternalSyntheticLambda136;
        AndroidUtilities.runOnUIThread(chatActivity$$ExternalSyntheticLambda136, 1000L);
    }

    public /* synthetic */ void lambda$startMessageUnselect$106() {
        this.highlightMessageId = Integer.MAX_VALUE;
        updateVisibleRows();
        this.unselectRunnable = null;
    }

    public void removeSelectedMessageHighlight() {
        Runnable runnable = this.unselectRunnable;
        if (runnable != null) {
            AndroidUtilities.cancelRunOnUIThread(runnable);
            this.unselectRunnable = null;
        }
        this.highlightMessageId = Integer.MAX_VALUE;
    }

    /* JADX WARN: Removed duplicated region for block: B:122:0x028d  */
    /* JADX WARN: Removed duplicated region for block: B:139:0x0158 A[SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:49:0x00bf  */
    /* JADX WARN: Removed duplicated region for block: B:90:0x0196 A[LOOP:1: B:66:0x0116->B:90:0x0196, LOOP_END] */
    /* JADX WARN: Removed duplicated region for block: B:96:0x01ce  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void scrollToMessageId(int i, int i2, boolean z, int i3, boolean z2, int i4) {
        int i5;
        int i6;
        boolean z3;
        MessageObject messageObject;
        MessageObject findPrimaryMessageObject;
        int i7 = i;
        if (i7 == 0 || NotificationCenter.getInstance(this.currentAccount).isAnimationInProgress() || getParentActivity() == null) {
            if (!NotificationCenter.getInstance(this.currentAccount).isAnimationInProgress()) {
                return;
            }
            this.nextScrollToMessageId = i7;
            this.nextScrollFromMessageId = i2;
            this.nextScrollSelect = z;
            this.nextScrollLoadIndex = i3;
            this.nextScrollForce = z2;
            this.nextScrollForcePinnedMessageId = i4;
            NotificationCenter.getInstance(this.currentAccount).doOnIdle(new ChatActivity$$ExternalSyntheticLambda144(this));
            return;
        }
        this.forceNextPinnedMessageId = Math.abs(i4);
        this.forceScrollToFirst = i4 > 0;
        this.wasManualScroll = true;
        MessageObject messageObject2 = this.messagesDict[i3].get(i7);
        if (i2 != 0) {
            int i8 = i2 < i7 ? 1 : 0;
            if (isSecretChat()) {
                i8 ^= 1;
            }
            i6 = i8 ^ 1;
        } else {
            if (this.messages.size() > 0) {
                if (!isThreadChat() || i7 != this.threadMessageId) {
                    int findLastVisibleItemPosition = this.chatLayoutManager.findLastVisibleItemPosition();
                    for (int findFirstVisibleItemPosition = this.chatLayoutManager.findFirstVisibleItemPosition(); findFirstVisibleItemPosition <= findLastVisibleItemPosition; findFirstVisibleItemPosition++) {
                        if (findFirstVisibleItemPosition >= this.chatAdapter.messagesStartRow && findFirstVisibleItemPosition < this.chatAdapter.messagesEndRow) {
                            MessageObject messageObject3 = this.messages.get(findFirstVisibleItemPosition - this.chatAdapter.messagesStartRow);
                            if (messageObject3.getId() != 0) {
                                i5 = findFirstVisibleItemPosition - this.chatAdapter.messagesStartRow;
                                int i9 = messageObject3.getId() < i7 ? 1 : 0;
                                if (isSecretChat()) {
                                    i9 ^= 1;
                                }
                                i6 = i9 ^ 1;
                                this.chatScrollHelper.setScrollDirection(i6);
                                if (messageObject2 != null) {
                                    MessageObject.GroupedMessages groupedMessages = this.groupedMessagesMap.get(messageObject2.getGroupId());
                                    if (messageObject2.getGroupId() != 0 && groupedMessages != null && (findPrimaryMessageObject = groupedMessages.findPrimaryMessageObject()) != null) {
                                        messageObject2 = findPrimaryMessageObject;
                                    }
                                    int indexOf = this.messages.indexOf(messageObject2);
                                    if (indexOf != -1) {
                                        if (i5 > 0) {
                                            i6 = i5 > indexOf ? 0 : 1;
                                            this.chatScrollHelper.setScrollDirection(i6);
                                        }
                                        removeSelectedMessageHighlight();
                                        if (z) {
                                            this.highlightMessageId = i7;
                                        }
                                        this.chatAdapter.updateRowsSafe();
                                        int indexOf2 = this.chatAdapter.messagesStartRow + this.messages.indexOf(messageObject2);
                                        updateVisibleRows();
                                        int childCount = this.chatListView.getChildCount();
                                        int i10 = 0;
                                        boolean z4 = false;
                                        while (true) {
                                            if (i10 >= childCount) {
                                                break;
                                            }
                                            View childAt = this.chatListView.getChildAt(i10);
                                            if (childAt instanceof ChatMessageCell) {
                                                MessageObject messageObject4 = ((ChatMessageCell) childAt).getMessageObject();
                                                if (messageObject4 != null && messageObject4.getId() == messageObject2.getId()) {
                                                    childAt.sendAccessibilityEvent(8);
                                                    z4 = true;
                                                }
                                                if (!z4) {
                                                    int top = (int) ((childAt.getTop() - this.chatListViewPaddingTop) - getScrollOffsetForMessage(childAt.getHeight()));
                                                    int computeVerticalScrollRange = (this.chatListView.computeVerticalScrollRange() - this.chatListView.computeVerticalScrollOffset()) - this.chatListView.computeVerticalScrollExtent();
                                                    if (computeVerticalScrollRange < 0) {
                                                        computeVerticalScrollRange = 0;
                                                    }
                                                    if (top > computeVerticalScrollRange) {
                                                        top = computeVerticalScrollRange;
                                                    }
                                                    if (top != 0) {
                                                        this.scrollByTouch = false;
                                                        this.chatListView.smoothScrollBy(0, top);
                                                        this.chatListView.setOverScrollMode(2);
                                                    }
                                                } else {
                                                    i10++;
                                                }
                                            } else {
                                                if ((childAt instanceof ChatActionCell) && (messageObject = ((ChatActionCell) childAt).getMessageObject()) != null && messageObject.getId() == messageObject2.getId()) {
                                                    childAt.sendAccessibilityEvent(8);
                                                    z4 = true;
                                                }
                                                if (!z4) {
                                                }
                                            }
                                        }
                                        if (!z4) {
                                            int scrollOffsetForMessage = getScrollOffsetForMessage(messageObject2);
                                            this.chatScrollHelperCallback.scrollTo = messageObject2;
                                            this.chatScrollHelperCallback.lastBottom = false;
                                            this.chatScrollHelperCallback.lastItemOffset = scrollOffsetForMessage;
                                            this.chatScrollHelperCallback.lastPadding = (int) this.chatListViewPaddingTop;
                                            this.chatScrollHelper.setScrollDirection(i6);
                                            this.chatScrollHelper.scrollToPosition(indexOf2, scrollOffsetForMessage, false, true);
                                            this.canShowPagedownButton = true;
                                            updatePagedownButtonVisibility(true);
                                        }
                                        z3 = false;
                                        if (z3) {
                                            if (isThreadChat() && i7 == this.threadMessageId) {
                                                this.scrollToThreadMessage = true;
                                                i7 = 1;
                                            }
                                            AlertDialog alertDialog = this.progressDialog;
                                            if (alertDialog != null) {
                                                alertDialog.dismiss();
                                            }
                                            showPinnedProgress(this.forceNextPinnedMessageId != 0);
                                            AlertDialog alertDialog2 = new AlertDialog(getParentActivity(), 3, this.themeDelegate);
                                            this.progressDialog = alertDialog2;
                                            alertDialog2.setOnShowListener(new ChatActivity$$ExternalSyntheticLambda55(this));
                                            this.progressDialog.setOnCancelListener(this.postponedScrollCancelListener);
                                            this.progressDialog.showDelayed(400L);
                                            this.waitingForLoad.clear();
                                            removeSelectedMessageHighlight();
                                            this.scrollToMessagePosition = -10000;
                                            this.startLoadFromMessageId = i7;
                                            this.showScrollToMessageError = !z2;
                                            if (i7 == this.createUnreadMessageAfterId) {
                                                this.createUnreadMessageAfterIdLoading = true;
                                            }
                                            this.postponedScrollIsCanceled = false;
                                            this.waitingForLoad.add(Integer.valueOf(this.lastLoadIndex));
                                            this.postponedScrollToLastMessageQueryIndex = this.lastLoadIndex;
                                            this.postponedScrollMinMessageId = this.minMessageId[0];
                                            this.postponedScrollMessageId = i7;
                                            MessagesController messagesController = getMessagesController();
                                            long j = i3 == 0 ? this.dialog_id : this.mergeDialogId;
                                            int i11 = (isThreadChat() || AndroidUtilities.isTablet()) ? 30 : 20;
                                            int i12 = this.startLoadFromMessageId;
                                            int i13 = this.classGuid;
                                            int i14 = this.chatMode;
                                            int i15 = this.threadMessageId;
                                            int i16 = this.replyMaxReadId;
                                            int i17 = this.lastLoadIndex;
                                            this.lastLoadIndex = i17 + 1;
                                            messagesController.loadMessages(j, 0L, false, i11, i12, 0, true, 0, i13, 3, 0, i14, i15, i16, i17);
                                        } else {
                                            View childAt2 = this.chatListView.getChildAt(0);
                                            if (childAt2 != null && childAt2.getTop() <= 0) {
                                                showFloatingDateView(false);
                                            }
                                        }
                                        this.returnToMessageId = i2;
                                        this.returnToLoadIndex = i3;
                                        this.needSelectFromMessageId = z;
                                    }
                                }
                                z3 = true;
                                if (z3) {
                                }
                                this.returnToMessageId = i2;
                                this.returnToLoadIndex = i3;
                                this.needSelectFromMessageId = z;
                            }
                        }
                    }
                } else {
                    i6 = 1;
                }
            }
            i6 = -1;
        }
        i5 = 0;
        this.chatScrollHelper.setScrollDirection(i6);
        if (messageObject2 != null) {
        }
        z3 = true;
        if (z3) {
        }
        this.returnToMessageId = i2;
        this.returnToLoadIndex = i3;
        this.needSelectFromMessageId = z;
    }

    public /* synthetic */ void lambda$scrollToMessageId$107() {
        int i = this.nextScrollToMessageId;
        if (i != 0) {
            scrollToMessageId(i, this.nextScrollFromMessageId, this.nextScrollSelect, this.nextScrollLoadIndex, this.nextScrollForce, this.nextScrollForcePinnedMessageId);
            this.nextScrollToMessageId = 0;
        }
    }

    public /* synthetic */ void lambda$scrollToMessageId$108(DialogInterface dialogInterface) {
        showPinnedProgress(false);
    }

    private void showPinnedProgress(boolean z) {
        if (z) {
            if (this.updatePinnedProgressRunnable != null) {
                return;
            }
            ChatActivity$$ExternalSyntheticLambda153 chatActivity$$ExternalSyntheticLambda153 = new ChatActivity$$ExternalSyntheticLambda153(this);
            this.updatePinnedProgressRunnable = chatActivity$$ExternalSyntheticLambda153;
            AndroidUtilities.runOnUIThread(chatActivity$$ExternalSyntheticLambda153, 100L);
            return;
        }
        Runnable runnable = this.updatePinnedProgressRunnable;
        if (runnable != null) {
            AndroidUtilities.cancelRunOnUIThread(runnable);
        }
        this.updatePinnedProgressRunnable = null;
        this.pinnedProgressIsShowing = false;
        updatePinnedListButton(true);
    }

    public /* synthetic */ void lambda$showPinnedProgress$109() {
        this.pinnedProgressIsShowing = true;
        updatePinnedListButton(true);
    }

    public void updatePagedownButtonVisibility(boolean z) {
        if (this.pagedownButton == null) {
            return;
        }
        if (this.canShowPagedownButton && !this.textSelectionHelper.isSelectionMode() && !this.chatActivityEnterView.isRecordingAudioVideo()) {
            if (z && (this.openAnimationStartTime == 0 || SystemClock.elapsedRealtime() < this.openAnimationStartTime + 150)) {
                z = false;
            }
            this.pagedownButtonShowedByScroll = false;
            if (this.pagedownButton.getTag() != null) {
                return;
            }
            ValueAnimator valueAnimator = this.pagedownButtonAnimation;
            if (valueAnimator != null) {
                valueAnimator.removeAllListeners();
                this.pagedownButtonAnimation.cancel();
                this.pagedownButtonAnimation = null;
            }
            this.pagedownButton.setTag(1);
            if (z) {
                this.pagedownButton.setVisibility(0);
                ValueAnimator ofFloat = ValueAnimator.ofFloat(this.pagedownButtonEnterProgress, 1.0f);
                this.pagedownButtonAnimation = ofFloat;
                ofFloat.addUpdateListener(new ChatActivity$$ExternalSyntheticLambda8(this));
                this.pagedownButtonAnimation.addListener(new AnonymousClass73());
                this.pagedownButtonAnimation.setDuration(200L);
                this.pagedownButtonAnimation.start();
                return;
            }
            this.pagedownButtonEnterProgress = 1.0f;
            this.contentView.invalidate();
            this.pagedownButton.setVisibility(0);
            return;
        }
        this.returnToMessageId = 0;
        this.newUnreadMessageCount = 0;
        if (this.pagedownButton.getTag() == null) {
            return;
        }
        this.pagedownButton.setTag(null);
        ValueAnimator valueAnimator2 = this.pagedownButtonAnimation;
        if (valueAnimator2 != null) {
            valueAnimator2.removeAllListeners();
            this.pagedownButtonAnimation.cancel();
            this.pagedownButtonAnimation = null;
        }
        if (z) {
            this.pagedownButton.setVisibility(0);
            ValueAnimator ofFloat2 = ValueAnimator.ofFloat(this.pagedownButtonEnterProgress, 0.0f);
            this.pagedownButtonAnimation = ofFloat2;
            ofFloat2.addUpdateListener(new ChatActivity$$ExternalSyntheticLambda12(this));
            this.pagedownButtonAnimation.addListener(new AnonymousClass74());
            this.pagedownButtonAnimation.setDuration(200L);
            this.pagedownButtonAnimation.start();
            return;
        }
        this.pagedownButtonEnterProgress = 0.0f;
        this.pagedownButton.setVisibility(4);
    }

    public /* synthetic */ void lambda$updatePagedownButtonVisibility$110(ValueAnimator valueAnimator) {
        this.pagedownButtonEnterProgress = ((Float) valueAnimator.getAnimatedValue()).floatValue();
        this.contentView.invalidate();
    }

    /* renamed from: org.telegram.ui.ChatActivity$73 */
    /* loaded from: classes3.dex */
    public class AnonymousClass73 extends AnimatorListenerAdapter {
        AnonymousClass73() {
            ChatActivity.this = r1;
        }

        @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
        public void onAnimationEnd(Animator animator) {
            ChatActivity.this.pagedownButtonEnterProgress = 1.0f;
            ChatActivity.this.contentView.invalidate();
        }
    }

    public /* synthetic */ void lambda$updatePagedownButtonVisibility$111(ValueAnimator valueAnimator) {
        this.pagedownButtonEnterProgress = ((Float) valueAnimator.getAnimatedValue()).floatValue();
        this.contentView.invalidate();
    }

    /* renamed from: org.telegram.ui.ChatActivity$74 */
    /* loaded from: classes3.dex */
    public class AnonymousClass74 extends AnimatorListenerAdapter {
        AnonymousClass74() {
            ChatActivity.this = r1;
        }

        @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
        public void onAnimationEnd(Animator animator) {
            ChatActivity.this.pagedownButtonEnterProgress = 0.0f;
            ChatActivity.this.pagedownButton.setVisibility(4);
            ChatActivity.this.contentView.invalidate();
        }
    }

    public void showMentionDownButton(boolean z, boolean z2) {
        FrameLayout frameLayout = this.mentiondownButton;
        if (frameLayout == null) {
            return;
        }
        if (z) {
            if (frameLayout.getTag() != null) {
                return;
            }
            ValueAnimator valueAnimator = this.mentiondownButtonAnimation;
            if (valueAnimator != null) {
                valueAnimator.removeAllListeners();
                this.mentiondownButtonAnimation.cancel();
                this.mentiondownButtonAnimation = null;
            }
            if (z2) {
                this.mentiondownButton.setVisibility(0);
                this.mentiondownButton.setTag(1);
                ValueAnimator ofFloat = ValueAnimator.ofFloat(this.mentionsButtonEnterProgress, 1.0f);
                this.mentiondownButtonAnimation = ofFloat;
                ofFloat.addUpdateListener(new ChatActivity$$ExternalSyntheticLambda6(this));
                this.mentiondownButtonAnimation.addListener(new AnonymousClass75());
                this.mentiondownButtonAnimation.setDuration(200L);
                this.mentiondownButtonAnimation.start();
                return;
            }
            this.mentionsButtonEnterProgress = 1.0f;
            this.contentView.invalidate();
            return;
        }
        this.returnToMessageId = 0;
        if (frameLayout.getTag() == null) {
            return;
        }
        this.mentiondownButton.setTag(null);
        ValueAnimator valueAnimator2 = this.mentiondownButtonAnimation;
        if (valueAnimator2 != null) {
            valueAnimator2.removeAllListeners();
            this.mentiondownButtonAnimation.cancel();
            this.mentiondownButtonAnimation = null;
        }
        if (z2) {
            ValueAnimator ofFloat2 = ValueAnimator.ofFloat(this.mentionsButtonEnterProgress, 0.0f);
            this.mentiondownButtonAnimation = ofFloat2;
            ofFloat2.addUpdateListener(new ChatActivity$$ExternalSyntheticLambda1(this));
            this.mentiondownButtonAnimation.addListener(new AnonymousClass76());
            this.mentiondownButtonAnimation.setDuration(200L);
            this.mentiondownButtonAnimation.start();
            return;
        }
        this.mentionsButtonEnterProgress = 0.0f;
        this.mentiondownButton.setVisibility(4);
    }

    public /* synthetic */ void lambda$showMentionDownButton$112(ValueAnimator valueAnimator) {
        this.mentionsButtonEnterProgress = ((Float) valueAnimator.getAnimatedValue()).floatValue();
        this.contentView.invalidate();
    }

    /* renamed from: org.telegram.ui.ChatActivity$75 */
    /* loaded from: classes3.dex */
    public class AnonymousClass75 extends AnimatorListenerAdapter {
        AnonymousClass75() {
            ChatActivity.this = r1;
        }

        @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
        public void onAnimationEnd(Animator animator) {
            ChatActivity.this.mentionsButtonEnterProgress = 1.0f;
            ChatActivity.this.contentView.invalidate();
        }
    }

    public /* synthetic */ void lambda$showMentionDownButton$113(ValueAnimator valueAnimator) {
        this.mentionsButtonEnterProgress = ((Float) valueAnimator.getAnimatedValue()).floatValue();
        this.contentView.invalidate();
    }

    /* renamed from: org.telegram.ui.ChatActivity$76 */
    /* loaded from: classes3.dex */
    public class AnonymousClass76 extends AnimatorListenerAdapter {
        AnonymousClass76() {
            ChatActivity.this = r1;
        }

        @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
        public void onAnimationEnd(Animator animator) {
            ChatActivity.this.mentionsButtonEnterProgress = 0.0f;
            ChatActivity.this.mentiondownButton.setVisibility(4);
            ChatActivity.this.contentView.invalidate();
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:52:0x014b  */
    /* JADX WARN: Removed duplicated region for block: B:54:0x0152  */
    /* JADX WARN: Removed duplicated region for block: B:66:? A[RETURN, SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void updateSecretStatus() {
        ChatActivityEnterView chatActivityEnterView;
        if (this.bottomOverlay == null) {
            return;
        }
        TLRPC$Chat tLRPC$Chat = this.currentChat;
        boolean z = true;
        if (tLRPC$Chat != null && !ChatObject.canSendMessages(tLRPC$Chat)) {
            TLRPC$Chat tLRPC$Chat2 = this.currentChat;
            if (!tLRPC$Chat2.gigagroup && (!ChatObject.isChannel(tLRPC$Chat2) || this.currentChat.megagroup)) {
                TLRPC$Chat tLRPC$Chat3 = this.currentChat;
                TLRPC$TL_chatBannedRights tLRPC$TL_chatBannedRights = tLRPC$Chat3.default_banned_rights;
                if (tLRPC$TL_chatBannedRights != null && tLRPC$TL_chatBannedRights.send_messages) {
                    this.bottomOverlayText.setText(LocaleController.getString("GlobalSendMessageRestricted", 2131626127));
                } else if (AndroidUtilities.isBannedForever(tLRPC$Chat3.banned_rights)) {
                    this.bottomOverlayText.setText(LocaleController.getString("SendMessageRestrictedForever", 2131628264));
                } else {
                    this.bottomOverlayText.setText(LocaleController.formatString("SendMessageRestricted", 2131628263, LocaleController.formatDateForBan(this.currentChat.banned_rights.until_date)));
                }
                this.bottomOverlay.setVisibility(0);
                AnimatorSet animatorSet = this.mentionListAnimation;
                if (animatorSet != null) {
                    animatorSet.cancel();
                    this.mentionListAnimation = null;
                }
                this.mentionContainer.setVisibility(8);
                this.mentionContainer.setTag(null);
                updateMessageListAccessibilityVisibility();
                StickersAdapter stickersAdapter = this.stickersAdapter;
                if (stickersAdapter != null) {
                    stickersAdapter.hide();
                }
                if (this.inPreviewMode) {
                    this.bottomOverlay.setVisibility(4);
                }
                if (z) {
                    return;
                }
                this.chatActivityEnterView.hidePopup(false);
                if (getParentActivity() == null) {
                    return;
                }
                AndroidUtilities.hideKeyboard(getParentActivity().getCurrentFocus());
                return;
            }
        }
        TLRPC$EncryptedChat tLRPC$EncryptedChat = this.currentEncryptedChat;
        if (tLRPC$EncryptedChat == null || this.bigEmptyView == null) {
            this.bottomOverlay.setVisibility(4);
            if (this.stickersAdapter == null || (chatActivityEnterView = this.chatActivityEnterView) == null || !chatActivityEnterView.hasText()) {
                return;
            }
            this.stickersAdapter.searchEmojiByKeyword(this.chatActivityEnterView.getFieldText());
            return;
        }
        if (tLRPC$EncryptedChat instanceof TLRPC$TL_encryptedChatRequested) {
            this.bottomOverlayText.setText(LocaleController.getString("EncryptionProcessing", 2131625677));
            this.bottomOverlay.setVisibility(0);
            this.chatActivityEnterView.setVisibility(4);
        } else if (tLRPC$EncryptedChat instanceof TLRPC$TL_encryptedChatWaiting) {
            TextView textView = this.bottomOverlayText;
            textView.setText(AndroidUtilities.replaceTags(LocaleController.formatString("AwaitingEncryption", 2131624645, "<b>" + this.currentUser.first_name + "</b>")));
            this.bottomOverlay.setVisibility(0);
            this.chatActivityEnterView.setVisibility(4);
        } else if (tLRPC$EncryptedChat instanceof TLRPC$TL_encryptedChatDiscarded) {
            this.bottomOverlayText.setText(LocaleController.getString("EncryptionRejected", 2131625678));
            this.bottomOverlay.setVisibility(0);
            this.chatActivityEnterView.setVisibility(4);
            this.chatActivityEnterView.setFieldText("");
            getMediaDataController().cleanDraft(this.dialog_id, this.threadMessageId, false);
        } else {
            if (tLRPC$EncryptedChat instanceof TLRPC$TL_encryptedChat) {
                this.bottomOverlay.setVisibility(4);
                if (!this.inPreviewMode) {
                    this.chatActivityEnterView.setVisibility(0);
                }
            }
            z = false;
        }
        checkRaiseSensors();
        checkActionBarMenu(false);
        if (this.inPreviewMode) {
        }
        if (z) {
        }
    }

    @Override // org.telegram.ui.ActionBar.BaseFragment
    public void onRequestPermissionsResultFragment(int i, String[] strArr, int[] iArr) {
        boolean z;
        ChatAttachAlert chatAttachAlert;
        ChatAttachAlert chatAttachAlert2;
        ChatAttachAlert chatAttachAlert3;
        ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        if (chatActivityEnterView != null) {
            chatActivityEnterView.onRequestPermissionsResultFragment(i, strArr, iArr);
        }
        MentionsContainerView mentionsContainerView = this.mentionContainer;
        if (mentionsContainerView != null && mentionsContainerView.getAdapter() != null) {
            this.mentionContainer.getAdapter().onRequestPermissionsResultFragment(i, strArr, iArr);
        }
        if (i == 4 && (chatAttachAlert3 = this.chatAttachAlert) != null) {
            chatAttachAlert3.getPhotoLayout().checkStorage();
        } else if ((i == 5 || i == 30) && (chatAttachAlert2 = this.chatAttachAlert) != null) {
            chatAttachAlert2.onRequestPermissionsResultFragment(i, strArr, iArr);
        } else {
            boolean z2 = true;
            if ((i == 17 || i == 18) && (chatAttachAlert = this.chatAttachAlert) != null) {
                ChatAttachAlertPhotoLayout photoLayout = chatAttachAlert.getPhotoLayout();
                if (iArr.length <= 0 || iArr[0] != 0) {
                    z2 = false;
                }
                photoLayout.checkCamera(z2);
                this.chatAttachAlert.getPhotoLayout().checkStorage();
            } else if (i == 21) {
                if (getParentActivity() == null || iArr == null || iArr.length == 0 || iArr[0] == 0) {
                    return;
                }
                AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity(), this.themeDelegate);
                builder.setTitle(LocaleController.getString("AppName", 2131624384));
                builder.setMessage(LocaleController.getString("PermissionNoAudioVideoWithHint", 2131627523));
                builder.setNegativeButton(LocaleController.getString("PermissionOpenSettings", 2131627535), new ChatActivity$$ExternalSyntheticLambda33(this));
                builder.setPositiveButton(LocaleController.getString("OK", 2131627127), null);
                builder.show();
            } else if (i == 19 && iArr != null && iArr.length > 0 && iArr[0] == 0) {
                processSelectedAttach(0);
            } else if (i == 20 && iArr != null && iArr.length > 0 && iArr[0] == 0) {
                processSelectedAttach(2);
            } else if (((i != 101 && i != 102) || this.currentUser == null) && (i != 103 || this.currentChat == null)) {
            } else {
                int i2 = 0;
                while (true) {
                    if (i2 >= iArr.length) {
                        z = true;
                        break;
                    } else if (iArr[i2] != 0) {
                        z = false;
                        break;
                    } else {
                        i2++;
                    }
                }
                if (iArr.length <= 0 || !z) {
                    VoIPHelper.permissionDenied(getParentActivity(), null, i);
                } else if (i == 103) {
                    VoIPHelper.startCall(this.currentChat, null, null, this.createGroupCall, getParentActivity(), this, getAccountInstance());
                } else {
                    TLRPC$User tLRPC$User = this.currentUser;
                    boolean z3 = i == 102;
                    TLRPC$UserFull tLRPC$UserFull = this.userInfo;
                    VoIPHelper.startCall(tLRPC$User, z3, tLRPC$UserFull != null && tLRPC$UserFull.video_calls_available, getParentActivity(), getMessagesController().getUserFull(this.currentUser.id), getAccountInstance());
                }
            }
        }
    }

    public /* synthetic */ void lambda$onRequestPermissionsResultFragment$114(DialogInterface dialogInterface, int i) {
        try {
            Intent intent = new Intent("android.settings.APPLICATION_DETAILS_SETTINGS");
            intent.setData(Uri.parse("package:" + ApplicationLoader.applicationContext.getPackageName()));
            getParentActivity().startActivity(intent);
        } catch (Exception e) {
            FileLog.e(e);
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:65:0x009d  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void checkActionBarMenu(boolean z) {
        TLRPC$ChatFull tLRPC$ChatFull;
        boolean z2;
        TLRPC$User tLRPC$User;
        TLRPC$UserFull tLRPC$UserFull;
        TLRPC$ChatFull tLRPC$ChatFull2;
        TLRPC$EncryptedChat tLRPC$EncryptedChat = this.currentEncryptedChat;
        int i = 8;
        if ((tLRPC$EncryptedChat != null && !(tLRPC$EncryptedChat instanceof TLRPC$TL_encryptedChat)) || ((this.currentChat != null && (this.chatMode != 0 || this.threadMessageId != 0 || (tLRPC$ChatFull2 = this.chatInfo) == null || tLRPC$ChatFull2.ttl_period == 0)) || ((tLRPC$User = this.currentUser) != null && (UserObject.isDeleted(tLRPC$User) || (this.currentEncryptedChat == null && ((tLRPC$UserFull = this.userInfo) == null || tLRPC$UserFull.ttl_period == 0)))))) {
            View view = this.timeItem2;
            if (view != null) {
                view.setVisibility(8);
            }
            ChatAvatarContainer chatAvatarContainer = this.avatarContainer;
            if (chatAvatarContainer != null) {
                chatAvatarContainer.hideTimeItem(z);
            }
        } else {
            View view2 = this.timeItem2;
            if (view2 != null) {
                view2.setVisibility(0);
            }
            ChatAvatarContainer chatAvatarContainer2 = this.avatarContainer;
            if (chatAvatarContainer2 != null) {
                chatAvatarContainer2.showTimeItem(z);
            }
        }
        ChatAvatarContainer chatAvatarContainer3 = this.avatarContainer;
        if (chatAvatarContainer3 != null) {
            TLRPC$EncryptedChat tLRPC$EncryptedChat2 = this.currentEncryptedChat;
            if (tLRPC$EncryptedChat2 != null) {
                chatAvatarContainer3.setTime(tLRPC$EncryptedChat2.ttl, z);
            } else {
                TLRPC$UserFull tLRPC$UserFull2 = this.userInfo;
                if (tLRPC$UserFull2 != null) {
                    chatAvatarContainer3.setTime(tLRPC$UserFull2.ttl_period, z);
                } else {
                    TLRPC$ChatFull tLRPC$ChatFull3 = this.chatInfo;
                    if (tLRPC$ChatFull3 != null) {
                        chatAvatarContainer3.setTime(tLRPC$ChatFull3.ttl_period, z);
                    }
                }
            }
        }
        if (this.clearHistoryItem != null && (tLRPC$ChatFull = this.chatInfo) != null) {
            if (!tLRPC$ChatFull.can_delete_channel && ChatObject.isChannel(this.currentChat)) {
                TLRPC$Chat tLRPC$Chat = this.currentChat;
                if (!tLRPC$Chat.megagroup || !TextUtils.isEmpty(tLRPC$Chat.username)) {
                    z2 = false;
                    ActionBarMenuSubItem actionBarMenuSubItem = this.clearHistoryItem;
                    if (z2) {
                        i = 0;
                    }
                    actionBarMenuSubItem.setVisibility(i);
                }
            }
            z2 = true;
            ActionBarMenuSubItem actionBarMenuSubItem2 = this.clearHistoryItem;
            if (z2) {
            }
            actionBarMenuSubItem2.setVisibility(i);
        }
        checkAndUpdateAvatar();
    }

    public int getMessageType(MessageObject messageObject) {
        String str;
        String str2;
        if (messageObject == null) {
            return -1;
        }
        boolean z = false;
        boolean z2 = true;
        if (this.currentEncryptedChat == null) {
            if (messageObject.isEditing()) {
                return -1;
            }
            if (messageObject.getId() <= 0 && messageObject.isOut()) {
                if (!messageObject.isSendError()) {
                    return -1;
                }
                return !messageObject.isMediaEmpty() ? 0 : 20;
            } else if (messageObject.isAnimatedEmoji()) {
                return 2;
            } else {
                int i = messageObject.type;
                if (i == 6) {
                    return -1;
                }
                if (i == 10 || i == 11) {
                    return messageObject.getId() == 0 ? -1 : 1;
                } else if (messageObject.isVoice()) {
                    return 2;
                } else {
                    if (messageObject.isSticker() || messageObject.isAnimatedSticker()) {
                        TLRPC$InputStickerSet inputStickerSet = messageObject.getInputStickerSet();
                        return inputStickerSet instanceof TLRPC$TL_inputStickerSetID ? !getMediaDataController().isStickerPackInstalled(inputStickerSet.id) ? 7 : 9 : (!(inputStickerSet instanceof TLRPC$TL_inputStickerSetShortName) || getMediaDataController().isStickerPackInstalled(inputStickerSet.short_name)) ? 9 : 7;
                    }
                    if (!messageObject.isRoundVideo() && ((messageObject.messageOwner.media instanceof TLRPC$TL_messageMediaPhoto) || messageObject.getDocument() != null || messageObject.isMusic() || messageObject.isVideo())) {
                        if (!TextUtils.isEmpty(messageObject.messageOwner.attachPath) && new File(messageObject.messageOwner.attachPath).exists()) {
                            z = true;
                        }
                        if (z || !messageObject.mediaExists) {
                            z2 = z;
                        }
                        if (z2) {
                            if (messageObject.getDocument() != null && !messageObject.isMusic() && (str2 = messageObject.getDocument().mime_type) != null) {
                                if (messageObject.getDocumentName().toLowerCase().endsWith("attheme")) {
                                    return 10;
                                }
                                if (str2.endsWith("/xml")) {
                                    return 5;
                                }
                                if ((!messageObject.isNewGif() && str2.endsWith("/mp4")) || str2.endsWith("/png") || str2.endsWith("/jpg") || str2.endsWith("/jpeg")) {
                                    return 6;
                                }
                            }
                            return 4;
                        }
                    } else if (messageObject.type == 12) {
                        return 8;
                    } else {
                        if (messageObject.isMediaEmpty()) {
                            return 3;
                        }
                    }
                    return 2;
                }
            }
        } else if (messageObject.isSending()) {
            return -1;
        } else {
            if (messageObject.isAnimatedEmoji()) {
                return 2;
            }
            if (messageObject.type == 6) {
                return -1;
            }
            if (messageObject.isSendError()) {
                return !messageObject.isMediaEmpty() ? 0 : 20;
            }
            int i2 = messageObject.type;
            if (i2 == 10 || i2 == 11) {
                return (messageObject.getId() == 0 || messageObject.isSending()) ? -1 : 1;
            } else if (messageObject.isVoice()) {
                return 2;
            } else {
                if (!messageObject.isAnimatedEmoji() && (messageObject.isSticker() || messageObject.isAnimatedSticker())) {
                    TLRPC$InputStickerSet inputStickerSet2 = messageObject.getInputStickerSet();
                    if ((inputStickerSet2 instanceof TLRPC$TL_inputStickerSetShortName) && !getMediaDataController().isStickerPackInstalled(inputStickerSet2.short_name)) {
                        return 7;
                    }
                } else if (!messageObject.isRoundVideo() && ((messageObject.messageOwner.media instanceof TLRPC$TL_messageMediaPhoto) || messageObject.getDocument() != null || messageObject.isMusic() || messageObject.isVideo())) {
                    if (!TextUtils.isEmpty(messageObject.messageOwner.attachPath) && new File(messageObject.messageOwner.attachPath).exists()) {
                        z = true;
                    }
                    if (z || !FileLoader.getInstance(this.currentAccount).getPathToMessage(messageObject.messageOwner).exists()) {
                        z2 = z;
                    }
                    if (z2) {
                        if (messageObject.getDocument() != null && (str = messageObject.getDocument().mime_type) != null && str.endsWith("text/xml")) {
                            return 5;
                        }
                        if (messageObject.messageOwner.ttl <= 0) {
                            return 4;
                        }
                    }
                } else if (messageObject.type == 12) {
                    return 8;
                } else {
                    if (messageObject.isMediaEmpty()) {
                        return 3;
                    }
                }
                return 2;
            }
        }
    }

    public void addToSelectedMessages(MessageObject messageObject, boolean z) {
        addToSelectedMessages(messageObject, z, true);
    }

    private void addToSelectedMessages(MessageObject messageObject, boolean z, boolean z2) {
        int i;
        int i2;
        TLRPC$Chat tLRPC$Chat;
        String str;
        int i3;
        TLRPC$Message tLRPC$Message;
        TLRPC$Message tLRPC$Message2;
        int i4 = this.cantForwardMessagesCount;
        if (messageObject != null) {
            ArrayList<MessageObject> arrayList = this.threadMessageObjects;
            if (arrayList != null && arrayList.contains(messageObject)) {
                return;
            }
            char c = messageObject.getDialogId() == this.dialog_id ? (char) 0 : (char) 1;
            if (z && messageObject.getGroupId() != 0) {
                MessageObject.GroupedMessages groupedMessages = this.groupedMessagesMap.get(messageObject.getGroupId());
                if (groupedMessages == null) {
                    return;
                }
                boolean z3 = false;
                int i5 = 0;
                for (int i6 = 0; i6 < groupedMessages.messages.size(); i6++) {
                    if (this.selectedMessagesIds[c].indexOfKey(groupedMessages.messages.get(i6).getId()) < 0) {
                        i5 = i6;
                        z3 = true;
                    }
                }
                int i7 = 0;
                while (i7 < groupedMessages.messages.size()) {
                    MessageObject messageObject2 = groupedMessages.messages.get(i7);
                    if (z3) {
                        if (this.selectedMessagesIds[c].indexOfKey(messageObject2.getId()) < 0) {
                            addToSelectedMessages(messageObject2, false, i7 == i5);
                        }
                    } else {
                        addToSelectedMessages(messageObject2, false, i7 == groupedMessages.messages.size() - 1);
                    }
                    if (!TextUtils.isEmpty(messageObject2.caption)) {
                        showTextSelectionHint(messageObject);
                    }
                    i7++;
                }
                return;
            } else if (this.selectedMessagesIds[c].indexOfKey(messageObject.getId()) >= 0) {
                this.selectedMessagesIds[c].remove(messageObject.getId());
                if (this.reportType < 0) {
                    if ((messageObject.type == 0 || messageObject.isAnimatedEmoji() || messageObject.caption != null) && ((tLRPC$Message2 = messageObject.messageOwner) == null || !tLRPC$Message2.noforwards)) {
                        this.selectedMessagesCanCopyIds[c].remove(messageObject.getId());
                    }
                    if (!messageObject.isAnimatedEmoji() && ((messageObject.isSticker() || messageObject.isAnimatedSticker()) && MessageObject.isStickerHasSet(messageObject.getDocument()))) {
                        this.selectedMessagesCanStarIds[c].remove(messageObject.getId());
                    }
                    if (messageObject.canEditMessage(this.currentChat)) {
                        this.canEditMessagesCount--;
                    }
                    if (!messageObject.canDeleteMessage(this.chatMode == 1, this.currentChat)) {
                        this.cantDeleteMessagesCount--;
                    }
                    boolean isChatNoForwards = getMessagesController().isChatNoForwards(this.currentChat);
                    if (this.chatMode == 1 || !messageObject.canForwardMessage() || isChatNoForwards) {
                        this.cantForwardMessagesCount--;
                    } else {
                        this.canForwardMessagesCount--;
                    }
                    if (messageObject.isMusic() && !isChatNoForwards) {
                        this.canSaveMusicCount--;
                    } else if (messageObject.isDocument() && !isChatNoForwards) {
                        this.canSaveDocumentsCount--;
                    } else {
                        this.cantSaveMessagesCount--;
                    }
                }
            } else if (this.selectedMessagesIds[0].size() + this.selectedMessagesIds[1].size() >= 100) {
                AndroidUtilities.shakeView(this.selectedMessagesCountTextView, 2.0f, 0);
                Vibrator vibrator = (Vibrator) ApplicationLoader.applicationContext.getSystemService("vibrator");
                if (vibrator == null) {
                    return;
                }
                vibrator.vibrate(200L);
                return;
            } else {
                this.selectedMessagesIds[c].put(messageObject.getId(), messageObject);
                if (this.reportType < 0) {
                    if ((messageObject.type == 0 || messageObject.isAnimatedEmoji() || messageObject.caption != null) && ((tLRPC$Message = messageObject.messageOwner) == null || !tLRPC$Message.noforwards)) {
                        this.selectedMessagesCanCopyIds[c].put(messageObject.getId(), messageObject);
                    }
                    if (!messageObject.isAnimatedEmoji() && ((messageObject.isSticker() || messageObject.isAnimatedSticker()) && MessageObject.isStickerHasSet(messageObject.getDocument()))) {
                        this.selectedMessagesCanStarIds[c].put(messageObject.getId(), messageObject);
                    }
                    if (messageObject.canEditMessage(this.currentChat)) {
                        this.canEditMessagesCount++;
                    }
                    if (!messageObject.canDeleteMessage(this.chatMode == 1, this.currentChat)) {
                        this.cantDeleteMessagesCount++;
                    }
                    boolean isChatNoForwards2 = getMessagesController().isChatNoForwards(this.currentChat);
                    if (this.chatMode == 1 || !messageObject.canForwardMessage() || isChatNoForwards2) {
                        this.cantForwardMessagesCount++;
                    } else {
                        this.canForwardMessagesCount++;
                    }
                    if (messageObject.isMusic() && !isChatNoForwards2) {
                        this.canSaveMusicCount++;
                    } else if (messageObject.isDocument() && !isChatNoForwards2) {
                        this.canSaveDocumentsCount++;
                    } else {
                        this.cantSaveMessagesCount++;
                    }
                    if (z) {
                        showTextSelectionHint(messageObject);
                    }
                }
            }
        }
        AnimatorSet animatorSet = this.forwardButtonAnimation;
        if (animatorSet != null) {
            animatorSet.cancel();
            this.forwardButtonAnimation = null;
        }
        if (!z2 || !this.actionBar.isActionModeShowed() || this.reportType >= 0) {
            return;
        }
        int size = this.selectedMessagesIds[0].size() + this.selectedMessagesIds[1].size();
        if (size == 0) {
            hideActionMode();
            updatePinnedMessageView(true);
            return;
        }
        ActionBarMenuItem item = this.actionBar.createActionMode().getItem(25);
        ActionBarMenuItem item2 = this.actionBar.createActionMode().getItem(10);
        ActionBarMenuItem item3 = this.actionBar.createActionMode().getItem(22);
        ActionBarMenuItem item4 = this.actionBar.createActionMode().getItem(23);
        ActionBarMenuItem item5 = this.actionBar.createActionMode().getItem(11);
        boolean z4 = getMessagesController().isChatNoForwards(this.currentChat) || hasSelectedNoforwardsMessage();
        float f = 0.5f;
        if ((i4 == 0 && this.cantForwardMessagesCount != 0) || (i4 != 0 && this.cantForwardMessagesCount == 0)) {
            this.forwardButtonAnimation = new AnimatorSet();
            ArrayList arrayList2 = new ArrayList();
            if (item5 != null) {
                item5.setEnabled(this.cantForwardMessagesCount == 0 || z4);
                Property property = View.ALPHA;
                float[] fArr = new float[1];
                fArr[0] = this.cantForwardMessagesCount == 0 ? 1.0f : 0.5f;
                arrayList2.add(ObjectAnimator.ofFloat(item5, property, fArr));
                if (z4 && item5.getBackground() != null) {
                    item5.setBackground(null);
                } else if (item5.getBackground() == null) {
                    item5.setBackground(Theme.createSelectorDrawable(getThemedColor("actionBarActionModeDefaultSelector"), 5));
                }
            }
            TextView textView = this.forwardButton;
            if (textView != null) {
                textView.setEnabled(this.cantForwardMessagesCount == 0 || z4);
                if (z4 && this.forwardButton.getBackground() != null) {
                    this.forwardButton.setBackground(null);
                } else if (this.forwardButton.getBackground() == null) {
                    this.forwardButton.setBackground(Theme.createSelectorDrawable(getThemedColor("actionBarActionModeDefaultSelector"), 3));
                }
                TextView textView2 = this.forwardButton;
                Property property2 = View.ALPHA;
                float[] fArr2 = new float[1];
                if (this.cantForwardMessagesCount == 0) {
                    f = 1.0f;
                }
                fArr2[0] = f;
                arrayList2.add(ObjectAnimator.ofFloat(textView2, property2, fArr2));
            }
            this.forwardButtonAnimation.playTogether(arrayList2);
            this.forwardButtonAnimation.setDuration(100L);
            this.forwardButtonAnimation.addListener(new AnonymousClass77());
            this.forwardButtonAnimation.start();
        } else {
            if (item5 != null) {
                item5.setEnabled(this.cantForwardMessagesCount == 0 || z4);
                item5.setAlpha(this.cantForwardMessagesCount == 0 ? 1.0f : 0.5f);
                if (z4) {
                    if (item5.getBackground() != null) {
                        this.forwardButton.setBackground(null);
                    }
                } else if (item5.getBackground() == null) {
                    item5.setBackground(Theme.createSelectorDrawable(getThemedColor("actionBarActionModeDefaultSelector"), 3));
                }
            }
            TextView textView3 = this.forwardButton;
            if (textView3 != null) {
                textView3.setEnabled(this.cantForwardMessagesCount == 0 || z4);
                if (z4) {
                    if (this.forwardButton.getBackground() != null) {
                        this.forwardButton.setBackground(null);
                    }
                } else if (this.forwardButton.getBackground() == null) {
                    this.forwardButton.setBackground(Theme.createSelectorDrawable(getThemedColor("actionBarActionModeDefaultSelector"), 3));
                }
                this.forwardButton.setAlpha(this.cantForwardMessagesCount == 0 ? 1.0f : 0.5f);
            }
        }
        if (item != null) {
            int i8 = this.canSaveMusicCount;
            item.setVisibility((((i8 <= 0 || this.canSaveDocumentsCount != 0) && (i8 != 0 || this.canSaveDocumentsCount <= 0)) || this.cantSaveMessagesCount != 0) ? 8 : 0);
            if (this.canSaveMusicCount > 0) {
                i3 = 2131628137;
                str = "SaveToMusic";
            } else {
                i3 = 2131628130;
                str = "SaveToDownloads";
            }
            item.setContentDescription(LocaleController.getString(str, i3));
        }
        int visibility = item2.getVisibility();
        int visibility2 = item3.getVisibility();
        item2.setVisibility((z4 || this.selectedMessagesCanCopyIds[0].size() + this.selectedMessagesCanCopyIds[1].size() == 0) ? 8 : 0);
        item3.setVisibility((!getMediaDataController().canAddStickerToFavorites() || this.selectedMessagesCanStarIds[0].size() + this.selectedMessagesCanStarIds[1].size() != size) ? 8 : 0);
        int visibility3 = item2.getVisibility();
        int visibility4 = item3.getVisibility();
        this.actionBar.createActionMode().getItem(12).setVisibility(this.cantDeleteMessagesCount == 0 ? 0 : 8);
        this.hasUnfavedSelected = false;
        int i9 = 0;
        while (true) {
            if (i9 >= 2) {
                break;
            }
            int i10 = 0;
            while (true) {
                if (i10 >= this.selectedMessagesCanStarIds[i9].size()) {
                    break;
                } else if (!getMediaDataController().isStickerInFavorites(this.selectedMessagesCanStarIds[i9].valueAt(i10).getDocument())) {
                    this.hasUnfavedSelected = true;
                    break;
                } else {
                    i10++;
                }
            }
            if (this.hasUnfavedSelected) {
                break;
            }
            i9++;
        }
        item3.setIcon(this.hasUnfavedSelected ? 2131165728 : 2131165971);
        int i11 = (this.canEditMessagesCount == 1 && size == 1) ? 0 : 8;
        if (this.replyButton != null) {
            BlurredFrameLayout blurredFrameLayout = this.bottomOverlayChat;
            boolean z5 = (blurredFrameLayout == null || blurredFrameLayout.getVisibility() != 0) && ((tLRPC$Chat = this.currentChat) == null || ((!ChatObject.isNotInChat(tLRPC$Chat) || isThreadChat()) && ((!ChatObject.isChannel(this.currentChat) || ChatObject.canPost(this.currentChat) || this.currentChat.megagroup) && ChatObject.canSendMessages(this.currentChat))));
            if (this.chatMode == 1 || !z5 || !(this.selectedMessagesIds[0].size() == 0 || this.selectedMessagesIds[1].size() == 0)) {
                i2 = 8;
            } else if (size == 1) {
                i2 = 0;
            } else {
                int i12 = 0;
                i2 = 0;
                long j = 0;
                for (i = 2; i12 < i; i = 2) {
                    int size2 = this.selectedMessagesIds[i12].size();
                    int i13 = 0;
                    while (i13 < size2) {
                        long groupId = this.selectedMessagesIds[i12].valueAt(i13).getGroupId();
                        if (groupId == 0 || !(j == 0 || j == groupId)) {
                            i2 = 8;
                            break;
                        } else {
                            i13++;
                            j = groupId;
                        }
                    }
                    if (i2 == 8) {
                        break;
                    }
                    i12++;
                }
            }
            if (this.threadMessageObjects != null && i2 == 0) {
                int size3 = this.selectedMessagesIds[0].size();
                for (int i14 = 0; i14 < size3; i14++) {
                    if (this.threadMessageObjects.contains(this.selectedMessagesIds[0].valueAt(i14))) {
                        i2 = 8;
                    }
                }
            }
            if (this.replyButton.getVisibility() != i2) {
                AnimatorSet animatorSet2 = this.replyButtonAnimation;
                if (animatorSet2 != null) {
                    animatorSet2.cancel();
                }
                AnimatorSet animatorSet3 = new AnimatorSet();
                this.replyButtonAnimation = animatorSet3;
                if (i2 == 0) {
                    this.replyButton.setVisibility(i2);
                    this.replyButtonAnimation.playTogether(ObjectAnimator.ofFloat(this.replyButton, View.ALPHA, 1.0f), ObjectAnimator.ofFloat(this.replyButton, View.SCALE_Y, 1.0f));
                } else {
                    animatorSet3.playTogether(ObjectAnimator.ofFloat(this.replyButton, View.ALPHA, 0.0f), ObjectAnimator.ofFloat(this.replyButton, View.SCALE_Y, 0.0f));
                }
                this.replyButtonAnimation.setDuration(100L);
                this.replyButtonAnimation.addListener(new AnonymousClass78(i2));
                this.replyButtonAnimation.start();
            }
        }
        if (item4 == null) {
            return;
        }
        if (visibility != visibility3 || visibility2 != visibility4) {
            if (i11 == 0) {
                item4.setAlpha(1.0f);
                item4.setScaleX(1.0f);
            } else {
                item4.setAlpha(0.0f);
                item4.setScaleX(0.0f);
            }
            item4.setVisibility(i11);
        } else if (item4.getVisibility() != i11) {
            AnimatorSet animatorSet4 = this.editButtonAnimation;
            if (animatorSet4 != null) {
                animatorSet4.cancel();
            }
            this.editButtonAnimation = new AnimatorSet();
            item4.setPivotX(AndroidUtilities.dp(54.0f));
            item4.setPivotX(AndroidUtilities.dp(54.0f));
            if (i11 == 0) {
                item4.setVisibility(i11);
                this.editButtonAnimation.playTogether(ObjectAnimator.ofFloat(item4, View.ALPHA, 1.0f), ObjectAnimator.ofFloat(item4, View.SCALE_X, 1.0f));
            } else {
                this.editButtonAnimation.playTogether(ObjectAnimator.ofFloat(item4, View.ALPHA, 0.0f), ObjectAnimator.ofFloat(item4, View.SCALE_X, 0.0f));
            }
            this.editButtonAnimation.setDuration(100L);
            this.editButtonAnimation.addListener(new AnonymousClass79(i11, item4));
            this.editButtonAnimation.start();
        }
    }

    /* renamed from: org.telegram.ui.ChatActivity$77 */
    /* loaded from: classes3.dex */
    public class AnonymousClass77 extends AnimatorListenerAdapter {
        AnonymousClass77() {
            ChatActivity.this = r1;
        }

        @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
        public void onAnimationEnd(Animator animator) {
            ChatActivity.this.forwardButtonAnimation = null;
        }
    }

    /* renamed from: org.telegram.ui.ChatActivity$78 */
    /* loaded from: classes3.dex */
    public class AnonymousClass78 extends AnimatorListenerAdapter {
        final /* synthetic */ int val$newVisibilityFinal;

        AnonymousClass78(int i) {
            ChatActivity.this = r1;
            this.val$newVisibilityFinal = i;
        }

        @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
        public void onAnimationEnd(Animator animator) {
            if (ChatActivity.this.replyButtonAnimation == null || !ChatActivity.this.replyButtonAnimation.equals(animator) || this.val$newVisibilityFinal != 8) {
                return;
            }
            ChatActivity.this.replyButton.setVisibility(8);
        }

        @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
        public void onAnimationCancel(Animator animator) {
            if (ChatActivity.this.replyButtonAnimation == null || !ChatActivity.this.replyButtonAnimation.equals(animator)) {
                return;
            }
            ChatActivity.this.replyButtonAnimation = null;
        }
    }

    /* renamed from: org.telegram.ui.ChatActivity$79 */
    /* loaded from: classes3.dex */
    public class AnonymousClass79 extends AnimatorListenerAdapter {
        final /* synthetic */ ActionBarMenuItem val$editItem;
        final /* synthetic */ int val$newEditVisibility;

        AnonymousClass79(int i, ActionBarMenuItem actionBarMenuItem) {
            ChatActivity.this = r1;
            this.val$newEditVisibility = i;
            this.val$editItem = actionBarMenuItem;
        }

        @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
        public void onAnimationEnd(Animator animator) {
            if (ChatActivity.this.editButtonAnimation == null || !ChatActivity.this.editButtonAnimation.equals(animator) || this.val$newEditVisibility != 8) {
                return;
            }
            this.val$editItem.setVisibility(8);
        }

        @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
        public void onAnimationCancel(Animator animator) {
            if (ChatActivity.this.editButtonAnimation == null || !ChatActivity.this.editButtonAnimation.equals(animator)) {
                return;
            }
            ChatActivity.this.editButtonAnimation = null;
        }
    }

    public void processRowSelect(View view, boolean z, float f, float f2) {
        MessageObject messageObject;
        if (view instanceof ChatMessageCell) {
            ChatMessageCell chatMessageCell = (ChatMessageCell) view;
            messageObject = chatMessageCell.getMessageObject();
            chatMessageCell.setLastTouchCoords(f, f2);
        } else {
            messageObject = view instanceof ChatActionCell ? ((ChatActionCell) view).getMessageObject() : null;
        }
        int messageType = getMessageType(messageObject);
        if (messageType < 2 || messageType == 20) {
            return;
        }
        addToSelectedMessages(messageObject, z);
        updateActionModeTitle();
        updateVisibleRows();
    }

    public void updateActionModeTitle() {
        if (this.reportType < 0) {
            if (!this.actionBar.isActionModeShowed()) {
                return;
            }
            if (this.selectedMessagesIds[0].size() == 0 && this.selectedMessagesIds[1].size() == 0) {
                return;
            }
            this.selectedMessagesCountTextView.setNumber(this.selectedMessagesIds[0].size() + this.selectedMessagesIds[1].size(), true);
            return;
        }
        int size = this.selectedMessagesIds[0].size() + this.selectedMessagesIds[1].size();
        if (size == 0) {
            this.bottomOverlayChatText.setText(LocaleController.getString("ReportMessages", 2131628005));
            this.bottomOverlayChatText.setAlpha(0.5f);
            this.bottomOverlayChatText.setEnabled(false);
            return;
        }
        this.bottomOverlayChatText.setText(LocaleController.formatString("ReportMessagesCount", 2131628006, LocaleController.formatPluralString("messages", size, new Object[0])).toUpperCase());
        this.bottomOverlayChatText.setAlpha(1.0f);
        this.bottomOverlayChatText.setEnabled(true);
    }

    private void updateTitle() {
        if (this.avatarContainer == null) {
            return;
        }
        if (isThreadChat()) {
            if (this.isComments) {
                if (this.threadMessageObject.hasReplies()) {
                    this.avatarContainer.setTitle(LocaleController.formatPluralString("Comments", this.threadMessageObject.getRepliesCount(), new Object[0]));
                } else {
                    this.avatarContainer.setTitle(LocaleController.getString("CommentsTitle", 2131625221));
                }
            } else {
                this.avatarContainer.setTitle(LocaleController.formatPluralString("Replies", this.threadMessageObject.getRepliesCount(), new Object[0]));
            }
        } else if (UserObject.isReplyUser(this.currentUser)) {
            this.avatarContainer.setTitle(LocaleController.getString("RepliesTitle", 2131627982));
        } else {
            int i = this.chatMode;
            if (i == 1) {
                if (UserObject.isUserSelf(this.currentUser)) {
                    this.avatarContainer.setTitle(LocaleController.getString("Reminders", 2131627950));
                } else {
                    this.avatarContainer.setTitle(LocaleController.getString("ScheduledMessages", 2131628147));
                }
            } else if (i == 2) {
                this.avatarContainer.setTitle(LocaleController.formatPluralString("PinnedMessagesCount", getPinnedMessagesCount(), new Object[0]));
            } else {
                TLRPC$Chat tLRPC$Chat = this.currentChat;
                if (tLRPC$Chat != null) {
                    this.avatarContainer.setTitle(tLRPC$Chat.title, tLRPC$Chat.scam, tLRPC$Chat.fake, tLRPC$Chat.verified, false);
                } else {
                    TLRPC$User tLRPC$User = this.currentUser;
                    if (tLRPC$User != null) {
                        if (tLRPC$User.self) {
                            this.avatarContainer.setTitle(LocaleController.getString("SavedMessages", 2131628140));
                        } else if (!MessagesController.isSupportUser(tLRPC$User) && getContactsController().contactsDict.get(Long.valueOf(this.currentUser.id)) == null && (getContactsController().contactsDict.size() != 0 || !getContactsController().isLoadingContacts())) {
                            if (!TextUtils.isEmpty(this.currentUser.phone)) {
                                ChatAvatarContainer chatAvatarContainer = this.avatarContainer;
                                PhoneFormat phoneFormat = PhoneFormat.getInstance();
                                chatAvatarContainer.setTitle(phoneFormat.format("+" + this.currentUser.phone));
                            } else {
                                ChatAvatarContainer chatAvatarContainer2 = this.avatarContainer;
                                String userName = UserObject.getUserName(this.currentUser);
                                TLRPC$User tLRPC$User2 = this.currentUser;
                                chatAvatarContainer2.setTitle(userName, tLRPC$User2.scam, tLRPC$User2.fake, tLRPC$User2.verified, getMessagesController().isPremiumUser(this.currentUser));
                            }
                        } else {
                            ChatAvatarContainer chatAvatarContainer3 = this.avatarContainer;
                            String userName2 = UserObject.getUserName(this.currentUser);
                            TLRPC$User tLRPC$User3 = this.currentUser;
                            chatAvatarContainer3.setTitle(userName2, tLRPC$User3.scam, tLRPC$User3.fake, tLRPC$User3.verified, getMessagesController().isPremiumUser(this.currentUser));
                        }
                    }
                }
            }
        }
        setParentActivityTitle(this.avatarContainer.getTitleTextView().getText());
    }

    public int getPinnedMessagesCount() {
        return Math.max(this.loadedPinnedMessagesCount, this.totalPinnedMessagesCount);
    }

    private void updateBotButtons() {
        TLRPC$User tLRPC$User;
        boolean z;
        if (this.headerItem == null || (tLRPC$User = this.currentUser) == null || this.currentEncryptedChat != null || !tLRPC$User.bot) {
            return;
        }
        boolean z2 = false;
        if (this.botInfo.size() != 0) {
            boolean z3 = false;
            z = false;
            for (int i = 0; i < this.botInfo.size(); i++) {
                TLRPC$BotInfo valueAt = this.botInfo.valueAt(i);
                for (int i2 = 0; i2 < valueAt.commands.size(); i2++) {
                    TLRPC$TL_botCommand tLRPC$TL_botCommand = valueAt.commands.get(i2);
                    if (tLRPC$TL_botCommand.command.toLowerCase().equals("help")) {
                        z3 = true;
                    } else if (tLRPC$TL_botCommand.command.toLowerCase().equals("settings")) {
                        z = true;
                    }
                    if (!z || !z3) {
                    }
                }
            }
            z2 = z3;
        } else {
            z = false;
        }
        if (z2) {
            this.headerItem.showSubItem(30);
        } else {
            this.headerItem.hideSubItem(30);
        }
        if (z) {
            this.headerItem.showSubItem(31);
        } else {
            this.headerItem.hideSubItem(31);
        }
    }

    public void updateTitleIcons() {
        updateTitleIcons(false);
    }

    private void updateTitleIcons(boolean z) {
        ActionBarMenuSubItem actionBarMenuSubItem;
        if (this.avatarContainer == null || this.chatMode != 0) {
            return;
        }
        boolean isDialogMuted = getMessagesController().isDialogMuted(this.dialog_id);
        if (z) {
            isDialogMuted = !isDialogMuted;
        }
        Drawable drawable = null;
        Drawable themedDrawable = (UserObject.isReplyUser(this.currentUser) || isThreadChat() || !isDialogMuted) ? null : getThemedDrawable("drawableMuteIcon");
        ChatAvatarContainer chatAvatarContainer = this.avatarContainer;
        if (this.currentEncryptedChat != null) {
            drawable = getThemedDrawable("drawableLockIcon");
        }
        chatAvatarContainer.setTitleIcons(drawable, themedDrawable);
        if (!z && (actionBarMenuSubItem = this.muteItem) != null) {
            if (isDialogMuted) {
                actionBarMenuSubItem.getRightIcon().setVisibility(8);
                this.muteItem.setTextAndIcon(LocaleController.getString("Unmute", 2131628811), 2131165820);
            } else {
                actionBarMenuSubItem.getRightIcon().setVisibility(0);
                if (getMessagesController().isDialogNotificationsSoundEnabled(this.dialog_id)) {
                    this.muteItem.setTextAndIcon(LocaleController.getString("Mute", 2131626797), 2131165972);
                } else {
                    this.muteItem.setTextAndIcon(LocaleController.getString("Mute", 2131626797), 2131165945);
                }
            }
        }
        ChatNotificationsPopupWrapper chatNotificationsPopupWrapper = this.chatNotificationsPopupWrapper;
        if (chatNotificationsPopupWrapper == null) {
            return;
        }
        chatNotificationsPopupWrapper.lambda$update$10(this.dialog_id);
    }

    private void checkAndUpdateAvatar() {
        if (this.currentUser != null) {
            TLRPC$User user = getMessagesController().getUser(Long.valueOf(this.currentUser.id));
            if (user == null) {
                return;
            }
            this.currentUser = user;
        } else if (this.currentChat != null) {
            TLRPC$Chat chat = getMessagesController().getChat(Long.valueOf(this.currentChat.id));
            if (chat == null) {
                return;
            }
            this.currentChat = chat;
        }
        ChatAvatarContainer chatAvatarContainer = this.avatarContainer;
        if (chatAvatarContainer != null) {
            chatAvatarContainer.checkAndUpdateAvatar();
        }
    }

    public void openVideoEditor(String str, String str2) {
        if (getParentActivity() != null) {
            Bitmap createVideoThumbnail = SendMessagesHelper.createVideoThumbnail(str, 1);
            PhotoViewer.getInstance().setParentActivity(getParentActivity(), this.themeDelegate);
            ArrayList<Object> arrayList = new ArrayList<>();
            MediaController.PhotoEntry photoEntry = new MediaController.PhotoEntry(0, 0, 0L, str, 0, true, 0, 0, 0L);
            photoEntry.caption = str2;
            arrayList.add(photoEntry);
            PhotoViewer.getInstance().openPhotoForSelect(arrayList, 0, 0, false, new AnonymousClass80(createVideoThumbnail, arrayList), this);
            return;
        }
        fillEditingMediaWithCaption(str2, null);
        SendMessagesHelper.prepareSendingVideo(getAccountInstance(), str, null, this.dialog_id, this.replyingMessageObject, getThreadMessage(), null, null, 0, this.editingMessageObject, true, 0, false);
        afterMessageSend();
    }

    /* renamed from: org.telegram.ui.ChatActivity$80 */
    /* loaded from: classes3.dex */
    public class AnonymousClass80 extends PhotoViewer.EmptyPhotoViewerProvider {
        final /* synthetic */ ArrayList val$cameraPhoto;
        final /* synthetic */ Bitmap val$thumb;

        @Override // org.telegram.ui.PhotoViewer.EmptyPhotoViewerProvider, org.telegram.ui.PhotoViewer.PhotoViewerProvider
        public boolean canScrollAway() {
            return false;
        }

        AnonymousClass80(Bitmap bitmap, ArrayList arrayList) {
            ChatActivity.this = r1;
            this.val$thumb = bitmap;
            this.val$cameraPhoto = arrayList;
        }

        @Override // org.telegram.ui.PhotoViewer.EmptyPhotoViewerProvider, org.telegram.ui.PhotoViewer.PhotoViewerProvider
        public ImageReceiver.BitmapHolder getThumbForPhoto(MessageObject messageObject, TLRPC$FileLocation tLRPC$FileLocation, int i) {
            return new ImageReceiver.BitmapHolder(this.val$thumb, (String) null, 0);
        }

        @Override // org.telegram.ui.PhotoViewer.EmptyPhotoViewerProvider, org.telegram.ui.PhotoViewer.PhotoViewerProvider
        public void sendButtonPressed(int i, VideoEditedInfo videoEditedInfo, boolean z, int i2, boolean z2) {
            ChatActivity.this.sendMedia((MediaController.PhotoEntry) this.val$cameraPhoto.get(0), videoEditedInfo, z, i2, z2);
        }
    }

    public boolean openPhotosEditor(ArrayList<SendMessagesHelper.SendingMediaInfo> arrayList, CharSequence charSequence) {
        String str;
        int i;
        ArrayList<MediaController.PhotoEntry> arrayList2 = new ArrayList<>();
        int i2 = 0;
        while (true) {
            String str2 = null;
            if (i2 >= arrayList.size()) {
                break;
            }
            SendMessagesHelper.SendingMediaInfo sendingMediaInfo = arrayList.get(i2);
            String str3 = sendingMediaInfo.path;
            if (str3 != null) {
                str = str3;
            } else {
                if (sendingMediaInfo.uri != null) {
                    try {
                        File generatePicturePath = AndroidUtilities.generatePicturePath(isSecretChat(), "");
                        InputStream openInputStream = ApplicationLoader.applicationContext.getContentResolver().openInputStream(sendingMediaInfo.uri);
                        FileOutputStream fileOutputStream = new FileOutputStream(generatePicturePath);
                        byte[] bArr = new byte[8192];
                        while (true) {
                            int read = openInputStream.read(bArr);
                            if (read <= 0) {
                                break;
                            }
                            fileOutputStream.write(bArr, 0, read);
                            fileOutputStream.flush();
                        }
                        openInputStream.close();
                        fileOutputStream.close();
                        str2 = generatePicturePath.getAbsolutePath();
                    } catch (Exception e) {
                        FileLog.e(e);
                    }
                }
                str = str2;
            }
            if (str != null) {
                try {
                    int attributeInt = new ExifInterface(str).getAttributeInt("Orientation", 1);
                    i = attributeInt != 3 ? attributeInt != 6 ? attributeInt != 8 ? 0 : 270 : 90 : 180;
                } catch (Exception e2) {
                    FileLog.e(e2);
                    i = 0;
                }
                MediaController.PhotoEntry photoEntry = new MediaController.PhotoEntry(0, 0, 0L, str, i, sendingMediaInfo.isVideo, 0, 0, 0L);
                if (i2 == arrayList.size() - 1 && charSequence != null) {
                    photoEntry.caption = charSequence;
                }
                arrayList2.add(photoEntry);
            }
            i2++;
        }
        if (arrayList2.isEmpty()) {
            return false;
        }
        if (getParentActivity() != null) {
            boolean[] zArr = new boolean[arrayList2.size()];
            Arrays.fill(zArr, true);
            PhotoViewer.getInstance().setParentActivity(getParentActivity(), this.themeDelegate);
            PhotoViewer.getInstance().openPhotoForSelect(new ArrayList<>(arrayList2), arrayList2.size() - 1, 0, false, new AnonymousClass81(arrayList2, zArr), this);
        } else {
            fillEditingMediaWithCaption(charSequence, null);
            sendPhotosGroup(arrayList2, false, 0, false);
            afterMessageSend();
        }
        return true;
    }

    /* renamed from: org.telegram.ui.ChatActivity$81 */
    /* loaded from: classes3.dex */
    public class AnonymousClass81 extends PhotoViewer.EmptyPhotoViewerProvider {
        final /* synthetic */ boolean[] val$checked;
        final /* synthetic */ ArrayList val$entries;

        @Override // org.telegram.ui.PhotoViewer.EmptyPhotoViewerProvider, org.telegram.ui.PhotoViewer.PhotoViewerProvider
        public boolean canScrollAway() {
            return false;
        }

        @Override // org.telegram.ui.PhotoViewer.EmptyPhotoViewerProvider, org.telegram.ui.PhotoViewer.PhotoViewerProvider
        public ImageReceiver.BitmapHolder getThumbForPhoto(MessageObject messageObject, TLRPC$FileLocation tLRPC$FileLocation, int i) {
            return null;
        }

        @Override // org.telegram.ui.PhotoViewer.EmptyPhotoViewerProvider, org.telegram.ui.PhotoViewer.PhotoViewerProvider
        public int setPhotoChecked(int i, VideoEditedInfo videoEditedInfo) {
            return i;
        }

        AnonymousClass81(ArrayList arrayList, boolean[] zArr) {
            ChatActivity.this = r1;
            this.val$entries = arrayList;
            this.val$checked = zArr;
        }

        @Override // org.telegram.ui.PhotoViewer.EmptyPhotoViewerProvider, org.telegram.ui.PhotoViewer.PhotoViewerProvider
        public void sendButtonPressed(int i, VideoEditedInfo videoEditedInfo, boolean z, int i2, boolean z2) {
            for (int size = this.val$entries.size() - 1; size >= 0; size--) {
                if (!this.val$checked[size]) {
                    this.val$entries.remove(size);
                }
            }
            ChatActivity.this.sendPhotosGroup(this.val$entries, z, i2, z2);
        }

        @Override // org.telegram.ui.PhotoViewer.EmptyPhotoViewerProvider, org.telegram.ui.PhotoViewer.PhotoViewerProvider
        public boolean isPhotoChecked(int i) {
            return this.val$checked[i];
        }
    }

    public void sendPhotosGroup(ArrayList<MediaController.PhotoEntry> arrayList, boolean z, int i, boolean z2) {
        String str;
        if (!arrayList.isEmpty()) {
            ArrayList arrayList2 = new ArrayList();
            Iterator<MediaController.PhotoEntry> it = arrayList.iterator();
            while (it.hasNext()) {
                MediaController.PhotoEntry next = it.next();
                SendMessagesHelper.SendingMediaInfo sendingMediaInfo = new SendMessagesHelper.SendingMediaInfo();
                boolean z3 = next.isVideo;
                if (!z3 && (str = next.imagePath) != null) {
                    sendingMediaInfo.path = str;
                } else {
                    String str2 = next.path;
                    if (str2 != null) {
                        sendingMediaInfo.path = str2;
                    }
                }
                sendingMediaInfo.thumbPath = next.thumbPath;
                sendingMediaInfo.isVideo = z3;
                CharSequence charSequence = next.caption;
                sendingMediaInfo.caption = charSequence != null ? charSequence.toString() : null;
                sendingMediaInfo.entities = next.entities;
                sendingMediaInfo.masks = next.stickers;
                sendingMediaInfo.ttl = next.ttl;
                sendingMediaInfo.videoEditedInfo = next.editedInfo;
                sendingMediaInfo.canDeleteAfter = next.canDeleteAfter;
                arrayList2.add(sendingMediaInfo);
                next.reset();
            }
            fillEditingMediaWithCaption(((SendMessagesHelper.SendingMediaInfo) arrayList2.get(0)).caption, ((SendMessagesHelper.SendingMediaInfo) arrayList2.get(0)).entities);
            SendMessagesHelper.prepareSendingMedia(getAccountInstance(), arrayList2, this.dialog_id, null, getThreadMessage(), null, z2, true, null, z, i);
            afterMessageSend();
            this.chatActivityEnterView.setFieldText("");
        }
        if (i != 0) {
            if (this.scheduledMessagesCount == -1) {
                this.scheduledMessagesCount = 0;
            }
            this.scheduledMessagesCount += arrayList.size();
            updateScheduledInterface(true);
        }
    }

    private void openEditingMessageInPhotoEditor() {
        MessageObject messageObject = this.editingMessageObject;
        if (messageObject == null || !messageObject.canEditMedia() || this.editingMessageObjectReqId != 0) {
            return;
        }
        if (!this.editingMessageObject.isPhoto() && !this.editingMessageObject.isVideo()) {
            return;
        }
        MessageObject messageObject2 = this.editingMessageObject;
        File file = null;
        if (!TextUtils.isEmpty(messageObject2.messageOwner.attachPath)) {
            File file2 = new File(messageObject2.messageOwner.attachPath);
            if (file2.exists()) {
                file = file2;
            }
        }
        if (file == null) {
            file = FileLoader.getInstance(this.currentAccount).getPathToMessage(messageObject2.messageOwner);
        }
        if (!file.exists()) {
            return;
        }
        PhotoViewer.getInstance().setParentActivity(getParentActivity(), this.themeDelegate);
        ArrayList<Object> arrayList = new ArrayList<>();
        MediaController.PhotoEntry photoEntry = new MediaController.PhotoEntry(0, 0, 0L, file.getAbsolutePath(), 0, messageObject2.isVideo(), 0, 0, 0L);
        photoEntry.caption = this.chatActivityEnterView.getFieldText();
        arrayList.add(photoEntry);
        PhotoViewer.getInstance().openPhotoForSelect(arrayList, 0, 2, false, new AnonymousClass82(messageObject2, photoEntry), this);
    }

    /* renamed from: org.telegram.ui.ChatActivity$82 */
    /* loaded from: classes3.dex */
    public class AnonymousClass82 extends PhotoViewer.EmptyPhotoViewerProvider {
        final /* synthetic */ MediaController.PhotoEntry val$entry;
        final /* synthetic */ MessageObject val$object;

        @Override // org.telegram.ui.PhotoViewer.EmptyPhotoViewerProvider, org.telegram.ui.PhotoViewer.PhotoViewerProvider
        public boolean allowSendingSubmenu() {
            return false;
        }

        @Override // org.telegram.ui.PhotoViewer.EmptyPhotoViewerProvider, org.telegram.ui.PhotoViewer.PhotoViewerProvider
        public boolean canCaptureMorePhotos() {
            return false;
        }

        AnonymousClass82(MessageObject messageObject, MediaController.PhotoEntry photoEntry) {
            ChatActivity.this = r1;
            this.val$object = messageObject;
            this.val$entry = photoEntry;
        }

        @Override // org.telegram.ui.PhotoViewer.EmptyPhotoViewerProvider, org.telegram.ui.PhotoViewer.PhotoViewerProvider
        public PhotoViewer.PlaceProviderObject getPlaceForPhoto(MessageObject messageObject, TLRPC$FileLocation tLRPC$FileLocation, int i, boolean z) {
            return ChatActivity.this.getPlaceForPhoto(this.val$object, null, z, true);
        }

        @Override // org.telegram.ui.PhotoViewer.EmptyPhotoViewerProvider, org.telegram.ui.PhotoViewer.PhotoViewerProvider
        public void sendButtonPressed(int i, VideoEditedInfo videoEditedInfo, boolean z, int i2, boolean z2) {
            if (ChatActivity.this.editingMessageObject != this.val$object) {
                return;
            }
            MediaController.PhotoEntry photoEntry = this.val$entry;
            if (photoEntry.isCropped || photoEntry.isPainted || photoEntry.isFiltered || videoEditedInfo != null) {
                ChatActivity.this.sendMedia(photoEntry, videoEditedInfo, z, i2, z2);
            } else {
                ChatActivity.this.chatActivityEnterView.doneEditingMessage();
            }
        }

        @Override // org.telegram.ui.PhotoViewer.EmptyPhotoViewerProvider, org.telegram.ui.PhotoViewer.PhotoViewerProvider
        public MessageObject getEditingMessageObject() {
            MessageObject messageObject = ChatActivity.this.editingMessageObject;
            MessageObject messageObject2 = this.val$object;
            if (messageObject == messageObject2) {
                return messageObject2;
            }
            return null;
        }

        @Override // org.telegram.ui.PhotoViewer.EmptyPhotoViewerProvider, org.telegram.ui.PhotoViewer.PhotoViewerProvider
        public void onCaptionChanged(CharSequence charSequence) {
            if (ChatActivity.this.editingMessageObject == this.val$object) {
                ChatActivity.this.chatActivityEnterView.setFieldText(charSequence, true);
            }
        }

        @Override // org.telegram.ui.PhotoViewer.EmptyPhotoViewerProvider, org.telegram.ui.PhotoViewer.PhotoViewerProvider
        public boolean closeKeyboard() {
            ChatActivity chatActivity = ChatActivity.this;
            if (chatActivity.chatActivityEnterView == null || !chatActivity.isKeyboardVisible()) {
                return false;
            }
            ChatActivity.this.chatActivityEnterView.closeKeyboard();
            return true;
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:64:0x0108 A[LOOP:0: B:3:0x000c->B:64:0x0108, LOOP_END] */
    /* JADX WARN: Removed duplicated region for block: B:66:0x0085 A[SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public PhotoViewer.PlaceProviderObject getPlaceForPhoto(MessageObject messageObject, TLRPC$FileLocation tLRPC$FileLocation, boolean z, boolean z2) {
        ImageReceiver imageReceiver;
        TLRPC$Chat tLRPC$Chat;
        FrameLayout frameLayout;
        ChatActionCell chatActionCell;
        MessageObject messageObject2;
        ChatMessageCell chatMessageCell;
        MessageObject messageObject3;
        int childCount = this.chatListView.getChildCount();
        int i = 0;
        int i2 = 0;
        while (true) {
            ClippingImageView clippingImageView = null;
            if (i2 < childCount) {
                View childAt = this.chatListView.getChildAt(i2);
                if (childAt instanceof ChatMessageCell) {
                    if (messageObject != null && (messageObject3 = (chatMessageCell = (ChatMessageCell) childAt).getMessageObject()) != null && messageObject3.getId() == messageObject.getId()) {
                        imageReceiver = chatMessageCell.getPhotoImage();
                        if (imageReceiver == null) {
                            if (z2 && childAt.getY() + imageReceiver.getImageY2() < this.chatListViewPaddingTop - AndroidUtilities.dp(4.0f)) {
                                return null;
                            }
                            int[] iArr = new int[2];
                            childAt.getLocationInWindow(iArr);
                            PhotoViewer.PlaceProviderObject placeProviderObject = new PhotoViewer.PlaceProviderObject();
                            placeProviderObject.viewX = iArr[0];
                            int i3 = iArr[1];
                            if (Build.VERSION.SDK_INT < 21) {
                                i = AndroidUtilities.statusBarHeight;
                            }
                            placeProviderObject.viewY = i3 - i;
                            placeProviderObject.parentView = this.chatListView;
                            if (!SharedConfig.smoothKeyboard && (frameLayout = this.pagedownButton) != null && frameLayout.getTag() != null && (childAt instanceof ChatMessageCell)) {
                                clippingImageView = this.animatingImageView;
                            }
                            placeProviderObject.animatingImageView = clippingImageView;
                            placeProviderObject.imageReceiver = imageReceiver;
                            if (z) {
                                placeProviderObject.thumb = imageReceiver.getBitmapSafe();
                            }
                            placeProviderObject.radius = imageReceiver.getRoundRadius();
                            if ((childAt instanceof ChatActionCell) && (tLRPC$Chat = this.currentChat) != null) {
                                placeProviderObject.dialogId = -tLRPC$Chat.id;
                            }
                            placeProviderObject.clipTopAddition = (int) ((this.chatListViewPaddingTop - this.chatListViewPaddingVisibleOffset) - AndroidUtilities.dp(4.0f));
                            placeProviderObject.clipBottomAddition = this.blurredViewBottomOffset;
                            return placeProviderObject;
                        }
                        i2++;
                    }
                    imageReceiver = null;
                    if (imageReceiver == null) {
                    }
                } else {
                    if ((childAt instanceof ChatActionCell) && (messageObject2 = (chatActionCell = (ChatActionCell) childAt).getMessageObject()) != null) {
                        if (messageObject != null) {
                            if (messageObject2.getId() == messageObject.getId()) {
                                imageReceiver = chatActionCell.getPhotoImage();
                                if (imageReceiver == null) {
                                }
                            }
                        } else if (tLRPC$FileLocation != null && messageObject2.photoThumbs != null) {
                            for (int i4 = 0; i4 < messageObject2.photoThumbs.size(); i4++) {
                                TLRPC$FileLocation tLRPC$FileLocation2 = messageObject2.photoThumbs.get(i4).location;
                                if (tLRPC$FileLocation2 != null && tLRPC$FileLocation2.volume_id == tLRPC$FileLocation.volume_id && tLRPC$FileLocation2.local_id == tLRPC$FileLocation.local_id) {
                                    imageReceiver = chatActionCell.getPhotoImage();
                                    break;
                                }
                            }
                        }
                    }
                    imageReceiver = null;
                    if (imageReceiver == null) {
                    }
                }
            } else {
                return null;
            }
        }
    }

    private void showAttachmentError() {
        if (getParentActivity() == null) {
            return;
        }
        BulletinFactory.of(this).createErrorBulletin(LocaleController.getString("UnsupportedAttachment", 2131628826), this.themeDelegate).show();
    }

    public void fillEditingMediaWithCaption(CharSequence charSequence, ArrayList<TLRPC$MessageEntity> arrayList) {
        if (this.editingMessageObject == null) {
            return;
        }
        if (!TextUtils.isEmpty(charSequence)) {
            MessageObject messageObject = this.editingMessageObject;
            messageObject.editingMessage = charSequence;
            messageObject.editingMessageEntities = arrayList;
            return;
        }
        ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        if (chatActivityEnterView == null) {
            return;
        }
        this.editingMessageObject.editingMessage = chatActivityEnterView.getFieldText();
        MessageObject messageObject2 = this.editingMessageObject;
        if (messageObject2.editingMessage != null || TextUtils.isEmpty(messageObject2.messageOwner.message)) {
            return;
        }
        this.editingMessageObject.editingMessage = "";
    }

    /* JADX WARN: Removed duplicated region for block: B:17:0x0045  */
    /* JADX WARN: Removed duplicated region for block: B:18:0x0048  */
    /* JADX WARN: Removed duplicated region for block: B:28:0x0066  */
    /* JADX WARN: Removed duplicated region for block: B:29:0x0083  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void sendUriAsDocument(Uri uri) {
        Uri parse;
        String str;
        String str2;
        if (uri == null) {
            return;
        }
        String uri2 = uri.toString();
        boolean z = true;
        if (uri2.contains("com.google.android.apps.photos.contentprovider")) {
            try {
                String str3 = uri2.split("/1/")[1];
                int indexOf = str3.indexOf("/ACTUAL");
                parse = indexOf != -1 ? Uri.parse(URLDecoder.decode(str3.substring(0, indexOf), "UTF-8")) : uri;
            } catch (Exception e) {
                FileLog.e(e);
            }
            String path = AndroidUtilities.getPath(parse);
            if (BuildVars.NO_SCOPED_STORAGE) {
                str2 = path;
                str = str2;
            } else {
                if (path == null) {
                    String uri3 = parse.toString();
                    String copyFileToCache = MediaController.copyFileToCache(parse, "file");
                    if (copyFileToCache == null) {
                        showAttachmentError();
                        return;
                    } else {
                        str = uri3;
                        str2 = copyFileToCache;
                    }
                } else {
                    str2 = path;
                    str = str2;
                }
                z = false;
            }
            fillEditingMediaWithCaption(null, null);
            if (!z) {
                SendMessagesHelper.prepareSendingDocument(getAccountInstance(), null, null, parse, null, null, this.dialog_id, this.replyingMessageObject, getThreadMessage(), null, this.editingMessageObject, true, 0);
            } else {
                SendMessagesHelper.prepareSendingDocument(getAccountInstance(), str2, str, null, null, null, this.dialog_id, this.replyingMessageObject, getThreadMessage(), null, this.editingMessageObject, true, 0);
            }
            hideFieldPanel(false);
        }
        parse = uri;
        String path2 = AndroidUtilities.getPath(parse);
        if (BuildVars.NO_SCOPED_STORAGE) {
        }
        fillEditingMediaWithCaption(null, null);
        if (!z) {
        }
        hideFieldPanel(false);
    }

    @Override // org.telegram.ui.ActionBar.BaseFragment
    public void onActivityResultFragment(int i, int i2, Intent intent) {
        String str;
        if (i2 == -1) {
            if (i == 0 || i == 2) {
                createChatAttachView();
                ChatAttachAlert chatAttachAlert = this.chatAttachAlert;
                if (chatAttachAlert != null) {
                    chatAttachAlert.getPhotoLayout().onActivityResultFragment(i, intent, this.currentPicturePath);
                }
                this.currentPicturePath = null;
            } else if (i == 1) {
                if (intent == null || intent.getData() == null) {
                    showAttachmentError();
                } else {
                    Uri data = intent.getData();
                    if (data.toString().contains("video")) {
                        try {
                            str = AndroidUtilities.getPath(data);
                        } catch (Exception e) {
                            FileLog.e(e);
                            str = null;
                        }
                        if (str == null) {
                            showAttachmentError();
                        }
                        if (this.paused) {
                            this.startVideoEdit = str;
                        } else {
                            openVideoEditor(str, null);
                        }
                    } else if (this.editingMessageObject == null && this.chatMode == 1) {
                        AlertsCreator.createScheduleDatePickerDialog(getParentActivity(), this.dialog_id, new ChatActivity$$ExternalSyntheticLambda237(this, data), this.themeDelegate);
                    } else {
                        fillEditingMediaWithCaption(null, null);
                        SendMessagesHelper.prepareSendingPhoto(getAccountInstance(), null, data, this.dialog_id, this.replyingMessageObject, getThreadMessage(), null, null, null, null, 0, this.editingMessageObject, true, 0);
                    }
                    afterMessageSend();
                }
            } else {
                if (i != 21) {
                    return;
                }
                if (intent == null) {
                    showAttachmentError();
                    return;
                }
                if (intent.getData() != null) {
                    sendUriAsDocument(intent.getData());
                } else if (intent.getClipData() != null) {
                    ClipData clipData = intent.getClipData();
                    for (int i3 = 0; i3 < clipData.getItemCount(); i3++) {
                        sendUriAsDocument(clipData.getItemAt(i3).getUri());
                    }
                } else {
                    showAttachmentError();
                }
                ChatAttachAlert chatAttachAlert2 = this.chatAttachAlert;
                if (chatAttachAlert2 != null) {
                    chatAttachAlert2.dismiss();
                }
                afterMessageSend();
            }
        }
    }

    public /* synthetic */ void lambda$onActivityResultFragment$115(Uri uri, boolean z, int i) {
        fillEditingMediaWithCaption(null, null);
        SendMessagesHelper.prepareSendingPhoto(getAccountInstance(), null, uri, this.dialog_id, this.replyingMessageObject, getThreadMessage(), null, null, null, null, 0, this.editingMessageObject, z, i);
    }

    @Override // org.telegram.ui.ActionBar.BaseFragment
    public void saveSelfArgs(Bundle bundle) {
        String str = this.currentPicturePath;
        if (str != null) {
            bundle.putString("path", str);
        }
    }

    public void restoreSelfArgs(Bundle bundle) {
        this.currentPicturePath = bundle.getString("path");
    }

    private void removeUnreadPlane(boolean z) {
        MessageObject messageObject = this.unreadMessageObject;
        if (messageObject != null) {
            if (z) {
                boolean[] zArr = this.forwardEndReached;
                zArr[1] = true;
                zArr[0] = true;
                this.first_unread_id = 0;
                this.last_message_id = 0;
            }
            this.createUnreadMessageAfterId = 0;
            this.createUnreadMessageAfterIdLoading = false;
            removeMessageObject(messageObject);
            this.unreadMessageObject = null;
        }
    }

    /*  JADX ERROR: JadxRuntimeException in pass: BlockProcessor
        jadx.core.utils.exceptions.JadxRuntimeException: CFG modification limit reached, blocks count: 3081
        	at jadx.core.dex.visitors.blocks.BlockProcessor.processBlocksTree(BlockProcessor.java:70)
        	at jadx.core.dex.visitors.blocks.BlockProcessor.visit(BlockProcessor.java:44)
        */
    @Override // org.telegram.messenger.NotificationCenter.NotificationCenterDelegate
    public void didReceivedNotification(int r54, int r55, java.lang.Object... r56) {
        /*
            Method dump skipped, instructions count: 14039
            To view this dump add '--comments-level debug' option
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.ui.ChatActivity.didReceivedNotification(int, int, java.lang.Object[]):void");
    }

    public /* synthetic */ void lambda$didReceivedNotification$116() {
        getNotificationCenter().onAnimationFinish(this.transitionAnimationIndex);
    }

    public /* synthetic */ void lambda$didReceivedNotification$117() {
        getNotificationCenter().runDelayedNotifications();
        resumeDelayedFragmentAnimation();
        AndroidUtilities.cancelRunOnUIThread(this.fragmentTransitionRunnable);
        this.fragmentTransitionRunnable.run();
    }

    public /* synthetic */ void lambda$didReceivedNotification$118(MessageObject messageObject, int i) {
        this.delayedReadRunnable = null;
        messageObject.messageOwner.replies.read_max_id = i;
    }

    public static /* synthetic */ void lambda$didReceivedNotification$120(Theme.ThemeAccent themeAccent, Theme.ThemeInfo themeInfo, boolean z) {
        if (themeAccent != null) {
            Theme.ThemeAccent accent = themeInfo.getAccent(false);
            NotificationCenter.getGlobalInstance().postNotificationName(NotificationCenter.needSetDayNightTheme, themeInfo, Boolean.FALSE, null, Integer.valueOf(themeAccent.id));
            if (!z) {
                return;
            }
            Theme.deleteThemeAccent(themeInfo, accent, true);
            return;
        }
        NotificationCenter.getGlobalInstance().postNotificationName(NotificationCenter.needSetDayNightTheme, themeInfo, Boolean.FALSE, null, -1);
    }

    public /* synthetic */ void lambda$didReceivedNotification$121(int i) {
        playReactionAnimation(Integer.valueOf(i));
    }

    private void checkSecretMessageForLocation(MessageObject messageObject) {
        if (messageObject.type != 4 || this.locationAlertShown || SharedConfig.isSecretMapPreviewSet()) {
            return;
        }
        this.locationAlertShown = true;
        AlertsCreator.showSecretLocationAlert(getParentActivity(), this.currentAccount, new ChatActivity$$ExternalSyntheticLambda120(this), true, this.themeDelegate);
    }

    public /* synthetic */ void lambda$checkSecretMessageForLocation$122() {
        int childCount = this.chatListView.getChildCount();
        for (int i = 0; i < childCount; i++) {
            View childAt = this.chatListView.getChildAt(i);
            if (childAt instanceof ChatMessageCell) {
                ChatMessageCell chatMessageCell = (ChatMessageCell) childAt;
                if (chatMessageCell.getMessageObject().type == 4) {
                    chatMessageCell.forceResetMessageObject();
                }
            }
        }
    }

    private void loadSendAsPeers(boolean z) {
        TLRPC$Chat tLRPC$Chat;
        if (this.sendAsPeersObj != null || (tLRPC$Chat = this.currentChat) == null || !ChatObject.canSendAsPeers(tLRPC$Chat) || this.chatActivityEnterView == null) {
            return;
        }
        TLRPC$TL_channels_sendAsPeers sendAsPeers = getMessagesController().getSendAsPeers(this.dialog_id);
        this.sendAsPeersObj = sendAsPeers;
        if (sendAsPeers == null) {
            return;
        }
        this.chatActivityEnterView.updateSendAsButton(z);
    }

    private void addSponsoredMessages(boolean z) {
        ArrayList<MessageObject> sponsoredMessages;
        if (this.sponsoredMessagesAdded || this.chatMode != 0 || !ChatObject.isChannel(this.currentChat) || !this.forwardEndReached[0] || getUserConfig().isPremium() || (sponsoredMessages = getMessagesController().getSponsoredMessages(this.dialog_id)) == null) {
            return;
        }
        for (int i = 0; i < sponsoredMessages.size(); i++) {
            MessageObject messageObject = sponsoredMessages.get(i);
            messageObject.resetLayout();
            long peerId = MessageObject.getPeerId(messageObject.messageOwner.from_id);
            int i2 = messageObject.sponsoredChannelPost;
            if (i2 == 0) {
                i2 = 0;
            }
            getMessagesController().ensureMessagesLoaded(peerId, i2, null);
        }
        this.sponsoredMessagesAdded = true;
        processNewMessages(sponsoredMessages);
    }

    private void checkGroupCallJoin(boolean z) {
        TLRPC$ChatFull tLRPC$ChatFull;
        String str;
        ChatObject.Call call = this.groupCall;
        if (call == null || (str = this.voiceChatHash) == null || !this.openAnimationEnded) {
            if (this.voiceChatHash != null && z && (tLRPC$ChatFull = this.chatInfo) != null && tLRPC$ChatFull.call == null && this.fragmentView != null && getParentActivity() != null) {
                BulletinFactory.of(this).createSimpleBulletin(2131558485, LocaleController.getString("LinkHashExpired", 2131626487)).show();
                this.voiceChatHash = null;
            }
            this.lastCallCheckFromServer = !this.openAnimationEnded;
            return;
        }
        VoIPHelper.startCall(this.currentChat, null, str, this.createGroupCall, Boolean.valueOf(!call.call.rtmp_stream), getParentActivity(), this, getAccountInstance());
        this.voiceChatHash = null;
    }

    private void checkWaitingForReplies() {
        TLRPC$MessageFwdHeader tLRPC$MessageFwdHeader;
        int i;
        MessageObject messageObject;
        TLRPC$MessageReplies tLRPC$MessageReplies;
        int indexOf;
        if (this.waitingForReplies.size() == 0) {
            return;
        }
        int size = this.waitingForReplies.size();
        ArrayList arrayList = null;
        LongSparseArray longSparseArray = null;
        ArrayList arrayList2 = null;
        for (int i2 = 0; i2 < size; i2++) {
            MessageObject valueAt = this.waitingForReplies.valueAt(i2);
            if (valueAt.replyMessageObject != null) {
                if (arrayList == null) {
                    arrayList = new ArrayList();
                }
                arrayList.add(Integer.valueOf(this.waitingForReplies.keyAt(i2)));
                if (!(valueAt.messageOwner.action instanceof TLRPC$TL_messageActionPinMessage) && (tLRPC$MessageFwdHeader = valueAt.replyMessageObject.messageOwner.fwd_from) != null && MessageObject.getPeerId(tLRPC$MessageFwdHeader.saved_from_peer) == this.dialog_id && (i = valueAt.replyMessageObject.messageOwner.fwd_from.channel_post) != 0 && (messageObject = this.messagesDict[0].get(i)) != null && (tLRPC$MessageReplies = messageObject.messageOwner.replies) != null) {
                    tLRPC$MessageReplies.replies++;
                    messageObject.animateComments = true;
                    TLRPC$Message tLRPC$Message = valueAt.messageOwner;
                    TLRPC$Peer tLRPC$Peer = tLRPC$Message.from_id;
                    if (tLRPC$Peer == null) {
                        tLRPC$Peer = tLRPC$Message.peer_id;
                    }
                    int size2 = tLRPC$MessageReplies.recent_repliers.size();
                    int i3 = 0;
                    while (true) {
                        if (i3 >= size2) {
                            break;
                        } else if (MessageObject.getPeerId(messageObject.messageOwner.replies.recent_repliers.get(i3)) == MessageObject.getPeerId(tLRPC$Peer)) {
                            messageObject.messageOwner.replies.recent_repliers.remove(i3);
                            break;
                        } else {
                            i3++;
                        }
                    }
                    messageObject.messageOwner.replies.recent_repliers.add(0, tLRPC$Peer);
                    if (!valueAt.isOut()) {
                        messageObject.messageOwner.replies.max_id = valueAt.getId();
                    }
                    MessagesStorage messagesStorage = getMessagesStorage();
                    long j = this.currentChat.id;
                    int id = messageObject.getId();
                    TLRPC$MessageReplies tLRPC$MessageReplies2 = messageObject.messageOwner.replies;
                    messagesStorage.updateRepliesCount(j, id, tLRPC$MessageReplies2.recent_repliers, tLRPC$MessageReplies2.max_id, 1);
                    if (messageObject.hasValidGroupId()) {
                        MessageObject.GroupedMessages groupedMessages = this.groupedMessagesMap.get(messageObject.getGroupId());
                        if (groupedMessages != null) {
                            if (longSparseArray == null) {
                                longSparseArray = new LongSparseArray();
                            }
                            longSparseArray.put(groupedMessages.groupId, groupedMessages);
                            int size3 = groupedMessages.messages.size();
                            for (int i4 = 0; i4 < size3; i4++) {
                                groupedMessages.messages.get(i4).animateComments = true;
                            }
                        }
                    } else if (this.chatAdapter != null && (indexOf = this.messages.indexOf(messageObject)) >= 0) {
                        if (arrayList2 == null) {
                            arrayList2 = new ArrayList();
                        }
                        arrayList2.add(Integer.valueOf(indexOf + this.chatAdapter.messagesStartRow));
                    }
                }
            }
        }
        if (arrayList != null) {
            int size4 = arrayList.size();
            for (int i5 = 0; i5 < size4; i5++) {
                this.waitingForReplies.remove(((Integer) arrayList.get(i5)).intValue());
            }
        }
        if (this.chatAdapter == null) {
            return;
        }
        if (longSparseArray != null) {
            int size5 = longSparseArray.size();
            for (int i6 = 0; i6 < size5; i6++) {
                MessageObject.GroupedMessages groupedMessages2 = (MessageObject.GroupedMessages) longSparseArray.valueAt(i6);
                ArrayList<MessageObject> arrayList3 = groupedMessages2.messages;
                int indexOf2 = this.messages.indexOf(arrayList3.get(arrayList3.size() - 1));
                if (indexOf2 >= 0) {
                    ChatActivityAdapter chatActivityAdapter = this.chatAdapter;
                    chatActivityAdapter.notifyItemRangeChanged(indexOf2 + chatActivityAdapter.messagesStartRow, groupedMessages2.messages.size());
                }
            }
        }
        if (arrayList2 == null) {
            return;
        }
        int size6 = arrayList2.size();
        for (int i7 = 0; i7 < size6; i7++) {
            this.chatAdapter.notifyItemChanged(((Integer) arrayList2.get(i7)).intValue());
        }
    }

    private void clearHistory(boolean z, TLRPC$TL_updates_channelDifferenceTooLong tLRPC$TL_updates_channelDifferenceTooLong) {
        TLRPC$User tLRPC$User;
        if (z) {
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("clear history by overwrite firstLoading=" + this.firstLoading + " minMessage=" + this.minMessageId[0] + " topMessage=" + tLRPC$TL_updates_channelDifferenceTooLong.dialog.top_message);
            }
            TLRPC$Dialog tLRPC$Dialog = tLRPC$TL_updates_channelDifferenceTooLong.dialog;
            int i = tLRPC$Dialog.top_message;
            int[] iArr = this.minMessageId;
            if (i > iArr[0]) {
                this.createUnreadMessageAfterId = Math.max(iArr[0] + 1, tLRPC$Dialog.read_inbox_max_id);
            }
            this.forwardEndReached[0] = false;
            this.hideForwardEndReached = false;
            ChatActivityAdapter chatActivityAdapter = this.chatAdapter;
            if (chatActivityAdapter != null && chatActivityAdapter.loadingDownRow < 0) {
                this.chatAdapter.notifyItemInserted(0);
            }
            TLRPC$Dialog tLRPC$Dialog2 = tLRPC$TL_updates_channelDifferenceTooLong.dialog;
            int i2 = tLRPC$Dialog2.unread_count;
            this.newUnreadMessageCount = i2;
            this.newMentionsCount = tLRPC$Dialog2.unread_mentions_count;
            if (this.prevSetUnreadCount != i2) {
                CounterView counterView = this.pagedownButtonCounter;
                if (counterView != null) {
                    counterView.setCount(i2, this.openAnimationEnded);
                }
                this.prevSetUnreadCount = this.newUnreadMessageCount;
                updatePagedownButtonVisibility(true);
            }
            int i3 = this.newMentionsCount;
            int i4 = tLRPC$TL_updates_channelDifferenceTooLong.dialog.unread_mentions_count;
            if (i3 != i4) {
                this.newMentionsCount = i4;
                if (i4 <= 0) {
                    this.newMentionsCount = 0;
                    this.hasAllMentionsLocal = true;
                    showMentionDownButton(false, true);
                } else {
                    SimpleTextView simpleTextView = this.mentiondownButtonCounter;
                    if (simpleTextView != null) {
                        simpleTextView.setText(String.format("%d", Integer.valueOf(i4)));
                    }
                    showMentionDownButton(true, true);
                }
            }
            checkScrollForLoad(false);
            return;
        }
        this.messages.clear();
        this.waitingForLoad.clear();
        this.messagesByDays.clear();
        this.groupedMessagesMap.clear();
        this.threadMessageAdded = false;
        for (int i5 = 1; i5 >= 0; i5--) {
            this.messagesDict[i5].clear();
            if (this.currentEncryptedChat == null) {
                this.maxMessageId[i5] = Integer.MAX_VALUE;
                this.minMessageId[i5] = Integer.MIN_VALUE;
            } else {
                this.maxMessageId[i5] = Integer.MIN_VALUE;
                this.minMessageId[i5] = Integer.MAX_VALUE;
            }
            this.maxDate[i5] = Integer.MIN_VALUE;
            this.minDate[i5] = 0;
            this.selectedMessagesIds[i5].clear();
            this.selectedMessagesCanCopyIds[i5].clear();
            this.selectedMessagesCanStarIds[i5].clear();
        }
        hideActionMode();
        updatePinnedMessageView(true);
        if (this.botButtons != null) {
            this.botButtons = null;
            ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
            if (chatActivityEnterView != null) {
                chatActivityEnterView.setButtons(null, false);
            }
        }
        if (this.progressView != null) {
            showProgressView(false);
            this.chatListView.setEmptyView(this.emptyViewContainer);
        }
        ChatActivityAdapter chatActivityAdapter2 = this.chatAdapter;
        if (chatActivityAdapter2 != null) {
            chatActivityAdapter2.notifyDataSetChanged(false);
        }
        if (this.currentEncryptedChat != null || (tLRPC$User = this.currentUser) == null || !tLRPC$User.bot || this.botUser != null) {
            return;
        }
        this.botUser = "";
        updateBottomOverlay();
    }

    public boolean processSwitchButton(TLRPC$TL_keyboardButtonSwitchInline tLRPC$TL_keyboardButtonSwitchInline) {
        ArrayList<BaseFragment> arrayList;
        if (this.inlineReturn == 0 || tLRPC$TL_keyboardButtonSwitchInline.same_peer || this.parentLayout == null) {
            return false;
        }
        String str = "@" + this.currentUser.username + " " + tLRPC$TL_keyboardButtonSwitchInline.query;
        if (this.inlineReturn == this.dialog_id) {
            this.inlineReturn = 0L;
            this.chatActivityEnterView.setFieldText(str);
        } else {
            getMediaDataController().saveDraft(this.inlineReturn, 0, str, null, null, false);
            if (this.parentLayout.fragmentsStack.size() > 1) {
                BaseFragment baseFragment = this.parentLayout.fragmentsStack.get(arrayList.size() - 2);
                if ((baseFragment instanceof ChatActivity) && ((ChatActivity) baseFragment).dialog_id == this.inlineReturn) {
                    finishFragment();
                } else {
                    Bundle bundle = new Bundle();
                    if (DialogObject.isEncryptedDialog(this.inlineReturn)) {
                        bundle.putInt("enc_id", DialogObject.getEncryptedChatId(this.inlineReturn));
                    } else if (DialogObject.isUserDialog(this.inlineReturn)) {
                        bundle.putLong("user_id", this.inlineReturn);
                    } else {
                        bundle.putLong("chat_id", -this.inlineReturn);
                    }
                    addToPulledDialogsMyself();
                    presentFragment(new ChatActivity(bundle), true);
                }
            }
        }
        return true;
    }

    private void showGigagroupConvertAlert() {
        TLRPC$ChatFull tLRPC$ChatFull = this.chatInfo;
        if (tLRPC$ChatFull == null || this.paused) {
            return;
        }
        TLRPC$Chat tLRPC$Chat = this.currentChat;
        if (!tLRPC$Chat.creator || !tLRPC$Chat.megagroup || tLRPC$Chat.gigagroup || !tLRPC$ChatFull.pending_suggestions.contains("CONVERT_GIGAGROUP") || this.visibleDialog != null) {
            return;
        }
        AndroidUtilities.runOnUIThread(new ChatActivity$$ExternalSyntheticLambda129(this), 1000L);
    }

    public /* synthetic */ void lambda$showGigagroupConvertAlert$125() {
        TLRPC$ChatFull tLRPC$ChatFull = this.chatInfo;
        if (tLRPC$ChatFull == null || this.paused) {
            return;
        }
        TLRPC$Chat tLRPC$Chat = this.currentChat;
        if (!tLRPC$Chat.creator || !tLRPC$Chat.megagroup || tLRPC$Chat.gigagroup || !tLRPC$ChatFull.pending_suggestions.contains("CONVERT_GIGAGROUP") || this.visibleDialog != null) {
            return;
        }
        SharedPreferences notificationsSettings = MessagesController.getNotificationsSettings(this.currentAccount);
        int i = notificationsSettings.getInt("group_convert_time", 0);
        int i2 = BuildVars.DEBUG_PRIVATE_VERSION ? 120 : 604800;
        int currentTime = getConnectionsManager().getCurrentTime();
        if (Math.abs(currentTime - i) < i2 || this.visibleDialog != null || getParentActivity() == null) {
            return;
        }
        notificationsSettings.edit().putInt("group_convert_time", currentTime).commit();
        showDialog(AlertsCreator.createGigagroupConvertAlert(getParentActivity(), new ChatActivity$$ExternalSyntheticLambda24(this), new ChatActivity$$ExternalSyntheticLambda26(this)).create());
    }

    /* renamed from: org.telegram.ui.ChatActivity$83 */
    /* loaded from: classes3.dex */
    public class AnonymousClass83 extends GigagroupConvertAlert {
        /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
        AnonymousClass83(Context context, BaseFragment baseFragment) {
            super(context, baseFragment);
            ChatActivity.this = r1;
        }

        @Override // org.telegram.ui.Components.GigagroupConvertAlert
        protected void onCovert() {
            MessagesController messagesController = ChatActivity.this.getMessagesController();
            Activity parentActivity = ChatActivity.this.getParentActivity();
            ChatActivity chatActivity = ChatActivity.this;
            messagesController.convertToGigaGroup(parentActivity, chatActivity.currentChat, chatActivity, new ChatActivity$83$$ExternalSyntheticLambda0(this));
        }

        public /* synthetic */ void lambda$onCovert$0(boolean z) {
            if (z) {
                ChatActivity.this.undoView.showWithAction(0L, 76, (Runnable) null);
            }
        }

        @Override // org.telegram.ui.Components.GigagroupConvertAlert
        protected void onCancel() {
            ChatActivity.this.undoView.showWithAction(0L, 75, (Runnable) null);
            ChatActivity.this.getMessagesController().removeSuggestion(ChatActivity.this.dialog_id, "CONVERT_GIGAGROUP");
        }
    }

    public /* synthetic */ void lambda$showGigagroupConvertAlert$123(DialogInterface dialogInterface, int i) {
        showDialog(new AnonymousClass83(getParentActivity(), this));
    }

    public /* synthetic */ void lambda$showGigagroupConvertAlert$124(DialogInterface dialogInterface, int i) {
        this.undoView.showWithAction(0L, 75, (Runnable) null);
    }

    private void addReplyMessageOwner(MessageObject messageObject, Integer num) {
        MessageObject messageObject2 = messageObject.replyMessageObject;
        if (messageObject2 == null) {
            return;
        }
        int id = messageObject2.getId();
        ArrayList<Integer> arrayList = this.replyMessageOwners.get(id);
        if (arrayList == null) {
            arrayList = new ArrayList<>();
            this.replyMessageOwners.put(id, arrayList);
        }
        int id2 = messageObject.getId();
        if (!arrayList.contains(Integer.valueOf(id2))) {
            arrayList.add(Integer.valueOf(id2));
        }
        if (num.intValue() == 0) {
            return;
        }
        arrayList.remove(num);
    }

    private void updateReplyMessageOwners(int i, MessageObject messageObject) {
        ArrayList<Integer> arrayList = this.replyMessageOwners.get(i);
        if (arrayList == null) {
            return;
        }
        MessageObject messageObject2 = messageObject == null ? new MessageObject(this.currentAccount, new TLRPC$TL_messageEmpty(), false, false) : null;
        int size = arrayList.size();
        for (int i2 = 0; i2 < size; i2++) {
            MessageObject messageObject3 = this.messagesDict[0].get(arrayList.get(i2).intValue());
            if (messageObject3 != null) {
                if (messageObject == null) {
                    messageObject3.replyMessageObject = messageObject2;
                } else {
                    messageObject3.replyMessageObject = messageObject;
                }
                ChatActivityAdapter chatActivityAdapter = this.chatAdapter;
                if (chatActivityAdapter != null) {
                    chatActivityAdapter.updateRowWithMessageObject(messageObject3, true);
                }
            }
        }
        if (messageObject != null) {
            return;
        }
        this.replyMessageOwners.remove(i);
    }

    private void rotateMotionBackgroundDrawable() {
        MotionBackgroundDrawable motionBackgroundDrawable;
        Drawable wallpaperDrawable = this.themeDelegate.getWallpaperDrawable();
        View view = this.fragmentView;
        if (view != null) {
            wallpaperDrawable = ((SizeNotifierFrameLayout) view).getBackgroundImage();
        }
        if (wallpaperDrawable instanceof MotionBackgroundDrawable) {
            ((MotionBackgroundDrawable) wallpaperDrawable).switchToNextPosition();
        }
        Drawable themedDrawable = getThemedDrawable("drawableMsgOut");
        if (!(themedDrawable instanceof Theme.MessageDrawable) || (motionBackgroundDrawable = ((Theme.MessageDrawable) themedDrawable).getMotionBackgroundDrawable()) == null) {
            return;
        }
        motionBackgroundDrawable.switchToNextPosition();
    }

    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:397:0x065f  */
    /* JADX WARN: Removed duplicated region for block: B:438:0x0709  */
    /* JADX WARN: Removed duplicated region for block: B:441:0x0713  */
    /* JADX WARN: Removed duplicated region for block: B:460:0x076c  */
    /* JADX WARN: Removed duplicated region for block: B:554:0x09a5  */
    /* JADX WARN: Removed duplicated region for block: B:561:0x09c2  */
    /* JADX WARN: Removed duplicated region for block: B:564:0x09cc  */
    /* JADX WARN: Removed duplicated region for block: B:576:0x09ef  */
    /* JADX WARN: Removed duplicated region for block: B:583:0x0a08  */
    /* JADX WARN: Removed duplicated region for block: B:713:0x0753 A[SYNTHETIC] */
    /* JADX WARN: Type inference failed for: r4v33 */
    /* JADX WARN: Type inference failed for: r4v34 */
    /* JADX WARN: Type inference failed for: r6v13, types: [int, boolean] */
    /* JADX WARN: Type inference failed for: r6v15 */
    /* JADX WARN: Type inference failed for: r6v16 */
    /* JADX WARN: Type inference failed for: r6v17 */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void processNewMessages(ArrayList<MessageObject> arrayList) {
        boolean z;
        boolean z2;
        int i;
        boolean z3;
        boolean z4;
        String str;
        MessageObject messageObject;
        int id;
        SimpleTextView simpleTextView;
        CounterView counterView;
        TLRPC$Message tLRPC$Message;
        long j;
        MessageObject messageObject2;
        boolean z5;
        String str2;
        int i2;
        TLRPC$Chat tLRPC$Chat;
        MessageObject.GroupedMessages groupedMessages;
        int i3;
        int i4;
        int i5;
        int i6;
        ArrayList<MessageObject> arrayList2;
        boolean z6;
        ChatActivityAdapter chatActivityAdapter;
        int i7;
        int i8;
        ValueAnimator valueAnimator;
        MessageObject messageObject3;
        MessageObject.GroupedMessages groupedMessages2;
        MessageObject messageObject4;
        ?? r6;
        TLRPC$Chat tLRPC$Chat2;
        int i9;
        int i10;
        TLRPC$Message tLRPC$Message2;
        int i11;
        MessageObject.GroupedMessages groupedMessages3;
        int i12;
        int i13;
        MessageObject messageObject5;
        TLRPC$User tLRPC$User;
        int i14;
        SimpleTextView simpleTextView2;
        CounterView counterView2;
        int i15;
        boolean z7;
        TLRPC$Chat tLRPC$Chat3;
        int i16;
        TLRPC$User tLRPC$User2;
        TLRPC$Chat chat;
        TLRPC$Chat chat2;
        ArrayList<MessageObject> arrayList3 = arrayList;
        long clientUserId = getUserConfig().getClientUserId();
        ChatListItemAnimator chatListItemAnimator = this.chatListItemAnimator;
        boolean z8 = true;
        if (chatListItemAnimator != null) {
            chatListItemAnimator.setShouldAnimateEnterFromBottom(true);
        }
        int size = arrayList.size();
        boolean z9 = false;
        int i17 = 0;
        boolean z10 = false;
        LongSparseArray longSparseArray = null;
        boolean z11 = false;
        while (i17 < size) {
            MessageObject messageObject6 = arrayList3.get(i17);
            if (!z10) {
                z10 = messageObject6.isSponsored();
            }
            int id2 = messageObject6.getId();
            if (this.threadMessageId != 0 && id2 > 0) {
                if (id2 <= (messageObject6.isOut() ? this.threadMaxOutboxReadId : this.threadMaxInboxReadId)) {
                    messageObject6.setIsRead();
                }
            }
            if (this.currentEncryptedChat == null && !this.forwardEndReached[0] && id2 < 0) {
                this.pendingSendMessagesDict.put(id2, messageObject6);
                this.pendingSendMessages.add(0, messageObject6);
            }
            if ((messageObject6.isDice() && !messageObject6.isForwarded()) || (messageObject6.messageOwner.action instanceof TLRPC$TL_messageActionGiftPremium)) {
                messageObject6.wasUnread = z8;
            }
            if (this.chatMode == z8 && messageObject6.hasValidGroupId() && this.messagesDict[0].indexOfKey(messageObject6.getId()) >= 0) {
                long groupId = messageObject6.getGroupId();
                if (longSparseArray == null) {
                    longSparseArray = new LongSparseArray();
                }
                Long l = (Long) longSparseArray.get(groupId);
                if (l == null) {
                    l = Long.valueOf(Utilities.random.nextLong());
                    longSparseArray.put(groupId, l);
                }
                messageObject6.localGroupId = l.longValue();
            }
            if (messageObject6.isOut()) {
                if (!z11) {
                    NotificationCenter.getGlobalInstance().postNotificationName(NotificationCenter.closeSearchByActiveAction, new Object[0]);
                    z11 = true;
                }
                if (this.currentChat != null && (chat2 = getMessagesController().getChat(Long.valueOf(this.currentChat.id))) != null) {
                    this.currentChat = chat2;
                    if (!chat2.gigagroup && chat2.slowmode_enabled && messageObject6.isSent() && this.chatMode != z8) {
                        TLRPC$ChatFull tLRPC$ChatFull = this.chatInfo;
                        if (tLRPC$ChatFull != null) {
                            int i18 = messageObject6.messageOwner.date + tLRPC$ChatFull.slowmode_seconds;
                            int currentTime = getConnectionsManager().getCurrentTime();
                            if (i18 > getConnectionsManager().getCurrentTime()) {
                                TLRPC$ChatFull tLRPC$ChatFull2 = this.chatInfo;
                                tLRPC$ChatFull2.slowmode_next_send_date = Math.max(tLRPC$ChatFull2.slowmode_next_send_date, Math.min(currentTime + tLRPC$ChatFull2.slowmode_seconds, i18));
                                ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
                                if (chatActivityEnterView != null) {
                                    chatActivityEnterView.setSlowModeTimer(this.chatInfo.slowmode_next_send_date);
                                }
                            }
                        }
                        getMessagesController().loadFullChat(this.currentChat.id, 0, true);
                    }
                }
                if (messageObject6.wasJustSent && getUserConfig().isPremium()) {
                    messageObject6.forcePlayEffect = true;
                }
            }
            if (this.currentChat != null) {
                TLRPC$MessageAction tLRPC$MessageAction = messageObject6.messageOwner.action;
                if ((((tLRPC$MessageAction instanceof TLRPC$TL_messageActionChatDeleteUser) && tLRPC$MessageAction.user_id == clientUserId) || ((tLRPC$MessageAction instanceof TLRPC$TL_messageActionChatAddUser) && tLRPC$MessageAction.users.contains(Long.valueOf(clientUserId)))) && (chat = getMessagesController().getChat(Long.valueOf(this.currentChat.id))) != null) {
                    this.currentChat = chat;
                    checkActionBarMenu(false);
                    updateBottomOverlay();
                    ChatAvatarContainer chatAvatarContainer = this.avatarContainer;
                    if (chatAvatarContainer != null) {
                        chatAvatarContainer.updateSubtitle(true);
                    }
                }
            } else if (this.inlineReturn != 0 && messageObject6.messageOwner.reply_markup != null) {
                for (int i19 = 0; i19 < messageObject6.messageOwner.reply_markup.rows.size(); i19++) {
                    TLRPC$TL_keyboardButtonRow tLRPC$TL_keyboardButtonRow = messageObject6.messageOwner.reply_markup.rows.get(i19);
                    int i20 = 0;
                    while (true) {
                        if (i20 < tLRPC$TL_keyboardButtonRow.buttons.size()) {
                            TLRPC$KeyboardButton tLRPC$KeyboardButton = tLRPC$TL_keyboardButtonRow.buttons.get(i20);
                            if (tLRPC$KeyboardButton instanceof TLRPC$TL_keyboardButtonSwitchInline) {
                                processSwitchButton((TLRPC$TL_keyboardButtonSwitchInline) tLRPC$KeyboardButton);
                                break;
                            }
                            i20++;
                        }
                    }
                }
            }
            if (messageObject6.getReplyMsgId() != 0 && messageObject6.replyMessageObject == null) {
                MessageObject messageObject7 = this.messagesDict[0].get(messageObject6.getReplyMsgId());
                messageObject6.replyMessageObject = messageObject7;
                if (messageObject7 == null && messageObject6.getDialogId() != this.mergeDialogId) {
                    messageObject6.replyMessageObject = this.repliesMessagesDict.get(messageObject6.getReplyMsgId());
                }
                TLRPC$MessageAction tLRPC$MessageAction2 = messageObject6.messageOwner.action;
                if (tLRPC$MessageAction2 instanceof TLRPC$TL_messageActionPinMessage) {
                    messageObject6.generatePinMessageText(null, null);
                } else if (tLRPC$MessageAction2 instanceof TLRPC$TL_messageActionGameScore) {
                    messageObject6.generateGameMessageText(null);
                } else if (tLRPC$MessageAction2 instanceof TLRPC$TL_messageActionPaymentSent) {
                    messageObject6.generatePaymentSentMessageText(null);
                }
            }
            MessageObject messageObject8 = messageObject6.replyMessageObject;
            if (messageObject8 != null) {
                this.repliesMessagesDict.put(messageObject8.getId(), messageObject6.replyMessageObject);
                addReplyMessageOwner(messageObject6, 0);
            }
            i17++;
            z8 = true;
        }
        if (this.chatMode == 1 && !arrayList.isEmpty()) {
            replaceMessageObjects(arrayList3, 0, true);
        }
        String str3 = "%d";
        if (!this.forwardEndReached[0]) {
            int i21 = Integer.MIN_VALUE;
            int i22 = 0;
            z2 = false;
            z = false;
            while (i22 < arrayList.size()) {
                MessageObject messageObject9 = arrayList3.get(i22);
                if (messageObject9.isOut()) {
                    rotateMotionBackgroundDrawable();
                }
                int i23 = this.threadMessageId;
                if (i23 == 0 || i23 == messageObject9.getReplyTopMsgId() || this.threadMessageId == messageObject9.getReplyMsgId()) {
                    int id3 = messageObject9.getId();
                    if (!messageObject9.isOut() || !this.waitingForSendingMessageLoad) {
                        i15 = 1;
                    } else {
                        this.waitingForSendingMessageLoad = z9;
                        i15 = 1;
                        this.chatActivityEnterView.hideTopView(true);
                        ValueAnimator valueAnimator2 = this.changeBoundAnimator;
                        if (valueAnimator2 != null) {
                            valueAnimator2.start();
                        }
                    }
                    if (this.chatMode != i15 && (tLRPC$User2 = this.currentUser) != null && ((tLRPC$User2.bot && messageObject9.isOut()) || this.currentUser.id == clientUserId)) {
                        messageObject9.setIsRead();
                    }
                    TLRPC$MessageAction tLRPC$MessageAction3 = messageObject9.messageOwner.action;
                    ChatAvatarContainer chatAvatarContainer2 = this.avatarContainer;
                    if (chatAvatarContainer2 != null && this.currentEncryptedChat != null && (tLRPC$MessageAction3 instanceof TLRPC$TL_messageEncryptedAction)) {
                        TLRPC$DecryptedMessageAction tLRPC$DecryptedMessageAction = tLRPC$MessageAction3.encryptedAction;
                        if (tLRPC$DecryptedMessageAction instanceof TLRPC$TL_decryptedMessageActionSetMessageTTL) {
                            chatAvatarContainer2.setTime(tLRPC$DecryptedMessageAction.ttl_seconds, true);
                        }
                    }
                    if (tLRPC$MessageAction3 instanceof TLRPC$TL_messageActionChatMigrateTo) {
                        migrateToNewChat(messageObject9);
                        return;
                    }
                    TLRPC$Chat tLRPC$Chat4 = this.currentChat;
                    if (tLRPC$Chat4 != null && tLRPC$Chat4.megagroup && ((tLRPC$MessageAction3 instanceof TLRPC$TL_messageActionChatAddUser) || (tLRPC$MessageAction3 instanceof TLRPC$TL_messageActionChatDeleteUser))) {
                        z = true;
                    }
                    if (i22 != 0 || !messageObject9.shouldAnimateSending()) {
                        z7 = true;
                    } else {
                        z7 = true;
                        if (this.chatMode != 1) {
                            this.needAnimateToMessage = messageObject9;
                        }
                    }
                    if (messageObject9.isOut() && messageObject9.wasJustSent) {
                        scrollToLastMessage(z7);
                        return;
                    } else if (messageObject9.type >= 0 && this.messagesDict[0].indexOfKey(id3) < 0 && (((tLRPC$Chat3 = this.currentChat) == null || !tLRPC$Chat3.creator || ((ChatObject.isChannel(tLRPC$Chat3) && !this.currentChat.megagroup) || (!(tLRPC$MessageAction3 instanceof TLRPC$TL_messageActionChatCreate) && (!(tLRPC$MessageAction3 instanceof TLRPC$TL_messageActionChatEditPhoto) || this.messages.size() >= 2)))) && !(tLRPC$MessageAction3 instanceof TLRPC$TL_messageActionChannelMigrateFrom) && (this.threadMessageId == 0 || !(messageObject9.messageOwner instanceof TLRPC$TL_messageEmpty)))) {
                        if (this.threadMessageObject != null && messageObject9.isReply() && !(messageObject9.messageOwner.action instanceof TLRPC$TL_messageActionPinMessage) && this.threadMessageObject.getId() == messageObject9.getReplyAnyMsgId()) {
                            this.threadMessageObject.messageOwner.replies.replies++;
                        }
                        addToPolls(messageObject9, null);
                        messageObject9.checkLayout();
                        i21 = Math.max(i21, messageObject9.messageOwner.date);
                        if (id3 > 0) {
                            this.last_message_id = Math.max(this.last_message_id, id3);
                        } else if (this.currentEncryptedChat != null) {
                            this.last_message_id = Math.min(this.last_message_id, id3);
                        }
                        if (this.threadMessageId != 0 || !messageObject9.messageOwner.mentioned || !messageObject9.isContentUnread()) {
                            i16 = 1;
                        } else {
                            i16 = 1;
                            this.newMentionsCount++;
                        }
                        if (!z10) {
                            this.newUnreadMessageCount += i16;
                        }
                        int i24 = messageObject9.type;
                        if (i24 == 10 || i24 == 11) {
                            z2 = true;
                        }
                    }
                }
                i22++;
                z9 = false;
            }
            if (this.newUnreadMessageCount != 0 && (counterView2 = this.pagedownButtonCounter) != null) {
                counterView2.setVisibility(0);
                int i25 = this.prevSetUnreadCount;
                int i26 = this.newUnreadMessageCount;
                if (i25 != i26) {
                    this.prevSetUnreadCount = i26;
                    i14 = 1;
                    this.pagedownButtonCounter.setCount(i26, true);
                    if (this.newMentionsCount != 0 && (simpleTextView2 = this.mentiondownButtonCounter) != null) {
                        simpleTextView2.setVisibility(0);
                        SimpleTextView simpleTextView3 = this.mentiondownButtonCounter;
                        Object[] objArr = new Object[i14];
                        objArr[0] = Integer.valueOf(this.newMentionsCount);
                        simpleTextView3.setText(String.format(str3, objArr));
                        showMentionDownButton(i14, i14);
                    }
                    updateVisibleRows();
                    z3 = false;
                    i = 1;
                }
            }
            i14 = 1;
            if (this.newMentionsCount != 0) {
                simpleTextView2.setVisibility(0);
                SimpleTextView simpleTextView32 = this.mentiondownButtonCounter;
                Object[] objArr2 = new Object[i14];
                objArr2[0] = Integer.valueOf(this.newMentionsCount);
                simpleTextView32.setText(String.format(str3, objArr2));
                showMentionDownButton(i14, i14);
            }
            updateVisibleRows();
            z3 = false;
            i = 1;
        } else {
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("received new messages " + arrayList.size() + " in dialog " + this.dialog_id);
            }
            HashMap<String, ArrayList<MessageObject>> hashMap = null;
            MessageObject messageObject10 = null;
            LongSparseArray longSparseArray2 = null;
            int i27 = 0;
            boolean z12 = false;
            boolean z13 = false;
            boolean z14 = false;
            boolean z15 = false;
            while (i27 < arrayList.size()) {
                MessageObject messageObject11 = arrayList3.get(i27);
                boolean z16 = z12;
                boolean z17 = z14;
                if (messageObject11.scheduled == (this.chatMode == 1) && ((i2 = this.threadMessageId) == 0 || i2 == messageObject11.getReplyTopMsgId() || this.threadMessageId == messageObject11.getReplyMsgId())) {
                    if (messageObject11.isOut()) {
                        rotateMotionBackgroundDrawable();
                    }
                    int id4 = messageObject11.getId();
                    if (this.chatMode != 1 || this.messagesDict[0].indexOfKey(id4) < 0) {
                        messageObject2 = messageObject10;
                        z5 = z15;
                        str2 = str3;
                    } else {
                        MessageObject messageObject12 = this.messagesDict[0].get(id4);
                        z5 = z15;
                        this.messagesDict[0].remove(id4);
                        if (messageObject12 != null) {
                            int indexOf = this.messages.indexOf(messageObject12);
                            this.messages.remove(indexOf);
                            ArrayList<MessageObject> arrayList4 = this.messagesByDays.get(messageObject12.dateKey);
                            arrayList4.remove(messageObject12);
                            if (arrayList4.isEmpty()) {
                                this.messagesByDays.remove(messageObject12.dateKey);
                                if (indexOf >= 0 && indexOf < this.messages.size()) {
                                    this.messages.remove(indexOf);
                                }
                            }
                            if (messageObject12.hasValidGroupId()) {
                                str2 = str3;
                                messageObject2 = messageObject10;
                                MessageObject.GroupedMessages groupedMessages4 = this.groupedMessagesMap.get(messageObject12.getGroupId());
                                groupedMessages4.messages.remove(messageObject12);
                                if (longSparseArray2 == null) {
                                    longSparseArray2 = new LongSparseArray();
                                }
                                longSparseArray2.put(groupedMessages4.groupId, groupedMessages4);
                            } else {
                                str2 = str3;
                                messageObject2 = messageObject10;
                            }
                            ChatActivityAdapter chatActivityAdapter2 = this.chatAdapter;
                            if (chatActivityAdapter2 != null) {
                                chatActivityAdapter2.notifyDataSetChanged(true);
                            }
                        } else {
                            str2 = str3;
                            messageObject2 = messageObject10;
                        }
                    }
                    if (isSecretChat()) {
                        checkSecretMessageForLocation(messageObject11);
                    }
                    if (this.chatMode != 1 && (tLRPC$User = this.currentUser) != null && ((tLRPC$User.bot && messageObject11.isOut()) || this.currentUser.id == clientUserId)) {
                        messageObject11.setIsRead();
                    }
                    TLRPC$MessageAction tLRPC$MessageAction4 = messageObject11.messageOwner.action;
                    ChatAvatarContainer chatAvatarContainer3 = this.avatarContainer;
                    if (chatAvatarContainer3 != null && this.currentEncryptedChat != null && (tLRPC$MessageAction4 instanceof TLRPC$TL_messageEncryptedAction)) {
                        TLRPC$DecryptedMessageAction tLRPC$DecryptedMessageAction2 = tLRPC$MessageAction4.encryptedAction;
                        if (tLRPC$DecryptedMessageAction2 instanceof TLRPC$TL_decryptedMessageActionSetMessageTTL) {
                            chatAvatarContainer3.setTime(tLRPC$DecryptedMessageAction2.ttl_seconds, true);
                        }
                    }
                    if (messageObject11.type < 0 || this.messagesDict[0].indexOfKey(id4) >= 0 || (((tLRPC$Chat = this.currentChat) != null && tLRPC$Chat.creator && ((!ChatObject.isChannel(tLRPC$Chat) || this.currentChat.megagroup) && ((tLRPC$MessageAction4 instanceof TLRPC$TL_messageActionChatCreate) || ((tLRPC$MessageAction4 instanceof TLRPC$TL_messageActionChatEditPhoto) && this.messages.size() < 2)))) || (tLRPC$MessageAction4 instanceof TLRPC$TL_messageActionChannelMigrateFrom) || (this.threadMessageId != 0 && (messageObject11.messageOwner instanceof TLRPC$TL_messageEmpty)))) {
                        j = clientUserId;
                        longSparseArray2 = longSparseArray2;
                    } else {
                        MessageObject messageObject13 = this.threadMessageObject;
                        if (messageObject13 != null && messageObject13.messageOwner.replies != null && messageObject11.isReply() && !(messageObject11.messageOwner.action instanceof TLRPC$TL_messageActionPinMessage) && this.threadMessageObject.getId() == messageObject11.getReplyAnyMsgId()) {
                            this.threadMessageObject.messageOwner.replies.replies++;
                        }
                        addToPolls(messageObject11, null);
                        if (i27 == 0 && messageObject11.shouldAnimateSending() && this.chatMode != 1) {
                            this.animatingMessageObjects.add(messageObject11);
                        }
                        if (messageObject11.hasValidGroupId()) {
                            LongSparseArray longSparseArray3 = longSparseArray2;
                            groupedMessages = this.groupedMessagesMap.get(messageObject11.getGroupId());
                            if (groupedMessages == null) {
                                groupedMessages = new MessageObject.GroupedMessages();
                                long groupId2 = messageObject11.getGroupId();
                                groupedMessages.groupId = groupId2;
                                this.groupedMessagesMap.put(groupId2, groupedMessages);
                            }
                            if (longSparseArray3 == null) {
                                j = clientUserId;
                                longSparseArray2 = new LongSparseArray();
                            } else {
                                j = clientUserId;
                                longSparseArray2 = longSparseArray3;
                            }
                            longSparseArray2.put(groupedMessages.groupId, groupedMessages);
                            groupedMessages.messages.add(messageObject11);
                        } else {
                            j = clientUserId;
                            groupedMessages = null;
                        }
                        if (groupedMessages != null) {
                            if (groupedMessages.messages.size() > 1) {
                                ArrayList<MessageObject> arrayList5 = groupedMessages.messages;
                                messageObject5 = arrayList5.get(arrayList5.size() - 2);
                            } else {
                                messageObject5 = null;
                            }
                            if (messageObject5 != null) {
                                i3 = this.messages.indexOf(messageObject5);
                                i4 = -1;
                                if (i3 == i4) {
                                    i5 = i3;
                                } else if ((messageObject11.scheduled || messageObject11.messageOwner.id >= 0) && !this.messages.isEmpty()) {
                                    int size2 = this.messages.size();
                                    int i28 = 0;
                                    while (i28 < size2) {
                                        MessageObject messageObject14 = this.messages.get(i28);
                                        if (messageObject14.type < 0 || (i11 = (tLRPC$Message2 = messageObject14.messageOwner).date) <= 0) {
                                            i10 = size2;
                                            i9 = i3;
                                        } else {
                                            i10 = size2;
                                            i9 = i3;
                                            if ((this.chatMode != 1 && (i12 = tLRPC$Message2.id) > 0 && (i13 = messageObject11.messageOwner.id) > 0 && i12 < i13) || i11 <= messageObject11.messageOwner.date) {
                                                if (messageObject14.getGroupId() == 0 || ((groupedMessages3 = this.groupedMessagesMap.get(messageObject14.getGroupId())) != null && groupedMessages3.messages.size() == 0)) {
                                                    groupedMessages3 = null;
                                                }
                                                if (groupedMessages3 == null) {
                                                    i3 = i28;
                                                } else {
                                                    ArrayList<MessageObject> arrayList6 = this.messages;
                                                    ArrayList<MessageObject> arrayList7 = groupedMessages3.messages;
                                                    i3 = arrayList6.indexOf(arrayList7.get(arrayList7.size() - 1));
                                                }
                                                if (i3 != -1 || i3 > this.messages.size()) {
                                                    i3 = this.messages.size();
                                                }
                                                i5 = i3;
                                            }
                                        }
                                        i28++;
                                        size2 = i10;
                                        i3 = i9;
                                    }
                                    if (i3 != -1) {
                                    }
                                    i3 = this.messages.size();
                                    i5 = i3;
                                } else {
                                    i5 = 0;
                                }
                                if (this.currentEncryptedChat != null) {
                                    TLRPC$MessageMedia tLRPC$MessageMedia = messageObject11.messageOwner.media;
                                    if ((tLRPC$MessageMedia instanceof TLRPC$TL_messageMediaWebPage) && (tLRPC$MessageMedia.webpage instanceof TLRPC$TL_webPageUrlPending)) {
                                        if (hashMap == null) {
                                            hashMap = new HashMap<>();
                                        }
                                        ArrayList<MessageObject> arrayList8 = hashMap.get(messageObject11.messageOwner.media.webpage.url);
                                        if (arrayList8 == null) {
                                            arrayList8 = new ArrayList<>();
                                            hashMap.put(messageObject11.messageOwner.media.webpage.url, arrayList8);
                                        }
                                        arrayList8.add(messageObject11);
                                    }
                                }
                                messageObject11.checkLayout();
                                if (!(tLRPC$MessageAction4 instanceof TLRPC$TL_messageActionChatMigrateTo)) {
                                    migrateToNewChat(messageObject11);
                                    if (longSparseArray2 == null) {
                                        return;
                                    }
                                    for (int i29 = 0; i29 < longSparseArray2.size(); i29++) {
                                        ((MessageObject.GroupedMessages) longSparseArray2.valueAt(i29)).calculate();
                                    }
                                    return;
                                }
                                TLRPC$Chat tLRPC$Chat5 = this.currentChat;
                                if (tLRPC$Chat5 != null && tLRPC$Chat5.megagroup && ((tLRPC$MessageAction4 instanceof TLRPC$TL_messageActionChatAddUser) || (tLRPC$MessageAction4 instanceof TLRPC$TL_messageActionChatDeleteUser))) {
                                    z5 = true;
                                }
                                int[] iArr = this.minDate;
                                if (iArr[0] == 0 || messageObject11.messageOwner.date < iArr[0]) {
                                    iArr[0] = messageObject11.messageOwner.date;
                                }
                                if (messageObject11.isOut() && !messageObject11.messageOwner.from_scheduled) {
                                    removeUnreadPlane(true);
                                    hideInfoView();
                                    z13 = true;
                                }
                                if (id4 > 0) {
                                    int[] iArr2 = this.maxMessageId;
                                    i6 = 0;
                                    iArr2[0] = Math.min(id4, iArr2[0]);
                                    int[] iArr3 = this.minMessageId;
                                    iArr3[0] = Math.max(id4, iArr3[0]);
                                } else {
                                    i6 = 0;
                                    if (this.currentEncryptedChat != null) {
                                        int[] iArr4 = this.maxMessageId;
                                        iArr4[0] = Math.max(id4, iArr4[0]);
                                        int[] iArr5 = this.minMessageId;
                                        iArr5[0] = Math.min(id4, iArr5[0]);
                                    }
                                }
                                int[] iArr6 = this.maxDate;
                                iArr6[i6] = Math.max(iArr6[i6], messageObject11.messageOwner.date);
                                this.messagesDict[i6].put(id4, messageObject11);
                                if (z10 && !this.messages.isEmpty()) {
                                    arrayList2 = this.messagesByDays.get(this.messages.get(i6).dateKey);
                                } else {
                                    arrayList2 = this.messagesByDays.get(messageObject11.dateKey);
                                }
                                if (i5 > this.messages.size()) {
                                    i5 = this.messages.size();
                                }
                                int sponsoredMessagesCount = getSponsoredMessagesCount();
                                if (!z10 && i5 < sponsoredMessagesCount && ((tLRPC$Chat2 = this.currentChat) == null || ChatObject.isChannelAndNotMegaGroup(tLRPC$Chat2))) {
                                    i5 = sponsoredMessagesCount;
                                }
                                if (arrayList2 == null) {
                                    arrayList2 = new ArrayList<>();
                                    this.messagesByDays.put(messageObject11.dateKey, arrayList2);
                                    TLRPC$TL_message tLRPC$TL_message = new TLRPC$TL_message();
                                    if (this.chatMode == 1) {
                                        int i30 = messageObject11.messageOwner.date;
                                        if (i30 == 2147483646) {
                                            tLRPC$TL_message.message = LocaleController.getString("MessageScheduledUntilOnline", 2131626700);
                                            z6 = z13;
                                            r6 = 0;
                                        } else {
                                            z6 = z13;
                                            r6 = 0;
                                            tLRPC$TL_message.message = LocaleController.formatString("MessageScheduledOn", 2131626698, LocaleController.formatDateChat(i30, true));
                                        }
                                    } else {
                                        z6 = z13;
                                        r6 = 0;
                                        tLRPC$TL_message.message = LocaleController.formatDateChat(messageObject11.messageOwner.date);
                                    }
                                    int i31 = r6 == true ? 1 : 0;
                                    int i32 = r6 == true ? 1 : 0;
                                    int i33 = r6 == true ? 1 : 0;
                                    tLRPC$TL_message.id = i31;
                                    Calendar calendar = Calendar.getInstance();
                                    calendar.setTimeInMillis(messageObject11.messageOwner.date * 1000);
                                    calendar.set(11, r6);
                                    calendar.set(12, r6);
                                    tLRPC$TL_message.date = (int) (calendar.getTimeInMillis() / 1000);
                                    MessageObject messageObject15 = new MessageObject(this.currentAccount, tLRPC$TL_message, r6, r6);
                                    messageObject15.type = 10;
                                    messageObject15.contentType = 1;
                                    messageObject15.isDateObject = true;
                                    int i34 = this.lastStableId;
                                    this.lastStableId = i34 + 1;
                                    messageObject15.stableId = i34;
                                    this.messages.add(i5, messageObject15);
                                    ChatActivityAdapter chatActivityAdapter3 = this.chatAdapter;
                                    if (chatActivityAdapter3 != null) {
                                        chatActivityAdapter3.notifyItemInserted(i5);
                                    }
                                } else {
                                    z6 = z13;
                                }
                                if (!(messageObject11.messageOwner.action instanceof TLRPC$TL_messageActionGeoProximityReached) && ((!messageObject11.isOut() || messageObject11.messageOwner.from_scheduled) && this.paused && i5 == 0)) {
                                    if (!this.scrollToTopUnReadOnResume && (messageObject4 = this.unreadMessageObject) != null) {
                                        removeMessageObject(messageObject4);
                                        this.unreadMessageObject = null;
                                    }
                                    if (this.unreadMessageObject == null) {
                                        TLRPC$TL_message tLRPC$TL_message2 = new TLRPC$TL_message();
                                        tLRPC$TL_message2.message = "";
                                        tLRPC$TL_message2.id = 0;
                                        MessageObject messageObject16 = new MessageObject(this.currentAccount, tLRPC$TL_message2, false, false);
                                        messageObject16.type = 6;
                                        messageObject16.contentType = 2;
                                        int i35 = this.lastStableId;
                                        this.lastStableId = i35 + 1;
                                        messageObject16.stableId = i35;
                                        this.messages.add(0, messageObject16);
                                        ChatActivityAdapter chatActivityAdapter4 = this.chatAdapter;
                                        if (chatActivityAdapter4 != null) {
                                            chatActivityAdapter4.notifyItemInserted(0);
                                        }
                                        this.unreadMessageObject = messageObject16;
                                        this.scrollToMessage = messageObject16;
                                        this.scrollToMessagePosition = -10000;
                                        this.scrollToTopUnReadOnResume = true;
                                        arrayList2.add(0, messageObject11);
                                        if (this.chatAdapter != null && i5 < this.messages.size()) {
                                            messageObject3 = this.messages.get(i5);
                                            if (messageObject3.hasValidGroupId() && messageObject3.getGroupId() != messageObject11.getGroupId() && (groupedMessages2 = this.groupedMessagesMap.get(messageObject3.getGroupId())) != null && groupedMessages2.messages.size() > 1) {
                                                this.chatAdapter.notifyItemRangeChanged(1, groupedMessages2.messages.size() - 1);
                                            }
                                        }
                                        int i36 = this.lastStableId;
                                        this.lastStableId = i36 + 1;
                                        messageObject11.stableId = i36;
                                        this.messages.add(i5, messageObject11);
                                        if (i5 == 0 && !messageObject11.isSponsored()) {
                                            z16 = true;
                                        }
                                        chatActivityAdapter = this.chatAdapter;
                                        if (chatActivityAdapter != null) {
                                            chatActivityAdapter.notifyItemChanged(i5);
                                            this.chatAdapter.notifyItemInserted(i5);
                                        }
                                        if (messageObject11.isOut() && this.waitingForSendingMessageLoad) {
                                            this.waitingForSendingMessageLoad = false;
                                            if (!this.animatingMessageObjects.contains(messageObject11)) {
                                                this.chatActivityEnterView.hideTopView(true);
                                            }
                                            valueAnimator = this.changeBoundAnimator;
                                            if (valueAnimator != null) {
                                                valueAnimator.start();
                                            }
                                        }
                                        if (this.threadMessageId == 0 || messageObject11.isOut() || !messageObject11.messageOwner.mentioned || !messageObject11.isContentUnread()) {
                                            i7 = 1;
                                        } else {
                                            i7 = 1;
                                            this.newMentionsCount++;
                                        }
                                        if (!z10) {
                                            this.newUnreadMessageCount += i7;
                                        }
                                        i8 = messageObject11.type;
                                        if (i8 != 10 || i8 == 11) {
                                            z17 = true;
                                        }
                                        if (messageObject11.messageOwner.action instanceof TLRPC$TL_messageActionSetChatTheme) {
                                            messageObject2 = messageObject11;
                                        }
                                        z13 = z6;
                                    }
                                }
                                arrayList2.add(0, messageObject11);
                                if (this.chatAdapter != null) {
                                    messageObject3 = this.messages.get(i5);
                                    if (messageObject3.hasValidGroupId()) {
                                        this.chatAdapter.notifyItemRangeChanged(1, groupedMessages2.messages.size() - 1);
                                    }
                                }
                                int i362 = this.lastStableId;
                                this.lastStableId = i362 + 1;
                                messageObject11.stableId = i362;
                                this.messages.add(i5, messageObject11);
                                if (i5 == 0) {
                                    z16 = true;
                                }
                                chatActivityAdapter = this.chatAdapter;
                                if (chatActivityAdapter != null) {
                                }
                                if (messageObject11.isOut()) {
                                    this.waitingForSendingMessageLoad = false;
                                    if (!this.animatingMessageObjects.contains(messageObject11)) {
                                    }
                                    valueAnimator = this.changeBoundAnimator;
                                    if (valueAnimator != null) {
                                    }
                                }
                                if (this.threadMessageId == 0) {
                                }
                                i7 = 1;
                                if (!z10) {
                                }
                                i8 = messageObject11.type;
                                if (i8 != 10) {
                                }
                                z17 = true;
                                if (messageObject11.messageOwner.action instanceof TLRPC$TL_messageActionSetChatTheme) {
                                }
                                z13 = z6;
                            }
                        }
                        i4 = -1;
                        i3 = -1;
                        if (i3 == i4) {
                        }
                        if (this.currentEncryptedChat != null) {
                        }
                        messageObject11.checkLayout();
                        if (!(tLRPC$MessageAction4 instanceof TLRPC$TL_messageActionChatMigrateTo)) {
                        }
                    }
                } else {
                    j = clientUserId;
                    messageObject2 = messageObject10;
                    z5 = z15;
                    str2 = str3;
                }
                z12 = z16;
                z14 = z17;
                i27++;
                arrayList3 = arrayList;
                str3 = str2;
                z15 = z5;
                messageObject10 = messageObject2;
                clientUserId = j;
            }
            MessageObject messageObject17 = messageObject10;
            boolean z18 = z12;
            boolean z19 = z14;
            boolean z20 = z15;
            String str4 = str3;
            if (messageObject17 != null && (tLRPC$Message = messageObject17.messageOwner) != null) {
                TLRPC$MessageAction tLRPC$MessageAction5 = tLRPC$Message.action;
                if (tLRPC$MessageAction5 instanceof TLRPC$TL_messageActionSetChatTheme) {
                    setChatThemeEmoticon(((TLRPC$TL_messageActionSetChatTheme) tLRPC$MessageAction5).emoticon);
                }
            }
            if (hashMap != null) {
                getMessagesController().reloadWebPages(this.dialog_id, hashMap, this.chatMode == 1);
            }
            if (longSparseArray2 != null) {
                for (int i37 = 0; i37 < longSparseArray2.size(); i37++) {
                    MessageObject.GroupedMessages groupedMessages5 = (MessageObject.GroupedMessages) longSparseArray2.valueAt(i37);
                    int size3 = groupedMessages5.posArray.size();
                    groupedMessages5.calculate();
                    int size4 = groupedMessages5.posArray.size();
                    if (size4 - size3 > 0 && this.chatAdapter != null) {
                        ArrayList<MessageObject> arrayList9 = this.messages;
                        ArrayList<MessageObject> arrayList10 = groupedMessages5.messages;
                        int indexOf2 = arrayList9.indexOf(arrayList10.get(arrayList10.size() - 1));
                        if (indexOf2 >= 0) {
                            this.chatAdapter.notifyItemRangeChanged(indexOf2, size4);
                        }
                    }
                }
            }
            showProgressView(false);
            ChatActivityAdapter chatActivityAdapter5 = this.chatAdapter;
            if (chatActivityAdapter5 == null) {
                this.scrollToTopOnResume = true;
            }
            if (this.chatListView != null && chatActivityAdapter5 != null) {
                int findFirstVisibleItemPosition = this.chatLayoutManager.findFirstVisibleItemPosition();
                int i38 = findFirstVisibleItemPosition == -1 ? 0 : findFirstVisibleItemPosition;
                View findViewByPosition = this.chatLayoutManager.findViewByPosition(i38);
                int bottom = findViewByPosition != null ? findViewByPosition.getBottom() - this.chatListView.getMeasuredHeight() : 0;
                if (!z10) {
                    if ((i38 == 0 && bottom <= AndroidUtilities.dp(5.0f)) || z13) {
                        this.newUnreadMessageCount = 0;
                        if (!this.firstLoading && this.chatMode != 1) {
                            if (this.paused) {
                                this.scrollToTopOnResume = true;
                            } else {
                                this.forceScrollToTop = true;
                                moveScrollToLastMessage(true);
                            }
                        }
                    } else {
                        int i39 = this.newUnreadMessageCount;
                        if (i39 != 0 && (counterView = this.pagedownButtonCounter) != null && this.prevSetUnreadCount != i39) {
                            this.prevSetUnreadCount = i39;
                            counterView.setCount(i39, true);
                        }
                        this.canShowPagedownButton = true;
                        updatePagedownButtonVisibility(true);
                    }
                } else if (findViewByPosition != null) {
                    this.chatLayoutManager.scrollToPositionWithOffset(i38 + 1, (this.chatListView.getMeasuredHeight() - findViewByPosition.getBottom()) - this.chatListView.getPaddingBottom());
                }
                if (this.newMentionsCount == 0 || (simpleTextView = this.mentiondownButtonCounter) == null) {
                    i = 1;
                } else {
                    simpleTextView.setVisibility(0);
                    i = 1;
                    this.mentiondownButtonCounter.setText(String.format(str4, Integer.valueOf(this.newMentionsCount)));
                    showMentionDownButton(true, true);
                }
            } else {
                i = 1;
                this.scrollToTopOnResume = true;
            }
            z = z20;
            z3 = z18;
            z2 = z19;
        }
        if (this.chatMode == i && !arrayList.isEmpty() && (id = (messageObject = arrayList.get(0)).getId()) < 0) {
            ChatListItemAnimator chatListItemAnimator2 = this.chatListItemAnimator;
            if (chatListItemAnimator2 != null) {
                chatListItemAnimator2.setShouldAnimateEnterFromBottom(z3);
            }
            if (z3) {
                moveScrollToLastMessage(false);
            } else {
                int indexOf3 = this.messages.indexOf(messageObject);
                GridLayoutManagerFixed gridLayoutManagerFixed = this.chatLayoutManager;
                if (gridLayoutManagerFixed == null || indexOf3 <= 0 || (gridLayoutManagerFixed.findViewByPosition(this.chatAdapter.messagesStartRow + indexOf3) == null && this.chatLayoutManager.findViewByPosition((this.chatAdapter.messagesStartRow + indexOf3) - 1) == null)) {
                    AndroidUtilities.runOnUIThread(new ChatActivity$$ExternalSyntheticLambda160(this, id));
                } else {
                    this.chatLayoutManager.scrollToPositionWithOffset(this.chatAdapter.messagesStartRow + this.messages.indexOf(messageObject), getScrollOffsetForMessage(messageObject), false);
                }
            }
        }
        if (!this.messages.isEmpty() && (str = this.botUser) != null && str.length() == 0) {
            this.botUser = null;
            updateBottomOverlay();
        }
        if (z2) {
            updateTitle();
            checkAndUpdateAvatar();
        }
        if (z) {
            z4 = true;
            getMessagesController().loadFullChat(this.currentChat.id, 0, true);
        } else {
            z4 = true;
        }
        checkWaitingForReplies();
        updateReplyMessageHeader(z4);
    }

    public /* synthetic */ void lambda$processNewMessages$126(int i) {
        scrollToMessageId(i, 0, false, 0, true, 0);
    }

    private int getSponsoredMessagesCount() {
        int i = 0;
        while (i < this.messages.size() && this.messages.get(i).isSponsored()) {
            i++;
        }
        return i;
    }

    /* JADX WARN: Code restructure failed: missing block: B:45:0x00b5, code lost:
        if (r9 == r39.groupedMessagesMap.get(r6.getGroupId())) goto L46;
     */
    /* JADX WARN: Removed duplicated region for block: B:116:0x0222  */
    /* JADX WARN: Removed duplicated region for block: B:124:0x0254  */
    /* JADX WARN: Removed duplicated region for block: B:125:0x025b  */
    /* JADX WARN: Removed duplicated region for block: B:130:0x0276  */
    /* JADX WARN: Removed duplicated region for block: B:133:0x027e  */
    /* JADX WARN: Removed duplicated region for block: B:135:0x02bd  */
    /* JADX WARN: Removed duplicated region for block: B:139:0x02ca  */
    /* JADX WARN: Removed duplicated region for block: B:160:0x0342  */
    /* JADX WARN: Removed duplicated region for block: B:187:0x0409  */
    /* JADX WARN: Removed duplicated region for block: B:189:0x040c  */
    /* JADX WARN: Removed duplicated region for block: B:213:0x0489  */
    /* JADX WARN: Removed duplicated region for block: B:217:0x049e  */
    /* JADX WARN: Removed duplicated region for block: B:22:0x0043  */
    /* JADX WARN: Removed duplicated region for block: B:233:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:37:0x007f  */
    /* JADX WARN: Removed duplicated region for block: B:49:0x00c1  */
    /* JADX WARN: Removed duplicated region for block: B:60:0x0105  */
    /* JADX WARN: Removed duplicated region for block: B:84:0x0163  */
    /* JADX WARN: Removed duplicated region for block: B:87:0x016f  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void processDeletedMessages(ArrayList<Integer> arrayList, long j) {
        char c;
        int size;
        boolean z;
        int i;
        boolean z2;
        int i2;
        LongSparseArray longSparseArray;
        boolean z3;
        boolean z4;
        boolean z5;
        int i3;
        int i4;
        ChatAvatarContainer chatAvatarContainer;
        TLRPC$User tLRPC$User;
        int i5;
        char c2;
        LongSparseArray longSparseArray2;
        ChatActivityAdapter chatActivityAdapter;
        boolean z6;
        boolean z7;
        boolean z8;
        int i6;
        long j2;
        boolean z9;
        int indexOf;
        boolean z10;
        ArrayList<MessageObject> arrayList2;
        int i7;
        ActionBarLayout actionBarLayout;
        int size2;
        int i8;
        ArrayList arrayList3 = new ArrayList();
        if (ChatObject.isChannel(this.currentChat)) {
            if (j != 0 || this.mergeDialogId == 0) {
                if (j != (-this.dialog_id)) {
                    return;
                }
            } else {
                c = 1;
                size = arrayList.size();
                if (this.threadMessageObject != null && (actionBarLayout = this.parentLayout) != null) {
                    size2 = actionBarLayout.fragmentsStack.size() - 1;
                    for (i8 = 0; i8 < size2; i8++) {
                        BaseFragment baseFragment = this.parentLayout.fragmentsStack.get(i8);
                        if (baseFragment != this && (baseFragment instanceof ChatActivity)) {
                            ChatActivity chatActivity = (ChatActivity) baseFragment;
                            if (chatActivity.needRemovePreviousSameChatActivity && chatActivity.dialog_id == this.dialog_id && chatActivity.getChatMode() == getChatMode()) {
                                z = true;
                                break;
                            }
                        }
                    }
                }
                z = false;
                i = 0;
                z2 = false;
                i2 = 0;
                boolean z11 = false;
                boolean z12 = false;
                longSparseArray = null;
                z3 = false;
                z4 = false;
                LongSparseArray longSparseArray3 = null;
                while (i < size) {
                    Integer num = arrayList.get(i);
                    MessageObject messageObject = this.messagesDict[c].get(num.intValue());
                    MessageObject messageObject2 = this.selectedObject;
                    if (messageObject2 == null || messageObject != messageObject2) {
                        if (messageObject == null || (r9 = this.selectedObjectGroup) == null) {
                            z6 = z11;
                            z7 = z12;
                        } else {
                            z6 = z11;
                            z7 = z12;
                        }
                        if (c == 0) {
                            if (this.pinnedMessageObjects.containsKey(num)) {
                                this.pinnedMessageObjects.remove(num);
                                this.pinnedMessageIds.remove(num);
                                this.loadedPinnedMessagesCount = this.pinnedMessageIds.size();
                                int i9 = this.totalPinnedMessagesCount - 1;
                                this.totalPinnedMessagesCount = i9;
                                if (i9 < 0) {
                                    i7 = 0;
                                    this.totalPinnedMessagesCount = 0;
                                } else {
                                    i7 = 0;
                                }
                                if (this.currentPinnedMessageId == num.intValue()) {
                                    this.currentPinnedMessageId = i7;
                                }
                            }
                            this.repliesMessagesDict.remove(num.intValue());
                            updateReplyMessageOwners(num.intValue(), null);
                        }
                        if (messageObject == null) {
                            TLRPC$Message tLRPC$Message = messageObject.messageOwner;
                            if (tLRPC$Message.reply_to != null && !(tLRPC$Message.action instanceof TLRPC$TL_messageActionPinMessage)) {
                                int replyAnyMsgId = messageObject.getReplyAnyMsgId();
                                MessageObject messageObject3 = this.threadMessageObject;
                                if (messageObject3 != null && messageObject3.getId() == replyAnyMsgId) {
                                    if (!z && this.threadMessageObject.hasReplies()) {
                                        this.threadMessageObject.messageOwner.replies.replies--;
                                    }
                                    if (this.replyOriginalMessageId != 0) {
                                        i2++;
                                    }
                                    z2 = true;
                                } else {
                                    MessageObject messageObject4 = this.messagesDict[c].get(replyAnyMsgId);
                                    if (messageObject4 != null && messageObject4.hasReplies()) {
                                        z9 = true;
                                        messageObject4.messageOwner.replies.replies--;
                                        messageObject4.viewsReloaded = false;
                                        messageObject.deleted = z9;
                                        if (this.editingMessageObject == messageObject) {
                                            hideFieldPanel(z9);
                                        }
                                        indexOf = this.messages.indexOf(messageObject);
                                        if (indexOf == -1) {
                                            if (messageObject.scheduled) {
                                                int i10 = this.scheduledMessagesCount;
                                                int i11 = z9 ? 1 : 0;
                                                int i12 = z9 ? 1 : 0;
                                                this.scheduledMessagesCount = i10 - i11;
                                                z4 = true;
                                            }
                                            if (this.selectedMessagesIds[c].indexOfKey(num.intValue()) >= 0) {
                                                boolean z13 = i == size + (-1);
                                                addToSelectedMessages(messageObject, false, z13);
                                                z12 = z13;
                                                z11 = true;
                                            } else {
                                                z11 = z6;
                                                z12 = z7;
                                            }
                                            MessageObject remove = this.messages.remove(indexOf);
                                            ChatActivityAdapter chatActivityAdapter2 = this.chatAdapter;
                                            if (chatActivityAdapter2 != null) {
                                                arrayList3.add(Integer.valueOf(chatActivityAdapter2.messagesStartRow + indexOf));
                                            }
                                            j2 = 0;
                                            if (remove.getGroupId() != 0) {
                                                i6 = size;
                                                z8 = z;
                                                MessageObject.GroupedMessages groupedMessages = this.groupedMessagesMap.get(remove.getGroupId());
                                                if (groupedMessages != null) {
                                                    if (longSparseArray == null) {
                                                        longSparseArray = new LongSparseArray();
                                                        longSparseArray3 = new LongSparseArray();
                                                    }
                                                    LongSparseArray longSparseArray4 = longSparseArray3;
                                                    longSparseArray.put(groupedMessages.groupId, groupedMessages);
                                                    if (longSparseArray4.get(groupedMessages.groupId) == null) {
                                                        z10 = z2;
                                                        longSparseArray4.put(groupedMessages.groupId, Integer.valueOf(groupedMessages.messages.size()));
                                                    } else {
                                                        z10 = z2;
                                                    }
                                                    groupedMessages.messages.remove(messageObject);
                                                    longSparseArray3 = longSparseArray4;
                                                    this.messagesDict[c].remove(num.intValue());
                                                    arrayList2 = this.messagesByDays.get(messageObject.dateKey);
                                                    if (arrayList2 != null) {
                                                        arrayList2.remove(messageObject);
                                                        if (arrayList2.isEmpty()) {
                                                            this.messagesByDays.remove(messageObject.dateKey);
                                                            if (indexOf < this.messages.size()) {
                                                                this.messages.remove(indexOf);
                                                                ChatActivityAdapter chatActivityAdapter3 = this.chatAdapter;
                                                                if (chatActivityAdapter3 != null) {
                                                                    arrayList3.add(Integer.valueOf(chatActivityAdapter3.messagesStartRow + indexOf));
                                                                }
                                                            }
                                                        }
                                                    }
                                                    z2 = z10;
                                                    z3 = true;
                                                    i++;
                                                    size = i6;
                                                    z = z8;
                                                }
                                            } else {
                                                i6 = size;
                                                z8 = z;
                                            }
                                            z10 = z2;
                                            this.messagesDict[c].remove(num.intValue());
                                            arrayList2 = this.messagesByDays.get(messageObject.dateKey);
                                            if (arrayList2 != null) {
                                            }
                                            z2 = z10;
                                            z3 = true;
                                            i++;
                                            size = i6;
                                            z = z8;
                                        } else {
                                            i6 = size;
                                            z8 = z;
                                        }
                                    }
                                }
                            }
                            z9 = true;
                            messageObject.deleted = z9;
                            if (this.editingMessageObject == messageObject) {
                            }
                            indexOf = this.messages.indexOf(messageObject);
                            if (indexOf == -1) {
                            }
                        } else {
                            i6 = size;
                            z8 = z;
                        }
                        j2 = 0;
                        z11 = z6;
                        z12 = z7;
                        i++;
                        size = i6;
                        z = z8;
                    } else {
                        z6 = z11;
                        z7 = z12;
                    }
                    closeMenu();
                    if (c == 0) {
                    }
                    if (messageObject == null) {
                    }
                    j2 = 0;
                    z11 = z6;
                    z12 = z7;
                    i++;
                    size = i6;
                    z = z8;
                }
                z5 = z11;
                boolean z14 = z12;
                if (z2) {
                    updateReplyMessageHeader(true);
                }
                if (i2 != 0) {
                    int i13 = -i2;
                    getNotificationCenter().postNotificationName(NotificationCenter.changeRepliesCounter, Long.valueOf(this.replyOriginalChat.id), Integer.valueOf(this.replyOriginalMessageId), Integer.valueOf(i13));
                    getMessagesStorage().updateRepliesCount(this.replyOriginalChat.id, this.replyOriginalMessageId, null, 0, i13);
                }
                if (z5) {
                    if (!z14) {
                        addToSelectedMessages(null, false, true);
                    }
                    updateActionModeTitle();
                }
                if (longSparseArray != null) {
                    int i14 = 0;
                    while (i14 < longSparseArray.size()) {
                        MessageObject.GroupedMessages groupedMessages2 = (MessageObject.GroupedMessages) longSparseArray.valueAt(i14);
                        if (this.chatListItemAnimator != null) {
                            if (groupedMessages2.messages.size() == 1) {
                                this.chatListItemAnimator.groupWillTransformToSingleMessage(groupedMessages2);
                            } else {
                                this.chatListItemAnimator.groupWillChanged(groupedMessages2);
                            }
                        }
                        if (groupedMessages2.messages.isEmpty()) {
                            this.groupedMessagesMap.remove(groupedMessages2.groupId);
                        } else {
                            groupedMessages2.calculate();
                            ArrayList<MessageObject> arrayList4 = groupedMessages2.messages;
                            int indexOf2 = this.messages.indexOf(arrayList4.get(arrayList4.size() - 1));
                            if (indexOf2 >= 0 && (chatActivityAdapter = this.chatAdapter) != null) {
                                int i15 = indexOf2 + chatActivityAdapter.messagesStartRow;
                                long j3 = groupedMessages2.groupId;
                                longSparseArray2 = longSparseArray3;
                                chatActivityAdapter.notifyItemRangeChanged(i15, ((Integer) longSparseArray2.get(j3)).intValue());
                                i14++;
                                longSparseArray3 = longSparseArray2;
                            }
                        }
                        longSparseArray2 = longSparseArray3;
                        i14++;
                        longSparseArray3 = longSparseArray2;
                    }
                }
                if (!this.messages.isEmpty()) {
                    if (!this.endReached[0] && !this.loading) {
                        showProgressView(false);
                        RecyclerListView recyclerListView = this.chatListView;
                        if (recyclerListView != null) {
                            recyclerListView.setEmptyView(null);
                        }
                        if (this.currentEncryptedChat == null) {
                            int[] iArr = this.maxMessageId;
                            c2 = 1;
                            iArr[1] = Integer.MAX_VALUE;
                            i5 = 0;
                            iArr[0] = Integer.MAX_VALUE;
                            int[] iArr2 = this.minMessageId;
                            iArr2[1] = Integer.MIN_VALUE;
                            iArr2[0] = Integer.MIN_VALUE;
                        } else {
                            c2 = 1;
                            i5 = 0;
                            int[] iArr3 = this.maxMessageId;
                            iArr3[1] = Integer.MIN_VALUE;
                            iArr3[0] = Integer.MIN_VALUE;
                            int[] iArr4 = this.minMessageId;
                            iArr4[1] = Integer.MAX_VALUE;
                            iArr4[0] = Integer.MAX_VALUE;
                        }
                        int[] iArr5 = this.maxDate;
                        iArr5[c2] = Integer.MIN_VALUE;
                        iArr5[i5] = Integer.MIN_VALUE;
                        int[] iArr6 = this.minDate;
                        iArr6[c2] = i5;
                        iArr6[i5] = i5;
                        this.waitingForLoad.add(Integer.valueOf(this.lastLoadIndex));
                        MessagesController messagesController = getMessagesController();
                        long j4 = this.dialog_id;
                        long j5 = this.mergeDialogId;
                        boolean z15 = !this.cacheEndReached[0];
                        int i16 = this.minDate[0];
                        int i17 = this.classGuid;
                        int i18 = this.chatMode;
                        int i19 = this.threadMessageId;
                        int i20 = this.replyMaxReadId;
                        int i21 = this.lastLoadIndex;
                        this.lastLoadIndex = i21 + 1;
                        messagesController.loadMessages(j4, j5, false, 30, 0, 0, z15, i16, i17, 0, 0, i18, i19, i20, i21);
                        this.loading = true;
                    } else {
                        if (this.botButtons != null) {
                            this.botButtons = null;
                            ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
                            if (chatActivityEnterView != null) {
                                chatActivityEnterView.setButtons(null, false);
                            }
                        }
                        if (this.currentEncryptedChat == null && (tLRPC$User = this.currentUser) != null && tLRPC$User.bot && this.botUser == null) {
                            this.botUser = "";
                            updateBottomOverlay();
                        }
                    }
                    i3 = 0;
                    this.canShowPagedownButton = false;
                    updatePagedownButtonVisibility(true);
                    showMentionDownButton(false, true);
                } else {
                    i3 = 0;
                }
                if (!z3) {
                    if (this.chatMode == 2 && (chatAvatarContainer = this.avatarContainer) != null) {
                        chatAvatarContainer.setTitle(LocaleController.formatPluralString("PinnedMessagesCount", getPinnedMessagesCount(), new Object[i3]));
                    }
                    ChatActivityAdapter chatActivityAdapter4 = this.chatAdapter;
                    if (chatActivityAdapter4 != null) {
                        int i22 = chatActivityAdapter4.loadingUpRow;
                        int i23 = this.chatAdapter.loadingDownRow;
                        int size3 = arrayList3.size();
                        for (int i24 = 0; i24 < size3; i24++) {
                            this.chatAdapter.notifyItemRemoved(((Integer) arrayList3.get(i24)).intValue());
                        }
                        if (!isThreadChat() || this.messages.size() <= 3) {
                            i4 = 0;
                            removeUnreadPlane(false);
                        } else {
                            i4 = 0;
                        }
                        if (this.messages.isEmpty()) {
                            if (i22 >= 0) {
                                this.chatAdapter.notifyItemRemoved(i4);
                            }
                            if (i23 >= 0) {
                                this.chatAdapter.notifyItemRemoved(i4);
                            }
                        } else {
                            ChatActivityAdapter chatActivityAdapter5 = this.chatAdapter;
                            chatActivityAdapter5.notifyItemRangeChanged(chatActivityAdapter5.messagesStartRow, this.messages.size());
                        }
                    }
                    updateVisibleRows();
                } else if (this.threadMessageId == 0) {
                    this.first_unread_id = 0;
                    this.last_message_id = 0;
                    this.createUnreadMessageAfterId = 0;
                    removeMessageObject(this.unreadMessageObject);
                    this.unreadMessageObject = null;
                }
                if (z4) {
                    return;
                }
                updateScheduledInterface(true);
                return;
            }
        } else if (j != 0) {
            return;
        }
        c = 0;
        size = arrayList.size();
        if (this.threadMessageObject != null) {
            size2 = actionBarLayout.fragmentsStack.size() - 1;
            while (i8 < size2) {
            }
        }
        z = false;
        i = 0;
        z2 = false;
        i2 = 0;
        boolean z112 = false;
        boolean z122 = false;
        longSparseArray = null;
        z3 = false;
        z4 = false;
        LongSparseArray longSparseArray32 = null;
        while (i < size) {
        }
        z5 = z112;
        boolean z142 = z122;
        if (z2) {
        }
        if (i2 != 0) {
        }
        if (z5) {
        }
        if (longSparseArray != null) {
        }
        if (!this.messages.isEmpty()) {
        }
        if (!z3) {
        }
        if (z4) {
        }
    }

    private void replaceMessageObjects(ArrayList<MessageObject> arrayList, int i, boolean z) {
        ChatActivityAdapter chatActivityAdapter;
        int i2;
        MessageObject.GroupedMessages groupedMessages;
        int indexOf;
        ArrayList<TLRPC$PhotoSize> arrayList2;
        MessageObject messageObject;
        TLRPC$User tLRPC$User = null;
        LongSparseArray longSparseArray = null;
        int i3 = 0;
        while (i3 < arrayList.size()) {
            MessageObject messageObject2 = arrayList.get(i3);
            if (this.pinnedMessageObjects.get(Integer.valueOf(messageObject2.getId())) != null) {
                this.pinnedMessageObjects.put(Integer.valueOf(messageObject2.getId()), messageObject2);
            }
            MessageObject messageObject3 = this.messagesDict[i].get(messageObject2.getId());
            if (this.pinnedMessageObjects.containsKey(Integer.valueOf(messageObject2.getId()))) {
                this.pinnedMessageObjects.put(Integer.valueOf(messageObject2.getId()), messageObject2);
                if (messageObject2.getId() == this.currentPinnedMessageId) {
                    updatePinnedMessageView(true);
                }
            }
            if (i == 0 && this.repliesMessagesDict.indexOfKey(messageObject2.getId()) >= 0) {
                this.repliesMessagesDict.put(messageObject2.getId(), messageObject2);
            }
            if (messageObject3 != null && (!z || messageObject3.messageOwner.date == messageObject2.messageOwner.date)) {
                if (z) {
                    arrayList.remove(i3);
                    i3--;
                }
                addToPolls(messageObject2, messageObject3);
                if (messageObject2.type >= 0) {
                    MessageObject messageObject4 = messageObject3.replyMessageObject;
                    if (messageObject4 != null) {
                        messageObject2.replyMessageObject = messageObject4;
                        TLRPC$MessageAction tLRPC$MessageAction = messageObject2.messageOwner.action;
                        if (tLRPC$MessageAction instanceof TLRPC$TL_messageActionGameScore) {
                            messageObject2.generateGameMessageText(tLRPC$User);
                        } else if (tLRPC$MessageAction instanceof TLRPC$TL_messageActionPaymentSent) {
                            messageObject2.generatePaymentSentMessageText(tLRPC$User);
                        }
                    }
                    if (!messageObject3.isEditing()) {
                        if (messageObject3.getFileName().equals(messageObject2.getFileName())) {
                            messageObject2.messageOwner.attachPath = messageObject3.messageOwner.attachPath;
                            messageObject2.attachPathExists = messageObject3.attachPathExists;
                            messageObject2.mediaExists = messageObject3.mediaExists;
                        } else {
                            messageObject2.checkMediaExistance();
                        }
                    }
                    this.messagesDict[i].put(messageObject3.getId(), messageObject2);
                } else {
                    this.messagesDict[i].remove(messageObject3.getId());
                }
                int indexOf2 = this.messages.indexOf(messageObject3);
                if (indexOf2 >= 0) {
                    ArrayList<MessageObject> arrayList3 = this.messagesByDays.get(messageObject3.dateKey);
                    int indexOf3 = arrayList3 != null ? arrayList3.indexOf(messageObject3) : -1;
                    if (messageObject3.getGroupId() != 0 && (groupedMessages = this.groupedMessagesMap.get(messageObject3.getGroupId())) != null && (indexOf = groupedMessages.messages.indexOf(messageObject3)) >= 0) {
                        if (messageObject3.getGroupId() != messageObject2.getGroupId()) {
                            this.groupedMessagesMap.put(messageObject2.getGroupId(), groupedMessages);
                        }
                        if (!messageObject2.isMusic() && !messageObject2.isDocument() && ((arrayList2 = messageObject2.photoThumbs) == null || arrayList2.isEmpty())) {
                            if (longSparseArray == null) {
                                longSparseArray = new LongSparseArray();
                            }
                            longSparseArray.put(groupedMessages.groupId, groupedMessages);
                            if (indexOf <= 0 || indexOf >= groupedMessages.messages.size() - 1) {
                                messageObject = messageObject3;
                            } else {
                                MessageObject.GroupedMessages groupedMessages2 = new MessageObject.GroupedMessages();
                                messageObject = messageObject3;
                                groupedMessages2.groupId = Utilities.random.nextLong();
                                ArrayList<MessageObject> arrayList4 = groupedMessages2.messages;
                                ArrayList<MessageObject> arrayList5 = groupedMessages.messages;
                                int i4 = indexOf + 1;
                                arrayList4.addAll(arrayList5.subList(i4, arrayList5.size()));
                                for (int i5 = 0; i5 < groupedMessages2.messages.size(); i5++) {
                                    groupedMessages2.messages.get(i5).localGroupId = groupedMessages2.groupId;
                                    groupedMessages.messages.remove(i4);
                                }
                                longSparseArray.put(groupedMessages2.groupId, groupedMessages2);
                                this.groupedMessagesMap.put(groupedMessages2.groupId, groupedMessages2);
                            }
                            groupedMessages.messages.remove(indexOf);
                            messageObject3 = messageObject;
                        } else {
                            groupedMessages.messages.set(indexOf, messageObject2);
                            messageObject3 = messageObject3;
                            MessageObject.GroupedMessagePosition remove = groupedMessages.positions.remove(messageObject3);
                            if (remove != null) {
                                groupedMessages.positions.put(messageObject2, remove);
                            }
                            if (longSparseArray == null) {
                                longSparseArray = new LongSparseArray();
                            }
                            longSparseArray.put(groupedMessages.groupId, groupedMessages);
                        }
                    }
                    if (messageObject2.type >= 0) {
                        messageObject2.stableId = messageObject3.stableId;
                        messageObject2.messageOwner.premiumEffectWasPlayed = messageObject3.messageOwner.premiumEffectWasPlayed;
                        messageObject2.forcePlayEffect = messageObject3.forcePlayEffect;
                        this.messages.set(indexOf2, messageObject2);
                        ChatActivityAdapter chatActivityAdapter2 = this.chatAdapter;
                        if (chatActivityAdapter2 != null) {
                            chatActivityAdapter2.updateRowAtPosition(chatActivityAdapter2.messagesStartRow + indexOf2);
                        }
                        if (indexOf3 >= 0) {
                            arrayList3.set(indexOf3, messageObject2);
                        }
                    } else {
                        this.messages.remove(indexOf2);
                        ChatActivityAdapter chatActivityAdapter3 = this.chatAdapter;
                        if (chatActivityAdapter3 != null) {
                            chatActivityAdapter3.notifyItemRemoved(chatActivityAdapter3.messagesStartRow + indexOf2);
                        }
                        if (indexOf3 >= 0) {
                            arrayList3.remove(indexOf3);
                            if (arrayList3.isEmpty()) {
                                this.messagesByDays.remove(messageObject3.dateKey);
                                this.messages.remove(indexOf2);
                                int i6 = this.chatAdapter.loadingUpRow;
                                int i7 = this.chatAdapter.loadingDownRow;
                                ChatActivityAdapter chatActivityAdapter4 = this.chatAdapter;
                                chatActivityAdapter4.notifyItemRemoved(chatActivityAdapter4.messagesStartRow + indexOf2);
                                if (this.messages.isEmpty()) {
                                    if (i6 >= 0) {
                                        i2 = 0;
                                        this.chatAdapter.notifyItemRemoved(0);
                                    } else {
                                        i2 = 0;
                                    }
                                    if (i7 >= 0) {
                                        this.chatAdapter.notifyItemRemoved(i2);
                                    }
                                    updateReplyMessageOwners(messageObject3.getId(), messageObject2);
                                }
                            }
                        }
                    }
                }
                updateReplyMessageOwners(messageObject3.getId(), messageObject2);
            }
            i3++;
            tLRPC$User = null;
        }
        if (longSparseArray != null) {
            for (int i8 = 0; i8 < longSparseArray.size(); i8++) {
                MessageObject.GroupedMessages groupedMessages3 = (MessageObject.GroupedMessages) longSparseArray.valueAt(i8);
                if (groupedMessages3.messages.isEmpty()) {
                    this.groupedMessagesMap.remove(groupedMessages3.groupId);
                } else {
                    groupedMessages3.calculate();
                    ArrayList<MessageObject> arrayList6 = groupedMessages3.messages;
                    int indexOf4 = this.messages.indexOf(arrayList6.get(arrayList6.size() - 1));
                    if (indexOf4 >= 0 && (chatActivityAdapter = this.chatAdapter) != null) {
                        chatActivityAdapter.notifyItemRangeChanged(indexOf4 + chatActivityAdapter.messagesStartRow, groupedMessages3.messages.size());
                        ChatListItemAnimator chatListItemAnimator = this.chatListItemAnimator;
                        if (chatListItemAnimator != null) {
                            chatListItemAnimator.groupWillChanged(groupedMessages3);
                        }
                    }
                }
            }
        }
    }

    private void migrateToNewChat(MessageObject messageObject) {
        BaseFragment baseFragment;
        ArrayList<BaseFragment> arrayList;
        ActionBarLayout actionBarLayout = this.parentLayout;
        if (actionBarLayout == null) {
            return;
        }
        long j = messageObject.messageOwner.action.channel_id;
        if (actionBarLayout.fragmentsStack.size() > 0) {
            baseFragment = this.parentLayout.fragmentsStack.get(arrayList.size() - 1);
        } else {
            baseFragment = null;
        }
        int indexOf = this.parentLayout.fragmentsStack.indexOf(this);
        ActionBarLayout actionBarLayout2 = this.parentLayout;
        if (indexOf > 0 && !(baseFragment instanceof ChatActivity) && !(baseFragment instanceof ProfileActivity) && this.currentChat.creator) {
            int size = actionBarLayout2.fragmentsStack.size() - 1;
            while (indexOf < size) {
                BaseFragment baseFragment2 = actionBarLayout2.fragmentsStack.get(indexOf);
                if (baseFragment2 instanceof ChatActivity) {
                    Bundle bundle = new Bundle();
                    bundle.putLong("chat_id", j);
                    actionBarLayout2.addFragmentToStack(new ChatActivity(bundle), indexOf);
                    baseFragment2.removeSelfFromStack();
                } else if (baseFragment2 instanceof ProfileActivity) {
                    Bundle bundle2 = new Bundle();
                    bundle2.putLong("chat_id", j);
                    actionBarLayout2.addFragmentToStack(new ProfileActivity(bundle2), indexOf);
                    baseFragment2.removeSelfFromStack();
                } else if (baseFragment2 instanceof ChatEditActivity) {
                    Bundle bundle3 = new Bundle();
                    bundle3.putLong("chat_id", j);
                    actionBarLayout2.addFragmentToStack(new ChatEditActivity(bundle3), indexOf);
                    baseFragment2.removeSelfFromStack();
                } else if (baseFragment2 instanceof ChatUsersActivity) {
                    if (!((ChatUsersActivity) baseFragment2).hasSelectType()) {
                        Bundle arguments = baseFragment2.getArguments();
                        arguments.putLong("chat_id", j);
                        actionBarLayout2.addFragmentToStack(new ChatUsersActivity(arguments), indexOf);
                    }
                    baseFragment2.removeSelfFromStack();
                }
                indexOf++;
            }
        } else {
            AndroidUtilities.runOnUIThread(new ChatActivity$$ExternalSyntheticLambda196(this, baseFragment, messageObject, actionBarLayout2));
        }
        AndroidUtilities.runOnUIThread(new ChatActivity$$ExternalSyntheticLambda170(this, j), 1000L);
    }

    public /* synthetic */ void lambda$migrateToNewChat$127(BaseFragment baseFragment, MessageObject messageObject, ActionBarLayout actionBarLayout) {
        if (baseFragment instanceof NotificationCenter.NotificationCenterDelegate) {
            getNotificationCenter().removeObserver((NotificationCenter.NotificationCenterDelegate) baseFragment, NotificationCenter.closeChats);
        }
        getNotificationCenter().postNotificationName(NotificationCenter.closeChats, new Object[0]);
        Bundle bundle = new Bundle();
        bundle.putLong("chat_id", messageObject.messageOwner.action.channel_id);
        actionBarLayout.addFragmentToStack(new ChatActivity(bundle), actionBarLayout.fragmentsStack.size() - 1);
        baseFragment.finishFragment();
    }

    public /* synthetic */ void lambda$migrateToNewChat$128(long j) {
        getMessagesController().loadFullChat(j, 0, true);
    }

    private void addToPolls(MessageObject messageObject, MessageObject messageObject2) {
        long pollId = messageObject.getPollId();
        if (pollId != 0) {
            ArrayList<MessageObject> arrayList = this.polls.get(pollId);
            if (arrayList == null) {
                arrayList = new ArrayList<>();
                this.polls.put(pollId, arrayList);
            }
            arrayList.add(messageObject);
            if (messageObject2 == null) {
                return;
            }
            arrayList.remove(messageObject2);
        }
    }

    public void showInfoHint(MessageObject messageObject, CharSequence charSequence, int i) {
        if (this.topUndoView == null) {
            return;
        }
        ChatActivity$$ExternalSyntheticLambda164 chatActivity$$ExternalSyntheticLambda164 = new ChatActivity$$ExternalSyntheticLambda164(this, i);
        this.topUndoView.showWithAction(0L, 18, charSequence, chatActivity$$ExternalSyntheticLambda164, chatActivity$$ExternalSyntheticLambda164);
        this.hintMessageObject = messageObject;
        this.hintMessageType = i;
    }

    public /* synthetic */ void lambda$showInfoHint$129(int i) {
        ChatMessageCell chatMessageCell;
        MessageObject messageObject;
        RecyclerListView recyclerListView = this.chatListView;
        if (recyclerListView != null) {
            int childCount = recyclerListView.getChildCount();
            for (int i2 = 0; i2 < childCount; i2++) {
                View childAt = this.chatListView.getChildAt(i2);
                if ((childAt instanceof ChatMessageCell) && (messageObject = (chatMessageCell = (ChatMessageCell) childAt).getMessageObject()) != null && messageObject.equals(this.hintMessageObject)) {
                    chatMessageCell.showHintButton(true, true, i);
                }
            }
        }
        this.hintMessageObject = null;
    }

    public void showPollSolution(MessageObject messageObject, TLRPC$PollResults tLRPC$PollResults) {
        CharSequence charSequence;
        if (tLRPC$PollResults == null || TextUtils.isEmpty(tLRPC$PollResults.solution)) {
            return;
        }
        if (!tLRPC$PollResults.solution_entities.isEmpty()) {
            charSequence = new SpannableStringBuilder(tLRPC$PollResults.solution);
            MessageObject.addEntitiesToText(charSequence, tLRPC$PollResults.solution_entities, false, true, true, false);
        } else {
            charSequence = tLRPC$PollResults.solution;
        }
        showInfoHint(messageObject, charSequence, 0);
    }

    public void updateSearchButtons(int i, int i2, int i3) {
        ImageView imageView = this.searchUpButton;
        if (imageView != null) {
            imageView.setEnabled((i & 1) != 0);
            this.searchDownButton.setEnabled((i & 2) != 0);
            ImageView imageView2 = this.searchUpButton;
            float f = 1.0f;
            imageView2.setAlpha(imageView2.isEnabled() ? 1.0f : 0.5f);
            ImageView imageView3 = this.searchDownButton;
            if (!imageView3.isEnabled()) {
                f = 0.5f;
            }
            imageView3.setAlpha(f);
            if (i3 < 0) {
                this.searchCountText.setCount("", 0, false);
            } else if (i3 == 0) {
                this.searchCountText.setCount(LocaleController.getString("NoResult", 2131626910), 0, false);
            } else {
                int i4 = i2 + 1;
                this.searchCountText.setCount(LocaleController.formatString("OfCounted", 2131627130, Integer.valueOf(i4), Integer.valueOf(i3)), i4, true);
            }
        }
    }

    @Override // org.telegram.ui.ActionBar.BaseFragment
    public boolean needDelayOpenAnimation() {
        if (this.chatMode != 1 && getParentLayout().fragmentsStack.size() > 1) {
            BaseFragment baseFragment = getParentLayout().fragmentsStack.get(getParentLayout().fragmentsStack.size() - 2);
            if ((baseFragment instanceof ChatActivity) && ((ChatActivity) baseFragment).isKeyboardVisible()) {
                return false;
            }
        }
        return this.firstLoading;
    }

    @Override // org.telegram.ui.ActionBar.BaseFragment
    public void onBecomeFullyVisible() {
        this.isFullyVisible = true;
        super.onBecomeFullyVisible();
        if (this.showCloseChatDialogLater) {
            showDialog(this.closeChatDialog);
        }
        ActionBarLayout actionBarLayout = this.parentLayout;
        if (actionBarLayout == null || actionBarLayout.getDrawerLayoutContainer() == null) {
            return;
        }
        this.parentLayout.getDrawerLayoutContainer().setBehindKeyboardColor(getThemedColor("windowBackgroundWhite"));
    }

    @Override // org.telegram.ui.ActionBar.BaseFragment
    public void onBecomeFullyHidden() {
        this.isFullyVisible = false;
        hideUndoViews();
        ActionBarLayout actionBarLayout = this.parentLayout;
        if (actionBarLayout == null || actionBarLayout.getDrawerLayoutContainer() == null) {
            return;
        }
        this.parentLayout.getDrawerLayoutContainer().setBehindKeyboardColor(Theme.getColor("windowBackgroundWhite"));
    }

    @Override // org.telegram.ui.ActionBar.BaseFragment
    public void saveKeyboardPositionBeforeTransition() {
        Runnable runnable = this.cancelFixedPositionRunnable;
        if (runnable != null) {
            AndroidUtilities.cancelRunOnUIThread(runnable);
        }
        ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        if (chatActivityEnterView != null && this.contentView != null && chatActivityEnterView.getAdjustPanLayoutHelper() != null && !this.chatActivityEnterView.getAdjustPanLayoutHelper().animationInProgress()) {
            this.fixedKeyboardHeight = this.contentView.getKeyboardHeight();
        } else {
            this.fixedKeyboardHeight = -1;
        }
    }

    public void removeKeyboardPositionBeforeTransition() {
        if (this.fixedKeyboardHeight > 0) {
            ChatActivity$$ExternalSyntheticLambda145 chatActivity$$ExternalSyntheticLambda145 = new ChatActivity$$ExternalSyntheticLambda145(this);
            this.cancelFixedPositionRunnable = chatActivity$$ExternalSyntheticLambda145;
            AndroidUtilities.runOnUIThread(chatActivity$$ExternalSyntheticLambda145, 200L);
        }
    }

    public /* synthetic */ void lambda$removeKeyboardPositionBeforeTransition$130() {
        this.cancelFixedPositionRunnable = null;
        this.fixedKeyboardHeight = -1;
        View view = this.fragmentView;
        if (view != null) {
            view.requestLayout();
        }
    }

    @Override // org.telegram.ui.ActionBar.BaseFragment
    public void onTransitionAnimationStart(boolean z, boolean z2) {
        int[] iArr;
        super.onTransitionAnimationStart(z, z2);
        if (z) {
            if (!this.fragmentOpened) {
                this.fragmentOpened = true;
                updateMessagesVisiblePart(false);
            }
            iArr = this.transitionAnimationIndex == 0 ? new int[]{NotificationCenter.dialogsNeedReload, NotificationCenter.closeChats, NotificationCenter.botKeyboardDidLoad, NotificationCenter.needDeleteDialog, NotificationCenter.messagesDidLoad} : new int[]{NotificationCenter.dialogsNeedReload, NotificationCenter.closeChats, NotificationCenter.botKeyboardDidLoad, NotificationCenter.needDeleteDialog};
            this.openAnimationEnded = false;
            if (!z2) {
                this.openAnimationStartTime = SystemClock.elapsedRealtime();
            }
        } else {
            iArr = UserObject.isUserSelf(this.currentUser) ? new int[]{NotificationCenter.dialogsNeedReload, NotificationCenter.closeChats, NotificationCenter.botKeyboardDidLoad, NotificationCenter.needDeleteDialog, NotificationCenter.mediaDidLoad} : null;
            ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
            if (chatActivityEnterView != null) {
                chatActivityEnterView.onBeginHide();
            }
        }
        checkShowBlur(true);
        this.transitionAnimationIndex = getNotificationCenter().setAnimationInProgress(this.transitionAnimationIndex, iArr);
    }

    /* JADX WARN: Removed duplicated region for block: B:92:0x018e  */
    /* JADX WARN: Removed duplicated region for block: B:96:0x0196  */
    /* JADX WARN: Removed duplicated region for block: B:97:0x01a4  */
    @Override // org.telegram.ui.ActionBar.BaseFragment
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void onTransitionAnimationEnd(boolean z, boolean z2) {
        ActionBarLayout actionBarLayout;
        String str;
        MessageObject messageObject;
        ActionBarLayout actionBarLayout2;
        Bulletin bulletin;
        super.onTransitionAnimationEnd(z, z2);
        if (z && z2 && this.showPinBulletin && (bulletin = this.pinBulletin) != null) {
            bulletin.show();
            this.showPinBulletin = false;
        }
        Runnable runnable = this.cancelFixedPositionRunnable;
        if (runnable != null) {
            AndroidUtilities.cancelRunOnUIThread(runnable);
        }
        this.fixedKeyboardHeight = -1;
        if (z) {
            checkShowBlur(false);
            this.openAnimationEnded = true;
            getNotificationCenter().onAnimationFinish(this.transitionAnimationIndex);
            if (Build.VERSION.SDK_INT >= 21) {
                createChatAttachView();
            }
            checkGroupCallJoin(this.lastCallCheckFromServer);
            if (this.chatActivityEnterView.hasRecordVideo() && !this.chatActivityEnterView.isSendButtonVisible()) {
                TLRPC$Chat tLRPC$Chat = this.currentChat;
                boolean z3 = tLRPC$Chat != null && ChatObject.isChannel(tLRPC$Chat) && !this.currentChat.megagroup;
                SharedPreferences globalMainSettings = MessagesController.getGlobalMainSettings();
                String str2 = z3 ? "needShowRoundHintChannel2" : "needShowRoundHint2";
                int i = globalMainSettings.getInt(str2, 0);
                if (i < 3 && Utilities.random.nextFloat() <= 0.2f) {
                    showVoiceHint(false, this.chatActivityEnterView.isInVideoMode());
                    globalMainSettings.edit().putInt(str2, i + 1).commit();
                }
            }
            if (!z2 && (actionBarLayout2 = this.parentLayout) != null && this.needRemovePreviousSameChatActivity) {
                int size = actionBarLayout2.fragmentsStack.size() - 1;
                int i2 = 0;
                while (true) {
                    if (i2 >= size) {
                        break;
                    }
                    BaseFragment baseFragment = this.parentLayout.fragmentsStack.get(i2);
                    if (baseFragment != this && (baseFragment instanceof ChatActivity)) {
                        ChatActivity chatActivity = (ChatActivity) baseFragment;
                        if (chatActivity.needRemovePreviousSameChatActivity && chatActivity.dialog_id == this.dialog_id && chatActivity.getChatMode() == getChatMode() && chatActivity.threadMessageId == this.threadMessageId && chatActivity.reportType == this.reportType) {
                            baseFragment.removeSelfFromStack();
                            break;
                        }
                    }
                    i2++;
                }
            }
            showScheduledOrNoSoundHint();
            if (!z2 && this.firstOpen) {
                if (this.chatActivityEnterView != null && (messageObject = this.threadMessageObject) != null && messageObject.getRepliesCount() == 0 && ChatObject.canSendMessages(this.currentChat)) {
                    this.chatActivityEnterView.setFieldFocused();
                    this.chatActivityEnterView.openKeyboard();
                }
                if (getMessagesController().isPromoDialog(this.dialog_id, true)) {
                    int i3 = getMessagesController().promoDialogType;
                    SharedPreferences globalNotificationsSettings = MessagesController.getGlobalNotificationsSettings();
                    if (i3 == MessagesController.PROMO_TYPE_PROXY) {
                        if (AndroidUtilities.getPrefIntOrLong(globalNotificationsSettings, "proxychannel", 0L) != this.dialog_id) {
                            str = LocaleController.getString("UseProxySponsorInfo", 2131628865);
                            if (!TextUtils.isEmpty(str) && this.topUndoView != null) {
                                if (i3 != MessagesController.PROMO_TYPE_PROXY) {
                                    globalNotificationsSettings.edit().putLong("proxychannel", this.dialog_id).commit();
                                } else if (i3 == MessagesController.PROMO_TYPE_PSA) {
                                    String str3 = getMessagesController().promoPsaType;
                                    globalNotificationsSettings.edit().putBoolean(str3 + "_shown", true).commit();
                                }
                                SpannableStringBuilder spannableStringBuilder = new SpannableStringBuilder(str);
                                MessageObject.addLinks(false, spannableStringBuilder);
                                this.topUndoView.showWithAction(0L, 18, spannableStringBuilder, null, null);
                            }
                        }
                        str = null;
                        if (!TextUtils.isEmpty(str)) {
                            if (i3 != MessagesController.PROMO_TYPE_PROXY) {
                            }
                            SpannableStringBuilder spannableStringBuilder2 = new SpannableStringBuilder(str);
                            MessageObject.addLinks(false, spannableStringBuilder2);
                            this.topUndoView.showWithAction(0L, 18, spannableStringBuilder2, null, null);
                        }
                    } else {
                        if (i3 == MessagesController.PROMO_TYPE_PSA) {
                            String str4 = getMessagesController().promoPsaType;
                            if (!globalNotificationsSettings.getBoolean(str4 + "_shown", false)) {
                                str = LocaleController.getString("PsaInfo_" + str4);
                                if (TextUtils.isEmpty(str)) {
                                    str = LocaleController.getString("PsaInfoDefault", 2131627818);
                                }
                                if (!TextUtils.isEmpty(str)) {
                                }
                            }
                        }
                        str = null;
                        if (!TextUtils.isEmpty(str)) {
                        }
                    }
                }
                this.firstOpen = false;
            }
            if (!z2 && this.fromPullingDownTransition && (actionBarLayout = this.parentLayout) != null && actionBarLayout.fragmentsStack.size() >= 2) {
                ArrayList<BaseFragment> arrayList = this.parentLayout.fragmentsStack;
                BaseFragment baseFragment2 = arrayList.get(arrayList.size() - 2);
                if (baseFragment2 instanceof ChatActivity) {
                    ChatActivity chatActivity2 = (ChatActivity) baseFragment2;
                    this.backToPreviousFragment = chatActivity2;
                    this.parentLayout.fragmentsStack.remove(chatActivity2);
                }
            }
            ChatActivityMemberRequestsDelegate chatActivityMemberRequestsDelegate = this.pendingRequestsDelegate;
            if (chatActivityMemberRequestsDelegate != null && z2) {
                chatActivityMemberRequestsDelegate.onBackToScreen();
            }
            updateMessagesVisiblePart(false);
        } else {
            getNotificationCenter().onAnimationFinish(this.transitionAnimationIndex);
        }
        this.contentView.invalidate();
        if (!TextUtils.isEmpty(this.attachMenuBotToOpen)) {
            TLRPC$TL_contacts_resolveUsername tLRPC$TL_contacts_resolveUsername = new TLRPC$TL_contacts_resolveUsername();
            tLRPC$TL_contacts_resolveUsername.username = this.attachMenuBotToOpen;
            getConnectionsManager().sendRequest(tLRPC$TL_contacts_resolveUsername, new ChatActivity$$ExternalSyntheticLambda218(this));
            this.attachMenuBotToOpen = null;
        }
    }

    public /* synthetic */ void lambda$onTransitionAnimationEnd$137(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        AndroidUtilities.runOnUIThread(new ChatActivity$$ExternalSyntheticLambda184(this, tLObject));
    }

    public /* synthetic */ void lambda$onTransitionAnimationEnd$136(TLObject tLObject) {
        if (tLObject != null) {
            TLRPC$TL_contacts_resolvedPeer tLRPC$TL_contacts_resolvedPeer = (TLRPC$TL_contacts_resolvedPeer) tLObject;
            if (tLRPC$TL_contacts_resolvedPeer.users.isEmpty()) {
                return;
            }
            TLRPC$User tLRPC$User = tLRPC$TL_contacts_resolvedPeer.users.get(0);
            if (!tLRPC$User.bot || !tLRPC$User.bot_attach_menu) {
                return;
            }
            TLRPC$TL_messages_getAttachMenuBot tLRPC$TL_messages_getAttachMenuBot = new TLRPC$TL_messages_getAttachMenuBot();
            tLRPC$TL_messages_getAttachMenuBot.bot = MessagesController.getInstance(this.currentAccount).getInputUser(tLRPC$User.id);
            ConnectionsManager.getInstance(this.currentAccount).sendRequest(tLRPC$TL_messages_getAttachMenuBot, new ChatActivity$$ExternalSyntheticLambda230(this, tLRPC$User));
        }
    }

    public /* synthetic */ void lambda$onTransitionAnimationEnd$135(TLRPC$User tLRPC$User, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        AndroidUtilities.runOnUIThread(new ChatActivity$$ExternalSyntheticLambda189(this, tLObject, tLRPC$User));
    }

    public /* synthetic */ void lambda$onTransitionAnimationEnd$134(TLObject tLObject, TLRPC$User tLRPC$User) {
        if (tLObject instanceof TLRPC$TL_attachMenuBotsBot) {
            TLRPC$TL_attachMenuBotsBot tLRPC$TL_attachMenuBotsBot = (TLRPC$TL_attachMenuBotsBot) tLObject;
            MessagesController.getInstance(this.currentAccount).putUsers(tLRPC$TL_attachMenuBotsBot.users, false);
            TLRPC$TL_attachMenuBot tLRPC$TL_attachMenuBot = tLRPC$TL_attachMenuBotsBot.bot;
            if (!MediaDataController.canShowAttachMenuBot(tLRPC$TL_attachMenuBot, getCurrentUser() != null ? getCurrentUser() : getCurrentChat())) {
                TLRPC$User tLRPC$User2 = this.currentUser;
                if (tLRPC$User2 != null && tLRPC$User2.bot && tLRPC$User.id == tLRPC$TL_attachMenuBot.bot_id) {
                    BulletinFactory.of(this).createErrorBulletin(LocaleController.getString(2131624724)).show();
                } else if (tLRPC$User2 != null && tLRPC$User2.bot && tLRPC$User.id != tLRPC$TL_attachMenuBot.bot_id) {
                    BulletinFactory.of(this).createErrorBulletin(LocaleController.getString(2131624721)).show();
                } else if (tLRPC$User2 != null && !tLRPC$User2.bot) {
                    BulletinFactory.of(this).createErrorBulletin(LocaleController.getString(2131624725)).show();
                } else {
                    TLRPC$Chat tLRPC$Chat = this.currentChat;
                    if (tLRPC$Chat != null && !ChatObject.isChannelAndNotMegaGroup(tLRPC$Chat)) {
                        BulletinFactory.of(this).createErrorBulletin(LocaleController.getString(2131624723)).show();
                        return;
                    }
                    TLRPC$Chat tLRPC$Chat2 = this.currentChat;
                    if (tLRPC$Chat2 == null || !ChatObject.isChannelAndNotMegaGroup(tLRPC$Chat2)) {
                        return;
                    }
                    BulletinFactory.of(this).createErrorBulletin(LocaleController.getString(2131624722)).show();
                }
            } else if (!tLRPC$TL_attachMenuBot.inactive) {
                openAttachBotLayout(tLRPC$User.id, this.attachMenuBotStartCommand);
            } else {
                AttachBotIntroTopView attachBotIntroTopView = new AttachBotIntroTopView(getParentActivity());
                attachBotIntroTopView.setColor(Theme.getColor("chat_attachContactIcon"));
                attachBotIntroTopView.setBackgroundColor(Theme.getColor("dialogTopBackground"));
                attachBotIntroTopView.setAttachBot(tLRPC$TL_attachMenuBot);
                new AlertDialog.Builder(getParentActivity()).setTopView(attachBotIntroTopView).setMessage(AndroidUtilities.replaceTags(LocaleController.formatString("BotRequestAttachPermission", 2131624740, UserObject.getUserName(tLRPC$User)))).setPositiveButton(LocaleController.getString(2131624717), new ChatActivity$$ExternalSyntheticLambda42(this, tLRPC$User)).setNegativeButton(LocaleController.getString(2131624832), null).show();
            }
        }
    }

    public /* synthetic */ void lambda$onTransitionAnimationEnd$133(TLRPC$User tLRPC$User, DialogInterface dialogInterface, int i) {
        TLRPC$TL_messages_toggleBotInAttachMenu tLRPC$TL_messages_toggleBotInAttachMenu = new TLRPC$TL_messages_toggleBotInAttachMenu();
        tLRPC$TL_messages_toggleBotInAttachMenu.bot = MessagesController.getInstance(this.currentAccount).getInputUser(tLRPC$User.id);
        tLRPC$TL_messages_toggleBotInAttachMenu.enabled = true;
        ConnectionsManager.getInstance(this.currentAccount).sendRequest(tLRPC$TL_messages_toggleBotInAttachMenu, new ChatActivity$$ExternalSyntheticLambda229(this, tLRPC$User), 66);
    }

    public /* synthetic */ void lambda$onTransitionAnimationEnd$132(TLRPC$User tLRPC$User, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        AndroidUtilities.runOnUIThread(new ChatActivity$$ExternalSyntheticLambda193(this, tLRPC$TL_error, tLRPC$User));
    }

    public /* synthetic */ void lambda$onTransitionAnimationEnd$131(TLRPC$TL_error tLRPC$TL_error, TLRPC$User tLRPC$User) {
        if (tLRPC$TL_error == null) {
            MediaDataController.getInstance(this.currentAccount).loadAttachMenuBots(false, true);
            openAttachBotLayout(tLRPC$User.id, this.attachMenuBotStartCommand);
        }
    }

    public void openAttachBotLayout(long j, String str) {
        openAttachMenu();
        this.chatAttachAlert.showBotLayout(j, str);
    }

    @Override // org.telegram.ui.ActionBar.BaseFragment
    public void onDialogDismiss(Dialog dialog) {
        Dialog dialog2 = this.closeChatDialog;
        if (dialog2 == null || dialog != dialog2) {
            return;
        }
        getMessagesController().deleteDialog(this.dialog_id, 0);
        ActionBarLayout actionBarLayout = this.parentLayout;
        if (actionBarLayout != null && !actionBarLayout.fragmentsStack.isEmpty()) {
            ArrayList<BaseFragment> arrayList = this.parentLayout.fragmentsStack;
            if (arrayList.get(arrayList.size() - 1) != this) {
                ArrayList<BaseFragment> arrayList2 = this.parentLayout.fragmentsStack;
                removeSelfFromStack();
                arrayList2.get(arrayList2.size() - 1).finishFragment();
                return;
            }
        }
        finishFragment();
    }

    /* JADX WARN: Code restructure failed: missing block: B:14:0x0031, code lost:
        if (r4.findItem(16908321) != null) goto L15;
     */
    @Override // org.telegram.ui.ActionBar.BaseFragment
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public boolean extendActionMode(Menu menu) {
        if (PhotoViewer.hasInstance() && PhotoViewer.getInstance().isVisible()) {
            if (PhotoViewer.getInstance().getSelectiongLength() == 0 || menu.findItem(16908321) == null) {
                return true;
            }
        } else {
            if (this.chatActivityEnterView.getSelectionLength() != 0) {
            }
            return true;
        }
        fillActionModeMenu(menu);
        return true;
    }

    public void fillActionModeMenu(Menu menu) {
        if (menu.findItem(2131230856) != null) {
            return;
        }
        if (Build.VERSION.SDK_INT >= 23) {
            menu.removeItem(16908341);
        }
        menu.add(2131230858, 2131230866, 6, LocaleController.getString("Spoiler", 2131628466));
        SpannableStringBuilder spannableStringBuilder = new SpannableStringBuilder(LocaleController.getString("Bold", 2131624714));
        spannableStringBuilder.setSpan(new TypefaceSpan(AndroidUtilities.getTypeface("fonts/rmedium.ttf")), 0, spannableStringBuilder.length(), 33);
        menu.add(2131230858, 2131230856, 7, spannableStringBuilder);
        SpannableStringBuilder spannableStringBuilder2 = new SpannableStringBuilder(LocaleController.getString("Italic", 2131626357));
        spannableStringBuilder2.setSpan(new TypefaceSpan(AndroidUtilities.getTypeface("fonts/ritalic.ttf")), 0, spannableStringBuilder2.length(), 33);
        menu.add(2131230858, 2131230859, 8, spannableStringBuilder2);
        SpannableStringBuilder spannableStringBuilder3 = new SpannableStringBuilder(LocaleController.getString("Mono", 2131626782));
        spannableStringBuilder3.setSpan(new TypefaceSpan(Typeface.MONOSPACE), 0, spannableStringBuilder3.length(), 33);
        int i = 10;
        menu.add(2131230858, 2131230861, 9, spannableStringBuilder3);
        TLRPC$EncryptedChat tLRPC$EncryptedChat = this.currentEncryptedChat;
        if (tLRPC$EncryptedChat == null || AndroidUtilities.getPeerLayerVersion(tLRPC$EncryptedChat.layer) >= 101) {
            SpannableStringBuilder spannableStringBuilder4 = new SpannableStringBuilder(LocaleController.getString("Strike", 2131628547));
            TextStyleSpan.TextStyleRun textStyleRun = new TextStyleSpan.TextStyleRun();
            textStyleRun.flags |= 8;
            spannableStringBuilder4.setSpan(new TextStyleSpan(textStyleRun), 0, spannableStringBuilder4.length(), 33);
            menu.add(2131230858, 2131230867, 10, spannableStringBuilder4);
            SpannableStringBuilder spannableStringBuilder5 = new SpannableStringBuilder(LocaleController.getString("Underline", 2131628796));
            TextStyleSpan.TextStyleRun textStyleRun2 = new TextStyleSpan.TextStyleRun();
            textStyleRun2.flags |= 16;
            spannableStringBuilder5.setSpan(new TextStyleSpan(textStyleRun2), 0, spannableStringBuilder5.length(), 33);
            i = 12;
            menu.add(2131230858, 2131230868, 11, spannableStringBuilder5);
        }
        menu.add(2131230858, 2131230860, i, LocaleController.getString("CreateLink", 2131625288));
        menu.add(2131230858, 2131230863, i + 1, LocaleController.getString("Regular", 2131627943));
    }

    public void updateScheduledInterface(boolean z) {
        ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        if (chatActivityEnterView != null) {
            chatActivityEnterView.updateScheduleButton(z);
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:63:0x0171  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void updateBottomOverlay() {
        int i;
        TLRPC$Chat tLRPC$Chat;
        TLRPC$User tLRPC$User;
        boolean z;
        boolean z2;
        if (this.bottomOverlayChatText == null || (i = this.chatMode) == 1) {
            return;
        }
        if (this.reportType >= 0) {
            updateActionModeTitle();
        } else if (i == 2) {
            TLRPC$Chat tLRPC$Chat2 = this.currentChat;
            if (tLRPC$Chat2 != null) {
                z2 = ChatObject.canPinMessages(tLRPC$Chat2);
            } else {
                TLRPC$UserFull tLRPC$UserFull = this.userInfo;
                z2 = tLRPC$UserFull != null ? tLRPC$UserFull.can_pin_message : false;
            }
            if (z2) {
                this.bottomOverlayChatText.setTag(1);
                this.bottomOverlayChatText.setText(LocaleController.getString("UnpinAllMessages", 2131628814));
            } else {
                this.bottomOverlayChatText.setTag(null);
                this.bottomOverlayChatText.setText(LocaleController.getString("HidePinnedMessages", 2131626186));
            }
            showBottomOverlayProgress(false, false);
        } else if (this.currentChat != null) {
            SharedPreferences notificationsSettings = MessagesController.getNotificationsSettings(this.currentAccount);
            long j = notificationsSettings.getLong("dialog_join_requested_time_" + this.dialog_id, -1L);
            if (ChatObject.isChannel(this.currentChat)) {
                TLRPC$Chat tLRPC$Chat3 = this.currentChat;
                if (!(tLRPC$Chat3 instanceof TLRPC$TL_channelForbidden)) {
                    if (ChatObject.isNotInChat(tLRPC$Chat3) && (!isThreadChat() || this.currentChat.join_to_send)) {
                        if (getMessagesController().isJoiningChannel(this.currentChat.id)) {
                            showBottomOverlayProgress(true, false);
                        } else {
                            if (this.currentChat.join_request) {
                                if (j > 0 && System.currentTimeMillis() - j < 120000) {
                                    this.bottomOverlayChatText.setText(LocaleController.getString("ChannelJoinRequestSent", 2131624922), true);
                                    this.bottomOverlayChatText.setEnabled(false);
                                } else {
                                    this.bottomOverlayChatText.setText(LocaleController.getString("ChannelJoinRequest", 2131624921));
                                    this.bottomOverlayChatText.setEnabled(true);
                                }
                                z = true;
                            } else {
                                this.bottomOverlayChatText.setText(LocaleController.getString("ChannelJoin", 2131624920));
                                this.bottomOverlayChatText.setEnabled(true);
                                z = false;
                            }
                            showBottomOverlayProgress(false, false);
                            if (!z && j > 0) {
                                SharedPreferences.Editor edit = MessagesController.getNotificationsSettings(this.currentAccount).edit();
                                edit.putLong("dialog_join_requested_time_" + this.dialog_id, -1L).commit();
                            }
                        }
                    } else if (!isThreadChat()) {
                        if (!getMessagesController().isDialogMuted(this.dialog_id)) {
                            this.bottomOverlayChatText.setText(LocaleController.getString("ChannelMute", 2131624949), false);
                            this.bottomOverlayChatText.setEnabled(true);
                        } else {
                            this.bottomOverlayChatText.setText(LocaleController.getString("ChannelUnmute", 2131624988), true);
                            this.bottomOverlayChatText.setEnabled(true);
                        }
                        showBottomOverlayProgress(false, this.bottomOverlayProgress.getTag() != null);
                    }
                    z = false;
                    if (!z) {
                        SharedPreferences.Editor edit2 = MessagesController.getNotificationsSettings(this.currentAccount).edit();
                        edit2.putLong("dialog_join_requested_time_" + this.dialog_id, -1L).commit();
                    }
                }
            }
            if (!isThreadChat()) {
                this.bottomOverlayChatText.setText(LocaleController.getString("DeleteThisGroup", 2131625456));
                this.bottomOverlayChatText.setEnabled(true);
            }
            z = false;
            if (!z) {
            }
        } else {
            showBottomOverlayProgress(false, true);
            if (this.userBlocked) {
                if (this.currentUser.bot) {
                    this.bottomOverlayChatText.setText(LocaleController.getString("BotUnblock", 2131624750));
                } else {
                    this.bottomOverlayChatText.setText(LocaleController.getString("Unblock", 2131628794));
                }
                if (this.botButtons != null) {
                    this.botButtons = null;
                    if (this.chatActivityEnterView != null) {
                        MessageObject messageObject = this.replyingMessageObject;
                        if (messageObject != null && this.botReplyButtons == messageObject) {
                            this.botReplyButtons = null;
                            hideFieldPanel(false);
                        }
                        this.chatActivityEnterView.setButtons(this.botButtons, false);
                    }
                }
            } else if (UserObject.isReplyUser(this.currentUser)) {
                if (!getMessagesController().isDialogMuted(this.dialog_id)) {
                    this.bottomOverlayChatText.setText(LocaleController.getString("ChannelMute", 2131624949), false);
                } else {
                    this.bottomOverlayChatText.setText(LocaleController.getString("ChannelUnmute", 2131624988), true);
                }
                showBottomOverlayProgress(false, true);
            } else if (this.botUser != null && this.currentUser.bot) {
                this.bottomOverlayChatText.setText(LocaleController.getString("BotStart", 2131624746));
                this.chatActivityEnterView.hidePopup(false);
                if (getParentActivity() != null) {
                    AndroidUtilities.hideKeyboard(getParentActivity().getCurrentFocus());
                }
            } else {
                this.bottomOverlayChatText.setText(LocaleController.getString("DeleteThisChat", 2131625454));
            }
        }
        TLRPC$Chat tLRPC$Chat4 = this.currentChat;
        if (tLRPC$Chat4 != null && tLRPC$Chat4.gigagroup && this.reportType < 0 && this.chatMode == 0) {
            this.bottomOverlayImage.setVisibility(0);
        } else {
            this.bottomOverlayImage.setVisibility(4);
        }
        if (this.inPreviewMode) {
            this.searchContainer.setVisibility(4);
            this.bottomOverlayChat.setVisibility(4);
            this.chatActivityEnterView.setFieldFocused(false);
            this.chatActivityEnterView.setVisibility(4);
        } else if (this.searchItem != null && this.searchItemVisible) {
            this.searchContainer.animate().setListener(null).cancel();
            if (this.searchContainer.getVisibility() != 0) {
                this.searchContainer.setVisibility(0);
                this.searchContainer.setAlpha(0.0f);
            }
            this.searchContainer.animate().alpha(1.0f).setDuration(150L).setListener(new AnonymousClass84(this)).start();
            ValueAnimator valueAnimator = this.searchExpandAnimator;
            if (valueAnimator != null) {
                valueAnimator.removeAllListeners();
                this.searchExpandAnimator.cancel();
            }
            float f = this.searchExpandProgress;
            if (f != 1.0f) {
                ValueAnimator ofFloat = ValueAnimator.ofFloat(f, 1.0f);
                this.searchExpandAnimator = ofFloat;
                ofFloat.addUpdateListener(new ChatActivity$$ExternalSyntheticLambda4(this));
                this.searchExpandAnimator.addListener(new AnonymousClass85());
                this.searchExpandAnimator.setDuration(250L);
                this.searchExpandAnimator.setInterpolator(ChatListItemAnimator.DEFAULT_INTERPOLATOR);
                this.searchExpandAnimator.start();
            } else {
                this.chatActivityEnterView.setVisibility(4);
                this.bottomOverlayChat.setVisibility(4);
                invalidateChatListViewTopPadding();
            }
            this.chatActivityEnterView.setFieldFocused(false);
            if (this.chatActivityEnterView.isTopViewVisible()) {
                this.topViewWasVisible = 1;
                this.chatActivityEnterView.hideTopView(false);
            } else {
                this.topViewWasVisible = 2;
            }
        } else {
            this.searchContainer.animate().setListener(null).cancel();
            if (this.searchContainer.getVisibility() == 0) {
                this.searchContainer.animate().alpha(0.0f).setDuration(150L).setListener(new AnonymousClass86()).start();
            }
            this.chatActivityEnterView.setVisibility(0);
            ValueAnimator valueAnimator2 = this.searchExpandAnimator;
            if (valueAnimator2 != null) {
                valueAnimator2.removeAllListeners();
                this.searchExpandAnimator.cancel();
            }
            float f2 = this.searchExpandProgress;
            if (f2 != 0.0f) {
                this.searchExpandAnimator = ValueAnimator.ofFloat(f2, 0.0f);
                invalidateChatListViewTopPadding();
                this.searchExpandAnimator.addUpdateListener(new ChatActivity$$ExternalSyntheticLambda3(this));
                this.searchExpandAnimator.addListener(new AnonymousClass87());
                this.searchExpandAnimator.setDuration(250L);
                this.searchExpandAnimator.setInterpolator(ChatListItemAnimator.DEFAULT_INTERPOLATOR);
                this.searchExpandAnimator.start();
            }
            if (this.muteItem != null) {
                TLRPC$Chat tLRPC$Chat5 = this.currentChat;
                if (tLRPC$Chat5 != null && ChatObject.isNotInChat(tLRPC$Chat5)) {
                    this.muteItem.setVisibility(8);
                    this.muteItemGap.setVisibility(8);
                } else {
                    this.muteItem.setVisibility(0);
                    this.muteItemGap.setVisibility(0);
                }
            }
            if (this.reportType >= 0) {
                this.bottomOverlayChat.setVisibility(0);
                this.chatActivityEnterView.setVisibility(4);
            } else if (this.chatMode == 2 || (((tLRPC$Chat = this.currentChat) != null && ((ChatObject.isNotInChat(tLRPC$Chat) || !ChatObject.canWriteToChat(this.currentChat)) && (this.currentChat.join_to_send || !isThreadChat()))) || ((tLRPC$User = this.currentUser) != null && (UserObject.isDeleted(tLRPC$User) || this.userBlocked || UserObject.isReplyUser(this.currentUser))))) {
                if (this.chatActivityEnterView.isEditingMessage()) {
                    this.chatActivityEnterView.setVisibility(0);
                    this.bottomOverlayChat.setVisibility(4);
                    this.chatActivityEnterView.setFieldFocused();
                    AndroidUtilities.runOnUIThread(new ChatActivity$$ExternalSyntheticLambda125(this), 100L);
                } else {
                    this.bottomOverlayChat.setVisibility(0);
                    this.chatActivityEnterView.setFieldFocused(false);
                    this.chatActivityEnterView.setVisibility(4);
                    this.chatActivityEnterView.closeKeyboard();
                    StickersAdapter stickersAdapter = this.stickersAdapter;
                    if (stickersAdapter != null) {
                        stickersAdapter.hide();
                    }
                }
                ActionBarMenuItem actionBarMenuItem = this.attachItem;
                if (actionBarMenuItem != null) {
                    actionBarMenuItem.setVisibility(8);
                }
                ActionBarMenuItem actionBarMenuItem2 = this.editTextItem;
                if (actionBarMenuItem2 != null) {
                    actionBarMenuItem2.setVisibility(8);
                }
                ActionBarMenuItem actionBarMenuItem3 = this.headerItem;
                if (actionBarMenuItem3 != null) {
                    actionBarMenuItem3.setVisibility(0);
                }
            } else if (this.botUser != null && this.currentUser.bot) {
                this.bottomOverlayChat.setVisibility(0);
                this.chatActivityEnterView.setVisibility(4);
            } else {
                this.chatActivityEnterView.setVisibility(0);
                this.bottomOverlayChat.setVisibility(4);
            }
            if (this.topViewWasVisible == 1) {
                this.chatActivityEnterView.showTopView(false, false);
                this.topViewWasVisible = 0;
            }
        }
        checkRaiseSensors();
    }

    /* renamed from: org.telegram.ui.ChatActivity$84 */
    /* loaded from: classes3.dex */
    public class AnonymousClass84 extends AnimatorListenerAdapter {
        AnonymousClass84(ChatActivity chatActivity) {
        }

        @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
        public void onAnimationEnd(Animator animator) {
            super.onAnimationEnd(animator);
        }
    }

    public /* synthetic */ void lambda$updateBottomOverlay$138(ValueAnimator valueAnimator) {
        float floatValue = ((Float) valueAnimator.getAnimatedValue()).floatValue();
        this.searchExpandProgress = floatValue;
        this.chatListView.setTranslationY(floatValue * (this.chatActivityEnterView.getMeasuredHeight() - this.searchContainer.getMeasuredHeight()));
        ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        chatActivityEnterView.setChatSearchExpandOffset(this.searchExpandProgress * (chatActivityEnterView.getMeasuredHeight() - this.searchContainer.getMeasuredHeight()));
        invalidateChatListViewTopPadding();
    }

    /* renamed from: org.telegram.ui.ChatActivity$85 */
    /* loaded from: classes3.dex */
    public class AnonymousClass85 extends AnimatorListenerAdapter {
        AnonymousClass85() {
            ChatActivity.this = r1;
        }

        @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
        public void onAnimationEnd(Animator animator) {
            ChatActivity.this.searchExpandProgress = 1.0f;
            ChatActivity.this.chatActivityEnterView.setVisibility(4);
            ChatActivity.this.bottomOverlayChat.setVisibility(4);
            ChatActivity.this.invalidateChatListViewTopPadding();
        }
    }

    /* renamed from: org.telegram.ui.ChatActivity$86 */
    /* loaded from: classes3.dex */
    public class AnonymousClass86 extends AnimatorListenerAdapter {
        AnonymousClass86() {
            ChatActivity.this = r1;
        }

        @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
        public void onAnimationEnd(Animator animator) {
            super.onAnimationEnd(animator);
            ChatActivity.this.searchContainer.setVisibility(4);
        }
    }

    public /* synthetic */ void lambda$updateBottomOverlay$139(ValueAnimator valueAnimator) {
        float floatValue = ((Float) valueAnimator.getAnimatedValue()).floatValue();
        this.searchExpandProgress = floatValue;
        this.chatListView.setTranslationY(floatValue * (this.chatActivityEnterView.getMeasuredHeight() - this.searchContainer.getMeasuredHeight()));
        ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        chatActivityEnterView.setChatSearchExpandOffset(this.searchExpandProgress * (chatActivityEnterView.getMeasuredHeight() - this.searchContainer.getMeasuredHeight()));
        invalidateChatListViewTopPadding();
    }

    /* renamed from: org.telegram.ui.ChatActivity$87 */
    /* loaded from: classes3.dex */
    public class AnonymousClass87 extends AnimatorListenerAdapter {
        AnonymousClass87() {
            ChatActivity.this = r1;
        }

        @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
        public void onAnimationEnd(Animator animator) {
            ChatActivity.this.searchExpandProgress = 0.0f;
            ChatActivity.this.invalidateChatListViewTopPadding();
        }
    }

    public /* synthetic */ void lambda$updateBottomOverlay$140() {
        this.chatActivityEnterView.openKeyboard();
    }

    public void updateReplyMessageHeader(boolean z) {
        String str;
        ChatAvatarContainer chatAvatarContainer = this.avatarContainer;
        if (chatAvatarContainer != null && this.threadMessageId != 0) {
            if (this.isComments) {
                if (this.threadMessageObject.hasReplies()) {
                    this.avatarContainer.setTitle(LocaleController.formatPluralString("Comments", this.threadMessageObject.getRepliesCount(), new Object[0]));
                } else {
                    this.avatarContainer.setTitle(LocaleController.getString("CommentsTitle", 2131625221));
                }
            } else {
                chatAvatarContainer.setTitle(LocaleController.formatPluralString("Replies", this.threadMessageObject.getRepliesCount(), new Object[0]));
            }
        }
        if (this.replyMessageHeaderObject == null) {
            return;
        }
        if (this.threadMessageObject.getRepliesCount() == 0) {
            if (this.isComments) {
                str = LocaleController.getString("NoComments", 2131626866);
            } else {
                str = LocaleController.getString("NoReplies", 2131626909);
            }
        } else {
            str = LocaleController.getString("DiscussionStarted", 2131625525);
        }
        MessageObject messageObject = this.replyMessageHeaderObject;
        messageObject.messageOwner.message = str;
        messageObject.messageText = str;
        if (!z) {
            return;
        }
        this.chatAdapter.updateRowWithMessageObject(messageObject, true);
    }

    public void showAlert(String str, String str2) {
        FrameLayout frameLayout = this.alertView;
        if (frameLayout == null || str == null || str2 == null) {
            return;
        }
        if (frameLayout.getTag() != null) {
            this.alertView.setTag(null);
            AnimatorSet animatorSet = this.alertViewAnimator;
            if (animatorSet != null) {
                animatorSet.cancel();
                this.alertViewAnimator = null;
            }
            if (this.alertView.getVisibility() != 0) {
                this.alertViewEnterProgress = 0.0f;
                invalidateChatListViewTopPadding();
            }
            this.alertView.setVisibility(0);
            this.alertViewAnimator = new AnimatorSet();
            ValueAnimator ofFloat = ValueAnimator.ofFloat(this.alertViewEnterProgress, 1.0f);
            ofFloat.addUpdateListener(new ChatActivity$$ExternalSyntheticLambda10(this));
            this.alertViewAnimator.playTogether(ofFloat);
            this.alertViewAnimator.setDuration(200L);
            this.alertViewAnimator.addListener(new AnonymousClass88());
            this.alertViewAnimator.start();
        }
        this.alertNameTextView.setText(str);
        this.alertTextView.setText(Emoji.replaceEmoji(str2.replace('\n', ' '), this.alertTextView.getPaint().getFontMetricsInt(), AndroidUtilities.dp(14.0f), false));
        Runnable runnable = this.hideAlertViewRunnable;
        if (runnable != null) {
            AndroidUtilities.cancelRunOnUIThread(runnable);
        }
        AnonymousClass89 anonymousClass89 = new AnonymousClass89();
        this.hideAlertViewRunnable = anonymousClass89;
        AndroidUtilities.runOnUIThread(anonymousClass89, 3000L);
    }

    public /* synthetic */ void lambda$showAlert$141(ValueAnimator valueAnimator) {
        this.alertViewEnterProgress = ((Float) valueAnimator.getAnimatedValue()).floatValue();
        invalidateChatListViewTopPadding();
    }

    /* renamed from: org.telegram.ui.ChatActivity$88 */
    /* loaded from: classes3.dex */
    public class AnonymousClass88 extends AnimatorListenerAdapter {
        AnonymousClass88() {
            ChatActivity.this = r1;
        }

        @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
        public void onAnimationEnd(Animator animator) {
            if (ChatActivity.this.alertViewAnimator == null || !ChatActivity.this.alertViewAnimator.equals(animator)) {
                return;
            }
            ChatActivity.this.alertViewEnterProgress = 1.0f;
            ChatActivity.this.invalidateChatListViewTopPadding();
            ChatActivity.this.alertViewAnimator = null;
        }

        @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
        public void onAnimationCancel(Animator animator) {
            if (ChatActivity.this.alertViewAnimator == null || !ChatActivity.this.alertViewAnimator.equals(animator)) {
                return;
            }
            ChatActivity.this.alertViewAnimator = null;
        }
    }

    /* renamed from: org.telegram.ui.ChatActivity$89 */
    /* loaded from: classes3.dex */
    public class AnonymousClass89 implements Runnable {
        AnonymousClass89() {
            ChatActivity.this = r1;
        }

        @Override // java.lang.Runnable
        public void run() {
            if (ChatActivity.this.hideAlertViewRunnable == this && ChatActivity.this.alertView.getTag() == null) {
                ChatActivity.this.alertView.setTag(1);
                if (ChatActivity.this.alertViewAnimator != null) {
                    ChatActivity.this.alertViewAnimator.cancel();
                    ChatActivity.this.alertViewAnimator = null;
                }
                ChatActivity.this.alertViewAnimator = new AnimatorSet();
                ValueAnimator ofFloat = ValueAnimator.ofFloat(ChatActivity.this.alertViewEnterProgress, 0.0f);
                ofFloat.addUpdateListener(new ChatActivity$89$$ExternalSyntheticLambda0(this));
                ChatActivity.this.alertViewAnimator.playTogether(ofFloat);
                ChatActivity.this.alertViewAnimator.setDuration(200L);
                ChatActivity.this.alertViewAnimator.addListener(new AnonymousClass1());
                ChatActivity.this.alertViewAnimator.start();
            }
        }

        public /* synthetic */ void lambda$run$0(ValueAnimator valueAnimator) {
            ChatActivity.this.alertViewEnterProgress = ((Float) valueAnimator.getAnimatedValue()).floatValue();
            ChatActivity.this.invalidateChatListViewTopPadding();
        }

        /* renamed from: org.telegram.ui.ChatActivity$89$1 */
        /* loaded from: classes3.dex */
        class AnonymousClass1 extends AnimatorListenerAdapter {
            AnonymousClass1() {
                AnonymousClass89.this = r1;
            }

            @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
            public void onAnimationEnd(Animator animator) {
                if (ChatActivity.this.alertViewAnimator == null || !ChatActivity.this.alertViewAnimator.equals(animator)) {
                    return;
                }
                ChatActivity.this.alertView.setVisibility(8);
                ChatActivity.this.alertViewEnterProgress = 0.0f;
                ChatActivity.this.invalidateChatListViewTopPadding();
                ChatActivity.this.alertViewAnimator = null;
            }

            @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
            public void onAnimationCancel(Animator animator) {
                if (ChatActivity.this.alertViewAnimator == null || !ChatActivity.this.alertViewAnimator.equals(animator)) {
                    return;
                }
                ChatActivity.this.alertViewAnimator = null;
            }
        }
    }

    private boolean hidePinnedMessageView(boolean z) {
        BlurredFrameLayout blurredFrameLayout = this.pinnedMessageView;
        if (blurredFrameLayout == null || blurredFrameLayout.getTag() != null) {
            return false;
        }
        int i = 0;
        while (true) {
            AnimatorSet[] animatorSetArr = this.pinnedNextAnimation;
            if (i >= animatorSetArr.length) {
                break;
            }
            if (animatorSetArr[i] != null) {
                animatorSetArr[i].cancel();
                this.pinnedNextAnimation[i] = null;
            }
            i++;
        }
        this.setPinnedTextTranslationX = false;
        this.pinnedMessageView.setTag(1);
        AnimatorSet animatorSet = this.pinnedMessageViewAnimator;
        if (animatorSet != null) {
            animatorSet.cancel();
            this.pinnedMessageViewAnimator = null;
        }
        if (z) {
            this.pinnedMessageViewAnimator = new AnimatorSet();
            ValueAnimator ofFloat = ValueAnimator.ofFloat(this.pinnedMessageEnterOffset, -AndroidUtilities.dp(50.0f));
            ofFloat.addUpdateListener(new ChatActivity$$ExternalSyntheticLambda2(this));
            this.pinnedMessageViewAnimator.playTogether(ofFloat);
            this.pinnedMessageViewAnimator.setDuration(200L);
            this.pinnedMessageViewAnimator.addListener(new AnonymousClass90());
            this.pinnedMessageViewAnimator.start();
        } else {
            this.pinnedMessageEnterOffset = -AndroidUtilities.dp(50.0f);
            this.pinnedMessageView.setVisibility(8);
            this.chatListView.invalidate();
        }
        return true;
    }

    public /* synthetic */ void lambda$hidePinnedMessageView$142(ValueAnimator valueAnimator) {
        this.pinnedMessageEnterOffset = ((Float) valueAnimator.getAnimatedValue()).floatValue();
        invalidateChatListViewTopPadding();
        invalidateMessagesVisiblePart();
        this.chatListView.invalidate();
    }

    /* renamed from: org.telegram.ui.ChatActivity$90 */
    /* loaded from: classes3.dex */
    public class AnonymousClass90 extends AnimatorListenerAdapter {
        AnonymousClass90() {
            ChatActivity.this = r1;
        }

        @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
        public void onAnimationEnd(Animator animator) {
            if (ChatActivity.this.pinnedMessageViewAnimator == null || !ChatActivity.this.pinnedMessageViewAnimator.equals(animator)) {
                return;
            }
            ChatActivity.this.pinnedMessageView.setVisibility(8);
            ChatActivity.this.pinnedMessageViewAnimator = null;
        }

        @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
        public void onAnimationCancel(Animator animator) {
            if (ChatActivity.this.pinnedMessageViewAnimator == null || !ChatActivity.this.pinnedMessageViewAnimator.equals(animator)) {
                return;
            }
            ChatActivity.this.pinnedMessageViewAnimator = null;
        }
    }

    public void updatePinnedMessageView(boolean z) {
        updatePinnedMessageView(z, 0);
    }

    private void updatePinnedListButton(boolean z) {
        if (isThreadChat() || this.pinnedListButton == null) {
            return;
        }
        boolean z2 = this.pinnedMessageIds.size() > 1 && !this.pinnedMessageButtonShown;
        boolean z3 = this.pinnedListButton.getTag() != null;
        boolean z4 = this.pinnedProgress.getTag() != null;
        boolean z5 = this.closePinned.getTag() != null;
        boolean z6 = !z2 && !this.pinnedProgressIsShowing && !this.pinnedMessageButtonShown;
        boolean z7 = z2 && !this.pinnedProgressIsShowing && !this.pinnedMessageButtonShown;
        boolean z8 = this.pinnedProgressIsShowing && !this.pinnedMessageButtonShown;
        if (z3 != z2 || z4 != z8 || z5 != z6) {
            AnimatorSet animatorSet = this.pinnedListAnimator;
            if (animatorSet != null) {
                animatorSet.cancel();
                this.pinnedListAnimator = null;
            }
            int i = 8;
            int i2 = 4;
            if (z) {
                if (z2) {
                    this.pinnedListButton.setVisibility(0);
                } else if (z6) {
                    this.closePinned.setVisibility(0);
                }
                if (z8) {
                    this.pinnedProgress.setVisibility(0);
                    this.pinnedProgress.setAlpha(0.0f);
                    this.pinnedProgress.setScaleX(0.4f);
                    this.pinnedProgress.setScaleY(0.4f);
                }
                AnimatorSet animatorSet2 = new AnimatorSet();
                this.pinnedListAnimator = animatorSet2;
                Animator[] animatorArr = new Animator[9];
                ImageView imageView = this.pinnedListButton;
                Property property = View.ALPHA;
                float[] fArr = new float[1];
                fArr[0] = z7 ? 1.0f : 0.0f;
                animatorArr[0] = ObjectAnimator.ofFloat(imageView, property, fArr);
                ImageView imageView2 = this.pinnedListButton;
                Property property2 = View.SCALE_X;
                float[] fArr2 = new float[1];
                fArr2[0] = z7 ? 1.0f : 0.4f;
                animatorArr[1] = ObjectAnimator.ofFloat(imageView2, property2, fArr2);
                ImageView imageView3 = this.pinnedListButton;
                Property property3 = View.SCALE_Y;
                float[] fArr3 = new float[1];
                fArr3[0] = z7 ? 1.0f : 0.4f;
                animatorArr[2] = ObjectAnimator.ofFloat(imageView3, property3, fArr3);
                ImageView imageView4 = this.closePinned;
                Property property4 = View.ALPHA;
                float[] fArr4 = new float[1];
                fArr4[0] = z6 ? 1.0f : 0.0f;
                animatorArr[3] = ObjectAnimator.ofFloat(imageView4, property4, fArr4);
                ImageView imageView5 = this.closePinned;
                Property property5 = View.SCALE_X;
                float[] fArr5 = new float[1];
                fArr5[0] = z6 ? 1.0f : 0.4f;
                animatorArr[4] = ObjectAnimator.ofFloat(imageView5, property5, fArr5);
                ImageView imageView6 = this.closePinned;
                Property property6 = View.SCALE_Y;
                float[] fArr6 = new float[1];
                fArr6[0] = z6 ? 1.0f : 0.4f;
                animatorArr[5] = ObjectAnimator.ofFloat(imageView6, property6, fArr6);
                RadialProgressView radialProgressView = this.pinnedProgress;
                Property property7 = View.ALPHA;
                float[] fArr7 = new float[1];
                fArr7[0] = !z8 ? 0.0f : 1.0f;
                animatorArr[6] = ObjectAnimator.ofFloat(radialProgressView, property7, fArr7);
                RadialProgressView radialProgressView2 = this.pinnedProgress;
                Property property8 = View.SCALE_X;
                float[] fArr8 = new float[1];
                fArr8[0] = !z8 ? 0.4f : 1.0f;
                animatorArr[7] = ObjectAnimator.ofFloat(radialProgressView2, property8, fArr8);
                RadialProgressView radialProgressView3 = this.pinnedProgress;
                Property property9 = View.SCALE_Y;
                float[] fArr9 = new float[1];
                fArr9[0] = !z8 ? 0.4f : 1.0f;
                animatorArr[8] = ObjectAnimator.ofFloat(radialProgressView3, property9, fArr9);
                animatorSet2.playTogether(animatorArr);
                this.pinnedListAnimator.setInterpolator(CubicBezierInterpolator.EASE_OUT_QUINT);
                this.pinnedListAnimator.setDuration(360L);
                this.pinnedListAnimator.addListener(new AnonymousClass91(z6, z7, z8));
                this.pinnedListAnimator.start();
            } else {
                this.closePinned.setAlpha(z6 ? 1.0f : 0.0f);
                this.closePinned.setScaleX(z6 ? 1.0f : 0.4f);
                this.closePinned.setScaleY(z6 ? 1.0f : 0.4f);
                this.closePinned.setVisibility(z6 ? 0 : 4);
                this.pinnedListButton.setAlpha(z7 ? 1.0f : 0.0f);
                this.pinnedListButton.setScaleX(z7 ? 1.0f : 0.4f);
                this.pinnedListButton.setScaleY(z7 ? 1.0f : 0.4f);
                ImageView imageView7 = this.pinnedListButton;
                if (z7) {
                    i2 = 0;
                }
                imageView7.setVisibility(i2);
                this.pinnedProgress.setAlpha(z8 ? 1.0f : 0.0f);
                this.pinnedProgress.setScaleX(z8 ? 1.0f : 0.4f);
                this.pinnedProgress.setScaleY(z8 ? 1.0f : 0.4f);
                RadialProgressView radialProgressView4 = this.pinnedProgress;
                if (z8) {
                    i = 0;
                }
                radialProgressView4.setVisibility(i);
            }
            this.closePinned.setTag(z6 ? 1 : null);
            this.pinnedListButton.setTag(z2 ? 1 : null);
            this.pinnedProgress.setTag(z8 ? 1 : null);
        }
        if (this.pinnedLineView == null) {
            return;
        }
        if (isThreadChat()) {
            this.pinnedLineView.set(0, 1, false);
        } else {
            this.pinnedLineView.set((this.pinnedMessageIds.size() - 1) - Collections.binarySearch(this.pinnedMessageIds, Integer.valueOf(this.currentPinnedMessageId), Comparator$CC.reverseOrder()), this.pinnedMessageIds.size(), z);
        }
    }

    /* renamed from: org.telegram.ui.ChatActivity$91 */
    /* loaded from: classes3.dex */
    public class AnonymousClass91 extends AnimatorListenerAdapter {
        final /* synthetic */ boolean val$showClosed;
        final /* synthetic */ boolean val$showPinned;
        final /* synthetic */ boolean val$showProgress;

        AnonymousClass91(boolean z, boolean z2, boolean z3) {
            ChatActivity.this = r1;
            this.val$showClosed = z;
            this.val$showPinned = z2;
            this.val$showProgress = z3;
        }

        @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
        public void onAnimationEnd(Animator animator) {
            ChatActivity.this.pinnedListAnimator = null;
            int i = 0;
            ChatActivity.this.closePinned.setVisibility(this.val$showClosed ? 0 : 4);
            ChatActivity.this.pinnedListButton.setVisibility(this.val$showPinned ? 0 : 4);
            RadialProgressView radialProgressView = ChatActivity.this.pinnedProgress;
            if (!this.val$showProgress) {
                i = 4;
            }
            radialProgressView.setVisibility(i);
        }
    }

    private TLRPC$KeyboardButton pinnedButton(MessageObject messageObject) {
        TLRPC$Message tLRPC$Message;
        TLRPC$ReplyMarkup tLRPC$ReplyMarkup;
        ArrayList<TLRPC$TL_keyboardButtonRow> arrayList;
        if (messageObject == null || (tLRPC$Message = messageObject.messageOwner) == null || (tLRPC$ReplyMarkup = tLRPC$Message.reply_markup) == null || (arrayList = tLRPC$ReplyMarkup.rows) == null || arrayList.size() != 1 || messageObject.messageOwner.reply_markup.rows.get(0) == null || messageObject.messageOwner.reply_markup.rows.get(0).buttons == null || messageObject.messageOwner.reply_markup.rows.get(0).buttons.size() != 1) {
            return null;
        }
        return messageObject.messageOwner.reply_markup.rows.get(0).buttons.get(0);
    }

    /* JADX WARN: Code restructure failed: missing block: B:34:0x0099, code lost:
        if (r32.pinnedMessageIds.get(0).intValue() != r5.getInt("pin_" + r32.dialog_id, 0)) goto L35;
     */
    /* JADX WARN: Removed duplicated region for block: B:156:0x03bc  */
    /* JADX WARN: Removed duplicated region for block: B:157:0x03be  */
    /* JADX WARN: Removed duplicated region for block: B:160:0x03d2  */
    /* JADX WARN: Removed duplicated region for block: B:206:0x04c5  */
    /* JADX WARN: Removed duplicated region for block: B:207:0x04d2  */
    /* JADX WARN: Removed duplicated region for block: B:209:0x04db  */
    /* JADX WARN: Removed duplicated region for block: B:22:0x0055  */
    /* JADX WARN: Removed duplicated region for block: B:236:0x055f  */
    /* JADX WARN: Removed duplicated region for block: B:237:0x0577  */
    /* JADX WARN: Removed duplicated region for block: B:23:0x0057  */
    /* JADX WARN: Removed duplicated region for block: B:267:0x063d  */
    /* JADX WARN: Removed duplicated region for block: B:26:0x0064  */
    /* JADX WARN: Removed duplicated region for block: B:271:0x064f  */
    /* JADX WARN: Removed duplicated region for block: B:273:0x0653  */
    /* JADX WARN: Removed duplicated region for block: B:37:0x009f  */
    /* JADX WARN: Removed duplicated region for block: B:385:0x0bd5  */
    /* JADX WARN: Removed duplicated region for block: B:398:0x0c2e  */
    /* JADX WARN: Removed duplicated region for block: B:401:0x0c39  */
    /* JADX WARN: Removed duplicated region for block: B:406:0x0ced  */
    /* JADX WARN: Removed duplicated region for block: B:407:0x0cf5  */
    /* JADX WARN: Removed duplicated region for block: B:408:0x0d1c  */
    /* JADX WARN: Removed duplicated region for block: B:429:0x0d98  */
    /* JADX WARN: Removed duplicated region for block: B:435:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:45:0x00ba  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void updatePinnedMessageView(boolean z, int i) {
        int i2;
        MessageObject messageObject;
        boolean z2;
        ActionBar actionBar;
        char c;
        TLRPC$KeyboardButton tLRPC$KeyboardButton;
        PinnedMessageButton pinnedMessageButton;
        TLRPC$PhotoSize tLRPC$PhotoSize;
        int i3;
        int i4;
        TrackingWidthSimpleTextView trackingWidthSimpleTextView;
        FrameLayout.LayoutParams layoutParams;
        FrameLayout.LayoutParams layoutParams2;
        FrameLayout.LayoutParams layoutParams3;
        boolean z3;
        boolean z4;
        int i5;
        CharSequence charSequence;
        SimpleTextView simpleTextView;
        int i6;
        float f;
        float f2;
        int i7;
        float f3;
        boolean z5;
        boolean z6;
        float f4;
        char c2;
        boolean z7;
        char c3;
        char c4;
        BackupImageView backupImageView;
        char c5;
        float f5;
        BackupImageView backupImageView2;
        char c6;
        float f6;
        char c7;
        float f7;
        char c8;
        float f8;
        CharSequence replaceEmoji;
        TLRPC$Message tLRPC$Message;
        TLRPC$MessageMedia tLRPC$MessageMedia;
        TLRPC$Chat tLRPC$Chat;
        TLRPC$User tLRPC$User;
        TLRPC$Chat tLRPC$Chat2;
        TLRPC$Peer tLRPC$Peer;
        FrameLayout.LayoutParams layoutParams4;
        char c9;
        int i8;
        int i9;
        TLRPC$PhotoSize tLRPC$PhotoSize2;
        if (this.pinnedMessageView == null || this.chatMode != 0) {
            return;
        }
        if (isThreadChat()) {
            if (!this.threadMessageVisible) {
                messageObject = this.threadMessageObject;
                i2 = this.threadMessageId;
                TLRPC$KeyboardButton pinnedButton = pinnedButton(messageObject);
                this.pinnedMessageButtonShown = pinnedButton == null;
                SharedPreferences notificationsSettings = MessagesController.getNotificationsSettings(this.currentAccount);
                if (this.threadMessageObject == null) {
                    if ((this.chatInfo != null || this.userInfo != null) && i2 != 0) {
                        if (!this.pinnedMessageIds.isEmpty()) {
                        }
                    }
                    z2 = hidePinnedMessageView(z);
                    if (!z2) {
                        return;
                    }
                    checkListViewPaddings();
                    return;
                }
                if (this.reportType < 0 && ((actionBar = this.actionBar) == null || (!actionBar.isActionModeShowed() && !this.actionBar.isSearchFieldVisible()))) {
                    updatePinnedListButton(z);
                    if (messageObject == null) {
                        if (this.pinnedMessageView.getTag() != null) {
                            this.pinnedMessageView.setTag(null);
                            AnimatorSet animatorSet = this.pinnedMessageViewAnimator;
                            if (animatorSet != null) {
                                animatorSet.cancel();
                                this.pinnedMessageViewAnimator = null;
                            }
                            if (z) {
                                ValueAnimator ofFloat = ValueAnimator.ofFloat(this.pinnedMessageEnterOffset, 0.0f);
                                ofFloat.addUpdateListener(new AnonymousClass92());
                                this.pinnedMessageView.setVisibility(0);
                                AnimatorSet animatorSet2 = new AnimatorSet();
                                this.pinnedMessageViewAnimator = animatorSet2;
                                animatorSet2.playTogether(ofFloat);
                                this.pinnedMessageViewAnimator.setDuration(200L);
                                this.pinnedMessageViewAnimator.addListener(new AnonymousClass93());
                                this.pinnedMessageViewAnimator.start();
                            } else {
                                this.pinnedMessageEnterOffset = 0.0f;
                                invalidateChatListViewTopPadding();
                                invalidateMessagesVisiblePart();
                                this.pinnedMessageView.setVisibility(0);
                            }
                            z2 = true;
                        } else {
                            z2 = false;
                        }
                        int i10 = 0;
                        while (true) {
                            AnimatorSet[] animatorSetArr = this.pinnedNextAnimation;
                            if (i10 >= animatorSetArr.length) {
                                break;
                            }
                            if (animatorSetArr[i10] != null) {
                                animatorSetArr[i10].cancel();
                                this.pinnedNextAnimation[i10] = null;
                            }
                            i10++;
                        }
                        this.setPinnedTextTranslationX = false;
                        TrackingWidthSimpleTextView trackingWidthSimpleTextView2 = this.pinnedNameTextView[i != 0 ? (char) 1 : (char) 0];
                        SimpleTextView simpleTextView2 = this.pinnedMessageTextView[i != 0 ? (char) 1 : (char) 0];
                        PinnedMessageButton pinnedMessageButton2 = this.pinnedMessageButton[i != 0 ? (char) 1 : (char) 0];
                        pinnedMessageButton2.setVisibility(pinnedButton != null ? 0 : 8);
                        this.pinnedMessageButton[i != 0 ? (char) 0 : (char) 1].setOnClickListener(null);
                        this.pinnedMessageButton[i != 0 ? (char) 0 : (char) 1].setOnLongClickListener(null);
                        if (pinnedButton == null) {
                            pinnedMessageButton2.setText((CharSequence) null);
                            pinnedMessageButton2.setOnClickListener(null);
                        } else {
                            SpannableString spannableString = new SpannableString(pinnedButton.text);
                            Emoji.replaceEmoji(spannableString, pinnedMessageButton2.getPaint().getFontMetricsInt(), AndroidUtilities.dp(20.0f), false);
                            pinnedMessageButton2.setText(spannableString);
                            pinnedMessageButton2.setOnClickListener(new ChatActivity$$ExternalSyntheticLambda90(this, pinnedButton, messageObject));
                            pinnedMessageButton2.setOnLongClickListener(new ChatActivity$$ExternalSyntheticLambda101(this, pinnedButton, messageObject, pinnedMessageButton2));
                        }
                        pinnedMessageButton2.measure(View.MeasureSpec.makeMeasureSpec(999999, Integer.MIN_VALUE), View.MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(28.0f), 1073741824));
                        if (simpleTextView2.getLayoutParams() instanceof ViewGroup.MarginLayoutParams) {
                            ((ViewGroup.MarginLayoutParams) simpleTextView2.getLayoutParams()).rightMargin = pinnedButton == null ? AndroidUtilities.dp(44.0f) : pinnedMessageButton2.getMeasuredWidth() + AndroidUtilities.dp(22.0f);
                        }
                        if (trackingWidthSimpleTextView2.getLayoutParams() instanceof ViewGroup.MarginLayoutParams) {
                            ((ViewGroup.MarginLayoutParams) trackingWidthSimpleTextView2.getLayoutParams()).rightMargin = pinnedButton == null ? AndroidUtilities.dp(44.0f) : pinnedMessageButton2.getMeasuredWidth() + AndroidUtilities.dp(22.0f);
                        }
                        FrameLayout.LayoutParams layoutParams5 = (FrameLayout.LayoutParams) this.pinnedNameTextView[0].getLayoutParams();
                        FrameLayout.LayoutParams layoutParams6 = (FrameLayout.LayoutParams) this.pinnedNameTextView[1].getLayoutParams();
                        FrameLayout.LayoutParams layoutParams7 = (FrameLayout.LayoutParams) this.pinnedCounterTextView.getLayoutParams();
                        FrameLayout.LayoutParams layoutParams8 = (FrameLayout.LayoutParams) this.pinnedMessageTextView[0].getLayoutParams();
                        FrameLayout.LayoutParams layoutParams9 = (FrameLayout.LayoutParams) this.pinnedMessageTextView[1].getLayoutParams();
                        TLRPC$PhotoSize closestPhotoSizeWithSize = FileLoader.getClosestPhotoSizeWithSize(messageObject.photoThumbs2, AndroidUtilities.dp(320.0f));
                        TLRPC$PhotoSize closestPhotoSizeWithSize2 = FileLoader.getClosestPhotoSizeWithSize(messageObject.photoThumbs2, AndroidUtilities.dp(40.0f));
                        TLObject tLObject = messageObject.photoThumbsObject2;
                        if (closestPhotoSizeWithSize == null) {
                            if (messageObject.mediaExists) {
                                TLRPC$PhotoSize closestPhotoSizeWithSize3 = FileLoader.getClosestPhotoSizeWithSize(messageObject.photoThumbs, AndroidUtilities.getPhotoSize());
                                i9 = closestPhotoSizeWithSize3 != null ? closestPhotoSizeWithSize3.size : 0;
                                i8 = 0;
                                tLRPC$PhotoSize2 = closestPhotoSizeWithSize3;
                            } else {
                                tLRPC$PhotoSize2 = FileLoader.getClosestPhotoSizeWithSize(messageObject.photoThumbs, AndroidUtilities.dp(320.0f));
                                i9 = 0;
                                i8 = 1;
                            }
                            pinnedMessageButton = pinnedMessageButton2;
                            tLRPC$KeyboardButton = pinnedButton;
                            i3 = i9;
                            tLRPC$PhotoSize = FileLoader.getClosestPhotoSizeWithSize(messageObject.photoThumbs, AndroidUtilities.dp(40.0f));
                            tLObject = messageObject.photoThumbsObject;
                            i4 = i8;
                            closestPhotoSizeWithSize = tLRPC$PhotoSize2;
                        } else {
                            pinnedMessageButton = pinnedMessageButton2;
                            tLRPC$KeyboardButton = pinnedButton;
                            i3 = 0;
                            tLRPC$PhotoSize = closestPhotoSizeWithSize2;
                            i4 = 1;
                        }
                        if (closestPhotoSizeWithSize == tLRPC$PhotoSize) {
                            tLRPC$PhotoSize = null;
                        }
                        int i11 = layoutParams5.leftMargin;
                        boolean z8 = closestPhotoSizeWithSize == null || (closestPhotoSizeWithSize instanceof TLRPC$TL_photoSizeEmpty) || (closestPhotoSizeWithSize.location instanceof TLRPC$TL_fileLocationUnavailable) || messageObject.isAnyKindOfSticker() || messageObject.isSecretMedia();
                        if (z8) {
                            this.pinnedImageLocation = null;
                            this.pinnedImageLocationObject = null;
                            if (i == 0) {
                                this.pinnedMessageImageView[0].setImageBitmap(null);
                                this.pinnedMessageImageView[0].setVisibility(4);
                            }
                            int dp = AndroidUtilities.dp(18.0f);
                            layoutParams9.leftMargin = dp;
                            layoutParams8.leftMargin = dp;
                            layoutParams7.leftMargin = dp;
                            layoutParams6.leftMargin = dp;
                            layoutParams5.leftMargin = dp;
                            trackingWidthSimpleTextView = trackingWidthSimpleTextView2;
                            layoutParams2 = layoutParams7;
                            layoutParams = layoutParams6;
                            layoutParams3 = layoutParams5;
                        } else {
                            if (messageObject.isRoundVideo()) {
                                c9 = 1;
                                layoutParams4 = layoutParams8;
                                this.pinnedMessageImageView[1].setRoundRadius(AndroidUtilities.dp(16.0f));
                            } else {
                                layoutParams4 = layoutParams8;
                                c9 = 1;
                                this.pinnedMessageImageView[1].setRoundRadius(AndroidUtilities.dp(2.0f));
                            }
                            this.pinnedImageSize = i3;
                            this.pinnedImageCacheType = i4;
                            this.pinnedImageLocation = closestPhotoSizeWithSize;
                            this.pinnedImageThumbLocation = tLRPC$PhotoSize;
                            this.pinnedImageLocationObject = tLObject;
                            long j = i3;
                            trackingWidthSimpleTextView = trackingWidthSimpleTextView2;
                            FrameLayout.LayoutParams layoutParams10 = layoutParams4;
                            layoutParams = layoutParams6;
                            layoutParams3 = layoutParams5;
                            this.pinnedMessageImageView[c9].setImage(ImageLocation.getForObject(closestPhotoSizeWithSize, tLObject), "50_50", ImageLocation.getForObject(tLRPC$PhotoSize, tLObject), "50_50_b", null, j, i4, messageObject);
                            this.pinnedMessageImageView[1].setVisibility(0);
                            if (i != 0) {
                                this.pinnedMessageImageView[1].setAlpha(0.0f);
                            }
                            int dp2 = AndroidUtilities.dp(55.0f);
                            layoutParams9.leftMargin = dp2;
                            layoutParams8 = layoutParams10;
                            layoutParams8.leftMargin = dp2;
                            layoutParams2 = layoutParams7;
                            layoutParams2.leftMargin = dp2;
                            layoutParams.leftMargin = dp2;
                            layoutParams3.leftMargin = dp2;
                        }
                        this.pinnedNameTextView[0].setLayoutParams(layoutParams3);
                        this.pinnedNameTextView[1].setLayoutParams(layoutParams);
                        this.pinnedCounterTextView.setLayoutParams(layoutParams2);
                        this.pinnedMessageTextView[0].setLayoutParams(layoutParams8);
                        this.pinnedMessageTextView[1].setLayoutParams(layoutParams9);
                        if (this.loadedPinnedMessagesCount != 2) {
                            if (this.pinnedNameTextView[i != 0 ? (char) 0 : (char) 1].getTrackWidth()) {
                                z3 = false;
                                this.pinnedNameTextView[i == 0 ? (char) 0 : (char) 1].setTrackWidth(false);
                                TrackingWidthSimpleTextView trackingWidthSimpleTextView3 = trackingWidthSimpleTextView;
                                trackingWidthSimpleTextView3.setTrackWidth(true);
                                trackingWidthSimpleTextView3.setVisibility(0);
                                if (this.threadMessageId == 0) {
                                    MessagesController messagesController = getMessagesController();
                                    MessageObject messageObject2 = this.threadMessageObject;
                                    TLRPC$MessageFwdHeader tLRPC$MessageFwdHeader = messageObject2.messageOwner.fwd_from;
                                    if (tLRPC$MessageFwdHeader != null && (tLRPC$Peer = tLRPC$MessageFwdHeader.saved_from_peer) != null) {
                                        long j2 = tLRPC$Peer.user_id;
                                        if (j2 != 0) {
                                            TLRPC$Peer tLRPC$Peer2 = tLRPC$MessageFwdHeader.from_id;
                                            if (tLRPC$Peer2 instanceof TLRPC$TL_peerUser) {
                                                tLRPC$User = messagesController.getUser(Long.valueOf(tLRPC$Peer2.user_id));
                                            } else {
                                                tLRPC$User = messagesController.getUser(Long.valueOf(j2));
                                            }
                                        } else {
                                            if (tLRPC$Peer.channel_id != 0) {
                                                if (messageObject2.isSavedFromMegagroup()) {
                                                    TLRPC$Peer tLRPC$Peer3 = tLRPC$MessageFwdHeader.from_id;
                                                    if (tLRPC$Peer3 instanceof TLRPC$TL_peerUser) {
                                                        tLRPC$User = messagesController.getUser(Long.valueOf(tLRPC$Peer3.user_id));
                                                    }
                                                }
                                                tLRPC$Chat2 = messagesController.getChat(Long.valueOf(tLRPC$MessageFwdHeader.saved_from_peer.channel_id));
                                                tLRPC$Chat = tLRPC$Chat2;
                                                tLRPC$User = null;
                                            } else {
                                                long j3 = tLRPC$Peer.chat_id;
                                                if (j3 != 0) {
                                                    TLRPC$Peer tLRPC$Peer4 = tLRPC$MessageFwdHeader.from_id;
                                                    if (tLRPC$Peer4 instanceof TLRPC$TL_peerUser) {
                                                        tLRPC$User = messagesController.getUser(Long.valueOf(tLRPC$Peer4.user_id));
                                                    } else {
                                                        if (tLRPC$Peer4 instanceof TLRPC$TL_peerChat) {
                                                            tLRPC$Chat2 = messagesController.getChat(Long.valueOf(tLRPC$Peer4.chat_id));
                                                        } else if (tLRPC$Peer4 instanceof TLRPC$TL_peerChannel) {
                                                            tLRPC$Chat2 = messagesController.getChat(Long.valueOf(tLRPC$Peer4.channel_id));
                                                        } else {
                                                            tLRPC$Chat2 = messagesController.getChat(Long.valueOf(j3));
                                                        }
                                                        tLRPC$Chat = tLRPC$Chat2;
                                                        tLRPC$User = null;
                                                    }
                                                }
                                                tLRPC$User = null;
                                            }
                                            if (tLRPC$User != null) {
                                            }
                                        }
                                        tLRPC$Chat = null;
                                        if (tLRPC$User != null) {
                                        }
                                    } else if (messageObject2.isFromUser()) {
                                        tLRPC$User = messagesController.getUser(Long.valueOf(this.threadMessageObject.messageOwner.from_id.user_id));
                                        tLRPC$Chat = null;
                                        if (tLRPC$User != null) {
                                            trackingWidthSimpleTextView3.setText(ContactsController.formatName(tLRPC$User.first_name, tLRPC$User.last_name));
                                        } else if (tLRPC$Chat != null) {
                                            trackingWidthSimpleTextView3.setText(tLRPC$Chat.title);
                                        }
                                    } else {
                                        TLRPC$Message tLRPC$Message2 = this.threadMessageObject.messageOwner;
                                        TLRPC$Peer tLRPC$Peer5 = tLRPC$Message2.from_id;
                                        if (tLRPC$Peer5 instanceof TLRPC$TL_peerChannel) {
                                            tLRPC$Chat2 = messagesController.getChat(Long.valueOf(tLRPC$Peer5.channel_id));
                                        } else if (tLRPC$Peer5 instanceof TLRPC$TL_peerChat) {
                                            tLRPC$Chat2 = messagesController.getChat(Long.valueOf(tLRPC$Peer5.chat_id));
                                        } else {
                                            if (tLRPC$Message2.post) {
                                                tLRPC$Chat2 = messagesController.getChat(Long.valueOf(tLRPC$Message2.peer_id.channel_id));
                                            }
                                            tLRPC$User = null;
                                            tLRPC$Chat = null;
                                            if (tLRPC$User != null) {
                                            }
                                        }
                                        tLRPC$Chat = tLRPC$Chat2;
                                        tLRPC$User = null;
                                        if (tLRPC$User != null) {
                                        }
                                    }
                                } else {
                                    if (messageObject.isInvoice() && (tLRPC$Message = messageObject.messageOwner) != null && (tLRPC$MessageMedia = tLRPC$Message.media) != null && tLRPC$MessageMedia.title != null) {
                                        z4 = false;
                                        trackingWidthSimpleTextView3.setTrackWidth(false);
                                        trackingWidthSimpleTextView3.setText(messageObject.messageOwner.media.title);
                                        z3 = true;
                                    } else {
                                        if (this.currentPinnedMessageIndex[0] == 0 || this.loadedPinnedMessagesCount != 2) {
                                            trackingWidthSimpleTextView3.setText(LocaleController.getString("PinnedMessage", 2131627599), true);
                                        } else {
                                            trackingWidthSimpleTextView3.setText(LocaleController.getString("PreviousPinnedMessage", 2131627745), true);
                                        }
                                        if (this.currentPinnedMessageIndex[0] != 0) {
                                            int pinnedMessagesCount = getPinnedMessagesCount();
                                            this.pinnedCounterTextView.setNumber(Math.min(pinnedMessagesCount - 1, Math.max(1, pinnedMessagesCount - this.currentPinnedMessageIndex[0])), z && this.pinnedCounterTextView.getTag() == null);
                                            z4 = true;
                                        }
                                    }
                                    i5 = messageObject.type;
                                    if (i5 == 14) {
                                        charSequence = String.format("%s - %s", messageObject.getMusicAuthor(), messageObject.getMusicTitle());
                                    } else if (i5 == 17) {
                                        String str = ((TLRPC$TL_messageMediaPoll) messageObject.messageOwner.media).poll.question;
                                        if (str.length() > 150) {
                                            str = str.substring(0, 150);
                                        }
                                        charSequence = str.replace('\n', ' ');
                                    } else {
                                        TLRPC$MessageMedia tLRPC$MessageMedia2 = messageObject.messageOwner.media;
                                        if (tLRPC$MessageMedia2 instanceof TLRPC$TL_messageMediaGame) {
                                            charSequence = Emoji.replaceEmoji(tLRPC$MessageMedia2.game.title, simpleTextView2.getPaint().getFontMetricsInt(), AndroidUtilities.dp(14.0f), false);
                                        } else {
                                            if (!TextUtils.isEmpty(messageObject.caption)) {
                                                String charSequence2 = messageObject.caption.toString();
                                                if (charSequence2.length() > 150) {
                                                    charSequence2 = charSequence2.substring(0, 150);
                                                }
                                                CharSequence replace = charSequence2.replace('\n', ' ');
                                                TLRPC$Message tLRPC$Message3 = messageObject.messageOwner;
                                                if (tLRPC$Message3 != null) {
                                                    replace = MessageObject.replaceAnimatedEmoji(replace, tLRPC$Message3.entities, simpleTextView2.getPaint().getFontMetricsInt());
                                                }
                                                replaceEmoji = Emoji.replaceEmoji(replace, simpleTextView2.getPaint().getFontMetricsInt(), AndroidUtilities.dp(14.0f), false);
                                            } else {
                                                CharSequence charSequence3 = messageObject.messageText;
                                                if (charSequence3 != null) {
                                                    String charSequence4 = charSequence3.toString();
                                                    if (charSequence4.length() > 150) {
                                                        charSequence4 = charSequence4.substring(0, 150);
                                                    }
                                                    CharSequence replace2 = charSequence4.replace('\n', ' ');
                                                    TLRPC$Message tLRPC$Message4 = messageObject.messageOwner;
                                                    if (tLRPC$Message4 != null) {
                                                        replace2 = MessageObject.replaceAnimatedEmoji(replace2, tLRPC$Message4.entities, simpleTextView2.getPaint().getFontMetricsInt());
                                                    }
                                                    replaceEmoji = Emoji.replaceEmoji(replace2, simpleTextView2.getPaint().getFontMetricsInt(), AndroidUtilities.dp(14.0f), false);
                                                } else {
                                                    charSequence = null;
                                                }
                                            }
                                            charSequence = replaceEmoji;
                                        }
                                    }
                                    if (charSequence != null) {
                                        if (charSequence instanceof Spannable) {
                                            MediaDataController.addTextStyleRuns(messageObject, (Spannable) charSequence, 264);
                                        }
                                        simpleTextView = simpleTextView2;
                                        simpleTextView.setText(charSequence);
                                    } else {
                                        simpleTextView = simpleTextView2;
                                    }
                                    if (i != 0) {
                                        this.pinnedNextAnimation[0] = new AnimatorSet();
                                        this.pinnedNextAnimation[1] = new AnimatorSet();
                                        ArrayList arrayList = new ArrayList();
                                        ArrayList arrayList2 = new ArrayList();
                                        simpleTextView.setVisibility(0);
                                        trackingWidthSimpleTextView3.setVisibility(0);
                                        PinnedMessageButton pinnedMessageButton3 = pinnedMessageButton;
                                        if (tLRPC$KeyboardButton != null) {
                                            pinnedMessageButton3.setVisibility(0);
                                        }
                                        if (!z4) {
                                            if (this.pinnedCounterTextView.getTag() == null) {
                                                arrayList.add(ObjectAnimator.ofFloat(this.pinnedCounterTextView, View.ALPHA, 1.0f, 0.0f));
                                                arrayList.add(ObjectAnimator.ofFloat(this.pinnedCounterTextView, View.TRANSLATION_Y, 0.0f, -AndroidUtilities.dp(4.0f)));
                                                this.pinnedCounterTextView.setTag(1);
                                            }
                                        } else if (this.pinnedCounterTextView.getTag() != null) {
                                            this.pinnedCounterTextView.setVisibility(0);
                                            this.pinnedCounterTextView.setAlpha(0.0f);
                                            arrayList.add(ObjectAnimator.ofFloat(this.pinnedCounterTextView, View.ALPHA, 0.0f, 1.0f));
                                            arrayList.add(ObjectAnimator.ofFloat(this.pinnedCounterTextView, View.TRANSLATION_Y, -AndroidUtilities.dp(4.0f), 0.0f));
                                            this.pinnedCounterTextView.setTag(null);
                                        }
                                        if (z3 && !TextUtils.equals(trackingWidthSimpleTextView3.getText(), this.pinnedNameTextView[0].getText())) {
                                            trackingWidthSimpleTextView3.setAlpha(0.0f);
                                            arrayList.add(ObjectAnimator.ofFloat(trackingWidthSimpleTextView3, View.ALPHA, 0.0f, 1.0f));
                                            arrayList.add(ObjectAnimator.ofFloat(this.pinnedNameTextView[0], View.ALPHA, 1.0f, 0.0f));
                                            Property property = View.TRANSLATION_Y;
                                            float[] fArr = new float[2];
                                            fArr[0] = AndroidUtilities.dp(i == 2 ? 4.0f : -4.0f);
                                            fArr[1] = 0.0f;
                                            arrayList.add(ObjectAnimator.ofFloat(trackingWidthSimpleTextView3, property, fArr));
                                            z5 = this.forceScrollToFirst && this.loadedPinnedMessagesCount > 5;
                                            if (z5) {
                                                arrayList2.add(ObjectAnimator.ofFloat(trackingWidthSimpleTextView3, View.TRANSLATION_Y, AndroidUtilities.dp(4.0f), AndroidUtilities.dp(-2.0f)));
                                                f8 = 0.0f;
                                                c8 = 0;
                                            } else {
                                                Property property2 = View.TRANSLATION_Y;
                                                float[] fArr2 = new float[2];
                                                c8 = 0;
                                                fArr2[0] = AndroidUtilities.dp(i == 2 ? 4.0f : -4.0f);
                                                f8 = 0.0f;
                                                fArr2[1] = 0.0f;
                                                arrayList.add(ObjectAnimator.ofFloat(trackingWidthSimpleTextView3, property2, fArr2));
                                            }
                                            TrackingWidthSimpleTextView trackingWidthSimpleTextView4 = this.pinnedNameTextView[c8];
                                            Property property3 = View.TRANSLATION_Y;
                                            float[] fArr3 = new float[2];
                                            fArr3[c8] = f8;
                                            fArr3[1] = AndroidUtilities.dp(i == 2 ? -4.0f : 4.0f);
                                            arrayList.add(ObjectAnimator.ofFloat(trackingWidthSimpleTextView4, property3, fArr3));
                                            f3 = 0.0f;
                                        } else {
                                            if (trackingWidthSimpleTextView3 != this.pinnedNameTextView[0]) {
                                                trackingWidthSimpleTextView3.setAlpha(1.0f);
                                                f3 = 0.0f;
                                                this.pinnedNameTextView[0].setAlpha(0.0f);
                                                trackingWidthSimpleTextView3.setTranslationY(0.0f);
                                                this.pinnedNameTextView[0].setTranslationY(0.0f);
                                            } else {
                                                f3 = 0.0f;
                                                trackingWidthSimpleTextView3.setAlpha(1.0f);
                                                trackingWidthSimpleTextView3.setTranslationY(0.0f);
                                                this.pinnedNameTextView[1].setTranslationY(0.0f);
                                                this.pinnedNameTextView[1].setAlpha(0.0f);
                                            }
                                            z5 = false;
                                        }
                                        if (!TextUtils.equals(simpleTextView.getText(), this.pinnedMessageTextView[0].getText())) {
                                            simpleTextView.setAlpha(f3);
                                            arrayList.add(ObjectAnimator.ofFloat(simpleTextView, View.ALPHA, 0.0f, 1.0f));
                                            arrayList.add(ObjectAnimator.ofFloat(this.pinnedMessageTextView[0], View.ALPHA, 1.0f, 0.0f));
                                            boolean z9 = this.forceScrollToFirst && this.loadedPinnedMessagesCount > 5;
                                            if (z9) {
                                                arrayList2.add(ObjectAnimator.ofFloat(simpleTextView, View.TRANSLATION_Y, AndroidUtilities.dp(4.0f), AndroidUtilities.dp(-2.0f)));
                                                f7 = 0.0f;
                                                c7 = 0;
                                            } else {
                                                Property property4 = View.TRANSLATION_Y;
                                                float[] fArr4 = new float[2];
                                                c7 = 0;
                                                fArr4[0] = AndroidUtilities.dp(i == 2 ? 4.0f : -4.0f);
                                                f7 = 0.0f;
                                                fArr4[1] = 0.0f;
                                                arrayList.add(ObjectAnimator.ofFloat(simpleTextView, property4, fArr4));
                                            }
                                            SimpleTextView simpleTextView3 = this.pinnedMessageTextView[c7];
                                            Property property5 = View.TRANSLATION_Y;
                                            z6 = z9;
                                            float[] fArr5 = new float[2];
                                            fArr5[c7] = f7;
                                            fArr5[1] = AndroidUtilities.dp(i == 2 ? -4.0f : 4.0f);
                                            arrayList.add(ObjectAnimator.ofFloat(simpleTextView3, property5, fArr5));
                                            c2 = 0;
                                            f4 = 0.0f;
                                        } else {
                                            simpleTextView.setAlpha(1.0f);
                                            c2 = 0;
                                            f4 = 0.0f;
                                            this.pinnedMessageTextView[0].setAlpha(0.0f);
                                            simpleTextView.setTranslationY(0.0f);
                                            this.pinnedMessageTextView[0].setTranslationY(0.0f);
                                            z6 = false;
                                        }
                                        if (!TextUtils.equals(pinnedMessageButton3.getText(), this.pinnedMessageButton[c2].getText())) {
                                            pinnedMessageButton3.setAlpha(f4);
                                            arrayList.add(ObjectAnimator.ofFloat(pinnedMessageButton3, View.ALPHA, 0.0f, 1.0f));
                                            arrayList.add(ObjectAnimator.ofFloat(this.pinnedMessageButton[c2], View.ALPHA, 1.0f, 0.0f));
                                            boolean z10 = this.forceScrollToFirst && this.loadedPinnedMessagesCount > 5;
                                            if (z10) {
                                                arrayList2.add(ObjectAnimator.ofFloat(pinnedMessageButton3, View.TRANSLATION_Y, AndroidUtilities.dp(4.0f), AndroidUtilities.dp(-2.0f)));
                                                f6 = 0.0f;
                                                c6 = 0;
                                            } else {
                                                Property property6 = View.TRANSLATION_Y;
                                                float[] fArr6 = new float[2];
                                                c6 = 0;
                                                fArr6[0] = AndroidUtilities.dp(i == 2 ? 4.0f : -4.0f);
                                                f6 = 0.0f;
                                                fArr6[1] = 0.0f;
                                                arrayList.add(ObjectAnimator.ofFloat(pinnedMessageButton3, property6, fArr6));
                                            }
                                            PinnedMessageButton pinnedMessageButton4 = this.pinnedMessageButton[c6];
                                            Property property7 = View.TRANSLATION_Y;
                                            z7 = z10;
                                            float[] fArr7 = new float[2];
                                            fArr7[c6] = f6;
                                            fArr7[1] = AndroidUtilities.dp(i == 2 ? -4.0f : 4.0f);
                                            arrayList.add(ObjectAnimator.ofFloat(pinnedMessageButton4, property7, fArr7));
                                            c3 = 0;
                                        } else {
                                            pinnedMessageButton3.setAlpha(1.0f);
                                            c3 = 0;
                                            this.pinnedMessageButton[0].setAlpha(0.0f);
                                            pinnedMessageButton3.setTranslationY(0.0f);
                                            this.pinnedMessageButton[0].setTranslationY(0.0f);
                                            z7 = false;
                                        }
                                        int i12 = layoutParams3.leftMargin;
                                        if (i12 != i11) {
                                            this.setPinnedTextTranslationX = true;
                                            int i13 = i11 - i12;
                                            SimpleTextView simpleTextView4 = this.pinnedMessageTextView[c3];
                                            Property property8 = View.TRANSLATION_X;
                                            float[] fArr8 = new float[2];
                                            float f9 = i13;
                                            fArr8[c3] = f9;
                                            fArr8[1] = 0.0f;
                                            arrayList.add(ObjectAnimator.ofFloat(simpleTextView4, property8, fArr8));
                                            SimpleTextView simpleTextView5 = this.pinnedMessageTextView[1];
                                            Property property9 = View.TRANSLATION_X;
                                            float[] fArr9 = new float[2];
                                            fArr9[c3] = f9;
                                            fArr9[1] = 0.0f;
                                            arrayList.add(ObjectAnimator.ofFloat(simpleTextView5, property9, fArr9));
                                            TrackingWidthSimpleTextView trackingWidthSimpleTextView5 = this.pinnedNameTextView[c3];
                                            Property property10 = View.TRANSLATION_X;
                                            float[] fArr10 = new float[2];
                                            fArr10[c3] = f9;
                                            fArr10[1] = 0.0f;
                                            arrayList.add(ObjectAnimator.ofFloat(trackingWidthSimpleTextView5, property10, fArr10));
                                            TrackingWidthSimpleTextView trackingWidthSimpleTextView6 = this.pinnedNameTextView[1];
                                            Property property11 = View.TRANSLATION_X;
                                            float[] fArr11 = new float[2];
                                            fArr11[c3] = f9;
                                            fArr11[1] = 0.0f;
                                            arrayList.add(ObjectAnimator.ofFloat(trackingWidthSimpleTextView6, property11, fArr11));
                                            NumberTextView numberTextView = this.pinnedCounterTextView;
                                            Property property12 = View.TRANSLATION_X;
                                            float[] fArr12 = new float[2];
                                            int i14 = this.pinnedCounterTextViewX;
                                            fArr12[c3] = i14 + i13;
                                            fArr12[1] = i14;
                                            arrayList.add(ObjectAnimator.ofFloat(numberTextView, property12, fArr12));
                                            if (i13 > 0) {
                                                this.pinnedMessageImageView[c3].setAlpha(1.0f);
                                                arrayList.add(ObjectAnimator.ofFloat(this.pinnedMessageImageView[c3], View.ALPHA, 1.0f, 0.0f));
                                                arrayList.add(ObjectAnimator.ofFloat(this.pinnedMessageImageView[c3], View.SCALE_X, 1.0f, 0.7f));
                                                arrayList.add(ObjectAnimator.ofFloat(this.pinnedMessageImageView[c3], View.SCALE_Y, 1.0f, 0.7f));
                                            } else {
                                                arrayList.add(ObjectAnimator.ofFloat(this.pinnedMessageImageView[1], View.ALPHA, 0.0f, 1.0f));
                                                arrayList.add(ObjectAnimator.ofFloat(this.pinnedMessageImageView[1], View.SCALE_X, 0.7f, 1.0f));
                                                arrayList.add(ObjectAnimator.ofFloat(this.pinnedMessageImageView[1], View.SCALE_Y, 0.7f, 1.0f));
                                            }
                                            backupImageView = null;
                                            c4 = 1;
                                        } else {
                                            this.setPinnedTextTranslationX = false;
                                            simpleTextView.setTranslationX(0.0f);
                                            this.pinnedMessageTextView[0].setTranslationX(0.0f);
                                            trackingWidthSimpleTextView3.setTranslationX(0.0f);
                                            this.pinnedNameTextView[0].setTranslationX(0.0f);
                                            pinnedMessageButton3.setTranslationX(0.0f);
                                            this.pinnedMessageButton[0].setTranslationX(0.0f);
                                            this.pinnedCounterTextView.setTranslationX(this.pinnedCounterTextViewX);
                                            this.pinnedMessageImageView[1].setAlpha(1.0f);
                                            if (!z8) {
                                                arrayList.add(ObjectAnimator.ofFloat(this.pinnedMessageImageView[1], View.ALPHA, 0.0f, 1.0f));
                                                arrayList.add(ObjectAnimator.ofFloat(this.pinnedMessageImageView[0], View.ALPHA, 1.0f, 0.0f));
                                                if (this.forceScrollToFirst && this.loadedPinnedMessagesCount > 5) {
                                                    BackupImageView[] backupImageViewArr = this.pinnedMessageImageView;
                                                    backupImageView2 = backupImageViewArr[1];
                                                    arrayList2.add(ObjectAnimator.ofFloat(backupImageViewArr[1], View.TRANSLATION_Y, AndroidUtilities.dp(3.0f), AndroidUtilities.dp(-2.0f)));
                                                    f5 = 0.0f;
                                                    c5 = 0;
                                                } else {
                                                    BackupImageView backupImageView3 = this.pinnedMessageImageView[1];
                                                    Property property13 = View.TRANSLATION_Y;
                                                    float[] fArr13 = new float[2];
                                                    c5 = 0;
                                                    fArr13[0] = AndroidUtilities.dp(i == 2 ? 3.0f : -3.0f);
                                                    f5 = 0.0f;
                                                    fArr13[1] = 0.0f;
                                                    arrayList.add(ObjectAnimator.ofFloat(backupImageView3, property13, fArr13));
                                                    backupImageView2 = null;
                                                }
                                                BackupImageView backupImageView4 = this.pinnedMessageImageView[c5];
                                                Property property14 = View.TRANSLATION_Y;
                                                float[] fArr14 = new float[2];
                                                fArr14[c5] = f5;
                                                c4 = 1;
                                                fArr14[1] = AndroidUtilities.dp(i == 2 ? -3.0f : 3.0f);
                                                arrayList.add(ObjectAnimator.ofFloat(backupImageView4, property14, fArr14));
                                                backupImageView = backupImageView2;
                                            } else {
                                                c4 = 1;
                                                backupImageView = null;
                                            }
                                        }
                                        boolean z11 = z6;
                                        i6 = 1;
                                        this.pinnedNextAnimation[c4].addListener(new AnonymousClass94(z5, z11, backupImageView, trackingWidthSimpleTextView3, simpleTextView, z7, pinnedMessageButton3));
                                        this.pinnedNextAnimation[1].setDuration(360L);
                                        AnimatorSet animatorSet3 = this.pinnedNextAnimation[1];
                                        CubicBezierInterpolator cubicBezierInterpolator = CubicBezierInterpolator.EASE_OUT_QUINT;
                                        animatorSet3.setInterpolator(cubicBezierInterpolator);
                                        this.pinnedNextAnimation[1].playTogether(arrayList2);
                                        this.pinnedNextAnimation[0].playTogether(arrayList);
                                        this.pinnedNextAnimation[0].addListener(new AnonymousClass95(trackingWidthSimpleTextView3, z11, simpleTextView, z7, pinnedMessageButton3, z8));
                                        this.pinnedNextAnimation[0].setInterpolator(cubicBezierInterpolator);
                                        this.pinnedNextAnimation[0].setDuration(360L);
                                        if (!this.setPinnedTextTranslationX) {
                                            this.pinnedNextAnimation[0].start();
                                            this.pinnedNextAnimation[1].start();
                                        }
                                    } else {
                                        SimpleTextView simpleTextView6 = simpleTextView;
                                        i6 = 1;
                                        if (!z4 || this.currentPinnedMessageIndex[0] == 0) {
                                            if (this.pinnedCounterTextView.getTag() == null) {
                                                f = 0.0f;
                                                this.pinnedCounterTextView.setAlpha(0.0f);
                                                this.pinnedCounterTextView.setVisibility(4);
                                                this.pinnedCounterTextView.setTag(1);
                                                this.pinnedCounterTextView.setTranslationY(f);
                                                this.pinnedCounterTextView.setTranslationX(this.pinnedCounterTextViewX);
                                                NumberTextView numberTextView2 = this.pinnedCounterTextView;
                                                if (z3) {
                                                    i7 = 0;
                                                    if (this.currentPinnedMessageIndex[0] != 0) {
                                                        f2 = 1.0f;
                                                        numberTextView2.setAlpha(f2);
                                                        simpleTextView6.setVisibility(i7);
                                                        simpleTextView6.setAlpha(1.0f);
                                                        simpleTextView6.setTranslationX(0.0f);
                                                        simpleTextView6.setTranslationY(0.0f);
                                                        trackingWidthSimpleTextView3.setVisibility(i7);
                                                        trackingWidthSimpleTextView3.setAlpha(1.0f);
                                                        trackingWidthSimpleTextView3.setTranslationX(0.0f);
                                                        trackingWidthSimpleTextView3.setTranslationY(0.0f);
                                                        this.pinnedMessageTextView[1].setVisibility(4);
                                                        this.pinnedMessageTextView[1].setTranslationX(0.0f);
                                                        this.pinnedMessageTextView[1].setTranslationY(0.0f);
                                                        this.pinnedMessageButton[1].setVisibility(4);
                                                        this.pinnedMessageButton[1].setTranslationX(0.0f);
                                                        this.pinnedMessageButton[1].setTranslationY(0.0f);
                                                        this.pinnedNameTextView[1].setVisibility(4);
                                                        this.pinnedNameTextView[1].setTranslationX(0.0f);
                                                        this.pinnedNameTextView[1].setTranslationY(0.0f);
                                                        this.pinnedMessageImageView[0].setVisibility(4);
                                                        BackupImageView[] backupImageViewArr2 = this.pinnedMessageImageView;
                                                        BackupImageView backupImageView5 = backupImageViewArr2[1];
                                                        backupImageViewArr2[1] = backupImageViewArr2[0];
                                                        backupImageViewArr2[0] = backupImageView5;
                                                        backupImageViewArr2[0].setAlpha(1.0f);
                                                        this.pinnedMessageImageView[0].setScaleX(1.0f);
                                                        this.pinnedMessageImageView[0].setScaleY(1.0f);
                                                        this.pinnedMessageImageView[0].setTranslationY(0.0f);
                                                        this.pinnedMessageImageView[1].setAlpha(1.0f);
                                                        this.pinnedMessageImageView[1].setScaleX(1.0f);
                                                        this.pinnedMessageImageView[1].setScaleY(1.0f);
                                                        this.pinnedMessageImageView[1].setTranslationY(0.0f);
                                                    }
                                                } else {
                                                    i7 = 0;
                                                }
                                                f2 = 0.0f;
                                                numberTextView2.setAlpha(f2);
                                                simpleTextView6.setVisibility(i7);
                                                simpleTextView6.setAlpha(1.0f);
                                                simpleTextView6.setTranslationX(0.0f);
                                                simpleTextView6.setTranslationY(0.0f);
                                                trackingWidthSimpleTextView3.setVisibility(i7);
                                                trackingWidthSimpleTextView3.setAlpha(1.0f);
                                                trackingWidthSimpleTextView3.setTranslationX(0.0f);
                                                trackingWidthSimpleTextView3.setTranslationY(0.0f);
                                                this.pinnedMessageTextView[1].setVisibility(4);
                                                this.pinnedMessageTextView[1].setTranslationX(0.0f);
                                                this.pinnedMessageTextView[1].setTranslationY(0.0f);
                                                this.pinnedMessageButton[1].setVisibility(4);
                                                this.pinnedMessageButton[1].setTranslationX(0.0f);
                                                this.pinnedMessageButton[1].setTranslationY(0.0f);
                                                this.pinnedNameTextView[1].setVisibility(4);
                                                this.pinnedNameTextView[1].setTranslationX(0.0f);
                                                this.pinnedNameTextView[1].setTranslationY(0.0f);
                                                this.pinnedMessageImageView[0].setVisibility(4);
                                                BackupImageView[] backupImageViewArr22 = this.pinnedMessageImageView;
                                                BackupImageView backupImageView52 = backupImageViewArr22[1];
                                                backupImageViewArr22[1] = backupImageViewArr22[0];
                                                backupImageViewArr22[0] = backupImageView52;
                                                backupImageViewArr22[0].setAlpha(1.0f);
                                                this.pinnedMessageImageView[0].setScaleX(1.0f);
                                                this.pinnedMessageImageView[0].setScaleY(1.0f);
                                                this.pinnedMessageImageView[0].setTranslationY(0.0f);
                                                this.pinnedMessageImageView[1].setAlpha(1.0f);
                                                this.pinnedMessageImageView[1].setScaleX(1.0f);
                                                this.pinnedMessageImageView[1].setScaleY(1.0f);
                                                this.pinnedMessageImageView[1].setTranslationY(0.0f);
                                            }
                                        } else if (this.pinnedCounterTextView.getTag() != null) {
                                            this.pinnedCounterTextView.setVisibility(0);
                                            this.pinnedCounterTextView.setAlpha(1.0f);
                                            this.pinnedCounterTextView.setTag(null);
                                        }
                                        f = 0.0f;
                                        this.pinnedCounterTextView.setTranslationY(f);
                                        this.pinnedCounterTextView.setTranslationX(this.pinnedCounterTextViewX);
                                        NumberTextView numberTextView22 = this.pinnedCounterTextView;
                                        if (z3) {
                                        }
                                        f2 = 0.0f;
                                        numberTextView22.setAlpha(f2);
                                        simpleTextView6.setVisibility(i7);
                                        simpleTextView6.setAlpha(1.0f);
                                        simpleTextView6.setTranslationX(0.0f);
                                        simpleTextView6.setTranslationY(0.0f);
                                        trackingWidthSimpleTextView3.setVisibility(i7);
                                        trackingWidthSimpleTextView3.setAlpha(1.0f);
                                        trackingWidthSimpleTextView3.setTranslationX(0.0f);
                                        trackingWidthSimpleTextView3.setTranslationY(0.0f);
                                        this.pinnedMessageTextView[1].setVisibility(4);
                                        this.pinnedMessageTextView[1].setTranslationX(0.0f);
                                        this.pinnedMessageTextView[1].setTranslationY(0.0f);
                                        this.pinnedMessageButton[1].setVisibility(4);
                                        this.pinnedMessageButton[1].setTranslationX(0.0f);
                                        this.pinnedMessageButton[1].setTranslationY(0.0f);
                                        this.pinnedNameTextView[1].setVisibility(4);
                                        this.pinnedNameTextView[1].setTranslationX(0.0f);
                                        this.pinnedNameTextView[1].setTranslationY(0.0f);
                                        this.pinnedMessageImageView[0].setVisibility(4);
                                        BackupImageView[] backupImageViewArr222 = this.pinnedMessageImageView;
                                        BackupImageView backupImageView522 = backupImageViewArr222[1];
                                        backupImageViewArr222[1] = backupImageViewArr222[0];
                                        backupImageViewArr222[0] = backupImageView522;
                                        backupImageViewArr222[0].setAlpha(1.0f);
                                        this.pinnedMessageImageView[0].setScaleX(1.0f);
                                        this.pinnedMessageImageView[0].setScaleY(1.0f);
                                        this.pinnedMessageImageView[0].setTranslationY(0.0f);
                                        this.pinnedMessageImageView[1].setAlpha(1.0f);
                                        this.pinnedMessageImageView[1].setScaleX(1.0f);
                                        this.pinnedMessageImageView[1].setScaleY(1.0f);
                                        this.pinnedMessageImageView[1].setTranslationY(0.0f);
                                    }
                                    if (isThreadChat()) {
                                        this.pinnedLineView.set(0, i6, false);
                                    } else {
                                        this.pinnedLineView.set((this.pinnedMessageIds.size() - i6) - Collections.binarySearch(this.pinnedMessageIds, Integer.valueOf(this.currentPinnedMessageId), Comparator$CC.reverseOrder()), this.pinnedMessageIds.size(), z);
                                    }
                                }
                                z4 = false;
                                i5 = messageObject.type;
                                if (i5 == 14) {
                                }
                                if (charSequence != null) {
                                }
                                if (i != 0) {
                                }
                                if (isThreadChat()) {
                                }
                            }
                        }
                        z3 = true;
                        this.pinnedNameTextView[i == 0 ? (char) 0 : (char) 1].setTrackWidth(false);
                        TrackingWidthSimpleTextView trackingWidthSimpleTextView32 = trackingWidthSimpleTextView;
                        trackingWidthSimpleTextView32.setTrackWidth(true);
                        trackingWidthSimpleTextView32.setVisibility(0);
                        if (this.threadMessageId == 0) {
                        }
                        z4 = false;
                        i5 = messageObject.type;
                        if (i5 == 14) {
                        }
                        if (charSequence != null) {
                        }
                        if (i != 0) {
                        }
                        if (isThreadChat()) {
                        }
                    } else {
                        int i15 = 4;
                        NumberTextView numberTextView3 = this.pinnedCounterTextView;
                        if (this.loadedPinnedMessagesCount != 2) {
                            c = 0;
                            if (this.currentPinnedMessageIndex[0] != 0) {
                                i15 = 0;
                            }
                        } else {
                            c = 0;
                        }
                        numberTextView3.setVisibility(i15);
                        this.pinnedCounterTextView.setAlpha((this.loadedPinnedMessagesCount == 2 || this.currentPinnedMessageIndex[c] == 0) ? 0.0f : 1.0f);
                        this.pinnedImageLocation = null;
                        this.pinnedImageLocationObject = null;
                        z2 = hidePinnedMessageView(z);
                        if (this.loadingPinnedMessages.indexOfKey(i2) < 0) {
                            this.loadingPinnedMessages.put(i2, Boolean.TRUE);
                            ArrayList<Integer> arrayList3 = new ArrayList<>();
                            arrayList3.add(Integer.valueOf(i2));
                            getMediaDataController().loadPinnedMessages(this.dialog_id, ChatObject.isChannel(this.currentChat) ? this.currentChat.id : 0L, arrayList3, true);
                        }
                    }
                    if (!z2) {
                    }
                }
                z2 = hidePinnedMessageView(z);
                if (!z2) {
                }
            }
            messageObject = null;
            i2 = 0;
            TLRPC$KeyboardButton pinnedButton2 = pinnedButton(messageObject);
            this.pinnedMessageButtonShown = pinnedButton2 == null;
            SharedPreferences notificationsSettings2 = MessagesController.getNotificationsSettings(this.currentAccount);
            if (this.threadMessageObject == null) {
            }
            if (this.reportType < 0) {
                updatePinnedListButton(z);
                if (messageObject == null) {
                }
                if (!z2) {
                }
            }
            z2 = hidePinnedMessageView(z);
            if (!z2) {
            }
        } else {
            if (this.currentPinnedMessageId != 0 && !this.pinnedMessageIds.isEmpty()) {
                messageObject = this.pinnedMessageObjects.get(Integer.valueOf(this.currentPinnedMessageId));
                if (messageObject == null) {
                    messageObject = this.messagesDict[0].get(this.currentPinnedMessageId);
                }
                i2 = this.currentPinnedMessageId;
                TLRPC$KeyboardButton pinnedButton22 = pinnedButton(messageObject);
                this.pinnedMessageButtonShown = pinnedButton22 == null;
                SharedPreferences notificationsSettings22 = MessagesController.getNotificationsSettings(this.currentAccount);
                if (this.threadMessageObject == null) {
                }
                if (this.reportType < 0) {
                }
                z2 = hidePinnedMessageView(z);
                if (!z2) {
                }
            }
            messageObject = null;
            i2 = 0;
            TLRPC$KeyboardButton pinnedButton222 = pinnedButton(messageObject);
            this.pinnedMessageButtonShown = pinnedButton222 == null;
            SharedPreferences notificationsSettings222 = MessagesController.getNotificationsSettings(this.currentAccount);
            if (this.threadMessageObject == null) {
            }
            if (this.reportType < 0) {
            }
            z2 = hidePinnedMessageView(z);
            if (!z2) {
            }
        }
    }

    /* renamed from: org.telegram.ui.ChatActivity$92 */
    /* loaded from: classes3.dex */
    public class AnonymousClass92 implements ValueAnimator.AnimatorUpdateListener {
        AnonymousClass92() {
            ChatActivity.this = r1;
        }

        @Override // android.animation.ValueAnimator.AnimatorUpdateListener
        public void onAnimationUpdate(ValueAnimator valueAnimator) {
            ChatActivity.this.pinnedMessageEnterOffset = ((Float) valueAnimator.getAnimatedValue()).floatValue();
            ChatActivity.this.invalidateChatListViewTopPadding();
            ChatActivity.this.invalidateMessagesVisiblePart();
        }
    }

    /* renamed from: org.telegram.ui.ChatActivity$93 */
    /* loaded from: classes3.dex */
    public class AnonymousClass93 extends AnimatorListenerAdapter {
        AnonymousClass93() {
            ChatActivity.this = r1;
        }

        @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
        public void onAnimationEnd(Animator animator) {
            if (ChatActivity.this.pinnedMessageViewAnimator == null || !ChatActivity.this.pinnedMessageViewAnimator.equals(animator)) {
                return;
            }
            ChatActivity.this.pinnedMessageViewAnimator = null;
        }

        @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
        public void onAnimationCancel(Animator animator) {
            if (ChatActivity.this.pinnedMessageViewAnimator == null || !ChatActivity.this.pinnedMessageViewAnimator.equals(animator)) {
                return;
            }
            ChatActivity.this.pinnedMessageViewAnimator = null;
        }
    }

    public /* synthetic */ void lambda$updatePinnedMessageView$143(TLRPC$KeyboardButton tLRPC$KeyboardButton, MessageObject messageObject, View view) {
        if (getParentActivity() != null) {
            if (this.bottomOverlayChat.getVisibility() == 0 && !(tLRPC$KeyboardButton instanceof TLRPC$TL_keyboardButtonSwitchInline) && !(tLRPC$KeyboardButton instanceof TLRPC$TL_keyboardButtonCallback) && !(tLRPC$KeyboardButton instanceof TLRPC$TL_keyboardButtonGame) && !(tLRPC$KeyboardButton instanceof TLRPC$TL_keyboardButtonUrl) && !(tLRPC$KeyboardButton instanceof TLRPC$TL_keyboardButtonBuy) && !(tLRPC$KeyboardButton instanceof TLRPC$TL_keyboardButtonUrlAuth) && !(tLRPC$KeyboardButton instanceof TLRPC$TL_keyboardButtonUserProfile)) {
                return;
            }
            this.chatActivityEnterView.didPressedBotButton(tLRPC$KeyboardButton, messageObject, messageObject);
        }
    }

    public /* synthetic */ boolean lambda$updatePinnedMessageView$144(TLRPC$KeyboardButton tLRPC$KeyboardButton, MessageObject messageObject, PinnedMessageButton pinnedMessageButton, View view) {
        if (getParentActivity() == null || ((this.bottomOverlayChat.getVisibility() == 0 && !(tLRPC$KeyboardButton instanceof TLRPC$TL_keyboardButtonSwitchInline) && !(tLRPC$KeyboardButton instanceof TLRPC$TL_keyboardButtonCallback) && !(tLRPC$KeyboardButton instanceof TLRPC$TL_keyboardButtonGame) && !(tLRPC$KeyboardButton instanceof TLRPC$TL_keyboardButtonUrl) && !(tLRPC$KeyboardButton instanceof TLRPC$TL_keyboardButtonBuy) && !(tLRPC$KeyboardButton instanceof TLRPC$TL_keyboardButtonUrlAuth) && !(tLRPC$KeyboardButton instanceof TLRPC$TL_keyboardButtonUserProfile)) || !(tLRPC$KeyboardButton instanceof TLRPC$TL_keyboardButtonUrl))) {
            return false;
        }
        openClickableLink(null, tLRPC$KeyboardButton.url, true, null, messageObject);
        try {
            pinnedMessageButton.performHapticFeedback(0, 1);
        } catch (Exception unused) {
        }
        return true;
    }

    /* renamed from: org.telegram.ui.ChatActivity$94 */
    /* loaded from: classes3.dex */
    public class AnonymousClass94 extends AnimatorListenerAdapter {
        final /* synthetic */ boolean val$animateButton;
        final /* synthetic */ BackupImageView val$animateImage;
        final /* synthetic */ boolean val$animateName;
        final /* synthetic */ boolean val$animateText;
        final /* synthetic */ PinnedMessageButton val$buttonTextView;
        final /* synthetic */ SimpleTextView val$messageTextView;
        final /* synthetic */ TrackingWidthSimpleTextView val$nameTextView;

        AnonymousClass94(boolean z, boolean z2, BackupImageView backupImageView, TrackingWidthSimpleTextView trackingWidthSimpleTextView, SimpleTextView simpleTextView, boolean z3, PinnedMessageButton pinnedMessageButton) {
            ChatActivity.this = r1;
            this.val$animateName = z;
            this.val$animateText = z2;
            this.val$animateImage = backupImageView;
            this.val$nameTextView = trackingWidthSimpleTextView;
            this.val$messageTextView = simpleTextView;
            this.val$animateButton = z3;
            this.val$buttonTextView = pinnedMessageButton;
        }

        @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
        public void onAnimationCancel(Animator animator) {
            ChatActivity.this.pinnedNextAnimation[1] = null;
            ChatActivity.this.pinnedMessageImageView[1].setTranslationY(0.0f);
        }

        @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
        public void onAnimationEnd(Animator animator) {
            if (animator.equals(ChatActivity.this.pinnedNextAnimation[1])) {
                if (this.val$animateName || this.val$animateText || this.val$animateImage != null) {
                    ChatActivity.this.pinnedNextAnimation[1] = new AnimatorSet();
                    ChatActivity.this.pinnedNextAnimation[1].setInterpolator(CubicBezierInterpolator.EASE_OUT_QUINT);
                    ChatActivity.this.pinnedNextAnimation[1].setDuration(360L);
                    ArrayList arrayList = new ArrayList();
                    if (this.val$animateName) {
                        arrayList.add(ObjectAnimator.ofFloat(this.val$nameTextView, View.TRANSLATION_Y, 0.0f));
                    }
                    if (this.val$animateText) {
                        arrayList.add(ObjectAnimator.ofFloat(this.val$messageTextView, View.TRANSLATION_Y, 0.0f));
                    }
                    if (this.val$animateButton) {
                        arrayList.add(ObjectAnimator.ofFloat(this.val$buttonTextView, View.TRANSLATION_Y, 0.0f));
                    }
                    BackupImageView backupImageView = this.val$animateImage;
                    if (backupImageView != null) {
                        arrayList.add(ObjectAnimator.ofFloat(backupImageView, View.TRANSLATION_Y, 0.0f));
                    }
                    ChatActivity.this.pinnedNextAnimation[1].addListener(new AnonymousClass1());
                    ChatActivity.this.pinnedNextAnimation[1].playTogether(arrayList);
                    ChatActivity.this.pinnedNextAnimation[1].start();
                    return;
                }
                ChatActivity.this.pinnedNextAnimation[1] = null;
            }
        }

        /* renamed from: org.telegram.ui.ChatActivity$94$1 */
        /* loaded from: classes3.dex */
        class AnonymousClass1 extends AnimatorListenerAdapter {
            AnonymousClass1() {
                AnonymousClass94.this = r1;
            }

            @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
            public void onAnimationEnd(Animator animator) {
                AnonymousClass94 anonymousClass94 = AnonymousClass94.this;
                if (anonymousClass94.val$animateName) {
                    anonymousClass94.val$nameTextView.setTranslationY(0.0f);
                }
                AnonymousClass94 anonymousClass942 = AnonymousClass94.this;
                if (anonymousClass942.val$animateText) {
                    anonymousClass942.val$messageTextView.setTranslationY(0.0f);
                }
                AnonymousClass94 anonymousClass943 = AnonymousClass94.this;
                if (anonymousClass943.val$animateButton) {
                    anonymousClass943.val$buttonTextView.setTranslationY(0.0f);
                }
                BackupImageView backupImageView = AnonymousClass94.this.val$animateImage;
                if (backupImageView != null) {
                    backupImageView.setTranslationY(0.0f);
                }
                ChatActivity.this.pinnedNextAnimation[1] = null;
            }
        }
    }

    /* renamed from: org.telegram.ui.ChatActivity$95 */
    /* loaded from: classes3.dex */
    public class AnonymousClass95 extends AnimatorListenerAdapter {
        final /* synthetic */ boolean val$animateButton;
        final /* synthetic */ boolean val$animateText;
        final /* synthetic */ PinnedMessageButton val$buttonTextView;
        final /* synthetic */ SimpleTextView val$messageTextView;
        final /* synthetic */ TrackingWidthSimpleTextView val$nameTextView;
        final /* synthetic */ boolean val$noImage;

        AnonymousClass95(TrackingWidthSimpleTextView trackingWidthSimpleTextView, boolean z, SimpleTextView simpleTextView, boolean z2, PinnedMessageButton pinnedMessageButton, boolean z3) {
            ChatActivity.this = r1;
            this.val$nameTextView = trackingWidthSimpleTextView;
            this.val$animateText = z;
            this.val$messageTextView = simpleTextView;
            this.val$animateButton = z2;
            this.val$buttonTextView = pinnedMessageButton;
            this.val$noImage = z3;
        }

        @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
        public void onAnimationEnd(Animator animator) {
            if (ChatActivity.this.pinnedCounterTextView.getTag() != null) {
                ChatActivity.this.pinnedCounterTextView.setVisibility(4);
                int pinnedMessagesCount = ChatActivity.this.getPinnedMessagesCount();
                ChatActivity.this.pinnedCounterTextView.setNumber(Math.min(pinnedMessagesCount - 1, Math.max(1, pinnedMessagesCount - ChatActivity.this.currentPinnedMessageIndex[0])), false);
            } else {
                ChatActivity.this.pinnedCounterTextView.setAlpha(1.0f);
            }
            ChatActivity.this.pinnedCounterTextView.setTranslationY(0.0f);
            ChatActivity.this.pinnedMessageTextView[0].setTranslationX(0.0f);
            ChatActivity.this.pinnedMessageTextView[1].setTranslationX(0.0f);
            ChatActivity.this.pinnedCounterTextView.setTranslationX(ChatActivity.this.pinnedCounterTextViewX);
            this.val$nameTextView.setTranslationY(0.0f);
            if (!this.val$animateText) {
                this.val$nameTextView.setTranslationY(0.0f);
            }
            if (!this.val$animateText) {
                this.val$messageTextView.setTranslationY(0.0f);
            }
            if (!this.val$animateButton) {
                this.val$buttonTextView.setTranslationY(0.0f);
            }
            ChatActivity.this.pinnedNameTextView[0].setTranslationX(0.0f);
            ChatActivity.this.pinnedNameTextView[1].setTranslationX(0.0f);
            ChatActivity.this.pinnedMessageImageView[1].setAlpha(1.0f);
            ChatActivity.this.pinnedMessageImageView[1].setScaleX(1.0f);
            ChatActivity.this.pinnedMessageImageView[1].setScaleY(1.0f);
            ChatActivity.this.pinnedMessageImageView[0].setAlpha(1.0f);
            ChatActivity.this.pinnedMessageImageView[0].setScaleX(1.0f);
            ChatActivity.this.pinnedMessageImageView[0].setScaleY(1.0f);
            ChatActivity.this.pinnedMessageTextView[1] = ChatActivity.this.pinnedMessageTextView[0];
            ChatActivity.this.pinnedMessageTextView[0] = this.val$messageTextView;
            ChatActivity.this.pinnedMessageTextView[1].setVisibility(4);
            ChatActivity.this.pinnedMessageButton[1] = ChatActivity.this.pinnedMessageButton[0];
            ChatActivity.this.pinnedMessageButton[0] = this.val$buttonTextView;
            ChatActivity.this.pinnedMessageButton[1].setVisibility(4);
            if (this.val$nameTextView != ChatActivity.this.pinnedNameTextView[0]) {
                ChatActivity.this.pinnedNameTextView[1] = ChatActivity.this.pinnedNameTextView[0];
                ChatActivity.this.pinnedNameTextView[0] = this.val$nameTextView;
                ChatActivity.this.pinnedNameTextView[1].setVisibility(4);
            }
            if (this.val$noImage) {
                ChatActivity.this.pinnedMessageImageView[1].setImageBitmap(null);
                ChatActivity.this.pinnedMessageImageView[1].setVisibility(4);
            }
            BackupImageView backupImageView = ChatActivity.this.pinnedMessageImageView[1];
            ChatActivity.this.pinnedMessageImageView[1] = ChatActivity.this.pinnedMessageImageView[0];
            ChatActivity.this.pinnedMessageImageView[0] = backupImageView;
            ChatActivity.this.pinnedMessageImageView[1].setAlpha(1.0f);
            ChatActivity.this.pinnedMessageImageView[1].setScaleX(1.0f);
            ChatActivity.this.pinnedMessageImageView[1].setScaleY(1.0f);
            ChatActivity.this.pinnedMessageImageView[1].setVisibility(4);
            ChatActivity.this.pinnedNextAnimation[0] = null;
            ChatActivity.this.setPinnedTextTranslationX = false;
        }
    }

    /* loaded from: classes3.dex */
    public class TrackingWidthSimpleTextView extends SimpleTextView {
        private boolean trackWidth = true;

        /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
        public TrackingWidthSimpleTextView(Context context) {
            super(context);
            ChatActivity.this = r1;
        }

        public void setTrackWidth(boolean z) {
            this.trackWidth = z;
        }

        public boolean getTrackWidth() {
            return this.trackWidth;
        }

        @Override // org.telegram.ui.ActionBar.SimpleTextView
        public boolean createLayout(int i) {
            boolean createLayout = super.createLayout(i);
            if (this.trackWidth && getVisibility() == 0) {
                ChatActivity.this.pinnedCounterTextViewX = getTextWidth() + AndroidUtilities.dp(4.0f);
                if (ChatActivity.this.pinnedCounterTextView != null) {
                    ChatActivity.this.pinnedCounterTextView.setTranslationX(ChatActivity.this.pinnedCounterTextViewX);
                }
            }
            return createLayout;
        }
    }

    private void updateTopPanel(boolean z) {
        boolean z2;
        boolean z3;
        TextView textView;
        if (this.topChatPanelView == null || this.chatMode != 0) {
            return;
        }
        SharedPreferences notificationsSettings = MessagesController.getNotificationsSettings(this.currentAccount);
        long j = this.dialog_id;
        TLRPC$EncryptedChat tLRPC$EncryptedChat = this.currentEncryptedChat;
        if (tLRPC$EncryptedChat != null) {
            boolean z4 = tLRPC$EncryptedChat.admin_id != getUserConfig().getClientUserId() && !getContactsController().isLoadingContacts() && getContactsController().contactsDict.get(Long.valueOf(this.currentUser.id)) == null;
            long j2 = this.currentUser.id;
            int i = notificationsSettings.getInt("dialog_bar_vis3" + j2, 0);
            if (z4 && (i == 1 || i == 3)) {
                z4 = false;
            }
            z2 = z4;
            j = j2;
        } else {
            StringBuilder sb = new StringBuilder();
            sb.append("dialog_bar_vis3");
            sb.append(j);
            z2 = notificationsSettings.getInt(sb.toString(), 0) == 2;
        }
        boolean z5 = notificationsSettings.getBoolean("dialog_bar_share" + j, false);
        boolean z6 = notificationsSettings.getBoolean("dialog_bar_report" + j, false);
        boolean z7 = notificationsSettings.getBoolean("dialog_bar_block" + j, false);
        boolean z8 = notificationsSettings.getBoolean("dialog_bar_add" + j, false);
        boolean z9 = notificationsSettings.getBoolean("dialog_bar_archived" + this.dialog_id, false);
        boolean z10 = notificationsSettings.getBoolean("dialog_bar_location" + j, false);
        String string = notificationsSettings.getString("dialog_bar_chat_with_admin_title" + j, null);
        boolean z11 = notificationsSettings.getBoolean("dialog_bar_chat_with_channel" + j, false);
        int i2 = notificationsSettings.getInt("dialog_bar_chat_with_date" + j, 0);
        boolean z12 = notificationsSettings.getBoolean("dialog_bar_invite" + j, false);
        boolean z13 = z12 ? true : z2;
        if (z6 || z7 || z10) {
            this.reportSpamButton.setVisibility(0);
        } else {
            this.reportSpamButton.setVisibility(8);
        }
        this.addToContactsButtonArchive = false;
        TLRPC$User user = this.currentUser != null ? getMessagesController().getUser(Long.valueOf(this.currentUser.id)) : null;
        if (user == null || TextUtils.isEmpty(string)) {
            if (z12) {
                String string2 = LocaleController.getString("GroupAddMembers", 2131626135);
                if (string2 != null) {
                    string2 = string2.toUpperCase();
                }
                this.addToContactsButton.setVisibility(0);
                this.addToContactsButton.setText(string2);
                this.addToContactsButton.setTag(4);
                this.addToContactsButton.setTextColor(getThemedColor("chat_addContact"));
                if (Build.VERSION.SDK_INT >= 21) {
                    Theme.setSelectorDrawableColor(this.addToContactsButton.getBackground(), 436207615 & getThemedColor("chat_addContact"), true);
                }
                this.reportSpamButton.setTag("chat_addContact");
            } else if (user != null) {
                if (UserObject.isReplyUser(user)) {
                    this.addToContactsButton.setVisibility(8);
                } else {
                    boolean z14 = user.contact;
                    if (!z14 && !user.self && z8) {
                        this.addContactItem.setVisibility(0);
                        this.addContactItem.setText(LocaleController.getString("AddToContacts", 2131624297));
                        this.addToContactsButton.setVisibility(0);
                        if (z9) {
                            this.addToContactsButtonArchive = true;
                            this.addToContactsButton.setText(LocaleController.getString("Unarchive", 2131628790).toUpperCase());
                            this.addToContactsButton.setTag(3);
                        } else if (this.reportSpamButton.getVisibility() == 0) {
                            this.addToContactsButton.setText(LocaleController.getString("AddContactChat", 2131624266));
                        } else {
                            this.addToContactsButton.setText(LocaleController.formatString("AddContactFullChat", 2131624267, UserObject.getFirstName(user)).toUpperCase());
                        }
                        this.addToContactsButton.setTag(null);
                        this.addToContactsButton.setVisibility(0);
                    } else if (z5 && !user.self) {
                        this.addContactItem.setVisibility(0);
                        this.addToContactsButton.setVisibility(0);
                        this.addContactItem.setText(LocaleController.getString("ShareMyContactInfo", 2131628343));
                        this.addToContactsButton.setText(LocaleController.getString("ShareMyPhone", 2131628344).toUpperCase());
                        this.addToContactsButton.setTag(1);
                        this.addToContactsButton.setVisibility(0);
                    } else {
                        if (!z14 && !user.self && !z13) {
                            this.addContactItem.setVisibility(0);
                            this.addContactItem.setText(LocaleController.getString("ShareMyContactInfo", 2131628343));
                            this.addToContactsButton.setTag(2);
                        } else {
                            this.addContactItem.setVisibility(8);
                        }
                        this.addToContactsButton.setVisibility(8);
                    }
                }
                this.reportSpamButton.setText(LocaleController.getString("ReportSpamUser", 2131628017));
            } else {
                if (z10) {
                    this.reportSpamButton.setText(LocaleController.getString("ReportSpamLocation", 2131628015));
                    this.reportSpamButton.setTag(2131230876, 1);
                    this.reportSpamButton.setTextColor(getThemedColor("chat_addContact"));
                    if (Build.VERSION.SDK_INT >= 21) {
                        Theme.setSelectorDrawableColor(this.reportSpamButton.getBackground(), 436207615 & getThemedColor("chat_addContact"), true);
                    }
                    this.reportSpamButton.setTag("chat_addContact");
                } else {
                    if (z9) {
                        this.addToContactsButtonArchive = true;
                        this.addToContactsButton.setText(LocaleController.getString("Unarchive", 2131628790).toUpperCase());
                        this.addToContactsButton.setTag(3);
                        this.addToContactsButton.setVisibility(0);
                        this.reportSpamButton.setText(LocaleController.getString("ReportSpam", 2131628010));
                    } else {
                        this.addToContactsButton.setVisibility(8);
                        this.reportSpamButton.setText(LocaleController.getString("ReportSpamAndLeave", 2131628014));
                    }
                    this.reportSpamButton.setTag(2131230876, null);
                    this.reportSpamButton.setTextColor(getThemedColor("chat_reportSpam"));
                    if (Build.VERSION.SDK_INT >= 21) {
                        Theme.setSelectorDrawableColor(this.reportSpamButton.getBackground(), 436207615 & getThemedColor("chat_reportSpam"), true);
                    }
                    this.reportSpamButton.setTag("chat_reportSpam");
                }
                ActionBarMenuSubItem actionBarMenuSubItem = this.addContactItem;
                if (actionBarMenuSubItem != null) {
                    actionBarMenuSubItem.setVisibility(8);
                }
            }
            z3 = false;
        } else {
            if (this.chatWithAdminTextView == null) {
                TextView textView2 = new TextView(this.topChatPanelView.getContext());
                this.chatWithAdminTextView = textView2;
                textView2.setGravity(16);
                this.chatWithAdminTextView.setPadding(AndroidUtilities.dp(14.0f), 0, AndroidUtilities.dp(46.0f), 0);
                this.chatWithAdminTextView.setBackground(Theme.createSelectorDrawable(getThemedColor("listSelectorSDK21"), 2));
                this.topChatPanelView.addView(this.chatWithAdminTextView, 0, LayoutHelper.createFrame(-1, -1.0f, 0, 0.0f, 0.0f, 0.0f, 1.0f));
                this.chatWithAdminTextView.setTextColor(Theme.getColor("windowBackgroundWhiteBlackText"));
                this.chatWithAdminTextView.setTextSize(1, 14.0f);
                this.chatWithAdminTextView.setOnClickListener(new AnonymousClass96(user, string, z11, i2));
            }
            String formatString = z11 ? LocaleController.formatString("ChatWithGroupAdmin", 2131625061, user.first_name, string) : LocaleController.formatString("ChatWithChannelAdmin", 2131625060, user.first_name, string);
            this.reportSpamButton.setVisibility(8);
            this.addToContactsButton.setVisibility(8);
            this.chatWithAdminTextView.setText(AndroidUtilities.replaceTags(formatString));
            z3 = true;
        }
        TextView textView3 = this.chatWithAdminTextView;
        if (textView3 != null) {
            textView3.setVisibility(z3 ? 0 : 8);
        }
        if (this.userBlocked || (this.addToContactsButton.getVisibility() == 8 && this.reportSpamButton.getVisibility() == 8 && ((textView = this.chatWithAdminTextView) == null || textView.getVisibility() == 8))) {
            z13 = false;
        }
        if (z13) {
            if (this.topChatPanelView.getTag() != null) {
                if (BuildVars.LOGS_ENABLED) {
                    FileLog.d("show spam button");
                }
                this.topChatPanelView.setTag(null);
                this.topChatPanelView.setVisibility(0);
                AnimatorSet animatorSet = this.reportSpamViewAnimator;
                if (animatorSet != null) {
                    animatorSet.cancel();
                    this.reportSpamViewAnimator = null;
                }
                if (z) {
                    this.reportSpamViewAnimator = new AnimatorSet();
                    ValueAnimator ofFloat = ValueAnimator.ofFloat(this.topChatPanelViewOffset, 0.0f);
                    ofFloat.addUpdateListener(new ChatActivity$$ExternalSyntheticLambda14(this));
                    this.reportSpamViewAnimator.playTogether(ofFloat);
                    this.reportSpamViewAnimator.setDuration(200L);
                    this.reportSpamViewAnimator.addListener(new AnonymousClass97());
                    this.reportSpamViewAnimator.start();
                } else {
                    this.topChatPanelViewOffset = 0.0f;
                    invalidateChatListViewTopPadding();
                    invalidateMessagesVisiblePart();
                }
            }
        } else if (this.topChatPanelView.getTag() == null) {
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("hide spam button");
            }
            this.topChatPanelView.setTag(1);
            AnimatorSet animatorSet2 = this.reportSpamViewAnimator;
            if (animatorSet2 != null) {
                animatorSet2.cancel();
                this.reportSpamViewAnimator = null;
            }
            if (z) {
                this.reportSpamViewAnimator = new AnimatorSet();
                ValueAnimator ofFloat2 = ValueAnimator.ofFloat(this.topChatPanelViewOffset, -AndroidUtilities.dp(50.0f));
                ofFloat2.addUpdateListener(new ChatActivity$$ExternalSyntheticLambda5(this));
                this.reportSpamViewAnimator.playTogether(ofFloat2);
                this.reportSpamViewAnimator.setDuration(200L);
                this.reportSpamViewAnimator.addListener(new AnonymousClass98());
                this.reportSpamViewAnimator.start();
            } else {
                this.topChatPanelViewOffset = -AndroidUtilities.dp(50.0f);
                invalidateChatListViewTopPadding();
                invalidateMessagesVisiblePart();
            }
        }
        checkListViewPaddings();
    }

    /* renamed from: org.telegram.ui.ChatActivity$96 */
    /* loaded from: classes3.dex */
    public class AnonymousClass96 implements View.OnClickListener {
        final /* synthetic */ String val$chatWithAdmin;
        final /* synthetic */ boolean val$chatWithAdminChannel;
        final /* synthetic */ int val$chatWithAdminDate;
        final /* synthetic */ TLRPC$User val$user;

        AnonymousClass96(TLRPC$User tLRPC$User, String str, boolean z, int i) {
            ChatActivity.this = r1;
            this.val$user = tLRPC$User;
            this.val$chatWithAdmin = str;
            this.val$chatWithAdminChannel = z;
            this.val$chatWithAdminDate = i;
        }

        @Override // android.view.View.OnClickListener
        public void onClick(View view) {
            AlertsCreator.showChatWithAdmin(ChatActivity.this, this.val$user, this.val$chatWithAdmin, this.val$chatWithAdminChannel, this.val$chatWithAdminDate);
        }
    }

    public /* synthetic */ void lambda$updateTopPanel$145(ValueAnimator valueAnimator) {
        this.topChatPanelViewOffset = ((Float) valueAnimator.getAnimatedValue()).floatValue();
        invalidateChatListViewTopPadding();
        invalidateMessagesVisiblePart();
    }

    /* renamed from: org.telegram.ui.ChatActivity$97 */
    /* loaded from: classes3.dex */
    public class AnonymousClass97 extends AnimatorListenerAdapter {
        AnonymousClass97() {
            ChatActivity.this = r1;
        }

        @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
        public void onAnimationEnd(Animator animator) {
            if (ChatActivity.this.reportSpamViewAnimator == null || !ChatActivity.this.reportSpamViewAnimator.equals(animator)) {
                return;
            }
            ChatActivity.this.reportSpamViewAnimator = null;
        }

        @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
        public void onAnimationCancel(Animator animator) {
            if (ChatActivity.this.reportSpamViewAnimator == null || !ChatActivity.this.reportSpamViewAnimator.equals(animator)) {
                return;
            }
            ChatActivity.this.reportSpamViewAnimator = null;
        }
    }

    public /* synthetic */ void lambda$updateTopPanel$146(ValueAnimator valueAnimator) {
        this.topChatPanelViewOffset = ((Float) valueAnimator.getAnimatedValue()).floatValue();
        invalidateChatListViewTopPadding();
        invalidateMessagesVisiblePart();
    }

    /* renamed from: org.telegram.ui.ChatActivity$98 */
    /* loaded from: classes3.dex */
    public class AnonymousClass98 extends AnimatorListenerAdapter {
        AnonymousClass98() {
            ChatActivity.this = r1;
        }

        @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
        public void onAnimationEnd(Animator animator) {
            if (ChatActivity.this.reportSpamViewAnimator == null || !ChatActivity.this.reportSpamViewAnimator.equals(animator)) {
                return;
            }
            ChatActivity.this.topChatPanelView.setVisibility(8);
            ChatActivity.this.reportSpamViewAnimator = null;
        }

        @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
        public void onAnimationCancel(Animator animator) {
            if (ChatActivity.this.reportSpamViewAnimator == null || !ChatActivity.this.reportSpamViewAnimator.equals(animator)) {
                return;
            }
            ChatActivity.this.reportSpamViewAnimator = null;
        }
    }

    private void checkListViewPaddings() {
        MessageObject messageObject;
        if (!this.wasManualScroll && (messageObject = this.unreadMessageObject) != null) {
            if (this.messages.indexOf(messageObject) < 0) {
                return;
            }
            this.fixPaddingsInLayout = true;
            View view = this.fragmentView;
            if (view == null) {
                return;
            }
            view.requestLayout();
        } else if (this.checkPaddingsRunnable != null) {
        } else {
            ChatActivity$$ExternalSyntheticLambda142 chatActivity$$ExternalSyntheticLambda142 = new ChatActivity$$ExternalSyntheticLambda142(this);
            this.checkPaddingsRunnable = chatActivity$$ExternalSyntheticLambda142;
            AndroidUtilities.runOnUIThread(chatActivity$$ExternalSyntheticLambda142);
        }
    }

    public /* synthetic */ void lambda$checkListViewPaddings$147() {
        this.checkPaddingsRunnable = null;
        invalidateChatListViewTopPadding();
        invalidateMessagesVisiblePart();
    }

    public void checkRaiseSensors() {
        BlurredFrameLayout blurredFrameLayout;
        FrameLayout frameLayout;
        BlurredFrameLayout blurredFrameLayout2;
        ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        if (chatActivityEnterView != null && chatActivityEnterView.isStickersExpanded()) {
            MediaController.getInstance().setAllowStartRecord(false);
            return;
        }
        TLRPC$Chat tLRPC$Chat = this.currentChat;
        if (tLRPC$Chat != null && !ChatObject.canSendMedia(tLRPC$Chat)) {
            MediaController.getInstance().setAllowStartRecord(false);
        } else if (!ApplicationLoader.mainInterfacePaused && (((blurredFrameLayout = this.bottomOverlayChat) == null || blurredFrameLayout.getVisibility() != 0) && (((frameLayout = this.bottomOverlay) == null || frameLayout.getVisibility() != 0) && ((blurredFrameLayout2 = this.searchContainer) == null || blurredFrameLayout2.getVisibility() != 0)))) {
            MediaController.getInstance().setAllowStartRecord(true);
        } else {
            MediaController.getInstance().setAllowStartRecord(false);
        }
    }

    @Override // org.telegram.ui.ActionBar.BaseFragment
    public void dismissCurrentDialog() {
        ChatAttachAlert chatAttachAlert = this.chatAttachAlert;
        if (chatAttachAlert != null && this.visibleDialog == chatAttachAlert) {
            chatAttachAlert.getPhotoLayout().closeCamera(false);
            this.chatAttachAlert.dismissInternal();
            this.chatAttachAlert.getPhotoLayout().hideCamera(true);
            return;
        }
        super.dismissCurrentDialog();
    }

    @Override // org.telegram.ui.ActionBar.BaseFragment
    public void setInPreviewMode(boolean z) {
        MessageObject messageObject;
        TLRPC$Message tLRPC$Message;
        super.setInPreviewMode(z);
        if (this.currentUser != null && this.audioCallIconItem != null) {
            TLRPC$UserFull userFull = getMessagesController().getUserFull(this.currentUser.id);
            if (userFull != null && userFull.phone_calls_available) {
                this.showAudioCallAsIcon = !this.inPreviewMode;
                this.audioCallIconItem.setVisibility(0);
            } else {
                this.showAudioCallAsIcon = false;
                this.audioCallIconItem.setVisibility(8);
            }
        }
        ChatAvatarContainer chatAvatarContainer = this.avatarContainer;
        if (chatAvatarContainer != null) {
            chatAvatarContainer.setOccupyStatusBar(!z);
            this.avatarContainer.setLayoutParams(LayoutHelper.createFrame(-2, -1.0f, 51, !z ? 56.0f : this.chatMode == 2 ? 10 : 0, 0.0f, 40.0f, 0.0f));
        }
        ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        if (chatActivityEnterView != null) {
            chatActivityEnterView.setVisibility(!z ? 0 : 4);
        }
        ActionBar actionBar = this.actionBar;
        if (actionBar != null) {
            actionBar.setBackButtonDrawable(!z ? new BackDrawable(false) : null);
            ActionBarMenuItem actionBarMenuItem = this.headerItem;
            float f = 1.0f;
            if (actionBarMenuItem != null) {
                actionBarMenuItem.setAlpha(!z ? 1.0f : 0.0f);
            }
            ActionBarMenuItem actionBarMenuItem2 = this.attachItem;
            if (actionBarMenuItem2 != null) {
                if (z) {
                    f = 0.0f;
                }
                actionBarMenuItem2.setAlpha(f);
            }
        }
        RecyclerListView recyclerListView = this.chatListView;
        if (recyclerListView != null) {
            int childCount = recyclerListView.getChildCount();
            for (int i = 0; i < childCount; i++) {
                View childAt = this.chatListView.getChildAt(i);
                boolean z2 = childAt instanceof ChatMessageCell;
                if (z2) {
                    messageObject = ((ChatMessageCell) childAt).getMessageObject();
                } else {
                    messageObject = childAt instanceof ChatActionCell ? ((ChatActionCell) childAt).getMessageObject() : null;
                }
                if (messageObject != null && (tLRPC$Message = messageObject.messageOwner) != null && tLRPC$Message.media_unread && tLRPC$Message.mentioned) {
                    if (!messageObject.isVoice() && !messageObject.isRoundVideo()) {
                        int i2 = this.newMentionsCount - 1;
                        this.newMentionsCount = i2;
                        if (i2 <= 0) {
                            this.newMentionsCount = 0;
                            this.hasAllMentionsLocal = true;
                            showMentionDownButton(false, true);
                        } else {
                            this.mentiondownButtonCounter.setText(String.format("%d", Integer.valueOf(i2)));
                        }
                        getMessagesController().markMentionMessageAsRead(messageObject.getId(), ChatObject.isChannel(this.currentChat) ? this.currentChat.id : 0L, this.dialog_id);
                        messageObject.setContentIsRead();
                    }
                    if (z2) {
                        ChatMessageCell chatMessageCell = (ChatMessageCell) childAt;
                        chatMessageCell.setHighlighted(false);
                        chatMessageCell.setHighlightedAnimated();
                    }
                }
            }
            this.chatListView.setItemAnimator(null);
        }
        updateBottomOverlay();
        updateSecretStatus();
        FragmentContextView fragmentContextView = this.fragmentContextView;
        if (fragmentContextView != null) {
            fragmentContextView.setEnabled(!z);
        }
        FragmentContextView fragmentContextView2 = this.fragmentLocationContextView;
        if (fragmentContextView2 != null) {
            fragmentContextView2.setEnabled(!z);
        }
        BlurredFrameLayout blurredFrameLayout = this.pinnedMessageView;
        if (blurredFrameLayout != null) {
            blurredFrameLayout.setEnabled(true ^ isInPreviewMode());
        }
    }

    @Override // org.telegram.ui.ActionBar.BaseFragment
    public void onResume() {
        ChatActivityEnterView chatActivityEnterView;
        MessageObject messageObject;
        boolean z;
        BackupImageView backupImageView;
        super.onResume();
        checkShowBlur(false);
        this.activityResumeTime = System.currentTimeMillis();
        if (this.openImport && getSendMessagesHelper().getImportingHistory(this.dialog_id) != null) {
            ImportingAlert importingAlert = new ImportingAlert(getParentActivity(), null, this, this.themeDelegate);
            importingAlert.setOnHideListener(new ChatActivity$$ExternalSyntheticLambda48(this));
            showDialog(importingAlert);
            this.openImport = false;
        }
        checkAdjustResize();
        MediaController.getInstance().startRaiseToEarSensors(this);
        checkRaiseSensors();
        ChatAttachAlert chatAttachAlert = this.chatAttachAlert;
        if (chatAttachAlert != null) {
            chatAttachAlert.onResume();
        }
        SizeNotifierFrameLayout sizeNotifierFrameLayout = this.contentView;
        if (sizeNotifierFrameLayout != null) {
            sizeNotifierFrameLayout.onResume();
        }
        checkChecksHint();
        AnonymousClass99 anonymousClass99 = new AnonymousClass99();
        this.bulletinDelegate = anonymousClass99;
        Bulletin.addDelegate(this, anonymousClass99);
        checkActionBarMenu(false);
        TLRPC$PhotoSize tLRPC$PhotoSize = this.replyImageLocation;
        if (tLRPC$PhotoSize != null && (backupImageView = this.replyImageView) != null) {
            backupImageView.setImage(ImageLocation.getForObject(tLRPC$PhotoSize, this.replyImageLocationObject), "50_50", ImageLocation.getForObject(this.replyImageThumbLocation, this.replyImageLocationObject), "50_50_b", null, this.replyImageSize, this.replyImageCacheType, this.replyingMessageObject);
        }
        if (this.pinnedImageLocation != null && this.pinnedMessageImageView != null) {
            this.pinnedMessageImageView[0].setImage(ImageLocation.getForObject(this.pinnedImageLocation, this.pinnedImageLocationObject), "50_50", ImageLocation.getForObject(this.pinnedImageThumbLocation, this.pinnedImageLocationObject), "50_50_b", null, this.pinnedImageSize, this.pinnedImageCacheType, this.pinnedMessageObjects.get(Integer.valueOf(this.currentPinnedMessageId)));
        }
        if (this.chatMode == 0) {
            getNotificationsController().setOpenedDialogId(this.dialog_id);
        }
        getMessagesController().setLastVisibleDialogId(this.dialog_id, this.chatMode == 1, true);
        if (this.scrollToTopOnResume) {
            if (this.scrollToTopUnReadOnResume && (messageObject = this.scrollToMessage) != null) {
                if (this.chatListView != null) {
                    int i = this.scrollToMessagePosition;
                    if (i == -9000) {
                        i = getScrollOffsetForMessage(messageObject);
                    } else if (i == -10000) {
                        i = -AndroidUtilities.dp(11.0f);
                    } else {
                        z = true;
                        this.chatLayoutManager.scrollToPositionWithOffset(this.chatAdapter.messagesStartRow + this.messages.indexOf(this.scrollToMessage), i, z);
                    }
                    z = false;
                    this.chatLayoutManager.scrollToPositionWithOffset(this.chatAdapter.messagesStartRow + this.messages.indexOf(this.scrollToMessage), i, z);
                }
            } else {
                moveScrollToLastMessage(false);
            }
            this.scrollToTopUnReadOnResume = false;
            this.scrollToTopOnResume = false;
            this.scrollToMessage = null;
        }
        this.paused = false;
        this.pausedOnLastMessage = false;
        checkScrollForLoad(false);
        if (this.wasPaused) {
            this.wasPaused = false;
            ChatActivityAdapter chatActivityAdapter = this.chatAdapter;
            if (chatActivityAdapter != null) {
                chatActivityAdapter.notifyDataSetChanged(false);
            }
        }
        fixLayout();
        applyDraftMaybe(false);
        BlurredFrameLayout blurredFrameLayout = this.bottomOverlayChat;
        if (blurredFrameLayout != null && blurredFrameLayout.getVisibility() != 0 && !this.actionBar.isSearchFieldVisible()) {
            this.chatActivityEnterView.setFieldFocused(true);
        }
        ChatActivityEnterView chatActivityEnterView2 = this.chatActivityEnterView;
        if (chatActivityEnterView2 != null) {
            chatActivityEnterView2.onResume();
        }
        if (this.currentUser != null) {
            this.chatEnterTime = System.currentTimeMillis();
            this.chatLeaveTime = 0L;
        }
        if (this.startVideoEdit != null) {
            AndroidUtilities.runOnUIThread(new ChatActivity$$ExternalSyntheticLambda141(this));
        }
        if (this.chatListView != null && ((chatActivityEnterView = this.chatActivityEnterView) == null || !chatActivityEnterView.isEditingMessage())) {
            this.chatListView.setOnItemLongClickListener(this.onItemLongClickListener);
            this.chatListView.setOnItemClickListener(this.onItemClickListener);
            this.chatListView.setLongClickable(true);
        }
        checkBotCommands();
        updateTitle();
        showGigagroupConvertAlert();
        if (this.pullingDownOffset != 0.0f) {
            this.pullingDownOffset = 0.0f;
            this.chatListView.invalidate();
        }
    }

    public /* synthetic */ void lambda$onResume$148(DialogInterface dialogInterface) {
        FragmentContextView fragmentContextView = this.fragmentContextView;
        if (fragmentContextView != null) {
            fragmentContextView.checkImport(false);
        }
    }

    /* renamed from: org.telegram.ui.ChatActivity$99 */
    /* loaded from: classes3.dex */
    class AnonymousClass99 implements Bulletin.Delegate {
        @Override // org.telegram.ui.Components.Bulletin.Delegate
        public /* synthetic */ void onHide(Bulletin bulletin) {
            Bulletin.Delegate.CC.$default$onHide(this, bulletin);
        }

        @Override // org.telegram.ui.Components.Bulletin.Delegate
        public /* synthetic */ void onOffsetChange(float f) {
            Bulletin.Delegate.CC.$default$onOffsetChange(this, f);
        }

        @Override // org.telegram.ui.Components.Bulletin.Delegate
        public /* synthetic */ void onShow(Bulletin bulletin) {
            Bulletin.Delegate.CC.$default$onShow(this, bulletin);
        }

        AnonymousClass99() {
            ChatActivity.this = r1;
        }

        @Override // org.telegram.ui.Components.Bulletin.Delegate
        public int getBottomOffset(int i) {
            int i2;
            if (i == 1) {
                return 0;
            }
            ChatActivityEnterView chatActivityEnterView = ChatActivity.this.chatActivityEnterView;
            if (chatActivityEnterView != null && chatActivityEnterView.getVisibility() == 0) {
                if ((ChatActivity.this.contentView.getKeyboardHeight() < AndroidUtilities.dp(20.0f) && ChatActivity.this.chatActivityEnterView.isPopupShowing()) || ChatActivity.this.chatActivityEnterView.panelAnimationInProgress()) {
                    i2 = ChatActivity.this.chatActivityEnterView.getHeight() + ChatActivity.this.chatActivityEnterView.getEmojiPadding();
                } else {
                    i2 = ChatActivity.this.chatActivityEnterView.getHeight();
                }
            } else {
                i2 = AndroidUtilities.dp(51.0f);
            }
            if (ChatActivity.this.chatActivityEnterView.panelAnimationInProgress()) {
                i2 = (int) (i2 + (ChatActivity.this.bottomPanelTranslationY - ChatActivity.this.chatActivityEnterView.getEmojiPadding()));
            }
            return ((int) (i2 + ChatActivity.this.contentPanTranslation)) - AndroidUtilities.dp(1.5f);
        }
    }

    public /* synthetic */ void lambda$onResume$149() {
        openVideoEditor(this.startVideoEdit, null);
        this.startVideoEdit = null;
    }

    public void checkAdjustResize() {
        if (this.reportType >= 0) {
            AndroidUtilities.requestAdjustNothing(getParentActivity(), this.classGuid);
        } else {
            AndroidUtilities.requestAdjustResize(getParentActivity(), this.classGuid);
        }
    }

    @Override // org.telegram.ui.ActionBar.BaseFragment
    public void finishFragment() {
        super.finishFragment();
        ActionBarPopupWindow actionBarPopupWindow = this.scrimPopupWindow;
        if (actionBarPopupWindow != null) {
            actionBarPopupWindow.setPauseNotifications(false);
            closeMenu();
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:114:0x0203  */
    /* JADX WARN: Removed duplicated region for block: B:115:0x022c  */
    @Override // org.telegram.ui.ActionBar.BaseFragment
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void onPause() {
        boolean z;
        CharSequence charSequence;
        MessageObject messageObject;
        int i;
        boolean z2;
        RecyclerListView.Holder holder;
        int i2;
        int i3;
        BlurredFrameLayout blurredFrameLayout;
        super.onPause();
        ActionBarPopupWindow actionBarPopupWindow = this.scrimPopupWindow;
        int i4 = 0;
        if (actionBarPopupWindow != null) {
            actionBarPopupWindow.setPauseNotifications(false);
            closeMenu();
        }
        getMessagesController().markDialogAsReadNow(this.dialog_id, this.threadMessageId);
        MediaController.getInstance().stopRaiseToEarSensors(this, true);
        this.paused = true;
        this.wasPaused = true;
        if (this.chatMode == 0) {
            getNotificationsController().setOpenedDialogId(0L);
        }
        Bulletin.removeDelegate(this);
        getMessagesController().setLastVisibleDialogId(this.dialog_id, this.chatMode == 1, false);
        TLRPC$Message tLRPC$Message = null;
        if (this.ignoreAttachOnPause || this.chatActivityEnterView == null || (blurredFrameLayout = this.bottomOverlayChat) == null || blurredFrameLayout.getVisibility() == 0) {
            messageObject = null;
            charSequence = null;
            z = true;
        } else {
            this.chatActivityEnterView.onPause();
            messageObject = this.replyingMessageObject;
            charSequence = AndroidUtilities.getTrimmedString(this.chatActivityEnterView.getDraftMessage());
            z = this.chatActivityEnterView.isMessageWebPageSearchEnabled();
            this.chatActivityEnterView.setFieldFocused(false);
        }
        ChatAttachAlert chatAttachAlert = this.chatAttachAlert;
        if (chatAttachAlert != null) {
            if (!this.ignoreAttachOnPause) {
                chatAttachAlert.onPause();
            } else {
                this.ignoreAttachOnPause = false;
            }
        }
        SizeNotifierFrameLayout sizeNotifierFrameLayout = this.contentView;
        if (sizeNotifierFrameLayout != null) {
            sizeNotifierFrameLayout.onPause();
        }
        if (this.chatMode == 0) {
            CharSequence[] charSequenceArr = {charSequence};
            MediaDataController mediaDataController = getMediaDataController();
            TLRPC$EncryptedChat tLRPC$EncryptedChat = this.currentEncryptedChat;
            ArrayList<TLRPC$MessageEntity> entities = mediaDataController.getEntities(charSequenceArr, tLRPC$EncryptedChat == null || AndroidUtilities.getPeerLayerVersion(tLRPC$EncryptedChat.layer) >= 101);
            MediaDataController mediaDataController2 = getMediaDataController();
            long j = this.dialog_id;
            int i5 = this.threadMessageId;
            CharSequence charSequence2 = charSequenceArr[0];
            if (messageObject != null) {
                tLRPC$Message = messageObject.messageOwner;
            }
            mediaDataController2.saveDraft(j, i5, charSequence2, entities, tLRPC$Message, !z);
            getMessagesController().lambda$sendTyping$143(0, this.dialog_id, this.threadMessageId);
            if (!this.pausedOnLastMessage && !this.firstLoading) {
                SharedPreferences.Editor edit = MessagesController.getNotificationsSettings(this.currentAccount).edit();
                if (this.chatLayoutManager != null) {
                    int i6 = 0;
                    while (true) {
                        if (i6 >= this.chatListView.getChildCount()) {
                            z2 = false;
                            break;
                        } else if ((this.chatListView.getChildAt(i6) instanceof ChatMessageCell) && ((ChatMessageCell) this.chatListView.getChildAt(i6)).getMessageObject().isSponsored()) {
                            z2 = true;
                            break;
                        } else {
                            i6++;
                        }
                    }
                    int findFirstVisibleItemPosition = this.chatLayoutManager.findFirstVisibleItemPosition();
                    if (findFirstVisibleItemPosition != 0 && !z2 && (holder = (RecyclerListView.Holder) this.chatListView.findViewHolderForAdapterPosition(findFirstVisibleItemPosition)) != null) {
                        View view = holder.itemView;
                        if (view instanceof ChatMessageCell) {
                            i2 = ((ChatMessageCell) view).getMessageObject().getId();
                        } else {
                            i2 = view instanceof ChatActionCell ? ((ChatActionCell) view).getMessageObject().getId() : 0;
                        }
                        if (i2 == 0) {
                            holder = (RecyclerListView.Holder) this.chatListView.findViewHolderForAdapterPosition(findFirstVisibleItemPosition + 1);
                        }
                        int i7 = 0;
                        boolean z3 = false;
                        for (int i8 = findFirstVisibleItemPosition - 1; i8 >= this.chatAdapter.messagesStartRow; i8--) {
                            int i9 = i8 - this.chatAdapter.messagesStartRow;
                            if (i9 >= 0 && i9 < this.messages.size()) {
                                MessageObject messageObject2 = this.messages.get(i9);
                                if (messageObject2.getId() != 0) {
                                    if ((!messageObject2.isOut() || messageObject2.messageOwner.from_scheduled) && messageObject2.isUnread()) {
                                        z3 = true;
                                    }
                                    if (i7 > 2) {
                                        break;
                                    }
                                    i7++;
                                } else {
                                    continue;
                                }
                            }
                        }
                        if (holder != null && !z3) {
                            View view2 = holder.itemView;
                            if (view2 instanceof ChatMessageCell) {
                                i3 = ((ChatMessageCell) view2).getMessageObject().getId();
                            } else {
                                i3 = view2 instanceof ChatActionCell ? ((ChatActionCell) view2).getMessageObject().getId() : 0;
                            }
                            if ((i3 > 0 && this.currentEncryptedChat == null) || (i3 < 0 && this.currentEncryptedChat != null)) {
                                int bottom = holder.itemView.getBottom() - this.chatListView.getMeasuredHeight();
                                if (BuildVars.LOGS_ENABLED) {
                                    FileLog.d("save offset = " + bottom + " for mid " + i3);
                                }
                                i = bottom;
                                i4 = i3;
                                if (i4 == 0) {
                                    edit.putInt("diditem" + this.dialog_id, i4);
                                    edit.putInt("diditemo" + this.dialog_id, i);
                                } else {
                                    this.pausedOnLastMessage = true;
                                    edit.remove("diditem" + this.dialog_id);
                                    edit.remove("diditemo" + this.dialog_id);
                                }
                                edit.commit();
                            }
                        }
                    }
                }
                i = 0;
                if (i4 == 0) {
                }
                edit.commit();
            }
            if (this.currentUser != null) {
                this.chatLeaveTime = System.currentTimeMillis();
                updateInformationForScreenshotDetector();
            }
            hideUndoViews();
        }
        ChatListItemAnimator chatListItemAnimator = this.chatListItemAnimator;
        if (chatListItemAnimator != null) {
            chatListItemAnimator.endAnimations();
        }
        RecyclerAnimationScrollHelper recyclerAnimationScrollHelper = this.chatScrollHelper;
        if (recyclerAnimationScrollHelper != null) {
            recyclerAnimationScrollHelper.cancel();
        }
        if (AvatarPreviewer.hasVisibleInstance()) {
            AvatarPreviewer.getInstance().close();
        }
    }

    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Type inference failed for: r15v12, types: [java.lang.String] */
    /* JADX WARN: Type inference failed for: r15v14, types: [android.text.SpannableStringBuilder, android.text.Spannable] */
    /* JADX WARN: Type inference failed for: r15v7, types: [java.lang.CharSequence] */
    /* JADX WARN: Type inference failed for: r1v2, types: [org.telegram.ui.Components.ChatActivityEnterView] */
    private void applyDraftMaybe(boolean z) {
        ?? r15;
        long j;
        Paint.FontMetricsInt fontMetricsInt;
        if (this.chatActivityEnterView == null || this.chatMode != 0) {
            return;
        }
        TLRPC$DraftMessage draft = getMediaDataController().getDraft(this.dialog_id, this.threadMessageId);
        TLRPC$Message draftMessage = (draft == null || draft.reply_to_msg_id == 0) ? null : getMediaDataController().getDraftMessage(this.dialog_id, this.threadMessageId);
        if (this.chatActivityEnterView.getFieldText() == null) {
            if (draft != null) {
                this.chatActivityEnterView.setWebPage(null, !draft.no_webpage);
                if (!draft.entities.isEmpty()) {
                    r15 = SpannableStringBuilder.valueOf(draft.message);
                    MediaDataController.sortEntities(draft.entities);
                    for (int i = 0; i < draft.entities.size(); i++) {
                        TLRPC$MessageEntity tLRPC$MessageEntity = draft.entities.get(i);
                        boolean z2 = tLRPC$MessageEntity instanceof TLRPC$TL_inputMessageEntityMentionName;
                        if (z2 || (tLRPC$MessageEntity instanceof TLRPC$TL_messageEntityMentionName)) {
                            if (z2) {
                                j = ((TLRPC$TL_inputMessageEntityMentionName) tLRPC$MessageEntity).user_id.user_id;
                            } else {
                                j = ((TLRPC$TL_messageEntityMentionName) tLRPC$MessageEntity).user_id;
                            }
                            if (tLRPC$MessageEntity.offset + tLRPC$MessageEntity.length < r15.length() && r15.charAt(tLRPC$MessageEntity.offset + tLRPC$MessageEntity.length) == ' ') {
                                tLRPC$MessageEntity.length++;
                            }
                            URLSpanUserMention uRLSpanUserMention = new URLSpanUserMention("" + j, 3);
                            int i2 = tLRPC$MessageEntity.offset;
                            r15.setSpan(uRLSpanUserMention, i2, tLRPC$MessageEntity.length + i2, 33);
                        } else if ((tLRPC$MessageEntity instanceof TLRPC$TL_messageEntityCode) || (tLRPC$MessageEntity instanceof TLRPC$TL_messageEntityPre)) {
                            TextStyleSpan.TextStyleRun textStyleRun = new TextStyleSpan.TextStyleRun();
                            textStyleRun.flags |= 4;
                            TextStyleSpan textStyleSpan = new TextStyleSpan(textStyleRun);
                            int i3 = tLRPC$MessageEntity.offset;
                            MediaDataController.addStyleToText(textStyleSpan, i3, tLRPC$MessageEntity.length + i3, r15, true);
                        } else if (tLRPC$MessageEntity instanceof TLRPC$TL_messageEntityBold) {
                            TextStyleSpan.TextStyleRun textStyleRun2 = new TextStyleSpan.TextStyleRun();
                            textStyleRun2.flags |= 1;
                            TextStyleSpan textStyleSpan2 = new TextStyleSpan(textStyleRun2);
                            int i4 = tLRPC$MessageEntity.offset;
                            MediaDataController.addStyleToText(textStyleSpan2, i4, tLRPC$MessageEntity.length + i4, r15, true);
                        } else if (tLRPC$MessageEntity instanceof TLRPC$TL_messageEntityItalic) {
                            TextStyleSpan.TextStyleRun textStyleRun3 = new TextStyleSpan.TextStyleRun();
                            textStyleRun3.flags |= 2;
                            TextStyleSpan textStyleSpan3 = new TextStyleSpan(textStyleRun3);
                            int i5 = tLRPC$MessageEntity.offset;
                            MediaDataController.addStyleToText(textStyleSpan3, i5, tLRPC$MessageEntity.length + i5, r15, true);
                        } else if (tLRPC$MessageEntity instanceof TLRPC$TL_messageEntityStrike) {
                            TextStyleSpan.TextStyleRun textStyleRun4 = new TextStyleSpan.TextStyleRun();
                            textStyleRun4.flags |= 8;
                            TextStyleSpan textStyleSpan4 = new TextStyleSpan(textStyleRun4);
                            int i6 = tLRPC$MessageEntity.offset;
                            MediaDataController.addStyleToText(textStyleSpan4, i6, tLRPC$MessageEntity.length + i6, r15, true);
                        } else if (tLRPC$MessageEntity instanceof TLRPC$TL_messageEntityUnderline) {
                            TextStyleSpan.TextStyleRun textStyleRun5 = new TextStyleSpan.TextStyleRun();
                            textStyleRun5.flags |= 16;
                            TextStyleSpan textStyleSpan5 = new TextStyleSpan(textStyleRun5);
                            int i7 = tLRPC$MessageEntity.offset;
                            MediaDataController.addStyleToText(textStyleSpan5, i7, tLRPC$MessageEntity.length + i7, r15, true);
                        } else if (tLRPC$MessageEntity instanceof TLRPC$TL_messageEntityTextUrl) {
                            URLSpanReplacement uRLSpanReplacement = new URLSpanReplacement(tLRPC$MessageEntity.url);
                            int i8 = tLRPC$MessageEntity.offset;
                            r15.setSpan(uRLSpanReplacement, i8, tLRPC$MessageEntity.length + i8, 33);
                        } else if (tLRPC$MessageEntity instanceof TLRPC$TL_messageEntitySpoiler) {
                            TextStyleSpan.TextStyleRun textStyleRun6 = new TextStyleSpan.TextStyleRun();
                            textStyleRun6.flags |= 256;
                            TextStyleSpan textStyleSpan6 = new TextStyleSpan(textStyleRun6);
                            int i9 = tLRPC$MessageEntity.offset;
                            MediaDataController.addStyleToText(textStyleSpan6, i9, tLRPC$MessageEntity.length + i9, r15, true);
                        } else if (tLRPC$MessageEntity instanceof TLRPC$TL_messageEntityCustomEmoji) {
                            try {
                                fontMetricsInt = this.chatActivityEnterView.getEditField().getPaint().getFontMetricsInt();
                            } catch (Exception e) {
                                FileLog.e(e);
                                fontMetricsInt = null;
                            }
                            AnimatedEmojiSpan animatedEmojiSpan = new AnimatedEmojiSpan(((TLRPC$TL_messageEntityCustomEmoji) tLRPC$MessageEntity).document_id, fontMetricsInt);
                            int i10 = tLRPC$MessageEntity.offset;
                            r15.setSpan(animatedEmojiSpan, i10, tLRPC$MessageEntity.length + i10, 33);
                        }
                    }
                } else {
                    r15 = draft.message;
                }
                this.chatActivityEnterView.setFieldText(r15);
                if (getArguments().getBoolean("hasUrl", false)) {
                    this.chatActivityEnterView.setSelection(draft.message.indexOf(10) + 1);
                    AndroidUtilities.runOnUIThread(new ChatActivity$$ExternalSyntheticLambda152(this), 700L);
                }
            }
        } else if (z && draft == null) {
            this.chatActivityEnterView.setFieldText("");
            hideFieldPanel(true);
        }
        if (this.replyingMessageObject != null || draftMessage == null) {
            return;
        }
        MessageObject messageObject = new MessageObject(this.currentAccount, draftMessage, (AbstractMap<Long, TLRPC$User>) getMessagesController().getUsers(), false, false);
        this.replyingMessageObject = messageObject;
        showFieldPanelForReply(messageObject);
    }

    public /* synthetic */ void lambda$applyDraftMaybe$150() {
        ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        if (chatActivityEnterView != null) {
            chatActivityEnterView.setFieldFocused(true);
            this.chatActivityEnterView.openKeyboard();
        }
    }

    private void updateInformationForScreenshotDetector() {
        if (this.currentUser == null) {
            return;
        }
        if (this.currentEncryptedChat != null) {
            ArrayList<Long> arrayList = new ArrayList<>();
            RecyclerListView recyclerListView = this.chatListView;
            if (recyclerListView != null) {
                int childCount = recyclerListView.getChildCount();
                for (int i = 0; i < childCount; i++) {
                    View childAt = this.chatListView.getChildAt(i);
                    MessageObject messageObject = null;
                    if (childAt instanceof ChatMessageCell) {
                        messageObject = ((ChatMessageCell) childAt).getMessageObject();
                    }
                    if (messageObject != null && messageObject.getId() < 0) {
                        long j = messageObject.messageOwner.random_id;
                        if (j != 0) {
                            arrayList.add(Long.valueOf(j));
                        }
                    }
                }
            }
            MediaController.getInstance().setLastVisibleMessageIds(this.currentAccount, this.chatEnterTime, this.chatLeaveTime, this.currentUser, this.currentEncryptedChat, arrayList, 0);
            return;
        }
        SecretMediaViewer secretMediaViewer = SecretMediaViewer.getInstance();
        MessageObject currentMessageObject = secretMediaViewer.getCurrentMessageObject();
        if (currentMessageObject == null || currentMessageObject.isOut()) {
            return;
        }
        MediaController.getInstance().setLastVisibleMessageIds(this.currentAccount, secretMediaViewer.getOpenTime(), secretMediaViewer.getCloseTime(), this.currentUser, null, null, currentMessageObject.getId());
    }

    public boolean fixLayoutInternal() {
        boolean z;
        MessageObject.GroupedMessages currentMessagesGroup;
        if (!AndroidUtilities.isTablet() && ApplicationLoader.applicationContext.getResources().getConfiguration().orientation == 2) {
            this.selectedMessagesCountTextView.setTextSize(18);
        } else {
            this.selectedMessagesCountTextView.setTextSize(20);
        }
        int childCount = this.chatListView.getChildCount();
        HashMap hashMap = null;
        int i = 0;
        while (true) {
            z = true;
            if (i >= childCount) {
                break;
            }
            View childAt = this.chatListView.getChildAt(i);
            if ((childAt instanceof ChatMessageCell) && (currentMessagesGroup = ((ChatMessageCell) childAt).getCurrentMessagesGroup()) != null && currentMessagesGroup.hasSibling && !currentMessagesGroup.messages.isEmpty()) {
                if (hashMap == null) {
                    hashMap = new HashMap();
                }
                if (!hashMap.containsKey(Long.valueOf(currentMessagesGroup.groupId))) {
                    hashMap.put(Long.valueOf(currentMessagesGroup.groupId), currentMessagesGroup);
                    ArrayList<MessageObject> arrayList = currentMessagesGroup.messages;
                    int indexOf = this.messages.indexOf(arrayList.get(arrayList.size() - 1));
                    if (indexOf >= 0) {
                        ChatActivityAdapter chatActivityAdapter = this.chatAdapter;
                        chatActivityAdapter.notifyItemRangeChanged(indexOf + chatActivityAdapter.messagesStartRow, currentMessagesGroup.messages.size());
                        this.chatListView.setItemAnimator(null);
                    }
                }
            }
            i++;
        }
        if (AndroidUtilities.isTablet()) {
            if (AndroidUtilities.isSmallTablet() && ApplicationLoader.applicationContext.getResources().getConfiguration().orientation == 1) {
                this.actionBar.setBackButtonDrawable(new BackDrawable(false));
            } else {
                ActionBar actionBar = this.actionBar;
                ActionBarLayout actionBarLayout = this.parentLayout;
                if (actionBarLayout != null && !actionBarLayout.fragmentsStack.isEmpty() && this.parentLayout.fragmentsStack.get(0) != this && this.parentLayout.fragmentsStack.size() != 1) {
                    z = false;
                }
                actionBar.setBackButtonDrawable(new BackDrawable(z));
            }
            return false;
        }
        return true;
    }

    /* renamed from: org.telegram.ui.ChatActivity$100 */
    /* loaded from: classes3.dex */
    public class AnonymousClass100 implements ViewTreeObserver.OnPreDrawListener {
        AnonymousClass100() {
            ChatActivity.this = r1;
        }

        @Override // android.view.ViewTreeObserver.OnPreDrawListener
        public boolean onPreDraw() {
            if (ChatActivity.this.avatarContainer != null) {
                ChatActivity.this.avatarContainer.getViewTreeObserver().removeOnPreDrawListener(this);
            }
            return ChatActivity.this.fixLayoutInternal();
        }
    }

    private void fixLayout() {
        ChatAvatarContainer chatAvatarContainer = this.avatarContainer;
        if (chatAvatarContainer != null) {
            chatAvatarContainer.getViewTreeObserver().addOnPreDrawListener(new AnonymousClass100());
        }
    }

    public boolean maybePlayVisibleVideo() {
        MessageObject messageObject;
        AnimatedFileDrawable animatedFileDrawable;
        ImageReceiver photoImage;
        AnimatedFileDrawable animation;
        ChatMessageCell messageCell;
        if (this.chatListView == null) {
            return false;
        }
        MessageObject playingMessageObject = MediaController.getInstance().getPlayingMessageObject();
        if (playingMessageObject != null && !playingMessageObject.isVideo()) {
            return false;
        }
        HintView hintView = this.noSoundHintView;
        ArrayList<MessageObject> arrayList = null;
        if (hintView == null || hintView.getTag() == null || (messageCell = this.noSoundHintView.getMessageCell()) == null) {
            animatedFileDrawable = null;
            messageObject = null;
        } else {
            ImageReceiver photoImage2 = messageCell.getPhotoImage();
            animatedFileDrawable = photoImage2.getAnimation();
            if (animatedFileDrawable != null) {
                messageObject = messageCell.getMessageObject();
                this.scrollToVideo = ((float) messageCell.getTop()) + photoImage2.getImageY2() > ((float) this.chatListView.getMeasuredHeight());
            } else {
                messageObject = null;
            }
        }
        if (messageObject == null) {
            int childCount = this.chatListView.getChildCount();
            int i = 0;
            while (true) {
                if (i >= childCount) {
                    break;
                }
                View childAt = this.chatListView.getChildAt(i);
                if (childAt instanceof ChatMessageCell) {
                    ChatMessageCell chatMessageCell = (ChatMessageCell) childAt;
                    MessageObject messageObject2 = chatMessageCell.getMessageObject();
                    boolean isRoundVideo = messageObject2.isRoundVideo();
                    if ((messageObject2.isVideo() || isRoundVideo) && messageObject2.videoEditedInfo == null && (animation = (photoImage = chatMessageCell.getPhotoImage()).getAnimation()) != null) {
                        float top = childAt.getTop() + photoImage.getImageY();
                        float imageHeight = photoImage.getImageHeight() + top;
                        if (imageHeight >= 0.0f && top <= this.chatListView.getMeasuredHeight()) {
                            if (messageObject != null && top < 0.0f) {
                                break;
                            }
                            this.scrollToVideo = top < 0.0f || imageHeight > ((float) this.chatListView.getMeasuredHeight());
                            if (top >= 0.0f && imageHeight <= this.chatListView.getMeasuredHeight()) {
                                messageObject = messageObject2;
                                animatedFileDrawable = animation;
                                break;
                            }
                            messageObject = messageObject2;
                            animatedFileDrawable = animation;
                        }
                    }
                }
                i++;
            }
        }
        if (messageObject == null || MediaController.getInstance().isPlayingMessage(messageObject)) {
            return false;
        }
        hideHints(true);
        if (messageObject.isRoundVideo()) {
            boolean playMessage = MediaController.getInstance().playMessage(messageObject);
            MediaController mediaController = MediaController.getInstance();
            if (playMessage) {
                arrayList = createVoiceMessagesPlaylist(messageObject, false);
            }
            mediaController.setVoiceMessagesPlaylist(arrayList, false);
            return playMessage;
        }
        SharedConfig.setNoSoundHintShowed(true);
        messageObject.audioProgress = animatedFileDrawable.getCurrentProgress();
        messageObject.audioProgressMs = animatedFileDrawable.getCurrentProgressMs();
        animatedFileDrawable.stop();
        if (PhotoViewer.isPlayingMessageInPip(messageObject)) {
            PhotoViewer.getPipInstance().destroyPhotoViewer();
        }
        return MediaController.getInstance().playMessage(messageObject);
    }

    @Override // org.telegram.ui.ActionBar.BaseFragment
    public void onConfigurationChanged(Configuration configuration) {
        MessageObject playingMessageObject;
        fixLayout();
        Dialog dialog = this.visibleDialog;
        if (dialog instanceof DatePickerDialog) {
            dialog.dismiss();
        }
        closeMenu();
        if (!AndroidUtilities.isTablet()) {
            if (configuration.orientation == 2) {
                if ((PhotoViewer.hasInstance() && PhotoViewer.getInstance().isVisible()) || (playingMessageObject = MediaController.getInstance().getPlayingMessageObject()) == null || !playingMessageObject.isVideo()) {
                    return;
                }
                PhotoViewer.getInstance().setParentActivity(getParentActivity(), this.themeDelegate);
                getFileLoader().setLoadingVideoForPlayer(playingMessageObject.getDocument(), false);
                MediaController.getInstance().cleanupPlayer(true, true, false, true);
                PhotoViewer photoViewer = PhotoViewer.getInstance();
                int i = playingMessageObject.type;
                long j = 0;
                long j2 = i != 0 ? this.dialog_id : 0L;
                if (i != 0) {
                    j = this.mergeDialogId;
                }
                if (photoViewer.openPhoto(playingMessageObject, j2, j, this.photoViewerProvider, false)) {
                    PhotoViewer.getInstance().setParentChatActivity(this);
                }
                hideHints(false);
                MediaController.getInstance().resetGoingToShowMessageObject();
            } else if (!PhotoViewer.hasInstance() || !PhotoViewer.getInstance().isOpenedFullScreenVideo()) {
            } else {
                PhotoViewer.getInstance().injectVideoPlayerToMediaController();
                PhotoViewer.getInstance().closePhoto(false, true);
            }
        }
    }

    public void createDeleteMessagesAlert(MessageObject messageObject, MessageObject.GroupedMessages groupedMessages) {
        createDeleteMessagesAlert(messageObject, groupedMessages, 1);
    }

    private void createDeleteMessagesAlert(MessageObject messageObject, MessageObject.GroupedMessages groupedMessages, int i) {
        createDeleteMessagesAlert(messageObject, groupedMessages, i, false);
    }

    private void createDeleteMessagesAlert(MessageObject messageObject, MessageObject.GroupedMessages groupedMessages, int i, boolean z) {
        if (messageObject == null && this.selectedMessagesIds[0].size() + this.selectedMessagesIds[1].size() == 0) {
            return;
        }
        AlertsCreator.createDeleteMessagesAlert(this, this.currentUser, this.currentChat, this.currentEncryptedChat, this.chatInfo, this.mergeDialogId, messageObject, this.selectedMessagesIds, groupedMessages, this.chatMode == 1, i, new ChatActivity$$ExternalSyntheticLambda121(this), z ? new ChatActivity$$ExternalSyntheticLambda158(this) : null, this.themeDelegate);
    }

    public /* synthetic */ void lambda$createDeleteMessagesAlert$151() {
        hideActionMode();
        updatePinnedMessageView(true);
    }

    public /* synthetic */ void lambda$createDeleteMessagesAlert$152() {
        dimBehindView(false);
    }

    public void hideActionMode() {
        ActionBar actionBar = this.actionBar;
        if (actionBar != null) {
            if (!actionBar.isActionModeShowed()) {
                return;
            }
            this.actionBar.hideActionMode();
        }
        this.cantDeleteMessagesCount = 0;
        this.canEditMessagesCount = 0;
        this.cantForwardMessagesCount = 0;
        this.canSaveMusicCount = 0;
        this.canSaveDocumentsCount = 0;
        this.cantSaveMessagesCount = 0;
        ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        if (chatActivityEnterView != null) {
            EditTextCaption editField = chatActivityEnterView.getEditField();
            if (this.chatActivityEnterView.getVisibility() == 0) {
                editField.requestFocus();
            }
            editField.setAllowDrawCursor(true);
        }
        TextSelectionHelper.ChatListTextSelectionHelper chatListTextSelectionHelper = this.textSelectionHelper;
        if (chatListTextSelectionHelper != null) {
            chatListTextSelectionHelper.clear(true);
            this.textSelectionHelper.cancelAllAnimators();
        }
        TextSelectionHint textSelectionHint = this.textSelectionHint;
        if (textSelectionHint != null) {
            textSelectionHint.hide();
        }
        ChatActivityEnterView chatActivityEnterView2 = this.chatActivityEnterView;
        if (chatActivityEnterView2 != null) {
            chatActivityEnterView2.preventInput = false;
        }
        this.textSelectionHintWasShowed = false;
    }

    public boolean createMenu(View view, boolean z, boolean z2, float f, float f2) {
        return createMenu(view, z, z2, f, f2, true);
    }

    private CharSequence getMessageCaption(MessageObject messageObject, MessageObject.GroupedMessages groupedMessages) {
        String restrictionReason = MessagesController.getRestrictionReason(messageObject.messageOwner.restriction_reason);
        if (!TextUtils.isEmpty(restrictionReason)) {
            return restrictionReason;
        }
        if (messageObject.isVoiceTranscriptionOpen() && !TranscribeButton.isTranscribing(messageObject)) {
            return messageObject.getVoiceTranscription();
        }
        CharSequence charSequence = messageObject.caption;
        if (charSequence != null) {
            return charSequence;
        }
        if (groupedMessages == null) {
            return null;
        }
        int size = groupedMessages.messages.size();
        CharSequence charSequence2 = null;
        for (int i = 0; i < size; i++) {
            CharSequence charSequence3 = groupedMessages.messages.get(i).caption;
            if (charSequence3 != null) {
                if (charSequence2 != null) {
                    return null;
                }
                charSequence2 = charSequence3;
            }
        }
        return charSequence2;
    }

    /* JADX WARN: Code restructure failed: missing block: B:491:0x0aed, code lost:
        if (r0.edit_messages != false) goto L492;
     */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:1001:0x1ee9  */
    /* JADX WARN: Removed duplicated region for block: B:1002:0x1eee  */
    /* JADX WARN: Removed duplicated region for block: B:1005:0x1ef5  */
    /* JADX WARN: Removed duplicated region for block: B:1006:0x1efa  */
    /* JADX WARN: Removed duplicated region for block: B:1009:0x1f0d  */
    /* JADX WARN: Removed duplicated region for block: B:1033:0x1ff0  */
    /* JADX WARN: Removed duplicated region for block: B:1034:0x2002  */
    /* JADX WARN: Removed duplicated region for block: B:1037:0x2010  */
    /* JADX WARN: Removed duplicated region for block: B:1038:0x2021  */
    /* JADX WARN: Removed duplicated region for block: B:1040:0x2025  */
    /* JADX WARN: Removed duplicated region for block: B:1041:0x2027  */
    /* JADX WARN: Removed duplicated region for block: B:1043:0x202a  */
    /* JADX WARN: Removed duplicated region for block: B:1044:0x202c  */
    /* JADX WARN: Removed duplicated region for block: B:1047:0x2030  */
    /* JADX WARN: Removed duplicated region for block: B:121:0x0259  */
    /* JADX WARN: Removed duplicated region for block: B:131:0x0278  */
    /* JADX WARN: Removed duplicated region for block: B:137:0x028e A[ADDED_TO_REGION] */
    /* JADX WARN: Removed duplicated region for block: B:149:0x02cd  */
    /* JADX WARN: Removed duplicated region for block: B:156:0x02e4 A[ADDED_TO_REGION] */
    /* JADX WARN: Removed duplicated region for block: B:159:0x02f0  */
    /* JADX WARN: Removed duplicated region for block: B:169:0x0314  */
    /* JADX WARN: Removed duplicated region for block: B:170:0x0316  */
    /* JADX WARN: Removed duplicated region for block: B:173:0x031c  */
    /* JADX WARN: Removed duplicated region for block: B:210:0x0389  */
    /* JADX WARN: Removed duplicated region for block: B:257:0x0504 A[RETURN] */
    /* JADX WARN: Removed duplicated region for block: B:258:0x0505  */
    /* JADX WARN: Removed duplicated region for block: B:735:0x143e A[ADDED_TO_REGION] */
    /* JADX WARN: Removed duplicated region for block: B:739:0x1447  */
    /* JADX WARN: Removed duplicated region for block: B:741:0x1450  */
    /* JADX WARN: Removed duplicated region for block: B:851:0x163c  */
    /* JADX WARN: Removed duplicated region for block: B:852:0x163f  */
    /* JADX WARN: Removed duplicated region for block: B:855:0x167a  */
    /* JADX WARN: Removed duplicated region for block: B:856:0x167c  */
    /* JADX WARN: Removed duplicated region for block: B:859:0x1686  */
    /* JADX WARN: Removed duplicated region for block: B:860:0x168d  */
    /* JADX WARN: Removed duplicated region for block: B:863:0x16a8  */
    /* JADX WARN: Removed duplicated region for block: B:886:0x182b  */
    /* JADX WARN: Type inference failed for: r11v12, types: [int, boolean] */
    /* JADX WARN: Type inference failed for: r11v16 */
    /* JADX WARN: Type inference failed for: r11v37 */
    @SuppressLint({"ClickableViewAccessibility"})
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public boolean createMenu(View view, boolean z, boolean z2, float f, float f2, boolean z3) {
        MessageObject messageObject;
        MessageObject messageObject2;
        boolean z4;
        boolean z5;
        boolean z6;
        CharSequence charSequence;
        ActionBarPopupWindow.ActionBarPopupWindowLayout actionBarPopupWindowLayout;
        MessageObject messageObject3;
        Rect rect;
        Rect rect2;
        ActionBarPopupWindow.ActionBarPopupWindowLayout actionBarPopupWindowLayout2;
        ActionBarPopupWindow.ActionBarPopupWindowLayout actionBarPopupWindowLayout3;
        AtomicBoolean atomicBoolean;
        AnimatedEmojiSpan[] animatedEmojiSpanArr;
        MessageObject messageObject4;
        AtomicReference atomicReference;
        ActionBarPopupWindow.ActionBarPopupWindowLayout actionBarPopupWindowLayout4;
        int i;
        MessageObject messageObject5;
        int i2;
        boolean z7;
        int length;
        int i3;
        boolean z8;
        String str;
        AtomicReference atomicReference2;
        ArrayList arrayList;
        ArrayList arrayList2;
        ArrayList arrayList3;
        AtomicBoolean atomicBoolean2;
        MessageObject messageObject6;
        ActionBarPopupWindow.ActionBarPopupWindowLayout actionBarPopupWindowLayout5;
        boolean z9;
        ChatActivity chatActivity;
        ?? r11;
        MessageObject messageObject7;
        boolean z10;
        int i4;
        ActionBarPopupWindow.ActionBarPopupWindowLayout actionBarPopupWindowLayout6;
        ArrayList arrayList4;
        ArrayList arrayList5;
        ArrayList arrayList6;
        AtomicBoolean atomicBoolean3;
        AtomicReference atomicReference3;
        TLRPC$Message tLRPC$Message;
        int i5;
        int i6;
        int i7;
        boolean z11;
        boolean z12;
        ReactedUsersListView.ContainerLinerLayout containerLinerLayout;
        int i8;
        ReactedHeaderView reactedHeaderView;
        int[] iArr;
        ReactedUsersListView reactedUsersListView;
        int[] iArr2;
        TLRPC$ChatFull tLRPC$ChatFull;
        TLRPC$ChatFull tLRPC$ChatFull2;
        TLRPC$ChatFull chatFull;
        boolean z13;
        boolean z14;
        TLRPC$Chat tLRPC$Chat;
        boolean z15;
        ArrayList<MessageObject> arrayList7;
        TLRPC$User tLRPC$User;
        int i9;
        TLRPC$Chat tLRPC$Chat2;
        String str2;
        int i10;
        ArrayList<MessageObject> arrayList8;
        TLRPC$User tLRPC$User2;
        TLRPC$Chat tLRPC$Chat3;
        ArrayList<MessageObject> arrayList9;
        BlurredFrameLayout blurredFrameLayout;
        TLRPC$Chat tLRPC$Chat4;
        int size;
        int i11;
        TLRPC$MessageAction tLRPC$MessageAction;
        TLRPC$UserFull tLRPC$UserFull;
        ArrayList<MessageObject> arrayList10;
        MessageObject messageObject8;
        if (this.actionBar.isActionModeShowed() || this.reportType >= 0) {
            return false;
        }
        boolean z16 = view instanceof ChatMessageCell;
        if (z16) {
            ChatMessageCell chatMessageCell = (ChatMessageCell) view;
            MessageObject messageObject9 = chatMessageCell.getMessageObject();
            messageObject = chatMessageCell.getPrimaryMessageObject();
            messageObject2 = messageObject9;
        } else {
            messageObject2 = view instanceof ChatActionCell ? ((ChatActionCell) view).getMessageObject() : null;
            messageObject = messageObject2;
        }
        if (messageObject2 == null) {
            return false;
        }
        if (!z && (messageObject2.messageOwner.action instanceof TLRPC$TL_messageActionGiftPremium)) {
            return false;
        }
        int messageType = getMessageType(messageObject2);
        if (z) {
            TLRPC$MessageAction tLRPC$MessageAction2 = messageObject2.messageOwner.action;
            if (tLRPC$MessageAction2 instanceof TLRPC$TL_messageActionPinMessage) {
                if (messageObject2.getReplyMsgId() != 0) {
                    scrollToMessageId(messageObject2.getReplyMsgId(), messageObject2.messageOwner.id, true, messageObject2.getDialogId() == this.mergeDialogId ? 1 : 0, false, 0);
                } else {
                    Toast.makeText(getParentActivity(), LocaleController.getString("MessageNotFound", 2131626683), 0).show();
                }
                return true;
            } else if ((tLRPC$MessageAction2 instanceof TLRPC$TL_messageActionPaymentSent) && (messageObject8 = messageObject2.replyMessageObject) != null && messageObject8.isInvoice()) {
                TLRPC$TL_payments_getPaymentReceipt tLRPC$TL_payments_getPaymentReceipt = new TLRPC$TL_payments_getPaymentReceipt();
                tLRPC$TL_payments_getPaymentReceipt.msg_id = messageObject2.getId();
                tLRPC$TL_payments_getPaymentReceipt.peer = getMessagesController().getInputPeer(messageObject2.messageOwner.peer_id);
                getConnectionsManager().sendRequest(tLRPC$TL_payments_getPaymentReceipt, new ChatActivity$$ExternalSyntheticLambda216(this), 2);
                return true;
            } else {
                TLRPC$MessageAction tLRPC$MessageAction3 = messageObject2.messageOwner.action;
                if ((tLRPC$MessageAction3 instanceof TLRPC$TL_messageActionGroupCall) || (tLRPC$MessageAction3 instanceof TLRPC$TL_messageActionInviteToGroupCall) || (tLRPC$MessageAction3 instanceof TLRPC$TL_messageActionGroupCallScheduled)) {
                    if (getParentActivity() == null) {
                        return false;
                    }
                    VoIPService sharedInstance = VoIPService.getSharedInstance();
                    if (sharedInstance != null) {
                        ChatObject.Call call = sharedInstance.groupCall;
                        if (call != null && messageObject2.messageOwner.action.call.id == call.call.id) {
                            if (getParentActivity() instanceof LaunchActivity) {
                                GroupCallActivity.create((LaunchActivity) getParentActivity(), AccountInstance.getInstance(this.currentAccount), null, null, false, null);
                            } else {
                                Intent action = new Intent(getParentActivity(), LaunchActivity.class).setAction("voip_chat");
                                action.putExtra("currentAccount", VoIPService.getSharedInstance().getAccount());
                                getParentActivity().startActivity(action);
                            }
                        } else {
                            boolean z17 = getGroupCall() == null;
                            this.createGroupCall = z17;
                            VoIPHelper.startCall(this.currentChat, null, null, z17, getParentActivity(), this, getAccountInstance());
                        }
                        return true;
                    } else if (this.fragmentContextView != null && getGroupCall() != null) {
                        if (VoIPService.getSharedInstance() != null) {
                            GroupCallActivity.create((LaunchActivity) getParentActivity(), AccountInstance.getInstance(VoIPService.getSharedInstance().getAccount()), null, null, false, null);
                        } else {
                            ChatObject.Call groupCall = getGroupCall();
                            if (groupCall == null) {
                                return false;
                            }
                            VoIPHelper.startCall(getMessagesController().getChat(Long.valueOf(groupCall.chatId)), null, null, false, getParentActivity(), this, getAccountInstance());
                        }
                        return true;
                    } else if (ChatObject.canManageCalls(this.currentChat)) {
                        VoIPHelper.showGroupCallAlert(this, this.currentChat, null, true, getAccountInstance());
                        return true;
                    }
                } else if (tLRPC$MessageAction3 instanceof TLRPC$TL_messageActionSetChatTheme) {
                    showChatThemeBottomSheet();
                    return true;
                }
            }
        }
        boolean z18 = (messageObject2.isSponsored() || ((arrayList10 = this.threadMessageObjects) != null && arrayList10.contains(messageObject2))) ? true : z;
        this.selectedObject = null;
        this.selectedObjectGroup = null;
        this.forwardingMessage = null;
        this.forwardingMessageGroup = null;
        this.selectedObjectToEditCaption = null;
        for (int i12 = 1; i12 >= 0; i12--) {
            this.selectedMessagesCanCopyIds[i12].clear();
            this.selectedMessagesCanStarIds[i12].clear();
            this.selectedMessagesIds[i12].clear();
        }
        hideActionMode();
        updatePinnedMessageView(true);
        MessageObject.GroupedMessages validGroupedMessage = z3 ? getValidGroupedMessage(messageObject2) : null;
        if (this.chatMode != 1 && !isThreadChat()) {
            if (this.currentChat != null) {
                if (messageObject2.getDialogId() != this.mergeDialogId && ChatObject.canPinMessages(this.currentChat)) {
                    z4 = true;
                    boolean z19 = !z4 && messageObject2.getId() > 0 && ((tLRPC$MessageAction = messageObject2.messageOwner.action) == null || (tLRPC$MessageAction instanceof TLRPC$TL_messageActionEmpty));
                    boolean z20 = !getMessagesController().isChatNoForwards(this.currentChat) || messageObject2.messageOwner.noforwards;
                    boolean z21 = messageObject2.getDialogId() == this.mergeDialogId && z19 && (this.pinnedMessageObjects.containsKey(Integer.valueOf(messageObject2.getId())) || (validGroupedMessage != null && !validGroupedMessage.messages.isEmpty() && this.pinnedMessageObjects.containsKey(Integer.valueOf(validGroupedMessage.messages.get(0).getId()))));
                    z5 = !messageObject2.canEditMessage(this.currentChat) && !this.chatActivityEnterView.hasAudioToSend() && messageObject2.getDialogId() != this.mergeDialogId;
                    if (z5 && validGroupedMessage != null) {
                        size = validGroupedMessage.messages.size();
                        int i13 = 0;
                        for (i11 = 0; i11 < size; i11++) {
                            MessageObject messageObject10 = validGroupedMessage.messages.get(i11);
                            if (i11 == 0 || !TextUtils.isEmpty(messageObject10.caption)) {
                                this.selectedObjectToEditCaption = messageObject10;
                                if (!TextUtils.isEmpty(messageObject10.caption)) {
                                    i13++;
                                }
                            }
                        }
                        z5 = i13 >= 2;
                    }
                    boolean z22 = this.chatMode == 1 && ((arrayList9 = this.threadMessageObjects) == null || !arrayList9.contains(messageObject2)) && !messageObject2.isSponsored() && (!(messageType == 1 && messageObject2.getDialogId() == this.mergeDialogId) && !(messageObject2.messageOwner.action instanceof TLRPC$TL_messageActionSecureValuesSent) && ((this.currentEncryptedChat != null || messageObject2.getId() >= 0) && (((blurredFrameLayout = this.bottomOverlayChat) == null || blurredFrameLayout.getVisibility() != 0) && ((tLRPC$Chat4 = this.currentChat) == null || ((!ChatObject.isNotInChat(tLRPC$Chat4) || isThreadChat()) && ((!ChatObject.isChannel(this.currentChat) || ChatObject.canPost(this.currentChat) || this.currentChat.megagroup) && ChatObject.canSendMessages(this.currentChat)))))));
                    if (!z18 || messageType < 2 || messageType == 20) {
                        if (getParentActivity() == null) {
                            return false;
                        }
                        ArrayList arrayList11 = new ArrayList();
                        ArrayList arrayList12 = new ArrayList();
                        ArrayList arrayList13 = new ArrayList();
                        MessageObject messageObject11 = messageObject;
                        if (!(messageObject2.messageOwner.action instanceof TLRPC$TL_messageActionSetMessagesTTL) || !z18) {
                            z14 = z19;
                            z13 = z21;
                        } else {
                            z14 = z19;
                            z13 = z21;
                            if (this.dialog_id >= 0 || ((tLRPC$Chat3 = this.currentChat) != null && ChatObject.canUserDoAdminAction(tLRPC$Chat3, 13))) {
                                AutoDeletePopupWrapper autoDeletePopupWrapper = new AutoDeletePopupWrapper(this.contentView.getContext(), null, new AnonymousClass101(), true, getResourceProvider());
                                TLRPC$UserFull tLRPC$UserFull2 = this.userInfo;
                                autoDeletePopupWrapper.lambda$updateItems$7(tLRPC$UserFull2 != null ? tLRPC$UserFull2.ttl_period : this.chatInfo.ttl_period);
                                z6 = z16;
                                actionBarPopupWindowLayout = autoDeletePopupWrapper.windowLayout;
                                charSequence = null;
                                if (!arrayList13.isEmpty() && actionBarPopupWindowLayout == null) {
                                    return false;
                                }
                                if (this.scrimPopupWindow == null) {
                                    closeMenu();
                                    this.menuDeleteItem = null;
                                    this.scrimPopupWindowItems = null;
                                    return false;
                                }
                                AtomicBoolean atomicBoolean4 = new AtomicBoolean(false);
                                AtomicReference atomicReference4 = new AtomicReference(null);
                                Rect rect3 = new Rect();
                                List<TLRPC$TL_availableReaction> enabledReactionsList = getMediaDataController().getEnabledReactionsList();
                                boolean z23 = !isSecretChat() && !isInScheduleMode() && this.currentUser == null && messageObject2.hasReactions() && (!ChatObject.isChannel(this.currentChat) || this.currentChat.megagroup) && !enabledReactionsList.isEmpty() && messageObject2.messageOwner.reactions.can_see_list;
                                boolean z24 = !messageObject2.isForwardedChannelPost() ? !(isSecretChat() || isInScheduleMode() || !messageObject2.isReactionsAvailable() || ((((tLRPC$ChatFull2 = this.chatInfo) == null || tLRPC$ChatFull2.available_reactions.isEmpty()) && ((this.chatInfo != null || ChatObject.isChannel(this.currentChat)) && this.currentUser == null)) || enabledReactionsList.isEmpty())) : !((chatFull = getMessagesController().getChatFull(-messageObject2.getFromChatId())) != null && (isSecretChat() || isInScheduleMode() || !messageObject2.isReactionsAvailable() || chatFull.available_reactions.isEmpty() || enabledReactionsList.isEmpty()));
                                boolean z25 = !z23 && !isInScheduleMode() && this.currentChat != null && messageObject2.isOutOwner() && messageObject2.isSent() && !messageObject2.isEditing() && !messageObject2.isSending() && !messageObject2.isSendError() && !messageObject2.isContentUnread() && !messageObject2.isUnread() && ConnectionsManager.getInstance(this.currentAccount).getCurrentTime() - messageObject2.messageOwner.date < getMessagesController().chatReadMarkExpirePeriod && (ChatObject.isMegagroup(this.currentChat) || !ChatObject.isChannel(this.currentChat)) && (tLRPC$ChatFull = this.chatInfo) != null && tLRPC$ChatFull.participants_count <= getMessagesController().chatReadMarkSizeThreshold && !(messageObject2.messageOwner.action instanceof TLRPC$TL_messageActionChatJoinedByRequest) && z6;
                                ActionBarPopupWindow.ActionBarPopupWindowLayout actionBarPopupWindowLayout7 = new ActionBarPopupWindow.ActionBarPopupWindowLayout(getParentActivity(), 2131166090, this.themeDelegate, (z23 || z25) ? 1 : 0);
                                actionBarPopupWindowLayout7.setMinimumWidth(AndroidUtilities.dp(200.0f));
                                Rect rect4 = new Rect();
                                getParentActivity().getResources().getDrawable(2131166090).mutate().getPadding(rect4);
                                actionBarPopupWindowLayout7.setBackgroundColor(getThemedColor("actionBarDefaultSubmenuBackground"));
                                if (actionBarPopupWindowLayout == null) {
                                    if (z23) {
                                        arrayList = arrayList12;
                                        rect2 = rect4;
                                        actionBarPopupWindowLayout3 = actionBarPopupWindowLayout;
                                        actionBarPopupWindowLayout5 = actionBarPopupWindowLayout7;
                                        ReactedHeaderView reactedHeaderView2 = new ReactedHeaderView(this.contentView.getContext(), this.currentAccount, messageObject2, this.dialog_id);
                                        TLRPC$TL_messageReactions tLRPC$TL_messageReactions = messageObject2.messageOwner.reactions;
                                        if (tLRPC$TL_messageReactions != null) {
                                            Iterator<TLRPC$TL_reactionCount> it = tLRPC$TL_messageReactions.results.iterator();
                                            int i14 = 0;
                                            while (it.hasNext()) {
                                                i14 += it.next().count;
                                            }
                                            i5 = i14;
                                            i6 = 10;
                                        } else {
                                            i6 = 10;
                                            i5 = 0;
                                        }
                                        if (i5 > i6) {
                                            i7 = 1;
                                            if (messageObject2.messageOwner.reactions.results.size() > 1) {
                                                z11 = true;
                                                ReactedUsersListView.ContainerLinerLayout containerLinerLayout2 = new ReactedUsersListView.ContainerLinerLayout(this.contentView.getContext());
                                                containerLinerLayout2.hasHeader = z11;
                                                containerLinerLayout2.setOrientation(i7);
                                                containerLinerLayout2.setLayoutParams(new FrameLayout.LayoutParams(AndroidUtilities.dp(200.0f), AndroidUtilities.dp((!z11 ? 96 : 44) + 288) + (!z11 ? 1 : 0)));
                                                ActionBarMenuSubItem actionBarMenuSubItem = new ActionBarMenuSubItem((Context) getParentActivity(), true, false, (Theme.ResourcesProvider) this.themeDelegate);
                                                actionBarMenuSubItem.setItemHeight(44);
                                                actionBarMenuSubItem.setTextAndIcon(LocaleController.getString("Back", 2131624647), 2131165639);
                                                actionBarMenuSubItem.getTextView().setPadding(!LocaleController.isRTL ? 0 : AndroidUtilities.dp(40.0f), 0, !LocaleController.isRTL ? AndroidUtilities.dp(40.0f) : 0, 0);
                                                actionBarMenuSubItem.setOnClickListener(new ChatActivity$$ExternalSyntheticLambda57(actionBarPopupWindowLayout5));
                                                containerLinerLayout2.addView(actionBarMenuSubItem, LayoutHelper.createLinear(-1, -2));
                                                int[] iArr3 = new int[1];
                                                if (!z11) {
                                                    ArrayList<TLRPC$TL_reactionCount> arrayList14 = messageObject2.messageOwner.reactions.results;
                                                    LinearLayout linearLayout = new LinearLayout(this.contentView.getContext());
                                                    linearLayout.setOrientation(0);
                                                    ViewPager viewPager = new ViewPager(this.contentView.getContext());
                                                    HorizontalScrollView horizontalScrollView = new HorizontalScrollView(this.contentView.getContext());
                                                    AtomicBoolean atomicBoolean5 = new AtomicBoolean();
                                                    int i15 = arrayList14.size() > 1 ? 1 : 0;
                                                    int size2 = arrayList14.size() + i15;
                                                    int i16 = 0;
                                                    while (i16 < size2) {
                                                        AtomicReference atomicReference5 = atomicReference4;
                                                        int i17 = size2;
                                                        ReactionTabHolderView reactionTabHolderView = new ReactionTabHolderView(this.contentView.getContext());
                                                        int i18 = i15 != 0 ? i16 - 1 : i16;
                                                        if (i18 < 0) {
                                                            reactionTabHolderView.setCounter(i5);
                                                            iArr2 = iArr3;
                                                        } else {
                                                            iArr2 = iArr3;
                                                            reactionTabHolderView.setCounter(this.currentAccount, arrayList14.get(i18));
                                                        }
                                                        reactionTabHolderView.setOnClickListener(new ChatActivity$$ExternalSyntheticLambda56(viewPager, i16, linearLayout, atomicBoolean5, horizontalScrollView, reactionTabHolderView));
                                                        linearLayout.addView(reactionTabHolderView, LayoutHelper.createFrameRelatively(-2.0f, -1.0f, 16, i16 == 0 ? 6.0f : 0.0f, 6.0f, 6.0f, 6.0f));
                                                        i16++;
                                                        atomicReference4 = atomicReference5;
                                                        size2 = i17;
                                                        iArr3 = iArr2;
                                                    }
                                                    AtomicReference atomicReference6 = atomicReference4;
                                                    int i19 = size2;
                                                    int[] iArr4 = iArr3;
                                                    horizontalScrollView.setHorizontalScrollBarEnabled(false);
                                                    horizontalScrollView.addView(linearLayout);
                                                    containerLinerLayout2.addView(horizontalScrollView, LayoutHelper.createLinear(-1, 44));
                                                    View frameLayout = new FrameLayout(this.contentView.getContext());
                                                    frameLayout.setBackgroundColor(Theme.getColor("actionBarDefaultSubmenuSeparator"));
                                                    containerLinerLayout2.addView(frameLayout, new LinearLayout.LayoutParams(-1, (int) Theme.dividerPaint.getStrokeWidth()));
                                                    int dp = AndroidUtilities.dp(88.0f) + 1;
                                                    SparseArray sparseArray = new SparseArray();
                                                    SparseIntArray sparseIntArray = new SparseIntArray();
                                                    for (int i20 = 0; i20 < arrayList14.size() + 1; i20++) {
                                                        sparseIntArray.put(i20, dp + AndroidUtilities.dp(288.0f));
                                                    }
                                                    rect = rect3;
                                                    atomicReference2 = atomicReference6;
                                                    atomicBoolean2 = atomicBoolean4;
                                                    arrayList3 = arrayList13;
                                                    messageObject6 = messageObject2;
                                                    messageObject3 = messageObject11;
                                                    animatedEmojiSpanArr = null;
                                                    arrayList2 = arrayList11;
                                                    viewPager.setAdapter(new AnonymousClass102(i19, sparseArray, i15, arrayList14, messageObject2, reactedHeaderView2, sparseIntArray, dp, viewPager, actionBarPopupWindowLayout5, iArr4, i5));
                                                    viewPager.addOnPageChangeListener(new AnonymousClass103(this, atomicBoolean5, linearLayout, i19, horizontalScrollView, sparseIntArray, actionBarPopupWindowLayout5, iArr4));
                                                    z12 = false;
                                                    containerLinerLayout = containerLinerLayout2;
                                                    containerLinerLayout.addView(viewPager, LayoutHelper.createLinear(-1, 0, 1.0f));
                                                    i8 = -1;
                                                    chatActivity = this;
                                                    reactedUsersListView = null;
                                                    reactedHeaderView = reactedHeaderView2;
                                                    iArr = iArr4;
                                                } else {
                                                    rect = rect3;
                                                    atomicReference2 = atomicReference4;
                                                    atomicBoolean2 = atomicBoolean4;
                                                    arrayList3 = arrayList13;
                                                    messageObject6 = messageObject2;
                                                    containerLinerLayout = containerLinerLayout2;
                                                    arrayList2 = arrayList11;
                                                    messageObject3 = messageObject11;
                                                    z12 = false;
                                                    animatedEmojiSpanArr = null;
                                                    chatActivity = this;
                                                    View frameLayout2 = new FrameLayout(chatActivity.contentView.getContext());
                                                    frameLayout2.setBackgroundColor(chatActivity.getThemedColor("actionBarDefaultSubmenuSeparator"));
                                                    containerLinerLayout.addView(frameLayout2, LayoutHelper.createLinear(-1, 8));
                                                    iArr = iArr3;
                                                    reactedUsersListView = new ReactedUsersListView(chatActivity.contentView.getContext(), chatActivity.themeDelegate, chatActivity.currentAccount, messageObject6, null, true).setSeenUsers(reactedHeaderView2.getSeenUsers()).setOnProfileSelectedListener(new ChatActivity$$ExternalSyntheticLambda245(chatActivity)).setOnHeightChangedListener(new ChatActivity$$ExternalSyntheticLambda244(actionBarPopupWindowLayout5, iArr));
                                                    reactedUsersListView.getClass();
                                                    reactedHeaderView = reactedHeaderView2;
                                                    reactedHeaderView.setSeenCallback(new ChatActivity$$ExternalSyntheticLambda114(reactedUsersListView));
                                                    i8 = -1;
                                                    containerLinerLayout.addView(reactedUsersListView, LayoutHelper.createLinear(-1, 0, 1.0f));
                                                }
                                                int addViewToSwipeBack = actionBarPopupWindowLayout5.addViewToSwipeBack(containerLinerLayout);
                                                char c = z12 ? 1 : 0;
                                                char c2 = z12 ? 1 : 0;
                                                char c3 = z12 ? 1 : 0;
                                                char c4 = z12 ? 1 : 0;
                                                iArr[c] = addViewToSwipeBack;
                                                reactedHeaderView.setOnClickListener(new ChatActivity$$ExternalSyntheticLambda92(reactedUsersListView, actionBarPopupWindowLayout5, iArr));
                                                actionBarPopupWindowLayout5.addView((View) reactedHeaderView, LayoutHelper.createLinear(i8, 48));
                                                z9 = true;
                                                r11 = z12;
                                            }
                                        } else {
                                            i7 = 1;
                                        }
                                        z11 = false;
                                        ReactedUsersListView.ContainerLinerLayout containerLinerLayout22 = new ReactedUsersListView.ContainerLinerLayout(this.contentView.getContext());
                                        containerLinerLayout22.hasHeader = z11;
                                        containerLinerLayout22.setOrientation(i7);
                                        containerLinerLayout22.setLayoutParams(new FrameLayout.LayoutParams(AndroidUtilities.dp(200.0f), AndroidUtilities.dp((!z11 ? 96 : 44) + 288) + (!z11 ? 1 : 0)));
                                        ActionBarMenuSubItem actionBarMenuSubItem2 = new ActionBarMenuSubItem((Context) getParentActivity(), true, false, (Theme.ResourcesProvider) this.themeDelegate);
                                        actionBarMenuSubItem2.setItemHeight(44);
                                        actionBarMenuSubItem2.setTextAndIcon(LocaleController.getString("Back", 2131624647), 2131165639);
                                        actionBarMenuSubItem2.getTextView().setPadding(!LocaleController.isRTL ? 0 : AndroidUtilities.dp(40.0f), 0, !LocaleController.isRTL ? AndroidUtilities.dp(40.0f) : 0, 0);
                                        actionBarMenuSubItem2.setOnClickListener(new ChatActivity$$ExternalSyntheticLambda57(actionBarPopupWindowLayout5));
                                        containerLinerLayout22.addView(actionBarMenuSubItem2, LayoutHelper.createLinear(-1, -2));
                                        int[] iArr32 = new int[1];
                                        if (!z11) {
                                        }
                                        int addViewToSwipeBack2 = actionBarPopupWindowLayout5.addViewToSwipeBack(containerLinerLayout);
                                        char c5 = z12 ? 1 : 0;
                                        char c22 = z12 ? 1 : 0;
                                        char c32 = z12 ? 1 : 0;
                                        char c42 = z12 ? 1 : 0;
                                        iArr[c5] = addViewToSwipeBack2;
                                        reactedHeaderView.setOnClickListener(new ChatActivity$$ExternalSyntheticLambda92(reactedUsersListView, actionBarPopupWindowLayout5, iArr));
                                        actionBarPopupWindowLayout5.addView((View) reactedHeaderView, LayoutHelper.createLinear(i8, 48));
                                        z9 = true;
                                        r11 = z12;
                                    } else {
                                        rect = rect3;
                                        atomicReference2 = atomicReference4;
                                        rect2 = rect4;
                                        atomicBoolean2 = atomicBoolean4;
                                        arrayList3 = arrayList13;
                                        messageObject6 = messageObject2;
                                        animatedEmojiSpanArr = null;
                                        arrayList = arrayList12;
                                        arrayList2 = arrayList11;
                                        chatActivity = this;
                                        actionBarPopupWindowLayout3 = actionBarPopupWindowLayout;
                                        messageObject3 = messageObject11;
                                        r11 = 0;
                                        actionBarPopupWindowLayout5 = actionBarPopupWindowLayout7;
                                        z9 = false;
                                    }
                                    if (z25) {
                                        messageObject7 = messageObject6;
                                        MessageSeenView messageSeenView = new MessageSeenView(chatActivity.contentView.getContext(), chatActivity.currentAccount, messageObject7, chatActivity.currentChat);
                                        FrameLayout frameLayout3 = new FrameLayout(chatActivity.contentView.getContext());
                                        frameLayout3.addView(messageSeenView, LayoutHelper.createFrame(-1, -2.0f));
                                        ActionBarMenuSubItem actionBarMenuSubItem3 = new ActionBarMenuSubItem((Context) getParentActivity(), true, (boolean) r11, (Theme.ResourcesProvider) chatActivity.themeDelegate);
                                        actionBarMenuSubItem3.setItemHeight(44);
                                        actionBarMenuSubItem3.setTextAndIcon(LocaleController.getString("Back", 2131624647), 2131165639);
                                        TextView textView = actionBarMenuSubItem3.getTextView();
                                        int dp2 = LocaleController.isRTL ? 0 : AndroidUtilities.dp(40.0f);
                                        int dp3 = LocaleController.isRTL ? AndroidUtilities.dp(40.0f) : 0;
                                        int i21 = r11 == true ? 1 : 0;
                                        int i22 = r11 == true ? 1 : 0;
                                        int i23 = r11 == true ? 1 : 0;
                                        int i24 = r11 == true ? 1 : 0;
                                        textView.setPadding(dp2, i21, dp3, r11);
                                        FrameLayout frameLayout4 = new FrameLayout(chatActivity.contentView.getContext());
                                        LinearLayout linearLayout2 = new LinearLayout(chatActivity.contentView.getContext());
                                        linearLayout2.setBackgroundColor(chatActivity.getThemedColor("actionBarDefaultSubmenuBackground"));
                                        linearLayout2.setOrientation(1);
                                        RecyclerListView createListView = messageSeenView.createListView();
                                        frameLayout4.addView(actionBarMenuSubItem3);
                                        linearLayout2.addView(frameLayout4);
                                        frameLayout4.setOnClickListener(new AnonymousClass104(chatActivity, actionBarPopupWindowLayout5));
                                        messageSeenView.setOnClickListener(new AnonymousClass105(messageSeenView, z24, createListView, linearLayout2, actionBarPopupWindowLayout5, r6));
                                        linearLayout2.addView(createListView, LayoutHelper.createLinear(-1, -2));
                                        createListView.setOnItemClickListener(new ChatActivity$$ExternalSyntheticLambda251(chatActivity, messageSeenView));
                                        int[] iArr5 = {actionBarPopupWindowLayout5.addViewToSwipeBack(linearLayout2)};
                                        actionBarPopupWindowLayout5.addView((View) frameLayout3, LayoutHelper.createLinear(-1, 44));
                                        z10 = true;
                                    } else {
                                        messageObject7 = messageObject6;
                                        z10 = z9;
                                    }
                                    MessageObject messageObject12 = chatActivity.selectedObject;
                                    boolean z26 = messageObject12 != null && messageObject12.isVoice() && chatActivity.selectedObject.messageOwner != null && getUserConfig().isPremium() && !TextUtils.isEmpty(chatActivity.selectedObject.messageOwner.voiceTranscription) && (tLRPC$Message = chatActivity.selectedObject.messageOwner) != null && !tLRPC$Message.voiceTranscriptionRated && tLRPC$Message.voiceTranscriptionId != 0 && tLRPC$Message.voiceTranscriptionOpen;
                                    if (!z26 && messageObject7.probablyRingtone() && chatActivity.currentEncryptedChat == null) {
                                        ActionBarMenuSubItem actionBarMenuSubItem4 = new ActionBarMenuSubItem((Context) getParentActivity(), true, false, (Theme.ResourcesProvider) chatActivity.themeDelegate);
                                        actionBarMenuSubItem4.setMinimumWidth(AndroidUtilities.dp(200.0f));
                                        actionBarMenuSubItem4.setTextAndIcon(LocaleController.getString("SaveForNotifications", 2131628126), 2131165965);
                                        actionBarPopupWindowLayout5.addView(actionBarMenuSubItem4);
                                        actionBarMenuSubItem4.setOnClickListener(new ChatActivity$$ExternalSyntheticLambda89(chatActivity, messageObject7));
                                        z10 = true;
                                    }
                                    if (z10) {
                                        FrameLayout frameLayout5 = new FrameLayout(chatActivity.contentView.getContext());
                                        frameLayout5.setBackgroundColor(chatActivity.getThemedColor("actionBarDefaultSubmenuSeparator"));
                                        actionBarPopupWindowLayout5.addView((View) frameLayout5, LayoutHelper.createLinear(-1, 8));
                                    }
                                    if (actionBarPopupWindowLayout5.getSwipeBack() != null) {
                                        actionBarPopupWindowLayout5.getSwipeBack().setOnClickListener(new ChatActivity$$ExternalSyntheticLambda67(chatActivity));
                                    }
                                    if (z26) {
                                        LinearLayout linearLayout3 = new LinearLayout(chatActivity.contentView.getContext());
                                        linearLayout3.setOrientation(1);
                                        LinearLayout.LayoutParams createLinear = LayoutHelper.createLinear(-1, 89);
                                        FrameLayout frameLayout6 = new FrameLayout(chatActivity.contentView.getContext());
                                        View frameLayout7 = new FrameLayout(chatActivity.contentView.getContext());
                                        frameLayout7.setBackgroundColor(chatActivity.getThemedColor("actionBarDefaultSubmenuSeparator"));
                                        TextView textView2 = new TextView(chatActivity.contentView.getContext());
                                        textView2.setTextColor(chatActivity.getThemedColor("windowBackgroundWhiteGrayText"));
                                        textView2.setGravity(1);
                                        textView2.setText(LocaleController.getString("RateTranscription", 2131627900));
                                        frameLayout6.addView(textView2, LayoutHelper.createFrame(-1, -2.0f, 48, 0.0f, 12.0f, 0.0f, 0.0f));
                                        boolean[] zArr = new boolean[1];
                                        ImageView imageView = new ImageView(chatActivity.contentView.getContext());
                                        imageView.setBackground(Theme.createCircleSelectorDrawable(chatActivity.getThemedColor("dialogButtonSelector"), 0, 0));
                                        Drawable mutate = chatActivity.contentView.getContext().getResources().getDrawable(2131165892).mutate();
                                        mutate.setColorFilter(new PorterDuffColorFilter(chatActivity.getThemedColor("actionBarDefaultSubmenuItemIcon"), PorterDuff.Mode.SRC_IN));
                                        imageView.setImageDrawable(new CrossfadeDrawable(mutate, new CircularProgressDrawable(AndroidUtilities.dp(12.0f), AndroidUtilities.dp(1.5f), chatActivity.getThemedColor("actionBarDefaultSubmenuItemIcon"))));
                                        frameLayout6.addView(imageView, LayoutHelper.createFrame(33, 33.0f, 49, -42.0f, 39.0f, 0.0f, 0.0f));
                                        ImageView imageView2 = new ImageView(chatActivity.contentView.getContext());
                                        imageView2.setBackground(Theme.createCircleSelectorDrawable(chatActivity.getThemedColor("dialogButtonSelector"), 0, 0));
                                        Drawable mutate2 = chatActivity.contentView.getContext().getResources().getDrawable(2131165891).mutate();
                                        mutate2.setColorFilter(new PorterDuffColorFilter(chatActivity.getThemedColor("actionBarDefaultSubmenuItemIcon"), PorterDuff.Mode.SRC_IN));
                                        messageObject4 = messageObject7;
                                        imageView2.setImageDrawable(new CrossfadeDrawable(mutate2, new CircularProgressDrawable(AndroidUtilities.dp(12.0f), AndroidUtilities.dp(1.5f), chatActivity.getThemedColor("actionBarDefaultSubmenuItemIcon"))));
                                        frameLayout6.addView(imageView2, LayoutHelper.createFrame(33, 33.0f, 49, 42.0f, 39.0f, 0.0f, 0.0f));
                                        ChatActivity$$ExternalSyntheticLambda205 chatActivity$$ExternalSyntheticLambda205 = new ChatActivity$$ExternalSyntheticLambda205(this, new boolean[1], zArr, imageView, imageView2);
                                        imageView.setOnClickListener(new ChatActivity$$ExternalSyntheticLambda96(zArr, chatActivity$$ExternalSyntheticLambda205));
                                        imageView2.setOnClickListener(new ChatActivity$$ExternalSyntheticLambda97(zArr, chatActivity$$ExternalSyntheticLambda205));
                                        linearLayout3.addView(frameLayout6, LayoutHelper.createLinear(-1, 81));
                                        linearLayout3.addView(frameLayout7, LayoutHelper.createLinear(-1, 8));
                                        actionBarPopupWindowLayout5.addView((View) linearLayout3, createLinear);
                                    } else {
                                        messageObject4 = messageObject7;
                                    }
                                    boolean z27 = MessagesController.getGlobalMainSettings().getBoolean("translate_button", false);
                                    chatActivity.scrimPopupWindowItems = new ActionBarMenuSubItem[arrayList.size() + (chatActivity.selectedObject.isSponsored() ? 1 : 0)];
                                    int size3 = arrayList.size();
                                    int i25 = 0;
                                    while (i25 < size3) {
                                        if (i25 == 0 && chatActivity.selectedObject.isSponsored()) {
                                            ActionBarMenuSubItem actionBarMenuSubItem5 = new ActionBarMenuSubItem((Context) getParentActivity(), true, true, (Theme.ResourcesProvider) chatActivity.themeDelegate);
                                            actionBarMenuSubItem5.setTextAndIcon(LocaleController.getString("SponsoredMessageInfo", 2131628472), 2131165764);
                                            actionBarMenuSubItem5.setItemHeight(56);
                                            actionBarMenuSubItem5.setTag(2131230955, 240);
                                            actionBarMenuSubItem5.setMultiline();
                                            ActionBarMenuSubItem[] actionBarMenuSubItemArr = chatActivity.scrimPopupWindowItems;
                                            actionBarMenuSubItemArr[actionBarMenuSubItemArr.length - 1] = actionBarMenuSubItem5;
                                            actionBarPopupWindowLayout5.addView(actionBarMenuSubItem5);
                                            actionBarMenuSubItem5.setOnClickListener(new ChatActivity$$ExternalSyntheticLambda71(chatActivity));
                                            View view2 = new View(getParentActivity());
                                            view2.setMinimumWidth(AndroidUtilities.dp(196.0f));
                                            view2.setTag(1000);
                                            view2.setTag(2131230876, 1);
                                            actionBarPopupWindowLayout5.addView(view2);
                                            LinearLayout.LayoutParams layoutParams = (LinearLayout.LayoutParams) actionBarMenuSubItem5.getLayoutParams();
                                            if (LocaleController.isRTL) {
                                                layoutParams.gravity = 5;
                                            }
                                            layoutParams.width = -1;
                                            layoutParams.height = AndroidUtilities.dp(6.0f);
                                            view2.setLayoutParams(layoutParams);
                                        }
                                        ActionBarMenuSubItem actionBarMenuSubItem6 = new ActionBarMenuSubItem(getParentActivity(), i25 == 0, i25 == size3 + (-1), chatActivity.themeDelegate);
                                        actionBarMenuSubItem6.setMinimumWidth(AndroidUtilities.dp(200.0f));
                                        ArrayList arrayList15 = arrayList;
                                        ArrayList arrayList16 = arrayList2;
                                        actionBarMenuSubItem6.setTextAndIcon((CharSequence) arrayList15.get(i25), ((Integer) arrayList16.get(i25)).intValue());
                                        ArrayList arrayList17 = arrayList3;
                                        Integer num = (Integer) arrayList17.get(i25);
                                        if (num.intValue() == 1 && chatActivity.selectedObject.messageOwner.ttl_period != 0) {
                                            chatActivity.menuDeleteItem = actionBarMenuSubItem6;
                                            chatActivity.updateDeleteItemRunnable.run();
                                            actionBarMenuSubItem6.setSubtextColor(chatActivity.getThemedColor("windowBackgroundWhiteGrayText6"));
                                        }
                                        chatActivity.scrimPopupWindowItems[i25] = actionBarMenuSubItem6;
                                        actionBarPopupWindowLayout5.addView(actionBarMenuSubItem6);
                                        actionBarMenuSubItem6.setOnClickListener(new ChatActivity$$ExternalSyntheticLambda83(chatActivity, i25, arrayList17));
                                        if (num.intValue() == 29) {
                                            String language = LocaleController.getInstance().getCurrentLocale().getLanguage();
                                            ChatActivity$$ExternalSyntheticLambda253 chatActivity$$ExternalSyntheticLambda253 = new ChatActivity$$ExternalSyntheticLambda253(chatActivity, view);
                                            TLRPC$InputPeer inputPeer = getMessagesController().getInputPeer(chatActivity.dialog_id);
                                            int i26 = chatActivity.selectedObject.messageOwner.id;
                                            if (LanguageDetector.hasSupport()) {
                                                String[] strArr = {animatedEmojiSpanArr};
                                                actionBarMenuSubItem6.setVisibility(8);
                                                atomicBoolean2.set(true);
                                                i4 = size3;
                                                arrayList6 = arrayList17;
                                                AtomicReference atomicReference7 = atomicReference2;
                                                AtomicBoolean atomicBoolean6 = atomicBoolean2;
                                                LanguageDetector.detectLanguage(charSequence.toString(), new ChatActivity$$ExternalSyntheticLambda211(this, strArr, language, z27, actionBarMenuSubItem6, atomicBoolean2, atomicReference2), new ChatActivity$$ExternalSyntheticLambda210(atomicBoolean6, atomicReference7));
                                                atomicBoolean3 = atomicBoolean6;
                                                atomicReference3 = atomicReference7;
                                                arrayList5 = arrayList16;
                                                arrayList4 = arrayList15;
                                                actionBarPopupWindowLayout6 = actionBarPopupWindowLayout5;
                                                actionBarMenuSubItem6.setOnClickListener(new ChatActivity$$ExternalSyntheticLambda85(this, i25, arrayList6, inputPeer, i26, strArr, language, charSequence, z20, chatActivity$$ExternalSyntheticLambda253));
                                                actionBarMenuSubItem6.postDelayed(new ChatActivity$$ExternalSyntheticLambda116(atomicReference3), 250L);
                                            } else {
                                                arrayList6 = arrayList17;
                                                arrayList5 = arrayList16;
                                                arrayList4 = arrayList15;
                                                i4 = size3;
                                                actionBarPopupWindowLayout6 = actionBarPopupWindowLayout5;
                                                atomicBoolean3 = atomicBoolean2;
                                                atomicReference3 = atomicReference2;
                                                if (z27) {
                                                    actionBarMenuSubItem6.setOnClickListener(new ChatActivity$$ExternalSyntheticLambda84(this, i25, arrayList6, inputPeer, i26, language, charSequence, z20, chatActivity$$ExternalSyntheticLambda253));
                                                } else {
                                                    actionBarMenuSubItem6.setVisibility(8);
                                                }
                                            }
                                        } else {
                                            arrayList6 = arrayList17;
                                            arrayList5 = arrayList16;
                                            arrayList4 = arrayList15;
                                            i4 = size3;
                                            actionBarPopupWindowLayout6 = actionBarPopupWindowLayout5;
                                            atomicBoolean3 = atomicBoolean2;
                                            atomicReference3 = atomicReference2;
                                        }
                                        i25++;
                                        chatActivity = this;
                                        atomicReference2 = atomicReference3;
                                        atomicBoolean2 = atomicBoolean3;
                                        arrayList3 = arrayList6;
                                        arrayList2 = arrayList5;
                                        arrayList = arrayList4;
                                        actionBarPopupWindowLayout5 = actionBarPopupWindowLayout6;
                                        size3 = i4;
                                    }
                                    atomicReference = atomicReference2;
                                    actionBarPopupWindowLayout2 = actionBarPopupWindowLayout5;
                                    atomicBoolean = atomicBoolean2;
                                } else {
                                    rect = rect3;
                                    atomicReference = atomicReference4;
                                    actionBarPopupWindowLayout2 = actionBarPopupWindowLayout7;
                                    rect2 = rect4;
                                    atomicBoolean = atomicBoolean4;
                                    messageObject4 = messageObject2;
                                    animatedEmojiSpanArr = null;
                                    actionBarPopupWindowLayout3 = actionBarPopupWindowLayout;
                                    messageObject3 = messageObject11;
                                }
                                AnonymousClass107 anonymousClass107 = new AnonymousClass107(this.contentView.getContext());
                                anonymousClass107.setOnTouchListener(new AnonymousClass108(rect));
                                if (actionBarPopupWindowLayout3 != null) {
                                    anonymousClass107.addView(actionBarPopupWindowLayout3);
                                    actionBarPopupWindowLayout4 = actionBarPopupWindowLayout2;
                                } else {
                                    ReactionsContainerLayout reactionsContainerLayout = new ReactionsContainerLayout(this, this.contentView.getContext(), this.currentAccount, getResourceProvider());
                                    if (z24) {
                                        int i27 = 24;
                                        int dp4 = AndroidUtilities.dp(4.0f) + (LocaleController.isRTL ? 0 : 24);
                                        int dp5 = AndroidUtilities.dp(4.0f);
                                        int dp6 = AndroidUtilities.dp(4.0f);
                                        if (!LocaleController.isRTL) {
                                            i27 = 0;
                                        }
                                        reactionsContainerLayout.setPadding(dp4, dp5, dp6 + i27, AndroidUtilities.dp(22));
                                        reactionsContainerLayout.setDelegate(new AnonymousClass109(messageObject3, reactionsContainerLayout));
                                        anonymousClass107.addView(reactionsContainerLayout, LayoutHelper.createLinear(-1, 74, 5, 0, 50, 0, -20));
                                        anonymousClass107.setReactionsLayout(reactionsContainerLayout);
                                        anonymousClass107.setClipChildren(false);
                                        messageObject5 = messageObject4;
                                        reactionsContainerLayout.setMessage(messageObject5, this.chatInfo);
                                        reactionsContainerLayout.setTransitionProgress(0.0f);
                                        if (actionBarPopupWindowLayout2.getSwipeBack() != null) {
                                            actionBarPopupWindowLayout2.getSwipeBack().addOnSwipeBackProgressListener(new AnonymousClass110(this, reactionsContainerLayout));
                                        }
                                    } else {
                                        messageObject5 = messageObject4;
                                    }
                                    if (!z20 || messageObject5.messageOwner.action != null || !messageObject5.isSent() || messageObject5.isEditing()) {
                                        i2 = 1;
                                    } else {
                                        i2 = 1;
                                        if (this.chatMode != 1) {
                                            z7 = true;
                                            actionBarPopupWindowLayout4 = actionBarPopupWindowLayout2;
                                            anonymousClass107.addView(actionBarPopupWindowLayout4, LayoutHelper.createLinearRelatively(-2.0f, -2.0f, 3, !z24 ? 16.0f : 0.0f, 0.0f, !z24 ? 36.0f : 0.0f, 0.0f));
                                            anonymousClass107.setPopupWindowLayout(actionBarPopupWindowLayout4);
                                            if (z7) {
                                                actionBarPopupWindowLayout4.measure(View.MeasureSpec.makeMeasureSpec(0, 0), View.MeasureSpec.makeMeasureSpec(0, 0));
                                                boolean z28 = ChatObject.isChannel(this.currentChat) && !this.currentChat.megagroup;
                                                TextView textView3 = new TextView(this.contentView.getContext());
                                                textView3.setTextSize(i2, 14.0f);
                                                textView3.setTextColor(getThemedColor("actionBarDefaultSubmenuItem"));
                                                if (getMessagesController().isChatNoForwards(this.currentChat)) {
                                                    if (z28) {
                                                        str = LocaleController.getString("ForwardsRestrictedInfoChannel", 2131626063);
                                                    } else {
                                                        str = LocaleController.getString("ForwardsRestrictedInfoGroup", 2131626064);
                                                    }
                                                    textView3.setText(str);
                                                } else {
                                                    textView3.setText(LocaleController.getString("ForwardsRestrictedInfoBot", 2131626062));
                                                }
                                                textView3.setMaxWidth(actionBarPopupWindowLayout4.getMeasuredWidth() - AndroidUtilities.dp(38.0f));
                                                Drawable mutate3 = ContextCompat.getDrawable(this.contentView.getContext(), 2131166090).mutate();
                                                mutate3.setColorFilter(new PorterDuffColorFilter(getThemedColor("actionBarDefaultSubmenuBackground"), PorterDuff.Mode.MULTIPLY));
                                                FrameLayout frameLayout8 = new FrameLayout(this.contentView.getContext());
                                                frameLayout8.setBackground(mutate3);
                                                frameLayout8.addView(textView3, LayoutHelper.createFrame(-1, -2.0f, 0, 11.0f, 11.0f, 11.0f, 11.0f));
                                                anonymousClass107.addView(frameLayout8, LayoutHelper.createLinear(-1, -2, 3, z24 ? 16 : 0, -8, z24 ? 36 : 0, 0));
                                                anonymousClass107.applyViewBottom(frameLayout8);
                                            }
                                            CharSequence charSequence2 = messageObject5.messageText;
                                            AnimatedEmojiSpan[] animatedEmojiSpanArr2 = !(charSequence2 instanceof Spanned) ? (AnimatedEmojiSpan[]) ((Spanned) charSequence2).getSpans(0, charSequence2.length(), AnimatedEmojiSpan.class) : animatedEmojiSpanArr;
                                            CharSequence messageCaption = getMessageCaption(this.selectedObject, this.selectedObjectGroup);
                                            AnimatedEmojiSpan[] animatedEmojiSpanArr3 = !(messageCaption instanceof Spanned) ? (AnimatedEmojiSpan[]) ((Spanned) messageCaption).getSpans(0, messageCaption.length(), AnimatedEmojiSpan.class) : animatedEmojiSpanArr;
                                            length = (animatedEmojiSpanArr2 != null ? 0 : animatedEmojiSpanArr2.length) + (animatedEmojiSpanArr3 != null ? 0 : animatedEmojiSpanArr3.length);
                                            if (length > 0) {
                                                ArrayList arrayList18 = new ArrayList();
                                                int length2 = animatedEmojiSpanArr2 == null ? 0 : animatedEmojiSpanArr2.length;
                                                int i28 = 0;
                                                while (i28 < length) {
                                                    AnimatedEmojiSpan animatedEmojiSpan = i28 < length2 ? animatedEmojiSpanArr2[i28] : animatedEmojiSpanArr3[i28 - length2];
                                                    if (animatedEmojiSpan != null) {
                                                        TLRPC$Document tLRPC$Document = animatedEmojiSpan.document;
                                                        if (tLRPC$Document == null) {
                                                            tLRPC$Document = AnimatedEmojiDrawable.findDocument(this.currentAccount, animatedEmojiSpan.documentId);
                                                        }
                                                        TLRPC$InputStickerSet inputStickerSet = MessageObject.getInputStickerSet(tLRPC$Document);
                                                        if (inputStickerSet != null) {
                                                            int i29 = 0;
                                                            while (true) {
                                                                if (i29 >= arrayList18.size()) {
                                                                    i3 = length2;
                                                                    z8 = false;
                                                                    break;
                                                                }
                                                                i3 = length2;
                                                                if (((TLRPC$InputStickerSet) arrayList18.get(i29)).id == inputStickerSet.id) {
                                                                    z8 = true;
                                                                    break;
                                                                }
                                                                i29++;
                                                                length2 = i3;
                                                            }
                                                            if (!z8) {
                                                                arrayList18.add(inputStickerSet);
                                                            }
                                                            i28++;
                                                            length2 = i3;
                                                        }
                                                    }
                                                    i3 = length2;
                                                    i28++;
                                                    length2 = i3;
                                                }
                                                if (arrayList18.size() > 0) {
                                                    FrameLayout frameLayout9 = new FrameLayout(this.contentView.getContext());
                                                    frameLayout9.setBackgroundColor(getThemedColor("actionBarDefaultSubmenuSeparator"));
                                                    actionBarPopupWindowLayout4.addView((View) frameLayout9, LayoutHelper.createLinear(-1, 8));
                                                    MessageContainsEmojiButton messageContainsEmojiButton = new MessageContainsEmojiButton(this.currentAccount, this.contentView.getContext(), this.themeDelegate, arrayList18);
                                                    messageContainsEmojiButton.setOnClickListener(new ChatActivity$$ExternalSyntheticLambda88(this, arrayList18));
                                                    actionBarPopupWindowLayout4.addView((View) messageContainsEmojiButton, LayoutHelper.createLinear(-1, -2));
                                                }
                                            }
                                            animatedEmojiSpanArr = reactionsContainerLayout;
                                        }
                                    }
                                    z7 = false;
                                    actionBarPopupWindowLayout4 = actionBarPopupWindowLayout2;
                                    anonymousClass107.addView(actionBarPopupWindowLayout4, LayoutHelper.createLinearRelatively(-2.0f, -2.0f, 3, !z24 ? 16.0f : 0.0f, 0.0f, !z24 ? 36.0f : 0.0f, 0.0f));
                                    anonymousClass107.setPopupWindowLayout(actionBarPopupWindowLayout4);
                                    if (z7) {
                                    }
                                    CharSequence charSequence22 = messageObject5.messageText;
                                    if (!(charSequence22 instanceof Spanned)) {
                                    }
                                    CharSequence messageCaption2 = getMessageCaption(this.selectedObject, this.selectedObjectGroup);
                                    if (!(messageCaption2 instanceof Spanned)) {
                                    }
                                    length = (animatedEmojiSpanArr2 != null ? 0 : animatedEmojiSpanArr2.length) + (animatedEmojiSpanArr3 != null ? 0 : animatedEmojiSpanArr3.length);
                                    if (length > 0) {
                                    }
                                    animatedEmojiSpanArr = reactionsContainerLayout;
                                }
                                AnonymousClass112 anonymousClass112 = new AnonymousClass112(anonymousClass107, -2, -2);
                                this.scrimPopupWindow = anonymousClass112;
                                anonymousClass112.setPauseNotifications(true);
                                this.scrimPopupWindow.setDismissAnimationDuration(220);
                                this.scrimPopupWindow.setOutsideTouchable(true);
                                this.scrimPopupWindow.setClippingEnabled(true);
                                this.scrimPopupWindow.setAnimationStyle(2131689481);
                                this.scrimPopupWindow.setFocusable(true);
                                anonymousClass107.measure(View.MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(1000.0f), Integer.MIN_VALUE), View.MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(1000.0f), Integer.MIN_VALUE));
                                this.scrimPopupWindow.setInputMethodMode(2);
                                this.scrimPopupWindow.setSoftInputMode(0);
                                this.scrimPopupWindow.getContentView().setFocusableInTouchMode(true);
                                actionBarPopupWindowLayout4.setFitItems(true);
                                Rect rect5 = rect2;
                                int left = (((view.getLeft() + ((int) f)) - anonymousClass107.getMeasuredWidth()) + rect5.left) - AndroidUtilities.dp(28.0f);
                                if (left < AndroidUtilities.dp(6.0f)) {
                                    left = AndroidUtilities.dp(6.0f);
                                } else if (left > (this.chatListView.getMeasuredWidth() - AndroidUtilities.dp(6.0f)) - anonymousClass107.getMeasuredWidth()) {
                                    left = (this.chatListView.getMeasuredWidth() - AndroidUtilities.dp(6.0f)) - anonymousClass107.getMeasuredWidth();
                                }
                                if (AndroidUtilities.isTablet()) {
                                    int[] iArr6 = new int[2];
                                    this.fragmentView.getLocationInWindow(iArr6);
                                    left += iArr6[0];
                                }
                                int i30 = left;
                                int height = this.contentView.getHeight();
                                int measuredHeight = anonymousClass107.getMeasuredHeight() + AndroidUtilities.dp(48.0f);
                                int measureKeyboardHeight = this.contentView.measureKeyboardHeight();
                                if (measureKeyboardHeight > AndroidUtilities.dp(20.0f)) {
                                    height += measureKeyboardHeight;
                                }
                                if (measuredHeight < height) {
                                    int y = (int) (this.chatListView.getY() + view.getTop() + f2);
                                    if ((measuredHeight - rect5.top) - rect5.bottom > AndroidUtilities.dp(240.0f)) {
                                        y += AndroidUtilities.dp(240.0f) - measuredHeight;
                                    }
                                    if (y < this.chatListView.getY() + AndroidUtilities.dp(24.0f)) {
                                        i = (int) (this.chatListView.getY() + AndroidUtilities.dp(24.0f));
                                    } else {
                                        int i31 = height - measuredHeight;
                                        i = y > i31 - AndroidUtilities.dp(8.0f) ? i31 - AndroidUtilities.dp(8.0f) : y;
                                    }
                                } else {
                                    i = this.inBubbleMode ? 0 : AndroidUtilities.statusBarHeight;
                                }
                                this.scrimPopupY = i;
                                anonymousClass107.setMaxHeight(height - i);
                                ChatActivity$$ExternalSyntheticLambda167 chatActivity$$ExternalSyntheticLambda167 = new ChatActivity$$ExternalSyntheticLambda167(this, i30, i, z24, animatedEmojiSpanArr);
                                if (atomicBoolean.get()) {
                                    atomicReference.set(chatActivity$$ExternalSyntheticLambda167);
                                } else {
                                    chatActivity$$ExternalSyntheticLambda167.run();
                                }
                                this.chatListView.stopScroll();
                                this.chatLayoutManager.setCanScrollVertically(false);
                                dimBehindView(view, true);
                                hideHints(false);
                                UndoView undoView = this.topUndoView;
                                if (undoView != null) {
                                    undoView.hide(true, 1);
                                }
                                UndoView undoView2 = this.undoView;
                                if (undoView2 != null) {
                                    undoView2.hide(true, 1);
                                }
                                ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
                                if (chatActivityEnterView != null) {
                                    chatActivityEnterView.getEditField().setAllowDrawCursor(false);
                                }
                                return true;
                            }
                        }
                        if (messageType >= 0 || (messageType == -1 && z18 && ((messageObject2.isSending() || messageObject2.isEditing()) && this.currentEncryptedChat == null))) {
                            this.selectedObject = messageObject2;
                            this.selectedObjectGroup = validGroupedMessage;
                            CharSequence messageCaption3 = getMessageCaption(messageObject2, validGroupedMessage);
                            if (messageCaption3 == null && this.selectedObject.isPoll()) {
                                try {
                                    TLRPC$Poll tLRPC$Poll = ((TLRPC$TL_messageMediaPoll) this.selectedObject.messageOwner.media).poll;
                                    StringBuilder sb = new StringBuilder(tLRPC$Poll.question);
                                    sb.append("\n");
                                    Iterator<TLRPC$TL_pollAnswer> it2 = tLRPC$Poll.answers.iterator();
                                    while (it2.hasNext()) {
                                        sb.append("\n🔘 ");
                                        sb.append(it2.next().text);
                                    }
                                    messageCaption3 = sb.toString();
                                } catch (Exception unused) {
                                }
                            }
                            if (messageCaption3 == null) {
                                messageCaption3 = getMessageContent(this.selectedObject, 0L, false);
                            }
                            if (messageCaption3 != null && Emoji.fullyConsistsOfEmojis(messageCaption3)) {
                                messageCaption3 = null;
                            }
                            if (messageObject2.isSponsored() && !getMessagesController().premiumLocked) {
                                arrayList12.add(LocaleController.getString("HideAd", 2131626181));
                                arrayList13.add(31);
                                arrayList11.add(2131165652);
                            }
                            if (messageType == -1) {
                                MessageObject messageObject13 = this.selectedObject;
                                if ((messageObject13.type == 0 || messageObject13.isAnimatedEmoji() || getMessageCaption(this.selectedObject, this.selectedObjectGroup) != null) && !z20) {
                                    arrayList12.add(LocaleController.getString("Copy", 2131625272));
                                    arrayList13.add(3);
                                    arrayList11.add(2131165697);
                                }
                                arrayList12.add(LocaleController.getString("CancelSending", 2131624853));
                                arrayList13.add(24);
                                arrayList11.add(2131165702);
                            } else {
                                int i32 = 2131165702;
                                if (messageType == 0) {
                                    arrayList12.add(LocaleController.getString("Retry", 2131628099));
                                    arrayList13.add(0);
                                    arrayList11.add(2131165912);
                                    arrayList12.add(LocaleController.getString("Delete", 2131625384));
                                    arrayList13.add(1);
                                    if (this.selectedObject.messageOwner.ttl_period != 0) {
                                        i32 = 2131165703;
                                    }
                                    arrayList11.add(Integer.valueOf(i32));
                                } else if (messageType == 1) {
                                    if (this.currentChat != null) {
                                        if (z22) {
                                            arrayList12.add(LocaleController.getString("Reply", 2131627989));
                                            arrayList13.add(8);
                                            arrayList11.add(2131165901);
                                        }
                                        if (!isThreadChat() && this.chatMode != 1 && messageObject2.hasReplies() && this.currentChat.megagroup && messageObject2.canViewThread()) {
                                            arrayList12.add(LocaleController.formatPluralString("ViewReplies", messageObject2.getRepliesCount(), new Object[0]));
                                            arrayList13.add(27);
                                            arrayList11.add(2131165980);
                                        }
                                        if (z13) {
                                            arrayList12.add(LocaleController.getString("UnpinMessage", 2131628816));
                                            arrayList13.add(14);
                                            arrayList11.add(2131165973);
                                        } else if (z14) {
                                            arrayList12.add(LocaleController.getString("PinMessage", 2131627582));
                                            arrayList13.add(13);
                                            arrayList11.add(2131165863);
                                        }
                                        MessageObject messageObject14 = this.selectedObject;
                                        if (messageObject14 != null && messageObject14.contentType == 0 && messageCaption3 != null && messageCaption3.length() > 0 && !this.selectedObject.isAnimatedEmoji() && !this.selectedObject.isDice()) {
                                            arrayList12.add(LocaleController.getString("TranslateMessage", 2131628759));
                                            arrayList13.add(29);
                                            arrayList11.add(2131165968);
                                        }
                                        if (messageObject2.canEditMessage(this.currentChat)) {
                                            arrayList12.add(LocaleController.getString("Edit", 2131625553));
                                            arrayList13.add(12);
                                            arrayList11.add(2131165714);
                                        }
                                        MessageObject messageObject15 = this.selectedObject;
                                        if (messageObject15.contentType == 0 && !messageObject15.isMediaEmptyWebpage() && this.selectedObject.getId() > 0 && !this.selectedObject.isOut() && (this.currentChat != null || ((tLRPC$User2 = this.currentUser) != null && tLRPC$User2.bot))) {
                                            arrayList12.add(LocaleController.getString("ReportChat", 2131627992));
                                            arrayList13.add(23);
                                            arrayList11.add(2131165903);
                                        }
                                    } else if (this.selectedObject.getId() > 0 && z22) {
                                        arrayList12.add(LocaleController.getString("Reply", 2131627989));
                                        arrayList13.add(8);
                                        arrayList11.add(2131165901);
                                    }
                                    if (messageObject2.canDeleteMessage(this.chatMode == 1, this.currentChat) && ((arrayList8 = this.threadMessageObjects) == null || !arrayList8.contains(messageObject2))) {
                                        arrayList12.add(LocaleController.getString("Delete", 2131625384));
                                        arrayList13.add(1);
                                        arrayList11.add(Integer.valueOf(this.selectedObject.messageOwner.ttl_period != 0 ? 2131165703 : 2131165702));
                                    }
                                } else if (messageType == 20) {
                                    arrayList12.add(LocaleController.getString("Retry", 2131628099));
                                    arrayList13.add(0);
                                    arrayList11.add(2131165912);
                                    if (!z20) {
                                        arrayList12.add(LocaleController.getString("Copy", 2131625272));
                                        arrayList13.add(3);
                                        arrayList11.add(2131165697);
                                    }
                                    arrayList12.add(LocaleController.getString("Delete", 2131625384));
                                    arrayList13.add(1);
                                    arrayList11.add(Integer.valueOf(this.selectedObject.messageOwner.ttl_period != 0 ? 2131165703 : 2131165702));
                                } else {
                                    if (this.currentEncryptedChat == null) {
                                        if (this.chatMode == 1) {
                                            arrayList12.add(LocaleController.getString("MessageScheduleSend", 2131626694));
                                            arrayList13.add(100);
                                            arrayList11.add(2131165934);
                                        }
                                        if (this.selectedObject.messageOwner.action instanceof TLRPC$TL_messageActionPhoneCall) {
                                            TLRPC$TL_messageActionPhoneCall tLRPC$TL_messageActionPhoneCall = (TLRPC$TL_messageActionPhoneCall) messageObject2.messageOwner.action;
                                            TLRPC$PhoneCallDiscardReason tLRPC$PhoneCallDiscardReason = tLRPC$TL_messageActionPhoneCall.reason;
                                            z6 = z16;
                                            if (((tLRPC$PhoneCallDiscardReason instanceof TLRPC$TL_phoneCallDiscardReasonMissed) || (tLRPC$PhoneCallDiscardReason instanceof TLRPC$TL_phoneCallDiscardReasonBusy)) && !messageObject2.isOutOwner()) {
                                                i10 = 2131624797;
                                                str2 = "CallBack";
                                            } else {
                                                i10 = 2131624793;
                                                str2 = "CallAgain";
                                            }
                                            arrayList12.add(LocaleController.getString(str2, i10));
                                            arrayList13.add(18);
                                            arrayList11.add(2131165663);
                                            if (VoIPHelper.canRateCall(tLRPC$TL_messageActionPhoneCall)) {
                                                arrayList12.add(LocaleController.getString("CallMessageReportProblem", 2131624804));
                                                arrayList13.add(19);
                                                arrayList11.add(2131165728);
                                            }
                                        } else {
                                            z6 = z16;
                                        }
                                        if (z22) {
                                            arrayList12.add(LocaleController.getString("Reply", 2131627989));
                                            arrayList13.add(8);
                                            arrayList11.add(2131165901);
                                        }
                                        MessageObject messageObject16 = this.selectedObject;
                                        if ((messageObject16.type == 0 || messageObject16.isDice() || this.selectedObject.isAnimatedEmoji() || getMessageCaption(this.selectedObject, this.selectedObjectGroup) != null) && !z20) {
                                            arrayList12.add(LocaleController.getString("Copy", 2131625272));
                                            arrayList13.add(3);
                                            arrayList11.add(2131165697);
                                        }
                                        if (!isThreadChat() && this.chatMode != 1 && (tLRPC$Chat2 = this.currentChat) != null && ((tLRPC$Chat2.has_link || messageObject2.hasReplies()) && this.currentChat.megagroup && messageObject2.canViewThread())) {
                                            if (messageObject2.hasReplies()) {
                                                arrayList12.add(LocaleController.formatPluralString("ViewReplies", messageObject2.getRepliesCount(), new Object[0]));
                                            } else {
                                                arrayList12.add(LocaleController.getString("ViewThread", 2131629001));
                                            }
                                            arrayList13.add(27);
                                            arrayList11.add(2131165980);
                                        }
                                        if (this.selectedObject.isSponsored() || this.chatMode == 1 || !ChatObject.isChannel(this.currentChat)) {
                                            z15 = z5;
                                        } else {
                                            z15 = z5;
                                            if (this.selectedObject.getDialogId() != this.mergeDialogId) {
                                                arrayList12.add(LocaleController.getString("CopyLink", 2131625274));
                                                arrayList13.add(22);
                                                arrayList11.add(2131165783);
                                            }
                                        }
                                        if (messageType == 2) {
                                            if (this.chatMode != 1) {
                                                if (this.selectedObject.type == 17 && !messageObject2.isPollClosed()) {
                                                    if (messageObject2.canUnvote()) {
                                                        arrayList12.add(LocaleController.getString("Unvote", 2131628828));
                                                        arrayList13.add(25);
                                                        arrayList11.add(2131165974);
                                                    }
                                                    if (!messageObject2.isForwarded()) {
                                                        if (!messageObject2.isOut() || (ChatObject.isChannel(this.currentChat) && !this.currentChat.megagroup)) {
                                                            if (ChatObject.isChannel(this.currentChat)) {
                                                                TLRPC$Chat tLRPC$Chat5 = this.currentChat;
                                                                if (!tLRPC$Chat5.megagroup) {
                                                                    if (!tLRPC$Chat5.creator) {
                                                                        TLRPC$TL_chatAdminRights tLRPC$TL_chatAdminRights = tLRPC$Chat5.admin_rights;
                                                                        if (tLRPC$TL_chatAdminRights != null) {
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        if (messageObject2.isQuiz()) {
                                                            arrayList12.add(LocaleController.getString("StopQuiz", 2131628539));
                                                        } else {
                                                            arrayList12.add(LocaleController.getString("StopPoll", 2131628536));
                                                        }
                                                        arrayList13.add(26);
                                                        arrayList11.add(2131165870);
                                                    }
                                                } else if (this.selectedObject.isMusic() && !z20) {
                                                    arrayList12.add(LocaleController.getString("SaveToMusic", 2131628137));
                                                    arrayList13.add(10);
                                                    arrayList11.add(2131165709);
                                                } else if (this.selectedObject.isDocument() && !z20) {
                                                    arrayList12.add(LocaleController.getString("SaveToDownloads", 2131628130));
                                                    arrayList13.add(10);
                                                    arrayList11.add(2131165709);
                                                }
                                            }
                                        } else if (messageType == 3 && !z20) {
                                            TLRPC$MessageMedia tLRPC$MessageMedia = this.selectedObject.messageOwner.media;
                                            if ((tLRPC$MessageMedia instanceof TLRPC$TL_messageMediaWebPage) && MessageObject.isNewGifDocument(tLRPC$MessageMedia.webpage.document)) {
                                                arrayList12.add(LocaleController.getString("SaveToGIFs", 2131628131));
                                                arrayList13.add(11);
                                                arrayList11.add(2131165745);
                                            }
                                        } else if (messageType == 4) {
                                            if (!z20) {
                                                if (this.selectedObject.isVideo()) {
                                                    if (!this.selectedObject.needDrawBluredPreview()) {
                                                        arrayList12.add(LocaleController.getString("SaveToGallery", 2131628132));
                                                        arrayList13.add(4);
                                                        arrayList11.add(2131165744);
                                                        arrayList12.add(LocaleController.getString("ShareFile", 2131628337));
                                                        arrayList13.add(6);
                                                        arrayList11.add(2131165944);
                                                    }
                                                } else if (this.selectedObject.isMusic()) {
                                                    arrayList12.add(LocaleController.getString("SaveToMusic", 2131628137));
                                                    arrayList13.add(10);
                                                    arrayList11.add(2131165709);
                                                    arrayList12.add(LocaleController.getString("ShareFile", 2131628337));
                                                    arrayList13.add(6);
                                                    arrayList11.add(2131165944);
                                                } else if (this.selectedObject.getDocument() != null) {
                                                    if (MessageObject.isNewGifDocument(this.selectedObject.getDocument())) {
                                                        arrayList12.add(LocaleController.getString("SaveToGIFs", 2131628131));
                                                        arrayList13.add(11);
                                                        arrayList11.add(2131165745);
                                                    }
                                                    arrayList12.add(LocaleController.getString("SaveToDownloads", 2131628130));
                                                    arrayList13.add(10);
                                                    arrayList11.add(2131165709);
                                                    arrayList12.add(LocaleController.getString("ShareFile", 2131628337));
                                                    arrayList13.add(6);
                                                    arrayList11.add(2131165944);
                                                } else if (!this.selectedObject.needDrawBluredPreview()) {
                                                    arrayList12.add(LocaleController.getString("SaveToGallery", 2131628132));
                                                    arrayList13.add(4);
                                                    arrayList11.add(2131165744);
                                                }
                                            }
                                        } else if (messageType == 5) {
                                            arrayList12.add(LocaleController.getString("ApplyLocalizationFile", 2131624395));
                                            arrayList13.add(5);
                                            arrayList11.add(2131165774);
                                            if (!z20) {
                                                arrayList12.add(LocaleController.getString("SaveToDownloads", 2131628130));
                                                arrayList13.add(10);
                                                arrayList11.add(2131165709);
                                                arrayList12.add(LocaleController.getString("ShareFile", 2131628337));
                                                arrayList13.add(6);
                                                arrayList11.add(2131165944);
                                            }
                                        } else if (messageType == 10) {
                                            arrayList12.add(LocaleController.getString("ApplyThemeFile", 2131624397));
                                            arrayList13.add(5);
                                            arrayList11.add(2131165961);
                                            if (!z20) {
                                                arrayList12.add(LocaleController.getString("SaveToDownloads", 2131628130));
                                                arrayList13.add(10);
                                                arrayList11.add(2131165709);
                                                arrayList12.add(LocaleController.getString("ShareFile", 2131628337));
                                                arrayList13.add(6);
                                                arrayList11.add(2131165944);
                                            }
                                        } else if (messageType == 6 && !z20) {
                                            arrayList12.add(LocaleController.getString("SaveToGallery", 2131628132));
                                            arrayList13.add(7);
                                            arrayList11.add(2131165744);
                                            arrayList12.add(LocaleController.getString("SaveToDownloads", 2131628130));
                                            arrayList13.add(10);
                                            arrayList11.add(2131165709);
                                            arrayList12.add(LocaleController.getString("ShareFile", 2131628337));
                                            arrayList13.add(6);
                                            arrayList11.add(2131165944);
                                        } else if (messageType == 7) {
                                            if (this.selectedObject.isMask()) {
                                                arrayList12.add(LocaleController.getString("AddToMasks", 2131624303));
                                                arrayList13.add(9);
                                                arrayList11.add(2131165953);
                                            } else {
                                                arrayList12.add(LocaleController.getString("AddToStickers", 2131624304));
                                                arrayList13.add(9);
                                                arrayList11.add(2131165953);
                                                TLRPC$Document document = this.selectedObject.getDocument();
                                                if (!getMediaDataController().isStickerInFavorites(document)) {
                                                    if (getMediaDataController().canAddStickerToFavorites() && MessageObject.isStickerHasSet(document)) {
                                                        arrayList12.add(LocaleController.getString("AddToFavorites", 2131624300));
                                                        arrayList13.add(20);
                                                        arrayList11.add(2131165728);
                                                    }
                                                } else {
                                                    arrayList12.add(LocaleController.getString("DeleteFromFavorites", 2131625424));
                                                    arrayList13.add(21);
                                                    arrayList11.add(2131165971);
                                                }
                                            }
                                        } else if (messageType == 8) {
                                            long j = this.selectedObject.messageOwner.media.user_id;
                                            TLRPC$User user = j != 0 ? MessagesController.getInstance(this.currentAccount).getUser(Long.valueOf(j)) : null;
                                            if (user != null && user.id != getUserConfig().getClientUserId() && getContactsController().contactsDict.get(Long.valueOf(user.id)) == null) {
                                                arrayList12.add(LocaleController.getString("AddContactTitle", 2131624269));
                                                arrayList13.add(15);
                                                arrayList11.add(2131165631);
                                            }
                                            if (!TextUtils.isEmpty(this.selectedObject.messageOwner.media.phone_number)) {
                                                if (!z20) {
                                                    arrayList12.add(LocaleController.getString("Copy", 2131625272));
                                                    arrayList13.add(16);
                                                    arrayList11.add(2131165697);
                                                }
                                                arrayList12.add(LocaleController.getString("Call", 2131624792));
                                                arrayList13.add(17);
                                                arrayList11.add(2131165663);
                                            }
                                        } else if (messageType == 9) {
                                            TLRPC$Document document2 = this.selectedObject.getDocument();
                                            if (!getMediaDataController().isStickerInFavorites(document2)) {
                                                if (MessageObject.isStickerHasSet(document2)) {
                                                    arrayList12.add(LocaleController.getString("AddToFavorites", 2131624300));
                                                    arrayList13.add(20);
                                                    arrayList11.add(2131165728);
                                                }
                                            } else {
                                                arrayList12.add(LocaleController.getString("DeleteFromFavorites", 2131625424));
                                                arrayList13.add(21);
                                                arrayList11.add(2131165971);
                                            }
                                        }
                                        if (!this.selectedObject.isSponsored() && this.chatMode != 1 && !this.selectedObject.needDrawBluredPreview() && !this.selectedObject.isLiveLocation() && (i9 = this.selectedObject.type) != 16 && !z20 && i9 != 18) {
                                            arrayList12.add(LocaleController.getString("Forward", 2131625981));
                                            arrayList13.add(2);
                                            arrayList11.add(2131165741);
                                        }
                                        if (z13) {
                                            arrayList12.add(LocaleController.getString("UnpinMessage", 2131628816));
                                            arrayList13.add(14);
                                            arrayList11.add(2131165973);
                                        } else if (z14) {
                                            arrayList12.add(LocaleController.getString("PinMessage", 2131627582));
                                            arrayList13.add(13);
                                            arrayList11.add(2131165863);
                                        }
                                        MessageObject messageObject17 = this.selectedObject;
                                        if (messageObject17 != null && messageObject17.contentType == 0 && messageCaption3 != null && messageCaption3.length() > 0 && !this.selectedObject.isAnimatedEmoji() && !this.selectedObject.isDice()) {
                                            arrayList12.add(LocaleController.getString("TranslateMessage", 2131628759));
                                            arrayList13.add(29);
                                            arrayList11.add(2131165968);
                                        }
                                        if (z15) {
                                            arrayList12.add(LocaleController.getString("Edit", 2131625553));
                                            arrayList13.add(12);
                                            arrayList11.add(2131165714);
                                        }
                                        if (this.chatMode == 1 && this.selectedObject.canEditMessageScheduleTime(this.currentChat)) {
                                            arrayList12.add(LocaleController.getString("MessageScheduleEditTime", 2131626693));
                                            arrayList13.add(102);
                                            arrayList11.add(2131165662);
                                        }
                                        if (this.chatMode != 1) {
                                            MessageObject messageObject18 = this.selectedObject;
                                            if (messageObject18.contentType == 0 && messageObject18.getId() > 0 && !this.selectedObject.isOut() && (this.currentChat != null || ((tLRPC$User = this.currentUser) != null && tLRPC$User.bot))) {
                                                if (UserObject.isReplyUser(this.currentUser)) {
                                                    arrayList12.add(LocaleController.getString("BlockContact", 2131624689));
                                                    arrayList13.add(23);
                                                    arrayList11.add(2131165652);
                                                } else {
                                                    arrayList12.add(LocaleController.getString("ReportChat", 2131627992));
                                                    arrayList13.add(23);
                                                    arrayList11.add(2131165903);
                                                }
                                            }
                                        }
                                        if (messageObject2.canDeleteMessage(this.chatMode == 1, this.currentChat) && ((arrayList7 = this.threadMessageObjects) == null || !arrayList7.contains(messageObject2))) {
                                            arrayList12.add(LocaleController.getString("Delete", 2131625384));
                                            arrayList13.add(1);
                                            arrayList11.add(Integer.valueOf(this.selectedObject.messageOwner.ttl_period != 0 ? 2131165703 : 2131165702));
                                        }
                                    } else {
                                        z6 = z16;
                                        if (z22) {
                                            arrayList12.add(LocaleController.getString("Reply", 2131627989));
                                            arrayList13.add(8);
                                            arrayList11.add(2131165901);
                                        }
                                        MessageObject messageObject19 = this.selectedObject;
                                        if ((messageObject19.type == 0 || messageObject19.isAnimatedEmoji() || getMessageCaption(this.selectedObject, this.selectedObjectGroup) != null) && !z20) {
                                            arrayList12.add(LocaleController.getString("Copy", 2131625272));
                                            arrayList13.add(3);
                                            arrayList11.add(2131165697);
                                        }
                                        if (!isThreadChat() && this.chatMode != 1 && (tLRPC$Chat = this.currentChat) != null && ((tLRPC$Chat.has_link || messageObject2.hasReplies()) && this.currentChat.megagroup && messageObject2.canViewThread())) {
                                            if (messageObject2.hasReplies()) {
                                                arrayList12.add(LocaleController.formatPluralString("ViewReplies", messageObject2.getRepliesCount(), new Object[0]));
                                            } else {
                                                arrayList12.add(LocaleController.getString("ViewThread", 2131629001));
                                            }
                                            arrayList13.add(27);
                                            arrayList11.add(2131165980);
                                        }
                                        if (messageType != 4 || z20) {
                                            if (messageType == 5) {
                                                arrayList12.add(LocaleController.getString("ApplyLocalizationFile", 2131624395));
                                                arrayList13.add(5);
                                                arrayList11.add(2131165774);
                                            } else if (messageType == 10) {
                                                arrayList12.add(LocaleController.getString("ApplyThemeFile", 2131624397));
                                                arrayList13.add(5);
                                                arrayList11.add(2131165961);
                                            } else if (messageType == 7) {
                                                arrayList12.add(LocaleController.getString("AddToStickers", 2131624304));
                                                arrayList13.add(9);
                                                arrayList11.add(2131165953);
                                            } else if (messageType == 8) {
                                                long j2 = this.selectedObject.messageOwner.media.user_id;
                                                TLRPC$User user2 = j2 != 0 ? MessagesController.getInstance(this.currentAccount).getUser(Long.valueOf(j2)) : null;
                                                if (user2 != null && user2.id != getUserConfig().getClientUserId() && getContactsController().contactsDict.get(Long.valueOf(user2.id)) == null) {
                                                    arrayList12.add(LocaleController.getString("AddContactTitle", 2131624269));
                                                    arrayList13.add(15);
                                                    arrayList11.add(2131165631);
                                                }
                                                if (!TextUtils.isEmpty(this.selectedObject.messageOwner.media.phone_number)) {
                                                    if (!z20) {
                                                        arrayList12.add(LocaleController.getString("Copy", 2131625272));
                                                        arrayList13.add(16);
                                                        arrayList11.add(2131165697);
                                                    }
                                                    arrayList12.add(LocaleController.getString("Call", 2131624792));
                                                    arrayList13.add(17);
                                                    arrayList11.add(2131165663);
                                                }
                                            }
                                        } else if (this.selectedObject.isVideo()) {
                                            arrayList12.add(LocaleController.getString("SaveToGallery", 2131628132));
                                            arrayList13.add(4);
                                            arrayList11.add(2131165744);
                                            arrayList12.add(LocaleController.getString("ShareFile", 2131628337));
                                            arrayList13.add(6);
                                            arrayList11.add(2131165944);
                                        } else if (this.selectedObject.isMusic()) {
                                            arrayList12.add(LocaleController.getString("SaveToMusic", 2131628137));
                                            arrayList13.add(10);
                                            arrayList11.add(2131165709);
                                            arrayList12.add(LocaleController.getString("ShareFile", 2131628337));
                                            arrayList13.add(6);
                                            arrayList11.add(2131165944);
                                        } else if (!this.selectedObject.isVideo() && this.selectedObject.getDocument() != null) {
                                            arrayList12.add(LocaleController.getString("SaveToDownloads", 2131628130));
                                            arrayList13.add(10);
                                            arrayList11.add(2131165709);
                                            arrayList12.add(LocaleController.getString("ShareFile", 2131628337));
                                            arrayList13.add(6);
                                            arrayList11.add(2131165944);
                                        } else {
                                            arrayList12.add(LocaleController.getString("SaveToGallery", 2131628132));
                                            arrayList13.add(4);
                                            arrayList11.add(2131165744);
                                        }
                                        arrayList12.add(LocaleController.getString("Delete", 2131625384));
                                        arrayList13.add(1);
                                        arrayList11.add(Integer.valueOf(this.selectedObject.messageOwner.ttl_period != 0 ? 2131165703 : 2131165702));
                                    }
                                    charSequence = messageCaption3;
                                    actionBarPopupWindowLayout = null;
                                    if (!arrayList13.isEmpty()) {
                                    }
                                    if (this.scrimPopupWindow == null) {
                                    }
                                }
                            }
                            z6 = z16;
                            charSequence = messageCaption3;
                            actionBarPopupWindowLayout = null;
                            if (!arrayList13.isEmpty()) {
                            }
                            if (this.scrimPopupWindow == null) {
                            }
                        } else {
                            z6 = z16;
                            actionBarPopupWindowLayout = null;
                            charSequence = null;
                            if (!arrayList13.isEmpty()) {
                            }
                            if (this.scrimPopupWindow == null) {
                            }
                        }
                    } else {
                        ChatActivityEnterView chatActivityEnterView2 = this.chatActivityEnterView;
                        if (chatActivityEnterView2 != null && (chatActivityEnterView2.isRecordingAudioVideo() || this.chatActivityEnterView.isRecordLocked())) {
                            return false;
                        }
                        ActionBarMenuItem item = this.actionBar.createActionMode().getItem(12);
                        if (item != null) {
                            item.setVisibility(0);
                        }
                        this.bottomMessagesActionContainer.setVisibility(0);
                        int measuredHeight2 = this.chatActivityEnterView.getMeasuredHeight() - AndroidUtilities.dp(51.0f);
                        if (this.chatActivityEnterView.getVisibility() == 0) {
                            ArrayList arrayList19 = new ArrayList();
                            arrayList19.add(this.chatActivityEnterView);
                            MentionsContainerView mentionsContainerView = this.mentionContainer;
                            if (mentionsContainerView != null && mentionsContainerView.getVisibility() == 0) {
                                arrayList19.add(this.mentionContainer);
                            }
                            FrameLayout frameLayout10 = this.stickersPanel;
                            if (frameLayout10 != null && frameLayout10.getVisibility() == 0) {
                                arrayList19.add(this.stickersPanel);
                            }
                            this.actionBar.showActionMode(true, this.bottomMessagesActionContainer, null, (View[]) arrayList19.toArray(new View[0]), new boolean[]{false, true, true}, this.chatListView, measuredHeight2);
                            if (getParentActivity() instanceof LaunchActivity) {
                                ((LaunchActivity) getParentActivity()).hideVisibleActionMode();
                            }
                            this.chatActivityEnterView.getEditField().setAllowDrawCursor(false);
                        } else if (this.bottomOverlayChat.getVisibility() == 0) {
                            this.actionBar.showActionMode(true, this.bottomMessagesActionContainer, null, new View[]{this.bottomOverlayChat}, new boolean[]{true}, this.chatListView, measuredHeight2);
                        } else {
                            this.actionBar.showActionMode(true, this.bottomMessagesActionContainer, null, null, null, this.chatListView, measuredHeight2);
                        }
                        closeMenu();
                        this.chatLayoutManager.setCanScrollVertically(true);
                        updatePinnedMessageView(true);
                        AnimatorSet animatorSet = new AnimatorSet();
                        ArrayList arrayList20 = new ArrayList();
                        for (int i33 = 0; i33 < this.actionModeViews.size(); i33++) {
                            View view3 = this.actionModeViews.get(i33);
                            view3.setPivotY(ActionBar.getCurrentActionBarHeight() / 2);
                            AndroidUtilities.clearDrawableAnimation(view3);
                            arrayList20.add(ObjectAnimator.ofFloat(view3, View.SCALE_Y, 0.1f, 1.0f));
                        }
                        animatorSet.playTogether(arrayList20);
                        animatorSet.setDuration(250L);
                        animatorSet.start();
                        addToSelectedMessages(messageObject2, z2);
                        ChatActivityEnterView chatActivityEnterView3 = this.chatActivityEnterView;
                        if (chatActivityEnterView3 != null) {
                            chatActivityEnterView3.preventInput = true;
                        }
                        this.selectedMessagesCountTextView.setNumber(this.selectedMessagesIds[0].size() + this.selectedMessagesIds[1].size(), false);
                        updateVisibleRows();
                        ChatActivityEnterView chatActivityEnterView4 = this.chatActivityEnterView;
                        if (chatActivityEnterView4 != null) {
                            chatActivityEnterView4.hideBotCommands();
                        }
                        return false;
                    }
                }
            } else if (this.currentEncryptedChat == null && !UserObject.isDeleted(this.currentUser) && (tLRPC$UserFull = this.userInfo) != null) {
                z4 = tLRPC$UserFull.can_pin_message;
                if (!z4) {
                }
                if (!getMessagesController().isChatNoForwards(this.currentChat)) {
                }
                if (messageObject2.getDialogId() == this.mergeDialogId) {
                }
                if (!messageObject2.canEditMessage(this.currentChat)) {
                }
                if (z5) {
                    size = validGroupedMessage.messages.size();
                    int i132 = 0;
                    while (i11 < size) {
                    }
                    if (i132 >= 2) {
                    }
                }
                if (this.chatMode == 1) {
                }
                if (!z18) {
                }
                if (getParentActivity() == null) {
                }
            }
        }
        z4 = false;
        if (!z4) {
        }
        if (!getMessagesController().isChatNoForwards(this.currentChat)) {
        }
        if (messageObject2.getDialogId() == this.mergeDialogId) {
        }
        if (!messageObject2.canEditMessage(this.currentChat)) {
        }
        if (z5) {
        }
        if (this.chatMode == 1) {
        }
        if (!z18) {
        }
        if (getParentActivity() == null) {
        }
    }

    public /* synthetic */ void lambda$createMenu$154(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        AndroidUtilities.runOnUIThread(new ChatActivity$$ExternalSyntheticLambda186(this, tLObject));
    }

    public /* synthetic */ void lambda$createMenu$153(TLObject tLObject) {
        if (tLObject instanceof TLRPC$TL_payments_paymentReceipt) {
            presentFragment(new PaymentFormActivity((TLRPC$TL_payments_paymentReceipt) tLObject));
        }
    }

    /* renamed from: org.telegram.ui.ChatActivity$101 */
    /* loaded from: classes3.dex */
    public class AnonymousClass101 implements AutoDeletePopupWrapper.Callback {
        AnonymousClass101() {
            ChatActivity.this = r1;
        }

        @Override // org.telegram.ui.Components.AutoDeletePopupWrapper.Callback
        public void dismiss() {
            ActionBarPopupWindow actionBarPopupWindow = ChatActivity.this.scrimPopupWindow;
            if (actionBarPopupWindow != null) {
                actionBarPopupWindow.dismiss();
            }
        }

        @Override // org.telegram.ui.Components.AutoDeletePopupWrapper.Callback
        public void setAutoDeleteHistory(int i, int i2) {
            ChatActivity.this.getMessagesController().setDialogHistoryTTL(ChatActivity.this.dialog_id, i);
            ChatActivity chatActivity = ChatActivity.this;
            if (chatActivity.userInfo == null && chatActivity.chatInfo == null) {
                return;
            }
            UndoView undoView = chatActivity.undoView;
            long j = ChatActivity.this.dialog_id;
            ChatActivity chatActivity2 = ChatActivity.this;
            TLRPC$User tLRPC$User = chatActivity2.currentUser;
            TLRPC$UserFull tLRPC$UserFull = chatActivity2.userInfo;
            undoView.showWithAction(j, i2, tLRPC$User, Integer.valueOf(tLRPC$UserFull != null ? tLRPC$UserFull.ttl_period : chatActivity2.chatInfo.ttl_period), (Runnable) null, (Runnable) null);
        }
    }

    public static /* synthetic */ void lambda$createMenu$155(ActionBarPopupWindow.ActionBarPopupWindowLayout actionBarPopupWindowLayout, View view) {
        actionBarPopupWindowLayout.getSwipeBack().closeForeground();
    }

    public static /* synthetic */ void lambda$createMenu$157(ViewPager viewPager, int i, LinearLayout linearLayout, AtomicBoolean atomicBoolean, HorizontalScrollView horizontalScrollView, ReactionTabHolderView reactionTabHolderView, View view) {
        int currentItem = viewPager.getCurrentItem();
        if (i == currentItem) {
            return;
        }
        ReactionTabHolderView reactionTabHolderView2 = (ReactionTabHolderView) linearLayout.getChildAt(currentItem);
        atomicBoolean.set(true);
        viewPager.setCurrentItem(i, true);
        float scrollX = horizontalScrollView.getScrollX();
        float x = reactionTabHolderView.getX() - ((horizontalScrollView.getWidth() - reactionTabHolderView.getWidth()) / 2.0f);
        ValueAnimator duration = ValueAnimator.ofFloat(0.0f, 1.0f).setDuration(150L);
        duration.setInterpolator(CubicBezierInterpolator.DEFAULT);
        duration.addUpdateListener(new ChatActivity$$ExternalSyntheticLambda0(horizontalScrollView, scrollX, x, reactionTabHolderView2, reactionTabHolderView));
        duration.start();
    }

    public static /* synthetic */ void lambda$createMenu$156(HorizontalScrollView horizontalScrollView, float f, float f2, ReactionTabHolderView reactionTabHolderView, ReactionTabHolderView reactionTabHolderView2, ValueAnimator valueAnimator) {
        float floatValue = ((Float) valueAnimator.getAnimatedValue()).floatValue();
        horizontalScrollView.setScrollX((int) (f + ((f2 - f) * floatValue)));
        reactionTabHolderView.setOutlineProgress(1.0f - floatValue);
        reactionTabHolderView2.setOutlineProgress(floatValue);
    }

    /* renamed from: org.telegram.ui.ChatActivity$102 */
    /* loaded from: classes3.dex */
    public class AnonymousClass102 extends PagerAdapter {
        final /* synthetic */ SparseIntArray val$cachedHeights;
        final /* synthetic */ SparseArray val$cachedViews;
        final /* synthetic */ List val$counters;
        final /* synthetic */ int val$finalCount;
        final /* synthetic */ int[] val$foregroundIndex;
        final /* synthetic */ int val$head;
        final /* synthetic */ MessageObject val$message;
        final /* synthetic */ ViewPager val$pager;
        final /* synthetic */ ActionBarPopupWindow.ActionBarPopupWindowLayout val$popupLayout;
        final /* synthetic */ ReactedHeaderView val$reactedView;
        final /* synthetic */ boolean val$showAllReactionsTab;
        final /* synthetic */ int val$size;

        @Override // androidx.viewpager.widget.PagerAdapter
        public boolean isViewFromObject(View view, Object obj) {
            return view == obj;
        }

        AnonymousClass102(int i, SparseArray sparseArray, boolean z, List list, MessageObject messageObject, ReactedHeaderView reactedHeaderView, SparseIntArray sparseIntArray, int i2, ViewPager viewPager, ActionBarPopupWindow.ActionBarPopupWindowLayout actionBarPopupWindowLayout, int[] iArr, int i3) {
            ChatActivity.this = r1;
            this.val$size = i;
            this.val$cachedViews = sparseArray;
            this.val$showAllReactionsTab = z;
            this.val$counters = list;
            this.val$message = messageObject;
            this.val$reactedView = reactedHeaderView;
            this.val$cachedHeights = sparseIntArray;
            this.val$head = i2;
            this.val$pager = viewPager;
            this.val$popupLayout = actionBarPopupWindowLayout;
            this.val$foregroundIndex = iArr;
            this.val$finalCount = i3;
        }

        @Override // androidx.viewpager.widget.PagerAdapter
        public int getCount() {
            return this.val$size;
        }

        @Override // androidx.viewpager.widget.PagerAdapter
        public Object instantiateItem(ViewGroup viewGroup, int i) {
            View view = (View) this.val$cachedViews.get(i);
            if (view != null) {
                viewGroup.addView(view);
                return view;
            }
            int i2 = this.val$showAllReactionsTab ? i - 1 : i;
            TLRPC$TL_reactionCount tLRPC$TL_reactionCount = null;
            if (i2 >= 0) {
                tLRPC$TL_reactionCount = (TLRPC$TL_reactionCount) this.val$counters.get(i2);
            }
            Context context = viewGroup.getContext();
            ChatActivity chatActivity = ChatActivity.this;
            ReactedUsersListView onHeightChangedListener = new ReactedUsersListView(context, chatActivity.themeDelegate, ((BaseFragment) chatActivity).currentAccount, this.val$message, tLRPC$TL_reactionCount, true).setSeenUsers(this.val$reactedView.getSeenUsers()).setOnProfileSelectedListener(new ChatActivity$102$$ExternalSyntheticLambda1(this)).setOnHeightChangedListener(new ChatActivity$102$$ExternalSyntheticLambda0(this.val$cachedHeights, i, this.val$head, this.val$pager, this.val$popupLayout, this.val$foregroundIndex));
            if (i2 < 0) {
                onHeightChangedListener.setPredictiveCount(this.val$finalCount);
                this.val$reactedView.setSeenCallback(new ChatActivity$$ExternalSyntheticLambda114(onHeightChangedListener));
            }
            viewGroup.addView(onHeightChangedListener);
            this.val$cachedViews.put(i, onHeightChangedListener);
            return onHeightChangedListener;
        }

        public /* synthetic */ void lambda$instantiateItem$0(ReactedUsersListView reactedUsersListView, long j) {
            Bundle bundle = new Bundle();
            bundle.putLong("user_id", j);
            ChatActivity.this.presentFragment(new ProfileActivity(bundle));
            ChatActivity.this.closeMenu();
        }

        public static /* synthetic */ void lambda$instantiateItem$1(SparseIntArray sparseIntArray, int i, int i2, ViewPager viewPager, ActionBarPopupWindow.ActionBarPopupWindowLayout actionBarPopupWindowLayout, int[] iArr, ReactedUsersListView reactedUsersListView, int i3) {
            int i4 = i2 + i3;
            sparseIntArray.put(i, i4);
            if (viewPager.getCurrentItem() == i) {
                actionBarPopupWindowLayout.getSwipeBack().setNewForegroundHeight(iArr[0], i4, true);
            }
        }

        @Override // androidx.viewpager.widget.PagerAdapter
        public void destroyItem(ViewGroup viewGroup, int i, Object obj) {
            viewGroup.removeView((View) obj);
        }
    }

    /* renamed from: org.telegram.ui.ChatActivity$103 */
    /* loaded from: classes3.dex */
    public class AnonymousClass103 implements ViewPager.OnPageChangeListener {
        final /* synthetic */ SparseIntArray val$cachedHeights;
        final /* synthetic */ int[] val$foregroundIndex;
        final /* synthetic */ ActionBarPopupWindow.ActionBarPopupWindowLayout val$popupLayout;
        final /* synthetic */ int val$size;
        final /* synthetic */ AtomicBoolean val$suppressTabsScroll;
        final /* synthetic */ HorizontalScrollView val$tabsScrollView;
        final /* synthetic */ LinearLayout val$tabsView;

        AnonymousClass103(ChatActivity chatActivity, AtomicBoolean atomicBoolean, LinearLayout linearLayout, int i, HorizontalScrollView horizontalScrollView, SparseIntArray sparseIntArray, ActionBarPopupWindow.ActionBarPopupWindowLayout actionBarPopupWindowLayout, int[] iArr) {
            this.val$suppressTabsScroll = atomicBoolean;
            this.val$tabsView = linearLayout;
            this.val$size = i;
            this.val$tabsScrollView = horizontalScrollView;
            this.val$cachedHeights = sparseIntArray;
            this.val$popupLayout = actionBarPopupWindowLayout;
            this.val$foregroundIndex = iArr;
        }

        @Override // androidx.viewpager.widget.ViewPager.OnPageChangeListener
        public void onPageScrolled(int i, float f, int i2) {
            float f2;
            if (!this.val$suppressTabsScroll.get()) {
                int i3 = 0;
                float f3 = -1.0f;
                float f4 = -1.0f;
                while (i3 < this.val$tabsView.getChildCount()) {
                    ReactionTabHolderView reactionTabHolderView = (ReactionTabHolderView) this.val$tabsView.getChildAt(i3);
                    if (i3 == i) {
                        f2 = 1.0f - f;
                    } else {
                        f2 = i3 == (i + 1) % this.val$size ? f : 0.0f;
                    }
                    reactionTabHolderView.setOutlineProgress(f2);
                    if (i3 == i) {
                        f3 = reactionTabHolderView.getX() - ((this.val$tabsScrollView.getWidth() - reactionTabHolderView.getWidth()) / 2.0f);
                    }
                    if (i3 == i + 1) {
                        f4 = reactionTabHolderView.getX() - ((this.val$tabsScrollView.getWidth() - reactionTabHolderView.getWidth()) / 2.0f);
                    }
                    i3++;
                }
                if (f3 != -1.0f && f4 != -1.0f) {
                    this.val$tabsScrollView.setScrollX((int) (f3 + ((f4 - f3) * f)));
                }
                this.val$popupLayout.getSwipeBack().setNewForegroundHeight(this.val$foregroundIndex[0], (int) ((this.val$cachedHeights.get(i, 0) * (1.0f - f)) + (this.val$cachedHeights.get(i + 1, 0) * f)), false);
            }
        }

        @Override // androidx.viewpager.widget.ViewPager.OnPageChangeListener
        public void onPageSelected(int i) {
            this.val$popupLayout.getSwipeBack().setNewForegroundHeight(this.val$foregroundIndex[0], this.val$cachedHeights.get(i), true);
        }

        @Override // androidx.viewpager.widget.ViewPager.OnPageChangeListener
        public void onPageScrollStateChanged(int i) {
            if (i == 0) {
                this.val$suppressTabsScroll.set(false);
            }
        }
    }

    public /* synthetic */ void lambda$createMenu$158(ReactedUsersListView reactedUsersListView, long j) {
        Bundle bundle = new Bundle();
        bundle.putLong("user_id", j);
        presentFragment(new ProfileActivity(bundle));
        closeMenu();
    }

    public static /* synthetic */ void lambda$createMenu$159(ActionBarPopupWindow.ActionBarPopupWindowLayout actionBarPopupWindowLayout, int[] iArr, ReactedUsersListView reactedUsersListView, int i) {
        actionBarPopupWindowLayout.getSwipeBack().setNewForegroundHeight(iArr[0], AndroidUtilities.dp(52.0f) + i, true);
    }

    public static /* synthetic */ void lambda$createMenu$160(ReactedUsersListView reactedUsersListView, ActionBarPopupWindow.ActionBarPopupWindowLayout actionBarPopupWindowLayout, int[] iArr, View view) {
        if (reactedUsersListView == null || reactedUsersListView.isLoaded) {
            actionBarPopupWindowLayout.getSwipeBack().openForeground(iArr[0]);
        }
    }

    /* renamed from: org.telegram.ui.ChatActivity$104 */
    /* loaded from: classes3.dex */
    public class AnonymousClass104 implements View.OnClickListener {
        final /* synthetic */ ActionBarPopupWindow.ActionBarPopupWindowLayout val$popupLayout;

        AnonymousClass104(ChatActivity chatActivity, ActionBarPopupWindow.ActionBarPopupWindowLayout actionBarPopupWindowLayout) {
            this.val$popupLayout = actionBarPopupWindowLayout;
        }

        @Override // android.view.View.OnClickListener
        public void onClick(View view) {
            this.val$popupLayout.getSwipeBack().closeForeground();
        }
    }

    /* renamed from: org.telegram.ui.ChatActivity$105 */
    /* loaded from: classes3.dex */
    public class AnonymousClass105 implements View.OnClickListener {
        final /* synthetic */ MessageSeenView val$finalMessageSeenView;
        final /* synthetic */ int[] val$foregroundIndex;
        final /* synthetic */ boolean val$isReactionsAvailable;
        final /* synthetic */ LinearLayout val$linearLayout;
        final /* synthetic */ RecyclerListView val$listView2;
        final /* synthetic */ ActionBarPopupWindow.ActionBarPopupWindowLayout val$popupLayout;

        AnonymousClass105(MessageSeenView messageSeenView, boolean z, RecyclerListView recyclerListView, LinearLayout linearLayout, ActionBarPopupWindow.ActionBarPopupWindowLayout actionBarPopupWindowLayout, int[] iArr) {
            ChatActivity.this = r1;
            this.val$finalMessageSeenView = messageSeenView;
            this.val$isReactionsAvailable = z;
            this.val$listView2 = recyclerListView;
            this.val$linearLayout = linearLayout;
            this.val$popupLayout = actionBarPopupWindowLayout;
            this.val$foregroundIndex = iArr;
        }

        @Override // android.view.View.OnClickListener
        public void onClick(View view) {
            if (ChatActivity.this.scrimPopupWindow == null || this.val$finalMessageSeenView.users.isEmpty()) {
                return;
            }
            if (this.val$finalMessageSeenView.users.size() == 1) {
                TLRPC$User tLRPC$User = this.val$finalMessageSeenView.users.get(0);
                if (tLRPC$User == null) {
                    return;
                }
                Bundle bundle = new Bundle();
                bundle.putLong("user_id", tLRPC$User.id);
                ChatActivity.this.presentFragment(new ProfileActivity(bundle));
                ChatActivity.this.closeMenu();
                return;
            }
            ChatActivity.this.contentView.getHeightWithKeyboard();
            int unused = ChatActivity.this.scrimPopupY;
            AndroidUtilities.dp(62.0f);
            if (this.val$isReactionsAvailable) {
                AndroidUtilities.dp(52.0f);
            }
            if (SharedConfig.messageSeenHintCount > 0 && ChatActivity.this.contentView.getKeyboardHeight() < AndroidUtilities.dp(20.0f)) {
                AndroidUtilities.dp(52.0f);
                Bulletin createErrorBulletin = BulletinFactory.of(ChatActivity.this).createErrorBulletin(AndroidUtilities.replaceTags(LocaleController.getString("MessageSeenTooltipMessage", 2131626703)));
                createErrorBulletin.tag = 1;
                createErrorBulletin.setDuration(4000);
                createErrorBulletin.show();
                SharedConfig.updateMessageSeenHintCount(SharedConfig.messageSeenHintCount - 1);
            } else if (ChatActivity.this.contentView.getKeyboardHeight() > AndroidUtilities.dp(20.0f)) {
                ChatActivity.this.contentView.getKeyboardHeight();
            }
            this.val$listView2.requestLayout();
            this.val$linearLayout.requestLayout();
            this.val$listView2.getAdapter().notifyDataSetChanged();
            this.val$popupLayout.getSwipeBack().openForeground(this.val$foregroundIndex[0]);
        }
    }

    public /* synthetic */ void lambda$createMenu$161(MessageSeenView messageSeenView, View view, int i) {
        TLRPC$User tLRPC$User = messageSeenView.users.get(i);
        if (tLRPC$User == null) {
            return;
        }
        Bundle bundle = new Bundle();
        bundle.putLong("user_id", tLRPC$User.id);
        presentFragment(new ProfileActivity(bundle));
    }

    /* renamed from: org.telegram.ui.ChatActivity$106 */
    /* loaded from: classes3.dex */
    public class AnonymousClass106 implements Runnable {
        boolean clicked;

        AnonymousClass106() {
            ChatActivity.this = r1;
        }

        @Override // java.lang.Runnable
        public void run() {
            if (this.clicked) {
                return;
            }
            this.clicked = true;
            ChatActivity.this.presentFragment(new NotificationsSettingsActivity());
        }
    }

    public /* synthetic */ void lambda$createMenu$162(MessageObject messageObject, View view) {
        if (getMediaDataController().saveToRingtones(messageObject.getDocument())) {
            getUndoView().showWithAction(this.dialog_id, UndoView.ACTION_RINGTONE_ADDED, (Runnable) new AnonymousClass106());
        }
        closeMenu(true);
    }

    public /* synthetic */ void lambda$createMenu$163(View view) {
        closeMenu();
    }

    public /* synthetic */ void lambda$createMenu$168(boolean[] zArr, boolean[] zArr2, ImageView imageView, ImageView imageView2) {
        if (zArr[0]) {
            return;
        }
        zArr[0] = true;
        long[] jArr = {-1};
        ChatActivity$$ExternalSyntheticLambda206 chatActivity$$ExternalSyntheticLambda206 = new ChatActivity$$ExternalSyntheticLambda206(jArr, zArr2, imageView, imageView2);
        TLRPC$TL_messages_rateTranscribedAudio tLRPC$TL_messages_rateTranscribedAudio = new TLRPC$TL_messages_rateTranscribedAudio();
        tLRPC$TL_messages_rateTranscribedAudio.msg_id = this.selectedObject.getId();
        tLRPC$TL_messages_rateTranscribedAudio.peer = getMessagesController().getInputPeer(this.selectedObject.messageOwner.peer_id);
        tLRPC$TL_messages_rateTranscribedAudio.transcription_id = this.selectedObject.messageOwner.voiceTranscriptionId;
        tLRPC$TL_messages_rateTranscribedAudio.good = zArr2[0];
        getConnectionsManager().sendRequest(tLRPC$TL_messages_rateTranscribedAudio, new ChatActivity$$ExternalSyntheticLambda224(this, chatActivity$$ExternalSyntheticLambda206, jArr));
        AndroidUtilities.runOnUIThread(chatActivity$$ExternalSyntheticLambda206, 150L);
    }

    public static /* synthetic */ void lambda$createMenu$165(long[] jArr, boolean[] zArr, ImageView imageView, ImageView imageView2) {
        jArr[0] = SystemClock.elapsedRealtime();
        if (!zArr[0]) {
            imageView = imageView2;
        }
        ValueAnimator ofFloat = ValueAnimator.ofFloat(0.0f, 1.0f);
        ofFloat.addUpdateListener(new ChatActivity$$ExternalSyntheticLambda18((CrossfadeDrawable) imageView.getDrawable()));
        ofFloat.setDuration(150L);
        ofFloat.setInterpolator(CubicBezierInterpolator.DEFAULT);
        ofFloat.start();
    }

    public static /* synthetic */ void lambda$createMenu$164(CrossfadeDrawable crossfadeDrawable, ValueAnimator valueAnimator) {
        crossfadeDrawable.setProgress(((Float) valueAnimator.getAnimatedValue()).floatValue());
    }

    public /* synthetic */ void lambda$createMenu$167(Runnable runnable, long[] jArr, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        AndroidUtilities.cancelRunOnUIThread(runnable);
        this.selectedObject.messageOwner.voiceTranscriptionRated = true;
        getMessagesStorage().updateMessageVoiceTranscriptionOpen(this.selectedObject.getDialogId(), this.selectedObject.getId(), this.selectedObject.messageOwner);
        ChatActivity$$ExternalSyntheticLambda155 chatActivity$$ExternalSyntheticLambda155 = new ChatActivity$$ExternalSyntheticLambda155(this);
        long j = 0;
        if (jArr[0] > 0) {
            j = Math.max(0L, 300 - (SystemClock.elapsedRealtime() - jArr[0]));
        }
        AndroidUtilities.runOnUIThread(chatActivity$$ExternalSyntheticLambda155, j);
    }

    public /* synthetic */ void lambda$createMenu$166() {
        closeMenu();
        BulletinFactory.of(this).createSimpleBulletin(2131558424, LocaleController.getString("TranscriptionReportSent", 2131628758)).show();
    }

    public static /* synthetic */ void lambda$createMenu$169(boolean[] zArr, Runnable runnable, View view) {
        zArr[0] = true;
        runnable.run();
    }

    public static /* synthetic */ void lambda$createMenu$170(boolean[] zArr, Runnable runnable, View view) {
        zArr[0] = false;
        runnable.run();
    }

    public /* synthetic */ void lambda$createMenu$171(View view) {
        if (this.contentView == null || getParentActivity() == null) {
            return;
        }
        BottomSheet.Builder builder = new BottomSheet.Builder(this.contentView.getContext());
        builder.setCustomView(new SponsoredMessageInfoView(getParentActivity(), this.themeDelegate));
        builder.show();
    }

    public /* synthetic */ void lambda$createMenu$172(int i, ArrayList arrayList, View view) {
        if (this.selectedObject == null || i >= arrayList.size()) {
            return;
        }
        processSelectedOption(((Integer) arrayList.get(i)).intValue());
    }

    public /* synthetic */ boolean lambda$createMenu$173(View view, URLSpan uRLSpan) {
        didPressMessageUrl(uRLSpan, false, this.selectedObject, view instanceof ChatMessageCell ? (ChatMessageCell) view : null);
        return true;
    }

    public /* synthetic */ void lambda$createMenu$174(String[] strArr, String str, boolean z, ActionBarMenuSubItem actionBarMenuSubItem, AtomicBoolean atomicBoolean, AtomicReference atomicReference, String str2) {
        TLRPC$Chat tLRPC$Chat;
        strArr[0] = str2;
        if (strArr[0] != null && ((!strArr[0].equals(str) || strArr[0].equals("und")) && ((z && !RestrictedLanguagesSelectActivity.getRestrictedLanguages().contains(strArr[0])) || ((tLRPC$Chat = this.currentChat) != null && ((tLRPC$Chat.has_link || tLRPC$Chat.username != null) && ("uk".equals(strArr[0]) || "ru".equals(strArr[0]))))))) {
            actionBarMenuSubItem.setVisibility(0);
        }
        atomicBoolean.set(false);
        if (atomicReference.get() != null) {
            ((Runnable) atomicReference.get()).run();
            atomicReference.set(null);
        }
    }

    public static /* synthetic */ void lambda$createMenu$175(AtomicBoolean atomicBoolean, AtomicReference atomicReference, Exception exc) {
        FileLog.e("mlkit: failed to detect language in message");
        atomicBoolean.set(false);
        if (atomicReference.get() != null) {
            ((Runnable) atomicReference.get()).run();
            atomicReference.set(null);
        }
    }

    public /* synthetic */ void lambda$createMenu$177(int i, ArrayList arrayList, TLRPC$InputPeer tLRPC$InputPeer, int i2, String[] strArr, String str, CharSequence charSequence, boolean z, TranslateAlert.OnLinkPress onLinkPress, View view) {
        if (this.selectedObject == null || i >= arrayList.size() || getParentActivity() == null) {
            return;
        }
        TranslateAlert.showAlert(getParentActivity(), this, this.currentAccount, tLRPC$InputPeer, i2, strArr[0], str, charSequence, z, onLinkPress, new ChatActivity$$ExternalSyntheticLambda118(this)).showDim(false);
        closeMenu(false);
    }

    public /* synthetic */ void lambda$createMenu$176() {
        dimBehindView(false);
    }

    public static /* synthetic */ void lambda$createMenu$178(AtomicReference atomicReference) {
        if (atomicReference.get() != null) {
            ((Runnable) atomicReference.getAndSet(null)).run();
        }
    }

    public /* synthetic */ void lambda$createMenu$180(int i, ArrayList arrayList, TLRPC$InputPeer tLRPC$InputPeer, int i2, String str, CharSequence charSequence, boolean z, TranslateAlert.OnLinkPress onLinkPress, View view) {
        if (this.selectedObject == null || i >= arrayList.size() || getParentActivity() == null) {
            return;
        }
        TranslateAlert.showAlert(getParentActivity(), this, this.currentAccount, tLRPC$InputPeer, i2, "und", str, charSequence, z, onLinkPress, new ChatActivity$$ExternalSyntheticLambda135(this)).showDim(false);
        closeMenu(false);
    }

    public /* synthetic */ void lambda$createMenu$179() {
        dimBehindView(false);
    }

    /* renamed from: org.telegram.ui.ChatActivity$107 */
    /* loaded from: classes3.dex */
    public class AnonymousClass107 extends ChatScrimPopupContainerLayout {
        /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
        AnonymousClass107(Context context) {
            super(context);
            ChatActivity.this = r1;
        }

        @Override // android.view.ViewGroup, android.view.View
        public boolean dispatchKeyEvent(KeyEvent keyEvent) {
            if (keyEvent.getKeyCode() == 4 && keyEvent.getRepeatCount() == 0) {
                ChatActivity.this.closeMenu();
            }
            return super.dispatchKeyEvent(keyEvent);
        }

        @Override // android.view.ViewGroup, android.view.View
        public boolean dispatchTouchEvent(MotionEvent motionEvent) {
            boolean dispatchTouchEvent = super.dispatchTouchEvent(motionEvent);
            if (motionEvent.getAction() == 0 && !dispatchTouchEvent) {
                ChatActivity.this.closeMenu();
            }
            return dispatchTouchEvent;
        }
    }

    /* renamed from: org.telegram.ui.ChatActivity$108 */
    /* loaded from: classes3.dex */
    public class AnonymousClass108 implements View.OnTouchListener {
        private int[] pos = new int[2];
        final /* synthetic */ Rect val$rect;

        AnonymousClass108(Rect rect) {
            ChatActivity.this = r1;
            this.val$rect = rect;
        }

        @Override // android.view.View.OnTouchListener
        public boolean onTouch(View view, MotionEvent motionEvent) {
            if (motionEvent.getActionMasked() == 0) {
                ActionBarPopupWindow actionBarPopupWindow = ChatActivity.this.scrimPopupWindow;
                if (actionBarPopupWindow != null && actionBarPopupWindow.isShowing()) {
                    View contentView = ChatActivity.this.scrimPopupWindow.getContentView();
                    contentView.getLocationInWindow(this.pos);
                    Rect rect = this.val$rect;
                    int[] iArr = this.pos;
                    rect.set(iArr[0], iArr[1], iArr[0] + contentView.getMeasuredWidth(), this.pos[1] + contentView.getMeasuredHeight());
                    if (!this.val$rect.contains((int) motionEvent.getX(), (int) motionEvent.getY())) {
                        ChatActivity.this.closeMenu();
                    }
                }
            } else if (motionEvent.getActionMasked() == 4) {
                ChatActivity.this.closeMenu();
            }
            return false;
        }
    }

    /* renamed from: org.telegram.ui.ChatActivity$109 */
    /* loaded from: classes3.dex */
    public class AnonymousClass109 implements ReactionsContainerLayout.ReactionsContainerDelegate {
        final /* synthetic */ ReactionsContainerLayout val$finalReactionsLayout;
        final /* synthetic */ MessageObject val$primaryMessage;

        AnonymousClass109(MessageObject messageObject, ReactionsContainerLayout reactionsContainerLayout) {
            ChatActivity.this = r1;
            this.val$primaryMessage = messageObject;
            this.val$finalReactionsLayout = reactionsContainerLayout;
        }

        @Override // org.telegram.ui.Components.ReactionsContainerLayout.ReactionsContainerDelegate
        public void onReactionClicked(View view, TLRPC$TL_availableReaction tLRPC$TL_availableReaction, boolean z) {
            ChatActivity.this.selectReaction(this.val$primaryMessage, this.val$finalReactionsLayout, 0.0f, 0.0f, tLRPC$TL_availableReaction, false, z);
        }
    }

    /* renamed from: org.telegram.ui.ChatActivity$110 */
    /* loaded from: classes3.dex */
    public class AnonymousClass110 implements PopupSwipeBackLayout.OnSwipeBackProgressListener {
        boolean isEnter = true;
        final /* synthetic */ ReactionsContainerLayout val$finalReactionsLayout;

        AnonymousClass110(ChatActivity chatActivity, ReactionsContainerLayout reactionsContainerLayout) {
            this.val$finalReactionsLayout = reactionsContainerLayout;
        }

        @Override // org.telegram.ui.Components.PopupSwipeBackLayout.OnSwipeBackProgressListener
        public void onSwipeBackProgress(PopupSwipeBackLayout popupSwipeBackLayout, float f, float f2) {
            if (f == 0.0f && !this.isEnter) {
                this.val$finalReactionsLayout.startEnterAnimation();
                this.isEnter = true;
            } else if (f != 1.0f || !this.isEnter) {
            } else {
                this.val$finalReactionsLayout.setAlpha(1.0f - f2);
                if (f2 != 1.0f) {
                    return;
                }
                this.isEnter = false;
            }
        }
    }

    /* renamed from: org.telegram.ui.ChatActivity$111 */
    /* loaded from: classes3.dex */
    public class AnonymousClass111 extends EmojiPacksAlert {
        /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
        AnonymousClass111(BaseFragment baseFragment, Context context, Theme.ResourcesProvider resourcesProvider, ArrayList arrayList) {
            super(baseFragment, context, resourcesProvider, arrayList);
            ChatActivity.this = r1;
        }

        @Override // org.telegram.ui.Components.EmojiPacksAlert, org.telegram.ui.ActionBar.BottomSheet, android.app.Dialog, android.content.DialogInterface
        public void dismiss() {
            super.dismiss();
            ChatActivity.this.dimBehindView(false);
        }
    }

    public /* synthetic */ void lambda$createMenu$181(ArrayList arrayList, View view) {
        AnonymousClass111 anonymousClass111 = new AnonymousClass111(this, getParentActivity(), this.themeDelegate, arrayList);
        anonymousClass111.setCalcMandatoryInsets(isKeyboardVisible());
        anonymousClass111.setDimBehind(false);
        closeMenu(false);
        showDialog(anonymousClass111);
    }

    /* renamed from: org.telegram.ui.ChatActivity$112 */
    /* loaded from: classes3.dex */
    public class AnonymousClass112 extends ActionBarPopupWindow {
        /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
        AnonymousClass112(View view, int i, int i2) {
            super(view, i, i2);
            ChatActivity.this = r1;
        }

        @Override // org.telegram.ui.ActionBar.ActionBarPopupWindow, android.widget.PopupWindow
        public void dismiss() {
            super.dismiss();
            ChatActivity chatActivity = ChatActivity.this;
            if (chatActivity.scrimPopupWindow != this) {
                return;
            }
            chatActivity.scrimPopupWindow = null;
            chatActivity.menuDeleteItem = null;
            ChatActivity.this.scrimPopupWindowItems = null;
            ChatActivity.this.chatLayoutManager.setCanScrollVertically(true);
            if (!ChatActivity.this.scrimPopupWindowHideDimOnDismiss) {
                ChatActivity.this.scrimPopupWindowHideDimOnDismiss = true;
            } else {
                ChatActivity.this.dimBehindView(false);
            }
            ChatActivityEnterView chatActivityEnterView = ChatActivity.this.chatActivityEnterView;
            if (chatActivityEnterView == null) {
                return;
            }
            chatActivityEnterView.getEditField().setAllowDrawCursor(true);
        }
    }

    public /* synthetic */ void lambda$createMenu$183(int i, int i2, boolean z, ReactionsContainerLayout reactionsContainerLayout) {
        ActionBarPopupWindow actionBarPopupWindow = this.scrimPopupWindow;
        if (actionBarPopupWindow == null || this.fragmentView == null || actionBarPopupWindow.isShowing()) {
            return;
        }
        this.scrimPopupWindow.showAtLocation(this.chatListView, 51, i, i2);
        if (z && reactionsContainerLayout != null) {
            reactionsContainerLayout.startEnterAnimation();
        }
        AndroidUtilities.runOnUIThread(new ChatActivity$$ExternalSyntheticLambda139(this), 420L);
    }

    public /* synthetic */ void lambda$createMenu$182() {
        ActionBarMenuSubItem[] actionBarMenuSubItemArr = this.scrimPopupWindowItems;
        if (actionBarMenuSubItemArr == null || actionBarMenuSubItemArr.length <= 0 || actionBarMenuSubItemArr[0] == null) {
            return;
        }
        actionBarMenuSubItemArr[0].requestFocus();
        this.scrimPopupWindowItems[0].performAccessibilityAction(64, null);
        this.scrimPopupWindowItems[0].sendAccessibilityEvent(8);
    }

    public void closeMenu() {
        closeMenu(true);
    }

    private void closeMenu(boolean z) {
        this.scrimPopupWindowHideDimOnDismiss = z;
        ActionBarPopupWindow actionBarPopupWindow = this.scrimPopupWindow;
        if (actionBarPopupWindow != null) {
            actionBarPopupWindow.dismiss();
        }
        if (!z) {
            ValueAnimator valueAnimator = this.scrimViewAlphaAnimator;
            if (valueAnimator != null) {
                valueAnimator.removeAllListeners();
                this.scrimViewAlphaAnimator.cancel();
            }
            ValueAnimator ofFloat = ValueAnimator.ofFloat(1.0f, 0.0f);
            this.scrimViewAlphaAnimator = ofFloat;
            ofFloat.addUpdateListener(new ChatActivity$$ExternalSyntheticLambda11(this));
            this.scrimViewAlphaAnimator.setDuration(150L);
            this.scrimViewAlphaAnimator.start();
        }
    }

    public /* synthetic */ void lambda$closeMenu$184(ValueAnimator valueAnimator) {
        this.scrimViewAlpha = ((Float) valueAnimator.getAnimatedValue()).floatValue();
        SizeNotifierFrameLayout sizeNotifierFrameLayout = this.contentView;
        if (sizeNotifierFrameLayout != null) {
            sizeNotifierFrameLayout.invalidate();
            this.chatListView.invalidate();
        }
    }

    public void selectReaction(MessageObject messageObject, ReactionsContainerLayout reactionsContainerLayout, float f, float f2, TLRPC$TL_availableReaction tLRPC$TL_availableReaction, boolean z, boolean z2) {
        int i;
        if (isInScheduleMode()) {
            return;
        }
        ReactionsEffectOverlay.removeCurrent(false);
        boolean selectReaction = messageObject.selectReaction(tLRPC$TL_availableReaction.reaction, z2, z);
        int id = messageObject.getId();
        if (this.groupedMessagesMap.get(messageObject.getGroupId()) != null) {
            MessageObject findMessageWithFlags = this.groupedMessagesMap.get(messageObject.getGroupId()).findMessageWithFlags(messageObject.shouldDrawReactionsInLayout() ? 9 : 10);
            if (findMessageWithFlags != null) {
                id = findMessageWithFlags.getId();
            }
        }
        int i2 = id;
        if (!selectReaction || z) {
            i = 1;
        } else {
            i = 1;
            ReactionsEffectOverlay.show(this, reactionsContainerLayout, findMessageCell(i2, true), f, f2, tLRPC$TL_availableReaction.reaction, this.currentAccount, reactionsContainerLayout != null ? z2 ? 0 : 2 : 1);
        }
        if (selectReaction) {
            Object[] objArr = new Object[i];
            objArr[0] = tLRPC$TL_availableReaction.reaction;
            AndroidUtilities.makeAccessibilityAnnouncement(LocaleController.formatString("AccDescrYouReactedWith", 2131624114, objArr));
        }
        SendMessagesHelper sendMessagesHelper = getSendMessagesHelper();
        String str = selectReaction ? tLRPC$TL_availableReaction.reaction : null;
        AnonymousClass113 anonymousClass113 = new AnonymousClass113(z, i2, selectReaction, reactionsContainerLayout, f, f2, tLRPC$TL_availableReaction, messageObject);
        this.updateReactionRunnable = anonymousClass113;
        sendMessagesHelper.sendReaction(messageObject, str, z2, this, anonymousClass113);
        if (z) {
            updateMessageAnimated(messageObject, true);
            this.updateReactionRunnable.run();
        }
        AndroidUtilities.runOnUIThread(this.updateReactionRunnable, 50L);
    }

    /* renamed from: org.telegram.ui.ChatActivity$113 */
    /* loaded from: classes3.dex */
    public class AnonymousClass113 implements Runnable {
        final /* synthetic */ boolean val$added;
        final /* synthetic */ int val$finalMessageIdForCell;
        final /* synthetic */ boolean val$fromDoubleTap;
        final /* synthetic */ MessageObject val$primaryMessage;
        final /* synthetic */ TLRPC$TL_availableReaction val$reaction;
        final /* synthetic */ ReactionsContainerLayout val$reactionsLayout;
        final /* synthetic */ float val$x;
        final /* synthetic */ float val$y;

        AnonymousClass113(boolean z, int i, boolean z2, ReactionsContainerLayout reactionsContainerLayout, float f, float f2, TLRPC$TL_availableReaction tLRPC$TL_availableReaction, MessageObject messageObject) {
            ChatActivity.this = r1;
            this.val$fromDoubleTap = z;
            this.val$finalMessageIdForCell = i;
            this.val$added = z2;
            this.val$reactionsLayout = reactionsContainerLayout;
            this.val$x = f;
            this.val$y = f2;
            this.val$reaction = tLRPC$TL_availableReaction;
            this.val$primaryMessage = messageObject;
        }

        @Override // java.lang.Runnable
        public void run() {
            ChatActivity chatActivity = ChatActivity.this;
            if (chatActivity.updateReactionRunnable != null) {
                chatActivity.updateReactionRunnable = null;
                if (!this.val$fromDoubleTap) {
                    chatActivity.updateMessageAnimated(this.val$primaryMessage, true);
                    ReactionsEffectOverlay.startAnimation();
                } else {
                    chatActivity.lambda$openDiscussionMessageChat$228(new ChatActivity$113$$ExternalSyntheticLambda1(this, this.val$finalMessageIdForCell, this.val$added, this.val$reactionsLayout, this.val$x, this.val$y, this.val$reaction));
                }
                ChatActivity.this.closeMenu();
            }
        }

        public /* synthetic */ void lambda$run$1(int i, boolean z, ReactionsContainerLayout reactionsContainerLayout, float f, float f2, TLRPC$TL_availableReaction tLRPC$TL_availableReaction) {
            AndroidUtilities.runOnUIThread(new ChatActivity$113$$ExternalSyntheticLambda0(this, i, z, reactionsContainerLayout, f, f2, tLRPC$TL_availableReaction), 50L);
        }

        public /* synthetic */ void lambda$run$0(int i, boolean z, ReactionsContainerLayout reactionsContainerLayout, float f, float f2, TLRPC$TL_availableReaction tLRPC$TL_availableReaction) {
            ChatMessageCell findMessageCell = ChatActivity.this.findMessageCell(i, true);
            if (z) {
                ChatActivity chatActivity = ChatActivity.this;
                ReactionsEffectOverlay.show(chatActivity, reactionsContainerLayout, findMessageCell, f, f2, tLRPC$TL_availableReaction.reaction, ((BaseFragment) chatActivity).currentAccount, 1);
                ReactionsEffectOverlay.startAnimation();
            }
        }
    }

    @SuppressLint({"NotifyDataSetChanged"})
    public void updateMessageAnimated(MessageObject messageObject, boolean z) {
        if (this.chatAdapter == null) {
            return;
        }
        getNotificationCenter().doOnIdle(new ChatActivity$$ExternalSyntheticLambda178(this, messageObject, z));
    }

    public /* synthetic */ void lambda$updateMessageAnimated$185(MessageObject messageObject, boolean z) {
        if (this.fragmentView == null) {
            return;
        }
        MessageObject.GroupedMessages groupedMessages = this.groupedMessagesMap.get(messageObject.getGroupId());
        if (groupedMessages != null) {
            ChatListItemAnimator chatListItemAnimator = this.chatListItemAnimator;
            if (chatListItemAnimator != null) {
                chatListItemAnimator.groupWillChanged(groupedMessages);
            }
            for (int i = 0; i < groupedMessages.messages.size(); i++) {
                groupedMessages.messages.get(i).forceUpdate = true;
                if (z) {
                    groupedMessages.messages.get(i).reactionsChanged = true;
                }
            }
            this.chatAdapter.notifyDataSetChanged(true);
            return;
        }
        int indexOf = this.messages.indexOf(messageObject);
        if (indexOf < 0) {
            return;
        }
        ChatActivityAdapter chatActivityAdapter = this.chatAdapter;
        chatActivityAdapter.notifyItemChanged(chatActivityAdapter.messagesStartRow + indexOf);
    }

    public ChatMessageCell findMessageCell(int i, boolean z) {
        RecyclerListView recyclerListView = this.chatListView;
        if (recyclerListView == null) {
            return null;
        }
        int childCount = recyclerListView.getChildCount();
        for (int i2 = 0; i2 < childCount; i2++) {
            View childAt = this.chatListView.getChildAt(i2);
            if ((this.chatListView.getChildAt(i2) instanceof ChatMessageCell) && ((ChatMessageCell) this.chatListView.getChildAt(i2)).getMessageObject().getId() == i) {
                if (z) {
                    if (childAt.getY() + childAt.getMeasuredHeight() < (this.chatListViewPaddingTop - this.chatListViewPaddingVisibleOffset) - AndroidUtilities.dp(4.0f) || childAt.getY() > this.chatListView.getMeasuredHeight() - this.blurredViewBottomOffset) {
                        return null;
                    }
                }
                return (ChatMessageCell) this.chatListView.getChildAt(i2);
            }
        }
        return null;
    }

    public void startEditingMessageObject(MessageObject messageObject) {
        if (messageObject == null || getParentActivity() == null) {
            return;
        }
        if (this.searchItem != null && this.actionBar.isSearchFieldVisible()) {
            this.actionBar.closeSearchField();
            this.chatActivityEnterView.setFieldFocused();
        }
        this.mentionContainer.getAdapter().setNeedBotContext(false);
        this.chatActivityEnterView.setVisibility(0);
        showFieldPanelForEdit(true, messageObject);
        updateBottomOverlay();
        checkEditTimer();
        this.chatActivityEnterView.setAllowStickersAndGifs(true, false, false, true);
        updatePinnedMessageView(true);
        updateVisibleRows();
        if (!messageObject.scheduled) {
            TLRPC$TL_messages_getMessageEditData tLRPC$TL_messages_getMessageEditData = new TLRPC$TL_messages_getMessageEditData();
            tLRPC$TL_messages_getMessageEditData.peer = getMessagesController().getInputPeer(this.dialog_id);
            tLRPC$TL_messages_getMessageEditData.id = messageObject.getId();
            this.editingMessageObjectReqId = getConnectionsManager().sendRequest(tLRPC$TL_messages_getMessageEditData, new ChatActivity$$ExternalSyntheticLambda221(this));
            return;
        }
        this.chatActivityEnterView.showEditDoneProgress(false, true);
    }

    public /* synthetic */ void lambda$startEditingMessageObject$187(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        AndroidUtilities.runOnUIThread(new ChatActivity$$ExternalSyntheticLambda187(this, tLObject));
    }

    public /* synthetic */ void lambda$startEditingMessageObject$186(TLObject tLObject) {
        this.editingMessageObjectReqId = 0;
        if (tLObject != null || getParentActivity() == null) {
            return;
        }
        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity(), this.themeDelegate);
        builder.setTitle(LocaleController.getString("AppName", 2131624384));
        builder.setMessage(LocaleController.getString("EditMessageError", 2131625596));
        builder.setPositiveButton(LocaleController.getString("OK", 2131627127), null);
        showDialog(builder.create());
        ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        if (chatActivityEnterView == null) {
            return;
        }
        chatActivityEnterView.setEditingMessageObject(null, false);
        hideFieldPanel(true);
    }

    public void restartSticker(ChatMessageCell chatMessageCell) {
        MessagesController.EmojiSound emojiSound;
        MessageObject messageObject = chatMessageCell.getMessageObject();
        TLRPC$Document document = messageObject.getDocument();
        boolean isAnimatedEmoji = messageObject.isAnimatedEmoji();
        boolean z = true;
        if (!isAnimatedEmoji) {
            if (this.currentEncryptedChat != null && !messageObject.isOut()) {
                z = false;
            }
            if (!MessageObject.isAnimatedStickerDocument(document, z) || SharedConfig.loopStickers) {
                return;
            }
        }
        RLottieDrawable lottieAnimation = chatMessageCell.getPhotoImage().getLottieAnimation();
        if (lottieAnimation != null) {
            if (isAnimatedEmoji) {
                String stickerEmoji = messageObject.getStickerEmoji();
                if (EmojiData.isHeartEmoji(stickerEmoji)) {
                    HashMap<Integer, Integer> hashMap = new HashMap<>();
                    hashMap.put(1, 1);
                    hashMap.put(13, 0);
                    hashMap.put(59, 1);
                    hashMap.put(71, 0);
                    hashMap.put(128, 1);
                    hashMap.put(140, 0);
                    lottieAnimation.setVibrationPattern(hashMap);
                } else if (EmojiData.isPeachEmoji(stickerEmoji)) {
                    HashMap<Integer, Integer> hashMap2 = new HashMap<>();
                    hashMap2.put(34, 1);
                    lottieAnimation.setVibrationPattern(hashMap2);
                } else if (EmojiData.isCofinEmoji(stickerEmoji)) {
                    HashMap<Integer, Integer> hashMap3 = new HashMap<>();
                    hashMap3.put(24, 0);
                    hashMap3.put(36, 0);
                    lottieAnimation.setVibrationPattern(hashMap3);
                }
                if (!lottieAnimation.isRunning() && stickerEmoji != null && (emojiSound = getMessagesController().emojiSounds.get(stickerEmoji.replace("️", ""))) != null) {
                    getMediaController().playEmojiSound(getAccountInstance(), stickerEmoji, emojiSound, false);
                }
            }
            lottieAnimation.restart();
        }
    }

    public CharSequence getMessageContent(MessageObject messageObject, long j, boolean z) {
        TLRPC$Chat chat;
        SpannableStringBuilder spannableStringBuilder = new SpannableStringBuilder();
        if (z) {
            long fromChatId = messageObject.getFromChatId();
            if (j != fromChatId) {
                if (fromChatId > 0) {
                    TLRPC$User user = getMessagesController().getUser(Long.valueOf(fromChatId));
                    if (user != null) {
                        spannableStringBuilder.append((CharSequence) ContactsController.formatName(user.first_name, user.last_name)).append((CharSequence) ":\n");
                    }
                } else if (fromChatId < 0 && (chat = getMessagesController().getChat(Long.valueOf(-fromChatId))) != null) {
                    spannableStringBuilder.append((CharSequence) chat.title).append((CharSequence) ":\n");
                }
            }
        }
        String restrictionReason = MessagesController.getRestrictionReason(messageObject.messageOwner.restriction_reason);
        if (!TextUtils.isEmpty(restrictionReason)) {
            spannableStringBuilder.append((CharSequence) restrictionReason);
        } else {
            CharSequence charSequence = messageObject.caption;
            if (charSequence != null) {
                spannableStringBuilder.append(charSequence);
            } else {
                spannableStringBuilder.append(messageObject.messageText);
            }
        }
        return spannableStringBuilder;
    }

    public void unpinMessage(MessageObject messageObject) {
        if (messageObject == null) {
            return;
        }
        Bulletin bulletin = this.pinBulletin;
        if (bulletin != null) {
            bulletin.hide(false, 0L);
        }
        ArrayList arrayList = new ArrayList();
        arrayList.add(this.selectedObject);
        ArrayList arrayList2 = new ArrayList();
        arrayList2.add(Integer.valueOf(messageObject.getId()));
        int i = this.totalPinnedMessagesCount;
        getNotificationCenter().postNotificationName(NotificationCenter.didLoadPinnedMessages, Long.valueOf(this.dialog_id), arrayList2, Boolean.FALSE, 0, 0, 0, Integer.valueOf(this.totalPinnedMessagesCount - 1), Boolean.valueOf(this.pinnedEndReached));
        this.pinBulletin = BulletinFactory.createUnpinMessageBulletin(this, new ChatActivity$$ExternalSyntheticLambda173(this, arrayList2, arrayList, i), new ChatActivity$$ExternalSyntheticLambda175(this, messageObject), this.themeDelegate).show();
    }

    public /* synthetic */ void lambda$unpinMessage$188(ArrayList arrayList, ArrayList arrayList2, int i) {
        getNotificationCenter().postNotificationName(NotificationCenter.didLoadPinnedMessages, Long.valueOf(this.dialog_id), arrayList, Boolean.TRUE, arrayList2, 0, 0, Integer.valueOf(i), Boolean.valueOf(this.pinnedEndReached));
        this.pinBulletin = null;
    }

    public /* synthetic */ void lambda$unpinMessage$189(MessageObject messageObject) {
        getMessagesController().pinMessage(this.currentChat, this.currentUser, messageObject.getId(), true, false, false);
        this.pinBulletin = null;
    }

    public void openReportChat(int i) {
        Bundle bundle = new Bundle();
        if (DialogObject.isUserDialog(this.dialog_id)) {
            bundle.putLong("user_id", this.dialog_id);
        } else {
            bundle.putLong("chat_id", -this.dialog_id);
        }
        bundle.putInt("report", i);
        ChatActivity chatActivity = new ChatActivity(bundle);
        presentFragment(chatActivity);
        chatActivity.chatActivityDelegate = new AnonymousClass114();
    }

    /* renamed from: org.telegram.ui.ChatActivity$114 */
    /* loaded from: classes3.dex */
    public class AnonymousClass114 implements ChatActivityDelegate {
        @Override // org.telegram.ui.ChatActivity.ChatActivityDelegate
        public /* synthetic */ void onUnpin(boolean z, boolean z2) {
            ChatActivityDelegate.CC.$default$onUnpin(this, z, z2);
        }

        @Override // org.telegram.ui.ChatActivity.ChatActivityDelegate
        public /* synthetic */ void openReplyMessage(int i) {
            ChatActivityDelegate.CC.$default$openReplyMessage(this, i);
        }

        @Override // org.telegram.ui.ChatActivity.ChatActivityDelegate
        public /* synthetic */ void openSearch(String str) {
            ChatActivityDelegate.CC.$default$openSearch(this, str);
        }

        AnonymousClass114() {
            ChatActivity.this = r1;
        }

        @Override // org.telegram.ui.ChatActivity.ChatActivityDelegate
        public void onReport() {
            ChatActivity.this.undoView.showWithAction(0L, 74, (Runnable) null);
        }
    }

    private void saveMessageToGallery(MessageObject messageObject) {
        String str = messageObject.messageOwner.attachPath;
        if (!TextUtils.isEmpty(str) && !new File(str).exists()) {
            str = null;
        }
        if (TextUtils.isEmpty(str)) {
            str = FileLoader.getInstance(this.currentAccount).getPathToMessage(messageObject.messageOwner).toString();
        }
        MediaController.saveFile(str, getParentActivity(), messageObject.isVideo() ? 1 : 0, null, null);
    }

    /* JADX WARN: Code restructure failed: missing block: B:234:0x0740, code lost:
        if (r0.exists() != false) goto L236;
     */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void processSelectedOption(int i) {
        MessageObject messageObject;
        BulletinFactory.FileType fileType;
        File file;
        TLRPC$Chat tLRPC$Chat;
        ArrayList arrayList;
        int i2;
        boolean[] zArr;
        TLRPC$Chat tLRPC$Chat2;
        MessageObject messageObject2;
        if (this.selectedObject == null || getParentActivity() == null) {
            return;
        }
        boolean z = false;
        if (i != 31) {
            if (i != 100) {
                if (i != 102) {
                    String str = "";
                    int i3 = 2;
                    switch (i) {
                        case 0:
                            if (this.selectedObjectGroup != null) {
                                boolean z2 = true;
                                for (int i4 = 0; i4 < this.selectedObjectGroup.messages.size(); i4++) {
                                    if (!getSendMessagesHelper().retrySendMessage(this.selectedObjectGroup.messages.get(i4), false)) {
                                        z2 = false;
                                    }
                                }
                                if (z2 && this.chatMode == 0) {
                                    moveScrollToLastMessage(false);
                                    break;
                                }
                            } else if (getSendMessagesHelper().retrySendMessage(this.selectedObject, false)) {
                                updateVisibleRows();
                                if (this.chatMode == 0) {
                                    moveScrollToLastMessage(false);
                                    break;
                                }
                            }
                            break;
                        case 1:
                            if (getParentActivity() == null) {
                                this.selectedObject = null;
                                this.selectedObjectToEditCaption = null;
                                this.selectedObjectGroup = null;
                                return;
                            }
                            createDeleteMessagesAlert(this.selectedObject, this.selectedObjectGroup, 1, true);
                            z = true;
                            break;
                        case 2:
                            this.forwardingMessage = this.selectedObject;
                            this.forwardingMessageGroup = this.selectedObjectGroup;
                            Bundle bundle = new Bundle();
                            bundle.putBoolean("onlySelect", true);
                            bundle.putInt("dialogsType", 3);
                            MessageObject.GroupedMessages groupedMessages = this.forwardingMessageGroup;
                            bundle.putInt("messagesCount", groupedMessages == null ? 1 : groupedMessages.messages.size());
                            if (!this.forwardingMessage.isPoll()) {
                                i3 = 0;
                            } else if (!this.forwardingMessage.isPublicPoll()) {
                                i3 = 1;
                            }
                            bundle.putInt("hasPoll", i3);
                            bundle.putBoolean("hasInvoice", this.forwardingMessage.isInvoice());
                            DialogsActivity dialogsActivity = new DialogsActivity(bundle);
                            dialogsActivity.setDelegate(this);
                            presentFragment(dialogsActivity);
                            break;
                        case 3:
                            if (this.selectedObject.isDice()) {
                                AndroidUtilities.addToClipboard(this.selectedObject.getDiceEmoji());
                            } else {
                                CharSequence messageCaption = getMessageCaption(this.selectedObject, this.selectedObjectGroup);
                                if (messageCaption != null) {
                                    AndroidUtilities.addToClipboard(messageCaption);
                                } else {
                                    AndroidUtilities.addToClipboard(getMessageContent(this.selectedObject, 0L, false));
                                }
                            }
                            this.undoView.showWithAction(0L, 52, (Runnable) null);
                            break;
                        case 4:
                            int i5 = Build.VERSION.SDK_INT;
                            if (i5 >= 23 && ((i5 <= 28 || BuildVars.NO_SCOPED_STORAGE) && getParentActivity().checkSelfPermission("android.permission.WRITE_EXTERNAL_STORAGE") != 0)) {
                                getParentActivity().requestPermissions(new String[]{"android.permission.WRITE_EXTERNAL_STORAGE"}, 4);
                                this.selectedObject = null;
                                this.selectedObjectGroup = null;
                                this.selectedObjectToEditCaption = null;
                                return;
                            }
                            MessageObject.GroupedMessages groupedMessages2 = this.selectedObjectGroup;
                            if (groupedMessages2 != null) {
                                int size = groupedMessages2.messages.size();
                                boolean z3 = true;
                                boolean z4 = true;
                                for (int i6 = 0; i6 < size; i6++) {
                                    MessageObject messageObject3 = this.selectedObjectGroup.messages.get(i6);
                                    saveMessageToGallery(messageObject3);
                                    z3 &= messageObject3.isPhoto();
                                    z4 &= messageObject3.isVideo();
                                }
                                if (z3) {
                                    fileType = BulletinFactory.FileType.PHOTOS;
                                } else if (z4) {
                                    fileType = BulletinFactory.FileType.VIDEOS;
                                } else {
                                    fileType = BulletinFactory.FileType.MEDIA;
                                }
                                BulletinFactory.of(this).createDownloadBulletin(fileType, size, this.themeDelegate).show();
                                break;
                            } else {
                                saveMessageToGallery(this.selectedObject);
                                if (getParentActivity() != null) {
                                    BulletinFactory.createSaveToGalleryBulletin(this, this.selectedObject.isVideo(), this.themeDelegate).show();
                                    break;
                                }
                            }
                            break;
                        case 5:
                            if (!TextUtils.isEmpty(this.selectedObject.messageOwner.attachPath)) {
                                file = new File(this.selectedObject.messageOwner.attachPath);
                                break;
                            }
                            file = null;
                            if (file == null) {
                                File pathToMessage = getFileLoader().getPathToMessage(this.selectedObject.messageOwner);
                                if (pathToMessage.exists()) {
                                    file = pathToMessage;
                                }
                            }
                            if (file != null) {
                                if (file.getName().toLowerCase().endsWith("attheme")) {
                                    Theme.ThemeInfo applyThemeFile = Theme.applyThemeFile(file, this.selectedObject.getDocumentName(), null, true);
                                    if (applyThemeFile != null) {
                                        presentFragment(new ThemePreviewActivity(applyThemeFile));
                                        break;
                                    } else {
                                        this.scrollToPositionOnRecreate = -1;
                                        if (getParentActivity() == null) {
                                            this.selectedObject = null;
                                            this.selectedObjectGroup = null;
                                            this.selectedObjectToEditCaption = null;
                                            return;
                                        }
                                        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity(), this.themeDelegate);
                                        builder.setTitle(LocaleController.getString("AppName", 2131624384));
                                        builder.setMessage(LocaleController.getString("IncorrectTheme", 2131626278));
                                        builder.setPositiveButton(LocaleController.getString("OK", 2131627127), null);
                                        builder.setDimEnabled(false);
                                        builder.setOnPreDismissListener(new ChatActivity$$ExternalSyntheticLambda52(this));
                                        showDialog(builder.create());
                                    }
                                } else if (LocaleController.getInstance().applyLanguageFile(file, this.currentAccount)) {
                                    presentFragment(new LanguageSelectActivity());
                                    break;
                                } else if (getParentActivity() == null) {
                                    this.selectedObject = null;
                                    this.selectedObjectGroup = null;
                                    this.selectedObjectToEditCaption = null;
                                    return;
                                } else {
                                    AlertDialog.Builder builder2 = new AlertDialog.Builder(getParentActivity(), this.themeDelegate);
                                    builder2.setTitle(LocaleController.getString("AppName", 2131624384));
                                    builder2.setMessage(LocaleController.getString("IncorrectLocalization", 2131626277));
                                    builder2.setPositiveButton(LocaleController.getString("OK", 2131627127), null);
                                    builder2.setDimEnabled(false);
                                    builder2.setOnPreDismissListener(new ChatActivity$$ExternalSyntheticLambda53(this));
                                    showDialog(builder2.create());
                                }
                                z = true;
                                break;
                            }
                            break;
                        case 6:
                            String str2 = this.selectedObject.messageOwner.attachPath;
                            if (str2 != null && str2.length() > 0 && !new File(str2).exists()) {
                                str2 = null;
                            }
                            if (str2 == null || str2.length() == 0) {
                                str2 = getFileLoader().getPathToMessage(this.selectedObject.messageOwner).toString();
                            }
                            Intent intent = new Intent("android.intent.action.SEND");
                            intent.setType(this.selectedObject.getDocument().mime_type);
                            File file2 = new File(str2);
                            if (Build.VERSION.SDK_INT >= 24) {
                                try {
                                    intent.putExtra("android.intent.extra.STREAM", FileProvider.getUriForFile(getParentActivity(), "org.telegram.messenger.beta.provider", file2));
                                    intent.setFlags(1);
                                } catch (Exception unused) {
                                    intent.putExtra("android.intent.extra.STREAM", Uri.fromFile(file2));
                                }
                            } else {
                                intent.putExtra("android.intent.extra.STREAM", Uri.fromFile(file2));
                            }
                            try {
                                getParentActivity().startActivityForResult(Intent.createChooser(intent, LocaleController.getString("ShareFile", 2131628337)), 500);
                            } catch (Throwable unused2) {
                                break;
                            }
                            break;
                        case 7:
                            String str3 = this.selectedObject.messageOwner.attachPath;
                            if (str3 != null && str3.length() > 0 && !new File(str3).exists()) {
                                str3 = null;
                            }
                            if (str3 == null || str3.length() == 0) {
                                str3 = getFileLoader().getPathToMessage(this.selectedObject.messageOwner).toString();
                            }
                            int i7 = Build.VERSION.SDK_INT;
                            if (i7 >= 23 && ((i7 <= 28 || BuildVars.NO_SCOPED_STORAGE) && getParentActivity().checkSelfPermission("android.permission.WRITE_EXTERNAL_STORAGE") != 0)) {
                                getParentActivity().requestPermissions(new String[]{"android.permission.WRITE_EXTERNAL_STORAGE"}, 4);
                                this.selectedObject = null;
                                this.selectedObjectGroup = null;
                                this.selectedObjectToEditCaption = null;
                                return;
                            }
                            MediaController.saveFile(str3, getParentActivity(), 0, null, null);
                            BulletinFactory.createSaveToGalleryBulletin(this, this.selectedObject.isVideo(), this.themeDelegate).show();
                            break;
                        case 8:
                            showFieldPanelForReply(this.selectedObject);
                            break;
                        case 9:
                            StickersAlert stickersAlert = new StickersAlert(getParentActivity(), this, this.selectedObject.getInputStickerSet(), null, (this.bottomOverlayChat.getVisibility() == 0 || ((tLRPC$Chat = this.currentChat) != null && !ChatObject.canSendStickers(tLRPC$Chat))) ? null : this.chatActivityEnterView, this.themeDelegate);
                            stickersAlert.setCalcMandatoryInsets(isKeyboardVisible());
                            stickersAlert.setDimBehind(false);
                            stickersAlert.setOnDismissListener(new ChatActivity$$ExternalSyntheticLambda123(this));
                            showDialog(stickersAlert);
                            z = true;
                            break;
                        case 10:
                            int i8 = Build.VERSION.SDK_INT;
                            if (i8 >= 23 && ((i8 <= 28 || BuildVars.NO_SCOPED_STORAGE) && getParentActivity().checkSelfPermission("android.permission.WRITE_EXTERNAL_STORAGE") != 0)) {
                                getParentActivity().requestPermissions(new String[]{"android.permission.WRITE_EXTERNAL_STORAGE"}, 4);
                                this.selectedObject = null;
                                this.selectedObjectGroup = null;
                                this.selectedObjectToEditCaption = null;
                                return;
                            }
                            boolean isMusic = this.selectedObject.isMusic();
                            boolean isDocument = this.selectedObject.isDocument();
                            if (isMusic || isDocument) {
                                if (this.selectedObjectGroup != null) {
                                    arrayList = new ArrayList(this.selectedObjectGroup.messages);
                                } else {
                                    arrayList = new ArrayList();
                                    arrayList.add(this.selectedObject);
                                }
                                MediaController.saveFilesFromMessages(getParentActivity(), getAccountInstance(), arrayList, new ChatActivity$$ExternalSyntheticLambda215(this, isMusic));
                                break;
                            } else {
                                boolean isVideo = this.selectedObject.isVideo();
                                boolean isPhoto = this.selectedObject.isPhoto();
                                boolean isGif = this.selectedObject.isGif();
                                String documentFileName = FileLoader.getDocumentFileName(this.selectedObject.getDocument());
                                if (TextUtils.isEmpty(documentFileName)) {
                                    documentFileName = this.selectedObject.getFileName();
                                }
                                String str4 = documentFileName;
                                String str5 = this.selectedObject.messageOwner.attachPath;
                                if (str5 != null && str5.length() > 0 && !new File(str5).exists()) {
                                    str5 = null;
                                }
                                if (str5 == null || str5.length() == 0) {
                                    str5 = getFileLoader().getPathToMessage(this.selectedObject.messageOwner).toString();
                                }
                                String str6 = str5;
                                Activity parentActivity = getParentActivity();
                                if (this.selectedObject.getDocument() != null) {
                                    str = this.selectedObject.getDocument().mime_type;
                                }
                                MediaController.saveFile(str6, parentActivity, 2, str4, str, new ChatActivity$$ExternalSyntheticLambda198(this, isPhoto, isVideo, isGif));
                                break;
                            }
                            break;
                        case 11:
                            TLRPC$Document document = this.selectedObject.getDocument();
                            getMessagesController().saveGif(this.selectedObject, document);
                            if (!showGifHint() && getParentActivity() != null) {
                                BulletinFactory.of(this).createDownloadBulletin(BulletinFactory.FileType.GIF, this.themeDelegate).show();
                            }
                            this.chatActivityEnterView.addRecentGif(document);
                            break;
                        case 12:
                            MessageObject messageObject4 = this.selectedObjectToEditCaption;
                            if (messageObject4 != null) {
                                startEditingMessageObject(messageObject4);
                            } else {
                                startEditingMessageObject(this.selectedObject);
                            }
                            this.selectedObject = null;
                            this.selectedObjectGroup = null;
                            this.selectedObjectToEditCaption = null;
                            break;
                        case 13:
                            MessageObject.GroupedMessages groupedMessages3 = this.selectedObjectGroup;
                            if (groupedMessages3 != null && !groupedMessages3.messages.isEmpty()) {
                                i2 = this.selectedObjectGroup.messages.get(0).getId();
                            } else {
                                i2 = this.selectedObject.getId();
                            }
                            AlertDialog.Builder builder3 = new AlertDialog.Builder(getParentActivity(), this.themeDelegate);
                            builder3.setTitle(LocaleController.getString("PinMessageAlertTitle", 2131627586));
                            builder3.setDimAlpha(0.5f);
                            builder3.setOnPreDismissListener(new ChatActivity$$ExternalSyntheticLambda49(this));
                            if (this.currentUser != null) {
                                int i9 = this.currentPinnedMessageId;
                                if (i9 != 0 && i2 < i9) {
                                    builder3.setMessage(LocaleController.getString("PinOldMessageAlert", 2131627588));
                                } else {
                                    builder3.setMessage(LocaleController.getString("PinMessageAlertChat", 2131627585));
                                }
                                zArr = new boolean[]{false, false};
                                if (!UserObject.isUserSelf(this.currentUser)) {
                                    FrameLayout frameLayout = new FrameLayout(getParentActivity());
                                    CheckBoxCell checkBoxCell = new CheckBoxCell(getParentActivity(), 1, this.themeDelegate);
                                    checkBoxCell.setBackgroundDrawable(Theme.getSelectorDrawable(false));
                                    checkBoxCell.setText(LocaleController.formatString("PinAlsoFor", 2131627577, UserObject.getFirstName(this.currentUser)), str, false, false);
                                    checkBoxCell.setPadding(LocaleController.isRTL ? AndroidUtilities.dp(8.0f) : 0, 0, LocaleController.isRTL ? 0 : AndroidUtilities.dp(8.0f), 0);
                                    frameLayout.addView(checkBoxCell, LayoutHelper.createFrame(-1, 48.0f, 51, 8.0f, 0.0f, 8.0f, 0.0f));
                                    checkBoxCell.setOnClickListener(new ChatActivity$$ExternalSyntheticLambda95(zArr));
                                    builder3.setView(frameLayout);
                                }
                            } else if ((ChatObject.isChannel(this.currentChat) && this.currentChat.megagroup) || ((tLRPC$Chat2 = this.currentChat) != null && !ChatObject.isChannel(tLRPC$Chat2))) {
                                if (!this.pinnedMessageIds.isEmpty() && i2 < this.pinnedMessageIds.get(0).intValue()) {
                                    builder3.setMessage(LocaleController.getString("PinOldMessageAlert", 2131627588));
                                    zArr = new boolean[]{false, true};
                                } else {
                                    builder3.setMessage(LocaleController.getString("PinMessageAlert", 2131627583));
                                    zArr = new boolean[]{true, true};
                                    FrameLayout frameLayout2 = new FrameLayout(getParentActivity());
                                    CheckBoxCell checkBoxCell2 = new CheckBoxCell(getParentActivity(), 1, this.themeDelegate);
                                    checkBoxCell2.setBackgroundDrawable(Theme.getSelectorDrawable(false));
                                    checkBoxCell2.setText(LocaleController.getString("PinNotify", 2131627587), str, true, false);
                                    checkBoxCell2.setPadding(LocaleController.isRTL ? AndroidUtilities.dp(8.0f) : 0, 0, LocaleController.isRTL ? 0 : AndroidUtilities.dp(8.0f), 0);
                                    frameLayout2.addView(checkBoxCell2, LayoutHelper.createFrame(-1, 48.0f, 51, 8.0f, 0.0f, 8.0f, 0.0f));
                                    checkBoxCell2.setOnClickListener(new ChatActivity$$ExternalSyntheticLambda94(zArr));
                                    builder3.setView(frameLayout2);
                                }
                            } else {
                                int i10 = this.currentPinnedMessageId;
                                if (i10 != 0 && i2 < i10) {
                                    builder3.setMessage(LocaleController.getString("PinOldMessageAlert", 2131627588));
                                } else {
                                    builder3.setMessage(LocaleController.getString("PinMessageAlertChannel", 2131627584));
                                }
                                zArr = new boolean[]{false, true};
                            }
                            builder3.setPositiveButton(LocaleController.getString("PinMessage", 2131627582), new ChatActivity$$ExternalSyntheticLambda35(this, i2, zArr));
                            builder3.setNegativeButton(LocaleController.getString("Cancel", 2131624832), null);
                            showDialog(builder3.create());
                            z = true;
                            break;
                        case 14:
                            if (this.pinnedMessageObjects.containsKey(Integer.valueOf(this.selectedObject.getId()))) {
                                messageObject2 = this.selectedObject;
                            } else {
                                MessageObject.GroupedMessages groupedMessages4 = this.selectedObjectGroup;
                                if (groupedMessages4 != null && !groupedMessages4.messages.isEmpty()) {
                                    messageObject2 = this.selectedObjectGroup.messages.get(0);
                                } else {
                                    messageObject2 = this.selectedObject;
                                }
                            }
                            if (this.chatMode == 2 && this.messages.size() == 2) {
                                finishFragment();
                                this.chatActivityDelegate.onUnpin(false, false);
                                break;
                            } else {
                                unpinMessage(messageObject2);
                                break;
                            }
                            break;
                        case 15:
                            Bundle bundle2 = new Bundle();
                            bundle2.putLong("user_id", this.selectedObject.messageOwner.media.user_id);
                            bundle2.putString("phone", this.selectedObject.messageOwner.media.phone_number);
                            bundle2.putBoolean("addContact", true);
                            presentFragment(new ContactAddActivity(bundle2));
                            break;
                        case 16:
                            AndroidUtilities.addToClipboard(this.selectedObject.messageOwner.media.phone_number);
                            break;
                        case 17:
                            try {
                                Intent intent2 = new Intent("android.intent.action.DIAL", Uri.parse("tel:" + this.selectedObject.messageOwner.media.phone_number));
                                intent2.addFlags(268435456);
                                getParentActivity().startActivityForResult(intent2, 500);
                                break;
                            } catch (Exception e) {
                                FileLog.e(e);
                                break;
                            }
                        case 18:
                            TLRPC$User tLRPC$User = this.currentUser;
                            if (tLRPC$User != null) {
                                boolean isVideoCall = this.selectedObject.isVideoCall();
                                TLRPC$UserFull tLRPC$UserFull = this.userInfo;
                                VoIPHelper.startCall(tLRPC$User, isVideoCall, tLRPC$UserFull != null && tLRPC$UserFull.video_calls_available, getParentActivity(), getMessagesController().getUserFull(this.currentUser.id), getAccountInstance());
                                break;
                            }
                            break;
                        case 19:
                            VoIPHelper.showRateAlert(getParentActivity(), (TLRPC$TL_messageActionPhoneCall) this.selectedObject.messageOwner.action);
                            break;
                        case 20:
                            MediaDataController mediaDataController = getMediaDataController();
                            MessageObject messageObject5 = this.selectedObject;
                            mediaDataController.addRecentSticker(2, messageObject5, messageObject5.getDocument(), (int) (System.currentTimeMillis() / 1000), false);
                            break;
                        case 21:
                            MediaDataController mediaDataController2 = getMediaDataController();
                            MessageObject messageObject6 = this.selectedObject;
                            mediaDataController2.addRecentSticker(2, messageObject6, messageObject6.getDocument(), (int) (System.currentTimeMillis() / 1000), true);
                            break;
                        case 22:
                            TLRPC$TL_channels_exportMessageLink tLRPC$TL_channels_exportMessageLink = new TLRPC$TL_channels_exportMessageLink();
                            MessageObject messageObject7 = this.selectedObject;
                            if (messageObject7 == this.replyingMessageObject && this.isComments) {
                                tLRPC$TL_channels_exportMessageLink.id = this.replyOriginalMessageId;
                                tLRPC$TL_channels_exportMessageLink.channel = MessagesController.getInputChannel(this.replyOriginalChat);
                            } else {
                                tLRPC$TL_channels_exportMessageLink.id = messageObject7.getId();
                                tLRPC$TL_channels_exportMessageLink.channel = MessagesController.getInputChannel(this.currentChat);
                                tLRPC$TL_channels_exportMessageLink.thread = isReplyChatComment();
                            }
                            getConnectionsManager().sendRequest(tLRPC$TL_channels_exportMessageLink, new ChatActivity$$ExternalSyntheticLambda217(this));
                            break;
                        case 23:
                            if (UserObject.isReplyUser(this.currentUser)) {
                                MessageObject messageObject8 = this.selectedObject;
                                TLRPC$MessageFwdHeader tLRPC$MessageFwdHeader = messageObject8.messageOwner.fwd_from;
                                if (tLRPC$MessageFwdHeader != null) {
                                    AlertsCreator.showBlockReportSpamReplyAlert(this, messageObject8, MessageObject.getPeerId(tLRPC$MessageFwdHeader.from_id), this.themeDelegate, new ChatActivity$$ExternalSyntheticLambda151(this));
                                }
                            } else {
                                AlertsCreator.createReportAlert(getParentActivity(), this.dialog_id, this.selectedObject.getId(), this, this.themeDelegate, new ChatActivity$$ExternalSyntheticLambda143(this));
                            }
                            z = true;
                            break;
                        case 24:
                            if (this.selectedObject.isEditing() || (this.selectedObject.isSending() && this.selectedObjectGroup == null)) {
                                getSendMessagesHelper().cancelSendingMessage(this.selectedObject);
                                break;
                            } else if (this.selectedObject.isSending() && this.selectedObjectGroup != null) {
                                for (int i11 = 0; i11 < this.selectedObjectGroup.messages.size(); i11++) {
                                    getSendMessagesHelper().cancelSendingMessage(new ArrayList<>(this.selectedObjectGroup.messages));
                                }
                                break;
                            }
                            break;
                        case 25:
                            AlertDialog[] alertDialogArr = {new AlertDialog(getParentActivity(), 3, this.themeDelegate)};
                            int sendVote = getSendMessagesHelper().sendVote(this.selectedObject, null, new ChatActivity$$ExternalSyntheticLambda207(alertDialogArr));
                            if (sendVote != 0) {
                                AndroidUtilities.runOnUIThread(new ChatActivity$$ExternalSyntheticLambda201(this, alertDialogArr, sendVote), 500L);
                                break;
                            }
                            break;
                        case 26:
                            MessageObject messageObject9 = this.selectedObject;
                            AlertDialog.Builder builder4 = new AlertDialog.Builder(getParentActivity(), this.themeDelegate);
                            builder4.setDimEnabled(false);
                            builder4.setOnPreDismissListener(new ChatActivity$$ExternalSyntheticLambda50(this));
                            if (messageObject9.isQuiz()) {
                                builder4.setTitle(LocaleController.getString("StopQuizAlertTitle", 2131628541));
                                builder4.setMessage(LocaleController.getString("StopQuizAlertText", 2131628540));
                            } else {
                                builder4.setTitle(LocaleController.getString("StopPollAlertTitle", 2131628538));
                                builder4.setMessage(LocaleController.getString("StopPollAlertText", 2131628537));
                            }
                            builder4.setPositiveButton(LocaleController.getString("Stop", 2131628527), new ChatActivity$$ExternalSyntheticLambda38(this, messageObject9));
                            builder4.setNegativeButton(LocaleController.getString("Cancel", 2131624832), null);
                            showDialog(builder4.create());
                            z = true;
                            break;
                        case 27:
                            openDiscussionMessageChat(this.currentChat.id, null, this.selectedObject.getId(), 0L, -1, 0, null);
                            break;
                        case 28:
                            presentFragment(new MessageStatisticActivity(this.selectedObject));
                            break;
                    }
                }
            } else if (!checkSlowMode(this.chatActivityEnterView.getSendButton())) {
                if (getMediaController().isPlayingMessage(this.selectedObject)) {
                    getMediaController().cleanupPlayer(true, true);
                }
                TLRPC$TL_messages_sendScheduledMessages tLRPC$TL_messages_sendScheduledMessages = new TLRPC$TL_messages_sendScheduledMessages();
                tLRPC$TL_messages_sendScheduledMessages.peer = getMessagesController().getInputPeer(this.dialog_id);
                if (this.selectedObjectGroup != null) {
                    for (int i12 = 0; i12 < this.selectedObjectGroup.messages.size(); i12++) {
                        tLRPC$TL_messages_sendScheduledMessages.id.add(Integer.valueOf(this.selectedObjectGroup.messages.get(i12).getId()));
                    }
                } else {
                    tLRPC$TL_messages_sendScheduledMessages.id.add(Integer.valueOf(this.selectedObject.getId()));
                }
                ConnectionsManager.getInstance(this.currentAccount).sendRequest(tLRPC$TL_messages_sendScheduledMessages, new ChatActivity$$ExternalSyntheticLambda228(this, tLRPC$TL_messages_sendScheduledMessages));
            }
            AlertsCreator.createScheduleDatePickerDialog(getParentActivity(), this.dialog_id, messageObject.messageOwner.date, new ChatActivity$$ExternalSyntheticLambda239(this, this.selectedObjectGroup, this.selectedObject), null, this.themeDelegate).setOnPreDismissListener(new ChatActivity$$ExternalSyntheticLambda54(this)).setDimBehind(false);
            z = true;
        } else {
            showDialog(new PremiumFeatureBottomSheet(this, 3, true));
        }
        this.selectedObject = null;
        this.selectedObjectGroup = null;
        this.selectedObjectToEditCaption = null;
        closeMenu(!z);
    }

    public /* synthetic */ void lambda$processSelectedOption$190(DialogInterface dialogInterface) {
        dimBehindView(false);
    }

    public /* synthetic */ void lambda$processSelectedOption$191(DialogInterface dialogInterface) {
        dimBehindView(false);
    }

    public /* synthetic */ void lambda$processSelectedOption$192() {
        dimBehindView(false);
    }

    public /* synthetic */ void lambda$processSelectedOption$193(boolean z, int i) {
        if (getParentActivity() == null || this.fragmentView == null || i <= 0) {
            return;
        }
        BulletinFactory.of(this).createDownloadBulletin(z ? BulletinFactory.FileType.AUDIOS : BulletinFactory.FileType.UNKNOWNS, i, this.themeDelegate).show();
    }

    public /* synthetic */ void lambda$processSelectedOption$194(boolean z, boolean z2, boolean z3) {
        BulletinFactory.FileType fileType;
        if (getParentActivity() == null) {
            return;
        }
        if (z) {
            fileType = BulletinFactory.FileType.PHOTO_TO_DOWNLOADS;
        } else if (z2) {
            fileType = BulletinFactory.FileType.VIDEO_TO_DOWNLOADS;
        } else if (z3) {
            fileType = BulletinFactory.FileType.GIF_TO_DOWNLOADS;
        } else {
            fileType = BulletinFactory.FileType.UNKNOWN;
        }
        BulletinFactory.of(this).createDownloadBulletin(fileType, this.themeDelegate).show();
    }

    public /* synthetic */ void lambda$processSelectedOption$195(DialogInterface dialogInterface) {
        dimBehindView(false);
    }

    public static /* synthetic */ void lambda$processSelectedOption$196(boolean[] zArr, View view) {
        zArr[1] = !zArr[1];
        ((CheckBoxCell) view).setChecked(zArr[1], true);
    }

    public static /* synthetic */ void lambda$processSelectedOption$197(boolean[] zArr, View view) {
        zArr[0] = !zArr[0];
        ((CheckBoxCell) view).setChecked(zArr[0], true);
    }

    public /* synthetic */ void lambda$processSelectedOption$199(int i, boolean[] zArr, DialogInterface dialogInterface, int i2) {
        getMessagesController().pinMessage(this.currentChat, this.currentUser, i, false, !zArr[1], zArr[0]);
        Bulletin createPinMessageBulletin = BulletinFactory.createPinMessageBulletin(this, this.themeDelegate);
        createPinMessageBulletin.show();
        Bulletin.Layout layout = createPinMessageBulletin.getLayout();
        layout.postDelayed(new ChatActivity$$ExternalSyntheticLambda115(layout), 550L);
    }

    public /* synthetic */ void lambda$processSelectedOption$201(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        AndroidUtilities.runOnUIThread(new ChatActivity$$ExternalSyntheticLambda185(this, tLObject));
    }

    public /* synthetic */ void lambda$processSelectedOption$200(TLObject tLObject) {
        if (tLObject != null) {
            TLRPC$TL_exportedMessageLink tLRPC$TL_exportedMessageLink = (TLRPC$TL_exportedMessageLink) tLObject;
            try {
                ((ClipboardManager) ApplicationLoader.applicationContext.getSystemService("clipboard")).setPrimaryClip(ClipData.newPlainText("label", tLRPC$TL_exportedMessageLink.link));
                if (!BulletinFactory.canShowBulletin(this)) {
                    return;
                }
                BulletinFactory.of(this).createCopyLinkBulletin(!isThreadChat() && tLRPC$TL_exportedMessageLink.link.contains("/c/"), this.themeDelegate).show();
            } catch (Exception e) {
                FileLog.e(e);
            }
        }
    }

    public /* synthetic */ void lambda$processSelectedOption$202() {
        dimBehindView(false);
    }

    public /* synthetic */ void lambda$processSelectedOption$203() {
        dimBehindView(false);
    }

    public static /* synthetic */ void lambda$processSelectedOption$204(AlertDialog[] alertDialogArr) {
        try {
            alertDialogArr[0].dismiss();
        } catch (Throwable unused) {
        }
        alertDialogArr[0] = null;
    }

    public /* synthetic */ void lambda$processSelectedOption$206(AlertDialog[] alertDialogArr, int i) {
        if (alertDialogArr[0] == null) {
            return;
        }
        alertDialogArr[0].setOnCancelListener(new ChatActivity$$ExternalSyntheticLambda22(this, i));
        showDialog(alertDialogArr[0]);
    }

    public /* synthetic */ void lambda$processSelectedOption$205(int i, DialogInterface dialogInterface) {
        getConnectionsManager().cancelRequest(i, true);
    }

    public /* synthetic */ void lambda$processSelectedOption$207(DialogInterface dialogInterface) {
        dimBehindView(false);
    }

    public /* synthetic */ void lambda$processSelectedOption$213(MessageObject messageObject, DialogInterface dialogInterface, int i) {
        AlertDialog[] alertDialogArr = {new AlertDialog(getParentActivity(), 3, this.themeDelegate)};
        TLRPC$TL_messages_editMessage tLRPC$TL_messages_editMessage = new TLRPC$TL_messages_editMessage();
        TLRPC$TL_inputMediaPoll tLRPC$TL_inputMediaPoll = new TLRPC$TL_inputMediaPoll();
        TLRPC$TL_poll tLRPC$TL_poll = new TLRPC$TL_poll();
        tLRPC$TL_inputMediaPoll.poll = tLRPC$TL_poll;
        TLRPC$Poll tLRPC$Poll = ((TLRPC$TL_messageMediaPoll) messageObject.messageOwner.media).poll;
        tLRPC$TL_poll.id = tLRPC$Poll.id;
        tLRPC$TL_poll.question = tLRPC$Poll.question;
        tLRPC$TL_poll.answers = tLRPC$Poll.answers;
        tLRPC$TL_poll.closed = true;
        tLRPC$TL_messages_editMessage.media = tLRPC$TL_inputMediaPoll;
        tLRPC$TL_messages_editMessage.peer = getMessagesController().getInputPeer(this.dialog_id);
        tLRPC$TL_messages_editMessage.id = messageObject.getId();
        tLRPC$TL_messages_editMessage.flags |= 16384;
        AndroidUtilities.runOnUIThread(new ChatActivity$$ExternalSyntheticLambda200(this, alertDialogArr, getConnectionsManager().sendRequest(tLRPC$TL_messages_editMessage, new ChatActivity$$ExternalSyntheticLambda232(this, alertDialogArr, tLRPC$TL_messages_editMessage))), 500L);
    }

    public /* synthetic */ void lambda$processSelectedOption$210(AlertDialog[] alertDialogArr, TLRPC$TL_messages_editMessage tLRPC$TL_messages_editMessage, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        AndroidUtilities.runOnUIThread(new ChatActivity$$ExternalSyntheticLambda208(alertDialogArr));
        if (tLRPC$TL_error == null) {
            getMessagesController().processUpdates((TLRPC$Updates) tLObject, false);
        } else {
            AndroidUtilities.runOnUIThread(new ChatActivity$$ExternalSyntheticLambda192(this, tLRPC$TL_error, tLRPC$TL_messages_editMessage));
        }
    }

    public static /* synthetic */ void lambda$processSelectedOption$208(AlertDialog[] alertDialogArr) {
        try {
            alertDialogArr[0].dismiss();
        } catch (Throwable unused) {
        }
        alertDialogArr[0] = null;
    }

    public /* synthetic */ void lambda$processSelectedOption$209(TLRPC$TL_error tLRPC$TL_error, TLRPC$TL_messages_editMessage tLRPC$TL_messages_editMessage) {
        AlertsCreator.processError(this.currentAccount, tLRPC$TL_error, this, tLRPC$TL_messages_editMessage, new Object[0]);
    }

    public /* synthetic */ void lambda$processSelectedOption$212(AlertDialog[] alertDialogArr, int i) {
        if (alertDialogArr[0] == null) {
            return;
        }
        alertDialogArr[0].setOnCancelListener(new ChatActivity$$ExternalSyntheticLambda20(this, i));
        showDialog(alertDialogArr[0]);
    }

    public /* synthetic */ void lambda$processSelectedOption$211(int i, DialogInterface dialogInterface) {
        getConnectionsManager().cancelRequest(i, true);
    }

    public /* synthetic */ void lambda$processSelectedOption$216(TLRPC$TL_messages_sendScheduledMessages tLRPC$TL_messages_sendScheduledMessages, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            getMessagesController().processUpdates((TLRPC$Updates) tLObject, false);
            AndroidUtilities.runOnUIThread(new ChatActivity$$ExternalSyntheticLambda194(this, tLRPC$TL_messages_sendScheduledMessages));
        } else if (tLRPC$TL_error.text == null) {
        } else {
            AndroidUtilities.runOnUIThread(new ChatActivity$$ExternalSyntheticLambda190(this, tLRPC$TL_error));
        }
    }

    public /* synthetic */ void lambda$processSelectedOption$214(TLRPC$TL_messages_sendScheduledMessages tLRPC$TL_messages_sendScheduledMessages) {
        NotificationCenter.getInstance(this.currentAccount).postNotificationName(NotificationCenter.messagesDeleted, tLRPC$TL_messages_sendScheduledMessages.id, Long.valueOf(-this.dialog_id), Boolean.TRUE, Long.valueOf(this.dialog_id));
    }

    public /* synthetic */ void lambda$processSelectedOption$215(TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error.text.startsWith("SLOWMODE_WAIT_")) {
            AlertsCreator.showSimpleToast(this, LocaleController.getString("SlowmodeSendError", 2131628432));
        } else if (tLRPC$TL_error.text.equals("CHAT_SEND_MEDIA_FORBIDDEN")) {
            AlertsCreator.showSimpleToast(this, LocaleController.getString("AttachMediaRestrictedForever", 2131624509));
        } else {
            AlertsCreator.showSimpleToast(this, tLRPC$TL_error.text);
        }
    }

    public /* synthetic */ void lambda$processSelectedOption$217(MessageObject.GroupedMessages groupedMessages, MessageObject messageObject, boolean z, int i) {
        if (groupedMessages != null && !groupedMessages.messages.isEmpty()) {
            SendMessagesHelper.getInstance(this.currentAccount).editMessage(groupedMessages.messages.get(0), null, false, this, null, i);
        } else {
            SendMessagesHelper.getInstance(this.currentAccount).editMessage(messageObject, null, false, this, null, i);
        }
    }

    public /* synthetic */ void lambda$processSelectedOption$218(DialogInterface dialogInterface) {
        dimBehindView(false);
    }

    @Override // org.telegram.ui.DialogsActivity.DialogsActivityDelegate
    public void didSelectDialogs(DialogsActivity dialogsActivity, ArrayList<Long> arrayList, CharSequence charSequence, boolean z) {
        if (this.forwardingMessage == null && this.selectedMessagesIds[0].size() == 0 && this.selectedMessagesIds[1].size() == 0) {
            return;
        }
        ArrayList<MessageObject> arrayList2 = new ArrayList<>();
        MessageObject messageObject = this.forwardingMessage;
        if (messageObject != null) {
            MessageObject.GroupedMessages groupedMessages = this.forwardingMessageGroup;
            if (groupedMessages != null) {
                arrayList2.addAll(groupedMessages.messages);
            } else {
                arrayList2.add(messageObject);
            }
            this.forwardingMessage = null;
            this.forwardingMessageGroup = null;
        } else {
            for (int i = 1; i >= 0; i--) {
                ArrayList arrayList3 = new ArrayList();
                for (int i2 = 0; i2 < this.selectedMessagesIds[i].size(); i2++) {
                    arrayList3.add(Integer.valueOf(this.selectedMessagesIds[i].keyAt(i2)));
                }
                Collections.sort(arrayList3);
                for (int i3 = 0; i3 < arrayList3.size(); i3++) {
                    MessageObject messageObject2 = this.selectedMessagesIds[i].get(((Integer) arrayList3.get(i3)).intValue());
                    if (messageObject2 != null) {
                        arrayList2.add(messageObject2);
                    }
                }
                this.selectedMessagesCanCopyIds[i].clear();
                this.selectedMessagesCanStarIds[i].clear();
                this.selectedMessagesIds[i].clear();
            }
            hideActionMode();
            updatePinnedMessageView(true);
            updateVisibleRows();
        }
        if (arrayList.size() > 1 || arrayList.get(0).longValue() == getUserConfig().getClientUserId() || charSequence != null) {
            this.forwardingMessages = null;
            hideFieldPanel(false);
            for (int i4 = 0; i4 < arrayList.size(); i4++) {
                long longValue = arrayList.get(i4).longValue();
                if (charSequence != null) {
                    getSendMessagesHelper().sendMessage(charSequence.toString(), longValue, null, null, null, true, null, null, null, true, 0, null);
                }
                getSendMessagesHelper().sendMessage(arrayList2, longValue, false, false, true, 0);
            }
            dialogsActivity.finishFragment();
            if (arrayList.size() == 1) {
                this.undoView.showWithAction(arrayList.get(0).longValue(), 53, Integer.valueOf(arrayList2.size()));
                return;
            } else {
                this.undoView.showWithAction(0L, 53, Integer.valueOf(arrayList2.size()), Integer.valueOf(arrayList.size()), (Runnable) null, (Runnable) null);
                return;
            }
        }
        long longValue2 = arrayList.get(0).longValue();
        if (longValue2 != this.dialog_id || this.chatMode == 2) {
            Bundle bundle = new Bundle();
            bundle.putBoolean("scrollToTopOnResume", this.scrollToTopOnResume);
            if (DialogObject.isEncryptedDialog(longValue2)) {
                bundle.putInt("enc_id", DialogObject.getEncryptedChatId(longValue2));
            } else {
                if (DialogObject.isUserDialog(longValue2)) {
                    bundle.putLong("user_id", longValue2);
                } else {
                    bundle.putLong("chat_id", -longValue2);
                }
                if (!getMessagesController().checkCanOpenChat(bundle, dialogsActivity)) {
                    return;
                }
            }
            addToPulledDialogsMyself();
            ChatActivity chatActivity = new ChatActivity(bundle);
            if (presentFragment(chatActivity, true)) {
                chatActivity.showFieldPanelForForward(true, arrayList2);
                if (AndroidUtilities.isTablet()) {
                    return;
                }
                removeSelfFromStack();
                return;
            }
            dialogsActivity.finishFragment();
            return;
        }
        dialogsActivity.finishFragment();
        moveScrollToLastMessage(false);
        showFieldPanelForForward(true, arrayList2);
        if (AndroidUtilities.isTablet()) {
            hideActionMode();
            updatePinnedMessageView(true);
        }
        updateVisibleRows();
    }

    public boolean checkRecordLocked(boolean z) {
        ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        if (chatActivityEnterView == null || !chatActivityEnterView.isRecordLocked()) {
            return false;
        }
        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity(), this.themeDelegate);
        if (this.chatActivityEnterView.isInVideoMode()) {
            builder.setTitle(LocaleController.getString("DiscardVideoMessageTitle", 2131625506));
            builder.setMessage(LocaleController.getString("DiscardVideoMessageDescription", 2131625505));
        } else {
            builder.setTitle(LocaleController.getString("DiscardVoiceMessageTitle", 2131625509));
            builder.setMessage(LocaleController.getString("DiscardVoiceMessageDescription", 2131625508));
        }
        builder.setPositiveButton(LocaleController.getString("DiscardVoiceMessageAction", 2131625507), new ChatActivity$$ExternalSyntheticLambda43(this, z));
        builder.setNegativeButton(LocaleController.getString("Continue", 2131625262), null);
        showDialog(builder.create());
        return true;
    }

    public /* synthetic */ void lambda$checkRecordLocked$219(boolean z, DialogInterface dialogInterface, int i) {
        ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        if (chatActivityEnterView != null) {
            if (z) {
                finishFragment();
            } else {
                chatActivityEnterView.cancelRecordingAudioVideo();
            }
        }
    }

    @Override // org.telegram.ui.ActionBar.BaseFragment
    public boolean onBackPressed() {
        if (ContentPreviewViewer.getInstance().isVisible()) {
            ContentPreviewViewer.getInstance().closeWithMenu();
            return false;
        }
        ForwardingPreviewView forwardingPreviewView = this.forwardingPreviewView;
        if (forwardingPreviewView != null && forwardingPreviewView.isShowing()) {
            this.forwardingPreviewView.dismiss(true);
            return false;
        } else if (this.messagesSearchListView.getTag() != null) {
            showMessagesSearchListView(false);
            return false;
        } else if (this.scrimPopupWindow != null) {
            closeMenu();
            return false;
        } else if (checkRecordLocked(false)) {
            return false;
        } else {
            if (this.textSelectionHelper.isSelectionMode()) {
                this.textSelectionHelper.clear();
                return false;
            }
            ActionBar actionBar = this.actionBar;
            if (actionBar != null && actionBar.isActionModeShowed()) {
                clearSelectionMode();
                return false;
            }
            ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
            if (chatActivityEnterView != null && chatActivityEnterView.isPopupShowing()) {
                return !this.chatActivityEnterView.hidePopup(true);
            }
            ChatActivityEnterView chatActivityEnterView2 = this.chatActivityEnterView;
            if (chatActivityEnterView2 != null && chatActivityEnterView2.hasBotWebView() && this.chatActivityEnterView.botCommandsMenuIsShowing() && this.chatActivityEnterView.onBotWebViewBackPressed()) {
                return false;
            }
            ChatActivityEnterView chatActivityEnterView3 = this.chatActivityEnterView;
            if (chatActivityEnterView3 != null && chatActivityEnterView3.botCommandsMenuIsShowing()) {
                this.chatActivityEnterView.hideBotCommands();
                return false;
            }
            if (this.backToPreviousFragment != null) {
                ArrayList<BaseFragment> arrayList = this.parentLayout.fragmentsStack;
                arrayList.add(arrayList.size() - 1, this.backToPreviousFragment);
                this.backToPreviousFragment = null;
            }
            return true;
        }
    }

    public void clearSelectionMode() {
        for (int i = 1; i >= 0; i--) {
            this.selectedMessagesIds[i].clear();
            this.selectedMessagesCanCopyIds[i].clear();
            this.selectedMessagesCanStarIds[i].clear();
        }
        hideActionMode();
        updatePinnedMessageView(true);
        updateVisibleRows();
    }

    public void onListItemAnimatorTick() {
        invalidateMessagesVisiblePart();
        if (this.scrimView != null) {
            this.fragmentView.invalidate();
        }
    }

    public void setThreadMessages(ArrayList<MessageObject> arrayList, TLRPC$Chat tLRPC$Chat, int i, int i2, int i3) {
        this.threadMessageObjects = arrayList;
        boolean z = true;
        MessageObject messageObject = arrayList.get(arrayList.size() - 1);
        this.threadMessageObject = messageObject;
        this.replyingMessageObject = messageObject;
        this.threadMaxInboxReadId = i2;
        this.threadMaxOutboxReadId = i3;
        this.replyMaxReadId = Math.max(1, i2);
        this.threadMessageId = this.threadMessageObject.getId();
        this.replyOriginalMessageId = i;
        this.replyOriginalChat = tLRPC$Chat;
        TLRPC$MessageFwdHeader tLRPC$MessageFwdHeader = this.replyingMessageObject.messageOwner.fwd_from;
        if (tLRPC$MessageFwdHeader == null || tLRPC$MessageFwdHeader.channel_post == 0) {
            z = false;
        }
        this.isComments = z;
    }

    public void setHighlightMessageId(int i) {
        this.highlightMessageId = i;
    }

    public boolean isThreadChat() {
        return this.threadMessageObject != null;
    }

    public boolean isReplyChatComment() {
        return this.threadMessageObject != null && this.isComments;
    }

    /* JADX WARN: Removed duplicated region for block: B:93:0x0175  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void updateVisibleRows() {
        boolean z;
        boolean z2;
        RecyclerListView recyclerListView = this.chatListView;
        if (recyclerListView == null) {
            return;
        }
        if (!this.wasManualScroll && this.unreadMessageObject != null) {
            int childCount = recyclerListView.getChildCount();
            int i = 0;
            while (true) {
                if (i >= childCount) {
                    break;
                }
                View childAt = this.chatListView.getChildAt(i);
                if (childAt instanceof ChatMessageCell) {
                    MessageObject messageObject = ((ChatMessageCell) childAt).getMessageObject();
                    MessageObject messageObject2 = this.unreadMessageObject;
                    if (messageObject == messageObject2) {
                        if (this.messages.indexOf(messageObject2) >= 0) {
                            int unused = this.chatAdapter.messagesStartRow;
                            this.messages.indexOf(this.unreadMessageObject);
                            this.chatListView.getMeasuredHeight();
                            childAt.getBottom();
                            this.chatListView.getPaddingBottom();
                        }
                    }
                }
                i++;
            }
        }
        int childCount2 = this.chatListView.getChildCount();
        ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        if (chatActivityEnterView != null) {
            chatActivityEnterView.getEditingMessageObject();
        }
        TLRPC$ChatFull tLRPC$ChatFull = this.chatInfo;
        long j = tLRPC$ChatFull != null ? tLRPC$ChatFull.linked_chat_id : 0L;
        for (int i2 = 0; i2 < childCount2; i2++) {
            View childAt2 = this.chatListView.getChildAt(i2);
            boolean z3 = true;
            if (childAt2 instanceof ChatMessageCell) {
                ChatMessageCell chatMessageCell = (ChatMessageCell) childAt2;
                MessageObject messageObject3 = chatMessageCell.getMessageObject();
                if (this.actionBar.isActionModeShowed() || this.reportType >= 0) {
                    ArrayList<MessageObject> arrayList = this.threadMessageObjects;
                    chatMessageCell.setCheckBoxVisible(arrayList == null || !arrayList.contains(messageObject3), true);
                    int i3 = messageObject3.getDialogId() == this.dialog_id ? 0 : 1;
                    if (this.selectedMessagesIds[i3].indexOfKey(messageObject3.getId()) >= 0) {
                        setCellSelectionBackground(messageObject3, chatMessageCell, i3, true);
                        z2 = true;
                    } else {
                        chatMessageCell.setDrawSelectionBackground(false);
                        chatMessageCell.setChecked(false, false, true);
                        z2 = false;
                    }
                    z = true;
                } else {
                    chatMessageCell.setDrawSelectionBackground(false);
                    chatMessageCell.setCheckBoxVisible(false, true);
                    chatMessageCell.setChecked(false, false, true);
                    z2 = false;
                    z = false;
                }
                if (!chatMessageCell.getMessageObject().deleted || chatMessageCell.linkedChatId != j) {
                    chatMessageCell.setIsUpdating(true);
                    TLRPC$ChatFull tLRPC$ChatFull2 = this.chatInfo;
                    chatMessageCell.linkedChatId = tLRPC$ChatFull2 != null ? tLRPC$ChatFull2.linked_chat_id : 0L;
                    chatMessageCell.setMessageObject(chatMessageCell.getMessageObject(), chatMessageCell.getCurrentMessagesGroup(), chatMessageCell.isPinnedBottom(), chatMessageCell.isPinnedTop());
                    chatMessageCell.setIsUpdating(false);
                }
                if (chatMessageCell != this.scrimView) {
                    chatMessageCell.setCheckPressed(!z, z && z2);
                }
                chatMessageCell.setHighlighted((this.highlightMessageId == Integer.MAX_VALUE || messageObject3 == null || messageObject3.getId() != this.highlightMessageId) ? false : true);
                if (this.highlightMessageId != Integer.MAX_VALUE) {
                    startMessageUnselect();
                }
                BlurredFrameLayout blurredFrameLayout = this.searchContainer;
                if (blurredFrameLayout != null && blurredFrameLayout.getVisibility() == 0) {
                    if (getMediaDataController().isMessageFound(messageObject3.getId(), messageObject3.getDialogId() == this.mergeDialogId) && getMediaDataController().getLastSearchQuery() != null) {
                        chatMessageCell.setHighlightedText(getMediaDataController().getLastSearchQuery());
                        if (this.chatListView.getScrollState() == 0) {
                            z3 = false;
                        }
                        chatMessageCell.setSpoilersSuppressed(z3);
                    }
                }
                chatMessageCell.setHighlightedText(null);
                if (this.chatListView.getScrollState() == 0) {
                }
                chatMessageCell.setSpoilersSuppressed(z3);
            } else if (childAt2 instanceof ChatActionCell) {
                ChatActionCell chatActionCell = (ChatActionCell) childAt2;
                chatActionCell.setMessageObject(chatActionCell.getMessageObject());
                if (this.chatListView.getScrollState() == 0) {
                    z3 = false;
                }
                chatActionCell.setSpoilersSuppressed(z3);
            }
        }
    }

    public void checkEditTimer() {
        MessageObject editingMessageObject;
        ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        if (chatActivityEnterView == null || (editingMessageObject = chatActivityEnterView.getEditingMessageObject()) == null || editingMessageObject.scheduled) {
            return;
        }
        TLRPC$User tLRPC$User = this.currentUser;
        if (tLRPC$User != null && tLRPC$User.self) {
            return;
        }
        int abs = editingMessageObject.canEditMessageAnytime(this.currentChat) ? 360 : (getMessagesController().maxEditTime + 300) - Math.abs(getConnectionsManager().getCurrentTime() - editingMessageObject.messageOwner.date);
        if (abs > 0) {
            if (abs <= 300) {
                this.replyObjectTextView.setText(LocaleController.formatString("TimeToEdit", 2131628725, AndroidUtilities.formatShortDuration(abs)));
            }
            AndroidUtilities.runOnUIThread(new ChatActivity$$ExternalSyntheticLambda134(this), 1000L);
            return;
        }
        this.chatActivityEnterView.onEditTimeExpired();
        this.replyObjectTextView.setText(LocaleController.formatString("TimeToEditExpired", 2131628726, new Object[0]));
    }

    public ArrayList<MessageObject> createVoiceMessagesPlaylist(MessageObject messageObject, boolean z) {
        ArrayList<MessageObject> arrayList = new ArrayList<>();
        arrayList.add(messageObject);
        int id = messageObject.getId();
        messageObject.getDialogId();
        if (id != 0) {
            for (int size = this.messages.size() - 1; size >= 0; size--) {
                MessageObject messageObject2 = this.messages.get(size);
                if ((messageObject2.getDialogId() != this.mergeDialogId || messageObject.getDialogId() == this.mergeDialogId) && (((this.currentEncryptedChat == null && messageObject2.getId() > id) || (this.currentEncryptedChat != null && messageObject2.getId() < id)) && ((messageObject2.isVoice() || messageObject2.isRoundVideo()) && (!z || (messageObject2.isContentUnread() && !messageObject2.isOut()))))) {
                    arrayList.add(messageObject2);
                }
            }
        }
        return arrayList;
    }

    public void alertUserOpenError(MessageObject messageObject) {
        if (getParentActivity() == null) {
            return;
        }
        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity(), this.themeDelegate);
        builder.setTitle(LocaleController.getString("AppName", 2131624384));
        builder.setPositiveButton(LocaleController.getString("OK", 2131627127), null);
        if (messageObject.type == 3) {
            builder.setMessage(LocaleController.getString("NoPlayerInstalled", 2131626902));
        } else {
            builder.setMessage(LocaleController.formatString("NoHandleAppInstalled", 2131626880, messageObject.getDocument().mime_type));
        }
        showDialog(builder.create());
    }

    public void openSearchWithText(String str) {
        ActionBarMenuItem actionBarMenuItem;
        if (!this.actionBar.isSearchFieldVisible()) {
            AndroidUtilities.updateViewVisibilityAnimated(this.avatarContainer, false, 0.95f, true);
            ActionBarMenuItem actionBarMenuItem2 = this.headerItem;
            if (actionBarMenuItem2 != null) {
                actionBarMenuItem2.setVisibility(8);
            }
            ActionBarMenuItem actionBarMenuItem3 = this.attachItem;
            if (actionBarMenuItem3 != null) {
                actionBarMenuItem3.setVisibility(8);
            }
            ActionBarMenuItem actionBarMenuItem4 = this.editTextItem;
            if (actionBarMenuItem4 != null) {
                actionBarMenuItem4.setVisibility(8);
            }
            if (this.threadMessageId == 0 && (actionBarMenuItem = this.searchItem) != null) {
                actionBarMenuItem.setVisibility(0);
            }
            ActionBarMenuItem actionBarMenuItem5 = this.searchIconItem;
            if (actionBarMenuItem5 != null && this.showSearchAsIcon) {
                actionBarMenuItem5.setVisibility(8);
            }
            ActionBarMenuItem actionBarMenuItem6 = this.audioCallIconItem;
            if (actionBarMenuItem6 != null && this.showAudioCallAsIcon) {
                actionBarMenuItem6.setVisibility(8);
            }
            this.searchItemVisible = true;
            updateSearchButtons(0, 0, -1);
            updateBottomOverlay();
        }
        if (this.threadMessageId == 0 && !UserObject.isReplyUser(this.currentUser)) {
            boolean z = str == null;
            this.openSearchKeyboard = z;
            ActionBarMenuItem actionBarMenuItem7 = this.searchItem;
            if (actionBarMenuItem7 != null) {
                actionBarMenuItem7.openSearch(z);
            }
        }
        if (str != null) {
            ActionBarMenuItem actionBarMenuItem8 = this.searchItem;
            if (actionBarMenuItem8 != null) {
                actionBarMenuItem8.setSearchFieldText(str, false);
            }
            getMediaDataController().searchMessagesInChat(str, this.dialog_id, this.mergeDialogId, this.classGuid, 0, this.threadMessageId, this.searchingUserMessages, this.searchingChatMessages);
        }
        updatePinnedMessageView(true);
    }

    @Override // org.telegram.ui.LocationActivity.LocationActivityDelegate
    public void didSelectLocation(TLRPC$MessageMedia tLRPC$MessageMedia, int i, boolean z, int i2) {
        getSendMessagesHelper().sendMessage(tLRPC$MessageMedia, this.dialog_id, this.replyingMessageObject, getThreadMessage(), (TLRPC$ReplyMarkup) null, (HashMap<String, String>) null, z, i2);
        if (this.chatMode == 0) {
            moveScrollToLastMessage(false);
        }
        if (i == 0 || i == 1) {
            afterMessageSend();
        }
        if (this.paused) {
            this.scrollToTopOnResume = true;
        }
    }

    public boolean isEditingMessageMedia() {
        ChatAttachAlert chatAttachAlert = this.chatAttachAlert;
        return (chatAttachAlert == null || chatAttachAlert.getEditingMessageObject() == null) ? false : true;
    }

    public boolean isSecretChat() {
        return this.currentEncryptedChat != null;
    }

    public boolean canScheduleMessage() {
        BlurredFrameLayout blurredFrameLayout;
        return this.currentEncryptedChat == null && ((blurredFrameLayout = this.bottomOverlayChat) == null || blurredFrameLayout.getVisibility() != 0) && !isThreadChat();
    }

    public boolean isInScheduleMode() {
        return this.chatMode == 1;
    }

    public int getChatMode() {
        return this.chatMode;
    }

    public MessageObject getThreadMessage() {
        return this.threadMessageObject;
    }

    public MessageObject getReplyMessage() {
        return this.replyingMessageObject;
    }

    public int getThreadId() {
        return this.threadMessageId;
    }

    public long getInlineReturn() {
        return this.inlineReturn;
    }

    public TLRPC$User getCurrentUser() {
        return this.currentUser;
    }

    public TLRPC$Chat getCurrentChat() {
        return this.currentChat;
    }

    public TLRPC$EncryptedChat getCurrentEncryptedChat() {
        return this.currentEncryptedChat;
    }

    public TLRPC$ChatFull getCurrentChatInfo() {
        return this.chatInfo;
    }

    public ChatObject.Call getGroupCall() {
        ChatObject.Call call;
        if (this.chatMode != 0 || (call = this.groupCall) == null || !(call.call instanceof TLRPC$TL_groupCall)) {
            return null;
        }
        return call;
    }

    public TLRPC$UserFull getCurrentUserInfo() {
        return this.userInfo;
    }

    public void sendAudio(ArrayList<MessageObject> arrayList, CharSequence charSequence, boolean z, int i) {
        String str = null;
        fillEditingMediaWithCaption(charSequence, null);
        AccountInstance accountInstance = getAccountInstance();
        if (charSequence != null) {
            str = charSequence.toString();
        }
        SendMessagesHelper.prepareSendingAudioDocuments(accountInstance, arrayList, str, this.dialog_id, this.replyingMessageObject, getThreadMessage(), this.editingMessageObject, z, i);
        afterMessageSend();
    }

    public void sendContact(TLRPC$User tLRPC$User, boolean z, int i) {
        getSendMessagesHelper().sendMessage(tLRPC$User, this.dialog_id, this.replyingMessageObject, getThreadMessage(), (TLRPC$ReplyMarkup) null, (HashMap<String, String>) null, z, i);
        afterMessageSend();
    }

    public void sendPoll(TLRPC$TL_messageMediaPoll tLRPC$TL_messageMediaPoll, HashMap<String, String> hashMap, boolean z, int i) {
        getSendMessagesHelper().sendMessage(tLRPC$TL_messageMediaPoll, this.dialog_id, this.replyingMessageObject, getThreadMessage(), (TLRPC$ReplyMarkup) null, hashMap, z, i);
        afterMessageSend();
    }

    public void sendMedia(MediaController.PhotoEntry photoEntry, VideoEditedInfo videoEditedInfo, boolean z, int i, boolean z2) {
        if (photoEntry == null) {
            return;
        }
        fillEditingMediaWithCaption(photoEntry.caption, photoEntry.entities);
        if (photoEntry.isVideo) {
            if (videoEditedInfo != null) {
                SendMessagesHelper.prepareSendingVideo(getAccountInstance(), photoEntry.path, videoEditedInfo, this.dialog_id, this.replyingMessageObject, getThreadMessage(), photoEntry.caption, photoEntry.entities, photoEntry.ttl, this.editingMessageObject, z, i, z2);
            } else {
                SendMessagesHelper.prepareSendingVideo(getAccountInstance(), photoEntry.path, null, this.dialog_id, this.replyingMessageObject, getThreadMessage(), photoEntry.caption, photoEntry.entities, photoEntry.ttl, this.editingMessageObject, z, i, z2);
            }
        } else if (photoEntry.imagePath != null) {
            SendMessagesHelper.prepareSendingPhoto(getAccountInstance(), photoEntry.imagePath, photoEntry.thumbPath, null, this.dialog_id, this.replyingMessageObject, getThreadMessage(), photoEntry.caption, photoEntry.entities, photoEntry.stickers, null, photoEntry.ttl, this.editingMessageObject, videoEditedInfo, z, i, z2);
        } else if (photoEntry.path != null) {
            SendMessagesHelper.prepareSendingPhoto(getAccountInstance(), photoEntry.path, photoEntry.thumbPath, null, this.dialog_id, this.replyingMessageObject, getThreadMessage(), photoEntry.caption, photoEntry.entities, photoEntry.stickers, null, photoEntry.ttl, this.editingMessageObject, videoEditedInfo, z, i, z2);
        }
        afterMessageSend();
    }

    public void showOpenGameAlert(TLRPC$TL_game tLRPC$TL_game, MessageObject messageObject, String str, boolean z, long j) {
        String str2;
        TLRPC$User user = getMessagesController().getUser(Long.valueOf(j));
        String str3 = "";
        if (z) {
            AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity(), this.themeDelegate);
            builder.setTitle(LocaleController.getString("AppName", 2131624384));
            if (user != null) {
                str3 = ContactsController.formatName(user.first_name, user.last_name);
            }
            builder.setMessage(LocaleController.formatString("BotPermissionGameAlert", 2131624736, str3));
            builder.setPositiveButton(LocaleController.getString("OK", 2131627127), new ChatActivity$$ExternalSyntheticLambda40(this, tLRPC$TL_game, messageObject, str, j));
            builder.setNegativeButton(LocaleController.getString("Cancel", 2131624832), null);
            showDialog(builder.create());
        } else if (Build.VERSION.SDK_INT >= 21 && !AndroidUtilities.isTablet() && WebviewActivity.supportWebview()) {
            ArrayList<BaseFragment> arrayList = this.parentLayout.fragmentsStack;
            if (arrayList.get(arrayList.size() - 1) != this) {
                return;
            }
            if (user != null && !TextUtils.isEmpty(user.username)) {
                str3 = user.username;
            }
            presentFragment(new WebviewActivity(str, str3, tLRPC$TL_game.title, tLRPC$TL_game.short_name, messageObject));
        } else {
            Activity parentActivity = getParentActivity();
            String str4 = tLRPC$TL_game.short_name;
            if (user != null && (str2 = user.username) != null) {
                str3 = str2;
            }
            WebviewActivity.openGameInBrowser(str, messageObject, parentActivity, str4, str3);
        }
    }

    public /* synthetic */ void lambda$showOpenGameAlert$220(TLRPC$TL_game tLRPC$TL_game, MessageObject messageObject, String str, long j, DialogInterface dialogInterface, int i) {
        showOpenGameAlert(tLRPC$TL_game, messageObject, str, false, j);
        SharedPreferences.Editor edit = MessagesController.getNotificationsSettings(this.currentAccount).edit();
        edit.putBoolean("askgame_" + j, false).commit();
    }

    /* JADX WARN: Code restructure failed: missing block: B:24:0x0058, code lost:
        if (r12 != r11.get(r11.size() - 1).id) goto L26;
     */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void processLoadedDiscussionMessage(boolean z, TLRPC$TL_messages_discussionMessage tLRPC$TL_messages_discussionMessage, boolean z2, TLRPC$messages_Messages tLRPC$messages_Messages, int i, MessageObject messageObject, TLRPC$TL_messages_getDiscussionMessage tLRPC$TL_messages_getDiscussionMessage, TLRPC$Chat tLRPC$Chat, int i2, MessageObject messageObject2) {
        TLRPC$messages_Messages tLRPC$messages_Messages2;
        int i3;
        TLRPC$TL_messageReactions tLRPC$TL_messageReactions;
        TLRPC$MessageReplies tLRPC$MessageReplies;
        TLRPC$MessageReplies tLRPC$MessageReplies2;
        ArrayList<TLRPC$Message> arrayList;
        int i4;
        TLRPC$TL_messageReplyHeader tLRPC$TL_messageReplyHeader;
        int i5 = this.commentLoadingMessageId;
        if (tLRPC$messages_Messages != null) {
            tLRPC$messages_Messages2 = null;
            if (i == 1 || i == 0 || i == tLRPC$TL_messages_discussionMessage.read_inbox_max_id || i2 > 0) {
                if (!tLRPC$messages_Messages.messages.isEmpty() && tLRPC$TL_messages_discussionMessage != null && !tLRPC$TL_messages_discussionMessage.messages.isEmpty()) {
                    TLRPC$Message tLRPC$Message = tLRPC$messages_Messages.messages.get(0);
                    if (tLRPC$Message == null || (tLRPC$TL_messageReplyHeader = tLRPC$Message.reply_to) == null) {
                        i4 = 0;
                    } else {
                        i4 = tLRPC$TL_messageReplyHeader.reply_to_top_id;
                        if (i4 == 0) {
                            i4 = tLRPC$TL_messageReplyHeader.reply_to_msg_id;
                        }
                    }
                    ArrayList<TLRPC$Message> arrayList2 = tLRPC$TL_messages_discussionMessage.messages;
                }
                tLRPC$messages_Messages2 = tLRPC$messages_Messages;
            }
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("processLoadedDiscussionMessage reset history");
            }
        } else {
            tLRPC$messages_Messages2 = tLRPC$messages_Messages;
        }
        ArrayList<MessageObject> arrayList3 = new ArrayList<>();
        if (tLRPC$TL_messages_discussionMessage != null && (arrayList = tLRPC$TL_messages_discussionMessage.messages) != null) {
            int size = arrayList.size();
            for (int i6 = 0; i6 < size; i6++) {
                TLRPC$Message tLRPC$Message2 = tLRPC$TL_messages_discussionMessage.messages.get(i6);
                if (!(tLRPC$Message2 instanceof TLRPC$TL_messageEmpty)) {
                    tLRPC$Message2.isThreadMessage = true;
                    arrayList3.add(new MessageObject(UserConfig.selectedAccount, tLRPC$Message2, true, true));
                }
            }
        }
        if (!arrayList3.isEmpty()) {
            Bundle bundle = new Bundle();
            long dialogId = arrayList3.get(0).getDialogId();
            bundle.putLong("chat_id", -dialogId);
            bundle.putInt("message_id", Math.max(1, tLRPC$TL_messages_discussionMessage.read_inbox_max_id));
            bundle.putInt("unread_count", tLRPC$TL_messages_discussionMessage.unread_count);
            bundle.putBoolean("historyPreloaded", tLRPC$messages_Messages2 != null);
            ChatActivity chatActivity = new ChatActivity(bundle);
            chatActivity.setThreadMessages(arrayList3, tLRPC$Chat, tLRPC$TL_messages_getDiscussionMessage.msg_id, tLRPC$TL_messages_discussionMessage.read_inbox_max_id, tLRPC$TL_messages_discussionMessage.read_outbox_max_id);
            if (i2 != 0) {
                chatActivity.highlightMessageId = i2;
            }
            if (messageObject2 != null && (tLRPC$MessageReplies = messageObject2.messageOwner.replies) != null && (tLRPC$MessageReplies2 = chatActivity.threadMessageObject.messageOwner.replies) != null) {
                tLRPC$MessageReplies.replies = tLRPC$MessageReplies2.replies;
            }
            if (messageObject2 != null && (tLRPC$TL_messageReactions = messageObject2.messageOwner.reactions) != null) {
                chatActivity.threadMessageObject.messageOwner.reactions = tLRPC$TL_messageReactions;
            }
            ChatActivity$$ExternalSyntheticLambda204 chatActivity$$ExternalSyntheticLambda204 = new ChatActivity$$ExternalSyntheticLambda204(this, new boolean[]{false}, i5, chatActivity);
            if (tLRPC$messages_Messages2 != null) {
                if (!tLRPC$messages_Messages2.messages.isEmpty()) {
                    for (int size2 = tLRPC$messages_Messages2.messages.size() - 1; size2 >= 0; size2--) {
                        TLRPC$Message tLRPC$Message3 = tLRPC$messages_Messages2.messages.get(size2);
                        int i7 = tLRPC$Message3.id;
                        if (i7 > i && !tLRPC$Message3.out) {
                            i3 = i7;
                            break;
                        }
                    }
                }
                i3 = 0;
                int classGuid = chatActivity.getClassGuid();
                NotificationCenter.getInstance(this.currentAccount).addObserver(new AnonymousClass115(classGuid, chatActivity$$ExternalSyntheticLambda204, chatActivity), NotificationCenter.messagesDidLoad);
                Utilities.stageQueue.postRunnable(new ChatActivity$$ExternalSyntheticLambda195(this, tLRPC$messages_Messages2, dialogId, i2, i, classGuid, i3, arrayList3));
                return;
            }
            chatActivity$$ExternalSyntheticLambda204.run();
            return;
        }
        this.commentLoadingMessageId = 0;
        this.chatListView.invalidateViews();
        if (messageObject != null) {
            openOriginalReplyChat(messageObject);
        } else if (getParentActivity() != null) {
            BulletinFactory.of(this).createErrorBulletin(LocaleController.getString("ChannelPostDeleted", 2131624958), this.themeDelegate).show();
        }
    }

    public /* synthetic */ void lambda$processLoadedDiscussionMessage$222(boolean[] zArr, int i, ChatActivity chatActivity) {
        if (zArr[0] || i != this.commentLoadingMessageId || !this.isFullyVisible || isFinishing()) {
            return;
        }
        zArr[0] = true;
        AndroidUtilities.runOnUIThread(new ChatActivity$$ExternalSyntheticLambda124(this), 200L);
        presentFragment(chatActivity);
        if (!isKeyboardVisible() || chatActivity.hideKeyboardOnShow()) {
            return;
        }
        chatActivity.chatActivityEnterView.getEditField().requestFocus();
    }

    public /* synthetic */ void lambda$processLoadedDiscussionMessage$221() {
        this.commentLoadingMessageId = 0;
        this.chatListView.invalidateViews();
    }

    /* renamed from: org.telegram.ui.ChatActivity$115 */
    /* loaded from: classes3.dex */
    public class AnonymousClass115 implements NotificationCenter.NotificationCenterDelegate {
        final /* synthetic */ ChatActivity val$chatActivity;
        final /* synthetic */ int val$commentsClassGuid;
        final /* synthetic */ Runnable val$openCommentsChat;

        AnonymousClass115(int i, Runnable runnable, ChatActivity chatActivity) {
            ChatActivity.this = r1;
            this.val$commentsClassGuid = i;
            this.val$openCommentsChat = runnable;
            this.val$chatActivity = chatActivity;
        }

        @Override // org.telegram.messenger.NotificationCenter.NotificationCenterDelegate
        public void didReceivedNotification(int i, int i2, Object... objArr) {
            int i3 = NotificationCenter.messagesDidLoad;
            if (i == i3 && ((Integer) objArr[10]).intValue() == this.val$commentsClassGuid) {
                this.val$openCommentsChat.run();
                AndroidUtilities.runOnUIThread(new ChatActivity$115$$ExternalSyntheticLambda0(this.val$chatActivity, i, i2, objArr), 50L);
                NotificationCenter.getInstance(((BaseFragment) ChatActivity.this).currentAccount).removeObserver(this, i3);
            }
        }
    }

    public /* synthetic */ void lambda$processLoadedDiscussionMessage$223(TLRPC$messages_Messages tLRPC$messages_Messages, long j, int i, int i2, int i3, int i4, ArrayList arrayList) {
        getMessagesController().processLoadedMessages(tLRPC$messages_Messages, tLRPC$messages_Messages.messages.size(), j, 0L, 30, i > 0 ? i : i2, 0, false, i3, i4, 0, 0, 0, i > 0 ? 3 : 2, true, 0, ((MessageObject) arrayList.get(arrayList.size() - 1)).getId(), 1, false, 0, true);
    }

    public void openDiscussionMessageChat(long j, MessageObject messageObject, int i, long j2, int i2, int i3, MessageObject messageObject2) {
        int i4 = i;
        TLRPC$Chat chat = getMessagesController().getChat(Long.valueOf(j));
        TLRPC$TL_messages_getDiscussionMessage tLRPC$TL_messages_getDiscussionMessage = new TLRPC$TL_messages_getDiscussionMessage();
        tLRPC$TL_messages_getDiscussionMessage.peer = MessagesController.getInputPeer(chat);
        tLRPC$TL_messages_getDiscussionMessage.msg_id = i4;
        if (BuildVars.LOGS_ENABLED) {
            FileLog.d("getDiscussionMessage chat = " + chat.id + " msg_id = " + i4);
        }
        this.commentLoadingMessageId = 0;
        this.savedDiscussionMessage = null;
        this.savedNoDiscussion = false;
        this.savedNoHistory = false;
        this.savedHistory = null;
        RecyclerListView recyclerListView = this.chatListView;
        if (recyclerListView != null) {
            recyclerListView.invalidateViews();
        }
        if (this.commentMessagesRequestId != -1) {
            getConnectionsManager().cancelRequest(this.commentMessagesRequestId, false);
        }
        if (this.commentRequestId != -1) {
            getConnectionsManager().cancelRequest(this.commentRequestId, false);
        }
        if (messageObject2 != null) {
            i4 = messageObject2.getId();
        }
        this.commentLoadingMessageId = i4;
        RecyclerListView recyclerListView2 = this.chatListView;
        if (recyclerListView2 != null) {
            recyclerListView2.invalidateViews();
        }
        int i5 = this.commentLoadingGuid + 1;
        this.commentLoadingGuid = i5;
        this.commentRequestId = getConnectionsManager().sendRequest(tLRPC$TL_messages_getDiscussionMessage, new ChatActivity$$ExternalSyntheticLambda222(this, i5, i2, j2, i3, messageObject2, tLRPC$TL_messages_getDiscussionMessage, chat, messageObject));
        getConnectionsManager().bindRequestToGuid(this.commentRequestId, this.classGuid);
    }

    public /* synthetic */ void lambda$openDiscussionMessageChat$229(int i, int i2, long j, int i3, MessageObject messageObject, TLRPC$TL_messages_getDiscussionMessage tLRPC$TL_messages_getDiscussionMessage, TLRPC$Chat tLRPC$Chat, MessageObject messageObject2, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        AndroidUtilities.runOnUIThread(new ChatActivity$$ExternalSyntheticLambda172(this, new ChatActivity$$ExternalSyntheticLambda165(this, i, i2, j, tLObject, i3, messageObject, tLRPC$TL_messages_getDiscussionMessage, tLRPC$Chat, messageObject2)));
    }

    public /* synthetic */ void lambda$openDiscussionMessageChat$227(int i, int i2, long j, TLObject tLObject, int i3, MessageObject messageObject, TLRPC$TL_messages_getDiscussionMessage tLRPC$TL_messages_getDiscussionMessage, TLRPC$Chat tLRPC$Chat, MessageObject messageObject2) {
        if (i != this.commentLoadingGuid) {
            return;
        }
        this.commentRequestId = -1;
        if (tLObject instanceof TLRPC$TL_messages_discussionMessage) {
            this.savedDiscussionMessage = (TLRPC$TL_messages_discussionMessage) tLObject;
            getMessagesController().putUsers(this.savedDiscussionMessage.users, false);
            getMessagesController().putChats(this.savedDiscussionMessage.chats, false);
        } else {
            this.savedNoDiscussion = true;
        }
        ArrayList arrayList = new ArrayList();
        TLRPC$TL_messages_discussionMessage tLRPC$TL_messages_discussionMessage = this.savedDiscussionMessage;
        if (tLRPC$TL_messages_discussionMessage != null && tLRPC$TL_messages_discussionMessage.messages != null) {
            for (int i4 = 0; i4 < this.savedDiscussionMessage.messages.size(); i4++) {
                TLRPC$Message tLRPC$Message = this.savedDiscussionMessage.messages.get(i4);
                if (!(tLRPC$Message instanceof TLRPC$TL_messageEmpty)) {
                    arrayList.add(tLRPC$Message);
                }
            }
        }
        if (arrayList.size() > 0) {
            TLRPC$Message tLRPC$Message2 = (TLRPC$Message) arrayList.get(0);
            TLRPC$TL_messages_getReplies tLRPC$TL_messages_getReplies = new TLRPC$TL_messages_getReplies();
            tLRPC$TL_messages_getReplies.peer = getMessagesController().getInputPeer(tLRPC$Message2.peer_id);
            tLRPC$TL_messages_getReplies.msg_id = tLRPC$Message2.id;
            tLRPC$TL_messages_getReplies.offset_date = 0;
            tLRPC$TL_messages_getReplies.limit = 30;
            if (i3 > 0) {
                tLRPC$TL_messages_getReplies.offset_id = i3;
                tLRPC$TL_messages_getReplies.add_offset = (-30) / 2;
            } else {
                tLRPC$TL_messages_getReplies.offset_id = i2 == 0 ? 1 : i2;
                tLRPC$TL_messages_getReplies.add_offset = (-30) + 10;
            }
            int i5 = 1 + this.commentMessagesLoadingGuid;
            this.commentMessagesLoadingGuid = i5;
            this.commentMessagesRequestId = getConnectionsManager().sendRequest(tLRPC$TL_messages_getReplies, new ChatActivity$$ExternalSyntheticLambda223(this, i5, i2, messageObject, tLRPC$TL_messages_getDiscussionMessage, tLRPC$Chat, i3, messageObject2));
            return;
        }
        this.savedNoHistory = true;
        processLoadedDiscussionMessage(this.savedNoDiscussion, this.savedDiscussionMessage, true, this.savedHistory, i2, messageObject, tLRPC$TL_messages_getDiscussionMessage, tLRPC$Chat, i3, messageObject2);
    }

    public /* synthetic */ void lambda$openDiscussionMessageChat$225(int i, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error, int i2, MessageObject messageObject, TLRPC$TL_messages_getDiscussionMessage tLRPC$TL_messages_getDiscussionMessage, TLRPC$Chat tLRPC$Chat, int i3, MessageObject messageObject2) {
        lambda$openDiscussionMessageChat$228(new ChatActivity$$ExternalSyntheticLambda169(this, i, tLObject, tLRPC$TL_error, i2, messageObject, tLRPC$TL_messages_getDiscussionMessage, tLRPC$Chat, i3, messageObject2));
    }

    public /* synthetic */ void lambda$openDiscussionMessageChat$226(int i, int i2, MessageObject messageObject, TLRPC$TL_messages_getDiscussionMessage tLRPC$TL_messages_getDiscussionMessage, TLRPC$Chat tLRPC$Chat, int i3, MessageObject messageObject2, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        AndroidUtilities.runOnUIThread(new ChatActivity$$ExternalSyntheticLambda168(this, i, tLObject, tLRPC$TL_error, i2, messageObject, tLRPC$TL_messages_getDiscussionMessage, tLRPC$Chat, i3, messageObject2));
    }

    public /* synthetic */ void lambda$openDiscussionMessageChat$224(int i, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error, int i2, MessageObject messageObject, TLRPC$TL_messages_getDiscussionMessage tLRPC$TL_messages_getDiscussionMessage, TLRPC$Chat tLRPC$Chat, int i3, MessageObject messageObject2) {
        if (i != this.commentMessagesLoadingGuid) {
            return;
        }
        this.commentMessagesRequestId = -1;
        if (tLObject != null) {
            this.savedHistory = (TLRPC$messages_Messages) tLObject;
        } else if ("CHANNEL_PRIVATE".equals(tLRPC$TL_error.text)) {
            if (getParentActivity() != null) {
                AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity(), this.themeDelegate);
                builder.setTitle(LocaleController.getString("AppName", 2131624384));
                builder.setMessage(LocaleController.getString("JoinByPeekChannelText", 2131626359));
                builder.setPositiveButton(LocaleController.getString("OK", 2131627127), null);
                showDialog(builder.create());
            }
            this.commentLoadingMessageId = 0;
            this.chatListView.invalidateViews();
            return;
        } else {
            this.savedNoHistory = true;
        }
        processLoadedDiscussionMessage(this.savedNoDiscussion, this.savedDiscussionMessage, this.savedNoHistory, this.savedHistory, i2, messageObject, tLRPC$TL_messages_getDiscussionMessage, tLRPC$Chat, i3, messageObject2);
    }

    public void openOriginalReplyChat(MessageObject messageObject) {
        if (UserObject.isUserSelf(this.currentUser)) {
            TLRPC$MessageFwdHeader tLRPC$MessageFwdHeader = messageObject.messageOwner.fwd_from;
            if (tLRPC$MessageFwdHeader.saved_from_peer.user_id == this.currentUser.id) {
                scrollToMessageId(tLRPC$MessageFwdHeader.saved_from_msg_id, messageObject.getId(), true, 0, true, 0);
                return;
            }
        }
        Bundle bundle = new Bundle();
        TLRPC$Peer tLRPC$Peer = messageObject.messageOwner.fwd_from.saved_from_peer;
        long j = tLRPC$Peer.channel_id;
        if (j != 0) {
            bundle.putLong("chat_id", j);
        } else {
            long j2 = tLRPC$Peer.chat_id;
            if (j2 != 0) {
                bundle.putLong("chat_id", j2);
            } else {
                long j3 = tLRPC$Peer.user_id;
                if (j3 != 0) {
                    bundle.putLong("user_id", j3);
                }
            }
        }
        bundle.putInt("message_id", messageObject.messageOwner.fwd_from.saved_from_msg_id);
        if (getMessagesController().checkCanOpenChat(bundle, this)) {
            presentFragment(new ChatActivity(bundle));
        }
    }

    public void showRequestUrlAlert(TLRPC$TL_urlAuthResultRequest tLRPC$TL_urlAuthResultRequest, TLRPC$TL_messages_requestUrlAuth tLRPC$TL_messages_requestUrlAuth, String str, boolean z) {
        if (getParentActivity() == null) {
            return;
        }
        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity(), this.themeDelegate);
        builder.setTitle(LocaleController.getString("OpenUrlTitle", 2131627160));
        String string = LocaleController.getString("OpenUrlAlert2", 2131627157);
        int indexOf = string.indexOf("%");
        SpannableStringBuilder spannableStringBuilder = new SpannableStringBuilder(String.format(string, str));
        if (indexOf >= 0) {
            spannableStringBuilder.setSpan(new URLSpan(str), indexOf, str.length() + indexOf, 33);
        }
        builder.setMessage(spannableStringBuilder);
        builder.setMessageTextViewClickable(false);
        builder.setNegativeButton(LocaleController.getString("Cancel", 2131624832), null);
        int i = 2;
        CheckBoxCell[] checkBoxCellArr = new CheckBoxCell[2];
        LinearLayout linearLayout = new LinearLayout(getParentActivity());
        linearLayout.setOrientation(1);
        TLRPC$User currentUser = getUserConfig().getCurrentUser();
        int i2 = 0;
        while (true) {
            if (i2 < (tLRPC$TL_urlAuthResultRequest.request_write_access ? 2 : 1)) {
                checkBoxCellArr[i2] = new CheckBoxCell(getParentActivity(), 5, this.themeDelegate);
                checkBoxCellArr[i2].setBackgroundDrawable(Theme.getSelectorDrawable(false));
                checkBoxCellArr[i2].setMultiline(true);
                checkBoxCellArr[i2].setTag(Integer.valueOf(i2));
                if (i2 == 0) {
                    Object[] objArr = new Object[i];
                    objArr[0] = tLRPC$TL_urlAuthResultRequest.domain;
                    objArr[1] = ContactsController.formatName(currentUser.first_name, currentUser.last_name);
                    SpannableStringBuilder replaceTags = AndroidUtilities.replaceTags(LocaleController.formatString("OpenUrlOption1", 2131627158, objArr));
                    int indexOf2 = TextUtils.indexOf(replaceTags, tLRPC$TL_urlAuthResultRequest.domain);
                    if (indexOf2 >= 0) {
                        replaceTags.setSpan(new URLSpan(""), indexOf2, tLRPC$TL_urlAuthResultRequest.domain.length() + indexOf2, 33);
                    }
                    checkBoxCellArr[i2].setText(replaceTags, "", true, false);
                } else {
                    checkBoxCellArr[i2].setText(AndroidUtilities.replaceTags(LocaleController.formatString("OpenUrlOption2", 2131627159, UserObject.getFirstName(tLRPC$TL_urlAuthResultRequest.bot))), "", true, false);
                }
                checkBoxCellArr[i2].setPadding(LocaleController.isRTL ? AndroidUtilities.dp(16.0f) : AndroidUtilities.dp(8.0f), 0, LocaleController.isRTL ? AndroidUtilities.dp(8.0f) : AndroidUtilities.dp(16.0f), 0);
                linearLayout.addView(checkBoxCellArr[i2], LayoutHelper.createLinear(-1, -2));
                checkBoxCellArr[i2].setOnClickListener(new ChatActivity$$ExternalSyntheticLambda93(checkBoxCellArr));
                i2++;
                i = 2;
            } else {
                builder.setCustomViewOffset(12);
                builder.setView(linearLayout);
                builder.setPositiveButton(LocaleController.getString("Open", 2131627142), new ChatActivity$$ExternalSyntheticLambda44(this, checkBoxCellArr, str, tLRPC$TL_messages_requestUrlAuth, tLRPC$TL_urlAuthResultRequest, z));
                showDialog(builder.create());
                return;
            }
        }
    }

    public static /* synthetic */ void lambda$showRequestUrlAlert$230(CheckBoxCell[] checkBoxCellArr, View view) {
        if (!view.isEnabled()) {
            return;
        }
        Integer num = (Integer) view.getTag();
        checkBoxCellArr[num.intValue()].setChecked(!checkBoxCellArr[num.intValue()].isChecked(), true);
        if (num.intValue() != 0 || checkBoxCellArr[1] == null) {
            return;
        }
        if (checkBoxCellArr[num.intValue()].isChecked()) {
            checkBoxCellArr[1].setEnabled(true);
            return;
        }
        checkBoxCellArr[1].setChecked(false, true);
        checkBoxCellArr[1].setEnabled(false);
    }

    public /* synthetic */ void lambda$showRequestUrlAlert$235(CheckBoxCell[] checkBoxCellArr, String str, TLRPC$TL_messages_requestUrlAuth tLRPC$TL_messages_requestUrlAuth, TLRPC$TL_urlAuthResultRequest tLRPC$TL_urlAuthResultRequest, boolean z, DialogInterface dialogInterface, int i) {
        if (!checkBoxCellArr[0].isChecked()) {
            Browser.openUrl((Context) getParentActivity(), str, false);
            return;
        }
        AlertDialog[] alertDialogArr = {new AlertDialog(getParentActivity(), 3, this.themeDelegate)};
        TLRPC$TL_messages_acceptUrlAuth tLRPC$TL_messages_acceptUrlAuth = new TLRPC$TL_messages_acceptUrlAuth();
        String str2 = tLRPC$TL_messages_requestUrlAuth.url;
        if (str2 != null) {
            tLRPC$TL_messages_acceptUrlAuth.url = str2;
            tLRPC$TL_messages_acceptUrlAuth.flags |= 4;
        } else {
            tLRPC$TL_messages_acceptUrlAuth.button_id = tLRPC$TL_messages_requestUrlAuth.button_id;
            tLRPC$TL_messages_acceptUrlAuth.msg_id = tLRPC$TL_messages_requestUrlAuth.msg_id;
            tLRPC$TL_messages_acceptUrlAuth.peer = tLRPC$TL_messages_requestUrlAuth.peer;
            tLRPC$TL_messages_acceptUrlAuth.flags |= 2;
        }
        if (tLRPC$TL_urlAuthResultRequest.request_write_access) {
            tLRPC$TL_messages_acceptUrlAuth.write_allowed = checkBoxCellArr[1].isChecked();
        }
        try {
            alertDialogArr[0].dismiss();
        } catch (Throwable unused) {
        }
        alertDialogArr[0] = null;
        AndroidUtilities.runOnUIThread(new ChatActivity$$ExternalSyntheticLambda199(this, alertDialogArr, getConnectionsManager().sendRequest(tLRPC$TL_messages_acceptUrlAuth, new ChatActivity$$ExternalSyntheticLambda225(this, str, tLRPC$TL_messages_requestUrlAuth, z))), 500L);
    }

    public /* synthetic */ void lambda$showRequestUrlAlert$232(String str, TLRPC$TL_messages_requestUrlAuth tLRPC$TL_messages_requestUrlAuth, boolean z, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        AndroidUtilities.runOnUIThread(new ChatActivity$$ExternalSyntheticLambda188(this, tLObject, str, tLRPC$TL_messages_requestUrlAuth, z));
    }

    public /* synthetic */ void lambda$showRequestUrlAlert$231(TLObject tLObject, String str, TLRPC$TL_messages_requestUrlAuth tLRPC$TL_messages_requestUrlAuth, boolean z) {
        if (tLObject instanceof TLRPC$TL_urlAuthResultAccepted) {
            Browser.openUrl((Context) getParentActivity(), ((TLRPC$TL_urlAuthResultAccepted) tLObject).url, false);
        } else if (tLObject instanceof TLRPC$TL_urlAuthResultDefault) {
            Browser.openUrl((Context) getParentActivity(), str, false);
        } else {
            String str2 = tLRPC$TL_messages_requestUrlAuth.url;
            if (str2 == null) {
                return;
            }
            AlertsCreator.showOpenUrlAlert(this, str2, false, z, this.themeDelegate);
        }
    }

    public /* synthetic */ void lambda$showRequestUrlAlert$234(AlertDialog[] alertDialogArr, int i) {
        if (alertDialogArr[0] == null) {
            return;
        }
        alertDialogArr[0].setOnCancelListener(new ChatActivity$$ExternalSyntheticLambda21(this, i));
        showDialog(alertDialogArr[0]);
    }

    public /* synthetic */ void lambda$showRequestUrlAlert$233(int i, DialogInterface dialogInterface) {
        getConnectionsManager().cancelRequest(i, true);
    }

    private void removeMessageObject(MessageObject messageObject) {
        int indexOf = this.messages.indexOf(messageObject);
        if (indexOf == -1) {
            return;
        }
        this.messages.remove(indexOf);
        ChatActivityAdapter chatActivityAdapter = this.chatAdapter;
        if (chatActivityAdapter == null) {
            return;
        }
        chatActivityAdapter.notifyItemRemoved(chatActivityAdapter.messagesStartRow + indexOf);
    }

    public void openVCard(TLRPC$User tLRPC$User, String str, String str2, String str3) {
        try {
            File sharingDirectory = AndroidUtilities.getSharingDirectory();
            sharingDirectory.mkdirs();
            File file = new File(sharingDirectory, "vcard.vcf");
            BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(file));
            bufferedWriter.write(str);
            bufferedWriter.close();
            showDialog(new PhonebookShareAlert(this, null, tLRPC$User, null, file, str2, str3, this.themeDelegate));
        } catch (Exception e) {
            FileLog.e(e);
        }
    }

    public void setCellSelectionBackground(MessageObject messageObject, ChatMessageCell chatMessageCell, int i, boolean z) {
        boolean z2;
        MessageObject.GroupedMessages validGroupedMessage = getValidGroupedMessage(messageObject);
        boolean z3 = false;
        if (validGroupedMessage != null) {
            int i2 = 0;
            while (true) {
                if (i2 >= validGroupedMessage.messages.size()) {
                    z2 = false;
                    break;
                } else if (this.selectedMessagesIds[i].indexOfKey(validGroupedMessage.messages.get(i2).getId()) < 0) {
                    z2 = true;
                    break;
                } else {
                    i2++;
                }
            }
            if (!z2) {
                validGroupedMessage = null;
            }
        }
        chatMessageCell.setDrawSelectionBackground(validGroupedMessage == null);
        if (validGroupedMessage == null) {
            z3 = true;
        }
        chatMessageCell.setChecked(true, z3, z);
    }

    public void openClickableLink(CharacterStyle characterStyle, String str, boolean z, ChatMessageCell chatMessageCell, MessageObject messageObject) {
        TLRPC$User tLRPC$User;
        String str2;
        TLRPC$Message tLRPC$Message;
        if (z) {
            BottomSheet.Builder builder = new BottomSheet.Builder(getParentActivity(), false, this.themeDelegate);
            int intValue = str.startsWith("video?") ? Utilities.parseInt((CharSequence) str).intValue() : -1;
            if (intValue >= 0) {
                builder.setTitle(AndroidUtilities.formatDuration(intValue, false));
            } else {
                try {
                    str2 = URLDecoder.decode(str.replaceAll("\\+", "%2b"), "UTF-8");
                } catch (Exception e) {
                    FileLog.e(e);
                    str2 = str;
                }
                builder.setTitle(str2);
                builder.setTitleMultipleLines(true);
            }
            builder.setItems(getMessagesController().isChatNoForwards(this.currentChat) || (messageObject != null && (tLRPC$Message = messageObject.messageOwner) != null && tLRPC$Message.noforwards) ? new CharSequence[]{LocaleController.getString("Open", 2131627142)} : new CharSequence[]{LocaleController.getString("Open", 2131627142), LocaleController.getString("Copy", 2131625272)}, new ChatActivity$$ExternalSyntheticLambda37(this, str, characterStyle, messageObject, chatMessageCell, intValue));
            builder.setOnPreDismissListener(new ChatActivity$$ExternalSyntheticLambda47(chatMessageCell));
            showDialog(builder.create());
        } else if (str.startsWith("@")) {
            String lowerCase = str.substring(1).toLowerCase();
            TLRPC$Chat tLRPC$Chat = this.currentChat;
            if ((tLRPC$Chat != null && !TextUtils.isEmpty(tLRPC$Chat.username) && lowerCase.equals(this.currentChat.username.toLowerCase())) || ((tLRPC$User = this.currentUser) != null && !TextUtils.isEmpty(tLRPC$User.username) && lowerCase.equals(this.currentUser.username.toLowerCase()))) {
                Bundle bundle = new Bundle();
                TLRPC$Chat tLRPC$Chat2 = this.currentChat;
                if (tLRPC$Chat2 != null) {
                    bundle.putLong("chat_id", tLRPC$Chat2.id);
                } else {
                    TLRPC$User tLRPC$User2 = this.currentUser;
                    if (tLRPC$User2 != null) {
                        bundle.putLong("user_id", tLRPC$User2.id);
                        if (this.currentEncryptedChat != null) {
                            bundle.putLong("dialog_id", this.dialog_id);
                        }
                    }
                }
                ProfileActivity profileActivity = new ProfileActivity(bundle, this.avatarContainer.getSharedMediaPreloader());
                profileActivity.setPlayProfileAnimation(1);
                profileActivity.setChatInfo(this.chatInfo);
                profileActivity.setUserInfo(this.userInfo);
                presentFragment(profileActivity);
                return;
            }
            getMessagesController().openByUserName(lowerCase, this, 0);
        } else if (str.startsWith("#") || str.startsWith("$")) {
            if (ChatObject.isChannel(this.currentChat)) {
                int i = this.chatMode;
                if (i == 1 || i == 2) {
                    this.chatActivityDelegate.openSearch(str);
                    finishFragment();
                    return;
                }
                openSearchWithText(str);
                return;
            }
            DialogsActivity dialogsActivity = new DialogsActivity(null);
            dialogsActivity.setSearchString(str);
            presentFragment(dialogsActivity);
        } else {
            processExternalUrl(0, str, false);
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:50:0x00ea A[RETURN] */
    /* JADX WARN: Removed duplicated region for block: B:51:0x00eb  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$openClickableLink$236(String str, CharacterStyle characterStyle, MessageObject messageObject, ChatMessageCell chatMessageCell, int i, DialogInterface dialogInterface, int i2) {
        String str2;
        MessageObject messageObject2;
        boolean z = false;
        if (i2 == 0) {
            if (str.startsWith("video?")) {
                didPressMessageUrl(characterStyle, false, messageObject, chatMessageCell);
            } else {
                openClickableLink(characterStyle, str, false, chatMessageCell, messageObject);
            }
        } else if (i2 != 1) {
        } else {
            if (str.startsWith("video?") && messageObject != null && !messageObject.scheduled) {
                if (messageObject.isVideo() || messageObject.isRoundVideo() || messageObject.isVoice() || messageObject.isMusic()) {
                    z = true;
                }
                if (!z && (messageObject2 = messageObject.replyMessageObject) != null) {
                    messageObject = messageObject2;
                }
                long dialogId = messageObject.getDialogId();
                int id = messageObject.getId();
                TLRPC$MessageFwdHeader tLRPC$MessageFwdHeader = messageObject.messageOwner.fwd_from;
                if (tLRPC$MessageFwdHeader != null) {
                    TLRPC$Peer tLRPC$Peer = tLRPC$MessageFwdHeader.saved_from_peer;
                    if (tLRPC$Peer != null) {
                        dialogId = MessageObject.getPeerId(tLRPC$Peer);
                        id = messageObject.messageOwner.fwd_from.saved_from_msg_id;
                    } else {
                        TLRPC$Peer tLRPC$Peer2 = tLRPC$MessageFwdHeader.from_id;
                        if (tLRPC$Peer2 != null) {
                            dialogId = MessageObject.getPeerId(tLRPC$Peer2);
                            id = messageObject.messageOwner.fwd_from.channel_post;
                        }
                    }
                }
                if (DialogObject.isChatDialog(dialogId)) {
                    TLRPC$Chat chat = MessagesController.getInstance(this.currentAccount).getChat(Long.valueOf(-dialogId));
                    if (chat != null && chat.username != null) {
                        str2 = "https://t.me/" + chat.username + "/" + id + "?t=" + i;
                        if (str2 != null) {
                            return;
                        }
                        AndroidUtilities.addToClipboard(str2);
                    }
                    str2 = null;
                    if (str2 != null) {
                    }
                } else {
                    TLRPC$User user = MessagesController.getInstance(this.currentAccount).getUser(Long.valueOf(dialogId));
                    if (user != null && user.username != null) {
                        str2 = "https://t.me/" + user.username + "/" + id + "?t=" + i;
                        if (str2 != null) {
                        }
                    }
                    str2 = null;
                    if (str2 != null) {
                    }
                }
            } else {
                AndroidUtilities.addToClipboard(str);
            }
            if (str.startsWith("@")) {
                this.undoView.showWithAction(0L, 56, (Runnable) null);
            } else if (str.startsWith("#") || str.startsWith("$")) {
                this.undoView.showWithAction(0L, 57, (Runnable) null);
            } else {
                this.undoView.showWithAction(0L, 59, (Runnable) null);
            }
        }
    }

    public static /* synthetic */ void lambda$openClickableLink$237(ChatMessageCell chatMessageCell, DialogInterface dialogInterface) {
        if (chatMessageCell != null) {
            chatMessageCell.resetPressedLink(-1);
        }
    }

    public void processExternalUrl(int i, String str, boolean z) {
        boolean z2;
        boolean z3 = false;
        boolean z4 = true;
        try {
            Uri parse = Uri.parse(str);
            String lowerCase = parse.getHost() != null ? parse.getHost().toLowerCase() : "";
            if ((this.currentEncryptedChat == null || getMessagesController().secretWebpagePreview == 1) && getMessagesController().authDomains.contains(lowerCase)) {
                SendMessagesHelper sendMessagesHelper = getSendMessagesHelper();
                if (i != 0 && i != 2) {
                    z2 = false;
                    sendMessagesHelper.requestUrlAuth(str, this, z2);
                    return;
                }
                z2 = true;
                sendMessagesHelper.requestUrlAuth(str, this, z2);
                return;
            }
        } catch (Exception e) {
            FileLog.e(e);
        }
        if (z || AndroidUtilities.shouldShowUrlInAlert(str)) {
            if (i == 0 || i == 2) {
                AlertsCreator.showOpenUrlAlert(this, str, true, true, true, this.themeDelegate);
            } else if (i != 1) {
            } else {
                AlertsCreator.showOpenUrlAlert(this, str, true, true, false, this.themeDelegate);
            }
        } else if (i == 0) {
            Browser.openUrl(getParentActivity(), str);
        } else if (i == 1) {
            Activity parentActivity = getParentActivity();
            if (this.inlineReturn != 0) {
                z4 = false;
            }
            Browser.openUrl((Context) parentActivity, str, z4, false);
        } else if (i != 2) {
        } else {
            Activity parentActivity2 = getParentActivity();
            if (this.inlineReturn == 0) {
                z3 = true;
            }
            Browser.openUrl(parentActivity2, str, z3);
        }
    }

    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Type inference failed for: r2v18 */
    /* JADX WARN: Type inference failed for: r2v21 */
    /* JADX WARN: Type inference failed for: r2v22 */
    /* JADX WARN: Type inference failed for: r2v25 */
    /* JADX WARN: Type inference failed for: r2v29 */
    /* JADX WARN: Type inference failed for: r2v30 */
    /* JADX WARN: Type inference failed for: r2v32 */
    /* JADX WARN: Type inference failed for: r2v33 */
    /* JADX WARN: Type inference failed for: r2v34 */
    /* JADX WARN: Type inference failed for: r2v35 */
    public void didPressMessageUrl(CharacterStyle characterStyle, boolean z, MessageObject messageObject, ChatMessageCell chatMessageCell) {
        TLRPC$WebPage tLRPC$WebPage;
        String str;
        MessageObject messageObject2;
        MessageObject messageObject3;
        MessageObject messageObject4;
        TLRPC$WebPage tLRPC$WebPage2;
        MessageObject messageObject5;
        TLRPC$Message tLRPC$Message;
        if (characterStyle == null || getParentActivity() == null) {
            return;
        }
        boolean z2 = true;
        boolean z3 = true;
        ?? r2 = 1;
        ?? r22 = 1;
        boolean z4 = false;
        boolean z5 = getMessagesController().isChatNoForwards(this.currentChat) || !(messageObject == null || (tLRPC$Message = messageObject.messageOwner) == null || !tLRPC$Message.noforwards);
        ChatMessageCell chatMessageCell2 = null;
        if (characterStyle instanceof URLSpanMono) {
            if (!z5) {
                ((URLSpanMono) characterStyle).copyToClipboard();
                getUndoView().showWithAction(0L, 58, (Runnable) null);
            }
            if (!z || chatMessageCell == null) {
                return;
            }
            chatMessageCell.resetPressedLink(-1);
        } else if (characterStyle instanceof URLSpanUserMention) {
            TLRPC$User user = getMessagesController().getUser(Utilities.parseLong(((URLSpanUserMention) characterStyle).getURL()));
            if (user != null) {
                MessagesController.openChatOrProfileWith(user, null, this, 0, false);
            }
            if (!z || chatMessageCell == null) {
                return;
            }
            chatMessageCell.resetPressedLink(-1);
        } else if (characterStyle instanceof URLSpanNoUnderline) {
            String url = ((URLSpanNoUnderline) characterStyle).getURL();
            if (messageObject != null && url.startsWith("/")) {
                if (URLSpanBotCommand.enabled) {
                    ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
                    TLRPC$Chat tLRPC$Chat = this.currentChat;
                    if (tLRPC$Chat == null || !tLRPC$Chat.megagroup) {
                        z3 = false;
                    }
                    chatActivityEnterView.setCommand(messageObject, url, z, z3);
                    if (!z && this.chatActivityEnterView.getFieldText() == null) {
                        hideFieldPanel(false);
                    }
                }
                if (!z || chatMessageCell == null) {
                    return;
                }
                chatMessageCell.resetPressedLink(-1);
            } else if (messageObject != null && url.startsWith("video") && !z) {
                int intValue = Utilities.parseInt((CharSequence) url).intValue();
                if (messageObject.isYouTubeVideo()) {
                    tLRPC$WebPage2 = messageObject.messageOwner.media.webpage;
                    messageObject4 = messageObject;
                } else {
                    MessageObject messageObject6 = messageObject.replyMessageObject;
                    if (messageObject6 == null || !messageObject6.isYouTubeVideo()) {
                        messageObject4 = messageObject;
                        tLRPC$WebPage2 = null;
                    } else {
                        MessageObject messageObject7 = messageObject.replyMessageObject;
                        messageObject4 = messageObject7;
                        tLRPC$WebPage2 = messageObject7.messageOwner.media.webpage;
                    }
                }
                if (tLRPC$WebPage2 != null) {
                    EmbedBottomSheet.show(getParentActivity(), messageObject4, this.photoViewerProvider, tLRPC$WebPage2.site_name, tLRPC$WebPage2.title, tLRPC$WebPage2.url, tLRPC$WebPage2.embed_url, tLRPC$WebPage2.embed_width, tLRPC$WebPage2.embed_height, intValue, isKeyboardVisible());
                    return;
                }
                if (messageObject4.isVideo() || (messageObject5 = messageObject4.replyMessageObject) == null) {
                    chatMessageCell2 = chatMessageCell;
                } else {
                    SparseArray<MessageObject>[] sparseArrayArr = this.messagesDict;
                    if (messageObject5.getDialogId() == this.dialog_id) {
                        r2 = 0;
                    }
                    ?? r23 = r2 == true ? 1 : 0;
                    ?? r24 = r2 == true ? 1 : 0;
                    MessageObject messageObject8 = sparseArrayArr[r23].get(messageObject4.replyMessageObject.getId());
                    messageObject4 = messageObject8 == null ? messageObject4.replyMessageObject : messageObject8;
                }
                messageObject4.forceSeekTo = intValue / messageObject4.getDuration();
                openPhotoViewerForMessage(chatMessageCell2, messageObject4);
            } else if (messageObject != null && url.startsWith("audio")) {
                int intValue2 = Utilities.parseInt((CharSequence) url).intValue();
                if (messageObject.isMusic() || (messageObject3 = messageObject.replyMessageObject) == null) {
                    messageObject2 = messageObject;
                } else {
                    SparseArray<MessageObject>[] sparseArrayArr2 = this.messagesDict;
                    if (messageObject3.getDialogId() == this.dialog_id) {
                        r22 = 0;
                    }
                    ?? r25 = r22 == true ? 1 : 0;
                    ?? r26 = r22 == true ? 1 : 0;
                    messageObject2 = sparseArrayArr2[r25].get(messageObject.replyMessageObject.getId());
                }
                float f = intValue2;
                float duration = f / messageObject2.getDuration();
                MediaController mediaController = getMediaController();
                if (mediaController.isPlayingMessage(messageObject2)) {
                    messageObject2.audioProgress = duration;
                    mediaController.seekToProgress(messageObject2, duration);
                    if (mediaController.isMessagePaused()) {
                        mediaController.playMessage(messageObject2);
                    }
                } else {
                    messageObject2.forceSeekTo = f / messageObject2.getDuration();
                    mediaController.playMessage(messageObject2);
                }
                if (!z || chatMessageCell == null) {
                    return;
                }
                chatMessageCell.resetPressedLink(-1);
            } else if (url.startsWith("card:")) {
                String substring = url.substring(5);
                AlertDialog[] alertDialogArr = {new AlertDialog(getParentActivity(), 3, this.themeDelegate)};
                TLRPC$TL_payments_getBankCardData tLRPC$TL_payments_getBankCardData = new TLRPC$TL_payments_getBankCardData();
                tLRPC$TL_payments_getBankCardData.number = substring;
                AndroidUtilities.runOnUIThread(new ChatActivity$$ExternalSyntheticLambda202(this, alertDialogArr, getConnectionsManager().sendRequest(tLRPC$TL_payments_getBankCardData, new ChatActivity$$ExternalSyntheticLambda231(this, alertDialogArr, substring, chatMessageCell), null, null, 0, getMessagesController().webFileDatacenterId, 1, true), chatMessageCell), 500L);
            } else {
                openClickableLink(characterStyle, url, z, chatMessageCell, messageObject);
            }
        } else {
            String url2 = ((URLSpan) characterStyle).getURL();
            if (z) {
                BottomSheet.Builder builder = new BottomSheet.Builder(getParentActivity(), false, this.themeDelegate);
                try {
                    str = URLDecoder.decode(url2.replaceAll("\\+", "%2b"), "UTF-8");
                } catch (Exception e) {
                    FileLog.e(e);
                    str = url2;
                }
                builder.setTitle(str);
                builder.setTitleMultipleLines(true);
                builder.setItems(z5 ? new CharSequence[]{LocaleController.getString("Open", 2131627142)} : new CharSequence[]{LocaleController.getString("Open", 2131627142), LocaleController.getString("Copy", 2131625272)}, new ChatActivity$$ExternalSyntheticLambda36(this, url2));
                builder.setOnPreDismissListener(new ChatActivity$$ExternalSyntheticLambda45(chatMessageCell));
                showDialog(builder.create());
                return;
            }
            boolean z6 = characterStyle instanceof URLSpanReplacement;
            if ((!z6 || (url2 != null && url2.startsWith("mailto:"))) && !AndroidUtilities.shouldShowUrlInAlert(url2)) {
                if (messageObject != null) {
                    TLRPC$MessageMedia tLRPC$MessageMedia = messageObject.messageOwner.media;
                    if ((tLRPC$MessageMedia instanceof TLRPC$TL_messageMediaWebPage) && (tLRPC$WebPage = tLRPC$MessageMedia.webpage) != null && tLRPC$WebPage.cached_page != null) {
                        String lowerCase = url2.toLowerCase();
                        String lowerCase2 = messageObject.messageOwner.media.webpage.url.toLowerCase();
                        if ((lowerCase.contains("telegram.org/blog") || Browser.isTelegraphUrl(lowerCase, false) || lowerCase.contains("t.me/iv")) && (lowerCase.contains(lowerCase2) || lowerCase2.contains(lowerCase))) {
                            ArticleViewer.getInstance().setParentActivity(getParentActivity(), this);
                            ArticleViewer.getInstance().open(messageObject);
                            return;
                        }
                    }
                }
                if (openLinkInternally(url2, messageObject != null ? messageObject.getId() : 0)) {
                    return;
                }
                z2 = z6;
            } else {
                if (openLinkInternally(url2, messageObject != null ? messageObject.getId() : 0)) {
                    return;
                }
            }
            if (!Browser.urlMustNotHaveConfirmation(url2)) {
                z4 = z2;
            }
            processExternalUrl(2, url2, z4);
        }
    }

    public /* synthetic */ void lambda$didPressMessageUrl$241(AlertDialog[] alertDialogArr, String str, ChatMessageCell chatMessageCell, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        AndroidUtilities.runOnUIThread(new ChatActivity$$ExternalSyntheticLambda203(this, alertDialogArr, tLObject, str, chatMessageCell));
    }

    public /* synthetic */ void lambda$didPressMessageUrl$240(AlertDialog[] alertDialogArr, TLObject tLObject, String str, ChatMessageCell chatMessageCell) {
        try {
            alertDialogArr[0].dismiss();
        } catch (Throwable unused) {
        }
        alertDialogArr[0] = null;
        if (tLObject instanceof TLRPC$TL_payments_bankCardData) {
            if (getParentActivity() != null) {
                TLRPC$TL_payments_bankCardData tLRPC$TL_payments_bankCardData = (TLRPC$TL_payments_bankCardData) tLObject;
                BottomSheet.Builder builder = new BottomSheet.Builder(getParentActivity(), false, this.themeDelegate);
                ArrayList arrayList = new ArrayList();
                int size = tLRPC$TL_payments_bankCardData.open_urls.size();
                for (int i = 0; i < size; i++) {
                    arrayList.add(tLRPC$TL_payments_bankCardData.open_urls.get(i).name);
                }
                arrayList.add(LocaleController.getString("CopyCardNumber", 2131625273));
                builder.setTitle(tLRPC$TL_payments_bankCardData.title);
                builder.setItems((CharSequence[]) arrayList.toArray(new CharSequence[0]), new ChatActivity$$ExternalSyntheticLambda41(this, tLRPC$TL_payments_bankCardData, str));
                builder.setOnPreDismissListener(new ChatActivity$$ExternalSyntheticLambda46(chatMessageCell));
                showDialog(builder.create());
            }
        } else {
            if (chatMessageCell == null) {
                return;
            }
            chatMessageCell.resetPressedLink(-1);
        }
    }

    public /* synthetic */ void lambda$didPressMessageUrl$238(TLRPC$TL_payments_bankCardData tLRPC$TL_payments_bankCardData, String str, DialogInterface dialogInterface, int i) {
        if (i < tLRPC$TL_payments_bankCardData.open_urls.size()) {
            Browser.openUrl((Context) getParentActivity(), tLRPC$TL_payments_bankCardData.open_urls.get(i).url, this.inlineReturn == 0, false);
            return;
        }
        AndroidUtilities.addToClipboard(str);
        Toast.makeText(ApplicationLoader.applicationContext, LocaleController.getString("CardNumberCopied", 2131624859), 0).show();
    }

    public static /* synthetic */ void lambda$didPressMessageUrl$239(ChatMessageCell chatMessageCell, DialogInterface dialogInterface) {
        if (chatMessageCell != null) {
            chatMessageCell.resetPressedLink(-1);
        }
    }

    public /* synthetic */ void lambda$didPressMessageUrl$243(AlertDialog[] alertDialogArr, int i, ChatMessageCell chatMessageCell) {
        if (alertDialogArr[0] == null) {
            return;
        }
        alertDialogArr[0].setOnCancelListener(new ChatActivity$$ExternalSyntheticLambda23(this, i, chatMessageCell));
        showDialog(alertDialogArr[0]);
    }

    public /* synthetic */ void lambda$didPressMessageUrl$242(int i, ChatMessageCell chatMessageCell, DialogInterface dialogInterface) {
        getConnectionsManager().cancelRequest(i, true);
        chatMessageCell.resetPressedLink(-1);
    }

    /* JADX WARN: Removed duplicated region for block: B:15:0x0030  */
    /* JADX WARN: Removed duplicated region for block: B:16:0x0038  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$didPressMessageUrl$244(String str, DialogInterface dialogInterface, int i) {
        boolean z = false;
        boolean z2 = true;
        if (i == 0) {
            processExternalUrl(1, str, false);
        } else if (i != 1) {
        } else {
            if (str.startsWith("mailto:")) {
                str = str.substring(7);
                z = true;
            } else if (str.startsWith("tel:")) {
                str = str.substring(4);
                AndroidUtilities.addToClipboard(str);
                if (!z) {
                    this.undoView.showWithAction(0L, 80, (Runnable) null);
                    return;
                } else if (z2) {
                    this.undoView.showWithAction(0L, 60, (Runnable) null);
                    return;
                } else {
                    this.undoView.showWithAction(0L, 59, (Runnable) null);
                    return;
                }
            }
            z2 = false;
            AndroidUtilities.addToClipboard(str);
            if (!z) {
            }
        }
    }

    public static /* synthetic */ void lambda$didPressMessageUrl$245(ChatMessageCell chatMessageCell, DialogInterface dialogInterface) {
        if (chatMessageCell != null) {
            chatMessageCell.resetPressedLink(-1);
        }
    }

    void openPhotoViewerForMessage(ChatMessageCell chatMessageCell, MessageObject messageObject) {
        ChatMessageCell chatMessageCell2;
        AnimatedFileDrawable animation;
        Bitmap animatedBitmap;
        if (chatMessageCell == null) {
            int childCount = this.chatListView.getChildCount();
            for (int i = 0; i < childCount; i++) {
                View childAt = this.chatListView.getChildAt(i);
                if (childAt instanceof ChatMessageCell) {
                    chatMessageCell2 = (ChatMessageCell) childAt;
                    if (chatMessageCell2.getMessageObject().equals(messageObject)) {
                        break;
                    }
                }
            }
        }
        chatMessageCell2 = chatMessageCell;
        if (messageObject.isVideo()) {
            sendSecretMessageRead(messageObject, true);
        }
        PhotoViewer.getInstance().setParentActivity(getParentActivity(), this.themeDelegate);
        MessageObject playingMessageObject = MediaController.getInstance().getPlayingMessageObject();
        if (chatMessageCell2 != null && playingMessageObject != null && playingMessageObject.isVideo()) {
            getFileLoader().setLoadingVideoForPlayer(playingMessageObject.getDocument(), false);
            if (playingMessageObject.equals(messageObject) && (animation = chatMessageCell2.getPhotoImage().getAnimation()) != null && this.videoTextureView != null && this.videoPlayerContainer.getTag() != null && (animatedBitmap = animation.getAnimatedBitmap()) != null) {
                try {
                    Bitmap bitmap = this.videoTextureView.getBitmap(animatedBitmap.getWidth(), animatedBitmap.getHeight());
                    new Canvas(animatedBitmap).drawBitmap(bitmap, 0.0f, 0.0f, (Paint) null);
                    bitmap.recycle();
                } catch (Throwable th) {
                    FileLog.e(th);
                }
            }
            MediaController.getInstance().cleanupPlayer(true, true, false, playingMessageObject.equals(messageObject));
        }
        if (this.chatMode == 1 && (messageObject.isVideo() || messageObject.type == 1)) {
            PhotoViewer.getInstance().setParentChatActivity(this);
            ArrayList<MessageObject> arrayList = new ArrayList<>();
            int size = this.messages.size();
            for (int i2 = 0; i2 < size; i2++) {
                MessageObject messageObject2 = this.messages.get(i2);
                if (messageObject2.isVideo() || messageObject2.type == 1) {
                    arrayList.add(0, messageObject2);
                }
            }
            PhotoViewer.getInstance().openPhoto(arrayList, arrayList.indexOf(messageObject), this.dialog_id, 0L, this.photoViewerProvider);
        } else {
            PhotoViewer photoViewer = PhotoViewer.getInstance();
            int i3 = messageObject.type;
            long j = 0;
            long j2 = i3 != 0 ? this.dialog_id : 0L;
            if (i3 != 0) {
                j = this.mergeDialogId;
            }
            photoViewer.openPhoto(messageObject, this, j2, j, this.photoViewerProvider);
        }
        hideHints(false);
        MediaController.getInstance().resetGoingToShowMessageObject();
    }

    public void updateMessageListAccessibilityVisibility() {
        ActionBarPopupWindow actionBarPopupWindow;
        if (this.currentEncryptedChat == null && Build.VERSION.SDK_INT >= 19) {
            RecyclerListView recyclerListView = this.chatListView;
            MentionsContainerView mentionsContainerView = this.mentionContainer;
            recyclerListView.setImportantForAccessibility(((mentionsContainerView == null || !mentionsContainerView.isOpen()) && ((actionBarPopupWindow = this.scrimPopupWindow) == null || !actionBarPopupWindow.isShowing())) ? 0 : 4);
        }
    }

    public void markSponsoredAsRead(MessageObject messageObject) {
        if (!messageObject.isSponsored() || messageObject.viewsReloaded) {
            return;
        }
        messageObject.viewsReloaded = true;
        TLRPC$TL_channels_viewSponsoredMessage tLRPC$TL_channels_viewSponsoredMessage = new TLRPC$TL_channels_viewSponsoredMessage();
        tLRPC$TL_channels_viewSponsoredMessage.channel = MessagesController.getInputChannel(this.currentChat);
        tLRPC$TL_channels_viewSponsoredMessage.random_id = messageObject.sponsoredId;
        getConnectionsManager().sendRequest(tLRPC$TL_channels_viewSponsoredMessage, ChatActivity$$ExternalSyntheticLambda233.INSTANCE);
        getMessagesController().markSponsoredAsRead(this.dialog_id, messageObject);
    }

    @Override // org.telegram.ui.ActionBar.BaseFragment
    public boolean canBeginSlide() {
        return this.swipeBackEnabled && this.chatActivityEnterView.swipeToBackEnabled() && this.pullingDownOffset == 0.0f;
    }

    @Override // org.telegram.ui.ActionBar.BaseFragment
    public boolean isSwipeBackEnabled(MotionEvent motionEvent) {
        return this.swipeBackEnabled;
    }

    /* loaded from: classes3.dex */
    public class ChatActivityAdapter extends RecyclerAnimationScrollHelper.AnimatableAdapter {
        private boolean isBot;
        public boolean isFrozen;
        private Context mContext;
        private int messagesEndRow;
        private int messagesStartRow;
        private int rowCount;
        private int botInfoRow = -5;
        private int botInfoEmptyRow = -5;
        private int loadingUpRow = -5;
        private int loadingDownRow = -5;
        public ArrayList<MessageObject> frozenMessages = new ArrayList<>();

        @Override // org.telegram.ui.Components.RecyclerListView.SelectionAdapter
        public boolean isEnabled(RecyclerView.ViewHolder viewHolder) {
            return false;
        }

        static /* synthetic */ int access$1900(ChatActivityAdapter chatActivityAdapter) {
            return chatActivityAdapter.messagesStartRow;
        }

        static /* synthetic */ int access$21200(ChatActivityAdapter chatActivityAdapter) {
            return chatActivityAdapter.messagesEndRow;
        }

        static /* synthetic */ int access$30200(ChatActivityAdapter chatActivityAdapter) {
            return chatActivityAdapter.botInfoRow;
        }

        static /* synthetic */ int access$35000(ChatActivityAdapter chatActivityAdapter) {
            return chatActivityAdapter.loadingDownRow;
        }

        static /* synthetic */ int access$35100(ChatActivityAdapter chatActivityAdapter) {
            return chatActivityAdapter.loadingUpRow;
        }

        static /* synthetic */ void access$35200(ChatActivityAdapter chatActivityAdapter) {
            chatActivityAdapter.updateRowsInternal();
        }

        public ChatActivityAdapter(Context context) {
            ChatActivity.this = r2;
            this.mContext = context;
            TLRPC$User tLRPC$User = r2.currentUser;
            this.isBot = tLRPC$User != null && tLRPC$User.bot;
            setHasStableIds(true);
        }

        public void updateRowsSafe() {
            int i = this.rowCount;
            int i2 = this.botInfoRow;
            int i3 = this.loadingUpRow;
            int i4 = this.loadingDownRow;
            int i5 = this.messagesStartRow;
            int i6 = this.messagesEndRow;
            updateRowsInternal();
            if (i == this.rowCount && i2 == this.botInfoRow && i3 == this.loadingUpRow && i4 == this.loadingDownRow && i5 == this.messagesStartRow && i6 == this.messagesEndRow) {
                return;
            }
            notifyDataSetChanged(false);
        }

        public void updateRowsInternal() {
            TLRPC$User tLRPC$User;
            TLRPC$User tLRPC$User2;
            this.rowCount = 0;
            ArrayList<MessageObject> arrayList = this.isFrozen ? this.frozenMessages : ChatActivity.this.messages;
            if (!arrayList.isEmpty()) {
                if ((!ChatActivity.this.forwardEndReached[0] || (ChatActivity.this.mergeDialogId != 0 && !ChatActivity.this.forwardEndReached[1])) && !ChatActivity.this.hideForwardEndReached) {
                    int i = this.rowCount;
                    this.rowCount = i + 1;
                    this.loadingDownRow = i;
                } else {
                    this.loadingDownRow = -5;
                }
                int i2 = this.rowCount;
                this.messagesStartRow = i2;
                int size = i2 + arrayList.size();
                this.rowCount = size;
                this.messagesEndRow = size;
                if ((UserObject.isReplyUser(ChatActivity.this.currentUser) || ((tLRPC$User2 = ChatActivity.this.currentUser) != null && tLRPC$User2.bot && !MessagesController.isSupportUser(tLRPC$User2) && ChatActivity.this.chatMode == 0)) && ChatActivity.this.endReached[0]) {
                    int i3 = this.rowCount;
                    this.rowCount = i3 + 1;
                    this.botInfoRow = i3;
                } else {
                    this.botInfoRow = -5;
                }
                if (!ChatActivity.this.endReached[0] || (ChatActivity.this.mergeDialogId != 0 && !ChatActivity.this.endReached[1])) {
                    int i4 = this.rowCount;
                    this.rowCount = i4 + 1;
                    this.loadingUpRow = i4;
                    return;
                }
                this.loadingUpRow = -5;
                return;
            }
            this.loadingUpRow = -5;
            this.loadingDownRow = -5;
            this.messagesStartRow = -5;
            this.messagesEndRow = -5;
            if (UserObject.isReplyUser(ChatActivity.this.currentUser) || ((tLRPC$User = ChatActivity.this.currentUser) != null && tLRPC$User.bot && !MessagesController.isSupportUser(tLRPC$User) && ChatActivity.this.chatMode == 0)) {
                int i5 = this.rowCount;
                this.rowCount = i5 + 1;
                this.botInfoRow = i5;
                return;
            }
            this.botInfoRow = -5;
        }

        @Override // androidx.recyclerview.widget.RecyclerView.Adapter
        public int getItemCount() {
            this.botInfoEmptyRow = -5;
            if (!ChatActivity.this.clearingHistory) {
                if (!ChatActivity.this.clearingHistory) {
                    return this.rowCount;
                }
                return 0;
            }
            ChatActivity chatActivity = ChatActivity.this;
            TLRPC$User tLRPC$User = chatActivity.currentUser;
            if (tLRPC$User == null || !tLRPC$User.bot || chatActivity.chatMode != 0 || ((ChatActivity.this.botInfo.size() <= 0 || (((TLRPC$BotInfo) ChatActivity.this.botInfo.get(ChatActivity.this.currentUser.id)).description == null && ((TLRPC$BotInfo) ChatActivity.this.botInfo.get(ChatActivity.this.currentUser.id)).description_photo == null && ((TLRPC$BotInfo) ChatActivity.this.botInfo.get(ChatActivity.this.currentUser.id)).description_document == null)) && !UserObject.isReplyUser(ChatActivity.this.currentUser))) {
                return 0;
            }
            this.botInfoEmptyRow = 0;
            return 1;
        }

        @Override // androidx.recyclerview.widget.RecyclerView.Adapter
        public long getItemId(int i) {
            if (!ChatActivity.this.clearingHistory || i != this.botInfoEmptyRow) {
                ArrayList<MessageObject> arrayList = this.isFrozen ? this.frozenMessages : ChatActivity.this.messages;
                int i2 = this.messagesStartRow;
                if (i >= i2 && i < this.messagesEndRow) {
                    return arrayList.get(i - i2).stableId;
                }
                if (i == this.botInfoRow || i == this.botInfoEmptyRow) {
                    return 1L;
                }
                if (i == this.loadingUpRow) {
                    return 2L;
                }
                return i == this.loadingDownRow ? 3L : 4L;
            }
            return 1L;
        }

        /* JADX WARN: Multi-variable type inference failed */
        @Override // androidx.recyclerview.widget.RecyclerView.Adapter
        public RecyclerView.ViewHolder onCreateViewHolder(ViewGroup viewGroup, int i) {
            ChatMessageCell chatMessageCell;
            ChatMessageCell chatMessageCell2;
            if (i == 0) {
                if (!ChatActivity.this.chatMessageCellsCache.isEmpty()) {
                    ChatActivity.this.chatMessageCellsCache.remove(0);
                    chatMessageCell2 = (View) ChatActivity.this.chatMessageCellsCache.get(0);
                } else {
                    chatMessageCell2 = new ChatMessageCell(this.mContext, true, ChatActivity.this.themeDelegate);
                }
                ChatMessageCell chatMessageCell3 = chatMessageCell2;
                chatMessageCell3.shouldCheckVisibleOnScreen = true;
                chatMessageCell3.setDelegate(new AnonymousClass1());
                chatMessageCell = chatMessageCell2;
                if (ChatActivity.this.currentEncryptedChat == null) {
                    chatMessageCell3.setAllowAssistant(true);
                    chatMessageCell = chatMessageCell2;
                }
            } else if (i == 1) {
                AnonymousClass2 anonymousClass2 = new AnonymousClass2(this, this.mContext, true, ChatActivity.this.themeDelegate);
                anonymousClass2.setInvalidateColors(true);
                anonymousClass2.setDelegate(new AnonymousClass3());
                chatMessageCell = anonymousClass2;
            } else if (i == 2) {
                chatMessageCell = new ChatUnreadCell(this.mContext, ChatActivity.this.themeDelegate);
            } else if (i == 3) {
                BotHelpCell botHelpCell = new BotHelpCell(this.mContext, ChatActivity.this.themeDelegate);
                botHelpCell.setDelegate(new ChatActivity$ChatActivityAdapter$$ExternalSyntheticLambda0(this));
                chatMessageCell = botHelpCell;
            } else if (i == 4) {
                Context context = this.mContext;
                ChatActivity chatActivity = ChatActivity.this;
                chatMessageCell = new ChatLoadingCell(context, chatActivity.contentView, chatActivity.themeDelegate);
            } else {
                chatMessageCell = null;
            }
            chatMessageCell.setLayoutParams(new RecyclerView.LayoutParams(-1, -2));
            return new RecyclerListView.Holder(chatMessageCell);
        }

        /* renamed from: org.telegram.ui.ChatActivity$ChatActivityAdapter$1 */
        /* loaded from: classes3.dex */
        public class AnonymousClass1 implements ChatMessageCell.ChatMessageCellDelegate {
            @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
            public boolean canDrawOutboundsContent() {
                return false;
            }

            AnonymousClass1() {
                ChatActivityAdapter.this = r1;
            }

            @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
            public void didPressHint(ChatMessageCell chatMessageCell, int i) {
                if (i == 0) {
                    ChatActivity.this.showPollSolution(chatMessageCell.getMessageObject(), ((TLRPC$TL_messageMediaPoll) chatMessageCell.getMessageObject().messageOwner.media).results);
                } else if (i == 1) {
                    MessageObject messageObject = chatMessageCell.getMessageObject();
                    TLRPC$MessageFwdHeader tLRPC$MessageFwdHeader = messageObject.messageOwner.fwd_from;
                    if (tLRPC$MessageFwdHeader == null || TextUtils.isEmpty(tLRPC$MessageFwdHeader.psa_type)) {
                        return;
                    }
                    String string = LocaleController.getString("PsaMessageInfo_" + messageObject.messageOwner.fwd_from.psa_type);
                    if (TextUtils.isEmpty(string)) {
                        string = LocaleController.getString("PsaMessageInfoDefault", 2131627821);
                    }
                    SpannableStringBuilder spannableStringBuilder = new SpannableStringBuilder(string);
                    MessageObject.addLinks(false, spannableStringBuilder);
                    MessageObject.GroupedMessages currentMessagesGroup = chatMessageCell.getCurrentMessagesGroup();
                    if (currentMessagesGroup != null) {
                        int size = currentMessagesGroup.posArray.size();
                        int i2 = 0;
                        while (true) {
                            if (i2 >= size) {
                                break;
                            } else if ((currentMessagesGroup.posArray.get(i2).flags & 1) != 0) {
                                MessageObject messageObject2 = currentMessagesGroup.messages.get(i2);
                                if (messageObject2 != messageObject) {
                                    int childCount = ChatActivity.this.chatListView.getChildCount();
                                    for (int i3 = 0; i3 < childCount; i3++) {
                                        View childAt = ChatActivity.this.chatListView.getChildAt(i3);
                                        if (childAt instanceof ChatMessageCell) {
                                            ChatMessageCell chatMessageCell2 = (ChatMessageCell) childAt;
                                            if (messageObject2.equals(chatMessageCell2.getMessageObject())) {
                                                chatMessageCell = chatMessageCell2;
                                            }
                                        }
                                    }
                                    messageObject = messageObject2;
                                }
                            } else {
                                i2++;
                            }
                        }
                    }
                    ChatActivity.this.showInfoHint(messageObject, spannableStringBuilder, 1);
                }
                chatMessageCell.showHintButton(false, true, i);
            }

            @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
            public boolean shouldDrawThreadProgress(ChatMessageCell chatMessageCell) {
                MessageObject messageObject;
                MessageObject.GroupedMessages currentMessagesGroup = chatMessageCell.getCurrentMessagesGroup();
                if (currentMessagesGroup != null && !currentMessagesGroup.messages.isEmpty()) {
                    messageObject = currentMessagesGroup.messages.get(0);
                } else {
                    messageObject = chatMessageCell.getMessageObject();
                }
                return messageObject != null && messageObject.getId() == ChatActivity.this.commentLoadingMessageId;
            }

            @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
            public void didPressSideButton(ChatMessageCell chatMessageCell) {
                MessageObject.GroupedMessages groupedMessages;
                TLRPC$Message tLRPC$Message;
                TLRPC$TL_messageReplyHeader tLRPC$TL_messageReplyHeader;
                int i;
                if (ChatActivity.this.getParentActivity() == null) {
                    return;
                }
                ChatActivityEnterView chatActivityEnterView = ChatActivity.this.chatActivityEnterView;
                if (chatActivityEnterView != null) {
                    chatActivityEnterView.closeKeyboard();
                }
                MessageObject messageObject = chatMessageCell.getMessageObject();
                if (ChatActivity.this.chatMode == 2) {
                    ChatActivity.this.chatActivityDelegate.openReplyMessage(messageObject.getId());
                    ChatActivity.this.finishFragment();
                } else if ((UserObject.isReplyUser(ChatActivity.this.currentUser) || UserObject.isUserSelf(ChatActivity.this.currentUser)) && messageObject.messageOwner.fwd_from.saved_from_peer != null) {
                    if (!UserObject.isReplyUser(ChatActivity.this.currentUser) || (tLRPC$TL_messageReplyHeader = (tLRPC$Message = messageObject.messageOwner).reply_to) == null || (i = tLRPC$TL_messageReplyHeader.reply_to_top_id) == 0) {
                        ChatActivity.this.openOriginalReplyChat(messageObject);
                    } else {
                        ChatActivity.this.openDiscussionMessageChat(tLRPC$TL_messageReplyHeader.reply_to_peer_id.channel_id, null, i, 0L, -1, tLRPC$Message.fwd_from.saved_from_msg_id, messageObject);
                    }
                } else {
                    ArrayList<MessageObject> arrayList = null;
                    if (messageObject.getGroupId() != 0 && (groupedMessages = (MessageObject.GroupedMessages) ChatActivity.this.groupedMessagesMap.get(messageObject.getGroupId())) != null) {
                        arrayList = groupedMessages.messages;
                    }
                    if (arrayList == null) {
                        arrayList = new ArrayList<>();
                        arrayList.add(messageObject);
                    }
                    ChatActivity chatActivity = ChatActivity.this;
                    Context context = ChatActivityAdapter.this.mContext;
                    ChatActivity chatActivity2 = ChatActivity.this;
                    chatActivity.showDialog(new DialogC00171(context, chatActivity2, arrayList, null, null, ChatObject.isChannel(chatActivity2.currentChat), null, null, false, false, ChatActivity.this.themeDelegate));
                    AndroidUtilities.setAdjustResizeToNothing(ChatActivity.this.getParentActivity(), ((BaseFragment) ChatActivity.this).classGuid);
                    ((BaseFragment) ChatActivity.this).fragmentView.requestLayout();
                }
            }

            /* renamed from: org.telegram.ui.ChatActivity$ChatActivityAdapter$1$1 */
            /* loaded from: classes3.dex */
            public class DialogC00171 extends ShareAlert {
                /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
                DialogC00171(Context context, ChatActivity chatActivity, ArrayList arrayList, String str, String str2, boolean z, String str3, String str4, boolean z2, boolean z3, Theme.ResourcesProvider resourcesProvider) {
                    super(context, chatActivity, arrayList, str, str2, z, str3, str4, z2, z3, resourcesProvider);
                    AnonymousClass1.this = r14;
                }

                @Override // org.telegram.ui.Components.ShareAlert, org.telegram.ui.ActionBar.BottomSheet
                public void dismissInternal() {
                    super.dismissInternal();
                    AndroidUtilities.requestAdjustResize(ChatActivity.this.getParentActivity(), ((BaseFragment) ChatActivity.this).classGuid);
                    if (ChatActivity.this.chatActivityEnterView.getVisibility() == 0) {
                        ((BaseFragment) ChatActivity.this).fragmentView.requestLayout();
                    }
                }

                @Override // org.telegram.ui.Components.ShareAlert
                protected void onSend(LongSparseArray<TLRPC$Dialog> longSparseArray, int i) {
                    if (longSparseArray.size() == 1) {
                        ChatActivity.this.undoView.showWithAction(longSparseArray.valueAt(0).id, 53, Integer.valueOf(i));
                    } else {
                        ChatActivity.this.undoView.showWithAction(0L, 53, Integer.valueOf(i), Integer.valueOf(longSparseArray.size()), (Runnable) null, (Runnable) null);
                    }
                }
            }

            @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
            public boolean needPlayMessage(MessageObject messageObject) {
                if (messageObject.isVoice() || messageObject.isRoundVideo()) {
                    boolean playMessage = MediaController.getInstance().playMessage(messageObject);
                    MediaController.getInstance().setVoiceMessagesPlaylist(playMessage ? ChatActivity.this.createVoiceMessagesPlaylist(messageObject, false) : null, false);
                    return playMessage;
                } else if (!messageObject.isMusic()) {
                    return false;
                } else {
                    MediaController mediaController = MediaController.getInstance();
                    ChatActivity chatActivity = ChatActivity.this;
                    return mediaController.setPlaylist(chatActivity.messages, messageObject, chatActivity.mergeDialogId);
                }
            }

            @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
            public void videoTimerReached() {
                ChatActivity.this.showNoSoundHint();
            }

            @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
            public void didPressTime(ChatMessageCell chatMessageCell) {
                ChatActivity.this.undoView.showWithAction(ChatActivity.this.dialog_id, 47, (Runnable) null);
            }

            @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
            public void didPressChannelAvatar(ChatMessageCell chatMessageCell, TLRPC$Chat tLRPC$Chat, int i, float f, float f2) {
                if (tLRPC$Chat == null) {
                    return;
                }
                if (((BaseFragment) ChatActivity.this).actionBar.isActionModeShowed() || ChatActivity.this.reportType >= 0) {
                    ChatActivity.this.processRowSelect(chatMessageCell, true, f, f2);
                } else {
                    openChat(chatMessageCell, tLRPC$Chat, i);
                }
            }

            @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
            public void didPressHiddenForward(ChatMessageCell chatMessageCell) {
                if (!chatMessageCell.getMessageObject().isImportedForward()) {
                    ChatActivity.this.showForwardHint(chatMessageCell);
                } else {
                    didPressTime(chatMessageCell);
                }
            }

            @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
            public void didPressOther(ChatMessageCell chatMessageCell, float f, float f2) {
                MessageObject messageObject = chatMessageCell.getMessageObject();
                if (messageObject.type != 16) {
                    ChatActivity.this.createMenu(chatMessageCell, true, false, f, f2, messageObject.isMusic());
                    return;
                }
                TLRPC$User tLRPC$User = ChatActivity.this.currentUser;
                if (tLRPC$User == null) {
                    return;
                }
                boolean isVideoCall = messageObject.isVideoCall();
                ChatActivity chatActivity = ChatActivity.this;
                TLRPC$UserFull tLRPC$UserFull = chatActivity.userInfo;
                VoIPHelper.startCall(tLRPC$User, isVideoCall, tLRPC$UserFull != null && tLRPC$UserFull.video_calls_available, chatActivity.getParentActivity(), ChatActivity.this.getMessagesController().getUserFull(ChatActivity.this.currentUser.id), ChatActivity.this.getAccountInstance());
            }

            @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
            public void didPressUserAvatar(ChatMessageCell chatMessageCell, TLRPC$User tLRPC$User, float f, float f2) {
                if (((BaseFragment) ChatActivity.this).actionBar.isActionModeShowed() || ChatActivity.this.reportType >= 0) {
                    ChatActivity.this.processRowSelect(chatMessageCell, true, f, f2);
                } else {
                    openProfile(tLRPC$User);
                }
            }

            @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
            public boolean didLongPressUserAvatar(ChatMessageCell chatMessageCell, TLRPC$User tLRPC$User, float f, float f2) {
                AvatarPreviewer.Data data;
                if (isAvatarPreviewerEnabled()) {
                    ChatActivity chatActivity = ChatActivity.this;
                    int i = (chatActivity.currentChat == null || (chatActivity.bottomOverlayChat != null && ChatActivity.this.bottomOverlayChat.getVisibility() == 0) || (ChatActivity.this.bottomOverlay != null && ChatActivity.this.bottomOverlay.getVisibility() == 0)) ? 0 : 1;
                    AvatarPreviewer.MenuItem[] menuItemArr = new AvatarPreviewer.MenuItem[i + 2];
                    menuItemArr[0] = AvatarPreviewer.MenuItem.OPEN_PROFILE;
                    menuItemArr[1] = AvatarPreviewer.MenuItem.SEND_MESSAGE;
                    if (i != 0) {
                        menuItemArr[2] = AvatarPreviewer.MenuItem.MENTION;
                    }
                    TLRPC$UserFull userFull = ChatActivity.this.getMessagesController().getUserFull(tLRPC$User.id);
                    if (userFull == null) {
                        data = AvatarPreviewer.Data.of(tLRPC$User, ((BaseFragment) ChatActivity.this).classGuid, menuItemArr);
                    } else {
                        data = AvatarPreviewer.Data.of(userFull, menuItemArr);
                    }
                    if (AvatarPreviewer.canPreview(data)) {
                        AvatarPreviewer.getInstance().show((ViewGroup) ((BaseFragment) ChatActivity.this).fragmentView, data, new ChatActivity$ChatActivityAdapter$1$$ExternalSyntheticLambda3(this, chatMessageCell, tLRPC$User));
                        return true;
                    }
                }
                return false;
            }

            public /* synthetic */ void lambda$didLongPressUserAvatar$0(ChatMessageCell chatMessageCell, TLRPC$User tLRPC$User, AvatarPreviewer.MenuItem menuItem) {
                int i = AnonymousClass117.$SwitchMap$org$telegram$ui$AvatarPreviewer$MenuItem[menuItem.ordinal()];
                if (i == 1) {
                    openProfile(tLRPC$User);
                } else if (i == 4) {
                    openDialog(chatMessageCell, tLRPC$User);
                } else if (i != 5) {
                } else {
                    appendMention(tLRPC$User);
                }
            }

            private void appendMention(TLRPC$User tLRPC$User) {
                SpannableStringBuilder spannableStringBuilder;
                ChatActivityEnterView chatActivityEnterView = ChatActivity.this.chatActivityEnterView;
                if (chatActivityEnterView != null) {
                    CharSequence fieldText = chatActivityEnterView.getFieldText();
                    if (fieldText != null) {
                        spannableStringBuilder = new SpannableStringBuilder(fieldText);
                        if (fieldText.charAt(fieldText.length() - 1) != ' ') {
                            spannableStringBuilder.append((CharSequence) " ");
                        }
                    } else {
                        spannableStringBuilder = new SpannableStringBuilder();
                    }
                    if (spannableStringBuilder.length() > 0 && spannableStringBuilder.charAt(spannableStringBuilder.length() - 1) != ' ') {
                        spannableStringBuilder.append(' ');
                    }
                    if (tLRPC$User.username != null) {
                        spannableStringBuilder.append((CharSequence) "@").append((CharSequence) tLRPC$User.username).append((CharSequence) " ");
                    } else {
                        String firstName = UserObject.getFirstName(tLRPC$User, false);
                        SpannableString spannableString = new SpannableString(firstName + " ");
                        spannableString.setSpan(new URLSpanUserMention("" + tLRPC$User.id, 3), 0, spannableString.length(), 33);
                        spannableStringBuilder.append((CharSequence) spannableString);
                    }
                    ChatActivity.this.chatActivityEnterView.setFieldText(spannableStringBuilder);
                    AndroidUtilities.runOnUIThread(new ChatActivity$ChatActivityAdapter$1$$ExternalSyntheticLambda0(this), 200L);
                }
            }

            public /* synthetic */ void lambda$appendMention$1() {
                ChatActivity.this.chatActivityEnterView.openKeyboard();
            }

            @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
            public boolean didLongPressChannelAvatar(ChatMessageCell chatMessageCell, TLRPC$Chat tLRPC$Chat, int i, float f, float f2) {
                AvatarPreviewer.Data data;
                if (isAvatarPreviewerEnabled()) {
                    AvatarPreviewer.MenuItem[] menuItemArr = {AvatarPreviewer.MenuItem.OPEN_PROFILE};
                    ChatActivity chatActivity = ChatActivity.this;
                    TLRPC$Chat tLRPC$Chat2 = chatActivity.currentChat;
                    if (tLRPC$Chat2 == null || tLRPC$Chat2.id != tLRPC$Chat.id || chatActivity.isThreadChat()) {
                        menuItemArr = (AvatarPreviewer.MenuItem[]) Arrays.copyOf(menuItemArr, 2);
                        menuItemArr[1] = tLRPC$Chat.broadcast ? AvatarPreviewer.MenuItem.OPEN_CHANNEL : AvatarPreviewer.MenuItem.OPEN_GROUP;
                    }
                    TLRPC$ChatFull chatFull = ChatActivity.this.getMessagesController().getChatFull(tLRPC$Chat.id);
                    if (chatFull == null) {
                        data = AvatarPreviewer.Data.of(tLRPC$Chat, ((BaseFragment) ChatActivity.this).classGuid, menuItemArr);
                    } else {
                        data = AvatarPreviewer.Data.of(tLRPC$Chat, chatFull, menuItemArr);
                    }
                    if (AvatarPreviewer.canPreview(data)) {
                        AvatarPreviewer.getInstance().show((ViewGroup) ((BaseFragment) ChatActivity.this).fragmentView, data, new ChatActivity$ChatActivityAdapter$1$$ExternalSyntheticLambda2(this, tLRPC$Chat, chatMessageCell));
                        return true;
                    }
                }
                return false;
            }

            public /* synthetic */ void lambda$didLongPressChannelAvatar$2(TLRPC$Chat tLRPC$Chat, ChatMessageCell chatMessageCell, AvatarPreviewer.MenuItem menuItem) {
                int i = AnonymousClass117.$SwitchMap$org$telegram$ui$AvatarPreviewer$MenuItem[menuItem.ordinal()];
                if (i == 1) {
                    openProfile(tLRPC$Chat);
                } else if (i != 2 && i != 3) {
                } else {
                    openChat(chatMessageCell, tLRPC$Chat, 0);
                }
            }

            private void openProfile(TLRPC$User tLRPC$User) {
                if (tLRPC$User == null || tLRPC$User.id == ChatActivity.this.getUserConfig().getClientUserId()) {
                    return;
                }
                Bundle bundle = new Bundle();
                bundle.putLong("user_id", tLRPC$User.id);
                ProfileActivity profileActivity = new ProfileActivity(bundle);
                TLRPC$User tLRPC$User2 = ChatActivity.this.currentUser;
                profileActivity.setPlayProfileAnimation((tLRPC$User2 == null || tLRPC$User2.id != tLRPC$User.id) ? 0 : 1);
                AndroidUtilities.setAdjustResizeToNothing(ChatActivity.this.getParentActivity(), ((BaseFragment) ChatActivity.this).classGuid);
                ChatActivity.this.presentFragment(profileActivity);
            }

            private void openProfile(TLRPC$Chat tLRPC$Chat) {
                if (tLRPC$Chat != null) {
                    Bundle bundle = new Bundle();
                    bundle.putLong("chat_id", tLRPC$Chat.id);
                    ChatActivity.this.presentFragment(new ProfileActivity(bundle));
                }
            }

            private void openDialog(ChatMessageCell chatMessageCell, TLRPC$User tLRPC$User) {
                if (tLRPC$User != null) {
                    Bundle bundle = new Bundle();
                    bundle.putLong("user_id", tLRPC$User.id);
                    if (!ChatActivity.this.getMessagesController().checkCanOpenChat(bundle, ChatActivity.this, chatMessageCell.getMessageObject())) {
                        return;
                    }
                    ChatActivity.this.presentFragment(new ChatActivity(bundle));
                }
            }

            private void openChat(ChatMessageCell chatMessageCell, TLRPC$Chat tLRPC$Chat, int i) {
                ChatActivity chatActivity = ChatActivity.this;
                TLRPC$Chat tLRPC$Chat2 = chatActivity.currentChat;
                if (tLRPC$Chat2 != null && tLRPC$Chat.id == tLRPC$Chat2.id) {
                    chatActivity.scrollToMessageId(i, chatMessageCell.getMessageObject().getId(), true, 0, true, 0);
                } else if (tLRPC$Chat2 != null && tLRPC$Chat.id == tLRPC$Chat2.id && !chatActivity.isThreadChat()) {
                } else {
                    Bundle bundle = new Bundle();
                    bundle.putLong("chat_id", tLRPC$Chat.id);
                    if (i != 0) {
                        bundle.putInt("message_id", i);
                    }
                    if (!ChatActivity.this.getMessagesController().checkCanOpenChat(bundle, ChatActivity.this, chatMessageCell.getMessageObject())) {
                        return;
                    }
                    ChatActivity.this.presentFragment(new ChatActivity(bundle));
                }
            }

            private boolean isAvatarPreviewerEnabled() {
                TLRPC$Chat tLRPC$Chat;
                return UserObject.isUserSelf(ChatActivity.this.currentUser) || ((tLRPC$Chat = ChatActivity.this.currentChat) != null && (!ChatObject.isChannel(tLRPC$Chat) || ChatActivity.this.currentChat.megagroup));
            }

            @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
            public void didPressBotButton(ChatMessageCell chatMessageCell, TLRPC$KeyboardButton tLRPC$KeyboardButton) {
                if (ChatActivity.this.getParentActivity() != null) {
                    if (ChatActivity.this.bottomOverlayChat.getVisibility() == 0 && !(tLRPC$KeyboardButton instanceof TLRPC$TL_keyboardButtonSwitchInline) && !(tLRPC$KeyboardButton instanceof TLRPC$TL_keyboardButtonCallback) && !(tLRPC$KeyboardButton instanceof TLRPC$TL_keyboardButtonGame) && !(tLRPC$KeyboardButton instanceof TLRPC$TL_keyboardButtonUrl) && !(tLRPC$KeyboardButton instanceof TLRPC$TL_keyboardButtonBuy) && !(tLRPC$KeyboardButton instanceof TLRPC$TL_keyboardButtonUrlAuth) && !(tLRPC$KeyboardButton instanceof TLRPC$TL_keyboardButtonUserProfile)) {
                        return;
                    }
                    ChatActivity.this.chatActivityEnterView.didPressedBotButton(tLRPC$KeyboardButton, chatMessageCell.getMessageObject(), chatMessageCell.getMessageObject());
                }
            }

            @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
            public void needShowPremiumFeatures(String str) {
                ChatActivity.this.presentFragment(new PremiumPreviewFragment(str));
            }

            @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
            public void didLongPressBotButton(ChatMessageCell chatMessageCell, TLRPC$KeyboardButton tLRPC$KeyboardButton) {
                if (ChatActivity.this.getParentActivity() != null) {
                    if ((ChatActivity.this.bottomOverlayChat.getVisibility() == 0 && !(tLRPC$KeyboardButton instanceof TLRPC$TL_keyboardButtonSwitchInline) && !(tLRPC$KeyboardButton instanceof TLRPC$TL_keyboardButtonCallback) && !(tLRPC$KeyboardButton instanceof TLRPC$TL_keyboardButtonGame) && !(tLRPC$KeyboardButton instanceof TLRPC$TL_keyboardButtonUrl) && !(tLRPC$KeyboardButton instanceof TLRPC$TL_keyboardButtonBuy) && !(tLRPC$KeyboardButton instanceof TLRPC$TL_keyboardButtonUrlAuth) && !(tLRPC$KeyboardButton instanceof TLRPC$TL_keyboardButtonUserProfile)) || !(tLRPC$KeyboardButton instanceof TLRPC$TL_keyboardButtonUrl)) {
                        return;
                    }
                    ChatActivity.this.openClickableLink(null, tLRPC$KeyboardButton.url, true, chatMessageCell, chatMessageCell.getMessageObject());
                    try {
                        chatMessageCell.performHapticFeedback(0, 1);
                    } catch (Exception unused) {
                    }
                }
            }

            @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
            public void didPressReaction(ChatMessageCell chatMessageCell, TLRPC$TL_reactionCount tLRPC$TL_reactionCount, boolean z) {
                int i;
                if (ChatActivity.this.getParentActivity() == null) {
                    return;
                }
                if (!z) {
                    ChatActivity.this.selectReaction(chatMessageCell.getPrimaryMessageObject(), null, 0.0f, 0.0f, ChatActivity.this.getMediaDataController().getReactionsMap().get(tLRPC$TL_reactionCount.reaction), false, false);
                } else if (ChatObject.isChannelAndNotMegaGroup(ChatActivity.this.currentChat)) {
                } else {
                    chatMessageCell.performHapticFeedback(0);
                    AnonymousClass2 anonymousClass2 = new AnonymousClass2(ChatActivity.this.getParentActivity());
                    anonymousClass2.setLayoutParams(LayoutHelper.createFrame(-2, -2.0f));
                    Rect rect = new Rect();
                    Drawable mutate = ContextCompat.getDrawable(ChatActivity.this.getParentActivity(), 2131166090).mutate();
                    mutate.setColorFilter(new PorterDuffColorFilter(ChatActivity.this.getThemedColor("actionBarDefaultSubmenuBackground"), PorterDuff.Mode.MULTIPLY));
                    mutate.getPadding(rect);
                    anonymousClass2.setBackground(mutate);
                    ReactionsLayoutInBubble.ReactionButton reactionButton = chatMessageCell.getReactionButton(tLRPC$TL_reactionCount.reaction);
                    if (reactionButton == null) {
                        return;
                    }
                    int i2 = chatMessageCell.reactionsLayoutInBubble.y;
                    AndroidUtilities.dp(28.0f);
                    float f = chatMessageCell.reactionsLayoutInBubble.x + reactionButton.x;
                    chatMessageCell.getLocationInWindow(new int[2]);
                    Activity parentActivity = ChatActivity.this.getParentActivity();
                    ChatActivity chatActivity = ChatActivity.this;
                    anonymousClass2.addView(new ReactedUsersListView(parentActivity, chatActivity.themeDelegate, ((BaseFragment) chatActivity).currentAccount, chatMessageCell.getPrimaryMessageObject(), tLRPC$TL_reactionCount, false).setOnProfileSelectedListener(new ChatActivity$ChatActivityAdapter$1$$ExternalSyntheticLambda4(this)), LayoutHelper.createFrame(240, -2.0f));
                    ChatActivity.this.scrimPopupWindow = new AnonymousClass3(anonymousClass2, -2, -2);
                    ChatActivity.this.scrimPopupWindow.setPauseNotifications(true);
                    ChatActivity.this.scrimPopupWindow.setDismissAnimationDuration(220);
                    ChatActivity.this.scrimPopupWindow.setOutsideTouchable(true);
                    ChatActivity.this.scrimPopupWindow.setClippingEnabled(true);
                    ChatActivity.this.scrimPopupWindow.setAnimationStyle(2131689481);
                    ChatActivity.this.scrimPopupWindow.setFocusable(true);
                    anonymousClass2.measure(View.MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(1000.0f), Integer.MIN_VALUE), View.MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(1000.0f), Integer.MIN_VALUE));
                    ChatActivity.this.scrimPopupWindow.setInputMethodMode(2);
                    ChatActivity.this.scrimPopupWindow.setSoftInputMode(0);
                    ChatActivity.this.scrimPopupWindow.getContentView().setFocusableInTouchMode(true);
                    int height = ChatActivity.this.contentView.getHeight();
                    int measuredHeight = anonymousClass2.getMeasuredHeight();
                    int measureKeyboardHeight = ChatActivity.this.contentView.measureKeyboardHeight();
                    if (measureKeyboardHeight > AndroidUtilities.dp(20.0f)) {
                        height += measureKeyboardHeight;
                    }
                    int max = Math.max(AndroidUtilities.dp(6.0f), Math.min((ChatActivity.this.chatListView.getMeasuredWidth() - AndroidUtilities.dp(6.0f)) - anonymousClass2.getMeasuredWidth(), (int) (f - AndroidUtilities.dp(28.0f))));
                    if (AndroidUtilities.isTablet()) {
                        int[] iArr = new int[2];
                        ((BaseFragment) ChatActivity.this).fragmentView.getLocationInWindow(iArr);
                        max += iArr[0];
                    }
                    if (measuredHeight < height) {
                        float f2 = measuredHeight;
                        float f3 = height / 2.0f;
                        i = (int) ((f2 >= f3 || ((ChatActivity.this.chatListView.getY() + chatMessageCell.getY()) + ((float) chatMessageCell.reactionsLayoutInBubble.y)) + ((float) reactionButton.y) <= f3) ? ChatActivity.this.chatListView.getY() + chatMessageCell.getY() + chatMessageCell.reactionsLayoutInBubble.y + reactionButton.y + reactionButton.height : (((ChatActivity.this.chatListView.getY() + chatMessageCell.getY()) + chatMessageCell.reactionsLayoutInBubble.y) + reactionButton.y) - f2);
                    } else {
                        i = ((BaseFragment) ChatActivity.this).inBubbleMode ? 0 : AndroidUtilities.statusBarHeight;
                    }
                    ChatActivity chatActivity2 = ChatActivity.this;
                    chatActivity2.scrimPopupWindow.showAtLocation(chatActivity2.chatListView, 51, ChatActivity.this.scrimPopupX = max, ChatActivity.this.scrimPopupY = i);
                    ChatActivity.this.chatListView.stopScroll();
                    ChatActivity.this.chatLayoutManager.setCanScrollVertically(false);
                    ChatActivity.this.scrimViewReaction = tLRPC$TL_reactionCount.reaction;
                    ChatActivity.this.dimBehindView((View) chatMessageCell, true);
                    ChatActivity.this.hideHints(false);
                    if (ChatActivity.this.topUndoView != null) {
                        ChatActivity.this.topUndoView.hide(true, 1);
                    }
                    if (ChatActivity.this.undoView != null) {
                        ChatActivity.this.undoView.hide(true, 1);
                    }
                    ChatActivityEnterView chatActivityEnterView = ChatActivity.this.chatActivityEnterView;
                    if (chatActivityEnterView == null) {
                        return;
                    }
                    chatActivityEnterView.getEditField().setAllowDrawCursor(false);
                }
            }

            /* renamed from: org.telegram.ui.ChatActivity$ChatActivityAdapter$1$2 */
            /* loaded from: classes3.dex */
            class AnonymousClass2 extends FrameLayout {
                /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
                AnonymousClass2(Context context) {
                    super(context);
                    AnonymousClass1.this = r1;
                }

                @Override // android.view.ViewGroup, android.view.View
                public boolean dispatchKeyEvent(KeyEvent keyEvent) {
                    if (keyEvent.getKeyCode() == 4 && keyEvent.getRepeatCount() == 0) {
                        ChatActivity.this.closeMenu();
                    }
                    return super.dispatchKeyEvent(keyEvent);
                }

                @Override // android.widget.FrameLayout, android.view.View
                protected void onMeasure(int i, int i2) {
                    int min = Math.min(View.MeasureSpec.getSize(i2), AndroidUtilities.dp(288.0f));
                    if (min == 0) {
                        min = AndroidUtilities.dp(288.0f);
                    }
                    super.onMeasure(i, View.MeasureSpec.makeMeasureSpec(min, Integer.MIN_VALUE));
                }
            }

            public /* synthetic */ void lambda$didPressReaction$3(ReactedUsersListView reactedUsersListView, long j) {
                Bundle bundle = new Bundle();
                bundle.putLong("user_id", j);
                ChatActivity.this.presentFragment(new ProfileActivity(bundle));
                ChatActivity.this.closeMenu();
            }

            /* renamed from: org.telegram.ui.ChatActivity$ChatActivityAdapter$1$3 */
            /* loaded from: classes3.dex */
            class AnonymousClass3 extends ActionBarPopupWindow {
                /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
                AnonymousClass3(View view, int i, int i2) {
                    super(view, i, i2);
                    AnonymousClass1.this = r1;
                }

                @Override // org.telegram.ui.ActionBar.ActionBarPopupWindow, android.widget.PopupWindow
                public void dismiss() {
                    super.dismiss();
                    ChatActivity chatActivity = ChatActivity.this;
                    if (chatActivity.scrimPopupWindow != this) {
                        return;
                    }
                    chatActivity.scrimPopupWindow = null;
                    chatActivity.menuDeleteItem = null;
                    ChatActivity.this.scrimPopupWindowItems = null;
                    ChatActivity.this.chatLayoutManager.setCanScrollVertically(true);
                    if (!ChatActivity.this.scrimPopupWindowHideDimOnDismiss) {
                        ChatActivity.this.scrimPopupWindowHideDimOnDismiss = true;
                    } else {
                        ChatActivity.this.dimBehindView(false);
                    }
                    ChatActivityEnterView chatActivityEnterView = ChatActivity.this.chatActivityEnterView;
                    if (chatActivityEnterView == null) {
                        return;
                    }
                    chatActivityEnterView.getEditField().setAllowDrawCursor(true);
                }
            }

            @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
            public void didPressVoteButtons(ChatMessageCell chatMessageCell, ArrayList<TLRPC$TL_pollAnswer> arrayList, int i, int i2, int i3) {
                int i4;
                int i5;
                int i6;
                int i7;
                if (i >= 0 || arrayList.isEmpty()) {
                    if (ChatActivity.this.getParentActivity() == null) {
                        return;
                    }
                    if (ChatActivity.this.pollHintView == null) {
                        ChatActivity.this.pollHintView = new HintView(ChatActivity.this.getParentActivity(), 5, ChatActivity.this.themeDelegate);
                        ChatActivity.this.pollHintView.setAlpha(0.0f);
                        ChatActivity.this.pollHintView.setVisibility(4);
                        ChatActivity chatActivity = ChatActivity.this;
                        int indexOfChild = chatActivity.contentView.indexOfChild(chatActivity.chatActivityEnterView);
                        if (indexOfChild == -1) {
                            return;
                        }
                        ChatActivity chatActivity2 = ChatActivity.this;
                        chatActivity2.contentView.addView(chatActivity2.pollHintView, indexOfChild + 1, LayoutHelper.createFrame(-2, -2.0f, 51, 19.0f, 0.0f, 19.0f, 0.0f));
                    }
                    if (!arrayList.isEmpty() || i >= 0) {
                        i5 = i2;
                        i4 = i3;
                    } else {
                        ArrayList<ChatMessageCell.PollButton> pollButtons = chatMessageCell.getPollButtons();
                        int size = pollButtons.size();
                        int i8 = 0;
                        float f = 0.0f;
                        while (true) {
                            if (i8 >= size) {
                                i6 = i2;
                                i7 = i3;
                                break;
                            }
                            ChatMessageCell.PollButton pollButton = pollButtons.get(i8);
                            float y = ((chatMessageCell.getY() + pollButton.y) - AndroidUtilities.dp(4.0f)) - ChatActivity.this.chatListViewPaddingTop;
                            ChatActivity.this.pollHintX = pollButton.x + AndroidUtilities.dp(13.3f);
                            ChatActivity.this.pollHintY = (pollButton.y - AndroidUtilities.dp(6.0f)) + i3;
                            if (y > 0.0f) {
                                i6 = ChatActivity.this.pollHintX;
                                i7 = ChatActivity.this.pollHintY;
                                f = 0.0f;
                                break;
                            }
                            i8++;
                            f = y;
                        }
                        if (f != 0.0f) {
                            ChatActivity.this.chatListView.smoothScrollBy(0, (int) f);
                            ChatActivity.this.pollHintCell = chatMessageCell;
                            return;
                        }
                        i5 = i6;
                        i4 = i7;
                    }
                    ChatActivity.this.pollHintView.showForMessageCell(chatMessageCell, Integer.valueOf(i), i5, i4, true);
                    return;
                }
                ChatActivity.this.getSendMessagesHelper().sendVote(chatMessageCell.getMessageObject(), arrayList, null);
            }

            @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
            public void didPressCancelSendButton(ChatMessageCell chatMessageCell) {
                MessageObject messageObject = chatMessageCell.getMessageObject();
                if (messageObject.messageOwner.send_state != 0) {
                    ChatActivity.this.getSendMessagesHelper().cancelSendingMessage(messageObject);
                }
            }

            @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
            public void didLongPress(ChatMessageCell chatMessageCell, float f, float f2) {
                ChatActivity.this.createMenu(chatMessageCell, false, false, f, f2);
                ChatActivity chatActivity = ChatActivity.this;
                chatActivity.startMultiselect(chatActivity.chatListView.getChildAdapterPosition(chatMessageCell));
            }

            @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
            public boolean canPerformActions() {
                return ((BaseFragment) ChatActivity.this).actionBar != null && !((BaseFragment) ChatActivity.this).actionBar.isActionModeShowed() && ChatActivity.this.reportType < 0 && !((BaseFragment) ChatActivity.this).inPreviewMode;
            }

            @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
            public void didPressUrl(ChatMessageCell chatMessageCell, CharacterStyle characterStyle, boolean z) {
                ChatActivity.this.didPressMessageUrl(characterStyle, z, chatMessageCell.getMessageObject(), chatMessageCell);
            }

            @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
            public void needOpenWebView(MessageObject messageObject, String str, String str2, String str3, String str4, int i, int i2) {
                try {
                    EmbedBottomSheet.show(ChatActivity.this.getParentActivity(), messageObject, ChatActivity.this.photoViewerProvider, str2, str3, str4, str, i, i2, ChatActivity.this.isKeyboardVisible());
                } catch (Throwable th) {
                    FileLog.e(th);
                }
            }

            @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
            public void didPressReplyMessage(ChatMessageCell chatMessageCell, int i) {
                if (UserObject.isReplyUser(ChatActivity.this.currentUser)) {
                    didPressSideButton(chatMessageCell);
                    return;
                }
                MessageObject messageObject = chatMessageCell.getMessageObject();
                if (ChatActivity.this.chatMode == 2 || ChatActivity.this.chatMode == 1) {
                    ChatActivity.this.chatActivityDelegate.openReplyMessage(i);
                    ChatActivity.this.finishFragment();
                    return;
                }
                ChatActivity.this.scrollToMessageId(i, messageObject.getId(), true, messageObject.getDialogId() == ChatActivity.this.mergeDialogId ? 1 : 0, true, 0);
            }

            @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
            public void didPressViaBotNotInline(ChatMessageCell chatMessageCell, long j) {
                Bundle bundle = new Bundle();
                bundle.putLong("user_id", j);
                if (ChatActivity.this.getMessagesController().checkCanOpenChat(bundle, ChatActivity.this, chatMessageCell.getMessageObject())) {
                    ChatActivity.this.presentFragment(new ChatActivity(bundle));
                }
            }

            @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
            public void didPressViaBot(ChatMessageCell chatMessageCell, String str) {
                if (ChatActivity.this.bottomOverlayChat == null || ChatActivity.this.bottomOverlayChat.getVisibility() != 0) {
                    if ((ChatActivity.this.bottomOverlay != null && ChatActivity.this.bottomOverlay.getVisibility() == 0) || ChatActivity.this.chatActivityEnterView == null || str == null || str.length() <= 0) {
                        return;
                    }
                    ChatActivityEnterView chatActivityEnterView = ChatActivity.this.chatActivityEnterView;
                    chatActivityEnterView.setFieldText("@" + str + " ");
                    ChatActivity.this.chatActivityEnterView.openKeyboard();
                }
            }

            @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
            public void didStartVideoStream(MessageObject messageObject) {
                if (messageObject.isVideo()) {
                    ChatActivity.this.sendSecretMessageRead(messageObject, true);
                }
            }

            @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
            public void needReloadPolls() {
                ChatActivity.this.invalidateMessagesVisiblePart();
            }

            /* JADX WARN: Code restructure failed: missing block: B:94:0x022e, code lost:
                if (r11.exists() != false) goto L96;
             */
            @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
            /*
                Code decompiled incorrectly, please refer to instructions dump.
            */
            public void didPressImage(ChatMessageCell chatMessageCell, float f, float f2) {
                int i;
                File file;
                TLRPC$Chat tLRPC$Chat;
                MessageObject messageObject = chatMessageCell.getMessageObject();
                boolean z = true;
                messageObject.putInDownloadsStore = true;
                if (messageObject.isSendError()) {
                    ChatActivity.this.createMenu(chatMessageCell, false, false, f, f2);
                } else if (messageObject.isSending()) {
                } else {
                    if (messageObject.isDice()) {
                        ChatActivity.this.undoView.showWithAction(0L, (ChatActivity.this.chatActivityEnterView.getVisibility() != 0 || ChatActivity.this.bottomOverlay.getVisibility() == 0) ? 17 : 16, messageObject.getDiceEmoji(), null, new ChatActivity$ChatActivityAdapter$1$$ExternalSyntheticLambda1(this, messageObject));
                        return;
                    }
                    int i2 = 0;
                    if (messageObject.isAnimatedEmoji() || messageObject.isPremiumSticker()) {
                        ChatActivity.this.restartSticker(chatMessageCell);
                        ChatActivity.this.emojiAnimationsOverlay.onTapItem(chatMessageCell, ChatActivity.this, true);
                        ChatActivity.this.chatListView.cancelClickRunnables(false);
                    } else if (messageObject.needDrawBluredPreview()) {
                        Runnable sendSecretMessageRead = ChatActivity.this.sendSecretMessageRead(messageObject, false);
                        chatMessageCell.invalidate();
                        SecretMediaViewer.getInstance().setParentActivity(ChatActivity.this.getParentActivity());
                        SecretMediaViewer.getInstance().openMedia(messageObject, ChatActivity.this.photoViewerProvider, sendSecretMessageRead);
                    } else {
                        File file2 = null;
                        r0 = null;
                        ChatActivityEnterView chatActivityEnterView = null;
                        file2 = null;
                        if (messageObject.getInputStickerSet() != null) {
                            Activity parentActivity = ChatActivity.this.getParentActivity();
                            ChatActivity chatActivity = ChatActivity.this;
                            TLRPC$InputStickerSet inputStickerSet = messageObject.getInputStickerSet();
                            if (ChatActivity.this.bottomOverlayChat.getVisibility() != 0 && ((tLRPC$Chat = ChatActivity.this.currentChat) == null || ChatObject.canSendStickers(tLRPC$Chat))) {
                                chatActivityEnterView = ChatActivity.this.chatActivityEnterView;
                            }
                            StickersAlert stickersAlert = new StickersAlert(parentActivity, chatActivity, inputStickerSet, null, chatActivityEnterView, ChatActivity.this.themeDelegate);
                            stickersAlert.setCalcMandatoryInsets(ChatActivity.this.isKeyboardVisible());
                            ChatActivity.this.showDialog(stickersAlert);
                        } else if (messageObject.isVideo() || (i = messageObject.type) == 1 || ((i == 0 && !messageObject.isWebpageDocument()) || messageObject.isGif())) {
                            ChatActivity.this.openPhotoViewerForMessage(chatMessageCell, messageObject);
                        } else {
                            int i3 = messageObject.type;
                            if (i3 == 3) {
                                ChatActivity.this.sendSecretMessageRead(messageObject, true);
                                try {
                                    String str = messageObject.messageOwner.attachPath;
                                    if (str != null && str.length() != 0) {
                                        file2 = new File(messageObject.messageOwner.attachPath);
                                    }
                                    if (file2 == null || !file2.exists()) {
                                        file2 = ChatActivity.this.getFileLoader().getPathToMessage(messageObject.messageOwner);
                                    }
                                    Intent intent = new Intent("android.intent.action.VIEW");
                                    if (Build.VERSION.SDK_INT >= 24) {
                                        intent.setFlags(1);
                                        intent.setDataAndType(FileProvider.getUriForFile(ChatActivity.this.getParentActivity(), "org.telegram.messenger.beta.provider", file2), "video/mp4");
                                    } else {
                                        intent.setDataAndType(Uri.fromFile(file2), "video/mp4");
                                    }
                                    ChatActivity.this.getParentActivity().startActivityForResult(intent, 500);
                                } catch (Exception e) {
                                    FileLog.e(e);
                                    ChatActivity.this.alertUserOpenError(messageObject);
                                }
                            } else if (i3 == 4) {
                                if (!AndroidUtilities.isGoogleMapsInstalled(ChatActivity.this)) {
                                    return;
                                }
                                if (messageObject.isLiveLocation()) {
                                    TLRPC$Chat tLRPC$Chat2 = ChatActivity.this.currentChat;
                                    LocationActivity locationActivity = new LocationActivity((tLRPC$Chat2 == null || ChatObject.canSendMessages(tLRPC$Chat2) || ChatActivity.this.currentChat.megagroup) ? 2 : 6);
                                    locationActivity.setDelegate(ChatActivity.this);
                                    locationActivity.setMessageObject(messageObject);
                                    ChatActivity.this.presentFragment(locationActivity);
                                    return;
                                }
                                if (ChatActivity.this.currentEncryptedChat == null) {
                                    i2 = 3;
                                }
                                LocationActivity locationActivity2 = new LocationActivity(i2);
                                locationActivity2.setDelegate(ChatActivity.this);
                                locationActivity2.setMessageObject(messageObject);
                                ChatActivity.this.presentFragment(locationActivity2);
                            } else if (i3 != 9 && i3 != 0) {
                            } else {
                                if (messageObject.getDocumentName().toLowerCase().endsWith("attheme")) {
                                    String str2 = messageObject.messageOwner.attachPath;
                                    if (str2 != null && str2.length() != 0) {
                                        file = new File(messageObject.messageOwner.attachPath);
                                    }
                                    file = null;
                                    if (file == null) {
                                        File pathToMessage = ChatActivity.this.getFileLoader().getPathToMessage(messageObject.messageOwner);
                                        if (pathToMessage.exists()) {
                                            file = pathToMessage;
                                        }
                                    }
                                    Theme.ThemeInfo applyThemeFile = Theme.applyThemeFile(file, messageObject.getDocumentName(), null, true);
                                    if (applyThemeFile == null) {
                                        ChatActivity.this.scrollToPositionOnRecreate = -1;
                                    } else {
                                        ChatActivity.this.presentFragment(new ThemePreviewActivity(applyThemeFile));
                                        return;
                                    }
                                }
                                if (messageObject.canPreviewDocument()) {
                                    PhotoViewer.getInstance().setParentActivity(ChatActivity.this.getParentActivity(), ChatActivity.this.themeDelegate);
                                    PhotoViewer photoViewer = PhotoViewer.getInstance();
                                    ChatActivity chatActivity2 = ChatActivity.this;
                                    photoViewer.openPhoto(messageObject, chatActivity2, messageObject.type != 0 ? chatActivity2.dialog_id : 0L, messageObject.type != 0 ? ChatActivity.this.mergeDialogId : 0L, ChatActivity.this.photoViewerProvider);
                                } else {
                                    z = false;
                                }
                                if (z) {
                                    return;
                                }
                                try {
                                    AndroidUtilities.openForView(messageObject, ChatActivity.this.getParentActivity(), ChatActivity.this.themeDelegate);
                                } catch (Exception e2) {
                                    FileLog.e(e2);
                                    ChatActivity.this.alertUserOpenError(messageObject);
                                }
                            }
                        }
                    }
                }
            }

            public /* synthetic */ void lambda$didPressImage$4(MessageObject messageObject) {
                ChatActivity.this.getSendMessagesHelper().sendMessage(messageObject.getDiceEmoji(), ChatActivity.this.dialog_id, ChatActivity.this.replyingMessageObject, ChatActivity.this.getThreadMessage(), null, false, null, null, null, true, 0, null);
            }

            @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
            public void didPressInstantButton(ChatMessageCell chatMessageCell, int i) {
                TLRPC$WebPage tLRPC$WebPage;
                TLRPC$WebPage tLRPC$WebPage2;
                MessageObject messageObject = chatMessageCell.getMessageObject();
                if (i == 8) {
                    PollVotesAlert.showForPoll(ChatActivity.this, messageObject);
                } else if (i == 0) {
                    TLRPC$MessageMedia tLRPC$MessageMedia = messageObject.messageOwner.media;
                    if (tLRPC$MessageMedia == null || (tLRPC$WebPage2 = tLRPC$MessageMedia.webpage) == null || tLRPC$WebPage2.cached_page == null) {
                        return;
                    }
                    ArticleViewer.getInstance().setParentActivity(ChatActivity.this.getParentActivity(), ChatActivity.this);
                    ArticleViewer.getInstance().open(messageObject);
                } else if (i == 5) {
                    long j = messageObject.messageOwner.media.user_id;
                    TLRPC$User tLRPC$User = null;
                    if (j != 0) {
                        tLRPC$User = MessagesController.getInstance(((BaseFragment) ChatActivity.this).currentAccount).getUser(Long.valueOf(j));
                    }
                    ChatActivity chatActivity = ChatActivity.this;
                    TLRPC$MessageMedia tLRPC$MessageMedia2 = messageObject.messageOwner.media;
                    chatActivity.openVCard(tLRPC$User, tLRPC$MessageMedia2.vcard, tLRPC$MessageMedia2.first_name, tLRPC$MessageMedia2.last_name);
                } else if (messageObject.isSponsored()) {
                    Bundle bundle = new Bundle();
                    if (messageObject.sponsoredChatInvite != null) {
                        ChatActivity chatActivity2 = ChatActivity.this;
                        Context context = ChatActivityAdapter.this.mContext;
                        TLRPC$ChatInvite tLRPC$ChatInvite = messageObject.sponsoredChatInvite;
                        String str = messageObject.sponsoredChatInviteHash;
                        ChatActivity chatActivity3 = ChatActivity.this;
                        chatActivity2.showDialog(new JoinGroupAlert(context, tLRPC$ChatInvite, str, chatActivity3, chatActivity3.themeDelegate));
                        return;
                    }
                    long peerId = MessageObject.getPeerId(messageObject.messageOwner.from_id);
                    if (peerId < 0) {
                        bundle.putLong("chat_id", -peerId);
                    } else {
                        bundle.putLong("user_id", peerId);
                    }
                    int i2 = messageObject.sponsoredChannelPost;
                    if (i2 != 0) {
                        bundle.putInt("message_id", i2);
                    }
                    String str2 = messageObject.botStartParam;
                    if (str2 != null) {
                        bundle.putString("inline_query", str2);
                    }
                    if (!ChatActivity.this.getMessagesController().checkCanOpenChat(bundle, ChatActivity.this)) {
                        return;
                    }
                    ChatActivity.this.presentFragment(new ChatActivity(bundle));
                } else {
                    TLRPC$MessageMedia tLRPC$MessageMedia3 = messageObject.messageOwner.media;
                    if (tLRPC$MessageMedia3 == null || (tLRPC$WebPage = tLRPC$MessageMedia3.webpage) == null || ChatActivity.this.openLinkInternally(tLRPC$WebPage.url, messageObject.getId())) {
                        return;
                    }
                    Browser.openUrl(ChatActivity.this.getParentActivity(), messageObject.messageOwner.media.webpage.url);
                }
            }

            @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
            public void didPressCommentButton(ChatMessageCell chatMessageCell) {
                MessageObject messageObject;
                int i;
                long j;
                MessageObject.GroupedMessages currentMessagesGroup = chatMessageCell.getCurrentMessagesGroup();
                if (currentMessagesGroup != null && !currentMessagesGroup.messages.isEmpty()) {
                    messageObject = currentMessagesGroup.messages.get(0);
                } else {
                    messageObject = chatMessageCell.getMessageObject();
                }
                MessageObject messageObject2 = messageObject;
                TLRPC$MessageReplies tLRPC$MessageReplies = messageObject2.messageOwner.replies;
                if (tLRPC$MessageReplies != null) {
                    i = tLRPC$MessageReplies.read_max_id;
                    j = tLRPC$MessageReplies.channel_id;
                } else {
                    j = 0;
                    i = -1;
                }
                ChatActivity chatActivity = ChatActivity.this;
                chatActivity.openDiscussionMessageChat(chatActivity.currentChat.id, messageObject2, messageObject2.getId(), j, i, 0, null);
            }

            @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
            public String getAdminRank(long j) {
                if (ChatObject.isChannel(ChatActivity.this.currentChat)) {
                    ChatActivity chatActivity = ChatActivity.this;
                    if (!chatActivity.currentChat.megagroup) {
                        return null;
                    }
                    return chatActivity.getMessagesController().getAdminRank(ChatActivity.this.currentChat.id, j);
                }
                return null;
            }

            @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
            public boolean shouldRepeatSticker(MessageObject messageObject) {
                return !ChatActivity.this.alreadyPlayedStickers.containsKey(messageObject);
            }

            @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
            public void setShouldNotRepeatSticker(MessageObject messageObject) {
                ChatActivity.this.alreadyPlayedStickers.put(messageObject, Boolean.TRUE);
            }

            @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
            public TextSelectionHelper.ChatListTextSelectionHelper getTextSelectionHelper() {
                return ChatActivity.this.textSelectionHelper;
            }

            @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
            public boolean hasSelectedMessages() {
                return ChatActivity.this.selectedMessagesIds[0].size() + ChatActivity.this.selectedMessagesIds[1].size() > 0;
            }

            @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
            public void onDiceFinished() {
                if (ChatActivity.this.fireworksOverlay.isStarted()) {
                    return;
                }
                ChatActivity.this.fireworksOverlay.start();
                ChatActivity.this.fireworksOverlay.performHapticFeedback(3, 2);
            }

            @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
            public PinchToZoomHelper getPinchToZoomHelper() {
                return ChatActivity.this.pinchToZoomHelper;
            }

            @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
            public boolean keyboardIsOpened() {
                return ChatActivity.this.contentView.getKeyboardHeight() + ChatActivity.this.chatEmojiViewPadding >= AndroidUtilities.dp(20.0f);
            }

            @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
            public boolean isLandscape() {
                return ChatActivity.this.contentView.getMeasuredWidth() > ChatActivity.this.contentView.getMeasuredHeight();
            }

            @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
            public void invalidateBlur() {
                ChatActivity.this.contentView.invalidateBlur();
            }

            @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
            public boolean onAccessibilityAction(int i, Bundle bundle) {
                if (i == 16 || i == 2131230724 || i == 2131230721) {
                    if (((BaseFragment) ChatActivity.this).inPreviewMode) {
                        ChatActivity chatActivity = ChatActivity.this;
                        if (chatActivity.allowExpandPreviewByClick) {
                            if (((BaseFragment) chatActivity).parentLayout != null) {
                                ((BaseFragment) ChatActivity.this).parentLayout.expandPreviewFragment();
                            }
                            return true;
                        }
                    }
                    return !canPerformActions();
                }
                return false;
            }
        }

        /* renamed from: org.telegram.ui.ChatActivity$ChatActivityAdapter$2 */
        /* loaded from: classes3.dex */
        class AnonymousClass2 extends ChatActionCell {
            AnonymousClass2(ChatActivityAdapter chatActivityAdapter, Context context, boolean z, ChatActionCell.ThemeDelegate themeDelegate) {
                super(context, z, themeDelegate);
            }

            @Override // org.telegram.ui.Cells.ChatActionCell, android.view.View
            public void onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo accessibilityNodeInfo) {
                super.onInitializeAccessibilityNodeInfo(accessibilityNodeInfo);
                accessibilityNodeInfo.setVisibleToUser(true);
            }
        }

        /* renamed from: org.telegram.ui.ChatActivity$ChatActivityAdapter$3 */
        /* loaded from: classes3.dex */
        class AnonymousClass3 implements ChatActionCell.ChatActionCellDelegate {
            @Override // org.telegram.ui.Cells.ChatActionCell.ChatActionCellDelegate
            public /* synthetic */ void needOpenInviteLink(TLRPC$TL_chatInviteExported tLRPC$TL_chatInviteExported) {
                ChatActionCell.ChatActionCellDelegate.CC.$default$needOpenInviteLink(this, tLRPC$TL_chatInviteExported);
            }

            AnonymousClass3() {
                ChatActivityAdapter.this = r1;
            }

            @Override // org.telegram.ui.Cells.ChatActionCell.ChatActionCellDelegate
            public void didOpenPremiumGift(ChatActionCell chatActionCell, TLRPC$TL_premiumGiftOption tLRPC$TL_premiumGiftOption, boolean z) {
                ChatActivity chatActivity = ChatActivity.this;
                ChatActivity chatActivity2 = ChatActivity.this;
                chatActivity.showDialog(new PremiumPreviewBottomSheet(chatActivity2, ((BaseFragment) chatActivity2).currentAccount, ChatActivity.this.getCurrentUser(), new GiftPremiumBottomSheet.GiftTier(tLRPC$TL_premiumGiftOption)).setAnimateConfetti(z).setOutboundGift(chatActionCell.getMessageObject().isOut()));
            }

            @Override // org.telegram.ui.Cells.ChatActionCell.ChatActionCellDelegate
            public void needShowEffectOverlay(ChatActionCell chatActionCell, TLRPC$Document tLRPC$Document, TLRPC$VideoSize tLRPC$VideoSize) {
                ChatActivity.this.emojiAnimationsOverlay.showAnimationForActionCell(chatActionCell, tLRPC$Document, tLRPC$VideoSize);
            }

            @Override // org.telegram.ui.Cells.ChatActionCell.ChatActionCellDelegate
            public void didClickImage(ChatActionCell chatActionCell) {
                MessageObject messageObject = chatActionCell.getMessageObject();
                PhotoViewer.getInstance().setParentActivity(ChatActivity.this.getParentActivity(), ChatActivity.this.themeDelegate);
                TLRPC$PhotoSize closestPhotoSizeWithSize = FileLoader.getClosestPhotoSizeWithSize(messageObject.photoThumbs, 640);
                if (closestPhotoSizeWithSize == null) {
                    PhotoViewer.getInstance().openPhoto(messageObject, (ChatActivity) null, 0L, 0L, ChatActivity.this.photoViewerProvider);
                    return;
                }
                PhotoViewer.getInstance().openPhoto(closestPhotoSizeWithSize.location, ImageLocation.getForPhoto(closestPhotoSizeWithSize, messageObject.messageOwner.action.photo), ChatActivity.this.photoViewerProvider);
            }

            @Override // org.telegram.ui.Cells.ChatActionCell.ChatActionCellDelegate
            public boolean didLongPress(ChatActionCell chatActionCell, float f, float f2) {
                return ChatActivity.this.createMenu(chatActionCell, false, false, f, f2);
            }

            @Override // org.telegram.ui.Cells.ChatActionCell.ChatActionCellDelegate
            public void needOpenUserProfile(long j) {
                if (j < 0) {
                    Bundle bundle = new Bundle();
                    bundle.putLong("chat_id", -j);
                    if (!ChatActivity.this.getMessagesController().checkCanOpenChat(bundle, ChatActivity.this)) {
                        return;
                    }
                    ChatActivity.this.presentFragment(new ChatActivity(bundle));
                } else if (j == ChatActivity.this.getUserConfig().getClientUserId()) {
                } else {
                    Bundle bundle2 = new Bundle();
                    bundle2.putLong("user_id", j);
                    ChatActivity chatActivity = ChatActivity.this;
                    if (chatActivity.currentEncryptedChat != null && j == chatActivity.currentUser.id) {
                        bundle2.putLong("dialog_id", chatActivity.dialog_id);
                    }
                    ProfileActivity profileActivity = new ProfileActivity(bundle2);
                    TLRPC$User tLRPC$User = ChatActivity.this.currentUser;
                    profileActivity.setPlayProfileAnimation((tLRPC$User == null || tLRPC$User.id != j) ? 0 : 1);
                    ChatActivity.this.presentFragment(profileActivity);
                }
            }

            @Override // org.telegram.ui.Cells.ChatActionCell.ChatActionCellDelegate
            public void didPressReplyMessage(ChatActionCell chatActionCell, int i) {
                MessageObject messageObject = chatActionCell.getMessageObject();
                ChatActivity.this.scrollToMessageId(i, messageObject.getId(), true, messageObject.getDialogId() == ChatActivity.this.mergeDialogId ? 1 : 0, true, 0);
            }
        }

        public /* synthetic */ void lambda$onCreateViewHolder$0(String str) {
            if (str.startsWith("@")) {
                ChatActivity.this.getMessagesController().openByUserName(str.substring(1), ChatActivity.this, 0);
            } else if (str.startsWith("#") || str.startsWith("$")) {
                DialogsActivity dialogsActivity = new DialogsActivity(null);
                dialogsActivity.setSearchString(str);
                ChatActivity.this.presentFragment(dialogsActivity);
            } else if (!str.startsWith("/")) {
                ChatActivity.this.processExternalUrl(0, str, false);
            } else {
                ChatActivity.this.chatActivityEnterView.setCommand(null, str, false, false);
                if (ChatActivity.this.chatActivityEnterView.getFieldText() != null) {
                    return;
                }
                ChatActivity.this.hideFieldPanel(false);
            }
        }

        /* JADX WARN: Code restructure failed: missing block: B:131:0x0242, code lost:
            if (r5.getSenderId() == r3.getSenderId()) goto L132;
         */
        /* JADX WARN: Code restructure failed: missing block: B:132:0x0244, code lost:
            r9 = true;
         */
        /* JADX WARN: Code restructure failed: missing block: B:149:0x0296, code lost:
            if (org.telegram.messenger.MessageObject.getPeerId(r5) == org.telegram.messenger.MessageObject.getPeerId(r3.messageOwner.fwd_from.from_id)) goto L132;
         */
        /* JADX WARN: Code restructure failed: missing block: B:192:0x033d, code lost:
            if (r4.getSenderId() == r3.getSenderId()) goto L193;
         */
        /* JADX WARN: Code restructure failed: missing block: B:193:0x033f, code lost:
            r14 = true;
         */
        /* JADX WARN: Code restructure failed: missing block: B:210:0x0391, code lost:
            if (org.telegram.messenger.MessageObject.getPeerId(r4) == org.telegram.messenger.MessageObject.getPeerId(r3.messageOwner.fwd_from.from_id)) goto L193;
         */
        /* JADX WARN: Removed duplicated region for block: B:105:0x01e0  */
        /* JADX WARN: Removed duplicated region for block: B:153:0x02a0  */
        /* JADX WARN: Removed duplicated region for block: B:223:0x03bf  */
        /* JADX WARN: Removed duplicated region for block: B:225:0x03c2  */
        /* JADX WARN: Removed duplicated region for block: B:228:0x03d2  */
        /* JADX WARN: Removed duplicated region for block: B:229:0x03d4  */
        /* JADX WARN: Removed duplicated region for block: B:238:0x03fd  */
        /* JADX WARN: Removed duplicated region for block: B:241:0x040d  */
        /* JADX WARN: Removed duplicated region for block: B:73:0x0126  */
        /* JADX WARN: Removed duplicated region for block: B:74:0x0128  */
        /* JADX WARN: Removed duplicated region for block: B:77:0x012d  */
        /* JADX WARN: Removed duplicated region for block: B:93:0x0197  */
        @Override // androidx.recyclerview.widget.RecyclerView.Adapter
        /*
            Code decompiled incorrectly, please refer to instructions dump.
        */
        public void onBindViewHolder(RecyclerView.ViewHolder viewHolder, int i) {
            boolean z;
            boolean z2;
            boolean z3;
            int i2;
            int i3;
            boolean z4;
            boolean z5;
            int itemViewType;
            int indexOf;
            boolean z6;
            TLRPC$MessageFwdHeader tLRPC$MessageFwdHeader;
            String str;
            String str2;
            int i4;
            int i5;
            TLRPC$ChatFull tLRPC$ChatFull;
            if (i == this.botInfoRow || i == this.botInfoEmptyRow) {
                BotHelpCell botHelpCell = (BotHelpCell) viewHolder.itemView;
                if (!UserObject.isReplyUser(ChatActivity.this.currentUser)) {
                    TLObject tLObject = null;
                    TLRPC$BotInfo tLRPC$BotInfo = ChatActivity.this.botInfo.size() != 0 ? (TLRPC$BotInfo) ChatActivity.this.botInfo.get(ChatActivity.this.currentUser.id) : null;
                    String str3 = tLRPC$BotInfo != null ? tLRPC$BotInfo.description : null;
                    if (tLRPC$BotInfo != null && (tLObject = tLRPC$BotInfo.description_document) == null) {
                        tLObject = tLRPC$BotInfo.description_photo;
                    }
                    botHelpCell.setText(true, str3, tLObject, tLRPC$BotInfo);
                    return;
                }
                botHelpCell.setText(false, LocaleController.getString("RepliesChatInfo", 2131627981));
            } else if (i == this.loadingDownRow || i == this.loadingUpRow) {
                ((ChatLoadingCell) viewHolder.itemView).setProgressVisible(ChatActivity.this.loadsCount > 1);
            } else {
                int i6 = this.messagesStartRow;
                if (i < i6 || i >= this.messagesEndRow) {
                    return;
                }
                ArrayList<MessageObject> arrayList = this.isFrozen ? this.frozenMessages : ChatActivity.this.messages;
                MessageObject messageObject = arrayList.get(i - i6);
                View view = viewHolder.itemView;
                if (view instanceof ChatMessageCell) {
                    ChatMessageCell chatMessageCell = (ChatMessageCell) view;
                    MessageObject.GroupedMessages validGroupedMessage = ChatActivity.this.getValidGroupedMessage(messageObject);
                    ChatActivity chatActivity = ChatActivity.this;
                    chatMessageCell.isChat = chatActivity.currentChat != null || UserObject.isUserSelf(chatActivity.currentUser) || UserObject.isReplyUser(ChatActivity.this.currentUser);
                    ChatActivity chatActivity2 = ChatActivity.this;
                    TLRPC$User tLRPC$User = chatActivity2.currentUser;
                    chatMessageCell.isBot = tLRPC$User != null && tLRPC$User.bot;
                    chatMessageCell.isMegagroup = ChatObject.isChannel(chatActivity2.currentChat) && ChatActivity.this.currentChat.megagroup;
                    chatMessageCell.isThreadChat = ChatActivity.this.threadMessageId != 0;
                    if (ChatActivity.this.chatMode != 1 && ChatObject.isChannel(ChatActivity.this.currentChat)) {
                        TLRPC$Chat tLRPC$Chat = ChatActivity.this.currentChat;
                        if (tLRPC$Chat.has_link && !tLRPC$Chat.megagroup) {
                            z = true;
                            chatMessageCell.hasDiscussion = z;
                            chatMessageCell.isPinned = ChatActivity.this.chatMode != 0 && (ChatActivity.this.pinnedMessageObjects.containsKey(Integer.valueOf(messageObject.getId())) || (validGroupedMessage != null && !validGroupedMessage.messages.isEmpty() && ChatActivity.this.pinnedMessageObjects.containsKey(Integer.valueOf(validGroupedMessage.messages.get(0).getId()))));
                            chatMessageCell.linkedChatId = (ChatActivity.this.chatMode != 1 || (tLRPC$ChatFull = ChatActivity.this.chatInfo) == null) ? 0L : tLRPC$ChatFull.linked_chat_id;
                            chatMessageCell.isRepliesChat = UserObject.isReplyUser(ChatActivity.this.currentUser);
                            chatMessageCell.isPinnedChat = ChatActivity.this.chatMode != 2;
                            if (validGroupedMessage == null) {
                                MessageObject.GroupedMessagePosition groupedMessagePosition = validGroupedMessage.positions.get(messageObject);
                                if (groupedMessagePosition != null) {
                                    if (validGroupedMessage.isDocuments) {
                                        i3 = validGroupedMessage.posArray.indexOf(groupedMessagePosition) + i + 1;
                                        i4 = (i - validGroupedMessage.posArray.size()) + validGroupedMessage.posArray.indexOf(groupedMessagePosition);
                                        z5 = false;
                                        z4 = false;
                                        z3 = false;
                                        z2 = false;
                                    } else {
                                        if ((groupedMessagePosition.flags & 4) != 0) {
                                            i5 = validGroupedMessage.posArray.indexOf(groupedMessagePosition) + i + 1;
                                            z3 = false;
                                            z2 = false;
                                        } else {
                                            i5 = -100;
                                            z3 = true;
                                            z2 = true;
                                        }
                                        if ((groupedMessagePosition.flags & 8) != 0) {
                                            i4 = (i - validGroupedMessage.posArray.size()) + validGroupedMessage.posArray.indexOf(groupedMessagePosition);
                                            i3 = i5;
                                            z5 = false;
                                            z4 = false;
                                        } else {
                                            i3 = i5;
                                            z5 = true;
                                            z4 = true;
                                        }
                                    }
                                    i2 = i4;
                                } else {
                                    z5 = false;
                                    z4 = false;
                                    i3 = -100;
                                    z3 = false;
                                    z2 = false;
                                }
                                i4 = -100;
                                i2 = i4;
                            } else {
                                i3 = i + 1;
                                i2 = i - 1;
                                z5 = false;
                                z4 = false;
                                z3 = false;
                                z2 = false;
                            }
                            int itemViewType2 = getItemViewType(i2);
                            itemViewType = getItemViewType(i3);
                            if (!(messageObject.messageOwner.reply_markup instanceof TLRPC$TL_replyInlineMarkup) && itemViewType2 == viewHolder.getItemViewType()) {
                                MessageObject messageObject2 = arrayList.get(i2 - this.messagesStartRow);
                                z4 = messageObject2.isOutOwner() != messageObject.isOutOwner() && Math.abs(messageObject2.messageOwner.date - messageObject.messageOwner.date) <= 300;
                                if (z4) {
                                    if (messageObject.isImportedForward() || messageObject2.isImportedForward()) {
                                        if (messageObject.isImportedForward() && messageObject2.isImportedForward() && Math.abs(messageObject2.messageOwner.fwd_from.date - messageObject.messageOwner.fwd_from.date) <= 300) {
                                            TLRPC$MessageFwdHeader tLRPC$MessageFwdHeader2 = messageObject2.messageOwner.fwd_from;
                                            String str4 = tLRPC$MessageFwdHeader2.from_name;
                                            if (str4 != null && (str2 = messageObject.messageOwner.fwd_from.from_name) != null) {
                                                z4 = str4.equals(str2);
                                            } else {
                                                TLRPC$Peer tLRPC$Peer = tLRPC$MessageFwdHeader2.from_id;
                                                if (tLRPC$Peer != null) {
                                                    if (messageObject.messageOwner.fwd_from.from_id != null) {
                                                    }
                                                }
                                            }
                                        }
                                        z4 = false;
                                    } else {
                                        ChatActivity chatActivity3 = ChatActivity.this;
                                        if (chatActivity3.currentChat != null) {
                                            long fromChatId = messageObject2.getFromChatId();
                                            boolean z7 = fromChatId == messageObject.getFromChatId();
                                            if (z5 || !z7 || fromChatId >= 0 || !ChatActivity.this.currentChat.megagroup) {
                                                z4 = z7;
                                            }
                                            z4 = false;
                                        } else if (UserObject.isUserSelf(chatActivity3.currentUser) || UserObject.isReplyUser(ChatActivity.this.currentUser)) {
                                            if (!messageObject.isPrivateForward()) {
                                                if (!messageObject2.isPrivateForward()) {
                                                }
                                            }
                                            z4 = false;
                                        }
                                    }
                                }
                            }
                            if (itemViewType == viewHolder.getItemViewType()) {
                                MessageObject messageObject3 = arrayList.get(i3 - this.messagesStartRow);
                                z3 = !(messageObject3.messageOwner.reply_markup instanceof TLRPC$TL_replyInlineMarkup) && messageObject3.isOutOwner() == messageObject.isOutOwner() && Math.abs(messageObject3.messageOwner.date - messageObject.messageOwner.date) <= 300;
                                if (z3) {
                                    if (messageObject.isImportedForward() || messageObject3.isImportedForward()) {
                                        if (messageObject.isImportedForward() && messageObject3.isImportedForward() && Math.abs(messageObject.messageOwner.fwd_from.date - messageObject3.messageOwner.fwd_from.date) <= 300) {
                                            TLRPC$MessageFwdHeader tLRPC$MessageFwdHeader3 = messageObject3.messageOwner.fwd_from;
                                            String str5 = tLRPC$MessageFwdHeader3.from_name;
                                            if (str5 != null && (str = messageObject.messageOwner.fwd_from.from_name) != null) {
                                                z3 = str5.equals(str);
                                            } else {
                                                TLRPC$Peer tLRPC$Peer2 = tLRPC$MessageFwdHeader3.from_id;
                                                if (tLRPC$Peer2 != null) {
                                                    if (messageObject.messageOwner.fwd_from.from_id != null) {
                                                    }
                                                }
                                            }
                                        }
                                        z3 = false;
                                    } else {
                                        ChatActivity chatActivity4 = ChatActivity.this;
                                        if (chatActivity4.currentChat != null) {
                                            long fromChatId2 = messageObject3.getFromChatId();
                                            boolean z8 = fromChatId2 == messageObject.getFromChatId() && !messageObject.isImportedForward() && !messageObject3.isImportedForward();
                                            if (z2 || !z8 || fromChatId2 >= 0 || !ChatActivity.this.currentChat.megagroup) {
                                                z3 = z8;
                                            }
                                            z3 = false;
                                        } else if (UserObject.isUserSelf(chatActivity4.currentUser) || UserObject.isReplyUser(ChatActivity.this.currentUser)) {
                                            if (!messageObject.isPrivateForward()) {
                                                if (!messageObject3.isPrivateForward()) {
                                                }
                                            }
                                            z3 = false;
                                        }
                                    }
                                }
                            }
                            if (ChatObject.isChannel(ChatActivity.this.currentChat) && ChatActivity.this.currentChat.megagroup && messageObject.getFromChatId() <= 0 && (tLRPC$MessageFwdHeader = messageObject.messageOwner.fwd_from) != null && (tLRPC$MessageFwdHeader.saved_from_peer instanceof TLRPC$TL_peerChannel)) {
                                if (!z2) {
                                    z3 = false;
                                }
                                if (!z5) {
                                    z4 = false;
                                }
                            }
                            chatMessageCell.setMessageObject(messageObject, validGroupedMessage, z4, z3);
                            chatMessageCell.setSpoilersSuppressed(ChatActivity.this.chatListView.getScrollState() == 0);
                            chatMessageCell.setHighlighted(ChatActivity.this.highlightMessageId == Integer.MAX_VALUE && messageObject.getId() == ChatActivity.this.highlightMessageId);
                            if (ChatActivity.this.highlightMessageId != Integer.MAX_VALUE) {
                                ChatActivity.this.startMessageUnselect();
                            }
                            indexOf = ChatActivity.this.animatingMessageObjects.indexOf(messageObject);
                            if (indexOf != -1) {
                                if (messageObject.type == 5 && ChatActivity.this.instantCameraView.getTextureView() != null) {
                                    chatMessageCell.getViewTreeObserver().addOnPreDrawListener(new AnonymousClass4(chatMessageCell));
                                } else if (!messageObject.isAnyKindOfSticker()) {
                                    z6 = false;
                                    if (!z6 || ChatActivity.this.chatListItemAnimator == null) {
                                        ChatActivity.this.animatingMessageObjects.remove(indexOf);
                                        ChatActivity.this.chatActivityEnterView.startMessageTransition();
                                        ChatActivity.this.chatActivityEnterView.hideTopView(true);
                                    }
                                } else {
                                    chatMessageCell.getViewTreeObserver().addOnPreDrawListener(new AnonymousClass5(chatMessageCell));
                                }
                                z6 = true;
                                if (!z6) {
                                }
                                ChatActivity.this.animatingMessageObjects.remove(indexOf);
                                ChatActivity.this.chatActivityEnterView.startMessageTransition();
                                ChatActivity.this.chatActivityEnterView.hideTopView(true);
                            }
                            if (ChatActivity.this.animatingDocuments.isEmpty() || !ChatActivity.this.animatingDocuments.containsKey(messageObject.getDocument())) {
                            }
                            ChatActivity.this.animatingDocuments.remove(messageObject.getDocument());
                            if (ChatActivity.this.chatListItemAnimator == null) {
                                return;
                            }
                            ChatActivity.this.chatListItemAnimator.onGreetingStickerTransition(viewHolder, ChatActivity.this.greetingsViewContainer);
                            return;
                        }
                    }
                    z = false;
                    chatMessageCell.hasDiscussion = z;
                    chatMessageCell.isPinned = ChatActivity.this.chatMode != 0 && (ChatActivity.this.pinnedMessageObjects.containsKey(Integer.valueOf(messageObject.getId())) || (validGroupedMessage != null && !validGroupedMessage.messages.isEmpty() && ChatActivity.this.pinnedMessageObjects.containsKey(Integer.valueOf(validGroupedMessage.messages.get(0).getId()))));
                    chatMessageCell.linkedChatId = (ChatActivity.this.chatMode != 1 || (tLRPC$ChatFull = ChatActivity.this.chatInfo) == null) ? 0L : tLRPC$ChatFull.linked_chat_id;
                    chatMessageCell.isRepliesChat = UserObject.isReplyUser(ChatActivity.this.currentUser);
                    chatMessageCell.isPinnedChat = ChatActivity.this.chatMode != 2;
                    if (validGroupedMessage == null) {
                    }
                    int itemViewType22 = getItemViewType(i2);
                    itemViewType = getItemViewType(i3);
                    if (!(messageObject.messageOwner.reply_markup instanceof TLRPC$TL_replyInlineMarkup)) {
                        MessageObject messageObject22 = arrayList.get(i2 - this.messagesStartRow);
                        if (messageObject22.isOutOwner() != messageObject.isOutOwner()) {
                        }
                        if (z4) {
                        }
                    }
                    if (itemViewType == viewHolder.getItemViewType()) {
                    }
                    if (ChatObject.isChannel(ChatActivity.this.currentChat)) {
                        if (!z2) {
                        }
                        if (!z5) {
                        }
                    }
                    chatMessageCell.setMessageObject(messageObject, validGroupedMessage, z4, z3);
                    chatMessageCell.setSpoilersSuppressed(ChatActivity.this.chatListView.getScrollState() == 0);
                    chatMessageCell.setHighlighted(ChatActivity.this.highlightMessageId == Integer.MAX_VALUE && messageObject.getId() == ChatActivity.this.highlightMessageId);
                    if (ChatActivity.this.highlightMessageId != Integer.MAX_VALUE) {
                    }
                    indexOf = ChatActivity.this.animatingMessageObjects.indexOf(messageObject);
                    if (indexOf != -1) {
                    }
                    if (ChatActivity.this.animatingDocuments.isEmpty()) {
                    }
                } else if (view instanceof ChatActionCell) {
                    ChatActionCell chatActionCell = (ChatActionCell) view;
                    chatActionCell.setMessageObject(messageObject);
                    chatActionCell.setAlpha(1.0f);
                    chatActionCell.setSpoilersSuppressed(ChatActivity.this.chatListView.getScrollState() != 0);
                } else if (!(view instanceof ChatUnreadCell)) {
                } else {
                    ((ChatUnreadCell) view).setText(LocaleController.getString("UnreadMessages", 2131628825));
                    if (ChatActivity.this.createUnreadMessageAfterId == 0) {
                        return;
                    }
                    ChatActivity.this.createUnreadMessageAfterId = 0;
                }
            }
        }

        /* renamed from: org.telegram.ui.ChatActivity$ChatActivityAdapter$4 */
        /* loaded from: classes3.dex */
        public class AnonymousClass4 implements ViewTreeObserver.OnPreDrawListener {
            final /* synthetic */ ChatMessageCell val$messageCell;

            AnonymousClass4(ChatMessageCell chatMessageCell) {
                ChatActivityAdapter.this = r1;
                this.val$messageCell = chatMessageCell;
            }

            @Override // android.view.ViewTreeObserver.OnPreDrawListener
            public boolean onPreDraw() {
                PipRoundVideoView pipRoundVideoView = PipRoundVideoView.getInstance();
                if (pipRoundVideoView != null) {
                    pipRoundVideoView.showTemporary(true);
                }
                this.val$messageCell.getViewTreeObserver().removeOnPreDrawListener(this);
                ImageReceiver photoImage = this.val$messageCell.getPhotoImage();
                float imageWidth = photoImage.getImageWidth();
                org.telegram.ui.Components.Rect cameraRect = ChatActivity.this.instantCameraView.getCameraRect();
                float f = imageWidth / cameraRect.width;
                this.val$messageCell.getTransitionParams().ignoreAlpha = true;
                this.val$messageCell.setAlpha(0.0f);
                this.val$messageCell.setTimeAlpha(0.0f);
                this.val$messageCell.getLocationOnScreen(r5);
                int[] iArr = {(int) (iArr[0] + (photoImage.getImageX() - this.val$messageCell.getAnimationOffsetX())), (int) (iArr[1] + (photoImage.getImageY() - this.val$messageCell.getTranslationY()))};
                InstantCameraView.InstantViewCameraContainer cameraContainer = ChatActivity.this.instantCameraView.getCameraContainer();
                cameraContainer.setPivotX(0.0f);
                cameraContainer.setPivotY(0.0f);
                AnimatorSet animatorSet = new AnimatorSet();
                cameraContainer.setImageReceiver(photoImage);
                ChatActivity.this.instantCameraView.cancelBlur();
                AnimatorSet animatorSet2 = new AnimatorSet();
                animatorSet.playTogether(ObjectAnimator.ofFloat(cameraContainer, View.SCALE_X, f), ObjectAnimator.ofFloat(cameraContainer, View.SCALE_Y, f), ObjectAnimator.ofFloat(cameraContainer, View.TRANSLATION_Y, iArr[1] - cameraRect.y), ObjectAnimator.ofFloat(ChatActivity.this.instantCameraView.getSwitchButtonView(), View.ALPHA, 0.0f), ObjectAnimator.ofInt(ChatActivity.this.instantCameraView.getPaint(), AnimationProperties.PAINT_ALPHA, 0), ObjectAnimator.ofFloat(ChatActivity.this.instantCameraView.getMuteImageView(), View.ALPHA, 0.0f));
                animatorSet.setInterpolator(CubicBezierInterpolator.EASE_OUT_QUINT);
                ObjectAnimator ofFloat = ObjectAnimator.ofFloat(cameraContainer, View.TRANSLATION_X, iArr[0] - cameraRect.x);
                ofFloat.setInterpolator(CubicBezierInterpolator.DEFAULT);
                animatorSet2.playTogether(ofFloat, animatorSet);
                animatorSet2.setStartDelay(120L);
                animatorSet2.setDuration(180L);
                ChatActivity.this.instantCameraView.setIsMessageTransition(true);
                animatorSet2.addListener(new AnonymousClass1(cameraContainer));
                animatorSet2.start();
                return true;
            }

            /* renamed from: org.telegram.ui.ChatActivity$ChatActivityAdapter$4$1 */
            /* loaded from: classes3.dex */
            public class AnonymousClass1 extends AnimatorListenerAdapter {
                final /* synthetic */ InstantCameraView.InstantViewCameraContainer val$cameraContainer;

                AnonymousClass1(InstantCameraView.InstantViewCameraContainer instantViewCameraContainer) {
                    AnonymousClass4.this = r1;
                    this.val$cameraContainer = instantViewCameraContainer;
                }

                @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                public void onAnimationEnd(Animator animator) {
                    AnonymousClass4.this.val$messageCell.setAlpha(1.0f);
                    AnonymousClass4.this.val$messageCell.getTransitionParams().ignoreAlpha = false;
                    C00181 c00181 = new C00181(this, "alpha");
                    AnimatorSet animatorSet = new AnimatorSet();
                    animatorSet.playTogether(ObjectAnimator.ofFloat(this.val$cameraContainer, View.ALPHA, 0.0f), ObjectAnimator.ofFloat(AnonymousClass4.this.val$messageCell, c00181, 1.0f));
                    animatorSet.setDuration(100L);
                    animatorSet.setInterpolator(new DecelerateInterpolator());
                    animatorSet.addListener(new AnonymousClass2());
                    animatorSet.start();
                }

                /* renamed from: org.telegram.ui.ChatActivity$ChatActivityAdapter$4$1$1 */
                /* loaded from: classes3.dex */
                class C00181 extends AnimationProperties.FloatProperty<ChatMessageCell> {
                    C00181(AnonymousClass1 anonymousClass1, String str) {
                        super(str);
                    }

                    public void setValue(ChatMessageCell chatMessageCell, float f) {
                        chatMessageCell.setTimeAlpha(f);
                    }

                    public Float get(ChatMessageCell chatMessageCell) {
                        return Float.valueOf(chatMessageCell.getTimeAlpha());
                    }
                }

                /* renamed from: org.telegram.ui.ChatActivity$ChatActivityAdapter$4$1$2 */
                /* loaded from: classes3.dex */
                class AnonymousClass2 extends AnimatorListenerAdapter {
                    AnonymousClass2() {
                        AnonymousClass1.this = r1;
                    }

                    @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                    public void onAnimationEnd(Animator animator) {
                        ChatActivity.this.instantCameraView.setIsMessageTransition(false);
                        ChatActivity.this.instantCameraView.hideCamera(true);
                        ChatActivity.this.instantCameraView.setVisibility(4);
                    }
                }
            }
        }

        /* renamed from: org.telegram.ui.ChatActivity$ChatActivityAdapter$5 */
        /* loaded from: classes3.dex */
        public class AnonymousClass5 implements ViewTreeObserver.OnPreDrawListener {
            final /* synthetic */ ChatMessageCell val$messageCell;

            AnonymousClass5(ChatMessageCell chatMessageCell) {
                ChatActivityAdapter.this = r1;
                this.val$messageCell = chatMessageCell;
            }

            @Override // android.view.ViewTreeObserver.OnPreDrawListener
            public boolean onPreDraw() {
                this.val$messageCell.getViewTreeObserver().removeOnPreDrawListener(this);
                MessageObject.SendAnimationData sendAnimationData = this.val$messageCell.getMessageObject().sendAnimationData;
                if (sendAnimationData == null) {
                    return true;
                }
                ChatActivity.this.animateSendingViews.add(this.val$messageCell);
                ImageReceiver photoImage = this.val$messageCell.getPhotoImage();
                float imageWidth = sendAnimationData.width / photoImage.getImageWidth();
                this.val$messageCell.getTransitionParams().ignoreAlpha = true;
                this.val$messageCell.getLocationInWindow(r5);
                int[] iArr = {0, (int) (iArr[1] - this.val$messageCell.getTranslationY())};
                if (ChatActivity.this.chatActivityEnterView.isTopViewVisible()) {
                    iArr[1] = iArr[1] + AndroidUtilities.dp(48.0f);
                }
                AnimatorSet animatorSet = new AnimatorSet();
                AnonymousClass1 anonymousClass1 = new AnonymousClass1(this, "p1");
                AnonymousClass2 anonymousClass2 = new AnonymousClass2("p2");
                AnonymousClass3 anonymousClass3 = new AnonymousClass3("p3");
                AnimatorSet animatorSet2 = new AnimatorSet();
                animatorSet2.playTogether(ObjectAnimator.ofFloat(sendAnimationData, anonymousClass1, imageWidth, 1.0f), ObjectAnimator.ofFloat(sendAnimationData, anonymousClass3, sendAnimationData.y, iArr[1] + photoImage.getCenterY()));
                animatorSet2.setInterpolator(ChatListItemAnimator.DEFAULT_INTERPOLATOR);
                ObjectAnimator ofFloat = ObjectAnimator.ofFloat(sendAnimationData, anonymousClass2, sendAnimationData.x, iArr[0] + photoImage.getCenterX());
                ofFloat.setInterpolator(CubicBezierInterpolator.EASE_OUT_QUINT);
                animatorSet.playTogether(ofFloat, animatorSet2);
                animatorSet.setDuration(250L);
                animatorSet.addListener(new AnonymousClass4());
                animatorSet.start();
                C00195 c00195 = new C00195("alpha");
                AnimatorSet animatorSet3 = new AnimatorSet();
                animatorSet3.playTogether(ObjectAnimator.ofFloat(sendAnimationData, c00195, 0.0f, 1.0f));
                animatorSet3.setDuration(100L);
                animatorSet3.setStartDelay(150L);
                animatorSet3.setInterpolator(new DecelerateInterpolator());
                animatorSet3.start();
                return true;
            }

            /* renamed from: org.telegram.ui.ChatActivity$ChatActivityAdapter$5$1 */
            /* loaded from: classes3.dex */
            class AnonymousClass1 extends AnimationProperties.FloatProperty<MessageObject.SendAnimationData> {
                AnonymousClass1(AnonymousClass5 anonymousClass5, String str) {
                    super(str);
                }

                public void setValue(MessageObject.SendAnimationData sendAnimationData, float f) {
                    sendAnimationData.currentScale = f;
                }

                public Float get(MessageObject.SendAnimationData sendAnimationData) {
                    return Float.valueOf(sendAnimationData.currentScale);
                }
            }

            /* renamed from: org.telegram.ui.ChatActivity$ChatActivityAdapter$5$2 */
            /* loaded from: classes3.dex */
            class AnonymousClass2 extends AnimationProperties.FloatProperty<MessageObject.SendAnimationData> {
                /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
                AnonymousClass2(String str) {
                    super(str);
                    AnonymousClass5.this = r1;
                }

                public void setValue(MessageObject.SendAnimationData sendAnimationData, float f) {
                    sendAnimationData.currentX = f;
                    if (((BaseFragment) ChatActivity.this).fragmentView != null) {
                        ((BaseFragment) ChatActivity.this).fragmentView.invalidate();
                    }
                }

                public Float get(MessageObject.SendAnimationData sendAnimationData) {
                    return Float.valueOf(sendAnimationData.currentX);
                }
            }

            /* renamed from: org.telegram.ui.ChatActivity$ChatActivityAdapter$5$3 */
            /* loaded from: classes3.dex */
            class AnonymousClass3 extends AnimationProperties.FloatProperty<MessageObject.SendAnimationData> {
                /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
                AnonymousClass3(String str) {
                    super(str);
                    AnonymousClass5.this = r1;
                }

                public void setValue(MessageObject.SendAnimationData sendAnimationData, float f) {
                    sendAnimationData.currentY = f;
                    if (((BaseFragment) ChatActivity.this).fragmentView != null) {
                        ((BaseFragment) ChatActivity.this).fragmentView.invalidate();
                    }
                }

                public Float get(MessageObject.SendAnimationData sendAnimationData) {
                    return Float.valueOf(sendAnimationData.currentY);
                }
            }

            /* renamed from: org.telegram.ui.ChatActivity$ChatActivityAdapter$5$4 */
            /* loaded from: classes3.dex */
            class AnonymousClass4 extends AnimatorListenerAdapter {
                AnonymousClass4() {
                    AnonymousClass5.this = r1;
                }

                @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                public void onAnimationEnd(Animator animator) {
                    ChatActivity.this.animateSendingViews.remove(AnonymousClass5.this.val$messageCell);
                    if (((BaseFragment) ChatActivity.this).fragmentView != null) {
                        ((BaseFragment) ChatActivity.this).fragmentView.invalidate();
                        ChatActivity.this.chatListView.invalidate();
                    }
                    AnonymousClass5.this.val$messageCell.setAlpha(1.0f);
                    AnonymousClass5.this.val$messageCell.getTransitionParams().ignoreAlpha = false;
                }
            }

            /* renamed from: org.telegram.ui.ChatActivity$ChatActivityAdapter$5$5 */
            /* loaded from: classes3.dex */
            class C00195 extends AnimationProperties.FloatProperty<MessageObject.SendAnimationData> {
                /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
                C00195(String str) {
                    super(str);
                    AnonymousClass5.this = r1;
                }

                public void setValue(MessageObject.SendAnimationData sendAnimationData, float f) {
                    sendAnimationData.timeAlpha = f;
                    if (((BaseFragment) ChatActivity.this).fragmentView != null) {
                        ((BaseFragment) ChatActivity.this).fragmentView.invalidate();
                    }
                }

                public Float get(MessageObject.SendAnimationData sendAnimationData) {
                    return Float.valueOf(sendAnimationData.timeAlpha);
                }
            }
        }

        @Override // androidx.recyclerview.widget.RecyclerView.Adapter
        public int getItemViewType(int i) {
            if (!ChatActivity.this.clearingHistory || i != this.botInfoEmptyRow) {
                int i2 = this.messagesStartRow;
                if (i < i2 || i >= this.messagesEndRow) {
                    return i == this.botInfoRow ? 3 : 4;
                }
                return (this.isFrozen ? this.frozenMessages : ChatActivity.this.messages).get(i - i2).contentType;
            }
            return 3;
        }

        /* JADX WARN: Removed duplicated region for block: B:72:0x017c  */
        @Override // androidx.recyclerview.widget.RecyclerView.Adapter
        /*
            Code decompiled incorrectly, please refer to instructions dump.
        */
        public void onViewAttachedToWindow(RecyclerView.ViewHolder viewHolder) {
            TLRPC$Message tLRPC$Message;
            boolean z;
            boolean z2;
            String stickerEmoji;
            MessagesController.EmojiSound emojiSound;
            View view = viewHolder.itemView;
            if ((view instanceof ChatMessageCell) || (view instanceof ChatActionCell)) {
                view.getViewTreeObserver().addOnPreDrawListener(new AnonymousClass6(view, viewHolder));
            }
            View view2 = viewHolder.itemView;
            if (view2 instanceof ChatMessageCell) {
                ChatMessageCell chatMessageCell = (ChatMessageCell) view2;
                MessageObject messageObject = chatMessageCell.getMessageObject();
                chatMessageCell.showHintButton(true, false, -1);
                if (ChatActivity.this.hintMessageObject != null && ChatActivity.this.hintMessageObject.equals(messageObject)) {
                    chatMessageCell.showHintButton(false, false, ChatActivity.this.hintMessageType);
                }
                if (messageObject.isAnimatedEmoji() && (stickerEmoji = messageObject.getStickerEmoji()) != null && (emojiSound = ChatActivity.this.getMessagesController().emojiSounds.get(stickerEmoji.replace("️", ""))) != null) {
                    ChatActivity.this.getMediaController().playEmojiSound(ChatActivity.this.getAccountInstance(), stickerEmoji, emojiSound, true);
                }
                if (((BaseFragment) ChatActivity.this).actionBar.isActionModeShowed() || ChatActivity.this.reportType >= 0) {
                    chatMessageCell.setCheckBoxVisible(ChatActivity.this.threadMessageObjects == null || !ChatActivity.this.threadMessageObjects.contains(messageObject), false);
                    int i = messageObject.getDialogId() == ChatActivity.this.dialog_id ? 0 : 1;
                    if (ChatActivity.this.selectedMessagesIds[i].indexOfKey(messageObject.getId()) >= 0) {
                        ChatActivity.this.setCellSelectionBackground(messageObject, chatMessageCell, i, false);
                        z2 = true;
                    } else {
                        chatMessageCell.setDrawSelectionBackground(false);
                        chatMessageCell.setChecked(false, false, false);
                        z2 = false;
                    }
                    z = true;
                } else {
                    chatMessageCell.setDrawSelectionBackground(false);
                    chatMessageCell.setChecked(false, false, false);
                    chatMessageCell.setCheckBoxVisible(false, false);
                    z2 = false;
                    z = false;
                }
                chatMessageCell.setCheckPressed(!z, z && z2);
                if (ChatActivity.this.searchContainer != null && ChatActivity.this.searchContainer.getVisibility() == 0) {
                    if (ChatActivity.this.getMediaDataController().isMessageFound(messageObject.getId(), messageObject.getDialogId() == ChatActivity.this.mergeDialogId) && ChatActivity.this.getMediaDataController().getLastSearchQuery() != null) {
                        chatMessageCell.setHighlightedText(ChatActivity.this.getMediaDataController().getLastSearchQuery());
                        if (((BaseFragment) ChatActivity.this).inPreviewMode || !chatMessageCell.isHighlighted()) {
                            chatMessageCell.setHighlighted(ChatActivity.this.highlightMessageId == Integer.MAX_VALUE && chatMessageCell.getMessageObject().getId() == ChatActivity.this.highlightMessageId);
                            if (ChatActivity.this.highlightMessageId != Integer.MAX_VALUE) {
                                ChatActivity.this.startMessageUnselect();
                            }
                        }
                    }
                }
                chatMessageCell.setHighlightedText(null);
                if (((BaseFragment) ChatActivity.this).inPreviewMode) {
                }
                chatMessageCell.setHighlighted(ChatActivity.this.highlightMessageId == Integer.MAX_VALUE && chatMessageCell.getMessageObject().getId() == ChatActivity.this.highlightMessageId);
                if (ChatActivity.this.highlightMessageId != Integer.MAX_VALUE) {
                }
            }
            int adapterPosition = viewHolder.getAdapterPosition();
            int i2 = this.messagesStartRow;
            if (adapterPosition < i2 || adapterPosition >= this.messagesEndRow) {
                return;
            }
            MessageObject messageObject2 = (this.isFrozen ? this.frozenMessages : ChatActivity.this.messages).get(adapterPosition - i2);
            View view3 = viewHolder.itemView;
            if (messageObject2 == null || (tLRPC$Message = messageObject2.messageOwner) == null || !tLRPC$Message.media_unread || !tLRPC$Message.mentioned) {
                return;
            }
            if (!((BaseFragment) ChatActivity.this).inPreviewMode && ChatActivity.this.chatMode == 0 && !messageObject2.isVoice() && !messageObject2.isRoundVideo()) {
                ChatActivity.access$23910(ChatActivity.this);
                if (ChatActivity.this.newMentionsCount <= 0) {
                    ChatActivity.this.newMentionsCount = 0;
                    ChatActivity.this.hasAllMentionsLocal = true;
                    ChatActivity.this.showMentionDownButton(false, true);
                } else {
                    ChatActivity.this.mentiondownButtonCounter.setText(String.format("%d", Integer.valueOf(ChatActivity.this.newMentionsCount)));
                }
                ChatActivity.this.getMessagesController().markMentionMessageAsRead(messageObject2.getId(), ChatObject.isChannel(ChatActivity.this.currentChat) ? ChatActivity.this.currentChat.id : 0L, ChatActivity.this.dialog_id);
                messageObject2.setContentIsRead();
            }
            if (!(view3 instanceof ChatMessageCell)) {
                return;
            }
            ChatMessageCell chatMessageCell2 = (ChatMessageCell) view3;
            if (((BaseFragment) ChatActivity.this).inPreviewMode) {
                chatMessageCell2.setHighlighted(true);
            } else {
                chatMessageCell2.setHighlightedAnimated();
            }
        }

        /* renamed from: org.telegram.ui.ChatActivity$ChatActivityAdapter$6 */
        /* loaded from: classes3.dex */
        class AnonymousClass6 implements ViewTreeObserver.OnPreDrawListener {
            final /* synthetic */ RecyclerView.ViewHolder val$holder;
            final /* synthetic */ View val$view;

            AnonymousClass6(View view, RecyclerView.ViewHolder viewHolder) {
                ChatActivityAdapter.this = r1;
                this.val$view = view;
                this.val$holder = viewHolder;
            }

            @Override // android.view.ViewTreeObserver.OnPreDrawListener
            public boolean onPreDraw() {
                this.val$view.getViewTreeObserver().removeOnPreDrawListener(this);
                int measuredHeight = ChatActivity.this.chatListView.getMeasuredHeight();
                int top = this.val$view.getTop();
                this.val$view.getBottom();
                int i = 0;
                int i2 = top >= 0 ? 0 : -top;
                int measuredHeight2 = this.val$view.getMeasuredHeight();
                if (measuredHeight2 > measuredHeight) {
                    measuredHeight2 = i2 + measuredHeight;
                }
                int heightWithKeyboard = ChatActivity.this.contentView.getHeightWithKeyboard();
                if (!((BaseFragment) ChatActivity.this).inPreviewMode) {
                    i = AndroidUtilities.dp(48.0f);
                }
                int top2 = (heightWithKeyboard - i) - ChatActivity.this.chatListView.getTop();
                int keyboardHeight = ChatActivity.this.contentView.getKeyboardHeight();
                int i3 = measuredHeight2 - i2;
                if ((keyboardHeight < AndroidUtilities.dp(20.0f) && ChatActivity.this.chatActivityEnterView.isPopupShowing()) || ChatActivity.this.chatActivityEnterView.panelAnimationInProgress()) {
                    keyboardHeight = ChatActivity.this.chatActivityEnterView.getEmojiPadding();
                }
                View view = this.val$holder.itemView;
                if (view instanceof ChatMessageCell) {
                    View view2 = this.val$view;
                    ChatMessageCell chatMessageCell = (ChatMessageCell) view2;
                    float f = keyboardHeight;
                    float y = (view2.getY() + (ChatActivity.this.isKeyboardVisible() ? ChatActivity.this.chatListView.getTop() : ((BaseFragment) ChatActivity.this).actionBar.getMeasuredHeight())) - ChatActivity.this.contentView.getBackgroundTranslationY();
                    int measuredWidth = ChatActivity.this.contentView.getMeasuredWidth();
                    int backgroundSizeY = ChatActivity.this.contentView.getBackgroundSizeY();
                    ChatActivity chatActivity = ChatActivity.this;
                    chatMessageCell.setVisiblePart(i2, i3, top2, f, y, measuredWidth, backgroundSizeY, chatActivity.blurredViewTopOffset, chatActivity.blurredViewBottomOffset);
                    ChatActivity.this.markSponsoredAsRead(chatMessageCell.getMessageObject());
                    return true;
                } else if (!(view instanceof ChatActionCell) || ((BaseFragment) ChatActivity.this).actionBar == null || ChatActivity.this.contentView == null) {
                    return true;
                } else {
                    View view3 = this.val$view;
                    ((ChatActionCell) view3).setVisiblePart((view3.getY() + (ChatActivity.this.isKeyboardVisible() ? ChatActivity.this.chatListView.getTop() : ((BaseFragment) ChatActivity.this).actionBar.getMeasuredHeight())) - ChatActivity.this.contentView.getBackgroundTranslationY(), ChatActivity.this.contentView.getBackgroundSizeY());
                    return true;
                }
            }
        }

        public void updateRowAtPosition(int i) {
            int i2;
            if (ChatActivity.this.chatLayoutManager == null || this.isFrozen) {
                return;
            }
            int i3 = 0;
            if (!ChatActivity.this.wasManualScroll && ChatActivity.this.unreadMessageObject != null) {
                int childCount = ChatActivity.this.chatListView.getChildCount();
                int i4 = 0;
                while (true) {
                    if (i4 >= childCount) {
                        break;
                    }
                    View childAt = ChatActivity.this.chatListView.getChildAt(i4);
                    if (!(childAt instanceof ChatMessageCell) || ((ChatMessageCell) childAt).getMessageObject() != ChatActivity.this.unreadMessageObject) {
                        i4++;
                    } else {
                        ChatActivity chatActivity = ChatActivity.this;
                        if (chatActivity.messages.indexOf(chatActivity.unreadMessageObject) >= 0) {
                            int i5 = this.messagesStartRow;
                            ChatActivity chatActivity2 = ChatActivity.this;
                            i2 = i5 + chatActivity2.messages.indexOf(chatActivity2.unreadMessageObject);
                            i3 = (ChatActivity.this.chatListView.getMeasuredHeight() - childAt.getBottom()) - ChatActivity.this.chatListView.getPaddingBottom();
                        }
                    }
                }
            }
            i2 = -1;
            notifyItemChanged(i);
            if (i2 == -1) {
                return;
            }
            ChatActivity.this.chatLayoutManager.scrollToPositionWithOffset(i2, i3);
        }

        public void invalidateRowWithMessageObject(MessageObject messageObject) {
            int childCount = ChatActivity.this.chatListView.getChildCount();
            for (int i = 0; i < childCount; i++) {
                View childAt = ChatActivity.this.chatListView.getChildAt(i);
                if (childAt instanceof ChatMessageCell) {
                    ChatMessageCell chatMessageCell = (ChatMessageCell) childAt;
                    if (chatMessageCell.getMessageObject() == messageObject) {
                        chatMessageCell.invalidate();
                        return;
                    }
                }
            }
        }

        public View updateRowWithMessageObject(MessageObject messageObject, boolean z) {
            if (z) {
                int childCount = ChatActivity.this.chatListView.getChildCount();
                for (int i = 0; i < childCount; i++) {
                    View childAt = ChatActivity.this.chatListView.getChildAt(i);
                    if (childAt instanceof ChatMessageCell) {
                        ChatMessageCell chatMessageCell = (ChatMessageCell) childAt;
                        if (chatMessageCell.getMessageObject() == messageObject && !chatMessageCell.isAdminLayoutChanged()) {
                            chatMessageCell.setMessageObject(messageObject, chatMessageCell.getCurrentMessagesGroup(), chatMessageCell.isPinnedBottom(), chatMessageCell.isPinnedTop());
                            return chatMessageCell;
                        }
                    }
                }
            }
            int indexOf = (this.isFrozen ? this.frozenMessages : ChatActivity.this.messages).indexOf(messageObject);
            if (indexOf == -1) {
                return null;
            }
            updateRowAtPosition(indexOf + this.messagesStartRow);
            return null;
        }

        public void notifyDataSetChanged(boolean z) {
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("notify data set changed fragmentOpened=" + ChatActivity.this.fragmentOpened);
            }
            try {
                if (z) {
                    ChatActivity chatActivity = ChatActivity.this;
                    if (chatActivity.fragmentOpened) {
                        if (chatActivity.chatListView.getItemAnimator() != ChatActivity.this.chatListItemAnimator) {
                            ChatActivity.this.chatListView.setItemAnimator(ChatActivity.this.chatListItemAnimator);
                        }
                        updateRowsInternal();
                        super.notifyDataSetChanged();
                        return;
                    }
                }
                super.notifyDataSetChanged();
                return;
            } catch (Exception e) {
                FileLog.e(e);
                return;
            }
            ChatActivity.this.chatListView.setItemAnimator(null);
            updateRowsInternal();
        }

        @Override // org.telegram.ui.Components.RecyclerAnimationScrollHelper.AnimatableAdapter, androidx.recyclerview.widget.RecyclerView.Adapter
        public void notifyDataSetChanged() {
            notifyDataSetChanged(false);
        }

        @Override // org.telegram.ui.Components.RecyclerAnimationScrollHelper.AnimatableAdapter, androidx.recyclerview.widget.RecyclerView.Adapter
        public void notifyItemChanged(int i) {
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("notify item changed " + i);
            }
            if (!((BaseFragment) ChatActivity.this).fragmentBeginToShow) {
                ChatActivity.this.chatListView.setItemAnimator(null);
            } else if (ChatActivity.this.chatListView.getItemAnimator() != ChatActivity.this.chatListItemAnimator) {
                ChatActivity.this.chatListView.setItemAnimator(ChatActivity.this.chatListItemAnimator);
            }
            updateRowsInternal();
            try {
                super.notifyItemChanged(i);
            } catch (Exception e) {
                FileLog.e(e);
            }
        }

        @Override // org.telegram.ui.Components.RecyclerAnimationScrollHelper.AnimatableAdapter, androidx.recyclerview.widget.RecyclerView.Adapter
        public void notifyItemRangeChanged(int i, int i2) {
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("notify item range changed " + i + ":" + i2);
            }
            if (!((BaseFragment) ChatActivity.this).fragmentBeginToShow) {
                ChatActivity.this.chatListView.setItemAnimator(null);
            } else if (ChatActivity.this.chatListView.getItemAnimator() != ChatActivity.this.chatListItemAnimator) {
                ChatActivity.this.chatListView.setItemAnimator(ChatActivity.this.chatListItemAnimator);
            }
            updateRowsInternal();
            try {
                super.notifyItemRangeChanged(i, i2);
            } catch (Exception e) {
                FileLog.e(e);
            }
        }

        @Override // org.telegram.ui.Components.RecyclerAnimationScrollHelper.AnimatableAdapter, androidx.recyclerview.widget.RecyclerView.Adapter
        public void notifyItemInserted(int i) {
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("notify item inserted " + i);
            }
            if (!((BaseFragment) ChatActivity.this).fragmentBeginToShow) {
                ChatActivity.this.chatListView.setItemAnimator(null);
            } else if (ChatActivity.this.chatListView.getItemAnimator() != ChatActivity.this.chatListItemAnimator) {
                ChatActivity.this.chatListView.setItemAnimator(ChatActivity.this.chatListItemAnimator);
            }
            updateRowsInternal();
            try {
                super.notifyItemInserted(i);
            } catch (Exception e) {
                FileLog.e(e);
            }
        }

        @Override // androidx.recyclerview.widget.RecyclerView.Adapter
        public void notifyItemMoved(int i, int i2) {
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("notify item moved" + i + ":" + i2);
            }
            if (!((BaseFragment) ChatActivity.this).fragmentBeginToShow) {
                ChatActivity.this.chatListView.setItemAnimator(null);
            } else if (ChatActivity.this.chatListView.getItemAnimator() != ChatActivity.this.chatListItemAnimator) {
                ChatActivity.this.chatListView.setItemAnimator(ChatActivity.this.chatListItemAnimator);
            }
            updateRowsInternal();
            try {
                super.notifyItemMoved(i, i2);
            } catch (Exception e) {
                FileLog.e(e);
            }
        }

        @Override // org.telegram.ui.Components.RecyclerAnimationScrollHelper.AnimatableAdapter, androidx.recyclerview.widget.RecyclerView.Adapter
        public void notifyItemRangeInserted(int i, int i2) {
            int i3;
            int i4;
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("notify item range inserted" + i + ":" + i2);
            }
            if (!((BaseFragment) ChatActivity.this).fragmentBeginToShow) {
                ChatActivity.this.chatListView.setItemAnimator(null);
            } else if (ChatActivity.this.chatListView.getItemAnimator() != ChatActivity.this.chatListItemAnimator) {
                ChatActivity.this.chatListView.setItemAnimator(ChatActivity.this.chatListItemAnimator);
            }
            updateRowsInternal();
            if (i == 1 && i2 > 0 && (i3 = i + i2) >= (i4 = this.messagesStartRow) && i3 < this.messagesEndRow) {
                MessageObject messageObject = ChatActivity.this.messages.get(i3 - i4);
                MessageObject messageObject2 = ChatActivity.this.messages.get((i3 - this.messagesStartRow) - 1);
                if ((ChatActivity.this.currentChat != null && messageObject.getFromChatId() == messageObject2.getFromChatId()) || (ChatActivity.this.currentUser != null && messageObject.isOutOwner() == messageObject2.isOutOwner())) {
                    notifyItemChanged(i);
                }
            }
            try {
                super.notifyItemRangeInserted(i, i2);
            } catch (Exception e) {
                FileLog.e(e);
            }
        }

        @Override // org.telegram.ui.Components.RecyclerAnimationScrollHelper.AnimatableAdapter, androidx.recyclerview.widget.RecyclerView.Adapter
        public void notifyItemRemoved(int i) {
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("notify item removed " + i);
            }
            if (!((BaseFragment) ChatActivity.this).fragmentBeginToShow) {
                ChatActivity.this.chatListView.setItemAnimator(null);
            } else if (ChatActivity.this.chatListView.getItemAnimator() != ChatActivity.this.chatListItemAnimator) {
                ChatActivity.this.chatListView.setItemAnimator(ChatActivity.this.chatListItemAnimator);
            }
            updateRowsInternal();
            try {
                super.notifyItemRemoved(i);
            } catch (Exception e) {
                FileLog.e(e);
            }
        }

        @Override // org.telegram.ui.Components.RecyclerAnimationScrollHelper.AnimatableAdapter, androidx.recyclerview.widget.RecyclerView.Adapter
        public void notifyItemRangeRemoved(int i, int i2) {
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("notify item range removed" + i + ":" + i2);
            }
            if (!((BaseFragment) ChatActivity.this).fragmentBeginToShow) {
                ChatActivity.this.chatListView.setItemAnimator(null);
            } else if (ChatActivity.this.chatListView.getItemAnimator() != ChatActivity.this.chatListItemAnimator) {
                ChatActivity.this.chatListView.setItemAnimator(ChatActivity.this.chatListItemAnimator);
            }
            updateRowsInternal();
            try {
                super.notifyItemRangeRemoved(i, i2);
            } catch (Exception e) {
                FileLog.e(e);
            }
        }
    }

    /* renamed from: org.telegram.ui.ChatActivity$117 */
    /* loaded from: classes3.dex */
    public static /* synthetic */ class AnonymousClass117 {
        static final /* synthetic */ int[] $SwitchMap$org$telegram$ui$AvatarPreviewer$MenuItem;

        static {
            int[] iArr = new int[AvatarPreviewer.MenuItem.values().length];
            $SwitchMap$org$telegram$ui$AvatarPreviewer$MenuItem = iArr;
            try {
                iArr[AvatarPreviewer.MenuItem.OPEN_PROFILE.ordinal()] = 1;
            } catch (NoSuchFieldError unused) {
            }
            try {
                $SwitchMap$org$telegram$ui$AvatarPreviewer$MenuItem[AvatarPreviewer.MenuItem.OPEN_GROUP.ordinal()] = 2;
            } catch (NoSuchFieldError unused2) {
            }
            try {
                $SwitchMap$org$telegram$ui$AvatarPreviewer$MenuItem[AvatarPreviewer.MenuItem.OPEN_CHANNEL.ordinal()] = 3;
            } catch (NoSuchFieldError unused3) {
            }
            try {
                $SwitchMap$org$telegram$ui$AvatarPreviewer$MenuItem[AvatarPreviewer.MenuItem.SEND_MESSAGE.ordinal()] = 4;
            } catch (NoSuchFieldError unused4) {
            }
            try {
                $SwitchMap$org$telegram$ui$AvatarPreviewer$MenuItem[AvatarPreviewer.MenuItem.MENTION.ordinal()] = 5;
            } catch (NoSuchFieldError unused5) {
            }
        }
    }

    public boolean openLinkInternally(String str, int i) {
        if (this.currentChat != null && str != null) {
            if (str.startsWith("tg:privatepost") || str.startsWith("tg://privatepost")) {
                Uri parse = Uri.parse(str.replace("tg:privatepost", "tg://telegram.org").replace("tg://privatepost", "tg://telegram.org"));
                int intValue = Utilities.parseInt((CharSequence) parse.getQueryParameter("post")).intValue();
                long longValue = Utilities.parseLong(parse.getQueryParameter("channel")).longValue();
                int intValue2 = Utilities.parseInt((CharSequence) parse.getQueryParameter("thread")).intValue();
                long j = this.currentChat.id;
                if (longValue == j && intValue != 0) {
                    if (intValue2 != 0) {
                        openDiscussionMessageChat(j, null, intValue2, 0L, -1, 0, null);
                    } else {
                        this.showScrollToMessageError = true;
                        if (this.chatMode == 2) {
                            this.chatActivityDelegate.openReplyMessage(intValue);
                            finishFragment();
                        } else {
                            scrollToMessageId(intValue, i, true, 0, false, 0);
                        }
                    }
                    return true;
                }
            } else {
                String str2 = this.currentChat.username;
                if (str2 != null) {
                    String lowerCase = str2.toLowerCase();
                    if (publicMsgUrlPattern == null) {
                        publicMsgUrlPattern = Pattern.compile("(https://)?t.me/([0-9a-zA-Z_]+)/([0-9]+)");
                        voiceChatUrlPattern = Pattern.compile("(https://)?t.me/([0-9a-zA-Z_]+)\\?(voicechat+)");
                    }
                    Matcher matcher = publicMsgUrlPattern.matcher(str);
                    if (matcher.find(2) && matcher.find(3) && lowerCase.equals(matcher.group(2).toLowerCase())) {
                        Uri parse2 = Uri.parse(str);
                        int intValue3 = Utilities.parseInt((CharSequence) parse2.getQueryParameter("thread")).intValue();
                        int intValue4 = Utilities.parseInt((CharSequence) parse2.getQueryParameter("comment")).intValue();
                        if (intValue3 != 0 || intValue4 != 0) {
                            return false;
                        }
                        int parseInt = Integer.parseInt(matcher.group(3));
                        this.showScrollToMessageError = true;
                        if (this.chatMode == 2) {
                            this.chatActivityDelegate.openReplyMessage(parseInt);
                            finishFragment();
                        } else {
                            int timestampFromLink = LaunchActivity.getTimestampFromLink(parse2);
                            this.startFromVideoTimestamp = timestampFromLink;
                            if (timestampFromLink >= 0) {
                                this.startFromVideoMessageId = parseInt;
                            }
                            scrollToMessageId(parseInt, i, true, 0, false, 0);
                        }
                        return true;
                    } else if (str.startsWith("tg:resolve") || str.startsWith("tg://resolve")) {
                        Uri parse3 = Uri.parse(str.replace("tg:resolve", "tg://telegram.org").replace("tg://resolve", "tg://telegram.org"));
                        String lowerCase2 = parse3.getQueryParameter("domain").toLowerCase();
                        int intValue5 = Utilities.parseInt((CharSequence) parse3.getQueryParameter("post")).intValue();
                        int intValue6 = Utilities.parseInt((CharSequence) parse3.getQueryParameter("thread")).intValue();
                        int intValue7 = Utilities.parseInt((CharSequence) parse3.getQueryParameter("comment")).intValue();
                        if (!lowerCase.equals(lowerCase2) || intValue5 == 0 || intValue6 != 0 || intValue7 != 0) {
                            return false;
                        }
                        if (this.chatMode == 2) {
                            this.chatActivityDelegate.openReplyMessage(intValue5);
                            finishFragment();
                        } else {
                            scrollToMessageId(intValue5, i, true, 0, false, 0);
                        }
                        return true;
                    } else {
                        Matcher matcher2 = voiceChatUrlPattern.matcher(str);
                        try {
                            if (matcher2.find(2) && matcher2.find(3) && lowerCase.equals(matcher2.group(2).toLowerCase())) {
                                String queryParameter = Uri.parse(str).getQueryParameter("voicechat");
                                if (!TextUtils.isEmpty(queryParameter)) {
                                    this.voiceChatHash = queryParameter;
                                    checkGroupCallJoin(true);
                                    return true;
                                }
                            }
                        } catch (Exception e) {
                            FileLog.e(e);
                        }
                    }
                } else {
                    if (privateMsgUrlPattern == null) {
                        privateMsgUrlPattern = Pattern.compile("(https://)?t.me/c/([0-9]+)/([0-9]+)");
                    }
                    Matcher matcher3 = privateMsgUrlPattern.matcher(str);
                    if (matcher3.find(2) && matcher3.find(3)) {
                        long parseLong = Long.parseLong(matcher3.group(2));
                        int parseInt2 = Integer.parseInt(matcher3.group(3));
                        if (parseLong == this.currentChat.id && parseInt2 != 0) {
                            Uri parse4 = Uri.parse(str);
                            int intValue8 = Utilities.parseInt((CharSequence) parse4.getQueryParameter("thread")).intValue();
                            int intValue9 = Utilities.parseInt((CharSequence) parse4.getQueryParameter("comment")).intValue();
                            if (intValue8 != 0 || intValue9 != 0) {
                                return false;
                            }
                            this.showScrollToMessageError = true;
                            if (this.chatMode == 2) {
                                this.chatActivityDelegate.openReplyMessage(parseInt2);
                                finishFragment();
                            } else {
                                scrollToMessageId(parseInt2, i, true, 0, false, 0);
                            }
                            return true;
                        }
                    }
                }
            }
        }
        return false;
    }

    @Override // org.telegram.ui.ActionBar.BaseFragment
    public void setInMenuMode(boolean z) {
        super.setInMenuMode(z);
        ActionBar actionBar = this.actionBar;
        if (actionBar != null) {
            actionBar.createMenu().setVisibility(this.inMenuMode ? 8 : 0);
        }
    }

    public void setPreloadedSticker(TLRPC$Document tLRPC$Document, boolean z) {
        this.preloadedGreetingsSticker = tLRPC$Document;
        this.forceHistoryEmpty = z;
    }

    /* loaded from: classes3.dex */
    public class ChatScrollCallback extends RecyclerAnimationScrollHelper.AnimationCallback {
        private boolean lastBottom;
        private int lastItemOffset;
        private int lastPadding;
        private MessageObject scrollTo;

        public ChatScrollCallback() {
            ChatActivity.this = r1;
        }

        static /* synthetic */ MessageObject access$33902(ChatScrollCallback chatScrollCallback, MessageObject messageObject) {
            chatScrollCallback.scrollTo = messageObject;
            return messageObject;
        }

        static /* synthetic */ boolean access$34002(ChatScrollCallback chatScrollCallback, boolean z) {
            chatScrollCallback.lastBottom = z;
            return z;
        }

        static /* synthetic */ int access$34102(ChatScrollCallback chatScrollCallback, int i) {
            chatScrollCallback.lastItemOffset = i;
            return i;
        }

        static /* synthetic */ int access$34202(ChatScrollCallback chatScrollCallback, int i) {
            chatScrollCallback.lastPadding = i;
            return i;
        }

        @Override // org.telegram.ui.Components.RecyclerAnimationScrollHelper.AnimationCallback
        public void onStartAnimation() {
            super.onStartAnimation();
            ChatActivity chatActivity = ChatActivity.this;
            chatActivity.scrollCallbackAnimationIndex = chatActivity.getNotificationCenter().setAnimationInProgress(ChatActivity.this.scrollCallbackAnimationIndex, ChatActivity.allowedNotificationsDuringChatListAnimations);
            if (ChatActivity.this.pinchToZoomHelper.isInOverlayMode()) {
                ChatActivity.this.pinchToZoomHelper.finishZoom();
            }
        }

        @Override // org.telegram.ui.Components.RecyclerAnimationScrollHelper.AnimationCallback
        public void onEndAnimation() {
            if (this.scrollTo != null) {
                ChatActivity.this.chatAdapter.updateRowsSafe();
                int indexOf = ChatActivity.this.chatAdapter.messagesStartRow + ChatActivity.this.messages.indexOf(this.scrollTo);
                if (indexOf >= 0) {
                    ChatActivity.this.chatLayoutManager.scrollToPositionWithOffset(indexOf, (int) ((this.lastItemOffset + this.lastPadding) - ChatActivity.this.chatListViewPaddingTop), this.lastBottom);
                }
            } else {
                ChatActivity.this.chatAdapter.updateRowsSafe();
                ChatActivity.this.chatLayoutManager.scrollToPositionWithOffset(0, 0, true);
            }
            this.scrollTo = null;
            ChatActivity.this.checkTextureViewPosition = true;
            ChatActivity.this.updateVisibleRows();
            AndroidUtilities.runOnUIThread(new ChatActivity$ChatScrollCallback$$ExternalSyntheticLambda0(this));
        }

        public /* synthetic */ void lambda$onEndAnimation$0() {
            ChatActivity.this.getNotificationCenter().onAnimationFinish(ChatActivity.this.scrollCallbackAnimationIndex);
        }

        @Override // org.telegram.ui.Components.RecyclerAnimationScrollHelper.AnimationCallback
        public void recycleView(View view) {
            if (view instanceof ChatMessageCell) {
                ChatActivity.this.chatMessageCellsCache.add((ChatMessageCell) view);
            }
        }
    }

    public static boolean isClickableLink(String str) {
        return str.startsWith("https://") || str.startsWith("@") || str.startsWith("#") || str.startsWith("$") || str.startsWith("video?");
    }

    public SimpleTextView getReplyNameTextView() {
        return this.replyNameTextView;
    }

    public SimpleTextView getReplyObjectTextView() {
        return this.replyObjectTextView;
    }

    @Override // org.telegram.ui.ActionBar.BaseFragment
    public ArrayList<ThemeDescription> getThemeDescriptions() {
        if (this.isPauseOnThemePreview) {
            this.isPauseOnThemePreview = false;
            return null;
        }
        ChatActivity$$ExternalSyntheticLambda235 chatActivity$$ExternalSyntheticLambda235 = new ChatActivity$$ExternalSyntheticLambda235(this);
        ArrayList<ThemeDescription> arrayList = new ArrayList<>();
        arrayList.add(new ThemeDescription(this.fragmentView, 0, null, null, null, null, "chat_wallpaper"));
        arrayList.add(new ThemeDescription(this.fragmentView, 0, null, null, null, null, "chat_wallpaper_gradient_to"));
        arrayList.add(new ThemeDescription(this.fragmentView, 0, null, null, null, null, "key_chat_wallpaper_gradient_to2"));
        arrayList.add(new ThemeDescription(this.fragmentView, 0, null, null, null, null, "key_chat_wallpaper_gradient_to3"));
        arrayList.add(new ThemeDescription(this.messagesSearchListView, ThemeDescription.FLAG_BACKGROUND, null, null, null, null, "windowBackgroundWhite"));
        if (this.reportType < 0) {
            arrayList.add(new ThemeDescription(this.actionBar, ThemeDescription.FLAG_BACKGROUND, null, null, null, null, "actionBarDefault"));
            arrayList.add(new ThemeDescription(this.actionBar, ThemeDescription.FLAG_AB_ITEMSCOLOR, null, null, null, null, "actionBarDefaultIcon"));
            arrayList.add(new ThemeDescription(this.actionBar, ThemeDescription.FLAG_AB_SELECTORCOLOR, null, null, null, null, "actionBarDefaultSelector"));
            arrayList.add(new ThemeDescription(this.actionBar, ThemeDescription.FLAG_AB_TITLECOLOR, null, null, null, null, "actionBarDefaultTitle"));
            arrayList.add(new ThemeDescription(this.actionBar, ThemeDescription.FLAG_AB_SUBTITLECOLOR, null, null, null, null, "actionBarDefaultSubtitle"));
        } else {
            arrayList.add(new ThemeDescription(this.actionBar, ThemeDescription.FLAG_BACKGROUND, null, null, null, null, "actionBarActionModeDefault"));
            arrayList.add(new ThemeDescription(this.actionBar, ThemeDescription.FLAG_AB_ITEMSCOLOR, null, null, null, null, "actionBarActionModeDefaultIcon"));
            arrayList.add(new ThemeDescription(this.actionBar, ThemeDescription.FLAG_AB_SELECTORCOLOR, null, null, null, null, "actionBarActionModeDefaultSelector"));
            arrayList.add(new ThemeDescription(this.actionBar, ThemeDescription.FLAG_AB_TITLECOLOR, null, null, null, null, "actionBarActionModeDefaultIcon"));
            arrayList.add(new ThemeDescription(this.actionBar, ThemeDescription.FLAG_AB_SUBTITLECOLOR, null, null, null, null, "actionBarActionModeDefaultIcon"));
        }
        arrayList.add(new ThemeDescription(this.actionBar, ThemeDescription.FLAG_AB_SUBMENUBACKGROUND, null, null, null, chatActivity$$ExternalSyntheticLambda235, "actionBarDefaultSubmenuBackground"));
        arrayList.add(new ThemeDescription(this.actionBar, ThemeDescription.FLAG_AB_SUBMENUITEM, null, null, null, chatActivity$$ExternalSyntheticLambda235, "actionBarDefaultSubmenuItem"));
        arrayList.add(new ThemeDescription(this.actionBar, ThemeDescription.FLAG_IMAGECOLOR | ThemeDescription.FLAG_AB_SUBMENUITEM, null, null, null, chatActivity$$ExternalSyntheticLambda235, "actionBarDefaultSubmenuItemIcon"));
        arrayList.add(new ThemeDescription(this.chatListView, ThemeDescription.FLAG_LISTGLOWCOLOR, null, null, null, null, "actionBarDefault"));
        ChatAvatarContainer chatAvatarContainer = this.avatarContainer;
        arrayList.add(new ThemeDescription(chatAvatarContainer != null ? chatAvatarContainer.getTitleTextView() : null, ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, "actionBarDefaultTitle"));
        ChatAvatarContainer chatAvatarContainer2 = this.avatarContainer;
        arrayList.add(new ThemeDescription(chatAvatarContainer2 != null ? chatAvatarContainer2.getTitleTextView() : null, ThemeDescription.FLAG_IMAGECOLOR, null, null, null, null, "actionBarDefaultSubtitle"));
        ChatAvatarContainer chatAvatarContainer3 = this.avatarContainer;
        arrayList.add(new ThemeDescription(chatAvatarContainer3 != null ? chatAvatarContainer3.getSubtitleTextView() : null, ThemeDescription.FLAG_TEXTCOLOR | ThemeDescription.FLAG_CHECKTAG, (Class[]) null, new Paint[]{Theme.chat_statusPaint, Theme.chat_statusRecordPaint}, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, "chat_status", (Object) null));
        ChatAvatarContainer chatAvatarContainer4 = this.avatarContainer;
        arrayList.add(new ThemeDescription(chatAvatarContainer4 != null ? chatAvatarContainer4.getSubtitleTextView() : null, ThemeDescription.FLAG_TEXTCOLOR | ThemeDescription.FLAG_CHECKTAG, (Class[]) null, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, "actionBarDefaultSubtitle", (Object) null));
        arrayList.add(new ThemeDescription(this.actionBar, ThemeDescription.FLAG_AB_SELECTORCOLOR, null, null, null, null, "actionBarDefaultSelector"));
        arrayList.add(new ThemeDescription(this.actionBar, ThemeDescription.FLAG_AB_SEARCH, null, null, null, null, "actionBarDefaultSearch"));
        arrayList.add(new ThemeDescription(this.actionBar, ThemeDescription.FLAG_AB_SEARCHPLACEHOLDER, null, null, null, null, "actionBarDefaultSearchPlaceholder"));
        arrayList.add(new ThemeDescription(this.actionBar, ThemeDescription.FLAG_AB_SEARCHPLACEHOLDER, null, null, null, null, "actionBarDefaultSearchPlaceholder"));
        arrayList.add(new ThemeDescription(this.actionBar, ThemeDescription.FLAG_AB_AM_ITEMSCOLOR, null, null, null, null, "actionBarActionModeDefaultIcon"));
        arrayList.add(new ThemeDescription(this.actionBar, ThemeDescription.FLAG_AB_AM_BACKGROUND, null, null, null, null, "actionBarActionModeDefault"));
        arrayList.add(new ThemeDescription(this.actionBar, ThemeDescription.FLAG_AB_AM_TOPBACKGROUND, null, null, null, null, "actionBarActionModeDefaultTop"));
        arrayList.add(new ThemeDescription(this.actionBar, ThemeDescription.FLAG_AB_AM_SELECTORCOLOR, null, null, null, null, "actionBarActionModeDefaultSelector"));
        arrayList.add(new ThemeDescription(this.selectedMessagesCountTextView, ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, "actionBarActionModeDefaultIcon"));
        ChatAvatarContainer chatAvatarContainer5 = this.avatarContainer;
        arrayList.add(new ThemeDescription(chatAvatarContainer5 != null ? chatAvatarContainer5.getTitleTextView() : null, 0, null, null, new Drawable[]{Theme.chat_muteIconDrawable}, null, "chat_muteIcon"));
        ChatAvatarContainer chatAvatarContainer6 = this.avatarContainer;
        arrayList.add(new ThemeDescription(chatAvatarContainer6 != null ? chatAvatarContainer6.getTitleTextView() : null, 0, null, null, new Drawable[]{Theme.chat_lockIconDrawable}, null, "chat_lockIcon"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, Theme.avatarDrawables, null, "avatar_text"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, "avatar_backgroundRed"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, "avatar_backgroundOrange"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, "avatar_backgroundViolet"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, "avatar_backgroundGreen"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, "avatar_backgroundCyan"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, "avatar_backgroundBlue"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, "avatar_backgroundPink"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, "avatar_nameInMessageRed"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, "avatar_nameInMessageOrange"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, "avatar_nameInMessageViolet"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, "avatar_nameInMessageGreen"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, "avatar_nameInMessageCyan"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, "avatar_nameInMessageBlue"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, "avatar_nameInMessagePink"));
        Theme.MessageDrawable messageDrawable = (Theme.MessageDrawable) getThemedDrawable("drawableMsgIn");
        Theme.MessageDrawable messageDrawable2 = (Theme.MessageDrawable) getThemedDrawable("drawableMsgInMedia");
        Theme.MessageDrawable messageDrawable3 = (Theme.MessageDrawable) getThemedDrawable("drawableMsgOut");
        Theme.MessageDrawable messageDrawable4 = (Theme.MessageDrawable) getThemedDrawable("drawableMsgOutMedia");
        Theme.MessageDrawable messageDrawable5 = (Theme.MessageDrawable) getThemedDrawable("drawableMsgOutSelected");
        Theme.MessageDrawable messageDrawable6 = (Theme.MessageDrawable) getThemedDrawable("drawableMsgOutMediaSelected");
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class, BotHelpCell.class}, null, new Drawable[]{messageDrawable, messageDrawable2}, null, "chat_inBubble"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{(Theme.MessageDrawable) getThemedDrawable("drawableMsgInSelected"), (Theme.MessageDrawable) getThemedDrawable("drawableMsgInMediaSelected")}, null, "chat_inBubbleSelected"));
        if (messageDrawable != null) {
            arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, messageDrawable.getShadowDrawables(), null, "chat_inBubbleShadow"));
            arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, messageDrawable2.getShadowDrawables(), null, "chat_inBubbleShadow"));
            arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, messageDrawable3.getShadowDrawables(), null, "chat_outBubbleShadow"));
            arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, messageDrawable4.getShadowDrawables(), null, "chat_outBubbleShadow"));
        }
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{messageDrawable3, messageDrawable4}, null, "chat_outBubble"));
        if (!this.themeDelegate.isThemeChangeAvailable()) {
            arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{messageDrawable3, messageDrawable4}, null, "chat_outBubbleGradient"));
            arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{messageDrawable3, messageDrawable4}, null, "chat_outBubbleGradient2"));
            arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{messageDrawable3, messageDrawable4}, null, "chat_outBubbleGradient3"));
        }
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{messageDrawable5, messageDrawable6}, null, "chat_outBubbleSelected"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{messageDrawable5, messageDrawable6}, null, "chat_outBubbleGradientSelectedOverlay"));
        arrayList.add(new ThemeDescription(this.chatListView, ThemeDescription.FLAG_TEXTCOLOR, new Class[]{ChatActionCell.class}, getThemedPaint("paintChatActionText"), null, null, "chat_serviceText"));
        arrayList.add(new ThemeDescription(this.chatListView, ThemeDescription.FLAG_LINKCOLOR, new Class[]{ChatActionCell.class}, getThemedPaint("paintChatActionText"), null, null, "chat_serviceLink"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_botCardDrawable, getThemedDrawable("drawableShareIcon"), getThemedDrawable("drawableReplyIcon"), getThemedDrawable("drawableBotInline"), getThemedDrawable("drawableBotLink"), getThemedDrawable("drawable_botInvite"), getThemedDrawable("drawableGoIcon"), getThemedDrawable("drawableCommentSticker")}, null, "chat_serviceIcon"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class, ChatActionCell.class}, null, null, null, "chat_serviceBackground"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class, ChatActionCell.class}, null, null, null, "chat_serviceBackgroundSelected"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class, BotHelpCell.class}, null, null, null, "chat_messageTextIn"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, "chat_messageTextOut"));
        arrayList.add(new ThemeDescription(this.chatListView, ThemeDescription.FLAG_LINKCOLOR, new Class[]{ChatMessageCell.class, BotHelpCell.class}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, "chat_messageLinkIn", (Object) null));
        arrayList.add(new ThemeDescription(this.chatListView, ThemeDescription.FLAG_LINKCOLOR, new Class[]{ChatMessageCell.class}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, "chat_messageLinkOut", (Object) null));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_msgNoSoundDrawable}, null, "chat_mediaTimeText"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{getThemedDrawable("drawableMsgOutCheck")}, null, "chat_outSentCheck"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{getThemedDrawable("drawableMsgOutCheckSelected")}, null, "chat_outSentCheckSelected"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{getThemedDrawable("drawableMsgOutCheckRead"), getThemedDrawable("drawableMsgOutHalfCheck")}, null, "chat_outSentCheckRead"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{getThemedDrawable("drawableMsgOutCheckReadSelected"), getThemedDrawable("drawableMsgOutHalfCheckSelected")}, null, "chat_outSentCheckReadSelected"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, "chat_outSentClock"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, "chat_outSentClockSelected"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, "chat_inSentClock"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, "chat_inSentClockSelected"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_msgMediaCheckDrawable, Theme.chat_msgMediaHalfCheckDrawable}, null, "chat_mediaSentCheck"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{getThemedDrawable("drawableMsgStickerHalfCheck"), getThemedDrawable("drawableMsgStickerCheck"), getThemedDrawable("drawableMsgStickerClock"), getThemedDrawable("drawableMsgStickerViews"), getThemedDrawable("drawableMsgStickerReplies"), getThemedDrawable("drawableMsgStickerPinned")}, null, "chat_serviceText"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, "chat_mediaSentClock"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{getThemedDrawable("drawableMsgOutViews"), getThemedDrawable("drawableMsgOutReplies"), getThemedDrawable("drawableMsgOutPinned")}, null, "chat_outViews"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{getThemedDrawable("drawableMsgOutViewsSelected"), getThemedDrawable("drawableMsgOutReplies"), getThemedDrawable("drawableMsgOutPinnedSelected")}, null, "chat_outViewsSelected"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_msgInViewsDrawable, Theme.chat_msgInRepliesDrawable, Theme.chat_msgInPinnedDrawable}, null, "chat_inViews"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_msgInViewsSelectedDrawable, Theme.chat_msgInRepliesSelectedDrawable, Theme.chat_msgInPinnedSelectedDrawable}, null, "chat_inViewsSelected"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_msgMediaViewsDrawable, Theme.chat_msgMediaRepliesDrawable, Theme.chat_msgMediaPinnedDrawable}, null, "chat_mediaViews"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{getThemedDrawable("drawableMsgOutMenu")}, null, "chat_outMenu"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{getThemedDrawable("drawableMsgOutMenuSelected")}, null, "chat_outMenuSelected"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_msgInMenuDrawable}, null, "chat_inMenu"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_msgInMenuSelectedDrawable}, null, "chat_inMenuSelected"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_msgMediaMenuDrawable}, null, "chat_mediaMenu"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{getThemedDrawable("drawableMsgOutInstant")}, null, "chat_outInstant"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_msgInInstantDrawable, Theme.chat_commentDrawable, Theme.chat_commentArrowDrawable}, null, "chat_inInstant"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{getThemedDrawable("drawableMsgOutCallAudio"), getThemedDrawable("drawableMsgOutCallVideo")}, null, "chat_outInstant"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{getThemedDrawable("drawableMsgOutCallAudioSelected"), getThemedDrawable("drawableMsgOutCallVideo")}, null, "chat_outInstant"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, Theme.chat_msgInCallDrawable, null, "chat_inInstant"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, Theme.chat_msgInCallSelectedDrawable, null, "chat_inInstantSelected"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_msgCallUpGreenDrawable}, null, "chat_outUpCall"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_msgCallDownRedDrawable}, null, "chat_inUpCall"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_msgCallDownGreenDrawable}, null, "chat_inDownCall"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, Theme.chat_msgErrorPaint, null, null, "chat_sentError"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_msgErrorDrawable}, null, "chat_sentErrorIcon"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, chatActivity$$ExternalSyntheticLambda235, "chat_selectedBackground"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, Theme.chat_durationPaint, null, null, "chat_previewDurationText"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, Theme.chat_gamePaint, null, null, "chat_previewGameText"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, "chat_inPreviewInstantText"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, "chat_outPreviewInstantText"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, "chat_inPreviewInstantSelectedText"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, "chat_outPreviewInstantSelectedText"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, Theme.chat_deleteProgressPaint, null, null, "chat_secretTimeText"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, "chat_stickerNameText"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, getThemedPaint("paintChatBotButton"), null, null, "chat_botButtonText"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, Theme.chat_botProgressPaint, null, null, "chat_botProgress"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, getThemedPaint("paintChatTimeBackground"), null, null, "chat_mediaTimeBackground"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, "chat_inForwardedNameText"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, "chat_outForwardedNameText"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, "chat_inPsaNameText"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, "chat_outPsaNameText"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, "chat_inViaBotNameText"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, "chat_outViaBotNameText"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, "chat_stickerViaBotNameText"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, "chat_inReplyLine"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, "chat_outReplyLine"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, "chat_stickerReplyLine"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, "chat_inReplyNameText"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, "chat_outReplyNameText"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, "chat_stickerReplyNameText"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, "chat_inReplyMessageText"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, "chat_outReplyMessageText"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, "chat_inReplyMediaMessageText"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, "chat_outReplyMediaMessageText"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, "chat_inReplyMediaMessageSelectedText"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, "chat_outReplyMediaMessageSelectedText"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, "chat_stickerReplyMessageText"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, "chat_inPreviewLine"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, "chat_outPreviewLine"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, "chat_inSiteNameText"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, "chat_outSiteNameText"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, "chat_inContactNameText"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, "chat_outContactNameText"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, "chat_inContactPhoneText"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, "chat_inContactPhoneSelectedText"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, "chat_outContactPhoneText"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, "chat_outContactPhoneSelectedText"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, "chat_mediaProgress"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, "chat_inAudioProgress"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, "chat_outAudioProgress"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, "chat_inAudioSelectedProgress"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, "chat_outAudioSelectedProgress"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, "chat_mediaTimeText"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, "chat_inTimeText"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, "chat_outTimeText"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, "chat_inTimeSelectedText"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, "chat_adminText"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, "chat_adminSelectedText"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, "chat_outAdminText"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, "chat_outAdminSelectedText"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, "chat_outTimeSelectedText"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, "chat_inAudioPerfomerText"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, "chat_inAudioPerfomerSelectedText"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, "chat_outAudioPerfomerText"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, "chat_outAudioPerfomerSelectedText"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, "chat_inAudioTitleText"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, "chat_outAudioTitleText"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, "chat_inAudioDurationText"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, "chat_outAudioDurationText"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, "chat_inAudioDurationSelectedText"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, "chat_outAudioDurationSelectedText"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, "chat_inAudioSeekbar"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, "chat_outAudioSeekbar"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, "chat_inAudioSeekbarSelected"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, "chat_outAudioSeekbarSelected"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, "chat_inAudioSeekbarFill"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, "chat_inAudioCacheSeekbar"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, "chat_outAudioSeekbarFill"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, "chat_outAudioCacheSeekbar"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, "chat_inVoiceSeekbar"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, "chat_outVoiceSeekbar"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, "chat_inVoiceSeekbarSelected"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, "chat_outVoiceSeekbarSelected"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, "chat_inVoiceSeekbarFill"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, "chat_outVoiceSeekbarFill"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, "chat_inFileProgress"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, "chat_outFileProgress"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, "chat_inFileProgressSelected"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, "chat_outFileProgressSelected"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, "chat_inFileNameText"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, "chat_outFileNameText"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, "chat_inFileInfoText"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, "chat_outFileInfoText"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, "chat_inFileInfoSelectedText"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, "chat_outFileInfoSelectedText"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, "chat_inFileBackground"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, "chat_outFileBackground"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, "chat_inFileBackgroundSelected"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, "chat_outFileBackgroundSelected"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, "chat_inVenueInfoText"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, "chat_outVenueInfoText"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, "chat_inVenueInfoSelectedText"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, "chat_outVenueInfoSelectedText"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, "chat_mediaInfoText"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, Theme.chat_urlPaint, null, null, "chat_linkSelectBackground"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, Theme.chat_outUrlPaint, null, null, "chat_outLinkSelectBackground"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, Theme.chat_textSearchSelectionPaint, null, null, "chat_textSelectBackground"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, "chat_outLoader"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, "chat_outMediaIcon"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, "chat_outLoaderSelected"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, "chat_outMediaIconSelected"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, "chat_inLoader"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, "chat_inMediaIcon"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, "chat_inLoaderSelected"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, "chat_inMediaIconSelected"));
        Drawable[][] drawableArr = Theme.chat_photoStatesDrawables;
        arrayList.add(new ThemeDescription(this.chatListView, ThemeDescription.FLAG_BACKGROUNDFILTER, new Class[]{ChatMessageCell.class}, null, new Drawable[]{drawableArr[0][0], drawableArr[1][0], drawableArr[2][0], drawableArr[3][0]}, null, "chat_mediaLoaderPhoto"));
        Drawable[][] drawableArr2 = Theme.chat_photoStatesDrawables;
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{drawableArr2[0][0], drawableArr2[1][0], drawableArr2[2][0], drawableArr2[3][0]}, null, "chat_mediaLoaderPhotoIcon"));
        Drawable[][] drawableArr3 = Theme.chat_photoStatesDrawables;
        arrayList.add(new ThemeDescription(this.chatListView, ThemeDescription.FLAG_BACKGROUNDFILTER, new Class[]{ChatMessageCell.class}, null, new Drawable[]{drawableArr3[0][1], drawableArr3[1][1], drawableArr3[2][1], drawableArr3[3][1]}, null, "chat_mediaLoaderPhotoSelected"));
        Drawable[][] drawableArr4 = Theme.chat_photoStatesDrawables;
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{drawableArr4[0][1], drawableArr4[1][1], drawableArr4[2][1], drawableArr4[3][1]}, null, "chat_mediaLoaderPhotoIconSelected"));
        Drawable[][] drawableArr5 = Theme.chat_photoStatesDrawables;
        arrayList.add(new ThemeDescription(this.chatListView, ThemeDescription.FLAG_BACKGROUNDFILTER, new Class[]{ChatMessageCell.class}, null, new Drawable[]{drawableArr5[7][0], drawableArr5[8][0]}, null, "chat_outLoaderPhoto"));
        Drawable[][] drawableArr6 = Theme.chat_photoStatesDrawables;
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{drawableArr6[7][0], drawableArr6[8][0]}, null, "chat_outLoaderPhotoIcon"));
        Drawable[][] drawableArr7 = Theme.chat_photoStatesDrawables;
        arrayList.add(new ThemeDescription(this.chatListView, ThemeDescription.FLAG_BACKGROUNDFILTER, new Class[]{ChatMessageCell.class}, null, new Drawable[]{drawableArr7[7][1], drawableArr7[8][1]}, null, "chat_outLoaderPhotoSelected"));
        Drawable[][] drawableArr8 = Theme.chat_photoStatesDrawables;
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{drawableArr8[7][1], drawableArr8[8][1]}, null, "chat_outLoaderPhotoIconSelected"));
        Drawable[][] drawableArr9 = Theme.chat_photoStatesDrawables;
        arrayList.add(new ThemeDescription(this.chatListView, ThemeDescription.FLAG_BACKGROUNDFILTER, new Class[]{ChatMessageCell.class}, null, new Drawable[]{drawableArr9[10][0], drawableArr9[11][0]}, null, "chat_inLoaderPhoto"));
        Drawable[][] drawableArr10 = Theme.chat_photoStatesDrawables;
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{drawableArr10[10][0], drawableArr10[11][0]}, null, "chat_inLoaderPhotoIcon"));
        Drawable[][] drawableArr11 = Theme.chat_photoStatesDrawables;
        arrayList.add(new ThemeDescription(this.chatListView, ThemeDescription.FLAG_BACKGROUNDFILTER, new Class[]{ChatMessageCell.class}, null, new Drawable[]{drawableArr11[10][1], drawableArr11[11][1]}, null, "chat_inLoaderPhotoSelected"));
        Drawable[][] drawableArr12 = Theme.chat_photoStatesDrawables;
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{drawableArr12[10][1], drawableArr12[11][1]}, null, "chat_inLoaderPhotoIconSelected"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_photoStatesDrawables[12][0]}, null, "chat_inFileIcon"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_photoStatesDrawables[12][1]}, null, "chat_inFileSelectedIcon"));
        arrayList.add(new ThemeDescription(this.chatListView, ThemeDescription.FLAG_BACKGROUNDFILTER, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_contactDrawable[0]}, null, "chat_inContactBackground"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_contactDrawable[0]}, null, "chat_inContactIcon"));
        arrayList.add(new ThemeDescription(this.chatListView, ThemeDescription.FLAG_BACKGROUNDFILTER, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_contactDrawable[1]}, null, "chat_outContactBackground"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_contactDrawable[1]}, null, "chat_outContactIcon"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, "chat_inLocationBackground"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_locationDrawable[0]}, null, "chat_inLocationIcon"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, "chat_outLocationBackground"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_locationDrawable[1]}, null, "chat_outLocationIcon"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, "chat_inPollCorrectAnswer"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, "chat_outPollCorrectAnswer"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, "chat_inPollWrongAnswer"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, "chat_outPollWrongAnswer"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_pollHintDrawable[0]}, null, "chat_inPreviewInstantText"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_pollHintDrawable[1]}, null, "chat_outPreviewInstantText"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_psaHelpDrawable[0]}, null, "chat_inViews"));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_psaHelpDrawable[1]}, null, "chat_outViews"));
        if (!this.themeDelegate.isThemeChangeAvailable()) {
            arrayList.add(new ThemeDescription(this.messagesSearchListView, 0, new Class[]{DialogCell.class}, null, Theme.avatarDrawables, null, "avatar_text"));
            arrayList.add(new ThemeDescription(this.messagesSearchListView, 0, new Class[]{DialogCell.class}, Theme.dialogs_countPaint, null, null, "chats_unreadCounter"));
            TextPaint[] textPaintArr = Theme.dialogs_namePaint;
            arrayList.add(new ThemeDescription(this.messagesSearchListView, 0, new Class[]{DialogCell.class}, (String[]) null, new Paint[]{textPaintArr[0], textPaintArr[1], Theme.dialogs_searchNamePaint}, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, "chats_name"));
            TextPaint[] textPaintArr2 = Theme.dialogs_nameEncryptedPaint;
            arrayList.add(new ThemeDescription(this.messagesSearchListView, 0, new Class[]{DialogCell.class}, (String[]) null, new Paint[]{textPaintArr2[0], textPaintArr2[1], Theme.dialogs_searchNameEncryptedPaint}, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, "chats_secretName"));
            arrayList.add(new ThemeDescription(this.messagesSearchListView, 0, new Class[]{DialogCell.class}, null, new Drawable[]{Theme.dialogs_lockDrawable}, null, "chats_secretIcon"));
            arrayList.add(new ThemeDescription(this.messagesSearchListView, 0, new Class[]{DialogCell.class}, null, new Drawable[]{Theme.dialogs_scamDrawable, Theme.dialogs_fakeDrawable}, null, "chats_draft"));
            arrayList.add(new ThemeDescription(this.messagesSearchListView, 0, new Class[]{DialogCell.class}, Theme.dialogs_messagePaint[1], null, null, "chats_message_threeLines"));
            arrayList.add(new ThemeDescription(this.messagesSearchListView, 0, new Class[]{DialogCell.class}, Theme.dialogs_messageNamePaint, null, null, "chats_nameMessage_threeLines"));
            arrayList.add(new ThemeDescription(null, 0, null, null, null, chatActivity$$ExternalSyntheticLambda235, "chats_nameMessage"));
            arrayList.add(new ThemeDescription(null, 0, null, null, null, chatActivity$$ExternalSyntheticLambda235, "chats_attachMessage"));
            arrayList.add(new ThemeDescription(this.messagesSearchListView, 0, new Class[]{DialogCell.class}, (String[]) null, Theme.dialogs_messagePrintingPaint, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, "chats_actionMessage"));
            arrayList.add(new ThemeDescription(this.messagesSearchListView, 0, new Class[]{DialogCell.class}, Theme.dialogs_timePaint, null, null, "chats_date"));
            arrayList.add(new ThemeDescription(this.messagesSearchListView, 0, new Class[]{DialogCell.class}, null, new Drawable[]{Theme.dialogs_checkDrawable}, null, "chats_sentCheck"));
            arrayList.add(new ThemeDescription(this.messagesSearchListView, 0, new Class[]{DialogCell.class}, null, new Drawable[]{Theme.dialogs_checkReadDrawable, Theme.dialogs_halfCheckDrawable}, null, "chats_sentReadCheck"));
        }
        arrayList.add(new ThemeDescription(this.mentionContainer, 0, null, getThemedPaint("paintChatComposeBackground"), null, null, "chat_messagePanelBackground"));
        arrayList.add(new ThemeDescription(this.mentionContainer, 0, null, null, new Drawable[]{Theme.chat_composeShadowDrawable}, null, "chat_messagePanelShadow"));
        arrayList.add(new ThemeDescription(this.mentionContainer, 0, null, null, new Drawable[]{Theme.chat_composeShadowRoundDrawable}, null, "chat_messagePanelBackground"));
        arrayList.add(new ThemeDescription(this.searchContainer, 0, null, getThemedPaint("paintChatComposeBackground"), null, null, "chat_messagePanelBackground"));
        arrayList.add(new ThemeDescription(this.searchContainer, 0, null, null, new Drawable[]{Theme.chat_composeShadowDrawable}, null, "chat_messagePanelShadow"));
        arrayList.add(new ThemeDescription(this.bottomOverlay, 0, null, getThemedPaint("paintChatComposeBackground"), null, null, "chat_messagePanelBackground"));
        arrayList.add(new ThemeDescription(this.bottomOverlay, 0, null, null, new Drawable[]{Theme.chat_composeShadowDrawable}, null, "chat_messagePanelShadow"));
        arrayList.add(new ThemeDescription(this.bottomOverlayChat, 0, null, getThemedPaint("paintChatComposeBackground"), null, null, "chat_messagePanelBackground"));
        arrayList.add(new ThemeDescription(this.bottomOverlayChat, 0, null, null, new Drawable[]{Theme.chat_composeShadowDrawable}, null, "chat_messagePanelShadow"));
        arrayList.add(new ThemeDescription(this.bottomMessagesActionContainer, 0, null, getThemedPaint("paintChatComposeBackground"), null, null, "chat_messagePanelBackground"));
        arrayList.add(new ThemeDescription(this.bottomMessagesActionContainer, 0, null, null, new Drawable[]{Theme.chat_composeShadowDrawable}, null, "chat_messagePanelShadow"));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, 0, null, getThemedPaint("paintChatComposeBackground"), null, null, "chat_messagePanelBackground"));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, 0, null, null, new Drawable[]{Theme.chat_composeShadowDrawable}, null, "chat_messagePanelShadow"));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, ThemeDescription.FLAG_TEXTCOLOR, new Class[]{ChatActivityEnterView.class}, new String[]{"messageEditText"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, "chat_messagePanelText"));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, ThemeDescription.FLAG_CURSORCOLOR, new Class[]{ChatActivityEnterView.class}, new String[]{"messageEditText"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, "chat_messagePanelCursor"));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, ThemeDescription.FLAG_HINTTEXTCOLOR, new Class[]{ChatActivityEnterView.class}, new String[]{"messageEditText"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, "chat_messagePanelHint"));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, ThemeDescription.FLAG_IMAGECOLOR, new Class[]{ChatActivityEnterView.class}, new String[]{"sendButton"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, "chat_messagePanelSend"));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, ThemeDescription.FLAG_USEBACKGROUNDDRAWABLE | ThemeDescription.FLAG_DRAWABLESELECTEDSTATE, new Class[]{ChatActivityEnterView.class}, new String[]{"sendButton"}, null, null, 24, null, "chat_messagePanelSend"));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"botButton"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, "chat_messagePanelIcons"));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, ThemeDescription.FLAG_USEBACKGROUNDDRAWABLE | ThemeDescription.FLAG_DRAWABLESELECTEDSTATE, new Class[]{ChatActivityEnterView.class}, new String[]{"botButton"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, "listSelectorSDK21"));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"notifyButton"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, "chat_messagePanelIcons"));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, ThemeDescription.FLAG_IMAGECOLOR | ThemeDescription.FLAG_BACKGROUNDFILTER, new Class[]{ChatActivityEnterView.class}, new String[]{"scheduledButton"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, "chat_messagePanelIcons"));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, ThemeDescription.FLAG_IMAGECOLOR, new Class[]{ChatActivityEnterView.class}, new String[]{"scheduledButton"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, "chat_recordedVoiceDot"));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, ThemeDescription.FLAG_USEBACKGROUNDDRAWABLE | ThemeDescription.FLAG_DRAWABLESELECTEDSTATE, new Class[]{ChatActivityEnterView.class}, new String[]{"scheduledButton"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, "listSelectorSDK21"));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"attachButton"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, "chat_messagePanelIcons"));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, ThemeDescription.FLAG_USEBACKGROUNDDRAWABLE | ThemeDescription.FLAG_DRAWABLESELECTEDSTATE, new Class[]{ChatActivityEnterView.class}, new String[]{"attachButton"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, "listSelectorSDK21"));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"audioSendButton"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, "chat_messagePanelIcons"));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"videoSendButton"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, "chat_messagePanelIcons"));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"notifyButton"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, "chat_messagePanelVideoFrame"));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, ThemeDescription.FLAG_USEBACKGROUNDDRAWABLE | ThemeDescription.FLAG_DRAWABLESELECTEDSTATE, new Class[]{ChatActivityEnterView.class}, new String[]{"notifyButton"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, "listSelectorSDK21"));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"videoTimelineView"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, "chat_messagePanelSend"));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"micDrawable"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, "chat_messagePanelVoicePressed"));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"cameraDrawable"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, "chat_messagePanelVoicePressed"));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"sendDrawable"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, "chat_messagePanelVoicePressed"));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, 0, null, null, null, null, "key_chat_messagePanelVoiceLock"));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, null, null, null, "key_chat_messagePanelVoiceLockBackground"));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"lockShadowDrawable"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, "key_chat_messagePanelVoiceLockShadow"));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, ThemeDescription.FLAG_USEBACKGROUNDDRAWABLE | ThemeDescription.FLAG_DRAWABLESELECTEDSTATE, new Class[]{ChatActivityEnterView.class}, new String[]{"recordDeleteImageView"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, "listSelectorSDK21"));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, ThemeDescription.FLAG_BACKGROUNDFILTER, new Class[]{ChatActivityEnterView.class}, new String[]{"recordedAudioBackground"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, "chat_recordedVoiceBackground"));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, 0, null, null, null, null, "chat_recordTime"));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, 0, null, null, null, null, "chat_recordVoiceCancel"));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, ThemeDescription.FLAG_TEXTCOLOR, new Class[]{ChatActivityEnterView.class}, new String[]{"recordedAudioTimeTextView"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, "chat_messagePanelVoiceDuration"));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, 0, null, null, null, null, "chat_recordVoiceCancel"));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"doneButtonProgress"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, "contextProgressInner1"));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"doneButtonProgress"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, "contextProgressOuter1"));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, ThemeDescription.FLAG_IMAGECOLOR, new Class[]{ChatActivityEnterView.class}, new String[]{"cancelBotButton"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, "chat_messagePanelCancelInlineBot"));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, ThemeDescription.FLAG_USEBACKGROUNDDRAWABLE | ThemeDescription.FLAG_DRAWABLESELECTEDSTATE, new Class[]{ChatActivityEnterView.class}, new String[]{"cancelBotButton"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, "listSelectorSDK21"));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"redDotPaint"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, "chat_recordedVoiceDot"));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"paint"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, "chat_messagePanelVoiceBackground"));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"seekBarWaveform"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, "chat_recordedVoiceProgress"));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"seekBarWaveform"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, "chat_recordedVoiceProgressInner"));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"dotPaint"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, "chat_emojiPanelNewTrending"));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, (String[]) null, (Paint[]) null, (Drawable[]) null, chatActivity$$ExternalSyntheticLambda235, "chat_recordedVoicePlayPause"));
        ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        arrayList.add(new ThemeDescription(chatActivityEnterView != null ? chatActivityEnterView.getEmojiView() : null, 0, new Class[]{EmojiView.class}, (String[]) null, (Paint[]) null, (Drawable[]) null, chatActivity$$ExternalSyntheticLambda235, "chat_emojiPanelBackground"));
        ChatActivityEnterView chatActivityEnterView2 = this.chatActivityEnterView;
        arrayList.add(new ThemeDescription(chatActivityEnterView2 != null ? chatActivityEnterView2.getEmojiView() : null, 0, new Class[]{EmojiView.class}, (String[]) null, (Paint[]) null, (Drawable[]) null, chatActivity$$ExternalSyntheticLambda235, "chat_emojiPanelShadowLine"));
        ChatActivityEnterView chatActivityEnterView3 = this.chatActivityEnterView;
        arrayList.add(new ThemeDescription(chatActivityEnterView3 != null ? chatActivityEnterView3.getEmojiView() : null, 0, new Class[]{EmojiView.class}, (String[]) null, (Paint[]) null, (Drawable[]) null, chatActivity$$ExternalSyntheticLambda235, "chat_emojiPanelEmptyText"));
        ChatActivityEnterView chatActivityEnterView4 = this.chatActivityEnterView;
        arrayList.add(new ThemeDescription(chatActivityEnterView4 != null ? chatActivityEnterView4.getEmojiView() : null, 0, new Class[]{EmojiView.class}, (String[]) null, (Paint[]) null, (Drawable[]) null, chatActivity$$ExternalSyntheticLambda235, "chat_emojiPanelIcon"));
        ChatActivityEnterView chatActivityEnterView5 = this.chatActivityEnterView;
        arrayList.add(new ThemeDescription(chatActivityEnterView5 != null ? chatActivityEnterView5.getEmojiView() : null, 0, new Class[]{EmojiView.class}, (String[]) null, (Paint[]) null, (Drawable[]) null, chatActivity$$ExternalSyntheticLambda235, "chat_emojiPanelIconSelected"));
        ChatActivityEnterView chatActivityEnterView6 = this.chatActivityEnterView;
        arrayList.add(new ThemeDescription(chatActivityEnterView6 != null ? chatActivityEnterView6.getEmojiView() : null, 0, new Class[]{EmojiView.class}, (String[]) null, (Paint[]) null, (Drawable[]) null, chatActivity$$ExternalSyntheticLambda235, "chat_emojiPanelStickerPackSelector"));
        ChatActivityEnterView chatActivityEnterView7 = this.chatActivityEnterView;
        arrayList.add(new ThemeDescription(chatActivityEnterView7 != null ? chatActivityEnterView7.getEmojiView() : null, 0, new Class[]{EmojiView.class}, (String[]) null, (Paint[]) null, (Drawable[]) null, chatActivity$$ExternalSyntheticLambda235, "chat_emojiPanelBackspace"));
        ChatActivityEnterView chatActivityEnterView8 = this.chatActivityEnterView;
        arrayList.add(new ThemeDescription(chatActivityEnterView8 != null ? chatActivityEnterView8.getEmojiView() : null, 0, new Class[]{EmojiView.class}, (String[]) null, (Paint[]) null, (Drawable[]) null, chatActivity$$ExternalSyntheticLambda235, "chat_emojiPanelTrendingTitle"));
        ChatActivityEnterView chatActivityEnterView9 = this.chatActivityEnterView;
        arrayList.add(new ThemeDescription(chatActivityEnterView9 != null ? chatActivityEnterView9.getEmojiView() : null, 0, new Class[]{EmojiView.class}, (String[]) null, (Paint[]) null, (Drawable[]) null, chatActivity$$ExternalSyntheticLambda235, "chat_emojiPanelTrendingDescription"));
        ChatActivityEnterView chatActivityEnterView10 = this.chatActivityEnterView;
        arrayList.add(new ThemeDescription(chatActivityEnterView10 != null ? chatActivityEnterView10.getEmojiView() : null, 0, new Class[]{EmojiView.class}, (String[]) null, (Paint[]) null, (Drawable[]) null, chatActivity$$ExternalSyntheticLambda235, "chat_emojiPanelBadgeText"));
        ChatActivityEnterView chatActivityEnterView11 = this.chatActivityEnterView;
        arrayList.add(new ThemeDescription(chatActivityEnterView11 != null ? chatActivityEnterView11.getEmojiView() : null, 0, new Class[]{EmojiView.class}, (String[]) null, (Paint[]) null, (Drawable[]) null, chatActivity$$ExternalSyntheticLambda235, "chat_emojiPanelBadgeBackground"));
        ChatActivityEnterView chatActivityEnterView12 = this.chatActivityEnterView;
        arrayList.add(new ThemeDescription(chatActivityEnterView12 != null ? chatActivityEnterView12.getEmojiView() : null, 0, new Class[]{EmojiView.class}, (String[]) null, (Paint[]) null, (Drawable[]) null, chatActivity$$ExternalSyntheticLambda235, "chat_emojiBottomPanelIcon"));
        ChatActivityEnterView chatActivityEnterView13 = this.chatActivityEnterView;
        arrayList.add(new ThemeDescription(chatActivityEnterView13 != null ? chatActivityEnterView13.getEmojiView() : null, 0, new Class[]{EmojiView.class}, (String[]) null, (Paint[]) null, (Drawable[]) null, chatActivity$$ExternalSyntheticLambda235, "chat_emojiSearchIcon"));
        ChatActivityEnterView chatActivityEnterView14 = this.chatActivityEnterView;
        arrayList.add(new ThemeDescription(chatActivityEnterView14 != null ? chatActivityEnterView14.getEmojiView() : null, 0, new Class[]{EmojiView.class}, (String[]) null, (Paint[]) null, (Drawable[]) null, chatActivity$$ExternalSyntheticLambda235, "chat_emojiPanelStickerSetNameHighlight"));
        ChatActivityEnterView chatActivityEnterView15 = this.chatActivityEnterView;
        arrayList.add(new ThemeDescription(chatActivityEnterView15 != null ? chatActivityEnterView15.getEmojiView() : null, 0, new Class[]{EmojiView.class}, (String[]) null, (Paint[]) null, (Drawable[]) null, chatActivity$$ExternalSyntheticLambda235, "chat_emojiPanelStickerPackSelectorLine"));
        ChatActivityEnterView chatActivityEnterView16 = this.chatActivityEnterView;
        if (chatActivityEnterView16 != null) {
            TrendingStickersAlert trendingStickersAlert = chatActivityEnterView16.getTrendingStickersAlert();
            if (trendingStickersAlert != null) {
                arrayList.addAll(trendingStickersAlert.getThemeDescriptions());
            }
            arrayList.add(new ThemeDescription((View) null, 0, (Class[]) null, (String[]) null, (Paint[]) null, new Drawable[]{this.chatActivityEnterView.getStickersArrowDrawable()}, (ThemeDescription.ThemeDescriptionDelegate) null, "chat_messagePanelIcons"));
        }
        int i = 0;
        while (i < 2) {
            UndoView undoView = i == 0 ? this.undoView : this.topUndoView;
            arrayList.add(new ThemeDescription(undoView, ThemeDescription.FLAG_BACKGROUNDFILTER, null, null, null, null, "undo_background"));
            arrayList.add(new ThemeDescription(undoView, 0, new Class[]{UndoView.class}, new String[]{"undoImageView"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, "undo_cancelColor"));
            arrayList.add(new ThemeDescription(undoView, 0, new Class[]{UndoView.class}, new String[]{"undoTextView"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, "undo_cancelColor"));
            arrayList.add(new ThemeDescription(undoView, 0, new Class[]{UndoView.class}, new String[]{"infoTextView"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, "undo_infoColor"));
            arrayList.add(new ThemeDescription(undoView, 0, new Class[]{UndoView.class}, new String[]{"subinfoTextView"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, "undo_infoColor"));
            arrayList.add(new ThemeDescription(undoView, ThemeDescription.FLAG_LINKCOLOR, new Class[]{UndoView.class}, new String[]{"subinfoTextView"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, "undo_cancelColor"));
            arrayList.add(new ThemeDescription(undoView, 0, new Class[]{UndoView.class}, new String[]{"textPaint"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, "undo_infoColor"));
            arrayList.add(new ThemeDescription(undoView, 0, new Class[]{UndoView.class}, new String[]{"progressPaint"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, "undo_infoColor"));
            arrayList.add(new ThemeDescription(undoView, ThemeDescription.FLAG_IMAGECOLOR, new Class[]{UndoView.class}, new String[]{"leftImageView"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, "undo_infoColor"));
            i++;
        }
        arrayList.add(new ThemeDescription(null, 0, null, null, null, null, "chat_botKeyboardButtonText"));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, null, "chat_botKeyboardButtonBackground"));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, null, "chat_botKeyboardButtonBackgroundPressed"));
        arrayList.add(new ThemeDescription(this.fragmentView, ThemeDescription.FLAG_BACKGROUND | ThemeDescription.FLAG_CHECKTAG, new Class[]{FragmentContextView.class}, new String[]{"frameLayout"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, "inappPlayerBackground"));
        arrayList.add(new ThemeDescription(this.fragmentView, ThemeDescription.FLAG_IMAGECOLOR, new Class[]{FragmentContextView.class}, new String[]{"playButton"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, "inappPlayerPlayPause"));
        arrayList.add(new ThemeDescription(this.fragmentView, ThemeDescription.FLAG_TEXTCOLOR | ThemeDescription.FLAG_CHECKTAG, new Class[]{FragmentContextView.class}, new String[]{"titleTextView"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, "inappPlayerTitle"));
        arrayList.add(new ThemeDescription(this.fragmentView, ThemeDescription.FLAG_TEXTCOLOR | ThemeDescription.FLAG_CHECKTAG, new Class[]{FragmentContextView.class}, new String[]{"titleTextView"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, "inappPlayerPerformer"));
        arrayList.add(new ThemeDescription(this.fragmentView, ThemeDescription.FLAG_TEXTCOLOR | ThemeDescription.FLAG_FASTSCROLL, new Class[]{FragmentContextView.class}, new String[]{"subtitleTextView"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, "inappPlayerClose"));
        arrayList.add(new ThemeDescription(this.fragmentView, ThemeDescription.FLAG_IMAGECOLOR, new Class[]{FragmentContextView.class}, new String[]{"closeButton"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, "inappPlayerClose"));
        arrayList.add(new ThemeDescription(this.fragmentView, ThemeDescription.FLAG_BACKGROUND | ThemeDescription.FLAG_CHECKTAG, new Class[]{FragmentContextView.class}, new String[]{"frameLayout"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, "returnToCallBackground"));
        arrayList.add(new ThemeDescription(this.fragmentView, ThemeDescription.FLAG_TEXTCOLOR | ThemeDescription.FLAG_CHECKTAG, new Class[]{FragmentContextView.class}, new String[]{"titleTextView"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, "returnToCallText"));
        arrayList.add(new ThemeDescription(this.pinnedLineView, 0, null, null, null, chatActivity$$ExternalSyntheticLambda235, "chat_topPanelLine"));
        arrayList.add(new ThemeDescription(this.pinnedLineView, 0, null, null, null, chatActivity$$ExternalSyntheticLambda235, "windowBackgroundWhite"));
        arrayList.add(new ThemeDescription(this.pinnedCounterTextView, ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, "chat_topPanelTitle"));
        for (int i2 = 0; i2 < 2; i2++) {
            arrayList.add(new ThemeDescription(this.pinnedNameTextView[i2], ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, "chat_topPanelTitle"));
            arrayList.add(new ThemeDescription(this.pinnedMessageTextView[i2], ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, "chat_topPanelMessage"));
        }
        arrayList.add(new ThemeDescription(this.alertNameTextView, ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, "chat_topPanelTitle"));
        arrayList.add(new ThemeDescription(this.alertTextView, ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, "chat_topPanelMessage"));
        arrayList.add(new ThemeDescription(this.closePinned, ThemeDescription.FLAG_IMAGECOLOR, null, null, null, null, "chat_topPanelClose"));
        arrayList.add(new ThemeDescription(this.pinnedListButton, ThemeDescription.FLAG_IMAGECOLOR, null, null, null, null, "chat_topPanelClose"));
        arrayList.add(new ThemeDescription(this.closeReportSpam, ThemeDescription.FLAG_IMAGECOLOR, null, null, null, null, "chat_topPanelClose"));
        arrayList.add(new ThemeDescription(this.topChatPanelView, ThemeDescription.FLAG_BACKGROUNDFILTER, null, null, null, null, "chat_topPanelBackground"));
        arrayList.add(new ThemeDescription(this.alertView, ThemeDescription.FLAG_BACKGROUNDFILTER, null, null, null, null, "chat_topPanelBackground"));
        arrayList.add(new ThemeDescription(this.pinnedMessageView, ThemeDescription.FLAG_BACKGROUNDFILTER, null, null, null, null, "chat_topPanelBackground"));
        arrayList.add(new ThemeDescription(this.addToContactsButton, ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, "chat_addContact"));
        arrayList.add(new ThemeDescription(this.reportSpamButton, ThemeDescription.FLAG_TEXTCOLOR | ThemeDescription.FLAG_CHECKTAG, null, null, null, null, "chat_reportSpam"));
        arrayList.add(new ThemeDescription(this.reportSpamButton, ThemeDescription.FLAG_TEXTCOLOR | ThemeDescription.FLAG_CHECKTAG, null, null, null, null, "chat_addContact"));
        arrayList.add(new ThemeDescription(this.replyLineView, ThemeDescription.FLAG_BACKGROUND, null, null, null, null, "chat_replyPanelLine"));
        arrayList.add(new ThemeDescription(this.replyNameTextView, ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, "chat_replyPanelName"));
        arrayList.add(new ThemeDescription(this.replyObjectTextView, ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, "windowBackgroundWhiteGrayText"));
        arrayList.add(new ThemeDescription(this.replyObjectHintTextView, ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, "windowBackgroundWhiteGrayText"));
        arrayList.add(new ThemeDescription(this.replyIconImageView, ThemeDescription.FLAG_IMAGECOLOR, null, null, null, null, "chat_replyPanelIcons"));
        arrayList.add(new ThemeDescription(this.replyCloseImageView, ThemeDescription.FLAG_IMAGECOLOR, null, null, null, null, "chat_replyPanelClose"));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, chatActivity$$ExternalSyntheticLambda235, "chat_replyPanelName"));
        arrayList.add(new ThemeDescription(this.searchUpButton, ThemeDescription.FLAG_IMAGECOLOR, null, null, null, null, "chat_searchPanelIcons"));
        arrayList.add(new ThemeDescription(this.searchUpButton, ThemeDescription.FLAG_BACKGROUNDFILTER | ThemeDescription.FLAG_DRAWABLESELECTEDSTATE, null, null, null, null, "actionBarActionModeDefaultSelector"));
        arrayList.add(new ThemeDescription(this.searchDownButton, ThemeDescription.FLAG_IMAGECOLOR, null, null, null, null, "chat_searchPanelIcons"));
        arrayList.add(new ThemeDescription(this.searchDownButton, ThemeDescription.FLAG_BACKGROUNDFILTER | ThemeDescription.FLAG_DRAWABLESELECTEDSTATE, null, null, null, null, "actionBarActionModeDefaultSelector"));
        arrayList.add(new ThemeDescription(this.searchCalendarButton, ThemeDescription.FLAG_IMAGECOLOR, null, null, null, null, "chat_searchPanelIcons"));
        arrayList.add(new ThemeDescription(this.searchCalendarButton, ThemeDescription.FLAG_BACKGROUNDFILTER | ThemeDescription.FLAG_DRAWABLESELECTEDSTATE, null, null, null, null, "actionBarActionModeDefaultSelector"));
        arrayList.add(new ThemeDescription(this.searchUserButton, ThemeDescription.FLAG_IMAGECOLOR, null, null, null, null, "chat_searchPanelIcons"));
        arrayList.add(new ThemeDescription(this.searchUserButton, ThemeDescription.FLAG_BACKGROUNDFILTER | ThemeDescription.FLAG_DRAWABLESELECTEDSTATE, null, null, null, null, "actionBarActionModeDefaultSelector"));
        arrayList.add(new ThemeDescription(this.searchCountText, ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, "chat_searchPanelText"));
        arrayList.add(new ThemeDescription(this.searchAsListTogglerView, ThemeDescription.FLAG_BACKGROUNDFILTER | ThemeDescription.FLAG_DRAWABLESELECTEDSTATE, null, null, null, null, "actionBarActionModeDefaultSelector"));
        arrayList.add(new ThemeDescription(this.replyButton, ThemeDescription.FLAG_TEXTCOLOR | ThemeDescription.FLAG_IMAGECOLOR, null, null, null, null, "actionBarActionModeDefaultIcon"));
        arrayList.add(new ThemeDescription(this.replyButton, ThemeDescription.FLAG_BACKGROUNDFILTER | ThemeDescription.FLAG_DRAWABLESELECTEDSTATE, null, null, null, null, "actionBarActionModeDefaultSelector"));
        arrayList.add(new ThemeDescription(this.forwardButton, ThemeDescription.FLAG_TEXTCOLOR | ThemeDescription.FLAG_IMAGECOLOR, null, null, null, null, "actionBarActionModeDefaultIcon"));
        arrayList.add(new ThemeDescription(this.forwardButton, ThemeDescription.FLAG_BACKGROUNDFILTER | ThemeDescription.FLAG_DRAWABLESELECTEDSTATE, null, null, null, null, "actionBarActionModeDefaultSelector"));
        arrayList.add(new ThemeDescription(this.bottomOverlayText, ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, "chat_secretChatStatusText"));
        arrayList.add(new ThemeDescription(this.bottomOverlayChatText, 0, null, null, null, null, "chat_fieldOverlayText"));
        arrayList.add(new ThemeDescription(this.bottomOverlayChatText, 0, null, null, null, null, "chat_goDownButtonCounterBackground"));
        arrayList.add(new ThemeDescription(this.bottomOverlayChatText, 0, null, null, null, null, "chat_messagePanelBackground"));
        arrayList.add(new ThemeDescription(this.bottomOverlayProgress, 0, null, null, null, null, "chat_fieldOverlayText"));
        arrayList.add(new ThemeDescription(this.bottomOverlayImage, ThemeDescription.FLAG_IMAGECOLOR, null, null, null, null, "chat_fieldOverlayText"));
        arrayList.add(new ThemeDescription(this.bigEmptyView, ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, "chat_serviceText"));
        arrayList.add(new ThemeDescription(this.emptyView, ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, "chat_serviceText"));
        arrayList.add(new ThemeDescription(this.progressBar, ThemeDescription.FLAG_PROGRESSBAR, null, null, null, null, "chat_serviceText"));
        arrayList.add(new ThemeDescription(this.stickersPanelArrow, ThemeDescription.FLAG_IMAGECOLOR, null, null, null, null, "chat_stickersHintPanel"));
        arrayList.add(new ThemeDescription(this.stickersListView, ThemeDescription.FLAG_BACKGROUNDFILTER, new Class[]{StickerCell.class}, null, null, null, "chat_stickersHintPanel"));
        arrayList.add(new ThemeDescription(this.chatListView, ThemeDescription.FLAG_USEBACKGROUNDDRAWABLE, new Class[]{ChatUnreadCell.class}, new String[]{"backgroundLayout"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, "chat_unreadMessagesStartBackground"));
        arrayList.add(new ThemeDescription(this.chatListView, ThemeDescription.FLAG_IMAGECOLOR, new Class[]{ChatUnreadCell.class}, new String[]{"imageView"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, "chat_unreadMessagesStartArrowIcon"));
        arrayList.add(new ThemeDescription(this.chatListView, ThemeDescription.FLAG_TEXTCOLOR, new Class[]{ChatUnreadCell.class}, new String[]{"textView"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, "chat_unreadMessagesStartText"));
        arrayList.add(new ThemeDescription(this.progressView2, ThemeDescription.FLAG_SERVICEBACKGROUND, null, null, null, null, "chat_serviceBackground"));
        arrayList.add(new ThemeDescription(this.emptyView, ThemeDescription.FLAG_SERVICEBACKGROUND, null, null, null, null, "chat_serviceBackground"));
        arrayList.add(new ThemeDescription(this.bigEmptyView, ThemeDescription.FLAG_SERVICEBACKGROUND, null, null, null, null, "chat_serviceBackground"));
        arrayList.add(new ThemeDescription(this.chatListView, ThemeDescription.FLAG_SERVICEBACKGROUND, new Class[]{ChatLoadingCell.class}, new String[]{"textView"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, "chat_serviceBackground"));
        arrayList.add(new ThemeDescription(this.chatListView, ThemeDescription.FLAG_PROGRESSBAR, new Class[]{ChatLoadingCell.class}, new String[]{"textView"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, "chat_serviceText"));
        arrayList.add(new ThemeDescription(this.mentionContainer.getListView(), ThemeDescription.FLAG_TEXTCOLOR, new Class[]{BotSwitchCell.class}, new String[]{"textView"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, "chat_botSwitchToInlineText"));
        arrayList.add(new ThemeDescription(this.mentionContainer.getListView(), ThemeDescription.FLAG_TEXTCOLOR, new Class[]{MentionCell.class}, new String[]{"nameTextView"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, "windowBackgroundWhiteBlackText"));
        arrayList.add(new ThemeDescription(this.mentionContainer.getListView(), ThemeDescription.FLAG_TEXTCOLOR, new Class[]{MentionCell.class}, new String[]{"usernameTextView"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, "windowBackgroundWhiteGrayText3"));
        arrayList.add(new ThemeDescription(this.mentionContainer.getListView(), 0, new Class[]{ContextLinkCell.class}, null, new Drawable[]{Theme.chat_inlineResultFile, Theme.chat_inlineResultAudio, Theme.chat_inlineResultLocation}, null, "chat_inlineResultIcon"));
        arrayList.add(new ThemeDescription(this.mentionContainer.getListView(), 0, new Class[]{ContextLinkCell.class}, null, null, null, "windowBackgroundWhiteGrayText2"));
        arrayList.add(new ThemeDescription(this.mentionContainer.getListView(), 0, new Class[]{ContextLinkCell.class}, null, null, null, "windowBackgroundWhiteLinkText"));
        arrayList.add(new ThemeDescription(this.mentionContainer.getListView(), 0, new Class[]{ContextLinkCell.class}, null, null, null, "windowBackgroundWhiteBlackText"));
        arrayList.add(new ThemeDescription(this.mentionContainer.getListView(), 0, new Class[]{ContextLinkCell.class}, null, null, null, "chat_inAudioProgress"));
        arrayList.add(new ThemeDescription(this.mentionContainer.getListView(), 0, new Class[]{ContextLinkCell.class}, null, null, null, "chat_inAudioSelectedProgress"));
        arrayList.add(new ThemeDescription(this.mentionContainer.getListView(), 0, new Class[]{ContextLinkCell.class}, null, null, null, "divider"));
        arrayList.add(new ThemeDescription(this.gifHintTextView, ThemeDescription.FLAG_BACKGROUNDFILTER, null, null, null, null, "chat_gifSaveHintBackground"));
        arrayList.add(new ThemeDescription(this.gifHintTextView, ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, "chat_gifSaveHintText"));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, chatActivity$$ExternalSyntheticLambda235, "chat_attachMediaBanBackground"));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, chatActivity$$ExternalSyntheticLambda235, "chat_attachMediaBanText"));
        arrayList.add(new ThemeDescription(this.noSoundHintView, ThemeDescription.FLAG_TEXTCOLOR, new Class[]{HintView.class}, new String[]{"textView"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, "chat_gifSaveHintText"));
        arrayList.add(new ThemeDescription(this.noSoundHintView, ThemeDescription.FLAG_IMAGECOLOR, new Class[]{HintView.class}, new String[]{"imageView"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, "chat_gifSaveHintText"));
        arrayList.add(new ThemeDescription(this.noSoundHintView, ThemeDescription.FLAG_TEXTCOLOR, new Class[]{HintView.class}, new String[]{"arrowImageView"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, "chat_gifSaveHintBackground"));
        arrayList.add(new ThemeDescription(this.forwardHintView, ThemeDescription.FLAG_TEXTCOLOR, new Class[]{HintView.class}, new String[]{"textView"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, "chat_gifSaveHintText"));
        arrayList.add(new ThemeDescription(this.forwardHintView, ThemeDescription.FLAG_TEXTCOLOR, new Class[]{HintView.class}, new String[]{"arrowImageView"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, "chat_gifSaveHintBackground"));
        arrayList.add(new ThemeDescription(this.pagedownButtonCounter, ThemeDescription.FLAG_BACKGROUNDFILTER, null, null, null, null, "chat_goDownButtonCounterBackground"));
        arrayList.add(new ThemeDescription(this.pagedownButtonCounter, ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, "chat_goDownButtonCounter"));
        arrayList.add(new ThemeDescription(this.pagedownButtonImage, ThemeDescription.FLAG_BACKGROUNDFILTER, null, null, null, null, "chat_goDownButton"));
        arrayList.add(new ThemeDescription(this.pagedownButtonImage, ThemeDescription.FLAG_BACKGROUNDFILTER | ThemeDescription.FLAG_DRAWABLESELECTEDSTATE, null, null, null, null, "chat_goDownButtonShadow"));
        arrayList.add(new ThemeDescription(this.pagedownButtonImage, ThemeDescription.FLAG_IMAGECOLOR, null, null, null, null, "chat_goDownButtonIcon"));
        arrayList.add(new ThemeDescription(this.mentiondownButtonCounter, ThemeDescription.FLAG_BACKGROUNDFILTER, null, null, null, null, "chat_goDownButtonCounterBackground"));
        arrayList.add(new ThemeDescription(this.mentiondownButtonCounter, ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, "chat_goDownButtonCounter"));
        arrayList.add(new ThemeDescription(this.mentiondownButtonImage, ThemeDescription.FLAG_BACKGROUNDFILTER, null, null, null, null, "chat_goDownButton"));
        arrayList.add(new ThemeDescription(this.mentiondownButtonImage, ThemeDescription.FLAG_BACKGROUNDFILTER | ThemeDescription.FLAG_DRAWABLESELECTEDSTATE, null, null, null, null, "chat_goDownButtonShadow"));
        arrayList.add(new ThemeDescription(this.mentiondownButtonImage, ThemeDescription.FLAG_IMAGECOLOR, null, null, null, null, "chat_goDownButtonIcon"));
        ChatAvatarContainer chatAvatarContainer7 = this.avatarContainer;
        arrayList.add(new ThemeDescription(chatAvatarContainer7 != null ? chatAvatarContainer7.getTimeItem() : null, 0, null, null, null, null, "chat_secretTimerBackground"));
        ChatAvatarContainer chatAvatarContainer8 = this.avatarContainer;
        arrayList.add(new ThemeDescription(chatAvatarContainer8 != null ? chatAvatarContainer8.getTimeItem() : null, 0, null, null, null, null, "chat_secretTimerText"));
        arrayList.add(new ThemeDescription(this.floatingDateView, 0, null, null, null, null, "chat_serviceText"));
        arrayList.add(new ThemeDescription(this.floatingDateView, 0, null, null, null, null, "chat_serviceBackground"));
        arrayList.add(new ThemeDescription(this.infoTopView, 0, null, null, null, null, "chat_serviceText"));
        arrayList.add(new ThemeDescription(this.infoTopView, 0, null, null, null, null, "chat_serviceBackground"));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, chatActivity$$ExternalSyntheticLambda235, "chat_attachGalleryIcon"));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, chatActivity$$ExternalSyntheticLambda235, "chat_attachGalleryBackground"));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, chatActivity$$ExternalSyntheticLambda235, "chat_attachGalleryText"));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, chatActivity$$ExternalSyntheticLambda235, "chat_attachAudioIcon"));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, chatActivity$$ExternalSyntheticLambda235, "chat_attachAudioBackground"));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, chatActivity$$ExternalSyntheticLambda235, "chat_attachAudioText"));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, chatActivity$$ExternalSyntheticLambda235, "chat_attachFileIcon"));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, chatActivity$$ExternalSyntheticLambda235, "chat_attachFileBackground"));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, chatActivity$$ExternalSyntheticLambda235, "chat_attachFileText"));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, chatActivity$$ExternalSyntheticLambda235, "chat_attachContactIcon"));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, chatActivity$$ExternalSyntheticLambda235, "chat_attachContactBackground"));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, chatActivity$$ExternalSyntheticLambda235, "chat_attachContactText"));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, chatActivity$$ExternalSyntheticLambda235, "chat_attachLocationIcon"));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, chatActivity$$ExternalSyntheticLambda235, "chat_attachLocationBackground"));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, chatActivity$$ExternalSyntheticLambda235, "chat_attachLocationText"));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, chatActivity$$ExternalSyntheticLambda235, "chat_attachPollIcon"));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, chatActivity$$ExternalSyntheticLambda235, "chat_attachPollBackground"));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, chatActivity$$ExternalSyntheticLambda235, "chat_attachPollText"));
        arrayList.add(new ThemeDescription(null, 0, null, null, new Drawable[]{Theme.chat_attachEmptyDrawable}, null, "chat_attachEmptyImage"));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, chatActivity$$ExternalSyntheticLambda235, "chat_attachPhotoBackground"));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, chatActivity$$ExternalSyntheticLambda235, "dialogBackground"));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, chatActivity$$ExternalSyntheticLambda235, "dialogBackgroundGray"));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, chatActivity$$ExternalSyntheticLambda235, "dialogTextGray2"));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, chatActivity$$ExternalSyntheticLambda235, "dialogScrollGlow"));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, chatActivity$$ExternalSyntheticLambda235, "dialogGrayLine"));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, chatActivity$$ExternalSyntheticLambda235, "dialogCameraIcon"));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, chatActivity$$ExternalSyntheticLambda235, "dialogButtonSelector"));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, null, "windowBackgroundWhiteLinkSelection"));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, null, "windowBackgroundWhiteInputField"));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, null, "chat_outTextSelectionHighlight"));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, null, "chat_inTextSelectionHighlight"));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, null, "chat_TextSelectionCursor"));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, null, "voipgroup_overlayGreen1"));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, null, "voipgroup_overlayGreen2"));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, null, "voipgroup_overlayBlue1"));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, null, "voipgroup_overlayBlue2"));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, null, "voipgroup_topPanelGreen1"));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, null, "voipgroup_topPanelGreen2"));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, null, "voipgroup_topPanelBlue1"));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, null, "voipgroup_topPanelBlue2"));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, null, "voipgroup_topPanelGray"));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, null, "voipgroup_overlayAlertGradientMuted"));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, null, "voipgroup_overlayAlertGradientMuted2"));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, null, "voipgroup_overlayAlertGradientUnmuted"));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, null, "voipgroup_overlayAlertGradientUnmuted2"));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, null, "voipgroup_mutedByAdminGradient"));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, null, "voipgroup_mutedByAdminGradient2"));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, null, "voipgroup_mutedByAdminGradient3"));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, null, "voipgroup_overlayAlertMutedByAdmin"));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, null, "kvoipgroup_overlayAlertMutedByAdmin2"));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, null, "windowBackgroundGray"));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, null, "chat_outReactionButtonBackground"));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, null, "chat_inReactionButtonBackground"));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, null, "chat_inReactionButtonText"));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, null, "chat_outReactionButtonText"));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, null, "chat_inReactionButtonTextSelected"));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, null, "chat_inReactionButtonTextSelected"));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, chatActivity$$ExternalSyntheticLambda235, "chat_BlurAlpha"));
        if (this.chatActivityEnterView != null) {
            arrayList.add(new ThemeDescription(this.chatActivityEnterView.botCommandsMenuContainer.listView, ThemeDescription.FLAG_TEXTCOLOR, new Class[]{BotCommandsMenuView.BotCommandView.class}, new String[]{"description"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, "windowBackgroundWhiteBlackText"));
            arrayList.add(new ThemeDescription(this.chatActivityEnterView.botCommandsMenuContainer.listView, ThemeDescription.FLAG_TEXTCOLOR, new Class[]{BotCommandsMenuView.BotCommandView.class}, new String[]{"command"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, "windowBackgroundWhiteGrayText"));
        }
        ChatActivityMemberRequestsDelegate chatActivityMemberRequestsDelegate = this.pendingRequestsDelegate;
        if (chatActivityMemberRequestsDelegate != null) {
            chatActivityMemberRequestsDelegate.fillThemeDescriptions(arrayList);
        }
        Iterator<ThemeDescription> it = arrayList.iterator();
        while (it.hasNext()) {
            it.next().resourcesProvider = this.themeDelegate;
        }
        return arrayList;
    }

    public /* synthetic */ void lambda$getThemeDescriptions$247() {
        ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        if (chatActivityEnterView != null) {
            chatActivityEnterView.updateColors();
        }
        Theme.refreshAttachButtonsColors();
        ChatAttachAlert chatAttachAlert = this.chatAttachAlert;
        if (chatAttachAlert != null) {
            chatAttachAlert.checkColors();
        }
        RecyclerListView recyclerListView = this.chatListView;
        int i = 0;
        if (recyclerListView != null) {
            int childCount = recyclerListView.getChildCount();
            for (int i2 = 0; i2 < childCount; i2++) {
                View childAt = this.chatListView.getChildAt(i2);
                if (childAt instanceof ChatMessageCell) {
                    ((ChatMessageCell) childAt).createSelectorDrawable(0);
                } else if (childAt instanceof ChatActionCell) {
                    ((ChatActionCell) childAt).setInvalidateColors(true);
                }
            }
        }
        RecyclerListView recyclerListView2 = this.messagesSearchListView;
        if (recyclerListView2 != null) {
            int childCount2 = recyclerListView2.getChildCount();
            for (int i3 = 0; i3 < childCount2; i3++) {
                View childAt2 = this.messagesSearchListView.getChildAt(i3);
                if (childAt2 instanceof DialogCell) {
                    ((DialogCell) childAt2).update(0);
                }
            }
        }
        if (this.scrimPopupWindowItems != null) {
            while (true) {
                ActionBarMenuSubItem[] actionBarMenuSubItemArr = this.scrimPopupWindowItems;
                if (i >= actionBarMenuSubItemArr.length) {
                    break;
                }
                actionBarMenuSubItemArr[i].setColors(getThemedColor("actionBarDefaultSubmenuItem"), getThemedColor("actionBarDefaultSubmenuItemIcon"));
                this.scrimPopupWindowItems[i].setSelectorColor(getThemedColor("dialogButtonSelector"));
                i++;
            }
        }
        ActionBarPopupWindow actionBarPopupWindow = this.scrimPopupWindow;
        if (actionBarPopupWindow != null) {
            View contentView = actionBarPopupWindow.getContentView();
            contentView.setBackgroundColor(getThemedColor("actionBarDefaultSubmenuBackground"));
            contentView.invalidate();
        }
        InstantCameraView instantCameraView = this.instantCameraView;
        if (instantCameraView != null) {
            instantCameraView.invalidateBlur();
        }
        PinnedLineView pinnedLineView = this.pinnedLineView;
        if (pinnedLineView != null) {
            pinnedLineView.updateColors();
        }
        ChatActivityEnterTopView chatActivityEnterTopView = this.chatActivityEnterTopView;
        if (chatActivityEnterTopView != null && chatActivityEnterTopView.getEditView() != null) {
            this.chatActivityEnterTopView.getEditView().updateColors();
        }
        ActionBarMenuItem actionBarMenuItem = this.headerItem;
        if (actionBarMenuItem != null) {
            actionBarMenuItem.updateColor();
        }
        setNavigationBarColor(getThemedColor("windowBackgroundGray"));
        FragmentContextView fragmentContextView = this.fragmentContextView;
        if (fragmentContextView != null) {
            fragmentContextView.updateColors();
        }
        ChatAvatarContainer chatAvatarContainer = this.avatarContainer;
        if (chatAvatarContainer != null) {
            chatAvatarContainer.updateColors();
        }
        BlurredFrameLayout blurredFrameLayout = this.pinnedMessageView;
        if (blurredFrameLayout != null) {
            blurredFrameLayout.backgroundColor = getThemedColor("chat_topPanelBackground");
        }
        BlurredFrameLayout blurredFrameLayout2 = this.topChatPanelView;
        if (blurredFrameLayout2 != null) {
            blurredFrameLayout2.backgroundColor = getThemedColor("chat_topPanelBackground");
        }
        SizeNotifierFrameLayout sizeNotifierFrameLayout = this.contentView;
        if (sizeNotifierFrameLayout != null) {
            sizeNotifierFrameLayout.invalidateBlurredViews();
        }
        ActionBarLayout actionBarLayout = this.parentLayout;
        if (actionBarLayout == null || actionBarLayout.getDrawerLayoutContainer() == null) {
            return;
        }
        this.parentLayout.getDrawerLayoutContainer().setBehindKeyboardColor(getThemedColor("windowBackgroundWhite"));
    }

    public ChatAvatarContainer getAvatarContainer() {
        return this.avatarContainer;
    }

    @Override // org.telegram.ui.ActionBar.BaseFragment
    public AnimatorSet onCustomTransitionAnimation(boolean z, Runnable runnable) {
        if (!z || !this.fromPullingDownTransition || getParentLayout().fragmentsStack.size() <= 1) {
            return null;
        }
        BaseFragment baseFragment = getParentLayout().fragmentsStack.get(getParentLayout().fragmentsStack.size() - 2);
        if (!(baseFragment instanceof ChatActivity)) {
            return null;
        }
        this.wasManualScroll = true;
        ChatActivity chatActivity = (ChatActivity) baseFragment;
        chatActivity.setTransitionToChatActivity(this);
        this.fragmentView.setAlpha(0.0f);
        this.contentView.setSkipBackgroundDrawing(true);
        this.avatarContainer.setTranslationY(AndroidUtilities.dp(8.0f));
        this.avatarContainer.getAvatarImageView().setAlpha(0.0f);
        this.avatarContainer.getAvatarImageView().setTranslationY(-AndroidUtilities.dp(8.0f));
        this.toPullingDownTransition = true;
        ValueAnimator ofFloat = ValueAnimator.ofFloat(0.0f, 1.0f);
        ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        if (chatActivityEnterView != null) {
            chatActivityEnterView.measure(View.MeasureSpec.makeMeasureSpec(AndroidUtilities.displaySize.x, 1073741824), View.MeasureSpec.makeMeasureSpec(999999, Integer.MIN_VALUE));
        }
        FrameLayout frameLayout = this.bottomOverlay;
        if (frameLayout != null) {
            frameLayout.measure(View.MeasureSpec.makeMeasureSpec(AndroidUtilities.displaySize.x, 1073741824), View.MeasureSpec.makeMeasureSpec(999999, Integer.MIN_VALUE));
        }
        ChatActivityEnterView chatActivityEnterView2 = this.chatActivityEnterView;
        int measuredHeight = chatActivityEnterView2 == null ? 0 : chatActivityEnterView2.getMeasuredHeight();
        FrameLayout frameLayout2 = this.bottomOverlay;
        int max = Math.max(measuredHeight, frameLayout2 == null ? 0 : frameLayout2.getMeasuredHeight());
        ChatActivityEnterView chatActivityEnterView3 = chatActivity.chatActivityEnterView;
        int measuredHeight2 = chatActivityEnterView3 == null ? 0 : chatActivityEnterView3.getMeasuredHeight();
        FrameLayout frameLayout3 = this.bottomOverlay;
        this.pullingBottomOffset = -(Math.max(measuredHeight2, frameLayout3 == null ? 0 : frameLayout3.getMeasuredHeight()) - max);
        ofFloat.addUpdateListener(new ChatActivity$$ExternalSyntheticLambda17(this, chatActivity, chatActivity.fragmentContextView.getMeasuredHeight() != this.fragmentContextView.getMeasuredHeight()));
        updateChatListViewTopPadding();
        AnimatorSet animatorSet = new AnimatorSet();
        this.fragmentTransition = animatorSet;
        animatorSet.addListener(new AnonymousClass116(chatActivity, runnable));
        this.fragmentTransition.setDuration(300L);
        this.fragmentTransition.setInterpolator(CubicBezierInterpolator.DEFAULT);
        this.fragmentTransition.playTogether(ofFloat);
        AndroidUtilities.runOnUIThread(this.fragmentTransitionRunnable, 200L);
        return this.fragmentTransition;
    }

    public /* synthetic */ void lambda$onCustomTransitionAnimation$248(ChatActivity chatActivity, boolean z, ValueAnimator valueAnimator) {
        float floatValue = ((Float) valueAnimator.getAnimatedValue()).floatValue();
        chatActivity.setTransitionToChatProgress(floatValue);
        float f = 1.0f - floatValue;
        float dp = AndroidUtilities.dp(8.0f) * f;
        this.avatarContainer.setTranslationY(dp);
        this.avatarContainer.getAvatarImageView().setTranslationY(-dp);
        float f2 = (-AndroidUtilities.dp(8.0f)) * floatValue;
        chatActivity.avatarContainer.setTranslationY(f2);
        chatActivity.avatarContainer.getAvatarImageView().setTranslationY(-f2);
        float f3 = (floatValue * 0.2f) + 0.8f;
        this.avatarContainer.getAvatarImageView().setScaleX(f3);
        this.avatarContainer.getAvatarImageView().setScaleY(f3);
        this.avatarContainer.getAvatarImageView().setAlpha(floatValue);
        float f4 = (0.2f * f) + 0.8f;
        chatActivity.avatarContainer.getAvatarImageView().setScaleX(f4);
        chatActivity.avatarContainer.getAvatarImageView().setScaleY(f4);
        chatActivity.avatarContainer.getAvatarImageView().setAlpha(f);
        ChatActivityEnterView chatActivityEnterView = chatActivity.chatActivityEnterView;
        if (chatActivityEnterView != null) {
            chatActivityEnterView.setTranslationY((-this.pullingBottomOffset) * floatValue);
        }
        FrameLayout frameLayout = chatActivity.bottomOverlay;
        if (frameLayout != null) {
            frameLayout.setTranslationY((-this.pullingBottomOffset) * floatValue);
        }
        if (z) {
            chatActivity.fragmentContextView.setAlpha(f);
        }
        chatActivity.pinnedMessageView.setAlpha(f);
        chatActivity.topChatPanelView.setAlpha(f);
    }

    /* renamed from: org.telegram.ui.ChatActivity$116 */
    /* loaded from: classes3.dex */
    public class AnonymousClass116 extends AnimatorListenerAdapter {
        int index;
        final /* synthetic */ Runnable val$callback;
        final /* synthetic */ ChatActivity val$previousChat;

        AnonymousClass116(ChatActivity chatActivity, Runnable runnable) {
            ChatActivity.this = r1;
            this.val$previousChat = chatActivity;
            this.val$callback = runnable;
        }

        @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
        public void onAnimationStart(Animator animator) {
            super.onAnimationStart(animator);
            this.index = NotificationCenter.getInstance(((BaseFragment) ChatActivity.this).currentAccount).setAnimationInProgress(this.index, null);
        }

        @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
        public void onAnimationEnd(Animator animator) {
            ChatActivity chatActivity = ChatActivity.this;
            chatActivity.fragmentOpened = true;
            ((BaseFragment) chatActivity).fragmentBeginToShow = true;
            ChatActivity.this.fragmentTransition = null;
            AndroidUtilities.runOnUIThread(new ChatActivity$116$$ExternalSyntheticLambda0(this), 32L);
            super.onAnimationEnd(animator);
            ChatActivity.this.contentView.invalidate();
            ChatActivity.this.contentView.setSkipBackgroundDrawing(false);
            ChatActivity.this.toPullingDownTransition = false;
            this.val$previousChat.setTransitionToChatProgress(0.0f);
            this.val$previousChat.setTransitionToChatActivity(null);
            ((BaseFragment) ChatActivity.this).fragmentView.setAlpha(1.0f);
            this.val$callback.run();
            ChatActivity.this.avatarContainer.setTranslationY(0.0f);
            this.val$previousChat.avatarContainer.setTranslationY(0.0f);
            this.val$previousChat.avatarContainer.getAvatarImageView().setTranslationY(0.0f);
            ChatActivity.this.avatarContainer.getAvatarImageView().setScaleX(1.0f);
            ChatActivity.this.avatarContainer.getAvatarImageView().setScaleY(1.0f);
            ChatActivity.this.avatarContainer.getAvatarImageView().setAlpha(1.0f);
            this.val$previousChat.avatarContainer.getAvatarImageView().setScaleX(1.0f);
            this.val$previousChat.avatarContainer.getAvatarImageView().setScaleY(1.0f);
            this.val$previousChat.avatarContainer.getAvatarImageView().setAlpha(1.0f);
            this.val$previousChat.pinnedMessageView.setAlpha(1.0f);
            this.val$previousChat.topChatPanelView.setAlpha(1.0f);
        }

        public /* synthetic */ void lambda$onAnimationEnd$0() {
            NotificationCenter.getInstance(((BaseFragment) ChatActivity.this).currentAccount).onAnimationFinish(this.index);
        }
    }

    public void setTransitionToChatActivity(ChatActivity chatActivity) {
        this.pullingDownAnimateToActivity = chatActivity;
    }

    public void setTransitionToChatProgress(float f) {
        this.pullingDownAnimateProgress = f;
        this.fragmentView.invalidate();
        this.chatListView.invalidate();
    }

    public void showChatThemeBottomSheet() {
        this.chatThemeBottomSheet = new ChatThemeBottomSheet(this, this.themeDelegate);
        this.chatListView.setOnInterceptTouchListener(ChatActivity$$ExternalSyntheticLambda247.INSTANCE);
        setChildrenEnabled(this.contentView, false);
        showDialog(this.chatThemeBottomSheet, new ChatActivity$$ExternalSyntheticLambda51(this));
    }

    public /* synthetic */ void lambda$showChatThemeBottomSheet$250(DialogInterface dialogInterface) {
        this.chatThemeBottomSheet = null;
        this.chatListView.setOnInterceptTouchListener(null);
        setChildrenEnabled(this.contentView, true);
        ChatThemeController.clearWallpaperThumbImages();
    }

    private void setChildrenEnabled(View view, boolean z) {
        if (view instanceof ViewGroup) {
            ViewGroup viewGroup = (ViewGroup) view;
            for (int i = 0; i < viewGroup.getChildCount(); i++) {
                setChildrenEnabled(viewGroup.getChildAt(i), z);
            }
        }
        if (view == this.chatListView || view == this.contentView) {
            return;
        }
        view.setEnabled(z);
    }

    private void checkThemeEmoticon() {
        TLRPC$ChatFull tLRPC$ChatFull;
        if (!this.fragmentOpened) {
            return;
        }
        String str = null;
        TLRPC$UserFull tLRPC$UserFull = this.userInfo;
        if (tLRPC$UserFull != null) {
            str = tLRPC$UserFull.theme_emoticon;
        }
        if (str == null && (tLRPC$ChatFull = this.chatInfo) != null) {
            str = tLRPC$ChatFull.theme_emoticon;
        }
        setChatThemeEmoticon(str);
    }

    private void setChatThemeEmoticon(String str) {
        boolean z = false;
        ChatThemeController.getInstance(this.currentAccount).setDialogTheme(this.dialog_id, str, false);
        if (!TextUtils.isEmpty(str)) {
            ChatThemeController.requestChatTheme(str, new ChatActivity$$ExternalSyntheticLambda234(this));
            return;
        }
        ThemeDelegate themeDelegate = this.themeDelegate;
        if (this.openAnimationStartTime != 0) {
            z = true;
        }
        themeDelegate.setCurrentTheme(null, z, null);
    }

    public /* synthetic */ void lambda$setChatThemeEmoticon$251(EmojiThemes emojiThemes) {
        this.themeDelegate.setCurrentTheme(emojiThemes, this.openAnimationStartTime != 0, null);
    }

    @Override // org.telegram.ui.ActionBar.BaseFragment
    public int getNavigationBarColor() {
        return getThemedColor("windowBackgroundGray");
    }

    @Override // org.telegram.ui.ActionBar.BaseFragment
    public int getThemedColor(String str) {
        ThemeDelegate themeDelegate = this.themeDelegate;
        Integer color = themeDelegate != null ? themeDelegate.getColor(str) : null;
        return color != null ? color.intValue() : super.getThemedColor(str);
    }

    @Override // org.telegram.ui.ActionBar.BaseFragment
    public Drawable getThemedDrawable(String str) {
        Drawable drawable = this.themeDelegate.getDrawable(str);
        return drawable != null ? drawable : super.getThemedDrawable(str);
    }

    public Paint getThemedPaint(String str) {
        Paint paint = this.themeDelegate.getPaint(str);
        return paint != null ? paint : Theme.getThemePaint(str);
    }

    public float getChatListViewPadding() {
        return this.chatListViewPaddingTop;
    }

    public FragmentContextView getFragmentContextView() {
        return this.fragmentContextView;
    }

    @Override // org.telegram.ui.ActionBar.BaseFragment
    public Theme.ResourcesProvider getResourceProvider() {
        return this.themeDelegate;
    }

    /* loaded from: classes3.dex */
    public class ThemeDelegate implements Theme.ResourcesProvider, ChatActionCell.ThemeDelegate, ForwardingPreviewView.ResourcesDelegate {
        private HashMap<String, Integer> animatingColors;
        Theme.MessageDrawable animatingMessageDrawable;
        Theme.MessageDrawable animatingMessageMediaDrawable;
        private Drawable backgroundDrawable;
        private List<EmojiThemes> cachedThemes;
        private EmojiThemes chatTheme;
        int currentServiceColor;
        boolean drawSelectedGradient;
        boolean drawServiceGradient;
        private AnimatorSet patternAlphaAnimator;
        private ValueAnimator patternIntensityAnimator;
        private Bitmap serviceBitmap;
        private Bitmap serviceBitmapSource;
        private Canvas serviceCanvas;
        private BitmapShader serviceShader;
        private BitmapShader serviceShaderSource;
        Bitmap startServiceBitmap;
        int startServiceButtonColor;
        int startServiceColor;
        int startServiceIconColor;
        int startServiceLinkColor;
        int startServiceTextColor;
        private boolean useSourceShader;
        private final HashMap<String, Drawable> currentDrawables = new HashMap<>();
        private final HashMap<String, Paint> currentPaints = new HashMap<>();
        private final Matrix actionMatrix = new Matrix();
        private HashMap<String, Integer> currentColors = new HashMap<>();
        private Paint paint = new Paint();
        private boolean isDark = Theme.getActiveTheme().isDark();

        @Override // org.telegram.ui.ActionBar.Theme.ResourcesProvider
        public /* synthetic */ int getColorOrDefault(String str) {
            return getColor(str);
        }

        static /* synthetic */ EmojiThemes access$35300(ThemeDelegate themeDelegate) {
            return themeDelegate.chatTheme;
        }

        ThemeDelegate() {
            ChatActivity.this = r6;
            boolean z = false;
            if (isThemeChangeAvailable()) {
                EmojiThemes dialogTheme = ChatThemeController.getInstance(((BaseFragment) r6).currentAccount).getDialogTheme(r6.dialog_id);
                this.chatTheme = dialogTheme;
                if (dialogTheme != null) {
                    setupChatTheme(dialogTheme, false, true);
                    z = true;
                }
            }
            if (!z && ThemeEditorView.getInstance() == null) {
                Theme.refreshThemeColors(true, true);
            } else {
                AndroidUtilities.runOnUIThread(new ChatActivity$ThemeDelegate$$ExternalSyntheticLambda3(this));
            }
        }

        public /* synthetic */ void lambda$new$0() {
            NotificationCenter globalInstance = NotificationCenter.getGlobalInstance();
            int i = NotificationCenter.didSetNewTheme;
            Object[] objArr = new Object[3];
            boolean z = false;
            objArr[0] = Boolean.FALSE;
            objArr[1] = Boolean.TRUE;
            if (((BaseFragment) ChatActivity.this).parentLayout != null && !((BaseFragment) ChatActivity.this).parentLayout.isTransitionAnimationInProgress()) {
                z = true;
            }
            objArr[2] = Boolean.valueOf(z);
            globalInstance.postNotificationName(i, objArr);
        }

        public List<EmojiThemes> getCachedThemes() {
            return this.cachedThemes;
        }

        public void setCachedThemes(List<EmojiThemes> list) {
            this.cachedThemes = list;
        }

        @Override // org.telegram.ui.ActionBar.Theme.ResourcesProvider
        public Integer getColor(String str) {
            String fallbackKey;
            Integer num;
            if (this.chatTheme == null) {
                return Integer.valueOf(Theme.getColor(str));
            }
            HashMap<String, Integer> hashMap = this.animatingColors;
            if (hashMap != null && (num = hashMap.get(str)) != null) {
                return num;
            }
            Integer num2 = this.currentColors.get(str);
            if (num2 == null) {
                if ("chat_outBubbleGradient".equals(str) || "chat_outBubbleGradient2".equals(str) || "chat_outBubbleGradient3".equals(str)) {
                    num2 = this.currentColors.get("chat_outBubble");
                    if (num2 == null) {
                        num2 = Theme.getColorOrNull(str);
                    }
                    if (num2 == null) {
                        num2 = Integer.valueOf(Theme.getColor("chat_outBubble"));
                    }
                }
                if (num2 == null && (fallbackKey = Theme.getFallbackKey(str)) != null) {
                    num2 = this.currentColors.get(fallbackKey);
                }
            }
            return (num2 != null || this.chatTheme == null) ? num2 : Integer.valueOf(Theme.getDefaultColor(str));
        }

        @Override // org.telegram.ui.ActionBar.Theme.ResourcesProvider
        public Integer getCurrentColor(String str) {
            return getCurrentColor(str, false);
        }

        public Integer getCurrentColor(String str, boolean z) {
            HashMap<String, Integer> hashMap;
            if (this.chatTheme == null) {
                return Theme.getColorOrNull(str);
            }
            Integer num = null;
            if (!z && (hashMap = this.animatingColors) != null) {
                num = hashMap.get(str);
            }
            return num == null ? this.currentColors.get(str) : num;
        }

        @Override // org.telegram.ui.ActionBar.Theme.ResourcesProvider
        public void setAnimatedColor(String str, int i) {
            HashMap<String, Integer> hashMap = this.animatingColors;
            if (hashMap != null) {
                hashMap.put(str, Integer.valueOf(i));
            }
        }

        @Override // org.telegram.ui.ActionBar.Theme.ResourcesProvider
        public void applyServiceShaderMatrix(int i, int i2, float f, float f2) {
            Bitmap bitmap;
            BitmapShader bitmapShader;
            if (this.chatTheme == null || (bitmap = this.serviceBitmap) == null || (bitmapShader = this.serviceShader) == null) {
                Theme.applyServiceShaderMatrix(i, i2, f, f2);
            } else if (this.useSourceShader) {
                Theme.applyServiceShaderMatrix(this.serviceBitmapSource, this.serviceShaderSource, this.actionMatrix, i, i2, f, f2);
            } else {
                Theme.applyServiceShaderMatrix(bitmap, bitmapShader, this.actionMatrix, i, i2, f, f2);
            }
        }

        @Override // org.telegram.ui.ActionBar.Theme.ResourcesProvider
        public boolean hasGradientService() {
            return this.chatTheme != null ? this.serviceShader != null : Theme.hasGradientService();
        }

        @Override // org.telegram.ui.ActionBar.Theme.ResourcesProvider
        public Drawable getDrawable(String str) {
            if (!this.currentDrawables.isEmpty()) {
                return this.currentDrawables.get(str);
            }
            return null;
        }

        @Override // org.telegram.ui.ActionBar.Theme.ResourcesProvider
        public Paint getPaint(String str) {
            if (this.chatTheme != null) {
                return this.currentPaints.get(str);
            }
            return null;
        }

        public boolean isThemeChangeAvailable() {
            ChatActivity chatActivity = ChatActivity.this;
            return chatActivity.currentChat == null && chatActivity.currentEncryptedChat == null && !chatActivity.currentUser.bot && chatActivity.dialog_id >= 0;
        }

        public EmojiThemes getCurrentTheme() {
            return this.chatTheme;
        }

        @Override // org.telegram.ui.Components.ForwardingPreviewView.ResourcesDelegate
        public Drawable getWallpaperDrawable() {
            Drawable drawable = this.backgroundDrawable;
            return drawable != null ? drawable : Theme.getCachedWallpaperNonBlocking();
        }

        @Override // org.telegram.ui.Components.ForwardingPreviewView.ResourcesDelegate
        public boolean isWallpaperMotion() {
            if (this.chatTheme != null) {
                return false;
            }
            return Theme.isWallpaperMotion();
        }

        public void setCurrentTheme(EmojiThemes emojiThemes, boolean z, Boolean bool) {
            if (((BaseFragment) ChatActivity.this).parentLayout == null) {
                return;
            }
            boolean booleanValue = bool != null ? bool.booleanValue() : Theme.getActiveTheme().isDark();
            String str = null;
            String emoticon = emojiThemes != null ? emojiThemes.getEmoticon() : null;
            EmojiThemes emojiThemes2 = this.chatTheme;
            if (emojiThemes2 != null) {
                str = emojiThemes2.getEmoticon();
            }
            if (!isThemeChangeAvailable()) {
                return;
            }
            if (TextUtils.equals(str, emoticon) && this.isDark == booleanValue) {
                return;
            }
            this.isDark = booleanValue;
            Theme.ThemeInfo currentNightTheme = booleanValue ? Theme.getCurrentNightTheme() : Theme.getCurrentTheme();
            ActionBarLayout.ThemeAnimationSettings themeAnimationSettings = new ActionBarLayout.ThemeAnimationSettings(currentNightTheme, currentNightTheme.currentAccentId, currentNightTheme.isDark(), !z);
            int i = -1;
            if (this.chatTheme == null) {
                Drawable cachedWallpaperNonBlocking = Theme.getCachedWallpaperNonBlocking();
                this.drawServiceGradient = cachedWallpaperNonBlocking instanceof MotionBackgroundDrawable;
                initServiceMessageColors(cachedWallpaperNonBlocking);
                this.startServiceTextColor = this.drawServiceGradient ? -1 : Theme.getColor("chat_serviceText");
                this.startServiceLinkColor = this.drawServiceGradient ? -1 : Theme.getColor("chat_serviceLink");
                this.startServiceButtonColor = this.drawServiceGradient ? -1 : Theme.getColor("chat_serviceLink");
                this.startServiceIconColor = this.drawServiceGradient ? -1 : Theme.getColor("chat_serviceIcon");
            } else if (this.drawServiceGradient) {
                this.startServiceBitmap = ((MotionBackgroundDrawable) this.backgroundDrawable).getBitmap();
            }
            this.startServiceColor = this.currentServiceColor;
            this.startServiceTextColor = this.drawServiceGradient ? -1 : getCurrentColorOrDefault("chat_serviceText", true);
            this.startServiceLinkColor = this.drawServiceGradient ? -1 : getCurrentColorOrDefault("chat_serviceLink", true);
            this.startServiceButtonColor = this.drawServiceGradient ? -1 : getCurrentColorOrDefault("chat_serviceLink", true);
            if (!this.drawServiceGradient) {
                i = getCurrentColorOrDefault("chat_serviceIcon", true);
            }
            this.startServiceIconColor = i;
            if (emojiThemes != null) {
                int i2 = AndroidUtilities.calcDrawableColor(this.backgroundDrawable)[0];
                initDrawables();
                initPaints();
            }
            themeAnimationSettings.applyTheme = false;
            themeAnimationSettings.afterStartDescriptionsAddedRunnable = new ChatActivity$ThemeDelegate$$ExternalSyntheticLambda6(this, emojiThemes, z);
            if (z) {
                themeAnimationSettings.animationProgress = new AnonymousClass1();
                themeAnimationSettings.beforeAnimationRunnable = new ChatActivity$ThemeDelegate$$ExternalSyntheticLambda5(this);
                themeAnimationSettings.afterAnimationRunnable = new ChatActivity$ThemeDelegate$$ExternalSyntheticLambda4(this);
            } else {
                SizeNotifierFrameLayout sizeNotifierFrameLayout = ChatActivity.this.contentView;
                if (sizeNotifierFrameLayout != null) {
                    sizeNotifierFrameLayout.setBackgroundImage(Theme.getCachedWallpaper(), Theme.isWallpaperMotion());
                }
            }
            themeAnimationSettings.onlyTopFragment = true;
            themeAnimationSettings.resourcesProvider = this;
            themeAnimationSettings.duration = 250L;
            ((BaseFragment) ChatActivity.this).parentLayout.animateThemedValues(themeAnimationSettings);
            Runnable runnable = ChatActivity.this.onThemeChange;
            if (runnable == null) {
                return;
            }
            runnable.run();
        }

        public /* synthetic */ void lambda$setCurrentTheme$1(EmojiThemes emojiThemes, boolean z) {
            setupChatTheme(emojiThemes, z, false);
            initServiceMessageColors(this.backgroundDrawable);
        }

        /* renamed from: org.telegram.ui.ChatActivity$ThemeDelegate$1 */
        /* loaded from: classes3.dex */
        public class AnonymousClass1 implements ActionBarLayout.ThemeAnimationSettings.onAnimationProgress {
            AnonymousClass1() {
                ThemeDelegate.this = r1;
            }

            @Override // org.telegram.ui.ActionBar.ActionBarLayout.ThemeAnimationSettings.onAnimationProgress
            public void setProgress(float f) {
                ChatActivity.this.chatListView.invalidate();
                ThemeDelegate themeDelegate = ThemeDelegate.this;
                themeDelegate.animatingMessageDrawable.crossfadeProgress = f;
                themeDelegate.animatingMessageMediaDrawable.crossfadeProgress = f;
                themeDelegate.updateServiceMessageColor(f);
            }
        }

        public /* synthetic */ void lambda$setCurrentTheme$2() {
            this.animatingColors = new HashMap<>();
            Theme.MessageDrawable messageDrawable = (Theme.MessageDrawable) ChatActivity.this.getThemedDrawable("drawableMsgOut");
            this.animatingMessageDrawable = messageDrawable;
            messageDrawable.crossfadeFromDrawable = ((BaseFragment) ChatActivity.this).parentLayout.messageDrawableOutStart;
            Theme.MessageDrawable messageDrawable2 = (Theme.MessageDrawable) ChatActivity.this.getThemedDrawable("drawableMsgOutMedia");
            this.animatingMessageMediaDrawable = messageDrawable2;
            messageDrawable2.crossfadeFromDrawable = ((BaseFragment) ChatActivity.this).parentLayout.messageDrawableOutMediaStart;
            this.animatingMessageDrawable.crossfadeProgress = 0.0f;
            this.animatingMessageMediaDrawable.crossfadeProgress = 0.0f;
            ChatActivity.this.updateMessagesVisiblePart(false);
            updateServiceMessageColor(0.0f);
        }

        public /* synthetic */ void lambda$setCurrentTheme$3() {
            this.animatingMessageDrawable.crossfadeFromDrawable = null;
            this.animatingMessageMediaDrawable.crossfadeFromDrawable = null;
            this.animatingColors = null;
            updateServiceMessageColor(1.0f);
        }

        private void setupChatTheme(EmojiThemes emojiThemes, boolean z, boolean z2) {
            Theme.ThemeInfo themeInfo;
            this.chatTheme = emojiThemes;
            Drawable backgroundImage = ((BaseFragment) ChatActivity.this).fragmentView != null ? ((SizeNotifierFrameLayout) ((BaseFragment) ChatActivity.this).fragmentView).getBackgroundImage() : null;
            MotionBackgroundDrawable motionBackgroundDrawable = backgroundImage instanceof MotionBackgroundDrawable ? (MotionBackgroundDrawable) backgroundImage : null;
            int phase = motionBackgroundDrawable != null ? motionBackgroundDrawable.getPhase() : 0;
            if (emojiThemes == null || emojiThemes.showAsDefaultStub) {
                Theme.getServiceMessageColor();
            }
            if (emojiThemes == null) {
                this.currentColors = new HashMap<>();
                this.currentPaints.clear();
                this.currentDrawables.clear();
                Drawable cachedWallpaperNonBlocking = Theme.getCachedWallpaperNonBlocking();
                if (cachedWallpaperNonBlocking instanceof MotionBackgroundDrawable) {
                    ((MotionBackgroundDrawable) cachedWallpaperNonBlocking).setPhase(phase);
                }
                this.backgroundDrawable = null;
                if (Theme.getActiveTheme().isDark() == this.isDark) {
                    themeInfo = Theme.getActiveTheme();
                } else {
                    SharedPreferences sharedPreferences = ApplicationLoader.applicationContext.getSharedPreferences("themeconfig", 0);
                    String str = "Blue";
                    String string = sharedPreferences.getString("lastDayTheme", str);
                    if (Theme.getTheme(string) != null && !Theme.getTheme(string).isDark()) {
                        str = string;
                    }
                    String str2 = "Dark Blue";
                    String string2 = sharedPreferences.getString("lastDarkTheme", str2);
                    if (Theme.getTheme(string2) != null && Theme.getTheme(string2).isDark()) {
                        str2 = string2;
                    }
                    themeInfo = this.isDark ? Theme.getTheme(str2) : Theme.getTheme(str);
                }
                Theme.applyTheme(themeInfo, false, this.isDark);
                return;
            }
            if (ApplicationLoader.applicationContext != null) {
                Theme.createChatResources(ApplicationLoader.applicationContext, false);
            }
            this.currentColors = emojiThemes.createColors(((BaseFragment) ChatActivity.this).currentAccount, this.isDark ? 1 : 0);
            this.backgroundDrawable = getBackgroundDrawableFromTheme(emojiThemes, phase);
            AnimatorSet animatorSet = this.patternAlphaAnimator;
            if (animatorSet != null) {
                animatorSet.cancel();
            }
            if (z) {
                this.patternAlphaAnimator = new AnimatorSet();
                if (motionBackgroundDrawable != null) {
                    ValueAnimator ofFloat = ValueAnimator.ofFloat(1.0f, 0.0f);
                    ofFloat.addUpdateListener(new ChatActivity$ThemeDelegate$$ExternalSyntheticLambda0(motionBackgroundDrawable));
                    ofFloat.addListener(new AnonymousClass2(this, motionBackgroundDrawable));
                    ofFloat.setDuration(200L);
                    this.patternAlphaAnimator.playTogether(ofFloat);
                }
                Drawable drawable = this.backgroundDrawable;
                if (drawable instanceof MotionBackgroundDrawable) {
                    MotionBackgroundDrawable motionBackgroundDrawable2 = (MotionBackgroundDrawable) drawable;
                    motionBackgroundDrawable2.setPatternAlpha(0.0f);
                    ValueAnimator ofFloat2 = ValueAnimator.ofFloat(0.0f, 1.0f);
                    ofFloat2.addUpdateListener(new ChatActivity$ThemeDelegate$$ExternalSyntheticLambda1(motionBackgroundDrawable2));
                    ofFloat2.addListener(new AnonymousClass3(this, motionBackgroundDrawable2));
                    ofFloat2.setDuration(250L);
                    this.patternAlphaAnimator.playTogether(ofFloat2);
                }
                this.patternAlphaAnimator.start();
            }
            if (!z2) {
                return;
            }
            int i = AndroidUtilities.calcDrawableColor(this.backgroundDrawable)[0];
            initDrawables();
            initPaints();
            initServiceMessageColors(this.backgroundDrawable);
            updateServiceMessageColor(1.0f);
        }

        /* renamed from: org.telegram.ui.ChatActivity$ThemeDelegate$2 */
        /* loaded from: classes3.dex */
        public class AnonymousClass2 extends AnimatorListenerAdapter {
            final /* synthetic */ MotionBackgroundDrawable val$prevMotionDrawable;

            AnonymousClass2(ThemeDelegate themeDelegate, MotionBackgroundDrawable motionBackgroundDrawable) {
                this.val$prevMotionDrawable = motionBackgroundDrawable;
            }

            @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
            public void onAnimationEnd(Animator animator) {
                super.onAnimationEnd(animator);
                this.val$prevMotionDrawable.setPatternAlpha(1.0f);
            }
        }

        public static /* synthetic */ void lambda$setupChatTheme$4(MotionBackgroundDrawable motionBackgroundDrawable, ValueAnimator valueAnimator) {
            motionBackgroundDrawable.setPatternAlpha(((Float) valueAnimator.getAnimatedValue()).floatValue());
        }

        /* renamed from: org.telegram.ui.ChatActivity$ThemeDelegate$3 */
        /* loaded from: classes3.dex */
        public class AnonymousClass3 extends AnimatorListenerAdapter {
            final /* synthetic */ MotionBackgroundDrawable val$currentBackgroundDrawable;

            AnonymousClass3(ThemeDelegate themeDelegate, MotionBackgroundDrawable motionBackgroundDrawable) {
                this.val$currentBackgroundDrawable = motionBackgroundDrawable;
            }

            @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
            public void onAnimationEnd(Animator animator) {
                super.onAnimationEnd(animator);
                this.val$currentBackgroundDrawable.setPatternAlpha(1.0f);
            }
        }

        public static /* synthetic */ void lambda$setupChatTheme$5(MotionBackgroundDrawable motionBackgroundDrawable, ValueAnimator valueAnimator) {
            motionBackgroundDrawable.setPatternAlpha(((Float) valueAnimator.getAnimatedValue()).floatValue());
        }

        private void initDrawables() {
            Drawable drawable;
            String themeDrawableColorKey;
            for (Map.Entry<String, Drawable> entry : Theme.getThemeDrawablesMap().entrySet()) {
                String key = entry.getKey();
                key.hashCode();
                char c = 65535;
                switch (key.hashCode()) {
                    case -2061232504:
                        if (key.equals("drawableMsgIn")) {
                            c = 0;
                            break;
                        }
                        break;
                    case -2005320132:
                        if (key.equals("drawableMsgInMedia")) {
                            c = 1;
                            break;
                        }
                        break;
                    case -1656383241:
                        if (key.equals("drawableMsgInMediaSelected")) {
                            c = 2;
                            break;
                        }
                        break;
                    case -1451465639:
                        if (key.equals("drawableMsgOutMedia")) {
                            c = 3;
                            break;
                        }
                        break;
                    case -1084641786:
                        if (key.equals("drawableMsgOutSelected")) {
                            c = 4;
                            break;
                        }
                        break;
                    case -8170988:
                        if (key.equals("drawableMsgOutMediaSelected")) {
                            c = 5;
                            break;
                        }
                        break;
                    case 300508483:
                        if (key.equals("drawableMsgInSelected")) {
                            c = 6;
                            break;
                        }
                        break;
                    case 526307915:
                        if (key.equals("drawableMsgOut")) {
                            c = 7;
                            break;
                        }
                        break;
                }
                switch (c) {
                    case 0:
                        drawable = new Theme.MessageDrawable(0, false, false, this);
                        break;
                    case 1:
                        drawable = new Theme.MessageDrawable(1, false, false, this);
                        break;
                    case 2:
                        drawable = new Theme.MessageDrawable(1, false, true, this);
                        break;
                    case 3:
                        drawable = new Theme.MessageDrawable(1, true, false, this);
                        break;
                    case 4:
                        drawable = new Theme.MessageDrawable(0, true, true, this);
                        break;
                    case 5:
                        drawable = new Theme.MessageDrawable(1, true, true, this);
                        break;
                    case 6:
                        drawable = new Theme.MessageDrawable(0, false, true, this);
                        break;
                    case 7:
                        drawable = new Theme.MessageDrawable(0, true, false, this);
                        break;
                    default:
                        Drawable.ConstantState constantState = entry.getValue().getConstantState();
                        drawable = constantState != null ? constantState.newDrawable().mutate() : null;
                        if (drawable != null && (themeDrawableColorKey = Theme.getThemeDrawableColorKey(entry.getKey())) != null) {
                            Integer color = getColor(themeDrawableColorKey);
                            if (color == null) {
                                color = Integer.valueOf(Theme.getColor(themeDrawableColorKey));
                            }
                            Theme.setDrawableColor(drawable, color.intValue());
                            break;
                        }
                        break;
                }
                if (drawable != null) {
                    this.currentDrawables.put(entry.getKey(), drawable);
                }
            }
        }

        private void initPaints() {
            Paint paint;
            for (Map.Entry<String, Paint> entry : Theme.getThemePaintsMap().entrySet()) {
                Paint value = entry.getValue();
                if (value instanceof TextPaint) {
                    paint = new TextPaint();
                    paint.setTextSize(value.getTextSize());
                    paint.setTypeface(value.getTypeface());
                } else {
                    paint = new Paint();
                }
                if ((value.getFlags() & 1) != 0) {
                    paint.setFlags(1);
                }
                String themePaintColorKey = Theme.getThemePaintColorKey(entry.getKey());
                if (themePaintColorKey != null) {
                    Integer color = getColor(themePaintColorKey);
                    if (color == null) {
                        color = Integer.valueOf(Theme.getColor(themePaintColorKey));
                    }
                    paint.setColor(color.intValue());
                }
                this.currentPaints.put(entry.getKey(), paint);
            }
        }

        private void initServiceMessageColors(Drawable drawable) {
            boolean z = false;
            int i = AndroidUtilities.calcDrawableColor(drawable)[0];
            Integer currentColor = getCurrentColor("chat_serviceBackground");
            Integer currentColor2 = getCurrentColor("chat_selectedBackground");
            if (currentColor == null) {
                currentColor = Integer.valueOf(i);
            }
            this.currentServiceColor = currentColor.intValue();
            if ((drawable instanceof MotionBackgroundDrawable) && SharedConfig.getDevicePerformanceClass() != 0) {
                z = true;
            }
            this.drawServiceGradient = z;
            this.drawSelectedGradient = z;
            if (z) {
                this.serviceBitmap = Bitmap.createBitmap(60, 80, Bitmap.Config.ARGB_8888);
                this.serviceBitmapSource = ((MotionBackgroundDrawable) drawable).getBitmap();
                Canvas canvas = new Canvas(this.serviceBitmap);
                this.serviceCanvas = canvas;
                canvas.drawBitmap(this.serviceBitmapSource, 0.0f, 0.0f, (Paint) null);
                Bitmap bitmap = this.serviceBitmap;
                Shader.TileMode tileMode = Shader.TileMode.CLAMP;
                this.serviceShader = new BitmapShader(bitmap, tileMode, tileMode);
                Bitmap bitmap2 = this.serviceBitmapSource;
                Shader.TileMode tileMode2 = Shader.TileMode.CLAMP;
                this.serviceShaderSource = new BitmapShader(bitmap2, tileMode2, tileMode2);
                this.useSourceShader = true;
            } else {
                this.serviceBitmap = null;
                this.serviceShader = null;
            }
            Paint paint = getPaint("paintChatActionBackground");
            Paint paint2 = getPaint("paintChatActionBackgroundSelected");
            Paint paint3 = getPaint("paintChatMessageBackgroundSelected");
            if (paint != null) {
                if (this.drawServiceGradient) {
                    ColorMatrix colorMatrix = new ColorMatrix();
                    colorMatrix.setSaturation(((MotionBackgroundDrawable) drawable).getIntensity() >= 0 ? 1.8f : 0.5f);
                    paint.setAlpha(127);
                    paint.setColorFilter(new ColorMatrixColorFilter(colorMatrix));
                    paint.setShader(this.serviceShaderSource);
                    paint2.setAlpha(127);
                    paint2.setColorFilter(new ColorMatrixColorFilter(colorMatrix));
                    paint2.setShader(this.serviceShaderSource);
                } else {
                    paint.setColorFilter(null);
                    paint.setShader(null);
                    paint2.setColorFilter(null);
                    paint2.setShader(null);
                }
            }
            if (paint3 == null) {
                paint3 = new Paint(1);
                this.currentPaints.put("paintChatMessageBackgroundSelected", paint3);
            }
            if (this.drawSelectedGradient) {
                ColorMatrix colorMatrix2 = new ColorMatrix();
                AndroidUtilities.adjustSaturationColorMatrix(colorMatrix2, 2.5f);
                AndroidUtilities.multiplyBrightnessColorMatrix(colorMatrix2, 0.75f);
                paint3.setAlpha(64);
                paint3.setColorFilter(new ColorMatrixColorFilter(colorMatrix2));
                paint3.setShader(this.serviceShaderSource);
                return;
            }
            if (currentColor2 == null) {
                currentColor2 = getColor("chat_selectedBackground");
            }
            paint3.setColor(currentColor2.intValue());
            paint3.setColorFilter(null);
            paint3.setShader(null);
        }

        public void updateServiceMessageColor(float f) {
            Bitmap bitmap;
            Bitmap bitmap2;
            if (this.currentPaints.isEmpty()) {
                return;
            }
            Paint paint = getPaint("paintChatActionBackground");
            Paint paint2 = getPaint("paintChatActionBackgroundSelected");
            Paint paint3 = getPaint("paintChatMessageBackgroundSelected");
            int i = this.currentServiceColor;
            int i2 = -1;
            int currentColorOrDefault = this.drawServiceGradient ? -1 : getCurrentColorOrDefault("chat_serviceText", true);
            int currentColorOrDefault2 = this.drawServiceGradient ? -1 : getCurrentColorOrDefault("chat_serviceLink", true);
            int currentColorOrDefault3 = this.drawServiceGradient ? -1 : getCurrentColorOrDefault("chat_serviceLink", true);
            if (!this.drawServiceGradient) {
                i2 = getCurrentColorOrDefault("chat_serviceIcon", true);
            }
            if (f != 1.0f) {
                i = ColorUtils.blendARGB(this.startServiceColor, i, f);
                currentColorOrDefault = ColorUtils.blendARGB(this.startServiceTextColor, currentColorOrDefault, f);
                currentColorOrDefault2 = ColorUtils.blendARGB(this.startServiceLinkColor, currentColorOrDefault2, f);
                currentColorOrDefault3 = ColorUtils.blendARGB(this.startServiceButtonColor, currentColorOrDefault3, f);
                i2 = ColorUtils.blendARGB(this.startServiceIconColor, i2, f);
            }
            if (paint != null && !this.drawServiceGradient) {
                paint.setColor(i);
                paint2.setColor(i);
            }
            Paint paint4 = getPaint("paintChatActionText");
            if (paint4 != null) {
                ((TextPaint) paint4).linkColor = currentColorOrDefault2;
                getPaint("paintChatActionText").setColor(currentColorOrDefault);
                getPaint("paintChatBotButton").setColor(currentColorOrDefault3);
            }
            Theme.setDrawableColor(getDrawable("drawableMsgStickerCheck"), currentColorOrDefault);
            Theme.setDrawableColor(getDrawable("drawableMsgStickerClock"), currentColorOrDefault);
            Theme.setDrawableColor(getDrawable("drawableMsgStickerHalfCheck"), currentColorOrDefault);
            Theme.setDrawableColor(getDrawable("drawableMsgStickerPinned"), currentColorOrDefault);
            Theme.setDrawableColor(getDrawable("drawableMsgStickerReplies"), currentColorOrDefault);
            Theme.setDrawableColor(getDrawable("drawableMsgStickerViews"), currentColorOrDefault);
            Theme.setDrawableColor(getDrawable("drawableBotInline"), i2);
            Theme.setDrawableColor(getDrawable("drawableBotLink"), i2);
            Theme.setDrawableColor(getDrawable("drawable_botInvite"), i2);
            Theme.setDrawableColor(getDrawable("drawableCommentSticker"), i2);
            Theme.setDrawableColor(getDrawable("drawableGoIcon"), i2);
            Theme.setDrawableColor(getDrawable("drawableReplyIcon"), i2);
            Theme.setDrawableColor(getDrawable("drawableShareIcon"), i2);
            Canvas canvas = this.serviceCanvas;
            if (canvas == null || (bitmap = this.serviceBitmapSource) == null) {
                return;
            }
            if (f != 1.0f && (bitmap2 = this.startServiceBitmap) != null) {
                this.useSourceShader = false;
                canvas.drawBitmap(bitmap2, 0.0f, 0.0f, (Paint) null);
                this.paint.setAlpha((int) (f * 255.0f));
                this.serviceCanvas.drawBitmap(this.serviceBitmapSource, 0.0f, 0.0f, this.paint);
                if (paint != null) {
                    paint.setShader(this.serviceShader);
                    paint2.setShader(this.serviceShader);
                }
                if (paint3 == null) {
                    return;
                }
                paint3.setShader(this.serviceShader);
                return;
            }
            this.useSourceShader = true;
            canvas.drawBitmap(bitmap, 0.0f, 0.0f, (Paint) null);
            if (paint != null) {
                paint.setShader(this.serviceShaderSource);
                paint2.setShader(this.serviceShaderSource);
            }
            if (paint3 == null) {
                return;
            }
            paint3.setShader(this.serviceShaderSource);
        }

        private Drawable getBackgroundDrawableFromTheme(EmojiThemes emojiThemes, int i) {
            if (emojiThemes.showAsDefaultStub) {
                return Theme.createBackgroundDrawable(EmojiThemes.getDefaultThemeInfo(this.isDark), emojiThemes.getPreviewColors(((BaseFragment) ChatActivity.this).currentAccount, this.isDark ? 1 : 0), emojiThemes.getWallpaperLink(this.isDark ? 1 : 0), i).wallpaper;
            }
            Integer color = getColor("chat_wallpaper");
            Integer color2 = getColor("chat_wallpaper_gradient_to");
            Integer color3 = getColor("key_chat_wallpaper_gradient_to2");
            Integer color4 = getColor("key_chat_wallpaper_gradient_to3");
            if (color4 == null) {
                color4 = 0;
            }
            MotionBackgroundDrawable motionBackgroundDrawable = new MotionBackgroundDrawable();
            motionBackgroundDrawable.setPatternBitmap(emojiThemes.getWallpaper(this.isDark ? 1 : 0).settings.intensity);
            motionBackgroundDrawable.setColors(color.intValue(), color2.intValue(), color3.intValue(), color4.intValue(), 0, true);
            motionBackgroundDrawable.setPhase(i);
            int patternColor = motionBackgroundDrawable.getPatternColor();
            boolean z = this.isDark;
            emojiThemes.loadWallpaper(z ? 1 : 0, new ChatActivity$ThemeDelegate$$ExternalSyntheticLambda7(this, emojiThemes, z, motionBackgroundDrawable, patternColor));
            return motionBackgroundDrawable;
        }

        public /* synthetic */ void lambda$getBackgroundDrawableFromTheme$7(EmojiThemes emojiThemes, boolean z, MotionBackgroundDrawable motionBackgroundDrawable, int i, Pair pair) {
            if (pair == null) {
                return;
            }
            long longValue = ((Long) pair.first).longValue();
            Bitmap bitmap = (Bitmap) pair.second;
            EmojiThemes emojiThemes2 = this.chatTheme;
            if (emojiThemes2 == null || longValue != emojiThemes2.getTlTheme(this.isDark ? 1 : 0).id || bitmap == null) {
                return;
            }
            ValueAnimator valueAnimator = this.patternIntensityAnimator;
            if (valueAnimator != null) {
                valueAnimator.cancel();
            }
            motionBackgroundDrawable.setPatternBitmap(emojiThemes.getWallpaper(z ? 1 : 0).settings.intensity, bitmap);
            motionBackgroundDrawable.setPatternColorFilter(i);
            ValueAnimator ofFloat = ValueAnimator.ofFloat(0.0f, 1.0f);
            this.patternIntensityAnimator = ofFloat;
            ofFloat.addUpdateListener(new ChatActivity$ThemeDelegate$$ExternalSyntheticLambda2(motionBackgroundDrawable));
            this.patternIntensityAnimator.setDuration(250L);
            this.patternIntensityAnimator.start();
        }

        public static /* synthetic */ void lambda$getBackgroundDrawableFromTheme$6(MotionBackgroundDrawable motionBackgroundDrawable, ValueAnimator valueAnimator) {
            motionBackgroundDrawable.setPatternAlpha(((Float) valueAnimator.getAnimatedValue()).floatValue());
        }

        private int getCurrentColorOrDefault(String str, boolean z) {
            Integer currentColor = getCurrentColor(str, z);
            if (currentColor == null) {
                currentColor = Integer.valueOf(Theme.getColor(str, null, z));
            }
            return currentColor.intValue();
        }
    }

    @Override // org.telegram.ui.ActionBar.BaseFragment
    protected boolean allowPresentFragment() {
        return !this.inPreviewMode;
    }

    @Override // org.telegram.ui.ActionBar.BaseFragment
    public boolean hideKeyboardOnShow() {
        MessageObject messageObject = this.threadMessageObject;
        if (messageObject == null || messageObject.getRepliesCount() != 0 || !ChatObject.canSendMessages(this.currentChat)) {
            return super.hideKeyboardOnShow();
        }
        return false;
    }

    @Override // org.telegram.ui.ActionBar.BaseFragment
    public boolean isLightStatusBar() {
        int i;
        if (this.reportType >= 0) {
            Theme.ResourcesProvider resourceProvider = getResourceProvider();
            if (resourceProvider != null) {
                i = resourceProvider.getColorOrDefault("actionBarActionModeDefault");
            } else {
                i = Theme.getColor("actionBarActionModeDefault", null, true);
            }
            return ColorUtils.calculateLuminance(i) > 0.699999988079071d;
        }
        return super.isLightStatusBar();
    }

    public MessageObject.GroupedMessages getGroup(long j) {
        return this.groupedMessagesMap.get(j);
    }
}

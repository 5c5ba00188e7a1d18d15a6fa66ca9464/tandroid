package org.telegram.messenger;

import android.appwidget.AppWidgetManager;
import android.text.SpannableStringBuilder;
import android.text.TextUtils;
import android.text.style.ForegroundColorSpan;
import android.util.Pair;
import android.util.SparseArray;
import android.util.SparseIntArray;
import androidx.collection.LongSparseArray;
import j$.util.function.Consumer;
import java.io.File;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Objects;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.atomic.AtomicLong;
import java.util.concurrent.atomic.AtomicReference;
import org.telegram.PhoneFormat.PhoneFormat;
import org.telegram.SQLite.SQLiteCursor;
import org.telegram.SQLite.SQLiteDatabase;
import org.telegram.SQLite.SQLiteException;
import org.telegram.SQLite.SQLitePreparedStatement;
import org.telegram.messenger.ContactsController;
import org.telegram.messenger.MessagesController;
import org.telegram.messenger.MessagesStorage;
import org.telegram.messenger.TopicsController;
import org.telegram.messenger.support.LongSparseIntArray;
import org.telegram.tgnet.AbstractSerializedData;
import org.telegram.tgnet.ConnectionsManager;
import org.telegram.tgnet.NativeByteBuffer;
import org.telegram.tgnet.RequestDelegate;
import org.telegram.tgnet.TLObject;
import org.telegram.tgnet.TLRPC$BotInfo;
import org.telegram.tgnet.TLRPC$ChannelParticipant;
import org.telegram.tgnet.TLRPC$Chat;
import org.telegram.tgnet.TLRPC$ChatFull;
import org.telegram.tgnet.TLRPC$ChatParticipant;
import org.telegram.tgnet.TLRPC$ChatParticipants;
import org.telegram.tgnet.TLRPC$DecryptedMessageAction;
import org.telegram.tgnet.TLRPC$Dialog;
import org.telegram.tgnet.TLRPC$DialogFilter;
import org.telegram.tgnet.TLRPC$Document;
import org.telegram.tgnet.TLRPC$DraftMessage;
import org.telegram.tgnet.TLRPC$EncryptedChat;
import org.telegram.tgnet.TLRPC$InputChannel;
import org.telegram.tgnet.TLRPC$InputDialogPeer;
import org.telegram.tgnet.TLRPC$InputMedia;
import org.telegram.tgnet.TLRPC$InputPeer;
import org.telegram.tgnet.TLRPC$Message;
import org.telegram.tgnet.TLRPC$MessageAction;
import org.telegram.tgnet.TLRPC$MessageEntity;
import org.telegram.tgnet.TLRPC$MessageFwdHeader;
import org.telegram.tgnet.TLRPC$MessageMedia;
import org.telegram.tgnet.TLRPC$MessageReplies;
import org.telegram.tgnet.TLRPC$Peer;
import org.telegram.tgnet.TLRPC$Photo;
import org.telegram.tgnet.TLRPC$PhotoSize;
import org.telegram.tgnet.TLRPC$Poll;
import org.telegram.tgnet.TLRPC$PollResults;
import org.telegram.tgnet.TLRPC$ReplyMarkup;
import org.telegram.tgnet.TLRPC$TL_channelFull;
import org.telegram.tgnet.TLRPC$TL_channels_deleteMessages;
import org.telegram.tgnet.TLRPC$TL_chatAdminRights;
import org.telegram.tgnet.TLRPC$TL_chatBannedRights;
import org.telegram.tgnet.TLRPC$TL_chatChannelParticipant;
import org.telegram.tgnet.TLRPC$TL_chatFull;
import org.telegram.tgnet.TLRPC$TL_chatParticipant;
import org.telegram.tgnet.TLRPC$TL_chatParticipantAdmin;
import org.telegram.tgnet.TLRPC$TL_chatParticipants;
import org.telegram.tgnet.TLRPC$TL_contact;
import org.telegram.tgnet.TLRPC$TL_decryptedMessageActionScreenshotMessages;
import org.telegram.tgnet.TLRPC$TL_decryptedMessageActionSetMessageTTL;
import org.telegram.tgnet.TLRPC$TL_dialog;
import org.telegram.tgnet.TLRPC$TL_dialogFolder;
import org.telegram.tgnet.TLRPC$TL_documentEmpty;
import org.telegram.tgnet.TLRPC$TL_folder;
import org.telegram.tgnet.TLRPC$TL_folderPeer;
import org.telegram.tgnet.TLRPC$TL_forumTopic;
import org.telegram.tgnet.TLRPC$TL_inputChannel;
import org.telegram.tgnet.TLRPC$TL_inputFolderPeer;
import org.telegram.tgnet.TLRPC$TL_inputMediaGame;
import org.telegram.tgnet.TLRPC$TL_inputMessageEntityMentionName;
import org.telegram.tgnet.TLRPC$TL_message;
import org.telegram.tgnet.TLRPC$TL_messageActionChatAddUser;
import org.telegram.tgnet.TLRPC$TL_messageActionGameScore;
import org.telegram.tgnet.TLRPC$TL_messageActionGeoProximityReached;
import org.telegram.tgnet.TLRPC$TL_messageActionHistoryClear;
import org.telegram.tgnet.TLRPC$TL_messageActionPaymentSent;
import org.telegram.tgnet.TLRPC$TL_messageActionPinMessage;
import org.telegram.tgnet.TLRPC$TL_messageActionTopicCreate;
import org.telegram.tgnet.TLRPC$TL_messageActionTopicEdit;
import org.telegram.tgnet.TLRPC$TL_messageEmpty;
import org.telegram.tgnet.TLRPC$TL_messageEncryptedAction;
import org.telegram.tgnet.TLRPC$TL_messageEntityCustomEmoji;
import org.telegram.tgnet.TLRPC$TL_messageEntityMentionName;
import org.telegram.tgnet.TLRPC$TL_messageMediaDocument;
import org.telegram.tgnet.TLRPC$TL_messageMediaPhoto;
import org.telegram.tgnet.TLRPC$TL_messageMediaPoll;
import org.telegram.tgnet.TLRPC$TL_messageMediaUnsupported;
import org.telegram.tgnet.TLRPC$TL_messageMediaUnsupported_old;
import org.telegram.tgnet.TLRPC$TL_messageMediaWebPage;
import org.telegram.tgnet.TLRPC$TL_messageReactions;
import org.telegram.tgnet.TLRPC$TL_messageReplies;
import org.telegram.tgnet.TLRPC$TL_messageReplyHeader;
import org.telegram.tgnet.TLRPC$TL_messageService;
import org.telegram.tgnet.TLRPC$TL_message_secret;
import org.telegram.tgnet.TLRPC$TL_messages_botCallbackAnswer;
import org.telegram.tgnet.TLRPC$TL_messages_botResults;
import org.telegram.tgnet.TLRPC$TL_messages_deleteMessages;
import org.telegram.tgnet.TLRPC$TL_messages_deleteScheduledMessages;
import org.telegram.tgnet.TLRPC$TL_messages_dialogs;
import org.telegram.tgnet.TLRPC$TL_messages_messages;
import org.telegram.tgnet.TLRPC$TL_peerChannel;
import org.telegram.tgnet.TLRPC$TL_peerChat;
import org.telegram.tgnet.TLRPC$TL_peerNotifySettings;
import org.telegram.tgnet.TLRPC$TL_peerUser;
import org.telegram.tgnet.TLRPC$TL_photoEmpty;
import org.telegram.tgnet.TLRPC$TL_photos_photos;
import org.telegram.tgnet.TLRPC$TL_replyInlineMarkup;
import org.telegram.tgnet.TLRPC$TL_updateDeleteScheduledMessages;
import org.telegram.tgnet.TLRPC$TL_updates;
import org.telegram.tgnet.TLRPC$TL_updates_channelDifferenceTooLong;
import org.telegram.tgnet.TLRPC$TL_userStatusLastMonth;
import org.telegram.tgnet.TLRPC$TL_userStatusLastWeek;
import org.telegram.tgnet.TLRPC$TL_userStatusRecently;
import org.telegram.tgnet.TLRPC$TL_username;
import org.telegram.tgnet.TLRPC$User;
import org.telegram.tgnet.TLRPC$UserFull;
import org.telegram.tgnet.TLRPC$UserProfilePhoto;
import org.telegram.tgnet.TLRPC$UserStatus;
import org.telegram.tgnet.TLRPC$Vector;
import org.telegram.tgnet.TLRPC$WallPaper;
import org.telegram.tgnet.TLRPC$WebPage;
import org.telegram.tgnet.TLRPC$messages_BotResults;
import org.telegram.tgnet.TLRPC$messages_Dialogs;
import org.telegram.tgnet.TLRPC$messages_Messages;
import org.telegram.tgnet.TLRPC$photos_Photos;
import org.telegram.ui.ActionBar.Theme;
import org.telegram.ui.Adapters.DialogsSearchAdapter;
/* loaded from: classes.dex */
public class MessagesStorage extends BaseController {
    public static final String[] DATABASE_TABLES;
    public static final int LAST_DB_VERSION = 112;
    private int archiveUnreadCount;
    private int[][] bots;
    private File cacheFile;
    private int[][] channels;
    private int[][] contacts;
    private SQLiteDatabase database;
    private boolean databaseMigrationInProgress;
    private ArrayList<MessagesController.DialogFilter> dialogFilters;
    private SparseArray<MessagesController.DialogFilter> dialogFiltersMap;
    private LongSparseIntArray dialogIsForum;
    private LongSparseArray<Integer> dialogsWithMentions;
    private LongSparseArray<Integer> dialogsWithUnread;
    private int[][] groups;
    private int lastDateValue;
    private int lastPtsValue;
    private int lastQtsValue;
    private int lastSavedDate;
    private int lastSavedPts;
    private int lastSavedQts;
    private int lastSavedSeq;
    private int lastSecretVersion;
    private int lastSeqValue;
    private AtomicLong lastTaskId;
    private int mainUnreadCount;
    private int[] mentionChannels;
    private int[] mentionGroups;
    private int[][] nonContacts;
    private CountDownLatch openSync;
    private volatile int pendingArchiveUnreadCount;
    private volatile int pendingMainUnreadCount;
    private int secretG;
    private byte[] secretPBytes;
    private File shmCacheFile;
    public boolean showClearDatabaseAlert;
    private DispatchQueue storageQueue;
    private SparseArray<ArrayList<Runnable>> tasks;
    boolean tryRecover;
    private LongSparseArray<Boolean> unknownDialogsIds;
    private File walCacheFile;
    private static volatile MessagesStorage[] Instance = new MessagesStorage[4];
    private static final Object[] lockObjects = new Object[4];

    /* loaded from: classes.dex */
    public interface BooleanCallback {
        void run(boolean z);
    }

    /* loaded from: classes.dex */
    public interface IntCallback {
        void run(int i);
    }

    /* loaded from: classes.dex */
    public interface LongCallback {
        void run(long j);
    }

    /* loaded from: classes.dex */
    public interface StringCallback {
        void run(String str);
    }

    static {
        for (int i = 0; i < 4; i++) {
            lockObjects[i] = new Object();
        }
        DATABASE_TABLES = new String[]{"messages_holes", "media_holes_v2", "scheduled_messages_v2", "messages_v2", "download_queue", "user_contacts_v7", "user_phones_v7", "dialogs", "dialog_filter", "dialog_filter_ep", "dialog_filter_pin_v2", "randoms_v2", "enc_tasks_v4", "messages_seq", "params", "media_v4", "bot_keyboard", "chat_settings_v2", "user_settings", "chat_pinned_v2", "chat_pinned_count", "chat_hints", "botcache", "users_data", "users", "chats", "enc_chats", "channel_users_v2", "channel_admins_v3", "contacts", "user_photos", "dialog_settings", "web_recent_v3", "stickers_v2", "stickers_featured", "stickers_dice", "stickersets", "hashtag_recent_v2", "webpage_pending_v2", "sent_files_v2", "search_recent", "media_counts_v2", "keyvalue", "bot_info_v2", "pending_tasks", "requested_holes", "sharing_locations", "shortcut_widget", "emoji_keywords_v2", "emoji_keywords_info_v2", "wallpapers2", "unread_push_messages", "polls_v2", "reactions", "reaction_mentions", "downloading_documents", "animated_emoji", "attach_menu_bots", "premium_promo", "emoji_statuses", "messages_holes_topics", "messages_topics", "media_topics", "media_holes_topics", "topics", "media_counts_topics", "reaction_mentions_topics", "emoji_groups"};
    }

    public static MessagesStorage getInstance(int i) {
        MessagesStorage messagesStorage = Instance[i];
        if (messagesStorage == null) {
            synchronized (lockObjects[i]) {
                messagesStorage = Instance[i];
                if (messagesStorage == null) {
                    MessagesStorage[] messagesStorageArr = Instance;
                    MessagesStorage messagesStorage2 = new MessagesStorage(i);
                    messagesStorageArr[i] = messagesStorage2;
                    messagesStorage = messagesStorage2;
                }
            }
        }
        return messagesStorage;
    }

    private void ensureOpened() {
        try {
            this.openSync.await();
        } catch (Throwable unused) {
        }
    }

    public int getLastDateValue() {
        ensureOpened();
        return this.lastDateValue;
    }

    public void setLastDateValue(int i) {
        ensureOpened();
        this.lastDateValue = i;
    }

    public int getLastPtsValue() {
        ensureOpened();
        return this.lastPtsValue;
    }

    public int getMainUnreadCount() {
        return this.mainUnreadCount;
    }

    public int getArchiveUnreadCount() {
        return this.archiveUnreadCount;
    }

    public void setLastPtsValue(int i) {
        ensureOpened();
        this.lastPtsValue = i;
    }

    public int getLastQtsValue() {
        ensureOpened();
        return this.lastQtsValue;
    }

    public void setLastQtsValue(int i) {
        ensureOpened();
        this.lastQtsValue = i;
    }

    public int getLastSeqValue() {
        ensureOpened();
        return this.lastSeqValue;
    }

    public void setLastSeqValue(int i) {
        ensureOpened();
        this.lastSeqValue = i;
    }

    public int getLastSecretVersion() {
        ensureOpened();
        return this.lastSecretVersion;
    }

    public void setLastSecretVersion(int i) {
        ensureOpened();
        this.lastSecretVersion = i;
    }

    public byte[] getSecretPBytes() {
        ensureOpened();
        return this.secretPBytes;
    }

    public void setSecretPBytes(byte[] bArr) {
        ensureOpened();
        this.secretPBytes = bArr;
    }

    public int getSecretG() {
        ensureOpened();
        return this.secretG;
    }

    public void setSecretG(int i) {
        ensureOpened();
        this.secretG = i;
    }

    public MessagesStorage(int i) {
        super(i);
        this.lastTaskId = new AtomicLong(System.currentTimeMillis());
        this.tasks = new SparseArray<>();
        this.lastDateValue = 0;
        this.lastPtsValue = 0;
        this.lastQtsValue = 0;
        this.lastSeqValue = 0;
        this.lastSecretVersion = 0;
        this.secretPBytes = null;
        this.secretG = 0;
        this.lastSavedSeq = 0;
        this.lastSavedPts = 0;
        this.lastSavedDate = 0;
        this.lastSavedQts = 0;
        this.dialogFilters = new ArrayList<>();
        this.dialogFiltersMap = new SparseArray<>();
        this.unknownDialogsIds = new LongSparseArray<>();
        this.openSync = new CountDownLatch(1);
        this.dialogIsForum = new LongSparseIntArray();
        this.contacts = new int[][]{new int[2], new int[2]};
        this.nonContacts = new int[][]{new int[2], new int[2]};
        this.bots = new int[][]{new int[2], new int[2]};
        this.channels = new int[][]{new int[2], new int[2]};
        this.groups = new int[][]{new int[2], new int[2]};
        this.mentionChannels = new int[2];
        this.mentionGroups = new int[2];
        this.dialogsWithMentions = new LongSparseArray<>();
        this.dialogsWithUnread = new LongSparseArray<>();
        DispatchQueue dispatchQueue = new DispatchQueue("storageQueue_" + i);
        this.storageQueue = dispatchQueue;
        dispatchQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda14
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$new$0();
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$new$0() {
        openDatabase(1);
    }

    public SQLiteDatabase getDatabase() {
        return this.database;
    }

    public DispatchQueue getStorageQueue() {
        return this.storageQueue;
    }

    public void bindTaskToGuid(Runnable runnable, int i) {
        ArrayList<Runnable> arrayList = this.tasks.get(i);
        if (arrayList == null) {
            arrayList = new ArrayList<>();
            this.tasks.put(i, arrayList);
        }
        arrayList.add(runnable);
    }

    public void cancelTasksForGuid(int i) {
        ArrayList<Runnable> arrayList = this.tasks.get(i);
        if (arrayList == null) {
            return;
        }
        int size = arrayList.size();
        for (int i2 = 0; i2 < size; i2++) {
            this.storageQueue.cancelRunnable(arrayList.get(i2));
        }
        this.tasks.remove(i);
    }

    public void completeTaskForGuid(Runnable runnable, int i) {
        ArrayList<Runnable> arrayList = this.tasks.get(i);
        if (arrayList == null) {
            return;
        }
        arrayList.remove(runnable);
        if (arrayList.isEmpty()) {
            this.tasks.remove(i);
        }
    }

    public long getDatabaseSize() {
        File file = this.cacheFile;
        long length = file != null ? 0 + file.length() : 0L;
        File file2 = this.shmCacheFile;
        return file2 != null ? length + file2.length() : length;
    }

    public void openDatabase(int i) {
        File filesDirFixed = ApplicationLoader.getFilesDirFixed();
        if (this.currentAccount != 0) {
            File file = new File(filesDirFixed, "account" + this.currentAccount + "/");
            file.mkdirs();
            filesDirFixed = file;
        }
        this.cacheFile = new File(filesDirFixed, "cache4.db");
        this.walCacheFile = new File(filesDirFixed, "cache4.db-wal");
        this.shmCacheFile = new File(filesDirFixed, "cache4.db-shm");
        boolean z = !this.cacheFile.exists();
        try {
            SQLiteDatabase sQLiteDatabase = new SQLiteDatabase(this.cacheFile.getPath());
            this.database = sQLiteDatabase;
            sQLiteDatabase.executeFast("PRAGMA secure_delete = ON").stepThis().dispose();
            this.database.executeFast("PRAGMA temp_store = MEMORY").stepThis().dispose();
            this.database.executeFast("PRAGMA journal_mode = WAL").stepThis().dispose();
            this.database.executeFast("PRAGMA journal_size_limit = 10485760").stepThis().dispose();
            if (z) {
                if (BuildVars.LOGS_ENABLED) {
                    FileLog.d("create new database");
                }
                createTables(this.database);
            } else {
                int intValue = this.database.executeInt("PRAGMA user_version", new Object[0]).intValue();
                if (BuildVars.LOGS_ENABLED) {
                    FileLog.d("current db version = " + intValue);
                }
                if (intValue == 0) {
                    throw new Exception("malformed");
                }
                try {
                    SQLiteCursor queryFinalized = this.database.queryFinalized("SELECT seq, pts, date, qts, lsv, sg, pbytes FROM params WHERE id = 1", new Object[0]);
                    if (queryFinalized.next()) {
                        this.lastSeqValue = queryFinalized.intValue(0);
                        this.lastPtsValue = queryFinalized.intValue(1);
                        this.lastDateValue = queryFinalized.intValue(2);
                        this.lastQtsValue = queryFinalized.intValue(3);
                        this.lastSecretVersion = queryFinalized.intValue(4);
                        this.secretG = queryFinalized.intValue(5);
                        if (queryFinalized.isNull(6)) {
                            this.secretPBytes = null;
                        } else {
                            byte[] byteArrayValue = queryFinalized.byteArrayValue(6);
                            this.secretPBytes = byteArrayValue;
                            if (byteArrayValue != null && byteArrayValue.length == 1) {
                                this.secretPBytes = null;
                            }
                        }
                    }
                    queryFinalized.dispose();
                } catch (Exception e) {
                    FileLog.e(e);
                    if (e.getMessage() != null && e.getMessage().contains("malformed")) {
                        throw new RuntimeException("malformed");
                    }
                    try {
                        this.database.executeFast("CREATE TABLE IF NOT EXISTS params(id INTEGER PRIMARY KEY, seq INTEGER, pts INTEGER, date INTEGER, qts INTEGER, lsv INTEGER, sg INTEGER, pbytes BLOB)").stepThis().dispose();
                        this.database.executeFast("INSERT INTO params VALUES(1, 0, 0, 0, 0, 0, 0, NULL)").stepThis().dispose();
                    } catch (Exception e2) {
                        FileLog.e(e2);
                    }
                }
                if (intValue < 112) {
                    try {
                        updateDbToLastVersion(intValue);
                    } catch (Exception e3) {
                        if (BuildVars.DEBUG_PRIVATE_VERSION) {
                            throw e3;
                        }
                        FileLog.e(e3);
                        throw new RuntimeException("malformed");
                    }
                }
            }
        } catch (Exception e4) {
            FileLog.e(e4);
            if (i < 3 && e4.getMessage() != null && e4.getMessage().contains("malformed")) {
                if (i == 2) {
                    cleanupInternal(true);
                    clearLoadingDialogsOffsets();
                } else {
                    cleanupInternal(false);
                }
                openDatabase(i != 1 ? 3 : 2);
            }
        }
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda17
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$openDatabase$1();
            }
        });
        loadDialogFilters();
        loadUnreadMessages();
        loadPendingTasks();
        try {
            this.openSync.countDown();
        } catch (Throwable unused) {
        }
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda22
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$openDatabase$2();
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$openDatabase$1() {
        if (this.databaseMigrationInProgress) {
            this.databaseMigrationInProgress = false;
            NotificationCenter.getInstance(this.currentAccount).postNotificationName(NotificationCenter.onDatabaseMigration, Boolean.FALSE);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$openDatabase$2() {
        this.showClearDatabaseAlert = false;
        NotificationCenter.getInstance(this.currentAccount).postNotificationName(NotificationCenter.onDatabaseOpened, new Object[0]);
    }

    private void clearLoadingDialogsOffsets() {
        for (int i = 0; i < 2; i++) {
            getUserConfig().setDialogsLoadOffset(i, 0, 0, 0L, 0L, 0L, 0L);
            getUserConfig().setTotalDialogsCount(i, 0);
        }
        getUserConfig().saveConfig(false);
    }

    private boolean recoverDatabase() {
        this.database.close();
        boolean recoverDatabase = DatabaseMigrationHelper.recoverDatabase(this.cacheFile, this.walCacheFile, this.shmCacheFile, this.currentAccount);
        if (recoverDatabase) {
            try {
                SQLiteDatabase sQLiteDatabase = new SQLiteDatabase(this.cacheFile.getPath());
                this.database = sQLiteDatabase;
                sQLiteDatabase.executeFast("PRAGMA secure_delete = ON").stepThis().dispose();
                this.database.executeFast("PRAGMA temp_store = MEMORY").stepThis().dispose();
                this.database.executeFast("PRAGMA journal_mode = WAL").stepThis().dispose();
                this.database.executeFast("PRAGMA journal_size_limit = 10485760").stepThis().dispose();
            } catch (SQLiteException e) {
                FileLog.e(new Exception(e));
                recoverDatabase = false;
            }
        }
        if (!recoverDatabase) {
            cleanupInternal(true);
            int i = 0;
            while (i < 2) {
                int i2 = i;
                getUserConfig().setDialogsLoadOffset(i, 0, 0, 0L, 0L, 0L, 0L);
                getUserConfig().setTotalDialogsCount(i2, 0);
                i = i2 + 1;
            }
            getUserConfig().saveConfig(false);
            openDatabase(1);
        }
        return recoverDatabase;
    }

    public static void createTables(SQLiteDatabase sQLiteDatabase) throws SQLiteException {
        sQLiteDatabase.executeFast("CREATE TABLE messages_holes(uid INTEGER, start INTEGER, end INTEGER, PRIMARY KEY(uid, start));").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS uid_end_messages_holes ON messages_holes(uid, end);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE media_holes_v2(uid INTEGER, type INTEGER, start INTEGER, end INTEGER, PRIMARY KEY(uid, type, start));").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS uid_end_media_holes_v2 ON media_holes_v2(uid, type, end);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE scheduled_messages_v2(mid INTEGER, uid INTEGER, send_state INTEGER, date INTEGER, data BLOB, ttl INTEGER, replydata BLOB, reply_to_message_id INTEGER, PRIMARY KEY(mid, uid))").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS send_state_idx_scheduled_messages_v2 ON scheduled_messages_v2(mid, send_state, date);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS uid_date_idx_scheduled_messages_v2 ON scheduled_messages_v2(uid, date);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS reply_to_idx_scheduled_messages_v2 ON scheduled_messages_v2(mid, reply_to_message_id);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE messages_v2(mid INTEGER, uid INTEGER, read_state INTEGER, send_state INTEGER, date INTEGER, data BLOB, out INTEGER, ttl INTEGER, media INTEGER, replydata BLOB, imp INTEGER, mention INTEGER, forwards INTEGER, replies_data BLOB, thread_reply_id INTEGER, is_channel INTEGER, reply_to_message_id INTEGER, custom_params BLOB, group_id INTEGER, PRIMARY KEY(mid, uid))").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS uid_mid_read_out_idx_messages_v2 ON messages_v2(uid, mid, read_state, out);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS uid_date_mid_idx_messages_v2 ON messages_v2(uid, date, mid);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS mid_out_idx_messages_v2 ON messages_v2(mid, out);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS task_idx_messages_v2 ON messages_v2(uid, out, read_state, ttl, date, send_state);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS send_state_idx_messages_v2 ON messages_v2(mid, send_state, date);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS uid_mention_idx_messages_v2 ON messages_v2(uid, mention, read_state);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS is_channel_idx_messages_v2 ON messages_v2(mid, is_channel);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS reply_to_idx_messages_v2 ON messages_v2(mid, reply_to_message_id);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS uid_mid_groupid_messages_v2 ON messages_v2(uid, mid, group_id);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE download_queue(uid INTEGER, type INTEGER, date INTEGER, data BLOB, parent TEXT, PRIMARY KEY (uid, type));").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS type_date_idx_download_queue ON download_queue(type, date);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE user_contacts_v7(key TEXT PRIMARY KEY, uid INTEGER, fname TEXT, sname TEXT, imported INTEGER)").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE user_phones_v7(key TEXT, phone TEXT, sphone TEXT, deleted INTEGER, PRIMARY KEY (key, phone))").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS sphone_deleted_idx_user_phones ON user_phones_v7(sphone, deleted);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE dialogs(did INTEGER PRIMARY KEY, date INTEGER, unread_count INTEGER, last_mid INTEGER, inbox_max INTEGER, outbox_max INTEGER, last_mid_i INTEGER, unread_count_i INTEGER, pts INTEGER, date_i INTEGER, pinned INTEGER, flags INTEGER, folder_id INTEGER, data BLOB, unread_reactions INTEGER, last_mid_group INTEGER, ttl_period INTEGER)").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS date_idx_dialogs ON dialogs(date);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS last_mid_idx_dialogs ON dialogs(last_mid);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS unread_count_idx_dialogs ON dialogs(unread_count);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS last_mid_i_idx_dialogs ON dialogs(last_mid_i);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS unread_count_i_idx_dialogs ON dialogs(unread_count_i);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS folder_id_idx_dialogs ON dialogs(folder_id);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS flags_idx_dialogs ON dialogs(flags);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE dialog_filter(id INTEGER PRIMARY KEY, ord INTEGER, unread_count INTEGER, flags INTEGER, title TEXT)").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE dialog_filter_ep(id INTEGER, peer INTEGER, PRIMARY KEY (id, peer))").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE dialog_filter_pin_v2(id INTEGER, peer INTEGER, pin INTEGER, PRIMARY KEY (id, peer))").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE randoms_v2(random_id INTEGER, mid INTEGER, uid INTEGER, PRIMARY KEY (random_id, mid, uid))").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS mid_idx_randoms_v2 ON randoms_v2(mid, uid);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE enc_tasks_v4(mid INTEGER, uid INTEGER, date INTEGER, media INTEGER, PRIMARY KEY(mid, uid, media))").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS date_idx_enc_tasks_v4 ON enc_tasks_v4(date);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE messages_seq(mid INTEGER PRIMARY KEY, seq_in INTEGER, seq_out INTEGER);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS seq_idx_messages_seq ON messages_seq(seq_in, seq_out);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE params(id INTEGER PRIMARY KEY, seq INTEGER, pts INTEGER, date INTEGER, qts INTEGER, lsv INTEGER, sg INTEGER, pbytes BLOB)").stepThis().dispose();
        sQLiteDatabase.executeFast("INSERT INTO params VALUES(1, 0, 0, 0, 0, 0, 0, NULL)").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE media_v4(mid INTEGER, uid INTEGER, date INTEGER, type INTEGER, data BLOB, PRIMARY KEY(mid, uid, type))").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS uid_mid_type_date_idx_media_v4 ON media_v4(uid, mid, type, date);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE bot_keyboard(uid INTEGER PRIMARY KEY, mid INTEGER, info BLOB)").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS bot_keyboard_idx_mid_v2 ON bot_keyboard(mid, uid);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE chat_settings_v2(uid INTEGER PRIMARY KEY, info BLOB, pinned INTEGER, online INTEGER, inviter INTEGER, links INTEGER)").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS chat_settings_pinned_idx ON chat_settings_v2(uid, pinned) WHERE pinned != 0;").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE user_settings(uid INTEGER PRIMARY KEY, info BLOB, pinned INTEGER)").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS user_settings_pinned_idx ON user_settings(uid, pinned) WHERE pinned != 0;").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE chat_pinned_v2(uid INTEGER, mid INTEGER, data BLOB, PRIMARY KEY (uid, mid));").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE chat_pinned_count(uid INTEGER PRIMARY KEY, count INTEGER, end INTEGER);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE chat_hints(did INTEGER, type INTEGER, rating REAL, date INTEGER, PRIMARY KEY(did, type))").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS chat_hints_rating_idx ON chat_hints(rating);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE botcache(id TEXT PRIMARY KEY, date INTEGER, data BLOB)").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS botcache_date_idx ON botcache(date);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE users_data(uid INTEGER PRIMARY KEY, about TEXT)").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE users(uid INTEGER PRIMARY KEY, name TEXT, status INTEGER, data BLOB)").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE chats(uid INTEGER PRIMARY KEY, name TEXT, data BLOB)").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE enc_chats(uid INTEGER PRIMARY KEY, user INTEGER, name TEXT, data BLOB, g BLOB, authkey BLOB, ttl INTEGER, layer INTEGER, seq_in INTEGER, seq_out INTEGER, use_count INTEGER, exchange_id INTEGER, key_date INTEGER, fprint INTEGER, fauthkey BLOB, khash BLOB, in_seq_no INTEGER, admin_id INTEGER, mtproto_seq INTEGER)").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE channel_users_v2(did INTEGER, uid INTEGER, date INTEGER, data BLOB, PRIMARY KEY(did, uid))").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE channel_admins_v3(did INTEGER, uid INTEGER, data BLOB, PRIMARY KEY(did, uid))").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE contacts(uid INTEGER PRIMARY KEY, mutual INTEGER)").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE user_photos(uid INTEGER, id INTEGER, data BLOB, PRIMARY KEY (uid, id))").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE dialog_settings(did INTEGER PRIMARY KEY, flags INTEGER);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE web_recent_v3(id TEXT, type INTEGER, image_url TEXT, thumb_url TEXT, local_url TEXT, width INTEGER, height INTEGER, size INTEGER, date INTEGER, document BLOB, PRIMARY KEY (id, type));").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE stickers_v2(id INTEGER PRIMARY KEY, data BLOB, date INTEGER, hash INTEGER);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE stickers_featured(id INTEGER PRIMARY KEY, data BLOB, unread BLOB, date INTEGER, hash INTEGER, premium INTEGER, emoji INTEGER);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE stickers_dice(emoji TEXT PRIMARY KEY, data BLOB, date INTEGER);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE stickersets(id INTEGER PRIMATE KEY, data BLOB, hash INTEGER);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE hashtag_recent_v2(id TEXT PRIMARY KEY, date INTEGER);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE webpage_pending_v2(id INTEGER, mid INTEGER, uid INTEGER, PRIMARY KEY (id, mid, uid));").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE sent_files_v2(uid TEXT, type INTEGER, data BLOB, parent TEXT, PRIMARY KEY (uid, type))").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE search_recent(did INTEGER PRIMARY KEY, date INTEGER);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE media_counts_v2(uid INTEGER, type INTEGER, count INTEGER, old INTEGER, PRIMARY KEY(uid, type))").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE keyvalue(id TEXT PRIMARY KEY, value TEXT)").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE bot_info_v2(uid INTEGER, dialogId INTEGER, info BLOB, PRIMARY KEY(uid, dialogId))").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE pending_tasks(id INTEGER PRIMARY KEY, data BLOB);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE requested_holes(uid INTEGER, seq_out_start INTEGER, seq_out_end INTEGER, PRIMARY KEY (uid, seq_out_start, seq_out_end));").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE sharing_locations(uid INTEGER PRIMARY KEY, mid INTEGER, date INTEGER, period INTEGER, message BLOB, proximity INTEGER);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE shortcut_widget(id INTEGER, did INTEGER, ord INTEGER, PRIMARY KEY (id, did));").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS shortcut_widget_did ON shortcut_widget(did);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE emoji_keywords_v2(lang TEXT, keyword TEXT, emoji TEXT, PRIMARY KEY(lang, keyword, emoji));").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS emoji_keywords_v2_keyword ON emoji_keywords_v2(keyword);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE emoji_keywords_info_v2(lang TEXT PRIMARY KEY, alias TEXT, version INTEGER, date INTEGER);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE wallpapers2(uid INTEGER PRIMARY KEY, data BLOB, num INTEGER)").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS wallpapers_num ON wallpapers2(num);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE unread_push_messages(uid INTEGER, mid INTEGER, random INTEGER, date INTEGER, data BLOB, fm TEXT, name TEXT, uname TEXT, flags INTEGER, PRIMARY KEY(uid, mid))").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS unread_push_messages_idx_date ON unread_push_messages(date);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS unread_push_messages_idx_random ON unread_push_messages(random);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE polls_v2(mid INTEGER, uid INTEGER, id INTEGER, PRIMARY KEY (mid, uid));").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS polls_id_v2 ON polls_v2(id);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE reactions(data BLOB, hash INTEGER, date INTEGER);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE reaction_mentions(message_id INTEGER, state INTEGER, dialog_id INTEGER, PRIMARY KEY(message_id, dialog_id))").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS reaction_mentions_did ON reaction_mentions(dialog_id);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE downloading_documents(data BLOB, hash INTEGER, id INTEGER, state INTEGER, date INTEGER, PRIMARY KEY(hash, id));").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE animated_emoji(document_id INTEGER PRIMARY KEY, data BLOB);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE attach_menu_bots(data BLOB, hash INTEGER, date INTEGER);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE premium_promo(data BLOB, date INTEGER);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE emoji_statuses(data BLOB, type INTEGER);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE messages_holes_topics(uid INTEGER, topic_id INTEGER, start INTEGER, end INTEGER, PRIMARY KEY(uid, topic_id, start));").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS uid_end_messages_holes ON messages_holes_topics(uid, topic_id, end);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE messages_topics(mid INTEGER, uid INTEGER, topic_id INTEGER, read_state INTEGER, send_state INTEGER, date INTEGER, data BLOB, out INTEGER, ttl INTEGER, media INTEGER, replydata BLOB, imp INTEGER, mention INTEGER, forwards INTEGER, replies_data BLOB, thread_reply_id INTEGER, is_channel INTEGER, reply_to_message_id INTEGER, custom_params BLOB, PRIMARY KEY(mid, topic_id, uid))").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS uid_date_mid_idx_messages_topics ON messages_topics(uid, date, mid);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS mid_out_idx_messages_topics ON messages_topics(mid, out);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS task_idx_messages_topics ON messages_topics(uid, out, read_state, ttl, date, send_state);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS send_state_idx_messages_topics ON messages_topics(mid, send_state, date);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS is_channel_idx_messages_topics ON messages_topics(mid, is_channel);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS reply_to_idx_messages_topics ON messages_topics(mid, reply_to_message_id);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS mid_uid_messages_topics ON messages_topics(mid, uid);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS uid_mid_read_out_idx_messages_topics ON messages_topics(uid, topic_id, mid, read_state, out);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS uid_mention_idx_messages_topics ON messages_topics(uid, topic_id, mention, read_state);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS uid_topic_id_messages_topics ON messages_topics(uid, topic_id);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS uid_topic_id_date_mid_messages_topics ON messages_topics(uid, topic_id, date, mid);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS uid_topic_id_mid_messages_topics ON messages_topics(uid, topic_id, mid);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE media_topics(mid INTEGER, uid INTEGER, topic_id INTEGER, date INTEGER, type INTEGER, data BLOB, PRIMARY KEY(mid, uid, topic_id, type))").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS uid_mid_type_date_idx_media_topics ON media_topics(uid, topic_id, mid, type, date);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE media_holes_topics(uid INTEGER, topic_id INTEGER, type INTEGER, start INTEGER, end INTEGER, PRIMARY KEY(uid, topic_id, type, start));").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS uid_end_media_holes_topics ON media_holes_topics(uid, topic_id, type, end);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE topics(did INTEGER, topic_id INTEGER, data BLOB, top_message INTEGER, topic_message BLOB, unread_count INTEGER, max_read_id INTEGER, unread_mentions INTEGER, unread_reactions INTEGER, read_outbox INTEGER, pinned INTEGER, total_messages_count INTEGER, hidden INTEGER, PRIMARY KEY(did, topic_id));").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS did_top_message_topics ON topics(did, top_message);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS did_topics ON topics(did);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE media_counts_topics(uid INTEGER, topic_id INTEGER, type INTEGER, count INTEGER, old INTEGER, PRIMARY KEY(uid, topic_id, type))").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE reaction_mentions_topics(message_id INTEGER, state INTEGER, dialog_id INTEGER, topic_id INTEGER, PRIMARY KEY(message_id, dialog_id, topic_id))").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS reaction_mentions_topics_did ON reaction_mentions_topics(dialog_id, topic_id);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE emoji_groups(type INTEGER PRIMARY KEY, data BLOB)").stepThis().dispose();
        sQLiteDatabase.executeFast("PRAGMA user_version = 112").stepThis().dispose();
    }

    public boolean isDatabaseMigrationInProgress() {
        return this.databaseMigrationInProgress;
    }

    private void updateDbToLastVersion(int i) throws Exception {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda20
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$updateDbToLastVersion$3();
            }
        });
        FileLog.d("MessagesStorage start db migration from " + i + " to " + LAST_DB_VERSION);
        int migrate = DatabaseMigrationHelper.migrate(this, i);
        StringBuilder sb = new StringBuilder();
        sb.append("MessagesStorage db migration finished to varsion ");
        sb.append(migrate);
        FileLog.d(sb.toString());
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda7
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$updateDbToLastVersion$4();
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateDbToLastVersion$3() {
        this.databaseMigrationInProgress = true;
        NotificationCenter.getInstance(this.currentAccount).postNotificationName(NotificationCenter.onDatabaseMigration, Boolean.TRUE);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateDbToLastVersion$4() {
        this.databaseMigrationInProgress = false;
        NotificationCenter.getInstance(this.currentAccount).postNotificationName(NotificationCenter.onDatabaseMigration, Boolean.FALSE);
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public void executeNoException(String str) {
        try {
            this.database.executeFast(str).stepThis().dispose();
        } catch (Exception e) {
            FileLog.e(e);
        }
    }

    private void cleanupInternal(boolean z) {
        clearDatabaseValues();
        SQLiteDatabase sQLiteDatabase = this.database;
        if (sQLiteDatabase != null) {
            sQLiteDatabase.close();
            this.database = null;
        }
        if (z) {
            File file = this.cacheFile;
            if (file != null) {
                file.delete();
                this.cacheFile = null;
            }
            File file2 = this.walCacheFile;
            if (file2 != null) {
                file2.delete();
                this.walCacheFile = null;
            }
            File file3 = this.shmCacheFile;
            if (file3 != null) {
                file3.delete();
                this.shmCacheFile = null;
            }
        }
    }

    private void clearDatabaseValues() {
        this.lastDateValue = 0;
        this.lastSeqValue = 0;
        this.lastPtsValue = 0;
        this.lastQtsValue = 0;
        this.lastSecretVersion = 0;
        this.mainUnreadCount = 0;
        this.archiveUnreadCount = 0;
        this.pendingMainUnreadCount = 0;
        this.pendingArchiveUnreadCount = 0;
        this.dialogFilters.clear();
        this.dialogFiltersMap.clear();
        this.unknownDialogsIds.clear();
        this.lastSavedSeq = 0;
        this.lastSavedPts = 0;
        this.lastSavedDate = 0;
        this.lastSavedQts = 0;
        this.secretPBytes = null;
        this.secretG = 0;
    }

    public void cleanup(final boolean z) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda199
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$cleanup$6(z);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$cleanup$6(boolean z) {
        cleanupInternal(true);
        openDatabase(1);
        if (z) {
            Utilities.stageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda19
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesStorage.this.lambda$cleanup$5();
                }
            });
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$cleanup$5() {
        getMessagesController().getDifference();
    }

    public void saveSecretParams(final int i, final int i2, final byte[] bArr) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda39
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$saveSecretParams$7(i, i2, bArr);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$saveSecretParams$7(int i, int i2, byte[] bArr) {
        try {
            SQLitePreparedStatement executeFast = this.database.executeFast("UPDATE params SET lsv = ?, sg = ?, pbytes = ? WHERE id = 1");
            executeFast.bindInteger(1, i);
            executeFast.bindInteger(2, i2);
            NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(bArr != null ? bArr.length : 1);
            if (bArr != null) {
                nativeByteBuffer.writeBytes(bArr);
            }
            executeFast.bindByteBuffer(3, nativeByteBuffer);
            executeFast.step();
            executeFast.dispose();
            nativeByteBuffer.reuse();
        } catch (Exception e) {
            checkSQLException(e);
        }
    }

    public void checkSQLException(Throwable th) {
        checkSQLException(th, true);
    }

    private void checkSQLException(Throwable th, boolean z) {
        if ((th instanceof SQLiteException) && th.getMessage() != null && th.getMessage().contains("is malformed") && !this.tryRecover) {
            this.tryRecover = true;
            if (recoverDatabase()) {
                this.tryRecover = false;
                clearLoadingDialogsOffsets();
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda12
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesStorage.this.lambda$checkSQLException$8();
                    }
                });
                FileLog.e(new Exception("database restored!!"));
                return;
            }
            FileLog.e(new Exception(th), z);
            return;
        }
        FileLog.e(th, z);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$checkSQLException$8() {
        getNotificationCenter().postNotificationName(NotificationCenter.onDatabaseReset, new Object[0]);
    }

    public void fixNotificationSettings() {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda25
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$fixNotificationSettings$9();
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$fixNotificationSettings$9() {
        try {
            LongSparseArray longSparseArray = new LongSparseArray();
            Map<String, ?> all = MessagesController.getNotificationsSettings(this.currentAccount).getAll();
            for (Map.Entry<String, ?> entry : all.entrySet()) {
                String key = entry.getKey();
                if (key.startsWith(NotificationsSettingsFacade.PROPERTY_NOTIFY)) {
                    Integer num = (Integer) entry.getValue();
                    if (num.intValue() == 2 || num.intValue() == 3) {
                        String replace = key.replace(NotificationsSettingsFacade.PROPERTY_NOTIFY, "");
                        long j = 1;
                        if (num.intValue() != 2) {
                            Integer num2 = (Integer) all.get(NotificationsSettingsFacade.PROPERTY_NOTIFY_UNTIL + replace);
                            if (num2 != null) {
                                j = 1 | (num2.intValue() << 32);
                            }
                        }
                        try {
                            longSparseArray.put(Long.parseLong(replace), Long.valueOf(j));
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    }
                }
            }
            try {
                this.database.beginTransaction();
                SQLitePreparedStatement executeFast = this.database.executeFast("REPLACE INTO dialog_settings VALUES(?, ?)");
                for (int i = 0; i < longSparseArray.size(); i++) {
                    executeFast.requery();
                    executeFast.bindLong(1, longSparseArray.keyAt(i));
                    executeFast.bindLong(2, ((Long) longSparseArray.valueAt(i)).longValue());
                    executeFast.step();
                }
                executeFast.dispose();
                this.database.commitTransaction();
            } catch (Exception e2) {
                checkSQLException(e2);
            }
        } catch (Throwable th) {
            checkSQLException(th);
        }
    }

    public long createPendingTask(final NativeByteBuffer nativeByteBuffer) {
        if (nativeByteBuffer == null) {
            return 0L;
        }
        final long andAdd = this.lastTaskId.getAndAdd(1L);
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda114
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$createPendingTask$10(andAdd, nativeByteBuffer);
            }
        });
        return andAdd;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createPendingTask$10(long j, NativeByteBuffer nativeByteBuffer) {
        try {
            try {
                SQLitePreparedStatement executeFast = this.database.executeFast("REPLACE INTO pending_tasks VALUES(?, ?)");
                executeFast.bindLong(1, j);
                executeFast.bindByteBuffer(2, nativeByteBuffer);
                executeFast.step();
                executeFast.dispose();
            } catch (Exception e) {
                checkSQLException(e);
            }
        } finally {
            nativeByteBuffer.reuse();
        }
    }

    public void removePendingTask(final long j) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda73
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$removePendingTask$11(j);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$removePendingTask$11(long j) {
        try {
            SQLiteDatabase sQLiteDatabase = this.database;
            sQLiteDatabase.executeFast("DELETE FROM pending_tasks WHERE id = " + j).stepThis().dispose();
        } catch (Exception e) {
            checkSQLException(e);
        }
    }

    private void loadPendingTasks() {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda18
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$loadPendingTasks$31();
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadPendingTasks$31() {
        try {
            SQLiteCursor queryFinalized = this.database.queryFinalized("SELECT id, data FROM pending_tasks WHERE 1", new Object[0]);
            while (queryFinalized.next()) {
                final long longValue = queryFinalized.longValue(0);
                NativeByteBuffer byteBufferValue = queryFinalized.byteBufferValue(1);
                if (byteBufferValue != null) {
                    int readInt32 = byteBufferValue.readInt32(false);
                    if (readInt32 != 100) {
                        switch (readInt32) {
                            case 0:
                                final TLRPC$Chat TLdeserialize = TLRPC$Chat.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                                if (TLdeserialize != null) {
                                    Utilities.stageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda171
                                        @Override // java.lang.Runnable
                                        public final void run() {
                                            MessagesStorage.this.lambda$loadPendingTasks$12(TLdeserialize, longValue);
                                        }
                                    });
                                    break;
                                }
                                break;
                            case 1:
                                final long readInt322 = byteBufferValue.readInt32(false);
                                final int readInt323 = byteBufferValue.readInt32(false);
                                Utilities.stageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda79
                                    @Override // java.lang.Runnable
                                    public final void run() {
                                        MessagesStorage.this.lambda$loadPendingTasks$13(readInt322, readInt323, longValue);
                                    }
                                });
                                break;
                            case 2:
                            case 5:
                            case 8:
                            case 10:
                            case 14:
                                final TLRPC$TL_dialog tLRPC$TL_dialog = new TLRPC$TL_dialog();
                                tLRPC$TL_dialog.id = byteBufferValue.readInt64(false);
                                tLRPC$TL_dialog.top_message = byteBufferValue.readInt32(false);
                                tLRPC$TL_dialog.read_inbox_max_id = byteBufferValue.readInt32(false);
                                tLRPC$TL_dialog.read_outbox_max_id = byteBufferValue.readInt32(false);
                                tLRPC$TL_dialog.unread_count = byteBufferValue.readInt32(false);
                                tLRPC$TL_dialog.last_message_date = byteBufferValue.readInt32(false);
                                tLRPC$TL_dialog.pts = byteBufferValue.readInt32(false);
                                tLRPC$TL_dialog.flags = byteBufferValue.readInt32(false);
                                if (readInt32 >= 5) {
                                    tLRPC$TL_dialog.pinned = byteBufferValue.readBool(false);
                                    tLRPC$TL_dialog.pinnedNum = byteBufferValue.readInt32(false);
                                }
                                if (readInt32 >= 8) {
                                    tLRPC$TL_dialog.unread_mentions_count = byteBufferValue.readInt32(false);
                                }
                                if (readInt32 >= 10) {
                                    tLRPC$TL_dialog.unread_mark = byteBufferValue.readBool(false);
                                }
                                if (readInt32 >= 14) {
                                    tLRPC$TL_dialog.folder_id = byteBufferValue.readInt32(false);
                                }
                                final TLRPC$InputPeer TLdeserialize2 = TLRPC$InputPeer.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda177
                                    @Override // java.lang.Runnable
                                    public final void run() {
                                        MessagesStorage.this.lambda$loadPendingTasks$14(tLRPC$TL_dialog, TLdeserialize2, longValue);
                                    }
                                });
                                break;
                            case 3:
                                getSendMessagesHelper().sendGame(TLRPC$InputPeer.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false), (TLRPC$TL_inputMediaGame) TLRPC$InputMedia.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false), byteBufferValue.readInt64(false), longValue);
                                break;
                            case 4:
                                final long readInt64 = byteBufferValue.readInt64(false);
                                final boolean readBool = byteBufferValue.readBool(false);
                                final TLRPC$InputPeer TLdeserialize3 = TLRPC$InputPeer.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda124
                                    @Override // java.lang.Runnable
                                    public final void run() {
                                        MessagesStorage.this.lambda$loadPendingTasks$15(readInt64, readBool, TLdeserialize3, longValue);
                                    }
                                });
                                break;
                            case 6:
                                final long readInt324 = byteBufferValue.readInt32(false);
                                final int readInt325 = byteBufferValue.readInt32(false);
                                final TLRPC$InputChannel TLdeserialize4 = TLRPC$InputChannel.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                                Utilities.stageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda81
                                    @Override // java.lang.Runnable
                                    public final void run() {
                                        MessagesStorage.this.lambda$loadPendingTasks$16(readInt324, readInt325, longValue, TLdeserialize4);
                                    }
                                });
                                break;
                            case 7:
                                final long readInt326 = byteBufferValue.readInt32(false);
                                int readInt327 = byteBufferValue.readInt32(false);
                                TLObject TLdeserialize5 = TLRPC$TL_messages_deleteMessages.TLdeserialize(byteBufferValue, readInt327, false);
                                final TLObject TLdeserialize6 = TLdeserialize5 == null ? TLRPC$TL_channels_deleteMessages.TLdeserialize(byteBufferValue, readInt327, false) : TLdeserialize5;
                                if (TLdeserialize6 == null) {
                                    removePendingTask(longValue);
                                    break;
                                } else {
                                    AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda98
                                        @Override // java.lang.Runnable
                                        public final void run() {
                                            MessagesStorage.this.lambda$loadPendingTasks$18(readInt326, longValue, TLdeserialize6);
                                        }
                                    });
                                    break;
                                }
                            case 9:
                                final long readInt642 = byteBufferValue.readInt64(false);
                                final TLRPC$InputPeer TLdeserialize7 = TLRPC$InputPeer.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda115
                                    @Override // java.lang.Runnable
                                    public final void run() {
                                        MessagesStorage.this.lambda$loadPendingTasks$20(readInt642, TLdeserialize7, longValue);
                                    }
                                });
                                break;
                            case 11:
                                final int readInt328 = byteBufferValue.readInt32(false);
                                final long readInt329 = byteBufferValue.readInt32(false);
                                final int readInt3210 = byteBufferValue.readInt32(false);
                                final TLRPC$InputChannel TLdeserialize8 = readInt329 != 0 ? TLRPC$InputChannel.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false) : null;
                                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda83
                                    @Override // java.lang.Runnable
                                    public final void run() {
                                        MessagesStorage.this.lambda$loadPendingTasks$21(readInt329, readInt328, TLdeserialize8, readInt3210, longValue);
                                    }
                                });
                                break;
                            case 12:
                            case 19:
                            case 20:
                                removePendingTask(longValue);
                                break;
                            case 13:
                                final long readInt643 = byteBufferValue.readInt64(false);
                                final boolean readBool2 = byteBufferValue.readBool(false);
                                final int readInt3211 = byteBufferValue.readInt32(false);
                                final int readInt3212 = byteBufferValue.readInt32(false);
                                final boolean readBool3 = byteBufferValue.readBool(false);
                                final TLRPC$InputPeer TLdeserialize9 = TLRPC$InputPeer.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda123
                                    @Override // java.lang.Runnable
                                    public final void run() {
                                        MessagesStorage.this.lambda$loadPendingTasks$24(readInt643, readBool2, readInt3211, readInt3212, readBool3, TLdeserialize9, longValue);
                                    }
                                });
                                break;
                            case 15:
                                final TLRPC$InputPeer TLdeserialize10 = TLRPC$InputPeer.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                                Utilities.stageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda184
                                    @Override // java.lang.Runnable
                                    public final void run() {
                                        MessagesStorage.this.lambda$loadPendingTasks$25(TLdeserialize10, longValue);
                                    }
                                });
                                break;
                            case 16:
                                final int readInt3213 = byteBufferValue.readInt32(false);
                                int readInt3214 = byteBufferValue.readInt32(false);
                                final ArrayList arrayList = new ArrayList();
                                for (int i = 0; i < readInt3214; i++) {
                                    arrayList.add(TLRPC$InputDialogPeer.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false));
                                }
                                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda62
                                    @Override // java.lang.Runnable
                                    public final void run() {
                                        MessagesStorage.this.lambda$loadPendingTasks$26(readInt3213, arrayList, longValue);
                                    }
                                });
                                break;
                            case 17:
                                final int readInt3215 = byteBufferValue.readInt32(false);
                                int readInt3216 = byteBufferValue.readInt32(false);
                                final ArrayList arrayList2 = new ArrayList();
                                for (int i2 = 0; i2 < readInt3216; i2++) {
                                    arrayList2.add(TLRPC$TL_inputFolderPeer.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false));
                                }
                                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda63
                                    @Override // java.lang.Runnable
                                    public final void run() {
                                        MessagesStorage.this.lambda$loadPendingTasks$27(readInt3215, arrayList2, longValue);
                                    }
                                });
                                break;
                            case 18:
                                final long readInt644 = byteBufferValue.readInt64(false);
                                byteBufferValue.readInt32(false);
                                final TLRPC$TL_messages_deleteScheduledMessages TLdeserialize11 = TLRPC$TL_messages_deleteScheduledMessages.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                                if (TLdeserialize11 == null) {
                                    removePendingTask(longValue);
                                    break;
                                } else {
                                    AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda99
                                        @Override // java.lang.Runnable
                                        public final void run() {
                                            MessagesStorage.this.lambda$loadPendingTasks$28(readInt644, longValue, TLdeserialize11);
                                        }
                                    });
                                    break;
                                }
                            case 21:
                                final Theme.OverrideWallpaperInfo overrideWallpaperInfo = new Theme.OverrideWallpaperInfo();
                                byteBufferValue.readInt64(false);
                                overrideWallpaperInfo.isBlurred = byteBufferValue.readBool(false);
                                overrideWallpaperInfo.isMotion = byteBufferValue.readBool(false);
                                overrideWallpaperInfo.color = byteBufferValue.readInt32(false);
                                overrideWallpaperInfo.gradientColor1 = byteBufferValue.readInt32(false);
                                overrideWallpaperInfo.rotation = byteBufferValue.readInt32(false);
                                overrideWallpaperInfo.intensity = (float) byteBufferValue.readDouble(false);
                                final boolean readBool4 = byteBufferValue.readBool(false);
                                overrideWallpaperInfo.slug = byteBufferValue.readString(false);
                                overrideWallpaperInfo.originalFileName = byteBufferValue.readString(false);
                                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda197
                                    @Override // java.lang.Runnable
                                    public final void run() {
                                        MessagesStorage.this.lambda$loadPendingTasks$23(overrideWallpaperInfo, readBool4, longValue);
                                    }
                                });
                                break;
                            case 22:
                                final TLRPC$InputPeer TLdeserialize12 = TLRPC$InputPeer.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda185
                                    @Override // java.lang.Runnable
                                    public final void run() {
                                        MessagesStorage.this.lambda$loadPendingTasks$29(TLdeserialize12, longValue);
                                    }
                                });
                                break;
                            case 23:
                                final long readInt645 = byteBufferValue.readInt64(false);
                                final int readInt3217 = byteBufferValue.readInt32(false);
                                final int readInt3218 = byteBufferValue.readInt32(false);
                                final TLRPC$InputChannel TLdeserialize13 = (!DialogObject.isEncryptedDialog(readInt645) && DialogObject.isChatDialog(readInt645) && byteBufferValue.hasRemaining()) ? TLRPC$InputChannel.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false) : null;
                                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda84
                                    @Override // java.lang.Runnable
                                    public final void run() {
                                        MessagesStorage.this.lambda$loadPendingTasks$22(readInt645, readInt3217, TLdeserialize13, readInt3218, longValue);
                                    }
                                });
                                break;
                            case 24:
                                final long readInt646 = byteBufferValue.readInt64(false);
                                int readInt3219 = byteBufferValue.readInt32(false);
                                TLObject TLdeserialize14 = TLRPC$TL_messages_deleteMessages.TLdeserialize(byteBufferValue, readInt3219, false);
                                final TLObject TLdeserialize15 = TLdeserialize14 == null ? TLRPC$TL_channels_deleteMessages.TLdeserialize(byteBufferValue, readInt3219, false) : TLdeserialize14;
                                if (TLdeserialize15 == null) {
                                    removePendingTask(longValue);
                                    break;
                                } else {
                                    AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda97
                                        @Override // java.lang.Runnable
                                        public final void run() {
                                            MessagesStorage.this.lambda$loadPendingTasks$19(readInt646, longValue, TLdeserialize15);
                                        }
                                    });
                                    break;
                                }
                            case 25:
                                final long readInt647 = byteBufferValue.readInt64(false);
                                final int readInt3220 = byteBufferValue.readInt32(false);
                                final TLRPC$InputChannel TLdeserialize16 = TLRPC$InputChannel.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                                Utilities.stageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda82
                                    @Override // java.lang.Runnable
                                    public final void run() {
                                        MessagesStorage.this.lambda$loadPendingTasks$17(readInt647, readInt3220, longValue, TLdeserialize16);
                                    }
                                });
                                break;
                        }
                    } else {
                        final int readInt3221 = byteBufferValue.readInt32(false);
                        final boolean readBool5 = byteBufferValue.readBool(false);
                        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda66
                            @Override // java.lang.Runnable
                            public final void run() {
                                MessagesStorage.this.lambda$loadPendingTasks$30(readInt3221, readBool5, longValue);
                            }
                        });
                    }
                    byteBufferValue.reuse();
                }
            }
            queryFinalized.dispose();
        } catch (Exception e) {
            checkSQLException(e);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadPendingTasks$12(TLRPC$Chat tLRPC$Chat, long j) {
        getMessagesController().loadUnknownChannel(tLRPC$Chat, j);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadPendingTasks$13(long j, int i, long j2) {
        getMessagesController().getChannelDifference(j, i, j2, null);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadPendingTasks$14(TLRPC$Dialog tLRPC$Dialog, TLRPC$InputPeer tLRPC$InputPeer, long j) {
        getMessagesController().checkLastDialogMessage(tLRPC$Dialog, tLRPC$InputPeer, j);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadPendingTasks$15(long j, boolean z, TLRPC$InputPeer tLRPC$InputPeer, long j2) {
        getMessagesController().pinDialog(j, z, tLRPC$InputPeer, j2);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadPendingTasks$16(long j, int i, long j2, TLRPC$InputChannel tLRPC$InputChannel) {
        getMessagesController().getChannelDifference(j, i, j2, tLRPC$InputChannel);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadPendingTasks$17(long j, int i, long j2, TLRPC$InputChannel tLRPC$InputChannel) {
        getMessagesController().getChannelDifference(j, i, j2, tLRPC$InputChannel);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadPendingTasks$18(long j, long j2, TLObject tLObject) {
        getMessagesController().deleteMessages(null, null, null, -j, true, false, false, j2, tLObject);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadPendingTasks$19(long j, long j2, TLObject tLObject) {
        getMessagesController().deleteMessages(null, null, null, j, true, false, false, j2, tLObject);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadPendingTasks$20(long j, TLRPC$InputPeer tLRPC$InputPeer, long j2) {
        getMessagesController().markDialogAsUnread(j, tLRPC$InputPeer, j2);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadPendingTasks$21(long j, int i, TLRPC$InputChannel tLRPC$InputChannel, int i2, long j2) {
        getMessagesController().markMessageAsRead2(-j, i, tLRPC$InputChannel, i2, j2);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadPendingTasks$22(long j, int i, TLRPC$InputChannel tLRPC$InputChannel, int i2, long j2) {
        getMessagesController().markMessageAsRead2(j, i, tLRPC$InputChannel, i2, j2);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadPendingTasks$23(Theme.OverrideWallpaperInfo overrideWallpaperInfo, boolean z, long j) {
        getMessagesController().saveWallpaperToServer(null, overrideWallpaperInfo, z, j);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadPendingTasks$24(long j, boolean z, int i, int i2, boolean z2, TLRPC$InputPeer tLRPC$InputPeer, long j2) {
        getMessagesController().deleteDialog(j, z ? 1 : 0, i, i2, z2, tLRPC$InputPeer, j2);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadPendingTasks$25(TLRPC$InputPeer tLRPC$InputPeer, long j) {
        getMessagesController().loadUnknownDialog(tLRPC$InputPeer, j);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadPendingTasks$26(int i, ArrayList arrayList, long j) {
        getMessagesController().reorderPinnedDialogs(i, arrayList, j);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadPendingTasks$27(int i, ArrayList arrayList, long j) {
        getMessagesController().addDialogToFolder(null, i, -1, arrayList, j);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadPendingTasks$28(long j, long j2, TLObject tLObject) {
        getMessagesController().deleteMessages(null, null, null, j, true, true, false, j2, tLObject);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadPendingTasks$29(TLRPC$InputPeer tLRPC$InputPeer, long j) {
        getMessagesController().reloadMentionsCountForChannel(tLRPC$InputPeer, j);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadPendingTasks$30(int i, boolean z, long j) {
        getSecretChatHelper().declineSecretChat(i, z, j);
    }

    public void saveChannelPts(final long j, final int i) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda42
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$saveChannelPts$32(i, j);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$saveChannelPts$32(int i, long j) {
        try {
            SQLitePreparedStatement executeFast = this.database.executeFast("UPDATE dialogs SET pts = ? WHERE did = ?");
            executeFast.bindInteger(1, i);
            executeFast.bindLong(2, -j);
            executeFast.step();
            executeFast.dispose();
        } catch (Exception e) {
            checkSQLException(e);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* renamed from: saveDiffParamsInternal */
    public void lambda$saveDiffParams$33(int i, int i2, int i3, int i4) {
        try {
            if (this.lastSavedSeq == i && this.lastSavedPts == i2 && this.lastSavedDate == i3 && this.lastQtsValue == i4) {
                return;
            }
            SQLitePreparedStatement executeFast = this.database.executeFast("UPDATE params SET seq = ?, pts = ?, date = ?, qts = ? WHERE id = 1");
            executeFast.bindInteger(1, i);
            executeFast.bindInteger(2, i2);
            executeFast.bindInteger(3, i3);
            executeFast.bindInteger(4, i4);
            executeFast.step();
            executeFast.dispose();
            this.lastSavedSeq = i;
            this.lastSavedPts = i2;
            this.lastSavedDate = i3;
            this.lastSavedQts = i4;
        } catch (Exception e) {
            checkSQLException(e);
        }
    }

    public void saveDiffParams(final int i, final int i2, final int i3, final int i4) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda36
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$saveDiffParams$33(i, i2, i3, i4);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateMutedDialogsFiltersCounters$34() {
        resetAllUnreadCounters(true);
    }

    public void updateMutedDialogsFiltersCounters() {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda23
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$updateMutedDialogsFiltersCounters$34();
            }
        });
    }

    public void setDialogFlags(final long j, final long j2) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda92
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$setDialogFlags$35(j, j2);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$setDialogFlags$35(long j, long j2) {
        try {
            SQLiteDatabase sQLiteDatabase = this.database;
            SQLiteCursor queryFinalized = sQLiteDatabase.queryFinalized("SELECT flags FROM dialog_settings WHERE did = " + j, new Object[0]);
            int intValue = queryFinalized.next() ? queryFinalized.intValue(0) : 0;
            queryFinalized.dispose();
            if (j2 == intValue) {
                return;
            }
            this.database.executeFast(String.format(Locale.US, "REPLACE INTO dialog_settings VALUES(%d, %d)", Long.valueOf(j), Long.valueOf(j2))).stepThis().dispose();
            resetAllUnreadCounters(true);
        } catch (Exception e) {
            checkSQLException(e);
        }
    }

    public void putPushMessage(final MessageObject messageObject) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda164
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$putPushMessage$36(messageObject);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$putPushMessage$36(MessageObject messageObject) {
        try {
            NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(messageObject.messageOwner.getObjectSize());
            messageObject.messageOwner.serializeToStream(nativeByteBuffer);
            int i = messageObject.localType == 2 ? 1 : 0;
            if (messageObject.localChannel) {
                i |= 2;
            }
            SQLitePreparedStatement executeFast = this.database.executeFast("REPLACE INTO unread_push_messages VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?)");
            executeFast.requery();
            executeFast.bindLong(1, messageObject.getDialogId());
            executeFast.bindInteger(2, messageObject.getId());
            executeFast.bindLong(3, messageObject.messageOwner.random_id);
            executeFast.bindInteger(4, messageObject.messageOwner.date);
            executeFast.bindByteBuffer(5, nativeByteBuffer);
            CharSequence charSequence = messageObject.messageText;
            if (charSequence == null) {
                executeFast.bindNull(6);
            } else {
                executeFast.bindString(6, charSequence.toString());
            }
            String str = messageObject.localName;
            if (str == null) {
                executeFast.bindNull(7);
            } else {
                executeFast.bindString(7, str);
            }
            String str2 = messageObject.localUserName;
            if (str2 == null) {
                executeFast.bindNull(8);
            } else {
                executeFast.bindString(8, str2);
            }
            executeFast.bindInteger(9, i);
            executeFast.step();
            nativeByteBuffer.reuse();
            executeFast.dispose();
        } catch (Exception e) {
            checkSQLException(e);
        }
    }

    public void clearLocalDatabase() {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda24
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$clearLocalDatabase$38();
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:116:0x03d5  */
    /* JADX WARN: Removed duplicated region for block: B:118:0x03da  */
    /* JADX WARN: Removed duplicated region for block: B:120:0x03df  */
    /* JADX WARN: Removed duplicated region for block: B:122:0x03e4  */
    /* JADX WARN: Removed duplicated region for block: B:129:0x03f5  */
    /* JADX WARN: Removed duplicated region for block: B:131:0x03fa  */
    /* JADX WARN: Removed duplicated region for block: B:133:0x03ff  */
    /* JADX WARN: Removed duplicated region for block: B:135:0x0404  */
    /* JADX WARN: Removed duplicated region for block: B:63:0x0303 A[Catch: all -> 0x0321, Exception -> 0x0324, TryCatch #0 {all -> 0x0321, blocks: (B:43:0x01f0, B:51:0x0208, B:60:0x022a, B:61:0x022d, B:63:0x0303, B:65:0x0316), top: B:139:0x01f0 }] */
    /* JADX WARN: Type inference failed for: r6v10 */
    /* JADX WARN: Type inference failed for: r6v13 */
    /* JADX WARN: Type inference failed for: r6v2, types: [boolean, int] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$clearLocalDatabase$38() {
        SQLitePreparedStatement sQLitePreparedStatement;
        SQLitePreparedStatement sQLitePreparedStatement2;
        SQLiteCursor sQLiteCursor;
        SQLiteDatabase sQLiteDatabase;
        Runnable runnable;
        SQLiteDatabase sQLiteDatabase2;
        ArrayList arrayList;
        int i;
        SQLiteCursor sQLiteCursor2;
        int i2;
        try {
            ArrayList arrayList2 = new ArrayList();
            this.database.executeFast("DELETE FROM reaction_mentions").stepThis().dispose();
            this.database.executeFast("DELETE FROM reaction_mentions_topics").stepThis().dispose();
            this.database.executeFast("DELETE FROM downloading_documents").stepThis().dispose();
            this.database.executeFast("DELETE FROM attach_menu_bots").stepThis().dispose();
            this.database.executeFast("DELETE FROM animated_emoji").stepThis().dispose();
            this.database.executeFast("DELETE FROM stickers_v2").stepThis().dispose();
            this.database.executeFast("DELETE FROM stickersets").stepThis().dispose();
            this.database.executeFast("DELETE FROM messages_holes_topics").stepThis().dispose();
            this.database.executeFast("DELETE FROM messages_topics").stepThis().dispose();
            this.database.executeFast("DELETE FROM topics").stepThis().dispose();
            this.database.executeFast("DELETE FROM media_holes_topics").stepThis().dispose();
            this.database.executeFast("DELETE FROM media_topics").stepThis().dispose();
            this.database.executeFast("DELETE FROM media_counts_topics").stepThis().dispose();
            this.database.executeFast("DELETE FROM chat_pinned_v2").stepThis().dispose();
            this.database.executeFast("DELETE FROM chat_pinned_count").stepThis().dispose();
            int i3 = 0;
            SQLiteCursor queryFinalized = this.database.queryFinalized("SELECT did FROM dialogs WHERE 1", new Object[0]);
            while (queryFinalized.next()) {
                try {
                    try {
                        long longValue = queryFinalized.longValue(0);
                        if (!DialogObject.isEncryptedDialog(longValue)) {
                            arrayList2.add(Long.valueOf(longValue));
                        }
                    } catch (Exception e) {
                        e = e;
                        sQLiteCursor = queryFinalized;
                        sQLitePreparedStatement = null;
                        sQLitePreparedStatement2 = null;
                        try {
                            checkSQLException(e);
                            sQLiteDatabase2 = this.database;
                            if (sQLiteDatabase2 != null) {
                            }
                            if (sQLitePreparedStatement != null) {
                            }
                            if (sQLitePreparedStatement2 != null) {
                            }
                            if (sQLiteCursor != null) {
                            }
                            runnable = new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda6
                                @Override // java.lang.Runnable
                                public final void run() {
                                    MessagesStorage.this.lambda$clearLocalDatabase$37();
                                }
                            };
                            AndroidUtilities.runOnUIThread(runnable);
                        } catch (Throwable th) {
                            th = th;
                            sQLiteDatabase = this.database;
                            if (sQLiteDatabase != null) {
                            }
                            if (sQLitePreparedStatement != null) {
                            }
                            if (sQLitePreparedStatement2 != null) {
                            }
                            if (sQLiteCursor != null) {
                            }
                            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda6
                                @Override // java.lang.Runnable
                                public final void run() {
                                    MessagesStorage.this.lambda$clearLocalDatabase$37();
                                }
                            });
                            throw th;
                        }
                    } catch (Throwable th2) {
                        th = th2;
                        sQLiteCursor = queryFinalized;
                        sQLitePreparedStatement = null;
                        sQLitePreparedStatement2 = null;
                        sQLiteDatabase = this.database;
                        if (sQLiteDatabase != null) {
                        }
                        if (sQLitePreparedStatement != null) {
                        }
                        if (sQLitePreparedStatement2 != null) {
                        }
                        if (sQLiteCursor != null) {
                        }
                        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda6
                            @Override // java.lang.Runnable
                            public final void run() {
                                MessagesStorage.this.lambda$clearLocalDatabase$37();
                            }
                        });
                        throw th;
                    }
                } catch (Exception e2) {
                    e = e2;
                    sQLitePreparedStatement = null;
                    sQLitePreparedStatement2 = null;
                    sQLiteCursor = queryFinalized;
                } catch (Throwable th3) {
                    th = th3;
                    sQLitePreparedStatement = null;
                    sQLitePreparedStatement2 = null;
                    sQLiteCursor = queryFinalized;
                }
            }
            queryFinalized.dispose();
            SQLitePreparedStatement executeFast = this.database.executeFast("REPLACE INTO messages_holes VALUES(?, ?, ?)");
            try {
                sQLitePreparedStatement2 = this.database.executeFast("REPLACE INTO media_holes_v2 VALUES(?, ?, ?, ?)");
                try {
                    this.database.beginTransaction();
                    SQLiteCursor sQLiteCursor3 = null;
                    int i4 = 0;
                    while (i4 < arrayList2.size()) {
                        try {
                            Long l = (Long) arrayList2.get(i4);
                            sQLiteCursor3 = this.database.queryFinalized("SELECT COUNT(mid) FROM messages_v2 WHERE uid = " + l, new Object[i3]);
                            int intValue = sQLiteCursor3.next() ? sQLiteCursor3.intValue(i3) : 0;
                            sQLiteCursor3.dispose();
                            if (intValue <= 2) {
                                arrayList = arrayList2;
                                i = i4;
                            } else {
                                SQLiteCursor queryFinalized2 = this.database.queryFinalized("SELECT last_mid_i, last_mid FROM dialogs WHERE did = " + l, new Object[i3]);
                                try {
                                    try {
                                        if (queryFinalized2.next()) {
                                            long longValue2 = queryFinalized2.longValue(i3);
                                            long longValue3 = queryFinalized2.longValue(1);
                                            SQLiteCursor queryFinalized3 = this.database.queryFinalized("SELECT data FROM messages_v2 WHERE uid = " + l + " AND mid IN (" + longValue2 + "," + longValue3 + ")", new Object[i3]);
                                            int i5 = -1;
                                            ?? r6 = i3;
                                            while (queryFinalized3.next()) {
                                                try {
                                                    NativeByteBuffer byteBufferValue = queryFinalized3.byteBufferValue(r6);
                                                    if (byteBufferValue != null) {
                                                        TLRPC$Message TLdeserialize = TLRPC$Message.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(r6), r6);
                                                        if (TLdeserialize != null) {
                                                            int i6 = TLdeserialize.id;
                                                            arrayList = arrayList2;
                                                            try {
                                                                i = i4;
                                                                sQLiteCursor = queryFinalized2;
                                                                try {
                                                                    try {
                                                                        TLdeserialize.readAttachPath(byteBufferValue, UserConfig.getInstance(this.currentAccount).clientUserId);
                                                                        i5 = i6;
                                                                    } catch (Throwable th4) {
                                                                        th = th4;
                                                                        sQLitePreparedStatement = executeFast;
                                                                        sQLiteDatabase = this.database;
                                                                        if (sQLiteDatabase != null) {
                                                                            sQLiteDatabase.commitTransaction();
                                                                        }
                                                                        if (sQLitePreparedStatement != null) {
                                                                            sQLitePreparedStatement.dispose();
                                                                        }
                                                                        if (sQLitePreparedStatement2 != null) {
                                                                            sQLitePreparedStatement2.dispose();
                                                                        }
                                                                        if (sQLiteCursor != null) {
                                                                            sQLiteCursor.dispose();
                                                                        }
                                                                        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda6
                                                                            @Override // java.lang.Runnable
                                                                            public final void run() {
                                                                                MessagesStorage.this.lambda$clearLocalDatabase$37();
                                                                            }
                                                                        });
                                                                        throw th;
                                                                    }
                                                                } catch (Exception e3) {
                                                                    e = e3;
                                                                    i5 = i6;
                                                                    try {
                                                                        checkSQLException(e);
                                                                        i2 = i5;
                                                                        queryFinalized3.dispose();
                                                                        this.database.executeFast("DELETE FROM messages_v2 WHERE uid = " + l + " AND mid != " + longValue2 + " AND mid != " + longValue3).stepThis().dispose();
                                                                        SQLiteDatabase sQLiteDatabase3 = this.database;
                                                                        StringBuilder sb = new StringBuilder();
                                                                        sb.append("DELETE FROM messages_holes WHERE uid = ");
                                                                        sb.append(l);
                                                                        sQLiteDatabase3.executeFast(sb.toString()).stepThis().dispose();
                                                                        this.database.executeFast("DELETE FROM bot_keyboard WHERE uid = " + l).stepThis().dispose();
                                                                        this.database.executeFast("DELETE FROM media_counts_v2 WHERE uid = " + l).stepThis().dispose();
                                                                        this.database.executeFast("DELETE FROM media_v4 WHERE uid = " + l).stepThis().dispose();
                                                                        this.database.executeFast("DELETE FROM media_holes_v2 WHERE uid = " + l).stepThis().dispose();
                                                                        sQLiteCursor2 = null;
                                                                        MediaDataController.getInstance(this.currentAccount).clearBotKeyboard(l.longValue(), null);
                                                                        if (i2 != -1) {
                                                                        }
                                                                        sQLiteCursor.dispose();
                                                                        sQLiteCursor3 = sQLiteCursor2;
                                                                        i4 = i + 1;
                                                                        arrayList2 = arrayList;
                                                                        i3 = 0;
                                                                    } catch (Exception e4) {
                                                                        e = e4;
                                                                        sQLitePreparedStatement = executeFast;
                                                                        checkSQLException(e);
                                                                        sQLiteDatabase2 = this.database;
                                                                        if (sQLiteDatabase2 != null) {
                                                                            sQLiteDatabase2.commitTransaction();
                                                                        }
                                                                        if (sQLitePreparedStatement != null) {
                                                                            sQLitePreparedStatement.dispose();
                                                                        }
                                                                        if (sQLitePreparedStatement2 != null) {
                                                                            sQLitePreparedStatement2.dispose();
                                                                        }
                                                                        if (sQLiteCursor != null) {
                                                                            sQLiteCursor.dispose();
                                                                        }
                                                                        runnable = new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda6
                                                                            @Override // java.lang.Runnable
                                                                            public final void run() {
                                                                                MessagesStorage.this.lambda$clearLocalDatabase$37();
                                                                            }
                                                                        };
                                                                        AndroidUtilities.runOnUIThread(runnable);
                                                                    }
                                                                }
                                                            } catch (Exception e5) {
                                                                e = e5;
                                                                i = i4;
                                                                sQLiteCursor = queryFinalized2;
                                                            }
                                                        } else {
                                                            arrayList = arrayList2;
                                                            i = i4;
                                                            sQLiteCursor = queryFinalized2;
                                                        }
                                                        try {
                                                            byteBufferValue.reuse();
                                                        } catch (Exception e6) {
                                                            e = e6;
                                                            checkSQLException(e);
                                                            i2 = i5;
                                                            queryFinalized3.dispose();
                                                            this.database.executeFast("DELETE FROM messages_v2 WHERE uid = " + l + " AND mid != " + longValue2 + " AND mid != " + longValue3).stepThis().dispose();
                                                            SQLiteDatabase sQLiteDatabase32 = this.database;
                                                            StringBuilder sb2 = new StringBuilder();
                                                            sb2.append("DELETE FROM messages_holes WHERE uid = ");
                                                            sb2.append(l);
                                                            sQLiteDatabase32.executeFast(sb2.toString()).stepThis().dispose();
                                                            this.database.executeFast("DELETE FROM bot_keyboard WHERE uid = " + l).stepThis().dispose();
                                                            this.database.executeFast("DELETE FROM media_counts_v2 WHERE uid = " + l).stepThis().dispose();
                                                            this.database.executeFast("DELETE FROM media_v4 WHERE uid = " + l).stepThis().dispose();
                                                            this.database.executeFast("DELETE FROM media_holes_v2 WHERE uid = " + l).stepThis().dispose();
                                                            sQLiteCursor2 = null;
                                                            MediaDataController.getInstance(this.currentAccount).clearBotKeyboard(l.longValue(), null);
                                                            if (i2 != -1) {
                                                            }
                                                            sQLiteCursor.dispose();
                                                            sQLiteCursor3 = sQLiteCursor2;
                                                            i4 = i + 1;
                                                            arrayList2 = arrayList;
                                                            i3 = 0;
                                                        }
                                                    } else {
                                                        arrayList = arrayList2;
                                                        i = i4;
                                                        sQLiteCursor = queryFinalized2;
                                                    }
                                                    arrayList2 = arrayList;
                                                    i4 = i;
                                                    queryFinalized2 = sQLiteCursor;
                                                    r6 = 0;
                                                } catch (Exception e7) {
                                                    e = e7;
                                                    arrayList = arrayList2;
                                                    i = i4;
                                                    sQLiteCursor = queryFinalized2;
                                                }
                                            }
                                            arrayList = arrayList2;
                                            i = i4;
                                            sQLiteCursor = queryFinalized2;
                                            i2 = i5;
                                            queryFinalized3.dispose();
                                            this.database.executeFast("DELETE FROM messages_v2 WHERE uid = " + l + " AND mid != " + longValue2 + " AND mid != " + longValue3).stepThis().dispose();
                                            SQLiteDatabase sQLiteDatabase322 = this.database;
                                            StringBuilder sb22 = new StringBuilder();
                                            sb22.append("DELETE FROM messages_holes WHERE uid = ");
                                            sb22.append(l);
                                            sQLiteDatabase322.executeFast(sb22.toString()).stepThis().dispose();
                                            this.database.executeFast("DELETE FROM bot_keyboard WHERE uid = " + l).stepThis().dispose();
                                            this.database.executeFast("DELETE FROM media_counts_v2 WHERE uid = " + l).stepThis().dispose();
                                            this.database.executeFast("DELETE FROM media_v4 WHERE uid = " + l).stepThis().dispose();
                                            this.database.executeFast("DELETE FROM media_holes_v2 WHERE uid = " + l).stepThis().dispose();
                                            sQLiteCursor2 = null;
                                            MediaDataController.getInstance(this.currentAccount).clearBotKeyboard(l.longValue(), null);
                                            if (i2 != -1) {
                                                createFirstHoles(l.longValue(), executeFast, sQLitePreparedStatement2, i2, 0);
                                            }
                                        } else {
                                            arrayList = arrayList2;
                                            i = i4;
                                            sQLiteCursor = queryFinalized2;
                                            sQLiteCursor2 = null;
                                        }
                                        sQLiteCursor.dispose();
                                        sQLiteCursor3 = sQLiteCursor2;
                                    } catch (Exception e8) {
                                        e = e8;
                                        sQLiteCursor = queryFinalized2;
                                    }
                                } catch (Throwable th5) {
                                    th = th5;
                                    sQLiteCursor = queryFinalized2;
                                }
                            }
                            i4 = i + 1;
                            arrayList2 = arrayList;
                            i3 = 0;
                        } catch (Exception e9) {
                            e = e9;
                            sQLitePreparedStatement = executeFast;
                        } catch (Throwable th6) {
                            th = th6;
                            sQLitePreparedStatement = executeFast;
                        }
                    }
                    executeFast.dispose();
                    sQLitePreparedStatement2.dispose();
                    try {
                        this.database.commitTransaction();
                        this.database.executeFast("PRAGMA journal_size_limit = 0").stepThis().dispose();
                        this.database.executeFast("VACUUM").stepThis().dispose();
                        this.database.executeFast("PRAGMA journal_size_limit = -1").stepThis().dispose();
                        getMessagesController().getTopicsController().databaseCleared();
                        SQLiteDatabase sQLiteDatabase4 = this.database;
                        if (sQLiteDatabase4 != null) {
                            sQLiteDatabase4.commitTransaction();
                        }
                        if (sQLiteCursor3 != null) {
                            sQLiteCursor3.dispose();
                        }
                        runnable = new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda6
                            @Override // java.lang.Runnable
                            public final void run() {
                                MessagesStorage.this.lambda$clearLocalDatabase$37();
                            }
                        };
                    } catch (Exception e10) {
                        e = e10;
                        sQLitePreparedStatement = null;
                        sQLitePreparedStatement2 = null;
                        sQLiteCursor = sQLiteCursor3;
                        checkSQLException(e);
                        sQLiteDatabase2 = this.database;
                        if (sQLiteDatabase2 != null) {
                        }
                        if (sQLitePreparedStatement != null) {
                        }
                        if (sQLitePreparedStatement2 != null) {
                        }
                        if (sQLiteCursor != null) {
                        }
                        runnable = new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda6
                            @Override // java.lang.Runnable
                            public final void run() {
                                MessagesStorage.this.lambda$clearLocalDatabase$37();
                            }
                        };
                        AndroidUtilities.runOnUIThread(runnable);
                    } catch (Throwable th7) {
                        th = th7;
                        sQLitePreparedStatement = null;
                        sQLitePreparedStatement2 = null;
                        sQLiteCursor = sQLiteCursor3;
                        sQLiteDatabase = this.database;
                        if (sQLiteDatabase != null) {
                        }
                        if (sQLitePreparedStatement != null) {
                        }
                        if (sQLitePreparedStatement2 != null) {
                        }
                        if (sQLiteCursor != null) {
                        }
                        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda6
                            @Override // java.lang.Runnable
                            public final void run() {
                                MessagesStorage.this.lambda$clearLocalDatabase$37();
                            }
                        });
                        throw th;
                    }
                } catch (Exception e11) {
                    e = e11;
                    sQLiteCursor = null;
                } catch (Throwable th8) {
                    th = th8;
                    sQLiteCursor = null;
                }
            } catch (Exception e12) {
                e = e12;
                sQLitePreparedStatement2 = null;
                sQLiteCursor = null;
            } catch (Throwable th9) {
                th = th9;
                sQLitePreparedStatement2 = null;
                sQLiteCursor = null;
            }
        } catch (Exception e13) {
            e = e13;
            sQLitePreparedStatement = null;
            sQLitePreparedStatement2 = null;
            sQLiteCursor = null;
        } catch (Throwable th10) {
            th = th10;
            sQLitePreparedStatement = null;
            sQLitePreparedStatement2 = null;
            sQLiteCursor = null;
        }
        AndroidUtilities.runOnUIThread(runnable);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$clearLocalDatabase$37() {
        NotificationCenter.getInstance(this.currentAccount).postNotificationName(NotificationCenter.didClearDatabase, new Object[0]);
        getMediaDataController().loadAttachMenuBots(false, true);
    }

    public void saveTopics(final long j, final List<TLRPC$TL_forumTopic> list, final boolean z, boolean z2) {
        if (z2) {
            this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda109
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesStorage.this.lambda$saveTopics$39(j, list, z);
                }
            });
        } else {
            saveTopicsInternal(j, list, z, false);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$saveTopics$39(long j, List list, boolean z) {
        saveTopicsInternal(j, list, z, true);
    }

    private void saveTopicsInternal(long j, List<TLRPC$TL_forumTopic> list, boolean z, boolean z2) {
        int i;
        int i2;
        SQLitePreparedStatement sQLitePreparedStatement = null;
        try {
            try {
                HashSet hashSet = new HashSet();
                HashMap hashMap = new HashMap();
                int i3 = 0;
                while (true) {
                    i = 2;
                    if (i3 >= list.size()) {
                        break;
                    }
                    SQLiteDatabase sQLiteDatabase = this.database;
                    SQLiteCursor queryFinalized = sQLiteDatabase.queryFinalized("SELECT did, pinned FROM topics WHERE did = " + j + " AND topic_id = " + list.get(i3).id, new Object[0]);
                    boolean next = queryFinalized.next();
                    if (next) {
                        hashMap.put(Integer.valueOf(i3), Integer.valueOf(queryFinalized.intValue(2)));
                    }
                    queryFinalized.dispose();
                    if (next) {
                        hashSet.add(Integer.valueOf(i3));
                    }
                    i3++;
                }
                if (z) {
                    SQLiteDatabase sQLiteDatabase2 = this.database;
                    sQLiteDatabase2.executeFast("DELETE FROM topics WHERE did = " + j).stepThis().dispose();
                }
                SQLitePreparedStatement executeFast = this.database.executeFast("REPLACE INTO topics VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
                if (z2) {
                    try {
                        this.database.beginTransaction();
                    } catch (Exception e) {
                        e = e;
                        sQLitePreparedStatement = executeFast;
                        checkSQLException(e);
                        if (sQLitePreparedStatement != null) {
                            sQLitePreparedStatement.dispose();
                        }
                        this.database.commitTransaction();
                    } catch (Throwable th) {
                        th = th;
                        sQLitePreparedStatement = executeFast;
                        if (sQLitePreparedStatement != null) {
                            sQLitePreparedStatement.dispose();
                        }
                        this.database.commitTransaction();
                        throw th;
                    }
                }
                int i4 = 0;
                while (i4 < list.size()) {
                    TLRPC$TL_forumTopic tLRPC$TL_forumTopic = list.get(i4);
                    boolean contains = hashSet.contains(Integer.valueOf(i4));
                    executeFast.requery();
                    executeFast.bindLong(1, j);
                    executeFast.bindInteger(i, tLRPC$TL_forumTopic.id);
                    NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(tLRPC$TL_forumTopic.getObjectSize());
                    tLRPC$TL_forumTopic.serializeToStream(nativeByteBuffer);
                    executeFast.bindByteBuffer(3, nativeByteBuffer);
                    executeFast.bindInteger(4, tLRPC$TL_forumTopic.top_message);
                    NativeByteBuffer nativeByteBuffer2 = new NativeByteBuffer(tLRPC$TL_forumTopic.topicStartMessage.getObjectSize());
                    tLRPC$TL_forumTopic.topicStartMessage.serializeToStream(nativeByteBuffer2);
                    executeFast.bindByteBuffer(5, nativeByteBuffer2);
                    executeFast.bindInteger(6, tLRPC$TL_forumTopic.unread_count);
                    executeFast.bindInteger(7, tLRPC$TL_forumTopic.read_inbox_max_id);
                    executeFast.bindInteger(8, tLRPC$TL_forumTopic.unread_mentions_count);
                    executeFast.bindInteger(9, tLRPC$TL_forumTopic.unread_reactions_count);
                    executeFast.bindInteger(10, tLRPC$TL_forumTopic.read_outbox_max_id);
                    if (tLRPC$TL_forumTopic.isShort && hashMap.containsKey(Integer.valueOf(i4))) {
                        executeFast.bindInteger(11, ((Integer) hashMap.get(Integer.valueOf(i4))).intValue());
                    } else {
                        executeFast.bindInteger(11, tLRPC$TL_forumTopic.pinned ? tLRPC$TL_forumTopic.pinnedOrder + 1 : 0);
                    }
                    executeFast.bindInteger(12, tLRPC$TL_forumTopic.totalMessagesCount);
                    executeFast.bindInteger(13, tLRPC$TL_forumTopic.hidden ? 1 : 0);
                    executeFast.step();
                    nativeByteBuffer2.reuse();
                    nativeByteBuffer.reuse();
                    if (contains) {
                        int i5 = tLRPC$TL_forumTopic.top_message;
                        i2 = i4;
                        closeHolesInTable("messages_holes_topics", j, i5, i5, tLRPC$TL_forumTopic.id);
                        int i6 = tLRPC$TL_forumTopic.top_message;
                        closeHolesInMedia(j, i6, i6, -1, 0);
                    } else {
                        i2 = i4;
                        SQLiteDatabase sQLiteDatabase3 = this.database;
                        Locale locale = Locale.ENGLISH;
                        sQLiteDatabase3.executeFast(String.format(locale, "DELETE FROM messages_holes_topics WHERE uid = %d AND topic_id = %d", Long.valueOf(j), Integer.valueOf(tLRPC$TL_forumTopic.id))).stepThis().dispose();
                        this.database.executeFast(String.format(locale, "DELETE FROM media_holes_topics WHERE uid = %d AND topic_id = %d", Long.valueOf(j), Integer.valueOf(tLRPC$TL_forumTopic.id))).stepThis().dispose();
                        this.database.executeFast(String.format(locale, "DELETE FROM messages_topics WHERE uid = %d AND topic_id = %d", Long.valueOf(j), Integer.valueOf(tLRPC$TL_forumTopic.id))).stepThis().dispose();
                        this.database.executeFast(String.format(locale, "DELETE FROM media_topics WHERE uid = %d AND topic_id = %d", Long.valueOf(j), Integer.valueOf(tLRPC$TL_forumTopic.id))).stepThis().dispose();
                        SQLitePreparedStatement executeFast2 = this.database.executeFast("REPLACE INTO messages_holes_topics VALUES(?, ?, ?, ?)");
                        createFirstHoles(j, executeFast2, this.database.executeFast("REPLACE INTO media_holes_topics VALUES(?, ?, ?, ?, ?)"), tLRPC$TL_forumTopic.top_message, tLRPC$TL_forumTopic.id);
                        executeFast2.dispose();
                        executeFast2.dispose();
                    }
                    i4 = i2 + 1;
                    i = 2;
                }
                resetAllUnreadCounters(false);
                if (executeFast != null) {
                    executeFast.dispose();
                }
            } catch (Exception e2) {
                e = e2;
            }
            this.database.commitTransaction();
        } catch (Throwable th2) {
            th = th2;
        }
    }

    public void updateTopicData(final long j, final TLRPC$TL_forumTopic tLRPC$TL_forumTopic, final int i) {
        if (tLRPC$TL_forumTopic == null) {
            return;
        }
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda65
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$updateTopicData$40(i, tLRPC$TL_forumTopic, j);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:62:0x0103  */
    /* JADX WARN: Removed duplicated region for block: B:64:0x0108  */
    /* JADX WARN: Removed duplicated region for block: B:69:0x0114  */
    /* JADX WARN: Removed duplicated region for block: B:71:0x0119  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$updateTopicData$40(int i, TLRPC$TL_forumTopic tLRPC$TL_forumTopic, long j) {
        SQLiteCursor sQLiteCursor;
        SQLitePreparedStatement executeFast;
        TLRPC$TL_forumTopic tLRPC$TL_forumTopic2;
        NativeByteBuffer byteBufferValue;
        SQLitePreparedStatement sQLitePreparedStatement = null;
        int i2 = 1;
        if ((i & 16) != 0) {
            try {
                executeFast = this.database.executeFast("UPDATE topics SET total_messages_count = ? WHERE did = ? AND topic_id = ?");
            } catch (Exception e) {
                e = e;
                sQLiteCursor = null;
                try {
                    checkSQLException(e);
                    if (sQLitePreparedStatement != null) {
                    }
                    if (sQLiteCursor != null) {
                    }
                    this.database.commitTransaction();
                } catch (Throwable th) {
                    th = th;
                    if (sQLitePreparedStatement != null) {
                        sQLitePreparedStatement.dispose();
                    }
                    if (sQLiteCursor != null) {
                        sQLiteCursor.dispose();
                    }
                    this.database.commitTransaction();
                    throw th;
                }
            } catch (Throwable th2) {
                th = th2;
                sQLiteCursor = null;
                if (sQLitePreparedStatement != null) {
                }
                if (sQLiteCursor != null) {
                }
                this.database.commitTransaction();
                throw th;
            }
            try {
                executeFast.requery();
                executeFast.bindInteger(1, tLRPC$TL_forumTopic.totalMessagesCount);
                executeFast.bindLong(2, j);
                executeFast.bindInteger(3, tLRPC$TL_forumTopic.id);
                executeFast.step();
                executeFast.dispose();
                if (i == 16) {
                    executeFast.dispose();
                    this.database.commitTransaction();
                    return;
                }
            } catch (Exception e2) {
                e = e2;
                sQLiteCursor = null;
                sQLitePreparedStatement = executeFast;
                checkSQLException(e);
                if (sQLitePreparedStatement != null) {
                }
                if (sQLiteCursor != null) {
                }
                this.database.commitTransaction();
            } catch (Throwable th3) {
                th = th3;
                sQLiteCursor = null;
                sQLitePreparedStatement = executeFast;
                if (sQLitePreparedStatement != null) {
                }
                if (sQLiteCursor != null) {
                }
                this.database.commitTransaction();
                throw th;
            }
        } else {
            executeFast = null;
        }
        sQLiteCursor = this.database.queryFinalized(String.format(Locale.US, "SELECT data FROM topics WHERE did = %d AND topic_id = %d", Long.valueOf(j), Integer.valueOf(tLRPC$TL_forumTopic.id)), new Object[0]);
        try {
            if (!sQLiteCursor.next() || (byteBufferValue = sQLiteCursor.byteBufferValue(0)) == null) {
                tLRPC$TL_forumTopic2 = null;
            } else {
                tLRPC$TL_forumTopic2 = TLRPC$TL_forumTopic.TLdeserialize((AbstractSerializedData) byteBufferValue, byteBufferValue.readInt32(true), true);
                byteBufferValue.reuse();
            }
            sQLiteCursor.dispose();
            if (tLRPC$TL_forumTopic2 != null) {
                if ((i & 1) != 0) {
                    tLRPC$TL_forumTopic2.title = tLRPC$TL_forumTopic.title;
                }
                if ((i & 2) != 0) {
                    tLRPC$TL_forumTopic2.icon_emoji_id = tLRPC$TL_forumTopic.icon_emoji_id;
                    tLRPC$TL_forumTopic2.flags |= 1;
                }
                if ((i & 4) != 0) {
                    tLRPC$TL_forumTopic2.pinned = tLRPC$TL_forumTopic.pinned;
                    tLRPC$TL_forumTopic2.pinnedOrder = tLRPC$TL_forumTopic.pinnedOrder;
                }
                int i3 = tLRPC$TL_forumTopic2.pinned ? tLRPC$TL_forumTopic2.pinnedOrder + 1 : 0;
                if ((i & 8) != 0) {
                    tLRPC$TL_forumTopic2.closed = tLRPC$TL_forumTopic.closed;
                }
                if ((i & 32) != 0) {
                    tLRPC$TL_forumTopic2.hidden = tLRPC$TL_forumTopic.hidden;
                }
                executeFast = this.database.executeFast("UPDATE topics SET data = ?, pinned = ?, hidden = ? WHERE did = ? AND topic_id = ?");
                this.database.beginTransaction();
                NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(tLRPC$TL_forumTopic2.getObjectSize());
                tLRPC$TL_forumTopic2.serializeToStream(nativeByteBuffer);
                executeFast.bindByteBuffer(1, nativeByteBuffer);
                executeFast.bindInteger(2, i3);
                if (!tLRPC$TL_forumTopic2.hidden) {
                    i2 = 0;
                }
                executeFast.bindInteger(3, i2);
                executeFast.bindLong(4, j);
                executeFast.bindInteger(5, tLRPC$TL_forumTopic2.id);
                executeFast.step();
                nativeByteBuffer.reuse();
            }
            if (executeFast != null) {
                executeFast.dispose();
            }
        } catch (Exception e3) {
            e = e3;
            sQLitePreparedStatement = executeFast;
            checkSQLException(e);
            if (sQLitePreparedStatement != null) {
                sQLitePreparedStatement.dispose();
            }
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
            this.database.commitTransaction();
        } catch (Throwable th4) {
            th = th4;
            sQLitePreparedStatement = executeFast;
            if (sQLitePreparedStatement != null) {
            }
            if (sQLiteCursor != null) {
            }
            this.database.commitTransaction();
            throw th;
        }
        this.database.commitTransaction();
    }

    public void loadTopics(final long j, final Consumer<ArrayList<TLRPC$TL_forumTopic>> consumer) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda110
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$loadTopics$42(j, consumer);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:119:0x028a A[Catch: Exception -> 0x01c9, all -> 0x02b0, TRY_ENTER, TRY_LEAVE, TryCatch #3 {Exception -> 0x01c9, blocks: (B:44:0x0124, B:46:0x012f, B:48:0x013c, B:49:0x0147, B:52:0x015a, B:54:0x0160, B:55:0x016b, B:79:0x01bc, B:88:0x01db, B:112:0x0265, B:119:0x028a, B:122:0x0297), top: B:158:0x0124 }] */
    /* JADX WARN: Removed duplicated region for block: B:122:0x0297 A[Catch: Exception -> 0x01c9, all -> 0x02b0, TRY_ENTER, TRY_LEAVE, TryCatch #3 {Exception -> 0x01c9, blocks: (B:44:0x0124, B:46:0x012f, B:48:0x013c, B:49:0x0147, B:52:0x015a, B:54:0x0160, B:55:0x016b, B:79:0x01bc, B:88:0x01db, B:112:0x0265, B:119:0x028a, B:122:0x0297), top: B:158:0x0124 }] */
    /* JADX WARN: Removed duplicated region for block: B:147:0x02d3  */
    /* JADX WARN: Removed duplicated region for block: B:152:0x02df  */
    /* JADX WARN: Type inference failed for: r13v4 */
    /* JADX WARN: Type inference failed for: r13v5, types: [boolean, int] */
    /* JADX WARN: Type inference failed for: r13v6 */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$loadTopics$42(long j, Consumer consumer) {
        SQLiteCursor sQLiteCursor;
        ArrayList<TLRPC$TL_forumTopic> arrayList;
        SQLiteCursor sQLiteCursor2;
        long j2;
        LongSparseArray<ArrayList<Integer>> longSparseArray;
        String str;
        NativeByteBuffer byteBufferValue;
        ArrayList<TLRPC$TL_forumTopic> arrayList2;
        ArrayList arrayList3;
        String str2 = ")";
        try {
            int i = 1;
            SQLiteCursor queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT top_message, data, topic_message, unread_count, max_read_id, unread_mentions, unread_reactions, read_outbox, pinned, total_messages_count FROM topics WHERE did = %d ORDER BY pinned ASC", Long.valueOf(j)), new Object[0]);
            SparseArray sparseArray = null;
            HashSet hashSet = null;
            arrayList = null;
            while (queryFinalized.next()) {
                try {
                    if (arrayList == null) {
                        try {
                            try {
                                arrayList2 = new ArrayList<>();
                            } catch (Exception e) {
                                e = e;
                            }
                            try {
                                SparseArray sparseArray2 = new SparseArray();
                                hashSet = new HashSet();
                                arrayList = arrayList2;
                                sparseArray = sparseArray2;
                            } catch (Exception e2) {
                                e = e2;
                                arrayList = arrayList2;
                                sQLiteCursor = queryFinalized;
                                try {
                                    checkSQLException(e);
                                    if (sQLiteCursor != null) {
                                    }
                                    consumer.accept(arrayList);
                                } catch (Throwable th) {
                                    th = th;
                                    if (sQLiteCursor != null) {
                                    }
                                    throw th;
                                }
                            }
                        } catch (Throwable th2) {
                            th = th2;
                            sQLiteCursor = queryFinalized;
                            if (sQLiteCursor != null) {
                                sQLiteCursor.dispose();
                            }
                            throw th;
                        }
                    }
                    int intValue = queryFinalized.intValue(0);
                    NativeByteBuffer byteBufferValue2 = queryFinalized.byteBufferValue(i);
                    if (byteBufferValue2 != null) {
                        TLRPC$TL_forumTopic TLdeserialize = TLRPC$TL_forumTopic.TLdeserialize((AbstractSerializedData) byteBufferValue2, byteBufferValue2.readInt32(false), false);
                        if (TLdeserialize != null) {
                            TLdeserialize.top_message = intValue;
                            ArrayList arrayList4 = (ArrayList) sparseArray.get(intValue);
                            if (arrayList4 == null) {
                                arrayList3 = new ArrayList();
                                sparseArray.put(intValue, arrayList3);
                            } else {
                                arrayList3 = arrayList4;
                            }
                            arrayList3.add(TLdeserialize);
                            hashSet.add(Integer.valueOf(intValue));
                            arrayList.add(TLdeserialize);
                            NativeByteBuffer byteBufferValue3 = queryFinalized.byteBufferValue(2);
                            TLdeserialize.topicStartMessage = TLRPC$Message.TLdeserialize(byteBufferValue3, byteBufferValue3.readInt32(false), false);
                            byteBufferValue3.reuse();
                            TLdeserialize.unread_count = queryFinalized.intValue(3);
                            TLdeserialize.read_inbox_max_id = queryFinalized.intValue(4);
                            TLdeserialize.unread_mentions_count = queryFinalized.intValue(5);
                            TLdeserialize.unread_reactions_count = queryFinalized.intValue(6);
                            TLdeserialize.read_outbox_max_id = queryFinalized.intValue(7);
                            int intValue2 = queryFinalized.intValue(8) - 1;
                            TLdeserialize.pinnedOrder = intValue2;
                            TLdeserialize.pinned = intValue2 >= 0;
                            TLdeserialize.totalMessagesCount = queryFinalized.intValue(9);
                        }
                        byteBufferValue2.reuse();
                    }
                    i = 1;
                } catch (Exception e3) {
                    e = e3;
                    sQLiteCursor2 = queryFinalized;
                } catch (Throwable th3) {
                    th = th3;
                    sQLiteCursor2 = queryFinalized;
                }
            }
            ArrayList<Long> arrayList5 = new ArrayList<>();
            ArrayList<Long> arrayList6 = new ArrayList<>();
            LongSparseArray<SparseArray<ArrayList<TLRPC$Message>>> longSparseArray2 = new LongSparseArray<>();
            LongSparseArray<ArrayList<Integer>> longSparseArray3 = new LongSparseArray<>();
            if (arrayList == null || arrayList.isEmpty()) {
                sQLiteCursor2 = queryFinalized;
            } else {
                SQLiteDatabase sQLiteDatabase = this.database;
                StringBuilder sb = new StringBuilder();
                sQLiteCursor2 = queryFinalized;
                try {
                    try {
                        sb.append("SELECT mid, data, replydata FROM messages_v2 WHERE uid = ");
                        sb.append(j);
                        sb.append(" AND mid IN (");
                        sb.append(TextUtils.join(",", hashSet));
                        sb.append(")");
                        String sb2 = sb.toString();
                        ArrayList<TLRPC$TL_forumTopic> arrayList7 = arrayList;
                        int i2 = 0;
                        try {
                            SQLiteCursor queryFinalized2 = sQLiteDatabase.queryFinalized(sb2, new Object[0]);
                            while (queryFinalized2.next()) {
                                try {
                                    int intValue3 = queryFinalized2.intValue(i2);
                                    NativeByteBuffer byteBufferValue4 = queryFinalized2.byteBufferValue(1);
                                    if (byteBufferValue4 != null) {
                                        str = str2;
                                        TLRPC$Message TLdeserialize2 = TLRPC$Message.TLdeserialize(byteBufferValue4, byteBufferValue4.readInt32(false), false);
                                        if (TLdeserialize2 != null) {
                                            TLdeserialize2.readAttachPath(byteBufferValue4, UserConfig.getInstance(this.currentAccount).clientUserId);
                                        }
                                        byteBufferValue4.reuse();
                                        hashSet.remove(Integer.valueOf(intValue3));
                                        ArrayList arrayList8 = (ArrayList) sparseArray.get(intValue3);
                                        if (arrayList8 != null) {
                                            for (int i3 = 0; i3 < arrayList8.size(); i3++) {
                                                ((TLRPC$TL_forumTopic) arrayList8.get(i3)).topMessage = TLdeserialize2;
                                            }
                                        }
                                        addUsersAndChatsFromMessage(TLdeserialize2, arrayList5, arrayList6, null);
                                        if (TLdeserialize2 != null) {
                                            try {
                                                TLRPC$TL_messageReplyHeader tLRPC$TL_messageReplyHeader = TLdeserialize2.reply_to;
                                                if (tLRPC$TL_messageReplyHeader != null && tLRPC$TL_messageReplyHeader.reply_to_msg_id != 0) {
                                                    TLRPC$MessageAction tLRPC$MessageAction = TLdeserialize2.action;
                                                    if ((tLRPC$MessageAction instanceof TLRPC$TL_messageActionPinMessage) || (tLRPC$MessageAction instanceof TLRPC$TL_messageActionPaymentSent) || (tLRPC$MessageAction instanceof TLRPC$TL_messageActionGameScore)) {
                                                        if (!queryFinalized2.isNull(2) && (byteBufferValue = queryFinalized2.byteBufferValue(2)) != null) {
                                                            TLRPC$Message TLdeserialize3 = TLRPC$Message.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                                                            TLdeserialize2.replyMessage = TLdeserialize3;
                                                            TLdeserialize3.readAttachPath(byteBufferValue, getUserConfig().clientUserId);
                                                            byteBufferValue.reuse();
                                                            TLRPC$Message tLRPC$Message = TLdeserialize2.replyMessage;
                                                            if (tLRPC$Message != null) {
                                                                addUsersAndChatsFromMessage(tLRPC$Message, arrayList5, arrayList6, null);
                                                            }
                                                        }
                                                        if (TLdeserialize2.replyMessage == null) {
                                                            addReplyMessages(TLdeserialize2, longSparseArray2, longSparseArray3);
                                                        }
                                                    }
                                                }
                                            } catch (Exception e4) {
                                                checkSQLException(e4);
                                            }
                                        }
                                    } else {
                                        str = str2;
                                    }
                                    str2 = str;
                                    i2 = 0;
                                } catch (Exception e5) {
                                    e = e5;
                                    sQLiteCursor = sQLiteCursor2;
                                    arrayList = arrayList7;
                                    checkSQLException(e);
                                    if (sQLiteCursor != null) {
                                    }
                                    consumer.accept(arrayList);
                                }
                            }
                            String str3 = str2;
                            queryFinalized2.dispose();
                            if (hashSet.isEmpty()) {
                                j2 = j;
                            } else {
                                SQLiteDatabase sQLiteDatabase2 = this.database;
                                StringBuilder sb3 = new StringBuilder();
                                sb3.append("SELECT mid, data FROM messages_topics WHERE uid = ");
                                j2 = j;
                                sb3.append(j2);
                                sb3.append(" AND mid IN (");
                                sb3.append(TextUtils.join(",", hashSet));
                                sb3.append(str3);
                                ?? r13 = 0;
                                SQLiteCursor queryFinalized3 = sQLiteDatabase2.queryFinalized(sb3.toString(), new Object[0]);
                                while (queryFinalized3.next()) {
                                    try {
                                        int intValue4 = queryFinalized3.intValue(r13);
                                        NativeByteBuffer byteBufferValue5 = queryFinalized3.byteBufferValue(1);
                                        if (byteBufferValue5 != 0) {
                                            TLRPC$Message TLdeserialize4 = TLRPC$Message.TLdeserialize(byteBufferValue5, byteBufferValue5.readInt32(r13), r13);
                                            if (TLdeserialize4 != null) {
                                                longSparseArray = longSparseArray3;
                                                try {
                                                    TLdeserialize4.readAttachPath(byteBufferValue5, UserConfig.getInstance(this.currentAccount).clientUserId);
                                                } catch (Exception e6) {
                                                    e = e6;
                                                    checkSQLException(e);
                                                    loadReplyMessages(longSparseArray2, longSparseArray, arrayList5, arrayList6, false);
                                                    final ArrayList<TLRPC$Chat> arrayList9 = new ArrayList<>();
                                                    final ArrayList<TLRPC$User> arrayList10 = new ArrayList<>();
                                                    if (!arrayList6.isEmpty()) {
                                                    }
                                                    if (!arrayList5.isEmpty()) {
                                                    }
                                                    AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda155
                                                        @Override // java.lang.Runnable
                                                        public final void run() {
                                                            MessagesStorage.this.lambda$loadTopics$41(arrayList10, arrayList9);
                                                        }
                                                    });
                                                    arrayList = arrayList7;
                                                    loadGroupedMessagesForTopics(j2, arrayList);
                                                    sQLiteCursor2.dispose();
                                                    consumer.accept(arrayList);
                                                }
                                            } else {
                                                longSparseArray = longSparseArray3;
                                            }
                                            byteBufferValue5.reuse();
                                            hashSet.remove(Integer.valueOf(intValue4));
                                            addUsersAndChatsFromMessage(TLdeserialize4, arrayList5, arrayList6, null);
                                            ArrayList arrayList11 = (ArrayList) sparseArray.get(intValue4);
                                            if (arrayList11 != null) {
                                                for (int i4 = 0; i4 < arrayList11.size(); i4++) {
                                                    ((TLRPC$TL_forumTopic) arrayList11.get(i4)).topMessage = TLdeserialize4;
                                                }
                                            }
                                        } else {
                                            longSparseArray = longSparseArray3;
                                        }
                                        longSparseArray3 = longSparseArray;
                                        r13 = 0;
                                    } catch (Exception e7) {
                                        e = e7;
                                        longSparseArray = longSparseArray3;
                                    }
                                }
                            }
                            longSparseArray = longSparseArray3;
                            loadReplyMessages(longSparseArray2, longSparseArray, arrayList5, arrayList6, false);
                            final ArrayList arrayList92 = new ArrayList<>();
                            final ArrayList arrayList102 = new ArrayList<>();
                            if (!arrayList6.isEmpty()) {
                                getChatsInternal(TextUtils.join(",", arrayList6), arrayList92);
                            }
                            if (!arrayList5.isEmpty()) {
                                getUsersInternal(TextUtils.join(",", arrayList5), arrayList102);
                            }
                            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda155
                                @Override // java.lang.Runnable
                                public final void run() {
                                    MessagesStorage.this.lambda$loadTopics$41(arrayList102, arrayList92);
                                }
                            });
                            arrayList = arrayList7;
                            loadGroupedMessagesForTopics(j2, arrayList);
                        } catch (Exception e8) {
                            e = e8;
                            arrayList = arrayList7;
                            sQLiteCursor = sQLiteCursor2;
                            checkSQLException(e);
                            if (sQLiteCursor != null) {
                                sQLiteCursor.dispose();
                            }
                            consumer.accept(arrayList);
                        }
                    } catch (Exception e9) {
                        e = e9;
                    }
                } catch (Throwable th4) {
                    th = th4;
                    sQLiteCursor = sQLiteCursor2;
                    if (sQLiteCursor != null) {
                    }
                    throw th;
                }
            }
            sQLiteCursor2.dispose();
        } catch (Exception e10) {
            e = e10;
            sQLiteCursor = null;
            arrayList = null;
        } catch (Throwable th5) {
            th = th5;
            sQLiteCursor = null;
        }
        consumer.accept(arrayList);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadTopics$41(ArrayList arrayList, ArrayList arrayList2) {
        if (!arrayList.isEmpty()) {
            getMessagesController().putUsers(arrayList, true);
        }
        if (arrayList2.isEmpty()) {
            return;
        }
        getMessagesController().putChats(arrayList2, true);
    }

    public void loadGroupedMessagesForTopicUpdates(ArrayList<TopicsController.TopicUpdate> arrayList) {
        if (arrayList == null) {
            return;
        }
        try {
            LongSparseArray longSparseArray = new LongSparseArray();
            for (int i = 0; i < arrayList.size(); i++) {
                if (!arrayList.get(i).reloadTopic && !arrayList.get(i).onlyCounters && arrayList.get(i).topMessage != null) {
                    long j = arrayList.get(i).topMessage.grouped_id;
                    if (j != 0) {
                        ArrayList arrayList2 = (ArrayList) longSparseArray.get(j);
                        if (arrayList2 == null) {
                            arrayList2 = new ArrayList();
                            longSparseArray.put(j, arrayList2);
                        }
                        arrayList2.add(arrayList.get(i));
                    }
                }
            }
            for (int i2 = 0; i2 < longSparseArray.size(); i2++) {
                long keyAt = longSparseArray.keyAt(i2);
                ArrayList arrayList3 = (ArrayList) longSparseArray.valueAt(i2);
                SQLiteCursor queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT data FROM messages_v2 WHERE uid = %s AND group_id = %s ORDER BY date DESC", Long.valueOf(((TopicsController.TopicUpdate) arrayList3.get(0)).dialogId), Long.valueOf(keyAt)), new Object[0]);
                ArrayList<MessageObject> arrayList4 = null;
                while (queryFinalized.next()) {
                    NativeByteBuffer byteBufferValue = queryFinalized.byteBufferValue(0);
                    TLRPC$Message TLdeserialize = TLRPC$Message.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                    if (TLdeserialize != null) {
                        TLdeserialize.readAttachPath(byteBufferValue, UserConfig.getInstance(this.currentAccount).clientUserId);
                    }
                    if (arrayList4 == null) {
                        arrayList4 = new ArrayList<>();
                    }
                    arrayList4.add(new MessageObject(this.currentAccount, TLdeserialize, false, false));
                }
                queryFinalized.dispose();
                for (int i3 = 0; i3 < arrayList3.size(); i3++) {
                    ((TopicsController.TopicUpdate) arrayList3.get(i3)).groupedMessages = arrayList4;
                }
            }
        } catch (Throwable th) {
            checkSQLException(th);
        }
    }

    public void loadGroupedMessagesForTopics(long j, ArrayList<TLRPC$TL_forumTopic> arrayList) {
        if (arrayList == null) {
            return;
        }
        try {
            LongSparseArray longSparseArray = new LongSparseArray();
            for (int i = 0; i < arrayList.size(); i++) {
                if (arrayList.get(i).topMessage != null) {
                    long j2 = arrayList.get(i).topMessage.grouped_id;
                    if (j2 != 0) {
                        ArrayList arrayList2 = (ArrayList) longSparseArray.get(j2);
                        if (arrayList2 == null) {
                            arrayList2 = new ArrayList();
                            longSparseArray.put(j2, arrayList2);
                        }
                        arrayList2.add(arrayList.get(i));
                    }
                }
            }
            for (int i2 = 0; i2 < longSparseArray.size(); i2++) {
                long keyAt = longSparseArray.keyAt(i2);
                ArrayList arrayList3 = (ArrayList) longSparseArray.valueAt(i2);
                SQLiteCursor queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT data FROM messages_v2 WHERE uid = %s AND group_id = %s ORDER BY date DESC", Long.valueOf(j), Long.valueOf(keyAt)), new Object[0]);
                ArrayList<MessageObject> arrayList4 = null;
                while (queryFinalized.next()) {
                    NativeByteBuffer byteBufferValue = queryFinalized.byteBufferValue(0);
                    TLRPC$Message TLdeserialize = TLRPC$Message.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                    if (TLdeserialize != null) {
                        TLdeserialize.readAttachPath(byteBufferValue, UserConfig.getInstance(this.currentAccount).clientUserId);
                    }
                    if (arrayList4 == null) {
                        arrayList4 = new ArrayList<>();
                    }
                    arrayList4.add(new MessageObject(this.currentAccount, TLdeserialize, false, false));
                }
                queryFinalized.dispose();
                for (int i3 = 0; i3 < arrayList3.size(); i3++) {
                    ((TLRPC$TL_forumTopic) arrayList3.get(i3)).groupedMessages = arrayList4;
                }
            }
        } catch (Throwable th) {
            checkSQLException(th);
        }
    }

    public void removeTopic(final long j, final int i) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda74
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$removeTopic$43(j, i);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$removeTopic$43(long j, int i) {
        try {
            SQLiteDatabase sQLiteDatabase = this.database;
            Locale locale = Locale.US;
            sQLiteDatabase.executeFast(String.format(locale, "DELETE FROM topics WHERE did = %d AND topic_id = %d", Long.valueOf(j), Integer.valueOf(i))).stepThis().dispose();
            this.database.executeFast(String.format(locale, "DELETE FROM messages_topics WHERE uid = %d AND topic_id = %d", Long.valueOf(j), Integer.valueOf(i))).stepThis().dispose();
        } catch (SQLiteException e) {
            e.printStackTrace();
        }
    }

    public void updateTopicsWithReadMessages(final HashMap<TopicKey, Integer> hashMap) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda162
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$updateTopicsWithReadMessages$44(hashMap);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateTopicsWithReadMessages$44(HashMap hashMap) {
        for (TopicKey topicKey : hashMap.keySet()) {
            try {
                this.database.executeFast(String.format(Locale.US, "UPDATE topics SET read_outbox = max((SELECT read_outbox FROM topics WHERE did = %d AND topic_id = %d), %d) WHERE did = %d AND topic_id = %d", Long.valueOf(topicKey.dialogId), Integer.valueOf(topicKey.topicId), Integer.valueOf(((Integer) hashMap.get(topicKey)).intValue()), Long.valueOf(topicKey.dialogId), Integer.valueOf(topicKey.topicId))).stepThis().dispose();
            } catch (SQLiteException e) {
                checkSQLException(e);
            }
        }
    }

    public void setDialogTtl(final long j, final int i) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda44
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$setDialogTtl$45(i, j);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$setDialogTtl$45(int i, long j) {
        try {
            this.database.executeFast(String.format(Locale.US, "UPDATE dialogs SET ttl_period = %d WHERE did = %d", Integer.valueOf(i), Long.valueOf(j))).stepThis().dispose();
        } catch (SQLiteException e) {
            checkSQLException(e);
        }
    }

    public ArrayList<File> getDatabaseFiles() {
        ArrayList<File> arrayList = new ArrayList<>();
        arrayList.add(this.cacheFile);
        arrayList.add(this.walCacheFile);
        arrayList.add(this.shmCacheFile);
        return arrayList;
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* loaded from: classes.dex */
    public static class ReadDialog {
        public int date;
        public int lastMid;
        public int unreadCount;

        private ReadDialog() {
        }
    }

    public void readAllDialogs(final int i) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda30
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$readAllDialogs$47(i);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$readAllDialogs$47(int i) {
        SQLiteCursor queryFinalized;
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                ArrayList<Long> arrayList = new ArrayList<>();
                ArrayList arrayList2 = new ArrayList();
                ArrayList arrayList3 = new ArrayList();
                final LongSparseArray longSparseArray = new LongSparseArray();
                if (i >= 0) {
                    queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT did, last_mid, unread_count, date FROM dialogs WHERE unread_count > 0 AND folder_id = %1$d", Integer.valueOf(i)), new Object[0]);
                } else {
                    queryFinalized = this.database.queryFinalized("SELECT did, last_mid, unread_count, date FROM dialogs WHERE unread_count > 0", new Object[0]);
                }
                while (queryFinalized.next()) {
                    try {
                        long longValue = queryFinalized.longValue(0);
                        if (!DialogObject.isFolderDialogId(longValue)) {
                            ReadDialog readDialog = new ReadDialog();
                            readDialog.lastMid = queryFinalized.intValue(1);
                            readDialog.unreadCount = queryFinalized.intValue(2);
                            readDialog.date = queryFinalized.intValue(3);
                            longSparseArray.put(longValue, readDialog);
                            if (!DialogObject.isEncryptedDialog(longValue)) {
                                if (DialogObject.isChatDialog(longValue)) {
                                    long j = -longValue;
                                    if (!arrayList2.contains(Long.valueOf(j))) {
                                        arrayList2.add(Long.valueOf(j));
                                    }
                                } else if (!arrayList.contains(Long.valueOf(longValue))) {
                                    arrayList.add(Long.valueOf(longValue));
                                }
                            } else {
                                int encryptedChatId = DialogObject.getEncryptedChatId(longValue);
                                if (!arrayList3.contains(Integer.valueOf(encryptedChatId))) {
                                    arrayList3.add(Integer.valueOf(encryptedChatId));
                                }
                            }
                        }
                    } catch (Exception e) {
                        sQLiteCursor = queryFinalized;
                        e = e;
                        checkSQLException(e);
                        if (sQLiteCursor != null) {
                            sQLiteCursor.dispose();
                            return;
                        }
                        return;
                    } catch (Throwable th) {
                        sQLiteCursor = queryFinalized;
                        th = th;
                        if (sQLiteCursor != null) {
                            sQLiteCursor.dispose();
                        }
                        throw th;
                    }
                }
                queryFinalized.dispose();
                final ArrayList<TLRPC$User> arrayList4 = new ArrayList<>();
                final ArrayList<TLRPC$Chat> arrayList5 = new ArrayList<>();
                final ArrayList<TLRPC$EncryptedChat> arrayList6 = new ArrayList<>();
                if (!arrayList3.isEmpty()) {
                    getEncryptedChatsInternal(TextUtils.join(",", arrayList3), arrayList6, arrayList);
                }
                if (!arrayList.isEmpty()) {
                    getUsersInternal(TextUtils.join(",", arrayList), arrayList4);
                }
                if (!arrayList2.isEmpty()) {
                    getChatsInternal(TextUtils.join(",", arrayList2), arrayList5);
                }
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda158
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesStorage.this.lambda$readAllDialogs$46(arrayList4, arrayList5, arrayList6, longSparseArray);
                    }
                });
            } catch (Throwable th2) {
                th = th2;
            }
        } catch (Exception e2) {
            e = e2;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$readAllDialogs$46(ArrayList arrayList, ArrayList arrayList2, ArrayList arrayList3, LongSparseArray longSparseArray) {
        getMessagesController().putUsers(arrayList, true);
        getMessagesController().putChats(arrayList2, true);
        getMessagesController().putEncryptedChats(arrayList3, true);
        for (int i = 0; i < longSparseArray.size(); i++) {
            long keyAt = longSparseArray.keyAt(i);
            ReadDialog readDialog = (ReadDialog) longSparseArray.valueAt(i);
            MessagesController messagesController = getMessagesController();
            int i2 = readDialog.lastMid;
            messagesController.markDialogAsRead(keyAt, i2, i2, readDialog.date, false, 0, readDialog.unreadCount, true, 0);
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:16:0x0089  */
    /* JADX WARN: Removed duplicated region for block: B:17:0x008b  */
    /* JADX WARN: Removed duplicated region for block: B:186:0x03f4  */
    /* JADX WARN: Removed duplicated region for block: B:20:0x009f  */
    /* JADX WARN: Removed duplicated region for block: B:21:0x00a1  */
    /* JADX WARN: Removed duplicated region for block: B:24:0x00b5 A[Catch: all -> 0x03e3, Exception -> 0x03e6, TryCatch #4 {all -> 0x03e3, blocks: (B:4:0x002d, B:6:0x0035, B:8:0x005d, B:14:0x006d, B:18:0x008c, B:22:0x00a2, B:24:0x00b5, B:26:0x00bd, B:27:0x00c2, B:29:0x00de, B:31:0x00ea, B:33:0x00fd, B:35:0x0108, B:37:0x012d, B:39:0x0134, B:40:0x0148, B:42:0x014c, B:44:0x0150, B:46:0x0156, B:48:0x015a, B:50:0x015e, B:52:0x0166, B:54:0x016c, B:56:0x017d, B:58:0x0189, B:60:0x0190, B:62:0x0194, B:72:0x01b0, B:74:0x01b6, B:76:0x01bc, B:77:0x01bf, B:79:0x01c5, B:81:0x01d5, B:82:0x01dd, B:84:0x01e5, B:86:0x01ef, B:87:0x01f7, B:89:0x0202, B:69:0x01a2, B:70:0x01a6, B:91:0x0210), top: B:196:0x002d }] */
    /* JADX WARN: Removed duplicated region for block: B:29:0x00de A[Catch: all -> 0x03e3, Exception -> 0x03e6, TryCatch #4 {all -> 0x03e3, blocks: (B:4:0x002d, B:6:0x0035, B:8:0x005d, B:14:0x006d, B:18:0x008c, B:22:0x00a2, B:24:0x00b5, B:26:0x00bd, B:27:0x00c2, B:29:0x00de, B:31:0x00ea, B:33:0x00fd, B:35:0x0108, B:37:0x012d, B:39:0x0134, B:40:0x0148, B:42:0x014c, B:44:0x0150, B:46:0x0156, B:48:0x015a, B:50:0x015e, B:52:0x0166, B:54:0x016c, B:56:0x017d, B:58:0x0189, B:60:0x0190, B:62:0x0194, B:72:0x01b0, B:74:0x01b6, B:76:0x01bc, B:77:0x01bf, B:79:0x01c5, B:81:0x01d5, B:82:0x01dd, B:84:0x01e5, B:86:0x01ef, B:87:0x01f7, B:89:0x0202, B:69:0x01a2, B:70:0x01a6, B:91:0x0210), top: B:196:0x002d }] */
    /* JADX WARN: Removed duplicated region for block: B:30:0x00e8  */
    /* JADX WARN: Removed duplicated region for block: B:33:0x00fd A[Catch: all -> 0x03e3, Exception -> 0x03e6, TryCatch #4 {all -> 0x03e3, blocks: (B:4:0x002d, B:6:0x0035, B:8:0x005d, B:14:0x006d, B:18:0x008c, B:22:0x00a2, B:24:0x00b5, B:26:0x00bd, B:27:0x00c2, B:29:0x00de, B:31:0x00ea, B:33:0x00fd, B:35:0x0108, B:37:0x012d, B:39:0x0134, B:40:0x0148, B:42:0x014c, B:44:0x0150, B:46:0x0156, B:48:0x015a, B:50:0x015e, B:52:0x0166, B:54:0x016c, B:56:0x017d, B:58:0x0189, B:60:0x0190, B:62:0x0194, B:72:0x01b0, B:74:0x01b6, B:76:0x01bc, B:77:0x01bf, B:79:0x01c5, B:81:0x01d5, B:82:0x01dd, B:84:0x01e5, B:86:0x01ef, B:87:0x01f7, B:89:0x0202, B:69:0x01a2, B:70:0x01a6, B:91:0x0210), top: B:196:0x002d }] */
    /* JADX WARN: Removed duplicated region for block: B:71:0x01ad  */
    /* JADX WARN: Removed duplicated region for block: B:74:0x01b6 A[Catch: all -> 0x03e3, Exception -> 0x03e6, TryCatch #4 {all -> 0x03e3, blocks: (B:4:0x002d, B:6:0x0035, B:8:0x005d, B:14:0x006d, B:18:0x008c, B:22:0x00a2, B:24:0x00b5, B:26:0x00bd, B:27:0x00c2, B:29:0x00de, B:31:0x00ea, B:33:0x00fd, B:35:0x0108, B:37:0x012d, B:39:0x0134, B:40:0x0148, B:42:0x014c, B:44:0x0150, B:46:0x0156, B:48:0x015a, B:50:0x015e, B:52:0x0166, B:54:0x016c, B:56:0x017d, B:58:0x0189, B:60:0x0190, B:62:0x0194, B:72:0x01b0, B:74:0x01b6, B:76:0x01bc, B:77:0x01bf, B:79:0x01c5, B:81:0x01d5, B:82:0x01dd, B:84:0x01e5, B:86:0x01ef, B:87:0x01f7, B:89:0x0202, B:69:0x01a2, B:70:0x01a6, B:91:0x0210), top: B:196:0x002d }] */
    /* JADX WARN: Removed duplicated region for block: B:79:0x01c5 A[Catch: all -> 0x03e3, Exception -> 0x03e6, TryCatch #4 {all -> 0x03e3, blocks: (B:4:0x002d, B:6:0x0035, B:8:0x005d, B:14:0x006d, B:18:0x008c, B:22:0x00a2, B:24:0x00b5, B:26:0x00bd, B:27:0x00c2, B:29:0x00de, B:31:0x00ea, B:33:0x00fd, B:35:0x0108, B:37:0x012d, B:39:0x0134, B:40:0x0148, B:42:0x014c, B:44:0x0150, B:46:0x0156, B:48:0x015a, B:50:0x015e, B:52:0x0166, B:54:0x016c, B:56:0x017d, B:58:0x0189, B:60:0x0190, B:62:0x0194, B:72:0x01b0, B:74:0x01b6, B:76:0x01bc, B:77:0x01bf, B:79:0x01c5, B:81:0x01d5, B:82:0x01dd, B:84:0x01e5, B:86:0x01ef, B:87:0x01f7, B:89:0x0202, B:69:0x01a2, B:70:0x01a6, B:91:0x0210), top: B:196:0x002d }] */
    /* JADX WARN: Removed duplicated region for block: B:82:0x01dd A[Catch: all -> 0x03e3, Exception -> 0x03e6, TryCatch #4 {all -> 0x03e3, blocks: (B:4:0x002d, B:6:0x0035, B:8:0x005d, B:14:0x006d, B:18:0x008c, B:22:0x00a2, B:24:0x00b5, B:26:0x00bd, B:27:0x00c2, B:29:0x00de, B:31:0x00ea, B:33:0x00fd, B:35:0x0108, B:37:0x012d, B:39:0x0134, B:40:0x0148, B:42:0x014c, B:44:0x0150, B:46:0x0156, B:48:0x015a, B:50:0x015e, B:52:0x0166, B:54:0x016c, B:56:0x017d, B:58:0x0189, B:60:0x0190, B:62:0x0194, B:72:0x01b0, B:74:0x01b6, B:76:0x01bc, B:77:0x01bf, B:79:0x01c5, B:81:0x01d5, B:82:0x01dd, B:84:0x01e5, B:86:0x01ef, B:87:0x01f7, B:89:0x0202, B:69:0x01a2, B:70:0x01a6, B:91:0x0210), top: B:196:0x002d }] */
    /* JADX WARN: Type inference failed for: r1v2 */
    /* JADX WARN: Type inference failed for: r1v3, types: [boolean, int] */
    /* JADX WARN: Type inference failed for: r1v5 */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private TLRPC$messages_Dialogs loadDialogsByIds(String str, ArrayList<Long> arrayList, ArrayList<Long> arrayList2, ArrayList<Integer> arrayList3) throws Exception {
        SQLiteCursor sQLiteCursor;
        int i;
        SQLiteCursor queryFinalized;
        TLRPC$TL_messages_dialogs tLRPC$TL_messages_dialogs;
        TLRPC$Dialog tLRPC$Dialog;
        NativeByteBuffer byteBufferValue;
        NativeByteBuffer byteBufferValue2;
        long j;
        int i2;
        long longValue;
        long longValue2;
        long j2;
        NativeByteBuffer byteBufferValue3;
        TLRPC$TL_messages_dialogs tLRPC$TL_messages_dialogs2;
        TLRPC$TL_dialog tLRPC$TL_dialog;
        ArrayList<Integer> arrayList4;
        NativeByteBuffer byteBufferValue4;
        MessagesStorage messagesStorage = this;
        ArrayList<Long> arrayList5 = arrayList;
        TLRPC$TL_messages_dialogs tLRPC$TL_messages_dialogs3 = new TLRPC$TL_messages_dialogs();
        LongSparseArray longSparseArray = new LongSparseArray();
        LongSparseArray longSparseArray2 = new LongSparseArray();
        try {
            int i3 = 1;
            int i4 = 0;
            SQLiteCursor queryFinalized2 = messagesStorage.database.queryFinalized(String.format(Locale.US, "SELECT d.did, d.last_mid, d.unread_count, d.date, m.data, m.read_state, m.mid, m.send_state, s.flags, m.date, d.pts, d.inbox_max, d.outbox_max, m.replydata, d.pinned, d.unread_count_i, d.flags, d.folder_id, d.data, d.unread_reactions, d.last_mid_group, d.ttl_period FROM dialogs as d LEFT JOIN messages_v2 as m ON d.last_mid = m.mid AND d.did = m.uid LEFT JOIN dialog_settings as s ON d.did = s.did WHERE d.did IN (%s) ORDER BY d.pinned DESC, d.date DESC", str), new Object[0]);
            while (true) {
                try {
                    try {
                        i = 2;
                        if (!queryFinalized2.next()) {
                            break;
                        }
                        long longValue3 = queryFinalized2.longValue(i4);
                        TLRPC$TL_dialog tLRPC$TL_dialog2 = new TLRPC$TL_dialog();
                        tLRPC$TL_dialog2.id = longValue3;
                        tLRPC$TL_dialog2.top_message = queryFinalized2.intValue(i3);
                        tLRPC$TL_dialog2.unread_count = queryFinalized2.intValue(2);
                        tLRPC$TL_dialog2.last_message_date = queryFinalized2.intValue(3);
                        int intValue = queryFinalized2.intValue(10);
                        tLRPC$TL_dialog2.pts = intValue;
                        if (intValue != 0) {
                            j = longValue3;
                            if (!DialogObject.isUserDialog(tLRPC$TL_dialog2.id)) {
                                i2 = 1;
                                tLRPC$TL_dialog2.flags = i2;
                                tLRPC$TL_dialog2.read_inbox_max_id = queryFinalized2.intValue(11);
                                tLRPC$TL_dialog2.read_outbox_max_id = queryFinalized2.intValue(12);
                                int intValue2 = queryFinalized2.intValue(14);
                                tLRPC$TL_dialog2.pinnedNum = intValue2;
                                tLRPC$TL_dialog2.pinned = intValue2 == 0;
                                tLRPC$TL_dialog2.unread_mentions_count = queryFinalized2.intValue(15);
                                tLRPC$TL_dialog2.unread_mark = (queryFinalized2.intValue(16) & i3) == 0;
                                longValue = queryFinalized2.longValue(8);
                                TLRPC$TL_peerNotifySettings tLRPC$TL_peerNotifySettings = new TLRPC$TL_peerNotifySettings();
                                tLRPC$TL_dialog2.notify_settings = tLRPC$TL_peerNotifySettings;
                                if ((((int) longValue) & i3) != 0) {
                                    int i5 = (int) (longValue >> 32);
                                    tLRPC$TL_peerNotifySettings.mute_until = i5;
                                    if (i5 == 0) {
                                        tLRPC$TL_peerNotifySettings.mute_until = ConnectionsManager.DEFAULT_DATACENTER_ID;
                                    }
                                }
                                tLRPC$TL_dialog2.folder_id = queryFinalized2.intValue(17);
                                tLRPC$TL_dialog2.unread_reactions_count = queryFinalized2.intValue(19);
                                longValue2 = queryFinalized2.longValue(20);
                                if (longValue2 == 0) {
                                    Long valueOf = Long.valueOf(longValue2);
                                    j2 = j;
                                    longSparseArray2.append(j2, valueOf);
                                } else {
                                    j2 = j;
                                }
                                tLRPC$TL_dialog2.ttl_period = queryFinalized2.intValue(21);
                                tLRPC$TL_messages_dialogs3.dialogs.add(tLRPC$TL_dialog2);
                                byteBufferValue3 = queryFinalized2.byteBufferValue(4);
                                if (byteBufferValue3 == null) {
                                    TLRPC$Message TLdeserialize = TLRPC$Message.TLdeserialize(byteBufferValue3, byteBufferValue3.readInt32(false), false);
                                    if (TLdeserialize != null) {
                                        TLdeserialize.readAttachPath(byteBufferValue3, getUserConfig().clientUserId);
                                        byteBufferValue3.reuse();
                                        MessageObject.setUnreadFlags(TLdeserialize, queryFinalized2.intValue(5));
                                        TLdeserialize.id = queryFinalized2.intValue(6);
                                        int intValue3 = queryFinalized2.intValue(9);
                                        if (intValue3 != 0) {
                                            tLRPC$TL_dialog = tLRPC$TL_dialog2;
                                            tLRPC$TL_dialog.last_message_date = intValue3;
                                        } else {
                                            tLRPC$TL_dialog = tLRPC$TL_dialog2;
                                        }
                                        TLdeserialize.send_state = queryFinalized2.intValue(7);
                                        TLdeserialize.dialog_id = tLRPC$TL_dialog.id;
                                        tLRPC$TL_messages_dialogs3.messages.add(TLdeserialize);
                                        addUsersAndChatsFromMessage(TLdeserialize, arrayList5, arrayList2, null);
                                        try {
                                            TLRPC$TL_messageReplyHeader tLRPC$TL_messageReplyHeader = TLdeserialize.reply_to;
                                            if (tLRPC$TL_messageReplyHeader != null && tLRPC$TL_messageReplyHeader.reply_to_msg_id != 0) {
                                                TLRPC$MessageAction tLRPC$MessageAction = TLdeserialize.action;
                                                if ((tLRPC$MessageAction instanceof TLRPC$TL_messageActionPinMessage) || (tLRPC$MessageAction instanceof TLRPC$TL_messageActionPaymentSent) || (tLRPC$MessageAction instanceof TLRPC$TL_messageActionGameScore)) {
                                                    if (queryFinalized2.isNull(13) || (byteBufferValue4 = queryFinalized2.byteBufferValue(13)) == null) {
                                                        tLRPC$TL_messages_dialogs2 = tLRPC$TL_messages_dialogs3;
                                                    } else {
                                                        TLRPC$Message TLdeserialize2 = TLRPC$Message.TLdeserialize(byteBufferValue4, byteBufferValue4.readInt32(false), false);
                                                        TLdeserialize.replyMessage = TLdeserialize2;
                                                        tLRPC$TL_messages_dialogs2 = tLRPC$TL_messages_dialogs3;
                                                        try {
                                                            TLdeserialize2.readAttachPath(byteBufferValue4, getUserConfig().clientUserId);
                                                            byteBufferValue4.reuse();
                                                            TLRPC$Message tLRPC$Message = TLdeserialize.replyMessage;
                                                            if (tLRPC$Message != null) {
                                                                addUsersAndChatsFromMessage(tLRPC$Message, arrayList5, arrayList2, null);
                                                            }
                                                        } catch (Exception e) {
                                                            e = e;
                                                            messagesStorage.checkSQLException(e);
                                                            if (!DialogObject.isEncryptedDialog(j2)) {
                                                            }
                                                            if (DialogObject.isEncryptedDialog(j2)) {
                                                            }
                                                            tLRPC$TL_messages_dialogs3 = tLRPC$TL_messages_dialogs2;
                                                            i3 = 1;
                                                            i4 = 0;
                                                        }
                                                    }
                                                    if (TLdeserialize.replyMessage == null) {
                                                        longSparseArray.put(tLRPC$TL_dialog.id, TLdeserialize);
                                                    }
                                                }
                                            }
                                            tLRPC$TL_messages_dialogs2 = tLRPC$TL_messages_dialogs3;
                                        } catch (Exception e2) {
                                            e = e2;
                                            tLRPC$TL_messages_dialogs2 = tLRPC$TL_messages_dialogs3;
                                        }
                                    } else {
                                        tLRPC$TL_messages_dialogs2 = tLRPC$TL_messages_dialogs3;
                                        tLRPC$TL_dialog = tLRPC$TL_dialog2;
                                        byteBufferValue3.reuse();
                                    }
                                } else {
                                    tLRPC$TL_messages_dialogs2 = tLRPC$TL_messages_dialogs3;
                                    tLRPC$TL_dialog = tLRPC$TL_dialog2;
                                }
                                if (!DialogObject.isEncryptedDialog(j2) && tLRPC$TL_dialog.read_inbox_max_id > tLRPC$TL_dialog.top_message) {
                                    tLRPC$TL_dialog.read_inbox_max_id = 0;
                                }
                                if (DialogObject.isEncryptedDialog(j2)) {
                                    int encryptedChatId = DialogObject.getEncryptedChatId(j2);
                                    arrayList4 = arrayList3;
                                    if (!arrayList4.contains(Integer.valueOf(encryptedChatId))) {
                                        arrayList4.add(Integer.valueOf(encryptedChatId));
                                    }
                                } else {
                                    arrayList4 = arrayList3;
                                    if (DialogObject.isUserDialog(j2)) {
                                        if (!arrayList5.contains(Long.valueOf(j2))) {
                                            arrayList5.add(Long.valueOf(j2));
                                        }
                                    } else {
                                        long j3 = -j2;
                                        if (!arrayList2.contains(Long.valueOf(j3))) {
                                            arrayList2.add(Long.valueOf(j3));
                                        }
                                    }
                                }
                                tLRPC$TL_messages_dialogs3 = tLRPC$TL_messages_dialogs2;
                                i3 = 1;
                                i4 = 0;
                            }
                        } else {
                            j = longValue3;
                        }
                        i2 = 0;
                        tLRPC$TL_dialog2.flags = i2;
                        tLRPC$TL_dialog2.read_inbox_max_id = queryFinalized2.intValue(11);
                        tLRPC$TL_dialog2.read_outbox_max_id = queryFinalized2.intValue(12);
                        int intValue22 = queryFinalized2.intValue(14);
                        tLRPC$TL_dialog2.pinnedNum = intValue22;
                        tLRPC$TL_dialog2.pinned = intValue22 == 0;
                        tLRPC$TL_dialog2.unread_mentions_count = queryFinalized2.intValue(15);
                        tLRPC$TL_dialog2.unread_mark = (queryFinalized2.intValue(16) & i3) == 0;
                        longValue = queryFinalized2.longValue(8);
                        TLRPC$TL_peerNotifySettings tLRPC$TL_peerNotifySettings2 = new TLRPC$TL_peerNotifySettings();
                        tLRPC$TL_dialog2.notify_settings = tLRPC$TL_peerNotifySettings2;
                        if ((((int) longValue) & i3) != 0) {
                        }
                        tLRPC$TL_dialog2.folder_id = queryFinalized2.intValue(17);
                        tLRPC$TL_dialog2.unread_reactions_count = queryFinalized2.intValue(19);
                        longValue2 = queryFinalized2.longValue(20);
                        if (longValue2 == 0) {
                        }
                        tLRPC$TL_dialog2.ttl_period = queryFinalized2.intValue(21);
                        tLRPC$TL_messages_dialogs3.dialogs.add(tLRPC$TL_dialog2);
                        byteBufferValue3 = queryFinalized2.byteBufferValue(4);
                        if (byteBufferValue3 == null) {
                        }
                        if (!DialogObject.isEncryptedDialog(j2)) {
                            tLRPC$TL_dialog.read_inbox_max_id = 0;
                        }
                        if (DialogObject.isEncryptedDialog(j2)) {
                        }
                        tLRPC$TL_messages_dialogs3 = tLRPC$TL_messages_dialogs2;
                        i3 = 1;
                        i4 = 0;
                    } catch (Throwable th) {
                        th = th;
                        sQLiteCursor = queryFinalized2;
                    }
                } catch (Exception e3) {
                    e = e3;
                    sQLiteCursor = queryFinalized2;
                }
            }
            TLRPC$TL_messages_dialogs tLRPC$TL_messages_dialogs4 = tLRPC$TL_messages_dialogs3;
            queryFinalized2.dispose();
            if (longSparseArray2.isEmpty()) {
                tLRPC$TL_messages_dialogs = tLRPC$TL_messages_dialogs4;
                queryFinalized = null;
            } else {
                try {
                    StringBuilder sb = new StringBuilder();
                    int i6 = 0;
                    while (i6 < longSparseArray2.size()) {
                        sb.append("uid = ");
                        sb.append(longSparseArray2.keyAt(i6));
                        sb.append(" AND group_id = ");
                        sb.append(longSparseArray2.valueAt(i6));
                        i6++;
                        if (i6 < longSparseArray2.size()) {
                            sb.append(" OR ");
                        }
                    }
                    int i7 = 0;
                    queryFinalized = messagesStorage.database.queryFinalized(String.format(Locale.US, "SELECT uid, data, read_state, mid, send_state, date, replydata FROM messages_v2 WHERE %s ORDER BY date DESC", sb), new Object[0]);
                    while (queryFinalized.next()) {
                        try {
                            try {
                                long longValue4 = queryFinalized.longValue(i7);
                                TLRPC$TL_messages_dialogs tLRPC$TL_messages_dialogs5 = tLRPC$TL_messages_dialogs4;
                                int i8 = 0;
                                while (true) {
                                    if (i8 >= tLRPC$TL_messages_dialogs5.dialogs.size()) {
                                        tLRPC$Dialog = null;
                                        break;
                                    }
                                    tLRPC$Dialog = tLRPC$TL_messages_dialogs5.dialogs.get(i8);
                                    if (tLRPC$Dialog != null && tLRPC$Dialog.id == longValue4) {
                                        break;
                                    }
                                    i8++;
                                }
                                if (tLRPC$Dialog != null && (byteBufferValue = queryFinalized.byteBufferValue(1)) != null) {
                                    TLRPC$Message TLdeserialize3 = TLRPC$Message.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                                    if (TLdeserialize3 != null) {
                                        TLdeserialize3.readAttachPath(byteBufferValue, getUserConfig().clientUserId);
                                        byteBufferValue.reuse();
                                        MessageObject.setUnreadFlags(TLdeserialize3, queryFinalized.intValue(2));
                                        TLdeserialize3.id = queryFinalized.intValue(3);
                                        int intValue4 = queryFinalized.intValue(5);
                                        if (intValue4 != 0) {
                                            tLRPC$Dialog.last_message_date = intValue4;
                                        }
                                        TLdeserialize3.send_state = queryFinalized.intValue(4);
                                        TLdeserialize3.dialog_id = tLRPC$Dialog.id;
                                        tLRPC$TL_messages_dialogs5.messages.add(TLdeserialize3);
                                        addUsersAndChatsFromMessage(TLdeserialize3, arrayList5, arrayList2, null);
                                        try {
                                            TLRPC$TL_messageReplyHeader tLRPC$TL_messageReplyHeader2 = TLdeserialize3.reply_to;
                                            if (tLRPC$TL_messageReplyHeader2 != null && tLRPC$TL_messageReplyHeader2.reply_to_msg_id != 0) {
                                                TLRPC$MessageAction tLRPC$MessageAction2 = TLdeserialize3.action;
                                                if ((tLRPC$MessageAction2 instanceof TLRPC$TL_messageActionPinMessage) || (tLRPC$MessageAction2 instanceof TLRPC$TL_messageActionPaymentSent) || (tLRPC$MessageAction2 instanceof TLRPC$TL_messageActionGameScore)) {
                                                    if (!queryFinalized.isNull(6) && (byteBufferValue2 = queryFinalized.byteBufferValue(6)) != null) {
                                                        TLRPC$Message TLdeserialize4 = TLRPC$Message.TLdeserialize(byteBufferValue2, byteBufferValue2.readInt32(false), false);
                                                        TLdeserialize3.replyMessage = TLdeserialize4;
                                                        TLdeserialize4.readAttachPath(byteBufferValue2, getUserConfig().clientUserId);
                                                        byteBufferValue2.reuse();
                                                        TLRPC$Message tLRPC$Message2 = TLdeserialize3.replyMessage;
                                                        if (tLRPC$Message2 != null) {
                                                            addUsersAndChatsFromMessage(tLRPC$Message2, arrayList5, arrayList2, null);
                                                        }
                                                    }
                                                    if (TLdeserialize3.replyMessage == null) {
                                                        longSparseArray.put(tLRPC$Dialog.id, TLdeserialize3);
                                                    }
                                                }
                                            }
                                        } catch (Exception e4) {
                                            messagesStorage.checkSQLException(e4);
                                        }
                                    } else {
                                        byteBufferValue.reuse();
                                    }
                                }
                                tLRPC$TL_messages_dialogs4 = tLRPC$TL_messages_dialogs5;
                                i7 = 0;
                            } catch (Exception e5) {
                                e = e5;
                                sQLiteCursor = queryFinalized;
                                try {
                                    throw e;
                                } catch (Throwable th2) {
                                    th = th2;
                                    if (sQLiteCursor != null) {
                                        sQLiteCursor.dispose();
                                    }
                                    throw th;
                                }
                            }
                        } catch (Throwable th3) {
                            th = th3;
                            sQLiteCursor = queryFinalized;
                            if (sQLiteCursor != null) {
                            }
                            throw th;
                        }
                    }
                    tLRPC$TL_messages_dialogs = tLRPC$TL_messages_dialogs4;
                    queryFinalized.dispose();
                } catch (Exception e6) {
                    e = e6;
                    sQLiteCursor = null;
                    throw e;
                } catch (Throwable th4) {
                    th = th4;
                    sQLiteCursor = null;
                    if (sQLiteCursor != null) {
                    }
                    throw th;
                }
            }
            if (!longSparseArray.isEmpty()) {
                int size = longSparseArray.size();
                int i9 = 0;
                while (i9 < size) {
                    long keyAt = longSparseArray.keyAt(i9);
                    TLRPC$Message tLRPC$Message3 = (TLRPC$Message) longSparseArray.valueAt(i9);
                    SQLiteDatabase sQLiteDatabase = messagesStorage.database;
                    Locale locale = Locale.US;
                    Object[] objArr = new Object[i];
                    ?? r1 = 0;
                    objArr[0] = Integer.valueOf(tLRPC$Message3.id);
                    objArr[1] = Long.valueOf(keyAt);
                    SQLiteCursor queryFinalized3 = sQLiteDatabase.queryFinalized(String.format(locale, "SELECT data, mid, date, uid FROM messages_v2 WHERE mid = %d and uid = %d", objArr), new Object[0]);
                    while (queryFinalized3.next()) {
                        NativeByteBuffer byteBufferValue5 = queryFinalized3.byteBufferValue(r1);
                        if (byteBufferValue5 != null) {
                            TLRPC$Message TLdeserialize5 = TLRPC$Message.TLdeserialize(byteBufferValue5, byteBufferValue5.readInt32(r1), r1);
                            TLdeserialize5.readAttachPath(byteBufferValue5, getUserConfig().clientUserId);
                            byteBufferValue5.reuse();
                            TLdeserialize5.id = queryFinalized3.intValue(1);
                            TLdeserialize5.date = queryFinalized3.intValue(2);
                            TLdeserialize5.dialog_id = queryFinalized3.longValue(3);
                            addUsersAndChatsFromMessage(TLdeserialize5, arrayList5, arrayList2, null);
                            tLRPC$Message3.replyMessage = TLdeserialize5;
                            TLdeserialize5.dialog_id = tLRPC$Message3.dialog_id;
                        }
                        arrayList5 = arrayList;
                        r1 = 0;
                    }
                    queryFinalized3.dispose();
                    i9++;
                    messagesStorage = this;
                    arrayList5 = arrayList;
                    i = 2;
                }
            }
            if (queryFinalized != null) {
                queryFinalized.dispose();
            }
            return tLRPC$TL_messages_dialogs;
        } catch (Exception e7) {
            e = e7;
            sQLiteCursor = null;
        } catch (Throwable th5) {
            th = th5;
            sQLiteCursor = null;
        }
    }

    private void loadDialogFilters() {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda10
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$loadDialogFilters$49();
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:101:0x0261  */
    /* JADX WARN: Removed duplicated region for block: B:126:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:93:0x0250  */
    /* JADX WARN: Removed duplicated region for block: B:95:0x0255  */
    /* JADX WARN: Removed duplicated region for block: B:99:0x025c  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$loadDialogFilters$49() {
        SQLiteCursor sQLiteCursor;
        SQLitePreparedStatement sQLitePreparedStatement;
        TLRPC$messages_Dialogs tLRPC$TL_messages_dialogs;
        SQLiteCursor queryFinalized;
        try {
            ArrayList<Long> arrayList = new ArrayList<>();
            ArrayList<Long> arrayList2 = new ArrayList<>();
            ArrayList<Integer> arrayList3 = new ArrayList<>();
            ArrayList arrayList4 = new ArrayList();
            SparseArray sparseArray = new SparseArray();
            arrayList.add(Long.valueOf(getUserConfig().getClientUserId()));
            int i = 0;
            SQLiteCursor queryFinalized2 = this.database.queryFinalized("SELECT id, ord, unread_count, flags, title FROM dialog_filter WHERE 1", new Object[0]);
            boolean z = false;
            boolean z2 = false;
            while (true) {
                try {
                    if (!queryFinalized2.next()) {
                        break;
                    }
                    MessagesController.DialogFilter dialogFilter = new MessagesController.DialogFilter();
                    dialogFilter.id = queryFinalized2.intValue(i);
                    dialogFilter.order = queryFinalized2.intValue(1);
                    dialogFilter.unreadCount = -1;
                    dialogFilter.pendingUnreadCount = -1;
                    dialogFilter.flags = queryFinalized2.intValue(3);
                    dialogFilter.name = queryFinalized2.stringValue(4);
                    this.dialogFilters.add(dialogFilter);
                    this.dialogFiltersMap.put(dialogFilter.id, dialogFilter);
                    sparseArray.put(dialogFilter.id, dialogFilter);
                    if (dialogFilter.pendingUnreadCount < 0) {
                        z2 = true;
                    }
                    int i2 = 0;
                    for (int i3 = 2; i2 < i3; i3 = 2) {
                        if (i2 == 0) {
                            queryFinalized = this.database.queryFinalized("SELECT peer, pin FROM dialog_filter_pin_v2 WHERE id = " + dialogFilter.id, new Object[i]);
                        } else {
                            queryFinalized = this.database.queryFinalized("SELECT peer FROM dialog_filter_ep WHERE id = " + dialogFilter.id, new Object[i]);
                        }
                        while (queryFinalized.next()) {
                            long longValue = queryFinalized.longValue(i);
                            if (i2 == 0) {
                                if (!DialogObject.isEncryptedDialog(longValue)) {
                                    dialogFilter.alwaysShow.add(Long.valueOf(longValue));
                                }
                                int intValue = queryFinalized.intValue(1);
                                if (intValue != Integer.MIN_VALUE) {
                                    dialogFilter.pinnedDialogs.put(longValue, intValue);
                                    if (!arrayList4.contains(Long.valueOf(longValue))) {
                                        arrayList4.add(Long.valueOf(longValue));
                                    }
                                }
                            } else if (!DialogObject.isEncryptedDialog(longValue)) {
                                dialogFilter.neverShow.add(Long.valueOf(longValue));
                            }
                            if (DialogObject.isChatDialog(longValue)) {
                                long j = -longValue;
                                if (!arrayList2.contains(Long.valueOf(j))) {
                                    arrayList2.add(Long.valueOf(j));
                                }
                            } else if (DialogObject.isUserDialog(longValue)) {
                                if (!arrayList.contains(Long.valueOf(longValue))) {
                                    arrayList.add(Long.valueOf(longValue));
                                }
                            } else {
                                int encryptedChatId = DialogObject.getEncryptedChatId(longValue);
                                if (!arrayList3.contains(Integer.valueOf(encryptedChatId))) {
                                    arrayList3.add(Integer.valueOf(encryptedChatId));
                                }
                            }
                            i = 0;
                        }
                        queryFinalized.dispose();
                        i2++;
                        i = 0;
                    }
                    if (dialogFilter.id == 0) {
                        z = true;
                    }
                    i = 0;
                } catch (Exception e) {
                    e = e;
                    sQLiteCursor = queryFinalized2;
                    sQLitePreparedStatement = null;
                    try {
                        checkSQLException(e);
                        if (sQLiteCursor != null) {
                            sQLiteCursor.dispose();
                        }
                        if (sQLitePreparedStatement == null) {
                            sQLitePreparedStatement.dispose();
                            return;
                        }
                        return;
                    } catch (Throwable th) {
                        th = th;
                        if (sQLiteCursor != null) {
                            sQLiteCursor.dispose();
                        }
                        if (sQLitePreparedStatement != null) {
                            sQLitePreparedStatement.dispose();
                        }
                        throw th;
                    }
                } catch (Throwable th2) {
                    th = th2;
                    sQLiteCursor = queryFinalized2;
                    sQLitePreparedStatement = null;
                    if (sQLiteCursor != null) {
                    }
                    if (sQLitePreparedStatement != null) {
                    }
                    throw th;
                }
            }
            queryFinalized2.dispose();
            if (!z) {
                MessagesController.DialogFilter dialogFilter2 = new MessagesController.DialogFilter();
                dialogFilter2.id = 0;
                dialogFilter2.order = 0;
                dialogFilter2.name = "ALL_CHATS";
                for (int i4 = 0; i4 < this.dialogFilters.size(); i4++) {
                    this.dialogFilters.get(i4).order++;
                }
                this.dialogFilters.add(dialogFilter2);
                this.dialogFiltersMap.put(dialogFilter2.id, dialogFilter2);
                sparseArray.put(dialogFilter2.id, dialogFilter2);
                SQLitePreparedStatement executeFast = this.database.executeFast("REPLACE INTO dialog_filter VALUES(?, ?, ?, ?, ?)");
                try {
                    executeFast.bindInteger(1, dialogFilter2.id);
                    executeFast.bindInteger(2, dialogFilter2.order);
                    executeFast.bindInteger(3, dialogFilter2.unreadCount);
                    executeFast.bindInteger(4, dialogFilter2.flags);
                    executeFast.bindString(5, dialogFilter2.name);
                    executeFast.stepThis().dispose();
                } catch (Exception e2) {
                    e = e2;
                    sQLitePreparedStatement = executeFast;
                    sQLiteCursor = null;
                    checkSQLException(e);
                    if (sQLiteCursor != null) {
                    }
                    if (sQLitePreparedStatement == null) {
                    }
                } catch (Throwable th3) {
                    th = th3;
                    sQLitePreparedStatement = executeFast;
                    sQLiteCursor = null;
                    if (sQLiteCursor != null) {
                    }
                    if (sQLitePreparedStatement != null) {
                    }
                    throw th;
                }
            }
            Collections.sort(this.dialogFilters, MessagesStorage$$ExternalSyntheticLambda213.INSTANCE);
            if (z2) {
                calcUnreadCounters(true);
            }
            if (!arrayList4.isEmpty()) {
                tLRPC$TL_messages_dialogs = loadDialogsByIds(TextUtils.join(",", arrayList4), arrayList, arrayList2, arrayList3);
            } else {
                tLRPC$TL_messages_dialogs = new TLRPC$TL_messages_dialogs();
            }
            TLRPC$messages_Dialogs tLRPC$messages_Dialogs = tLRPC$TL_messages_dialogs;
            ArrayList<TLRPC$User> arrayList5 = new ArrayList<>();
            ArrayList<TLRPC$Chat> arrayList6 = new ArrayList<>();
            ArrayList<TLRPC$EncryptedChat> arrayList7 = new ArrayList<>();
            if (!arrayList3.isEmpty()) {
                getEncryptedChatsInternal(TextUtils.join(",", arrayList3), arrayList7, arrayList);
            }
            if (!arrayList.isEmpty()) {
                getUsersInternal(TextUtils.join(",", arrayList), arrayList5);
            }
            if (!arrayList2.isEmpty()) {
                getChatsInternal(TextUtils.join(",", arrayList2), arrayList6);
            }
            getMessagesController().processLoadedDialogFilters(new ArrayList<>(this.dialogFilters), tLRPC$messages_Dialogs, null, arrayList5, arrayList6, arrayList7, 0);
        } catch (Exception e3) {
            e = e3;
            sQLiteCursor = null;
        } catch (Throwable th4) {
            th = th4;
            sQLiteCursor = null;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ int lambda$loadDialogFilters$48(MessagesController.DialogFilter dialogFilter, MessagesController.DialogFilter dialogFilter2) {
        int i = dialogFilter.order;
        int i2 = dialogFilter2.order;
        if (i > i2) {
            return 1;
        }
        return i < i2 ? -1 : 0;
    }

    /* JADX WARN: Code restructure failed: missing block: B:243:0x04fc, code lost:
        if (r13.indexOfKey(r6.id) >= 0) goto L264;
     */
    /* JADX WARN: Code restructure failed: missing block: B:292:0x05c1, code lost:
        if (r20 == 0) goto L336;
     */
    /* JADX WARN: Removed duplicated region for block: B:101:0x02a5 A[Catch: all -> 0x069e, Exception -> 0x06a2, TryCatch #5 {Exception -> 0x06a2, all -> 0x069e, blocks: (B:7:0x000a, B:8:0x002b, B:9:0x002e, B:46:0x0120, B:49:0x0148, B:51:0x0156, B:53:0x017b, B:57:0x018a, B:58:0x0191, B:60:0x0195, B:68:0x01be, B:61:0x01a0, B:63:0x01a4, B:66:0x01a9, B:67:0x01b4, B:69:0x01d2, B:71:0x01e0, B:73:0x01f7, B:75:0x0207, B:76:0x0219, B:78:0x0222, B:96:0x0291, B:81:0x0237, B:83:0x024f, B:87:0x025e, B:88:0x0265, B:90:0x0269, B:93:0x026e, B:95:0x0283, B:94:0x0279, B:99:0x029f, B:101:0x02a5, B:103:0x02b7, B:105:0x02c3, B:108:0x02ca, B:110:0x02df, B:115:0x02ef, B:118:0x02fa, B:119:0x0302, B:121:0x0308, B:123:0x030c, B:125:0x0321, B:127:0x033b, B:124:0x0317, B:126:0x0329, B:128:0x0341, B:129:0x034a, B:132:0x0350, B:135:0x0361, B:145:0x037b, B:147:0x0380, B:149:0x0385, B:151:0x0392, B:154:0x039c, B:156:0x03a1, B:158:0x03af, B:160:0x03b6, B:162:0x03bb, B:164:0x03c0, B:166:0x03cd, B:167:0x03d3, B:169:0x03d8, B:171:0x03e6, B:172:0x03eb, B:174:0x03f0, B:176:0x03f5, B:178:0x0402, B:179:0x0408, B:181:0x040d, B:183:0x041b, B:184:0x0420, B:186:0x0425, B:188:0x042a, B:190:0x0437, B:191:0x043d, B:193:0x0442, B:195:0x0450, B:196:0x0455, B:198:0x045a, B:200:0x045f, B:202:0x046c, B:203:0x0472, B:205:0x0477, B:207:0x0485, B:210:0x048e, B:212:0x0497, B:219:0x04b7, B:226:0x04d0, B:228:0x04d4, B:236:0x04e5, B:238:0x04e8, B:252:0x0517, B:240:0x04ee, B:242:0x04f3, B:244:0x04fe, B:246:0x0504, B:248:0x0509, B:229:0x04d7, B:231:0x04db, B:234:0x04e0, B:235:0x04e3, B:223:0x04c6, B:277:0x0574, B:254:0x0526, B:256:0x0536, B:258:0x053c, B:260:0x0540, B:262:0x0545, B:264:0x0548, B:265:0x054b, B:267:0x0550, B:269:0x0559, B:272:0x0565, B:274:0x056a, B:261:0x0543, B:278:0x0580, B:280:0x058c, B:287:0x05ab, B:294:0x05c6, B:296:0x05ca, B:304:0x05db, B:319:0x0607, B:306:0x05de, B:308:0x05e3, B:312:0x05f2, B:314:0x05f7, B:316:0x05ff, B:297:0x05cd, B:299:0x05d1, B:302:0x05d6, B:303:0x05d9, B:291:0x05ba, B:342:0x0661, B:321:0x0616, B:323:0x0626, B:325:0x062c, B:327:0x0630, B:329:0x0635, B:331:0x0638, B:333:0x063d, B:335:0x0646, B:337:0x064b, B:339:0x0654, B:341:0x065f, B:328:0x0633, B:343:0x066a, B:345:0x0671, B:349:0x067c, B:351:0x0680, B:352:0x0683, B:354:0x0687, B:356:0x068b, B:136:0x0364, B:138:0x0368, B:140:0x0370, B:141:0x0373, B:142:0x0375, B:143:0x0377), top: B:384:0x000a }] */
    /* JADX WARN: Removed duplicated region for block: B:131:0x034e  */
    /* JADX WARN: Removed duplicated region for block: B:210:0x048e A[Catch: all -> 0x069e, Exception -> 0x06a2, TryCatch #5 {Exception -> 0x06a2, all -> 0x069e, blocks: (B:7:0x000a, B:8:0x002b, B:9:0x002e, B:46:0x0120, B:49:0x0148, B:51:0x0156, B:53:0x017b, B:57:0x018a, B:58:0x0191, B:60:0x0195, B:68:0x01be, B:61:0x01a0, B:63:0x01a4, B:66:0x01a9, B:67:0x01b4, B:69:0x01d2, B:71:0x01e0, B:73:0x01f7, B:75:0x0207, B:76:0x0219, B:78:0x0222, B:96:0x0291, B:81:0x0237, B:83:0x024f, B:87:0x025e, B:88:0x0265, B:90:0x0269, B:93:0x026e, B:95:0x0283, B:94:0x0279, B:99:0x029f, B:101:0x02a5, B:103:0x02b7, B:105:0x02c3, B:108:0x02ca, B:110:0x02df, B:115:0x02ef, B:118:0x02fa, B:119:0x0302, B:121:0x0308, B:123:0x030c, B:125:0x0321, B:127:0x033b, B:124:0x0317, B:126:0x0329, B:128:0x0341, B:129:0x034a, B:132:0x0350, B:135:0x0361, B:145:0x037b, B:147:0x0380, B:149:0x0385, B:151:0x0392, B:154:0x039c, B:156:0x03a1, B:158:0x03af, B:160:0x03b6, B:162:0x03bb, B:164:0x03c0, B:166:0x03cd, B:167:0x03d3, B:169:0x03d8, B:171:0x03e6, B:172:0x03eb, B:174:0x03f0, B:176:0x03f5, B:178:0x0402, B:179:0x0408, B:181:0x040d, B:183:0x041b, B:184:0x0420, B:186:0x0425, B:188:0x042a, B:190:0x0437, B:191:0x043d, B:193:0x0442, B:195:0x0450, B:196:0x0455, B:198:0x045a, B:200:0x045f, B:202:0x046c, B:203:0x0472, B:205:0x0477, B:207:0x0485, B:210:0x048e, B:212:0x0497, B:219:0x04b7, B:226:0x04d0, B:228:0x04d4, B:236:0x04e5, B:238:0x04e8, B:252:0x0517, B:240:0x04ee, B:242:0x04f3, B:244:0x04fe, B:246:0x0504, B:248:0x0509, B:229:0x04d7, B:231:0x04db, B:234:0x04e0, B:235:0x04e3, B:223:0x04c6, B:277:0x0574, B:254:0x0526, B:256:0x0536, B:258:0x053c, B:260:0x0540, B:262:0x0545, B:264:0x0548, B:265:0x054b, B:267:0x0550, B:269:0x0559, B:272:0x0565, B:274:0x056a, B:261:0x0543, B:278:0x0580, B:280:0x058c, B:287:0x05ab, B:294:0x05c6, B:296:0x05ca, B:304:0x05db, B:319:0x0607, B:306:0x05de, B:308:0x05e3, B:312:0x05f2, B:314:0x05f7, B:316:0x05ff, B:297:0x05cd, B:299:0x05d1, B:302:0x05d6, B:303:0x05d9, B:291:0x05ba, B:342:0x0661, B:321:0x0616, B:323:0x0626, B:325:0x062c, B:327:0x0630, B:329:0x0635, B:331:0x0638, B:333:0x063d, B:335:0x0646, B:337:0x064b, B:339:0x0654, B:341:0x065f, B:328:0x0633, B:343:0x066a, B:345:0x0671, B:349:0x067c, B:351:0x0680, B:352:0x0683, B:354:0x0687, B:356:0x068b, B:136:0x0364, B:138:0x0368, B:140:0x0370, B:141:0x0373, B:142:0x0375, B:143:0x0377), top: B:384:0x000a }] */
    /* JADX WARN: Removed duplicated region for block: B:347:0x0677  */
    /* JADX WARN: Removed duplicated region for block: B:370:0x06aa  */
    /* JADX WARN: Removed duplicated region for block: B:375:0x06b2  */
    /* JADX WARN: Removed duplicated region for block: B:441:? A[RETURN, SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void calcUnreadCounters(boolean z) {
        Throwable th;
        SQLiteCursor sQLiteCursor;
        Exception exc;
        int i;
        LongSparseArray longSparseArray;
        LongSparseArray longSparseArray2;
        int size;
        int i2;
        int i3;
        int i4;
        MessagesController.DialogFilter dialogFilter;
        int i5;
        int i6;
        LongSparseArray longSparseArray3;
        int i7;
        int i8;
        int i9;
        int i10;
        int i11;
        int i12;
        int i13;
        int i14;
        int i15;
        int i16;
        MessagesController.DialogFilter dialogFilter2;
        int i17;
        LongSparseArray longSparseArray4;
        int i18;
        int i19;
        MessagesController.DialogFilter dialogFilter3;
        LongSparseArray longSparseArray5;
        int i20;
        int i21;
        int i22;
        LongSparseArray longSparseArray6;
        TLRPC$EncryptedChat tLRPC$EncryptedChat;
        LongSparseArray longSparseArray7;
        int i23;
        ArrayList arrayList;
        int intValue;
        int intValue2;
        LongSparseIntArray longSparseIntArray;
        int i24 = 0;
        for (int i25 = 0; i25 < 2; i25++) {
            for (int i26 = 0; i26 < 2; i26++) {
                try {
                    int[] iArr = this.contacts[i25];
                    int[] iArr2 = this.nonContacts[i25];
                    int[] iArr3 = this.bots[i25];
                    int[] iArr4 = this.channels[i25];
                    this.groups[i25][i26] = 0;
                    iArr4[i26] = 0;
                    iArr3[i26] = 0;
                    iArr2[i26] = 0;
                    iArr[i26] = 0;
                } catch (Exception e) {
                    exc = e;
                    sQLiteCursor = null;
                    checkSQLException(exc);
                    if (sQLiteCursor == null) {
                    }
                } catch (Throwable th2) {
                    th = th2;
                    sQLiteCursor = null;
                    if (sQLiteCursor != null) {
                    }
                    throw th;
                }
            }
        }
        this.dialogsWithMentions.clear();
        this.dialogsWithUnread.clear();
        ArrayList<TLRPC$User> arrayList2 = new ArrayList<>();
        ArrayList<TLRPC$User> arrayList3 = new ArrayList<>();
        ArrayList<TLRPC$Chat> arrayList4 = new ArrayList<>();
        ArrayList arrayList5 = new ArrayList();
        ArrayList arrayList6 = new ArrayList();
        ArrayList arrayList7 = new ArrayList();
        LongSparseIntArray longSparseIntArray2 = new LongSparseIntArray();
        LongSparseIntArray longSparseIntArray3 = new LongSparseIntArray();
        SQLiteCursor queryFinalized = this.database.queryFinalized("SELECT DISTINCT did FROM topics WHERE unread_count > 0 OR unread_mentions > 0", new Object[0]);
        while (true) {
            try {
                i = 1;
                if (!queryFinalized.next()) {
                    break;
                }
                long longValue = queryFinalized.longValue(0);
                if (isForum(longValue)) {
                    longSparseIntArray3.put(longValue, 1);
                }
            } catch (Exception e2) {
                exc = e2;
                sQLiteCursor = queryFinalized;
            } catch (Throwable th3) {
                th = th3;
                sQLiteCursor = queryFinalized;
                if (sQLiteCursor != null) {
                }
                throw th;
            }
        }
        sQLiteCursor = this.database.queryFinalized("SELECT did, folder_id, unread_count, unread_count_i FROM dialogs WHERE unread_count > 0 OR flags > 0 UNION ALL SELECT did, folder_id, unread_count, unread_count_i FROM dialogs WHERE unread_count_i > 0", new Object[0]);
        while (sQLiteCursor.next()) {
            try {
                try {
                    int intValue3 = sQLiteCursor.intValue(i);
                    long longValue2 = sQLiteCursor.longValue(i24);
                    if (isForum(longValue2)) {
                        int i27 = longSparseIntArray3.get(longValue2, i24);
                        if (i27 != 0) {
                            intValue = i27;
                            intValue2 = 0;
                        }
                    } else {
                        intValue = sQLiteCursor.intValue(2);
                        intValue2 = sQLiteCursor.intValue(3);
                    }
                    if (intValue > 0) {
                        longSparseIntArray = longSparseIntArray3;
                        this.dialogsWithUnread.put(longValue2, Integer.valueOf(intValue));
                    } else {
                        longSparseIntArray = longSparseIntArray3;
                    }
                    if (intValue2 > 0) {
                        this.dialogsWithMentions.put(longValue2, Integer.valueOf(intValue2));
                    }
                    longSparseIntArray2.put(longValue2, intValue3);
                    if (DialogObject.isEncryptedDialog(longValue2)) {
                        int encryptedChatId = DialogObject.getEncryptedChatId(longValue2);
                        if (!arrayList7.contains(Integer.valueOf(encryptedChatId))) {
                            arrayList7.add(Integer.valueOf(encryptedChatId));
                        }
                    } else if (DialogObject.isUserDialog(longValue2)) {
                        if (!arrayList5.contains(Long.valueOf(longValue2))) {
                            arrayList5.add(Long.valueOf(longValue2));
                        }
                    } else {
                        long j = -longValue2;
                        if (!arrayList6.contains(Long.valueOf(j))) {
                            arrayList6.add(Long.valueOf(j));
                        }
                    }
                    longSparseIntArray3 = longSparseIntArray;
                    i24 = 0;
                    i = 1;
                } catch (Exception e3) {
                    exc = e3;
                    checkSQLException(exc);
                    if (sQLiteCursor == null) {
                        sQLiteCursor.dispose();
                        return;
                    }
                    return;
                }
            } catch (Throwable th4) {
                th = th4;
                if (sQLiteCursor != null) {
                    sQLiteCursor.dispose();
                }
                throw th;
            }
        }
        sQLiteCursor.dispose();
        LongSparseArray longSparseArray8 = new LongSparseArray();
        LongSparseArray longSparseArray9 = new LongSparseArray();
        LongSparseArray longSparseArray10 = new LongSparseArray();
        LongSparseIntArray longSparseIntArray4 = new LongSparseIntArray();
        LongSparseArray longSparseArray11 = new LongSparseArray();
        LongSparseArray longSparseArray12 = new LongSparseArray();
        LongSparseArray longSparseArray13 = longSparseArray9;
        if (!arrayList5.isEmpty()) {
            getUsersInternal(TextUtils.join(",", arrayList5), arrayList2);
            int size2 = arrayList2.size();
            int i28 = 0;
            while (i28 < size2) {
                ArrayList<TLRPC$User> arrayList8 = arrayList2;
                TLRPC$User tLRPC$User = arrayList2.get(i28);
                int i29 = size2;
                LongSparseArray longSparseArray14 = longSparseArray10;
                ArrayList<TLRPC$User> arrayList9 = arrayList3;
                ArrayList<TLRPC$Chat> arrayList10 = arrayList4;
                boolean isDialogMuted = getMessagesController().isDialogMuted(tLRPC$User.id, 0);
                int i30 = longSparseIntArray2.get(tLRPC$User.id);
                if (isDialogMuted) {
                    arrayList = arrayList6;
                    longSparseArray11.put(tLRPC$User.id, Boolean.TRUE);
                } else {
                    arrayList = arrayList6;
                }
                if (i30 == 1) {
                    longSparseArray12.put(tLRPC$User.id, Boolean.TRUE);
                }
                if (tLRPC$User.bot) {
                    int[] iArr5 = this.bots[i30];
                    iArr5[isDialogMuted ? 1 : 0] = iArr5[isDialogMuted ? 1 : 0] + 1;
                } else {
                    if (!tLRPC$User.self && !tLRPC$User.contact) {
                        int[] iArr6 = this.nonContacts[i30];
                        iArr6[isDialogMuted ? 1 : 0] = iArr6[isDialogMuted ? 1 : 0] + 1;
                    }
                    int[] iArr7 = this.contacts[i30];
                    iArr7[isDialogMuted ? 1 : 0] = iArr7[isDialogMuted ? 1 : 0] + 1;
                }
                longSparseArray8.put(tLRPC$User.id, tLRPC$User);
                i28++;
                size2 = i29;
                arrayList2 = arrayList8;
                arrayList3 = arrayList9;
                longSparseArray10 = longSparseArray14;
                arrayList4 = arrayList10;
                arrayList6 = arrayList;
            }
        }
        LongSparseArray longSparseArray15 = longSparseArray10;
        ArrayList<TLRPC$User> arrayList11 = arrayList3;
        ArrayList<TLRPC$Chat> arrayList12 = arrayList4;
        ArrayList arrayList13 = arrayList6;
        if (!arrayList7.isEmpty()) {
            ArrayList<Long> arrayList14 = new ArrayList<>();
            ArrayList<TLRPC$EncryptedChat> arrayList15 = new ArrayList<>();
            getEncryptedChatsInternal(TextUtils.join(",", arrayList7), arrayList15, arrayList14);
            if (!arrayList14.isEmpty()) {
                getUsersInternal(TextUtils.join(",", arrayList14), arrayList11);
                int size3 = arrayList11.size();
                int i31 = 0;
                while (i31 < size3) {
                    TLRPC$User tLRPC$User2 = arrayList11.get(i31);
                    LongSparseArray longSparseArray16 = longSparseArray15;
                    longSparseArray16.put(tLRPC$User2.id, tLRPC$User2);
                    i31++;
                    longSparseArray15 = longSparseArray16;
                }
                longSparseArray2 = longSparseArray15;
                int i32 = 0;
                for (int size4 = arrayList15.size(); i32 < size4; size4 = i23) {
                    TLRPC$User tLRPC$User3 = (TLRPC$User) longSparseArray2.get(arrayList15.get(i32).user_id);
                    if (tLRPC$User3 == null) {
                        longSparseArray7 = longSparseArray8;
                        i23 = size4;
                    } else {
                        long makeEncryptedDialogId = DialogObject.makeEncryptedDialogId(tLRPC$EncryptedChat.id);
                        longSparseArray7 = longSparseArray8;
                        boolean isDialogMuted2 = getMessagesController().isDialogMuted(makeEncryptedDialogId, 0);
                        int i33 = longSparseIntArray2.get(makeEncryptedDialogId);
                        if (isDialogMuted2) {
                            i23 = size4;
                            longSparseArray11.put(tLRPC$User3.id, Boolean.TRUE);
                        } else {
                            i23 = size4;
                        }
                        if (i33 == 1) {
                            longSparseArray12.put(tLRPC$User3.id, Boolean.TRUE);
                        }
                        if (!tLRPC$User3.self && !tLRPC$User3.contact) {
                            int[] iArr8 = this.nonContacts[i33];
                            iArr8[isDialogMuted2 ? 1 : 0] = iArr8[isDialogMuted2 ? 1 : 0] + 1;
                            longSparseIntArray4.put(tLRPC$User3.id, longSparseIntArray4.get(tLRPC$User3.id, 0) + 1);
                        }
                        int[] iArr9 = this.contacts[i33];
                        iArr9[isDialogMuted2 ? 1 : 0] = iArr9[isDialogMuted2 ? 1 : 0] + 1;
                        longSparseIntArray4.put(tLRPC$User3.id, longSparseIntArray4.get(tLRPC$User3.id, 0) + 1);
                    }
                    i32++;
                    longSparseArray8 = longSparseArray7;
                }
                longSparseArray = longSparseArray8;
                if (!arrayList13.isEmpty()) {
                    getChatsInternal(TextUtils.join(",", arrayList13), arrayList12);
                    int size5 = arrayList12.size();
                    int i34 = 0;
                    while (i34 < size5) {
                        TLRPC$Chat tLRPC$Chat = arrayList12.get(i34);
                        if (!(tLRPC$Chat.migrated_to instanceof TLRPC$TL_inputChannel) && !ChatObject.isNotInChat(tLRPC$Chat)) {
                            boolean isDialogMuted3 = getMessagesController().isDialogMuted(-tLRPC$Chat.id, 0, tLRPC$Chat);
                            int i35 = longSparseIntArray2.get(-tLRPC$Chat.id);
                            char c = (!isDialogMuted3 || this.dialogsWithMentions.indexOfKey(-tLRPC$Chat.id) >= 0) ? (char) 0 : (char) 1;
                            if (isDialogMuted3) {
                                longSparseArray11.put(-tLRPC$Chat.id, Boolean.TRUE);
                            }
                            if (i35 == 1) {
                                longSparseArray12.put(-tLRPC$Chat.id, Boolean.TRUE);
                            }
                            if (ChatObject.isChannel(tLRPC$Chat) && !tLRPC$Chat.megagroup) {
                                int[] iArr10 = this.channels[i35];
                                iArr10[c] = iArr10[c] + 1;
                            } else {
                                int[] iArr11 = this.groups[i35];
                                iArr11[c] = iArr11[c] + 1;
                            }
                            longSparseArray6 = longSparseArray13;
                            longSparseArray6.put(tLRPC$Chat.id, tLRPC$Chat);
                            i34++;
                            longSparseArray13 = longSparseArray6;
                        }
                        longSparseArray6 = longSparseArray13;
                        this.dialogsWithUnread.remove(-tLRPC$Chat.id);
                        this.dialogsWithMentions.remove(-tLRPC$Chat.id);
                        i34++;
                        longSparseArray13 = longSparseArray6;
                    }
                }
                LongSparseArray longSparseArray17 = longSparseArray13;
                size = this.dialogFilters.size();
                i2 = 0;
                while (i2 < size + 2) {
                    if (i2 < size) {
                        dialogFilter = this.dialogFilters.get(i2);
                        if (dialogFilter.pendingUnreadCount >= 0) {
                            i6 = i2;
                            longSparseArray3 = longSparseArray2;
                            i2 = i6 + 1;
                            longSparseArray2 = longSparseArray3;
                        } else {
                            i4 = dialogFilter.flags;
                        }
                    } else {
                        int i36 = MessagesController.DIALOG_FILTER_FLAG_ALL_CHATS;
                        if (i2 == size) {
                            if (!getNotificationsController().showBadgeMuted) {
                                i36 |= MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED;
                            }
                            i3 = MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED;
                        } else {
                            i3 = MessagesController.DIALOG_FILTER_FLAG_ONLY_ARCHIVED;
                        }
                        i4 = i3 | i36;
                        dialogFilter = null;
                    }
                    if ((MessagesController.DIALOG_FILTER_FLAG_CONTACTS & i4) != 0) {
                        if ((MessagesController.DIALOG_FILTER_FLAG_ONLY_ARCHIVED & i4) == 0) {
                            int[][] iArr12 = this.contacts;
                            int i37 = iArr12[0][0] + 0;
                            i5 = (MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i4) == 0 ? iArr12[0][1] + i37 : i37;
                        } else {
                            i5 = 0;
                        }
                        if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED & i4) == 0) {
                            int[][] iArr13 = this.contacts;
                            i5 += iArr13[1][0];
                            if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i4) == 0) {
                                i5 += iArr13[1][1];
                            }
                        }
                    } else {
                        i5 = 0;
                    }
                    if ((MessagesController.DIALOG_FILTER_FLAG_NON_CONTACTS & i4) != 0) {
                        if ((MessagesController.DIALOG_FILTER_FLAG_ONLY_ARCHIVED & i4) == 0) {
                            int[][] iArr14 = this.nonContacts;
                            i5 += iArr14[0][0];
                            if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i4) == 0) {
                                i5 += iArr14[0][1];
                            }
                        }
                        if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED & i4) == 0) {
                            int[][] iArr15 = this.nonContacts;
                            i5 += iArr15[1][0];
                            if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i4) == 0) {
                                i5 += iArr15[1][1];
                            }
                        }
                    }
                    if ((MessagesController.DIALOG_FILTER_FLAG_GROUPS & i4) != 0) {
                        if ((MessagesController.DIALOG_FILTER_FLAG_ONLY_ARCHIVED & i4) == 0) {
                            int[][] iArr16 = this.groups;
                            i5 += iArr16[0][0];
                            if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i4) == 0) {
                                i5 += iArr16[0][1];
                            }
                        }
                        if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED & i4) == 0) {
                            int[][] iArr17 = this.groups;
                            i5 += iArr17[1][0];
                            if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i4) == 0) {
                                i5 += iArr17[1][1];
                            }
                        }
                    }
                    if ((MessagesController.DIALOG_FILTER_FLAG_CHANNELS & i4) != 0) {
                        if ((MessagesController.DIALOG_FILTER_FLAG_ONLY_ARCHIVED & i4) == 0) {
                            int[][] iArr18 = this.channels;
                            i5 += iArr18[0][0];
                            if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i4) == 0) {
                                i5 += iArr18[0][1];
                            }
                        }
                        if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED & i4) == 0) {
                            int[][] iArr19 = this.channels;
                            i5 += iArr19[1][0];
                            if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i4) == 0) {
                                i5 += iArr19[1][1];
                            }
                        }
                    }
                    if ((MessagesController.DIALOG_FILTER_FLAG_BOTS & i4) != 0) {
                        if ((MessagesController.DIALOG_FILTER_FLAG_ONLY_ARCHIVED & i4) == 0) {
                            int[][] iArr20 = this.bots;
                            i5 += iArr20[0][0];
                            if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i4) == 0) {
                                i5 += iArr20[0][1];
                            }
                        }
                        if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED & i4) == 0) {
                            int[][] iArr21 = this.bots;
                            i5 += iArr21[1][0];
                            if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i4) == 0) {
                                i5 += iArr21[1][1];
                            }
                            if (dialogFilter == null) {
                                int size6 = dialogFilter.alwaysShow.size();
                                int i38 = 0;
                                while (i38 < size6) {
                                    int i39 = i38;
                                    long longValue3 = dialogFilter.alwaysShow.get(i38).longValue();
                                    if (DialogObject.isUserDialog(longValue3)) {
                                        i17 = size6;
                                        int i40 = 0;
                                        for (int i41 = 2; i40 < i41; i41 = 2) {
                                            TLRPC$User tLRPC$User4 = (TLRPC$User) (i40 == 0 ? longSparseArray : longSparseArray2).get(longValue3);
                                            if (tLRPC$User4 != null) {
                                                if (i40 == 0) {
                                                    longSparseArray5 = longSparseArray2;
                                                    i21 = 1;
                                                } else {
                                                    longSparseArray5 = longSparseArray2;
                                                    i21 = longSparseIntArray4.get(longValue3, 0);
                                                    if (i21 == 0) {
                                                        i20 = size;
                                                        dialogFilter3 = dialogFilter;
                                                    }
                                                }
                                                if (tLRPC$User4.bot) {
                                                    i22 = MessagesController.DIALOG_FILTER_FLAG_BOTS;
                                                } else {
                                                    if (!tLRPC$User4.self && !tLRPC$User4.contact) {
                                                        i22 = MessagesController.DIALOG_FILTER_FLAG_NON_CONTACTS;
                                                    }
                                                    i22 = MessagesController.DIALOG_FILTER_FLAG_CONTACTS;
                                                }
                                                if ((i22 & i4) == 0) {
                                                    i5 += i21;
                                                    i20 = size;
                                                    dialogFilter3 = dialogFilter;
                                                } else {
                                                    if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i4) != 0) {
                                                        i20 = size;
                                                        dialogFilter3 = dialogFilter;
                                                    } else {
                                                        i20 = size;
                                                        dialogFilter3 = dialogFilter;
                                                    }
                                                    if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED & i4) != 0 && longSparseArray12.indexOfKey(tLRPC$User4.id) >= 0) {
                                                        i5 += i21;
                                                    }
                                                }
                                            } else {
                                                dialogFilter3 = dialogFilter;
                                                longSparseArray5 = longSparseArray2;
                                                i20 = size;
                                            }
                                            i40++;
                                            size = i20;
                                            longSparseArray2 = longSparseArray5;
                                            dialogFilter = dialogFilter3;
                                        }
                                        dialogFilter2 = dialogFilter;
                                        longSparseArray4 = longSparseArray2;
                                        i18 = size;
                                    } else {
                                        dialogFilter2 = dialogFilter;
                                        i17 = size6;
                                        longSparseArray4 = longSparseArray2;
                                        i18 = size;
                                        TLRPC$Chat tLRPC$Chat2 = (TLRPC$Chat) longSparseArray17.get(-longValue3);
                                        if (tLRPC$Chat2 != null) {
                                            if (ChatObject.isChannel(tLRPC$Chat2) && !tLRPC$Chat2.megagroup) {
                                                i19 = MessagesController.DIALOG_FILTER_FLAG_CHANNELS;
                                            } else {
                                                i19 = MessagesController.DIALOG_FILTER_FLAG_GROUPS;
                                            }
                                            if ((i19 & i4) != 0) {
                                                if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i4) != 0) {
                                                    if (longSparseArray11.indexOfKey(-tLRPC$Chat2.id) >= 0 && this.dialogsWithMentions.indexOfKey(-tLRPC$Chat2.id) < 0) {
                                                    }
                                                }
                                                if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED & i4) != 0 && longSparseArray12.indexOfKey(-tLRPC$Chat2.id) >= 0) {
                                                }
                                            }
                                            i5++;
                                        }
                                    }
                                    i38 = i39 + 1;
                                    size = i18;
                                    size6 = i17;
                                    longSparseArray2 = longSparseArray4;
                                    dialogFilter = dialogFilter2;
                                }
                                longSparseArray3 = longSparseArray2;
                                int i42 = size;
                                int size7 = dialogFilter.neverShow.size();
                                int i43 = 0;
                                while (i43 < size7) {
                                    long longValue4 = dialogFilter.neverShow.get(i43).longValue();
                                    if (DialogObject.isUserDialog(longValue4)) {
                                        i7 = size7;
                                        int i44 = 0;
                                        for (int i45 = 2; i44 < i45; i45 = 2) {
                                            TLRPC$User tLRPC$User5 = (TLRPC$User) (i44 == 0 ? longSparseArray : longSparseArray3).get(longValue4);
                                            if (tLRPC$User5 != null) {
                                                if (i44 == 0) {
                                                    i13 = i42;
                                                    i15 = 1;
                                                } else {
                                                    i13 = i42;
                                                    i15 = longSparseIntArray4.get(longValue4, 0);
                                                }
                                                if (tLRPC$User5.bot) {
                                                    i16 = MessagesController.DIALOG_FILTER_FLAG_BOTS;
                                                } else {
                                                    if (!tLRPC$User5.self && !tLRPC$User5.contact) {
                                                        i16 = MessagesController.DIALOG_FILTER_FLAG_NON_CONTACTS;
                                                    }
                                                    i16 = MessagesController.DIALOG_FILTER_FLAG_CONTACTS;
                                                }
                                                if ((i16 & i4) != 0) {
                                                    if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED & i4) != 0) {
                                                        i12 = i43;
                                                        i14 = i2;
                                                        if (longSparseArray12.indexOfKey(tLRPC$User5.id) >= 0) {
                                                            i44++;
                                                            i2 = i14;
                                                            i42 = i13;
                                                            i43 = i12;
                                                        }
                                                    } else {
                                                        i12 = i43;
                                                        i14 = i2;
                                                    }
                                                    if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i4) == 0 || longSparseArray11.indexOfKey(tLRPC$User5.id) < 0) {
                                                        i5 -= i15;
                                                    }
                                                    i44++;
                                                    i2 = i14;
                                                    i42 = i13;
                                                    i43 = i12;
                                                }
                                                i12 = i43;
                                            } else {
                                                i12 = i43;
                                                i13 = i42;
                                            }
                                            i14 = i2;
                                            i44++;
                                            i2 = i14;
                                            i42 = i13;
                                            i43 = i12;
                                        }
                                        i8 = i43;
                                        i9 = i42;
                                        i10 = i2;
                                    } else {
                                        i7 = size7;
                                        i8 = i43;
                                        i9 = i42;
                                        i10 = i2;
                                        TLRPC$Chat tLRPC$Chat3 = (TLRPC$Chat) longSparseArray17.get(-longValue4);
                                        if (tLRPC$Chat3 != null) {
                                            if (ChatObject.isChannel(tLRPC$Chat3) && !tLRPC$Chat3.megagroup) {
                                                i11 = MessagesController.DIALOG_FILTER_FLAG_CHANNELS;
                                            } else {
                                                i11 = MessagesController.DIALOG_FILTER_FLAG_GROUPS;
                                            }
                                            if ((i11 & i4) != 0 && (((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED & i4) == 0 || longSparseArray12.indexOfKey(-tLRPC$Chat3.id) < 0) && ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i4) == 0 || longSparseArray11.indexOfKey(-tLRPC$Chat3.id) < 0 || this.dialogsWithMentions.indexOfKey(-tLRPC$Chat3.id) >= 0))) {
                                                i5--;
                                            }
                                        }
                                    }
                                    i43 = i8 + 1;
                                    i2 = i10;
                                    size7 = i7;
                                    i42 = i9;
                                }
                                int i46 = i42;
                                int i47 = i2;
                                dialogFilter.pendingUnreadCount = i5;
                                if (z) {
                                    dialogFilter.unreadCount = i5;
                                }
                                i6 = i47;
                                size = i46;
                            } else {
                                i6 = i2;
                                longSparseArray3 = longSparseArray2;
                                if (i6 == size) {
                                    this.pendingMainUnreadCount = i5;
                                    if (z) {
                                        this.mainUnreadCount = i5;
                                    }
                                } else if (i6 == size + 1) {
                                    this.pendingArchiveUnreadCount = i5;
                                    if (z) {
                                        this.archiveUnreadCount = i5;
                                    }
                                }
                            }
                            i2 = i6 + 1;
                            longSparseArray2 = longSparseArray3;
                        }
                    }
                    if (dialogFilter == null) {
                    }
                    i2 = i6 + 1;
                    longSparseArray2 = longSparseArray3;
                }
            }
        }
        longSparseArray = longSparseArray8;
        longSparseArray2 = longSparseArray15;
        if (!arrayList13.isEmpty()) {
        }
        LongSparseArray longSparseArray172 = longSparseArray13;
        size = this.dialogFilters.size();
        i2 = 0;
        while (i2 < size + 2) {
        }
    }

    private void saveDialogFilterInternal(MessagesController.DialogFilter dialogFilter, boolean z, boolean z2) {
        int i;
        SQLitePreparedStatement executeFast;
        SQLitePreparedStatement sQLitePreparedStatement;
        SQLitePreparedStatement sQLitePreparedStatement2;
        SQLitePreparedStatement sQLitePreparedStatement3 = null;
        try {
            try {
                if (!this.dialogFilters.contains(dialogFilter)) {
                    if (z) {
                        this.dialogFilters.add(0, dialogFilter);
                    } else {
                        this.dialogFilters.add(dialogFilter);
                    }
                    this.dialogFiltersMap.put(dialogFilter.id, dialogFilter);
                }
                executeFast = this.database.executeFast("REPLACE INTO dialog_filter VALUES(?, ?, ?, ?, ?)");
            } catch (Exception e) {
                e = e;
            }
        } catch (Throwable th) {
            th = th;
        }
        try {
            executeFast.bindInteger(1, dialogFilter.id);
            executeFast.bindInteger(2, dialogFilter.order);
            executeFast.bindInteger(3, dialogFilter.unreadCount);
            executeFast.bindInteger(4, dialogFilter.flags);
            executeFast.bindString(5, dialogFilter.id == 0 ? "ALL_CHATS" : dialogFilter.name);
            executeFast.step();
            executeFast.dispose();
            if (z2) {
                SQLiteDatabase sQLiteDatabase = this.database;
                sQLiteDatabase.executeFast("DELETE FROM dialog_filter_ep WHERE id = " + dialogFilter.id).stepThis().dispose();
                SQLiteDatabase sQLiteDatabase2 = this.database;
                sQLiteDatabase2.executeFast("DELETE FROM dialog_filter_pin_v2 WHERE id = " + dialogFilter.id).stepThis().dispose();
                this.database.beginTransaction();
                SQLitePreparedStatement executeFast2 = this.database.executeFast("REPLACE INTO dialog_filter_pin_v2 VALUES(?, ?, ?)");
                int size = dialogFilter.alwaysShow.size();
                for (int i2 = 0; i2 < size; i2++) {
                    long longValue = dialogFilter.alwaysShow.get(i2).longValue();
                    executeFast2.requery();
                    executeFast2.bindInteger(1, dialogFilter.id);
                    executeFast2.bindLong(2, longValue);
                    executeFast2.bindInteger(3, dialogFilter.pinnedDialogs.get(longValue, Integer.MIN_VALUE));
                    executeFast2.step();
                }
                int size2 = dialogFilter.pinnedDialogs.size();
                for (int i3 = 0; i3 < size2; i3++) {
                    long keyAt = dialogFilter.pinnedDialogs.keyAt(i3);
                    if (DialogObject.isEncryptedDialog(keyAt)) {
                        executeFast2.requery();
                        executeFast2.bindInteger(1, dialogFilter.id);
                        executeFast2.bindLong(2, keyAt);
                        executeFast2.bindInteger(3, dialogFilter.pinnedDialogs.valueAt(i3));
                        executeFast2.step();
                    }
                }
                executeFast2.dispose();
                SQLitePreparedStatement executeFast3 = this.database.executeFast("REPLACE INTO dialog_filter_ep VALUES(?, ?)");
                int size3 = dialogFilter.neverShow.size();
                for (i = 0; i < size3; i++) {
                    executeFast3.requery();
                    executeFast3.bindInteger(1, dialogFilter.id);
                    executeFast3.bindLong(2, dialogFilter.neverShow.get(i).longValue());
                    executeFast3.step();
                }
                executeFast3.dispose();
                this.database.commitTransaction();
            }
            SQLiteDatabase sQLiteDatabase3 = this.database;
            if (sQLiteDatabase3 != null) {
                sQLiteDatabase3.commitTransaction();
            }
        } catch (Exception e2) {
            e = e2;
            sQLitePreparedStatement3 = sQLitePreparedStatement2;
            checkSQLException(e);
            SQLiteDatabase sQLiteDatabase4 = this.database;
            if (sQLiteDatabase4 != null) {
                sQLiteDatabase4.commitTransaction();
            }
            if (sQLitePreparedStatement3 != null) {
                sQLitePreparedStatement3.dispose();
            }
        } catch (Throwable th2) {
            th = th2;
            sQLitePreparedStatement3 = sQLitePreparedStatement;
            SQLiteDatabase sQLiteDatabase5 = this.database;
            if (sQLiteDatabase5 != null) {
                sQLiteDatabase5.commitTransaction();
            }
            if (sQLitePreparedStatement3 != null) {
                sQLitePreparedStatement3.dispose();
            }
            throw th;
        }
    }

    public void checkLoadedRemoteFilters(final TLRPC$Vector tLRPC$Vector) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda192
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$checkLoadedRemoteFilters$51(tLRPC$Vector);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:158:0x0382 A[Catch: Exception -> 0x05fc, TryCatch #1 {Exception -> 0x05fc, blocks: (B:10:0x0064, B:15:0x0087, B:19:0x008e, B:23:0x0095, B:27:0x009c, B:31:0x00a3, B:35:0x00aa, B:39:0x00b1, B:43:0x00b8, B:45:0x00c8, B:47:0x00d9, B:49:0x00e0, B:51:0x00e4, B:53:0x00ea, B:55:0x0109, B:57:0x011d, B:60:0x012d, B:62:0x013b, B:64:0x0153, B:68:0x0177, B:67:0x0168, B:72:0x0189, B:74:0x0192, B:78:0x01ad, B:77:0x019f, B:83:0x01b8, B:87:0x01c1, B:90:0x01c8, B:92:0x01da, B:94:0x01ee, B:100:0x0201, B:102:0x0209, B:103:0x020e, B:106:0x0218, B:108:0x0224, B:111:0x024b, B:113:0x025e, B:115:0x0264, B:117:0x026c, B:95:0x01f3, B:99:0x01fc, B:98:0x01fa, B:120:0x028e, B:121:0x0296, B:123:0x029c, B:125:0x02c9, B:127:0x02d2, B:129:0x02de, B:131:0x02e8, B:133:0x02ee, B:134:0x02f1, B:136:0x02f7, B:154:0x0351, B:141:0x0310, B:145:0x031c, B:147:0x0331, B:149:0x0337, B:150:0x033a, B:152:0x0342, B:144:0x031a, B:155:0x035d, B:88:0x01c4, B:84:0x01bb, B:156:0x0373, B:158:0x0382, B:160:0x0395, B:162:0x039b, B:165:0x03ad, B:168:0x03b7, B:224:0x0503, B:171:0x03cd, B:175:0x03f3, B:177:0x03fc, B:179:0x040e, B:185:0x0421, B:187:0x0429, B:188:0x042e, B:190:0x044b, B:191:0x0451, B:180:0x0413, B:184:0x041c, B:183:0x041a, B:194:0x0469, B:197:0x0470, B:199:0x0475, B:201:0x047c, B:203:0x0488, B:205:0x0492, B:206:0x0495, B:208:0x049b, B:221:0x04de, B:210:0x04a9, B:214:0x04b2, B:216:0x04c8, B:217:0x04cb, B:219:0x04d3, B:213:0x04b0, B:222:0x04e8, B:198:0x0473, B:195:0x046c, B:223:0x04fa, B:225:0x0519, B:228:0x052e), top: B:259:0x0064 }] */
    /* JADX WARN: Removed duplicated region for block: B:159:0x0391  */
    /* JADX WARN: Removed duplicated region for block: B:162:0x039b A[Catch: Exception -> 0x05fc, TryCatch #1 {Exception -> 0x05fc, blocks: (B:10:0x0064, B:15:0x0087, B:19:0x008e, B:23:0x0095, B:27:0x009c, B:31:0x00a3, B:35:0x00aa, B:39:0x00b1, B:43:0x00b8, B:45:0x00c8, B:47:0x00d9, B:49:0x00e0, B:51:0x00e4, B:53:0x00ea, B:55:0x0109, B:57:0x011d, B:60:0x012d, B:62:0x013b, B:64:0x0153, B:68:0x0177, B:67:0x0168, B:72:0x0189, B:74:0x0192, B:78:0x01ad, B:77:0x019f, B:83:0x01b8, B:87:0x01c1, B:90:0x01c8, B:92:0x01da, B:94:0x01ee, B:100:0x0201, B:102:0x0209, B:103:0x020e, B:106:0x0218, B:108:0x0224, B:111:0x024b, B:113:0x025e, B:115:0x0264, B:117:0x026c, B:95:0x01f3, B:99:0x01fc, B:98:0x01fa, B:120:0x028e, B:121:0x0296, B:123:0x029c, B:125:0x02c9, B:127:0x02d2, B:129:0x02de, B:131:0x02e8, B:133:0x02ee, B:134:0x02f1, B:136:0x02f7, B:154:0x0351, B:141:0x0310, B:145:0x031c, B:147:0x0331, B:149:0x0337, B:150:0x033a, B:152:0x0342, B:144:0x031a, B:155:0x035d, B:88:0x01c4, B:84:0x01bb, B:156:0x0373, B:158:0x0382, B:160:0x0395, B:162:0x039b, B:165:0x03ad, B:168:0x03b7, B:224:0x0503, B:171:0x03cd, B:175:0x03f3, B:177:0x03fc, B:179:0x040e, B:185:0x0421, B:187:0x0429, B:188:0x042e, B:190:0x044b, B:191:0x0451, B:180:0x0413, B:184:0x041c, B:183:0x041a, B:194:0x0469, B:197:0x0470, B:199:0x0475, B:201:0x047c, B:203:0x0488, B:205:0x0492, B:206:0x0495, B:208:0x049b, B:221:0x04de, B:210:0x04a9, B:214:0x04b2, B:216:0x04c8, B:217:0x04cb, B:219:0x04d3, B:213:0x04b0, B:222:0x04e8, B:198:0x0473, B:195:0x046c, B:223:0x04fa, B:225:0x0519, B:228:0x052e), top: B:259:0x0064 }] */
    /* JADX WARN: Removed duplicated region for block: B:163:0x03a7  */
    /* JADX WARN: Removed duplicated region for block: B:165:0x03ad A[Catch: Exception -> 0x05fc, TryCatch #1 {Exception -> 0x05fc, blocks: (B:10:0x0064, B:15:0x0087, B:19:0x008e, B:23:0x0095, B:27:0x009c, B:31:0x00a3, B:35:0x00aa, B:39:0x00b1, B:43:0x00b8, B:45:0x00c8, B:47:0x00d9, B:49:0x00e0, B:51:0x00e4, B:53:0x00ea, B:55:0x0109, B:57:0x011d, B:60:0x012d, B:62:0x013b, B:64:0x0153, B:68:0x0177, B:67:0x0168, B:72:0x0189, B:74:0x0192, B:78:0x01ad, B:77:0x019f, B:83:0x01b8, B:87:0x01c1, B:90:0x01c8, B:92:0x01da, B:94:0x01ee, B:100:0x0201, B:102:0x0209, B:103:0x020e, B:106:0x0218, B:108:0x0224, B:111:0x024b, B:113:0x025e, B:115:0x0264, B:117:0x026c, B:95:0x01f3, B:99:0x01fc, B:98:0x01fa, B:120:0x028e, B:121:0x0296, B:123:0x029c, B:125:0x02c9, B:127:0x02d2, B:129:0x02de, B:131:0x02e8, B:133:0x02ee, B:134:0x02f1, B:136:0x02f7, B:154:0x0351, B:141:0x0310, B:145:0x031c, B:147:0x0331, B:149:0x0337, B:150:0x033a, B:152:0x0342, B:144:0x031a, B:155:0x035d, B:88:0x01c4, B:84:0x01bb, B:156:0x0373, B:158:0x0382, B:160:0x0395, B:162:0x039b, B:165:0x03ad, B:168:0x03b7, B:224:0x0503, B:171:0x03cd, B:175:0x03f3, B:177:0x03fc, B:179:0x040e, B:185:0x0421, B:187:0x0429, B:188:0x042e, B:190:0x044b, B:191:0x0451, B:180:0x0413, B:184:0x041c, B:183:0x041a, B:194:0x0469, B:197:0x0470, B:199:0x0475, B:201:0x047c, B:203:0x0488, B:205:0x0492, B:206:0x0495, B:208:0x049b, B:221:0x04de, B:210:0x04a9, B:214:0x04b2, B:216:0x04c8, B:217:0x04cb, B:219:0x04d3, B:213:0x04b0, B:222:0x04e8, B:198:0x0473, B:195:0x046c, B:223:0x04fa, B:225:0x0519, B:228:0x052e), top: B:259:0x0064 }] */
    /* JADX WARN: Removed duplicated region for block: B:166:0x03b3  */
    /* JADX WARN: Removed duplicated region for block: B:168:0x03b7 A[Catch: Exception -> 0x05fc, TryCatch #1 {Exception -> 0x05fc, blocks: (B:10:0x0064, B:15:0x0087, B:19:0x008e, B:23:0x0095, B:27:0x009c, B:31:0x00a3, B:35:0x00aa, B:39:0x00b1, B:43:0x00b8, B:45:0x00c8, B:47:0x00d9, B:49:0x00e0, B:51:0x00e4, B:53:0x00ea, B:55:0x0109, B:57:0x011d, B:60:0x012d, B:62:0x013b, B:64:0x0153, B:68:0x0177, B:67:0x0168, B:72:0x0189, B:74:0x0192, B:78:0x01ad, B:77:0x019f, B:83:0x01b8, B:87:0x01c1, B:90:0x01c8, B:92:0x01da, B:94:0x01ee, B:100:0x0201, B:102:0x0209, B:103:0x020e, B:106:0x0218, B:108:0x0224, B:111:0x024b, B:113:0x025e, B:115:0x0264, B:117:0x026c, B:95:0x01f3, B:99:0x01fc, B:98:0x01fa, B:120:0x028e, B:121:0x0296, B:123:0x029c, B:125:0x02c9, B:127:0x02d2, B:129:0x02de, B:131:0x02e8, B:133:0x02ee, B:134:0x02f1, B:136:0x02f7, B:154:0x0351, B:141:0x0310, B:145:0x031c, B:147:0x0331, B:149:0x0337, B:150:0x033a, B:152:0x0342, B:144:0x031a, B:155:0x035d, B:88:0x01c4, B:84:0x01bb, B:156:0x0373, B:158:0x0382, B:160:0x0395, B:162:0x039b, B:165:0x03ad, B:168:0x03b7, B:224:0x0503, B:171:0x03cd, B:175:0x03f3, B:177:0x03fc, B:179:0x040e, B:185:0x0421, B:187:0x0429, B:188:0x042e, B:190:0x044b, B:191:0x0451, B:180:0x0413, B:184:0x041c, B:183:0x041a, B:194:0x0469, B:197:0x0470, B:199:0x0475, B:201:0x047c, B:203:0x0488, B:205:0x0492, B:206:0x0495, B:208:0x049b, B:221:0x04de, B:210:0x04a9, B:214:0x04b2, B:216:0x04c8, B:217:0x04cb, B:219:0x04d3, B:213:0x04b0, B:222:0x04e8, B:198:0x0473, B:195:0x046c, B:223:0x04fa, B:225:0x0519, B:228:0x052e), top: B:259:0x0064 }] */
    /* JADX WARN: Removed duplicated region for block: B:169:0x03c3  */
    /* JADX WARN: Removed duplicated region for block: B:74:0x0192 A[Catch: Exception -> 0x05fc, TryCatch #1 {Exception -> 0x05fc, blocks: (B:10:0x0064, B:15:0x0087, B:19:0x008e, B:23:0x0095, B:27:0x009c, B:31:0x00a3, B:35:0x00aa, B:39:0x00b1, B:43:0x00b8, B:45:0x00c8, B:47:0x00d9, B:49:0x00e0, B:51:0x00e4, B:53:0x00ea, B:55:0x0109, B:57:0x011d, B:60:0x012d, B:62:0x013b, B:64:0x0153, B:68:0x0177, B:67:0x0168, B:72:0x0189, B:74:0x0192, B:78:0x01ad, B:77:0x019f, B:83:0x01b8, B:87:0x01c1, B:90:0x01c8, B:92:0x01da, B:94:0x01ee, B:100:0x0201, B:102:0x0209, B:103:0x020e, B:106:0x0218, B:108:0x0224, B:111:0x024b, B:113:0x025e, B:115:0x0264, B:117:0x026c, B:95:0x01f3, B:99:0x01fc, B:98:0x01fa, B:120:0x028e, B:121:0x0296, B:123:0x029c, B:125:0x02c9, B:127:0x02d2, B:129:0x02de, B:131:0x02e8, B:133:0x02ee, B:134:0x02f1, B:136:0x02f7, B:154:0x0351, B:141:0x0310, B:145:0x031c, B:147:0x0331, B:149:0x0337, B:150:0x033a, B:152:0x0342, B:144:0x031a, B:155:0x035d, B:88:0x01c4, B:84:0x01bb, B:156:0x0373, B:158:0x0382, B:160:0x0395, B:162:0x039b, B:165:0x03ad, B:168:0x03b7, B:224:0x0503, B:171:0x03cd, B:175:0x03f3, B:177:0x03fc, B:179:0x040e, B:185:0x0421, B:187:0x0429, B:188:0x042e, B:190:0x044b, B:191:0x0451, B:180:0x0413, B:184:0x041c, B:183:0x041a, B:194:0x0469, B:197:0x0470, B:199:0x0475, B:201:0x047c, B:203:0x0488, B:205:0x0492, B:206:0x0495, B:208:0x049b, B:221:0x04de, B:210:0x04a9, B:214:0x04b2, B:216:0x04c8, B:217:0x04cb, B:219:0x04d3, B:213:0x04b0, B:222:0x04e8, B:198:0x0473, B:195:0x046c, B:223:0x04fa, B:225:0x0519, B:228:0x052e), top: B:259:0x0064 }] */
    /* JADX WARN: Removed duplicated region for block: B:82:0x01b6  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$checkLoadedRemoteFilters$51(TLRPC$Vector tLRPC$Vector) {
        MessagesStorage messagesStorage;
        TLRPC$messages_Dialogs tLRPC$TL_messages_dialogs;
        ArrayList<Integer> arrayList;
        int i;
        int i2;
        SparseArray<MessagesController.DialogFilter> sparseArray;
        HashSet<Integer> hashSet;
        ArrayList<Long> arrayList2;
        HashMap<Long, TLRPC$InputPeer> hashMap;
        HashMap<Integer, HashSet<Long>> hashMap2;
        HashMap<Integer, HashSet<Long>> hashMap3;
        TLRPC$DialogFilter tLRPC$DialogFilter;
        ArrayList<TLRPC$InputPeer> arrayList3;
        HashMap<Long, TLRPC$InputPeer> hashMap4;
        ArrayList<Long> arrayList4;
        Long valueOf;
        boolean z;
        boolean z2;
        ArrayList<MessagesController.DialogFilter> arrayList5;
        HashSet<Integer> hashSet2;
        LinkedHashMap linkedHashMap;
        int size;
        int i3;
        int i4;
        HashMap<Integer, HashSet<Long>> hashMap5;
        boolean z3;
        HashMap<Integer, HashSet<Long>> hashMap6;
        ArrayList<Long> arrayList6;
        LinkedHashMap linkedHashMap2;
        ArrayList<Long> arrayList7;
        HashMap<Long, TLRPC$InputPeer> hashMap7;
        int i5;
        ArrayList<Long> arrayList8;
        HashMap<Integer, HashSet<Long>> hashMap8;
        HashMap<Integer, HashSet<Long>> hashMap9;
        TLRPC$DialogFilter tLRPC$DialogFilter2;
        ArrayList<Long> arrayList9;
        boolean z4;
        ArrayList<TLRPC$InputPeer> arrayList10;
        HashMap<Long, TLRPC$InputPeer> hashMap10;
        ArrayList<Long> arrayList11;
        Long valueOf2;
        ArrayList<Long> arrayList12;
        LinkedHashMap linkedHashMap3;
        int i6;
        TLRPC$DialogFilter tLRPC$DialogFilter3;
        int i7;
        ArrayList arrayList13;
        MessagesStorage messagesStorage2 = this;
        TLRPC$Vector tLRPC$Vector2 = tLRPC$Vector;
        try {
            SparseArray<MessagesController.DialogFilter> sparseArray2 = new SparseArray<>();
            int size2 = messagesStorage2.dialogFilters.size();
            for (int i8 = 0; i8 < size2; i8++) {
                MessagesController.DialogFilter dialogFilter = messagesStorage2.dialogFilters.get(i8);
                sparseArray2.put(dialogFilter.id, dialogFilter);
            }
            ArrayList<Integer> arrayList14 = new ArrayList<>();
            ArrayList<Long> arrayList15 = new ArrayList<>();
            HashMap<Long, TLRPC$InputPeer> hashMap11 = new HashMap<>();
            ArrayList<Long> arrayList16 = new ArrayList<>();
            HashMap<Long, TLRPC$InputPeer> hashMap12 = new HashMap<>();
            ArrayList arrayList17 = new ArrayList();
            HashMap<Long, TLRPC$InputPeer> hashMap13 = new HashMap<>();
            ArrayList<MessagesController.DialogFilter> arrayList18 = new ArrayList<>();
            HashMap<Integer, HashSet<Long>> hashMap14 = new HashMap<>();
            HashMap<Integer, HashSet<Long>> hashMap15 = new HashMap<>();
            HashSet<Integer> hashSet3 = new HashSet<>();
            int size3 = tLRPC$Vector2.objects.size();
            int i9 = 0;
            while (i9 < size3) {
                int i10 = size3;
                try {
                    TLRPC$DialogFilter tLRPC$DialogFilter4 = (TLRPC$DialogFilter) tLRPC$Vector2.objects.get(i9);
                    arrayList14.add(Integer.valueOf(tLRPC$DialogFilter4.id));
                    if (tLRPC$DialogFilter4.contacts) {
                        i = MessagesController.DIALOG_FILTER_FLAG_CONTACTS | 0;
                        arrayList = arrayList14;
                    } else {
                        arrayList = arrayList14;
                        i = 0;
                    }
                    if (tLRPC$DialogFilter4.non_contacts) {
                        i |= MessagesController.DIALOG_FILTER_FLAG_NON_CONTACTS;
                    }
                    if (tLRPC$DialogFilter4.groups) {
                        i |= MessagesController.DIALOG_FILTER_FLAG_GROUPS;
                    }
                    if (tLRPC$DialogFilter4.broadcasts) {
                        i |= MessagesController.DIALOG_FILTER_FLAG_CHANNELS;
                    }
                    if (tLRPC$DialogFilter4.bots) {
                        i |= MessagesController.DIALOG_FILTER_FLAG_BOTS;
                    }
                    if (tLRPC$DialogFilter4.exclude_muted) {
                        i |= MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED;
                    }
                    if (tLRPC$DialogFilter4.exclude_read) {
                        i |= MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_READ;
                    }
                    if (tLRPC$DialogFilter4.exclude_archived) {
                        i |= MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED;
                    }
                    MessagesController.DialogFilter dialogFilter2 = messagesStorage2.dialogFiltersMap.get(tLRPC$DialogFilter4.id);
                    boolean z5 = true;
                    if (dialogFilter2 != null) {
                        sparseArray2.remove(tLRPC$DialogFilter4.id);
                        sparseArray = sparseArray2;
                        if (TextUtils.equals(dialogFilter2.name, tLRPC$DialogFilter4.title)) {
                            z = false;
                        } else {
                            dialogFilter2.name = tLRPC$DialogFilter4.title;
                            z = true;
                        }
                        if (dialogFilter2.flags != i) {
                            dialogFilter2.flags = i;
                            z2 = true;
                            z = true;
                        } else {
                            z2 = false;
                        }
                        boolean z6 = z2;
                        HashSet<Long> hashSet4 = new HashSet<>(dialogFilter2.alwaysShow);
                        hashSet4.addAll(dialogFilter2.neverShow);
                        HashSet<Long> hashSet5 = new HashSet<>();
                        boolean z7 = z;
                        if (dialogFilter2.pinnedDialogs.size() != 0) {
                            ArrayList arrayList19 = new ArrayList();
                            i2 = i9;
                            int size4 = dialogFilter2.pinnedDialogs.size();
                            hashSet2 = hashSet3;
                            int i11 = 0;
                            boolean z8 = false;
                            while (i11 < size4) {
                                int i12 = size4;
                                long keyAt = dialogFilter2.pinnedDialogs.keyAt(i11);
                                if (DialogObject.isEncryptedDialog(keyAt)) {
                                    z8 = true;
                                }
                                arrayList19.add(Long.valueOf(keyAt));
                                i11++;
                                size4 = i12;
                            }
                            if (z8) {
                                linkedHashMap = new LinkedHashMap();
                                final LongSparseIntArray longSparseIntArray = dialogFilter2.pinnedDialogs;
                                arrayList5 = arrayList18;
                                Collections.sort(arrayList19, new Comparator() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda211
                                    @Override // java.util.Comparator
                                    public final int compare(Object obj, Object obj2) {
                                        int lambda$checkLoadedRemoteFilters$50;
                                        lambda$checkLoadedRemoteFilters$50 = MessagesStorage.lambda$checkLoadedRemoteFilters$50(LongSparseIntArray.this, (Long) obj, (Long) obj2);
                                        return lambda$checkLoadedRemoteFilters$50;
                                    }
                                });
                                int size5 = arrayList19.size();
                                int i13 = 0;
                                while (i13 < size5) {
                                    long longValue = ((Long) arrayList19.get(i13)).longValue();
                                    if (DialogObject.isEncryptedDialog(longValue)) {
                                        i7 = size5;
                                        arrayList13 = arrayList19;
                                        linkedHashMap.put(Integer.valueOf(i13), Long.valueOf(longValue));
                                    } else {
                                        i7 = size5;
                                        arrayList13 = arrayList19;
                                    }
                                    i13++;
                                    size5 = i7;
                                    arrayList19 = arrayList13;
                                }
                                size = dialogFilter2.pinnedDialogs.size();
                                for (i3 = 0; i3 < size; i3++) {
                                    long keyAt2 = dialogFilter2.pinnedDialogs.keyAt(i3);
                                    if (!DialogObject.isEncryptedDialog(keyAt2)) {
                                        hashSet5.add(Long.valueOf(keyAt2));
                                        hashSet4.remove(Long.valueOf(keyAt2));
                                    }
                                }
                                boolean z9 = z7;
                                i4 = 0;
                                while (i4 < 2) {
                                    ArrayList<TLRPC$InputPeer> arrayList20 = i4 == 0 ? tLRPC$DialogFilter4.include_peers : tLRPC$DialogFilter4.exclude_peers;
                                    boolean z10 = z9;
                                    ArrayList<Long> arrayList21 = i4 == 0 ? dialogFilter2.alwaysShow : dialogFilter2.neverShow;
                                    if (i4 == 0) {
                                        hashMap8 = hashMap15;
                                        dialogFilter2.pinnedDialogs.clear();
                                        int size6 = tLRPC$DialogFilter4.pinned_peers.size();
                                        hashMap9 = hashMap14;
                                        int i14 = 0;
                                        while (i14 < size6) {
                                            int i15 = size6;
                                            TLRPC$InputPeer tLRPC$InputPeer = tLRPC$DialogFilter4.pinned_peers.get(i14);
                                            ArrayList<Long> arrayList22 = arrayList16;
                                            HashMap<Long, TLRPC$InputPeer> hashMap16 = hashMap12;
                                            long j = tLRPC$InputPeer.user_id;
                                            if (j != 0) {
                                                valueOf2 = Long.valueOf(j);
                                            } else {
                                                long j2 = tLRPC$InputPeer.chat_id;
                                                if (j2 == 0) {
                                                    j2 = tLRPC$InputPeer.channel_id;
                                                }
                                                valueOf2 = Long.valueOf(-j2);
                                            }
                                            if (!dialogFilter2.alwaysShow.contains(valueOf2)) {
                                                dialogFilter2.alwaysShow.add(valueOf2);
                                            }
                                            int size7 = dialogFilter2.pinnedDialogs.size();
                                            if (linkedHashMap != null) {
                                                tLRPC$DialogFilter3 = tLRPC$DialogFilter4;
                                                while (true) {
                                                    Long l = (Long) linkedHashMap.remove(Integer.valueOf(size7));
                                                    if (l == null) {
                                                        break;
                                                    }
                                                    dialogFilter2.pinnedDialogs.put(l.longValue(), size7);
                                                    size7++;
                                                    i4 = i4;
                                                    arrayList15 = arrayList15;
                                                    linkedHashMap = linkedHashMap;
                                                }
                                                arrayList12 = arrayList15;
                                                linkedHashMap3 = linkedHashMap;
                                                i6 = i4;
                                            } else {
                                                arrayList12 = arrayList15;
                                                linkedHashMap3 = linkedHashMap;
                                                i6 = i4;
                                                tLRPC$DialogFilter3 = tLRPC$DialogFilter4;
                                            }
                                            ArrayList<Long> arrayList23 = arrayList21;
                                            dialogFilter2.pinnedDialogs.put(valueOf2.longValue(), size7);
                                            hashSet4.remove(valueOf2);
                                            if (!hashSet5.remove(valueOf2)) {
                                                if (!hashMap13.containsKey(valueOf2)) {
                                                    arrayList17.add(valueOf2);
                                                    hashMap13.put(valueOf2, tLRPC$InputPeer);
                                                }
                                                z10 = true;
                                            }
                                            i14++;
                                            arrayList21 = arrayList23;
                                            size6 = i15;
                                            arrayList16 = arrayList22;
                                            hashMap12 = hashMap16;
                                            tLRPC$DialogFilter4 = tLRPC$DialogFilter3;
                                            i4 = i6;
                                            arrayList15 = arrayList12;
                                            linkedHashMap = linkedHashMap3;
                                        }
                                        arrayList6 = arrayList15;
                                        linkedHashMap2 = linkedHashMap;
                                        arrayList7 = arrayList16;
                                        hashMap7 = hashMap12;
                                        i5 = i4;
                                        arrayList8 = arrayList21;
                                        tLRPC$DialogFilter2 = tLRPC$DialogFilter4;
                                        if (linkedHashMap2 != null) {
                                            for (Map.Entry entry : linkedHashMap2.entrySet()) {
                                                dialogFilter2.pinnedDialogs.put(((Long) entry.getValue()).longValue(), dialogFilter2.pinnedDialogs.size());
                                            }
                                        }
                                    } else {
                                        arrayList6 = arrayList15;
                                        linkedHashMap2 = linkedHashMap;
                                        arrayList7 = arrayList16;
                                        hashMap7 = hashMap12;
                                        i5 = i4;
                                        arrayList8 = arrayList21;
                                        hashMap8 = hashMap15;
                                        hashMap9 = hashMap14;
                                        tLRPC$DialogFilter2 = tLRPC$DialogFilter4;
                                    }
                                    z9 = z10;
                                    int size8 = arrayList20.size();
                                    int i16 = 0;
                                    while (i16 < size8) {
                                        TLRPC$InputPeer tLRPC$InputPeer2 = arrayList20.get(i16);
                                        long j3 = tLRPC$InputPeer2.user_id;
                                        if (j3 != 0) {
                                            Long valueOf3 = Long.valueOf(j3);
                                            if (hashSet4.remove(valueOf3)) {
                                                arrayList9 = arrayList6;
                                            } else {
                                                if (!arrayList8.contains(valueOf3)) {
                                                    arrayList8.add(valueOf3);
                                                }
                                                if (hashMap11.containsKey(valueOf3)) {
                                                    arrayList9 = arrayList6;
                                                    z9 = true;
                                                } else {
                                                    arrayList9 = arrayList6;
                                                    arrayList9.add(valueOf3);
                                                    hashMap11.put(valueOf3, tLRPC$InputPeer2);
                                                    z9 = true;
                                                    z6 = true;
                                                }
                                            }
                                            z4 = z9;
                                            arrayList10 = arrayList20;
                                        } else {
                                            boolean z11 = z9;
                                            arrayList9 = arrayList6;
                                            long j4 = tLRPC$InputPeer2.chat_id;
                                            if (j4 == 0) {
                                                j4 = tLRPC$InputPeer2.channel_id;
                                            }
                                            Long valueOf4 = Long.valueOf(j4);
                                            z4 = z11;
                                            arrayList10 = arrayList20;
                                            Long valueOf5 = Long.valueOf(-valueOf4.longValue());
                                            if (!hashSet4.remove(valueOf5)) {
                                                if (!arrayList8.contains(valueOf5)) {
                                                    arrayList8.add(valueOf5);
                                                }
                                                hashMap10 = hashMap7;
                                                if (hashMap10.containsKey(valueOf4)) {
                                                    arrayList11 = arrayList7;
                                                    z4 = true;
                                                } else {
                                                    arrayList11 = arrayList7;
                                                    arrayList11.add(valueOf4);
                                                    hashMap10.put(valueOf4, tLRPC$InputPeer2);
                                                    z4 = true;
                                                    z6 = true;
                                                }
                                                i16++;
                                                arrayList6 = arrayList9;
                                                hashMap7 = hashMap10;
                                                arrayList7 = arrayList11;
                                                arrayList20 = arrayList10;
                                                z9 = z4;
                                            }
                                        }
                                        arrayList11 = arrayList7;
                                        hashMap10 = hashMap7;
                                        i16++;
                                        arrayList6 = arrayList9;
                                        hashMap7 = hashMap10;
                                        arrayList7 = arrayList11;
                                        arrayList20 = arrayList10;
                                        z9 = z4;
                                    }
                                    i4 = i5 + 1;
                                    arrayList15 = arrayList6;
                                    hashMap12 = hashMap7;
                                    arrayList16 = arrayList7;
                                    hashMap15 = hashMap8;
                                    hashMap14 = hashMap9;
                                    tLRPC$DialogFilter4 = tLRPC$DialogFilter2;
                                    linkedHashMap = linkedHashMap2;
                                }
                                ArrayList<Long> arrayList24 = arrayList16;
                                boolean z12 = z9;
                                HashMap<Integer, HashSet<Long>> hashMap17 = hashMap15;
                                HashMap<Integer, HashSet<Long>> hashMap18 = hashMap14;
                                arrayList2 = arrayList15;
                                HashMap<Long, TLRPC$InputPeer> hashMap19 = hashMap12;
                                if (hashSet4.isEmpty()) {
                                    hashMap5 = hashMap18;
                                    hashMap5.put(Integer.valueOf(dialogFilter2.id), hashSet4);
                                    z3 = true;
                                    z6 = true;
                                } else {
                                    hashMap5 = hashMap18;
                                    z3 = z12;
                                }
                                if (hashSet5.isEmpty()) {
                                    hashMap6 = hashMap17;
                                    hashMap6.put(Integer.valueOf(dialogFilter2.id), hashSet5);
                                } else {
                                    hashMap6 = hashMap17;
                                    z5 = z3;
                                }
                                if (z5) {
                                    arrayList18 = arrayList5;
                                } else {
                                    arrayList18 = arrayList5;
                                    arrayList18.add(dialogFilter2);
                                }
                                if (z6) {
                                    hashSet = hashSet2;
                                } else {
                                    hashSet = hashSet2;
                                    hashSet.add(Integer.valueOf(dialogFilter2.id));
                                }
                                hashMap = hashMap19;
                                arrayList16 = arrayList24;
                                hashMap2 = hashMap6;
                                hashMap3 = hashMap5;
                            } else {
                                arrayList5 = arrayList18;
                            }
                        } else {
                            i2 = i9;
                            arrayList5 = arrayList18;
                            hashSet2 = hashSet3;
                        }
                        linkedHashMap = null;
                        size = dialogFilter2.pinnedDialogs.size();
                        while (i3 < size) {
                        }
                        boolean z92 = z7;
                        i4 = 0;
                        while (i4 < 2) {
                        }
                        ArrayList<Long> arrayList242 = arrayList16;
                        boolean z122 = z92;
                        HashMap<Integer, HashSet<Long>> hashMap172 = hashMap15;
                        HashMap<Integer, HashSet<Long>> hashMap182 = hashMap14;
                        arrayList2 = arrayList15;
                        HashMap<Long, TLRPC$InputPeer> hashMap192 = hashMap12;
                        if (hashSet4.isEmpty()) {
                        }
                        if (hashSet5.isEmpty()) {
                        }
                        if (z5) {
                        }
                        if (z6) {
                        }
                        hashMap = hashMap192;
                        arrayList16 = arrayList242;
                        hashMap2 = hashMap6;
                        hashMap3 = hashMap5;
                    } else {
                        i2 = i9;
                        sparseArray = sparseArray2;
                        HashMap<Integer, HashSet<Long>> hashMap20 = hashMap15;
                        hashSet = hashSet3;
                        arrayList2 = arrayList15;
                        ArrayList<Long> arrayList25 = arrayList16;
                        HashMap<Integer, HashSet<Long>> hashMap21 = hashMap14;
                        HashMap<Long, TLRPC$InputPeer> hashMap22 = hashMap12;
                        MessagesController.DialogFilter dialogFilter3 = new MessagesController.DialogFilter();
                        TLRPC$DialogFilter tLRPC$DialogFilter5 = tLRPC$DialogFilter4;
                        dialogFilter3.id = tLRPC$DialogFilter5.id;
                        dialogFilter3.flags = i;
                        dialogFilter3.name = tLRPC$DialogFilter5.title;
                        dialogFilter3.pendingUnreadCount = -1;
                        int i17 = 0;
                        while (i17 < 2) {
                            if (i17 == 0) {
                                int size9 = tLRPC$DialogFilter5.pinned_peers.size();
                                int i18 = 0;
                                while (i18 < size9) {
                                    TLRPC$InputPeer tLRPC$InputPeer3 = tLRPC$DialogFilter5.pinned_peers.get(i18);
                                    HashMap<Integer, HashSet<Long>> hashMap23 = hashMap20;
                                    HashMap<Integer, HashSet<Long>> hashMap24 = hashMap21;
                                    long j5 = tLRPC$InputPeer3.user_id;
                                    if (j5 != 0) {
                                        valueOf = Long.valueOf(j5);
                                    } else {
                                        long j6 = tLRPC$InputPeer3.chat_id;
                                        if (j6 == 0) {
                                            j6 = tLRPC$InputPeer3.channel_id;
                                        }
                                        valueOf = Long.valueOf(-j6);
                                    }
                                    if (!dialogFilter3.alwaysShow.contains(valueOf)) {
                                        dialogFilter3.alwaysShow.add(valueOf);
                                    }
                                    HashMap<Long, TLRPC$InputPeer> hashMap25 = hashMap22;
                                    ArrayList<Long> arrayList26 = arrayList25;
                                    int i19 = size9;
                                    dialogFilter3.pinnedDialogs.put(valueOf.longValue(), dialogFilter3.pinnedDialogs.size() + 1);
                                    if (!hashMap13.containsKey(valueOf)) {
                                        arrayList17.add(valueOf);
                                        hashMap13.put(valueOf, tLRPC$InputPeer3);
                                    }
                                    i18++;
                                    size9 = i19;
                                    hashMap20 = hashMap23;
                                    hashMap21 = hashMap24;
                                    arrayList25 = arrayList26;
                                    hashMap22 = hashMap25;
                                }
                            }
                            HashMap<Long, TLRPC$InputPeer> hashMap26 = hashMap22;
                            ArrayList<Long> arrayList27 = arrayList25;
                            HashMap<Integer, HashSet<Long>> hashMap27 = hashMap20;
                            HashMap<Integer, HashSet<Long>> hashMap28 = hashMap21;
                            ArrayList<TLRPC$InputPeer> arrayList28 = i17 == 0 ? tLRPC$DialogFilter5.include_peers : tLRPC$DialogFilter5.exclude_peers;
                            ArrayList<Long> arrayList29 = i17 == 0 ? dialogFilter3.alwaysShow : dialogFilter3.neverShow;
                            int size10 = arrayList28.size();
                            int i20 = 0;
                            while (i20 < size10) {
                                TLRPC$InputPeer tLRPC$InputPeer4 = arrayList28.get(i20);
                                long j7 = tLRPC$InputPeer4.user_id;
                                if (j7 != 0) {
                                    Long valueOf6 = Long.valueOf(j7);
                                    if (!arrayList29.contains(valueOf6)) {
                                        arrayList29.add(valueOf6);
                                    }
                                    if (!hashMap11.containsKey(valueOf6)) {
                                        arrayList2.add(valueOf6);
                                        hashMap11.put(valueOf6, tLRPC$InputPeer4);
                                    }
                                    tLRPC$DialogFilter = tLRPC$DialogFilter5;
                                    arrayList3 = arrayList28;
                                    arrayList4 = arrayList27;
                                    hashMap4 = hashMap26;
                                } else {
                                    long j8 = tLRPC$InputPeer4.chat_id;
                                    if (j8 == 0) {
                                        j8 = tLRPC$InputPeer4.channel_id;
                                    }
                                    Long valueOf7 = Long.valueOf(j8);
                                    tLRPC$DialogFilter = tLRPC$DialogFilter5;
                                    arrayList3 = arrayList28;
                                    Long valueOf8 = Long.valueOf(-valueOf7.longValue());
                                    if (!arrayList29.contains(valueOf8)) {
                                        arrayList29.add(valueOf8);
                                    }
                                    hashMap4 = hashMap26;
                                    if (hashMap4.containsKey(valueOf7)) {
                                        arrayList4 = arrayList27;
                                    } else {
                                        arrayList4 = arrayList27;
                                        arrayList4.add(valueOf7);
                                        hashMap4.put(valueOf7, tLRPC$InputPeer4);
                                    }
                                }
                                i20++;
                                hashMap26 = hashMap4;
                                arrayList27 = arrayList4;
                                arrayList28 = arrayList3;
                                tLRPC$DialogFilter5 = tLRPC$DialogFilter;
                            }
                            i17++;
                            hashMap22 = hashMap26;
                            arrayList25 = arrayList27;
                            hashMap20 = hashMap27;
                            hashMap21 = hashMap28;
                            tLRPC$DialogFilter5 = tLRPC$DialogFilter5;
                        }
                        hashMap = hashMap22;
                        arrayList16 = arrayList25;
                        hashMap2 = hashMap20;
                        hashMap3 = hashMap21;
                        arrayList18.add(dialogFilter3);
                    }
                    messagesStorage2 = this;
                    hashMap12 = hashMap;
                    hashSet3 = hashSet;
                    arrayList15 = arrayList2;
                    size3 = i10;
                    sparseArray2 = sparseArray;
                    arrayList14 = arrayList;
                    hashMap15 = hashMap2;
                    hashMap14 = hashMap3;
                    i9 = i2 + 1;
                    tLRPC$Vector2 = tLRPC$Vector;
                } catch (Exception e) {
                    e = e;
                    messagesStorage2 = this;
                    messagesStorage2.checkSQLException(e);
                    return;
                }
            }
            HashMap<Long, TLRPC$InputPeer> hashMap29 = hashMap12;
            SparseArray<MessagesController.DialogFilter> sparseArray3 = sparseArray2;
            ArrayList<Integer> arrayList30 = arrayList14;
            HashMap<Integer, HashSet<Long>> hashMap30 = hashMap15;
            HashMap<Integer, HashSet<Long>> hashMap31 = hashMap14;
            HashSet<Integer> hashSet6 = hashSet3;
            ArrayList<Long> arrayList31 = arrayList15;
            if (!arrayList17.isEmpty()) {
                messagesStorage = this;
                tLRPC$TL_messages_dialogs = messagesStorage.loadDialogsByIds(TextUtils.join(",", arrayList17), arrayList31, arrayList16, new ArrayList<>());
                int size11 = tLRPC$TL_messages_dialogs.dialogs.size();
                for (int i21 = 0; i21 < size11; i21++) {
                    hashMap13.remove(Long.valueOf(tLRPC$TL_messages_dialogs.dialogs.get(i21).id));
                }
            } else {
                messagesStorage = this;
                tLRPC$TL_messages_dialogs = new TLRPC$TL_messages_dialogs();
            }
            TLRPC$messages_Dialogs tLRPC$messages_Dialogs = tLRPC$TL_messages_dialogs;
            ArrayList<TLRPC$User> arrayList32 = new ArrayList<>();
            if (!arrayList31.isEmpty()) {
                messagesStorage.getUsersInternal(TextUtils.join(",", arrayList31), arrayList32);
                int size12 = arrayList32.size();
                for (int i22 = 0; i22 < size12; i22++) {
                    hashMap11.remove(Long.valueOf(arrayList32.get(i22).id));
                }
            }
            ArrayList<TLRPC$Chat> arrayList33 = new ArrayList<>();
            if (!arrayList16.isEmpty()) {
                messagesStorage.getChatsInternal(TextUtils.join(",", arrayList16), arrayList33);
                int size13 = arrayList33.size();
                for (int i23 = 0; i23 < size13; i23++) {
                    hashMap29.remove(Long.valueOf(arrayList33.get(i23).id));
                }
            }
            if (hashMap11.isEmpty() && hashMap29.isEmpty() && hashMap13.isEmpty()) {
                lambda$processLoadedFilterPeers$53(tLRPC$messages_Dialogs, null, arrayList32, arrayList33, arrayList18, sparseArray3, arrayList30, hashMap30, hashMap31, hashSet6);
            } else {
                getMessagesController().loadFilterPeers(hashMap13, hashMap11, hashMap29, tLRPC$messages_Dialogs, new TLRPC$TL_messages_dialogs(), arrayList32, arrayList33, arrayList18, sparseArray3, arrayList30, hashMap30, hashMap31, hashSet6);
            }
        } catch (Exception e2) {
            e = e2;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ int lambda$checkLoadedRemoteFilters$50(LongSparseIntArray longSparseIntArray, Long l, Long l2) {
        int i = longSparseIntArray.get(l.longValue());
        int i2 = longSparseIntArray.get(l2.longValue());
        if (i > i2) {
            return 1;
        }
        return i < i2 ? -1 : 0;
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* renamed from: processLoadedFilterPeersInternal */
    public void lambda$processLoadedFilterPeers$53(TLRPC$messages_Dialogs tLRPC$messages_Dialogs, TLRPC$messages_Dialogs tLRPC$messages_Dialogs2, ArrayList<TLRPC$User> arrayList, ArrayList<TLRPC$Chat> arrayList2, ArrayList<MessagesController.DialogFilter> arrayList3, SparseArray<MessagesController.DialogFilter> sparseArray, ArrayList<Integer> arrayList4, HashMap<Integer, HashSet<Long>> hashMap, HashMap<Integer, HashSet<Long>> hashMap2, HashSet<Integer> hashSet) {
        putUsersAndChats(arrayList, arrayList2, true, false);
        int size = sparseArray.size();
        int i = 0;
        boolean z = false;
        while (i < size) {
            lambda$deleteDialogFilter$54(sparseArray.valueAt(i));
            i++;
            z = true;
        }
        Iterator<Integer> it = hashSet.iterator();
        while (it.hasNext()) {
            MessagesController.DialogFilter dialogFilter = this.dialogFiltersMap.get(it.next().intValue());
            if (dialogFilter != null) {
                dialogFilter.pendingUnreadCount = -1;
            }
        }
        for (Map.Entry<Integer, HashSet<Long>> entry : hashMap2.entrySet()) {
            MessagesController.DialogFilter dialogFilter2 = this.dialogFiltersMap.get(entry.getKey().intValue());
            if (dialogFilter2 != null) {
                HashSet<Long> value = entry.getValue();
                dialogFilter2.alwaysShow.removeAll(value);
                dialogFilter2.neverShow.removeAll(value);
                z = true;
            }
        }
        for (Map.Entry<Integer, HashSet<Long>> entry2 : hashMap.entrySet()) {
            MessagesController.DialogFilter dialogFilter3 = this.dialogFiltersMap.get(entry2.getKey().intValue());
            if (dialogFilter3 != null) {
                Iterator<Long> it2 = entry2.getValue().iterator();
                while (it2.hasNext()) {
                    dialogFilter3.pinnedDialogs.delete(it2.next().longValue());
                }
                z = true;
            }
        }
        int size2 = arrayList3.size();
        int i2 = 0;
        while (i2 < size2) {
            saveDialogFilterInternal(arrayList3.get(i2), false, true);
            i2++;
            z = true;
        }
        int size3 = this.dialogFilters.size();
        boolean z2 = false;
        for (int i3 = 0; i3 < size3; i3++) {
            MessagesController.DialogFilter dialogFilter4 = this.dialogFilters.get(i3);
            int indexOf = arrayList4.indexOf(Integer.valueOf(dialogFilter4.id));
            if (dialogFilter4.order != indexOf) {
                dialogFilter4.order = indexOf;
                z2 = true;
                z = true;
            }
        }
        if (z2) {
            Collections.sort(this.dialogFilters, MessagesStorage$$ExternalSyntheticLambda214.INSTANCE);
            saveDialogFiltersOrderInternal();
        }
        int i4 = z ? 1 : 2;
        calcUnreadCounters(true);
        getMessagesController().processLoadedDialogFilters(new ArrayList<>(this.dialogFilters), tLRPC$messages_Dialogs, tLRPC$messages_Dialogs2, arrayList, arrayList2, null, i4);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ int lambda$processLoadedFilterPeersInternal$52(MessagesController.DialogFilter dialogFilter, MessagesController.DialogFilter dialogFilter2) {
        int i = dialogFilter.order;
        int i2 = dialogFilter2.order;
        if (i > i2) {
            return 1;
        }
        return i < i2 ? -1 : 0;
    }

    /* JADX INFO: Access modifiers changed from: protected */
    public void processLoadedFilterPeers(final TLRPC$messages_Dialogs tLRPC$messages_Dialogs, final TLRPC$messages_Dialogs tLRPC$messages_Dialogs2, final ArrayList<TLRPC$User> arrayList, final ArrayList<TLRPC$Chat> arrayList2, final ArrayList<MessagesController.DialogFilter> arrayList3, final SparseArray<MessagesController.DialogFilter> sparseArray, final ArrayList<Integer> arrayList4, final HashMap<Integer, HashSet<Long>> hashMap, final HashMap<Integer, HashSet<Long>> hashMap2, final HashSet<Integer> hashSet) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda195
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$processLoadedFilterPeers$53(tLRPC$messages_Dialogs, tLRPC$messages_Dialogs2, arrayList, arrayList2, arrayList3, sparseArray, arrayList4, hashMap, hashMap2, hashSet);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* renamed from: deleteDialogFilterInternal */
    public void lambda$deleteDialogFilter$54(MessagesController.DialogFilter dialogFilter) {
        try {
            this.dialogFilters.remove(dialogFilter);
            this.dialogFiltersMap.remove(dialogFilter.id);
            SQLiteDatabase sQLiteDatabase = this.database;
            sQLiteDatabase.executeFast("DELETE FROM dialog_filter WHERE id = " + dialogFilter.id).stepThis().dispose();
            SQLiteDatabase sQLiteDatabase2 = this.database;
            sQLiteDatabase2.executeFast("DELETE FROM dialog_filter_ep WHERE id = " + dialogFilter.id).stepThis().dispose();
            SQLiteDatabase sQLiteDatabase3 = this.database;
            sQLiteDatabase3.executeFast("DELETE FROM dialog_filter_pin_v2 WHERE id = " + dialogFilter.id).stepThis().dispose();
        } catch (Exception e) {
            checkSQLException(e);
        }
    }

    public void deleteDialogFilter(final MessagesController.DialogFilter dialogFilter) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda166
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$deleteDialogFilter$54(dialogFilter);
            }
        });
    }

    public void saveDialogFilter(final MessagesController.DialogFilter dialogFilter, final boolean z, final boolean z2) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda167
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$saveDialogFilter$56(dialogFilter, z, z2);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$saveDialogFilter$56(MessagesController.DialogFilter dialogFilter, boolean z, boolean z2) {
        saveDialogFilterInternal(dialogFilter, z, z2);
        calcUnreadCounters(false);
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda13
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$saveDialogFilter$55();
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$saveDialogFilter$55() {
        ArrayList<MessagesController.DialogFilter> arrayList = getMessagesController().dialogFilters;
        int size = arrayList.size();
        for (int i = 0; i < size; i++) {
            arrayList.get(i).unreadCount = arrayList.get(i).pendingUnreadCount;
        }
        this.mainUnreadCount = this.pendingMainUnreadCount;
        this.archiveUnreadCount = this.pendingArchiveUnreadCount;
        getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, Integer.valueOf(MessagesController.UPDATE_MASK_READ_DIALOG_MESSAGE));
    }

    public void saveDialogFiltersOrderInternal() {
        SQLitePreparedStatement sQLitePreparedStatement = null;
        try {
            try {
                sQLitePreparedStatement = this.database.executeFast("UPDATE dialog_filter SET ord = ?, flags = ? WHERE id = ?");
                int size = this.dialogFilters.size();
                for (int i = 0; i < size; i++) {
                    MessagesController.DialogFilter dialogFilter = this.dialogFilters.get(i);
                    sQLitePreparedStatement.requery();
                    sQLitePreparedStatement.bindInteger(1, dialogFilter.order);
                    sQLitePreparedStatement.bindInteger(2, dialogFilter.flags);
                    sQLitePreparedStatement.bindInteger(3, dialogFilter.id);
                    sQLitePreparedStatement.step();
                }
                sQLitePreparedStatement.dispose();
            } catch (Exception e) {
                checkSQLException(e);
                if (sQLitePreparedStatement != null) {
                    sQLitePreparedStatement.dispose();
                }
            }
        } catch (Throwable th) {
            if (sQLitePreparedStatement != null) {
                sQLitePreparedStatement.dispose();
            }
            throw th;
        }
    }

    public void saveDialogFiltersOrder() {
        final ArrayList arrayList = new ArrayList(getMessagesController().dialogFilters);
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda150
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$saveDialogFiltersOrder$57(arrayList);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$saveDialogFiltersOrder$57(ArrayList arrayList) {
        this.dialogFilters.clear();
        this.dialogFiltersMap.clear();
        this.dialogFilters.addAll(arrayList);
        for (int i = 0; i < arrayList.size(); i++) {
            ((MessagesController.DialogFilter) arrayList.get(i)).order = i;
            this.dialogFiltersMap.put(((MessagesController.DialogFilter) arrayList.get(i)).id, (MessagesController.DialogFilter) arrayList.get(i));
        }
        saveDialogFiltersOrderInternal();
    }

    protected static void addReplyMessages(TLRPC$Message tLRPC$Message, LongSparseArray<SparseArray<ArrayList<TLRPC$Message>>> longSparseArray, LongSparseArray<ArrayList<Integer>> longSparseArray2) {
        int i = tLRPC$Message.reply_to.reply_to_msg_id;
        long replyToDialogId = MessageObject.getReplyToDialogId(tLRPC$Message);
        SparseArray<ArrayList<TLRPC$Message>> sparseArray = longSparseArray.get(replyToDialogId);
        ArrayList<Integer> arrayList = longSparseArray2.get(replyToDialogId);
        if (sparseArray == null) {
            sparseArray = new SparseArray<>();
            longSparseArray.put(replyToDialogId, sparseArray);
        }
        if (arrayList == null) {
            arrayList = new ArrayList<>();
            longSparseArray2.put(replyToDialogId, arrayList);
        }
        ArrayList<TLRPC$Message> arrayList2 = sparseArray.get(tLRPC$Message.reply_to.reply_to_msg_id);
        if (arrayList2 == null) {
            arrayList2 = new ArrayList<>();
            sparseArray.put(tLRPC$Message.reply_to.reply_to_msg_id, arrayList2);
            if (!arrayList.contains(Integer.valueOf(tLRPC$Message.reply_to.reply_to_msg_id))) {
                arrayList.add(Integer.valueOf(tLRPC$Message.reply_to.reply_to_msg_id));
            }
        }
        arrayList2.add(tLRPC$Message);
    }

    /* JADX WARN: Removed duplicated region for block: B:44:0x00fd  */
    /* JADX WARN: Type inference failed for: r3v2, types: [boolean, int] */
    /* JADX WARN: Type inference failed for: r3v3 */
    /* JADX WARN: Type inference failed for: r3v6 */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    protected void loadReplyMessages(LongSparseArray<SparseArray<ArrayList<TLRPC$Message>>> longSparseArray, LongSparseArray<ArrayList<Integer>> longSparseArray2, ArrayList<Long> arrayList, ArrayList<Long> arrayList2, boolean z) throws SQLiteException {
        SQLiteCursor sQLiteCursor;
        SQLiteCursor queryFinalized;
        if (longSparseArray.isEmpty()) {
            return;
        }
        int size = longSparseArray.size();
        int i = 0;
        int i2 = 0;
        while (i2 < size) {
            long keyAt = longSparseArray.keyAt(i2);
            SparseArray<ArrayList<TLRPC$Message>> valueAt = longSparseArray.valueAt(i2);
            ArrayList<Integer> arrayList3 = longSparseArray2.get(keyAt);
            if (arrayList3 != null) {
                if (z) {
                    try {
                        SQLiteDatabase sQLiteDatabase = this.database;
                        Locale locale = Locale.US;
                        Object[] objArr = new Object[2];
                        objArr[i] = TextUtils.join(",", arrayList3);
                        objArr[1] = Long.valueOf(keyAt);
                        queryFinalized = sQLiteDatabase.queryFinalized(String.format(locale, "SELECT data, mid, date, uid FROM scheduled_messages_v2 WHERE mid IN(%s) AND uid = %d", objArr), new Object[i]);
                    } catch (Exception e) {
                        e = e;
                        sQLiteCursor = null;
                        try {
                            throw e;
                        } catch (Throwable th) {
                            th = th;
                            if (sQLiteCursor != null) {
                                sQLiteCursor.dispose();
                            }
                            throw th;
                        }
                    } catch (Throwable th2) {
                        th = th2;
                        sQLiteCursor = null;
                        if (sQLiteCursor != null) {
                        }
                        throw th;
                    }
                } else {
                    try {
                        SQLiteDatabase sQLiteDatabase2 = this.database;
                        Locale locale2 = Locale.US;
                        Object[] objArr2 = new Object[2];
                        objArr2[i] = TextUtils.join(",", arrayList3);
                        objArr2[1] = Long.valueOf(keyAt);
                        queryFinalized = sQLiteDatabase2.queryFinalized(String.format(locale2, "SELECT data, mid, date, uid FROM messages_v2 WHERE mid IN(%s) AND uid = %d", objArr2), new Object[i]);
                    } catch (Exception e2) {
                        e = e2;
                        sQLiteCursor = null;
                        throw e;
                    } catch (Throwable th3) {
                        th = th3;
                        sQLiteCursor = null;
                        if (sQLiteCursor != null) {
                        }
                        throw th;
                    }
                }
                while (queryFinalized.next()) {
                    try {
                        NativeByteBuffer byteBufferValue = queryFinalized.byteBufferValue(i);
                        if (byteBufferValue != null) {
                            TLRPC$Message TLdeserialize = TLRPC$Message.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(i), i);
                            TLdeserialize.readAttachPath(byteBufferValue, getUserConfig().clientUserId);
                            byteBufferValue.reuse();
                            TLdeserialize.id = queryFinalized.intValue(1);
                            TLdeserialize.date = queryFinalized.intValue(2);
                            TLdeserialize.dialog_id = queryFinalized.longValue(3);
                            addUsersAndChatsFromMessage(TLdeserialize, arrayList, arrayList2, null);
                            ArrayList<TLRPC$Message> arrayList4 = valueAt.get(TLdeserialize.id);
                            if (arrayList4 != null) {
                                int size2 = arrayList4.size();
                                for (int i3 = i; i3 < size2; i3++) {
                                    arrayList4.get(i3).replyMessage = TLdeserialize;
                                    MessageObject.getDialogId(TLdeserialize);
                                }
                            }
                        }
                        i = 0;
                    } catch (Exception e3) {
                        e = e3;
                        sQLiteCursor = queryFinalized;
                        throw e;
                    } catch (Throwable th4) {
                        th = th4;
                        sQLiteCursor = queryFinalized;
                        if (sQLiteCursor != null) {
                        }
                        throw th;
                    }
                }
                queryFinalized.dispose();
                queryFinalized.dispose();
            }
            i2++;
            i = 0;
        }
    }

    public void loadUnreadMessages() {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda9
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$loadUnreadMessages$59();
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:119:0x02d4 A[Catch: all -> 0x041c, Exception -> 0x041f, TryCatch #10 {Exception -> 0x041f, all -> 0x041c, blocks: (B:94:0x023d, B:96:0x0243, B:98:0x0249, B:102:0x0283, B:106:0x0292, B:110:0x02a2, B:112:0x02b2, B:114:0x02bc, B:117:0x02cc, B:119:0x02d4, B:121:0x02e0, B:127:0x0309, B:131:0x0316, B:135:0x031f, B:139:0x032b, B:122:0x02ea, B:124:0x02f2, B:126:0x02ff, B:109:0x029c, B:105:0x028c, B:101:0x027c, B:142:0x034b), top: B:207:0x023d }] */
    /* JADX WARN: Removed duplicated region for block: B:122:0x02ea A[Catch: all -> 0x041c, Exception -> 0x041f, TryCatch #10 {Exception -> 0x041f, all -> 0x041c, blocks: (B:94:0x023d, B:96:0x0243, B:98:0x0249, B:102:0x0283, B:106:0x0292, B:110:0x02a2, B:112:0x02b2, B:114:0x02bc, B:117:0x02cc, B:119:0x02d4, B:121:0x02e0, B:127:0x0309, B:131:0x0316, B:135:0x031f, B:139:0x032b, B:122:0x02ea, B:124:0x02f2, B:126:0x02ff, B:109:0x029c, B:105:0x028c, B:101:0x027c, B:142:0x034b), top: B:207:0x023d }] */
    /* JADX WARN: Removed duplicated region for block: B:129:0x0311  */
    /* JADX WARN: Removed duplicated region for block: B:130:0x0314  */
    /* JADX WARN: Removed duplicated region for block: B:133:0x031a  */
    /* JADX WARN: Removed duplicated region for block: B:134:0x031d  */
    /* JADX WARN: Removed duplicated region for block: B:137:0x0326  */
    /* JADX WARN: Removed duplicated region for block: B:138:0x0329  */
    /* JADX WARN: Type inference failed for: r10v11 */
    /* JADX WARN: Type inference failed for: r10v12, types: [boolean, int] */
    /* JADX WARN: Type inference failed for: r10v18 */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$loadUnreadMessages$59() {
        SQLiteCursor sQLiteCursor;
        SQLiteCursor sQLiteCursor2;
        String str;
        ArrayList arrayList;
        ArrayList<TLRPC$User> arrayList2;
        ArrayList<TLRPC$EncryptedChat> arrayList3;
        final LongSparseArray longSparseArray;
        ArrayList<TLRPC$Chat> arrayList4;
        ArrayList arrayList5;
        LongSparseArray longSparseArray2;
        ArrayList arrayList6;
        ArrayList arrayList7;
        String stringValue;
        int i;
        ArrayList<TLRPC$User> arrayList8;
        LongSparseArray longSparseArray3;
        String str2;
        int i2;
        TLRPC$TL_messageReplyHeader tLRPC$TL_messageReplyHeader;
        NativeByteBuffer byteBufferValue;
        try {
            try {
                ArrayList<Long> arrayList9 = new ArrayList<>();
                ArrayList<Long> arrayList10 = new ArrayList<>();
                ArrayList arrayList11 = new ArrayList();
                LongSparseArray longSparseArray4 = new LongSparseArray();
                SQLiteCursor queryFinalized = this.database.queryFinalized("SELECT d.did, d.unread_count, s.flags FROM dialogs as d LEFT JOIN dialog_settings as s ON d.did = s.did WHERE d.unread_count > 0", new Object[0]);
                try {
                    StringBuilder sb = new StringBuilder();
                    int currentTime = getConnectionsManager().getCurrentTime();
                    while (true) {
                        str = ",";
                        if (!queryFinalized.next()) {
                            break;
                        }
                        long longValue = queryFinalized.longValue(2);
                        boolean z = (longValue & 1) != 0;
                        int i3 = (int) (longValue >> 32);
                        if (queryFinalized.isNull(2) || !z || (i3 != 0 && i3 < currentTime)) {
                            long longValue2 = queryFinalized.longValue(0);
                            if (!DialogObject.isFolderDialogId(longValue2)) {
                                longSparseArray4.put(longValue2, Integer.valueOf(queryFinalized.intValue(1)));
                                if (sb.length() != 0) {
                                    sb.append(",");
                                }
                                sb.append(longValue2);
                                if (DialogObject.isEncryptedDialog(longValue2)) {
                                    int encryptedChatId = DialogObject.getEncryptedChatId(longValue2);
                                    if (!arrayList11.contains(Integer.valueOf(encryptedChatId))) {
                                        arrayList11.add(Integer.valueOf(encryptedChatId));
                                    }
                                } else if (DialogObject.isUserDialog(longValue2)) {
                                    if (!arrayList9.contains(Long.valueOf(longValue2))) {
                                        arrayList9.add(Long.valueOf(longValue2));
                                    }
                                } else {
                                    long j = -longValue2;
                                    if (!arrayList10.contains(Long.valueOf(j))) {
                                        arrayList10.add(Long.valueOf(j));
                                    }
                                }
                            }
                        }
                    }
                    queryFinalized.dispose();
                    LongSparseArray<SparseArray<ArrayList<TLRPC$Message>>> longSparseArray5 = new LongSparseArray<>();
                    LongSparseArray<ArrayList<Integer>> longSparseArray6 = new LongSparseArray<>();
                    ArrayList arrayList12 = new ArrayList();
                    ArrayList arrayList13 = new ArrayList();
                    ArrayList<TLRPC$User> arrayList14 = new ArrayList<>();
                    ArrayList<TLRPC$Chat> arrayList15 = new ArrayList<>();
                    ArrayList<TLRPC$EncryptedChat> arrayList16 = new ArrayList<>();
                    if (sb.length() > 0) {
                        sQLiteCursor2 = this.database.queryFinalized("SELECT read_state, data, send_state, mid, date, uid, replydata FROM messages_v2 WHERE uid IN (" + sb.toString() + ") AND out = 0 AND read_state IN(0,2) ORDER BY date DESC LIMIT 50", new Object[0]);
                        int i4 = 0;
                        while (sQLiteCursor2.next()) {
                            try {
                                NativeByteBuffer byteBufferValue2 = sQLiteCursor2.byteBufferValue(1);
                                if (byteBufferValue2 != null) {
                                    arrayList8 = arrayList14;
                                    TLRPC$Message TLdeserialize = TLRPC$Message.TLdeserialize(byteBufferValue2, byteBufferValue2.readInt32(false), false);
                                    longSparseArray3 = longSparseArray4;
                                    TLdeserialize.readAttachPath(byteBufferValue2, getUserConfig().clientUserId);
                                    byteBufferValue2.reuse();
                                    MessageObject.setUnreadFlags(TLdeserialize, sQLiteCursor2.intValue(0));
                                    TLdeserialize.id = sQLiteCursor2.intValue(3);
                                    TLdeserialize.date = sQLiteCursor2.intValue(4);
                                    str2 = str;
                                    TLdeserialize.dialog_id = sQLiteCursor2.longValue(5);
                                    arrayList12.add(TLdeserialize);
                                    int max = Math.max(i4, TLdeserialize.date);
                                    addUsersAndChatsFromMessage(TLdeserialize, arrayList9, arrayList10, null);
                                    TLdeserialize.send_state = sQLiteCursor2.intValue(2);
                                    if ((TLdeserialize.peer_id.channel_id == 0 && !MessageObject.isUnread(TLdeserialize) && !DialogObject.isEncryptedDialog(TLdeserialize.dialog_id)) || TLdeserialize.id > 0) {
                                        TLdeserialize.send_state = 0;
                                    }
                                    if (DialogObject.isEncryptedDialog(TLdeserialize.dialog_id) && !sQLiteCursor2.isNull(5)) {
                                        TLdeserialize.random_id = sQLiteCursor2.longValue(5);
                                    }
                                    try {
                                        tLRPC$TL_messageReplyHeader = TLdeserialize.reply_to;
                                    } catch (Exception e) {
                                        e = e;
                                        i2 = max;
                                    }
                                    if (tLRPC$TL_messageReplyHeader != null && tLRPC$TL_messageReplyHeader.reply_to_msg_id != 0) {
                                        TLRPC$MessageAction tLRPC$MessageAction = TLdeserialize.action;
                                        if ((tLRPC$MessageAction instanceof TLRPC$TL_messageActionPinMessage) || (tLRPC$MessageAction instanceof TLRPC$TL_messageActionPaymentSent) || (tLRPC$MessageAction instanceof TLRPC$TL_messageActionGameScore)) {
                                            if (sQLiteCursor2.isNull(6) || (byteBufferValue = sQLiteCursor2.byteBufferValue(6)) == null) {
                                                i2 = max;
                                            } else {
                                                TLRPC$Message TLdeserialize2 = TLRPC$Message.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                                                TLdeserialize.replyMessage = TLdeserialize2;
                                                i2 = max;
                                                try {
                                                    TLdeserialize2.readAttachPath(byteBufferValue, getUserConfig().clientUserId);
                                                    byteBufferValue.reuse();
                                                    TLRPC$Message tLRPC$Message = TLdeserialize.replyMessage;
                                                    if (tLRPC$Message != null) {
                                                        addUsersAndChatsFromMessage(tLRPC$Message, arrayList9, arrayList10, null);
                                                    }
                                                } catch (Exception e2) {
                                                    e = e2;
                                                    checkSQLException(e);
                                                    i4 = i2;
                                                    str = str2;
                                                    arrayList14 = arrayList8;
                                                    longSparseArray4 = longSparseArray3;
                                                }
                                            }
                                            if (TLdeserialize.replyMessage == null) {
                                                addReplyMessages(TLdeserialize, longSparseArray5, longSparseArray6);
                                            }
                                            i4 = i2;
                                        }
                                    }
                                    i2 = max;
                                    i4 = i2;
                                } else {
                                    arrayList8 = arrayList14;
                                    longSparseArray3 = longSparseArray4;
                                    str2 = str;
                                }
                                str = str2;
                                arrayList14 = arrayList8;
                                longSparseArray4 = longSparseArray3;
                            } catch (Exception e3) {
                                e = e3;
                            }
                        }
                        ArrayList<TLRPC$User> arrayList17 = arrayList14;
                        LongSparseArray longSparseArray7 = longSparseArray4;
                        String str3 = str;
                        sQLiteCursor2.dispose();
                        this.database.executeFast("DELETE FROM unread_push_messages WHERE date <= " + i4).stepThis().dispose();
                        ?? r10 = 0;
                        SQLiteCursor queryFinalized2 = this.database.queryFinalized("SELECT data, mid, date, uid, random, fm, name, uname, flags FROM unread_push_messages WHERE 1 ORDER BY date DESC LIMIT 50", new Object[0]);
                        while (queryFinalized2.next()) {
                            try {
                                NativeByteBuffer byteBufferValue3 = queryFinalized2.byteBufferValue(r10);
                                if (byteBufferValue3 != null) {
                                    TLRPC$Message TLdeserialize3 = TLRPC$Message.TLdeserialize(byteBufferValue3, byteBufferValue3.readInt32(r10), r10);
                                    byteBufferValue3.reuse();
                                    TLdeserialize3.id = queryFinalized2.intValue(1);
                                    TLdeserialize3.date = queryFinalized2.intValue(2);
                                    TLdeserialize3.dialog_id = queryFinalized2.longValue(3);
                                    ArrayList arrayList18 = arrayList12;
                                    TLdeserialize3.random_id = queryFinalized2.longValue(4);
                                    if (queryFinalized2.isNull(5)) {
                                        i = 6;
                                        stringValue = null;
                                    } else {
                                        stringValue = queryFinalized2.stringValue(5);
                                        i = 6;
                                    }
                                    String stringValue2 = queryFinalized2.isNull(i) ? null : queryFinalized2.stringValue(i);
                                    String stringValue3 = queryFinalized2.isNull(7) ? null : queryFinalized2.stringValue(7);
                                    int intValue = queryFinalized2.intValue(8);
                                    if (MessageObject.getFromChatId(TLdeserialize3) == 0) {
                                        arrayList6 = arrayList18;
                                        if (DialogObject.isUserDialog(TLdeserialize3.dialog_id)) {
                                            TLRPC$TL_peerUser tLRPC$TL_peerUser = new TLRPC$TL_peerUser();
                                            TLdeserialize3.from_id = tLRPC$TL_peerUser;
                                            arrayList7 = arrayList11;
                                            tLRPC$TL_peerUser.user_id = TLdeserialize3.dialog_id;
                                            if (!DialogObject.isUserDialog(TLdeserialize3.dialog_id)) {
                                                if (!arrayList9.contains(Long.valueOf(TLdeserialize3.dialog_id))) {
                                                    arrayList9.add(Long.valueOf(TLdeserialize3.dialog_id));
                                                }
                                            } else if (DialogObject.isChatDialog(TLdeserialize3.dialog_id) && !arrayList10.contains(Long.valueOf(-TLdeserialize3.dialog_id))) {
                                                arrayList10.add(Long.valueOf(-TLdeserialize3.dialog_id));
                                            }
                                            arrayList13.add(new MessageObject(this.currentAccount, TLdeserialize3, stringValue, stringValue2, stringValue3, (intValue & 1) == 0, (intValue & 2) == 0, (TLdeserialize3.flags & Integer.MIN_VALUE) == 0, false));
                                            addUsersAndChatsFromMessage(TLdeserialize3, arrayList9, arrayList10, null);
                                        }
                                    } else {
                                        arrayList6 = arrayList18;
                                    }
                                    arrayList7 = arrayList11;
                                    if (!DialogObject.isUserDialog(TLdeserialize3.dialog_id)) {
                                    }
                                    arrayList13.add(new MessageObject(this.currentAccount, TLdeserialize3, stringValue, stringValue2, stringValue3, (intValue & 1) == 0, (intValue & 2) == 0, (TLdeserialize3.flags & Integer.MIN_VALUE) == 0, false));
                                    addUsersAndChatsFromMessage(TLdeserialize3, arrayList9, arrayList10, null);
                                } else {
                                    arrayList6 = arrayList12;
                                    arrayList7 = arrayList11;
                                }
                                arrayList11 = arrayList7;
                                arrayList12 = arrayList6;
                                r10 = 0;
                            } catch (Exception e4) {
                                e = e4;
                                sQLiteCursor2 = queryFinalized2;
                                checkSQLException(e);
                                if (sQLiteCursor2 != null) {
                                    sQLiteCursor2.dispose();
                                    return;
                                }
                                return;
                            } catch (Throwable th) {
                                th = th;
                                sQLiteCursor = queryFinalized2;
                                if (sQLiteCursor != null) {
                                    sQLiteCursor.dispose();
                                }
                                throw th;
                            }
                        }
                        ArrayList arrayList19 = arrayList12;
                        ArrayList arrayList20 = arrayList11;
                        queryFinalized2.dispose();
                        arrayList = arrayList19;
                        arrayList5 = arrayList13;
                        arrayList2 = arrayList17;
                        arrayList4 = arrayList15;
                        arrayList3 = arrayList16;
                        loadReplyMessages(longSparseArray5, longSparseArray6, arrayList9, arrayList10, false);
                        if (!arrayList20.isEmpty()) {
                            getEncryptedChatsInternal(TextUtils.join(str3, arrayList20), arrayList3, arrayList9);
                        }
                        if (!arrayList9.isEmpty()) {
                            getUsersInternal(TextUtils.join(str3, arrayList9), arrayList2);
                        }
                        if (!arrayList10.isEmpty()) {
                            getChatsInternal(TextUtils.join(str3, arrayList10), arrayList4);
                            int i5 = 0;
                            while (i5 < arrayList4.size()) {
                                TLRPC$Chat tLRPC$Chat = arrayList4.get(i5);
                                if (tLRPC$Chat == null || !(ChatObject.isNotInChat(tLRPC$Chat) || tLRPC$Chat.min || tLRPC$Chat.migrated_to != null)) {
                                    longSparseArray2 = longSparseArray7;
                                } else {
                                    long j2 = -tLRPC$Chat.id;
                                    this.database.executeFast("UPDATE dialogs SET unread_count = 0 WHERE did = " + j2).stepThis().dispose();
                                    this.database.executeFast(String.format(Locale.US, "UPDATE messages_v2 SET read_state = 3 WHERE uid = %d AND mid > 0 AND read_state IN(0,2) AND out = 0", Long.valueOf(j2))).stepThis().dispose();
                                    arrayList4.remove(i5);
                                    i5 += -1;
                                    longSparseArray2 = longSparseArray7;
                                    longSparseArray2.remove(j2);
                                    int i6 = 0;
                                    while (i6 < arrayList.size()) {
                                        if (((TLRPC$Message) arrayList.get(i6)).dialog_id == j2) {
                                            arrayList.remove(i6);
                                            i6--;
                                        }
                                        i6++;
                                    }
                                }
                                i5++;
                                longSparseArray7 = longSparseArray2;
                            }
                        }
                        longSparseArray = longSparseArray7;
                    } else {
                        arrayList = arrayList12;
                        arrayList2 = arrayList14;
                        arrayList3 = arrayList16;
                        longSparseArray = longSparseArray4;
                        arrayList4 = arrayList15;
                        arrayList5 = arrayList13;
                    }
                    Collections.reverse(arrayList);
                    final ArrayList arrayList21 = arrayList;
                    final ArrayList arrayList22 = arrayList5;
                    final ArrayList<TLRPC$User> arrayList23 = arrayList2;
                    final ArrayList<TLRPC$Chat> arrayList24 = arrayList4;
                    final ArrayList<TLRPC$EncryptedChat> arrayList25 = arrayList3;
                    AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda133
                        @Override // java.lang.Runnable
                        public final void run() {
                            MessagesStorage.this.lambda$loadUnreadMessages$58(longSparseArray, arrayList21, arrayList22, arrayList23, arrayList24, arrayList25);
                        }
                    });
                } catch (Exception e5) {
                    e = e5;
                    sQLiteCursor2 = queryFinalized;
                } catch (Throwable th2) {
                    th = th2;
                    sQLiteCursor = queryFinalized;
                }
            } catch (Throwable th3) {
                th = th3;
            }
        } catch (Exception e6) {
            e = e6;
            sQLiteCursor2 = null;
        } catch (Throwable th4) {
            th = th4;
            sQLiteCursor = null;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadUnreadMessages$58(LongSparseArray longSparseArray, ArrayList arrayList, ArrayList arrayList2, ArrayList arrayList3, ArrayList arrayList4, ArrayList arrayList5) {
        getNotificationsController().processLoadedUnreadMessages(longSparseArray, arrayList, arrayList2, arrayList3, arrayList4, arrayList5);
    }

    public void putWallpapers(final ArrayList<TLRPC$WallPaper> arrayList, final int i) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda59
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$putWallpapers$60(i, arrayList);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:38:0x0093  */
    /* JADX WARN: Removed duplicated region for block: B:40:0x0098  */
    /* JADX WARN: Removed duplicated region for block: B:44:0x00a0  */
    /* JADX WARN: Removed duplicated region for block: B:46:0x00a5  */
    /* JADX WARN: Removed duplicated region for block: B:61:? A[RETURN, SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$putWallpapers$60(int i, ArrayList arrayList) {
        Throwable th;
        SQLiteDatabase sQLiteDatabase;
        Exception e;
        SQLiteDatabase sQLiteDatabase2;
        SQLitePreparedStatement executeFast;
        SQLitePreparedStatement sQLitePreparedStatement = null;
        if (i == 1) {
            try {
                try {
                    this.database.executeFast("DELETE FROM wallpapers2 WHERE num >= -1").stepThis().dispose();
                } catch (Exception e2) {
                    e = e2;
                    checkSQLException(e);
                    sQLiteDatabase2 = this.database;
                    if (sQLiteDatabase2 != null) {
                        sQLiteDatabase2.commitTransaction();
                    }
                    if (sQLitePreparedStatement == null) {
                        sQLitePreparedStatement.dispose();
                        return;
                    }
                    return;
                }
            } catch (Throwable th2) {
                th = th2;
                sQLiteDatabase = this.database;
                if (sQLiteDatabase != null) {
                    sQLiteDatabase.commitTransaction();
                }
                if (sQLitePreparedStatement != null) {
                    sQLitePreparedStatement.dispose();
                }
                throw th;
            }
        }
        this.database.beginTransaction();
        if (i != 0) {
            executeFast = this.database.executeFast("REPLACE INTO wallpapers2 VALUES(?, ?, ?)");
        } else {
            executeFast = this.database.executeFast("UPDATE wallpapers2 SET data = ? WHERE uid = ?");
        }
        try {
            int size = arrayList.size();
            for (int i2 = 0; i2 < size; i2++) {
                TLRPC$WallPaper tLRPC$WallPaper = (TLRPC$WallPaper) arrayList.get(i2);
                executeFast.requery();
                NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(tLRPC$WallPaper.getObjectSize());
                tLRPC$WallPaper.serializeToStream(nativeByteBuffer);
                if (i != 0) {
                    executeFast.bindLong(1, tLRPC$WallPaper.id);
                    executeFast.bindByteBuffer(2, nativeByteBuffer);
                    if (i < 0) {
                        executeFast.bindInteger(3, i);
                    } else {
                        executeFast.bindInteger(3, i == 2 ? -1 : i2);
                    }
                } else {
                    executeFast.bindByteBuffer(1, nativeByteBuffer);
                    executeFast.bindLong(2, tLRPC$WallPaper.id);
                }
                executeFast.step();
                nativeByteBuffer.reuse();
            }
            executeFast.dispose();
            this.database.commitTransaction();
            SQLiteDatabase sQLiteDatabase3 = this.database;
            if (sQLiteDatabase3 != null) {
                sQLiteDatabase3.commitTransaction();
            }
        } catch (Exception e3) {
            e = e3;
            sQLitePreparedStatement = executeFast;
            checkSQLException(e);
            sQLiteDatabase2 = this.database;
            if (sQLiteDatabase2 != null) {
            }
            if (sQLitePreparedStatement == null) {
            }
        } catch (Throwable th3) {
            th = th3;
            sQLitePreparedStatement = executeFast;
            sQLiteDatabase = this.database;
            if (sQLiteDatabase != null) {
            }
            if (sQLitePreparedStatement != null) {
            }
            throw th;
        }
    }

    public void deleteWallpaper(final long j) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda69
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$deleteWallpaper$61(j);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$deleteWallpaper$61(long j) {
        try {
            SQLiteDatabase sQLiteDatabase = this.database;
            sQLiteDatabase.executeFast("DELETE FROM wallpapers2 WHERE uid = " + j).stepThis().dispose();
        } catch (Exception e) {
            checkSQLException(e);
        }
    }

    public void getWallpapers() {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda26
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$getWallpapers$63();
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$getWallpapers$63() {
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                sQLiteCursor = this.database.queryFinalized("SELECT data FROM wallpapers2 WHERE 1 ORDER BY num ASC", new Object[0]);
                final ArrayList arrayList = new ArrayList();
                while (sQLiteCursor.next()) {
                    NativeByteBuffer byteBufferValue = sQLiteCursor.byteBufferValue(0);
                    if (byteBufferValue != null) {
                        TLRPC$WallPaper TLdeserialize = TLRPC$WallPaper.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                        byteBufferValue.reuse();
                        if (TLdeserialize != null) {
                            arrayList.add(TLdeserialize);
                        }
                    }
                }
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda1
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesStorage.lambda$getWallpapers$62(arrayList);
                    }
                });
            } catch (Exception e) {
                checkSQLException(e);
                if (sQLiteCursor == null) {
                    return;
                }
            }
            sQLiteCursor.dispose();
        } catch (Throwable th) {
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
            throw th;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$getWallpapers$62(ArrayList arrayList) {
        NotificationCenter.getGlobalInstance().postNotificationName(NotificationCenter.wallpapersDidLoad, arrayList);
    }

    public void addRecentLocalFile(final String str, final String str2, final TLRPC$Document tLRPC$Document) {
        if (str == null || str.length() == 0) {
            return;
        }
        if ((str2 == null || str2.length() == 0) && tLRPC$Document == null) {
            return;
        }
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda178
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$addRecentLocalFile$64(tLRPC$Document, str, str2);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$addRecentLocalFile$64(TLRPC$Document tLRPC$Document, String str, String str2) {
        SQLitePreparedStatement sQLitePreparedStatement = null;
        try {
            try {
                if (tLRPC$Document != null) {
                    sQLitePreparedStatement = this.database.executeFast("UPDATE web_recent_v3 SET document = ? WHERE image_url = ?");
                    sQLitePreparedStatement.requery();
                    NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(tLRPC$Document.getObjectSize());
                    tLRPC$Document.serializeToStream(nativeByteBuffer);
                    sQLitePreparedStatement.bindByteBuffer(1, nativeByteBuffer);
                    sQLitePreparedStatement.bindString(2, str);
                    sQLitePreparedStatement.step();
                    sQLitePreparedStatement.dispose();
                    nativeByteBuffer.reuse();
                } else {
                    sQLitePreparedStatement = this.database.executeFast("UPDATE web_recent_v3 SET local_url = ? WHERE image_url = ?");
                    sQLitePreparedStatement.requery();
                    sQLitePreparedStatement.bindString(1, str2);
                    sQLitePreparedStatement.bindString(2, str);
                    sQLitePreparedStatement.step();
                    sQLitePreparedStatement.dispose();
                }
            } catch (Exception e) {
                checkSQLException(e);
                if (sQLitePreparedStatement == null) {
                    return;
                }
            }
            sQLitePreparedStatement.dispose();
        } catch (Throwable th) {
            if (sQLitePreparedStatement != null) {
                sQLitePreparedStatement.dispose();
            }
            throw th;
        }
    }

    public void deleteUserChatHistory(final long j, final long j2) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda90
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$deleteUserChatHistory$67(j, j2);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:37:0x00c2  */
    /* JADX WARN: Removed duplicated region for block: B:38:0x00c4  */
    /* JADX WARN: Removed duplicated region for block: B:41:0x00de A[Catch: all -> 0x00ed, Exception -> 0x00f0, TRY_LEAVE, TryCatch #7 {Exception -> 0x00f0, all -> 0x00ed, blocks: (B:3:0x0004, B:35:0x00a0, B:39:0x00c6, B:41:0x00de), top: B:69:0x0004 }] */
    /* JADX WARN: Removed duplicated region for block: B:57:0x00fe  */
    /* JADX WARN: Removed duplicated region for block: B:74:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Type inference failed for: r13v0 */
    /* JADX WARN: Type inference failed for: r13v1, types: [boolean, int] */
    /* JADX WARN: Type inference failed for: r13v8 */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$deleteUserChatHistory$67(final long j, long j2) {
        SQLiteCursor sQLiteCursor;
        ArrayList<Pair<Long, Integer>> arrayList;
        boolean z;
        try {
            final ArrayList<Integer> arrayList2 = new ArrayList<>();
            SQLiteDatabase sQLiteDatabase = this.database;
            ?? r13 = 0;
            SQLiteCursor queryFinalized = sQLiteDatabase.queryFinalized("SELECT data FROM messages_v2 WHERE uid = " + j, new Object[0]);
            try {
                try {
                    ArrayList<File> arrayList3 = new ArrayList<>();
                    final ArrayList<String> arrayList4 = new ArrayList<>();
                    ArrayList<Pair<Long, Integer>> arrayList5 = new ArrayList<>();
                    while (queryFinalized.next()) {
                        try {
                            NativeByteBuffer byteBufferValue = queryFinalized.byteBufferValue(r13);
                            if (byteBufferValue != null) {
                                TLRPC$Message TLdeserialize = TLRPC$Message.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(r13), r13);
                                if (TLdeserialize != null) {
                                    TLdeserialize.readAttachPath(byteBufferValue, getUserConfig().clientUserId);
                                    if ((UserObject.isReplyUser(j) && MessageObject.getPeerId(TLdeserialize.fwd_from.from_id) == j2) || (MessageObject.getFromChatId(TLdeserialize) == j2 && TLdeserialize.id != 1)) {
                                        arrayList2.add(Integer.valueOf(TLdeserialize.id));
                                        z = true;
                                        arrayList = arrayList5;
                                        try {
                                            addFilesToDelete(TLdeserialize, arrayList3, arrayList5, arrayList4, false);
                                            byteBufferValue.reuse();
                                        } catch (Exception e) {
                                            e = e;
                                            checkSQLException(e);
                                            queryFinalized.dispose();
                                            deleteFromDownloadQueue(arrayList, z);
                                            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda154
                                                @Override // java.lang.Runnable
                                                public final void run() {
                                                    MessagesStorage.this.lambda$deleteUserChatHistory$65(arrayList4, j, arrayList2);
                                                }
                                            });
                                            lambda$markMessagesAsDeleted$186(j, arrayList2, false, false);
                                            lambda$updateDialogsWithDeletedMessages$185(j, !DialogObject.isChatDialog(j) ? -j : 0L, arrayList2, null);
                                            getFileLoader().deleteFiles(arrayList3, 0);
                                            if (arrayList2.isEmpty()) {
                                            }
                                        }
                                    }
                                }
                                arrayList = arrayList5;
                                z = true;
                                byteBufferValue.reuse();
                            } else {
                                arrayList = arrayList5;
                            }
                            arrayList5 = arrayList;
                            r13 = 0;
                        } catch (Exception e2) {
                            e = e2;
                            arrayList = arrayList5;
                            z = true;
                        }
                    }
                    arrayList = arrayList5;
                    z = true;
                    queryFinalized.dispose();
                    deleteFromDownloadQueue(arrayList, z);
                    AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda154
                        @Override // java.lang.Runnable
                        public final void run() {
                            MessagesStorage.this.lambda$deleteUserChatHistory$65(arrayList4, j, arrayList2);
                        }
                    });
                    lambda$markMessagesAsDeleted$186(j, arrayList2, false, false);
                    lambda$updateDialogsWithDeletedMessages$185(j, !DialogObject.isChatDialog(j) ? -j : 0L, arrayList2, null);
                    getFileLoader().deleteFiles(arrayList3, 0);
                    if (arrayList2.isEmpty()) {
                        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda153
                            @Override // java.lang.Runnable
                            public final void run() {
                                MessagesStorage.this.lambda$deleteUserChatHistory$66(arrayList2, j);
                            }
                        });
                    }
                } catch (Exception e3) {
                    e = e3;
                    sQLiteCursor = queryFinalized;
                    try {
                        checkSQLException(e);
                        if (sQLiteCursor != null) {
                            sQLiteCursor.dispose();
                        }
                    } catch (Throwable th) {
                        th = th;
                        if (sQLiteCursor != null) {
                        }
                        throw th;
                    }
                }
            } catch (Throwable th2) {
                th = th2;
                sQLiteCursor = queryFinalized;
                if (sQLiteCursor != null) {
                    sQLiteCursor.dispose();
                }
                throw th;
            }
        } catch (Exception e4) {
            e = e4;
            sQLiteCursor = null;
        } catch (Throwable th3) {
            th = th3;
            sQLiteCursor = null;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$deleteUserChatHistory$65(ArrayList arrayList, long j, ArrayList arrayList2) {
        getFileLoader().cancelLoadFiles(arrayList);
        getMessagesController().markDialogMessageAsDeleted(j, arrayList2);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$deleteUserChatHistory$66(ArrayList arrayList, long j) {
        NotificationCenter notificationCenter = getNotificationCenter();
        int i = NotificationCenter.messagesDeleted;
        Object[] objArr = new Object[3];
        objArr[0] = arrayList;
        objArr[1] = Long.valueOf(DialogObject.isChatDialog(j) ? -j : 0L);
        objArr[2] = Boolean.FALSE;
        notificationCenter.postNotificationName(i, objArr);
    }

    private boolean addFilesToDelete(TLRPC$Message tLRPC$Message, ArrayList<File> arrayList, ArrayList<Pair<Long, Integer>> arrayList2, ArrayList<String> arrayList3, boolean z) {
        long j;
        int i;
        int i2 = 0;
        if (tLRPC$Message == null) {
            return false;
        }
        TLRPC$Document document = MessageObject.getDocument(tLRPC$Message);
        TLRPC$Photo photo = MessageObject.getPhoto(tLRPC$Message);
        if (MessageObject.isVoiceMessage(tLRPC$Message)) {
            if (document == null || getMediaDataController().ringtoneDataStore.contains(document.id)) {
                return false;
            }
            j = document.id;
            i = 2;
        } else {
            if (MessageObject.isStickerMessage(tLRPC$Message) || MessageObject.isAnimatedStickerMessage(tLRPC$Message)) {
                if (document == null) {
                    return false;
                }
                j = document.id;
            } else if (MessageObject.isVideoMessage(tLRPC$Message) || MessageObject.isRoundVideoMessage(tLRPC$Message) || MessageObject.isGifMessage(tLRPC$Message)) {
                if (document == null) {
                    return false;
                }
                j = document.id;
                i = 4;
            } else if (document != null) {
                if (getMediaDataController().ringtoneDataStore.contains(document.id)) {
                    return false;
                }
                j = document.id;
                i = 8;
            } else if (photo == null || FileLoader.getClosestPhotoSizeWithSize(photo.sizes, AndroidUtilities.getPhotoSize()) == null) {
                j = 0;
                i = 0;
            } else {
                j = photo.id;
            }
            i = 1;
        }
        if (j != 0) {
            arrayList2.add(new Pair<>(Long.valueOf(j), Integer.valueOf(i)));
        }
        if (photo != null) {
            int size = photo.sizes.size();
            while (i2 < size) {
                TLRPC$PhotoSize tLRPC$PhotoSize = photo.sizes.get(i2);
                String attachFileName = FileLoader.getAttachFileName(tLRPC$PhotoSize);
                if (!TextUtils.isEmpty(attachFileName)) {
                    arrayList3.add(attachFileName);
                }
                File pathToAttach = getFileLoader().getPathToAttach(tLRPC$PhotoSize, z);
                if (pathToAttach.toString().length() > 0) {
                    arrayList.add(pathToAttach);
                }
                i2++;
            }
            return true;
        } else if (document != null) {
            String attachFileName2 = FileLoader.getAttachFileName(document);
            if (!TextUtils.isEmpty(attachFileName2)) {
                arrayList3.add(attachFileName2);
            }
            File pathToAttach2 = getFileLoader().getPathToAttach(document, z);
            if (pathToAttach2.toString().length() > 0) {
                arrayList.add(pathToAttach2);
            }
            int size2 = document.thumbs.size();
            while (i2 < size2) {
                File pathToAttach3 = getFileLoader().getPathToAttach(document.thumbs.get(i2));
                if (pathToAttach3.toString().length() > 0) {
                    arrayList.add(pathToAttach3);
                }
                i2++;
            }
            return true;
        } else {
            return false;
        }
    }

    public void deleteDialog(final long j, final int i) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda46
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$deleteDialog$70(i, j);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:104:0x02ca  */
    /* JADX WARN: Removed duplicated region for block: B:141:0x03df A[Catch: all -> 0x0048, Exception -> 0x0051, TRY_ENTER, TryCatch #20 {Exception -> 0x0051, all -> 0x0048, blocks: (B:4:0x000c, B:63:0x012e, B:141:0x03df, B:143:0x03e5), top: B:227:0x000c }] */
    /* JADX WARN: Removed duplicated region for block: B:145:0x0405 A[Catch: all -> 0x0523, Exception -> 0x052b, TRY_ENTER, TryCatch #31 {Exception -> 0x052b, all -> 0x0523, blocks: (B:24:0x005a, B:146:0x0427, B:139:0x0343, B:145:0x0405, B:30:0x006d, B:55:0x0106), top: B:205:0x005a }] */
    /* JADX WARN: Removed duplicated region for block: B:172:0x0537  */
    /* JADX WARN: Removed duplicated region for block: B:174:0x053c  */
    /* JADX WARN: Removed duplicated region for block: B:176:0x0541  */
    /* JADX WARN: Removed duplicated region for block: B:178:0x0546  */
    /* JADX WARN: Removed duplicated region for block: B:183:0x054e  */
    /* JADX WARN: Removed duplicated region for block: B:185:0x0553  */
    /* JADX WARN: Removed duplicated region for block: B:187:0x0558  */
    /* JADX WARN: Removed duplicated region for block: B:189:0x055d  */
    /* JADX WARN: Removed duplicated region for block: B:234:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Type inference failed for: r14v0 */
    /* JADX WARN: Type inference failed for: r14v1, types: [boolean, int] */
    /* JADX WARN: Type inference failed for: r14v2 */
    /* JADX WARN: Type inference failed for: r8v11 */
    /* JADX WARN: Type inference failed for: r8v7 */
    /* JADX WARN: Type inference failed for: r8v8, types: [boolean, int] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$deleteDialog$70(int i, long j) {
        Throwable th;
        SQLiteCursor sQLiteCursor;
        SQLitePreparedStatement sQLitePreparedStatement;
        SQLiteCursor sQLiteCursor2;
        Throwable th2;
        SQLitePreparedStatement sQLitePreparedStatement2;
        SQLitePreparedStatement sQLitePreparedStatement3;
        SQLitePreparedStatement sQLitePreparedStatement4;
        SQLitePreparedStatement sQLitePreparedStatement5;
        SQLitePreparedStatement sQLitePreparedStatement6;
        SQLiteCursor sQLiteCursor3;
        final ArrayList<String> arrayList;
        ArrayList<File> arrayList2;
        String str;
        String str2;
        boolean z;
        boolean z2;
        int i2;
        String str3;
        String str4;
        String str5;
        SQLiteCursor sQLiteCursor4;
        String str6;
        String str7;
        int i3;
        SQLitePreparedStatement executeFast;
        int i4;
        String str8 = " AND mid != ";
        ?? r14 = 0;
        if (i == 3) {
            try {
                SQLiteCursor queryFinalized = this.database.queryFinalized("SELECT last_mid FROM dialogs WHERE did = " + j, new Object[0]);
                try {
                    int intValue = queryFinalized.next() ? queryFinalized.intValue(0) : -1;
                    queryFinalized.dispose();
                    if (intValue != 0) {
                        return;
                    }
                } catch (Exception e) {
                    e = e;
                    sQLiteCursor2 = queryFinalized;
                    sQLiteCursor = null;
                    sQLitePreparedStatement3 = null;
                    sQLitePreparedStatement4 = null;
                    th2 = e;
                    try {
                        checkSQLException(th2);
                        if (sQLiteCursor2 != null) {
                        }
                        if (sQLiteCursor != null) {
                        }
                        if (sQLitePreparedStatement4 != null) {
                        }
                        if (sQLitePreparedStatement3 == null) {
                        }
                    } catch (Throwable th3) {
                        th = th3;
                        th = th;
                        sQLitePreparedStatement6 = sQLitePreparedStatement3;
                        sQLitePreparedStatement5 = sQLitePreparedStatement4;
                        if (sQLiteCursor2 != null) {
                            sQLiteCursor2.dispose();
                        }
                        if (sQLiteCursor != null) {
                            sQLiteCursor.dispose();
                        }
                        if (sQLitePreparedStatement5 != null) {
                            sQLitePreparedStatement5.dispose();
                        }
                        if (sQLitePreparedStatement6 != null) {
                            sQLitePreparedStatement6.dispose();
                        }
                        throw th;
                    }
                } catch (Throwable th4) {
                    th = th4;
                    sQLiteCursor2 = queryFinalized;
                    sQLiteCursor = null;
                    sQLitePreparedStatement3 = null;
                    sQLitePreparedStatement4 = null;
                    th = th;
                    sQLitePreparedStatement6 = sQLitePreparedStatement3;
                    sQLitePreparedStatement5 = sQLitePreparedStatement4;
                    if (sQLiteCursor2 != null) {
                    }
                    if (sQLiteCursor != null) {
                    }
                    if (sQLitePreparedStatement5 != null) {
                    }
                    if (sQLitePreparedStatement6 != null) {
                    }
                    throw th;
                }
            } catch (Exception e2) {
                th2 = e2;
                sQLiteCursor = null;
                sQLitePreparedStatement2 = null;
                sQLiteCursor2 = null;
                sQLitePreparedStatement4 = null;
                sQLitePreparedStatement3 = sQLitePreparedStatement2;
                checkSQLException(th2);
                if (sQLiteCursor2 != null) {
                }
                if (sQLiteCursor != null) {
                }
                if (sQLitePreparedStatement4 != null) {
                }
                if (sQLitePreparedStatement3 == null) {
                }
            } catch (Throwable th5) {
                th = th5;
                sQLiteCursor = null;
                sQLitePreparedStatement = null;
                sQLiteCursor2 = null;
                sQLitePreparedStatement5 = null;
                sQLitePreparedStatement6 = sQLitePreparedStatement;
                if (sQLiteCursor2 != null) {
                }
                if (sQLiteCursor != null) {
                }
                if (sQLitePreparedStatement5 != null) {
                }
                if (sQLitePreparedStatement6 != null) {
                }
                throw th;
            }
        }
        try {
            String str9 = "SELECT data FROM messages_v2 WHERE uid = ";
            if (DialogObject.isEncryptedDialog(j) || i == 2) {
                SQLiteCursor queryFinalized2 = this.database.queryFinalized("SELECT data FROM messages_v2 WHERE uid = " + j, new Object[0]);
                try {
                    ArrayList<File> arrayList3 = new ArrayList<>();
                    ArrayList<String> arrayList4 = new ArrayList<>();
                    ArrayList<Pair<Long, Integer>> arrayList5 = new ArrayList<>();
                    while (queryFinalized2.next()) {
                        try {
                            NativeByteBuffer byteBufferValue = queryFinalized2.byteBufferValue(r14);
                            if (byteBufferValue != null) {
                                TLRPC$Message TLdeserialize = TLRPC$Message.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(r14), r14);
                                TLdeserialize.readAttachPath(byteBufferValue, getUserConfig().clientUserId);
                                byteBufferValue.reuse();
                                arrayList = arrayList4;
                                ArrayList<File> arrayList6 = arrayList3;
                                sQLiteCursor3 = queryFinalized2;
                                str = str9;
                                arrayList2 = arrayList6;
                                str2 = str8;
                                z = true;
                                try {
                                    addFilesToDelete(TLdeserialize, arrayList6, arrayList5, arrayList, false);
                                } catch (Exception e3) {
                                    e = e3;
                                    try {
                                        checkSQLException(e);
                                        z2 = z;
                                        sQLiteCursor3.dispose();
                                        deleteFromDownloadQueue(arrayList5, z2);
                                        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda143
                                            @Override // java.lang.Runnable
                                            public final void run() {
                                                MessagesStorage.this.lambda$deleteDialog$68(arrayList);
                                            }
                                        });
                                        getFileLoader().deleteFiles(arrayList2, i);
                                        i2 = z2;
                                        String str10 = "DELETE FROM media_counts_v2 WHERE uid = ";
                                        String str11 = "DELETE FROM bot_keyboard WHERE uid = ";
                                        if (i != 0) {
                                        }
                                        str3 = "DELETE FROM media_holes_v2 WHERE uid = ";
                                        str4 = "DELETE FROM media_v4 WHERE uid = ";
                                        str5 = "DELETE FROM bot_keyboard WHERE uid = ";
                                        this.database.executeFast("DELETE FROM dialogs WHERE did = " + j).stepThis().dispose();
                                        this.database.executeFast("DELETE FROM chat_pinned_v2 WHERE uid = " + j).stepThis().dispose();
                                        this.database.executeFast("DELETE FROM chat_pinned_count WHERE uid = " + j).stepThis().dispose();
                                        this.database.executeFast("DELETE FROM channel_users_v2 WHERE did = " + j).stepThis().dispose();
                                        this.database.executeFast("DELETE FROM search_recent WHERE did = " + j).stepThis().dispose();
                                        if (DialogObject.isEncryptedDialog(j)) {
                                        }
                                        this.database.executeFast("UPDATE dialogs SET unread_count = 0, unread_count_i = 0 WHERE did = " + j).stepThis().dispose();
                                        this.database.executeFast("DELETE FROM messages_v2 WHERE uid = " + j).stepThis().dispose();
                                        this.database.executeFast(str5 + j).stepThis().dispose();
                                        this.database.executeFast("DELETE FROM media_counts_v2 WHERE uid = " + j).stepThis().dispose();
                                        this.database.executeFast(str4 + j).stepThis().dispose();
                                        this.database.executeFast("DELETE FROM messages_holes WHERE uid = " + j).stepThis().dispose();
                                        this.database.executeFast(str3 + j).stepThis().dispose();
                                        sQLiteCursor = null;
                                        sQLiteCursor = null;
                                        getMediaDataController().clearBotKeyboard(j, null);
                                        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda21
                                            @Override // java.lang.Runnable
                                            public final void run() {
                                                MessagesStorage.this.lambda$deleteDialog$69();
                                            }
                                        });
                                        resetAllUnreadCounters(false);
                                        updateWidgets(j);
                                    } catch (Exception e4) {
                                        e = e4;
                                        sQLiteCursor = null;
                                        th2 = e;
                                        sQLitePreparedStatement3 = null;
                                        sQLitePreparedStatement4 = null;
                                        sQLiteCursor2 = sQLiteCursor3;
                                        checkSQLException(th2);
                                        if (sQLiteCursor2 != null) {
                                        }
                                        if (sQLiteCursor != null) {
                                        }
                                        if (sQLitePreparedStatement4 != null) {
                                        }
                                        if (sQLitePreparedStatement3 == null) {
                                        }
                                    } catch (Throwable th6) {
                                        th = th6;
                                        sQLiteCursor = null;
                                        th = th;
                                        sQLitePreparedStatement6 = null;
                                        sQLitePreparedStatement5 = null;
                                        sQLiteCursor2 = sQLiteCursor3;
                                        if (sQLiteCursor2 != null) {
                                        }
                                        if (sQLiteCursor != null) {
                                        }
                                        if (sQLitePreparedStatement5 != null) {
                                        }
                                        if (sQLitePreparedStatement6 != null) {
                                        }
                                        throw th;
                                    }
                                } catch (Throwable th7) {
                                    th = th7;
                                    th = th;
                                    sQLiteCursor2 = sQLiteCursor3;
                                    sQLiteCursor = null;
                                    sQLitePreparedStatement = null;
                                    sQLitePreparedStatement5 = null;
                                    sQLitePreparedStatement6 = sQLitePreparedStatement;
                                    if (sQLiteCursor2 != null) {
                                    }
                                    if (sQLiteCursor != null) {
                                    }
                                    if (sQLitePreparedStatement5 != null) {
                                    }
                                    if (sQLitePreparedStatement6 != null) {
                                    }
                                    throw th;
                                }
                            } else {
                                arrayList = arrayList4;
                                arrayList2 = arrayList3;
                                sQLiteCursor3 = queryFinalized2;
                                str = str9;
                                str2 = str8;
                            }
                            arrayList3 = arrayList2;
                            arrayList4 = arrayList;
                            str8 = str2;
                            queryFinalized2 = sQLiteCursor3;
                            str9 = str;
                            r14 = 0;
                        } catch (Exception e5) {
                            e = e5;
                            arrayList = arrayList4;
                            arrayList2 = arrayList3;
                            sQLiteCursor3 = queryFinalized2;
                            str = str9;
                            str2 = str8;
                            z = true;
                        } catch (Throwable th8) {
                            th = th8;
                            sQLiteCursor3 = queryFinalized2;
                        }
                    }
                    arrayList = arrayList4;
                    arrayList2 = arrayList3;
                    sQLiteCursor3 = queryFinalized2;
                    str = str9;
                    str2 = str8;
                    z2 = true;
                    sQLiteCursor3.dispose();
                    deleteFromDownloadQueue(arrayList5, z2);
                    AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda143
                        @Override // java.lang.Runnable
                        public final void run() {
                            MessagesStorage.this.lambda$deleteDialog$68(arrayList);
                        }
                    });
                    getFileLoader().deleteFiles(arrayList2, i);
                    i2 = z2;
                } catch (Exception e6) {
                    e = e6;
                    sQLiteCursor3 = queryFinalized2;
                } catch (Throwable th9) {
                    th = th9;
                    sQLiteCursor3 = queryFinalized2;
                }
            } else {
                str = "SELECT data FROM messages_v2 WHERE uid = ";
                str2 = " AND mid != ";
                i2 = 1;
            }
            String str102 = "DELETE FROM media_counts_v2 WHERE uid = ";
            String str112 = "DELETE FROM bot_keyboard WHERE uid = ";
            if (i != 0 || i == 3) {
                str3 = "DELETE FROM media_holes_v2 WHERE uid = ";
                str4 = "DELETE FROM media_v4 WHERE uid = ";
                str5 = "DELETE FROM bot_keyboard WHERE uid = ";
                this.database.executeFast("DELETE FROM dialogs WHERE did = " + j).stepThis().dispose();
                this.database.executeFast("DELETE FROM chat_pinned_v2 WHERE uid = " + j).stepThis().dispose();
                this.database.executeFast("DELETE FROM chat_pinned_count WHERE uid = " + j).stepThis().dispose();
                this.database.executeFast("DELETE FROM channel_users_v2 WHERE did = " + j).stepThis().dispose();
                this.database.executeFast("DELETE FROM search_recent WHERE did = " + j).stepThis().dispose();
                if (DialogObject.isEncryptedDialog(j)) {
                    if (DialogObject.isChatDialog(j)) {
                        this.database.executeFast("DELETE FROM chat_settings_v2 WHERE uid = " + (-j)).stepThis().dispose();
                    }
                } else {
                    this.database.executeFast("DELETE FROM enc_chats WHERE uid = " + DialogObject.getEncryptedChatId(j)).stepThis().dispose();
                }
            } else if (i == 2) {
                SQLiteCursor queryFinalized3 = this.database.queryFinalized("SELECT last_mid_i, last_mid FROM dialogs WHERE did = " + j, new Object[0]);
                try {
                    if (queryFinalized3.next()) {
                        long longValue = queryFinalized3.longValue(0);
                        long longValue2 = queryFinalized3.longValue(i2);
                        sQLiteCursor4 = queryFinalized3;
                        try {
                            ?? r8 = 0;
                            SQLiteCursor queryFinalized4 = this.database.queryFinalized(str + j + " AND mid IN (" + longValue + "," + longValue2 + ")", new Object[0]);
                            int i5 = -1;
                            while (queryFinalized4.next()) {
                                try {
                                    try {
                                        NativeByteBuffer byteBufferValue2 = queryFinalized4.byteBufferValue(r8);
                                        if (byteBufferValue2 != null) {
                                            i3 = i5;
                                            try {
                                                TLRPC$Message TLdeserialize2 = TLRPC$Message.TLdeserialize(byteBufferValue2, byteBufferValue2.readInt32(r8), r8);
                                                if (TLdeserialize2 != null) {
                                                    str6 = str102;
                                                    str7 = str112;
                                                    try {
                                                        TLdeserialize2.readAttachPath(byteBufferValue2, getUserConfig().clientUserId);
                                                    } catch (Exception e7) {
                                                        e = e7;
                                                        try {
                                                            checkSQLException(e);
                                                            queryFinalized4.dispose();
                                                            SQLiteDatabase sQLiteDatabase = this.database;
                                                            StringBuilder sb = new StringBuilder();
                                                            sb.append("DELETE FROM messages_v2 WHERE uid = ");
                                                            sb.append(j);
                                                            String str12 = str2;
                                                            sb.append(str12);
                                                            sb.append(longValue);
                                                            sb.append(str12);
                                                            sb.append(longValue2);
                                                            sQLiteDatabase.executeFast(sb.toString()).stepThis().dispose();
                                                            this.database.executeFast("DELETE FROM messages_holes WHERE uid = " + j).stepThis().dispose();
                                                            this.database.executeFast(str7 + j).stepThis().dispose();
                                                            this.database.executeFast(str6 + j).stepThis().dispose();
                                                            this.database.executeFast("DELETE FROM media_v4 WHERE uid = " + j).stepThis().dispose();
                                                            this.database.executeFast("DELETE FROM media_holes_v2 WHERE uid = " + j).stepThis().dispose();
                                                            getMediaDataController().clearBotKeyboard(j, null);
                                                            executeFast = this.database.executeFast("REPLACE INTO messages_holes VALUES(?, ?, ?)");
                                                            sQLitePreparedStatement2 = this.database.executeFast("REPLACE INTO media_holes_v2 VALUES(?, ?, ?, ?)");
                                                            i4 = i3;
                                                            if (i4 != -1) {
                                                            }
                                                            executeFast.dispose();
                                                        } catch (Exception e8) {
                                                            e = e8;
                                                            sQLiteCursor2 = sQLiteCursor4;
                                                            sQLiteCursor = queryFinalized4;
                                                            sQLitePreparedStatement3 = null;
                                                            sQLitePreparedStatement4 = null;
                                                            th2 = e;
                                                            checkSQLException(th2);
                                                            if (sQLiteCursor2 != null) {
                                                                sQLiteCursor2.dispose();
                                                            }
                                                            if (sQLiteCursor != null) {
                                                                sQLiteCursor.dispose();
                                                            }
                                                            if (sQLitePreparedStatement4 != null) {
                                                                sQLitePreparedStatement4.dispose();
                                                            }
                                                            if (sQLitePreparedStatement3 == null) {
                                                                sQLitePreparedStatement3.dispose();
                                                                return;
                                                            }
                                                            return;
                                                        }
                                                        try {
                                                            sQLitePreparedStatement2.dispose();
                                                            updateWidgets(j);
                                                            sQLiteCursor4.dispose();
                                                            return;
                                                        } catch (Exception e9) {
                                                            sQLiteCursor2 = sQLiteCursor4;
                                                            th2 = e9;
                                                            sQLiteCursor = null;
                                                            sQLitePreparedStatement4 = null;
                                                            sQLitePreparedStatement3 = sQLitePreparedStatement2;
                                                            checkSQLException(th2);
                                                            if (sQLiteCursor2 != null) {
                                                            }
                                                            if (sQLiteCursor != null) {
                                                            }
                                                            if (sQLitePreparedStatement4 != null) {
                                                            }
                                                            if (sQLitePreparedStatement3 == null) {
                                                            }
                                                        } catch (Throwable th10) {
                                                            sQLiteCursor2 = sQLiteCursor4;
                                                            th = th10;
                                                            sQLiteCursor = null;
                                                            sQLitePreparedStatement = sQLitePreparedStatement2;
                                                            sQLitePreparedStatement5 = null;
                                                            sQLitePreparedStatement6 = sQLitePreparedStatement;
                                                            if (sQLiteCursor2 != null) {
                                                            }
                                                            if (sQLiteCursor != null) {
                                                            }
                                                            if (sQLitePreparedStatement5 != null) {
                                                            }
                                                            if (sQLitePreparedStatement6 != null) {
                                                            }
                                                            throw th;
                                                        }
                                                    }
                                                } else {
                                                    str6 = str102;
                                                    str7 = str112;
                                                }
                                                byteBufferValue2.reuse();
                                                if (TLdeserialize2 != null) {
                                                    i5 = TLdeserialize2.id;
                                                    str102 = str6;
                                                    str112 = str7;
                                                    r8 = 0;
                                                }
                                            } catch (Exception e10) {
                                                e = e10;
                                                str6 = str102;
                                                str7 = str112;
                                            }
                                        } else {
                                            str6 = str102;
                                            str7 = str112;
                                            i3 = i5;
                                        }
                                        i5 = i3;
                                        str102 = str6;
                                        str112 = str7;
                                        r8 = 0;
                                    } catch (Exception e11) {
                                        e = e11;
                                        str6 = str102;
                                        str7 = str112;
                                        i3 = i5;
                                    }
                                } catch (Throwable th11) {
                                    th = th11;
                                    sQLiteCursor2 = sQLiteCursor4;
                                    sQLiteCursor = queryFinalized4;
                                    sQLitePreparedStatement3 = null;
                                    sQLitePreparedStatement4 = null;
                                    th = th;
                                    sQLitePreparedStatement6 = sQLitePreparedStatement3;
                                    sQLitePreparedStatement5 = sQLitePreparedStatement4;
                                    if (sQLiteCursor2 != null) {
                                    }
                                    if (sQLiteCursor != null) {
                                    }
                                    if (sQLitePreparedStatement5 != null) {
                                    }
                                    if (sQLitePreparedStatement6 != null) {
                                    }
                                    throw th;
                                }
                            }
                            str6 = str102;
                            str7 = str112;
                            i3 = i5;
                            queryFinalized4.dispose();
                            SQLiteDatabase sQLiteDatabase2 = this.database;
                            StringBuilder sb2 = new StringBuilder();
                            sb2.append("DELETE FROM messages_v2 WHERE uid = ");
                            sb2.append(j);
                            String str122 = str2;
                            sb2.append(str122);
                            sb2.append(longValue);
                            sb2.append(str122);
                            sb2.append(longValue2);
                            sQLiteDatabase2.executeFast(sb2.toString()).stepThis().dispose();
                            this.database.executeFast("DELETE FROM messages_holes WHERE uid = " + j).stepThis().dispose();
                            this.database.executeFast(str7 + j).stepThis().dispose();
                            this.database.executeFast(str6 + j).stepThis().dispose();
                            this.database.executeFast("DELETE FROM media_v4 WHERE uid = " + j).stepThis().dispose();
                            this.database.executeFast("DELETE FROM media_holes_v2 WHERE uid = " + j).stepThis().dispose();
                            getMediaDataController().clearBotKeyboard(j, null);
                            executeFast = this.database.executeFast("REPLACE INTO messages_holes VALUES(?, ?, ?)");
                            try {
                                sQLitePreparedStatement2 = this.database.executeFast("REPLACE INTO media_holes_v2 VALUES(?, ?, ?, ?)");
                                i4 = i3;
                                if (i4 != -1) {
                                    try {
                                        createFirstHoles(j, executeFast, sQLitePreparedStatement2, i4, 0);
                                    } catch (Exception e12) {
                                        sQLiteCursor2 = sQLiteCursor4;
                                        th2 = e12;
                                        sQLitePreparedStatement4 = executeFast;
                                        sQLiteCursor = null;
                                        sQLitePreparedStatement3 = sQLitePreparedStatement2;
                                        checkSQLException(th2);
                                        if (sQLiteCursor2 != null) {
                                        }
                                        if (sQLiteCursor != null) {
                                        }
                                        if (sQLitePreparedStatement4 != null) {
                                        }
                                        if (sQLitePreparedStatement3 == null) {
                                        }
                                    } catch (Throwable th12) {
                                        sQLiteCursor2 = sQLiteCursor4;
                                        th = th12;
                                        sQLitePreparedStatement5 = executeFast;
                                        sQLiteCursor = null;
                                        sQLitePreparedStatement6 = sQLitePreparedStatement2;
                                        if (sQLiteCursor2 != null) {
                                        }
                                        if (sQLiteCursor != null) {
                                        }
                                        if (sQLitePreparedStatement5 != null) {
                                        }
                                        if (sQLitePreparedStatement6 != null) {
                                        }
                                        throw th;
                                    }
                                }
                                executeFast.dispose();
                                sQLitePreparedStatement2.dispose();
                                updateWidgets(j);
                            } catch (Exception e13) {
                                sQLiteCursor2 = sQLiteCursor4;
                                th2 = e13;
                                sQLitePreparedStatement4 = executeFast;
                                sQLiteCursor = null;
                                sQLitePreparedStatement3 = null;
                            } catch (Throwable th13) {
                                sQLiteCursor2 = sQLiteCursor4;
                                th = th13;
                                sQLitePreparedStatement5 = executeFast;
                                sQLiteCursor = null;
                                sQLitePreparedStatement6 = null;
                            }
                        } catch (Exception e14) {
                            e = e14;
                            sQLiteCursor2 = sQLiteCursor4;
                            th2 = e;
                            sQLiteCursor = null;
                            sQLitePreparedStatement2 = null;
                            sQLitePreparedStatement4 = null;
                            sQLitePreparedStatement3 = sQLitePreparedStatement2;
                            checkSQLException(th2);
                            if (sQLiteCursor2 != null) {
                            }
                            if (sQLiteCursor != null) {
                            }
                            if (sQLitePreparedStatement4 != null) {
                            }
                            if (sQLitePreparedStatement3 == null) {
                            }
                        } catch (Throwable th14) {
                            th = th14;
                            sQLiteCursor2 = sQLiteCursor4;
                            th = th;
                            sQLiteCursor = null;
                            sQLitePreparedStatement = null;
                            sQLitePreparedStatement5 = null;
                            sQLitePreparedStatement6 = sQLitePreparedStatement;
                            if (sQLiteCursor2 != null) {
                            }
                            if (sQLiteCursor != null) {
                            }
                            if (sQLitePreparedStatement5 != null) {
                            }
                            if (sQLitePreparedStatement6 != null) {
                            }
                            throw th;
                        }
                    } else {
                        sQLiteCursor4 = queryFinalized3;
                    }
                    sQLiteCursor4.dispose();
                    return;
                } catch (Exception e15) {
                    e = e15;
                    sQLiteCursor4 = queryFinalized3;
                } catch (Throwable th15) {
                    th = th15;
                    sQLiteCursor4 = queryFinalized3;
                }
            } else {
                str3 = "DELETE FROM media_holes_v2 WHERE uid = ";
                str4 = "DELETE FROM media_v4 WHERE uid = ";
                str5 = "DELETE FROM bot_keyboard WHERE uid = ";
            }
            this.database.executeFast("UPDATE dialogs SET unread_count = 0, unread_count_i = 0 WHERE did = " + j).stepThis().dispose();
            this.database.executeFast("DELETE FROM messages_v2 WHERE uid = " + j).stepThis().dispose();
            this.database.executeFast(str5 + j).stepThis().dispose();
            this.database.executeFast("DELETE FROM media_counts_v2 WHERE uid = " + j).stepThis().dispose();
            this.database.executeFast(str4 + j).stepThis().dispose();
            this.database.executeFast("DELETE FROM messages_holes WHERE uid = " + j).stepThis().dispose();
            this.database.executeFast(str3 + j).stepThis().dispose();
            sQLiteCursor = null;
            sQLiteCursor = null;
        } catch (Exception e16) {
            e = e16;
            sQLiteCursor = null;
        } catch (Throwable th16) {
            th = th16;
            sQLiteCursor = null;
        }
        try {
            getMediaDataController().clearBotKeyboard(j, null);
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda21
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesStorage.this.lambda$deleteDialog$69();
                }
            });
            resetAllUnreadCounters(false);
            updateWidgets(j);
        } catch (Exception e17) {
            e = e17;
            th2 = e;
            SQLiteCursor sQLiteCursor5 = sQLiteCursor;
            sQLiteCursor2 = sQLiteCursor5;
            sQLitePreparedStatement4 = sQLiteCursor2;
            sQLitePreparedStatement3 = sQLiteCursor5;
            checkSQLException(th2);
            if (sQLiteCursor2 != null) {
            }
            if (sQLiteCursor != null) {
            }
            if (sQLitePreparedStatement4 != null) {
            }
            if (sQLitePreparedStatement3 == null) {
            }
        } catch (Throwable th17) {
            th = th17;
            th = th;
            SQLiteCursor sQLiteCursor6 = sQLiteCursor;
            sQLiteCursor2 = sQLiteCursor6;
            sQLitePreparedStatement5 = sQLiteCursor2;
            sQLitePreparedStatement6 = sQLiteCursor6;
            if (sQLiteCursor2 != null) {
            }
            if (sQLiteCursor != null) {
            }
            if (sQLitePreparedStatement5 != null) {
            }
            if (sQLitePreparedStatement6 != null) {
            }
            throw th;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$deleteDialog$68(ArrayList arrayList) {
        getFileLoader().cancelLoadFiles(arrayList);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$deleteDialog$69() {
        getNotificationCenter().postNotificationName(NotificationCenter.needReloadRecentDialogsSearch, new Object[0]);
    }

    public void onDeleteQueryComplete(final long j) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda72
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$onDeleteQueryComplete$71(j);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$onDeleteQueryComplete$71(long j) {
        try {
            SQLiteDatabase sQLiteDatabase = this.database;
            sQLiteDatabase.executeFast("DELETE FROM media_counts_v2 WHERE uid = " + j).stepThis().dispose();
        } catch (Exception e) {
            checkSQLException(e);
        }
    }

    public void getDialogPhotos(final long j, final int i, final int i2, final int i3) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda48
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$getDialogPhotos$73(i2, j, i, i3);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$getDialogPhotos$73(final int i, final long j, final int i2, final int i3) {
        SQLiteCursor queryFinalized;
        SQLiteCursor sQLiteCursor;
        SQLiteCursor sQLiteCursor2 = null;
        try {
            try {
                if (i != 0) {
                    queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT data FROM user_photos WHERE uid = %d AND id < %d ORDER BY rowid ASC LIMIT %d", Long.valueOf(j), Integer.valueOf(i), Integer.valueOf(i2)), new Object[0]);
                } else {
                    queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT data FROM user_photos WHERE uid = %d ORDER BY rowid ASC LIMIT %d", Long.valueOf(j), Integer.valueOf(i2)), new Object[0]);
                }
                sQLiteCursor = queryFinalized;
            } catch (Throwable th) {
                th = th;
            }
        } catch (Exception e) {
            e = e;
        }
        try {
            final TLRPC$TL_photos_photos tLRPC$TL_photos_photos = new TLRPC$TL_photos_photos();
            final ArrayList arrayList = new ArrayList();
            while (sQLiteCursor.next()) {
                NativeByteBuffer byteBufferValue = sQLiteCursor.byteBufferValue(0);
                if (byteBufferValue != null) {
                    TLRPC$Photo TLdeserialize = TLRPC$Photo.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                    if (byteBufferValue.remaining() > 0) {
                        arrayList.add(TLRPC$Message.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false));
                    } else {
                        arrayList.add(null);
                    }
                    byteBufferValue.reuse();
                    tLRPC$TL_photos_photos.photos.add(TLdeserialize);
                }
            }
            sQLiteCursor.dispose();
            Utilities.stageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda196
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesStorage.this.lambda$getDialogPhotos$72(tLRPC$TL_photos_photos, arrayList, j, i2, i, i3);
                }
            });
        } catch (Exception e2) {
            e = e2;
            sQLiteCursor2 = sQLiteCursor;
            checkSQLException(e);
            if (sQLiteCursor2 != null) {
                sQLiteCursor2.dispose();
            }
        } catch (Throwable th2) {
            th = th2;
            sQLiteCursor2 = sQLiteCursor;
            if (sQLiteCursor2 != null) {
                sQLiteCursor2.dispose();
            }
            throw th;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$getDialogPhotos$72(TLRPC$photos_Photos tLRPC$photos_Photos, ArrayList arrayList, long j, int i, int i2, int i3) {
        getMessagesController().processLoadedUserPhotos(tLRPC$photos_Photos, arrayList, j, i, i2, true, i3);
    }

    public void clearUserPhotos(final long j) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda71
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$clearUserPhotos$74(j);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$clearUserPhotos$74(long j) {
        try {
            SQLiteDatabase sQLiteDatabase = this.database;
            sQLiteDatabase.executeFast("DELETE FROM user_photos WHERE uid = " + j).stepThis().dispose();
        } catch (Exception e) {
            checkSQLException(e);
        }
    }

    public void clearUserPhoto(final long j, final long j2) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda89
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$clearUserPhoto$75(j, j2);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$clearUserPhoto$75(long j, long j2) {
        try {
            SQLiteDatabase sQLiteDatabase = this.database;
            sQLiteDatabase.executeFast("DELETE FROM user_photos WHERE uid = " + j + " AND id = " + j2).stepThis().dispose();
        } catch (Exception e) {
            checkSQLException(e);
        }
    }

    public void resetDialogs(final TLRPC$messages_Dialogs tLRPC$messages_Dialogs, final int i, final int i2, final int i3, final int i4, final int i5, final LongSparseArray<TLRPC$Dialog> longSparseArray, final LongSparseArray<ArrayList<MessageObject>> longSparseArray2, final TLRPC$Message tLRPC$Message, final int i6) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda194
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$resetDialogs$77(tLRPC$messages_Dialogs, i6, i2, i3, i4, i5, tLRPC$Message, i, longSparseArray, longSparseArray2);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:102:0x033e  */
    /* JADX WARN: Removed duplicated region for block: B:104:0x0343  */
    /* JADX WARN: Removed duplicated region for block: B:134:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:79:0x02d0 A[Catch: all -> 0x0324, Exception -> 0x0327, LOOP:5: B:77:0x02cd->B:79:0x02d0, LOOP_END, TryCatch #5 {Exception -> 0x0327, all -> 0x0324, blocks: (B:3:0x0006, B:4:0x0024, B:6:0x002c, B:7:0x0040, B:21:0x0094, B:23:0x01bc, B:25:0x01ca, B:41:0x0210, B:28:0x01cf, B:32:0x01ea, B:34:0x01f2, B:35:0x01f5, B:37:0x0205, B:38:0x0207, B:40:0x020b, B:42:0x0216, B:45:0x0243, B:47:0x024b, B:49:0x0259, B:79:0x02d0, B:80:0x02ef, B:50:0x025c, B:54:0x0269, B:57:0x0272, B:59:0x027a, B:61:0x0288, B:62:0x028b, B:65:0x0299, B:68:0x02a2, B:70:0x02aa, B:72:0x02b8, B:73:0x02bf), top: B:110:0x0006 }] */
    /* JADX WARN: Removed duplicated region for block: B:83:0x031a  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$resetDialogs$77(TLRPC$messages_Dialogs tLRPC$messages_Dialogs, int i, int i2, int i3, int i4, int i5, TLRPC$Message tLRPC$Message, int i6, LongSparseArray longSparseArray, LongSparseArray longSparseArray2) {
        SQLiteCursor sQLiteCursor;
        SQLiteDatabase sQLiteDatabase;
        long j;
        long j2;
        long j3;
        long j4;
        long j5;
        int i7;
        SQLiteDatabase sQLiteDatabase2;
        long j6;
        try {
            ArrayList arrayList = new ArrayList();
            int size = tLRPC$messages_Dialogs.dialogs.size() - i;
            final LongSparseIntArray longSparseIntArray = new LongSparseIntArray();
            ArrayList arrayList2 = new ArrayList();
            ArrayList arrayList3 = new ArrayList();
            for (int i8 = i; i8 < tLRPC$messages_Dialogs.dialogs.size(); i8++) {
                arrayList3.add(Long.valueOf(tLRPC$messages_Dialogs.dialogs.get(i8).id));
            }
            SQLiteCursor queryFinalized = this.database.queryFinalized("SELECT did, pinned FROM dialogs WHERE 1", new Object[0]);
            int i9 = 0;
            while (queryFinalized.next()) {
                try {
                    long longValue = queryFinalized.longValue(0);
                    int intValue = queryFinalized.intValue(1);
                    if (!DialogObject.isEncryptedDialog(longValue)) {
                        arrayList.add(Long.valueOf(longValue));
                        if (intValue > 0) {
                            i9 = Math.max(intValue, i9);
                            longSparseIntArray.put(longValue, intValue);
                            arrayList2.add(Long.valueOf(longValue));
                        }
                    }
                } catch (Exception e) {
                    e = e;
                    sQLiteCursor = queryFinalized;
                    try {
                        checkSQLException(e);
                        SQLiteDatabase sQLiteDatabase3 = this.database;
                        if (sQLiteDatabase3 != null) {
                            sQLiteDatabase3.commitTransaction();
                        }
                        if (sQLiteCursor != null) {
                            sQLiteCursor.dispose();
                            return;
                        }
                        return;
                    } catch (Throwable th) {
                        th = th;
                        sQLiteDatabase = this.database;
                        if (sQLiteDatabase != null) {
                            sQLiteDatabase.commitTransaction();
                        }
                        if (sQLiteCursor != null) {
                            sQLiteCursor.dispose();
                        }
                        throw th;
                    }
                } catch (Throwable th2) {
                    th = th2;
                    sQLiteCursor = queryFinalized;
                    sQLiteDatabase = this.database;
                    if (sQLiteDatabase != null) {
                    }
                    if (sQLiteCursor != null) {
                    }
                    throw th;
                }
            }
            Collections.sort(arrayList2, new Comparator() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda212
                @Override // java.util.Comparator
                public final int compare(Object obj, Object obj2) {
                    int lambda$resetDialogs$76;
                    lambda$resetDialogs$76 = MessagesStorage.lambda$resetDialogs$76(LongSparseIntArray.this, (Long) obj, (Long) obj2);
                    return lambda$resetDialogs$76;
                }
            });
            while (arrayList2.size() < size) {
                arrayList2.add(0, 0L);
            }
            queryFinalized.dispose();
            String str = "(" + TextUtils.join(",", arrayList) + ")";
            this.database.beginTransaction();
            this.database.executeFast("DELETE FROM chat_pinned_count WHERE uid IN " + str).stepThis().dispose();
            this.database.executeFast("DELETE FROM chat_pinned_v2 WHERE uid IN " + str).stepThis().dispose();
            this.database.executeFast("DELETE FROM dialogs WHERE did IN " + str).stepThis().dispose();
            this.database.executeFast("DELETE FROM messages_v2 WHERE uid IN " + str).stepThis().dispose();
            this.database.executeFast("DELETE FROM polls_v2 WHERE 1").stepThis().dispose();
            this.database.executeFast("DELETE FROM bot_keyboard WHERE uid IN " + str).stepThis().dispose();
            this.database.executeFast("DELETE FROM media_v4 WHERE uid IN " + str).stepThis().dispose();
            this.database.executeFast("DELETE FROM messages_holes WHERE uid IN " + str).stepThis().dispose();
            this.database.executeFast("DELETE FROM media_holes_v2 WHERE uid IN " + str).stepThis().dispose();
            this.database.commitTransaction();
            for (int i10 = 0; i10 < size; i10++) {
                TLRPC$Dialog tLRPC$Dialog = tLRPC$messages_Dialogs.dialogs.get(i + i10);
                if (!(tLRPC$Dialog instanceof TLRPC$TL_dialog) || tLRPC$Dialog.pinned) {
                    int indexOf = arrayList2.indexOf(Long.valueOf(tLRPC$Dialog.id));
                    int indexOf2 = arrayList3.indexOf(Long.valueOf(tLRPC$Dialog.id));
                    if (indexOf != -1 && indexOf2 != -1) {
                        if (indexOf == indexOf2) {
                            int i11 = longSparseIntArray.get(tLRPC$Dialog.id, -1);
                            if (i11 != -1) {
                                tLRPC$Dialog.pinnedNum = i11;
                            }
                        } else {
                            int i12 = longSparseIntArray.get(((Long) arrayList2.get(indexOf2)).longValue(), -1);
                            if (i12 != -1) {
                                tLRPC$Dialog.pinnedNum = i12;
                            }
                        }
                    }
                    if (tLRPC$Dialog.pinnedNum == 0) {
                        tLRPC$Dialog.pinnedNum = (size - i10) + i9;
                    }
                }
            }
            putDialogsInternal(tLRPC$messages_Dialogs, 0);
            lambda$saveDiffParams$33(i2, i3, i4, i5);
            int totalDialogsCount = getUserConfig().getTotalDialogsCount(0) + tLRPC$messages_Dialogs.dialogs.size();
            int i13 = tLRPC$Message.id;
            int i14 = tLRPC$Message.date;
            TLRPC$Peer tLRPC$Peer = tLRPC$Message.peer_id;
            long j7 = tLRPC$Peer.channel_id;
            if (j7 == 0) {
                long j8 = tLRPC$Peer.chat_id;
                if (j8 != 0) {
                    int i15 = 0;
                    while (true) {
                        if (i15 >= tLRPC$messages_Dialogs.chats.size()) {
                            j5 = 0;
                            break;
                        }
                        TLRPC$Chat tLRPC$Chat = tLRPC$messages_Dialogs.chats.get(i15);
                        if (tLRPC$Chat.id == j8) {
                            j5 = tLRPC$Chat.access_hash;
                            break;
                        }
                        i15++;
                    }
                    j4 = j5;
                    j3 = j8;
                    j = 0;
                    j2 = 0;
                } else {
                    j = tLRPC$Peer.user_id;
                    if (j != 0) {
                        for (int i16 = 0; i16 < tLRPC$messages_Dialogs.users.size(); i16++) {
                            TLRPC$User tLRPC$User = tLRPC$messages_Dialogs.users.get(i16);
                            if (tLRPC$User.id == j) {
                                j4 = tLRPC$User.access_hash;
                                j2 = 0;
                            }
                        }
                    } else {
                        j = 0;
                    }
                    j2 = 0;
                    j3 = 0;
                    j4 = 0;
                }
                for (i7 = 0; i7 < 2; i7++) {
                    getUserConfig().setDialogsLoadOffset(i7, i13, i14, j, j3, j2, j4);
                    getUserConfig().setTotalDialogsCount(i7, totalDialogsCount);
                }
                getUserConfig().draftsLoaded = false;
                getUserConfig().saveConfig(false);
                getMessagesController().completeDialogsReset(tLRPC$messages_Dialogs, i6, i2, i3, i4, i5, longSparseArray, longSparseArray2, tLRPC$Message);
                sQLiteDatabase2 = this.database;
                if (sQLiteDatabase2 == null) {
                    sQLiteDatabase2.commitTransaction();
                    return;
                }
                return;
            }
            int i17 = 0;
            while (true) {
                if (i17 >= tLRPC$messages_Dialogs.chats.size()) {
                    j6 = 0;
                    break;
                }
                TLRPC$Chat tLRPC$Chat2 = tLRPC$messages_Dialogs.chats.get(i17);
                if (tLRPC$Chat2.id == j7) {
                    j6 = tLRPC$Chat2.access_hash;
                    break;
                }
                i17++;
            }
            j4 = j6;
            j2 = j7;
            j = 0;
            j3 = 0;
            while (i7 < 2) {
            }
            getUserConfig().draftsLoaded = false;
            getUserConfig().saveConfig(false);
            getMessagesController().completeDialogsReset(tLRPC$messages_Dialogs, i6, i2, i3, i4, i5, longSparseArray, longSparseArray2, tLRPC$Message);
            sQLiteDatabase2 = this.database;
            if (sQLiteDatabase2 == null) {
            }
        } catch (Exception e2) {
            e = e2;
            sQLiteCursor = null;
        } catch (Throwable th3) {
            th = th3;
            sQLiteCursor = null;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ int lambda$resetDialogs$76(LongSparseIntArray longSparseIntArray, Long l, Long l2) {
        int i = longSparseIntArray.get(l.longValue());
        int i2 = longSparseIntArray.get(l2.longValue());
        if (i < i2) {
            return 1;
        }
        return i > i2 ? -1 : 0;
    }

    public void putDialogPhotos(final long j, final TLRPC$photos_Photos tLRPC$photos_Photos, final ArrayList<TLRPC$Message> arrayList) {
        if (tLRPC$photos_Photos == null) {
            return;
        }
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda121
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$putDialogPhotos$78(j, tLRPC$photos_Photos, arrayList);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* renamed from: putDialogPhotosInternal */
    public void lambda$putDialogPhotos$78(long j, TLRPC$photos_Photos tLRPC$photos_Photos, ArrayList<TLRPC$Message> arrayList) {
        SQLitePreparedStatement sQLitePreparedStatement = null;
        try {
            try {
                SQLiteDatabase sQLiteDatabase = this.database;
                sQLiteDatabase.executeFast("DELETE FROM user_photos WHERE uid = " + j).stepThis().dispose();
                sQLitePreparedStatement = this.database.executeFast("REPLACE INTO user_photos VALUES(?, ?, ?)");
                int size = tLRPC$photos_Photos.photos.size();
                for (int i = 0; i < size; i++) {
                    TLRPC$Photo tLRPC$Photo = tLRPC$photos_Photos.photos.get(i);
                    if (!(tLRPC$Photo instanceof TLRPC$TL_photoEmpty) && tLRPC$Photo != null) {
                        if (tLRPC$Photo.file_reference == null) {
                            tLRPC$Photo.file_reference = new byte[0];
                        }
                        sQLitePreparedStatement.requery();
                        int objectSize = tLRPC$Photo.getObjectSize();
                        if (arrayList != null && arrayList.get(i) != null) {
                            objectSize += arrayList.get(i).getObjectSize();
                        }
                        NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(objectSize);
                        tLRPC$Photo.serializeToStream(nativeByteBuffer);
                        if (arrayList != null && arrayList.get(i) != null) {
                            arrayList.get(i).serializeToStream(nativeByteBuffer);
                        }
                        sQLitePreparedStatement.bindLong(1, j);
                        sQLitePreparedStatement.bindLong(2, tLRPC$Photo.id);
                        sQLitePreparedStatement.bindByteBuffer(3, nativeByteBuffer);
                        sQLitePreparedStatement.step();
                        nativeByteBuffer.reuse();
                    }
                }
                sQLitePreparedStatement.dispose();
            } catch (Exception e) {
                checkSQLException(e);
                if (sQLitePreparedStatement != null) {
                    sQLitePreparedStatement.dispose();
                }
            }
        } catch (Throwable th) {
            if (sQLitePreparedStatement != null) {
                sQLitePreparedStatement.dispose();
            }
            throw th;
        }
    }

    public void addDialogPhoto(final long j, final TLRPC$Photo tLRPC$Photo) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda116
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$addDialogPhoto$79(j, tLRPC$Photo);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$addDialogPhoto$79(long j, TLRPC$Photo tLRPC$Photo) {
        SQLiteCursor queryFinalized;
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT data FROM user_photos WHERE uid = %d ORDER BY rowid ASC", Long.valueOf(j)), new Object[0]);
            } catch (Exception e) {
                e = e;
            }
        } catch (Throwable th) {
            th = th;
        }
        try {
            TLRPC$TL_photos_photos tLRPC$TL_photos_photos = new TLRPC$TL_photos_photos();
            ArrayList<TLRPC$Message> arrayList = new ArrayList<>();
            while (queryFinalized.next()) {
                NativeByteBuffer byteBufferValue = queryFinalized.byteBufferValue(0);
                if (byteBufferValue != null) {
                    TLRPC$Photo TLdeserialize = TLRPC$Photo.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                    if (byteBufferValue.remaining() > 0) {
                        arrayList.add(TLRPC$Message.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false));
                    } else {
                        arrayList.add(null);
                    }
                    byteBufferValue.reuse();
                    tLRPC$TL_photos_photos.photos.add(TLdeserialize);
                    arrayList.add(null);
                }
            }
            queryFinalized.dispose();
            tLRPC$TL_photos_photos.photos.add(0, tLRPC$Photo);
            lambda$putDialogPhotos$78(j, tLRPC$TL_photos_photos, arrayList);
        } catch (Exception e2) {
            e = e2;
            sQLiteCursor = queryFinalized;
            checkSQLException(e);
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
        } catch (Throwable th2) {
            th = th2;
            sQLiteCursor = queryFinalized;
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
            throw th;
        }
    }

    public void emptyMessagesMedia(final long j, final ArrayList<Integer> arrayList) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda152
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$emptyMessagesMedia$82(arrayList, j);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:100:0x0210  */
    /* JADX WARN: Removed duplicated region for block: B:104:0x0217  */
    /* JADX WARN: Removed duplicated region for block: B:106:0x021c  */
    /* JADX WARN: Removed duplicated region for block: B:125:0x01c9 A[SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:126:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:40:0x012c A[Catch: all -> 0x01dc, Exception -> 0x01e1, TryCatch #6 {Exception -> 0x01e1, all -> 0x01dc, blocks: (B:29:0x00d0, B:31:0x00d6, B:33:0x0112, B:38:0x011a, B:40:0x012c, B:42:0x0139, B:48:0x0144, B:52:0x0152, B:54:0x0162, B:56:0x017a, B:58:0x0180, B:62:0x0187, B:64:0x018f, B:66:0x01a0, B:68:0x01a7, B:70:0x01b0, B:72:0x01b9, B:74:0x01c1, B:76:0x01c6, B:77:0x01c9, B:71:0x01b6, B:67:0x01a4, B:61:0x0185, B:63:0x018b, B:55:0x0176, B:41:0x0132, B:78:0x01d0), top: B:114:0x00d0 }] */
    /* JADX WARN: Removed duplicated region for block: B:41:0x0132 A[Catch: all -> 0x01dc, Exception -> 0x01e1, TryCatch #6 {Exception -> 0x01e1, all -> 0x01dc, blocks: (B:29:0x00d0, B:31:0x00d6, B:33:0x0112, B:38:0x011a, B:40:0x012c, B:42:0x0139, B:48:0x0144, B:52:0x0152, B:54:0x0162, B:56:0x017a, B:58:0x0180, B:62:0x0187, B:64:0x018f, B:66:0x01a0, B:68:0x01a7, B:70:0x01b0, B:72:0x01b9, B:74:0x01c1, B:76:0x01c6, B:77:0x01c9, B:71:0x01b6, B:67:0x01a4, B:61:0x0185, B:63:0x018b, B:55:0x0176, B:41:0x0132, B:78:0x01d0), top: B:114:0x00d0 }] */
    /* JADX WARN: Removed duplicated region for block: B:44:0x013d  */
    /* JADX WARN: Removed duplicated region for block: B:45:0x013f  */
    /* JADX WARN: Removed duplicated region for block: B:50:0x014f  */
    /* JADX WARN: Removed duplicated region for block: B:51:0x0151  */
    /* JADX WARN: Removed duplicated region for block: B:54:0x0162 A[Catch: all -> 0x01dc, Exception -> 0x01e1, TryCatch #6 {Exception -> 0x01e1, all -> 0x01dc, blocks: (B:29:0x00d0, B:31:0x00d6, B:33:0x0112, B:38:0x011a, B:40:0x012c, B:42:0x0139, B:48:0x0144, B:52:0x0152, B:54:0x0162, B:56:0x017a, B:58:0x0180, B:62:0x0187, B:64:0x018f, B:66:0x01a0, B:68:0x01a7, B:70:0x01b0, B:72:0x01b9, B:74:0x01c1, B:76:0x01c6, B:77:0x01c9, B:71:0x01b6, B:67:0x01a4, B:61:0x0185, B:63:0x018b, B:55:0x0176, B:41:0x0132, B:78:0x01d0), top: B:114:0x00d0 }] */
    /* JADX WARN: Removed duplicated region for block: B:55:0x0176 A[Catch: all -> 0x01dc, Exception -> 0x01e1, TryCatch #6 {Exception -> 0x01e1, all -> 0x01dc, blocks: (B:29:0x00d0, B:31:0x00d6, B:33:0x0112, B:38:0x011a, B:40:0x012c, B:42:0x0139, B:48:0x0144, B:52:0x0152, B:54:0x0162, B:56:0x017a, B:58:0x0180, B:62:0x0187, B:64:0x018f, B:66:0x01a0, B:68:0x01a7, B:70:0x01b0, B:72:0x01b9, B:74:0x01c1, B:76:0x01c6, B:77:0x01c9, B:71:0x01b6, B:67:0x01a4, B:61:0x0185, B:63:0x018b, B:55:0x0176, B:41:0x0132, B:78:0x01d0), top: B:114:0x00d0 }] */
    /* JADX WARN: Removed duplicated region for block: B:58:0x0180 A[Catch: all -> 0x01dc, Exception -> 0x01e1, TryCatch #6 {Exception -> 0x01e1, all -> 0x01dc, blocks: (B:29:0x00d0, B:31:0x00d6, B:33:0x0112, B:38:0x011a, B:40:0x012c, B:42:0x0139, B:48:0x0144, B:52:0x0152, B:54:0x0162, B:56:0x017a, B:58:0x0180, B:62:0x0187, B:64:0x018f, B:66:0x01a0, B:68:0x01a7, B:70:0x01b0, B:72:0x01b9, B:74:0x01c1, B:76:0x01c6, B:77:0x01c9, B:71:0x01b6, B:67:0x01a4, B:61:0x0185, B:63:0x018b, B:55:0x0176, B:41:0x0132, B:78:0x01d0), top: B:114:0x00d0 }] */
    /* JADX WARN: Removed duplicated region for block: B:63:0x018b A[Catch: all -> 0x01dc, Exception -> 0x01e1, TryCatch #6 {Exception -> 0x01e1, all -> 0x01dc, blocks: (B:29:0x00d0, B:31:0x00d6, B:33:0x0112, B:38:0x011a, B:40:0x012c, B:42:0x0139, B:48:0x0144, B:52:0x0152, B:54:0x0162, B:56:0x017a, B:58:0x0180, B:62:0x0187, B:64:0x018f, B:66:0x01a0, B:68:0x01a7, B:70:0x01b0, B:72:0x01b9, B:74:0x01c1, B:76:0x01c6, B:77:0x01c9, B:71:0x01b6, B:67:0x01a4, B:61:0x0185, B:63:0x018b, B:55:0x0176, B:41:0x0132, B:78:0x01d0), top: B:114:0x00d0 }] */
    /* JADX WARN: Removed duplicated region for block: B:66:0x01a0 A[Catch: all -> 0x01dc, Exception -> 0x01e1, TryCatch #6 {Exception -> 0x01e1, all -> 0x01dc, blocks: (B:29:0x00d0, B:31:0x00d6, B:33:0x0112, B:38:0x011a, B:40:0x012c, B:42:0x0139, B:48:0x0144, B:52:0x0152, B:54:0x0162, B:56:0x017a, B:58:0x0180, B:62:0x0187, B:64:0x018f, B:66:0x01a0, B:68:0x01a7, B:70:0x01b0, B:72:0x01b9, B:74:0x01c1, B:76:0x01c6, B:77:0x01c9, B:71:0x01b6, B:67:0x01a4, B:61:0x0185, B:63:0x018b, B:55:0x0176, B:41:0x0132, B:78:0x01d0), top: B:114:0x00d0 }] */
    /* JADX WARN: Removed duplicated region for block: B:67:0x01a4 A[Catch: all -> 0x01dc, Exception -> 0x01e1, TryCatch #6 {Exception -> 0x01e1, all -> 0x01dc, blocks: (B:29:0x00d0, B:31:0x00d6, B:33:0x0112, B:38:0x011a, B:40:0x012c, B:42:0x0139, B:48:0x0144, B:52:0x0152, B:54:0x0162, B:56:0x017a, B:58:0x0180, B:62:0x0187, B:64:0x018f, B:66:0x01a0, B:68:0x01a7, B:70:0x01b0, B:72:0x01b9, B:74:0x01c1, B:76:0x01c6, B:77:0x01c9, B:71:0x01b6, B:67:0x01a4, B:61:0x0185, B:63:0x018b, B:55:0x0176, B:41:0x0132, B:78:0x01d0), top: B:114:0x00d0 }] */
    /* JADX WARN: Removed duplicated region for block: B:70:0x01b0 A[Catch: all -> 0x01dc, Exception -> 0x01e1, TryCatch #6 {Exception -> 0x01e1, all -> 0x01dc, blocks: (B:29:0x00d0, B:31:0x00d6, B:33:0x0112, B:38:0x011a, B:40:0x012c, B:42:0x0139, B:48:0x0144, B:52:0x0152, B:54:0x0162, B:56:0x017a, B:58:0x0180, B:62:0x0187, B:64:0x018f, B:66:0x01a0, B:68:0x01a7, B:70:0x01b0, B:72:0x01b9, B:74:0x01c1, B:76:0x01c6, B:77:0x01c9, B:71:0x01b6, B:67:0x01a4, B:61:0x0185, B:63:0x018b, B:55:0x0176, B:41:0x0132, B:78:0x01d0), top: B:114:0x00d0 }] */
    /* JADX WARN: Removed duplicated region for block: B:71:0x01b6 A[Catch: all -> 0x01dc, Exception -> 0x01e1, TryCatch #6 {Exception -> 0x01e1, all -> 0x01dc, blocks: (B:29:0x00d0, B:31:0x00d6, B:33:0x0112, B:38:0x011a, B:40:0x012c, B:42:0x0139, B:48:0x0144, B:52:0x0152, B:54:0x0162, B:56:0x017a, B:58:0x0180, B:62:0x0187, B:64:0x018f, B:66:0x01a0, B:68:0x01a7, B:70:0x01b0, B:72:0x01b9, B:74:0x01c1, B:76:0x01c6, B:77:0x01c9, B:71:0x01b6, B:67:0x01a4, B:61:0x0185, B:63:0x018b, B:55:0x0176, B:41:0x0132, B:78:0x01d0), top: B:114:0x00d0 }] */
    /* JADX WARN: Removed duplicated region for block: B:74:0x01c1 A[Catch: all -> 0x01dc, Exception -> 0x01e1, TryCatch #6 {Exception -> 0x01e1, all -> 0x01dc, blocks: (B:29:0x00d0, B:31:0x00d6, B:33:0x0112, B:38:0x011a, B:40:0x012c, B:42:0x0139, B:48:0x0144, B:52:0x0152, B:54:0x0162, B:56:0x017a, B:58:0x0180, B:62:0x0187, B:64:0x018f, B:66:0x01a0, B:68:0x01a7, B:70:0x01b0, B:72:0x01b9, B:74:0x01c1, B:76:0x01c6, B:77:0x01c9, B:71:0x01b6, B:67:0x01a4, B:61:0x0185, B:63:0x018b, B:55:0x0176, B:41:0x0132, B:78:0x01d0), top: B:114:0x00d0 }] */
    /* JADX WARN: Removed duplicated region for block: B:76:0x01c6 A[Catch: all -> 0x01dc, Exception -> 0x01e1, TryCatch #6 {Exception -> 0x01e1, all -> 0x01dc, blocks: (B:29:0x00d0, B:31:0x00d6, B:33:0x0112, B:38:0x011a, B:40:0x012c, B:42:0x0139, B:48:0x0144, B:52:0x0152, B:54:0x0162, B:56:0x017a, B:58:0x0180, B:62:0x0187, B:64:0x018f, B:66:0x01a0, B:68:0x01a7, B:70:0x01b0, B:72:0x01b9, B:74:0x01c1, B:76:0x01c6, B:77:0x01c9, B:71:0x01b6, B:67:0x01a4, B:61:0x0185, B:63:0x018b, B:55:0x0176, B:41:0x0132, B:78:0x01d0), top: B:114:0x00d0 }] */
    /* JADX WARN: Removed duplicated region for block: B:98:0x020b  */
    /* JADX WARN: Type inference failed for: r13v0 */
    /* JADX WARN: Type inference failed for: r13v1, types: [boolean, int] */
    /* JADX WARN: Type inference failed for: r13v5 */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$emptyMessagesMedia$82(ArrayList arrayList, long j) {
        SQLiteCursor sQLiteCursor;
        SQLitePreparedStatement sQLitePreparedStatement;
        int i;
        NativeByteBuffer nativeByteBuffer;
        TLRPC$TL_messageReplyHeader tLRPC$TL_messageReplyHeader;
        NativeByteBuffer writeLocalParams;
        try {
            ArrayList<File> arrayList2 = new ArrayList<>();
            final ArrayList<String> arrayList3 = new ArrayList<>();
            ArrayList<Pair<Long, Integer>> arrayList4 = new ArrayList<>();
            final ArrayList arrayList5 = new ArrayList();
            int i2 = 2;
            ?? r13 = 0;
            int i3 = 1;
            SQLiteCursor queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT data, mid, date, uid, custom_params FROM messages_v2 WHERE mid IN (%s) AND uid = %d", TextUtils.join(",", arrayList), Long.valueOf(j)), new Object[0]);
            while (queryFinalized.next()) {
                try {
                    NativeByteBuffer byteBufferValue = queryFinalized.byteBufferValue(r13);
                    if (byteBufferValue != null) {
                        TLRPC$Message TLdeserialize = TLRPC$Message.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(r13), r13);
                        TLdeserialize.readAttachPath(byteBufferValue, getUserConfig().clientUserId);
                        byteBufferValue.reuse();
                        if (TLdeserialize.media != null && addFilesToDelete(TLdeserialize, arrayList2, arrayList4, arrayList3, true)) {
                            TLRPC$MessageMedia tLRPC$MessageMedia = TLdeserialize.media;
                            if (tLRPC$MessageMedia.document != null) {
                                tLRPC$MessageMedia.document = new TLRPC$TL_documentEmpty();
                            } else if (tLRPC$MessageMedia.photo != null) {
                                tLRPC$MessageMedia.photo = new TLRPC$TL_photoEmpty();
                            }
                            TLdeserialize.media.flags &= -2;
                            TLdeserialize.id = queryFinalized.intValue(1);
                            TLdeserialize.date = queryFinalized.intValue(2);
                            TLdeserialize.dialog_id = queryFinalized.longValue(3);
                            NativeByteBuffer byteBufferValue2 = queryFinalized.byteBufferValue(4);
                            if (byteBufferValue2 != null) {
                                MessageCustomParamsHelper.readLocalParams(TLdeserialize, byteBufferValue2);
                                byteBufferValue2.reuse();
                            }
                            arrayList5.add(TLdeserialize);
                        }
                    }
                    r13 = 0;
                } catch (Exception e) {
                    e = e;
                    sQLiteCursor = queryFinalized;
                    sQLitePreparedStatement = null;
                    try {
                        checkSQLException(e);
                        if (sQLiteCursor != null) {
                            sQLiteCursor.dispose();
                        }
                        if (sQLitePreparedStatement == null) {
                            sQLitePreparedStatement.dispose();
                            return;
                        }
                        return;
                    } catch (Throwable th) {
                        th = th;
                        if (sQLiteCursor != null) {
                            sQLiteCursor.dispose();
                        }
                        if (sQLitePreparedStatement != null) {
                            sQLitePreparedStatement.dispose();
                        }
                        throw th;
                    }
                } catch (Throwable th2) {
                    th = th2;
                    sQLiteCursor = queryFinalized;
                    sQLitePreparedStatement = null;
                    if (sQLiteCursor != null) {
                    }
                    if (sQLitePreparedStatement != null) {
                    }
                    throw th;
                }
            }
            int i4 = 3;
            queryFinalized.dispose();
            deleteFromDownloadQueue(arrayList4, true);
            if (!arrayList5.isEmpty()) {
                SQLitePreparedStatement executeFast = this.database.executeFast("REPLACE INTO messages_v2 VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, NULL, ?, ?, ?, ?, ?, ?, 0, ?, ?)");
                int i5 = 0;
                while (i5 < arrayList5.size()) {
                    try {
                        TLRPC$Message tLRPC$Message = (TLRPC$Message) arrayList5.get(i5);
                        NativeByteBuffer nativeByteBuffer2 = new NativeByteBuffer(tLRPC$Message.getObjectSize());
                        tLRPC$Message.serializeToStream(nativeByteBuffer2);
                        executeFast.requery();
                        executeFast.bindInteger(i3, tLRPC$Message.id);
                        executeFast.bindLong(i2, tLRPC$Message.dialog_id);
                        executeFast.bindInteger(i4, MessageObject.getUnreadFlags(tLRPC$Message));
                        executeFast.bindInteger(4, tLRPC$Message.send_state);
                        executeFast.bindInteger(5, tLRPC$Message.date);
                        executeFast.bindByteBuffer(6, nativeByteBuffer2);
                        if (!MessageObject.isOut(tLRPC$Message) && !tLRPC$Message.from_scheduled) {
                            i = 0;
                            executeFast.bindInteger(7, i);
                            executeFast.bindInteger(8, tLRPC$Message.ttl);
                            if ((tLRPC$Message.flags & 1024) == 0) {
                                executeFast.bindInteger(9, tLRPC$Message.views);
                            } else {
                                executeFast.bindInteger(9, getMessageMediaType(tLRPC$Message));
                            }
                            int i6 = tLRPC$Message.stickerVerified;
                            executeFast.bindInteger(10, i6 != 0 ? 1 : i6 == i2 ? 2 : 0);
                            executeFast.bindInteger(11, !tLRPC$Message.mentioned ? 1 : 0);
                            executeFast.bindInteger(12, tLRPC$Message.forwards);
                            if (tLRPC$Message.replies == null) {
                                nativeByteBuffer = new NativeByteBuffer(tLRPC$Message.replies.getObjectSize());
                                tLRPC$Message.replies.serializeToStream(nativeByteBuffer);
                                executeFast.bindByteBuffer(13, nativeByteBuffer);
                            } else {
                                executeFast.bindNull(13);
                                nativeByteBuffer = null;
                            }
                            tLRPC$TL_messageReplyHeader = tLRPC$Message.reply_to;
                            if (tLRPC$TL_messageReplyHeader == null) {
                                int i7 = tLRPC$TL_messageReplyHeader.reply_to_top_id;
                                if (i7 == 0) {
                                    i7 = tLRPC$TL_messageReplyHeader.reply_to_msg_id;
                                }
                                executeFast.bindInteger(14, i7);
                            } else {
                                executeFast.bindInteger(14, 0);
                            }
                            executeFast.bindLong(15, MessageObject.getChannelId(tLRPC$Message));
                            writeLocalParams = MessageCustomParamsHelper.writeLocalParams(tLRPC$Message);
                            if (writeLocalParams == null) {
                                executeFast.bindByteBuffer(16, writeLocalParams);
                            } else {
                                executeFast.bindNull(16);
                            }
                            if ((tLRPC$Message.flags & 131072) == 0) {
                                executeFast.bindLong(17, tLRPC$Message.grouped_id);
                            } else {
                                executeFast.bindNull(17);
                            }
                            executeFast.step();
                            nativeByteBuffer2.reuse();
                            if (nativeByteBuffer != null) {
                                nativeByteBuffer.reuse();
                            }
                            if (writeLocalParams == null) {
                                writeLocalParams.reuse();
                            }
                            i5++;
                            i2 = 2;
                            i4 = 3;
                            i3 = 1;
                        }
                        i = 1;
                        executeFast.bindInteger(7, i);
                        executeFast.bindInteger(8, tLRPC$Message.ttl);
                        if ((tLRPC$Message.flags & 1024) == 0) {
                        }
                        int i62 = tLRPC$Message.stickerVerified;
                        executeFast.bindInteger(10, i62 != 0 ? 1 : i62 == i2 ? 2 : 0);
                        executeFast.bindInteger(11, !tLRPC$Message.mentioned ? 1 : 0);
                        executeFast.bindInteger(12, tLRPC$Message.forwards);
                        if (tLRPC$Message.replies == null) {
                        }
                        tLRPC$TL_messageReplyHeader = tLRPC$Message.reply_to;
                        if (tLRPC$TL_messageReplyHeader == null) {
                        }
                        executeFast.bindLong(15, MessageObject.getChannelId(tLRPC$Message));
                        writeLocalParams = MessageCustomParamsHelper.writeLocalParams(tLRPC$Message);
                        if (writeLocalParams == null) {
                        }
                        if ((tLRPC$Message.flags & 131072) == 0) {
                        }
                        executeFast.step();
                        nativeByteBuffer2.reuse();
                        if (nativeByteBuffer != null) {
                        }
                        if (writeLocalParams == null) {
                        }
                        i5++;
                        i2 = 2;
                        i4 = 3;
                        i3 = 1;
                    } catch (Exception e2) {
                        e = e2;
                        sQLitePreparedStatement = executeFast;
                        sQLiteCursor = null;
                        checkSQLException(e);
                        if (sQLiteCursor != null) {
                        }
                        if (sQLitePreparedStatement == null) {
                        }
                    } catch (Throwable th3) {
                        th = th3;
                        sQLitePreparedStatement = executeFast;
                        sQLiteCursor = null;
                        if (sQLiteCursor != null) {
                        }
                        if (sQLitePreparedStatement != null) {
                        }
                        throw th;
                    }
                }
                executeFast.dispose();
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda149
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesStorage.this.lambda$emptyMessagesMedia$80(arrayList5);
                    }
                });
            }
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda139
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesStorage.this.lambda$emptyMessagesMedia$81(arrayList3);
                }
            });
            getFileLoader().deleteFiles(arrayList2, 0);
        } catch (Exception e3) {
            e = e3;
            sQLiteCursor = null;
        } catch (Throwable th4) {
            th = th4;
            sQLiteCursor = null;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$emptyMessagesMedia$80(ArrayList arrayList) {
        for (int i = 0; i < arrayList.size(); i++) {
            getNotificationCenter().postNotificationName(NotificationCenter.updateMessageMedia, arrayList.get(i));
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$emptyMessagesMedia$81(ArrayList arrayList) {
        getFileLoader().cancelLoadFiles(arrayList);
    }

    public void updateMessagePollResults(final long j, final TLRPC$Poll tLRPC$Poll, final TLRPC$PollResults tLRPC$PollResults) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda117
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$updateMessagePollResults$83(j, tLRPC$Poll, tLRPC$PollResults);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateMessagePollResults$83(long j, TLRPC$Poll tLRPC$Poll, TLRPC$PollResults tLRPC$PollResults) {
        LongSparseArray longSparseArray;
        SQLitePreparedStatement sQLitePreparedStatement;
        int i;
        SQLiteCursor queryFinalized;
        ArrayList arrayList;
        int i2;
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                int i3 = 1;
                int i4 = 0;
                SQLiteCursor queryFinalized2 = this.database.queryFinalized(String.format(Locale.US, "SELECT uid, mid FROM polls_v2 WHERE id = %d", Long.valueOf(j)), new Object[0]);
                LongSparseArray longSparseArray2 = null;
                while (queryFinalized2.next()) {
                    try {
                        long longValue = queryFinalized2.longValue(0);
                        if (longSparseArray2 == null) {
                            longSparseArray2 = new LongSparseArray();
                        }
                        ArrayList arrayList2 = (ArrayList) longSparseArray2.get(longValue);
                        if (arrayList2 == null) {
                            arrayList2 = new ArrayList();
                            longSparseArray2.put(longValue, arrayList2);
                        }
                        arrayList2.add(Integer.valueOf(queryFinalized2.intValue(1)));
                    } catch (Exception e) {
                        e = e;
                        sQLiteCursor = queryFinalized2;
                    } catch (Throwable th) {
                        th = th;
                        sQLiteCursor = queryFinalized2;
                    }
                }
                queryFinalized2.dispose();
                if (longSparseArray2 != null) {
                    this.database.beginTransaction();
                    SQLitePreparedStatement executeFast = this.database.executeFast("UPDATE messages_v2 SET data = ? WHERE mid = ? AND uid = ?");
                    SQLitePreparedStatement executeFast2 = this.database.executeFast("UPDATE messages_topics SET data = ? WHERE mid = ? AND uid = ?");
                    int size = longSparseArray2.size();
                    int i5 = 0;
                    while (i5 < size) {
                        long keyAt = longSparseArray2.keyAt(i5);
                        ArrayList arrayList3 = (ArrayList) longSparseArray2.valueAt(i5);
                        int size2 = arrayList3.size();
                        int i6 = 0;
                        while (i6 < size2) {
                            Integer num = (Integer) arrayList3.get(i6);
                            SQLiteCursor sQLiteCursor2 = sQLiteCursor;
                            boolean z = false;
                            while (i4 < 2) {
                                boolean z2 = i4 == i3;
                                if (z2) {
                                    try {
                                        longSparseArray = longSparseArray2;
                                        sQLitePreparedStatement = executeFast2;
                                        i = size;
                                        queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT data FROM messages_topics WHERE mid = %d AND uid = %d", num, Long.valueOf(keyAt)), new Object[0]);
                                    } catch (Exception e2) {
                                        e = e2;
                                        sQLiteCursor = sQLiteCursor2;
                                        checkSQLException(e);
                                        if (sQLiteCursor == null) {
                                            return;
                                        }
                                        sQLiteCursor.dispose();
                                    } catch (Throwable th2) {
                                        th = th2;
                                        sQLiteCursor = sQLiteCursor2;
                                        if (sQLiteCursor != null) {
                                            sQLiteCursor.dispose();
                                        }
                                        throw th;
                                    }
                                } else {
                                    longSparseArray = longSparseArray2;
                                    sQLitePreparedStatement = executeFast2;
                                    i = size;
                                    queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT data FROM messages_v2 WHERE mid = %d AND uid = %d", num, Long.valueOf(keyAt)), new Object[0]);
                                }
                                SQLitePreparedStatement sQLitePreparedStatement2 = z2 ? sQLitePreparedStatement : executeFast;
                                if (queryFinalized.next()) {
                                    NativeByteBuffer byteBufferValue = queryFinalized.byteBufferValue(0);
                                    if (byteBufferValue != null) {
                                        TLRPC$Message TLdeserialize = TLRPC$Message.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                                        arrayList = arrayList3;
                                        i2 = size2;
                                        TLdeserialize.readAttachPath(byteBufferValue, getUserConfig().clientUserId);
                                        byteBufferValue.reuse();
                                        TLRPC$MessageMedia tLRPC$MessageMedia = TLdeserialize.media;
                                        if (tLRPC$MessageMedia instanceof TLRPC$TL_messageMediaPoll) {
                                            TLRPC$TL_messageMediaPoll tLRPC$TL_messageMediaPoll = (TLRPC$TL_messageMediaPoll) tLRPC$MessageMedia;
                                            if (tLRPC$Poll != null) {
                                                tLRPC$TL_messageMediaPoll.poll = tLRPC$Poll;
                                            }
                                            if (tLRPC$PollResults != null) {
                                                MessageObject.updatePollResults(tLRPC$TL_messageMediaPoll, tLRPC$PollResults);
                                            }
                                            NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(TLdeserialize.getObjectSize());
                                            TLdeserialize.serializeToStream(nativeByteBuffer);
                                            sQLitePreparedStatement2.requery();
                                            sQLitePreparedStatement2.bindByteBuffer(1, nativeByteBuffer);
                                            sQLitePreparedStatement2.bindInteger(2, num.intValue());
                                            sQLitePreparedStatement2.bindLong(3, keyAt);
                                            sQLitePreparedStatement2.step();
                                            nativeByteBuffer.reuse();
                                        }
                                    } else {
                                        arrayList = arrayList3;
                                        i2 = size2;
                                    }
                                    z = true;
                                } else {
                                    arrayList = arrayList3;
                                    i2 = size2;
                                }
                                queryFinalized.dispose();
                                i4++;
                                sQLiteCursor2 = queryFinalized;
                                arrayList3 = arrayList;
                                longSparseArray2 = longSparseArray;
                                executeFast2 = sQLitePreparedStatement;
                                size = i;
                                size2 = i2;
                                i3 = 1;
                            }
                            LongSparseArray longSparseArray3 = longSparseArray2;
                            SQLitePreparedStatement sQLitePreparedStatement3 = executeFast2;
                            int i7 = size;
                            ArrayList arrayList4 = arrayList3;
                            int i8 = size2;
                            if (!z) {
                                this.database.executeFast(String.format(Locale.US, "DELETE FROM polls_v2 WHERE mid = %d AND uid = %d", num, Long.valueOf(keyAt))).stepThis().dispose();
                            }
                            i6++;
                            sQLiteCursor = sQLiteCursor2;
                            arrayList3 = arrayList4;
                            longSparseArray2 = longSparseArray3;
                            executeFast2 = sQLitePreparedStatement3;
                            size = i7;
                            size2 = i8;
                            i3 = 1;
                            i4 = 0;
                        }
                        i5++;
                        size = size;
                        i3 = 1;
                        i4 = 0;
                    }
                    executeFast.dispose();
                    this.database.commitTransaction();
                }
                if (sQLiteCursor == null) {
                    return;
                }
            } catch (Exception e3) {
                e = e3;
            }
            sQLiteCursor.dispose();
        } catch (Throwable th3) {
            th = th3;
        }
    }

    public void updateMessageReactions(final long j, final int i, final TLRPC$TL_messageReactions tLRPC$TL_messageReactions) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda54
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$updateMessageReactions$84(i, j, tLRPC$TL_messageReactions);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateMessageReactions$84(int i, long j, TLRPC$TL_messageReactions tLRPC$TL_messageReactions) {
        SQLiteCursor queryFinalized;
        NativeByteBuffer byteBufferValue;
        SQLitePreparedStatement executeFast;
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                this.database.beginTransaction();
                for (int i2 = 0; i2 < 2; i2++) {
                    if (i2 == 0) {
                        queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT data FROM messages_v2 WHERE mid = %d AND uid = %d", Integer.valueOf(i), Long.valueOf(j)), new Object[0]);
                    } else {
                        queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT data FROM messages_topics WHERE mid = %d AND uid = %d", Integer.valueOf(i), Long.valueOf(j)), new Object[0]);
                    }
                    try {
                        if (queryFinalized.next() && (byteBufferValue = queryFinalized.byteBufferValue(0)) != null) {
                            TLRPC$Message TLdeserialize = TLRPC$Message.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                            if (TLdeserialize != null) {
                                TLdeserialize.readAttachPath(byteBufferValue, getUserConfig().clientUserId);
                                byteBufferValue.reuse();
                                MessageObject.updateReactions(TLdeserialize, tLRPC$TL_messageReactions);
                                if (i2 == 0) {
                                    executeFast = this.database.executeFast("UPDATE messages_v2 SET data = ? WHERE mid = ? AND uid = ?");
                                } else {
                                    executeFast = this.database.executeFast("UPDATE messages_topics SET data = ? WHERE mid = ? AND uid = ?");
                                }
                                NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(TLdeserialize.getObjectSize());
                                TLdeserialize.serializeToStream(nativeByteBuffer);
                                executeFast.requery();
                                executeFast.bindByteBuffer(1, nativeByteBuffer);
                                executeFast.bindInteger(2, i);
                                executeFast.bindLong(3, j);
                                executeFast.step();
                                nativeByteBuffer.reuse();
                                executeFast.dispose();
                            } else {
                                byteBufferValue.reuse();
                            }
                        }
                        queryFinalized.dispose();
                    } catch (Exception e) {
                        e = e;
                        sQLiteCursor = queryFinalized;
                        checkSQLException(e);
                        SQLiteDatabase sQLiteDatabase = this.database;
                        if (sQLiteDatabase != null) {
                            sQLiteDatabase.commitTransaction();
                        }
                        if (sQLiteCursor != null) {
                            sQLiteCursor.dispose();
                            return;
                        }
                        return;
                    } catch (Throwable th) {
                        th = th;
                        sQLiteCursor = queryFinalized;
                        SQLiteDatabase sQLiteDatabase2 = this.database;
                        if (sQLiteDatabase2 != null) {
                            sQLiteDatabase2.commitTransaction();
                        }
                        if (sQLiteCursor != null) {
                            sQLiteCursor.dispose();
                        }
                        throw th;
                    }
                }
                this.database.commitTransaction();
                SQLiteDatabase sQLiteDatabase3 = this.database;
                if (sQLiteDatabase3 != null) {
                    sQLiteDatabase3.commitTransaction();
                }
            } catch (Throwable th2) {
                th = th2;
            }
        } catch (Exception e2) {
            e = e2;
        }
    }

    public void updateMessageVoiceTranscriptionOpen(final long j, final int i, final TLRPC$Message tLRPC$Message) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda52
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$updateMessageVoiceTranscriptionOpen$85(i, j, tLRPC$Message);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateMessageVoiceTranscriptionOpen$85(int i, long j, TLRPC$Message tLRPC$Message) {
        SQLitePreparedStatement executeFast;
        SQLitePreparedStatement sQLitePreparedStatement = null;
        try {
            try {
                this.database.beginTransaction();
                TLRPC$Message messageWithCustomParamsOnlyInternal = getMessageWithCustomParamsOnlyInternal(i, j);
                messageWithCustomParamsOnlyInternal.voiceTranscriptionOpen = tLRPC$Message.voiceTranscriptionOpen;
                messageWithCustomParamsOnlyInternal.voiceTranscriptionRated = tLRPC$Message.voiceTranscriptionRated;
                messageWithCustomParamsOnlyInternal.voiceTranscriptionFinal = tLRPC$Message.voiceTranscriptionFinal;
                messageWithCustomParamsOnlyInternal.voiceTranscriptionForce = tLRPC$Message.voiceTranscriptionForce;
                messageWithCustomParamsOnlyInternal.voiceTranscriptionId = tLRPC$Message.voiceTranscriptionId;
                for (int i2 = 0; i2 < 2; i2++) {
                    if (i2 == 0) {
                        executeFast = this.database.executeFast("UPDATE messages_v2 SET custom_params = ? WHERE mid = ? AND uid = ?");
                    } else {
                        executeFast = this.database.executeFast("UPDATE messages_topics SET custom_params = ? WHERE mid = ? AND uid = ?");
                    }
                    try {
                        executeFast.requery();
                        NativeByteBuffer writeLocalParams = MessageCustomParamsHelper.writeLocalParams(messageWithCustomParamsOnlyInternal);
                        if (writeLocalParams != null) {
                            executeFast.bindByteBuffer(1, writeLocalParams);
                        } else {
                            executeFast.bindNull(1);
                        }
                        executeFast.bindInteger(2, i);
                        executeFast.bindLong(3, j);
                        executeFast.step();
                        executeFast.dispose();
                        if (writeLocalParams != null) {
                            writeLocalParams.reuse();
                        }
                    } catch (Exception e) {
                        e = e;
                        sQLitePreparedStatement = executeFast;
                        checkSQLException(e);
                        SQLiteDatabase sQLiteDatabase = this.database;
                        if (sQLiteDatabase != null) {
                            sQLiteDatabase.commitTransaction();
                        }
                        if (sQLitePreparedStatement != null) {
                            sQLitePreparedStatement.dispose();
                            return;
                        }
                        return;
                    } catch (Throwable th) {
                        th = th;
                        sQLitePreparedStatement = executeFast;
                        SQLiteDatabase sQLiteDatabase2 = this.database;
                        if (sQLiteDatabase2 != null) {
                            sQLiteDatabase2.commitTransaction();
                        }
                        if (sQLitePreparedStatement != null) {
                            sQLitePreparedStatement.dispose();
                        }
                        throw th;
                    }
                }
                this.database.commitTransaction();
                SQLiteDatabase sQLiteDatabase3 = this.database;
                if (sQLiteDatabase3 != null) {
                    sQLiteDatabase3.commitTransaction();
                }
            } catch (Exception e2) {
                e = e2;
            }
        } catch (Throwable th2) {
            th = th2;
        }
    }

    public void updateMessageVoiceTranscription(final long j, final int i, final String str, final long j2, final boolean z) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda55
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$updateMessageVoiceTranscription$86(i, j, z, j2, str);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateMessageVoiceTranscription$86(int i, long j, boolean z, long j2, String str) {
        TLRPC$Message messageWithCustomParamsOnlyInternal;
        SQLitePreparedStatement executeFast;
        SQLitePreparedStatement sQLitePreparedStatement = null;
        try {
            try {
                this.database.beginTransaction();
                messageWithCustomParamsOnlyInternal = getMessageWithCustomParamsOnlyInternal(i, j);
                messageWithCustomParamsOnlyInternal.voiceTranscriptionFinal = z;
                messageWithCustomParamsOnlyInternal.voiceTranscriptionId = j2;
                messageWithCustomParamsOnlyInternal.voiceTranscription = str;
                executeFast = this.database.executeFast("UPDATE messages_v2 SET custom_params = ? WHERE mid = ? AND uid = ?");
            } catch (Exception e) {
                e = e;
            }
        } catch (Throwable th) {
            th = th;
        }
        try {
            executeFast.requery();
            NativeByteBuffer writeLocalParams = MessageCustomParamsHelper.writeLocalParams(messageWithCustomParamsOnlyInternal);
            if (writeLocalParams != null) {
                executeFast.bindByteBuffer(1, writeLocalParams);
            } else {
                executeFast.bindNull(1);
            }
            executeFast.bindInteger(2, i);
            executeFast.bindLong(3, j);
            executeFast.step();
            executeFast.dispose();
            this.database.commitTransaction();
            if (writeLocalParams != null) {
                writeLocalParams.reuse();
            }
            SQLiteDatabase sQLiteDatabase = this.database;
            if (sQLiteDatabase != null) {
                sQLiteDatabase.commitTransaction();
            }
        } catch (Exception e2) {
            e = e2;
            sQLitePreparedStatement = executeFast;
            checkSQLException(e);
            SQLiteDatabase sQLiteDatabase2 = this.database;
            if (sQLiteDatabase2 != null) {
                sQLiteDatabase2.commitTransaction();
            }
            if (sQLitePreparedStatement != null) {
                sQLitePreparedStatement.dispose();
            }
        } catch (Throwable th2) {
            th = th2;
            sQLitePreparedStatement = executeFast;
            SQLiteDatabase sQLiteDatabase3 = this.database;
            if (sQLiteDatabase3 != null) {
                sQLiteDatabase3.commitTransaction();
            }
            if (sQLitePreparedStatement != null) {
                sQLitePreparedStatement.dispose();
            }
            throw th;
        }
    }

    public void updateMessageVoiceTranscription(final long j, final int i, final String str, final TLRPC$Message tLRPC$Message) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda53
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$updateMessageVoiceTranscription$87(i, j, tLRPC$Message, str);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateMessageVoiceTranscription$87(int i, long j, TLRPC$Message tLRPC$Message, String str) {
        SQLitePreparedStatement executeFast;
        SQLitePreparedStatement sQLitePreparedStatement = null;
        try {
            try {
                this.database.beginTransaction();
                TLRPC$Message messageWithCustomParamsOnlyInternal = getMessageWithCustomParamsOnlyInternal(i, j);
                messageWithCustomParamsOnlyInternal.voiceTranscriptionOpen = tLRPC$Message.voiceTranscriptionOpen;
                messageWithCustomParamsOnlyInternal.voiceTranscriptionRated = tLRPC$Message.voiceTranscriptionRated;
                messageWithCustomParamsOnlyInternal.voiceTranscriptionFinal = tLRPC$Message.voiceTranscriptionFinal;
                messageWithCustomParamsOnlyInternal.voiceTranscriptionForce = tLRPC$Message.voiceTranscriptionForce;
                messageWithCustomParamsOnlyInternal.voiceTranscriptionId = tLRPC$Message.voiceTranscriptionId;
                messageWithCustomParamsOnlyInternal.voiceTranscription = str;
                for (int i2 = 0; i2 < 2; i2++) {
                    if (i2 == 0) {
                        executeFast = this.database.executeFast("UPDATE messages_v2 SET custom_params = ? WHERE mid = ? AND uid = ?");
                    } else {
                        executeFast = this.database.executeFast("UPDATE messages_topics SET custom_params = ? WHERE mid = ? AND uid = ?");
                    }
                    try {
                        executeFast.requery();
                        NativeByteBuffer writeLocalParams = MessageCustomParamsHelper.writeLocalParams(messageWithCustomParamsOnlyInternal);
                        if (writeLocalParams != null) {
                            executeFast.bindByteBuffer(1, writeLocalParams);
                        } else {
                            executeFast.bindNull(1);
                        }
                        executeFast.bindInteger(2, i);
                        executeFast.bindLong(3, j);
                        executeFast.step();
                        executeFast.dispose();
                        this.database.commitTransaction();
                        if (writeLocalParams != null) {
                            writeLocalParams.reuse();
                        }
                    } catch (Exception e) {
                        e = e;
                        sQLitePreparedStatement = executeFast;
                        checkSQLException(e);
                        SQLiteDatabase sQLiteDatabase = this.database;
                        if (sQLiteDatabase != null) {
                            sQLiteDatabase.commitTransaction();
                        }
                        if (sQLitePreparedStatement != null) {
                            sQLitePreparedStatement.dispose();
                            return;
                        }
                        return;
                    } catch (Throwable th) {
                        th = th;
                        sQLitePreparedStatement = executeFast;
                        SQLiteDatabase sQLiteDatabase2 = this.database;
                        if (sQLiteDatabase2 != null) {
                            sQLiteDatabase2.commitTransaction();
                        }
                        if (sQLitePreparedStatement != null) {
                            sQLitePreparedStatement.dispose();
                        }
                        throw th;
                    }
                }
                SQLiteDatabase sQLiteDatabase3 = this.database;
                if (sQLiteDatabase3 != null) {
                    sQLiteDatabase3.commitTransaction();
                }
            } catch (Throwable th2) {
                th = th2;
            }
        } catch (Exception e2) {
            e = e2;
        }
    }

    public void updateMessageCustomParams(final long j, final TLRPC$Message tLRPC$Message) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda186
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$updateMessageCustomParams$88(tLRPC$Message, j);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateMessageCustomParams$88(TLRPC$Message tLRPC$Message, long j) {
        SQLitePreparedStatement executeFast;
        SQLitePreparedStatement sQLitePreparedStatement = null;
        try {
            try {
                this.database.beginTransaction();
                TLRPC$Message messageWithCustomParamsOnlyInternal = getMessageWithCustomParamsOnlyInternal(tLRPC$Message.id, j);
                MessageCustomParamsHelper.copyParams(tLRPC$Message, messageWithCustomParamsOnlyInternal);
                for (int i = 0; i < 2; i++) {
                    if (i == 0) {
                        executeFast = this.database.executeFast("UPDATE messages_v2 SET custom_params = ? WHERE mid = ? AND uid = ?");
                    } else {
                        executeFast = this.database.executeFast("UPDATE messages_topics SET custom_params = ? WHERE mid = ? AND uid = ?");
                    }
                    try {
                        executeFast.requery();
                        NativeByteBuffer writeLocalParams = MessageCustomParamsHelper.writeLocalParams(messageWithCustomParamsOnlyInternal);
                        if (writeLocalParams != null) {
                            executeFast.bindByteBuffer(1, writeLocalParams);
                        } else {
                            executeFast.bindNull(1);
                        }
                        executeFast.bindInteger(2, tLRPC$Message.id);
                        executeFast.bindLong(3, j);
                        executeFast.step();
                        executeFast.dispose();
                        if (writeLocalParams != null) {
                            writeLocalParams.reuse();
                        }
                    } catch (Exception e) {
                        e = e;
                        sQLitePreparedStatement = executeFast;
                        checkSQLException(e);
                        SQLiteDatabase sQLiteDatabase = this.database;
                        if (sQLiteDatabase != null) {
                            sQLiteDatabase.commitTransaction();
                        }
                        if (sQLitePreparedStatement != null) {
                            sQLitePreparedStatement.dispose();
                            return;
                        }
                        return;
                    } catch (Throwable th) {
                        th = th;
                        sQLitePreparedStatement = executeFast;
                        SQLiteDatabase sQLiteDatabase2 = this.database;
                        if (sQLiteDatabase2 != null) {
                            sQLiteDatabase2.commitTransaction();
                        }
                        if (sQLitePreparedStatement != null) {
                            sQLitePreparedStatement.dispose();
                        }
                        throw th;
                    }
                }
                this.database.commitTransaction();
                SQLiteDatabase sQLiteDatabase3 = this.database;
                if (sQLiteDatabase3 != null) {
                    sQLiteDatabase3.commitTransaction();
                }
            } catch (Throwable th2) {
                th = th2;
            }
        } catch (Exception e2) {
            e = e2;
        }
    }

    public TLRPC$Message getMessageWithCustomParamsOnlyInternal(int i, long j) {
        SQLiteCursor queryFinalized;
        boolean z;
        TLRPC$TL_message tLRPC$TL_message = new TLRPC$TL_message();
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                SQLiteDatabase sQLiteDatabase = this.database;
                queryFinalized = sQLiteDatabase.queryFinalized("SELECT custom_params FROM messages_v2 WHERE mid = " + i + " AND uid = " + j, new Object[0]);
            } catch (Throwable th) {
                th = th;
            }
        } catch (SQLiteException e) {
            e = e;
        }
        try {
            if (queryFinalized.next()) {
                MessageCustomParamsHelper.readLocalParams(tLRPC$TL_message, queryFinalized.byteBufferValue(0));
                z = true;
            } else {
                z = false;
            }
            queryFinalized.dispose();
            if (!z) {
                SQLiteDatabase sQLiteDatabase2 = this.database;
                sQLiteCursor = sQLiteDatabase2.queryFinalized("SELECT custom_params FROM messages_topics WHERE mid = " + i + " AND uid = " + j, new Object[0]);
                if (sQLiteCursor.next()) {
                    MessageCustomParamsHelper.readLocalParams(tLRPC$TL_message, sQLiteCursor.byteBufferValue(0));
                }
                sQLiteCursor.dispose();
            }
        } catch (SQLiteException e2) {
            e = e2;
            sQLiteCursor = queryFinalized;
            checkSQLException(e);
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
            return tLRPC$TL_message;
        } catch (Throwable th2) {
            th = th2;
            sQLiteCursor = queryFinalized;
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
            throw th;
        }
        return tLRPC$TL_message;
    }

    public void getNewTask(final LongSparseArray<ArrayList<Integer>> longSparseArray, final LongSparseArray<ArrayList<Integer>> longSparseArray2) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda131
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$getNewTask$89(longSparseArray, longSparseArray2);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Code restructure failed: missing block: B:21:0x00a5, code lost:
        if (r15 > 0) goto L16;
     */
    /* JADX WARN: Removed duplicated region for block: B:46:0x00f3  */
    /* JADX WARN: Removed duplicated region for block: B:49:0x00f9  */
    /* JADX WARN: Removed duplicated region for block: B:63:? A[RETURN, SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$getNewTask$89(LongSparseArray longSparseArray, LongSparseArray longSparseArray2) {
        Throwable th;
        Exception e;
        boolean z;
        LongSparseArray<ArrayList<Integer>> longSparseArray3;
        SQLiteCursor sQLiteCursor = null;
        if (longSparseArray != null) {
            try {
                try {
                    int size = longSparseArray.size();
                    for (int i = 0; i < size; i++) {
                        this.database.executeFast(String.format(Locale.US, "DELETE FROM enc_tasks_v4 WHERE mid IN(%s) AND uid = %d AND media = 0", TextUtils.join(",", (Iterable) longSparseArray.valueAt(i)), Long.valueOf(longSparseArray.keyAt(i)))).stepThis().dispose();
                    }
                } catch (Exception e2) {
                    e = e2;
                    checkSQLException(e);
                    if (sQLiteCursor == null) {
                        sQLiteCursor.dispose();
                        return;
                    }
                    return;
                }
            } catch (Throwable th2) {
                th = th2;
                if (sQLiteCursor != null) {
                    sQLiteCursor.dispose();
                }
                throw th;
            }
        }
        if (longSparseArray2 != null) {
            int size2 = longSparseArray2.size();
            for (int i2 = 0; i2 < size2; i2++) {
                this.database.executeFast(String.format(Locale.US, "DELETE FROM enc_tasks_v4 WHERE mid IN(%s) AND uid = %d AND media = 1", TextUtils.join(",", (Iterable) longSparseArray2.valueAt(i2)), Long.valueOf(longSparseArray2.keyAt(i2)))).stepThis().dispose();
            }
        }
        SQLiteCursor queryFinalized = this.database.queryFinalized("SELECT mid, date, media, uid FROM enc_tasks_v4 WHERE date = (SELECT min(date) FROM enc_tasks_v4)", new Object[0]);
        LongSparseArray<ArrayList<Integer>> longSparseArray4 = null;
        LongSparseArray<ArrayList<Integer>> longSparseArray5 = null;
        int i3 = 0;
        while (queryFinalized.next()) {
            try {
                int intValue = queryFinalized.intValue(0);
                int intValue2 = queryFinalized.intValue(1);
                int intValue3 = queryFinalized.intValue(2);
                long longValue = queryFinalized.longValue(3);
                if (intValue3 != -1) {
                    z = intValue3 != 0;
                }
                if (z) {
                    if (longSparseArray5 == null) {
                        longSparseArray5 = new LongSparseArray<>();
                    }
                    longSparseArray3 = longSparseArray5;
                } else {
                    if (longSparseArray4 == null) {
                        longSparseArray4 = new LongSparseArray<>();
                    }
                    longSparseArray3 = longSparseArray5;
                    longSparseArray5 = longSparseArray4;
                }
                ArrayList<Integer> arrayList = longSparseArray5.get(longValue);
                if (arrayList == null) {
                    arrayList = new ArrayList<>();
                    longSparseArray5.put(longValue, arrayList);
                }
                arrayList.add(Integer.valueOf(intValue));
                i3 = intValue2;
                longSparseArray5 = longSparseArray3;
            } catch (Exception e3) {
                sQLiteCursor = queryFinalized;
                e = e3;
                checkSQLException(e);
                if (sQLiteCursor == null) {
                }
            } catch (Throwable th3) {
                sQLiteCursor = queryFinalized;
                th = th3;
                if (sQLiteCursor != null) {
                }
                throw th;
            }
        }
        queryFinalized.dispose();
        getMessagesController().processLoadedDeleteTask(i3, longSparseArray4, longSparseArray5);
    }

    public void markMentionMessageAsRead(final long j, final int i, final long j2) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda50
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$markMentionMessageAsRead$90(i, j, j2);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$markMentionMessageAsRead$90(int i, long j, long j2) {
        SQLiteCursor sQLiteCursor;
        SQLiteCursor sQLiteCursor2;
        SQLiteCursor sQLiteCursor3 = null;
        try {
            try {
                SQLiteDatabase sQLiteDatabase = this.database;
                Locale locale = Locale.US;
                sQLiteDatabase.executeFast(String.format(locale, "UPDATE messages_v2 SET read_state = read_state | 2 WHERE mid = %d AND uid = %d", Integer.valueOf(i), Long.valueOf(j))).stepThis().dispose();
                SQLiteDatabase sQLiteDatabase2 = this.database;
                SQLiteCursor queryFinalized = sQLiteDatabase2.queryFinalized("SELECT unread_count_i FROM dialogs WHERE did = " + j2, new Object[0]);
                try {
                    int max = queryFinalized.next() ? Math.max(0, queryFinalized.intValue(0) - 1) : 0;
                    queryFinalized.dispose();
                    this.database.executeFast(String.format(locale, "UPDATE dialogs SET unread_count_i = %d WHERE did = %d", Integer.valueOf(max), Long.valueOf(j2))).stepThis().dispose();
                    LongSparseIntArray longSparseIntArray = new LongSparseIntArray(1);
                    longSparseIntArray.put(j2, max);
                    if (max == 0) {
                        updateFiltersReadCounter(null, longSparseIntArray, true);
                    }
                    getMessagesController().processDialogsUpdateRead(null, longSparseIntArray);
                    this.database.executeFast(String.format(locale, "UPDATE messages_topics SET read_state = read_state | 2 WHERE mid = %d AND uid = %d", Integer.valueOf(i), Long.valueOf(j))).stepThis().dispose();
                    SQLiteCursor queryFinalized2 = this.database.queryFinalized(String.format(locale, "SELECT data FROM messages_topics WHERE mid = %d AND uid = %d", Integer.valueOf(i), Long.valueOf(j)), new Object[0]);
                    int i2 = 0;
                    while (queryFinalized2.next()) {
                        try {
                            NativeByteBuffer byteBufferValue = queryFinalized2.byteBufferValue(0);
                            if (byteBufferValue != null) {
                                TLRPC$Message TLdeserialize = TLRPC$Message.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                                byteBufferValue.reuse();
                                i2 = MessageObject.getTopicId(TLdeserialize, isForum(j));
                            }
                        } catch (Exception e) {
                            sQLiteCursor3 = sQLiteCursor2;
                            e = e;
                            checkSQLException(e);
                            if (sQLiteCursor3 != null) {
                                sQLiteCursor3.dispose();
                                return;
                            }
                            return;
                        } catch (Throwable th) {
                            sQLiteCursor3 = sQLiteCursor;
                            th = th;
                            if (sQLiteCursor3 != null) {
                                sQLiteCursor3.dispose();
                            }
                            throw th;
                        }
                    }
                    queryFinalized2.dispose();
                    if (i2 != 0) {
                        SQLiteDatabase sQLiteDatabase3 = this.database;
                        Locale locale2 = Locale.US;
                        SQLiteCursor queryFinalized3 = sQLiteDatabase3.queryFinalized(String.format(locale2, "SELECT unread_mentions FROM topics WHERE did = %d AND topic_id = %d", Long.valueOf(j2), Integer.valueOf(i2)), new Object[0]);
                        int max2 = queryFinalized3.next() ? Math.max(0, queryFinalized3.intValue(0) - 1) : 0;
                        queryFinalized3.dispose();
                        this.database.executeFast(String.format(locale2, "UPDATE topics SET unread_mentions = %d WHERE did = %d AND topic_id = %d", Integer.valueOf(max2), Long.valueOf(j), Integer.valueOf(i2))).stepThis().dispose();
                        getMessagesController().getTopicsController().updateMentionsUnread(j, i2, max2);
                    }
                } catch (Exception e2) {
                    e = e2;
                    sQLiteCursor3 = queryFinalized;
                } catch (Throwable th2) {
                    th = th2;
                    sQLiteCursor3 = queryFinalized;
                }
            } catch (Throwable th3) {
                th = th3;
            }
        } catch (Exception e3) {
            e = e3;
        }
    }

    public void markMessageAsMention(final long j, final int i) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda43
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$markMessageAsMention$91(i, j);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$markMessageAsMention$91(int i, long j) {
        try {
            this.database.executeFast(String.format(Locale.US, "UPDATE messages_v2 SET mention = 1, read_state = read_state & ~2 WHERE mid = %d AND uid = %d", Integer.valueOf(i), Long.valueOf(j))).stepThis().dispose();
        } catch (Exception e) {
            checkSQLException(e);
        }
    }

    public void resetMentionsCount(final long j, final int i, final int i2) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda47
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$resetMentionsCount$92(i, j, i2);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$resetMentionsCount$92(int i, long j, int i2) {
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                if (i == 0) {
                    SQLiteDatabase sQLiteDatabase = this.database;
                    SQLiteCursor queryFinalized = sQLiteDatabase.queryFinalized("SELECT unread_count_i FROM dialogs WHERE did = " + j, new Object[0]);
                    try {
                        int intValue = queryFinalized.next() ? queryFinalized.intValue(0) : 0;
                        queryFinalized.dispose();
                        if (intValue == 0 && i2 == 0) {
                            return;
                        }
                        if (i2 == 0) {
                            this.database.executeFast(String.format(Locale.US, "UPDATE messages_v2 SET read_state = read_state | 2 WHERE uid = %d AND mention = 1 AND read_state IN(0, 1)", Long.valueOf(j))).stepThis().dispose();
                        }
                        this.database.executeFast(String.format(Locale.US, "UPDATE dialogs SET unread_count_i = %d WHERE did = %d", Integer.valueOf(i2), Long.valueOf(j))).stepThis().dispose();
                        LongSparseIntArray longSparseIntArray = new LongSparseIntArray(1);
                        longSparseIntArray.put(j, i2);
                        getMessagesController().processDialogsUpdateRead(null, longSparseIntArray);
                        if (i2 == 0) {
                            updateFiltersReadCounter(null, longSparseIntArray, true);
                            return;
                        }
                        return;
                    } catch (Exception e) {
                        e = e;
                        sQLiteCursor = queryFinalized;
                        checkSQLException(e);
                        if (sQLiteCursor != null) {
                            sQLiteCursor.dispose();
                            return;
                        }
                        return;
                    } catch (Throwable th) {
                        th = th;
                        sQLiteCursor = queryFinalized;
                        if (sQLiteCursor != null) {
                            sQLiteCursor.dispose();
                        }
                        throw th;
                    }
                }
                this.database.executeFast(String.format(Locale.US, "UPDATE topics SET unread_mentions = %d WHERE did = %d AND topic_id = %d", Integer.valueOf(i2), Long.valueOf(j), Integer.valueOf(i))).stepThis().dispose();
                TopicsController.TopicUpdate topicUpdate = new TopicsController.TopicUpdate();
                topicUpdate.dialogId = j;
                topicUpdate.topicId = i;
                topicUpdate.onlyCounters = true;
                topicUpdate.unreadMentions = i2;
                topicUpdate.unreadCount = -1;
                getMessagesController().getTopicsController().processUpdate(Collections.singletonList(topicUpdate));
            } catch (Exception e2) {
                e = e2;
            }
        } catch (Throwable th2) {
            th = th2;
        }
    }

    public void createTaskForMid(final long j, final int i, final int i2, final int i3, final int i4, final boolean z) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda37
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$createTaskForMid$94(i2, i3, i4, i, z, j);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createTaskForMid$94(int i, int i2, int i3, int i4, final boolean z, final long j) {
        SQLitePreparedStatement sQLitePreparedStatement = null;
        try {
            try {
                int max = Math.max(i, i2) + i3;
                SparseArray<ArrayList<Integer>> sparseArray = new SparseArray<>();
                final ArrayList<Integer> arrayList = new ArrayList<>();
                arrayList.add(Integer.valueOf(i4));
                sparseArray.put(max, arrayList);
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda202
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesStorage.this.lambda$createTaskForMid$93(z, j, arrayList);
                    }
                });
                SQLitePreparedStatement executeFast = this.database.executeFast("REPLACE INTO enc_tasks_v4 VALUES(?, ?, ?, ?)");
                for (int i5 = 0; i5 < sparseArray.size(); i5++) {
                    try {
                        int keyAt = sparseArray.keyAt(i5);
                        ArrayList<Integer> arrayList2 = sparseArray.get(keyAt);
                        for (int i6 = 0; i6 < arrayList2.size(); i6++) {
                            executeFast.requery();
                            executeFast.bindInteger(1, arrayList2.get(i6).intValue());
                            executeFast.bindLong(2, j);
                            executeFast.bindInteger(3, keyAt);
                            executeFast.bindInteger(4, 1);
                            executeFast.step();
                        }
                    } catch (Exception e) {
                        e = e;
                        sQLitePreparedStatement = executeFast;
                        checkSQLException(e);
                        if (sQLitePreparedStatement != null) {
                            sQLitePreparedStatement.dispose();
                            return;
                        }
                        return;
                    } catch (Throwable th) {
                        th = th;
                        sQLitePreparedStatement = executeFast;
                        if (sQLitePreparedStatement != null) {
                            sQLitePreparedStatement.dispose();
                        }
                        throw th;
                    }
                }
                executeFast.dispose();
                this.database.executeFast(String.format(Locale.US, "UPDATE messages_v2 SET ttl = 0 WHERE mid = %d AND uid = %d", Integer.valueOf(i4), Long.valueOf(j))).stepThis().dispose();
                getMessagesController().didAddedNewTask(max, j, sparseArray);
            } catch (Throwable th2) {
                th = th2;
            }
        } catch (Exception e2) {
            e = e2;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createTaskForMid$93(boolean z, long j, ArrayList arrayList) {
        if (!z) {
            markMessagesContentAsRead(j, arrayList, 0);
        }
        getNotificationCenter().postNotificationName(NotificationCenter.messagesReadContent, Long.valueOf(j), arrayList);
    }

    public void createTaskForSecretChat(final int i, final int i2, final int i3, final int i4, final ArrayList<Long> arrayList) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda60
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$createTaskForSecretChat$96(i, arrayList, i4, i2, i3);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:60:0x015b  */
    /* JADX WARN: Removed duplicated region for block: B:62:0x0160  */
    /* JADX WARN: Removed duplicated region for block: B:64:0x0165  */
    /* JADX WARN: Removed duplicated region for block: B:69:0x016e  */
    /* JADX WARN: Removed duplicated region for block: B:71:0x0173  */
    /* JADX WARN: Removed duplicated region for block: B:73:0x0178  */
    /* JADX WARN: Removed duplicated region for block: B:95:? A[RETURN, SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$createTaskForSecretChat$96(int i, ArrayList arrayList, int i2, int i3, int i4) {
        SQLiteCursor sQLiteCursor;
        SQLitePreparedStatement sQLitePreparedStatement;
        SQLiteDatabase sQLiteDatabase;
        SQLiteDatabase sQLiteDatabase2;
        SQLiteCursor queryFinalized;
        try {
            final long makeEncryptedDialogId = DialogObject.makeEncryptedDialogId(i);
            SparseArray<ArrayList<Integer>> sparseArray = new SparseArray<>();
            final ArrayList arrayList2 = new ArrayList();
            StringBuilder sb = new StringBuilder();
            if (arrayList == null) {
                queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT mid, ttl FROM messages_v2 WHERE uid = %d AND out = %d AND read_state > 0 AND ttl > 0 AND date <= %d AND send_state = 0 AND media != 1", Long.valueOf(makeEncryptedDialogId), Integer.valueOf(i2), Integer.valueOf(i3)), new Object[0]);
            } else {
                queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT m.mid, m.ttl FROM messages_v2 as m INNER JOIN randoms_v2 as r ON m.mid = r.mid AND m.uid = r.uid WHERE r.random_id IN (%s)", TextUtils.join(",", arrayList)), new Object[0]);
            }
            int i5 = ConnectionsManager.DEFAULT_DATACENTER_ID;
            while (queryFinalized.next()) {
                try {
                    int intValue = queryFinalized.intValue(1);
                    int intValue2 = queryFinalized.intValue(0);
                    if (arrayList != null) {
                        arrayList2.add(Integer.valueOf(intValue2));
                    }
                    if (intValue > 0) {
                        int max = Math.max(i3, i4) + intValue;
                        i5 = Math.min(i5, max);
                        ArrayList<Integer> arrayList3 = sparseArray.get(max);
                        if (arrayList3 == null) {
                            arrayList3 = new ArrayList<>();
                            sparseArray.put(max, arrayList3);
                        }
                        if (sb.length() != 0) {
                            sb.append(",");
                        }
                        sb.append(intValue2);
                        arrayList3.add(Integer.valueOf(intValue2));
                    }
                } catch (Exception e) {
                    e = e;
                    sQLiteCursor = queryFinalized;
                    sQLitePreparedStatement = null;
                    try {
                        checkSQLException(e);
                        sQLiteDatabase2 = this.database;
                        if (sQLiteDatabase2 != null) {
                        }
                        if (sQLitePreparedStatement != null) {
                        }
                        if (sQLiteCursor == null) {
                        }
                    } catch (Throwable th) {
                        th = th;
                        sQLiteDatabase = this.database;
                        if (sQLiteDatabase != null) {
                            sQLiteDatabase.commitTransaction();
                        }
                        if (sQLitePreparedStatement != null) {
                            sQLitePreparedStatement.dispose();
                        }
                        if (sQLiteCursor != null) {
                            sQLiteCursor.dispose();
                        }
                        throw th;
                    }
                } catch (Throwable th2) {
                    th = th2;
                    sQLiteCursor = queryFinalized;
                    sQLitePreparedStatement = null;
                    sQLiteDatabase = this.database;
                    if (sQLiteDatabase != null) {
                    }
                    if (sQLitePreparedStatement != null) {
                    }
                    if (sQLiteCursor != null) {
                    }
                    throw th;
                }
            }
            queryFinalized.dispose();
            if (arrayList != null) {
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda103
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesStorage.this.lambda$createTaskForSecretChat$95(makeEncryptedDialogId, arrayList2);
                    }
                });
            }
            if (sparseArray.size() != 0) {
                this.database.beginTransaction();
                sQLitePreparedStatement = this.database.executeFast("REPLACE INTO enc_tasks_v4 VALUES(?, ?, ?, ?)");
                for (int i6 = 0; i6 < sparseArray.size(); i6++) {
                    try {
                        int keyAt = sparseArray.keyAt(i6);
                        ArrayList<Integer> arrayList4 = sparseArray.get(keyAt);
                        for (int i7 = 0; i7 < arrayList4.size(); i7++) {
                            sQLitePreparedStatement.requery();
                            sQLitePreparedStatement.bindInteger(1, arrayList4.get(i7).intValue());
                            sQLitePreparedStatement.bindLong(2, makeEncryptedDialogId);
                            sQLitePreparedStatement.bindInteger(3, keyAt);
                            sQLitePreparedStatement.bindInteger(4, 0);
                            sQLitePreparedStatement.step();
                        }
                    } catch (Exception e2) {
                        e = e2;
                        sQLiteCursor = null;
                        checkSQLException(e);
                        sQLiteDatabase2 = this.database;
                        if (sQLiteDatabase2 != null) {
                            sQLiteDatabase2.commitTransaction();
                        }
                        if (sQLitePreparedStatement != null) {
                            sQLitePreparedStatement.dispose();
                        }
                        if (sQLiteCursor == null) {
                            sQLiteCursor.dispose();
                            return;
                        }
                        return;
                    } catch (Throwable th3) {
                        th = th3;
                        sQLiteCursor = null;
                        sQLiteDatabase = this.database;
                        if (sQLiteDatabase != null) {
                        }
                        if (sQLitePreparedStatement != null) {
                        }
                        if (sQLiteCursor != null) {
                        }
                        throw th;
                    }
                }
                sQLitePreparedStatement.dispose();
                this.database.commitTransaction();
                this.database.executeFast(String.format(Locale.US, "UPDATE messages_v2 SET ttl = 0 WHERE mid IN(%s) AND uid = %d", sb.toString(), Long.valueOf(makeEncryptedDialogId))).stepThis().dispose();
                getMessagesController().didAddedNewTask(i5, makeEncryptedDialogId, sparseArray);
            }
            SQLiteDatabase sQLiteDatabase3 = this.database;
            if (sQLiteDatabase3 != null) {
                sQLiteDatabase3.commitTransaction();
            }
        } catch (Exception e3) {
            e = e3;
            sQLiteCursor = null;
        } catch (Throwable th4) {
            th = th4;
            sQLiteCursor = null;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createTaskForSecretChat$95(long j, ArrayList arrayList) {
        markMessagesContentAsRead(j, arrayList, 0);
        getNotificationCenter().postNotificationName(NotificationCenter.messagesReadContent, Long.valueOf(j), arrayList);
    }

    /* JADX WARN: Code restructure failed: missing block: B:191:0x03fd, code lost:
        if (r14.indexOfKey(-r4.id) >= 0) goto L189;
     */
    /* JADX WARN: Code restructure failed: missing block: B:331:0x0649, code lost:
        if (r12.indexOfKey(r15.id) >= 0) goto L324;
     */
    /* JADX WARN: Removed duplicated region for block: B:168:0x03a2  */
    /* JADX WARN: Removed duplicated region for block: B:169:0x03ad  */
    /* JADX WARN: Removed duplicated region for block: B:172:0x03b2  */
    /* JADX WARN: Removed duplicated region for block: B:190:0x03f4  */
    /* JADX WARN: Removed duplicated region for block: B:198:0x041f  */
    /* JADX WARN: Removed duplicated region for block: B:230:0x04b6  */
    /* JADX WARN: Removed duplicated region for block: B:244:0x04f1  */
    /* JADX WARN: Removed duplicated region for block: B:292:0x05b6  */
    /* JADX WARN: Removed duplicated region for block: B:453:0x081b  */
    /* JADX WARN: Removed duplicated region for block: B:467:0x0851  */
    /* JADX WARN: Removed duplicated region for block: B:515:0x0907  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void updateFiltersReadCounter(LongSparseIntArray longSparseIntArray, LongSparseIntArray longSparseIntArray2, boolean z) throws Exception {
        int i;
        MessagesController.DialogFilter dialogFilter;
        int i2;
        int i3;
        int i4;
        int i5;
        int i6;
        LongSparseArray longSparseArray;
        int i7;
        LongSparseArray longSparseArray2;
        int i8;
        LongSparseIntArray longSparseIntArray3;
        LongSparseArray longSparseArray3;
        int i9;
        LongSparseArray longSparseArray4;
        int i10;
        char c;
        char c2;
        char c3;
        int i11;
        int i12;
        char c4;
        int i13;
        int i14;
        char c5;
        char c6;
        char c7;
        char c8;
        int i15;
        int i16;
        LongSparseArray longSparseArray5;
        LongSparseArray longSparseArray6;
        int i17;
        int i18;
        int i19;
        int intValue;
        int i20;
        int i21;
        LongSparseArray longSparseArray7;
        int i22;
        LongSparseArray longSparseArray8;
        int i23;
        LongSparseArray longSparseArray9;
        int i24;
        LongSparseArray longSparseArray10;
        int i25;
        LongSparseArray longSparseArray11;
        LongSparseArray longSparseArray12;
        int intValue2;
        int i26;
        char c9;
        char c10;
        char c11;
        int i27;
        int i28;
        char c12;
        int i29;
        int i30;
        char c13;
        char c14;
        char c15;
        char c16;
        int i31;
        ArrayList<TLRPC$Chat> arrayList;
        LongSparseArray longSparseArray13;
        LongSparseArray longSparseArray14;
        int i32;
        TLRPC$EncryptedChat tLRPC$EncryptedChat;
        int i33;
        LongSparseArray longSparseArray15;
        ArrayList<TLRPC$EncryptedChat> arrayList2;
        int i34;
        ArrayList arrayList3;
        ArrayList<TLRPC$User> arrayList4;
        LongSparseArray longSparseArray16;
        LongSparseIntArray longSparseIntArray4;
        if ((longSparseIntArray == null || longSparseIntArray.size() == 0) && (longSparseIntArray2 == null || longSparseIntArray2.size() == 0)) {
            return;
        }
        int i35 = 0;
        while (true) {
            if (i35 >= 2) {
                break;
            }
            for (int i36 = 0; i36 < 2; i36++) {
                int[] iArr = this.contacts[i35];
                int[] iArr2 = this.nonContacts[i35];
                int[] iArr3 = this.bots[i35];
                int[] iArr4 = this.channels[i35];
                this.groups[i35][i36] = 0;
                iArr4[i36] = 0;
                iArr3[i36] = 0;
                iArr2[i36] = 0;
                iArr[i36] = 0;
            }
            int[] iArr5 = this.mentionChannels;
            this.mentionGroups[i35] = 0;
            iArr5[i35] = 0;
            i35++;
        }
        ArrayList<TLRPC$User> arrayList5 = new ArrayList<>();
        ArrayList<TLRPC$User> arrayList6 = new ArrayList<>();
        ArrayList<TLRPC$Chat> arrayList7 = new ArrayList<>();
        ArrayList arrayList8 = new ArrayList();
        ArrayList arrayList9 = new ArrayList();
        ArrayList arrayList10 = new ArrayList();
        LongSparseArray longSparseArray17 = new LongSparseArray();
        LongSparseArray longSparseArray18 = new LongSparseArray();
        int i37 = 0;
        for (i = 2; i37 < i; i = 2) {
            LongSparseIntArray longSparseIntArray5 = i37 == 0 ? longSparseIntArray : longSparseIntArray2;
            if (longSparseIntArray5 != null) {
                int i38 = 0;
                while (i38 < longSparseIntArray5.size()) {
                    Integer valueOf = Integer.valueOf(longSparseIntArray5.valueAt(i38));
                    if ((!z || valueOf.intValue() == 0) && (z || valueOf.intValue() != 0)) {
                        arrayList4 = arrayList6;
                        long keyAt = longSparseIntArray5.keyAt(i38);
                        if (!z) {
                            if (this.dialogsWithMentions.indexOfKey(keyAt) < 0 && this.dialogsWithUnread.indexOfKey(keyAt) < 0) {
                                longSparseArray18.put(keyAt, valueOf);
                            }
                            if (i37 == 0) {
                                this.dialogsWithUnread.put(keyAt, valueOf);
                            } else {
                                this.dialogsWithMentions.put(keyAt, valueOf);
                            }
                        } else if (i37 == 0) {
                            this.dialogsWithUnread.remove(keyAt);
                        } else {
                            this.dialogsWithMentions.remove(keyAt);
                        }
                        if (longSparseArray17.indexOfKey(keyAt) < 0) {
                            SQLiteDatabase sQLiteDatabase = this.database;
                            StringBuilder sb = new StringBuilder();
                            longSparseIntArray4 = longSparseIntArray5;
                            sb.append("SELECT folder_id FROM dialogs WHERE did = ");
                            sb.append(keyAt);
                            longSparseArray16 = longSparseArray18;
                            SQLiteCursor queryFinalized = sQLiteDatabase.queryFinalized(sb.toString(), new Object[0]);
                            int intValue3 = queryFinalized.next() ? queryFinalized.intValue(0) : 0;
                            queryFinalized.dispose();
                            longSparseArray17.put(keyAt, Integer.valueOf(intValue3));
                        } else {
                            longSparseArray16 = longSparseArray18;
                            longSparseIntArray4 = longSparseIntArray5;
                        }
                        if (DialogObject.isEncryptedDialog(keyAt)) {
                            int encryptedChatId = DialogObject.getEncryptedChatId(keyAt);
                            if (!arrayList10.contains(Integer.valueOf(encryptedChatId))) {
                                arrayList10.add(Integer.valueOf(encryptedChatId));
                            }
                        } else if (DialogObject.isUserDialog(keyAt)) {
                            if (!arrayList8.contains(Long.valueOf(keyAt))) {
                                arrayList8.add(Long.valueOf(keyAt));
                            }
                        } else {
                            long j = -keyAt;
                            if (!arrayList9.contains(Long.valueOf(j))) {
                                arrayList9.add(Long.valueOf(j));
                            }
                        }
                    } else {
                        arrayList4 = arrayList6;
                        longSparseArray16 = longSparseArray18;
                        longSparseIntArray4 = longSparseIntArray5;
                    }
                    i38++;
                    arrayList6 = arrayList4;
                    longSparseIntArray5 = longSparseIntArray4;
                    longSparseArray18 = longSparseArray16;
                }
            }
            i37++;
            arrayList6 = arrayList6;
            longSparseArray18 = longSparseArray18;
        }
        ArrayList<TLRPC$User> arrayList11 = arrayList6;
        LongSparseArray longSparseArray19 = longSparseArray18;
        LongSparseArray longSparseArray20 = new LongSparseArray();
        LongSparseArray longSparseArray21 = new LongSparseArray();
        LongSparseArray longSparseArray22 = new LongSparseArray();
        LongSparseArray longSparseArray23 = new LongSparseArray();
        LongSparseArray longSparseArray24 = new LongSparseArray();
        LongSparseArray longSparseArray25 = new LongSparseArray();
        LongSparseArray longSparseArray26 = longSparseArray21;
        if (!arrayList8.isEmpty()) {
            getUsersInternal(TextUtils.join(",", arrayList8), arrayList5);
            int size = arrayList5.size();
            int i39 = 0;
            while (i39 < size) {
                TLRPC$User tLRPC$User = arrayList5.get(i39);
                ArrayList<TLRPC$User> arrayList12 = arrayList5;
                ArrayList<TLRPC$Chat> arrayList13 = arrayList7;
                int i40 = size;
                boolean isDialogMuted = getMessagesController().isDialogMuted(tLRPC$User.id, 0);
                Integer num = (Integer) longSparseArray17.get(tLRPC$User.id);
                int intValue4 = (num == null || num.intValue() < 0 || num.intValue() > 1) ? 0 : num.intValue();
                if (isDialogMuted) {
                    arrayList3 = arrayList9;
                    longSparseArray24.put(tLRPC$User.id, Boolean.TRUE);
                } else {
                    arrayList3 = arrayList9;
                }
                if (intValue4 == 1) {
                    longSparseArray25.put(tLRPC$User.id, Boolean.TRUE);
                }
                if (tLRPC$User.bot) {
                    int[] iArr6 = this.bots[intValue4];
                    iArr6[isDialogMuted ? 1 : 0] = iArr6[isDialogMuted ? 1 : 0] + 1;
                } else if (tLRPC$User.self || tLRPC$User.contact) {
                    int[] iArr7 = this.contacts[intValue4];
                    iArr7[isDialogMuted ? 1 : 0] = iArr7[isDialogMuted ? 1 : 0] + 1;
                } else {
                    int[] iArr8 = this.nonContacts[intValue4];
                    iArr8[isDialogMuted ? 1 : 0] = iArr8[isDialogMuted ? 1 : 0] + 1;
                }
                longSparseArray20.put(tLRPC$User.id, tLRPC$User);
                i39++;
                arrayList5 = arrayList12;
                arrayList7 = arrayList13;
                size = i40;
                arrayList9 = arrayList3;
            }
        }
        ArrayList<TLRPC$Chat> arrayList14 = arrayList7;
        ArrayList arrayList15 = arrayList9;
        if (!arrayList10.isEmpty()) {
            ArrayList<Long> arrayList16 = new ArrayList<>();
            ArrayList<TLRPC$EncryptedChat> arrayList17 = new ArrayList<>();
            getEncryptedChatsInternal(TextUtils.join(",", arrayList10), arrayList17, arrayList16);
            if (!arrayList16.isEmpty()) {
                getUsersInternal(TextUtils.join(",", arrayList16), arrayList11);
                int size2 = arrayList11.size();
                for (int i41 = 0; i41 < size2; i41++) {
                    TLRPC$User tLRPC$User2 = arrayList11.get(i41);
                    longSparseArray22.put(tLRPC$User2.id, tLRPC$User2);
                }
                int size3 = arrayList17.size();
                int i42 = 0;
                while (i42 < size3) {
                    TLRPC$User tLRPC$User3 = (TLRPC$User) longSparseArray22.get(arrayList17.get(i42).user_id);
                    if (tLRPC$User3 == null) {
                        i33 = size3;
                        longSparseArray15 = longSparseArray20;
                        arrayList2 = arrayList17;
                    } else {
                        long makeEncryptedDialogId = DialogObject.makeEncryptedDialogId(tLRPC$EncryptedChat.id);
                        boolean isDialogMuted2 = getMessagesController().isDialogMuted(makeEncryptedDialogId, 0);
                        Integer num2 = (Integer) longSparseArray17.get(makeEncryptedDialogId);
                        int intValue5 = (num2 == null || num2.intValue() < 0 || num2.intValue() > 1) ? 0 : num2.intValue();
                        i33 = size3;
                        longSparseArray15 = longSparseArray20;
                        if (isDialogMuted2) {
                            arrayList2 = arrayList17;
                            longSparseArray24.put(tLRPC$User3.id, Boolean.TRUE);
                        } else {
                            arrayList2 = arrayList17;
                        }
                        if (intValue5 == 1) {
                            longSparseArray25.put(tLRPC$User3.id, Boolean.TRUE);
                        }
                        if (tLRPC$User3.self || tLRPC$User3.contact) {
                            i34 = 1;
                            int[] iArr9 = this.contacts[intValue5];
                            iArr9[isDialogMuted2 ? 1 : 0] = iArr9[isDialogMuted2 ? 1 : 0] + 1;
                        } else {
                            int[] iArr10 = this.nonContacts[intValue5];
                            i34 = 1;
                            iArr10[isDialogMuted2 ? 1 : 0] = iArr10[isDialogMuted2 ? 1 : 0] + 1;
                        }
                        longSparseArray23.put(tLRPC$User3.id, Integer.valueOf(((Integer) longSparseArray23.get(tLRPC$User3.id, 0)).intValue() + i34));
                    }
                    i42++;
                    longSparseArray20 = longSparseArray15;
                    size3 = i33;
                    arrayList17 = arrayList2;
                }
            }
        }
        LongSparseArray longSparseArray27 = longSparseArray20;
        if (!arrayList15.isEmpty()) {
            ArrayList<TLRPC$Chat> arrayList18 = arrayList14;
            getChatsInternal(TextUtils.join(",", arrayList15), arrayList18);
            int size4 = arrayList18.size();
            int i43 = 0;
            while (i43 < size4) {
                TLRPC$Chat tLRPC$Chat = arrayList18.get(i43);
                if ((tLRPC$Chat.migrated_to instanceof TLRPC$TL_inputChannel) || ChatObject.isNotInChat(tLRPC$Chat)) {
                    i31 = size4;
                    arrayList = arrayList18;
                    longSparseArray13 = longSparseArray19;
                    longSparseArray14 = longSparseArray26;
                } else {
                    boolean isDialogMuted3 = getMessagesController().isDialogMuted(-tLRPC$Chat.id, 0, tLRPC$Chat);
                    boolean z2 = this.dialogsWithUnread.indexOfKey(-tLRPC$Chat.id) >= 0;
                    boolean z3 = this.dialogsWithMentions.indexOfKey(-tLRPC$Chat.id) >= 0;
                    Integer num3 = (Integer) longSparseArray17.get(-tLRPC$Chat.id);
                    if (num3 == null || num3.intValue() < 0) {
                        i31 = size4;
                    } else {
                        i31 = size4;
                        if (num3.intValue() <= 1) {
                            i32 = num3.intValue();
                            if (isDialogMuted3) {
                                arrayList = arrayList18;
                            } else {
                                arrayList = arrayList18;
                                longSparseArray24.put(-tLRPC$Chat.id, Boolean.TRUE);
                            }
                            if (i32 == 1) {
                                longSparseArray25.put(-tLRPC$Chat.id, Boolean.TRUE);
                            }
                            if (isDialogMuted3 && longSparseIntArray2 != null && longSparseIntArray2.indexOfKey(-tLRPC$Chat.id) >= 0) {
                                if (!ChatObject.isChannel(tLRPC$Chat) && !tLRPC$Chat.megagroup) {
                                    int[] iArr11 = this.mentionChannels;
                                    iArr11[i32] = iArr11[i32] + 1;
                                } else {
                                    int[] iArr12 = this.mentionGroups;
                                    iArr12[i32] = iArr12[i32] + 1;
                                }
                            }
                            if (z || z2 || z3) {
                                if (z) {
                                    longSparseArray13 = longSparseArray19;
                                } else {
                                    longSparseArray13 = longSparseArray19;
                                }
                                longSparseArray14 = longSparseArray26;
                                longSparseArray14.put(tLRPC$Chat.id, tLRPC$Chat);
                            } else {
                                longSparseArray13 = longSparseArray19;
                            }
                            if (ChatObject.isChannel(tLRPC$Chat) && !tLRPC$Chat.megagroup) {
                                int[] iArr13 = this.channels[i32];
                                iArr13[isDialogMuted3 ? 1 : 0] = iArr13[isDialogMuted3 ? 1 : 0] + 1;
                            } else {
                                int[] iArr14 = this.groups[i32];
                                iArr14[isDialogMuted3 ? 1 : 0] = iArr14[isDialogMuted3 ? 1 : 0] + 1;
                            }
                            longSparseArray14 = longSparseArray26;
                            longSparseArray14.put(tLRPC$Chat.id, tLRPC$Chat);
                        }
                    }
                    i32 = 0;
                    if (isDialogMuted3) {
                    }
                    if (i32 == 1) {
                    }
                    if (isDialogMuted3) {
                        if (!ChatObject.isChannel(tLRPC$Chat)) {
                        }
                        int[] iArr122 = this.mentionGroups;
                        iArr122[i32] = iArr122[i32] + 1;
                    }
                    if (z) {
                    }
                    if (z) {
                    }
                    longSparseArray14 = longSparseArray26;
                    longSparseArray14.put(tLRPC$Chat.id, tLRPC$Chat);
                }
                i43++;
                longSparseArray26 = longSparseArray14;
                longSparseArray19 = longSparseArray13;
                size4 = i31;
                arrayList18 = arrayList;
            }
        }
        LongSparseArray longSparseArray28 = longSparseArray26;
        LongSparseIntArray longSparseIntArray6 = longSparseIntArray2;
        LongSparseArray longSparseArray29 = longSparseArray19;
        int size5 = this.dialogFilters.size();
        int i44 = 0;
        while (i44 < size5 + 2) {
            if (i44 < size5) {
                dialogFilter = this.dialogFilters.get(i44);
                if (dialogFilter.pendingUnreadCount < 0) {
                    longSparseIntArray3 = longSparseIntArray6;
                    i15 = size5;
                    longSparseArray = longSparseArray29;
                    i16 = i44;
                    longSparseArray2 = longSparseArray23;
                    i44 = i16 + 1;
                    size5 = i15;
                    longSparseIntArray6 = longSparseIntArray3;
                    longSparseArray23 = longSparseArray2;
                    longSparseArray29 = longSparseArray;
                } else {
                    i5 = dialogFilter.pendingUnreadCount;
                    i4 = dialogFilter.flags;
                }
            } else {
                dialogFilter = null;
                int i45 = MessagesController.DIALOG_FILTER_FLAG_ALL_CHATS;
                if (i44 == size5) {
                    i2 = this.pendingMainUnreadCount;
                    i45 |= MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED;
                    if (!getNotificationsController().showBadgeMuted) {
                        i3 = MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED;
                    }
                    int i46 = i2;
                    i4 = i45;
                    i5 = i46;
                } else {
                    i2 = this.pendingArchiveUnreadCount;
                    i3 = MessagesController.DIALOG_FILTER_FLAG_ONLY_ARCHIVED;
                }
                i45 |= i3;
                int i462 = i2;
                i4 = i45;
                i5 = i462;
            }
            if (z) {
                if ((MessagesController.DIALOG_FILTER_FLAG_CONTACTS & i4) != 0) {
                    if ((MessagesController.DIALOG_FILTER_FLAG_ONLY_ARCHIVED & i4) == 0) {
                        int[][] iArr15 = this.contacts;
                        c15 = 0;
                        i5 -= iArr15[0][0];
                        if ((i4 & MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED) == 0) {
                            c16 = 1;
                            i5 -= iArr15[0][1];
                            if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED & i4) == 0) {
                                int[][] iArr16 = this.contacts;
                                i5 -= iArr16[c16][c15];
                                if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i4) == 0) {
                                    i5 -= iArr16[c16][c16];
                                }
                            }
                        }
                    } else {
                        c15 = 0;
                    }
                    c16 = 1;
                    if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED & i4) == 0) {
                    }
                }
                if ((MessagesController.DIALOG_FILTER_FLAG_NON_CONTACTS & i4) != 0) {
                    if ((MessagesController.DIALOG_FILTER_FLAG_ONLY_ARCHIVED & i4) == 0) {
                        int[][] iArr17 = this.nonContacts;
                        c13 = 0;
                        i5 -= iArr17[0][0];
                        if ((i4 & MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED) == 0) {
                            c14 = 1;
                            i5 -= iArr17[0][1];
                            if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED & i4) == 0) {
                                int[][] iArr18 = this.nonContacts;
                                i5 -= iArr18[c14][c13];
                                if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i4) == 0) {
                                    i5 -= iArr18[c14][c14];
                                }
                            }
                        }
                    } else {
                        c13 = 0;
                    }
                    c14 = 1;
                    if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED & i4) == 0) {
                    }
                }
                if ((MessagesController.DIALOG_FILTER_FLAG_GROUPS & i4) != 0) {
                    if ((MessagesController.DIALOG_FILTER_FLAG_ONLY_ARCHIVED & i4) == 0) {
                        int[][] iArr19 = this.groups;
                        c12 = 0;
                        int i47 = i5 - iArr19[0][0];
                        if ((i4 & MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED) == 0) {
                            i30 = iArr19[0][1];
                        } else {
                            i30 = this.mentionGroups[0];
                        }
                        i5 = i47 - i30;
                    } else {
                        c12 = 0;
                    }
                    if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED & i4) == 0) {
                        int[][] iArr20 = this.groups;
                        int i48 = i5 - iArr20[1][c12];
                        if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i4) == 0) {
                            i29 = iArr20[1][1];
                        } else {
                            i29 = this.mentionGroups[1];
                        }
                        i5 = i48 - i29;
                    }
                }
                if ((MessagesController.DIALOG_FILTER_FLAG_CHANNELS & i4) != 0) {
                    if ((MessagesController.DIALOG_FILTER_FLAG_ONLY_ARCHIVED & i4) == 0) {
                        int[][] iArr21 = this.channels;
                        c11 = 0;
                        int i49 = i5 - iArr21[0][0];
                        if ((i4 & MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED) == 0) {
                            i28 = iArr21[0][1];
                        } else {
                            i28 = this.mentionChannels[0];
                        }
                        i5 = i49 - i28;
                    } else {
                        c11 = 0;
                    }
                    if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED & i4) == 0) {
                        int[][] iArr22 = this.channels;
                        int i50 = i5 - iArr22[1][c11];
                        if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i4) == 0) {
                            i27 = iArr22[1][1];
                        } else {
                            i27 = this.mentionChannels[1];
                        }
                        i5 = i50 - i27;
                    }
                }
                if ((MessagesController.DIALOG_FILTER_FLAG_BOTS & i4) != 0) {
                    if ((MessagesController.DIALOG_FILTER_FLAG_ONLY_ARCHIVED & i4) == 0) {
                        int[][] iArr23 = this.bots;
                        c9 = 0;
                        i5 -= iArr23[0][0];
                        if ((i4 & MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED) == 0) {
                            c10 = 1;
                            i5 -= iArr23[0][1];
                            if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED & i4) == 0) {
                                int[][] iArr24 = this.bots;
                                i5 -= iArr24[c10][c9];
                                if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i4) == 0) {
                                    i5 -= iArr24[c10][c10];
                                }
                            }
                        }
                    } else {
                        c9 = 0;
                    }
                    c10 = 1;
                    if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED & i4) == 0) {
                    }
                }
                if (dialogFilter != null) {
                    int size6 = dialogFilter.alwaysShow.size();
                    int i51 = 0;
                    while (i51 < size6) {
                        int i52 = size6;
                        LongSparseArray longSparseArray30 = longSparseArray27;
                        long longValue = dialogFilter.alwaysShow.get(i51).longValue();
                        if (DialogObject.isUserDialog(longValue)) {
                            i21 = size5;
                            i23 = i44;
                            int i53 = 0;
                            while (i53 < 2) {
                                TLRPC$User tLRPC$User4 = (TLRPC$User) (i53 == 0 ? longSparseArray30 : longSparseArray22).get(longValue);
                                if (tLRPC$User4 != null) {
                                    if (i53 == 0) {
                                        longSparseArray10 = longSparseArray22;
                                        longSparseArray11 = longSparseArray29;
                                        intValue2 = 1;
                                    } else {
                                        longSparseArray10 = longSparseArray22;
                                        intValue2 = ((Integer) longSparseArray23.get(longValue, 0)).intValue();
                                        if (intValue2 != 0) {
                                            longSparseArray11 = longSparseArray29;
                                        }
                                    }
                                    if (tLRPC$User4.bot) {
                                        i26 = MessagesController.DIALOG_FILTER_FLAG_BOTS;
                                    } else if (tLRPC$User4.self || tLRPC$User4.contact) {
                                        i26 = MessagesController.DIALOG_FILTER_FLAG_CONTACTS;
                                    } else {
                                        i26 = MessagesController.DIALOG_FILTER_FLAG_NON_CONTACTS;
                                    }
                                    if ((i26 & i4) == 0) {
                                        i5 -= intValue2;
                                        i25 = i51;
                                        longSparseArray12 = longSparseArray23;
                                        i53++;
                                        longSparseArray23 = longSparseArray12;
                                        longSparseArray22 = longSparseArray10;
                                        longSparseArray29 = longSparseArray11;
                                        i51 = i25;
                                    } else {
                                        i25 = i51;
                                        if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i4) != 0) {
                                            longSparseArray12 = longSparseArray23;
                                        } else {
                                            longSparseArray12 = longSparseArray23;
                                        }
                                        if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED & i4) != 0) {
                                            if (longSparseArray25.indexOfKey(tLRPC$User4.id) < 0) {
                                            }
                                            i5 -= intValue2;
                                        }
                                        i53++;
                                        longSparseArray23 = longSparseArray12;
                                        longSparseArray22 = longSparseArray10;
                                        longSparseArray29 = longSparseArray11;
                                        i51 = i25;
                                    }
                                } else {
                                    longSparseArray10 = longSparseArray22;
                                }
                                i25 = i51;
                                longSparseArray11 = longSparseArray29;
                                longSparseArray12 = longSparseArray23;
                                i53++;
                                longSparseArray23 = longSparseArray12;
                                longSparseArray22 = longSparseArray10;
                                longSparseArray29 = longSparseArray11;
                                i51 = i25;
                            }
                            longSparseArray7 = longSparseArray22;
                            i22 = i51;
                            longSparseArray8 = longSparseArray29;
                            longSparseArray9 = longSparseArray23;
                        } else {
                            i21 = size5;
                            longSparseArray7 = longSparseArray22;
                            i22 = i51;
                            longSparseArray8 = longSparseArray29;
                            i23 = i44;
                            longSparseArray9 = longSparseArray23;
                            TLRPC$Chat tLRPC$Chat2 = (TLRPC$Chat) longSparseArray28.get(-longValue);
                            if (tLRPC$Chat2 != null) {
                                if (ChatObject.isChannel(tLRPC$Chat2) && !tLRPC$Chat2.megagroup) {
                                    i24 = MessagesController.DIALOG_FILTER_FLAG_CHANNELS;
                                } else {
                                    i24 = MessagesController.DIALOG_FILTER_FLAG_GROUPS;
                                }
                                if ((i24 & i4) == 0 || (((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i4) != 0 && longSparseArray24.indexOfKey(-tLRPC$Chat2.id) >= 0 && this.dialogsWithMentions.indexOfKey(-tLRPC$Chat2.id) < 0) || ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED & i4) != 0 && longSparseArray25.indexOfKey(-tLRPC$Chat2.id) >= 0))) {
                                    i5--;
                                }
                            }
                        }
                        i51 = i22 + 1;
                        size6 = i52;
                        longSparseArray23 = longSparseArray9;
                        longSparseArray27 = longSparseArray30;
                        size5 = i21;
                        i44 = i23;
                        longSparseArray22 = longSparseArray7;
                        longSparseArray29 = longSparseArray8;
                    }
                    i6 = size5;
                    longSparseArray5 = longSparseArray22;
                    longSparseArray6 = longSparseArray27;
                    longSparseArray = longSparseArray29;
                    i7 = i44;
                    longSparseArray2 = longSparseArray23;
                    int size7 = dialogFilter.neverShow.size();
                    int i54 = 0;
                    while (i54 < size7) {
                        long longValue2 = dialogFilter.neverShow.get(i54).longValue();
                        if (longSparseIntArray6 == null || longSparseIntArray6.indexOfKey(longValue2) < 0 || longSparseArray24.indexOfKey(longValue2) >= 0) {
                            if (DialogObject.isUserDialog(longValue2)) {
                                int i55 = 0;
                                while (i55 < 2) {
                                    TLRPC$User tLRPC$User5 = (TLRPC$User) (i55 == 0 ? longSparseArray6 : longSparseArray5).get(longValue2);
                                    if (tLRPC$User5 != null) {
                                        if (i55 == 0) {
                                            i19 = size7;
                                            intValue = 1;
                                        } else {
                                            intValue = ((Integer) longSparseArray2.get(longValue2, 0)).intValue();
                                            if (intValue != 0) {
                                                i19 = size7;
                                            }
                                        }
                                        if (tLRPC$User5.bot) {
                                            i20 = MessagesController.DIALOG_FILTER_FLAG_BOTS;
                                        } else if (tLRPC$User5.self || tLRPC$User5.contact) {
                                            i20 = MessagesController.DIALOG_FILTER_FLAG_CONTACTS;
                                        } else {
                                            i20 = MessagesController.DIALOG_FILTER_FLAG_NON_CONTACTS;
                                        }
                                        if ((i20 & i4) != 0 && (((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED & i4) == 0 || longSparseArray25.indexOfKey(tLRPC$User5.id) < 0) && ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i4) == 0 || longSparseArray24.indexOfKey(tLRPC$User5.id) < 0))) {
                                            i5 += intValue;
                                        }
                                        i55++;
                                        size7 = i19;
                                    }
                                    i19 = size7;
                                    i55++;
                                    size7 = i19;
                                }
                            } else {
                                i17 = size7;
                                TLRPC$Chat tLRPC$Chat3 = (TLRPC$Chat) longSparseArray28.get(-longValue2);
                                if (tLRPC$Chat3 != null) {
                                    if (ChatObject.isChannel(tLRPC$Chat3) && !tLRPC$Chat3.megagroup) {
                                        i18 = MessagesController.DIALOG_FILTER_FLAG_CHANNELS;
                                    } else {
                                        i18 = MessagesController.DIALOG_FILTER_FLAG_GROUPS;
                                    }
                                    if ((i18 & i4) != 0 && (((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED & i4) == 0 || longSparseArray25.indexOfKey(-tLRPC$Chat3.id) < 0) && ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i4) == 0 || longSparseArray24.indexOfKey(-tLRPC$Chat3.id) < 0 || this.dialogsWithMentions.indexOfKey(-tLRPC$Chat3.id) >= 0))) {
                                        i5++;
                                    }
                                }
                                i54++;
                                size7 = i17;
                                longSparseIntArray6 = longSparseIntArray2;
                            }
                        }
                        i17 = size7;
                        i54++;
                        size7 = i17;
                        longSparseIntArray6 = longSparseIntArray2;
                    }
                } else {
                    i6 = size5;
                    longSparseArray5 = longSparseArray22;
                    longSparseArray6 = longSparseArray27;
                    longSparseArray = longSparseArray29;
                    i7 = i44;
                    longSparseArray2 = longSparseArray23;
                }
                if (i5 < 0) {
                    longSparseIntArray3 = longSparseIntArray2;
                    longSparseArray27 = longSparseArray6;
                    longSparseArray22 = longSparseArray5;
                    i8 = 0;
                } else {
                    i8 = i5;
                    longSparseArray27 = longSparseArray6;
                    longSparseArray22 = longSparseArray5;
                    longSparseIntArray3 = longSparseIntArray2;
                }
            } else {
                i6 = size5;
                LongSparseArray longSparseArray31 = longSparseArray22;
                LongSparseArray longSparseArray32 = longSparseArray27;
                longSparseArray = longSparseArray29;
                i7 = i44;
                longSparseArray2 = longSparseArray23;
                if ((MessagesController.DIALOG_FILTER_FLAG_CONTACTS & i4) != 0) {
                    if ((MessagesController.DIALOG_FILTER_FLAG_ONLY_ARCHIVED & i4) == 0) {
                        int[][] iArr25 = this.contacts;
                        c7 = 0;
                        i5 += iArr25[0][0];
                        if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i4) == 0) {
                            c8 = 1;
                            i5 += iArr25[0][1];
                            if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED & i4) == 0) {
                                int[][] iArr26 = this.contacts;
                                i5 += iArr26[c8][c7];
                                if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i4) == 0) {
                                    i5 += iArr26[c8][c8];
                                }
                            }
                        }
                    } else {
                        c7 = 0;
                    }
                    c8 = 1;
                    if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED & i4) == 0) {
                    }
                }
                if ((MessagesController.DIALOG_FILTER_FLAG_NON_CONTACTS & i4) != 0) {
                    if ((MessagesController.DIALOG_FILTER_FLAG_ONLY_ARCHIVED & i4) == 0) {
                        int[][] iArr27 = this.nonContacts;
                        c5 = 0;
                        i5 += iArr27[0][0];
                        if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i4) == 0) {
                            c6 = 1;
                            i5 += iArr27[0][1];
                            if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED & i4) == 0) {
                                int[][] iArr28 = this.nonContacts;
                                i5 += iArr28[c6][c5];
                                if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i4) == 0) {
                                    i5 += iArr28[c6][c6];
                                }
                            }
                        }
                    } else {
                        c5 = 0;
                    }
                    c6 = 1;
                    if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED & i4) == 0) {
                    }
                }
                if ((MessagesController.DIALOG_FILTER_FLAG_GROUPS & i4) != 0) {
                    if ((MessagesController.DIALOG_FILTER_FLAG_ONLY_ARCHIVED & i4) == 0) {
                        int[][] iArr29 = this.groups;
                        c4 = 0;
                        int i56 = i5 + iArr29[0][0];
                        if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i4) == 0) {
                            i14 = iArr29[0][1];
                        } else {
                            i14 = this.mentionGroups[0];
                        }
                        i5 = i56 + i14;
                    } else {
                        c4 = 0;
                    }
                    if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED & i4) == 0) {
                        int[][] iArr30 = this.groups;
                        int i57 = i5 + iArr30[1][c4];
                        if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i4) == 0) {
                            i13 = iArr30[1][1];
                        } else {
                            i13 = this.mentionGroups[1];
                        }
                        i5 = i57 + i13;
                    }
                }
                if ((MessagesController.DIALOG_FILTER_FLAG_CHANNELS & i4) != 0) {
                    if ((MessagesController.DIALOG_FILTER_FLAG_ONLY_ARCHIVED & i4) == 0) {
                        int[][] iArr31 = this.channels;
                        c3 = 0;
                        int i58 = i5 + iArr31[0][0];
                        if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i4) == 0) {
                            i12 = iArr31[0][1];
                        } else {
                            i12 = this.mentionChannels[0];
                        }
                        i5 = i58 + i12;
                    } else {
                        c3 = 0;
                    }
                    if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED & i4) == 0) {
                        int[][] iArr32 = this.channels;
                        int i59 = i5 + iArr32[1][c3];
                        if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i4) == 0) {
                            i11 = iArr32[1][1];
                        } else {
                            i11 = this.mentionChannels[1];
                        }
                        i5 = i59 + i11;
                    }
                }
                if ((MessagesController.DIALOG_FILTER_FLAG_BOTS & i4) != 0) {
                    if ((MessagesController.DIALOG_FILTER_FLAG_ONLY_ARCHIVED & i4) == 0) {
                        int[][] iArr33 = this.bots;
                        c = 0;
                        i5 += iArr33[0][0];
                        if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i4) == 0) {
                            c2 = 1;
                            i5 += iArr33[0][1];
                            if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED & i4) == 0) {
                                int[][] iArr34 = this.bots;
                                i5 += iArr34[c2][c];
                                if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i4) == 0) {
                                    i5 += iArr34[c2][c2];
                                }
                            }
                        }
                    } else {
                        c = 0;
                    }
                    c2 = 1;
                    if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED & i4) == 0) {
                    }
                }
                i8 = i5;
                if (dialogFilter != null) {
                    if (dialogFilter.alwaysShow.isEmpty()) {
                        longSparseIntArray3 = longSparseIntArray2;
                        longSparseArray22 = longSparseArray31;
                    } else {
                        if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i4) != 0) {
                            int size8 = longSparseIntArray2.size();
                            while (i10 < size8) {
                                long keyAt2 = longSparseIntArray2.keyAt(i10);
                                TLRPC$Chat tLRPC$Chat4 = (TLRPC$Chat) longSparseArray28.get(-keyAt2);
                                if (ChatObject.isChannel(tLRPC$Chat4) && !tLRPC$Chat4.megagroup) {
                                    if ((MessagesController.DIALOG_FILTER_FLAG_CHANNELS & i4) == 0) {
                                    }
                                    if (longSparseArray24.indexOfKey(keyAt2) >= 0) {
                                        i8--;
                                    }
                                } else {
                                    i10 = (MessagesController.DIALOG_FILTER_FLAG_GROUPS & i4) == 0 ? i10 + 1 : 0;
                                    if (longSparseArray24.indexOfKey(keyAt2) >= 0 && dialogFilter.alwaysShow.contains(Long.valueOf(keyAt2))) {
                                        i8--;
                                    }
                                }
                            }
                        }
                        longSparseIntArray3 = longSparseIntArray2;
                        int size9 = dialogFilter.alwaysShow.size();
                        int i60 = i8;
                        int i61 = 0;
                        while (i61 < size9) {
                            long longValue3 = dialogFilter.alwaysShow.get(i61).longValue();
                            LongSparseArray longSparseArray33 = longSparseArray;
                            if (longSparseArray33.indexOfKey(longValue3) < 0) {
                                i9 = size9;
                                longSparseArray = longSparseArray33;
                                longSparseArray4 = longSparseArray31;
                            } else if (DialogObject.isUserDialog(longValue3)) {
                                LongSparseArray longSparseArray34 = longSparseArray32;
                                TLRPC$User tLRPC$User6 = (TLRPC$User) longSparseArray34.get(longValue3);
                                if (tLRPC$User6 != null) {
                                    longSparseArray = longSparseArray33;
                                    longSparseArray32 = longSparseArray34;
                                    if (((i4 & MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED) != 0 && longSparseArray24.indexOfKey(tLRPC$User6.id) >= 0) || (!tLRPC$User6.bot ? !(tLRPC$User6.self || tLRPC$User6.contact ? (MessagesController.DIALOG_FILTER_FLAG_CONTACTS & i4) != 0 : (MessagesController.DIALOG_FILTER_FLAG_NON_CONTACTS & i4) != 0) : (MessagesController.DIALOG_FILTER_FLAG_BOTS & i4) == 0)) {
                                        i60++;
                                    }
                                } else {
                                    longSparseArray = longSparseArray33;
                                    longSparseArray32 = longSparseArray34;
                                }
                                longSparseArray4 = longSparseArray31;
                                TLRPC$User tLRPC$User7 = (TLRPC$User) longSparseArray4.get(longValue3);
                                i9 = size9;
                                if (tLRPC$User7 != null) {
                                    int intValue6 = ((Integer) longSparseArray2.get(longValue3, 0)).intValue();
                                    if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i4) == 0 || longSparseArray24.indexOfKey(tLRPC$User7.id) < 0) {
                                        if (tLRPC$User7.bot) {
                                            if ((MessagesController.DIALOG_FILTER_FLAG_BOTS & i4) != 0) {
                                            }
                                        } else if (tLRPC$User7.self || tLRPC$User7.contact) {
                                            if ((MessagesController.DIALOG_FILTER_FLAG_CONTACTS & i4) != 0) {
                                            }
                                        } else if ((MessagesController.DIALOG_FILTER_FLAG_NON_CONTACTS & i4) != 0) {
                                        }
                                    }
                                    i60 += intValue6;
                                }
                            } else {
                                i9 = size9;
                                longSparseArray = longSparseArray33;
                                longSparseArray4 = longSparseArray31;
                                TLRPC$Chat tLRPC$Chat5 = (TLRPC$Chat) longSparseArray28.get(-longValue3);
                                if (tLRPC$Chat5 != null) {
                                    if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i4) == 0 || longSparseArray24.indexOfKey(-tLRPC$Chat5.id) < 0) {
                                        if (ChatObject.isChannel(tLRPC$Chat5) && !tLRPC$Chat5.megagroup) {
                                            if ((MessagesController.DIALOG_FILTER_FLAG_CHANNELS & i4) != 0) {
                                            }
                                        } else if ((MessagesController.DIALOG_FILTER_FLAG_GROUPS & i4) != 0) {
                                        }
                                    }
                                    i60++;
                                }
                            }
                            i61++;
                            size9 = i9;
                            longSparseArray31 = longSparseArray4;
                        }
                        longSparseArray22 = longSparseArray31;
                        i8 = i60;
                    }
                    int size10 = dialogFilter.neverShow.size();
                    int i62 = i8;
                    int i63 = 0;
                    while (i63 < size10) {
                        long longValue4 = dialogFilter.neverShow.get(i63).longValue();
                        if (DialogObject.isUserDialog(longValue4)) {
                            longSparseArray3 = longSparseArray32;
                            if (((TLRPC$User) longSparseArray3.get(longValue4)) != null) {
                                i62--;
                            }
                            if (((TLRPC$User) longSparseArray22.get(longValue4)) != null) {
                                i62 -= ((Integer) longSparseArray2.get(longValue4, 0)).intValue();
                            }
                        } else {
                            longSparseArray3 = longSparseArray32;
                            if (((TLRPC$Chat) longSparseArray28.get(-longValue4)) != null) {
                                i62--;
                            }
                        }
                        i63++;
                        longSparseArray32 = longSparseArray3;
                    }
                    longSparseArray27 = longSparseArray32;
                    i8 = i62;
                } else {
                    longSparseIntArray3 = longSparseIntArray2;
                    longSparseArray27 = longSparseArray32;
                    longSparseArray22 = longSparseArray31;
                }
            }
            if (dialogFilter != null) {
                dialogFilter.pendingUnreadCount = i8;
                i15 = i6;
                i16 = i7;
            } else {
                i15 = i6;
                i16 = i7;
                if (i16 == i15) {
                    this.pendingMainUnreadCount = i8;
                } else if (i16 == i15 + 1) {
                    this.pendingArchiveUnreadCount = i8;
                }
            }
            i44 = i16 + 1;
            size5 = i15;
            longSparseIntArray6 = longSparseIntArray3;
            longSparseArray23 = longSparseArray2;
            longSparseArray29 = longSparseArray;
        }
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda16
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$updateFiltersReadCounter$97();
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateFiltersReadCounter$97() {
        ArrayList<MessagesController.DialogFilter> arrayList = getMessagesController().dialogFilters;
        int size = arrayList.size();
        for (int i = 0; i < size; i++) {
            arrayList.get(i).unreadCount = arrayList.get(i).pendingUnreadCount;
        }
        this.mainUnreadCount = this.pendingMainUnreadCount;
        this.archiveUnreadCount = this.pendingArchiveUnreadCount;
    }

    /* JADX WARN: Removed duplicated region for block: B:133:0x03a0 A[Catch: Exception -> 0x03a8, TRY_LEAVE, TryCatch #0 {Exception -> 0x03a8, blocks: (B:3:0x0008, B:7:0x0024, B:8:0x003c, B:10:0x0042, B:13:0x0049, B:16:0x0050, B:18:0x005a, B:19:0x005e, B:20:0x0064, B:93:0x02b3, B:95:0x02b9, B:131:0x0390, B:133:0x03a0, B:99:0x02c3, B:101:0x02ce, B:102:0x02dc, B:104:0x02e2, B:106:0x02ec, B:116:0x0340, B:107:0x02f4, B:109:0x0318, B:111:0x031e, B:113:0x0323, B:115:0x032a, B:117:0x0342, B:119:0x034b, B:121:0x0351, B:122:0x035a, B:124:0x0360, B:126:0x036a, B:128:0x0384, B:127:0x0372, B:129:0x0386, B:130:0x0389, B:21:0x0069, B:24:0x0070, B:26:0x0076, B:31:0x008b, B:33:0x0092, B:55:0x015f, B:36:0x00af, B:37:0x00d1, B:40:0x00d9, B:43:0x00e0, B:45:0x0108, B:47:0x0113, B:51:0x0143, B:48:0x012b, B:50:0x012f, B:52:0x0147, B:54:0x014b, B:29:0x0083, B:56:0x019e, B:58:0x01a4, B:60:0x01ab, B:61:0x01d4, B:63:0x01da, B:65:0x01f2, B:67:0x01f8, B:69:0x01ff, B:71:0x0206, B:73:0x0228, B:75:0x022f, B:78:0x024c, B:76:0x023d, B:79:0x0256, B:83:0x0267, B:85:0x0271, B:86:0x0278, B:87:0x027e, B:90:0x0285, B:92:0x028b), top: B:138:0x0008 }] */
    /* JADX WARN: Removed duplicated region for block: B:175:? A[RETURN, SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void updateDialogsWithReadMessagesInternal(ArrayList<Integer> arrayList, LongSparseIntArray longSparseIntArray, LongSparseIntArray longSparseIntArray2, LongSparseArray<ArrayList<Integer>> longSparseArray, LongSparseIntArray longSparseIntArray3) {
        int i;
        boolean z;
        int i2;
        int i3;
        LongSparseIntArray longSparseIntArray4 = longSparseIntArray;
        LongSparseIntArray longSparseIntArray5 = longSparseIntArray3;
        try {
            LongSparseIntArray longSparseIntArray6 = new LongSparseIntArray();
            LongSparseIntArray longSparseIntArray7 = new LongSparseIntArray();
            ArrayList<Long> arrayList2 = new ArrayList<>();
            int i4 = 2;
            if (!isEmpty(arrayList)) {
                SQLiteCursor queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT uid, read_state, out FROM messages_v2 WHERE mid IN(%s) AND is_channel = 0", TextUtils.join(",", arrayList)), new Object[0]);
                while (queryFinalized.next()) {
                    if (queryFinalized.intValue(2) == 0 && queryFinalized.intValue(1) == 0) {
                        long longValue = queryFinalized.longValue(0);
                        int i5 = longSparseIntArray6.get(longValue);
                        if (i5 == 0) {
                            longSparseIntArray6.put(longValue, 1);
                        } else {
                            longSparseIntArray6.put(longValue, i5 + 1);
                        }
                    }
                }
                queryFinalized.dispose();
            } else {
                if (!isEmpty(longSparseIntArray)) {
                    int i6 = 0;
                    while (i6 < longSparseIntArray.size()) {
                        long keyAt = longSparseIntArray4.keyAt(i6);
                        int i7 = longSparseIntArray4.get(keyAt);
                        int i8 = longSparseIntArray5 == null ? -2 : longSparseIntArray5.get(keyAt, -2);
                        if (i8 >= 0) {
                            longSparseIntArray6.put(keyAt, i8);
                            if (BuildVars.DEBUG_VERSION) {
                                FileLog.d(keyAt + " update unread messages count by still unread " + i8);
                            }
                        } else {
                            if (longSparseIntArray5 == null || i8 == -2) {
                                z = true;
                            } else {
                                SQLiteDatabase sQLiteDatabase = this.database;
                                Locale locale = Locale.US;
                                Object[] objArr = new Object[i4];
                                objArr[0] = Long.valueOf(keyAt);
                                objArr[1] = Integer.valueOf(i7);
                                SQLiteCursor queryFinalized2 = sQLiteDatabase.queryFinalized(String.format(locale, "SELECT start, end FROM messages_holes WHERE uid = %d AND end > %d", objArr), new Object[0]);
                                z = true;
                                while (queryFinalized2.next()) {
                                    z = false;
                                }
                                queryFinalized2.dispose();
                            }
                            if (z) {
                                SQLiteCursor queryFinalized3 = this.database.queryFinalized(String.format(Locale.US, "SELECT COUNT(mid) FROM messages_v2 WHERE uid = %d AND mid > %d AND read_state IN(0,2) AND out = 0", Long.valueOf(keyAt), Integer.valueOf(i7)), new Object[0]);
                                if (queryFinalized3.next()) {
                                    int intValue = queryFinalized3.intValue(0);
                                    longSparseIntArray6.put(keyAt, intValue);
                                    if (BuildVars.DEBUG_VERSION) {
                                        FileLog.d(keyAt + " update unread messages count " + intValue);
                                    }
                                } else if (BuildVars.DEBUG_VERSION) {
                                    FileLog.d(keyAt + " can't update unread messages count cursor trouble");
                                }
                                queryFinalized3.dispose();
                            } else if (BuildVars.DEBUG_VERSION) {
                                FileLog.d(keyAt + " can't update unread messages count");
                            }
                        }
                        FileLog.d(keyAt + " set inbox max " + i7);
                        SQLitePreparedStatement executeFast = this.database.executeFast("UPDATE dialogs SET inbox_max = max((SELECT inbox_max FROM dialogs WHERE did = ?), ?) WHERE did = ?");
                        executeFast.requery();
                        executeFast.bindLong(1, keyAt);
                        executeFast.bindInteger(2, i7);
                        executeFast.bindLong(3, keyAt);
                        executeFast.step();
                        executeFast.dispose();
                        i6++;
                        longSparseIntArray4 = longSparseIntArray;
                        longSparseIntArray5 = longSparseIntArray3;
                        i4 = 2;
                    }
                }
                if (!isEmpty(longSparseArray)) {
                    int size = longSparseArray.size();
                    int i9 = 0;
                    while (i9 < size) {
                        ArrayList<Integer> valueAt = longSparseArray.valueAt(i9);
                        ArrayList arrayList3 = new ArrayList(valueAt);
                        int i10 = 0;
                        SQLiteCursor queryFinalized4 = this.database.queryFinalized(String.format(Locale.US, "SELECT uid, read_state, out, mention, mid, is_channel FROM messages_v2 WHERE mid IN(%s)", TextUtils.join(",", valueAt)), new Object[0]);
                        long j = 0;
                        while (queryFinalized4.next()) {
                            long longValue2 = queryFinalized4.longValue(i10);
                            arrayList3.remove(Integer.valueOf(queryFinalized4.intValue(4)));
                            if (queryFinalized4.intValue(1) < 2 && queryFinalized4.intValue(2) == 0 && queryFinalized4.intValue(3) == 1) {
                                int i11 = longSparseIntArray7.get(longValue2, -1);
                                if (i11 < 0) {
                                    i = size;
                                    SQLiteCursor queryFinalized5 = this.database.queryFinalized("SELECT unread_count_i FROM dialogs WHERE did = " + longValue2, new Object[0]);
                                    int intValue2 = queryFinalized5.next() ? queryFinalized5.intValue(0) : 0;
                                    queryFinalized5.dispose();
                                    longSparseIntArray7.put(longValue2, Math.max(0, intValue2 - 1));
                                } else {
                                    i = size;
                                    longSparseIntArray7.put(longValue2, Math.max(0, i11 - 1));
                                }
                            } else {
                                i = size;
                            }
                            j = queryFinalized4.longValue(5);
                            size = i;
                            i10 = 0;
                        }
                        int i12 = size;
                        queryFinalized4.dispose();
                        if (!arrayList3.isEmpty() && j != 0 && !arrayList2.contains(Long.valueOf(j))) {
                            arrayList2.add(Long.valueOf(j));
                        }
                        i9++;
                        size = i12;
                    }
                }
                if (!isEmpty(longSparseIntArray2)) {
                    for (int i13 = 0; i13 < longSparseIntArray2.size(); i13++) {
                        long keyAt2 = longSparseIntArray2.keyAt(i13);
                        int i14 = longSparseIntArray2.get(keyAt2);
                        SQLitePreparedStatement executeFast2 = this.database.executeFast("UPDATE dialogs SET outbox_max = max((SELECT outbox_max FROM dialogs WHERE did = ?), ?) WHERE did = ?");
                        executeFast2.requery();
                        executeFast2.bindLong(1, keyAt2);
                        executeFast2.bindInteger(2, i14);
                        executeFast2.bindLong(3, keyAt2);
                        executeFast2.step();
                        executeFast2.dispose();
                    }
                }
            }
            if (longSparseIntArray6.size() <= 0) {
                if (longSparseIntArray7.size() > 0) {
                }
                updateFiltersReadCounter(longSparseIntArray6, longSparseIntArray7, true);
                getMessagesController().processDialogsUpdateRead(longSparseIntArray6, longSparseIntArray7);
                if (arrayList2.isEmpty()) {
                    getMessagesController().reloadMentionsCountForChannels(arrayList2);
                    return;
                }
                return;
            }
            this.database.beginTransaction();
            if (longSparseIntArray6.size() > 0) {
                ArrayList<Long> arrayList4 = new ArrayList<>();
                SQLitePreparedStatement executeFast3 = this.database.executeFast("UPDATE dialogs SET unread_count = ? WHERE did = ?");
                int i15 = 0;
                while (i15 < longSparseIntArray6.size()) {
                    long keyAt3 = longSparseIntArray6.keyAt(i15);
                    if (isForum(keyAt3)) {
                        longSparseIntArray6.removeAt(i15);
                        i15--;
                        i3 = 1;
                    } else {
                        int valueAt2 = longSparseIntArray6.valueAt(i15);
                        SQLiteCursor queryFinalized6 = this.database.queryFinalized("SELECT unread_count FROM dialogs WHERE did = " + keyAt3, new Object[0]);
                        int intValue3 = queryFinalized6.next() ? queryFinalized6.intValue(0) : 0;
                        queryFinalized6.dispose();
                        if (intValue3 == valueAt2) {
                            longSparseIntArray6.removeAt(i15);
                            i15--;
                        } else {
                            executeFast3.requery();
                            executeFast3.bindInteger(1, valueAt2);
                            executeFast3.bindLong(2, keyAt3);
                            executeFast3.step();
                            arrayList4.add(Long.valueOf(keyAt3));
                        }
                        i3 = 1;
                    }
                    i15 += i3;
                }
                executeFast3.dispose();
                updateWidgets(arrayList4);
            }
            if (longSparseIntArray7.size() > 0) {
                SQLitePreparedStatement executeFast4 = this.database.executeFast("UPDATE dialogs SET unread_count_i = ? WHERE did = ?");
                int i16 = 0;
                while (i16 < longSparseIntArray7.size()) {
                    long keyAt4 = longSparseIntArray7.keyAt(i16);
                    if (isForum(keyAt4)) {
                        longSparseIntArray7.removeAt(i16);
                        i16--;
                        i2 = 1;
                    } else {
                        executeFast4.requery();
                        i2 = 1;
                        executeFast4.bindInteger(1, longSparseIntArray7.valueAt(i16));
                        executeFast4.bindLong(2, keyAt4);
                        executeFast4.step();
                    }
                    i16 += i2;
                }
                executeFast4.dispose();
            }
            this.database.commitTransaction();
            updateFiltersReadCounter(longSparseIntArray6, longSparseIntArray7, true);
            getMessagesController().processDialogsUpdateRead(longSparseIntArray6, longSparseIntArray7);
            if (arrayList2.isEmpty()) {
            }
        } catch (Exception e) {
            checkSQLException(e);
        }
    }

    private static boolean isEmpty(SparseArray<?> sparseArray) {
        return sparseArray == null || sparseArray.size() == 0;
    }

    private static boolean isEmpty(LongSparseIntArray longSparseIntArray) {
        return longSparseIntArray == null || longSparseIntArray.size() == 0;
    }

    private static boolean isEmpty(List<?> list) {
        return list == null || list.isEmpty();
    }

    private static boolean isEmpty(SparseIntArray sparseIntArray) {
        return sparseIntArray == null || sparseIntArray.size() == 0;
    }

    private static boolean isEmpty(LongSparseArray<?> longSparseArray) {
        return longSparseArray == null || longSparseArray.size() == 0;
    }

    public void updateDialogsWithReadMessages(final LongSparseIntArray longSparseIntArray, final LongSparseIntArray longSparseIntArray2, final LongSparseArray<ArrayList<Integer>> longSparseArray, final LongSparseIntArray longSparseIntArray3, boolean z) {
        if (isEmpty(longSparseIntArray) && isEmpty(longSparseIntArray2) && isEmpty(longSparseArray) && isEmpty(longSparseIntArray3)) {
            return;
        }
        if (z) {
            this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda169
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesStorage.this.lambda$updateDialogsWithReadMessages$98(longSparseIntArray, longSparseIntArray2, longSparseArray, longSparseIntArray3);
                }
            });
        } else {
            updateDialogsWithReadMessagesInternal(null, longSparseIntArray, longSparseIntArray2, longSparseArray, longSparseIntArray3);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateDialogsWithReadMessages$98(LongSparseIntArray longSparseIntArray, LongSparseIntArray longSparseIntArray2, LongSparseArray longSparseArray, LongSparseIntArray longSparseIntArray3) {
        updateDialogsWithReadMessagesInternal(null, longSparseIntArray, longSparseIntArray2, longSparseArray, longSparseIntArray3);
    }

    public void updateChatParticipants(final TLRPC$ChatParticipants tLRPC$ChatParticipants) {
        if (tLRPC$ChatParticipants == null) {
            return;
        }
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda175
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$updateChatParticipants$100(tLRPC$ChatParticipants);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateChatParticipants$100(TLRPC$ChatParticipants tLRPC$ChatParticipants) {
        SQLiteCursor queryFinalized;
        final TLRPC$ChatFull tLRPC$ChatFull;
        NativeByteBuffer byteBufferValue;
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                queryFinalized = this.database.queryFinalized("SELECT info, pinned, online, inviter FROM chat_settings_v2 WHERE uid = " + tLRPC$ChatParticipants.chat_id, new Object[0]);
            } catch (Throwable th) {
                th = th;
            }
        } catch (Exception e) {
            e = e;
        }
        try {
            new ArrayList();
            if (!queryFinalized.next() || (byteBufferValue = queryFinalized.byteBufferValue(0)) == null) {
                tLRPC$ChatFull = null;
            } else {
                tLRPC$ChatFull = TLRPC$ChatFull.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                byteBufferValue.reuse();
                tLRPC$ChatFull.pinned_msg_id = queryFinalized.intValue(1);
                tLRPC$ChatFull.online_count = queryFinalized.intValue(2);
                tLRPC$ChatFull.inviterId = queryFinalized.longValue(3);
            }
            queryFinalized.dispose();
            if (tLRPC$ChatFull instanceof TLRPC$TL_chatFull) {
                tLRPC$ChatFull.participants = tLRPC$ChatParticipants;
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda173
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesStorage.this.lambda$updateChatParticipants$99(tLRPC$ChatFull);
                    }
                });
                SQLitePreparedStatement executeFast = this.database.executeFast("REPLACE INTO chat_settings_v2 VALUES(?, ?, ?, ?, ?, ?)");
                NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(tLRPC$ChatFull.getObjectSize());
                tLRPC$ChatFull.serializeToStream(nativeByteBuffer);
                executeFast.bindLong(1, tLRPC$ChatFull.id);
                executeFast.bindByteBuffer(2, nativeByteBuffer);
                executeFast.bindInteger(3, tLRPC$ChatFull.pinned_msg_id);
                executeFast.bindInteger(4, tLRPC$ChatFull.online_count);
                executeFast.bindLong(5, tLRPC$ChatFull.inviterId);
                executeFast.bindInteger(6, tLRPC$ChatFull.invitesCount);
                executeFast.step();
                executeFast.dispose();
                nativeByteBuffer.reuse();
            }
        } catch (Exception e2) {
            e = e2;
            sQLiteCursor = queryFinalized;
            checkSQLException(e);
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
        } catch (Throwable th2) {
            th = th2;
            sQLiteCursor = queryFinalized;
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
            throw th;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateChatParticipants$99(TLRPC$ChatFull tLRPC$ChatFull) {
        NotificationCenter notificationCenter = getNotificationCenter();
        int i = NotificationCenter.chatInfoDidLoad;
        Boolean bool = Boolean.FALSE;
        notificationCenter.postNotificationName(i, tLRPC$ChatFull, 0, bool, bool);
    }

    public void loadChannelAdmins(final long j) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda70
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$loadChannelAdmins$101(j);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadChannelAdmins$101(long j) {
        SQLiteCursor queryFinalized;
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                SQLiteDatabase sQLiteDatabase = this.database;
                queryFinalized = sQLiteDatabase.queryFinalized("SELECT uid, data FROM channel_admins_v3 WHERE did = " + j, new Object[0]);
            } catch (Throwable th) {
                th = th;
            }
        } catch (Exception e) {
            e = e;
        }
        try {
            LongSparseArray<TLRPC$ChannelParticipant> longSparseArray = new LongSparseArray<>();
            while (queryFinalized.next()) {
                NativeByteBuffer byteBufferValue = queryFinalized.byteBufferValue(1);
                if (byteBufferValue != null) {
                    TLRPC$ChannelParticipant TLdeserialize = TLRPC$ChannelParticipant.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                    byteBufferValue.reuse();
                    if (TLdeserialize != null) {
                        longSparseArray.put(queryFinalized.longValue(0), TLdeserialize);
                    }
                }
            }
            queryFinalized.dispose();
            getMessagesController().processLoadedChannelAdmins(longSparseArray, j, true);
        } catch (Exception e2) {
            e = e2;
            sQLiteCursor = queryFinalized;
            checkSQLException(e);
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
        } catch (Throwable th2) {
            th = th2;
            sQLiteCursor = queryFinalized;
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
            throw th;
        }
    }

    public void putChannelAdmins(final long j, final LongSparseArray<TLRPC$ChannelParticipant> longSparseArray) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda100
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$putChannelAdmins$102(j, longSparseArray);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$putChannelAdmins$102(long j, LongSparseArray longSparseArray) {
        SQLitePreparedStatement sQLitePreparedStatement = null;
        try {
            try {
                SQLiteDatabase sQLiteDatabase = this.database;
                sQLiteDatabase.executeFast("DELETE FROM channel_admins_v3 WHERE did = " + j).stepThis().dispose();
                this.database.beginTransaction();
                SQLitePreparedStatement executeFast = this.database.executeFast("REPLACE INTO channel_admins_v3 VALUES(?, ?, ?)");
                for (int i = 0; i < longSparseArray.size(); i++) {
                    try {
                        executeFast.requery();
                        executeFast.bindLong(1, j);
                        executeFast.bindLong(2, longSparseArray.keyAt(i));
                        TLRPC$ChannelParticipant tLRPC$ChannelParticipant = (TLRPC$ChannelParticipant) longSparseArray.valueAt(i);
                        NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(tLRPC$ChannelParticipant.getObjectSize());
                        tLRPC$ChannelParticipant.serializeToStream(nativeByteBuffer);
                        executeFast.bindByteBuffer(3, nativeByteBuffer);
                        executeFast.step();
                        nativeByteBuffer.reuse();
                    } catch (Exception e) {
                        e = e;
                        sQLitePreparedStatement = executeFast;
                        checkSQLException(e);
                        SQLiteDatabase sQLiteDatabase2 = this.database;
                        if (sQLiteDatabase2 != null) {
                            sQLiteDatabase2.commitTransaction();
                        }
                        if (sQLitePreparedStatement != null) {
                            sQLitePreparedStatement.dispose();
                            return;
                        }
                        return;
                    } catch (Throwable th) {
                        th = th;
                        sQLitePreparedStatement = executeFast;
                        SQLiteDatabase sQLiteDatabase3 = this.database;
                        if (sQLiteDatabase3 != null) {
                            sQLiteDatabase3.commitTransaction();
                        }
                        if (sQLitePreparedStatement != null) {
                            sQLitePreparedStatement.dispose();
                        }
                        throw th;
                    }
                }
                executeFast.dispose();
                this.database.commitTransaction();
                SQLiteDatabase sQLiteDatabase4 = this.database;
                if (sQLiteDatabase4 != null) {
                    sQLiteDatabase4.commitTransaction();
                }
            } catch (Exception e2) {
                e = e2;
            }
        } catch (Throwable th2) {
            th = th2;
        }
    }

    public void updateChannelUsers(final long j, final ArrayList<TLRPC$ChannelParticipant> arrayList) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda102
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$updateChannelUsers$103(j, arrayList);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateChannelUsers$103(long j, ArrayList arrayList) {
        SQLitePreparedStatement executeFast;
        long j2 = -j;
        SQLitePreparedStatement sQLitePreparedStatement = null;
        try {
            try {
                this.database.executeFast("DELETE FROM channel_users_v2 WHERE did = " + j2).stepThis().dispose();
                this.database.beginTransaction();
                executeFast = this.database.executeFast("REPLACE INTO channel_users_v2 VALUES(?, ?, ?, ?)");
            } catch (Throwable th) {
                th = th;
            }
        } catch (Exception e) {
            e = e;
        }
        try {
            int currentTimeMillis = (int) (System.currentTimeMillis() / 1000);
            for (int i = 0; i < arrayList.size(); i++) {
                TLRPC$ChannelParticipant tLRPC$ChannelParticipant = (TLRPC$ChannelParticipant) arrayList.get(i);
                executeFast.requery();
                executeFast.bindLong(1, j2);
                executeFast.bindLong(2, MessageObject.getPeerId(tLRPC$ChannelParticipant.peer));
                executeFast.bindInteger(3, currentTimeMillis);
                NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(tLRPC$ChannelParticipant.getObjectSize());
                tLRPC$ChannelParticipant.serializeToStream(nativeByteBuffer);
                executeFast.bindByteBuffer(4, nativeByteBuffer);
                executeFast.step();
                nativeByteBuffer.reuse();
                currentTimeMillis--;
            }
            executeFast.dispose();
            this.database.commitTransaction();
            loadChatInfo(j, true, null, false, true);
            SQLiteDatabase sQLiteDatabase = this.database;
            if (sQLiteDatabase != null) {
                sQLiteDatabase.commitTransaction();
            }
        } catch (Exception e2) {
            e = e2;
            sQLitePreparedStatement = executeFast;
            checkSQLException(e);
            SQLiteDatabase sQLiteDatabase2 = this.database;
            if (sQLiteDatabase2 != null) {
                sQLiteDatabase2.commitTransaction();
            }
            if (sQLitePreparedStatement != null) {
                sQLitePreparedStatement.dispose();
            }
        } catch (Throwable th2) {
            th = th2;
            sQLitePreparedStatement = executeFast;
            SQLiteDatabase sQLiteDatabase3 = this.database;
            if (sQLiteDatabase3 != null) {
                sQLiteDatabase3.commitTransaction();
            }
            if (sQLitePreparedStatement != null) {
                sQLitePreparedStatement.dispose();
            }
            throw th;
        }
    }

    public void saveBotCache(final String str, final TLObject tLObject) {
        if (tLObject == null || TextUtils.isEmpty(str)) {
            return;
        }
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda170
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$saveBotCache$104(tLObject, str);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$saveBotCache$104(TLObject tLObject, String str) {
        int currentTime;
        int i;
        SQLitePreparedStatement executeFast;
        SQLitePreparedStatement sQLitePreparedStatement = null;
        try {
            try {
                currentTime = getConnectionsManager().getCurrentTime();
            } catch (Exception e) {
                e = e;
            }
        } catch (Throwable th) {
            th = th;
        }
        try {
            if (tLObject instanceof TLRPC$TL_messages_botCallbackAnswer) {
                i = ((TLRPC$TL_messages_botCallbackAnswer) tLObject).cache_time;
            } else {
                if (tLObject instanceof TLRPC$TL_messages_botResults) {
                    i = ((TLRPC$TL_messages_botResults) tLObject).cache_time;
                }
                executeFast = this.database.executeFast("REPLACE INTO botcache VALUES(?, ?, ?)");
                NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(tLObject.getObjectSize());
                tLObject.serializeToStream(nativeByteBuffer);
                executeFast.bindString(1, str);
                executeFast.bindInteger(2, currentTime);
                executeFast.bindByteBuffer(3, nativeByteBuffer);
                executeFast.step();
                executeFast.dispose();
                nativeByteBuffer.reuse();
                return;
            }
            NativeByteBuffer nativeByteBuffer2 = new NativeByteBuffer(tLObject.getObjectSize());
            tLObject.serializeToStream(nativeByteBuffer2);
            executeFast.bindString(1, str);
            executeFast.bindInteger(2, currentTime);
            executeFast.bindByteBuffer(3, nativeByteBuffer2);
            executeFast.step();
            executeFast.dispose();
            nativeByteBuffer2.reuse();
            return;
        } catch (Exception e2) {
            e = e2;
            sQLitePreparedStatement = executeFast;
            checkSQLException(e);
            if (sQLitePreparedStatement != null) {
                sQLitePreparedStatement.dispose();
                return;
            }
            return;
        } catch (Throwable th2) {
            th = th2;
            sQLitePreparedStatement = executeFast;
            if (sQLitePreparedStatement != null) {
                sQLitePreparedStatement.dispose();
            }
            throw th;
        }
        currentTime += i;
        executeFast = this.database.executeFast("REPLACE INTO botcache VALUES(?, ?, ?)");
    }

    public void getBotCache(final String str, final RequestDelegate requestDelegate) {
        if (str == null || requestDelegate == null) {
            return;
        }
        final int currentTime = getConnectionsManager().getCurrentTime();
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda56
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$getBotCache$105(currentTime, str, requestDelegate);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:40:0x007f  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$getBotCache$105(int i, String str, RequestDelegate requestDelegate) {
        SQLiteCursor sQLiteCursor;
        TLObject tLObject;
        NativeByteBuffer byteBufferValue;
        try {
            this.database.executeFast("DELETE FROM botcache WHERE date < " + i).stepThis().dispose();
            sQLiteCursor = this.database.queryFinalized("SELECT data FROM botcache WHERE id = ?", str);
            try {
                try {
                    if (sQLiteCursor.next()) {
                        try {
                            byteBufferValue = sQLiteCursor.byteBufferValue(0);
                        } catch (Exception e) {
                            e = e;
                            tLObject = null;
                        }
                        if (byteBufferValue != null) {
                            int readInt32 = byteBufferValue.readInt32(false);
                            if (readInt32 == TLRPC$TL_messages_botCallbackAnswer.constructor) {
                                tLObject = TLRPC$TL_messages_botCallbackAnswer.TLdeserialize(byteBufferValue, readInt32, false);
                            } else {
                                tLObject = TLRPC$messages_BotResults.TLdeserialize(byteBufferValue, readInt32, false);
                            }
                            try {
                                try {
                                    byteBufferValue.reuse();
                                } catch (Exception e2) {
                                    e = e2;
                                    try {
                                        checkSQLException(e);
                                        sQLiteCursor.dispose();
                                        requestDelegate.run(tLObject, null);
                                    } catch (Exception e3) {
                                        e = e3;
                                        checkSQLException(e);
                                        requestDelegate.run(tLObject, null);
                                        if (sQLiteCursor != null) {
                                            sQLiteCursor.dispose();
                                            return;
                                        }
                                        return;
                                    }
                                }
                                sQLiteCursor.dispose();
                                requestDelegate.run(tLObject, null);
                            } catch (Throwable th) {
                                th = th;
                                requestDelegate.run(tLObject, null);
                                if (sQLiteCursor != null) {
                                }
                                throw th;
                            }
                        }
                    }
                    tLObject = null;
                    sQLiteCursor.dispose();
                    requestDelegate.run(tLObject, null);
                } catch (Throwable th2) {
                    th = th2;
                    tLObject = null;
                    requestDelegate.run(tLObject, null);
                    if (sQLiteCursor != null) {
                        sQLiteCursor.dispose();
                    }
                    throw th;
                }
            } catch (Exception e4) {
                e = e4;
                tLObject = null;
            }
        } catch (Exception e5) {
            e = e5;
            sQLiteCursor = null;
            tLObject = null;
        } catch (Throwable th3) {
            th = th3;
            sQLiteCursor = null;
            tLObject = null;
        }
    }

    public ArrayList<TLRPC$UserFull> loadUserInfos(HashSet<Long> hashSet) {
        ArrayList<TLRPC$UserFull> arrayList = new ArrayList<>();
        try {
            String join = TextUtils.join(",", hashSet);
            SQLiteDatabase sQLiteDatabase = this.database;
            SQLiteCursor queryFinalized = sQLiteDatabase.queryFinalized("SELECT info, pinned FROM user_settings WHERE uid IN(" + join + ")", new Object[0]);
            while (queryFinalized.next()) {
                NativeByteBuffer byteBufferValue = queryFinalized.byteBufferValue(0);
                if (byteBufferValue != null) {
                    TLRPC$UserFull TLdeserialize = TLRPC$UserFull.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                    TLdeserialize.pinned_msg_id = queryFinalized.intValue(1);
                    arrayList.add(TLdeserialize);
                    byteBufferValue.reuse();
                }
            }
            queryFinalized.dispose();
        } catch (Exception e) {
            checkSQLException(e);
        }
        return arrayList;
    }

    public void loadUserInfo(final TLRPC$User tLRPC$User, final boolean z, final int i, int i2) {
        if (tLRPC$User == null) {
            return;
        }
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda191
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$loadUserInfo$106(tLRPC$User, z, i);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:112:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:84:0x018c  */
    /* JADX WARN: Removed duplicated region for block: B:89:0x01a1  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$loadUserInfo$106(TLRPC$User tLRPC$User, boolean z, int i) {
        TLRPC$UserFull tLRPC$UserFull;
        SQLiteCursor sQLiteCursor;
        int i2;
        boolean z2;
        TLRPC$UserFull tLRPC$UserFull2;
        SQLiteCursor sQLiteCursor2;
        SQLiteCursor sQLiteCursor3;
        int i3;
        boolean z3;
        ArrayList<MessageObject> loadPinnedMessages;
        NativeByteBuffer byteBufferValue;
        HashMap<Integer, MessageObject> hashMap = new HashMap<>();
        ArrayList<Integer> arrayList = new ArrayList<>();
        try {
            SQLiteCursor queryFinalized = this.database.queryFinalized("SELECT info, pinned FROM user_settings WHERE uid = " + tLRPC$User.id, new Object[0]);
            try {
                if (!queryFinalized.next() || (byteBufferValue = queryFinalized.byteBufferValue(0)) == null) {
                    tLRPC$UserFull2 = null;
                } else {
                    tLRPC$UserFull2 = TLRPC$UserFull.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                    try {
                        tLRPC$UserFull2.pinned_msg_id = queryFinalized.intValue(1);
                        byteBufferValue.reuse();
                    } catch (Exception e) {
                        e = e;
                        sQLiteCursor = sQLiteCursor3;
                        tLRPC$UserFull = tLRPC$UserFull2;
                        i2 = 0;
                        z2 = false;
                        try {
                            checkSQLException(e);
                            getMessagesController().processUserInfo(tLRPC$User, tLRPC$UserFull, true, z, i, arrayList, hashMap, i2, z2);
                            if (sQLiteCursor == null) {
                            }
                        } catch (Throwable th) {
                            th = th;
                            getMessagesController().processUserInfo(tLRPC$User, tLRPC$UserFull, true, z, i, arrayList, hashMap, i2, z2);
                            if (sQLiteCursor != null) {
                                sQLiteCursor.dispose();
                            }
                            throw th;
                        }
                    } catch (Throwable th2) {
                        th = th2;
                        sQLiteCursor = sQLiteCursor2;
                        tLRPC$UserFull = tLRPC$UserFull2;
                        i2 = 0;
                        z2 = false;
                        getMessagesController().processUserInfo(tLRPC$User, tLRPC$UserFull, true, z, i, arrayList, hashMap, i2, z2);
                        if (sQLiteCursor != null) {
                        }
                        throw th;
                    }
                }
                queryFinalized.dispose();
            } catch (Exception e2) {
                e = e2;
                tLRPC$UserFull = null;
                sQLiteCursor = queryFinalized;
            } catch (Throwable th3) {
                th = th3;
                tLRPC$UserFull = null;
                sQLiteCursor = queryFinalized;
            }
        } catch (Exception e3) {
            e = e3;
            tLRPC$UserFull = null;
            sQLiteCursor = null;
        } catch (Throwable th4) {
            th = th4;
            tLRPC$UserFull = null;
            sQLiteCursor = null;
        }
        try {
            SQLiteCursor queryFinalized2 = getMessagesStorage().getDatabase().queryFinalized(String.format(Locale.US, "SELECT mid FROM chat_pinned_v2 WHERE uid = %d ORDER BY mid DESC", Long.valueOf(tLRPC$User.id)), new Object[0]);
            while (queryFinalized2.next()) {
                int intValue = queryFinalized2.intValue(0);
                arrayList.add(Integer.valueOf(intValue));
                hashMap.put(Integer.valueOf(intValue), null);
            }
            queryFinalized2.dispose();
            SQLiteCursor queryFinalized3 = this.database.queryFinalized("SELECT count, end FROM chat_pinned_count WHERE uid = " + tLRPC$User.id, new Object[0]);
            if (queryFinalized3.next()) {
                i2 = queryFinalized3.intValue(0);
                try {
                    z3 = queryFinalized3.intValue(1) != 0;
                    i3 = i2;
                } catch (Exception e4) {
                    e = e4;
                    sQLiteCursor = queryFinalized3;
                    tLRPC$UserFull = tLRPC$UserFull2;
                    z2 = false;
                    checkSQLException(e);
                    getMessagesController().processUserInfo(tLRPC$User, tLRPC$UserFull, true, z, i, arrayList, hashMap, i2, z2);
                    if (sQLiteCursor == null) {
                    }
                } catch (Throwable th5) {
                    th = th5;
                    sQLiteCursor = queryFinalized3;
                    tLRPC$UserFull = tLRPC$UserFull2;
                    z2 = false;
                    getMessagesController().processUserInfo(tLRPC$User, tLRPC$UserFull, true, z, i, arrayList, hashMap, i2, z2);
                    if (sQLiteCursor != null) {
                    }
                    throw th;
                }
            } else {
                i3 = 0;
                z3 = false;
            }
            try {
                queryFinalized3.dispose();
                if (tLRPC$UserFull2 != null) {
                    try {
                        if (tLRPC$UserFull2.pinned_msg_id != 0 && (arrayList.isEmpty() || tLRPC$UserFull2.pinned_msg_id > arrayList.get(0).intValue())) {
                            arrayList.clear();
                            arrayList.add(Integer.valueOf(tLRPC$UserFull2.pinned_msg_id));
                            hashMap.put(Integer.valueOf(tLRPC$UserFull2.pinned_msg_id), null);
                        }
                    } catch (Exception e5) {
                        e = e5;
                        sQLiteCursor = null;
                        tLRPC$UserFull = tLRPC$UserFull2;
                        i2 = i3;
                        z2 = z3;
                        checkSQLException(e);
                        getMessagesController().processUserInfo(tLRPC$User, tLRPC$UserFull, true, z, i, arrayList, hashMap, i2, z2);
                        if (sQLiteCursor == null) {
                            sQLiteCursor.dispose();
                            return;
                        }
                        return;
                    } catch (Throwable th6) {
                        th = th6;
                        sQLiteCursor = null;
                        tLRPC$UserFull = tLRPC$UserFull2;
                        i2 = i3;
                        z2 = z3;
                        getMessagesController().processUserInfo(tLRPC$User, tLRPC$UserFull, true, z, i, arrayList, hashMap, i2, z2);
                        if (sQLiteCursor != null) {
                        }
                        throw th;
                    }
                }
                if (!arrayList.isEmpty() && (loadPinnedMessages = getMediaDataController().loadPinnedMessages(tLRPC$User.id, 0L, arrayList, false)) != null) {
                    int size = loadPinnedMessages.size();
                    for (int i4 = 0; i4 < size; i4++) {
                        MessageObject messageObject = loadPinnedMessages.get(i4);
                        hashMap.put(Integer.valueOf(messageObject.getId()), messageObject);
                    }
                }
                getMessagesController().processUserInfo(tLRPC$User, tLRPC$UserFull2, true, z, i, arrayList, hashMap, i3, z3);
            } catch (Exception e6) {
                e = e6;
                sQLiteCursor = queryFinalized3;
            } catch (Throwable th7) {
                th = th7;
                sQLiteCursor = queryFinalized3;
            }
        } catch (Exception e7) {
            e = e7;
            sQLiteCursor = null;
            tLRPC$UserFull = tLRPC$UserFull2;
            i2 = 0;
            z2 = false;
            checkSQLException(e);
            getMessagesController().processUserInfo(tLRPC$User, tLRPC$UserFull, true, z, i, arrayList, hashMap, i2, z2);
            if (sQLiteCursor == null) {
            }
        } catch (Throwable th8) {
            th = th8;
            sQLiteCursor = null;
            tLRPC$UserFull = tLRPC$UserFull2;
            i2 = 0;
            z2 = false;
            getMessagesController().processUserInfo(tLRPC$User, tLRPC$UserFull, true, z, i, arrayList, hashMap, i2, z2);
            if (sQLiteCursor != null) {
            }
            throw th;
        }
    }

    public void updateUserInfo(final TLRPC$UserFull tLRPC$UserFull, final boolean z) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda207
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$updateUserInfo$107(z, tLRPC$UserFull);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:32:0x00bb  */
    /* JADX WARN: Removed duplicated region for block: B:34:0x00c0  */
    /* JADX WARN: Removed duplicated region for block: B:38:0x00c7  */
    /* JADX WARN: Removed duplicated region for block: B:40:0x00cc  */
    /* JADX WARN: Removed duplicated region for block: B:50:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Type inference failed for: r9v10 */
    /* JADX WARN: Type inference failed for: r9v4 */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$updateUserInfo$107(boolean z, TLRPC$UserFull tLRPC$UserFull) {
        SQLiteCursor queryFinalized;
        SQLitePreparedStatement executeFast;
        SQLitePreparedStatement sQLitePreparedStatement;
        SQLitePreparedStatement sQLitePreparedStatement2;
        SQLitePreparedStatement sQLitePreparedStatement3 = null;
        try {
            if (z != 0) {
                try {
                    queryFinalized = this.database.queryFinalized("SELECT uid FROM user_settings WHERE uid = " + tLRPC$UserFull.user.id, new Object[0]);
                    try {
                        boolean next = queryFinalized.next();
                        queryFinalized.dispose();
                        if (!next) {
                            return;
                        }
                    } catch (Exception e) {
                        e = e;
                        checkSQLException(e);
                        if (sQLitePreparedStatement3 != null) {
                            sQLitePreparedStatement3.dispose();
                        }
                        if (queryFinalized == null) {
                            queryFinalized.dispose();
                            return;
                        }
                        return;
                    }
                } catch (Exception e2) {
                    e = e2;
                    queryFinalized = null;
                } catch (Throwable th) {
                    th = th;
                    z = 0;
                    if (sQLitePreparedStatement3 != null) {
                        sQLitePreparedStatement3.dispose();
                    }
                    if (z != 0) {
                        z.dispose();
                    }
                    throw th;
                }
            }
            executeFast = this.database.executeFast("REPLACE INTO user_settings VALUES(?, ?, ?)");
        } catch (Throwable th2) {
            th = th2;
        }
        try {
            NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(tLRPC$UserFull.getObjectSize());
            tLRPC$UserFull.serializeToStream(nativeByteBuffer);
            executeFast.bindLong(1, tLRPC$UserFull.user.id);
            executeFast.bindByteBuffer(2, nativeByteBuffer);
            executeFast.bindInteger(3, tLRPC$UserFull.pinned_msg_id);
            executeFast.step();
            executeFast.dispose();
            nativeByteBuffer.reuse();
            if ((tLRPC$UserFull.flags & LiteMode.FLAG_AUTOPLAY_GIFS) != 0) {
                SQLitePreparedStatement executeFast2 = this.database.executeFast("UPDATE dialogs SET folder_id = ? WHERE did = ?");
                executeFast2.bindInteger(1, tLRPC$UserFull.folder_id);
                executeFast2.bindLong(2, tLRPC$UserFull.user.id);
                executeFast2.step();
                executeFast2.dispose();
                this.unknownDialogsIds.remove(tLRPC$UserFull.user.id);
            }
            if ((tLRPC$UserFull.flags & 16384) != 0) {
                SQLitePreparedStatement executeFast3 = this.database.executeFast("UPDATE dialogs SET ttl_period = ? WHERE did = ?");
                executeFast3.bindInteger(1, tLRPC$UserFull.ttl_period);
                executeFast3.bindLong(2, tLRPC$UserFull.user.id);
                executeFast3.step();
                executeFast3.dispose();
            }
        } catch (Exception e3) {
            e = e3;
            sQLitePreparedStatement3 = sQLitePreparedStatement2;
            queryFinalized = null;
            checkSQLException(e);
            if (sQLitePreparedStatement3 != null) {
            }
            if (queryFinalized == null) {
            }
        } catch (Throwable th3) {
            th = th3;
            sQLitePreparedStatement3 = sQLitePreparedStatement;
            z = 0;
            if (sQLitePreparedStatement3 != null) {
            }
            if (z != 0) {
            }
            throw th;
        }
    }

    public void saveChatInviter(final long j, final long j2) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda91
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$saveChatInviter$108(j2, j);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$saveChatInviter$108(long j, long j2) {
        SQLitePreparedStatement sQLitePreparedStatement = null;
        try {
            try {
                sQLitePreparedStatement = this.database.executeFast("UPDATE chat_settings_v2 SET inviter = ? WHERE uid = ?");
                sQLitePreparedStatement.requery();
                sQLitePreparedStatement.bindLong(1, j);
                sQLitePreparedStatement.bindLong(2, j2);
                sQLitePreparedStatement.step();
                sQLitePreparedStatement.dispose();
            } catch (Exception e) {
                checkSQLException(e);
                if (sQLitePreparedStatement == null) {
                    return;
                }
            }
            sQLitePreparedStatement.dispose();
        } catch (Throwable th) {
            if (sQLitePreparedStatement != null) {
                sQLitePreparedStatement.dispose();
            }
            throw th;
        }
    }

    public void saveChatLinksCount(final long j, final int i) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda41
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$saveChatLinksCount$109(i, j);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$saveChatLinksCount$109(int i, long j) {
        SQLitePreparedStatement sQLitePreparedStatement = null;
        try {
            try {
                sQLitePreparedStatement = this.database.executeFast("UPDATE chat_settings_v2 SET links = ? WHERE uid = ?");
                sQLitePreparedStatement.requery();
                sQLitePreparedStatement.bindInteger(1, i);
                sQLitePreparedStatement.bindLong(2, j);
                sQLitePreparedStatement.step();
                sQLitePreparedStatement.dispose();
            } catch (Exception e) {
                checkSQLException(e);
                if (sQLitePreparedStatement != null) {
                    sQLitePreparedStatement.dispose();
                }
            }
        } catch (Throwable th) {
            if (sQLitePreparedStatement != null) {
                sQLitePreparedStatement.dispose();
            }
            throw th;
        }
    }

    public void updateChatInfo(final TLRPC$ChatFull tLRPC$ChatFull, final boolean z) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda174
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$updateChatInfo$110(tLRPC$ChatFull, z);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:66:0x0157  */
    /* JADX WARN: Removed duplicated region for block: B:68:0x015c  */
    /* JADX WARN: Removed duplicated region for block: B:72:0x0163  */
    /* JADX WARN: Removed duplicated region for block: B:74:0x0168  */
    /* JADX WARN: Removed duplicated region for block: B:88:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Type inference failed for: r13v1 */
    /* JADX WARN: Type inference failed for: r13v11 */
    /* JADX WARN: Type inference failed for: r13v22 */
    /* JADX WARN: Type inference failed for: r13v5 */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$updateChatInfo$110(TLRPC$ChatFull tLRPC$ChatFull, boolean z) {
        SQLitePreparedStatement sQLitePreparedStatement;
        int i;
        int i2;
        SQLitePreparedStatement sQLitePreparedStatement2;
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                SQLiteCursor queryFinalized = this.database.queryFinalized("SELECT online, inviter, links FROM chat_settings_v2 WHERE uid = " + tLRPC$ChatFull.id, new Object[0]);
                try {
                    if (queryFinalized.next()) {
                        i = queryFinalized.intValue(0);
                        tLRPC$ChatFull.inviterId = queryFinalized.longValue(1);
                        i2 = queryFinalized.intValue(2);
                    } else {
                        i = -1;
                        i2 = 0;
                    }
                    queryFinalized.dispose();
                    if (z == 0 || i != -1) {
                        if (i >= 0 && (tLRPC$ChatFull.flags & 8192) == 0) {
                            tLRPC$ChatFull.online_count = i;
                        }
                        if (i2 >= 0) {
                            tLRPC$ChatFull.invitesCount = i2;
                        }
                        SQLitePreparedStatement executeFast = this.database.executeFast("REPLACE INTO chat_settings_v2 VALUES(?, ?, ?, ?, ?, ?)");
                        try {
                            NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(tLRPC$ChatFull.getObjectSize());
                            tLRPC$ChatFull.serializeToStream(nativeByteBuffer);
                            executeFast.bindLong(1, tLRPC$ChatFull.id);
                            executeFast.bindByteBuffer(2, nativeByteBuffer);
                            executeFast.bindInteger(3, tLRPC$ChatFull.pinned_msg_id);
                            executeFast.bindInteger(4, tLRPC$ChatFull.online_count);
                            executeFast.bindLong(5, tLRPC$ChatFull.inviterId);
                            executeFast.bindInteger(6, tLRPC$ChatFull.invitesCount);
                            executeFast.step();
                            executeFast.dispose();
                            nativeByteBuffer.reuse();
                            if (tLRPC$ChatFull instanceof TLRPC$TL_channelFull) {
                                SQLiteCursor queryFinalized2 = this.database.queryFinalized("SELECT inbox_max, outbox_max FROM dialogs WHERE did = " + (-tLRPC$ChatFull.id), new Object[0]);
                                try {
                                    if (!queryFinalized2.next() || queryFinalized2.intValue(0) >= tLRPC$ChatFull.read_inbox_max_id) {
                                        sQLitePreparedStatement2 = null;
                                    } else {
                                        int intValue = queryFinalized2.intValue(1);
                                        sQLitePreparedStatement2 = this.database.executeFast("UPDATE dialogs SET unread_count = ?, inbox_max = ?, outbox_max = ? WHERE did = ?");
                                        try {
                                            sQLitePreparedStatement2.bindInteger(1, tLRPC$ChatFull.unread_count);
                                            sQLitePreparedStatement2.bindInteger(2, tLRPC$ChatFull.read_inbox_max_id);
                                            sQLitePreparedStatement2.bindInteger(3, Math.max(intValue, tLRPC$ChatFull.read_outbox_max_id));
                                            sQLitePreparedStatement2.bindLong(4, -tLRPC$ChatFull.id);
                                            sQLitePreparedStatement2.step();
                                            sQLitePreparedStatement2.dispose();
                                        } catch (Exception e) {
                                            e = e;
                                            sQLiteCursor = queryFinalized2;
                                            sQLitePreparedStatement = sQLitePreparedStatement2;
                                            checkSQLException(e);
                                            if (sQLiteCursor != null) {
                                            }
                                            if (sQLitePreparedStatement != null) {
                                            }
                                        } catch (Throwable th) {
                                            th = th;
                                            sQLiteCursor = queryFinalized2;
                                            z = sQLitePreparedStatement2;
                                            if (sQLiteCursor != null) {
                                            }
                                            if (z != 0) {
                                            }
                                            throw th;
                                        }
                                    }
                                    queryFinalized2.dispose();
                                } catch (Exception e2) {
                                    e = e2;
                                    sQLiteCursor = queryFinalized2;
                                    sQLitePreparedStatement = null;
                                    checkSQLException(e);
                                    if (sQLiteCursor != null) {
                                    }
                                    if (sQLitePreparedStatement != null) {
                                    }
                                } catch (Throwable th2) {
                                    th = th2;
                                    sQLiteCursor = queryFinalized2;
                                    z = 0;
                                    if (sQLiteCursor != null) {
                                    }
                                    if (z != 0) {
                                    }
                                    throw th;
                                }
                            } else {
                                sQLitePreparedStatement2 = null;
                            }
                        } catch (Exception e3) {
                            e = e3;
                        }
                        try {
                            if ((tLRPC$ChatFull.flags & LiteMode.FLAG_AUTOPLAY_GIFS) != 0) {
                                SQLitePreparedStatement executeFast2 = this.database.executeFast("UPDATE dialogs SET folder_id = ? WHERE did = ?");
                                executeFast2.bindInteger(1, tLRPC$ChatFull.folder_id);
                                executeFast2.bindLong(2, -tLRPC$ChatFull.id);
                                executeFast2.step();
                                executeFast2.dispose();
                                this.unknownDialogsIds.remove(-tLRPC$ChatFull.id);
                                sQLitePreparedStatement2 = null;
                            }
                            SQLitePreparedStatement executeFast3 = this.database.executeFast("UPDATE dialogs SET ttl_period = ? WHERE did = ?");
                            executeFast3.bindInteger(1, tLRPC$ChatFull.ttl_period);
                            executeFast3.bindLong(2, -tLRPC$ChatFull.id);
                            executeFast3.step();
                            executeFast3.dispose();
                        } catch (Exception e4) {
                            e = e4;
                            sQLitePreparedStatement = sQLitePreparedStatement2;
                            checkSQLException(e);
                            if (sQLiteCursor != null) {
                                sQLiteCursor.dispose();
                            }
                            if (sQLitePreparedStatement != null) {
                                sQLitePreparedStatement.dispose();
                            }
                        } catch (Throwable th3) {
                            th = th3;
                            z = sQLitePreparedStatement2;
                            if (sQLiteCursor != null) {
                                sQLiteCursor.dispose();
                            }
                            if (z != 0) {
                                z.dispose();
                            }
                            throw th;
                        }
                    }
                } catch (Exception e5) {
                    e = e5;
                    sQLitePreparedStatement = null;
                    sQLiteCursor = queryFinalized;
                } catch (Throwable th4) {
                    th = th4;
                    z = 0;
                    sQLiteCursor = queryFinalized;
                }
            } catch (Throwable th5) {
                th = th5;
            }
        } catch (Exception e6) {
            e = e6;
            sQLitePreparedStatement = null;
        } catch (Throwable th6) {
            th = th6;
            z = 0;
        }
    }

    public void updateChatOnlineCount(final long j, final int i) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda45
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$updateChatOnlineCount$111(i, j);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateChatOnlineCount$111(int i, long j) {
        SQLitePreparedStatement sQLitePreparedStatement = null;
        try {
            try {
                sQLitePreparedStatement = this.database.executeFast("UPDATE chat_settings_v2 SET online = ? WHERE uid = ?");
                sQLitePreparedStatement.requery();
                sQLitePreparedStatement.bindInteger(1, i);
                sQLitePreparedStatement.bindLong(2, j);
                sQLitePreparedStatement.step();
                sQLitePreparedStatement.dispose();
            } catch (Exception e) {
                checkSQLException(e);
                if (sQLitePreparedStatement != null) {
                    sQLitePreparedStatement.dispose();
                }
            }
        } catch (Throwable th) {
            if (sQLitePreparedStatement != null) {
                sQLitePreparedStatement.dispose();
            }
            throw th;
        }
    }

    public void updatePinnedMessages(final long j, final ArrayList<Integer> arrayList, final boolean z, final int i, final int i2, final boolean z2, final HashMap<Integer, MessageObject> hashMap) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda206
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$updatePinnedMessages$114(z, hashMap, i2, j, arrayList, i, z2);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:127:0x0330  */
    /* JADX WARN: Removed duplicated region for block: B:129:0x0335  */
    /* JADX WARN: Removed duplicated region for block: B:131:0x033a  */
    /* JADX WARN: Removed duplicated region for block: B:136:0x0343  */
    /* JADX WARN: Removed duplicated region for block: B:138:0x0348  */
    /* JADX WARN: Removed duplicated region for block: B:140:0x034d  */
    /* JADX WARN: Removed duplicated region for block: B:157:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Type inference failed for: r1v29, types: [org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda106] */
    /* JADX WARN: Type inference failed for: r1v9, types: [org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda105] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$updatePinnedMessages$114(boolean z, final HashMap hashMap, final int i, final long j, final ArrayList arrayList, int i2, boolean z2) {
        SQLiteCursor sQLiteCursor;
        SQLitePreparedStatement sQLitePreparedStatement;
        SQLiteDatabase sQLiteDatabase;
        SQLiteDatabase sQLiteDatabase2;
        int i3;
        boolean z3;
        int i4;
        final int max;
        final boolean z4;
        int intValue;
        int i5;
        final boolean z5;
        int max2;
        NativeByteBuffer nativeByteBuffer;
        String str = "SELECT count, end FROM chat_pinned_count WHERE uid = %d";
        int i6 = 2;
        int i7 = 1;
        try {
            try {
                try {
                    try {
                        if (z) {
                            this.database.beginTransaction();
                            if (hashMap != null) {
                                if (i == 0) {
                                    SQLiteDatabase sQLiteDatabase3 = this.database;
                                    sQLiteDatabase3.executeFast("DELETE FROM chat_pinned_v2 WHERE uid = " + j).stepThis().dispose();
                                }
                                intValue = 0;
                            } else {
                                SQLiteCursor queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT COUNT(mid) FROM chat_pinned_v2 WHERE uid = %d AND mid IN (%s)", Long.valueOf(j), TextUtils.join(",", arrayList)), new Object[0]);
                                intValue = queryFinalized.next() ? queryFinalized.intValue(0) : 0;
                                queryFinalized.dispose();
                            }
                            SQLitePreparedStatement executeFast = this.database.executeFast("REPLACE INTO chat_pinned_v2 VALUES(?, ?, ?)");
                            try {
                                int size = arrayList.size();
                                int i8 = 0;
                                while (i8 < size) {
                                    Integer num = (Integer) arrayList.get(i8);
                                    executeFast.requery();
                                    executeFast.bindLong(1, j);
                                    executeFast.bindInteger(i6, num.intValue());
                                    MessageObject messageObject = hashMap != null ? (MessageObject) hashMap.get(num) : null;
                                    if (messageObject != null) {
                                        nativeByteBuffer = new NativeByteBuffer(messageObject.messageOwner.getObjectSize());
                                        messageObject.messageOwner.serializeToStream(nativeByteBuffer);
                                        executeFast.bindByteBuffer(3, nativeByteBuffer);
                                    } else {
                                        executeFast.bindNull(3);
                                        nativeByteBuffer = null;
                                    }
                                    executeFast.step();
                                    if (nativeByteBuffer != null) {
                                        nativeByteBuffer.reuse();
                                    }
                                    i8++;
                                    i6 = 2;
                                }
                                executeFast.dispose();
                                this.database.commitTransaction();
                                SQLiteDatabase sQLiteDatabase4 = this.database;
                                Locale locale = Locale.US;
                                SQLiteCursor queryFinalized2 = sQLiteDatabase4.queryFinalized(String.format(locale, "SELECT COUNT(mid) FROM chat_pinned_v2 WHERE uid = %d", Long.valueOf(j)), new Object[0]);
                                int intValue2 = queryFinalized2.next() ? queryFinalized2.intValue(0) : 0;
                                queryFinalized2.dispose();
                                if (hashMap != null) {
                                    max2 = Math.max(i2, intValue2);
                                    z5 = z2;
                                } else {
                                    SQLiteCursor queryFinalized3 = this.database.queryFinalized(String.format(locale, "SELECT count, end FROM chat_pinned_count WHERE uid = %d", Long.valueOf(j)), new Object[0]);
                                    if (queryFinalized3.next()) {
                                        i5 = queryFinalized3.intValue(0);
                                        if (queryFinalized3.intValue(1) != 0) {
                                            z5 = true;
                                            queryFinalized3.dispose();
                                            max2 = Math.max(i5 + (arrayList.size() - intValue), intValue2);
                                        }
                                    } else {
                                        i5 = 0;
                                    }
                                    z5 = false;
                                    queryFinalized3.dispose();
                                    max2 = Math.max(i5 + (arrayList.size() - intValue), intValue2);
                                }
                                final int i9 = max2;
                                SQLitePreparedStatement executeFast2 = this.database.executeFast("REPLACE INTO chat_pinned_count VALUES(?, ?, ?)");
                                executeFast2.requery();
                                executeFast2.bindLong(1, j);
                                executeFast2.bindInteger(2, i9);
                                if (!z5) {
                                    i7 = 0;
                                }
                                executeFast2.bindInteger(3, i7);
                                executeFast2.step();
                                executeFast2.dispose();
                                ?? r1 = new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda106
                                    @Override // java.lang.Runnable
                                    public final void run() {
                                        MessagesStorage.this.lambda$updatePinnedMessages$112(j, arrayList, hashMap, i, i9, z5);
                                    }
                                };
                                AndroidUtilities.runOnUIThread(r1);
                                str = r1;
                            } catch (Exception e) {
                                e = e;
                                sQLitePreparedStatement = executeFast;
                                sQLiteCursor = null;
                                try {
                                    checkSQLException(e);
                                    sQLiteDatabase2 = this.database;
                                    if (sQLiteDatabase2 != null) {
                                        sQLiteDatabase2.commitTransaction();
                                    }
                                    if (sQLiteCursor != null) {
                                        sQLiteCursor.dispose();
                                    }
                                    if (sQLitePreparedStatement == null) {
                                        sQLitePreparedStatement.dispose();
                                        return;
                                    }
                                    return;
                                } catch (Throwable th) {
                                    th = th;
                                    sQLiteDatabase = this.database;
                                    if (sQLiteDatabase != null) {
                                        sQLiteDatabase.commitTransaction();
                                    }
                                    if (sQLiteCursor != null) {
                                        sQLiteCursor.dispose();
                                    }
                                    if (sQLitePreparedStatement != null) {
                                        sQLitePreparedStatement.dispose();
                                    }
                                    throw th;
                                }
                            } catch (Throwable th2) {
                                th = th2;
                                sQLitePreparedStatement = executeFast;
                                sQLiteCursor = null;
                                sQLiteDatabase = this.database;
                                if (sQLiteDatabase != null) {
                                }
                                if (sQLiteCursor != null) {
                                }
                                if (sQLitePreparedStatement != null) {
                                }
                                throw th;
                            }
                        } else {
                            if (arrayList == null) {
                                SQLiteDatabase sQLiteDatabase5 = this.database;
                                sQLiteDatabase5.executeFast("DELETE FROM chat_pinned_v2 WHERE uid = " + j).stepThis().dispose();
                                if (DialogObject.isChatDialog(j)) {
                                    this.database.executeFast(String.format(Locale.US, "UPDATE chat_settings_v2 SET pinned = 0 WHERE uid = %d", Long.valueOf(-j))).stepThis().dispose();
                                } else {
                                    this.database.executeFast(String.format(Locale.US, "UPDATE user_settings SET pinned = 0 WHERE uid = %d", Long.valueOf(j))).stepThis().dispose();
                                }
                                max = 0;
                                z4 = true;
                                i3 = 0;
                            } else {
                                String join = TextUtils.join(",", arrayList);
                                if (DialogObject.isChatDialog(j)) {
                                    this.database.executeFast(String.format(Locale.US, "UPDATE chat_settings_v2 SET pinned = 0 WHERE uid = %d AND pinned IN (%s)", Long.valueOf(-j), join)).stepThis().dispose();
                                } else {
                                    this.database.executeFast(String.format(Locale.US, "UPDATE user_settings SET pinned = 0 WHERE uid = %d AND pinned IN (%s)", Long.valueOf(j), join)).stepThis().dispose();
                                }
                                SQLiteDatabase sQLiteDatabase6 = this.database;
                                Locale locale2 = Locale.US;
                                sQLiteDatabase6.executeFast(String.format(locale2, "DELETE FROM chat_pinned_v2 WHERE uid = %d AND mid IN(%s)", Long.valueOf(j), join)).stepThis().dispose();
                                SQLiteCursor queryFinalized4 = this.database.queryFinalized("SELECT changes()", new Object[0]);
                                int intValue3 = queryFinalized4.next() ? queryFinalized4.intValue(0) : 0;
                                queryFinalized4.dispose();
                                SQLiteCursor queryFinalized5 = this.database.queryFinalized(String.format(locale2, "SELECT COUNT(mid) FROM chat_pinned_v2 WHERE uid = %d", Long.valueOf(j)), new Object[0]);
                                int intValue4 = queryFinalized5.next() ? queryFinalized5.intValue(0) : 0;
                                queryFinalized5.dispose();
                                i3 = 0;
                                SQLiteCursor queryFinalized6 = this.database.queryFinalized(String.format(locale2, "SELECT count, end FROM chat_pinned_count WHERE uid = %d", Long.valueOf(j)), new Object[0]);
                                try {
                                    if (queryFinalized6.next()) {
                                        i4 = Math.max(0, queryFinalized6.intValue(0) - intValue3);
                                        z3 = queryFinalized6.intValue(1) != 0;
                                    } else {
                                        z3 = false;
                                        i4 = 0;
                                    }
                                    queryFinalized6.dispose();
                                    max = Math.max(intValue4, i4);
                                    z4 = z3;
                                } catch (Exception e2) {
                                    e = e2;
                                    sQLiteCursor = queryFinalized6;
                                    sQLitePreparedStatement = null;
                                    checkSQLException(e);
                                    sQLiteDatabase2 = this.database;
                                    if (sQLiteDatabase2 != null) {
                                    }
                                    if (sQLiteCursor != null) {
                                    }
                                    if (sQLitePreparedStatement == null) {
                                    }
                                } catch (Throwable th3) {
                                    th = th3;
                                    sQLiteCursor = queryFinalized6;
                                    sQLitePreparedStatement = null;
                                    sQLiteDatabase = this.database;
                                    if (sQLiteDatabase != null) {
                                    }
                                    if (sQLiteCursor != null) {
                                    }
                                    if (sQLitePreparedStatement != null) {
                                    }
                                    throw th;
                                }
                            }
                            SQLitePreparedStatement executeFast3 = this.database.executeFast("REPLACE INTO chat_pinned_count VALUES(?, ?, ?)");
                            executeFast3.requery();
                            executeFast3.bindLong(1, j);
                            executeFast3.bindInteger(2, max);
                            if (z4) {
                                i3 = 1;
                            }
                            executeFast3.bindInteger(3, i3);
                            executeFast3.step();
                            executeFast3.dispose();
                            ?? r12 = new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda105
                                @Override // java.lang.Runnable
                                public final void run() {
                                    MessagesStorage.this.lambda$updatePinnedMessages$113(j, arrayList, hashMap, i, max, z4);
                                }
                            };
                            AndroidUtilities.runOnUIThread(r12);
                            str = r12;
                        }
                        SQLiteDatabase sQLiteDatabase7 = this.database;
                        if (sQLiteDatabase7 != null) {
                            sQLiteDatabase7.commitTransaction();
                        }
                    } catch (Exception e3) {
                        e = e3;
                        sQLiteCursor = "SELECT COUNT(mid) FROM chat_pinned_v2 WHERE uid = %d";
                    } catch (Throwable th4) {
                        th = th4;
                        sQLiteCursor = "SELECT COUNT(mid) FROM chat_pinned_v2 WHERE uid = %d";
                    }
                } catch (Exception e4) {
                    e = e4;
                    sQLitePreparedStatement = str;
                } catch (Throwable th5) {
                    th = th5;
                    sQLitePreparedStatement = str;
                }
            } catch (Exception e5) {
                e = e5;
                sQLiteCursor = "DELETE FROM chat_pinned_v2 WHERE uid = ";
            } catch (Throwable th6) {
                th = th6;
                sQLiteCursor = "DELETE FROM chat_pinned_v2 WHERE uid = ";
            }
        } catch (Exception e6) {
            e = e6;
            sQLiteCursor = null;
        } catch (Throwable th7) {
            th = th7;
            sQLiteCursor = null;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updatePinnedMessages$112(long j, ArrayList arrayList, HashMap hashMap, int i, int i2, boolean z) {
        getNotificationCenter().postNotificationName(NotificationCenter.didLoadPinnedMessages, Long.valueOf(j), arrayList, Boolean.TRUE, 0, hashMap, Integer.valueOf(i), Integer.valueOf(i2), Boolean.valueOf(z));
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updatePinnedMessages$113(long j, ArrayList arrayList, HashMap hashMap, int i, int i2, boolean z) {
        getNotificationCenter().postNotificationName(NotificationCenter.didLoadPinnedMessages, Long.valueOf(j), arrayList, Boolean.FALSE, 0, hashMap, Integer.valueOf(i), Integer.valueOf(i2), Boolean.valueOf(z));
    }

    public void updateChatInfo(final long j, final long j2, final int i, final long j3, final int i2) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda80
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$updateChatInfo$116(j, i, j2, j3, i2);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateChatInfo$116(long j, int i, long j2, long j3, int i2) {
        int i3;
        SQLiteCursor queryFinalized;
        final TLRPC$ChatFull tLRPC$ChatFull;
        TLRPC$ChatParticipant tLRPC$TL_chatParticipant;
        NativeByteBuffer byteBufferValue;
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                i3 = 0;
                queryFinalized = this.database.queryFinalized("SELECT info, pinned, online, inviter FROM chat_settings_v2 WHERE uid = " + j, new Object[0]);
            } catch (Throwable th) {
                th = th;
            }
        } catch (Exception e) {
            e = e;
        }
        try {
            new ArrayList();
            if (!queryFinalized.next() || (byteBufferValue = queryFinalized.byteBufferValue(0)) == null) {
                tLRPC$ChatFull = null;
            } else {
                tLRPC$ChatFull = TLRPC$ChatFull.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                byteBufferValue.reuse();
                tLRPC$ChatFull.pinned_msg_id = queryFinalized.intValue(1);
                tLRPC$ChatFull.online_count = queryFinalized.intValue(2);
                tLRPC$ChatFull.inviterId = queryFinalized.longValue(3);
            }
            queryFinalized.dispose();
            if (tLRPC$ChatFull instanceof TLRPC$TL_chatFull) {
                if (i == 1) {
                    while (true) {
                        if (i3 >= tLRPC$ChatFull.participants.participants.size()) {
                            break;
                        } else if (tLRPC$ChatFull.participants.participants.get(i3).user_id == j2) {
                            tLRPC$ChatFull.participants.participants.remove(i3);
                            break;
                        } else {
                            i3++;
                        }
                    }
                } else if (i == 0) {
                    Iterator<TLRPC$ChatParticipant> it = tLRPC$ChatFull.participants.participants.iterator();
                    while (it.hasNext()) {
                        if (it.next().user_id == j2) {
                            return;
                        }
                    }
                    TLRPC$TL_chatParticipant tLRPC$TL_chatParticipant2 = new TLRPC$TL_chatParticipant();
                    tLRPC$TL_chatParticipant2.user_id = j2;
                    tLRPC$TL_chatParticipant2.inviter_id = j3;
                    tLRPC$TL_chatParticipant2.date = getConnectionsManager().getCurrentTime();
                    tLRPC$ChatFull.participants.participants.add(tLRPC$TL_chatParticipant2);
                } else if (i == 2) {
                    while (true) {
                        if (i3 >= tLRPC$ChatFull.participants.participants.size()) {
                            break;
                        }
                        TLRPC$ChatParticipant tLRPC$ChatParticipant = tLRPC$ChatFull.participants.participants.get(i3);
                        if (tLRPC$ChatParticipant.user_id == j2) {
                            if (j3 == 1) {
                                tLRPC$TL_chatParticipant = new TLRPC$TL_chatParticipantAdmin();
                            } else {
                                tLRPC$TL_chatParticipant = new TLRPC$TL_chatParticipant();
                            }
                            tLRPC$TL_chatParticipant.user_id = tLRPC$ChatParticipant.user_id;
                            tLRPC$TL_chatParticipant.date = tLRPC$ChatParticipant.date;
                            tLRPC$TL_chatParticipant.inviter_id = tLRPC$ChatParticipant.inviter_id;
                            tLRPC$ChatFull.participants.participants.set(i3, tLRPC$TL_chatParticipant);
                        } else {
                            i3++;
                        }
                    }
                }
                tLRPC$ChatFull.participants.version = i2;
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda172
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesStorage.this.lambda$updateChatInfo$115(tLRPC$ChatFull);
                    }
                });
                SQLitePreparedStatement executeFast = this.database.executeFast("REPLACE INTO chat_settings_v2 VALUES(?, ?, ?, ?, ?, ?)");
                NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(tLRPC$ChatFull.getObjectSize());
                tLRPC$ChatFull.serializeToStream(nativeByteBuffer);
                executeFast.bindLong(1, j);
                executeFast.bindByteBuffer(2, nativeByteBuffer);
                executeFast.bindInteger(3, tLRPC$ChatFull.pinned_msg_id);
                executeFast.bindInteger(4, tLRPC$ChatFull.online_count);
                executeFast.bindLong(5, tLRPC$ChatFull.inviterId);
                executeFast.bindInteger(6, tLRPC$ChatFull.invitesCount);
                executeFast.step();
                executeFast.dispose();
                nativeByteBuffer.reuse();
            }
        } catch (Exception e2) {
            e = e2;
            sQLiteCursor = queryFinalized;
            checkSQLException(e);
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
        } catch (Throwable th2) {
            th = th2;
            sQLiteCursor = queryFinalized;
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
            throw th;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateChatInfo$115(TLRPC$ChatFull tLRPC$ChatFull) {
        NotificationCenter notificationCenter = getNotificationCenter();
        int i = NotificationCenter.chatInfoDidLoad;
        Boolean bool = Boolean.FALSE;
        notificationCenter.postNotificationName(i, tLRPC$ChatFull, 0, bool, bool);
    }

    public boolean isMigratedChat(final long j) {
        final CountDownLatch countDownLatch = new CountDownLatch(1);
        final boolean[] zArr = new boolean[1];
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda128
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$isMigratedChat$117(j, zArr, countDownLatch);
            }
        });
        try {
            countDownLatch.await();
        } catch (Exception e) {
            checkSQLException(e);
        }
        return zArr[0];
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$isMigratedChat$117(long j, boolean[] zArr, CountDownLatch countDownLatch) {
        SQLiteCursor queryFinalized;
        TLRPC$ChatFull tLRPC$ChatFull;
        NativeByteBuffer byteBufferValue;
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                queryFinalized = this.database.queryFinalized("SELECT info FROM chat_settings_v2 WHERE uid = " + j, new Object[0]);
            } catch (Exception e) {
                e = e;
            }
        } catch (Throwable th) {
            th = th;
        }
        try {
            new ArrayList();
            if (!queryFinalized.next() || (byteBufferValue = queryFinalized.byteBufferValue(0)) == null) {
                tLRPC$ChatFull = null;
            } else {
                tLRPC$ChatFull = TLRPC$ChatFull.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                byteBufferValue.reuse();
            }
            queryFinalized.dispose();
            zArr[0] = (tLRPC$ChatFull instanceof TLRPC$TL_channelFull) && tLRPC$ChatFull.migrated_from_chat_id != 0;
            countDownLatch.countDown();
        } catch (Exception e2) {
            e = e2;
            sQLiteCursor = queryFinalized;
            checkSQLException(e);
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
            countDownLatch.countDown();
        } catch (Throwable th2) {
            th = th2;
            sQLiteCursor = queryFinalized;
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
            countDownLatch.countDown();
            throw th;
        }
        countDownLatch.countDown();
    }

    public TLRPC$Message getMessage(final long j, final long j2) {
        final CountDownLatch countDownLatch = new CountDownLatch(1);
        final AtomicReference atomicReference = new AtomicReference();
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda96
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$getMessage$118(j, j2, atomicReference, countDownLatch);
            }
        });
        try {
            countDownLatch.await();
        } catch (Exception e) {
            checkSQLException(e);
        }
        return (TLRPC$Message) atomicReference.get();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$getMessage$118(long j, long j2, AtomicReference atomicReference, CountDownLatch countDownLatch) {
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                SQLiteDatabase sQLiteDatabase = this.database;
                sQLiteCursor = sQLiteDatabase.queryFinalized("SELECT data FROM messages_v2 WHERE uid = " + j + " AND mid = " + j2 + " LIMIT 1", new Object[0]);
                while (sQLiteCursor.next()) {
                    NativeByteBuffer byteBufferValue = sQLiteCursor.byteBufferValue(0);
                    if (byteBufferValue != null) {
                        TLRPC$Message TLdeserialize = TLRPC$Message.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                        byteBufferValue.reuse();
                        atomicReference.set(TLdeserialize);
                    }
                }
                sQLiteCursor.dispose();
            } catch (Exception e) {
                checkSQLException(e);
                if (sQLiteCursor != null) {
                    sQLiteCursor.dispose();
                }
            }
            countDownLatch.countDown();
        } catch (Throwable th) {
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
            countDownLatch.countDown();
            throw th;
        }
    }

    public boolean hasInviteMeMessage(final long j) {
        final CountDownLatch countDownLatch = new CountDownLatch(1);
        final boolean[] zArr = new boolean[1];
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda127
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$hasInviteMeMessage$119(j, zArr, countDownLatch);
            }
        });
        try {
            countDownLatch.await();
        } catch (Exception e) {
            checkSQLException(e);
        }
        return zArr[0];
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$hasInviteMeMessage$119(long j, boolean[] zArr, CountDownLatch countDownLatch) {
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                long clientUserId = getUserConfig().getClientUserId();
                SQLiteDatabase sQLiteDatabase = this.database;
                sQLiteCursor = sQLiteDatabase.queryFinalized("SELECT data FROM messages_v2 WHERE uid = " + (-j) + " AND out = 0 ORDER BY mid DESC LIMIT 100", new Object[0]);
                while (true) {
                    if (!sQLiteCursor.next()) {
                        break;
                    }
                    NativeByteBuffer byteBufferValue = sQLiteCursor.byteBufferValue(0);
                    if (byteBufferValue != null) {
                        TLRPC$Message TLdeserialize = TLRPC$Message.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                        byteBufferValue.reuse();
                        TLRPC$MessageAction tLRPC$MessageAction = TLdeserialize.action;
                        if ((tLRPC$MessageAction instanceof TLRPC$TL_messageActionChatAddUser) && tLRPC$MessageAction.users.contains(Long.valueOf(clientUserId))) {
                            zArr[0] = true;
                            break;
                        }
                    }
                }
                sQLiteCursor.dispose();
            } catch (Exception e) {
                checkSQLException(e);
                if (sQLiteCursor != null) {
                    sQLiteCursor.dispose();
                }
            }
            countDownLatch.countDown();
        } catch (Throwable th) {
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
            countDownLatch.countDown();
            throw th;
        }
    }

    /* JADX WARN: Can't wrap try/catch for region: R(22:1|(3:2|3|(3:5|6|7))|(12:(3:270|271|(32:273|274|275|276|10|11|12|13|14|(6:241|242|(4:245|(2:247|248)(1:250)|249|243)|251|252|(1:254))(2:16|(12:172|173|174|175|(11:178|179|(2:212|213)(1:181)|182|183|184|(1:186)(1:208)|(1:190)|(2:206|207)(7:193|(1:195)|196|197|198|199|201)|202|176)|220|221|222|(4:225|(2:227|228)(1:230)|229|223)|231|232|(1:234)))|18|(1:22)|48|49|50|51|52|(5:56|57|58|53|54)|65|66|67|69|70|(6:135|136|137|138|(1:140)|141)(1:72)|73|74|(3:103|104|(10:106|(3:118|119|(5:121|77|(6:79|(1:81)(1:100)|82|83|84|(3:86|(2:88|89)|91))(1:102)|92|93))(1:108)|109|110|111|112|77|(0)(0)|92|93))|76|77|(0)(0)|92|93))|69|70|(0)(0)|73|74|(0)|76|77|(0)(0)|92|93)|9|10|11|12|13|14|(0)(0)|18|(2:20|22)|48|49|50|51|52|(2:53|54)|65|66|67|(1:(0))) */
    /* JADX WARN: Can't wrap try/catch for region: R(24:1|2|3|(3:5|6|7)|(12:(3:270|271|(32:273|274|275|276|10|11|12|13|14|(6:241|242|(4:245|(2:247|248)(1:250)|249|243)|251|252|(1:254))(2:16|(12:172|173|174|175|(11:178|179|(2:212|213)(1:181)|182|183|184|(1:186)(1:208)|(1:190)|(2:206|207)(7:193|(1:195)|196|197|198|199|201)|202|176)|220|221|222|(4:225|(2:227|228)(1:230)|229|223)|231|232|(1:234)))|18|(1:22)|48|49|50|51|52|(5:56|57|58|53|54)|65|66|67|69|70|(6:135|136|137|138|(1:140)|141)(1:72)|73|74|(3:103|104|(10:106|(3:118|119|(5:121|77|(6:79|(1:81)(1:100)|82|83|84|(3:86|(2:88|89)|91))(1:102)|92|93))(1:108)|109|110|111|112|77|(0)(0)|92|93))|76|77|(0)(0)|92|93))|69|70|(0)(0)|73|74|(0)|76|77|(0)(0)|92|93)|9|10|11|12|13|14|(0)(0)|18|(2:20|22)|48|49|50|51|52|(2:53|54)|65|66|67|(1:(0))) */
    /* JADX WARN: Can't wrap try/catch for region: R(3:(3:56|57|58)|53|54) */
    /* JADX WARN: Code restructure failed: missing block: B:196:0x0355, code lost:
        r0 = th;
     */
    /* JADX WARN: Code restructure failed: missing block: B:197:0x0356, code lost:
        r19 = r15;
        r2 = r3;
     */
    /* JADX WARN: Code restructure failed: missing block: B:198:0x035b, code lost:
        r0 = e;
     */
    /* JADX WARN: Code restructure failed: missing block: B:201:0x0362, code lost:
        r0 = th;
     */
    /* JADX WARN: Code restructure failed: missing block: B:203:0x0364, code lost:
        r0 = e;
     */
    /* JADX WARN: Code restructure failed: missing block: B:205:0x0366, code lost:
        r0 = th;
     */
    /* JADX WARN: Code restructure failed: missing block: B:207:0x0369, code lost:
        r19 = r15;
        r2 = null;
     */
    /* JADX WARN: Code restructure failed: missing block: B:209:0x036e, code lost:
        r0 = e;
     */
    /* JADX WARN: Code restructure failed: missing block: B:211:0x0371, code lost:
        r2 = null;
     */
    /* JADX WARN: Code restructure failed: missing block: B:213:0x0376, code lost:
        r0 = th;
     */
    /* JADX WARN: Code restructure failed: missing block: B:214:0x0377, code lost:
        r19 = r15;
        r2 = null;
     */
    /* JADX WARN: Code restructure failed: missing block: B:215:0x037c, code lost:
        r0 = e;
     */
    /* JADX WARN: Code restructure failed: missing block: B:218:0x0382, code lost:
        r0 = th;
     */
    /* JADX WARN: Code restructure failed: missing block: B:219:0x0383, code lost:
        r19 = r15;
        r2 = r7;
     */
    /* JADX WARN: Code restructure failed: missing block: B:221:0x038a, code lost:
        r0 = e;
     */
    /* JADX WARN: Code restructure failed: missing block: B:227:0x0399, code lost:
        r2 = r7;
     */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:136:0x0282  */
    /* JADX WARN: Removed duplicated region for block: B:168:0x02e6 A[Catch: all -> 0x0339, Exception -> 0x0344, TRY_LEAVE, TryCatch #36 {Exception -> 0x0344, all -> 0x0339, blocks: (B:137:0x0286, B:166:0x02e0, B:168:0x02e6), top: B:282:0x0286 }] */
    /* JADX WARN: Removed duplicated region for block: B:183:0x031f  */
    /* JADX WARN: Removed duplicated region for block: B:238:0x03ad  */
    /* JADX WARN: Removed duplicated region for block: B:244:0x03c4  */
    /* JADX WARN: Removed duplicated region for block: B:276:0x028b A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:280:0x0223 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:284:0x0263 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:288:0x0086 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:41:0x00ca A[Catch: all -> 0x0376, Exception -> 0x037c, TRY_ENTER, TRY_LEAVE, TryCatch #38 {Exception -> 0x037c, all -> 0x0376, blocks: (B:22:0x0080, B:41:0x00ca), top: B:278:0x0080 }] */
    /* JADX WARN: Type inference failed for: r5v0 */
    /* JADX WARN: Type inference failed for: r5v34, types: [boolean, int] */
    /* JADX WARN: Type inference failed for: r5v35 */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private TLRPC$ChatFull loadChatInfoInternal(long j, boolean z, boolean z2, boolean z3, int i) {
        SQLiteCursor sQLiteCursor;
        TLRPC$ChatFull tLRPC$ChatFull;
        TLRPC$ChatFull tLRPC$ChatFull2;
        int i2;
        boolean z4;
        SQLiteCursor queryFinalized;
        SQLiteCursor queryFinalized2;
        int i3;
        boolean z5;
        TLRPC$ChatFull tLRPC$ChatFull3;
        int i4;
        TLRPC$User TLdeserialize;
        TLRPC$ChannelParticipant tLRPC$ChannelParticipant;
        long j2 = j;
        ArrayList<TLRPC$User> arrayList = new ArrayList<>();
        HashMap<Integer, MessageObject> hashMap = new HashMap<>();
        ArrayList<Integer> arrayList2 = new ArrayList<>();
        ?? r5 = 0;
        try {
            queryFinalized = this.database.queryFinalized("SELECT info, pinned, online, inviter, links FROM chat_settings_v2 WHERE uid = " + j2, new Object[0]);
            try {
            } catch (Exception e) {
                e = e;
                tLRPC$ChatFull2 = null;
            } catch (Throwable th) {
                th = th;
                tLRPC$ChatFull = null;
                sQLiteCursor = queryFinalized;
            }
        } catch (Exception e2) {
            e = e2;
            sQLiteCursor = null;
            tLRPC$ChatFull2 = null;
        } catch (Throwable th2) {
            th = th2;
            sQLiteCursor = null;
            tLRPC$ChatFull = null;
        }
        try {
            try {
                if (queryFinalized.next()) {
                    try {
                        NativeByteBuffer byteBufferValue = queryFinalized.byteBufferValue(0);
                        if (byteBufferValue != null) {
                            TLRPC$ChatFull TLdeserialize2 = TLRPC$ChatFull.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                            try {
                                byteBufferValue.reuse();
                                TLdeserialize2.pinned_msg_id = queryFinalized.intValue(1);
                                TLdeserialize2.online_count = queryFinalized.intValue(2);
                                TLdeserialize2.inviterId = queryFinalized.longValue(3);
                                TLdeserialize2.invitesCount = queryFinalized.intValue(4);
                                tLRPC$ChatFull2 = TLdeserialize2;
                                queryFinalized.dispose();
                                if (!(tLRPC$ChatFull2 instanceof TLRPC$TL_chatFull)) {
                                    try {
                                        StringBuilder sb = new StringBuilder();
                                        for (int i5 = 0; i5 < tLRPC$ChatFull2.participants.participants.size(); i5++) {
                                            TLRPC$ChatParticipant tLRPC$ChatParticipant = tLRPC$ChatFull2.participants.participants.get(i5);
                                            if (sb.length() != 0) {
                                                sb.append(",");
                                            }
                                            sb.append(tLRPC$ChatParticipant.user_id);
                                        }
                                        if (sb.length() != 0) {
                                            getUsersInternal(sb.toString(), arrayList);
                                        }
                                    } catch (Exception e3) {
                                        e = e3;
                                        sQLiteCursor = null;
                                        i2 = 0;
                                        z4 = false;
                                        try {
                                            checkSQLException(e);
                                            if (sQLiteCursor != null) {
                                            }
                                            getMessagesController().processChatInfo(j, tLRPC$ChatFull2, arrayList, true, z2, z3, arrayList2, hashMap, i2, z4);
                                            return tLRPC$ChatFull2;
                                        } catch (Throwable th3) {
                                            th = th3;
                                            tLRPC$ChatFull = tLRPC$ChatFull2;
                                            if (sQLiteCursor != null) {
                                                sQLiteCursor.dispose();
                                            }
                                            getMessagesController().processChatInfo(j, tLRPC$ChatFull, arrayList, true, z2, z3, arrayList2, hashMap, i2, z4);
                                            throw th;
                                        }
                                    } catch (Throwable th4) {
                                        th = th4;
                                        tLRPC$ChatFull = tLRPC$ChatFull2;
                                        sQLiteCursor = null;
                                        i2 = 0;
                                        z4 = false;
                                        if (sQLiteCursor != null) {
                                        }
                                        getMessagesController().processChatInfo(j, tLRPC$ChatFull, arrayList, true, z2, z3, arrayList2, hashMap, i2, z4);
                                        throw th;
                                    }
                                } else if (tLRPC$ChatFull2 instanceof TLRPC$TL_channelFull) {
                                    try {
                                        SQLiteCursor queryFinalized3 = this.database.queryFinalized("SELECT us.data, us.status, cu.data, cu.date FROM channel_users_v2 as cu LEFT JOIN users as us ON us.uid = cu.uid WHERE cu.did = " + (-j2) + " ORDER BY cu.date DESC", new Object[0]);
                                        try {
                                            try {
                                                tLRPC$ChatFull2.participants = new TLRPC$TL_chatParticipants();
                                                while (queryFinalized3.next()) {
                                                    try {
                                                        NativeByteBuffer byteBufferValue2 = queryFinalized3.byteBufferValue(r5);
                                                        if (byteBufferValue2 != null) {
                                                            try {
                                                                TLdeserialize = TLRPC$User.TLdeserialize(byteBufferValue2, byteBufferValue2.readInt32(r5), r5);
                                                                byteBufferValue2.reuse();
                                                            } catch (Throwable th5) {
                                                                th = th5;
                                                                sQLiteCursor = queryFinalized3;
                                                                tLRPC$ChatFull = tLRPC$ChatFull2;
                                                                i2 = 0;
                                                                z4 = false;
                                                                if (sQLiteCursor != null) {
                                                                }
                                                                getMessagesController().processChatInfo(j, tLRPC$ChatFull, arrayList, true, z2, z3, arrayList2, hashMap, i2, z4);
                                                                throw th;
                                                            }
                                                        } else {
                                                            TLdeserialize = null;
                                                        }
                                                        try {
                                                            NativeByteBuffer byteBufferValue3 = queryFinalized3.byteBufferValue(2);
                                                            if (byteBufferValue3 != 0) {
                                                                tLRPC$ChannelParticipant = TLRPC$ChannelParticipant.TLdeserialize(byteBufferValue3, byteBufferValue3.readInt32(r5), r5);
                                                                byteBufferValue3.reuse();
                                                            } else {
                                                                tLRPC$ChannelParticipant = null;
                                                            }
                                                            if (tLRPC$ChannelParticipant != null && tLRPC$ChannelParticipant.user_id == getUserConfig().clientUserId) {
                                                                TLdeserialize = getUserConfig().getCurrentUser();
                                                            }
                                                            if (TLdeserialize != null && tLRPC$ChannelParticipant != null) {
                                                                TLRPC$UserStatus tLRPC$UserStatus = TLdeserialize.status;
                                                                if (tLRPC$UserStatus != null) {
                                                                    tLRPC$UserStatus.expires = queryFinalized3.intValue(1);
                                                                }
                                                                arrayList.add(TLdeserialize);
                                                                try {
                                                                    tLRPC$ChannelParticipant.date = queryFinalized3.intValue(3);
                                                                    TLRPC$TL_chatChannelParticipant tLRPC$TL_chatChannelParticipant = new TLRPC$TL_chatChannelParticipant();
                                                                    tLRPC$TL_chatChannelParticipant.user_id = MessageObject.getPeerId(tLRPC$ChannelParticipant.peer);
                                                                    tLRPC$TL_chatChannelParticipant.date = tLRPC$ChannelParticipant.date;
                                                                    tLRPC$TL_chatChannelParticipant.inviter_id = tLRPC$ChannelParticipant.inviter_id;
                                                                    tLRPC$TL_chatChannelParticipant.channelParticipant = tLRPC$ChannelParticipant;
                                                                    tLRPC$ChatFull2.participants.participants.add(tLRPC$TL_chatChannelParticipant);
                                                                } catch (Exception e4) {
                                                                    e = e4;
                                                                    checkSQLException(e);
                                                                    j2 = j;
                                                                    r5 = 0;
                                                                }
                                                            }
                                                        } catch (Exception e5) {
                                                            e = e5;
                                                        }
                                                    } catch (Exception e6) {
                                                        e = e6;
                                                    }
                                                    j2 = j;
                                                    r5 = 0;
                                                }
                                                queryFinalized3.dispose();
                                                StringBuilder sb2 = new StringBuilder();
                                                for (int i6 = 0; i6 < tLRPC$ChatFull2.bot_info.size(); i6++) {
                                                    TLRPC$BotInfo tLRPC$BotInfo = tLRPC$ChatFull2.bot_info.get(i6);
                                                    if (sb2.length() != 0) {
                                                        sb2.append(",");
                                                    }
                                                    sb2.append(tLRPC$BotInfo.user_id);
                                                }
                                                if (sb2.length() != 0) {
                                                    getUsersInternal(sb2.toString(), arrayList);
                                                }
                                            } catch (Throwable th6) {
                                                th = th6;
                                                sQLiteCursor = queryFinalized3;
                                                tLRPC$ChatFull = tLRPC$ChatFull2;
                                                i2 = 0;
                                                z4 = false;
                                            }
                                        } catch (Exception e7) {
                                            e = e7;
                                            sQLiteCursor = queryFinalized3;
                                            i2 = 0;
                                            z4 = false;
                                            checkSQLException(e);
                                            if (sQLiteCursor != null) {
                                                sQLiteCursor.dispose();
                                            }
                                            getMessagesController().processChatInfo(j, tLRPC$ChatFull2, arrayList, true, z2, z3, arrayList2, hashMap, i2, z4);
                                            return tLRPC$ChatFull2;
                                        }
                                    } catch (Exception e8) {
                                        e = e8;
                                        sQLiteCursor = null;
                                        i2 = 0;
                                        z4 = false;
                                        checkSQLException(e);
                                        if (sQLiteCursor != null) {
                                        }
                                        getMessagesController().processChatInfo(j, tLRPC$ChatFull2, arrayList, true, z2, z3, arrayList2, hashMap, i2, z4);
                                        return tLRPC$ChatFull2;
                                    } catch (Throwable th7) {
                                        th = th7;
                                        tLRPC$ChatFull = tLRPC$ChatFull2;
                                        sQLiteCursor = null;
                                        i2 = 0;
                                        z4 = false;
                                        if (sQLiteCursor != null) {
                                        }
                                        getMessagesController().processChatInfo(j, tLRPC$ChatFull, arrayList, true, z2, z3, arrayList2, hashMap, i2, z4);
                                        throw th;
                                    }
                                }
                                if (tLRPC$ChatFull2 != null && tLRPC$ChatFull2.inviterId != 0) {
                                    getUsersInternal("" + tLRPC$ChatFull2.inviterId, arrayList);
                                }
                                SQLiteDatabase database = getMessagesStorage().getDatabase();
                                Locale locale = Locale.US;
                                Object[] objArr = new Object[1];
                                long j3 = -j;
                                int i7 = 0;
                                objArr[0] = Long.valueOf(j3);
                                queryFinalized2 = database.queryFinalized(String.format(locale, "SELECT mid FROM chat_pinned_v2 WHERE uid = %d ORDER BY mid DESC", objArr), new Object[0]);
                                while (queryFinalized2.next()) {
                                    try {
                                        int intValue = queryFinalized2.intValue(i7);
                                        arrayList2.add(Integer.valueOf(intValue));
                                        hashMap.put(Integer.valueOf(intValue), null);
                                        i7 = 0;
                                    } catch (Exception e9) {
                                        e = e9;
                                        sQLiteCursor = queryFinalized2;
                                        i2 = 0;
                                        z4 = false;
                                        checkSQLException(e);
                                        if (sQLiteCursor != null) {
                                        }
                                        getMessagesController().processChatInfo(j, tLRPC$ChatFull2, arrayList, true, z2, z3, arrayList2, hashMap, i2, z4);
                                        return tLRPC$ChatFull2;
                                    } catch (Throwable th8) {
                                        th = th8;
                                        sQLiteCursor = queryFinalized2;
                                        tLRPC$ChatFull = tLRPC$ChatFull2;
                                        i2 = 0;
                                        z4 = false;
                                        if (sQLiteCursor != null) {
                                        }
                                        getMessagesController().processChatInfo(j, tLRPC$ChatFull, arrayList, true, z2, z3, arrayList2, hashMap, i2, z4);
                                        throw th;
                                    }
                                }
                                queryFinalized2.dispose();
                                sQLiteCursor = this.database.queryFinalized("SELECT count, end FROM chat_pinned_count WHERE uid = " + j3, new Object[0]);
                                if (sQLiteCursor.next()) {
                                    i3 = 0;
                                    z5 = false;
                                } else {
                                    try {
                                        int intValue2 = sQLiteCursor.intValue(0);
                                        try {
                                            i3 = intValue2;
                                            z5 = sQLiteCursor.intValue(1) != 0;
                                        } catch (Exception e10) {
                                            e = e10;
                                            i2 = intValue2;
                                            z4 = false;
                                            checkSQLException(e);
                                            if (sQLiteCursor != null) {
                                            }
                                            getMessagesController().processChatInfo(j, tLRPC$ChatFull2, arrayList, true, z2, z3, arrayList2, hashMap, i2, z4);
                                            return tLRPC$ChatFull2;
                                        } catch (Throwable th9) {
                                            th = th9;
                                            i2 = intValue2;
                                            tLRPC$ChatFull = tLRPC$ChatFull2;
                                            z4 = false;
                                            if (sQLiteCursor != null) {
                                            }
                                            getMessagesController().processChatInfo(j, tLRPC$ChatFull, arrayList, true, z2, z3, arrayList2, hashMap, i2, z4);
                                            throw th;
                                        }
                                    } catch (Exception e11) {
                                        e = e11;
                                        i2 = 0;
                                        z4 = false;
                                        checkSQLException(e);
                                        if (sQLiteCursor != null) {
                                        }
                                        getMessagesController().processChatInfo(j, tLRPC$ChatFull2, arrayList, true, z2, z3, arrayList2, hashMap, i2, z4);
                                        return tLRPC$ChatFull2;
                                    } catch (Throwable th10) {
                                        th = th10;
                                        tLRPC$ChatFull = tLRPC$ChatFull2;
                                        i2 = 0;
                                        z4 = false;
                                        if (sQLiteCursor != null) {
                                        }
                                        getMessagesController().processChatInfo(j, tLRPC$ChatFull, arrayList, true, z2, z3, arrayList2, hashMap, i2, z4);
                                        throw th;
                                    }
                                }
                                sQLiteCursor.dispose();
                                if (tLRPC$ChatFull2 != null) {
                                    try {
                                        if (tLRPC$ChatFull2.pinned_msg_id != 0) {
                                            try {
                                                if (arrayList2.isEmpty()) {
                                                    i4 = 0;
                                                } else {
                                                    try {
                                                        i4 = 0;
                                                        if (tLRPC$ChatFull2.pinned_msg_id <= arrayList2.get(0).intValue()) {
                                                            sQLiteCursor = null;
                                                            if (arrayList2.isEmpty()) {
                                                                tLRPC$ChatFull3 = tLRPC$ChatFull2;
                                                                try {
                                                                    ArrayList<MessageObject> loadPinnedMessages = getMediaDataController().loadPinnedMessages(j3, z ? j : 0L, arrayList2, false);
                                                                    if (loadPinnedMessages != null) {
                                                                        int size = loadPinnedMessages.size();
                                                                        while (i4 < size) {
                                                                            MessageObject messageObject = loadPinnedMessages.get(i4);
                                                                            hashMap.put(Integer.valueOf(messageObject.getId()), messageObject);
                                                                            i4++;
                                                                        }
                                                                    }
                                                                } catch (Exception e12) {
                                                                    e = e12;
                                                                    tLRPC$ChatFull2 = tLRPC$ChatFull3;
                                                                    i2 = i3;
                                                                    z4 = z5;
                                                                    checkSQLException(e);
                                                                    if (sQLiteCursor != null) {
                                                                    }
                                                                    getMessagesController().processChatInfo(j, tLRPC$ChatFull2, arrayList, true, z2, z3, arrayList2, hashMap, i2, z4);
                                                                    return tLRPC$ChatFull2;
                                                                } catch (Throwable th11) {
                                                                    th = th11;
                                                                    tLRPC$ChatFull = tLRPC$ChatFull3;
                                                                    i2 = i3;
                                                                    z4 = z5;
                                                                    if (sQLiteCursor != null) {
                                                                    }
                                                                    getMessagesController().processChatInfo(j, tLRPC$ChatFull, arrayList, true, z2, z3, arrayList2, hashMap, i2, z4);
                                                                    throw th;
                                                                }
                                                            } else {
                                                                tLRPC$ChatFull3 = tLRPC$ChatFull2;
                                                            }
                                                            getMessagesController().processChatInfo(j, tLRPC$ChatFull3, arrayList, true, z2, z3, arrayList2, hashMap, i3, z5);
                                                            return tLRPC$ChatFull3;
                                                        }
                                                    } catch (Exception e13) {
                                                        e = e13;
                                                        i2 = i3;
                                                        z4 = z5;
                                                        sQLiteCursor = null;
                                                        checkSQLException(e);
                                                        if (sQLiteCursor != null) {
                                                        }
                                                        getMessagesController().processChatInfo(j, tLRPC$ChatFull2, arrayList, true, z2, z3, arrayList2, hashMap, i2, z4);
                                                        return tLRPC$ChatFull2;
                                                    } catch (Throwable th12) {
                                                        th = th12;
                                                        tLRPC$ChatFull = tLRPC$ChatFull2;
                                                        i2 = i3;
                                                        z4 = z5;
                                                        sQLiteCursor = null;
                                                        if (sQLiteCursor != null) {
                                                        }
                                                        getMessagesController().processChatInfo(j, tLRPC$ChatFull, arrayList, true, z2, z3, arrayList2, hashMap, i2, z4);
                                                        throw th;
                                                    }
                                                }
                                                hashMap.put(Integer.valueOf(tLRPC$ChatFull2.pinned_msg_id), null);
                                                if (arrayList2.isEmpty()) {
                                                }
                                                getMessagesController().processChatInfo(j, tLRPC$ChatFull3, arrayList, true, z2, z3, arrayList2, hashMap, i3, z5);
                                                return tLRPC$ChatFull3;
                                            } catch (Exception e14) {
                                                e = e14;
                                                i2 = i3;
                                                z4 = z5;
                                                checkSQLException(e);
                                                if (sQLiteCursor != null) {
                                                }
                                                getMessagesController().processChatInfo(j, tLRPC$ChatFull2, arrayList, true, z2, z3, arrayList2, hashMap, i2, z4);
                                                return tLRPC$ChatFull2;
                                            } catch (Throwable th13) {
                                                th = th13;
                                                tLRPC$ChatFull = tLRPC$ChatFull2;
                                                i2 = i3;
                                                z4 = z5;
                                                if (sQLiteCursor != null) {
                                                }
                                                getMessagesController().processChatInfo(j, tLRPC$ChatFull, arrayList, true, z2, z3, arrayList2, hashMap, i2, z4);
                                                throw th;
                                            }
                                            arrayList2.clear();
                                            arrayList2.add(Integer.valueOf(tLRPC$ChatFull2.pinned_msg_id));
                                            sQLiteCursor = null;
                                        }
                                    } catch (Exception e15) {
                                        e = e15;
                                        sQLiteCursor = null;
                                    } catch (Throwable th14) {
                                        th = th14;
                                        sQLiteCursor = null;
                                    }
                                }
                                sQLiteCursor = null;
                                i4 = 0;
                                if (arrayList2.isEmpty()) {
                                }
                                getMessagesController().processChatInfo(j, tLRPC$ChatFull3, arrayList, true, z2, z3, arrayList2, hashMap, i3, z5);
                                return tLRPC$ChatFull3;
                            } catch (Exception e16) {
                                e = e16;
                                sQLiteCursor = queryFinalized;
                                tLRPC$ChatFull2 = TLdeserialize2;
                                i2 = 0;
                                z4 = false;
                                checkSQLException(e);
                                if (sQLiteCursor != null) {
                                }
                                getMessagesController().processChatInfo(j, tLRPC$ChatFull2, arrayList, true, z2, z3, arrayList2, hashMap, i2, z4);
                                return tLRPC$ChatFull2;
                            } catch (Throwable th15) {
                                th = th15;
                                sQLiteCursor = queryFinalized;
                                tLRPC$ChatFull = TLdeserialize2;
                                i2 = 0;
                                z4 = false;
                                if (sQLiteCursor != null) {
                                }
                                getMessagesController().processChatInfo(j, tLRPC$ChatFull, arrayList, true, z2, z3, arrayList2, hashMap, i2, z4);
                                throw th;
                            }
                        }
                    } catch (Exception e17) {
                        e = e17;
                        sQLiteCursor = queryFinalized;
                        i2 = 0;
                        z4 = false;
                        tLRPC$ChatFull2 = null;
                        checkSQLException(e);
                        if (sQLiteCursor != null) {
                        }
                        getMessagesController().processChatInfo(j, tLRPC$ChatFull2, arrayList, true, z2, z3, arrayList2, hashMap, i2, z4);
                        return tLRPC$ChatFull2;
                    } catch (Throwable th16) {
                        th = th16;
                        sQLiteCursor = queryFinalized;
                        tLRPC$ChatFull = null;
                    }
                }
                sQLiteCursor.dispose();
                if (tLRPC$ChatFull2 != null) {
                }
                sQLiteCursor = null;
                i4 = 0;
                if (arrayList2.isEmpty()) {
                }
                getMessagesController().processChatInfo(j, tLRPC$ChatFull3, arrayList, true, z2, z3, arrayList2, hashMap, i3, z5);
                return tLRPC$ChatFull3;
            } catch (Exception e18) {
                e = e18;
            } catch (Throwable th17) {
                th = th17;
                tLRPC$ChatFull3 = tLRPC$ChatFull2;
            }
            if (sQLiteCursor.next()) {
            }
        } catch (Exception e19) {
            e = e19;
            i2 = 0;
            z4 = false;
            checkSQLException(e);
            if (sQLiteCursor != null) {
            }
            getMessagesController().processChatInfo(j, tLRPC$ChatFull2, arrayList, true, z2, z3, arrayList2, hashMap, i2, z4);
            return tLRPC$ChatFull2;
        } catch (Throwable th18) {
            th = th18;
            TLRPC$ChatFull tLRPC$ChatFull4 = tLRPC$ChatFull2;
            tLRPC$ChatFull = tLRPC$ChatFull4;
            i2 = 0;
            z4 = false;
            if (sQLiteCursor != null) {
            }
            getMessagesController().processChatInfo(j, tLRPC$ChatFull, arrayList, true, z2, z3, arrayList2, hashMap, i2, z4);
            throw th;
        }
        tLRPC$ChatFull2 = null;
        queryFinalized.dispose();
        if (!(tLRPC$ChatFull2 instanceof TLRPC$TL_chatFull)) {
        }
        if (tLRPC$ChatFull2 != null) {
            getUsersInternal("" + tLRPC$ChatFull2.inviterId, arrayList);
        }
        SQLiteDatabase database2 = getMessagesStorage().getDatabase();
        Locale locale2 = Locale.US;
        Object[] objArr2 = new Object[1];
        long j32 = -j;
        int i72 = 0;
        objArr2[0] = Long.valueOf(j32);
        queryFinalized2 = database2.queryFinalized(String.format(locale2, "SELECT mid FROM chat_pinned_v2 WHERE uid = %d ORDER BY mid DESC", objArr2), new Object[0]);
        while (queryFinalized2.next()) {
        }
        queryFinalized2.dispose();
        sQLiteCursor = this.database.queryFinalized("SELECT count, end FROM chat_pinned_count WHERE uid = " + j32, new Object[0]);
    }

    public TLRPC$ChatFull loadChatInfo(long j, boolean z, CountDownLatch countDownLatch, boolean z2, boolean z3) {
        return loadChatInfo(j, z, countDownLatch, z2, z3, 0);
    }

    public TLRPC$ChatFull loadChatInfo(final long j, final boolean z, final CountDownLatch countDownLatch, final boolean z2, final boolean z3, final int i) {
        final TLRPC$ChatFull[] tLRPC$ChatFullArr = new TLRPC$ChatFull[1];
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda209
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$loadChatInfo$120(tLRPC$ChatFullArr, j, z, z2, z3, i, countDownLatch);
            }
        });
        if (countDownLatch != null) {
            try {
                countDownLatch.await();
            } catch (Throwable unused) {
            }
        }
        return tLRPC$ChatFullArr[0];
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadChatInfo$120(TLRPC$ChatFull[] tLRPC$ChatFullArr, long j, boolean z, boolean z2, boolean z3, int i, CountDownLatch countDownLatch) {
        tLRPC$ChatFullArr[0] = loadChatInfoInternal(j, z, z2, z3, i);
        if (countDownLatch != null) {
            countDownLatch.countDown();
        }
    }

    public void processPendingRead(final long j, final int i, final int i2, final int i3) {
        final int i4 = this.lastSavedDate;
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda78
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$processPendingRead$121(j, i, i3, i4, i2);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:110:0x01ab  */
    /* JADX WARN: Removed duplicated region for block: B:112:0x01b0  */
    /* JADX WARN: Removed duplicated region for block: B:119:0x01be  */
    /* JADX WARN: Removed duplicated region for block: B:121:0x01c3  */
    /* JADX WARN: Removed duplicated region for block: B:124:0x01ca  */
    /* JADX WARN: Removed duplicated region for block: B:153:? A[RETURN, SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$processPendingRead$121(long j, int i, int i2, int i3, int i4) {
        SQLiteCursor sQLiteCursor;
        SQLitePreparedStatement sQLitePreparedStatement;
        SQLiteDatabase sQLiteDatabase;
        SQLiteDatabase sQLiteDatabase2;
        int intValue;
        int i5;
        int intValue2;
        int intValue3;
        SQLitePreparedStatement sQLitePreparedStatement2;
        SQLitePreparedStatement sQLitePreparedStatement3;
        SQLitePreparedStatement executeFast;
        int i6 = i4;
        long j2 = 0;
        try {
            int i7 = 0;
            SQLiteCursor queryFinalized = this.database.queryFinalized("SELECT unread_count, inbox_max, last_mid FROM dialogs WHERE did = " + j, new Object[0]);
            try {
                if (queryFinalized.next()) {
                    try {
                        intValue = queryFinalized.intValue(0);
                        i5 = intValue;
                        intValue2 = queryFinalized.intValue(1);
                        j2 = queryFinalized.longValue(2);
                    } catch (Exception e) {
                        e = e;
                        sQLiteCursor = queryFinalized;
                        sQLitePreparedStatement = null;
                        try {
                            checkSQLException(e);
                            if (sQLitePreparedStatement != null) {
                            }
                            if (sQLiteCursor != null) {
                            }
                            sQLiteDatabase2 = this.database;
                            if (sQLiteDatabase2 == null) {
                            }
                            sQLiteDatabase2.commitTransaction();
                        } catch (Throwable th) {
                            th = th;
                            if (sQLitePreparedStatement != null) {
                                sQLitePreparedStatement.dispose();
                            }
                            if (sQLiteCursor != null) {
                                sQLiteCursor.dispose();
                            }
                            sQLiteDatabase = this.database;
                            if (sQLiteDatabase != null) {
                                sQLiteDatabase.commitTransaction();
                            }
                            throw th;
                        }
                    } catch (Throwable th2) {
                        th = th2;
                        sQLiteCursor = queryFinalized;
                        sQLitePreparedStatement = null;
                        if (sQLitePreparedStatement != null) {
                        }
                        if (sQLiteCursor != null) {
                        }
                        sQLiteDatabase = this.database;
                        if (sQLiteDatabase != null) {
                        }
                        throw th;
                    }
                } else {
                    intValue = 0;
                    i5 = 0;
                    intValue2 = 0;
                }
                queryFinalized.dispose();
                this.database.beginTransaction();
                if (!DialogObject.isEncryptedDialog(j)) {
                    try {
                        i6 = Math.max(intValue2, i);
                        SQLitePreparedStatement executeFast2 = this.database.executeFast("UPDATE messages_v2 SET read_state = read_state | 1 WHERE uid = ? AND mid <= ? AND read_state IN(0,2) AND out = 0");
                        try {
                            executeFast2.requery();
                            executeFast2.bindLong(1, j);
                            executeFast2.bindInteger(2, i6);
                            executeFast2.step();
                            executeFast2.dispose();
                            sQLitePreparedStatement3 = executeFast2;
                            if (i6 >= j2) {
                                sQLiteCursor = null;
                            } else {
                                try {
                                    sQLiteCursor = this.database.queryFinalized("SELECT changes()", new Object[0]);
                                    try {
                                        int intValue4 = sQLiteCursor.next() ? sQLiteCursor.intValue(0) + i2 : 0;
                                        sQLiteCursor.dispose();
                                        i7 = Math.max(0, intValue - intValue4);
                                    } catch (Exception e2) {
                                        e = e2;
                                        sQLitePreparedStatement = sQLitePreparedStatement3;
                                        checkSQLException(e);
                                        if (sQLitePreparedStatement != null) {
                                        }
                                        if (sQLiteCursor != null) {
                                        }
                                        sQLiteDatabase2 = this.database;
                                        if (sQLiteDatabase2 == null) {
                                        }
                                        sQLiteDatabase2.commitTransaction();
                                    } catch (Throwable th3) {
                                        th = th3;
                                        sQLitePreparedStatement = sQLitePreparedStatement3;
                                        if (sQLitePreparedStatement != null) {
                                        }
                                        if (sQLiteCursor != null) {
                                        }
                                        sQLiteDatabase = this.database;
                                        if (sQLiteDatabase != null) {
                                        }
                                        throw th;
                                    }
                                } catch (Exception e3) {
                                    e = e3;
                                    sQLitePreparedStatement = sQLitePreparedStatement3;
                                    sQLiteCursor = null;
                                    checkSQLException(e);
                                    if (sQLitePreparedStatement != null) {
                                    }
                                    if (sQLiteCursor != null) {
                                    }
                                    sQLiteDatabase2 = this.database;
                                    if (sQLiteDatabase2 == null) {
                                    }
                                    sQLiteDatabase2.commitTransaction();
                                } catch (Throwable th4) {
                                    th = th4;
                                    sQLitePreparedStatement = sQLitePreparedStatement3;
                                    sQLiteCursor = null;
                                    if (sQLitePreparedStatement != null) {
                                    }
                                    if (sQLiteCursor != null) {
                                    }
                                    sQLiteDatabase = this.database;
                                    if (sQLiteDatabase != null) {
                                    }
                                    throw th;
                                }
                            }
                            executeFast = this.database.executeFast("DELETE FROM unread_push_messages WHERE uid = ? AND mid <= ?");
                        } catch (Exception e4) {
                            e = e4;
                            sQLitePreparedStatement3 = executeFast2;
                        } catch (Throwable th5) {
                            th = th5;
                            sQLitePreparedStatement3 = executeFast2;
                        }
                    } catch (Exception e5) {
                        e = e5;
                        sQLiteCursor = null;
                        sQLitePreparedStatement = null;
                        checkSQLException(e);
                        if (sQLitePreparedStatement != null) {
                        }
                        if (sQLiteCursor != null) {
                        }
                        sQLiteDatabase2 = this.database;
                        if (sQLiteDatabase2 == null) {
                        }
                        sQLiteDatabase2.commitTransaction();
                    } catch (Throwable th6) {
                        th = th6;
                        sQLiteCursor = null;
                        sQLitePreparedStatement = null;
                        if (sQLitePreparedStatement != null) {
                        }
                        if (sQLiteCursor != null) {
                        }
                        sQLiteDatabase = this.database;
                        if (sQLiteDatabase != null) {
                        }
                        throw th;
                    }
                    try {
                        executeFast.requery();
                        executeFast.bindLong(1, j);
                        executeFast.bindInteger(2, i6);
                        executeFast.step();
                        executeFast.dispose();
                        SQLitePreparedStatement executeFast3 = this.database.executeFast("DELETE FROM unread_push_messages WHERE uid = ? AND date <= ?");
                        executeFast3.requery();
                        executeFast3.bindLong(1, j);
                        executeFast3.bindInteger(2, i3);
                        executeFast3.step();
                        executeFast3.dispose();
                    } catch (Exception e6) {
                        e = e6;
                        sQLitePreparedStatement = sQLitePreparedStatement2;
                        checkSQLException(e);
                        if (sQLitePreparedStatement != null) {
                        }
                        if (sQLiteCursor != null) {
                        }
                        sQLiteDatabase2 = this.database;
                        if (sQLiteDatabase2 == null) {
                        }
                        sQLiteDatabase2.commitTransaction();
                    } catch (Throwable th7) {
                        th = th7;
                        sQLitePreparedStatement = sQLitePreparedStatement2;
                        if (sQLitePreparedStatement != null) {
                        }
                        if (sQLiteCursor != null) {
                        }
                        sQLiteDatabase = this.database;
                        if (sQLiteDatabase != null) {
                        }
                        throw th;
                    }
                } else {
                    sQLitePreparedStatement = this.database.executeFast("UPDATE messages_v2 SET read_state = read_state | 1 WHERE uid = ? AND mid >= ? AND read_state IN(0,2) AND out = 0");
                    try {
                        sQLitePreparedStatement.requery();
                        sQLitePreparedStatement.bindLong(1, j);
                        sQLitePreparedStatement.bindInteger(2, i6);
                        sQLitePreparedStatement.step();
                        sQLitePreparedStatement.dispose();
                        if (i6 <= j2) {
                            sQLiteCursor = null;
                        } else {
                            sQLiteCursor = this.database.queryFinalized("SELECT changes()", new Object[0]);
                            try {
                                if (sQLiteCursor.next()) {
                                    try {
                                        intValue3 = sQLiteCursor.intValue(0) + i2;
                                    } catch (Exception e7) {
                                        e = e7;
                                        sQLitePreparedStatement = null;
                                        checkSQLException(e);
                                        if (sQLitePreparedStatement != null) {
                                        }
                                        if (sQLiteCursor != null) {
                                        }
                                        sQLiteDatabase2 = this.database;
                                        if (sQLiteDatabase2 == null) {
                                        }
                                        sQLiteDatabase2.commitTransaction();
                                    } catch (Throwable th8) {
                                        th = th8;
                                        sQLitePreparedStatement = null;
                                        if (sQLitePreparedStatement != null) {
                                        }
                                        if (sQLiteCursor != null) {
                                        }
                                        sQLiteDatabase = this.database;
                                        if (sQLiteDatabase != null) {
                                        }
                                        throw th;
                                    }
                                } else {
                                    intValue3 = 0;
                                }
                                sQLiteCursor.dispose();
                                i7 = Math.max(0, intValue - intValue3);
                            } catch (Exception e8) {
                                e = e8;
                                sQLitePreparedStatement2 = null;
                                sQLitePreparedStatement = sQLitePreparedStatement2;
                                checkSQLException(e);
                                if (sQLitePreparedStatement != null) {
                                }
                                if (sQLiteCursor != null) {
                                }
                                sQLiteDatabase2 = this.database;
                                if (sQLiteDatabase2 == null) {
                                }
                                sQLiteDatabase2.commitTransaction();
                            } catch (Throwable th9) {
                                th = th9;
                                sQLitePreparedStatement2 = null;
                                sQLitePreparedStatement = sQLitePreparedStatement2;
                                if (sQLitePreparedStatement != null) {
                                }
                                if (sQLiteCursor != null) {
                                }
                                sQLiteDatabase = this.database;
                                if (sQLiteDatabase != null) {
                                }
                                throw th;
                            }
                        }
                    } catch (Exception e9) {
                        e = e9;
                        sQLiteCursor = null;
                        checkSQLException(e);
                        if (sQLitePreparedStatement != null) {
                            sQLitePreparedStatement.dispose();
                        }
                        if (sQLiteCursor != null) {
                            sQLiteCursor.dispose();
                        }
                        sQLiteDatabase2 = this.database;
                        if (sQLiteDatabase2 == null) {
                            return;
                        }
                        sQLiteDatabase2.commitTransaction();
                    } catch (Throwable th10) {
                        th = th10;
                        sQLiteCursor = null;
                        if (sQLitePreparedStatement != null) {
                        }
                        if (sQLiteCursor != null) {
                        }
                        sQLiteDatabase = this.database;
                        if (sQLiteDatabase != null) {
                        }
                        throw th;
                    }
                }
                SQLitePreparedStatement executeFast4 = this.database.executeFast("UPDATE dialogs SET unread_count = ?, inbox_max = ? WHERE did = ?");
                executeFast4.requery();
                executeFast4.bindInteger(1, i7);
                executeFast4.bindInteger(2, i6);
                executeFast4.bindLong(3, j);
                executeFast4.step();
                executeFast4.dispose();
                this.database.commitTransaction();
                if (i5 == 0 || i7 != 0 || isForum(j)) {
                    sQLitePreparedStatement2 = null;
                } else {
                    LongSparseIntArray longSparseIntArray = new LongSparseIntArray();
                    longSparseIntArray.put(j, i7);
                    sQLitePreparedStatement2 = null;
                    updateFiltersReadCounter(longSparseIntArray, null, true);
                }
                updateWidgets(j);
                if (sQLiteCursor != null) {
                    sQLiteCursor.dispose();
                }
                sQLiteDatabase2 = this.database;
                if (sQLiteDatabase2 == null) {
                    return;
                }
            } catch (Exception e10) {
                e = e10;
                sQLitePreparedStatement = null;
                sQLiteCursor = queryFinalized;
            } catch (Throwable th11) {
                th = th11;
                sQLitePreparedStatement = null;
                sQLiteCursor = queryFinalized;
            }
        } catch (Exception e11) {
            e = e11;
            sQLiteCursor = null;
            sQLitePreparedStatement = null;
        } catch (Throwable th12) {
            th = th12;
            sQLiteCursor = null;
            sQLitePreparedStatement = null;
        }
        sQLiteDatabase2.commitTransaction();
    }

    public void putContacts(ArrayList<TLRPC$TL_contact> arrayList, final boolean z) {
        if (!arrayList.isEmpty() || z) {
            final ArrayList arrayList2 = new ArrayList(arrayList);
            this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda205
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesStorage.this.lambda$putContacts$122(z, arrayList2);
                }
            });
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:28:0x0063  */
    /* JADX WARN: Removed duplicated region for block: B:34:0x0070  */
    /* JADX WARN: Removed duplicated region for block: B:37:0x0077  */
    /* JADX WARN: Removed duplicated region for block: B:50:? A[RETURN, SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$putContacts$122(boolean z, ArrayList arrayList) {
        Throwable th;
        SQLiteDatabase sQLiteDatabase;
        Exception e;
        SQLiteDatabase sQLiteDatabase2;
        SQLitePreparedStatement sQLitePreparedStatement = null;
        if (z) {
            try {
                try {
                    this.database.executeFast("DELETE FROM contacts WHERE 1").stepThis().dispose();
                } catch (Exception e2) {
                    e = e2;
                    checkSQLException(e);
                    if (sQLitePreparedStatement != null) {
                        sQLitePreparedStatement.dispose();
                    }
                    sQLiteDatabase2 = this.database;
                    if (sQLiteDatabase2 == null) {
                        return;
                    }
                    sQLiteDatabase2.commitTransaction();
                }
            } catch (Throwable th2) {
                th = th2;
                if (sQLitePreparedStatement != null) {
                    sQLitePreparedStatement.dispose();
                }
                sQLiteDatabase = this.database;
                if (sQLiteDatabase != null) {
                    sQLiteDatabase.commitTransaction();
                }
                throw th;
            }
        }
        this.database.beginTransaction();
        SQLitePreparedStatement executeFast = this.database.executeFast("REPLACE INTO contacts VALUES(?, ?)");
        for (int i = 0; i < arrayList.size(); i++) {
            try {
                TLRPC$TL_contact tLRPC$TL_contact = (TLRPC$TL_contact) arrayList.get(i);
                executeFast.requery();
                int i2 = 1;
                executeFast.bindLong(1, tLRPC$TL_contact.user_id);
                if (!tLRPC$TL_contact.mutual) {
                    i2 = 0;
                }
                executeFast.bindInteger(2, i2);
                executeFast.step();
            } catch (Exception e3) {
                sQLitePreparedStatement = executeFast;
                e = e3;
                checkSQLException(e);
                if (sQLitePreparedStatement != null) {
                }
                sQLiteDatabase2 = this.database;
                if (sQLiteDatabase2 == null) {
                }
                sQLiteDatabase2.commitTransaction();
            } catch (Throwable th3) {
                sQLitePreparedStatement = executeFast;
                th = th3;
                if (sQLitePreparedStatement != null) {
                }
                sQLiteDatabase = this.database;
                if (sQLiteDatabase != null) {
                }
                throw th;
            }
        }
        executeFast.dispose();
        this.database.commitTransaction();
        sQLiteDatabase2 = this.database;
        if (sQLiteDatabase2 == null) {
            return;
        }
        sQLiteDatabase2.commitTransaction();
    }

    public void deleteContacts(final ArrayList<Long> arrayList) {
        if (arrayList == null || arrayList.isEmpty()) {
            return;
        }
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda141
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$deleteContacts$123(arrayList);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$deleteContacts$123(ArrayList arrayList) {
        try {
            String join = TextUtils.join(",", arrayList);
            SQLiteDatabase sQLiteDatabase = this.database;
            sQLiteDatabase.executeFast("DELETE FROM contacts WHERE uid IN(" + join + ")").stepThis().dispose();
        } catch (Exception e) {
            checkSQLException(e);
        }
    }

    public void applyPhoneBookUpdates(final String str, final String str2) {
        if (TextUtils.isEmpty(str)) {
            return;
        }
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda136
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$applyPhoneBookUpdates$124(str, str2);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$applyPhoneBookUpdates$124(String str, String str2) {
        try {
            if (str.length() != 0) {
                this.database.executeFast(String.format(Locale.US, "UPDATE user_phones_v7 SET deleted = 0 WHERE sphone IN(%s)", str)).stepThis().dispose();
            }
            if (str2.length() != 0) {
                this.database.executeFast(String.format(Locale.US, "UPDATE user_phones_v7 SET deleted = 1 WHERE sphone IN(%s)", str2)).stepThis().dispose();
            }
        } catch (Exception e) {
            checkSQLException(e);
        }
    }

    public void putCachedPhoneBook(final HashMap<String, ContactsController.Contact> hashMap, final boolean z, boolean z2) {
        if (hashMap != null) {
            if (!hashMap.isEmpty() || z || z2) {
                this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda163
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesStorage.this.lambda$putCachedPhoneBook$125(hashMap, z);
                    }
                });
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:46:0x012b  */
    /* JADX WARN: Removed duplicated region for block: B:48:0x0130  */
    /* JADX WARN: Removed duplicated region for block: B:82:? A[RETURN, SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$putCachedPhoneBook$125(HashMap hashMap, boolean z) {
        SQLitePreparedStatement sQLitePreparedStatement;
        SQLiteDatabase sQLiteDatabase;
        SQLitePreparedStatement executeFast;
        SQLitePreparedStatement sQLitePreparedStatement2 = null;
        try {
            try {
                if (BuildVars.LOGS_ENABLED) {
                    FileLog.d(this.currentAccount + " save contacts to db " + hashMap.size());
                }
                this.database.executeFast("DELETE FROM user_contacts_v7 WHERE 1").stepThis().dispose();
                this.database.executeFast("DELETE FROM user_phones_v7 WHERE 1").stepThis().dispose();
                this.database.beginTransaction();
                executeFast = this.database.executeFast("REPLACE INTO user_contacts_v7 VALUES(?, ?, ?, ?, ?)");
                try {
                    sQLitePreparedStatement = this.database.executeFast("REPLACE INTO user_phones_v7 VALUES(?, ?, ?, ?)");
                } catch (Exception e) {
                    e = e;
                    sQLitePreparedStatement = null;
                } catch (Throwable th) {
                    th = th;
                    sQLitePreparedStatement = null;
                }
            } catch (Throwable th2) {
                th = th2;
            }
        } catch (Exception e2) {
            e = e2;
            sQLitePreparedStatement = null;
        } catch (Throwable th3) {
            th = th3;
            sQLitePreparedStatement = null;
        }
        try {
            Iterator it = hashMap.entrySet().iterator();
            while (true) {
                if (!it.hasNext()) {
                    break;
                }
                ContactsController.Contact contact = (ContactsController.Contact) ((Map.Entry) it.next()).getValue();
                if (!contact.phones.isEmpty() && !contact.shortPhones.isEmpty()) {
                    executeFast.requery();
                    executeFast.bindString(1, contact.key);
                    executeFast.bindInteger(2, contact.contact_id);
                    executeFast.bindString(3, contact.first_name);
                    executeFast.bindString(4, contact.last_name);
                    executeFast.bindInteger(5, contact.imported);
                    executeFast.step();
                    for (int i = 0; i < contact.phones.size(); i++) {
                        sQLitePreparedStatement.requery();
                        sQLitePreparedStatement.bindString(1, contact.key);
                        sQLitePreparedStatement.bindString(2, contact.phones.get(i));
                        sQLitePreparedStatement.bindString(3, contact.shortPhones.get(i));
                        sQLitePreparedStatement.bindInteger(4, contact.phoneDeleted.get(i).intValue());
                        sQLitePreparedStatement.step();
                    }
                }
            }
            executeFast.dispose();
            try {
                sQLitePreparedStatement.dispose();
                this.database.commitTransaction();
                if (z) {
                    this.database.executeFast("DROP TABLE IF EXISTS user_contacts_v6;").stepThis().dispose();
                    this.database.executeFast("DROP TABLE IF EXISTS user_phones_v6;").stepThis().dispose();
                    getCachedPhoneBook(false);
                }
                sQLiteDatabase = this.database;
                if (sQLiteDatabase == null) {
                    return;
                }
            } catch (Exception e3) {
                e = e3;
                checkSQLException(e);
                if (sQLitePreparedStatement2 != null) {
                    sQLitePreparedStatement2.dispose();
                }
                if (sQLitePreparedStatement != null) {
                    sQLitePreparedStatement.dispose();
                }
                sQLiteDatabase = this.database;
                if (sQLiteDatabase == null) {
                    return;
                }
                sQLiteDatabase.commitTransaction();
            }
        } catch (Exception e4) {
            e = e4;
            sQLitePreparedStatement2 = executeFast;
            checkSQLException(e);
            if (sQLitePreparedStatement2 != null) {
            }
            if (sQLitePreparedStatement != null) {
            }
            sQLiteDatabase = this.database;
            if (sQLiteDatabase == null) {
            }
            sQLiteDatabase.commitTransaction();
        } catch (Throwable th4) {
            th = th4;
            sQLitePreparedStatement2 = executeFast;
            if (sQLitePreparedStatement2 != null) {
                sQLitePreparedStatement2.dispose();
            }
            if (sQLitePreparedStatement != null) {
                sQLitePreparedStatement.dispose();
            }
            SQLiteDatabase sQLiteDatabase2 = this.database;
            if (sQLiteDatabase2 != null) {
                sQLiteDatabase2.commitTransaction();
            }
            throw th;
        }
        sQLiteDatabase.commitTransaction();
    }

    public void getCachedPhoneBook(final boolean z) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda198
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$getCachedPhoneBook$126(z);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Code restructure failed: missing block: B:72:0x013a, code lost:
        if (r10 != null) goto L75;
     */
    /* JADX WARN: Removed duplicated region for block: B:53:0x00f9 A[Catch: all -> 0x0132, TRY_LEAVE, TryCatch #2 {all -> 0x0132, blocks: (B:51:0x00e9, B:53:0x00f9), top: B:132:0x00e9 }] */
    /* JADX WARN: Removed duplicated region for block: B:66:0x012a  */
    /* JADX WARN: Removed duplicated region for block: B:76:0x0144 A[Catch: all -> 0x01ee, Exception -> 0x01f0, TRY_ENTER, TryCatch #0 {Exception -> 0x01f0, blocks: (B:76:0x0144, B:79:0x0169, B:81:0x016f, B:83:0x017b, B:85:0x019d, B:86:0x019f, B:88:0x01a3, B:89:0x01a5, B:90:0x01a8, B:93:0x01b0, B:96:0x01bc, B:98:0x01c2, B:100:0x01c8, B:101:0x01cc, B:103:0x01ea, B:77:0x015e), top: B:128:0x0142, outer: #8 }] */
    /* JADX WARN: Removed duplicated region for block: B:77:0x015e A[Catch: all -> 0x01ee, Exception -> 0x01f0, TryCatch #0 {Exception -> 0x01f0, blocks: (B:76:0x0144, B:79:0x0169, B:81:0x016f, B:83:0x017b, B:85:0x019d, B:86:0x019f, B:88:0x01a3, B:89:0x01a5, B:90:0x01a8, B:93:0x01b0, B:96:0x01bc, B:98:0x01c2, B:100:0x01c8, B:101:0x01cc, B:103:0x01ea, B:77:0x015e), top: B:128:0x0142, outer: #8 }] */
    /* JADX WARN: Removed duplicated region for block: B:81:0x016f A[Catch: all -> 0x01ee, Exception -> 0x01f0, TryCatch #0 {Exception -> 0x01f0, blocks: (B:76:0x0144, B:79:0x0169, B:81:0x016f, B:83:0x017b, B:85:0x019d, B:86:0x019f, B:88:0x01a3, B:89:0x01a5, B:90:0x01a8, B:93:0x01b0, B:96:0x01bc, B:98:0x01c2, B:100:0x01c8, B:101:0x01cc, B:103:0x01ea, B:77:0x015e), top: B:128:0x0142, outer: #8 }] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$getCachedPhoneBook$126(boolean z) {
        SQLiteCursor sQLiteCursor;
        int i;
        int i2;
        int i3;
        HashMap<String, ContactsController.Contact> hashMap;
        SQLiteCursor queryFinalized;
        SQLiteCursor sQLiteCursor2;
        boolean next;
        int i4 = 6;
        try {
            SQLiteCursor queryFinalized2 = this.database.queryFinalized("SELECT name FROM sqlite_master WHERE type='table' AND name='user_contacts_v6'", new Object[0]);
            try {
                next = queryFinalized2.next();
                queryFinalized2.dispose();
            } catch (Throwable th) {
                th = th;
                sQLiteCursor = sQLiteCursor2;
            }
        } catch (Throwable th2) {
            th = th2;
            sQLiteCursor = null;
        }
        if (next) {
            SQLiteCursor queryFinalized3 = this.database.queryFinalized("SELECT COUNT(uid) FROM user_contacts_v6 WHERE 1", new Object[0]);
            int min = queryFinalized3.next() ? Math.min(5000, queryFinalized3.intValue(0)) : 16;
            queryFinalized3.dispose();
            SparseArray<ContactsController.Contact> sparseArray = new SparseArray<>(min);
            SQLiteCursor queryFinalized4 = this.database.queryFinalized("SELECT us.uid, us.fname, us.sname, up.phone, up.sphone, up.deleted, us.imported FROM user_contacts_v6 as us LEFT JOIN user_phones_v6 as up ON us.uid = up.uid WHERE 1", new Object[0]);
            while (queryFinalized4.next()) {
                try {
                    int intValue = queryFinalized4.intValue(0);
                    ContactsController.Contact contact = sparseArray.get(intValue);
                    if (contact == null) {
                        contact = new ContactsController.Contact();
                        contact.first_name = queryFinalized4.stringValue(1);
                        contact.last_name = queryFinalized4.stringValue(2);
                        contact.imported = queryFinalized4.intValue(i4);
                        if (contact.first_name == null) {
                            contact.first_name = "";
                        }
                        if (contact.last_name == null) {
                            contact.last_name = "";
                        }
                        contact.contact_id = intValue;
                        sparseArray.put(intValue, contact);
                    }
                    String stringValue = queryFinalized4.stringValue(3);
                    if (stringValue != null) {
                        contact.phones.add(stringValue);
                        String stringValue2 = queryFinalized4.stringValue(4);
                        if (stringValue2 != null) {
                            if (stringValue2.length() == 8 && stringValue.length() != 8) {
                                stringValue2 = PhoneFormat.stripExceptNumbers(stringValue);
                            }
                            contact.shortPhones.add(stringValue2);
                            contact.phoneDeleted.add(Integer.valueOf(queryFinalized4.intValue(5)));
                            contact.phoneTypes.add("");
                            if (sparseArray.size() == 5000) {
                                break;
                            }
                            i4 = 6;
                        }
                    }
                } catch (Throwable th3) {
                    th = th3;
                    sQLiteCursor = queryFinalized4;
                    try {
                        checkSQLException(th);
                        if (sQLiteCursor != null) {
                            sQLiteCursor.dispose();
                        }
                        try {
                            sQLiteCursor = this.database.queryFinalized("SELECT COUNT(key) FROM user_contacts_v7 WHERE 1", new Object[0]);
                            if (sQLiteCursor.next()) {
                            }
                        } catch (Throwable th4) {
                            th = th4;
                            i = 0;
                        }
                        sQLiteCursor.dispose();
                        hashMap = new HashMap<>(i2);
                        try {
                            try {
                                if (i3 == 0) {
                                }
                                sQLiteCursor = queryFinalized;
                                while (sQLiteCursor.next()) {
                                }
                                sQLiteCursor.dispose();
                            } catch (Exception e) {
                                hashMap.clear();
                                checkSQLException(e);
                                if (sQLiteCursor != null) {
                                    sQLiteCursor.dispose();
                                }
                            }
                            getContactsController().performSyncPhoneBook(hashMap, true, true, false, false, !z, false);
                        } catch (Throwable th5) {
                            throw th5;
                        }
                    } finally {
                        if (sQLiteCursor != null) {
                            sQLiteCursor.dispose();
                        }
                    }
                }
            }
            queryFinalized4.dispose();
            getContactsController().migratePhoneBookToV7(sparseArray);
            return;
        }
        sQLiteCursor = null;
        sQLiteCursor = this.database.queryFinalized("SELECT COUNT(key) FROM user_contacts_v7 WHERE 1", new Object[0]);
        if (sQLiteCursor.next()) {
            i = 0;
            i2 = 16;
            i3 = 0;
        } else {
            i = sQLiteCursor.intValue(0);
            try {
                i2 = Math.min(5000, i);
                i3 = i > 5000 ? i - 5000 : 0;
                try {
                    if (BuildVars.LOGS_ENABLED) {
                        FileLog.d(this.currentAccount + " current cached contacts count = " + i);
                    }
                } catch (Throwable th6) {
                    th = th6;
                    try {
                        checkSQLException(th);
                    } finally {
                        if (sQLiteCursor != null) {
                            sQLiteCursor.dispose();
                        }
                    }
                }
            } catch (Throwable th7) {
                th = th7;
                i2 = 16;
                i3 = 0;
                checkSQLException(th);
            }
        }
        sQLiteCursor.dispose();
        hashMap = new HashMap<>(i2);
        if (i3 == 0) {
            SQLiteDatabase sQLiteDatabase = this.database;
            queryFinalized = sQLiteDatabase.queryFinalized("SELECT us.key, us.uid, us.fname, us.sname, up.phone, up.sphone, up.deleted, us.imported FROM user_contacts_v7 as us LEFT JOIN user_phones_v7 as up ON us.key = up.key WHERE 1 LIMIT 0," + i, new Object[0]);
        } else {
            queryFinalized = this.database.queryFinalized("SELECT us.key, us.uid, us.fname, us.sname, up.phone, up.sphone, up.deleted, us.imported FROM user_contacts_v7 as us LEFT JOIN user_phones_v7 as up ON us.key = up.key WHERE 1", new Object[0]);
        }
        sQLiteCursor = queryFinalized;
        while (sQLiteCursor.next()) {
            String stringValue3 = sQLiteCursor.stringValue(0);
            ContactsController.Contact contact2 = hashMap.get(stringValue3);
            if (contact2 == null) {
                contact2 = new ContactsController.Contact();
                contact2.contact_id = sQLiteCursor.intValue(1);
                contact2.first_name = sQLiteCursor.stringValue(2);
                contact2.last_name = sQLiteCursor.stringValue(3);
                contact2.imported = sQLiteCursor.intValue(7);
                if (contact2.first_name == null) {
                    contact2.first_name = "";
                }
                if (contact2.last_name == null) {
                    contact2.last_name = "";
                }
                hashMap.put(stringValue3, contact2);
            }
            String stringValue4 = sQLiteCursor.stringValue(4);
            if (stringValue4 != null) {
                contact2.phones.add(stringValue4);
                String stringValue5 = sQLiteCursor.stringValue(5);
                if (stringValue5 != null) {
                    if (stringValue5.length() == 8 && stringValue4.length() != 8) {
                        stringValue5 = PhoneFormat.stripExceptNumbers(stringValue4);
                    }
                    contact2.shortPhones.add(stringValue5);
                    contact2.phoneDeleted.add(Integer.valueOf(sQLiteCursor.intValue(6)));
                    contact2.phoneTypes.add("");
                    if (hashMap.size() == 5000) {
                        break;
                    }
                }
            }
        }
        sQLiteCursor.dispose();
        getContactsController().performSyncPhoneBook(hashMap, true, true, false, false, !z, false);
    }

    public void getContacts() {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda8
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$getContacts$127();
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:34:0x0080  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$getContacts$127() {
        SQLiteCursor sQLiteCursor;
        Exception e;
        ArrayList<TLRPC$TL_contact> arrayList = new ArrayList<>();
        ArrayList<TLRPC$User> arrayList2 = new ArrayList<>();
        SQLiteCursor sQLiteCursor2 = null;
        try {
            sQLiteCursor = this.database.queryFinalized("SELECT * FROM contacts WHERE 1", new Object[0]);
            try {
                try {
                    StringBuilder sb = new StringBuilder();
                    while (sQLiteCursor.next()) {
                        TLRPC$TL_contact tLRPC$TL_contact = new TLRPC$TL_contact();
                        tLRPC$TL_contact.user_id = sQLiteCursor.intValue(0);
                        tLRPC$TL_contact.mutual = sQLiteCursor.intValue(1) == 1;
                        if (sb.length() != 0) {
                            sb.append(",");
                        }
                        arrayList.add(tLRPC$TL_contact);
                        sb.append(tLRPC$TL_contact.user_id);
                    }
                    sQLiteCursor.dispose();
                    if (sb.length() != 0) {
                        getUsersInternal(sb.toString(), arrayList2);
                    }
                } catch (Exception e2) {
                    e = e2;
                    arrayList.clear();
                    arrayList2.clear();
                    checkSQLException(e);
                    if (sQLiteCursor != null) {
                        sQLiteCursor.dispose();
                    }
                    getContactsController().processLoadedContacts(arrayList, arrayList2, 1);
                }
            } catch (Throwable th) {
                th = th;
                sQLiteCursor2 = sQLiteCursor;
                if (sQLiteCursor2 != null) {
                    sQLiteCursor2.dispose();
                }
                throw th;
            }
        } catch (Exception e3) {
            sQLiteCursor = null;
            e = e3;
        } catch (Throwable th2) {
            th = th2;
            if (sQLiteCursor2 != null) {
            }
            throw th;
        }
        getContactsController().processLoadedContacts(arrayList, arrayList2, 1);
    }

    public void getUnsentMessages(final int i) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda27
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$getUnsentMessages$128(i);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:116:0x02bc  */
    /* JADX WARN: Type inference failed for: r13v2 */
    /* JADX WARN: Type inference failed for: r13v3, types: [boolean, int] */
    /* JADX WARN: Type inference failed for: r13v8 */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$getUnsentMessages$128(int i) {
        SQLiteCursor sQLiteCursor;
        SQLiteCursor sQLiteCursor2;
        SQLiteCursor sQLiteCursor3;
        int i2;
        ArrayList<Long> arrayList;
        ArrayList<Long> arrayList2;
        ArrayList<Long> arrayList3;
        try {
            SparseArray sparseArray = new SparseArray();
            ArrayList<TLRPC$Message> arrayList4 = new ArrayList<>();
            ArrayList arrayList5 = new ArrayList();
            ArrayList<TLRPC$User> arrayList6 = new ArrayList<>();
            ArrayList<TLRPC$Chat> arrayList7 = new ArrayList<>();
            ArrayList<TLRPC$EncryptedChat> arrayList8 = new ArrayList<>();
            ArrayList<Long> arrayList9 = new ArrayList<>();
            ArrayList arrayList10 = new ArrayList();
            ArrayList arrayList11 = new ArrayList();
            SQLiteDatabase sQLiteDatabase = this.database;
            ?? r13 = 0;
            SQLiteCursor queryFinalized = sQLiteDatabase.queryFinalized("SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.uid, s.seq_in, s.seq_out, m.ttl FROM messages_v2 as m LEFT JOIN randoms_v2 as r ON r.mid = m.mid AND r.uid = m.uid LEFT JOIN messages_seq as s ON m.mid = s.mid WHERE (m.mid < 0 AND m.send_state = 1) OR (m.mid > 0 AND m.send_state = 3) ORDER BY m.mid DESC LIMIT " + i, new Object[0]);
            while (true) {
                try {
                    i2 = 1;
                    if (!queryFinalized.next()) {
                        break;
                    }
                    NativeByteBuffer byteBufferValue = queryFinalized.byteBufferValue(1);
                    if (byteBufferValue != null) {
                        TLRPC$Message TLdeserialize = TLRPC$Message.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                        TLdeserialize.send_state = queryFinalized.intValue(2);
                        TLdeserialize.readAttachPath(byteBufferValue, getUserConfig().clientUserId);
                        byteBufferValue.reuse();
                        if (sparseArray.indexOfKey(TLdeserialize.id) < 0) {
                            MessageObject.setUnreadFlags(TLdeserialize, queryFinalized.intValue(0));
                            TLdeserialize.id = queryFinalized.intValue(3);
                            TLdeserialize.date = queryFinalized.intValue(4);
                            if (!queryFinalized.isNull(5)) {
                                TLdeserialize.random_id = queryFinalized.longValue(5);
                            }
                            TLdeserialize.dialog_id = queryFinalized.longValue(6);
                            TLdeserialize.seq_in = queryFinalized.intValue(7);
                            TLdeserialize.seq_out = queryFinalized.intValue(8);
                            TLdeserialize.ttl = queryFinalized.intValue(9);
                            arrayList4.add(TLdeserialize);
                            sparseArray.put(TLdeserialize.id, TLdeserialize);
                            if (DialogObject.isEncryptedDialog(TLdeserialize.dialog_id)) {
                                int encryptedChatId = DialogObject.getEncryptedChatId(TLdeserialize.dialog_id);
                                if (!arrayList11.contains(Integer.valueOf(encryptedChatId))) {
                                    arrayList11.add(Integer.valueOf(encryptedChatId));
                                }
                            } else if (DialogObject.isUserDialog(TLdeserialize.dialog_id)) {
                                if (!arrayList9.contains(Long.valueOf(TLdeserialize.dialog_id))) {
                                    arrayList9.add(Long.valueOf(TLdeserialize.dialog_id));
                                }
                            } else if (!arrayList10.contains(Long.valueOf(-TLdeserialize.dialog_id))) {
                                arrayList10.add(Long.valueOf(-TLdeserialize.dialog_id));
                            }
                            addUsersAndChatsFromMessage(TLdeserialize, arrayList9, arrayList10, null);
                            if (TLdeserialize.send_state != 3 && ((TLdeserialize.peer_id.channel_id == 0 && !MessageObject.isUnread(TLdeserialize) && !DialogObject.isEncryptedDialog(TLdeserialize.dialog_id)) || TLdeserialize.id > 0)) {
                                TLdeserialize.send_state = 0;
                            }
                        }
                    }
                } catch (Exception e) {
                    e = e;
                    sQLiteCursor = sQLiteCursor3;
                    try {
                        checkSQLException(e);
                        if (sQLiteCursor != null) {
                            sQLiteCursor.dispose();
                            return;
                        }
                        return;
                    } catch (Throwable th) {
                        th = th;
                        if (sQLiteCursor != null) {
                            sQLiteCursor.dispose();
                        }
                        throw th;
                    }
                } catch (Throwable th2) {
                    th = th2;
                    sQLiteCursor = sQLiteCursor2;
                    if (sQLiteCursor != null) {
                    }
                    throw th;
                }
            }
            queryFinalized.dispose();
            SQLiteCursor queryFinalized2 = this.database.queryFinalized("SELECT m.data, m.send_state, m.mid, m.date, r.random_id, m.uid, m.ttl FROM scheduled_messages_v2 as m LEFT JOIN randoms_v2 as r ON r.mid = m.mid AND r.uid = m.uid WHERE (m.mid < 0 AND m.send_state = 1) OR (m.mid > 0 AND m.send_state = 3) ORDER BY date ASC", new Object[0]);
            while (queryFinalized2.next()) {
                NativeByteBuffer byteBufferValue2 = queryFinalized2.byteBufferValue(r13);
                if (byteBufferValue2 != null) {
                    TLRPC$Message TLdeserialize2 = TLRPC$Message.TLdeserialize(byteBufferValue2, byteBufferValue2.readInt32(r13), r13);
                    TLdeserialize2.send_state = queryFinalized2.intValue(i2);
                    arrayList2 = arrayList9;
                    TLdeserialize2.readAttachPath(byteBufferValue2, getUserConfig().clientUserId);
                    byteBufferValue2.reuse();
                    if (sparseArray.indexOfKey(TLdeserialize2.id) < 0) {
                        TLdeserialize2.id = queryFinalized2.intValue(2);
                        TLdeserialize2.date = queryFinalized2.intValue(3);
                        if (!queryFinalized2.isNull(4)) {
                            TLdeserialize2.random_id = queryFinalized2.longValue(4);
                        }
                        TLdeserialize2.dialog_id = queryFinalized2.longValue(5);
                        TLdeserialize2.ttl = queryFinalized2.intValue(6);
                        arrayList5.add(TLdeserialize2);
                        sparseArray.put(TLdeserialize2.id, TLdeserialize2);
                        if (DialogObject.isEncryptedDialog(TLdeserialize2.dialog_id)) {
                            int encryptedChatId2 = DialogObject.getEncryptedChatId(TLdeserialize2.dialog_id);
                            if (!arrayList11.contains(Integer.valueOf(encryptedChatId2))) {
                                arrayList11.add(Integer.valueOf(encryptedChatId2));
                            }
                            arrayList3 = arrayList2;
                        } else if (DialogObject.isUserDialog(TLdeserialize2.dialog_id)) {
                            arrayList3 = arrayList2;
                            if (!arrayList3.contains(Long.valueOf(TLdeserialize2.dialog_id))) {
                                arrayList3.add(Long.valueOf(TLdeserialize2.dialog_id));
                            }
                        } else {
                            arrayList3 = arrayList2;
                            if (!arrayList10.contains(Long.valueOf(-TLdeserialize2.dialog_id))) {
                                arrayList10.add(Long.valueOf(-TLdeserialize2.dialog_id));
                            }
                        }
                        addUsersAndChatsFromMessage(TLdeserialize2, arrayList3, arrayList10, null);
                        if (TLdeserialize2.send_state != 3) {
                            arrayList2 = arrayList3;
                            if ((TLdeserialize2.peer_id.channel_id == 0 && !MessageObject.isUnread(TLdeserialize2) && !DialogObject.isEncryptedDialog(TLdeserialize2.dialog_id)) || TLdeserialize2.id > 0) {
                                TLdeserialize2.send_state = 0;
                            }
                            arrayList9 = arrayList2;
                            i2 = 1;
                            r13 = 0;
                        } else {
                            arrayList2 = arrayList3;
                            arrayList9 = arrayList2;
                            i2 = 1;
                            r13 = 0;
                        }
                    }
                } else {
                    arrayList2 = arrayList9;
                }
                arrayList9 = arrayList2;
                i2 = 1;
                r13 = 0;
            }
            ArrayList<Long> arrayList12 = arrayList9;
            queryFinalized2.dispose();
            if (arrayList11.isEmpty()) {
                arrayList = arrayList12;
            } else {
                String join = TextUtils.join(",", arrayList11);
                arrayList = arrayList12;
                getEncryptedChatsInternal(join, arrayList8, arrayList);
            }
            if (!arrayList.isEmpty()) {
                getUsersInternal(TextUtils.join(",", arrayList), arrayList6);
            }
            if (!arrayList10.isEmpty()) {
                StringBuilder sb = new StringBuilder();
                for (int i3 = 0; i3 < arrayList10.size(); i3++) {
                    Long l = (Long) arrayList10.get(i3);
                    if (sb.length() != 0) {
                        sb.append(",");
                    }
                    sb.append(l);
                }
                getChatsInternal(sb.toString(), arrayList7);
            }
            getSendMessagesHelper().processUnsentMessages(arrayList4, arrayList5, arrayList6, arrayList7, arrayList8);
        } catch (Exception e2) {
            e = e2;
            sQLiteCursor = null;
        } catch (Throwable th3) {
            th = th3;
            sQLiteCursor = null;
        }
    }

    public boolean checkMessageByRandomId(final long j) {
        final boolean[] zArr = new boolean[1];
        final CountDownLatch countDownLatch = new CountDownLatch(1);
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda126
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$checkMessageByRandomId$129(j, zArr, countDownLatch);
            }
        });
        try {
            countDownLatch.await();
        } catch (Exception e) {
            checkSQLException(e);
        }
        return zArr[0];
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Code restructure failed: missing block: B:11:0x002a, code lost:
        if (r0 == null) goto L8;
     */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$checkMessageByRandomId$129(long j, boolean[] zArr, CountDownLatch countDownLatch) {
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                sQLiteCursor = this.database.queryFinalized(String.format(Locale.US, "SELECT random_id FROM randoms_v2 WHERE random_id = %d", Long.valueOf(j)), new Object[0]);
                if (sQLiteCursor.next()) {
                    zArr[0] = true;
                }
            } catch (Exception e) {
                checkSQLException(e);
            }
            sQLiteCursor.dispose();
            countDownLatch.countDown();
        } catch (Throwable th) {
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
            throw th;
        }
    }

    public boolean checkMessageId(final long j, final int i) {
        final boolean[] zArr = new boolean[1];
        final CountDownLatch countDownLatch = new CountDownLatch(1);
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda88
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$checkMessageId$130(j, i, zArr, countDownLatch);
            }
        });
        try {
            countDownLatch.await();
        } catch (Exception e) {
            checkSQLException(e);
        }
        return zArr[0];
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Code restructure failed: missing block: B:11:0x0031, code lost:
        if (r0 == null) goto L8;
     */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$checkMessageId$130(long j, int i, boolean[] zArr, CountDownLatch countDownLatch) {
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                sQLiteCursor = this.database.queryFinalized(String.format(Locale.US, "SELECT mid FROM messages_v2 WHERE uid = %d AND mid = %d", Long.valueOf(j), Integer.valueOf(i)), new Object[0]);
                if (sQLiteCursor.next()) {
                    zArr[0] = true;
                }
            } catch (Exception e) {
                checkSQLException(e);
            }
            sQLiteCursor.dispose();
            countDownLatch.countDown();
        } catch (Throwable th) {
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
            throw th;
        }
    }

    public void getUnreadMention(final long j, final int i, final IntCallback intCallback) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda51
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$getUnreadMention$132(i, j, intCallback);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$getUnreadMention$132(int i, long j, final IntCallback intCallback) {
        SQLiteCursor queryFinalized;
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                if (i != 0) {
                    queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT MIN(mid) FROM messages_topics WHERE uid = %d AND topic_id = %d AND mention = 1 AND read_state IN(0, 1)", Long.valueOf(j), Integer.valueOf(i)), new Object[0]);
                } else {
                    queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT MIN(mid) FROM messages_v2 WHERE uid = %d AND mention = 1 AND read_state IN(0, 1)", Long.valueOf(j)), new Object[0]);
                }
                sQLiteCursor = queryFinalized;
                final int intValue = sQLiteCursor.next() ? sQLiteCursor.intValue(0) : 0;
                sQLiteCursor.dispose();
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda4
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesStorage.IntCallback.this.run(intValue);
                    }
                });
            } catch (Exception e) {
                checkSQLException(e);
                if (sQLiteCursor == null) {
                    return;
                }
            }
            sQLiteCursor.dispose();
        } catch (Throwable th) {
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
            throw th;
        }
    }

    public void getMessagesCount(final long j, final IntCallback intCallback) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda113
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$getMessagesCount$134(j, intCallback);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$getMessagesCount$134(long j, final IntCallback intCallback) {
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                sQLiteCursor = this.database.queryFinalized(String.format(Locale.US, "SELECT COUNT(mid) FROM messages_v2 WHERE uid = %d", Long.valueOf(j)), new Object[0]);
                final int intValue = sQLiteCursor.next() ? sQLiteCursor.intValue(0) : 0;
                sQLiteCursor.dispose();
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda2
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesStorage.IntCallback.this.run(intValue);
                    }
                });
            } catch (Exception e) {
                checkSQLException(e);
            }
        } finally {
            sQLiteCursor.dispose();
        }
    }

    /*  JADX ERROR: JadxRuntimeException in pass: BlockProcessor
        jadx.core.utils.exceptions.JadxRuntimeException: Unreachable block: B:194:0x047c
        	at jadx.core.dex.visitors.blocks.BlockProcessor.checkForUnreachableBlocks(BlockProcessor.java:81)
        	at jadx.core.dex.visitors.blocks.BlockProcessor.processBlocksTree(BlockProcessor.java:47)
        	at jadx.core.dex.visitors.blocks.BlockProcessor.visit(BlockProcessor.java:39)
        */
    public java.lang.Runnable getMessagesInternal(long r52, long r54, int r56, int r57, int r58, int r59, int r60, int r61, boolean r62, int r63, int r64, boolean r65, boolean r66) {
        /*
            Method dump skipped, instructions count: 8363
            To view this dump add '--comments-level debug' option
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesStorage.getMessagesInternal(long, long, int, int, int, int, int, int, boolean, int, int, boolean, boolean):java.lang.Runnable");
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ int lambda$getMessagesInternal$135(TLRPC$Message tLRPC$Message, TLRPC$Message tLRPC$Message2) {
        int i;
        int i2;
        int i3 = tLRPC$Message.id;
        if (i3 > 0 && (i2 = tLRPC$Message2.id) > 0) {
            if (i3 > i2) {
                return -1;
            }
            return i3 < i2 ? 1 : 0;
        } else if (i3 < 0 && (i = tLRPC$Message2.id) < 0) {
            if (i3 < i) {
                return -1;
            }
            return i3 > i ? 1 : 0;
        } else {
            int i4 = tLRPC$Message.date;
            int i5 = tLRPC$Message2.date;
            if (i4 > i5) {
                return -1;
            }
            return i4 < i5 ? 1 : 0;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$getMessagesInternal$136(TLRPC$TL_messages_messages tLRPC$TL_messages_messages, int i, long j, long j2, int i2, int i3, int i4, int i5, int i6, int i7, int i8, int i9, int i10, boolean z, boolean z2, int i11, int i12, boolean z3, int i13, boolean z4, boolean z5) {
        getMessagesController().processLoadedMessages(tLRPC$TL_messages_messages, i, j, j2, i2, i3, i4, true, i5, i6, i7, i8, i9, i10, z, z2 ? 1 : 0, i11, i12, z3, i13, z4, z5);
    }

    private void getAnimatedEmoji(String str, ArrayList<TLRPC$Document> arrayList) {
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                sQLiteCursor = this.database.queryFinalized(String.format(Locale.US, "SELECT data FROM animated_emoji WHERE document_id IN (%s)", str), new Object[0]);
                while (sQLiteCursor.next()) {
                    NativeByteBuffer byteBufferValue = sQLiteCursor.byteBufferValue(0);
                    try {
                        TLRPC$Document TLdeserialize = TLRPC$Document.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(true), true);
                        if (TLdeserialize != null && TLdeserialize.id != 0) {
                            arrayList.add(TLdeserialize);
                        }
                    } catch (Exception e) {
                        checkSQLException(e);
                    }
                    if (byteBufferValue != null) {
                        byteBufferValue.reuse();
                    }
                }
            } catch (Throwable th) {
                if (sQLiteCursor != null) {
                    sQLiteCursor.dispose();
                }
                throw th;
            }
        } catch (SQLiteException e2) {
            e2.printStackTrace();
            if (sQLiteCursor == null) {
                return;
            }
        }
        sQLiteCursor.dispose();
    }

    public void getMessages(final long j, final long j2, boolean z, final int i, final int i2, final int i3, final int i4, final int i5, final int i6, final boolean z2, final int i7, final int i8, final boolean z3, final boolean z4) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda93
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$getMessages$138(j, j2, i, i2, i3, i4, i5, i6, z2, i7, i8, z3, z4);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$getMessages$138(long j, long j2, int i, int i2, int i3, int i4, int i5, int i6, boolean z, int i7, int i8, boolean z2, boolean z3) {
        final Runnable messagesInternal = getMessagesInternal(j, j2, i, i2, i3, i4, i5, i6, z, i7, i8, z2, z3);
        Utilities.stageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda0
            @Override // java.lang.Runnable
            public final void run() {
                messagesInternal.run();
            }
        });
    }

    public void clearSentMedia() {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda11
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$clearSentMedia$139();
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$clearSentMedia$139() {
        try {
            this.database.executeFast("DELETE FROM sent_files_v2 WHERE 1").stepThis().dispose();
        } catch (Exception e) {
            checkSQLException(e);
        }
    }

    public Object[] getSentFile(final String str, final int i) {
        if (str == null || str.toLowerCase().endsWith("attheme")) {
            return null;
        }
        final CountDownLatch countDownLatch = new CountDownLatch(1);
        final Object[] objArr = new Object[2];
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda135
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$getSentFile$140(str, i, objArr, countDownLatch);
            }
        });
        try {
            countDownLatch.await();
        } catch (Exception e) {
            checkSQLException(e);
        }
        if (objArr[0] != null) {
            return objArr;
        }
        return null;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$getSentFile$140(String str, int i, Object[] objArr, CountDownLatch countDownLatch) {
        NativeByteBuffer byteBufferValue;
        try {
            try {
                String MD5 = Utilities.MD5(str);
                if (MD5 != null) {
                    SQLiteCursor queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT data, parent FROM sent_files_v2 WHERE uid = '%s' AND type = %d", MD5, Integer.valueOf(i)), new Object[0]);
                    if (queryFinalized.next() && (byteBufferValue = queryFinalized.byteBufferValue(0)) != null) {
                        TLRPC$MessageMedia TLdeserialize = TLRPC$MessageMedia.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                        byteBufferValue.reuse();
                        if (TLdeserialize instanceof TLRPC$TL_messageMediaDocument) {
                            objArr[0] = ((TLRPC$TL_messageMediaDocument) TLdeserialize).document;
                        } else if (TLdeserialize instanceof TLRPC$TL_messageMediaPhoto) {
                            objArr[0] = ((TLRPC$TL_messageMediaPhoto) TLdeserialize).photo;
                        }
                        if (objArr[0] != null) {
                            objArr[1] = queryFinalized.stringValue(1);
                        }
                    }
                    queryFinalized.dispose();
                }
            } catch (Exception e) {
                checkSQLException(e);
            }
        } finally {
            countDownLatch.countDown();
        }
    }

    private void updateWidgets(long j) {
        ArrayList<Long> arrayList = new ArrayList<>();
        arrayList.add(Long.valueOf(j));
        updateWidgets(arrayList);
    }

    private void updateWidgets(ArrayList<Long> arrayList) {
        if (arrayList.isEmpty()) {
            return;
        }
        AppWidgetManager appWidgetManager = null;
        try {
            TextUtils.join(",", arrayList);
            SQLiteCursor queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT DISTINCT id FROM shortcut_widget WHERE did IN(%s,-1)", TextUtils.join(",", arrayList)), new Object[0]);
            while (queryFinalized.next()) {
                if (appWidgetManager == null) {
                    appWidgetManager = AppWidgetManager.getInstance(ApplicationLoader.applicationContext);
                }
                appWidgetManager.notifyAppWidgetViewDataChanged(queryFinalized.intValue(0), R.id.list_view);
            }
            queryFinalized.dispose();
        } catch (Exception e) {
            checkSQLException(e);
        }
    }

    public void putWidgetDialogs(final int i, final ArrayList<TopicKey> arrayList) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda57
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$putWidgetDialogs$141(i, arrayList);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$putWidgetDialogs$141(int i, ArrayList arrayList) {
        try {
            this.database.beginTransaction();
            SQLiteDatabase sQLiteDatabase = this.database;
            sQLiteDatabase.executeFast("DELETE FROM shortcut_widget WHERE id = " + i).stepThis().dispose();
            SQLitePreparedStatement executeFast = this.database.executeFast("REPLACE INTO shortcut_widget VALUES(?, ?, ?)");
            if (arrayList.isEmpty()) {
                executeFast.requery();
                executeFast.bindInteger(1, i);
                executeFast.bindLong(2, -1L);
                executeFast.bindInteger(3, 0);
                executeFast.step();
            } else {
                int size = arrayList.size();
                for (int i2 = 0; i2 < size; i2++) {
                    long j = ((TopicKey) arrayList.get(i2)).dialogId;
                    executeFast.requery();
                    executeFast.bindInteger(1, i);
                    executeFast.bindLong(2, j);
                    executeFast.bindInteger(3, i2);
                    executeFast.step();
                }
            }
            executeFast.dispose();
            this.database.commitTransaction();
        } catch (Exception e) {
            checkSQLException(e);
        }
    }

    public void clearWidgetDialogs(final int i) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda32
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$clearWidgetDialogs$142(i);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$clearWidgetDialogs$142(int i) {
        try {
            SQLiteDatabase sQLiteDatabase = this.database;
            sQLiteDatabase.executeFast("DELETE FROM shortcut_widget WHERE id = " + i).stepThis().dispose();
        } catch (Exception e) {
            checkSQLException(e);
        }
    }

    public void getWidgetDialogIds(final int i, final int i2, final ArrayList<Long> arrayList, final ArrayList<TLRPC$User> arrayList2, final ArrayList<TLRPC$Chat> arrayList3, final boolean z) {
        final CountDownLatch countDownLatch = new CountDownLatch(1);
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda64
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$getWidgetDialogIds$143(i, arrayList, arrayList2, arrayList3, z, i2, countDownLatch);
            }
        });
        try {
            countDownLatch.await();
        } catch (Exception e) {
            checkSQLException(e);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$getWidgetDialogIds$143(int i, ArrayList arrayList, ArrayList arrayList2, ArrayList arrayList3, boolean z, int i2, CountDownLatch countDownLatch) {
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                ArrayList arrayList4 = new ArrayList();
                ArrayList arrayList5 = new ArrayList();
                SQLiteCursor queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT did FROM shortcut_widget WHERE id = %d ORDER BY ord ASC", Integer.valueOf(i)), new Object[0]);
                while (queryFinalized.next()) {
                    try {
                        long longValue = queryFinalized.longValue(0);
                        if (longValue != -1) {
                            arrayList.add(Long.valueOf(longValue));
                            if (arrayList2 != null && arrayList3 != null) {
                                if (DialogObject.isUserDialog(longValue)) {
                                    arrayList4.add(Long.valueOf(longValue));
                                } else {
                                    arrayList5.add(Long.valueOf(-longValue));
                                }
                            }
                        }
                    } catch (Exception e) {
                        e = e;
                        sQLiteCursor = queryFinalized;
                        checkSQLException(e);
                        if (sQLiteCursor != null) {
                            sQLiteCursor.dispose();
                        }
                        countDownLatch.countDown();
                    } catch (Throwable th) {
                        th = th;
                        sQLiteCursor = queryFinalized;
                        if (sQLiteCursor != null) {
                            sQLiteCursor.dispose();
                        }
                        countDownLatch.countDown();
                        throw th;
                    }
                }
                queryFinalized.dispose();
                if (!z && arrayList.isEmpty()) {
                    if (i2 == 0) {
                        SQLiteCursor queryFinalized2 = this.database.queryFinalized("SELECT did FROM dialogs WHERE folder_id = 0 ORDER BY pinned DESC, date DESC LIMIT 0,10", new Object[0]);
                        while (queryFinalized2.next()) {
                            long longValue2 = queryFinalized2.longValue(0);
                            if (!DialogObject.isFolderDialogId(longValue2)) {
                                arrayList.add(Long.valueOf(longValue2));
                                if (arrayList2 != null && arrayList3 != null) {
                                    if (DialogObject.isUserDialog(longValue2)) {
                                        arrayList4.add(Long.valueOf(longValue2));
                                    } else {
                                        arrayList5.add(Long.valueOf(-longValue2));
                                    }
                                }
                            }
                        }
                        queryFinalized2.dispose();
                    } else {
                        SQLiteCursor queryFinalized3 = getMessagesStorage().getDatabase().queryFinalized("SELECT did FROM chat_hints WHERE type = 0 ORDER BY rating DESC LIMIT 4", new Object[0]);
                        while (queryFinalized3.next()) {
                            long longValue3 = queryFinalized3.longValue(0);
                            arrayList.add(Long.valueOf(longValue3));
                            if (arrayList2 != null && arrayList3 != null) {
                                if (DialogObject.isUserDialog(longValue3)) {
                                    arrayList4.add(Long.valueOf(longValue3));
                                } else {
                                    arrayList5.add(Long.valueOf(-longValue3));
                                }
                            }
                        }
                        queryFinalized3.dispose();
                    }
                }
                if (arrayList2 != null && arrayList3 != null) {
                    if (!arrayList5.isEmpty()) {
                        getChatsInternal(TextUtils.join(",", arrayList5), arrayList3);
                    }
                    if (!arrayList4.isEmpty()) {
                        getUsersInternal(TextUtils.join(",", arrayList4), arrayList2);
                    }
                }
            } catch (Throwable th2) {
                th = th2;
            }
        } catch (Exception e2) {
            e = e2;
        }
        countDownLatch.countDown();
    }

    public void getWidgetDialogs(final int i, final int i2, final ArrayList<Long> arrayList, final LongSparseArray<TLRPC$Dialog> longSparseArray, final LongSparseArray<TLRPC$Message> longSparseArray2, final ArrayList<TLRPC$User> arrayList2, final ArrayList<TLRPC$Chat> arrayList3) {
        final CountDownLatch countDownLatch = new CountDownLatch(1);
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda61
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$getWidgetDialogs$144(i, arrayList, i2, longSparseArray, longSparseArray2, arrayList3, arrayList2, countDownLatch);
            }
        });
        try {
            countDownLatch.await();
        } catch (Exception e) {
            checkSQLException(e);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$getWidgetDialogs$144(int i, ArrayList arrayList, int i2, LongSparseArray longSparseArray, LongSparseArray longSparseArray2, ArrayList arrayList2, ArrayList arrayList3, CountDownLatch countDownLatch) {
        SQLiteCursor queryFinalized;
        boolean z;
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                ArrayList arrayList4 = new ArrayList();
                ArrayList arrayList5 = new ArrayList();
                SQLiteCursor queryFinalized2 = this.database.queryFinalized(String.format(Locale.US, "SELECT did FROM shortcut_widget WHERE id = %d ORDER BY ord ASC", Integer.valueOf(i)), new Object[0]);
                while (queryFinalized2.next()) {
                    try {
                        long longValue = queryFinalized2.longValue(0);
                        if (longValue != -1) {
                            arrayList.add(Long.valueOf(longValue));
                            if (DialogObject.isUserDialog(longValue)) {
                                arrayList4.add(Long.valueOf(longValue));
                            } else {
                                arrayList5.add(Long.valueOf(-longValue));
                            }
                        }
                    } catch (Exception e) {
                        e = e;
                        sQLiteCursor = queryFinalized;
                        checkSQLException(e);
                        if (sQLiteCursor != null) {
                            sQLiteCursor.dispose();
                        }
                        countDownLatch.countDown();
                    } catch (Throwable th) {
                        th = th;
                        sQLiteCursor = queryFinalized;
                        if (sQLiteCursor != null) {
                            sQLiteCursor.dispose();
                        }
                        countDownLatch.countDown();
                        throw th;
                    }
                }
                queryFinalized2.dispose();
                if (arrayList.isEmpty() && i2 == 1) {
                    SQLiteCursor queryFinalized3 = getMessagesStorage().getDatabase().queryFinalized("SELECT did FROM chat_hints WHERE type = 0 ORDER BY rating DESC LIMIT 4", new Object[0]);
                    while (queryFinalized3.next()) {
                        long longValue2 = queryFinalized3.longValue(0);
                        arrayList.add(Long.valueOf(longValue2));
                        if (DialogObject.isUserDialog(longValue2)) {
                            arrayList4.add(Long.valueOf(longValue2));
                        } else {
                            arrayList5.add(Long.valueOf(-longValue2));
                        }
                    }
                    queryFinalized3.dispose();
                }
                if (arrayList.isEmpty()) {
                    queryFinalized = this.database.queryFinalized("SELECT d.did, d.last_mid, d.unread_count, d.date, m.data, m.read_state, m.mid, m.send_state, m.date FROM dialogs as d LEFT JOIN messages_v2 as m ON d.last_mid = m.mid AND d.did = m.uid WHERE d.folder_id = 0 ORDER BY d.pinned DESC, d.date DESC LIMIT 0,10", new Object[0]);
                    z = true;
                } else {
                    queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT d.did, d.last_mid, d.unread_count, d.date, m.data, m.read_state, m.mid, m.send_state, m.date FROM dialogs as d LEFT JOIN messages_v2 as m ON d.last_mid = m.mid AND d.did = m.uid WHERE d.did IN(%s)", TextUtils.join(",", arrayList)), new Object[0]);
                    z = false;
                }
                while (queryFinalized.next()) {
                    long longValue3 = queryFinalized.longValue(0);
                    if (!DialogObject.isFolderDialogId(longValue3)) {
                        if (z) {
                            arrayList.add(Long.valueOf(longValue3));
                        }
                        TLRPC$TL_dialog tLRPC$TL_dialog = new TLRPC$TL_dialog();
                        tLRPC$TL_dialog.id = longValue3;
                        tLRPC$TL_dialog.top_message = queryFinalized.intValue(1);
                        tLRPC$TL_dialog.unread_count = queryFinalized.intValue(2);
                        tLRPC$TL_dialog.last_message_date = queryFinalized.intValue(3);
                        longSparseArray.put(tLRPC$TL_dialog.id, tLRPC$TL_dialog);
                        NativeByteBuffer byteBufferValue = queryFinalized.byteBufferValue(4);
                        if (byteBufferValue != null) {
                            TLRPC$Message TLdeserialize = TLRPC$Message.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                            TLdeserialize.readAttachPath(byteBufferValue, getUserConfig().clientUserId);
                            byteBufferValue.reuse();
                            MessageObject.setUnreadFlags(TLdeserialize, queryFinalized.intValue(5));
                            TLdeserialize.id = queryFinalized.intValue(6);
                            TLdeserialize.send_state = queryFinalized.intValue(7);
                            int intValue = queryFinalized.intValue(8);
                            if (intValue != 0) {
                                tLRPC$TL_dialog.last_message_date = intValue;
                            }
                            long j = tLRPC$TL_dialog.id;
                            TLdeserialize.dialog_id = j;
                            longSparseArray2.put(j, TLdeserialize);
                            addUsersAndChatsFromMessage(TLdeserialize, arrayList4, arrayList5, null);
                        }
                    }
                }
                queryFinalized.dispose();
                if (!z && arrayList.size() > longSparseArray.size()) {
                    int size = arrayList.size();
                    for (int i3 = 0; i3 < size; i3++) {
                        long longValue4 = ((Long) arrayList.get(i3)).longValue();
                        if (longSparseArray.get(((Long) arrayList.get(i3)).longValue()) == null) {
                            TLRPC$TL_dialog tLRPC$TL_dialog2 = new TLRPC$TL_dialog();
                            tLRPC$TL_dialog2.id = longValue4;
                            longSparseArray.put(longValue4, tLRPC$TL_dialog2);
                            if (DialogObject.isChatDialog(longValue4)) {
                                long j2 = -longValue4;
                                if (arrayList5.contains(Long.valueOf(j2))) {
                                    arrayList5.add(Long.valueOf(j2));
                                }
                            } else if (arrayList4.contains(Long.valueOf(longValue4))) {
                                arrayList4.add(Long.valueOf(longValue4));
                            }
                        }
                    }
                }
                if (!arrayList5.isEmpty()) {
                    getChatsInternal(TextUtils.join(",", arrayList5), arrayList2);
                }
                if (!arrayList4.isEmpty()) {
                    getUsersInternal(TextUtils.join(",", arrayList4), arrayList3);
                }
            } catch (Throwable th2) {
                th = th2;
            }
        } catch (Exception e2) {
            e = e2;
        }
        countDownLatch.countDown();
    }

    public void putSentFile(final String str, final TLObject tLObject, final int i, final String str2) {
        if (str == null || tLObject == null || str2 == null) {
            return;
        }
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda137
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$putSentFile$145(str, tLObject, i, str2);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$putSentFile$145(String str, TLObject tLObject, int i, String str2) {
        TLRPC$MessageMedia tLRPC$MessageMedia;
        SQLitePreparedStatement sQLitePreparedStatement = null;
        try {
            try {
                String MD5 = Utilities.MD5(str);
                if (MD5 != null) {
                    if (tLObject instanceof TLRPC$Photo) {
                        tLRPC$MessageMedia = new TLRPC$TL_messageMediaPhoto();
                        tLRPC$MessageMedia.photo = (TLRPC$Photo) tLObject;
                        tLRPC$MessageMedia.flags |= 1;
                    } else if (tLObject instanceof TLRPC$Document) {
                        tLRPC$MessageMedia = new TLRPC$TL_messageMediaDocument();
                        tLRPC$MessageMedia.document = (TLRPC$Document) tLObject;
                        tLRPC$MessageMedia.flags |= 1;
                    } else {
                        tLRPC$MessageMedia = null;
                    }
                    if (tLRPC$MessageMedia == null) {
                        return;
                    }
                    sQLitePreparedStatement = this.database.executeFast("REPLACE INTO sent_files_v2 VALUES(?, ?, ?, ?)");
                    sQLitePreparedStatement.requery();
                    NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(tLRPC$MessageMedia.getObjectSize());
                    tLRPC$MessageMedia.serializeToStream(nativeByteBuffer);
                    sQLitePreparedStatement.bindString(1, MD5);
                    sQLitePreparedStatement.bindInteger(2, i);
                    sQLitePreparedStatement.bindByteBuffer(3, nativeByteBuffer);
                    sQLitePreparedStatement.bindString(4, str2);
                    sQLitePreparedStatement.step();
                    nativeByteBuffer.reuse();
                }
                if (sQLitePreparedStatement == null) {
                    return;
                }
            } catch (Exception e) {
                checkSQLException(e);
                if (sQLitePreparedStatement == null) {
                    return;
                }
            }
            sQLitePreparedStatement.dispose();
        } catch (Throwable th) {
            if (sQLitePreparedStatement != null) {
                sQLitePreparedStatement.dispose();
            }
            throw th;
        }
    }

    public void updateEncryptedChatSeq(final TLRPC$EncryptedChat tLRPC$EncryptedChat, final boolean z) {
        if (tLRPC$EncryptedChat == null) {
            return;
        }
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda183
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$updateEncryptedChatSeq$146(tLRPC$EncryptedChat, z);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateEncryptedChatSeq$146(TLRPC$EncryptedChat tLRPC$EncryptedChat, boolean z) {
        SQLitePreparedStatement sQLitePreparedStatement = null;
        try {
            try {
                sQLitePreparedStatement = this.database.executeFast("UPDATE enc_chats SET seq_in = ?, seq_out = ?, use_count = ?, in_seq_no = ?, mtproto_seq = ? WHERE uid = ?");
                sQLitePreparedStatement.bindInteger(1, tLRPC$EncryptedChat.seq_in);
                sQLitePreparedStatement.bindInteger(2, tLRPC$EncryptedChat.seq_out);
                sQLitePreparedStatement.bindInteger(3, (tLRPC$EncryptedChat.key_use_count_in << 16) | tLRPC$EncryptedChat.key_use_count_out);
                sQLitePreparedStatement.bindInteger(4, tLRPC$EncryptedChat.in_seq_no);
                sQLitePreparedStatement.bindInteger(5, tLRPC$EncryptedChat.mtproto_seq);
                sQLitePreparedStatement.bindInteger(6, tLRPC$EncryptedChat.id);
                sQLitePreparedStatement.step();
                if (z && tLRPC$EncryptedChat.in_seq_no != 0) {
                    long encryptedChatId = DialogObject.getEncryptedChatId(tLRPC$EncryptedChat.id);
                    this.database.executeFast(String.format(Locale.US, "DELETE FROM messages_v2 WHERE mid IN (SELECT m.mid FROM messages_v2 as m LEFT JOIN messages_seq as s ON m.mid = s.mid WHERE m.uid = %d AND m.date = 0 AND m.mid < 0 AND s.seq_out <= %d) AND uid = %d", Long.valueOf(encryptedChatId), Integer.valueOf(tLRPC$EncryptedChat.in_seq_no), Long.valueOf(encryptedChatId))).stepThis().dispose();
                }
            } catch (Exception e) {
                checkSQLException(e);
                if (sQLitePreparedStatement == null) {
                    return;
                }
            }
            sQLitePreparedStatement.dispose();
        } catch (Throwable th) {
            if (sQLitePreparedStatement != null) {
                sQLitePreparedStatement.dispose();
            }
            throw th;
        }
    }

    public void updateEncryptedChatTTL(final TLRPC$EncryptedChat tLRPC$EncryptedChat) {
        if (tLRPC$EncryptedChat == null) {
            return;
        }
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda180
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$updateEncryptedChatTTL$147(tLRPC$EncryptedChat);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateEncryptedChatTTL$147(TLRPC$EncryptedChat tLRPC$EncryptedChat) {
        SQLitePreparedStatement sQLitePreparedStatement = null;
        try {
            try {
                sQLitePreparedStatement = this.database.executeFast("UPDATE enc_chats SET ttl = ? WHERE uid = ?");
                sQLitePreparedStatement.bindInteger(1, tLRPC$EncryptedChat.ttl);
                sQLitePreparedStatement.bindInteger(2, tLRPC$EncryptedChat.id);
                sQLitePreparedStatement.step();
            } catch (Exception e) {
                checkSQLException(e);
                if (sQLitePreparedStatement == null) {
                    return;
                }
            }
            sQLitePreparedStatement.dispose();
        } catch (Throwable th) {
            if (sQLitePreparedStatement != null) {
                sQLitePreparedStatement.dispose();
            }
            throw th;
        }
    }

    public void updateEncryptedChatLayer(final TLRPC$EncryptedChat tLRPC$EncryptedChat) {
        if (tLRPC$EncryptedChat == null) {
            return;
        }
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda181
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$updateEncryptedChatLayer$148(tLRPC$EncryptedChat);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateEncryptedChatLayer$148(TLRPC$EncryptedChat tLRPC$EncryptedChat) {
        SQLitePreparedStatement sQLitePreparedStatement = null;
        try {
            try {
                sQLitePreparedStatement = this.database.executeFast("UPDATE enc_chats SET layer = ? WHERE uid = ?");
                sQLitePreparedStatement.bindInteger(1, tLRPC$EncryptedChat.layer);
                sQLitePreparedStatement.bindInteger(2, tLRPC$EncryptedChat.id);
                sQLitePreparedStatement.step();
            } catch (Exception e) {
                checkSQLException(e);
                if (sQLitePreparedStatement == null) {
                    return;
                }
            }
            sQLitePreparedStatement.dispose();
        } catch (Throwable th) {
            if (sQLitePreparedStatement != null) {
                sQLitePreparedStatement.dispose();
            }
            throw th;
        }
    }

    public void updateEncryptedChat(final TLRPC$EncryptedChat tLRPC$EncryptedChat) {
        if (tLRPC$EncryptedChat == null) {
            return;
        }
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda179
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$updateEncryptedChat$149(tLRPC$EncryptedChat);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateEncryptedChat$149(TLRPC$EncryptedChat tLRPC$EncryptedChat) {
        byte[] bArr;
        SQLitePreparedStatement sQLitePreparedStatement = null;
        try {
            try {
                byte[] bArr2 = tLRPC$EncryptedChat.key_hash;
                if ((bArr2 == null || bArr2.length < 16) && (bArr = tLRPC$EncryptedChat.auth_key) != null) {
                    tLRPC$EncryptedChat.key_hash = AndroidUtilities.calcAuthKeyHash(bArr);
                }
                sQLitePreparedStatement = this.database.executeFast("UPDATE enc_chats SET data = ?, g = ?, authkey = ?, ttl = ?, layer = ?, seq_in = ?, seq_out = ?, use_count = ?, exchange_id = ?, key_date = ?, fprint = ?, fauthkey = ?, khash = ?, in_seq_no = ?, admin_id = ?, mtproto_seq = ? WHERE uid = ?");
                NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(tLRPC$EncryptedChat.getObjectSize());
                byte[] bArr3 = tLRPC$EncryptedChat.a_or_b;
                NativeByteBuffer nativeByteBuffer2 = new NativeByteBuffer(bArr3 != null ? bArr3.length : 1);
                byte[] bArr4 = tLRPC$EncryptedChat.auth_key;
                NativeByteBuffer nativeByteBuffer3 = new NativeByteBuffer(bArr4 != null ? bArr4.length : 1);
                byte[] bArr5 = tLRPC$EncryptedChat.future_auth_key;
                NativeByteBuffer nativeByteBuffer4 = new NativeByteBuffer(bArr5 != null ? bArr5.length : 1);
                byte[] bArr6 = tLRPC$EncryptedChat.key_hash;
                NativeByteBuffer nativeByteBuffer5 = new NativeByteBuffer(bArr6 != null ? bArr6.length : 1);
                tLRPC$EncryptedChat.serializeToStream(nativeByteBuffer);
                sQLitePreparedStatement.bindByteBuffer(1, nativeByteBuffer);
                byte[] bArr7 = tLRPC$EncryptedChat.a_or_b;
                if (bArr7 != null) {
                    nativeByteBuffer2.writeBytes(bArr7);
                }
                byte[] bArr8 = tLRPC$EncryptedChat.auth_key;
                if (bArr8 != null) {
                    nativeByteBuffer3.writeBytes(bArr8);
                }
                byte[] bArr9 = tLRPC$EncryptedChat.future_auth_key;
                if (bArr9 != null) {
                    nativeByteBuffer4.writeBytes(bArr9);
                }
                byte[] bArr10 = tLRPC$EncryptedChat.key_hash;
                if (bArr10 != null) {
                    nativeByteBuffer5.writeBytes(bArr10);
                }
                sQLitePreparedStatement.bindByteBuffer(2, nativeByteBuffer2);
                sQLitePreparedStatement.bindByteBuffer(3, nativeByteBuffer3);
                sQLitePreparedStatement.bindInteger(4, tLRPC$EncryptedChat.ttl);
                sQLitePreparedStatement.bindInteger(5, tLRPC$EncryptedChat.layer);
                sQLitePreparedStatement.bindInteger(6, tLRPC$EncryptedChat.seq_in);
                sQLitePreparedStatement.bindInteger(7, tLRPC$EncryptedChat.seq_out);
                sQLitePreparedStatement.bindInteger(8, (tLRPC$EncryptedChat.key_use_count_in << 16) | tLRPC$EncryptedChat.key_use_count_out);
                sQLitePreparedStatement.bindLong(9, tLRPC$EncryptedChat.exchange_id);
                sQLitePreparedStatement.bindInteger(10, tLRPC$EncryptedChat.key_create_date);
                sQLitePreparedStatement.bindLong(11, tLRPC$EncryptedChat.future_key_fingerprint);
                sQLitePreparedStatement.bindByteBuffer(12, nativeByteBuffer4);
                sQLitePreparedStatement.bindByteBuffer(13, nativeByteBuffer5);
                sQLitePreparedStatement.bindInteger(14, tLRPC$EncryptedChat.in_seq_no);
                sQLitePreparedStatement.bindLong(15, tLRPC$EncryptedChat.admin_id);
                sQLitePreparedStatement.bindInteger(16, tLRPC$EncryptedChat.mtproto_seq);
                sQLitePreparedStatement.bindInteger(17, tLRPC$EncryptedChat.id);
                sQLitePreparedStatement.step();
                nativeByteBuffer.reuse();
                nativeByteBuffer2.reuse();
                nativeByteBuffer3.reuse();
                nativeByteBuffer4.reuse();
                nativeByteBuffer5.reuse();
            } catch (Exception e) {
                checkSQLException(e);
                if (sQLitePreparedStatement == null) {
                    return;
                }
            }
            sQLitePreparedStatement.dispose();
        } catch (Throwable th) {
            if (sQLitePreparedStatement != null) {
                sQLitePreparedStatement.dispose();
            }
            throw th;
        }
    }

    public void isDialogHasTopMessage(final long j, final Runnable runnable) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda101
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$isDialogHasTopMessage$150(j, runnable);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Code restructure failed: missing block: B:13:0x0032, code lost:
        if (r1 == null) goto L10;
     */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$isDialogHasTopMessage$150(long j, Runnable runnable) {
        boolean z = false;
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                sQLiteCursor = this.database.queryFinalized(String.format(Locale.US, "SELECT last_mid FROM dialogs WHERE did = %d", Long.valueOf(j)), new Object[0]);
                if (sQLiteCursor.next()) {
                    if (sQLiteCursor.intValue(0) != 0) {
                        z = true;
                    }
                }
            } catch (Exception e) {
                checkSQLException(e);
            }
            sQLiteCursor.dispose();
            if (z) {
                return;
            }
            AndroidUtilities.runOnUIThread(runnable);
        } catch (Throwable th) {
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
            throw th;
        }
    }

    public boolean hasAuthMessage(final int i) {
        final CountDownLatch countDownLatch = new CountDownLatch(1);
        final boolean[] zArr = new boolean[1];
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda68
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$hasAuthMessage$151(i, zArr, countDownLatch);
            }
        });
        try {
            countDownLatch.await();
        } catch (Exception e) {
            checkSQLException(e);
        }
        return zArr[0];
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Code restructure failed: missing block: B:9:0x0028, code lost:
        if (r0 == null) goto L5;
     */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$hasAuthMessage$151(int i, boolean[] zArr, CountDownLatch countDownLatch) {
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                sQLiteCursor = this.database.queryFinalized(String.format(Locale.US, "SELECT mid FROM messages_v2 WHERE uid = 777000 AND date = %d AND mid < 0 LIMIT 1", Integer.valueOf(i)), new Object[0]);
                zArr[0] = sQLiteCursor.next();
            } catch (Exception e) {
                checkSQLException(e);
            }
            sQLiteCursor.dispose();
            countDownLatch.countDown();
        } catch (Throwable th) {
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
            countDownLatch.countDown();
            throw th;
        }
    }

    public void getEncryptedChat(final long j, final CountDownLatch countDownLatch, final ArrayList<TLObject> arrayList) {
        if (countDownLatch == null || arrayList == null) {
            return;
        }
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda107
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$getEncryptedChat$152(j, arrayList, countDownLatch);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$getEncryptedChat$152(long j, ArrayList arrayList, CountDownLatch countDownLatch) {
        try {
            try {
                ArrayList<Long> arrayList2 = new ArrayList<>();
                ArrayList<TLRPC$EncryptedChat> arrayList3 = new ArrayList<>();
                getEncryptedChatsInternal("" + j, arrayList3, arrayList2);
                if (!arrayList3.isEmpty() && !arrayList2.isEmpty()) {
                    ArrayList<TLRPC$User> arrayList4 = new ArrayList<>();
                    getUsersInternal(TextUtils.join(",", arrayList2), arrayList4);
                    if (!arrayList4.isEmpty()) {
                        arrayList.add(arrayList3.get(0));
                        arrayList.add(arrayList4.get(0));
                    }
                }
            } catch (Exception e) {
                checkSQLException(e);
            }
        } finally {
            countDownLatch.countDown();
        }
    }

    public void putEncryptedChat(final TLRPC$EncryptedChat tLRPC$EncryptedChat, final TLRPC$User tLRPC$User, final TLRPC$Dialog tLRPC$Dialog) {
        if (tLRPC$EncryptedChat == null) {
            return;
        }
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda182
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$putEncryptedChat$153(tLRPC$EncryptedChat, tLRPC$User, tLRPC$Dialog);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:59:0x0193  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$putEncryptedChat$153(TLRPC$EncryptedChat tLRPC$EncryptedChat, TLRPC$User tLRPC$User, TLRPC$Dialog tLRPC$Dialog) {
        SQLitePreparedStatement sQLitePreparedStatement;
        byte[] bArr;
        SQLitePreparedStatement sQLitePreparedStatement2;
        SQLitePreparedStatement sQLitePreparedStatement3;
        try {
            byte[] bArr2 = tLRPC$EncryptedChat.key_hash;
            if ((bArr2 == null || bArr2.length < 16) && (bArr = tLRPC$EncryptedChat.auth_key) != null) {
                tLRPC$EncryptedChat.key_hash = AndroidUtilities.calcAuthKeyHash(bArr);
            }
            SQLitePreparedStatement executeFast = this.database.executeFast("REPLACE INTO enc_chats VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
            try {
                NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(tLRPC$EncryptedChat.getObjectSize());
                byte[] bArr3 = tLRPC$EncryptedChat.a_or_b;
                NativeByteBuffer nativeByteBuffer2 = new NativeByteBuffer(bArr3 != null ? bArr3.length : 1);
                byte[] bArr4 = tLRPC$EncryptedChat.auth_key;
                NativeByteBuffer nativeByteBuffer3 = new NativeByteBuffer(bArr4 != null ? bArr4.length : 1);
                byte[] bArr5 = tLRPC$EncryptedChat.future_auth_key;
                NativeByteBuffer nativeByteBuffer4 = new NativeByteBuffer(bArr5 != null ? bArr5.length : 1);
                byte[] bArr6 = tLRPC$EncryptedChat.key_hash;
                NativeByteBuffer nativeByteBuffer5 = new NativeByteBuffer(bArr6 != null ? bArr6.length : 1);
                tLRPC$EncryptedChat.serializeToStream(nativeByteBuffer);
                executeFast.bindInteger(1, tLRPC$EncryptedChat.id);
                executeFast.bindLong(2, tLRPC$User.id);
                executeFast.bindString(3, formatUserSearchName(tLRPC$User));
                executeFast.bindByteBuffer(4, nativeByteBuffer);
                byte[] bArr7 = tLRPC$EncryptedChat.a_or_b;
                if (bArr7 != null) {
                    nativeByteBuffer2.writeBytes(bArr7);
                }
                byte[] bArr8 = tLRPC$EncryptedChat.auth_key;
                if (bArr8 != null) {
                    nativeByteBuffer3.writeBytes(bArr8);
                }
                byte[] bArr9 = tLRPC$EncryptedChat.future_auth_key;
                if (bArr9 != null) {
                    nativeByteBuffer4.writeBytes(bArr9);
                }
                byte[] bArr10 = tLRPC$EncryptedChat.key_hash;
                if (bArr10 != null) {
                    nativeByteBuffer5.writeBytes(bArr10);
                }
                executeFast.bindByteBuffer(5, nativeByteBuffer2);
                executeFast.bindByteBuffer(6, nativeByteBuffer3);
                executeFast.bindInteger(7, tLRPC$EncryptedChat.ttl);
                executeFast.bindInteger(8, tLRPC$EncryptedChat.layer);
                executeFast.bindInteger(9, tLRPC$EncryptedChat.seq_in);
                executeFast.bindInteger(10, tLRPC$EncryptedChat.seq_out);
                executeFast.bindInteger(11, (tLRPC$EncryptedChat.key_use_count_in << 16) | tLRPC$EncryptedChat.key_use_count_out);
                executeFast.bindLong(12, tLRPC$EncryptedChat.exchange_id);
                executeFast.bindInteger(13, tLRPC$EncryptedChat.key_create_date);
                executeFast.bindLong(14, tLRPC$EncryptedChat.future_key_fingerprint);
                executeFast.bindByteBuffer(15, nativeByteBuffer4);
                executeFast.bindByteBuffer(16, nativeByteBuffer5);
                executeFast.bindInteger(17, tLRPC$EncryptedChat.in_seq_no);
                executeFast.bindLong(18, tLRPC$EncryptedChat.admin_id);
                executeFast.bindInteger(19, tLRPC$EncryptedChat.mtproto_seq);
                executeFast.step();
                executeFast.dispose();
                nativeByteBuffer.reuse();
                nativeByteBuffer2.reuse();
                nativeByteBuffer3.reuse();
                nativeByteBuffer4.reuse();
                nativeByteBuffer5.reuse();
                if (tLRPC$Dialog != null) {
                    SQLitePreparedStatement executeFast2 = this.database.executeFast("REPLACE INTO dialogs VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
                    executeFast2.bindLong(1, tLRPC$Dialog.id);
                    executeFast2.bindInteger(2, tLRPC$Dialog.last_message_date);
                    executeFast2.bindInteger(3, tLRPC$Dialog.unread_count);
                    executeFast2.bindInteger(4, tLRPC$Dialog.top_message);
                    executeFast2.bindInteger(5, tLRPC$Dialog.read_inbox_max_id);
                    executeFast2.bindInteger(6, tLRPC$Dialog.read_outbox_max_id);
                    executeFast2.bindInteger(7, 0);
                    executeFast2.bindInteger(8, tLRPC$Dialog.unread_mentions_count);
                    executeFast2.bindInteger(9, tLRPC$Dialog.pts);
                    executeFast2.bindInteger(10, 0);
                    executeFast2.bindInteger(11, tLRPC$Dialog.pinnedNum);
                    executeFast2.bindInteger(12, tLRPC$Dialog.flags);
                    executeFast2.bindInteger(13, tLRPC$Dialog.folder_id);
                    executeFast2.bindNull(14);
                    executeFast2.bindInteger(15, tLRPC$Dialog.unread_reactions_count);
                    executeFast2.bindInteger(16, 0);
                    executeFast2.bindInteger(17, tLRPC$Dialog.ttl_period);
                    executeFast2.step();
                    executeFast2.dispose();
                }
            } catch (Exception e) {
                e = e;
                sQLitePreparedStatement = sQLitePreparedStatement3;
                try {
                    checkSQLException(e);
                    if (sQLitePreparedStatement != null) {
                        sQLitePreparedStatement.dispose();
                    }
                } catch (Throwable th) {
                    th = th;
                    if (sQLitePreparedStatement != null) {
                        sQLitePreparedStatement.dispose();
                    }
                    throw th;
                }
            } catch (Throwable th2) {
                th = th2;
                sQLitePreparedStatement = sQLitePreparedStatement2;
                if (sQLitePreparedStatement != null) {
                }
                throw th;
            }
        } catch (Exception e2) {
            e = e2;
            sQLitePreparedStatement = null;
        } catch (Throwable th3) {
            th = th3;
            sQLitePreparedStatement = null;
        }
    }

    private String formatUserSearchName(TLRPC$User tLRPC$User) {
        StringBuilder sb = new StringBuilder();
        String str = tLRPC$User.first_name;
        if (str != null && str.length() > 0) {
            sb.append(tLRPC$User.first_name);
        }
        String str2 = tLRPC$User.last_name;
        if (str2 != null && str2.length() > 0) {
            if (sb.length() > 0) {
                sb.append(" ");
            }
            sb.append(tLRPC$User.last_name);
        }
        sb.append(";;;");
        String str3 = tLRPC$User.username;
        if (str3 != null && str3.length() > 0) {
            sb.append(tLRPC$User.username);
        } else {
            ArrayList<TLRPC$TL_username> arrayList = tLRPC$User.usernames;
            if (arrayList != null && arrayList.size() > 0) {
                for (int i = 0; i < tLRPC$User.usernames.size(); i++) {
                    TLRPC$TL_username tLRPC$TL_username = tLRPC$User.usernames.get(i);
                    if (tLRPC$TL_username != null && tLRPC$TL_username.active) {
                        sb.append(tLRPC$TL_username.username);
                        sb.append(";;");
                    }
                }
            }
        }
        return sb.toString().toLowerCase();
    }

    private void putUsersInternal(ArrayList<TLRPC$User> arrayList) throws Exception {
        if (arrayList == null || arrayList.isEmpty()) {
            return;
        }
        SQLitePreparedStatement executeFast = this.database.executeFast("REPLACE INTO users VALUES(?, ?, ?, ?)");
        for (int i = 0; i < arrayList.size(); i++) {
            TLRPC$User tLRPC$User = arrayList.get(i);
            if (tLRPC$User != null && tLRPC$User.min) {
                SQLiteCursor queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT data FROM users WHERE uid = %d", Long.valueOf(tLRPC$User.id)), new Object[0]);
                if (queryFinalized.next()) {
                    try {
                        NativeByteBuffer byteBufferValue = queryFinalized.byteBufferValue(0);
                        if (byteBufferValue != null) {
                            TLRPC$User TLdeserialize = TLRPC$User.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                            byteBufferValue.reuse();
                            if (TLdeserialize != null) {
                                String str = tLRPC$User.username;
                                if (str != null) {
                                    TLdeserialize.username = str;
                                    TLdeserialize.flags |= 8;
                                } else {
                                    TLdeserialize.username = null;
                                    TLdeserialize.flags &= -9;
                                }
                                if (tLRPC$User.apply_min_photo) {
                                    TLRPC$UserProfilePhoto tLRPC$UserProfilePhoto = tLRPC$User.photo;
                                    if (tLRPC$UserProfilePhoto != null) {
                                        TLdeserialize.photo = tLRPC$UserProfilePhoto;
                                        TLdeserialize.flags |= 32;
                                    } else {
                                        TLdeserialize.photo = null;
                                        TLdeserialize.flags &= -33;
                                    }
                                }
                                tLRPC$User = TLdeserialize;
                            }
                        }
                    } catch (Exception e) {
                        checkSQLException(e);
                    }
                }
                queryFinalized.dispose();
            }
            executeFast.requery();
            NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(tLRPC$User.getObjectSize());
            tLRPC$User.serializeToStream(nativeByteBuffer);
            executeFast.bindLong(1, tLRPC$User.id);
            executeFast.bindString(2, formatUserSearchName(tLRPC$User));
            TLRPC$UserStatus tLRPC$UserStatus = tLRPC$User.status;
            if (tLRPC$UserStatus != null) {
                if (tLRPC$UserStatus instanceof TLRPC$TL_userStatusRecently) {
                    tLRPC$UserStatus.expires = -100;
                } else if (tLRPC$UserStatus instanceof TLRPC$TL_userStatusLastWeek) {
                    tLRPC$UserStatus.expires = -101;
                } else if (tLRPC$UserStatus instanceof TLRPC$TL_userStatusLastMonth) {
                    tLRPC$UserStatus.expires = -102;
                }
                executeFast.bindInteger(3, tLRPC$UserStatus.expires);
            } else {
                executeFast.bindInteger(3, 0);
            }
            executeFast.bindByteBuffer(4, nativeByteBuffer);
            executeFast.step();
            nativeByteBuffer.reuse();
        }
        executeFast.dispose();
    }

    public void updateChatDefaultBannedRights(final long j, final TLRPC$TL_chatBannedRights tLRPC$TL_chatBannedRights, final int i) {
        if (tLRPC$TL_chatBannedRights == null || j == 0) {
            return;
        }
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda85
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$updateChatDefaultBannedRights$154(j, i, tLRPC$TL_chatBannedRights);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Type inference failed for: r8v10 */
    /* JADX WARN: Type inference failed for: r8v15, types: [org.telegram.SQLite.SQLitePreparedStatement] */
    /* JADX WARN: Type inference failed for: r8v5, types: [org.telegram.SQLite.SQLitePreparedStatement] */
    public /* synthetic */ void lambda$updateChatDefaultBannedRights$154(long j, int i, TLRPC$TL_chatBannedRights tLRPC$TL_chatBannedRights) {
        SQLiteCursor queryFinalized;
        TLRPC$Chat tLRPC$Chat;
        NativeByteBuffer byteBufferValue;
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT data FROM chats WHERE uid = %d", Long.valueOf(j)), new Object[0]);
            } catch (Throwable th) {
                th = th;
            }
        } catch (Exception e) {
            e = e;
            j = 0;
        } catch (Throwable th2) {
            th = th2;
            j = 0;
        }
        try {
            if (!queryFinalized.next() || (byteBufferValue = queryFinalized.byteBufferValue(0)) == null) {
                tLRPC$Chat = null;
            } else {
                tLRPC$Chat = TLRPC$Chat.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                byteBufferValue.reuse();
            }
            queryFinalized.dispose();
            if (tLRPC$Chat != null) {
                if (tLRPC$Chat.default_banned_rights == null || i >= tLRPC$Chat.version) {
                    tLRPC$Chat.default_banned_rights = tLRPC$TL_chatBannedRights;
                    tLRPC$Chat.flags |= 262144;
                    tLRPC$Chat.version = i;
                    j = this.database.executeFast("UPDATE chats SET data = ? WHERE uid = ?");
                    try {
                        NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(tLRPC$Chat.getObjectSize());
                        tLRPC$Chat.serializeToStream(nativeByteBuffer);
                        j.bindByteBuffer(1, nativeByteBuffer);
                        j.bindLong(2, tLRPC$Chat.id);
                        j.step();
                        nativeByteBuffer.reuse();
                        j.dispose();
                    } catch (Exception e2) {
                        e = e2;
                        checkSQLException(e);
                        if (sQLiteCursor != null) {
                            sQLiteCursor.dispose();
                        }
                        if (j != 0) {
                            j.dispose();
                        }
                    }
                }
            }
        } catch (Exception e3) {
            e = e3;
            sQLiteCursor = queryFinalized;
            j = 0;
        } catch (Throwable th3) {
            th = th3;
            sQLiteCursor = queryFinalized;
            j = 0;
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
            if (j != 0) {
                j.dispose();
            }
            throw th;
        }
    }

    private void putChatsInternal(ArrayList<TLRPC$Chat> arrayList) throws Exception {
        if (arrayList == null || arrayList.isEmpty()) {
            return;
        }
        SQLitePreparedStatement executeFast = this.database.executeFast("REPLACE INTO chats VALUES(?, ?, ?)");
        for (int i = 0; i < arrayList.size(); i++) {
            TLRPC$Chat tLRPC$Chat = arrayList.get(i);
            if (tLRPC$Chat.min) {
                SQLiteCursor queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT data FROM chats WHERE uid = %d", Long.valueOf(tLRPC$Chat.id)), new Object[0]);
                if (queryFinalized.next()) {
                    try {
                        NativeByteBuffer byteBufferValue = queryFinalized.byteBufferValue(0);
                        if (byteBufferValue != null) {
                            TLRPC$Chat TLdeserialize = TLRPC$Chat.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                            byteBufferValue.reuse();
                            if (TLdeserialize != null) {
                                TLdeserialize.title = tLRPC$Chat.title;
                                TLdeserialize.photo = tLRPC$Chat.photo;
                                TLdeserialize.broadcast = tLRPC$Chat.broadcast;
                                TLdeserialize.verified = tLRPC$Chat.verified;
                                TLdeserialize.megagroup = tLRPC$Chat.megagroup;
                                TLdeserialize.call_not_empty = tLRPC$Chat.call_not_empty;
                                TLdeserialize.call_active = tLRPC$Chat.call_active;
                                TLRPC$TL_chatBannedRights tLRPC$TL_chatBannedRights = tLRPC$Chat.default_banned_rights;
                                if (tLRPC$TL_chatBannedRights != null) {
                                    TLdeserialize.default_banned_rights = tLRPC$TL_chatBannedRights;
                                    TLdeserialize.flags |= 262144;
                                }
                                TLRPC$TL_chatAdminRights tLRPC$TL_chatAdminRights = tLRPC$Chat.admin_rights;
                                if (tLRPC$TL_chatAdminRights != null) {
                                    TLdeserialize.admin_rights = tLRPC$TL_chatAdminRights;
                                    TLdeserialize.flags |= 16384;
                                }
                                TLRPC$TL_chatBannedRights tLRPC$TL_chatBannedRights2 = tLRPC$Chat.banned_rights;
                                if (tLRPC$TL_chatBannedRights2 != null) {
                                    TLdeserialize.banned_rights = tLRPC$TL_chatBannedRights2;
                                    TLdeserialize.flags |= 32768;
                                }
                                String str = tLRPC$Chat.username;
                                if (str != null) {
                                    TLdeserialize.username = str;
                                    TLdeserialize.flags |= 64;
                                } else {
                                    TLdeserialize.username = null;
                                    TLdeserialize.flags &= -65;
                                }
                                tLRPC$Chat = TLdeserialize;
                            }
                        }
                    } catch (Exception e) {
                        FileLog.e(e);
                    }
                }
                queryFinalized.dispose();
            }
            executeFast.requery();
            tLRPC$Chat.flags |= 131072;
            NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(tLRPC$Chat.getObjectSize());
            tLRPC$Chat.serializeToStream(nativeByteBuffer);
            executeFast.bindLong(1, tLRPC$Chat.id);
            String str2 = tLRPC$Chat.title;
            if (str2 != null) {
                executeFast.bindString(2, str2.toLowerCase());
            } else {
                executeFast.bindString(2, "");
            }
            executeFast.bindByteBuffer(3, nativeByteBuffer);
            executeFast.step();
            nativeByteBuffer.reuse();
            this.dialogIsForum.put(-tLRPC$Chat.id, tLRPC$Chat.forum ? 1 : 0);
        }
        executeFast.dispose();
    }

    public void getUsersInternal(String str, ArrayList<TLRPC$User> arrayList) throws Exception {
        if (str == null || str.length() == 0 || arrayList == null) {
            return;
        }
        SQLiteCursor queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT data, status FROM users WHERE uid IN(%s)", str), new Object[0]);
        while (queryFinalized.next()) {
            try {
                NativeByteBuffer byteBufferValue = queryFinalized.byteBufferValue(0);
                if (byteBufferValue != null) {
                    TLRPC$User TLdeserialize = TLRPC$User.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                    byteBufferValue.reuse();
                    if (TLdeserialize != null) {
                        TLRPC$UserStatus tLRPC$UserStatus = TLdeserialize.status;
                        if (tLRPC$UserStatus != null) {
                            tLRPC$UserStatus.expires = queryFinalized.intValue(1);
                        }
                        arrayList.add(TLdeserialize);
                    }
                }
            } catch (Exception e) {
                checkSQLException(e);
            }
        }
        queryFinalized.dispose();
    }

    public void getChatsInternal(String str, ArrayList<TLRPC$Chat> arrayList) throws Exception {
        getChatsInternal(str, arrayList, true);
    }

    public void getChatsInternal(String str, ArrayList<TLRPC$Chat> arrayList, boolean z) throws Exception {
        if (str == null || str.length() == 0 || arrayList == null) {
            return;
        }
        SQLiteCursor queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT data FROM chats WHERE uid IN(%s)", str), new Object[0]);
        while (queryFinalized.next()) {
            try {
                NativeByteBuffer byteBufferValue = queryFinalized.byteBufferValue(0);
                if (byteBufferValue != null) {
                    TLRPC$Chat TLdeserialize = TLRPC$Chat.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false, z);
                    byteBufferValue.reuse();
                    if (TLdeserialize != null) {
                        arrayList.add(TLdeserialize);
                    }
                }
            } catch (Exception e) {
                checkSQLException(e);
            }
        }
        queryFinalized.dispose();
    }

    public void getEncryptedChatsInternal(String str, ArrayList<TLRPC$EncryptedChat> arrayList, ArrayList<Long> arrayList2) throws Exception {
        if (str == null || str.length() == 0 || arrayList == null) {
            return;
        }
        SQLiteCursor queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT data, user, g, authkey, ttl, layer, seq_in, seq_out, use_count, exchange_id, key_date, fprint, fauthkey, khash, in_seq_no, admin_id, mtproto_seq FROM enc_chats WHERE uid IN(%s)", str), new Object[0]);
        while (queryFinalized.next()) {
            try {
                NativeByteBuffer byteBufferValue = queryFinalized.byteBufferValue(0);
                if (byteBufferValue != null) {
                    TLRPC$EncryptedChat TLdeserialize = TLRPC$EncryptedChat.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                    byteBufferValue.reuse();
                    if (TLdeserialize != null) {
                        long longValue = queryFinalized.longValue(1);
                        TLdeserialize.user_id = longValue;
                        if (arrayList2 != null && !arrayList2.contains(Long.valueOf(longValue))) {
                            arrayList2.add(Long.valueOf(TLdeserialize.user_id));
                        }
                        TLdeserialize.a_or_b = queryFinalized.byteArrayValue(2);
                        TLdeserialize.auth_key = queryFinalized.byteArrayValue(3);
                        TLdeserialize.ttl = queryFinalized.intValue(4);
                        TLdeserialize.layer = queryFinalized.intValue(5);
                        TLdeserialize.seq_in = queryFinalized.intValue(6);
                        TLdeserialize.seq_out = queryFinalized.intValue(7);
                        int intValue = queryFinalized.intValue(8);
                        TLdeserialize.key_use_count_in = (short) (intValue >> 16);
                        TLdeserialize.key_use_count_out = (short) intValue;
                        TLdeserialize.exchange_id = queryFinalized.longValue(9);
                        TLdeserialize.key_create_date = queryFinalized.intValue(10);
                        TLdeserialize.future_key_fingerprint = queryFinalized.longValue(11);
                        TLdeserialize.future_auth_key = queryFinalized.byteArrayValue(12);
                        TLdeserialize.key_hash = queryFinalized.byteArrayValue(13);
                        TLdeserialize.in_seq_no = queryFinalized.intValue(14);
                        long longValue2 = queryFinalized.longValue(15);
                        if (longValue2 != 0) {
                            TLdeserialize.admin_id = longValue2;
                        }
                        TLdeserialize.mtproto_seq = queryFinalized.intValue(16);
                        arrayList.add(TLdeserialize);
                    }
                }
            } catch (Exception e) {
                checkSQLException(e);
            }
        }
        queryFinalized.dispose();
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* renamed from: putUsersAndChatsInternal */
    public void lambda$putUsersAndChats$155(ArrayList<TLRPC$User> arrayList, ArrayList<TLRPC$Chat> arrayList2, boolean z) {
        SQLiteDatabase sQLiteDatabase;
        try {
            if (z) {
                try {
                    this.database.beginTransaction();
                } catch (Exception e) {
                    checkSQLException(e);
                    sQLiteDatabase = this.database;
                    if (sQLiteDatabase == null) {
                        return;
                    }
                }
            }
            putUsersInternal(arrayList);
            putChatsInternal(arrayList2);
            sQLiteDatabase = this.database;
            if (sQLiteDatabase == null) {
                return;
            }
            sQLiteDatabase.commitTransaction();
        } catch (Throwable th) {
            SQLiteDatabase sQLiteDatabase2 = this.database;
            if (sQLiteDatabase2 != null) {
                sQLiteDatabase2.commitTransaction();
            }
            throw th;
        }
    }

    public void putUsersAndChats(final ArrayList<TLRPC$User> arrayList, final ArrayList<TLRPC$Chat> arrayList2, final boolean z, boolean z2) {
        if (arrayList == null || !arrayList.isEmpty() || arrayList2 == null || !arrayList2.isEmpty()) {
            if (z2) {
                this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda159
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesStorage.this.lambda$putUsersAndChats$155(arrayList, arrayList2, z);
                    }
                });
            } else {
                lambda$putUsersAndChats$155(arrayList, arrayList2, z);
            }
        }
    }

    public void removeFromDownloadQueue(final long j, final int i, final boolean z) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda200
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$removeFromDownloadQueue$156(z, i, j);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$removeFromDownloadQueue$156(boolean z, int i, long j) {
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                if (z) {
                    SQLiteDatabase sQLiteDatabase = this.database;
                    Locale locale = Locale.US;
                    SQLiteCursor queryFinalized = sQLiteDatabase.queryFinalized(String.format(locale, "SELECT min(date) FROM download_queue WHERE type = %d", Integer.valueOf(i)), new Object[0]);
                    try {
                        int intValue = queryFinalized.next() ? queryFinalized.intValue(0) : -1;
                        queryFinalized.dispose();
                        if (intValue != -1) {
                            this.database.executeFast(String.format(locale, "UPDATE download_queue SET date = %d WHERE uid = %d AND type = %d", Integer.valueOf(intValue - 1), Long.valueOf(j), Integer.valueOf(i))).stepThis().dispose();
                        }
                    } catch (Exception e) {
                        e = e;
                        sQLiteCursor = queryFinalized;
                        checkSQLException(e);
                        if (sQLiteCursor != null) {
                            sQLiteCursor.dispose();
                        }
                    } catch (Throwable th) {
                        th = th;
                        sQLiteCursor = queryFinalized;
                        if (sQLiteCursor != null) {
                            sQLiteCursor.dispose();
                        }
                        throw th;
                    }
                } else {
                    this.database.executeFast(String.format(Locale.US, "DELETE FROM download_queue WHERE uid = %d AND type = %d", Long.valueOf(j), Integer.valueOf(i))).stepThis().dispose();
                }
            } catch (Throwable th2) {
                th = th2;
            }
        } catch (Exception e2) {
            e = e2;
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:31:0x006f  */
    /* JADX WARN: Removed duplicated region for block: B:38:0x007e  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void deleteFromDownloadQueue(final ArrayList<Pair<Long, Integer>> arrayList, boolean z) {
        Throwable th;
        SQLiteDatabase sQLiteDatabase;
        Exception e;
        SQLiteDatabase sQLiteDatabase2;
        if (arrayList == null || arrayList.isEmpty()) {
            return;
        }
        SQLitePreparedStatement sQLitePreparedStatement = null;
        if (z) {
            try {
                try {
                    this.database.beginTransaction();
                } catch (Exception e2) {
                    e = e2;
                    checkSQLException(e);
                    if (sQLitePreparedStatement != null) {
                        sQLitePreparedStatement.dispose();
                    }
                    if (z || (sQLiteDatabase2 = this.database) == null) {
                        return;
                    }
                    sQLiteDatabase2.commitTransaction();
                }
            } catch (Throwable th2) {
                th = th2;
                if (sQLitePreparedStatement != null) {
                    sQLitePreparedStatement.dispose();
                }
                if (z && (sQLiteDatabase = this.database) != null) {
                    sQLiteDatabase.commitTransaction();
                }
                throw th;
            }
        }
        SQLitePreparedStatement executeFast = this.database.executeFast("DELETE FROM download_queue WHERE uid = ? AND type = ?");
        try {
            int size = arrayList.size();
            for (int i = 0; i < size; i++) {
                Pair<Long, Integer> pair = arrayList.get(i);
                executeFast.requery();
                executeFast.bindLong(1, ((Long) pair.first).longValue());
                executeFast.bindInteger(2, ((Integer) pair.second).intValue());
                executeFast.step();
            }
            executeFast.dispose();
            if (z) {
                this.database.commitTransaction();
            }
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda140
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesStorage.this.lambda$deleteFromDownloadQueue$157(arrayList);
                }
            });
            if (!z || (sQLiteDatabase2 = this.database) == null) {
                return;
            }
        } catch (Exception e3) {
            e = e3;
            sQLitePreparedStatement = executeFast;
            checkSQLException(e);
            if (sQLitePreparedStatement != null) {
            }
            if (z) {
                return;
            }
            return;
        } catch (Throwable th3) {
            th = th3;
            sQLitePreparedStatement = executeFast;
            if (sQLitePreparedStatement != null) {
            }
            if (z) {
                sQLiteDatabase.commitTransaction();
            }
            throw th;
        }
        sQLiteDatabase2.commitTransaction();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$deleteFromDownloadQueue$157(ArrayList arrayList) {
        getDownloadController().cancelDownloading(arrayList);
    }

    public void clearDownloadQueue(final int i) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda29
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$clearDownloadQueue$158(i);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$clearDownloadQueue$158(int i) {
        try {
            if (i == 0) {
                this.database.executeFast("DELETE FROM download_queue WHERE 1").stepThis().dispose();
            } else {
                this.database.executeFast(String.format(Locale.US, "DELETE FROM download_queue WHERE type = %d", Integer.valueOf(i))).stepThis().dispose();
            }
        } catch (Exception e) {
            checkSQLException(e);
        }
    }

    public void getDownloadQueue(final int i) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda34
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$getDownloadQueue$160(i);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$getDownloadQueue$160(final int i) {
        int i2;
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                final ArrayList arrayList = new ArrayList();
                SQLiteCursor queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT uid, type, data, parent FROM download_queue WHERE type = %d ORDER BY date DESC LIMIT 3", Integer.valueOf(i)), new Object[0]);
                while (queryFinalized.next()) {
                    try {
                        DownloadObject downloadObject = new DownloadObject();
                        downloadObject.type = queryFinalized.intValue(1);
                        downloadObject.id = queryFinalized.longValue(0);
                        downloadObject.parent = queryFinalized.stringValue(3);
                        NativeByteBuffer byteBufferValue = queryFinalized.byteBufferValue(2);
                        if (byteBufferValue != null) {
                            TLRPC$MessageMedia TLdeserialize = TLRPC$MessageMedia.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                            byteBufferValue.reuse();
                            TLRPC$Document tLRPC$Document = TLdeserialize.document;
                            if (tLRPC$Document != null) {
                                downloadObject.object = tLRPC$Document;
                                downloadObject.secret = MessageObject.isVideoDocument(tLRPC$Document) && (i2 = TLdeserialize.ttl_seconds) > 0 && i2 <= 60;
                            } else {
                                TLRPC$Photo tLRPC$Photo = TLdeserialize.photo;
                                if (tLRPC$Photo != null) {
                                    downloadObject.object = tLRPC$Photo;
                                    int i3 = TLdeserialize.ttl_seconds;
                                    downloadObject.secret = i3 > 0 && i3 <= 60;
                                }
                            }
                            downloadObject.forceCache = (TLdeserialize.flags & Integer.MIN_VALUE) != 0;
                        }
                        arrayList.add(downloadObject);
                    } catch (Exception e) {
                        e = e;
                        sQLiteCursor = queryFinalized;
                        checkSQLException(e);
                        if (sQLiteCursor != null) {
                            sQLiteCursor.dispose();
                            return;
                        }
                        return;
                    } catch (Throwable th) {
                        th = th;
                        sQLiteCursor = queryFinalized;
                        if (sQLiteCursor != null) {
                            sQLiteCursor.dispose();
                        }
                        throw th;
                    }
                }
                queryFinalized.dispose();
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda58
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesStorage.this.lambda$getDownloadQueue$159(i, arrayList);
                    }
                });
            } catch (Exception e2) {
                e = e2;
            }
        } catch (Throwable th2) {
            th = th2;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$getDownloadQueue$159(int i, ArrayList arrayList) {
        getDownloadController().processDownloadObjects(i, arrayList);
    }

    private int getMessageMediaType(TLRPC$Message tLRPC$Message) {
        if (tLRPC$Message instanceof TLRPC$TL_message_secret) {
            if ((tLRPC$Message.media instanceof TLRPC$TL_messageMediaPhoto) || MessageObject.isGifMessage(tLRPC$Message) || MessageObject.isVoiceMessage(tLRPC$Message) || MessageObject.isVideoMessage(tLRPC$Message) || MessageObject.isRoundVideoMessage(tLRPC$Message)) {
                int i = tLRPC$Message.ttl;
                return (i <= 0 || i > 60) ? 0 : 1;
            }
            return -1;
        }
        if (tLRPC$Message instanceof TLRPC$TL_message) {
            TLRPC$MessageMedia tLRPC$MessageMedia = tLRPC$Message.media;
            if (((tLRPC$MessageMedia instanceof TLRPC$TL_messageMediaPhoto) || (tLRPC$MessageMedia instanceof TLRPC$TL_messageMediaDocument)) && tLRPC$MessageMedia.ttl_seconds != 0) {
                return 1;
            }
        }
        return ((tLRPC$Message.media instanceof TLRPC$TL_messageMediaPhoto) || MessageObject.isVideoMessage(tLRPC$Message)) ? 0 : -1;
    }

    public void putWebPages(final LongSparseArray<TLRPC$WebPage> longSparseArray) {
        if (isEmpty(longSparseArray)) {
            return;
        }
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda129
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$putWebPages$162(longSparseArray);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:131:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:80:0x01a5  */
    /* JADX WARN: Removed duplicated region for block: B:82:0x01aa  */
    /* JADX WARN: Removed duplicated region for block: B:84:0x01af  */
    /* JADX WARN: Removed duplicated region for block: B:91:0x01bd  */
    /* JADX WARN: Removed duplicated region for block: B:93:0x01c2  */
    /* JADX WARN: Removed duplicated region for block: B:95:0x01c7  */
    /* JADX WARN: Removed duplicated region for block: B:98:0x01ce  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$putWebPages$162(LongSparseArray longSparseArray) {
        SQLiteCursor sQLiteCursor;
        SQLitePreparedStatement sQLitePreparedStatement;
        SQLitePreparedStatement sQLitePreparedStatement2;
        SQLiteDatabase sQLiteDatabase;
        SQLiteDatabase sQLiteDatabase2;
        final ArrayList arrayList;
        try {
            arrayList = new ArrayList();
            int size = longSparseArray.size();
            int i = 0;
            int i2 = 0;
            while (true) {
                int i3 = 2;
                if (i2 >= size) {
                    break;
                }
                SQLiteDatabase sQLiteDatabase3 = this.database;
                SQLiteCursor queryFinalized = sQLiteDatabase3.queryFinalized("SELECT mid, uid FROM webpage_pending_v2 WHERE id = " + longSparseArray.keyAt(i2), new Object[i]);
                try {
                    LongSparseArray longSparseArray2 = new LongSparseArray();
                    while (queryFinalized.next()) {
                        long longValue = queryFinalized.longValue(1);
                        ArrayList arrayList2 = (ArrayList) longSparseArray2.get(longValue);
                        if (arrayList2 == null) {
                            arrayList2 = new ArrayList();
                            longSparseArray2.put(longValue, arrayList2);
                        }
                        arrayList2.add(Integer.valueOf(queryFinalized.intValue(i)));
                    }
                    queryFinalized.dispose();
                    if (!longSparseArray2.isEmpty()) {
                        int size2 = longSparseArray2.size();
                        int i4 = 0;
                        while (i4 < size2) {
                            long keyAt = longSparseArray2.keyAt(i4);
                            SQLiteDatabase sQLiteDatabase4 = this.database;
                            Locale locale = Locale.US;
                            Object[] objArr = new Object[i3];
                            objArr[0] = TextUtils.join(",", (ArrayList) longSparseArray2.valueAt(i4));
                            objArr[1] = Long.valueOf(keyAt);
                            sQLiteCursor = sQLiteDatabase4.queryFinalized(String.format(locale, "SELECT mid, data FROM messages_v2 WHERE mid IN (%s) AND uid = %d", objArr), new Object[0]);
                            while (sQLiteCursor.next()) {
                                try {
                                    int intValue = sQLiteCursor.intValue(0);
                                    NativeByteBuffer byteBufferValue = sQLiteCursor.byteBufferValue(1);
                                    if (byteBufferValue != null) {
                                        TLRPC$Message TLdeserialize = TLRPC$Message.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                                        TLdeserialize.readAttachPath(byteBufferValue, getUserConfig().clientUserId);
                                        byteBufferValue.reuse();
                                        TLRPC$MessageMedia tLRPC$MessageMedia = TLdeserialize.media;
                                        if (tLRPC$MessageMedia instanceof TLRPC$TL_messageMediaWebPage) {
                                            TLdeserialize.id = intValue;
                                            tLRPC$MessageMedia.webpage = (TLRPC$WebPage) longSparseArray.valueAt(i2);
                                            arrayList.add(TLdeserialize);
                                        }
                                    }
                                } catch (Exception e) {
                                    e = e;
                                    sQLitePreparedStatement = null;
                                    sQLitePreparedStatement2 = null;
                                    try {
                                        checkSQLException(e);
                                        if (sQLiteCursor != null) {
                                            sQLiteCursor.dispose();
                                        }
                                        if (sQLitePreparedStatement2 != null) {
                                            sQLitePreparedStatement2.dispose();
                                        }
                                        if (sQLitePreparedStatement != null) {
                                            sQLitePreparedStatement.dispose();
                                        }
                                        sQLiteDatabase2 = this.database;
                                        if (sQLiteDatabase2 == null) {
                                            return;
                                        }
                                        sQLiteDatabase2.commitTransaction();
                                    } catch (Throwable th) {
                                        th = th;
                                        if (sQLiteCursor != null) {
                                            sQLiteCursor.dispose();
                                        }
                                        if (sQLitePreparedStatement2 != null) {
                                            sQLitePreparedStatement2.dispose();
                                        }
                                        if (sQLitePreparedStatement != null) {
                                            sQLitePreparedStatement.dispose();
                                        }
                                        sQLiteDatabase = this.database;
                                        if (sQLiteDatabase != null) {
                                            sQLiteDatabase.commitTransaction();
                                        }
                                        throw th;
                                    }
                                } catch (Throwable th2) {
                                    th = th2;
                                    sQLitePreparedStatement = null;
                                    sQLitePreparedStatement2 = null;
                                    if (sQLiteCursor != null) {
                                    }
                                    if (sQLitePreparedStatement2 != null) {
                                    }
                                    if (sQLitePreparedStatement != null) {
                                    }
                                    sQLiteDatabase = this.database;
                                    if (sQLiteDatabase != null) {
                                    }
                                    throw th;
                                }
                            }
                            sQLiteCursor.dispose();
                            i4++;
                            i3 = 2;
                        }
                    }
                    i2++;
                    i = 0;
                } catch (Exception e2) {
                    e = e2;
                    sQLiteCursor = queryFinalized;
                } catch (Throwable th3) {
                    th = th3;
                    sQLiteCursor = queryFinalized;
                }
            }
        } catch (Exception e3) {
            e = e3;
            sQLiteCursor = null;
        } catch (Throwable th4) {
            th = th4;
            sQLiteCursor = null;
        }
        if (arrayList.isEmpty()) {
            SQLiteDatabase sQLiteDatabase5 = this.database;
            if (sQLiteDatabase5 != null) {
                sQLiteDatabase5.commitTransaction();
                return;
            }
            return;
        }
        this.database.beginTransaction();
        SQLitePreparedStatement executeFast = this.database.executeFast("UPDATE messages_v2 SET data = ? WHERE mid = ? AND uid = ?");
        try {
            sQLitePreparedStatement = this.database.executeFast("UPDATE media_v4 SET data = ? WHERE mid = ? AND uid = ?");
            for (int i5 = 0; i5 < arrayList.size(); i5++) {
                try {
                    TLRPC$Message tLRPC$Message = (TLRPC$Message) arrayList.get(i5);
                    NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(tLRPC$Message.getObjectSize());
                    tLRPC$Message.serializeToStream(nativeByteBuffer);
                    executeFast.requery();
                    executeFast.bindByteBuffer(1, nativeByteBuffer);
                    executeFast.bindInteger(2, tLRPC$Message.id);
                    executeFast.bindLong(3, MessageObject.getDialogId(tLRPC$Message));
                    executeFast.step();
                    sQLitePreparedStatement.requery();
                    sQLitePreparedStatement.bindByteBuffer(1, nativeByteBuffer);
                    sQLitePreparedStatement.bindInteger(2, tLRPC$Message.id);
                    sQLitePreparedStatement.bindLong(3, MessageObject.getDialogId(tLRPC$Message));
                    sQLitePreparedStatement.step();
                    nativeByteBuffer.reuse();
                } catch (Exception e4) {
                    e = e4;
                    sQLitePreparedStatement2 = executeFast;
                    sQLiteCursor = null;
                    checkSQLException(e);
                    if (sQLiteCursor != null) {
                    }
                    if (sQLitePreparedStatement2 != null) {
                    }
                    if (sQLitePreparedStatement != null) {
                    }
                    sQLiteDatabase2 = this.database;
                    if (sQLiteDatabase2 == null) {
                    }
                    sQLiteDatabase2.commitTransaction();
                } catch (Throwable th5) {
                    th = th5;
                    sQLitePreparedStatement2 = executeFast;
                    sQLiteCursor = null;
                    if (sQLiteCursor != null) {
                    }
                    if (sQLitePreparedStatement2 != null) {
                    }
                    if (sQLitePreparedStatement != null) {
                    }
                    sQLiteDatabase = this.database;
                    if (sQLiteDatabase != null) {
                    }
                    throw th;
                }
            }
            executeFast.dispose();
        } catch (Exception e5) {
            e = e5;
            sQLitePreparedStatement2 = executeFast;
            sQLiteCursor = null;
            sQLitePreparedStatement = null;
        } catch (Throwable th6) {
            th = th6;
            sQLitePreparedStatement2 = executeFast;
            sQLiteCursor = null;
            sQLitePreparedStatement = null;
        }
        try {
            sQLitePreparedStatement.dispose();
            this.database.commitTransaction();
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda144
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesStorage.this.lambda$putWebPages$161(arrayList);
                }
            });
            sQLiteDatabase2 = this.database;
            if (sQLiteDatabase2 == null) {
                return;
            }
        } catch (Exception e6) {
            e = e6;
            sQLiteCursor = null;
            sQLitePreparedStatement2 = null;
            checkSQLException(e);
            if (sQLiteCursor != null) {
            }
            if (sQLitePreparedStatement2 != null) {
            }
            if (sQLitePreparedStatement != null) {
            }
            sQLiteDatabase2 = this.database;
            if (sQLiteDatabase2 == null) {
            }
            sQLiteDatabase2.commitTransaction();
        } catch (Throwable th7) {
            th = th7;
            sQLiteCursor = null;
            sQLitePreparedStatement2 = null;
            if (sQLiteCursor != null) {
            }
            if (sQLitePreparedStatement2 != null) {
            }
            if (sQLitePreparedStatement != null) {
            }
            sQLiteDatabase = this.database;
            if (sQLiteDatabase != null) {
            }
            throw th;
        }
        sQLiteDatabase2.commitTransaction();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$putWebPages$161(ArrayList arrayList) {
        getNotificationCenter().postNotificationName(NotificationCenter.didReceivedWebpages, arrayList);
    }

    public void overwriteChannel(final long j, final TLRPC$TL_updates_channelDifferenceTooLong tLRPC$TL_updates_channelDifferenceTooLong, final int i) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda86
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$overwriteChannel$164(j, i, tLRPC$TL_updates_channelDifferenceTooLong);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:14:0x020b  */
    /* JADX WARN: Removed duplicated region for block: B:15:0x020d  */
    /* JADX WARN: Removed duplicated region for block: B:18:0x023a  */
    /* JADX WARN: Removed duplicated region for block: B:22:0x024e A[Catch: all -> 0x0260, Exception -> 0x0263, TRY_LEAVE, TryCatch #5 {Exception -> 0x0263, all -> 0x0260, blocks: (B:3:0x000a, B:12:0x003c, B:16:0x020e, B:19:0x023c, B:20:0x0244, B:22:0x024e), top: B:44:0x000a }] */
    /* JADX WARN: Removed duplicated region for block: B:38:0x0271  */
    /* JADX WARN: Removed duplicated region for block: B:48:? A[RETURN, SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$overwriteChannel$164(long j, int i, final TLRPC$TL_updates_channelDifferenceTooLong tLRPC$TL_updates_channelDifferenceTooLong) {
        SQLiteCursor sQLiteCursor;
        SQLiteCursor queryFinalized;
        int intValue;
        boolean z;
        final long j2 = -j;
        try {
            SQLiteDatabase sQLiteDatabase = this.database;
            queryFinalized = sQLiteDatabase.queryFinalized("SELECT pinned FROM dialogs WHERE did = " + j2, new Object[0]);
        } catch (Exception e) {
            e = e;
            sQLiteCursor = null;
        } catch (Throwable th) {
            th = th;
            sQLiteCursor = null;
        }
        try {
            if (queryFinalized.next()) {
                intValue = queryFinalized.intValue(0);
            } else {
                intValue = 0;
                if (i != 0) {
                    z = true;
                    queryFinalized.dispose();
                    SQLiteDatabase sQLiteDatabase2 = this.database;
                    sQLiteDatabase2.executeFast("DELETE FROM chat_pinned_count WHERE uid = " + j2).stepThis().dispose();
                    SQLiteDatabase sQLiteDatabase3 = this.database;
                    sQLiteDatabase3.executeFast("DELETE FROM chat_pinned_v2 WHERE uid = " + j2).stepThis().dispose();
                    SQLiteDatabase sQLiteDatabase4 = this.database;
                    sQLiteDatabase4.executeFast("DELETE FROM messages_v2 WHERE uid = " + j2).stepThis().dispose();
                    SQLiteDatabase sQLiteDatabase5 = this.database;
                    sQLiteDatabase5.executeFast("DELETE FROM bot_keyboard WHERE uid = " + j2).stepThis().dispose();
                    SQLiteDatabase sQLiteDatabase6 = this.database;
                    sQLiteDatabase6.executeFast("UPDATE media_counts_v2 SET old = 1 WHERE uid = " + j2).stepThis().dispose();
                    SQLiteDatabase sQLiteDatabase7 = this.database;
                    sQLiteDatabase7.executeFast("DELETE FROM media_v4 WHERE uid = " + j2).stepThis().dispose();
                    SQLiteDatabase sQLiteDatabase8 = this.database;
                    sQLiteDatabase8.executeFast("DELETE FROM messages_holes WHERE uid = " + j2).stepThis().dispose();
                    SQLiteDatabase sQLiteDatabase9 = this.database;
                    sQLiteDatabase9.executeFast("DELETE FROM media_holes_v2 WHERE uid = " + j2).stepThis().dispose();
                    SQLiteDatabase sQLiteDatabase10 = this.database;
                    sQLiteDatabase10.executeFast("DELETE FROM topics WHERE did = " + j2).stepThis().dispose();
                    SQLiteDatabase sQLiteDatabase11 = this.database;
                    sQLiteDatabase11.executeFast("DELETE FROM media_topics WHERE uid = " + j2).stepThis().dispose();
                    SQLiteDatabase sQLiteDatabase12 = this.database;
                    sQLiteDatabase12.executeFast("DELETE FROM media_holes_topics WHERE uid = " + j2).stepThis().dispose();
                    SQLiteDatabase sQLiteDatabase13 = this.database;
                    sQLiteDatabase13.executeFast("UPDATE media_counts_topics SET old = 1 WHERE uid = " + j2).stepThis().dispose();
                    SQLiteDatabase sQLiteDatabase14 = this.database;
                    sQLiteDatabase14.executeFast("DELETE FROM messages_topics WHERE uid = " + j2).stepThis().dispose();
                    SQLiteDatabase sQLiteDatabase15 = this.database;
                    sQLiteDatabase15.executeFast("DELETE FROM messages_holes_topics WHERE uid = " + j2).stepThis().dispose();
                    getMediaDataController().clearBotKeyboard(j2, null);
                    TLRPC$TL_messages_dialogs tLRPC$TL_messages_dialogs = new TLRPC$TL_messages_dialogs();
                    tLRPC$TL_messages_dialogs.chats.addAll(tLRPC$TL_updates_channelDifferenceTooLong.chats);
                    tLRPC$TL_messages_dialogs.users.addAll(tLRPC$TL_updates_channelDifferenceTooLong.users);
                    tLRPC$TL_messages_dialogs.messages.addAll(tLRPC$TL_updates_channelDifferenceTooLong.messages);
                    TLRPC$Dialog tLRPC$Dialog = tLRPC$TL_updates_channelDifferenceTooLong.dialog;
                    tLRPC$Dialog.id = j2;
                    tLRPC$Dialog.flags = 1;
                    tLRPC$Dialog.notify_settings = null;
                    tLRPC$Dialog.pinned = intValue == 0;
                    tLRPC$Dialog.pinnedNum = intValue;
                    tLRPC$TL_messages_dialogs.dialogs.add(tLRPC$Dialog);
                    putDialogsInternal(tLRPC$TL_messages_dialogs, 0);
                    updateDialogsWithDeletedMessages(j2, j, new ArrayList<>(), null, false);
                    AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda120
                        @Override // java.lang.Runnable
                        public final void run() {
                            MessagesStorage.this.lambda$overwriteChannel$163(j2, tLRPC$TL_updates_channelDifferenceTooLong);
                        }
                    });
                    if (z) {
                        if (i == 1) {
                            getMessagesController().checkChatInviter(j, true);
                        } else {
                            getMessagesController().generateJoinMessage(j, false);
                        }
                    }
                    if (i == 1) {
                        getMessagesController().getTopicsController().reloadTopics(j);
                        return;
                    }
                    return;
                }
            }
            z = false;
            queryFinalized.dispose();
            SQLiteDatabase sQLiteDatabase22 = this.database;
            sQLiteDatabase22.executeFast("DELETE FROM chat_pinned_count WHERE uid = " + j2).stepThis().dispose();
            SQLiteDatabase sQLiteDatabase32 = this.database;
            sQLiteDatabase32.executeFast("DELETE FROM chat_pinned_v2 WHERE uid = " + j2).stepThis().dispose();
            SQLiteDatabase sQLiteDatabase42 = this.database;
            sQLiteDatabase42.executeFast("DELETE FROM messages_v2 WHERE uid = " + j2).stepThis().dispose();
            SQLiteDatabase sQLiteDatabase52 = this.database;
            sQLiteDatabase52.executeFast("DELETE FROM bot_keyboard WHERE uid = " + j2).stepThis().dispose();
            SQLiteDatabase sQLiteDatabase62 = this.database;
            sQLiteDatabase62.executeFast("UPDATE media_counts_v2 SET old = 1 WHERE uid = " + j2).stepThis().dispose();
            SQLiteDatabase sQLiteDatabase72 = this.database;
            sQLiteDatabase72.executeFast("DELETE FROM media_v4 WHERE uid = " + j2).stepThis().dispose();
            SQLiteDatabase sQLiteDatabase82 = this.database;
            sQLiteDatabase82.executeFast("DELETE FROM messages_holes WHERE uid = " + j2).stepThis().dispose();
            SQLiteDatabase sQLiteDatabase92 = this.database;
            sQLiteDatabase92.executeFast("DELETE FROM media_holes_v2 WHERE uid = " + j2).stepThis().dispose();
            SQLiteDatabase sQLiteDatabase102 = this.database;
            sQLiteDatabase102.executeFast("DELETE FROM topics WHERE did = " + j2).stepThis().dispose();
            SQLiteDatabase sQLiteDatabase112 = this.database;
            sQLiteDatabase112.executeFast("DELETE FROM media_topics WHERE uid = " + j2).stepThis().dispose();
            SQLiteDatabase sQLiteDatabase122 = this.database;
            sQLiteDatabase122.executeFast("DELETE FROM media_holes_topics WHERE uid = " + j2).stepThis().dispose();
            SQLiteDatabase sQLiteDatabase132 = this.database;
            sQLiteDatabase132.executeFast("UPDATE media_counts_topics SET old = 1 WHERE uid = " + j2).stepThis().dispose();
            SQLiteDatabase sQLiteDatabase142 = this.database;
            sQLiteDatabase142.executeFast("DELETE FROM messages_topics WHERE uid = " + j2).stepThis().dispose();
            SQLiteDatabase sQLiteDatabase152 = this.database;
            sQLiteDatabase152.executeFast("DELETE FROM messages_holes_topics WHERE uid = " + j2).stepThis().dispose();
            getMediaDataController().clearBotKeyboard(j2, null);
            TLRPC$TL_messages_dialogs tLRPC$TL_messages_dialogs2 = new TLRPC$TL_messages_dialogs();
            tLRPC$TL_messages_dialogs2.chats.addAll(tLRPC$TL_updates_channelDifferenceTooLong.chats);
            tLRPC$TL_messages_dialogs2.users.addAll(tLRPC$TL_updates_channelDifferenceTooLong.users);
            tLRPC$TL_messages_dialogs2.messages.addAll(tLRPC$TL_updates_channelDifferenceTooLong.messages);
            TLRPC$Dialog tLRPC$Dialog2 = tLRPC$TL_updates_channelDifferenceTooLong.dialog;
            tLRPC$Dialog2.id = j2;
            tLRPC$Dialog2.flags = 1;
            tLRPC$Dialog2.notify_settings = null;
            tLRPC$Dialog2.pinned = intValue == 0;
            tLRPC$Dialog2.pinnedNum = intValue;
            tLRPC$TL_messages_dialogs2.dialogs.add(tLRPC$Dialog2);
            putDialogsInternal(tLRPC$TL_messages_dialogs2, 0);
            updateDialogsWithDeletedMessages(j2, j, new ArrayList<>(), null, false);
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda120
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesStorage.this.lambda$overwriteChannel$163(j2, tLRPC$TL_updates_channelDifferenceTooLong);
                }
            });
            if (z) {
            }
            if (i == 1) {
            }
        } catch (Exception e2) {
            e = e2;
            sQLiteCursor = queryFinalized;
            try {
                checkSQLException(e);
                if (sQLiteCursor != null) {
                    sQLiteCursor.dispose();
                }
            } catch (Throwable th2) {
                th = th2;
                if (sQLiteCursor != null) {
                    sQLiteCursor.dispose();
                }
                throw th;
            }
        } catch (Throwable th3) {
            th = th3;
            sQLiteCursor = queryFinalized;
            if (sQLiteCursor != null) {
            }
            throw th;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$overwriteChannel$163(long j, TLRPC$TL_updates_channelDifferenceTooLong tLRPC$TL_updates_channelDifferenceTooLong) {
        getNotificationCenter().postNotificationName(NotificationCenter.removeAllMessagesFromDialog, Long.valueOf(j), Boolean.TRUE, tLRPC$TL_updates_channelDifferenceTooLong);
    }

    public void putChannelViews(final LongSparseArray<SparseIntArray> longSparseArray, final LongSparseArray<SparseIntArray> longSparseArray2, final LongSparseArray<SparseArray<TLRPC$MessageReplies>> longSparseArray3, final boolean z) {
        if (isEmpty(longSparseArray) && isEmpty(longSparseArray2) && isEmpty(longSparseArray3)) {
            return;
        }
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda132
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$putChannelViews$165(longSparseArray, longSparseArray2, longSparseArray3, z);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:136:0x023e  */
    /* JADX WARN: Removed duplicated region for block: B:140:0x0247  */
    /* JADX WARN: Removed duplicated region for block: B:144:0x024e  */
    /* JADX WARN: Removed duplicated region for block: B:148:0x0257  */
    /* JADX WARN: Removed duplicated region for block: B:183:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:61:0x0136 A[Catch: all -> 0x0215, Exception -> 0x0219, TRY_LEAVE, TryCatch #12 {Exception -> 0x0219, all -> 0x0215, blocks: (B:43:0x00d0, B:45:0x00d6, B:47:0x00e7, B:58:0x012b, B:61:0x0136, B:96:0x01d8), top: B:166:0x00d0 }] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$putChannelViews$165(LongSparseArray longSparseArray, LongSparseArray longSparseArray2, LongSparseArray longSparseArray3, boolean z) {
        SQLitePreparedStatement sQLitePreparedStatement;
        SQLiteDatabase sQLiteDatabase;
        SQLitePreparedStatement sQLitePreparedStatement2;
        SQLiteDatabase sQLiteDatabase2;
        TLRPC$TL_messageReplies TLdeserialize;
        int i;
        int i2;
        LongSparseArray longSparseArray4 = longSparseArray3;
        char c = 1;
        try {
            try {
                this.database.beginTransaction();
                try {
                    int i3 = 2;
                    if (!isEmpty(longSparseArray)) {
                        try {
                            SQLitePreparedStatement executeFast = this.database.executeFast("UPDATE messages_v2 SET media = max((SELECT media FROM messages_v2 WHERE mid = ? AND uid = ?), ?) WHERE mid = ? AND uid = ?");
                            for (int i4 = 0; i4 < longSparseArray.size(); i4++) {
                                try {
                                    long keyAt = longSparseArray.keyAt(i4);
                                    SparseIntArray sparseIntArray = (SparseIntArray) longSparseArray.valueAt(i4);
                                    int size = sparseIntArray.size();
                                    for (int i5 = 0; i5 < size; i5++) {
                                        int valueAt = sparseIntArray.valueAt(i5);
                                        int keyAt2 = sparseIntArray.keyAt(i5);
                                        executeFast.requery();
                                        executeFast.bindInteger(1, keyAt2);
                                        executeFast.bindLong(2, keyAt);
                                        executeFast.bindInteger(3, valueAt);
                                        executeFast.bindInteger(4, keyAt2);
                                        executeFast.bindLong(5, keyAt);
                                        executeFast.step();
                                    }
                                } catch (Exception e) {
                                    e = e;
                                    sQLitePreparedStatement2 = executeFast;
                                    checkSQLException(e);
                                    if (c != 0) {
                                    }
                                    if (sQLitePreparedStatement2 == null) {
                                    }
                                } catch (Throwable th) {
                                    th = th;
                                    sQLitePreparedStatement = executeFast;
                                    if (c != 0) {
                                    }
                                    if (sQLitePreparedStatement != null) {
                                    }
                                    throw th;
                                }
                            }
                            executeFast.dispose();
                        } catch (Exception e2) {
                            e = e2;
                            sQLitePreparedStatement2 = null;
                            checkSQLException(e);
                            if (c != 0) {
                            }
                            if (sQLitePreparedStatement2 == null) {
                            }
                        } catch (Throwable th2) {
                            th = th2;
                            sQLitePreparedStatement = null;
                            if (c != 0) {
                            }
                            if (sQLitePreparedStatement != null) {
                            }
                            throw th;
                        }
                    }
                    if (!isEmpty(longSparseArray2)) {
                        sQLitePreparedStatement2 = this.database.executeFast("UPDATE messages_v2 SET forwards = max((SELECT forwards FROM messages_v2 WHERE mid = ? AND uid = ?), ?) WHERE mid = ? AND uid = ?");
                        for (int i6 = 0; i6 < longSparseArray2.size(); i6++) {
                            try {
                                long keyAt3 = longSparseArray2.keyAt(i6);
                                SparseIntArray sparseIntArray2 = (SparseIntArray) longSparseArray2.valueAt(i6);
                                int size2 = sparseIntArray2.size();
                                for (int i7 = 0; i7 < size2; i7++) {
                                    int valueAt2 = sparseIntArray2.valueAt(i7);
                                    int keyAt4 = sparseIntArray2.keyAt(i7);
                                    sQLitePreparedStatement2.requery();
                                    sQLitePreparedStatement2.bindInteger(1, keyAt4);
                                    sQLitePreparedStatement2.bindLong(2, keyAt3);
                                    sQLitePreparedStatement2.bindInteger(3, valueAt2);
                                    sQLitePreparedStatement2.bindInteger(4, keyAt4);
                                    sQLitePreparedStatement2.bindLong(5, keyAt3);
                                    sQLitePreparedStatement2.step();
                                }
                            } catch (Exception e3) {
                                e = e3;
                                checkSQLException(e);
                                if (c != 0 && (sQLiteDatabase2 = this.database) != null) {
                                    sQLiteDatabase2.commitTransaction();
                                }
                                if (sQLitePreparedStatement2 == null) {
                                    sQLitePreparedStatement2.dispose();
                                    return;
                                }
                                return;
                            }
                        }
                        sQLitePreparedStatement2.dispose();
                    }
                    if (!isEmpty(longSparseArray3)) {
                        SQLitePreparedStatement executeFast2 = this.database.executeFast("UPDATE messages_v2 SET replies_data = ? WHERE mid = ? AND uid = ?");
                        int i8 = 0;
                        while (i8 < longSparseArray3.size()) {
                            try {
                                long keyAt5 = longSparseArray4.keyAt(i8);
                                SparseArray sparseArray = (SparseArray) longSparseArray4.valueAt(i8);
                                int size3 = sparseArray.size();
                                int i9 = 0;
                                while (i9 < size3) {
                                    int keyAt6 = sparseArray.keyAt(i9);
                                    SQLiteDatabase sQLiteDatabase3 = this.database;
                                    Locale locale = Locale.US;
                                    Object[] objArr = new Object[i3];
                                    objArr[0] = Integer.valueOf(keyAt6);
                                    objArr[c] = Long.valueOf(keyAt5);
                                    SQLiteCursor queryFinalized = sQLiteDatabase3.queryFinalized(String.format(locale, "SELECT replies_data FROM messages_v2 WHERE mid = %d AND uid = %d", objArr), new Object[0]);
                                    boolean next = queryFinalized.next();
                                    if (next) {
                                        try {
                                            NativeByteBuffer byteBufferValue = queryFinalized.byteBufferValue(0);
                                            if (byteBufferValue != null) {
                                                TLdeserialize = TLRPC$MessageReplies.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                                                byteBufferValue.reuse();
                                                queryFinalized.dispose();
                                                if (next) {
                                                    TLRPC$MessageReplies tLRPC$MessageReplies = (TLRPC$MessageReplies) sparseArray.get(sparseArray.keyAt(i9));
                                                    if (z || TLdeserialize == null || (i2 = TLdeserialize.replies_pts) == 0 || tLRPC$MessageReplies.replies_pts > i2 || tLRPC$MessageReplies.read_max_id > TLdeserialize.read_max_id || tLRPC$MessageReplies.max_id > TLdeserialize.max_id) {
                                                        if (z) {
                                                            if (TLdeserialize == null) {
                                                                TLRPC$TL_messageReplies tLRPC$TL_messageReplies = new TLRPC$TL_messageReplies();
                                                                tLRPC$TL_messageReplies.flags |= 2;
                                                                TLdeserialize = tLRPC$TL_messageReplies;
                                                            }
                                                            try {
                                                                TLdeserialize.replies += tLRPC$MessageReplies.replies;
                                                                int size4 = tLRPC$MessageReplies.recent_repliers.size();
                                                                for (int i10 = 0; i10 < size4; i10++) {
                                                                    long peerId = MessageObject.getPeerId(tLRPC$MessageReplies.recent_repliers.get(i10));
                                                                    int size5 = TLdeserialize.recent_repliers.size();
                                                                    int i11 = 0;
                                                                    while (i11 < size5) {
                                                                        if (peerId == MessageObject.getPeerId(TLdeserialize.recent_repliers.get(i11))) {
                                                                            TLdeserialize.recent_repliers.remove(i11);
                                                                            i11--;
                                                                            size5--;
                                                                        }
                                                                        i11++;
                                                                    }
                                                                }
                                                                TLdeserialize.recent_repliers.addAll(0, tLRPC$MessageReplies.recent_repliers);
                                                                while (TLdeserialize.recent_repliers.size() > 3) {
                                                                    TLdeserialize.recent_repliers.remove(0);
                                                                }
                                                                tLRPC$MessageReplies = TLdeserialize;
                                                            } catch (Exception e4) {
                                                                e = e4;
                                                                sQLitePreparedStatement2 = executeFast2;
                                                                c = 1;
                                                                checkSQLException(e);
                                                                if (c != 0) {
                                                                }
                                                                if (sQLitePreparedStatement2 == null) {
                                                                }
                                                            } catch (Throwable th3) {
                                                                th = th3;
                                                                sQLitePreparedStatement = executeFast2;
                                                                c = 1;
                                                                if (c != 0) {
                                                                }
                                                                if (sQLitePreparedStatement != null) {
                                                                }
                                                                throw th;
                                                            }
                                                        }
                                                        if (TLdeserialize != null && (i = TLdeserialize.read_max_id) > tLRPC$MessageReplies.read_max_id) {
                                                            tLRPC$MessageReplies.read_max_id = i;
                                                        }
                                                        executeFast2.requery();
                                                        NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(tLRPC$MessageReplies.getObjectSize());
                                                        tLRPC$MessageReplies.serializeToStream(nativeByteBuffer);
                                                        executeFast2.bindByteBuffer(1, nativeByteBuffer);
                                                        i3 = 2;
                                                        executeFast2.bindInteger(2, keyAt6);
                                                        executeFast2.bindLong(3, keyAt5);
                                                        executeFast2.step();
                                                        nativeByteBuffer.reuse();
                                                        i9++;
                                                        c = 1;
                                                    }
                                                }
                                                i3 = 2;
                                                i9++;
                                                c = 1;
                                            }
                                        } catch (Exception e5) {
                                            e = e5;
                                            sQLitePreparedStatement2 = executeFast2;
                                            checkSQLException(e);
                                            if (c != 0) {
                                                sQLiteDatabase2.commitTransaction();
                                            }
                                            if (sQLitePreparedStatement2 == null) {
                                            }
                                        } catch (Throwable th4) {
                                            th = th4;
                                            sQLitePreparedStatement = executeFast2;
                                            if (c != 0 && (sQLiteDatabase = this.database) != null) {
                                                sQLiteDatabase.commitTransaction();
                                            }
                                            if (sQLitePreparedStatement != null) {
                                                sQLitePreparedStatement.dispose();
                                            }
                                            throw th;
                                        }
                                    }
                                    TLdeserialize = null;
                                    queryFinalized.dispose();
                                    if (next) {
                                    }
                                    i3 = 2;
                                    i9++;
                                    c = 1;
                                }
                                i8++;
                                longSparseArray4 = longSparseArray3;
                                c = 1;
                            } catch (Exception e6) {
                                e = e6;
                            } catch (Throwable th5) {
                                th = th5;
                            }
                        }
                        executeFast2.dispose();
                    }
                } catch (Exception e7) {
                    e = e7;
                } catch (Throwable th6) {
                    th = th6;
                }
            } catch (Throwable th7) {
                th = th7;
            }
            try {
                this.database.commitTransaction();
            } catch (Exception e8) {
                e = e8;
                sQLitePreparedStatement2 = null;
                c = 1;
                checkSQLException(e);
                if (c != 0) {
                }
                if (sQLitePreparedStatement2 == null) {
                }
            } catch (Throwable th8) {
                th = th8;
                sQLitePreparedStatement = null;
                c = 1;
                if (c != 0) {
                    sQLiteDatabase.commitTransaction();
                }
                if (sQLitePreparedStatement != null) {
                }
                throw th;
            }
        } catch (Exception e9) {
            e = e9;
            c = 0;
        } catch (Throwable th9) {
            th = th9;
            c = 0;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:106:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:107:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:64:0x01b4  */
    /* JADX WARN: Removed duplicated region for block: B:86:0x027b  */
    /* JADX WARN: Removed duplicated region for block: B:88:0x0280  */
    /* JADX WARN: Removed duplicated region for block: B:92:0x0287  */
    /* JADX WARN: Removed duplicated region for block: B:94:0x028c  */
    /* renamed from: updateRepliesMaxReadIdInternal */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void lambda$updateRepliesMaxReadId$167(final long j, final int i, final int i2, int i3) {
        SQLitePreparedStatement sQLitePreparedStatement;
        SQLiteCursor sQLiteCursor;
        SQLiteCursor sQLiteCursor2;
        SQLiteCursor sQLiteCursor3;
        final int i4;
        int i5;
        SQLiteCursor queryFinalized;
        TLRPC$MessageReplies tLRPC$MessageReplies;
        NativeByteBuffer byteBufferValue;
        long j2 = -j;
        try {
            if (!isForum(j2)) {
                SQLitePreparedStatement executeFast = this.database.executeFast("UPDATE messages_v2 SET replies_data = ? WHERE mid = ? AND uid = ?");
                try {
                    queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT replies_data FROM messages_v2 WHERE mid = %d AND uid = %d", Integer.valueOf(i), Long.valueOf(j2)), new Object[0]);
                } catch (Exception e) {
                    e = e;
                    sQLitePreparedStatement = executeFast;
                    sQLiteCursor = null;
                    try {
                        checkSQLException(e);
                        if (sQLitePreparedStatement != null) {
                        }
                        if (sQLiteCursor != null) {
                        }
                    } catch (Throwable th) {
                        th = th;
                        if (sQLitePreparedStatement != null) {
                            sQLitePreparedStatement.dispose();
                        }
                        if (sQLiteCursor != null) {
                            sQLiteCursor.dispose();
                        }
                        throw th;
                    }
                } catch (Throwable th2) {
                    th = th2;
                    sQLitePreparedStatement = executeFast;
                    sQLiteCursor = null;
                    if (sQLitePreparedStatement != null) {
                    }
                    if (sQLiteCursor != null) {
                    }
                    throw th;
                }
                try {
                    if (!queryFinalized.next() || (byteBufferValue = queryFinalized.byteBufferValue(0)) == null) {
                        tLRPC$MessageReplies = null;
                    } else {
                        tLRPC$MessageReplies = TLRPC$MessageReplies.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                        byteBufferValue.reuse();
                    }
                    queryFinalized.dispose();
                    if (tLRPC$MessageReplies != null) {
                        tLRPC$MessageReplies.read_max_id = i2;
                        executeFast.requery();
                        NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(tLRPC$MessageReplies.getObjectSize());
                        tLRPC$MessageReplies.serializeToStream(nativeByteBuffer);
                        executeFast.bindByteBuffer(1, nativeByteBuffer);
                        executeFast.bindInteger(2, i);
                        executeFast.bindLong(3, j2);
                        executeFast.step();
                        nativeByteBuffer.reuse();
                    }
                    executeFast.dispose();
                } catch (Exception e2) {
                    e = e2;
                    sQLiteCursor = queryFinalized;
                    sQLitePreparedStatement = executeFast;
                    checkSQLException(e);
                    if (sQLitePreparedStatement != null) {
                    }
                    if (sQLiteCursor != null) {
                    }
                } catch (Throwable th3) {
                    th = th3;
                    sQLiteCursor = queryFinalized;
                    sQLitePreparedStatement = executeFast;
                    if (sQLitePreparedStatement != null) {
                    }
                    if (sQLiteCursor != null) {
                    }
                    throw th;
                }
            }
            SQLiteDatabase sQLiteDatabase = this.database;
            Locale locale = Locale.US;
            SQLiteCursor queryFinalized2 = sQLiteDatabase.queryFinalized(String.format(locale, "SELECT max_read_id FROM topics WHERE did = %d AND topic_id = %d", Long.valueOf(j2), Integer.valueOf(i)), new Object[0]);
            try {
                boolean z = queryFinalized2.next() && i2 >= queryFinalized2.intValue(0);
                queryFinalized2.dispose();
                this.database.executeFast(String.format(locale, "UPDATE messages_topics SET read_state = read_state | 1 WHERE uid = %d AND topic_id = %d AND mid <= %d AND read_state IN(0, 2) AND out = 0", Long.valueOf(j2), Integer.valueOf(i), Integer.valueOf(i2))).stepThis().dispose();
                this.database.executeFast(String.format(locale, "UPDATE messages_topics SET read_state = read_state | 2 WHERE uid = %d AND topic_id = %d AND mid <= %d AND read_state IN(0, 1) AND out = 0", Long.valueOf(j2), Integer.valueOf(i), Integer.valueOf(i2))).stepThis().dispose();
                if (i3 < 0) {
                    SQLiteCursor queryFinalized3 = this.database.queryFinalized(String.format(locale, "SELECT count(mid) FROM messages_topics WHERE uid = %d AND topic_id = %d AND mid > %d AND read_state IN(0, 2) AND out = 0", Long.valueOf(j2), Integer.valueOf(i), Integer.valueOf(i2)), new Object[0]);
                    int intValue = queryFinalized3.next() ? queryFinalized3.intValue(0) : 0;
                    queryFinalized3.dispose();
                    if (intValue == 0) {
                        i4 = intValue;
                        i5 = 0;
                        if (z) {
                            return;
                        }
                        if (i5 >= 0) {
                            if (BuildVars.DEBUG_PRIVATE_VERSION && i5 > 0) {
                                FileLog.d("(updateRepliesMaxReadIdInternal) new unread mentions " + i5 + " for dialog_id=" + j2 + " topic_id=" + i);
                            }
                            this.database.executeFast(String.format(Locale.ENGLISH, "UPDATE topics SET max_read_id = %d, unread_count = %d, unread_mentions = %d WHERE did = %d AND topic_id = %d", Integer.valueOf(i2), Integer.valueOf(i4), Integer.valueOf(i5), Long.valueOf(j2), Integer.valueOf(i))).stepThis().dispose();
                        } else {
                            this.database.executeFast(String.format(Locale.ENGLISH, "UPDATE topics SET max_read_id = %d, unread_count = %d WHERE did = %d AND topic_id = %d", Integer.valueOf(i2), Integer.valueOf(i4), Long.valueOf(j2), Integer.valueOf(i))).stepThis().dispose();
                        }
                        final int i6 = i5;
                        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda77
                            @Override // java.lang.Runnable
                            public final void run() {
                                MessagesStorage.this.lambda$updateRepliesMaxReadIdInternal$166(j, i, i2, i4, i6);
                            }
                        });
                        resetForumBadgeIfNeed(j2);
                        return;
                    }
                    SQLiteCursor queryFinalized4 = this.database.queryFinalized(String.format(locale, "SELECT count(mid) FROM messages_topics WHERE uid = %d AND topic_id = %d AND mid > %d AND read_state IN(0, 1) AND out = 0", Long.valueOf(j2), Integer.valueOf(i), Integer.valueOf(i2)), new Object[0]);
                    int intValue2 = queryFinalized4.next() ? queryFinalized4.intValue(0) : -1;
                    queryFinalized4.dispose();
                    SQLiteCursor queryFinalized5 = this.database.queryFinalized(String.format(locale, "SELECT unread_mentions FROM topics WHERE did = %d AND topic_id = %d", Long.valueOf(j2), Integer.valueOf(i)), new Object[0]);
                    int intValue3 = queryFinalized5.next() ? queryFinalized5.intValue(0) : 0;
                    queryFinalized5.dispose();
                    if (intValue2 > intValue3) {
                        intValue2 = intValue3;
                    }
                    i5 = intValue2;
                    i4 = intValue;
                    if (z) {
                    }
                } else {
                    i4 = i3;
                    if (i3 != 0) {
                        i5 = -1;
                        if (z) {
                        }
                    }
                    i5 = 0;
                    if (z) {
                    }
                }
            } catch (Exception e3) {
                e = e3;
                sQLiteCursor = sQLiteCursor3;
                sQLitePreparedStatement = null;
                checkSQLException(e);
                if (sQLitePreparedStatement != null) {
                    sQLitePreparedStatement.dispose();
                }
                if (sQLiteCursor != null) {
                    sQLiteCursor.dispose();
                }
            } catch (Throwable th4) {
                th = th4;
                sQLiteCursor = sQLiteCursor2;
                sQLitePreparedStatement = null;
                if (sQLitePreparedStatement != null) {
                }
                if (sQLiteCursor != null) {
                }
                throw th;
            }
        } catch (Exception e4) {
            e = e4;
            sQLitePreparedStatement = null;
        } catch (Throwable th5) {
            th = th5;
            sQLitePreparedStatement = null;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateRepliesMaxReadIdInternal$166(long j, int i, int i2, int i3, int i4) {
        getMessagesController().getTopicsController().updateMaxReadId(j, i, i2, i3, i4);
    }

    private void resetForumBadgeIfNeed(long j) {
        LongSparseIntArray longSparseIntArray;
        SQLiteCursor sQLiteCursor = null;
        try {
            SQLiteDatabase sQLiteDatabase = this.database;
            Locale locale = Locale.ENGLISH;
            SQLiteCursor queryFinalized = sQLiteDatabase.queryFinalized(String.format(locale, "SELECT topic_id FROM topics WHERE did = %d AND unread_count > 0", Long.valueOf(j)), new Object[0]);
            try {
                if (queryFinalized.next()) {
                    longSparseIntArray = null;
                } else {
                    longSparseIntArray = new LongSparseIntArray();
                    longSparseIntArray.put(j, 0);
                }
                queryFinalized.dispose();
                if (longSparseIntArray != null) {
                    this.database.executeFast(String.format(locale, "UPDATE dialogs SET unread_count = 0, unread_count_i = 0 WHERE did = %d", Long.valueOf(j))).stepThis().dispose();
                }
                updateFiltersReadCounter(longSparseIntArray, null, true);
                getMessagesController().processDialogsUpdateRead(longSparseIntArray, null);
            } catch (Throwable th) {
                th = th;
                sQLiteCursor = queryFinalized;
                try {
                    checkSQLException(th);
                } finally {
                    if (sQLiteCursor != null) {
                        sQLiteCursor.dispose();
                    }
                }
            }
        } catch (Throwable th2) {
            th = th2;
        }
    }

    public void updateRepliesMaxReadId(final long j, final int i, final int i2, final int i3, boolean z) {
        if (z) {
            this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda76
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesStorage.this.lambda$updateRepliesMaxReadId$167(j, i, i2, i3);
                }
            });
        } else {
            lambda$updateRepliesMaxReadId$167(j, i, i2, i3);
        }
    }

    public void updateRepliesCount(final long j, final int i, final ArrayList<TLRPC$Peer> arrayList, final int i2, final int i3) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda49
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$updateRepliesCount$168(i, j, i3, arrayList, i2);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:45:0x00ae  */
    /* JADX WARN: Removed duplicated region for block: B:47:0x00b3  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$updateRepliesCount$168(int i, long j, int i2, ArrayList arrayList, int i3) {
        SQLiteCursor sQLiteCursor;
        long j2;
        TLRPC$MessageReplies tLRPC$MessageReplies;
        NativeByteBuffer byteBufferValue;
        SQLitePreparedStatement sQLitePreparedStatement = null;
        try {
            SQLitePreparedStatement executeFast = this.database.executeFast("UPDATE messages_v2 SET replies_data = ? WHERE mid = ? AND uid = ?");
            try {
                j2 = -j;
                sQLiteCursor = this.database.queryFinalized(String.format(Locale.ENGLISH, "SELECT replies_data FROM messages_v2 WHERE mid = %d AND uid = %d", Integer.valueOf(i), Long.valueOf(j2)), new Object[0]);
            } catch (Exception e) {
                e = e;
                sQLiteCursor = null;
            } catch (Throwable th) {
                th = th;
                sQLiteCursor = null;
            }
            try {
                if (!sQLiteCursor.next() || (byteBufferValue = sQLiteCursor.byteBufferValue(0)) == null) {
                    tLRPC$MessageReplies = null;
                } else {
                    tLRPC$MessageReplies = TLRPC$MessageReplies.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                    byteBufferValue.reuse();
                }
                sQLiteCursor.dispose();
                if (tLRPC$MessageReplies != null) {
                    int i4 = tLRPC$MessageReplies.replies + i2;
                    tLRPC$MessageReplies.replies = i4;
                    if (i4 < 0) {
                        tLRPC$MessageReplies.replies = 0;
                    }
                    if (arrayList != null) {
                        tLRPC$MessageReplies.recent_repliers = arrayList;
                        tLRPC$MessageReplies.flags |= 2;
                    }
                    if (i3 != 0) {
                        tLRPC$MessageReplies.max_id = i3;
                    }
                    executeFast.requery();
                    NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(tLRPC$MessageReplies.getObjectSize());
                    tLRPC$MessageReplies.serializeToStream(nativeByteBuffer);
                    executeFast.bindByteBuffer(1, nativeByteBuffer);
                    executeFast.bindInteger(2, i);
                    executeFast.bindLong(3, j2);
                    executeFast.step();
                    nativeByteBuffer.reuse();
                }
                executeFast.dispose();
            } catch (Exception e2) {
                e = e2;
                sQLitePreparedStatement = executeFast;
                try {
                    checkSQLException(e);
                    if (sQLitePreparedStatement != null) {
                        sQLitePreparedStatement.dispose();
                    }
                    if (sQLiteCursor != null) {
                        sQLiteCursor.dispose();
                    }
                } catch (Throwable th2) {
                    th = th2;
                    if (sQLitePreparedStatement != null) {
                        sQLitePreparedStatement.dispose();
                    }
                    if (sQLiteCursor != null) {
                        sQLiteCursor.dispose();
                    }
                    throw th;
                }
            } catch (Throwable th3) {
                th = th3;
                sQLitePreparedStatement = executeFast;
                if (sQLitePreparedStatement != null) {
                }
                if (sQLiteCursor != null) {
                }
                throw th;
            }
        } catch (Exception e3) {
            e = e3;
            sQLiteCursor = null;
        } catch (Throwable th4) {
            th = th4;
            sQLiteCursor = null;
        }
    }

    private boolean isValidKeyboardToSave(TLRPC$Message tLRPC$Message) {
        TLRPC$ReplyMarkup tLRPC$ReplyMarkup = tLRPC$Message.reply_markup;
        return (tLRPC$ReplyMarkup == null || (tLRPC$ReplyMarkup instanceof TLRPC$TL_replyInlineMarkup) || (tLRPC$ReplyMarkup.selective && !tLRPC$Message.mentioned)) ? false : true;
    }

    public void updateMessageVerifyFlags(final ArrayList<TLRPC$Message> arrayList) {
        Utilities.stageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda147
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$updateMessageVerifyFlags$169(arrayList);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateMessageVerifyFlags$169(ArrayList arrayList) {
        SQLiteDatabase sQLiteDatabase;
        SQLiteDatabase sQLiteDatabase2;
        SQLitePreparedStatement executeFast;
        SQLitePreparedStatement sQLitePreparedStatement = null;
        boolean z = false;
        try {
            try {
                this.database.beginTransaction();
                try {
                    executeFast = this.database.executeFast("UPDATE messages_v2 SET imp = ? WHERE mid = ? AND uid = ?");
                } catch (Exception e) {
                    e = e;
                } catch (Throwable th) {
                    th = th;
                }
            } catch (Exception e2) {
                e = e2;
            }
        } catch (Throwable th2) {
            th = th2;
        }
        try {
            int size = arrayList.size();
            for (int i = 0; i < size; i++) {
                TLRPC$Message tLRPC$Message = (TLRPC$Message) arrayList.get(i);
                executeFast.requery();
                int i2 = tLRPC$Message.stickerVerified;
                executeFast.bindInteger(1, i2 == 0 ? 1 : i2 == 2 ? 2 : 0);
                executeFast.bindInteger(2, tLRPC$Message.id);
                executeFast.bindLong(3, MessageObject.getDialogId(tLRPC$Message));
                executeFast.step();
            }
            executeFast.dispose();
            this.database.commitTransaction();
        } catch (Exception e3) {
            e = e3;
            sQLitePreparedStatement = executeFast;
            z = true;
            checkSQLException(e);
            if (z && (sQLiteDatabase2 = this.database) != null) {
                sQLiteDatabase2.commitTransaction();
            }
            if (sQLitePreparedStatement != null) {
                sQLitePreparedStatement.dispose();
            }
        } catch (Throwable th3) {
            th = th3;
            sQLitePreparedStatement = executeFast;
            z = true;
            if (z && (sQLiteDatabase = this.database) != null) {
                sQLiteDatabase.commitTransaction();
            }
            if (sQLitePreparedStatement != null) {
                sQLitePreparedStatement.dispose();
            }
            throw th;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Code restructure failed: missing block: B:413:0x0af0, code lost:
        if (r11.id <= r5) goto L529;
     */
    /* JADX WARN: Code restructure failed: missing block: B:428:0x0b22, code lost:
        if (r11.id <= r4) goto L542;
     */
    /* JADX WARN: Code restructure failed: missing block: B:612:0x0e21, code lost:
        if (r11.post != false) goto L690;
     */
    /* JADX WARN: Removed duplicated region for block: B:1153:0x1a66  */
    /* JADX WARN: Removed duplicated region for block: B:1157:0x1a6f  */
    /* JADX WARN: Removed duplicated region for block: B:1159:0x1a74  */
    /* JADX WARN: Removed duplicated region for block: B:1161:0x1a79  */
    /* JADX WARN: Removed duplicated region for block: B:1163:0x1a7e  */
    /* JADX WARN: Removed duplicated region for block: B:1165:0x1a83  */
    /* JADX WARN: Removed duplicated region for block: B:1167:0x1a88  */
    /* JADX WARN: Removed duplicated region for block: B:1169:0x1a8d  */
    /* JADX WARN: Removed duplicated region for block: B:1171:0x1a92  */
    /* JADX WARN: Removed duplicated region for block: B:1173:0x1a97  */
    /* JADX WARN: Removed duplicated region for block: B:1175:0x1a9c  */
    /* JADX WARN: Removed duplicated region for block: B:1180:0x1aa4  */
    /* JADX WARN: Removed duplicated region for block: B:1184:0x1aad  */
    /* JADX WARN: Removed duplicated region for block: B:1186:0x1ab2  */
    /* JADX WARN: Removed duplicated region for block: B:1188:0x1ab7  */
    /* JADX WARN: Removed duplicated region for block: B:1190:0x1abc  */
    /* JADX WARN: Removed duplicated region for block: B:1192:0x1ac1  */
    /* JADX WARN: Removed duplicated region for block: B:1194:0x1ac6  */
    /* JADX WARN: Removed duplicated region for block: B:1196:0x1acb  */
    /* JADX WARN: Removed duplicated region for block: B:1198:0x1ad0  */
    /* JADX WARN: Removed duplicated region for block: B:1200:0x1ad5  */
    /* JADX WARN: Removed duplicated region for block: B:1202:0x1ada  */
    /* JADX WARN: Removed duplicated region for block: B:1317:0x0ca4 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:1397:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:143:0x03b6 A[Catch: all -> 0x057a, Exception -> 0x057d, TryCatch #80 {Exception -> 0x057d, all -> 0x057a, blocks: (B:91:0x0265, B:93:0x0282, B:95:0x0286, B:97:0x0293, B:99:0x02a4, B:101:0x02ad, B:103:0x02d7, B:104:0x02df, B:106:0x02ed, B:108:0x02f3, B:110:0x02f9, B:113:0x02ff, B:115:0x0303, B:117:0x0309, B:120:0x0313, B:122:0x031c, B:124:0x033e, B:126:0x0344, B:127:0x034c, B:143:0x03b6, B:149:0x03cd, B:151:0x03f9, B:153:0x03ff, B:155:0x040f, B:157:0x0413, B:159:0x0417, B:161:0x041b, B:163:0x0425, B:164:0x042a, B:166:0x043a, B:168:0x043e, B:170:0x0448, B:171:0x044d, B:175:0x046e, B:178:0x0476, B:180:0x0492, B:182:0x049c, B:184:0x04ad, B:186:0x04b3, B:187:0x04b6, B:189:0x04c3, B:191:0x04d0, B:193:0x04e1, B:194:0x04eb, B:196:0x04f4, B:198:0x0504, B:199:0x050c, B:201:0x0512, B:202:0x0515, B:204:0x0522, B:205:0x052a, B:209:0x0546, B:211:0x054c, B:213:0x0558, B:215:0x055e, B:146:0x03c6, B:132:0x0376, B:134:0x0380, B:135:0x038a, B:137:0x0392, B:138:0x0395, B:140:0x03a3, B:141:0x03ad, B:226:0x0593, B:229:0x05b2, B:231:0x05bb, B:232:0x0616, B:234:0x061c, B:236:0x062b, B:239:0x0637, B:241:0x063f, B:243:0x0647, B:245:0x0652, B:247:0x0657, B:249:0x065c, B:250:0x0661, B:252:0x0668, B:254:0x0680, B:258:0x069b, B:260:0x06a2, B:262:0x06a9, B:264:0x06b1, B:269:0x06c9, B:265:0x06bd, B:255:0x068e, B:277:0x0721, B:278:0x0762, B:280:0x0768, B:282:0x0782, B:285:0x078e, B:286:0x0793, B:288:0x079d, B:289:0x07a7, B:291:0x07ad, B:293:0x07be, B:295:0x07dc, B:301:0x07f6, B:303:0x0801, B:305:0x0808, B:307:0x0810, B:315:0x082f, B:308:0x081a, B:312:0x0827, B:296:0x07e5, B:300:0x07f1, B:321:0x084f, B:323:0x0856, B:324:0x089c, B:326:0x08a2, B:328:0x08ac, B:330:0x08b1, B:332:0x08b6, B:335:0x08c3, B:337:0x08cd, B:340:0x08d7, B:347:0x08fa, B:348:0x0902, B:350:0x0908, B:351:0x094d, B:353:0x0953, B:354:0x0960, B:358:0x09b3, B:360:0x09b9, B:361:0x09c9, B:363:0x09cf, B:365:0x09d9, B:366:0x09de, B:367:0x09e4), top: B:1294:0x0265 }] */
    /* JADX WARN: Removed duplicated region for block: B:172:0x045b  */
    /* JADX WARN: Removed duplicated region for block: B:307:0x0810 A[Catch: all -> 0x057a, Exception -> 0x057d, TryCatch #80 {Exception -> 0x057d, all -> 0x057a, blocks: (B:91:0x0265, B:93:0x0282, B:95:0x0286, B:97:0x0293, B:99:0x02a4, B:101:0x02ad, B:103:0x02d7, B:104:0x02df, B:106:0x02ed, B:108:0x02f3, B:110:0x02f9, B:113:0x02ff, B:115:0x0303, B:117:0x0309, B:120:0x0313, B:122:0x031c, B:124:0x033e, B:126:0x0344, B:127:0x034c, B:143:0x03b6, B:149:0x03cd, B:151:0x03f9, B:153:0x03ff, B:155:0x040f, B:157:0x0413, B:159:0x0417, B:161:0x041b, B:163:0x0425, B:164:0x042a, B:166:0x043a, B:168:0x043e, B:170:0x0448, B:171:0x044d, B:175:0x046e, B:178:0x0476, B:180:0x0492, B:182:0x049c, B:184:0x04ad, B:186:0x04b3, B:187:0x04b6, B:189:0x04c3, B:191:0x04d0, B:193:0x04e1, B:194:0x04eb, B:196:0x04f4, B:198:0x0504, B:199:0x050c, B:201:0x0512, B:202:0x0515, B:204:0x0522, B:205:0x052a, B:209:0x0546, B:211:0x054c, B:213:0x0558, B:215:0x055e, B:146:0x03c6, B:132:0x0376, B:134:0x0380, B:135:0x038a, B:137:0x0392, B:138:0x0395, B:140:0x03a3, B:141:0x03ad, B:226:0x0593, B:229:0x05b2, B:231:0x05bb, B:232:0x0616, B:234:0x061c, B:236:0x062b, B:239:0x0637, B:241:0x063f, B:243:0x0647, B:245:0x0652, B:247:0x0657, B:249:0x065c, B:250:0x0661, B:252:0x0668, B:254:0x0680, B:258:0x069b, B:260:0x06a2, B:262:0x06a9, B:264:0x06b1, B:269:0x06c9, B:265:0x06bd, B:255:0x068e, B:277:0x0721, B:278:0x0762, B:280:0x0768, B:282:0x0782, B:285:0x078e, B:286:0x0793, B:288:0x079d, B:289:0x07a7, B:291:0x07ad, B:293:0x07be, B:295:0x07dc, B:301:0x07f6, B:303:0x0801, B:305:0x0808, B:307:0x0810, B:315:0x082f, B:308:0x081a, B:312:0x0827, B:296:0x07e5, B:300:0x07f1, B:321:0x084f, B:323:0x0856, B:324:0x089c, B:326:0x08a2, B:328:0x08ac, B:330:0x08b1, B:332:0x08b6, B:335:0x08c3, B:337:0x08cd, B:340:0x08d7, B:347:0x08fa, B:348:0x0902, B:350:0x0908, B:351:0x094d, B:353:0x0953, B:354:0x0960, B:358:0x09b3, B:360:0x09b9, B:361:0x09c9, B:363:0x09cf, B:365:0x09d9, B:366:0x09de, B:367:0x09e4), top: B:1294:0x0265 }] */
    /* JADX WARN: Removed duplicated region for block: B:308:0x081a A[Catch: all -> 0x057a, Exception -> 0x057d, TryCatch #80 {Exception -> 0x057d, all -> 0x057a, blocks: (B:91:0x0265, B:93:0x0282, B:95:0x0286, B:97:0x0293, B:99:0x02a4, B:101:0x02ad, B:103:0x02d7, B:104:0x02df, B:106:0x02ed, B:108:0x02f3, B:110:0x02f9, B:113:0x02ff, B:115:0x0303, B:117:0x0309, B:120:0x0313, B:122:0x031c, B:124:0x033e, B:126:0x0344, B:127:0x034c, B:143:0x03b6, B:149:0x03cd, B:151:0x03f9, B:153:0x03ff, B:155:0x040f, B:157:0x0413, B:159:0x0417, B:161:0x041b, B:163:0x0425, B:164:0x042a, B:166:0x043a, B:168:0x043e, B:170:0x0448, B:171:0x044d, B:175:0x046e, B:178:0x0476, B:180:0x0492, B:182:0x049c, B:184:0x04ad, B:186:0x04b3, B:187:0x04b6, B:189:0x04c3, B:191:0x04d0, B:193:0x04e1, B:194:0x04eb, B:196:0x04f4, B:198:0x0504, B:199:0x050c, B:201:0x0512, B:202:0x0515, B:204:0x0522, B:205:0x052a, B:209:0x0546, B:211:0x054c, B:213:0x0558, B:215:0x055e, B:146:0x03c6, B:132:0x0376, B:134:0x0380, B:135:0x038a, B:137:0x0392, B:138:0x0395, B:140:0x03a3, B:141:0x03ad, B:226:0x0593, B:229:0x05b2, B:231:0x05bb, B:232:0x0616, B:234:0x061c, B:236:0x062b, B:239:0x0637, B:241:0x063f, B:243:0x0647, B:245:0x0652, B:247:0x0657, B:249:0x065c, B:250:0x0661, B:252:0x0668, B:254:0x0680, B:258:0x069b, B:260:0x06a2, B:262:0x06a9, B:264:0x06b1, B:269:0x06c9, B:265:0x06bd, B:255:0x068e, B:277:0x0721, B:278:0x0762, B:280:0x0768, B:282:0x0782, B:285:0x078e, B:286:0x0793, B:288:0x079d, B:289:0x07a7, B:291:0x07ad, B:293:0x07be, B:295:0x07dc, B:301:0x07f6, B:303:0x0801, B:305:0x0808, B:307:0x0810, B:315:0x082f, B:308:0x081a, B:312:0x0827, B:296:0x07e5, B:300:0x07f1, B:321:0x084f, B:323:0x0856, B:324:0x089c, B:326:0x08a2, B:328:0x08ac, B:330:0x08b1, B:332:0x08b6, B:335:0x08c3, B:337:0x08cd, B:340:0x08d7, B:347:0x08fa, B:348:0x0902, B:350:0x0908, B:351:0x094d, B:353:0x0953, B:354:0x0960, B:358:0x09b3, B:360:0x09b9, B:361:0x09c9, B:363:0x09cf, B:365:0x09d9, B:366:0x09de, B:367:0x09e4), top: B:1294:0x0265 }] */
    /* JADX WARN: Removed duplicated region for block: B:314:0x082e  */
    /* JADX WARN: Removed duplicated region for block: B:398:0x0abb A[Catch: all -> 0x0aa6, Exception -> 0x0aa9, TryCatch #90 {Exception -> 0x0aa9, all -> 0x0aa6, blocks: (B:382:0x0a98, B:384:0x0aa0, B:395:0x0ab3, B:398:0x0abb, B:399:0x0ac1, B:403:0x0acc, B:404:0x0ad1, B:406:0x0ad6, B:408:0x0ae2, B:410:0x0aea, B:412:0x0aee, B:415:0x0af4, B:421:0x0b02, B:423:0x0b12, B:425:0x0b1c, B:427:0x0b20, B:430:0x0b26, B:457:0x0b7e, B:463:0x0ba8, B:472:0x0bc2, B:489:0x0bf9, B:496:0x0c1d, B:500:0x0c24, B:499:0x0c22, B:434:0x0b2f, B:419:0x0afb), top: B:1274:0x0a98 }] */
    /* JADX WARN: Removed duplicated region for block: B:402:0x0aca  */
    /* JADX WARN: Removed duplicated region for block: B:406:0x0ad6 A[Catch: all -> 0x0aa6, Exception -> 0x0aa9, TryCatch #90 {Exception -> 0x0aa9, all -> 0x0aa6, blocks: (B:382:0x0a98, B:384:0x0aa0, B:395:0x0ab3, B:398:0x0abb, B:399:0x0ac1, B:403:0x0acc, B:404:0x0ad1, B:406:0x0ad6, B:408:0x0ae2, B:410:0x0aea, B:412:0x0aee, B:415:0x0af4, B:421:0x0b02, B:423:0x0b12, B:425:0x0b1c, B:427:0x0b20, B:430:0x0b26, B:457:0x0b7e, B:463:0x0ba8, B:472:0x0bc2, B:489:0x0bf9, B:496:0x0c1d, B:500:0x0c24, B:499:0x0c22, B:434:0x0b2f, B:419:0x0afb), top: B:1274:0x0a98 }] */
    /* JADX WARN: Removed duplicated region for block: B:421:0x0b02 A[Catch: all -> 0x0aa6, Exception -> 0x0aa9, TryCatch #90 {Exception -> 0x0aa9, all -> 0x0aa6, blocks: (B:382:0x0a98, B:384:0x0aa0, B:395:0x0ab3, B:398:0x0abb, B:399:0x0ac1, B:403:0x0acc, B:404:0x0ad1, B:406:0x0ad6, B:408:0x0ae2, B:410:0x0aea, B:412:0x0aee, B:415:0x0af4, B:421:0x0b02, B:423:0x0b12, B:425:0x0b1c, B:427:0x0b20, B:430:0x0b26, B:457:0x0b7e, B:463:0x0ba8, B:472:0x0bc2, B:489:0x0bf9, B:496:0x0c1d, B:500:0x0c24, B:499:0x0c22, B:434:0x0b2f, B:419:0x0afb), top: B:1274:0x0a98 }] */
    /* JADX WARN: Removed duplicated region for block: B:436:0x0b33  */
    /* JADX WARN: Removed duplicated region for block: B:437:0x0b3a  */
    /* JADX WARN: Removed duplicated region for block: B:441:0x0b48  */
    /* JADX WARN: Removed duplicated region for block: B:545:0x0cc9  */
    /* JADX WARN: Removed duplicated region for block: B:548:0x0cd1 A[Catch: all -> 0x0cbd, Exception -> 0x0cc0, TRY_ENTER, TRY_LEAVE, TryCatch #72 {Exception -> 0x0cc0, all -> 0x0cbd, blocks: (B:535:0x0cac, B:548:0x0cd1, B:552:0x0cff, B:554:0x0d0a, B:563:0x0d58, B:566:0x0d5e), top: B:1309:0x0cac }] */
    /* JADX WARN: Removed duplicated region for block: B:563:0x0d58 A[Catch: all -> 0x0cbd, Exception -> 0x0cc0, TRY_ENTER, TryCatch #72 {Exception -> 0x0cc0, all -> 0x0cbd, blocks: (B:535:0x0cac, B:548:0x0cd1, B:552:0x0cff, B:554:0x0d0a, B:563:0x0d58, B:566:0x0d5e), top: B:1309:0x0cac }] */
    /* JADX WARN: Removed duplicated region for block: B:578:0x0da0  */
    /* JADX WARN: Removed duplicated region for block: B:590:0x0dd9 A[Catch: all -> 0x0fe8, Exception -> 0x0ff6, TRY_ENTER, TRY_LEAVE, TryCatch #116 {Exception -> 0x0ff6, all -> 0x0fe8, blocks: (B:576:0x0d9a, B:590:0x0dd9), top: B:1222:0x0d9a }] */
    /* JADX WARN: Removed duplicated region for block: B:608:0x0e15 A[Catch: all -> 0x0fd4, Exception -> 0x0fde, TRY_LEAVE, TryCatch #112 {Exception -> 0x0fde, all -> 0x0fd4, blocks: (B:606:0x0e10, B:608:0x0e15, B:618:0x0e2a, B:620:0x0e38, B:622:0x0e43, B:628:0x0e51, B:662:0x0f03, B:665:0x0f11, B:633:0x0e73, B:659:0x0ef1), top: B:1230:0x0e10 }] */
    /* JADX WARN: Removed duplicated region for block: B:662:0x0f03 A[Catch: all -> 0x0fd4, Exception -> 0x0fde, TRY_LEAVE, TryCatch #112 {Exception -> 0x0fde, all -> 0x0fd4, blocks: (B:606:0x0e10, B:608:0x0e15, B:618:0x0e2a, B:620:0x0e38, B:622:0x0e43, B:628:0x0e51, B:662:0x0f03, B:665:0x0f11, B:633:0x0e73, B:659:0x0ef1), top: B:1230:0x0e10 }] */
    /* JADX WARN: Removed duplicated region for block: B:816:0x1247 A[Catch: all -> 0x1324, Exception -> 0x1326, TryCatch #122 {Exception -> 0x1326, all -> 0x1324, blocks: (B:788:0x11e6, B:796:0x1208, B:798:0x120e, B:802:0x1215, B:806:0x121f, B:810:0x122b, B:814:0x123c, B:816:0x1247, B:820:0x1250, B:822:0x1255, B:824:0x1264, B:826:0x126a, B:828:0x1275, B:827:0x1271, B:829:0x1288, B:833:0x1296, B:835:0x129b, B:839:0x12c9, B:841:0x12ef, B:843:0x12f5, B:845:0x12fe, B:844:0x12fb, B:794:0x1201, B:791:0x11f8), top: B:1210:0x11e6 }] */
    /* JADX WARN: Removed duplicated region for block: B:829:0x1288 A[Catch: all -> 0x1324, Exception -> 0x1326, TryCatch #122 {Exception -> 0x1326, all -> 0x1324, blocks: (B:788:0x11e6, B:796:0x1208, B:798:0x120e, B:802:0x1215, B:806:0x121f, B:810:0x122b, B:814:0x123c, B:816:0x1247, B:820:0x1250, B:822:0x1255, B:824:0x1264, B:826:0x126a, B:828:0x1275, B:827:0x1271, B:829:0x1288, B:833:0x1296, B:835:0x129b, B:839:0x12c9, B:841:0x12ef, B:843:0x12f5, B:845:0x12fe, B:844:0x12fb, B:794:0x1201, B:791:0x11f8), top: B:1210:0x11e6 }] */
    /* renamed from: putMessagesInternal */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void lambda$putMessages$173(ArrayList<TLRPC$Message> arrayList, boolean z, boolean z2, int i, boolean z3, boolean z4, int i2) {
        Throwable th;
        SQLitePreparedStatement sQLitePreparedStatement;
        SQLitePreparedStatement sQLitePreparedStatement2;
        SQLitePreparedStatement sQLitePreparedStatement3;
        SQLitePreparedStatement sQLitePreparedStatement4;
        SQLitePreparedStatement sQLitePreparedStatement5;
        Throwable th2;
        boolean z5;
        SQLitePreparedStatement sQLitePreparedStatement6;
        SQLitePreparedStatement sQLitePreparedStatement7;
        SQLitePreparedStatement sQLitePreparedStatement8;
        SQLitePreparedStatement sQLitePreparedStatement9;
        SQLitePreparedStatement sQLitePreparedStatement10;
        SQLiteDatabase sQLiteDatabase;
        Throwable th3;
        SQLiteDatabase sQLiteDatabase2;
        SQLitePreparedStatement sQLitePreparedStatement11;
        HashMap hashMap;
        String str;
        HashMap hashMap2;
        String str2;
        LongSparseArray longSparseArray;
        String str3;
        HashMap hashMap3;
        HashMap hashMap4;
        String str4;
        String str5;
        HashMap hashMap5;
        String str6;
        LongSparseArray longSparseArray2;
        LongSparseArray longSparseArray3;
        LongSparseArray longSparseArray4;
        SparseArray sparseArray;
        SparseArray sparseArray2;
        LongSparseIntArray longSparseIntArray;
        int i3;
        ArrayList arrayList2;
        final int i4;
        LongSparseIntArray longSparseIntArray2;
        SQLitePreparedStatement sQLitePreparedStatement12;
        SQLitePreparedStatement sQLitePreparedStatement13;
        SparseArray sparseArray3;
        String str7;
        HashMap hashMap6;
        HashMap hashMap7;
        LongSparseArray longSparseArray5;
        SQLitePreparedStatement sQLitePreparedStatement14;
        SQLitePreparedStatement sQLitePreparedStatement15;
        SQLitePreparedStatement sQLitePreparedStatement16;
        SQLitePreparedStatement sQLitePreparedStatement17;
        SQLitePreparedStatement sQLitePreparedStatement18;
        SQLitePreparedStatement sQLitePreparedStatement19;
        SQLitePreparedStatement sQLitePreparedStatement20;
        ArrayList<TopicsController.TopicUpdate> arrayList3;
        LongSparseIntArray longSparseIntArray3;
        int i5;
        int i6;
        int i7;
        int i8;
        SQLitePreparedStatement sQLitePreparedStatement21;
        SQLitePreparedStatement sQLitePreparedStatement22;
        SQLitePreparedStatement sQLitePreparedStatement23;
        boolean z6;
        int i9;
        int i10;
        Iterator it;
        HashMap hashMap8;
        HashMap hashMap9;
        HashMap hashMap10;
        String str8;
        int intValue;
        int intValue2;
        int intValue3;
        int intValue4;
        boolean z7;
        int i11;
        TLRPC$Message tLRPC$Message;
        String str9;
        SQLitePreparedStatement sQLitePreparedStatement24;
        int i12;
        SQLitePreparedStatement sQLitePreparedStatement25;
        SQLitePreparedStatement sQLitePreparedStatement26;
        LongSparseArray longSparseArray6;
        int i13;
        int intValue5;
        int max;
        int i14;
        HashMap hashMap11;
        int i15;
        LongSparseIntArray longSparseIntArray4;
        LongSparseIntArray longSparseIntArray5;
        ArrayList<Long> arrayList4;
        SparseArray sparseArray4;
        String str10;
        HashMap hashMap12;
        LongSparseIntArray longSparseIntArray6;
        boolean z8;
        int i16;
        ArrayList arrayList5;
        HashMap hashMap13;
        LongSparseArray longSparseArray7;
        int i17;
        HashMap hashMap14;
        Throwable th4;
        Throwable e;
        TLRPC$MessageMedia tLRPC$MessageMedia;
        String str11;
        int i18;
        long j;
        TLRPC$MessageMedia tLRPC$TL_messageMediaDocument;
        int i19;
        long j2;
        HashMap hashMap15;
        int i20;
        int i21;
        int i22;
        NativeByteBuffer nativeByteBuffer;
        int i23;
        int i24;
        int i25;
        SQLitePreparedStatement sQLitePreparedStatement27;
        LongSparseIntArray longSparseIntArray7;
        int intValue6;
        int i26;
        HashMap hashMap16;
        int intValue7;
        int i27;
        int i28;
        int i29;
        int i30;
        int i31;
        int i32;
        int i33;
        HashMap hashMap17;
        int i34;
        String str12;
        LongSparseArray longSparseArray8;
        LongSparseArray longSparseArray9;
        HashMap hashMap18;
        HashMap hashMap19;
        String str13;
        LongSparseIntArray longSparseIntArray8;
        HashMap hashMap20;
        LongSparseArray longSparseArray10;
        HashMap hashMap21;
        HashMap hashMap22;
        LongSparseArray longSparseArray11;
        LongSparseArray longSparseArray12;
        LongSparseArray longSparseArray13;
        LongSparseArray longSparseArray14;
        LongSparseArray longSparseArray15;
        LongSparseIntArray longSparseIntArray9;
        SQLiteDatabase sQLiteDatabase3;
        boolean z9;
        int i35;
        ArrayList<TLRPC$Message> arrayList6 = arrayList;
        int i36 = 2;
        int i37 = 1;
        try {
            if (z4) {
                if (z) {
                    this.database.beginTransaction();
                    z9 = true;
                } else {
                    z9 = false;
                }
                try {
                    sQLitePreparedStatement5 = this.database.executeFast("REPLACE INTO scheduled_messages_v2 VALUES(?, ?, ?, ?, ?, ?, NULL, 0)");
                } catch (Exception e2) {
                    th2 = e2;
                    z5 = z9;
                    sQLitePreparedStatement = null;
                    sQLitePreparedStatement2 = null;
                    sQLitePreparedStatement3 = null;
                    sQLitePreparedStatement4 = null;
                    sQLitePreparedStatement5 = null;
                } catch (Throwable th5) {
                    th = th5;
                    z5 = z9;
                    sQLitePreparedStatement = null;
                    sQLitePreparedStatement2 = null;
                    sQLitePreparedStatement3 = null;
                    sQLitePreparedStatement4 = null;
                    sQLitePreparedStatement5 = null;
                }
                try {
                    SQLitePreparedStatement executeFast = this.database.executeFast("REPLACE INTO randoms_v2 VALUES(?, ?, ?)");
                    try {
                        ArrayList arrayList7 = new ArrayList();
                        int i38 = 0;
                        while (i38 < arrayList.size()) {
                            TLRPC$Message tLRPC$Message2 = arrayList6.get(i38);
                            if (tLRPC$Message2 instanceof TLRPC$TL_messageEmpty) {
                                i35 = i38;
                            } else {
                                fixUnsupportedMedia(tLRPC$Message2);
                                sQLitePreparedStatement5.requery();
                                int i39 = tLRPC$Message2.id;
                                int i40 = tLRPC$Message2.local_id;
                                if (i40 != 0) {
                                    i39 = i40;
                                }
                                NativeByteBuffer nativeByteBuffer2 = new NativeByteBuffer(tLRPC$Message2.getObjectSize());
                                tLRPC$Message2.serializeToStream(nativeByteBuffer2);
                                long dialogId = MessageObject.getDialogId(tLRPC$Message2);
                                sQLitePreparedStatement5.bindInteger(i37, i39);
                                sQLitePreparedStatement5.bindLong(i36, dialogId);
                                sQLitePreparedStatement5.bindInteger(3, tLRPC$Message2.send_state);
                                sQLitePreparedStatement5.bindInteger(4, tLRPC$Message2.date);
                                sQLitePreparedStatement5.bindByteBuffer(5, nativeByteBuffer2);
                                sQLitePreparedStatement5.bindInteger(6, tLRPC$Message2.ttl);
                                sQLitePreparedStatement5.step();
                                i35 = i38;
                                if (tLRPC$Message2.random_id != 0) {
                                    executeFast.requery();
                                    executeFast.bindLong(1, tLRPC$Message2.random_id);
                                    executeFast.bindInteger(2, i39);
                                    executeFast.bindLong(3, tLRPC$Message2.dialog_id);
                                    executeFast.step();
                                }
                                nativeByteBuffer2.reuse();
                                if (!arrayList7.contains(Long.valueOf(dialogId))) {
                                    arrayList7.add(Long.valueOf(dialogId));
                                }
                            }
                            i38 = i35 + 1;
                            i36 = 2;
                            i37 = 1;
                        }
                        sQLitePreparedStatement5.dispose();
                        try {
                            executeFast.dispose();
                            if (z) {
                                this.database.commitTransaction();
                                z9 = false;
                            }
                            int size = arrayList7.size();
                            for (int i41 = 0; i41 < size; i41++) {
                                broadcastScheduledMessagesChange((Long) arrayList7.get(i41));
                            }
                            z6 = z9;
                            sQLitePreparedStatement21 = null;
                            sQLitePreparedStatement23 = null;
                            sQLitePreparedStatement22 = null;
                        } catch (Exception e3) {
                            th2 = e3;
                            z5 = z9;
                            sQLitePreparedStatement10 = executeFast;
                            sQLitePreparedStatement = null;
                            sQLitePreparedStatement2 = null;
                            sQLitePreparedStatement3 = null;
                            sQLitePreparedStatement4 = null;
                            sQLitePreparedStatement5 = null;
                            sQLitePreparedStatement9 = null;
                            sQLitePreparedStatement8 = null;
                            sQLitePreparedStatement7 = null;
                            sQLitePreparedStatement6 = null;
                            try {
                                checkSQLException(th2);
                                if (z5) {
                                }
                                if (sQLitePreparedStatement5 != null) {
                                }
                                if (sQLitePreparedStatement10 != null) {
                                }
                                if (sQLitePreparedStatement7 != null) {
                                }
                                if (sQLitePreparedStatement6 != null) {
                                }
                                if (sQLitePreparedStatement9 != null) {
                                }
                                if (sQLitePreparedStatement3 != null) {
                                }
                                if (sQLitePreparedStatement2 != null) {
                                }
                                if (sQLitePreparedStatement8 != null) {
                                }
                                if (sQLitePreparedStatement != null) {
                                }
                                if (sQLitePreparedStatement4 != null) {
                                }
                            } catch (Throwable th6) {
                                th3 = th6;
                                th = th3;
                                if (z5 && (sQLiteDatabase = this.database) != null) {
                                    sQLiteDatabase.commitTransaction();
                                }
                                if (sQLitePreparedStatement5 != null) {
                                    sQLitePreparedStatement5.dispose();
                                }
                                if (sQLitePreparedStatement10 != null) {
                                    sQLitePreparedStatement10.dispose();
                                }
                                if (sQLitePreparedStatement7 != null) {
                                    sQLitePreparedStatement7.dispose();
                                }
                                if (sQLitePreparedStatement6 != null) {
                                    sQLitePreparedStatement6.dispose();
                                }
                                if (sQLitePreparedStatement9 != null) {
                                    sQLitePreparedStatement9.dispose();
                                }
                                if (sQLitePreparedStatement3 != null) {
                                    sQLitePreparedStatement3.dispose();
                                }
                                if (sQLitePreparedStatement2 != null) {
                                    sQLitePreparedStatement2.dispose();
                                }
                                if (sQLitePreparedStatement8 != null) {
                                    sQLitePreparedStatement8.dispose();
                                }
                                if (sQLitePreparedStatement != null) {
                                    sQLitePreparedStatement.dispose();
                                }
                                if (sQLitePreparedStatement4 != null) {
                                    sQLitePreparedStatement4.dispose();
                                }
                                throw th;
                            }
                        } catch (Throwable th7) {
                            th = th7;
                            z5 = z9;
                            sQLitePreparedStatement10 = executeFast;
                            sQLitePreparedStatement = null;
                            sQLitePreparedStatement2 = null;
                            sQLitePreparedStatement3 = null;
                            sQLitePreparedStatement4 = null;
                            sQLitePreparedStatement5 = null;
                            sQLitePreparedStatement9 = null;
                            sQLitePreparedStatement8 = null;
                            sQLitePreparedStatement7 = null;
                            sQLitePreparedStatement6 = null;
                            if (z5) {
                            }
                            if (sQLitePreparedStatement5 != null) {
                            }
                            if (sQLitePreparedStatement10 != null) {
                            }
                            if (sQLitePreparedStatement7 != null) {
                            }
                            if (sQLitePreparedStatement6 != null) {
                            }
                            if (sQLitePreparedStatement9 != null) {
                            }
                            if (sQLitePreparedStatement3 != null) {
                            }
                            if (sQLitePreparedStatement2 != null) {
                            }
                            if (sQLitePreparedStatement8 != null) {
                            }
                            if (sQLitePreparedStatement != null) {
                            }
                            if (sQLitePreparedStatement4 != null) {
                            }
                            throw th;
                        }
                    } catch (Exception e4) {
                        th2 = e4;
                        z5 = z9;
                        sQLitePreparedStatement10 = executeFast;
                        sQLitePreparedStatement = null;
                        sQLitePreparedStatement2 = null;
                        sQLitePreparedStatement3 = null;
                        sQLitePreparedStatement4 = null;
                    } catch (Throwable th8) {
                        th = th8;
                        z5 = z9;
                        sQLitePreparedStatement10 = executeFast;
                        sQLitePreparedStatement = null;
                        sQLitePreparedStatement2 = null;
                        sQLitePreparedStatement3 = null;
                        sQLitePreparedStatement4 = null;
                    }
                } catch (Exception e5) {
                    th2 = e5;
                    z5 = z9;
                    sQLitePreparedStatement = null;
                    sQLitePreparedStatement2 = null;
                    sQLitePreparedStatement3 = null;
                    sQLitePreparedStatement4 = null;
                    sQLitePreparedStatement9 = null;
                    sQLitePreparedStatement8 = null;
                    sQLitePreparedStatement7 = null;
                    sQLitePreparedStatement6 = null;
                    sQLitePreparedStatement10 = null;
                    checkSQLException(th2);
                    if (z5) {
                    }
                    if (sQLitePreparedStatement5 != null) {
                    }
                    if (sQLitePreparedStatement10 != null) {
                    }
                    if (sQLitePreparedStatement7 != null) {
                    }
                    if (sQLitePreparedStatement6 != null) {
                    }
                    if (sQLitePreparedStatement9 != null) {
                    }
                    if (sQLitePreparedStatement3 != null) {
                    }
                    if (sQLitePreparedStatement2 != null) {
                    }
                    if (sQLitePreparedStatement8 != null) {
                    }
                    if (sQLitePreparedStatement != null) {
                    }
                    if (sQLitePreparedStatement4 != null) {
                    }
                } catch (Throwable th9) {
                    th = th9;
                    z5 = z9;
                    sQLitePreparedStatement = null;
                    sQLitePreparedStatement2 = null;
                    sQLitePreparedStatement3 = null;
                    sQLitePreparedStatement4 = null;
                    sQLitePreparedStatement9 = null;
                    sQLitePreparedStatement8 = null;
                    sQLitePreparedStatement7 = null;
                    sQLitePreparedStatement6 = null;
                    sQLitePreparedStatement10 = null;
                    if (z5) {
                    }
                    if (sQLitePreparedStatement5 != null) {
                    }
                    if (sQLitePreparedStatement10 != null) {
                    }
                    if (sQLitePreparedStatement7 != null) {
                    }
                    if (sQLitePreparedStatement6 != null) {
                    }
                    if (sQLitePreparedStatement9 != null) {
                    }
                    if (sQLitePreparedStatement3 != null) {
                    }
                    if (sQLitePreparedStatement2 != null) {
                    }
                    if (sQLitePreparedStatement8 != null) {
                    }
                    if (sQLitePreparedStatement != null) {
                    }
                    if (sQLitePreparedStatement4 != null) {
                    }
                    throw th;
                }
            } else {
                if (z3) {
                    TLRPC$Message tLRPC$Message3 = arrayList6.get(0);
                    if (tLRPC$Message3.dialog_id == 0) {
                        MessageObject.getDialogId(tLRPC$Message3);
                    }
                    SQLiteCursor queryFinalized = this.database.queryFinalized("SELECT last_mid FROM dialogs WHERE did = " + tLRPC$Message3.dialog_id, new Object[0]);
                    int intValue8 = queryFinalized.next() ? queryFinalized.intValue(0) : -1;
                    queryFinalized.dispose();
                    if (intValue8 != 0) {
                        return;
                    }
                }
                if (z) {
                    this.database.beginTransaction();
                }
                try {
                    LongSparseArray longSparseArray16 = new LongSparseArray();
                    LongSparseIntArray longSparseIntArray10 = new LongSparseIntArray();
                    LongSparseIntArray longSparseIntArray11 = new LongSparseIntArray();
                    LongSparseIntArray longSparseIntArray12 = new LongSparseIntArray();
                    LongSparseIntArray longSparseIntArray13 = new LongSparseIntArray();
                    LongSparseArray longSparseArray17 = new LongSparseArray();
                    LongSparseArray longSparseArray18 = new LongSparseArray();
                    LongSparseIntArray longSparseIntArray14 = new LongSparseIntArray();
                    LongSparseArray longSparseArray19 = new LongSparseArray();
                    LongSparseArray longSparseArray20 = new LongSparseArray();
                    HashMap hashMap23 = new HashMap();
                    LongSparseIntArray longSparseIntArray15 = longSparseIntArray12;
                    HashMap hashMap24 = new HashMap();
                    LongSparseIntArray longSparseIntArray16 = longSparseIntArray11;
                    HashMap hashMap25 = new HashMap();
                    String str14 = "_";
                    HashMap hashMap26 = new HashMap();
                    HashMap hashMap27 = new HashMap();
                    LongSparseArray longSparseArray21 = longSparseArray16;
                    HashMap hashMap28 = new HashMap();
                    SparseArray sparseArray5 = new SparseArray();
                    LongSparseIntArray longSparseIntArray17 = longSparseIntArray13;
                    HashMap hashMap29 = new HashMap();
                    LongSparseIntArray longSparseIntArray18 = longSparseIntArray10;
                    HashMap hashMap30 = new HashMap();
                    SparseArray sparseArray6 = sparseArray5;
                    LongSparseArray longSparseArray22 = longSparseArray17;
                    SQLitePreparedStatement executeFast2 = this.database.executeFast("REPLACE INTO messages_v2 VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, NULL, ?, ?, ?, ?, ?, ?, 0, ?, ?)");
                    try {
                        sQLitePreparedStatement11 = executeFast2;
                        try {
                            SQLitePreparedStatement executeFast3 = this.database.executeFast("REPLACE INTO messages_topics VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, NULL, ?, ?, ?, ?, ?, ?, 0, ?)");
                            SQLitePreparedStatement executeFast4 = this.database.executeFast("REPLACE INTO randoms_v2 VALUES(?, ?, ?)");
                            try {
                                SQLitePreparedStatement executeFast5 = this.database.executeFast("REPLACE INTO download_queue VALUES(?, ?, ?, ?, ?)");
                                try {
                                    sQLitePreparedStatement7 = executeFast5;
                                    try {
                                        sQLitePreparedStatement10 = executeFast4;
                                        sQLitePreparedStatement6 = this.database.executeFast("REPLACE INTO webpage_pending_v2 VALUES(?, ?, ?)");
                                        int i42 = 0;
                                        LongSparseArray longSparseArray23 = null;
                                        LongSparseArray longSparseArray24 = null;
                                        LongSparseArray longSparseArray25 = null;
                                        while (true) {
                                            try {
                                                hashMap = hashMap30;
                                                str = " AND topic_id = ";
                                                hashMap2 = hashMap29;
                                                str2 = ",";
                                                longSparseArray = longSparseArray23;
                                                str3 = " ";
                                                if (i42 >= arrayList.size()) {
                                                    break;
                                                }
                                                try {
                                                    TLRPC$Message tLRPC$Message4 = arrayList6.get(i42);
                                                    int i43 = tLRPC$Message4.id;
                                                    MessageObject.getDialogId(tLRPC$Message4);
                                                    HashMap hashMap31 = hashMap25;
                                                    HashMap hashMap32 = hashMap24;
                                                    int topicId = MessageObject.getTopicId(tLRPC$Message4, isForum(tLRPC$Message4.dialog_id));
                                                    if (tLRPC$Message4.mentioned && tLRPC$Message4.media_unread) {
                                                        hashMap17 = hashMap23;
                                                        i34 = i42;
                                                        ArrayList arrayList8 = (ArrayList) longSparseArray20.get(tLRPC$Message4.dialog_id);
                                                        if (arrayList8 == null) {
                                                            arrayList8 = new ArrayList();
                                                            str12 = ",";
                                                            longSparseArray8 = longSparseArray18;
                                                            longSparseArray20.put(tLRPC$Message4.dialog_id, arrayList8);
                                                        } else {
                                                            str12 = ",";
                                                            longSparseArray8 = longSparseArray18;
                                                        }
                                                        arrayList8.add(Integer.valueOf(i43));
                                                        if (topicId != 0) {
                                                            FileLog.d("add message with message to " + tLRPC$Message4.dialog_id + " " + topicId);
                                                            TopicKey of = TopicKey.of(tLRPC$Message4.dialog_id, topicId);
                                                            ArrayList arrayList9 = (ArrayList) hashMap27.get(of);
                                                            if (arrayList9 == null) {
                                                                arrayList9 = new ArrayList();
                                                                hashMap27.put(of, arrayList9);
                                                            }
                                                            arrayList9.add(Integer.valueOf(i43));
                                                        }
                                                    } else {
                                                        hashMap17 = hashMap23;
                                                        i34 = i42;
                                                        str12 = ",";
                                                        longSparseArray8 = longSparseArray18;
                                                    }
                                                    if ((tLRPC$Message4.action instanceof TLRPC$TL_messageActionHistoryClear) || ((MessageObject.isOut(tLRPC$Message4) && !tLRPC$Message4.from_scheduled && topicId == 0) || ((tLRPC$Message4.id <= 0 && !MessageObject.isUnread(tLRPC$Message4)) || (isForum(tLRPC$Message4.dialog_id) && topicId == 0)))) {
                                                        longSparseArray9 = longSparseArray8;
                                                        hashMap18 = hashMap32;
                                                        hashMap19 = hashMap31;
                                                        str13 = str12;
                                                        longSparseIntArray8 = longSparseIntArray14;
                                                    } else {
                                                        int i44 = longSparseIntArray14.get(tLRPC$Message4.dialog_id, -1);
                                                        if (i44 == -1) {
                                                            SQLiteCursor queryFinalized2 = this.database.queryFinalized("SELECT inbox_max FROM dialogs WHERE did = " + tLRPC$Message4.dialog_id, new Object[0]);
                                                            i44 = queryFinalized2.next() ? queryFinalized2.intValue(0) : 0;
                                                            queryFinalized2.dispose();
                                                            longSparseIntArray14.put(tLRPC$Message4.dialog_id, i44);
                                                        }
                                                        FileLog.d("update messageRead currentMaxId = " + i44 + " dialogId = " + tLRPC$Message4.dialog_id);
                                                        int i45 = tLRPC$Message4.id;
                                                        if (i45 >= 0 && i44 >= i45) {
                                                            longSparseIntArray9 = longSparseIntArray14;
                                                            str13 = str12;
                                                            if (topicId == 0) {
                                                                TopicKey of2 = TopicKey.of(tLRPC$Message4.dialog_id, topicId);
                                                                Integer num = (Integer) hashMap17.get(of2);
                                                                int intValue9 = num == null ? -1 : num.intValue();
                                                                if (intValue9 == -1) {
                                                                    SQLiteDatabase sQLiteDatabase4 = this.database;
                                                                    StringBuilder sb = new StringBuilder();
                                                                    longSparseIntArray8 = longSparseIntArray9;
                                                                    sb.append("SELECT top_message FROM topics WHERE did = ");
                                                                    longSparseArray9 = longSparseArray8;
                                                                    sb.append(tLRPC$Message4.dialog_id);
                                                                    sb.append(" AND topic_id = ");
                                                                    sb.append(topicId);
                                                                    SQLiteCursor queryFinalized3 = sQLiteDatabase4.queryFinalized(sb.toString(), new Object[0]);
                                                                    int intValue10 = queryFinalized3.next() ? queryFinalized3.intValue(0) : 0;
                                                                    queryFinalized3.dispose();
                                                                    hashMap17.put(of2, Integer.valueOf(intValue10));
                                                                    intValue9 = intValue10;
                                                                } else {
                                                                    longSparseIntArray8 = longSparseIntArray9;
                                                                    longSparseArray9 = longSparseArray8;
                                                                }
                                                                if (intValue9 >= tLRPC$Message4.id || !tLRPC$Message4.unread || tLRPC$Message4.out) {
                                                                    hashMap18 = hashMap32;
                                                                } else {
                                                                    hashMap18 = hashMap32;
                                                                    Integer num2 = (Integer) hashMap18.get(of2);
                                                                    if (num2 == null) {
                                                                        num2 = 0;
                                                                    }
                                                                    hashMap18.put(of2, Integer.valueOf(num2.intValue() + 1));
                                                                }
                                                                if (intValue9 < tLRPC$Message4.id) {
                                                                    hashMap19 = hashMap31;
                                                                    Integer num3 = (Integer) hashMap19.get(of2);
                                                                    if (num3 == null) {
                                                                        num3 = 0;
                                                                    }
                                                                    hashMap19.put(of2, Integer.valueOf(num3.intValue() + 1));
                                                                }
                                                            } else {
                                                                longSparseIntArray8 = longSparseIntArray9;
                                                                longSparseArray9 = longSparseArray8;
                                                                hashMap18 = hashMap32;
                                                            }
                                                            hashMap19 = hashMap31;
                                                        }
                                                        StringBuilder sb2 = (StringBuilder) longSparseArray8.get(tLRPC$Message4.dialog_id);
                                                        if (sb2 == null) {
                                                            sb2 = new StringBuilder();
                                                            longSparseArray8.put(tLRPC$Message4.dialog_id, sb2);
                                                        }
                                                        str13 = str12;
                                                        if (sb2.length() > 0) {
                                                            sb2.append(str13);
                                                        }
                                                        sb2.append(i43);
                                                        longSparseIntArray9 = longSparseIntArray14;
                                                        ArrayList arrayList10 = (ArrayList) longSparseArray19.get(tLRPC$Message4.dialog_id);
                                                        if (arrayList10 == null) {
                                                            arrayList10 = new ArrayList();
                                                            longSparseArray19.put(tLRPC$Message4.dialog_id, arrayList10);
                                                        }
                                                        arrayList10.add(Integer.valueOf(i43));
                                                        if (topicId == 0) {
                                                        }
                                                        hashMap19 = hashMap31;
                                                    }
                                                    if (MediaDataController.canAddMessageToMedia(tLRPC$Message4)) {
                                                        if (longSparseArray == null) {
                                                            longSparseArray14 = new LongSparseArray();
                                                            LongSparseArray longSparseArray26 = new LongSparseArray();
                                                            longSparseArray13 = new LongSparseArray();
                                                            longSparseArray10 = longSparseArray19;
                                                            longSparseArray12 = longSparseArray26;
                                                        } else {
                                                            longSparseArray10 = longSparseArray19;
                                                            longSparseArray12 = longSparseArray24;
                                                            longSparseArray13 = longSparseArray25;
                                                            longSparseArray14 = longSparseArray;
                                                        }
                                                        StringBuilder sb3 = (StringBuilder) longSparseArray14.get(tLRPC$Message4.dialog_id);
                                                        if (sb3 == null) {
                                                            sb3 = new StringBuilder();
                                                            hashMap20 = hashMap17;
                                                            longSparseArray15 = longSparseArray20;
                                                            longSparseArray14.put(tLRPC$Message4.dialog_id, sb3);
                                                        } else {
                                                            hashMap20 = hashMap17;
                                                            longSparseArray15 = longSparseArray20;
                                                        }
                                                        if (sb3.length() > 0) {
                                                            sb3.append(str13);
                                                        }
                                                        sb3.append(i43);
                                                        ArrayList arrayList11 = (ArrayList) longSparseArray12.get(tLRPC$Message4.dialog_id);
                                                        if (arrayList11 == null) {
                                                            arrayList11 = new ArrayList();
                                                            longSparseArray20 = longSparseArray15;
                                                            longSparseArray12.put(tLRPC$Message4.dialog_id, arrayList11);
                                                        } else {
                                                            longSparseArray20 = longSparseArray15;
                                                        }
                                                        arrayList11.add(Integer.valueOf(i43));
                                                        SparseIntArray sparseIntArray = (SparseIntArray) longSparseArray13.get(tLRPC$Message4.dialog_id);
                                                        if (sparseIntArray == null) {
                                                            sparseIntArray = new SparseIntArray();
                                                            longSparseArray13.put(tLRPC$Message4.dialog_id, sparseIntArray);
                                                        }
                                                        sparseIntArray.put(i43, MediaDataController.getMediaType(tLRPC$Message4));
                                                        if (topicId != 0) {
                                                            TopicKey of3 = TopicKey.of(tLRPC$Message4.dialog_id, topicId);
                                                            hashMap22 = hashMap2;
                                                            StringBuilder sb4 = (StringBuilder) hashMap22.get(of3);
                                                            if (sb4 == null) {
                                                                sb4 = new StringBuilder();
                                                                hashMap22.put(of3, sb4);
                                                            }
                                                            if (sb4.length() > 0) {
                                                                sb4.append(str13);
                                                            }
                                                            sb4.append(i43);
                                                            hashMap21 = hashMap;
                                                            ArrayList arrayList12 = (ArrayList) hashMap21.get(of3);
                                                            if (arrayList12 == null) {
                                                                arrayList12 = new ArrayList();
                                                                hashMap21.put(of3, arrayList12);
                                                            }
                                                            arrayList12.add(Integer.valueOf(i43));
                                                        } else {
                                                            hashMap21 = hashMap;
                                                            hashMap22 = hashMap2;
                                                        }
                                                        longSparseArray25 = longSparseArray13;
                                                        longSparseArray24 = longSparseArray12;
                                                        longSparseArray23 = longSparseArray14;
                                                    } else {
                                                        hashMap20 = hashMap17;
                                                        longSparseArray10 = longSparseArray19;
                                                        hashMap21 = hashMap;
                                                        hashMap22 = hashMap2;
                                                        longSparseArray23 = longSparseArray;
                                                    }
                                                    if (isValidKeyboardToSave(tLRPC$Message4)) {
                                                        longSparseArray11 = longSparseArray22;
                                                        TLRPC$Message tLRPC$Message5 = (TLRPC$Message) longSparseArray11.get(tLRPC$Message4.dialog_id);
                                                        if (tLRPC$Message5 == null || tLRPC$Message5.id < tLRPC$Message4.id) {
                                                            longSparseArray11.put(tLRPC$Message4.dialog_id, tLRPC$Message4);
                                                        }
                                                    } else {
                                                        longSparseArray11 = longSparseArray22;
                                                    }
                                                    i42 = i34 + 1;
                                                    longSparseArray22 = longSparseArray11;
                                                    hashMap29 = hashMap22;
                                                    hashMap25 = hashMap19;
                                                    hashMap30 = hashMap21;
                                                    longSparseArray19 = longSparseArray10;
                                                    longSparseIntArray14 = longSparseIntArray8;
                                                    longSparseArray18 = longSparseArray9;
                                                    arrayList6 = arrayList;
                                                    hashMap24 = hashMap18;
                                                    hashMap23 = hashMap20;
                                                } catch (Exception e6) {
                                                    e = e6;
                                                    th2 = e;
                                                    sQLitePreparedStatement5 = sQLitePreparedStatement11;
                                                    sQLitePreparedStatement = null;
                                                    sQLitePreparedStatement2 = null;
                                                    sQLitePreparedStatement3 = null;
                                                    sQLitePreparedStatement4 = null;
                                                    z5 = false;
                                                    sQLitePreparedStatement9 = null;
                                                    sQLitePreparedStatement8 = null;
                                                    checkSQLException(th2);
                                                    if (z5) {
                                                    }
                                                    if (sQLitePreparedStatement5 != null) {
                                                    }
                                                    if (sQLitePreparedStatement10 != null) {
                                                    }
                                                    if (sQLitePreparedStatement7 != null) {
                                                    }
                                                    if (sQLitePreparedStatement6 != null) {
                                                    }
                                                    if (sQLitePreparedStatement9 != null) {
                                                    }
                                                    if (sQLitePreparedStatement3 != null) {
                                                    }
                                                    if (sQLitePreparedStatement2 != null) {
                                                    }
                                                    if (sQLitePreparedStatement8 != null) {
                                                    }
                                                    if (sQLitePreparedStatement != null) {
                                                    }
                                                    if (sQLitePreparedStatement4 != null) {
                                                    }
                                                } catch (Throwable th10) {
                                                    th = th10;
                                                    th = th;
                                                    sQLitePreparedStatement5 = sQLitePreparedStatement11;
                                                    sQLitePreparedStatement = null;
                                                    sQLitePreparedStatement2 = null;
                                                    sQLitePreparedStatement3 = null;
                                                    sQLitePreparedStatement4 = null;
                                                    z5 = false;
                                                    sQLitePreparedStatement9 = null;
                                                    sQLitePreparedStatement8 = null;
                                                    if (z5) {
                                                    }
                                                    if (sQLitePreparedStatement5 != null) {
                                                    }
                                                    if (sQLitePreparedStatement10 != null) {
                                                    }
                                                    if (sQLitePreparedStatement7 != null) {
                                                    }
                                                    if (sQLitePreparedStatement6 != null) {
                                                    }
                                                    if (sQLitePreparedStatement9 != null) {
                                                    }
                                                    if (sQLitePreparedStatement3 != null) {
                                                    }
                                                    if (sQLitePreparedStatement2 != null) {
                                                    }
                                                    if (sQLitePreparedStatement8 != null) {
                                                    }
                                                    if (sQLitePreparedStatement != null) {
                                                    }
                                                    if (sQLitePreparedStatement4 != null) {
                                                    }
                                                    throw th;
                                                }
                                            } catch (Exception e7) {
                                                e = e7;
                                            } catch (Throwable th11) {
                                                th = th11;
                                            }
                                        }
                                        HashMap hashMap33 = hashMap24;
                                        LongSparseArray longSparseArray27 = longSparseArray18;
                                        LongSparseArray longSparseArray28 = longSparseArray19;
                                        HashMap hashMap34 = hashMap;
                                        HashMap hashMap35 = hashMap25;
                                        int i46 = 0;
                                        for (LongSparseArray longSparseArray29 = longSparseArray22; i46 < longSparseArray29.size(); longSparseArray29 = longSparseArray29) {
                                            getMediaDataController().putBotKeyboard(longSparseArray29.keyAt(i46), (TLRPC$Message) longSparseArray29.valueAt(i46));
                                            i46++;
                                            str = str;
                                        }
                                        String str15 = str;
                                        if (longSparseArray != null) {
                                            int size2 = longSparseArray.size();
                                            int i47 = 0;
                                            longSparseArray4 = null;
                                            sparseArray = null;
                                            while (i47 < size2) {
                                                int i48 = size2;
                                                HashMap hashMap36 = hashMap33;
                                                LongSparseArray longSparseArray30 = longSparseArray;
                                                long keyAt = longSparseArray30.keyAt(i47);
                                                LongSparseArray longSparseArray31 = longSparseArray25;
                                                LongSparseArray longSparseArray32 = longSparseArray4;
                                                SparseIntArray sparseIntArray2 = (SparseIntArray) longSparseArray31.get(keyAt);
                                                LongSparseArray longSparseArray33 = longSparseArray20;
                                                LongSparseArray longSparseArray34 = longSparseArray24;
                                                ArrayList arrayList13 = (ArrayList) longSparseArray34.get(keyAt);
                                                String str16 = str15;
                                                HashMap hashMap37 = hashMap35;
                                                String str17 = str3;
                                                HashMap hashMap38 = hashMap27;
                                                String str18 = str2;
                                                int i49 = 0;
                                                SQLiteCursor queryFinalized4 = this.database.queryFinalized(String.format(Locale.US, "SELECT mid, type FROM media_v4 WHERE mid IN(%s) AND uid = %d", ((StringBuilder) longSparseArray30.valueAt(i47)).toString(), Long.valueOf(keyAt)), new Object[0]);
                                                SparseIntArray sparseIntArray3 = null;
                                                while (queryFinalized4.next()) {
                                                    int intValue11 = queryFinalized4.intValue(i49);
                                                    int intValue12 = queryFinalized4.intValue(1);
                                                    if (intValue12 == sparseIntArray2.get(intValue11)) {
                                                        arrayList13.remove(Integer.valueOf(intValue11));
                                                    } else {
                                                        if (sparseIntArray3 == null) {
                                                            LongSparseArray longSparseArray35 = longSparseArray32 == null ? new LongSparseArray() : longSparseArray32;
                                                            SparseIntArray sparseIntArray4 = (SparseIntArray) longSparseArray35.get(keyAt);
                                                            if (sparseIntArray4 == null) {
                                                                sparseIntArray4 = new SparseIntArray();
                                                                longSparseArray35.put(keyAt, sparseIntArray4);
                                                            }
                                                            longSparseArray32 = longSparseArray35;
                                                            sparseIntArray3 = sparseIntArray4;
                                                        }
                                                        sparseIntArray3.put(intValue11, intValue12);
                                                    }
                                                    i49 = 0;
                                                }
                                                queryFinalized4.dispose();
                                                if (sparseArray == null) {
                                                    sparseArray = new SparseArray();
                                                }
                                                int size3 = arrayList13.size();
                                                int i50 = 0;
                                                while (i50 < size3) {
                                                    int intValue13 = ((Integer) arrayList13.get(i50)).intValue();
                                                    int i51 = sparseIntArray2.get(intValue13);
                                                    LongSparseIntArray longSparseIntArray19 = (LongSparseIntArray) sparseArray.get(i51);
                                                    if (longSparseIntArray19 == null) {
                                                        longSparseIntArray19 = new LongSparseIntArray();
                                                        sparseArray.put(i51, longSparseIntArray19);
                                                        i28 = size3;
                                                        i29 = 0;
                                                        i27 = Integer.MIN_VALUE;
                                                    } else {
                                                        i27 = Integer.MIN_VALUE;
                                                        i28 = size3;
                                                        i29 = longSparseIntArray19.get(keyAt, Integer.MIN_VALUE);
                                                    }
                                                    if (i29 == i27) {
                                                        i29 = 0;
                                                    }
                                                    longSparseIntArray19.put(keyAt, i29 + 1);
                                                    if (sparseIntArray3 != null && (i30 = sparseIntArray3.get(intValue13, -1)) >= 0) {
                                                        LongSparseIntArray longSparseIntArray20 = (LongSparseIntArray) sparseArray.get(i30);
                                                        if (longSparseIntArray20 == null) {
                                                            longSparseIntArray20 = new LongSparseIntArray();
                                                            sparseArray.put(i30, longSparseIntArray20);
                                                            i31 = Integer.MIN_VALUE;
                                                            i32 = 0;
                                                        } else {
                                                            i31 = Integer.MIN_VALUE;
                                                            i32 = longSparseIntArray20.get(keyAt, Integer.MIN_VALUE);
                                                        }
                                                        if (i32 == i31) {
                                                            i33 = -1;
                                                            i32 = 0;
                                                        } else {
                                                            i33 = -1;
                                                        }
                                                        longSparseIntArray20.put(keyAt, i32 + i33);
                                                    }
                                                    i50++;
                                                    size3 = i28;
                                                }
                                                i47++;
                                                str15 = str16;
                                                longSparseArray20 = longSparseArray33;
                                                hashMap33 = hashMap36;
                                                size2 = i48;
                                                longSparseArray25 = longSparseArray31;
                                                longSparseArray = longSparseArray30;
                                                longSparseArray4 = longSparseArray32;
                                                longSparseArray24 = longSparseArray34;
                                                hashMap35 = hashMap37;
                                                str3 = str17;
                                                str2 = str18;
                                                hashMap27 = hashMap38;
                                            }
                                            hashMap3 = hashMap27;
                                            hashMap4 = hashMap33;
                                            str4 = str3;
                                            str5 = str2;
                                            hashMap5 = hashMap35;
                                            str6 = str15;
                                            longSparseArray2 = longSparseArray25;
                                            longSparseArray3 = longSparseArray20;
                                        } else {
                                            hashMap3 = hashMap27;
                                            hashMap4 = hashMap33;
                                            str4 = " ";
                                            str5 = ",";
                                            hashMap5 = hashMap35;
                                            str6 = str15;
                                            longSparseArray2 = longSparseArray25;
                                            longSparseArray3 = longSparseArray20;
                                            longSparseArray4 = null;
                                            sparseArray = null;
                                        }
                                        Iterator it2 = hashMap2.keySet().iterator();
                                        while (it2.hasNext()) {
                                            TopicKey topicKey = (TopicKey) it2.next();
                                            ArrayList arrayList14 = (ArrayList) hashMap34.get(topicKey);
                                            HashMap hashMap39 = hashMap34;
                                            SQLiteCursor queryFinalized5 = this.database.queryFinalized(String.format(Locale.US, "SELECT mid, type FROM media_topics WHERE mid IN(%s) AND uid = %d AND topic_id = %d", ((StringBuilder) hashMap2.get(topicKey)).toString(), Long.valueOf(topicKey.dialogId), Integer.valueOf(topicKey.topicId)), new Object[0]);
                                            SparseIntArray sparseIntArray5 = null;
                                            while (queryFinalized5.next()) {
                                                LongSparseArray longSparseArray36 = longSparseArray2;
                                                int intValue14 = queryFinalized5.intValue(0);
                                                int intValue15 = queryFinalized5.intValue(1);
                                                if (intValue15 == ((SparseIntArray) longSparseArray36.get(topicKey.dialogId)).get(intValue14)) {
                                                    arrayList14.remove(Integer.valueOf(intValue14));
                                                } else {
                                                    if (sparseIntArray5 == null) {
                                                        if (longSparseArray4 == null) {
                                                            longSparseArray4 = new LongSparseArray();
                                                        }
                                                        sparseIntArray5 = (SparseIntArray) longSparseArray4.get(topicKey.dialogId);
                                                        if (sparseIntArray5 == null) {
                                                            sparseIntArray5 = new SparseIntArray();
                                                            longSparseArray4.put(topicKey.dialogId, sparseIntArray5);
                                                        }
                                                    }
                                                    sparseIntArray5.put(intValue14, intValue15);
                                                }
                                                longSparseArray2 = longSparseArray36;
                                            }
                                            LongSparseArray longSparseArray37 = longSparseArray2;
                                            SparseIntArray sparseIntArray6 = (SparseIntArray) longSparseArray37.get(topicKey.dialogId);
                                            int size4 = arrayList14.size();
                                            int i52 = 0;
                                            while (i52 < size4) {
                                                int intValue16 = ((Integer) arrayList14.get(i52)).intValue();
                                                int i53 = sparseIntArray6.get(intValue16);
                                                Iterator it3 = it2;
                                                SparseArray sparseArray7 = sparseArray6;
                                                ArrayList arrayList15 = arrayList14;
                                                HashMap hashMap40 = (HashMap) sparseArray7.get(i53);
                                                if (hashMap40 == null) {
                                                    hashMap40 = new HashMap();
                                                    sparseArray7.put(i53, hashMap40);
                                                } else {
                                                    Integer num4 = (Integer) hashMap40.get(topicKey);
                                                    if (num4 != null) {
                                                        intValue6 = num4.intValue();
                                                        hashMap40.put(topicKey, Integer.valueOf(intValue6 + 1));
                                                        if (sparseIntArray5 != null && (i26 = sparseIntArray5.get(intValue16, -1)) >= 0) {
                                                            hashMap16 = (HashMap) sparseArray7.get(i26);
                                                            if (hashMap16 != null) {
                                                                hashMap16 = new HashMap();
                                                                sparseArray7.put(i26, hashMap16);
                                                                intValue7 = 0;
                                                            } else {
                                                                Integer num5 = (Integer) hashMap16.get(topicKey);
                                                                intValue7 = num5 == null ? Integer.MIN_VALUE : num5.intValue();
                                                            }
                                                            if (intValue7 == Integer.MIN_VALUE) {
                                                                intValue7 = 0;
                                                            }
                                                            hashMap16.put(topicKey, Integer.valueOf(intValue7 - 1));
                                                        }
                                                        i52++;
                                                        sparseArray6 = sparseArray7;
                                                        it2 = it3;
                                                        arrayList14 = arrayList15;
                                                    }
                                                }
                                                intValue6 = 0;
                                                hashMap40.put(topicKey, Integer.valueOf(intValue6 + 1));
                                                if (sparseIntArray5 != null) {
                                                    hashMap16 = (HashMap) sparseArray7.get(i26);
                                                    if (hashMap16 != null) {
                                                    }
                                                    if (intValue7 == Integer.MIN_VALUE) {
                                                    }
                                                    hashMap16.put(topicKey, Integer.valueOf(intValue7 - 1));
                                                }
                                                i52++;
                                                sparseArray6 = sparseArray7;
                                                it2 = it3;
                                                arrayList14 = arrayList15;
                                            }
                                            hashMap34 = hashMap39;
                                            longSparseArray2 = longSparseArray37;
                                        }
                                        SparseArray sparseArray8 = sparseArray6;
                                        if (!longSparseArray27.isEmpty()) {
                                            int size5 = longSparseArray27.size();
                                            int i54 = 0;
                                            while (i54 < size5) {
                                                LongSparseArray longSparseArray38 = longSparseArray27;
                                                long keyAt2 = longSparseArray38.keyAt(i54);
                                                LongSparseArray longSparseArray39 = longSparseArray28;
                                                ArrayList arrayList16 = (ArrayList) longSparseArray39.get(keyAt2);
                                                LongSparseArray longSparseArray40 = longSparseArray3;
                                                ArrayList arrayList17 = (ArrayList) longSparseArray40.get(keyAt2);
                                                int i55 = size5;
                                                longSparseArray27 = longSparseArray38;
                                                int i56 = 0;
                                                SQLiteCursor queryFinalized6 = this.database.queryFinalized(String.format(Locale.US, "SELECT mid FROM messages_v2 WHERE mid IN(%s) AND uid = %d", ((StringBuilder) longSparseArray38.valueAt(i54)).toString(), Long.valueOf(keyAt2)), new Object[0]);
                                                while (queryFinalized6.next()) {
                                                    Integer valueOf = Integer.valueOf(queryFinalized6.intValue(i56));
                                                    if (arrayList16 != null) {
                                                        arrayList16.remove(valueOf);
                                                    }
                                                    if (arrayList17 != null) {
                                                        arrayList17.remove(valueOf);
                                                    }
                                                    i56 = 0;
                                                }
                                                queryFinalized6.dispose();
                                                LongSparseIntArray longSparseIntArray21 = longSparseIntArray18;
                                                int i57 = longSparseIntArray21.get(keyAt2, -1);
                                                if (i57 < 0) {
                                                    i57 = 0;
                                                }
                                                longSparseIntArray21.put(keyAt2, i57 + arrayList16.size());
                                                if (arrayList17 != null) {
                                                    longSparseIntArray7 = longSparseIntArray17;
                                                    int i58 = longSparseIntArray7.get(keyAt2, -1);
                                                    if (i58 < 0) {
                                                        i58 = 0;
                                                    }
                                                    longSparseIntArray7.put(keyAt2, i58 + arrayList17.size());
                                                } else {
                                                    longSparseIntArray7 = longSparseIntArray17;
                                                }
                                                i54++;
                                                longSparseIntArray18 = longSparseIntArray21;
                                                longSparseIntArray17 = longSparseIntArray7;
                                                size5 = i55;
                                                longSparseArray28 = longSparseArray39;
                                                longSparseArray3 = longSparseArray40;
                                            }
                                        }
                                        LongSparseIntArray longSparseIntArray22 = longSparseIntArray17;
                                        LongSparseIntArray longSparseIntArray23 = longSparseIntArray18;
                                        if (!hashMap3.isEmpty()) {
                                            for (TopicKey topicKey2 : hashMap3.keySet()) {
                                                HashMap hashMap41 = hashMap3;
                                                ArrayList arrayList18 = (ArrayList) hashMap41.get(topicKey2);
                                                String str19 = str5;
                                                SparseArray sparseArray9 = sparseArray8;
                                                LongSparseIntArray longSparseIntArray24 = longSparseIntArray23;
                                                int i59 = 0;
                                                SQLiteCursor queryFinalized7 = this.database.queryFinalized(String.format(Locale.US, "SELECT mid FROM messages_topics WHERE mid IN(%s) AND uid = %d AND topic_id = %d", TextUtils.join(str19, arrayList18), Long.valueOf(topicKey2.dialogId), Integer.valueOf(topicKey2.topicId)), new Object[0]);
                                                while (queryFinalized7.next()) {
                                                    arrayList18.remove(Integer.valueOf(queryFinalized7.intValue(i59)));
                                                    i59 = 0;
                                                }
                                                queryFinalized7.dispose();
                                                StringBuilder sb5 = new StringBuilder();
                                                sb5.append("new unread mentions ");
                                                sb5.append(topicKey2.dialogId);
                                                String str20 = str4;
                                                sb5.append(str20);
                                                sb5.append(topicKey2.topicId);
                                                sb5.append(str20);
                                                sb5.append(arrayList18.size());
                                                FileLog.d(sb5.toString());
                                                HashMap hashMap42 = hashMap28;
                                                hashMap42.put(topicKey2, Integer.valueOf(arrayList18.size()));
                                                str5 = str19;
                                                hashMap3 = hashMap41;
                                                str4 = str20;
                                                hashMap28 = hashMap42;
                                                sparseArray8 = sparseArray9;
                                                longSparseIntArray23 = longSparseIntArray24;
                                            }
                                        }
                                        sparseArray2 = sparseArray8;
                                        longSparseIntArray = longSparseIntArray23;
                                        HashMap hashMap43 = hashMap28;
                                        String str21 = str4;
                                        if (longSparseArray4 != null) {
                                            for (int i60 = 0; i60 < longSparseArray4.size(); i60++) {
                                                long keyAt3 = longSparseArray4.keyAt(i60);
                                                SparseIntArray sparseIntArray7 = (SparseIntArray) longSparseArray4.valueAt(i60);
                                                StringBuilder sb6 = new StringBuilder();
                                                for (int i61 = 0; i61 < longSparseArray4.size(); i61++) {
                                                    int keyAt4 = sparseIntArray7.keyAt(i61);
                                                    if (sb6.length() != 0) {
                                                        sb6.append(", ");
                                                    }
                                                    sb6.append(keyAt4);
                                                }
                                                SQLiteDatabase sQLiteDatabase5 = this.database;
                                                Locale locale = Locale.US;
                                                sQLiteDatabase5.executeFast(String.format(locale, "DELETE FROM media_v4 WHERE mid IN(%s) AND uid = %d", sb6.toString(), Long.valueOf(keyAt3))).stepThis().dispose();
                                                this.database.executeFast(String.format(locale, "DELETE FROM media_topics WHERE mid IN(%s) AND uid = %d", sb6.toString(), Long.valueOf(keyAt3))).stepThis().dispose();
                                            }
                                        }
                                        i3 = ConnectionsManager.DEFAULT_DATACENTER_ID;
                                        int i62 = 0;
                                        int i63 = 0;
                                        sQLitePreparedStatement2 = null;
                                        sQLitePreparedStatement3 = null;
                                        arrayList2 = null;
                                        SQLitePreparedStatement sQLitePreparedStatement28 = null;
                                        while (i63 < arrayList.size()) {
                                            try {
                                                try {
                                                    TLRPC$Message tLRPC$Message6 = arrayList.get(i63);
                                                    if (tLRPC$Message6 == null) {
                                                        i18 = i62;
                                                        i16 = i63;
                                                        longSparseIntArray6 = longSparseIntArray22;
                                                        sparseArray4 = sparseArray;
                                                        str10 = str21;
                                                        hashMap12 = hashMap43;
                                                        str11 = str14;
                                                        hashMap14 = hashMap26;
                                                        longSparseArray7 = longSparseArray21;
                                                        sQLitePreparedStatement14 = sQLitePreparedStatement7;
                                                        sQLitePreparedStatement15 = sQLitePreparedStatement6;
                                                        sQLitePreparedStatement16 = sQLitePreparedStatement10;
                                                    } else {
                                                        fixUnsupportedMedia(tLRPC$Message6);
                                                        sparseArray4 = sparseArray;
                                                        str10 = str21;
                                                        int topicId2 = MessageObject.getTopicId(tLRPC$Message6, isForum(tLRPC$Message6.dialog_id));
                                                        sQLitePreparedStatement11.requery();
                                                        int i64 = tLRPC$Message6.id;
                                                        int i65 = tLRPC$Message6.local_id;
                                                        if (i65 != 0) {
                                                            i64 = i65;
                                                        }
                                                        NativeByteBuffer nativeByteBuffer3 = new NativeByteBuffer(tLRPC$Message6.getObjectSize());
                                                        tLRPC$Message6.serializeToStream(nativeByteBuffer3);
                                                        TLRPC$MessageAction tLRPC$MessageAction = tLRPC$Message6.action;
                                                        hashMap12 = hashMap43;
                                                        try {
                                                            try {
                                                                try {
                                                                    try {
                                                                        if (tLRPC$MessageAction instanceof TLRPC$TL_messageEncryptedAction) {
                                                                            try {
                                                                                TLRPC$DecryptedMessageAction tLRPC$DecryptedMessageAction = tLRPC$MessageAction.encryptedAction;
                                                                                longSparseIntArray6 = longSparseIntArray22;
                                                                                if (!(tLRPC$DecryptedMessageAction instanceof TLRPC$TL_decryptedMessageActionSetMessageTTL) && !(tLRPC$DecryptedMessageAction instanceof TLRPC$TL_decryptedMessageActionScreenshotMessages)) {
                                                                                    z8 = false;
                                                                                    if ((tLRPC$MessageAction instanceof TLRPC$TL_messageActionTopicCreate) && !MessageObject.isOut(tLRPC$Message6)) {
                                                                                        if (arrayList2 == null) {
                                                                                            arrayList2 = new ArrayList();
                                                                                        }
                                                                                        arrayList2.add(tLRPC$Message6);
                                                                                    }
                                                                                    if (tLRPC$Message6.action instanceof TLRPC$TL_messageActionTopicEdit) {
                                                                                        if (arrayList2 == null) {
                                                                                            arrayList2 = new ArrayList();
                                                                                        }
                                                                                        arrayList2.add(tLRPC$Message6);
                                                                                    }
                                                                                    if (z8) {
                                                                                        i16 = i63;
                                                                                        LongSparseArray longSparseArray41 = longSparseArray21;
                                                                                        arrayList5 = arrayList2;
                                                                                        hashMap13 = hashMap26;
                                                                                        longSparseArray7 = longSparseArray41;
                                                                                    } else {
                                                                                        LongSparseArray longSparseArray42 = longSparseArray21;
                                                                                        TLRPC$Message tLRPC$Message7 = (TLRPC$Message) longSparseArray42.get(tLRPC$Message6.dialog_id);
                                                                                        if (tLRPC$Message7 != null) {
                                                                                            arrayList5 = arrayList2;
                                                                                            if (tLRPC$Message6.date <= tLRPC$Message7.date) {
                                                                                                int i66 = tLRPC$Message7.id;
                                                                                                if (i66 > 0) {
                                                                                                }
                                                                                                if (i66 < 0 && tLRPC$Message6.id < i66) {
                                                                                                }
                                                                                                if (topicId2 == 0) {
                                                                                                    TopicKey of4 = TopicKey.of(tLRPC$Message6.dialog_id, topicId2);
                                                                                                    hashMap13 = hashMap26;
                                                                                                    TLRPC$Message tLRPC$Message8 = (TLRPC$Message) hashMap13.get(of4);
                                                                                                    if (tLRPC$Message8 != null) {
                                                                                                        longSparseArray7 = longSparseArray42;
                                                                                                        i16 = i63;
                                                                                                        if (tLRPC$Message6.date <= tLRPC$Message8.date) {
                                                                                                            int i67 = tLRPC$Message8.id;
                                                                                                            if (i67 > 0) {
                                                                                                            }
                                                                                                            if (i67 < 0 && tLRPC$Message6.id < i67) {
                                                                                                            }
                                                                                                        }
                                                                                                    } else {
                                                                                                        i16 = i63;
                                                                                                        longSparseArray7 = longSparseArray42;
                                                                                                    }
                                                                                                    hashMap13.put(of4, tLRPC$Message6);
                                                                                                } else {
                                                                                                    i16 = i63;
                                                                                                    hashMap13 = hashMap26;
                                                                                                    longSparseArray7 = longSparseArray42;
                                                                                                }
                                                                                            }
                                                                                        } else {
                                                                                            arrayList5 = arrayList2;
                                                                                        }
                                                                                        longSparseArray42.put(tLRPC$Message6.dialog_id, tLRPC$Message6);
                                                                                        if (topicId2 == 0) {
                                                                                        }
                                                                                    }
                                                                                    i17 = 0;
                                                                                    while (i17 < 2) {
                                                                                        boolean z10 = i17 == 1;
                                                                                        if ((i2 == 0 || z10) && !(z10 && topicId2 == 0)) {
                                                                                            SQLitePreparedStatement sQLitePreparedStatement29 = z10 ? executeFast3 : sQLitePreparedStatement11;
                                                                                            try {
                                                                                                sQLitePreparedStatement29.requery();
                                                                                                sQLitePreparedStatement29.bindInteger(1, i64);
                                                                                                boolean z11 = z10;
                                                                                                hashMap15 = hashMap13;
                                                                                                sQLitePreparedStatement29.bindLong(2, tLRPC$Message6.dialog_id);
                                                                                                if (z11) {
                                                                                                    sQLitePreparedStatement29.bindLong(3, topicId2);
                                                                                                    i20 = 4;
                                                                                                } else {
                                                                                                    i20 = 3;
                                                                                                }
                                                                                                int i68 = i20 + 1;
                                                                                                sQLitePreparedStatement29.bindInteger(i20, MessageObject.getUnreadFlags(tLRPC$Message6));
                                                                                                int i69 = i68 + 1;
                                                                                                sQLitePreparedStatement29.bindInteger(i68, tLRPC$Message6.send_state);
                                                                                                int i70 = i69 + 1;
                                                                                                sQLitePreparedStatement29.bindInteger(i69, tLRPC$Message6.date);
                                                                                                int i71 = i70 + 1;
                                                                                                sQLitePreparedStatement29.bindByteBuffer(i70, nativeByteBuffer3);
                                                                                                int i72 = i71 + 1;
                                                                                                sQLitePreparedStatement29.bindInteger(i71, (MessageObject.isOut(tLRPC$Message6) || tLRPC$Message6.from_scheduled) ? 1 : 0);
                                                                                                int i73 = i72 + 1;
                                                                                                sQLitePreparedStatement29.bindInteger(i72, tLRPC$Message6.ttl);
                                                                                                if ((tLRPC$Message6.flags & 1024) != 0) {
                                                                                                    i21 = i73 + 1;
                                                                                                    sQLitePreparedStatement29.bindInteger(i73, tLRPC$Message6.views);
                                                                                                } else {
                                                                                                    i21 = i73 + 1;
                                                                                                    sQLitePreparedStatement29.bindInteger(i73, getMessageMediaType(tLRPC$Message6));
                                                                                                }
                                                                                                int i74 = tLRPC$Message6.stickerVerified;
                                                                                                int i75 = i21 + 1;
                                                                                                sQLitePreparedStatement29.bindInteger(i21, i74 == 0 ? 1 : i74 == 2 ? 2 : 0);
                                                                                                int i76 = i75 + 1;
                                                                                                sQLitePreparedStatement29.bindInteger(i75, tLRPC$Message6.mentioned ? 1 : 0);
                                                                                                int i77 = i76 + 1;
                                                                                                sQLitePreparedStatement29.bindInteger(i76, tLRPC$Message6.forwards);
                                                                                                if (tLRPC$Message6.replies != null) {
                                                                                                    nativeByteBuffer = new NativeByteBuffer(tLRPC$Message6.replies.getObjectSize());
                                                                                                    tLRPC$Message6.replies.serializeToStream(nativeByteBuffer);
                                                                                                    i22 = i77 + 1;
                                                                                                    sQLitePreparedStatement29.bindByteBuffer(i77, nativeByteBuffer);
                                                                                                } else {
                                                                                                    i22 = i77 + 1;
                                                                                                    sQLitePreparedStatement29.bindNull(i77);
                                                                                                    nativeByteBuffer = null;
                                                                                                }
                                                                                                TLRPC$TL_messageReplyHeader tLRPC$TL_messageReplyHeader = tLRPC$Message6.reply_to;
                                                                                                if (tLRPC$TL_messageReplyHeader != null) {
                                                                                                    i24 = i22 + 1;
                                                                                                    i23 = i62;
                                                                                                    int i78 = tLRPC$TL_messageReplyHeader.reply_to_top_id;
                                                                                                    if (i78 == 0) {
                                                                                                        i78 = tLRPC$TL_messageReplyHeader.reply_to_msg_id;
                                                                                                    }
                                                                                                    sQLitePreparedStatement29.bindInteger(i22, i78);
                                                                                                } else {
                                                                                                    i23 = i62;
                                                                                                    i24 = i22 + 1;
                                                                                                    sQLitePreparedStatement29.bindInteger(i22, 0);
                                                                                                }
                                                                                                int i79 = i24;
                                                                                                int i80 = i79 + 1;
                                                                                                sQLitePreparedStatement12 = sQLitePreparedStatement2;
                                                                                                sQLitePreparedStatement13 = sQLitePreparedStatement3;
                                                                                                try {
                                                                                                    sQLitePreparedStatement29.bindLong(i79, MessageObject.getChannelId(tLRPC$Message6));
                                                                                                    NativeByteBuffer writeLocalParams = MessageCustomParamsHelper.writeLocalParams(tLRPC$Message6);
                                                                                                    if (writeLocalParams != null) {
                                                                                                        i25 = i80 + 1;
                                                                                                        sQLitePreparedStatement29.bindByteBuffer(i80, writeLocalParams);
                                                                                                    } else {
                                                                                                        i25 = i80 + 1;
                                                                                                        sQLitePreparedStatement29.bindNull(i80);
                                                                                                    }
                                                                                                    if (z11) {
                                                                                                        sQLitePreparedStatement27 = sQLitePreparedStatement28;
                                                                                                    } else if ((tLRPC$Message6.flags & 131072) != 0) {
                                                                                                        sQLitePreparedStatement27 = sQLitePreparedStatement28;
                                                                                                        sQLitePreparedStatement29.bindLong(i25, tLRPC$Message6.grouped_id);
                                                                                                    } else {
                                                                                                        sQLitePreparedStatement27 = sQLitePreparedStatement28;
                                                                                                        sQLitePreparedStatement29.bindNull(i25);
                                                                                                    }
                                                                                                    sQLitePreparedStatement29.step();
                                                                                                    if (nativeByteBuffer != null) {
                                                                                                        nativeByteBuffer.reuse();
                                                                                                    }
                                                                                                    if (writeLocalParams != null) {
                                                                                                        writeLocalParams.reuse();
                                                                                                    }
                                                                                                } catch (Exception e8) {
                                                                                                    e = e8;
                                                                                                    th2 = e;
                                                                                                    sQLitePreparedStatement5 = sQLitePreparedStatement11;
                                                                                                    sQLitePreparedStatement2 = sQLitePreparedStatement12;
                                                                                                    sQLitePreparedStatement3 = sQLitePreparedStatement13;
                                                                                                    sQLitePreparedStatement = null;
                                                                                                    sQLitePreparedStatement4 = null;
                                                                                                    z5 = false;
                                                                                                    sQLitePreparedStatement9 = null;
                                                                                                    sQLitePreparedStatement8 = null;
                                                                                                    checkSQLException(th2);
                                                                                                    if (z5) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement5 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement10 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement7 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement6 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement9 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement3 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement2 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement8 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement4 != null) {
                                                                                                    }
                                                                                                } catch (Throwable th12) {
                                                                                                    th = th12;
                                                                                                    th = th;
                                                                                                    sQLitePreparedStatement5 = sQLitePreparedStatement11;
                                                                                                    sQLitePreparedStatement2 = sQLitePreparedStatement12;
                                                                                                    sQLitePreparedStatement3 = sQLitePreparedStatement13;
                                                                                                    sQLitePreparedStatement = null;
                                                                                                    sQLitePreparedStatement4 = null;
                                                                                                    z5 = false;
                                                                                                    sQLitePreparedStatement9 = null;
                                                                                                    sQLitePreparedStatement8 = null;
                                                                                                    if (z5) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement5 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement10 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement7 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement6 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement9 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement3 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement2 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement8 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement4 != null) {
                                                                                                    }
                                                                                                    throw th;
                                                                                                }
                                                                                            } catch (Exception e9) {
                                                                                                e = e9;
                                                                                                th2 = e;
                                                                                                sQLitePreparedStatement5 = sQLitePreparedStatement11;
                                                                                                sQLitePreparedStatement = null;
                                                                                                sQLitePreparedStatement4 = null;
                                                                                                z5 = false;
                                                                                                sQLitePreparedStatement9 = null;
                                                                                                sQLitePreparedStatement8 = null;
                                                                                                checkSQLException(th2);
                                                                                                if (z5) {
                                                                                                }
                                                                                                if (sQLitePreparedStatement5 != null) {
                                                                                                }
                                                                                                if (sQLitePreparedStatement10 != null) {
                                                                                                }
                                                                                                if (sQLitePreparedStatement7 != null) {
                                                                                                }
                                                                                                if (sQLitePreparedStatement6 != null) {
                                                                                                }
                                                                                                if (sQLitePreparedStatement9 != null) {
                                                                                                }
                                                                                                if (sQLitePreparedStatement3 != null) {
                                                                                                }
                                                                                                if (sQLitePreparedStatement2 != null) {
                                                                                                }
                                                                                                if (sQLitePreparedStatement8 != null) {
                                                                                                }
                                                                                                if (sQLitePreparedStatement != null) {
                                                                                                }
                                                                                                if (sQLitePreparedStatement4 != null) {
                                                                                                }
                                                                                            } catch (Throwable th13) {
                                                                                                th = th13;
                                                                                                th = th;
                                                                                                sQLitePreparedStatement5 = sQLitePreparedStatement11;
                                                                                                sQLitePreparedStatement = null;
                                                                                                sQLitePreparedStatement4 = null;
                                                                                                z5 = false;
                                                                                                sQLitePreparedStatement9 = null;
                                                                                                sQLitePreparedStatement8 = null;
                                                                                                if (z5) {
                                                                                                }
                                                                                                if (sQLitePreparedStatement5 != null) {
                                                                                                }
                                                                                                if (sQLitePreparedStatement10 != null) {
                                                                                                }
                                                                                                if (sQLitePreparedStatement7 != null) {
                                                                                                }
                                                                                                if (sQLitePreparedStatement6 != null) {
                                                                                                }
                                                                                                if (sQLitePreparedStatement9 != null) {
                                                                                                }
                                                                                                if (sQLitePreparedStatement3 != null) {
                                                                                                }
                                                                                                if (sQLitePreparedStatement2 != null) {
                                                                                                }
                                                                                                if (sQLitePreparedStatement8 != null) {
                                                                                                }
                                                                                                if (sQLitePreparedStatement != null) {
                                                                                                }
                                                                                                if (sQLitePreparedStatement4 != null) {
                                                                                                }
                                                                                                throw th;
                                                                                            }
                                                                                        } else {
                                                                                            i23 = i62;
                                                                                            sQLitePreparedStatement12 = sQLitePreparedStatement2;
                                                                                            sQLitePreparedStatement13 = sQLitePreparedStatement3;
                                                                                            hashMap15 = hashMap13;
                                                                                            sQLitePreparedStatement27 = sQLitePreparedStatement28;
                                                                                        }
                                                                                        i17++;
                                                                                        sQLitePreparedStatement28 = sQLitePreparedStatement27;
                                                                                        hashMap13 = hashMap15;
                                                                                        sQLitePreparedStatement2 = sQLitePreparedStatement12;
                                                                                        i62 = i23;
                                                                                        sQLitePreparedStatement3 = sQLitePreparedStatement13;
                                                                                    }
                                                                                    int i81 = i62;
                                                                                    sQLitePreparedStatement12 = sQLitePreparedStatement2;
                                                                                    sQLitePreparedStatement13 = sQLitePreparedStatement3;
                                                                                    hashMap14 = hashMap13;
                                                                                    SQLitePreparedStatement sQLitePreparedStatement30 = sQLitePreparedStatement28;
                                                                                    if (tLRPC$Message6.random_id == 0) {
                                                                                        try {
                                                                                            sQLitePreparedStatement10.requery();
                                                                                            sQLitePreparedStatement16 = sQLitePreparedStatement10;
                                                                                            try {
                                                                                                sQLitePreparedStatement16.bindLong(1, tLRPC$Message6.random_id);
                                                                                                sQLitePreparedStatement16.bindInteger(2, i64);
                                                                                                sQLitePreparedStatement16.bindLong(3, tLRPC$Message6.dialog_id);
                                                                                                sQLitePreparedStatement16.step();
                                                                                            } catch (Exception e10) {
                                                                                                e = e10;
                                                                                                th2 = e;
                                                                                                sQLitePreparedStatement10 = sQLitePreparedStatement16;
                                                                                                sQLitePreparedStatement5 = sQLitePreparedStatement11;
                                                                                                sQLitePreparedStatement2 = sQLitePreparedStatement12;
                                                                                                sQLitePreparedStatement3 = sQLitePreparedStatement13;
                                                                                                sQLitePreparedStatement = null;
                                                                                                sQLitePreparedStatement4 = null;
                                                                                                z5 = false;
                                                                                                sQLitePreparedStatement9 = null;
                                                                                                sQLitePreparedStatement8 = null;
                                                                                                checkSQLException(th2);
                                                                                                if (z5) {
                                                                                                }
                                                                                                if (sQLitePreparedStatement5 != null) {
                                                                                                }
                                                                                                if (sQLitePreparedStatement10 != null) {
                                                                                                }
                                                                                                if (sQLitePreparedStatement7 != null) {
                                                                                                }
                                                                                                if (sQLitePreparedStatement6 != null) {
                                                                                                }
                                                                                                if (sQLitePreparedStatement9 != null) {
                                                                                                }
                                                                                                if (sQLitePreparedStatement3 != null) {
                                                                                                }
                                                                                                if (sQLitePreparedStatement2 != null) {
                                                                                                }
                                                                                                if (sQLitePreparedStatement8 != null) {
                                                                                                }
                                                                                                if (sQLitePreparedStatement != null) {
                                                                                                }
                                                                                                if (sQLitePreparedStatement4 != null) {
                                                                                                }
                                                                                            } catch (Throwable th14) {
                                                                                                th = th14;
                                                                                                th = th;
                                                                                                sQLitePreparedStatement10 = sQLitePreparedStatement16;
                                                                                                sQLitePreparedStatement5 = sQLitePreparedStatement11;
                                                                                                sQLitePreparedStatement2 = sQLitePreparedStatement12;
                                                                                                sQLitePreparedStatement3 = sQLitePreparedStatement13;
                                                                                                sQLitePreparedStatement = null;
                                                                                                sQLitePreparedStatement4 = null;
                                                                                                z5 = false;
                                                                                                sQLitePreparedStatement9 = null;
                                                                                                sQLitePreparedStatement8 = null;
                                                                                                if (z5) {
                                                                                                }
                                                                                                if (sQLitePreparedStatement5 != null) {
                                                                                                }
                                                                                                if (sQLitePreparedStatement10 != null) {
                                                                                                }
                                                                                                if (sQLitePreparedStatement7 != null) {
                                                                                                }
                                                                                                if (sQLitePreparedStatement6 != null) {
                                                                                                }
                                                                                                if (sQLitePreparedStatement9 != null) {
                                                                                                }
                                                                                                if (sQLitePreparedStatement3 != null) {
                                                                                                }
                                                                                                if (sQLitePreparedStatement2 != null) {
                                                                                                }
                                                                                                if (sQLitePreparedStatement8 != null) {
                                                                                                }
                                                                                                if (sQLitePreparedStatement != null) {
                                                                                                }
                                                                                                if (sQLitePreparedStatement4 != null) {
                                                                                                }
                                                                                                throw th;
                                                                                            }
                                                                                        } catch (Exception e11) {
                                                                                            e = e11;
                                                                                            th2 = e;
                                                                                            sQLitePreparedStatement5 = sQLitePreparedStatement11;
                                                                                            sQLitePreparedStatement2 = sQLitePreparedStatement12;
                                                                                            sQLitePreparedStatement3 = sQLitePreparedStatement13;
                                                                                            sQLitePreparedStatement = null;
                                                                                            sQLitePreparedStatement4 = null;
                                                                                            z5 = false;
                                                                                            sQLitePreparedStatement9 = null;
                                                                                            sQLitePreparedStatement8 = null;
                                                                                            checkSQLException(th2);
                                                                                            if (z5) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement5 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement10 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement7 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement6 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement9 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement3 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement2 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement8 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement4 != null) {
                                                                                            }
                                                                                        } catch (Throwable th15) {
                                                                                            th = th15;
                                                                                            th = th;
                                                                                            sQLitePreparedStatement5 = sQLitePreparedStatement11;
                                                                                            sQLitePreparedStatement2 = sQLitePreparedStatement12;
                                                                                            sQLitePreparedStatement3 = sQLitePreparedStatement13;
                                                                                            sQLitePreparedStatement = null;
                                                                                            sQLitePreparedStatement4 = null;
                                                                                            z5 = false;
                                                                                            sQLitePreparedStatement9 = null;
                                                                                            sQLitePreparedStatement8 = null;
                                                                                            if (z5) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement5 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement10 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement7 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement6 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement9 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement3 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement2 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement8 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement4 != null) {
                                                                                            }
                                                                                            throw th;
                                                                                        }
                                                                                    } else {
                                                                                        sQLitePreparedStatement16 = sQLitePreparedStatement10;
                                                                                    }
                                                                                    if (MediaDataController.canAddMessageToMedia(tLRPC$Message6)) {
                                                                                        SQLitePreparedStatement executeFast6 = this.database.executeFast("REPLACE INTO media_v4 VALUES(?, ?, ?, ?, ?)");
                                                                                        try {
                                                                                            executeFast6.requery();
                                                                                            executeFast6.bindInteger(1, i64);
                                                                                            executeFast6.bindLong(2, tLRPC$Message6.dialog_id);
                                                                                            executeFast6.bindInteger(3, tLRPC$Message6.date);
                                                                                            executeFast6.bindInteger(4, MediaDataController.getMediaType(tLRPC$Message6));
                                                                                            executeFast6.bindByteBuffer(5, nativeByteBuffer3);
                                                                                            executeFast6.step();
                                                                                            if (topicId2 != 0) {
                                                                                                sQLitePreparedStatement28 = sQLitePreparedStatement30 == null ? this.database.executeFast("REPLACE INTO media_topics VALUES(?, ?, ?, ?, ?, ?)") : sQLitePreparedStatement30;
                                                                                                sQLitePreparedStatement28.requery();
                                                                                                sQLitePreparedStatement28.bindInteger(1, i64);
                                                                                                sQLitePreparedStatement28.bindLong(2, tLRPC$Message6.dialog_id);
                                                                                                sQLitePreparedStatement28.bindInteger(3, topicId2);
                                                                                                sQLitePreparedStatement28.bindInteger(4, tLRPC$Message6.date);
                                                                                                sQLitePreparedStatement28.bindInteger(5, MediaDataController.getMediaType(tLRPC$Message6));
                                                                                                sQLitePreparedStatement28.bindByteBuffer(6, nativeByteBuffer3);
                                                                                                sQLitePreparedStatement28.step();
                                                                                                if (tLRPC$Message6.ttl_period != 0 || tLRPC$Message6.id <= 0) {
                                                                                                    sQLitePreparedStatement2 = sQLitePreparedStatement12;
                                                                                                } else {
                                                                                                    sQLitePreparedStatement2 = sQLitePreparedStatement12 == null ? this.database.executeFast("REPLACE INTO enc_tasks_v4 VALUES(?, ?, ?, ?)") : sQLitePreparedStatement12;
                                                                                                    try {
                                                                                                        sQLitePreparedStatement2.requery();
                                                                                                        sQLitePreparedStatement2.bindInteger(1, i64);
                                                                                                        sQLitePreparedStatement2.bindLong(2, tLRPC$Message6.dialog_id);
                                                                                                        sQLitePreparedStatement2.bindInteger(3, tLRPC$Message6.date + tLRPC$Message6.ttl_period);
                                                                                                        sQLitePreparedStatement2.bindInteger(4, 0);
                                                                                                        sQLitePreparedStatement2.step();
                                                                                                        i3 = Math.min(i3, tLRPC$Message6.date + tLRPC$Message6.ttl_period);
                                                                                                    } catch (Exception e12) {
                                                                                                        e = e12;
                                                                                                        th2 = e;
                                                                                                        sQLitePreparedStatement10 = sQLitePreparedStatement16;
                                                                                                        sQLitePreparedStatement5 = sQLitePreparedStatement11;
                                                                                                        sQLitePreparedStatement3 = sQLitePreparedStatement13;
                                                                                                        sQLitePreparedStatement = null;
                                                                                                        sQLitePreparedStatement4 = null;
                                                                                                        z5 = false;
                                                                                                        sQLitePreparedStatement9 = null;
                                                                                                        sQLitePreparedStatement8 = null;
                                                                                                        checkSQLException(th2);
                                                                                                        if (z5) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement5 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement10 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement7 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement6 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement9 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement3 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement2 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement8 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement4 != null) {
                                                                                                        }
                                                                                                    } catch (Throwable th16) {
                                                                                                        th4 = th16;
                                                                                                        th = th4;
                                                                                                        sQLitePreparedStatement10 = sQLitePreparedStatement16;
                                                                                                        sQLitePreparedStatement5 = sQLitePreparedStatement11;
                                                                                                        sQLitePreparedStatement3 = sQLitePreparedStatement13;
                                                                                                        sQLitePreparedStatement = null;
                                                                                                        sQLitePreparedStatement4 = null;
                                                                                                        z5 = false;
                                                                                                        sQLitePreparedStatement9 = null;
                                                                                                        sQLitePreparedStatement8 = null;
                                                                                                        if (z5) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement5 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement10 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement7 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement6 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement9 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement3 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement2 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement8 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement4 != null) {
                                                                                                        }
                                                                                                        throw th;
                                                                                                    }
                                                                                                }
                                                                                                tLRPC$MessageMedia = tLRPC$Message6.media;
                                                                                                if (tLRPC$MessageMedia instanceof TLRPC$TL_messageMediaPoll) {
                                                                                                    sQLitePreparedStatement3 = sQLitePreparedStatement13 == null ? this.database.executeFast("REPLACE INTO polls_v2 VALUES(?, ?, ?)") : sQLitePreparedStatement13;
                                                                                                    try {
                                                                                                        sQLitePreparedStatement3.requery();
                                                                                                        sQLitePreparedStatement3.bindInteger(1, i64);
                                                                                                        sQLitePreparedStatement3.bindLong(2, tLRPC$Message6.dialog_id);
                                                                                                        sQLitePreparedStatement3.bindLong(3, ((TLRPC$TL_messageMediaPoll) tLRPC$Message6.media).poll.id);
                                                                                                        sQLitePreparedStatement3.step();
                                                                                                        sQLitePreparedStatement15 = sQLitePreparedStatement6;
                                                                                                    } catch (Exception e13) {
                                                                                                        th2 = e13;
                                                                                                        sQLitePreparedStatement10 = sQLitePreparedStatement16;
                                                                                                        sQLitePreparedStatement5 = sQLitePreparedStatement11;
                                                                                                        sQLitePreparedStatement = null;
                                                                                                        sQLitePreparedStatement4 = null;
                                                                                                        z5 = false;
                                                                                                        sQLitePreparedStatement9 = null;
                                                                                                        sQLitePreparedStatement8 = null;
                                                                                                        checkSQLException(th2);
                                                                                                        if (z5) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement5 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement10 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement7 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement6 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement9 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement3 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement2 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement8 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement4 != null) {
                                                                                                        }
                                                                                                    } catch (Throwable th17) {
                                                                                                        th = th17;
                                                                                                        sQLitePreparedStatement10 = sQLitePreparedStatement16;
                                                                                                        sQLitePreparedStatement5 = sQLitePreparedStatement11;
                                                                                                        sQLitePreparedStatement = null;
                                                                                                        sQLitePreparedStatement4 = null;
                                                                                                        z5 = false;
                                                                                                        sQLitePreparedStatement9 = null;
                                                                                                        sQLitePreparedStatement8 = null;
                                                                                                        if (z5) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement5 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement10 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement7 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement6 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement9 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement3 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement2 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement8 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement4 != null) {
                                                                                                        }
                                                                                                        throw th;
                                                                                                    }
                                                                                                } else {
                                                                                                    if (tLRPC$MessageMedia instanceof TLRPC$TL_messageMediaWebPage) {
                                                                                                        try {
                                                                                                            sQLitePreparedStatement6.requery();
                                                                                                            sQLitePreparedStatement15 = sQLitePreparedStatement6;
                                                                                                        } catch (Exception e14) {
                                                                                                            e = e14;
                                                                                                            th2 = e;
                                                                                                            sQLitePreparedStatement10 = sQLitePreparedStatement16;
                                                                                                            sQLitePreparedStatement5 = sQLitePreparedStatement11;
                                                                                                            sQLitePreparedStatement3 = sQLitePreparedStatement13;
                                                                                                            sQLitePreparedStatement = null;
                                                                                                            sQLitePreparedStatement4 = null;
                                                                                                            z5 = false;
                                                                                                            sQLitePreparedStatement9 = null;
                                                                                                            sQLitePreparedStatement8 = null;
                                                                                                            checkSQLException(th2);
                                                                                                            if (z5) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement5 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement10 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement7 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement6 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement9 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement3 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement2 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement8 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement4 != null) {
                                                                                                            }
                                                                                                        } catch (Throwable th18) {
                                                                                                            th4 = th18;
                                                                                                            th = th4;
                                                                                                            sQLitePreparedStatement10 = sQLitePreparedStatement16;
                                                                                                            sQLitePreparedStatement5 = sQLitePreparedStatement11;
                                                                                                            sQLitePreparedStatement3 = sQLitePreparedStatement13;
                                                                                                            sQLitePreparedStatement = null;
                                                                                                            sQLitePreparedStatement4 = null;
                                                                                                            z5 = false;
                                                                                                            sQLitePreparedStatement9 = null;
                                                                                                            sQLitePreparedStatement8 = null;
                                                                                                            if (z5) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement5 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement10 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement7 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement6 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement9 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement3 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement2 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement8 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement4 != null) {
                                                                                                            }
                                                                                                            throw th;
                                                                                                        }
                                                                                                        try {
                                                                                                            sQLitePreparedStatement15.bindLong(1, tLRPC$Message6.media.webpage.id);
                                                                                                            sQLitePreparedStatement15.bindInteger(2, i64);
                                                                                                            sQLitePreparedStatement15.bindLong(3, tLRPC$Message6.dialog_id);
                                                                                                            sQLitePreparedStatement15.step();
                                                                                                        } catch (Exception e15) {
                                                                                                            th2 = e15;
                                                                                                            sQLitePreparedStatement6 = sQLitePreparedStatement15;
                                                                                                            sQLitePreparedStatement10 = sQLitePreparedStatement16;
                                                                                                            sQLitePreparedStatement5 = sQLitePreparedStatement11;
                                                                                                            sQLitePreparedStatement3 = sQLitePreparedStatement13;
                                                                                                            sQLitePreparedStatement = null;
                                                                                                            sQLitePreparedStatement4 = null;
                                                                                                            z5 = false;
                                                                                                            sQLitePreparedStatement9 = null;
                                                                                                            sQLitePreparedStatement8 = null;
                                                                                                            checkSQLException(th2);
                                                                                                            if (z5) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement5 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement10 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement7 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement6 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement9 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement3 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement2 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement8 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement4 != null) {
                                                                                                            }
                                                                                                        } catch (Throwable th19) {
                                                                                                            th = th19;
                                                                                                            sQLitePreparedStatement6 = sQLitePreparedStatement15;
                                                                                                            sQLitePreparedStatement10 = sQLitePreparedStatement16;
                                                                                                            sQLitePreparedStatement5 = sQLitePreparedStatement11;
                                                                                                            sQLitePreparedStatement3 = sQLitePreparedStatement13;
                                                                                                            sQLitePreparedStatement = null;
                                                                                                            sQLitePreparedStatement4 = null;
                                                                                                            z5 = false;
                                                                                                            sQLitePreparedStatement9 = null;
                                                                                                            sQLitePreparedStatement8 = null;
                                                                                                            if (z5) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement5 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement10 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement7 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement6 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement9 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement3 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement2 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement8 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement4 != null) {
                                                                                                            }
                                                                                                            throw th;
                                                                                                        }
                                                                                                    } else {
                                                                                                        sQLitePreparedStatement15 = sQLitePreparedStatement6;
                                                                                                    }
                                                                                                    sQLitePreparedStatement3 = sQLitePreparedStatement13;
                                                                                                }
                                                                                                nativeByteBuffer3.reuse();
                                                                                                if (i != 0) {
                                                                                                    if (tLRPC$Message6.peer_id.channel_id != 0) {
                                                                                                        try {
                                                                                                        } catch (Exception e16) {
                                                                                                            e = e16;
                                                                                                            th2 = e;
                                                                                                            sQLitePreparedStatement6 = sQLitePreparedStatement15;
                                                                                                            sQLitePreparedStatement10 = sQLitePreparedStatement16;
                                                                                                            sQLitePreparedStatement5 = sQLitePreparedStatement11;
                                                                                                            sQLitePreparedStatement = null;
                                                                                                            sQLitePreparedStatement4 = null;
                                                                                                            z5 = false;
                                                                                                            sQLitePreparedStatement9 = null;
                                                                                                            sQLitePreparedStatement8 = null;
                                                                                                            checkSQLException(th2);
                                                                                                            if (z5) {
                                                                                                                sQLiteDatabase2.commitTransaction();
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement5 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement10 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement7 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement6 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement9 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement3 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement2 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement8 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement4 != null) {
                                                                                                            }
                                                                                                        } catch (Throwable th20) {
                                                                                                            th = th20;
                                                                                                            th = th;
                                                                                                            sQLitePreparedStatement6 = sQLitePreparedStatement15;
                                                                                                            sQLitePreparedStatement10 = sQLitePreparedStatement16;
                                                                                                            sQLitePreparedStatement5 = sQLitePreparedStatement11;
                                                                                                            sQLitePreparedStatement = null;
                                                                                                            sQLitePreparedStatement4 = null;
                                                                                                            z5 = false;
                                                                                                            sQLitePreparedStatement9 = null;
                                                                                                            sQLitePreparedStatement8 = null;
                                                                                                            if (z5) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement5 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement10 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement7 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement6 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement9 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement3 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement2 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement8 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement4 != null) {
                                                                                                            }
                                                                                                            throw th;
                                                                                                        }
                                                                                                    }
                                                                                                    if (tLRPC$Message6.date >= getConnectionsManager().getCurrentTime() - 3600 && getDownloadController().canDownloadMedia(tLRPC$Message6) == 1) {
                                                                                                        TLRPC$MessageMedia tLRPC$MessageMedia2 = tLRPC$Message6.media;
                                                                                                        if ((tLRPC$MessageMedia2 instanceof TLRPC$TL_messageMediaPhoto) || (tLRPC$MessageMedia2 instanceof TLRPC$TL_messageMediaDocument) || (tLRPC$MessageMedia2 instanceof TLRPC$TL_messageMediaWebPage)) {
                                                                                                            TLRPC$Document document = MessageObject.getDocument(tLRPC$Message6);
                                                                                                            TLRPC$Photo photo = MessageObject.getPhoto(tLRPC$Message6);
                                                                                                            if (MessageObject.isVoiceMessage(tLRPC$Message6)) {
                                                                                                                j = document.id;
                                                                                                                tLRPC$TL_messageMediaDocument = new TLRPC$TL_messageMediaDocument();
                                                                                                                tLRPC$TL_messageMediaDocument.document = document;
                                                                                                                tLRPC$TL_messageMediaDocument.flags |= 1;
                                                                                                                i19 = 2;
                                                                                                            } else {
                                                                                                                if (!MessageObject.isStickerMessage(tLRPC$Message6) && !MessageObject.isAnimatedStickerMessage(tLRPC$Message6)) {
                                                                                                                    if (!MessageObject.isVideoMessage(tLRPC$Message6) && !MessageObject.isRoundVideoMessage(tLRPC$Message6) && !MessageObject.isGifMessage(tLRPC$Message6)) {
                                                                                                                        if (document != null) {
                                                                                                                            j = document.id;
                                                                                                                            tLRPC$TL_messageMediaDocument = new TLRPC$TL_messageMediaDocument();
                                                                                                                            tLRPC$TL_messageMediaDocument.document = document;
                                                                                                                            tLRPC$TL_messageMediaDocument.flags |= 1;
                                                                                                                            i19 = 8;
                                                                                                                        } else if (photo == null || FileLoader.getClosestPhotoSizeWithSize(photo.sizes, AndroidUtilities.getPhotoSize()) == null) {
                                                                                                                            i19 = 0;
                                                                                                                            tLRPC$TL_messageMediaDocument = null;
                                                                                                                            j = 0;
                                                                                                                            if (tLRPC$TL_messageMediaDocument != null) {
                                                                                                                                int i82 = tLRPC$Message6.media.ttl_seconds;
                                                                                                                                if (i82 != 0) {
                                                                                                                                    tLRPC$TL_messageMediaDocument.ttl_seconds = i82;
                                                                                                                                    tLRPC$TL_messageMediaDocument.flags |= 4;
                                                                                                                                }
                                                                                                                                MessageObject messageObject = new MessageObject(this.currentAccount, tLRPC$Message6, false, false);
                                                                                                                                i18 = i81 | i19;
                                                                                                                                sQLitePreparedStatement7.requery();
                                                                                                                                int i83 = i3;
                                                                                                                                NativeByteBuffer nativeByteBuffer4 = new NativeByteBuffer(tLRPC$TL_messageMediaDocument.getObjectSize());
                                                                                                                                tLRPC$TL_messageMediaDocument.serializeToStream(nativeByteBuffer4);
                                                                                                                                sQLitePreparedStatement14 = sQLitePreparedStatement7;
                                                                                                                                try {
                                                                                                                                    sQLitePreparedStatement14.bindLong(1, j);
                                                                                                                                    sQLitePreparedStatement14.bindInteger(2, i19);
                                                                                                                                    sQLitePreparedStatement14.bindInteger(3, tLRPC$Message6.date);
                                                                                                                                    sQLitePreparedStatement14.bindByteBuffer(4, nativeByteBuffer4);
                                                                                                                                    StringBuilder sb7 = new StringBuilder();
                                                                                                                                    sb7.append("sent_");
                                                                                                                                    TLRPC$Peer tLRPC$Peer = tLRPC$Message6.peer_id;
                                                                                                                                    SQLitePreparedStatement sQLitePreparedStatement31 = sQLitePreparedStatement2;
                                                                                                                                    if (tLRPC$Peer != null) {
                                                                                                                                        try {
                                                                                                                                            j2 = tLRPC$Peer.channel_id;
                                                                                                                                        } catch (Exception e17) {
                                                                                                                                            e = e17;
                                                                                                                                            sQLitePreparedStatement2 = sQLitePreparedStatement31;
                                                                                                                                            th2 = e;
                                                                                                                                            sQLitePreparedStatement6 = sQLitePreparedStatement15;
                                                                                                                                            sQLitePreparedStatement10 = sQLitePreparedStatement16;
                                                                                                                                            sQLitePreparedStatement7 = sQLitePreparedStatement14;
                                                                                                                                            sQLitePreparedStatement5 = sQLitePreparedStatement11;
                                                                                                                                            sQLitePreparedStatement = null;
                                                                                                                                            sQLitePreparedStatement4 = null;
                                                                                                                                            z5 = false;
                                                                                                                                            sQLitePreparedStatement9 = null;
                                                                                                                                            sQLitePreparedStatement8 = null;
                                                                                                                                            checkSQLException(th2);
                                                                                                                                            if (z5) {
                                                                                                                                            }
                                                                                                                                            if (sQLitePreparedStatement5 != null) {
                                                                                                                                            }
                                                                                                                                            if (sQLitePreparedStatement10 != null) {
                                                                                                                                            }
                                                                                                                                            if (sQLitePreparedStatement7 != null) {
                                                                                                                                            }
                                                                                                                                            if (sQLitePreparedStatement6 != null) {
                                                                                                                                            }
                                                                                                                                            if (sQLitePreparedStatement9 != null) {
                                                                                                                                            }
                                                                                                                                            if (sQLitePreparedStatement3 != null) {
                                                                                                                                            }
                                                                                                                                            if (sQLitePreparedStatement2 != null) {
                                                                                                                                            }
                                                                                                                                            if (sQLitePreparedStatement8 != null) {
                                                                                                                                            }
                                                                                                                                            if (sQLitePreparedStatement != null) {
                                                                                                                                            }
                                                                                                                                            if (sQLitePreparedStatement4 != null) {
                                                                                                                                            }
                                                                                                                                        } catch (Throwable th21) {
                                                                                                                                            th = th21;
                                                                                                                                            sQLitePreparedStatement2 = sQLitePreparedStatement31;
                                                                                                                                            th = th;
                                                                                                                                            sQLitePreparedStatement6 = sQLitePreparedStatement15;
                                                                                                                                            sQLitePreparedStatement10 = sQLitePreparedStatement16;
                                                                                                                                            sQLitePreparedStatement7 = sQLitePreparedStatement14;
                                                                                                                                            sQLitePreparedStatement5 = sQLitePreparedStatement11;
                                                                                                                                            sQLitePreparedStatement = null;
                                                                                                                                            sQLitePreparedStatement4 = null;
                                                                                                                                            z5 = false;
                                                                                                                                            sQLitePreparedStatement9 = null;
                                                                                                                                            sQLitePreparedStatement8 = null;
                                                                                                                                            if (z5) {
                                                                                                                                            }
                                                                                                                                            if (sQLitePreparedStatement5 != null) {
                                                                                                                                            }
                                                                                                                                            if (sQLitePreparedStatement10 != null) {
                                                                                                                                            }
                                                                                                                                            if (sQLitePreparedStatement7 != null) {
                                                                                                                                            }
                                                                                                                                            if (sQLitePreparedStatement6 != null) {
                                                                                                                                            }
                                                                                                                                            if (sQLitePreparedStatement9 != null) {
                                                                                                                                            }
                                                                                                                                            if (sQLitePreparedStatement3 != null) {
                                                                                                                                            }
                                                                                                                                            if (sQLitePreparedStatement2 != null) {
                                                                                                                                            }
                                                                                                                                            if (sQLitePreparedStatement8 != null) {
                                                                                                                                            }
                                                                                                                                            if (sQLitePreparedStatement != null) {
                                                                                                                                            }
                                                                                                                                            if (sQLitePreparedStatement4 != null) {
                                                                                                                                            }
                                                                                                                                            throw th;
                                                                                                                                        }
                                                                                                                                    } else {
                                                                                                                                        j2 = 0;
                                                                                                                                    }
                                                                                                                                    sb7.append(j2);
                                                                                                                                    str11 = str14;
                                                                                                                                    sb7.append(str11);
                                                                                                                                    sb7.append(tLRPC$Message6.id);
                                                                                                                                    sb7.append(str11);
                                                                                                                                    sb7.append(DialogObject.getPeerDialogId(tLRPC$Message6.peer_id));
                                                                                                                                    sb7.append(str11);
                                                                                                                                    sb7.append(messageObject.type);
                                                                                                                                    sb7.append(str11);
                                                                                                                                    sb7.append(messageObject.getSize());
                                                                                                                                    sQLitePreparedStatement14.bindString(5, sb7.toString());
                                                                                                                                    sQLitePreparedStatement14.step();
                                                                                                                                    nativeByteBuffer4.reuse();
                                                                                                                                    sQLitePreparedStatement2 = sQLitePreparedStatement31;
                                                                                                                                    arrayList2 = arrayList5;
                                                                                                                                    i3 = i83;
                                                                                                                                } catch (Exception e18) {
                                                                                                                                    e = e18;
                                                                                                                                } catch (Throwable th22) {
                                                                                                                                    th = th22;
                                                                                                                                }
                                                                                                                            }
                                                                                                                        } else {
                                                                                                                            j = photo.id;
                                                                                                                            TLRPC$MessageMedia tLRPC$TL_messageMediaPhoto = new TLRPC$TL_messageMediaPhoto();
                                                                                                                            tLRPC$TL_messageMediaPhoto.photo = photo;
                                                                                                                            int i84 = tLRPC$TL_messageMediaPhoto.flags | 1;
                                                                                                                            tLRPC$TL_messageMediaPhoto.flags = i84;
                                                                                                                            if (tLRPC$Message6.media instanceof TLRPC$TL_messageMediaWebPage) {
                                                                                                                                tLRPC$TL_messageMediaPhoto.flags = i84 | Integer.MIN_VALUE;
                                                                                                                            }
                                                                                                                            tLRPC$TL_messageMediaDocument = tLRPC$TL_messageMediaPhoto;
                                                                                                                            i19 = 1;
                                                                                                                            if (tLRPC$TL_messageMediaDocument != null) {
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                    j = document.id;
                                                                                                                    tLRPC$TL_messageMediaDocument = new TLRPC$TL_messageMediaDocument();
                                                                                                                    tLRPC$TL_messageMediaDocument.document = document;
                                                                                                                    tLRPC$TL_messageMediaDocument.flags |= 1;
                                                                                                                    i19 = 4;
                                                                                                                    if (tLRPC$TL_messageMediaDocument != null) {
                                                                                                                    }
                                                                                                                }
                                                                                                                j = document.id;
                                                                                                                tLRPC$TL_messageMediaDocument = new TLRPC$TL_messageMediaDocument();
                                                                                                                tLRPC$TL_messageMediaDocument.document = document;
                                                                                                                tLRPC$TL_messageMediaDocument.flags |= 1;
                                                                                                                i19 = 1;
                                                                                                                if (tLRPC$TL_messageMediaDocument != null) {
                                                                                                                }
                                                                                                            }
                                                                                                            if (tLRPC$TL_messageMediaDocument != null) {
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                                str11 = str14;
                                                                                                sQLitePreparedStatement14 = sQLitePreparedStatement7;
                                                                                                sQLitePreparedStatement2 = sQLitePreparedStatement2;
                                                                                                arrayList2 = arrayList5;
                                                                                                i3 = i3;
                                                                                                i18 = i81;
                                                                                            }
                                                                                        } catch (Exception e19) {
                                                                                            th2 = e19;
                                                                                            sQLitePreparedStatement9 = executeFast6;
                                                                                            sQLitePreparedStatement10 = sQLitePreparedStatement16;
                                                                                            sQLitePreparedStatement5 = sQLitePreparedStatement11;
                                                                                            sQLitePreparedStatement2 = sQLitePreparedStatement12;
                                                                                            sQLitePreparedStatement3 = sQLitePreparedStatement13;
                                                                                            sQLitePreparedStatement = null;
                                                                                            sQLitePreparedStatement4 = null;
                                                                                            z5 = false;
                                                                                            sQLitePreparedStatement8 = null;
                                                                                            checkSQLException(th2);
                                                                                            if (z5) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement5 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement10 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement7 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement6 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement9 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement3 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement2 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement8 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement4 != null) {
                                                                                            }
                                                                                        } catch (Throwable th23) {
                                                                                            th = th23;
                                                                                            sQLitePreparedStatement9 = executeFast6;
                                                                                            sQLitePreparedStatement10 = sQLitePreparedStatement16;
                                                                                            sQLitePreparedStatement5 = sQLitePreparedStatement11;
                                                                                            sQLitePreparedStatement2 = sQLitePreparedStatement12;
                                                                                            sQLitePreparedStatement3 = sQLitePreparedStatement13;
                                                                                            sQLitePreparedStatement = null;
                                                                                            sQLitePreparedStatement4 = null;
                                                                                            z5 = false;
                                                                                            sQLitePreparedStatement8 = null;
                                                                                            if (z5) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement5 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement10 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement7 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement6 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement9 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement3 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement2 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement8 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement4 != null) {
                                                                                            }
                                                                                            throw th;
                                                                                        }
                                                                                    }
                                                                                    sQLitePreparedStatement28 = sQLitePreparedStatement30;
                                                                                    if (tLRPC$Message6.ttl_period != 0) {
                                                                                    }
                                                                                    sQLitePreparedStatement2 = sQLitePreparedStatement12;
                                                                                    tLRPC$MessageMedia = tLRPC$Message6.media;
                                                                                    if (tLRPC$MessageMedia instanceof TLRPC$TL_messageMediaPoll) {
                                                                                    }
                                                                                    nativeByteBuffer3.reuse();
                                                                                    if (i != 0) {
                                                                                    }
                                                                                    str11 = str14;
                                                                                    sQLitePreparedStatement14 = sQLitePreparedStatement7;
                                                                                    sQLitePreparedStatement2 = sQLitePreparedStatement2;
                                                                                    arrayList2 = arrayList5;
                                                                                    i3 = i3;
                                                                                    i18 = i81;
                                                                                }
                                                                            } catch (Exception e20) {
                                                                                e = e20;
                                                                                th2 = e;
                                                                                sQLitePreparedStatement5 = sQLitePreparedStatement11;
                                                                                sQLitePreparedStatement = null;
                                                                                sQLitePreparedStatement4 = null;
                                                                                z5 = false;
                                                                                sQLitePreparedStatement9 = null;
                                                                                sQLitePreparedStatement8 = null;
                                                                                checkSQLException(th2);
                                                                                if (z5) {
                                                                                }
                                                                                if (sQLitePreparedStatement5 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement10 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement7 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement6 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement9 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement3 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement2 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement8 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement4 != null) {
                                                                                }
                                                                            } catch (Throwable th24) {
                                                                                th = th24;
                                                                                th = th;
                                                                                sQLitePreparedStatement5 = sQLitePreparedStatement11;
                                                                                sQLitePreparedStatement = null;
                                                                                sQLitePreparedStatement4 = null;
                                                                                z5 = false;
                                                                                sQLitePreparedStatement9 = null;
                                                                                sQLitePreparedStatement8 = null;
                                                                                if (z5) {
                                                                                }
                                                                                if (sQLitePreparedStatement5 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement10 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement7 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement6 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement9 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement3 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement2 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement8 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement4 != null) {
                                                                                }
                                                                                throw th;
                                                                            }
                                                                        } else {
                                                                            longSparseIntArray6 = longSparseIntArray22;
                                                                        }
                                                                        nativeByteBuffer3.reuse();
                                                                        if (i != 0) {
                                                                        }
                                                                        str11 = str14;
                                                                        sQLitePreparedStatement14 = sQLitePreparedStatement7;
                                                                        sQLitePreparedStatement2 = sQLitePreparedStatement2;
                                                                        arrayList2 = arrayList5;
                                                                        i3 = i3;
                                                                        i18 = i81;
                                                                    } catch (Exception e21) {
                                                                        e = e21;
                                                                    } catch (Throwable th25) {
                                                                        th = th25;
                                                                    }
                                                                    tLRPC$MessageMedia = tLRPC$Message6.media;
                                                                    if (tLRPC$MessageMedia instanceof TLRPC$TL_messageMediaPoll) {
                                                                    }
                                                                } catch (Exception e22) {
                                                                    e = e22;
                                                                } catch (Throwable th26) {
                                                                    th4 = th26;
                                                                }
                                                                if (MediaDataController.canAddMessageToMedia(tLRPC$Message6)) {
                                                                }
                                                                sQLitePreparedStatement28 = sQLitePreparedStatement30;
                                                                if (tLRPC$Message6.ttl_period != 0) {
                                                                }
                                                                sQLitePreparedStatement2 = sQLitePreparedStatement12;
                                                            } catch (Exception e23) {
                                                                e = e23;
                                                                th2 = e;
                                                                sQLitePreparedStatement10 = sQLitePreparedStatement16;
                                                                sQLitePreparedStatement5 = sQLitePreparedStatement11;
                                                                sQLitePreparedStatement2 = sQLitePreparedStatement12;
                                                                sQLitePreparedStatement3 = sQLitePreparedStatement13;
                                                                sQLitePreparedStatement = null;
                                                                sQLitePreparedStatement4 = null;
                                                                z5 = false;
                                                                sQLitePreparedStatement9 = null;
                                                                sQLitePreparedStatement8 = null;
                                                                checkSQLException(th2);
                                                                if (z5) {
                                                                }
                                                                if (sQLitePreparedStatement5 != null) {
                                                                }
                                                                if (sQLitePreparedStatement10 != null) {
                                                                }
                                                                if (sQLitePreparedStatement7 != null) {
                                                                }
                                                                if (sQLitePreparedStatement6 != null) {
                                                                }
                                                                if (sQLitePreparedStatement9 != null) {
                                                                }
                                                                if (sQLitePreparedStatement3 != null) {
                                                                }
                                                                if (sQLitePreparedStatement2 != null) {
                                                                }
                                                                if (sQLitePreparedStatement8 != null) {
                                                                }
                                                                if (sQLitePreparedStatement != null) {
                                                                }
                                                                if (sQLitePreparedStatement4 != null) {
                                                                }
                                                            } catch (Throwable th27) {
                                                                th = th27;
                                                                th = th;
                                                                sQLitePreparedStatement10 = sQLitePreparedStatement16;
                                                                sQLitePreparedStatement5 = sQLitePreparedStatement11;
                                                                sQLitePreparedStatement2 = sQLitePreparedStatement12;
                                                                sQLitePreparedStatement3 = sQLitePreparedStatement13;
                                                                sQLitePreparedStatement = null;
                                                                sQLitePreparedStatement4 = null;
                                                                z5 = false;
                                                                sQLitePreparedStatement9 = null;
                                                                sQLitePreparedStatement8 = null;
                                                                if (z5) {
                                                                }
                                                                if (sQLitePreparedStatement5 != null) {
                                                                }
                                                                if (sQLitePreparedStatement10 != null) {
                                                                }
                                                                if (sQLitePreparedStatement7 != null) {
                                                                }
                                                                if (sQLitePreparedStatement6 != null) {
                                                                }
                                                                if (sQLitePreparedStatement9 != null) {
                                                                }
                                                                if (sQLitePreparedStatement3 != null) {
                                                                }
                                                                if (sQLitePreparedStatement2 != null) {
                                                                }
                                                                if (sQLitePreparedStatement8 != null) {
                                                                }
                                                                if (sQLitePreparedStatement != null) {
                                                                }
                                                                if (sQLitePreparedStatement4 != null) {
                                                                }
                                                                throw th;
                                                            }
                                                            if (tLRPC$Message6.random_id == 0) {
                                                            }
                                                        } catch (Exception e24) {
                                                            e = e24;
                                                        } catch (Throwable th28) {
                                                            th = th28;
                                                        }
                                                        z8 = true;
                                                        if (tLRPC$MessageAction instanceof TLRPC$TL_messageActionTopicCreate) {
                                                            if (arrayList2 == null) {
                                                            }
                                                            arrayList2.add(tLRPC$Message6);
                                                        }
                                                        if (tLRPC$Message6.action instanceof TLRPC$TL_messageActionTopicEdit) {
                                                        }
                                                        if (z8) {
                                                        }
                                                        i17 = 0;
                                                        while (i17 < 2) {
                                                        }
                                                        int i812 = i62;
                                                        sQLitePreparedStatement12 = sQLitePreparedStatement2;
                                                        sQLitePreparedStatement13 = sQLitePreparedStatement3;
                                                        hashMap14 = hashMap13;
                                                        SQLitePreparedStatement sQLitePreparedStatement302 = sQLitePreparedStatement28;
                                                    }
                                                    i63 = i16 + 1;
                                                    sQLitePreparedStatement6 = sQLitePreparedStatement15;
                                                    sQLitePreparedStatement10 = sQLitePreparedStatement16;
                                                    str14 = str11;
                                                    sQLitePreparedStatement7 = sQLitePreparedStatement14;
                                                    i62 = i18;
                                                    longSparseArray21 = longSparseArray7;
                                                    sparseArray = sparseArray4;
                                                    hashMap43 = hashMap12;
                                                    longSparseIntArray22 = longSparseIntArray6;
                                                    hashMap26 = hashMap14;
                                                    str21 = str10;
                                                } catch (Exception e25) {
                                                    e = e25;
                                                } catch (Throwable th29) {
                                                    th = th29;
                                                }
                                            } catch (Exception e26) {
                                                e = e26;
                                            } catch (Throwable th30) {
                                                th = th30;
                                            }
                                        }
                                        i4 = i62;
                                        longSparseIntArray2 = longSparseIntArray22;
                                        sQLitePreparedStatement12 = sQLitePreparedStatement2;
                                        sQLitePreparedStatement13 = sQLitePreparedStatement3;
                                        sparseArray3 = sparseArray;
                                        str7 = str21;
                                        hashMap6 = hashMap43;
                                        hashMap7 = hashMap26;
                                        longSparseArray5 = longSparseArray21;
                                        sQLitePreparedStatement14 = sQLitePreparedStatement7;
                                        sQLitePreparedStatement15 = sQLitePreparedStatement6;
                                        sQLitePreparedStatement16 = sQLitePreparedStatement10;
                                    } catch (Exception e27) {
                                        th2 = e27;
                                        sQLitePreparedStatement10 = executeFast4;
                                        sQLitePreparedStatement5 = sQLitePreparedStatement11;
                                        sQLitePreparedStatement = null;
                                        sQLitePreparedStatement2 = null;
                                        sQLitePreparedStatement3 = null;
                                        sQLitePreparedStatement4 = null;
                                        z5 = false;
                                        sQLitePreparedStatement9 = null;
                                        sQLitePreparedStatement8 = null;
                                        sQLitePreparedStatement6 = null;
                                        checkSQLException(th2);
                                        if (z5) {
                                        }
                                        if (sQLitePreparedStatement5 != null) {
                                        }
                                        if (sQLitePreparedStatement10 != null) {
                                        }
                                        if (sQLitePreparedStatement7 != null) {
                                        }
                                        if (sQLitePreparedStatement6 != null) {
                                        }
                                        if (sQLitePreparedStatement9 != null) {
                                        }
                                        if (sQLitePreparedStatement3 != null) {
                                        }
                                        if (sQLitePreparedStatement2 != null) {
                                        }
                                        if (sQLitePreparedStatement8 != null) {
                                        }
                                        if (sQLitePreparedStatement != null) {
                                        }
                                        if (sQLitePreparedStatement4 != null) {
                                        }
                                    } catch (Throwable th31) {
                                        th = th31;
                                        sQLitePreparedStatement10 = executeFast4;
                                        sQLitePreparedStatement5 = sQLitePreparedStatement11;
                                        sQLitePreparedStatement = null;
                                        sQLitePreparedStatement2 = null;
                                        sQLitePreparedStatement3 = null;
                                        sQLitePreparedStatement4 = null;
                                        z5 = false;
                                        sQLitePreparedStatement9 = null;
                                        sQLitePreparedStatement8 = null;
                                        sQLitePreparedStatement6 = null;
                                        if (z5) {
                                        }
                                        if (sQLitePreparedStatement5 != null) {
                                        }
                                        if (sQLitePreparedStatement10 != null) {
                                        }
                                        if (sQLitePreparedStatement7 != null) {
                                        }
                                        if (sQLitePreparedStatement6 != null) {
                                        }
                                        if (sQLitePreparedStatement9 != null) {
                                        }
                                        if (sQLitePreparedStatement3 != null) {
                                        }
                                        if (sQLitePreparedStatement2 != null) {
                                        }
                                        if (sQLitePreparedStatement8 != null) {
                                        }
                                        if (sQLitePreparedStatement != null) {
                                        }
                                        if (sQLitePreparedStatement4 != null) {
                                        }
                                        throw th;
                                    }
                                } catch (Exception e28) {
                                    th2 = e28;
                                    sQLitePreparedStatement10 = executeFast4;
                                    sQLitePreparedStatement7 = executeFast5;
                                } catch (Throwable th32) {
                                    th = th32;
                                    sQLitePreparedStatement10 = executeFast4;
                                    sQLitePreparedStatement7 = executeFast5;
                                }
                                try {
                                    sQLitePreparedStatement11.dispose();
                                    executeFast3.dispose();
                                    if (sQLitePreparedStatement12 != null) {
                                        try {
                                            sQLitePreparedStatement12.dispose();
                                            sQLitePreparedStatement4 = null;
                                            try {
                                                getMessagesController().didAddedNewTask(i3, 0L, null);
                                                sQLitePreparedStatement2 = null;
                                            } catch (Exception e29) {
                                                e = e29;
                                                th2 = e;
                                                sQLitePreparedStatement6 = sQLitePreparedStatement15;
                                                sQLitePreparedStatement10 = sQLitePreparedStatement16;
                                                sQLitePreparedStatement = sQLitePreparedStatement4;
                                                sQLitePreparedStatement9 = sQLitePreparedStatement;
                                                sQLitePreparedStatement8 = sQLitePreparedStatement9;
                                                sQLitePreparedStatement7 = sQLitePreparedStatement14;
                                                sQLitePreparedStatement5 = sQLitePreparedStatement11;
                                                sQLitePreparedStatement2 = sQLitePreparedStatement12;
                                                sQLitePreparedStatement3 = sQLitePreparedStatement13;
                                                z5 = false;
                                                checkSQLException(th2);
                                                if (z5) {
                                                }
                                                if (sQLitePreparedStatement5 != null) {
                                                }
                                                if (sQLitePreparedStatement10 != null) {
                                                }
                                                if (sQLitePreparedStatement7 != null) {
                                                }
                                                if (sQLitePreparedStatement6 != null) {
                                                }
                                                if (sQLitePreparedStatement9 != null) {
                                                }
                                                if (sQLitePreparedStatement3 != null) {
                                                }
                                                if (sQLitePreparedStatement2 != null) {
                                                }
                                                if (sQLitePreparedStatement8 != null) {
                                                }
                                                if (sQLitePreparedStatement != null) {
                                                }
                                                if (sQLitePreparedStatement4 != null) {
                                                }
                                            } catch (Throwable th33) {
                                                th = th33;
                                                th = th;
                                                sQLitePreparedStatement6 = sQLitePreparedStatement15;
                                                sQLitePreparedStatement10 = sQLitePreparedStatement16;
                                                sQLitePreparedStatement = sQLitePreparedStatement4;
                                                sQLitePreparedStatement9 = sQLitePreparedStatement;
                                                sQLitePreparedStatement8 = sQLitePreparedStatement9;
                                                sQLitePreparedStatement7 = sQLitePreparedStatement14;
                                                sQLitePreparedStatement5 = sQLitePreparedStatement11;
                                                sQLitePreparedStatement2 = sQLitePreparedStatement12;
                                                sQLitePreparedStatement3 = sQLitePreparedStatement13;
                                                z5 = false;
                                                if (z5) {
                                                }
                                                if (sQLitePreparedStatement5 != null) {
                                                }
                                                if (sQLitePreparedStatement10 != null) {
                                                }
                                                if (sQLitePreparedStatement7 != null) {
                                                }
                                                if (sQLitePreparedStatement6 != null) {
                                                }
                                                if (sQLitePreparedStatement9 != null) {
                                                }
                                                if (sQLitePreparedStatement3 != null) {
                                                }
                                                if (sQLitePreparedStatement2 != null) {
                                                }
                                                if (sQLitePreparedStatement8 != null) {
                                                }
                                                if (sQLitePreparedStatement != null) {
                                                }
                                                if (sQLitePreparedStatement4 != null) {
                                                }
                                                throw th;
                                            }
                                        } catch (Exception e30) {
                                            e = e30;
                                            sQLitePreparedStatement4 = null;
                                        } catch (Throwable th34) {
                                            th = th34;
                                            sQLitePreparedStatement4 = null;
                                        }
                                    } else {
                                        sQLitePreparedStatement4 = null;
                                        sQLitePreparedStatement2 = sQLitePreparedStatement12;
                                    }
                                    if (sQLitePreparedStatement13 != null) {
                                        try {
                                            sQLitePreparedStatement13.dispose();
                                            sQLitePreparedStatement3 = sQLitePreparedStatement4;
                                        } catch (Exception e31) {
                                            th2 = e31;
                                            sQLitePreparedStatement6 = sQLitePreparedStatement15;
                                            sQLitePreparedStatement10 = sQLitePreparedStatement16;
                                            sQLitePreparedStatement = sQLitePreparedStatement4;
                                            sQLitePreparedStatement9 = sQLitePreparedStatement;
                                            sQLitePreparedStatement8 = sQLitePreparedStatement9;
                                            sQLitePreparedStatement7 = sQLitePreparedStatement14;
                                            sQLitePreparedStatement5 = sQLitePreparedStatement11;
                                            sQLitePreparedStatement3 = sQLitePreparedStatement13;
                                            z5 = false;
                                            checkSQLException(th2);
                                            if (z5) {
                                            }
                                            if (sQLitePreparedStatement5 != null) {
                                            }
                                            if (sQLitePreparedStatement10 != null) {
                                            }
                                            if (sQLitePreparedStatement7 != null) {
                                            }
                                            if (sQLitePreparedStatement6 != null) {
                                            }
                                            if (sQLitePreparedStatement9 != null) {
                                            }
                                            if (sQLitePreparedStatement3 != null) {
                                            }
                                            if (sQLitePreparedStatement2 != null) {
                                            }
                                            if (sQLitePreparedStatement8 != null) {
                                            }
                                            if (sQLitePreparedStatement != null) {
                                            }
                                            if (sQLitePreparedStatement4 != null) {
                                            }
                                        } catch (Throwable th35) {
                                            th = th35;
                                            sQLitePreparedStatement6 = sQLitePreparedStatement15;
                                            sQLitePreparedStatement10 = sQLitePreparedStatement16;
                                            sQLitePreparedStatement = sQLitePreparedStatement4;
                                            sQLitePreparedStatement9 = sQLitePreparedStatement;
                                            sQLitePreparedStatement8 = sQLitePreparedStatement9;
                                            sQLitePreparedStatement7 = sQLitePreparedStatement14;
                                            sQLitePreparedStatement5 = sQLitePreparedStatement11;
                                            sQLitePreparedStatement3 = sQLitePreparedStatement13;
                                            z5 = false;
                                            if (z5) {
                                            }
                                            if (sQLitePreparedStatement5 != null) {
                                            }
                                            if (sQLitePreparedStatement10 != null) {
                                            }
                                            if (sQLitePreparedStatement7 != null) {
                                            }
                                            if (sQLitePreparedStatement6 != null) {
                                            }
                                            if (sQLitePreparedStatement9 != null) {
                                            }
                                            if (sQLitePreparedStatement3 != null) {
                                            }
                                            if (sQLitePreparedStatement2 != null) {
                                            }
                                            if (sQLitePreparedStatement8 != null) {
                                            }
                                            if (sQLitePreparedStatement != null) {
                                            }
                                            if (sQLitePreparedStatement4 != null) {
                                            }
                                            throw th;
                                        }
                                    } else {
                                        sQLitePreparedStatement3 = sQLitePreparedStatement13;
                                    }
                                    try {
                                        sQLitePreparedStatement16.dispose();
                                        try {
                                            sQLitePreparedStatement14.dispose();
                                        } catch (Exception e32) {
                                            th2 = e32;
                                            sQLitePreparedStatement6 = sQLitePreparedStatement15;
                                            sQLitePreparedStatement7 = sQLitePreparedStatement14;
                                            sQLitePreparedStatement5 = sQLitePreparedStatement11;
                                            sQLitePreparedStatement = null;
                                            sQLitePreparedStatement4 = null;
                                            z5 = false;
                                            sQLitePreparedStatement9 = null;
                                            sQLitePreparedStatement8 = null;
                                        } catch (Throwable th36) {
                                            th = th36;
                                            sQLitePreparedStatement6 = sQLitePreparedStatement15;
                                            sQLitePreparedStatement7 = sQLitePreparedStatement14;
                                            sQLitePreparedStatement5 = sQLitePreparedStatement11;
                                            sQLitePreparedStatement = null;
                                            sQLitePreparedStatement4 = null;
                                            z5 = false;
                                            sQLitePreparedStatement9 = null;
                                            sQLitePreparedStatement8 = null;
                                        }
                                        try {
                                            sQLitePreparedStatement15.dispose();
                                            if (arrayList2 != null) {
                                                for (int i85 = 0; i85 < arrayList2.size(); i85++) {
                                                    try {
                                                        TLRPC$Message tLRPC$Message9 = (TLRPC$Message) arrayList2.get(i85);
                                                        createOrEditTopic(tLRPC$Message9.dialog_id, tLRPC$Message9);
                                                    } catch (Exception e33) {
                                                        th2 = e33;
                                                        sQLitePreparedStatement = sQLitePreparedStatement4;
                                                        sQLitePreparedStatement9 = sQLitePreparedStatement;
                                                        sQLitePreparedStatement8 = sQLitePreparedStatement9;
                                                        sQLitePreparedStatement7 = sQLitePreparedStatement8;
                                                        sQLitePreparedStatement6 = sQLitePreparedStatement7;
                                                        sQLitePreparedStatement10 = sQLitePreparedStatement6;
                                                        sQLitePreparedStatement5 = sQLitePreparedStatement11;
                                                        z5 = false;
                                                        checkSQLException(th2);
                                                        if (z5) {
                                                        }
                                                        if (sQLitePreparedStatement5 != null) {
                                                        }
                                                        if (sQLitePreparedStatement10 != null) {
                                                        }
                                                        if (sQLitePreparedStatement7 != null) {
                                                        }
                                                        if (sQLitePreparedStatement6 != null) {
                                                        }
                                                        if (sQLitePreparedStatement9 != null) {
                                                        }
                                                        if (sQLitePreparedStatement3 != null) {
                                                        }
                                                        if (sQLitePreparedStatement2 != null) {
                                                        }
                                                        if (sQLitePreparedStatement8 != null) {
                                                        }
                                                        if (sQLitePreparedStatement != null) {
                                                        }
                                                        if (sQLitePreparedStatement4 != null) {
                                                        }
                                                    } catch (Throwable th37) {
                                                        th = th37;
                                                        sQLitePreparedStatement = sQLitePreparedStatement4;
                                                        sQLitePreparedStatement9 = sQLitePreparedStatement;
                                                        sQLitePreparedStatement8 = sQLitePreparedStatement9;
                                                        sQLitePreparedStatement7 = sQLitePreparedStatement8;
                                                        sQLitePreparedStatement6 = sQLitePreparedStatement7;
                                                        sQLitePreparedStatement10 = sQLitePreparedStatement6;
                                                        sQLitePreparedStatement5 = sQLitePreparedStatement11;
                                                        z5 = false;
                                                        if (z5) {
                                                        }
                                                        if (sQLitePreparedStatement5 != null) {
                                                        }
                                                        if (sQLitePreparedStatement10 != null) {
                                                        }
                                                        if (sQLitePreparedStatement7 != null) {
                                                        }
                                                        if (sQLitePreparedStatement6 != null) {
                                                        }
                                                        if (sQLitePreparedStatement9 != null) {
                                                        }
                                                        if (sQLitePreparedStatement3 != null) {
                                                        }
                                                        if (sQLitePreparedStatement2 != null) {
                                                        }
                                                        if (sQLitePreparedStatement8 != null) {
                                                        }
                                                        if (sQLitePreparedStatement != null) {
                                                        }
                                                        if (sQLitePreparedStatement4 != null) {
                                                        }
                                                        throw th;
                                                    }
                                                }
                                            }
                                            try {
                                                SQLitePreparedStatement executeFast7 = this.database.executeFast("REPLACE INTO dialogs VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
                                                try {
                                                    sQLitePreparedStatement = this.database.executeFast("UPDATE dialogs SET date = ?, unread_count = ?, last_mid = ?, last_mid_group = ?, unread_count_i = ? WHERE did = ?");
                                                    try {
                                                        SQLitePreparedStatement executeFast8 = this.database.executeFast("UPDATE topics SET unread_count = ?, top_message = ?, unread_mentions = ?, total_messages_count = ? WHERE did = ? AND topic_id = ?");
                                                        try {
                                                            ArrayList<Long> arrayList19 = new ArrayList<>();
                                                            int i86 = 0;
                                                            while (i86 < longSparseArray5.size()) {
                                                                LongSparseArray longSparseArray43 = longSparseArray5;
                                                                try {
                                                                    long keyAt5 = longSparseArray43.keyAt(i86);
                                                                    if (keyAt5 == 0) {
                                                                        hashMap11 = hashMap7;
                                                                        sQLitePreparedStatement24 = executeFast8;
                                                                        sQLitePreparedStatement25 = sQLitePreparedStatement2;
                                                                        sQLitePreparedStatement26 = sQLitePreparedStatement3;
                                                                        i12 = i86;
                                                                        longSparseArray6 = longSparseArray43;
                                                                        longSparseIntArray4 = longSparseIntArray16;
                                                                        longSparseIntArray5 = longSparseIntArray15;
                                                                        arrayList4 = arrayList19;
                                                                    } else {
                                                                        TLRPC$Message tLRPC$Message10 = (TLRPC$Message) longSparseArray43.valueAt(i86);
                                                                        i12 = i86;
                                                                        long channelId = MessageObject.getChannelId(tLRPC$Message10);
                                                                        SQLiteDatabase sQLiteDatabase6 = this.database;
                                                                        sQLitePreparedStatement25 = sQLitePreparedStatement2;
                                                                        try {
                                                                            StringBuilder sb8 = new StringBuilder();
                                                                            sQLitePreparedStatement26 = sQLitePreparedStatement3;
                                                                            try {
                                                                                sb8.append("SELECT date, unread_count, last_mid, unread_count_i FROM dialogs WHERE did = ");
                                                                                sb8.append(keyAt5);
                                                                                longSparseArray6 = longSparseArray43;
                                                                                SQLiteCursor queryFinalized8 = sQLiteDatabase6.queryFinalized(sb8.toString(), new Object[0]);
                                                                                boolean next = queryFinalized8.next();
                                                                                if (next) {
                                                                                    try {
                                                                                        int intValue17 = queryFinalized8.intValue(0);
                                                                                        int max2 = Math.max(0, queryFinalized8.intValue(1));
                                                                                        i13 = intValue17;
                                                                                        intValue5 = queryFinalized8.intValue(2);
                                                                                        max = Math.max(0, queryFinalized8.intValue(3));
                                                                                        i14 = max2;
                                                                                    } catch (Exception e34) {
                                                                                        e = e34;
                                                                                        sQLitePreparedStatement2 = sQLitePreparedStatement25;
                                                                                        sQLitePreparedStatement3 = sQLitePreparedStatement26;
                                                                                        sQLitePreparedStatement8 = executeFast7;
                                                                                        sQLitePreparedStatement4 = executeFast8;
                                                                                        sQLitePreparedStatement5 = sQLitePreparedStatement11;
                                                                                        z5 = false;
                                                                                        sQLitePreparedStatement9 = null;
                                                                                        sQLitePreparedStatement7 = null;
                                                                                        sQLitePreparedStatement6 = null;
                                                                                        sQLitePreparedStatement10 = null;
                                                                                        th2 = e;
                                                                                        checkSQLException(th2);
                                                                                        if (z5) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement5 != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement10 != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement7 != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement6 != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement9 != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement3 != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement2 != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement8 != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement4 != null) {
                                                                                        }
                                                                                    } catch (Throwable th38) {
                                                                                        th3 = th38;
                                                                                        sQLitePreparedStatement2 = sQLitePreparedStatement25;
                                                                                        sQLitePreparedStatement3 = sQLitePreparedStatement26;
                                                                                        sQLitePreparedStatement8 = executeFast7;
                                                                                        sQLitePreparedStatement4 = executeFast8;
                                                                                        sQLitePreparedStatement5 = sQLitePreparedStatement11;
                                                                                        z5 = false;
                                                                                        sQLitePreparedStatement9 = null;
                                                                                        sQLitePreparedStatement7 = null;
                                                                                        sQLitePreparedStatement6 = null;
                                                                                        sQLitePreparedStatement10 = null;
                                                                                        th = th3;
                                                                                        if (z5) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement5 != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement10 != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement7 != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement6 != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement9 != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement3 != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement2 != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement8 != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement4 != null) {
                                                                                        }
                                                                                        throw th;
                                                                                    }
                                                                                } else {
                                                                                    if (channelId != 0) {
                                                                                        getMessagesController().checkChatInviter(channelId, true);
                                                                                    }
                                                                                    i14 = 0;
                                                                                    max = 0;
                                                                                    intValue5 = 0;
                                                                                    i13 = 0;
                                                                                }
                                                                                queryFinalized8.dispose();
                                                                                sQLitePreparedStatement24 = executeFast8;
                                                                                LongSparseIntArray longSparseIntArray25 = longSparseIntArray2;
                                                                                try {
                                                                                    int i87 = longSparseIntArray25.get(keyAt5, -1);
                                                                                    hashMap11 = hashMap7;
                                                                                    LongSparseIntArray longSparseIntArray26 = longSparseIntArray;
                                                                                    int i88 = longSparseIntArray26.get(keyAt5, -1);
                                                                                    if (i88 == -1) {
                                                                                        i88 = 0;
                                                                                    } else {
                                                                                        longSparseIntArray26.put(keyAt5, i88 + i14);
                                                                                    }
                                                                                    if (i87 == -1) {
                                                                                        i87 = 0;
                                                                                    } else {
                                                                                        longSparseIntArray25.put(keyAt5, i87 + max);
                                                                                    }
                                                                                    if (tLRPC$Message10 != null) {
                                                                                        intValue5 = tLRPC$Message10.id;
                                                                                    }
                                                                                    if (tLRPC$Message10 == null || (i15 = tLRPC$Message10.local_id) == 0) {
                                                                                        i15 = intValue5;
                                                                                    }
                                                                                    if (isForum(keyAt5)) {
                                                                                        longSparseIntArray = longSparseIntArray26;
                                                                                        longSparseIntArray4 = longSparseIntArray16;
                                                                                    } else {
                                                                                        if (i14 != 0 || i88 == 0) {
                                                                                            longSparseIntArray4 = longSparseIntArray16;
                                                                                        } else {
                                                                                            longSparseIntArray4 = longSparseIntArray16;
                                                                                            longSparseIntArray4.put(keyAt5, i88);
                                                                                        }
                                                                                        if (max != 0 || i87 == 0) {
                                                                                            longSparseIntArray = longSparseIntArray26;
                                                                                        } else {
                                                                                            longSparseIntArray = longSparseIntArray26;
                                                                                            longSparseIntArray5 = longSparseIntArray15;
                                                                                            longSparseIntArray5.put(keyAt5, i87);
                                                                                            longSparseIntArray2 = longSparseIntArray25;
                                                                                            arrayList19.add(Long.valueOf(keyAt5));
                                                                                            if (!next) {
                                                                                                sQLitePreparedStatement.requery();
                                                                                                sQLitePreparedStatement.bindInteger(1, (tLRPC$Message10 == null || (z2 && i13 != 0)) ? i13 : tLRPC$Message10.date);
                                                                                                sQLitePreparedStatement.bindInteger(2, i14 + i88);
                                                                                                sQLitePreparedStatement.bindInteger(3, i15);
                                                                                                if (tLRPC$Message10 != null && (tLRPC$Message10.flags & 131072) != 0) {
                                                                                                    sQLitePreparedStatement.bindLong(4, tLRPC$Message10.grouped_id);
                                                                                                } else {
                                                                                                    sQLitePreparedStatement.bindNull(4);
                                                                                                }
                                                                                                sQLitePreparedStatement.bindInteger(5, max + i87);
                                                                                                sQLitePreparedStatement.bindLong(6, keyAt5);
                                                                                                sQLitePreparedStatement.step();
                                                                                                arrayList4 = arrayList19;
                                                                                            } else {
                                                                                                executeFast7.requery();
                                                                                                executeFast7.bindLong(1, keyAt5);
                                                                                                executeFast7.bindInteger(2, (tLRPC$Message10 == null || (z2 && i13 != 0)) ? i13 : tLRPC$Message10.date);
                                                                                                executeFast7.bindInteger(3, i14 + i88);
                                                                                                executeFast7.bindInteger(4, i15);
                                                                                                executeFast7.bindInteger(5, 0);
                                                                                                executeFast7.bindInteger(6, 0);
                                                                                                arrayList4 = arrayList19;
                                                                                                executeFast7.bindLong(7, 0L);
                                                                                                executeFast7.bindInteger(8, max + i87);
                                                                                                executeFast7.bindInteger(9, channelId != 0 ? 1 : 0);
                                                                                                executeFast7.bindInteger(10, 0);
                                                                                                executeFast7.bindInteger(11, 0);
                                                                                                executeFast7.bindInteger(12, 0);
                                                                                                executeFast7.bindInteger(13, 0);
                                                                                                executeFast7.bindNull(14);
                                                                                                executeFast7.bindInteger(15, 0);
                                                                                                if (tLRPC$Message10 != null && (tLRPC$Message10.flags & 131072) != 0) {
                                                                                                    executeFast7.bindLong(16, tLRPC$Message10.grouped_id);
                                                                                                } else {
                                                                                                    executeFast7.bindNull(16);
                                                                                                }
                                                                                                executeFast7.bindInteger(17, 0);
                                                                                                executeFast7.step();
                                                                                                this.unknownDialogsIds.put(keyAt5, Boolean.TRUE);
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    longSparseIntArray5 = longSparseIntArray15;
                                                                                    longSparseIntArray2 = longSparseIntArray25;
                                                                                    arrayList19.add(Long.valueOf(keyAt5));
                                                                                    if (!next) {
                                                                                    }
                                                                                } catch (Exception e35) {
                                                                                    e = e35;
                                                                                    sQLitePreparedStatement2 = sQLitePreparedStatement25;
                                                                                    sQLitePreparedStatement3 = sQLitePreparedStatement26;
                                                                                    sQLitePreparedStatement4 = sQLitePreparedStatement24;
                                                                                    sQLitePreparedStatement8 = executeFast7;
                                                                                    sQLitePreparedStatement5 = sQLitePreparedStatement11;
                                                                                    z5 = false;
                                                                                    sQLitePreparedStatement9 = null;
                                                                                    sQLitePreparedStatement7 = null;
                                                                                    sQLitePreparedStatement6 = null;
                                                                                    sQLitePreparedStatement10 = null;
                                                                                    th2 = e;
                                                                                    checkSQLException(th2);
                                                                                    if (z5 && (sQLiteDatabase2 = this.database) != null) {
                                                                                        sQLiteDatabase2.commitTransaction();
                                                                                    }
                                                                                    if (sQLitePreparedStatement5 != null) {
                                                                                        sQLitePreparedStatement5.dispose();
                                                                                    }
                                                                                    if (sQLitePreparedStatement10 != null) {
                                                                                        sQLitePreparedStatement10.dispose();
                                                                                    }
                                                                                    if (sQLitePreparedStatement7 != null) {
                                                                                        sQLitePreparedStatement7.dispose();
                                                                                    }
                                                                                    if (sQLitePreparedStatement6 != null) {
                                                                                        sQLitePreparedStatement6.dispose();
                                                                                    }
                                                                                    if (sQLitePreparedStatement9 != null) {
                                                                                        sQLitePreparedStatement9.dispose();
                                                                                    }
                                                                                    if (sQLitePreparedStatement3 != null) {
                                                                                        sQLitePreparedStatement3.dispose();
                                                                                    }
                                                                                    if (sQLitePreparedStatement2 != null) {
                                                                                        sQLitePreparedStatement2.dispose();
                                                                                    }
                                                                                    if (sQLitePreparedStatement8 != null) {
                                                                                        sQLitePreparedStatement8.dispose();
                                                                                    }
                                                                                    if (sQLitePreparedStatement != null) {
                                                                                        sQLitePreparedStatement.dispose();
                                                                                    }
                                                                                    if (sQLitePreparedStatement4 != null) {
                                                                                        sQLitePreparedStatement4.dispose();
                                                                                        return;
                                                                                    }
                                                                                    return;
                                                                                } catch (Throwable th39) {
                                                                                    th3 = th39;
                                                                                    sQLitePreparedStatement2 = sQLitePreparedStatement25;
                                                                                    sQLitePreparedStatement3 = sQLitePreparedStatement26;
                                                                                    sQLitePreparedStatement4 = sQLitePreparedStatement24;
                                                                                    sQLitePreparedStatement8 = executeFast7;
                                                                                    sQLitePreparedStatement5 = sQLitePreparedStatement11;
                                                                                    z5 = false;
                                                                                    sQLitePreparedStatement9 = null;
                                                                                    sQLitePreparedStatement7 = null;
                                                                                    sQLitePreparedStatement6 = null;
                                                                                    sQLitePreparedStatement10 = null;
                                                                                    th = th3;
                                                                                    if (z5) {
                                                                                        sQLiteDatabase.commitTransaction();
                                                                                    }
                                                                                    if (sQLitePreparedStatement5 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement10 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement7 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement6 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement9 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement3 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement2 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement8 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement4 != null) {
                                                                                    }
                                                                                    throw th;
                                                                                }
                                                                            } catch (Exception e36) {
                                                                                e = e36;
                                                                                sQLitePreparedStatement24 = executeFast8;
                                                                            } catch (Throwable th40) {
                                                                                th3 = th40;
                                                                                sQLitePreparedStatement24 = executeFast8;
                                                                            }
                                                                        } catch (Exception e37) {
                                                                            e = e37;
                                                                            sQLitePreparedStatement24 = executeFast8;
                                                                            sQLitePreparedStatement2 = sQLitePreparedStatement25;
                                                                        } catch (Throwable th41) {
                                                                            th3 = th41;
                                                                            sQLitePreparedStatement24 = executeFast8;
                                                                            sQLitePreparedStatement2 = sQLitePreparedStatement25;
                                                                        }
                                                                    }
                                                                    sQLitePreparedStatement2 = sQLitePreparedStatement25;
                                                                    sQLitePreparedStatement3 = sQLitePreparedStatement26;
                                                                    arrayList19 = arrayList4;
                                                                    longSparseIntArray15 = longSparseIntArray5;
                                                                    longSparseIntArray16 = longSparseIntArray4;
                                                                    longSparseArray5 = longSparseArray6;
                                                                    hashMap7 = hashMap11;
                                                                    i86 = i12 + 1;
                                                                    executeFast8 = sQLitePreparedStatement24;
                                                                } catch (Exception e38) {
                                                                    e = e38;
                                                                    sQLitePreparedStatement24 = executeFast8;
                                                                } catch (Throwable th42) {
                                                                    th3 = th42;
                                                                    sQLitePreparedStatement24 = executeFast8;
                                                                }
                                                            }
                                                            HashMap hashMap44 = hashMap7;
                                                            SQLitePreparedStatement sQLitePreparedStatement32 = executeFast8;
                                                            SQLitePreparedStatement sQLitePreparedStatement33 = sQLitePreparedStatement2;
                                                            sQLitePreparedStatement17 = sQLitePreparedStatement3;
                                                            LongSparseIntArray longSparseIntArray27 = longSparseIntArray16;
                                                            LongSparseIntArray longSparseIntArray28 = longSparseIntArray15;
                                                            ArrayList<Long> arrayList20 = arrayList19;
                                                            try {
                                                                sQLitePreparedStatement.dispose();
                                                                try {
                                                                    executeFast7.dispose();
                                                                    try {
                                                                        ArrayList<TopicsController.TopicUpdate> arrayList21 = new ArrayList<>();
                                                                        Iterator it4 = hashMap44.keySet().iterator();
                                                                        while (it4.hasNext()) {
                                                                            try {
                                                                                TopicKey topicKey3 = (TopicKey) it4.next();
                                                                                if (topicKey3.dialogId != 0 && topicKey3.topicId != 0) {
                                                                                    HashMap hashMap45 = hashMap44;
                                                                                    TLRPC$Message tLRPC$Message11 = (TLRPC$Message) hashMap45.get(topicKey3);
                                                                                    SQLiteDatabase sQLiteDatabase7 = this.database;
                                                                                    StringBuilder sb9 = new StringBuilder();
                                                                                    sb9.append("SELECT unread_count, top_message, unread_mentions, total_messages_count FROM topics WHERE did = ");
                                                                                    sb9.append(topicKey3.dialogId);
                                                                                    String str22 = str6;
                                                                                    sb9.append(str22);
                                                                                    sb9.append(topicKey3.topicId);
                                                                                    SQLiteCursor queryFinalized9 = sQLiteDatabase7.queryFinalized(sb9.toString(), new Object[0]);
                                                                                    if (queryFinalized9.next()) {
                                                                                        try {
                                                                                            intValue = queryFinalized9.intValue(0);
                                                                                            intValue2 = queryFinalized9.intValue(1);
                                                                                            intValue3 = queryFinalized9.intValue(2);
                                                                                            intValue4 = queryFinalized9.intValue(3);
                                                                                            z7 = true;
                                                                                        } catch (Exception e39) {
                                                                                            sQLitePreparedStatement2 = sQLitePreparedStatement33;
                                                                                            sQLitePreparedStatement3 = sQLitePreparedStatement17;
                                                                                            sQLitePreparedStatement4 = sQLitePreparedStatement32;
                                                                                            th2 = e39;
                                                                                            sQLitePreparedStatement5 = sQLitePreparedStatement11;
                                                                                            sQLitePreparedStatement = null;
                                                                                            z5 = false;
                                                                                            sQLitePreparedStatement9 = null;
                                                                                            sQLitePreparedStatement8 = null;
                                                                                            sQLitePreparedStatement7 = null;
                                                                                            sQLitePreparedStatement6 = null;
                                                                                            sQLitePreparedStatement10 = null;
                                                                                            checkSQLException(th2);
                                                                                            if (z5) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement5 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement10 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement7 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement6 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement9 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement3 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement2 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement8 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement4 != null) {
                                                                                            }
                                                                                        } catch (Throwable th43) {
                                                                                            sQLitePreparedStatement2 = sQLitePreparedStatement33;
                                                                                            sQLitePreparedStatement3 = sQLitePreparedStatement17;
                                                                                            sQLitePreparedStatement4 = sQLitePreparedStatement32;
                                                                                            th = th43;
                                                                                            sQLitePreparedStatement5 = sQLitePreparedStatement11;
                                                                                            sQLitePreparedStatement = null;
                                                                                            z5 = false;
                                                                                            sQLitePreparedStatement9 = null;
                                                                                            sQLitePreparedStatement8 = null;
                                                                                            sQLitePreparedStatement7 = null;
                                                                                            sQLitePreparedStatement6 = null;
                                                                                            sQLitePreparedStatement10 = null;
                                                                                            if (z5) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement5 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement10 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement7 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement6 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement9 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement3 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement2 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement8 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement4 != null) {
                                                                                            }
                                                                                            throw th;
                                                                                        }
                                                                                    } else {
                                                                                        z7 = false;
                                                                                        intValue3 = 0;
                                                                                        intValue = 0;
                                                                                        intValue2 = 0;
                                                                                        intValue4 = 0;
                                                                                    }
                                                                                    queryFinalized9.dispose();
                                                                                    if (!z7) {
                                                                                        TopicsController.TopicUpdate topicUpdate = new TopicsController.TopicUpdate();
                                                                                        topicUpdate.dialogId = topicKey3.dialogId;
                                                                                        topicUpdate.topicId = topicKey3.topicId;
                                                                                        topicUpdate.reloadTopic = true;
                                                                                        arrayList21.add(topicUpdate);
                                                                                        StringBuilder sb10 = new StringBuilder();
                                                                                        sb10.append("unknown topic need reload ");
                                                                                        sb10.append(topicKey3.dialogId);
                                                                                        String str23 = str7;
                                                                                        sb10.append(str23);
                                                                                        sb10.append(topicKey3.topicId);
                                                                                        FileLog.d(sb10.toString());
                                                                                        hashMap44 = hashMap45;
                                                                                        str7 = str23;
                                                                                        str6 = str22;
                                                                                    } else {
                                                                                        HashMap hashMap46 = hashMap4;
                                                                                        String str24 = str7;
                                                                                        Integer num6 = (Integer) hashMap46.get(topicKey3);
                                                                                        HashMap hashMap47 = hashMap6;
                                                                                        Integer num7 = (Integer) hashMap47.get(topicKey3);
                                                                                        it = it4;
                                                                                        HashMap hashMap48 = hashMap5;
                                                                                        Integer num8 = (Integer) hashMap48.get(topicKey3);
                                                                                        if (tLRPC$Message11 != null) {
                                                                                            intValue2 = tLRPC$Message11.id;
                                                                                        }
                                                                                        if (tLRPC$Message11 != null) {
                                                                                            hashMap10 = hashMap48;
                                                                                            int i89 = tLRPC$Message11.local_id;
                                                                                            if (i89 != 0) {
                                                                                                intValue2 = i89;
                                                                                            }
                                                                                        } else {
                                                                                            hashMap10 = hashMap48;
                                                                                        }
                                                                                        int intValue18 = num6 != null ? num6.intValue() : 0;
                                                                                        int intValue19 = num7 != null ? num7.intValue() : 0;
                                                                                        int intValue20 = num8 != null ? num8.intValue() : 0;
                                                                                        int i90 = intValue18 + intValue;
                                                                                        int i91 = intValue3 + intValue19;
                                                                                        if (intValue4 == 0) {
                                                                                            hashMap9 = hashMap45;
                                                                                            i11 = 0;
                                                                                        } else {
                                                                                            int i92 = intValue4 + intValue20;
                                                                                            hashMap9 = hashMap45;
                                                                                            i11 = i92;
                                                                                        }
                                                                                        if (!BuildVars.DEBUG_PRIVATE_VERSION || i91 <= 0) {
                                                                                            tLRPC$Message = tLRPC$Message11;
                                                                                            str9 = str24;
                                                                                            hashMap6 = hashMap47;
                                                                                            str6 = str22;
                                                                                        } else {
                                                                                            hashMap6 = hashMap47;
                                                                                            StringBuilder sb11 = new StringBuilder();
                                                                                            str6 = str22;
                                                                                            sb11.append("(putMessagesInternal) new unread mentions ");
                                                                                            sb11.append(i91);
                                                                                            sb11.append(" for dialog_id=");
                                                                                            tLRPC$Message = tLRPC$Message11;
                                                                                            str9 = str24;
                                                                                            sb11.append(topicKey3.dialogId);
                                                                                            sb11.append(" topic_id=");
                                                                                            sb11.append(topicKey3.topicId);
                                                                                            FileLog.d(sb11.toString());
                                                                                        }
                                                                                        sQLitePreparedStatement32.requery();
                                                                                        sQLitePreparedStatement20 = sQLitePreparedStatement32;
                                                                                        try {
                                                                                            sQLitePreparedStatement20.bindInteger(1, i90);
                                                                                            sQLitePreparedStatement20.bindInteger(2, intValue2);
                                                                                            sQLitePreparedStatement20.bindInteger(3, i91);
                                                                                            sQLitePreparedStatement20.bindInteger(4, i11);
                                                                                            hashMap8 = hashMap46;
                                                                                            int i93 = intValue2;
                                                                                            sQLitePreparedStatement20.bindLong(5, topicKey3.dialogId);
                                                                                            sQLitePreparedStatement20.bindInteger(6, topicKey3.topicId);
                                                                                            sQLitePreparedStatement20.step();
                                                                                            if (isForum(topicKey3.dialogId)) {
                                                                                                if (intValue == 0 && i90 != 0) {
                                                                                                    longSparseIntArray27.put(topicKey3.dialogId, 1);
                                                                                                }
                                                                                                if (intValue3 == 0 && i91 != 0) {
                                                                                                    longSparseIntArray28.put(topicKey3.dialogId, i91);
                                                                                                }
                                                                                            }
                                                                                            StringBuilder sb12 = new StringBuilder();
                                                                                            sb12.append("update topic ");
                                                                                            sb12.append(topicKey3.dialogId);
                                                                                            str8 = str9;
                                                                                            sb12.append(str8);
                                                                                            sb12.append(topicKey3.topicId);
                                                                                            sb12.append(str8);
                                                                                            sb12.append(i90);
                                                                                            sb12.append(str8);
                                                                                            sb12.append(i91);
                                                                                            FileLog.d(sb12.toString());
                                                                                            if (tLRPC$Message != null) {
                                                                                                TopicsController.TopicUpdate topicUpdate2 = new TopicsController.TopicUpdate();
                                                                                                topicUpdate2.dialogId = topicKey3.dialogId;
                                                                                                topicUpdate2.topicId = topicKey3.topicId;
                                                                                                topicUpdate2.topMessage = tLRPC$Message;
                                                                                                topicUpdate2.unreadMentions = i91;
                                                                                                topicUpdate2.topMessageId = i93;
                                                                                                topicUpdate2.unreadCount = i90;
                                                                                                topicUpdate2.totalMessagesCount = i11;
                                                                                                arrayList21.add(topicUpdate2);
                                                                                            }
                                                                                            it4 = it;
                                                                                            sQLitePreparedStatement32 = sQLitePreparedStatement20;
                                                                                            hashMap4 = hashMap8;
                                                                                            str7 = str8;
                                                                                            hashMap5 = hashMap10;
                                                                                            hashMap44 = hashMap9;
                                                                                        } catch (Exception e40) {
                                                                                            e = e40;
                                                                                            sQLitePreparedStatement2 = sQLitePreparedStatement33;
                                                                                            th2 = e;
                                                                                            sQLitePreparedStatement4 = sQLitePreparedStatement20;
                                                                                            sQLitePreparedStatement5 = sQLitePreparedStatement11;
                                                                                            sQLitePreparedStatement = null;
                                                                                            z5 = false;
                                                                                            sQLitePreparedStatement9 = null;
                                                                                            sQLitePreparedStatement8 = null;
                                                                                            sQLitePreparedStatement7 = null;
                                                                                            sQLitePreparedStatement6 = null;
                                                                                            sQLitePreparedStatement10 = null;
                                                                                            sQLitePreparedStatement3 = sQLitePreparedStatement17;
                                                                                            checkSQLException(th2);
                                                                                            if (z5) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement5 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement10 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement7 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement6 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement9 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement3 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement2 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement8 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement4 != null) {
                                                                                            }
                                                                                        } catch (Throwable th44) {
                                                                                            th = th44;
                                                                                            sQLitePreparedStatement2 = sQLitePreparedStatement33;
                                                                                            th = th;
                                                                                            sQLitePreparedStatement4 = sQLitePreparedStatement20;
                                                                                            sQLitePreparedStatement5 = sQLitePreparedStatement11;
                                                                                            sQLitePreparedStatement = null;
                                                                                            z5 = false;
                                                                                            sQLitePreparedStatement9 = null;
                                                                                            sQLitePreparedStatement8 = null;
                                                                                            sQLitePreparedStatement7 = null;
                                                                                            sQLitePreparedStatement6 = null;
                                                                                            sQLitePreparedStatement10 = null;
                                                                                            sQLitePreparedStatement3 = sQLitePreparedStatement17;
                                                                                            if (z5) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement5 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement10 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement7 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement6 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement9 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement3 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement2 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement8 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement4 != null) {
                                                                                            }
                                                                                            throw th;
                                                                                        }
                                                                                    }
                                                                                }
                                                                                sQLitePreparedStatement20 = sQLitePreparedStatement32;
                                                                                it = it4;
                                                                                hashMap8 = hashMap4;
                                                                                hashMap9 = hashMap44;
                                                                                hashMap10 = hashMap5;
                                                                                str8 = str7;
                                                                                it4 = it;
                                                                                sQLitePreparedStatement32 = sQLitePreparedStatement20;
                                                                                hashMap4 = hashMap8;
                                                                                str7 = str8;
                                                                                hashMap5 = hashMap10;
                                                                                hashMap44 = hashMap9;
                                                                            } catch (Exception e41) {
                                                                                e = e41;
                                                                                sQLitePreparedStatement20 = sQLitePreparedStatement32;
                                                                            } catch (Throwable th45) {
                                                                                th = th45;
                                                                                sQLitePreparedStatement20 = sQLitePreparedStatement32;
                                                                            }
                                                                        }
                                                                        sQLitePreparedStatement20 = sQLitePreparedStatement32;
                                                                        String str25 = str7;
                                                                        try {
                                                                            sQLitePreparedStatement20.dispose();
                                                                            if (sparseArray3 != null) {
                                                                                try {
                                                                                    SQLitePreparedStatement executeFast9 = this.database.executeFast("REPLACE INTO media_counts_v2 VALUES(?, ?, ?, ?)");
                                                                                    try {
                                                                                        int size6 = sparseArray3.size();
                                                                                        for (int i94 = 0; i94 < size6; i94++) {
                                                                                            SparseArray sparseArray10 = sparseArray3;
                                                                                            int keyAt6 = sparseArray10.keyAt(i94);
                                                                                            LongSparseIntArray longSparseIntArray29 = (LongSparseIntArray) sparseArray10.valueAt(i94);
                                                                                            int size7 = longSparseIntArray29.size();
                                                                                            int i95 = 0;
                                                                                            while (i95 < size7) {
                                                                                                int i96 = keyAt6;
                                                                                                long keyAt7 = longSparseIntArray29.keyAt(i95);
                                                                                                int i97 = size6;
                                                                                                SparseArray sparseArray11 = sparseArray10;
                                                                                                ArrayList<TopicsController.TopicUpdate> arrayList22 = arrayList21;
                                                                                                int i98 = size7;
                                                                                                LongSparseIntArray longSparseIntArray30 = longSparseIntArray28;
                                                                                                SQLiteCursor queryFinalized10 = this.database.queryFinalized(String.format(Locale.US, "SELECT count, old FROM media_counts_v2 WHERE uid = %d AND type = %d LIMIT 1", Long.valueOf(keyAt7), Integer.valueOf(i96)), new Object[0]);
                                                                                                if (queryFinalized10.next()) {
                                                                                                    i5 = queryFinalized10.intValue(0);
                                                                                                    i6 = queryFinalized10.intValue(1);
                                                                                                } else {
                                                                                                    i5 = -1;
                                                                                                    i6 = 0;
                                                                                                }
                                                                                                queryFinalized10.dispose();
                                                                                                if (i5 != -1) {
                                                                                                    executeFast9.requery();
                                                                                                    int valueAt = i5 + longSparseIntArray29.valueAt(i95);
                                                                                                    executeFast9.bindLong(1, keyAt7);
                                                                                                    i7 = i96;
                                                                                                    executeFast9.bindInteger(2, i7);
                                                                                                    executeFast9.bindInteger(3, Math.max(0, valueAt));
                                                                                                    executeFast9.bindInteger(4, i6);
                                                                                                    i8 = i95;
                                                                                                    executeFast9.step();
                                                                                                } else {
                                                                                                    i7 = i96;
                                                                                                    i8 = i95;
                                                                                                }
                                                                                                size6 = i97;
                                                                                                keyAt6 = i7;
                                                                                                i95 = i8 + 1;
                                                                                                size7 = i98;
                                                                                                arrayList21 = arrayList22;
                                                                                                longSparseIntArray28 = longSparseIntArray30;
                                                                                                sparseArray10 = sparseArray11;
                                                                                            }
                                                                                            sparseArray3 = sparseArray10;
                                                                                        }
                                                                                        arrayList3 = arrayList21;
                                                                                        longSparseIntArray3 = longSparseIntArray28;
                                                                                        executeFast9.dispose();
                                                                                    } catch (Exception e42) {
                                                                                        sQLitePreparedStatement2 = sQLitePreparedStatement33;
                                                                                        sQLitePreparedStatement3 = sQLitePreparedStatement17;
                                                                                        th2 = e42;
                                                                                        sQLitePreparedStatement10 = executeFast9;
                                                                                        sQLitePreparedStatement5 = sQLitePreparedStatement11;
                                                                                        sQLitePreparedStatement = null;
                                                                                        sQLitePreparedStatement4 = null;
                                                                                        z5 = false;
                                                                                        sQLitePreparedStatement9 = null;
                                                                                        sQLitePreparedStatement8 = null;
                                                                                        sQLitePreparedStatement7 = null;
                                                                                        sQLitePreparedStatement6 = null;
                                                                                        checkSQLException(th2);
                                                                                        if (z5) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement5 != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement10 != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement7 != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement6 != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement9 != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement3 != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement2 != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement8 != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement4 != null) {
                                                                                        }
                                                                                    } catch (Throwable th46) {
                                                                                        sQLitePreparedStatement2 = sQLitePreparedStatement33;
                                                                                        sQLitePreparedStatement3 = sQLitePreparedStatement17;
                                                                                        th = th46;
                                                                                        sQLitePreparedStatement10 = executeFast9;
                                                                                        sQLitePreparedStatement5 = sQLitePreparedStatement11;
                                                                                        sQLitePreparedStatement = null;
                                                                                        sQLitePreparedStatement4 = null;
                                                                                        z5 = false;
                                                                                        sQLitePreparedStatement9 = null;
                                                                                        sQLitePreparedStatement8 = null;
                                                                                        sQLitePreparedStatement7 = null;
                                                                                        sQLitePreparedStatement6 = null;
                                                                                        if (z5) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement5 != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement10 != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement7 != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement6 != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement9 != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement3 != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement2 != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement8 != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement4 != null) {
                                                                                        }
                                                                                        throw th;
                                                                                    }
                                                                                } catch (Exception e43) {
                                                                                    e = e43;
                                                                                    sQLitePreparedStatement2 = sQLitePreparedStatement33;
                                                                                    sQLitePreparedStatement3 = sQLitePreparedStatement17;
                                                                                    th2 = e;
                                                                                    sQLitePreparedStatement5 = sQLitePreparedStatement11;
                                                                                    sQLitePreparedStatement = null;
                                                                                    sQLitePreparedStatement4 = null;
                                                                                    z5 = false;
                                                                                    sQLitePreparedStatement9 = null;
                                                                                    sQLitePreparedStatement8 = null;
                                                                                    sQLitePreparedStatement7 = null;
                                                                                    sQLitePreparedStatement6 = null;
                                                                                    sQLitePreparedStatement10 = null;
                                                                                    checkSQLException(th2);
                                                                                    if (z5) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement5 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement10 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement7 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement6 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement9 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement3 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement2 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement8 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement4 != null) {
                                                                                    }
                                                                                } catch (Throwable th47) {
                                                                                    th = th47;
                                                                                    sQLitePreparedStatement2 = sQLitePreparedStatement33;
                                                                                    sQLitePreparedStatement3 = sQLitePreparedStatement17;
                                                                                    th = th;
                                                                                    sQLitePreparedStatement5 = sQLitePreparedStatement11;
                                                                                    sQLitePreparedStatement = null;
                                                                                    sQLitePreparedStatement4 = null;
                                                                                    z5 = false;
                                                                                    sQLitePreparedStatement9 = null;
                                                                                    sQLitePreparedStatement8 = null;
                                                                                    sQLitePreparedStatement7 = null;
                                                                                    sQLitePreparedStatement6 = null;
                                                                                    sQLitePreparedStatement10 = null;
                                                                                    if (z5) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement5 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement10 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement7 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement6 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement9 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement3 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement2 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement8 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement4 != null) {
                                                                                    }
                                                                                    throw th;
                                                                                }
                                                                            } else {
                                                                                arrayList3 = arrayList21;
                                                                                longSparseIntArray3 = longSparseIntArray28;
                                                                            }
                                                                            try {
                                                                                SQLitePreparedStatement executeFast10 = this.database.executeFast("REPLACE INTO media_counts_topics VALUES(?, ?, ?, ?, ?)");
                                                                                try {
                                                                                    int size8 = sparseArray2.size();
                                                                                    int i99 = 0;
                                                                                    while (i99 < size8) {
                                                                                        SparseArray sparseArray12 = sparseArray2;
                                                                                        try {
                                                                                            int keyAt8 = sparseArray12.keyAt(i99);
                                                                                            HashMap hashMap49 = (HashMap) sparseArray12.valueAt(i99);
                                                                                            for (TopicKey topicKey4 : hashMap49.keySet()) {
                                                                                                int i100 = size8;
                                                                                                LongSparseIntArray longSparseIntArray31 = longSparseIntArray27;
                                                                                                SQLiteCursor queryFinalized11 = this.database.queryFinalized(String.format(Locale.US, "SELECT count, old FROM media_counts_topics WHERE uid = %d AND topic_id = %d AND type = %d LIMIT 1", Long.valueOf(topicKey4.dialogId), Integer.valueOf(topicKey4.topicId), Integer.valueOf(keyAt8)), new Object[0]);
                                                                                                if (queryFinalized11.next()) {
                                                                                                    i10 = queryFinalized11.intValue(0);
                                                                                                    i9 = queryFinalized11.intValue(1);
                                                                                                } else {
                                                                                                    i9 = 0;
                                                                                                    i10 = -1;
                                                                                                }
                                                                                                queryFinalized11.dispose();
                                                                                                if (i10 != -1) {
                                                                                                    executeFast10.requery();
                                                                                                    i10 += ((Integer) hashMap49.get(topicKey4)).intValue();
                                                                                                    executeFast10.bindLong(1, topicKey4.dialogId);
                                                                                                    executeFast10.bindInteger(2, topicKey4.topicId);
                                                                                                    executeFast10.bindInteger(3, keyAt8);
                                                                                                    executeFast10.bindInteger(4, Math.max(0, i10));
                                                                                                    executeFast10.bindInteger(5, i9);
                                                                                                    executeFast10.step();
                                                                                                }
                                                                                                if (BuildVars.DEBUG_PRIVATE_VERSION) {
                                                                                                    FileLog.d("update" + topicKey4.dialogId + topicKey4.topicId + str25 + keyAt8 + str25 + i10);
                                                                                                }
                                                                                                size8 = i100;
                                                                                                longSparseIntArray27 = longSparseIntArray31;
                                                                                            }
                                                                                            i99++;
                                                                                            sparseArray2 = sparseArray12;
                                                                                        } catch (Exception e44) {
                                                                                            e = e44;
                                                                                            sQLitePreparedStatement2 = sQLitePreparedStatement33;
                                                                                            sQLitePreparedStatement3 = sQLitePreparedStatement17;
                                                                                            sQLitePreparedStatement10 = executeFast10;
                                                                                            sQLitePreparedStatement5 = sQLitePreparedStatement11;
                                                                                            sQLitePreparedStatement = null;
                                                                                            sQLitePreparedStatement4 = null;
                                                                                            z5 = false;
                                                                                            sQLitePreparedStatement9 = null;
                                                                                            sQLitePreparedStatement8 = null;
                                                                                            sQLitePreparedStatement7 = null;
                                                                                            sQLitePreparedStatement6 = null;
                                                                                            th2 = e;
                                                                                            checkSQLException(th2);
                                                                                            if (z5) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement5 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement10 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement7 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement6 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement9 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement3 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement2 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement8 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement4 != null) {
                                                                                            }
                                                                                        } catch (Throwable th48) {
                                                                                            th3 = th48;
                                                                                            sQLitePreparedStatement2 = sQLitePreparedStatement33;
                                                                                            sQLitePreparedStatement3 = sQLitePreparedStatement17;
                                                                                            sQLitePreparedStatement10 = executeFast10;
                                                                                            sQLitePreparedStatement5 = sQLitePreparedStatement11;
                                                                                            sQLitePreparedStatement = null;
                                                                                            sQLitePreparedStatement4 = null;
                                                                                            z5 = false;
                                                                                            sQLitePreparedStatement9 = null;
                                                                                            sQLitePreparedStatement8 = null;
                                                                                            sQLitePreparedStatement7 = null;
                                                                                            sQLitePreparedStatement6 = null;
                                                                                            th = th3;
                                                                                            if (z5) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement5 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement10 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement7 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement6 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement9 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement3 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement2 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement8 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement4 != null) {
                                                                                            }
                                                                                            throw th;
                                                                                        }
                                                                                    }
                                                                                    LongSparseIntArray longSparseIntArray32 = longSparseIntArray27;
                                                                                    executeFast10.dispose();
                                                                                    if (z) {
                                                                                        this.database.commitTransaction();
                                                                                    }
                                                                                    updateFiltersReadCounter(longSparseIntArray32, longSparseIntArray3, false);
                                                                                    ArrayList<TopicsController.TopicUpdate> arrayList23 = arrayList3;
                                                                                    loadGroupedMessagesForTopicUpdates(arrayList23);
                                                                                    getMessagesController().processDialogsUpdateRead(longSparseIntArray, longSparseIntArray2);
                                                                                    getMessagesController().getTopicsController().processUpdate(arrayList23);
                                                                                    if (i4 != 0) {
                                                                                        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda28
                                                                                            @Override // java.lang.Runnable
                                                                                            public final void run() {
                                                                                                MessagesStorage.this.lambda$putMessagesInternal$170(i4);
                                                                                            }
                                                                                        });
                                                                                    }
                                                                                    updateWidgets(arrayList20);
                                                                                    sQLitePreparedStatement21 = sQLitePreparedStatement33;
                                                                                    sQLitePreparedStatement22 = sQLitePreparedStatement17;
                                                                                    sQLitePreparedStatement23 = sQLitePreparedStatement11;
                                                                                    z6 = false;
                                                                                } catch (Exception e45) {
                                                                                    e = e45;
                                                                                } catch (Throwable th49) {
                                                                                    th3 = th49;
                                                                                }
                                                                            } catch (Exception e46) {
                                                                                e = e46;
                                                                                sQLitePreparedStatement2 = sQLitePreparedStatement33;
                                                                                sQLitePreparedStatement3 = sQLitePreparedStatement17;
                                                                                th2 = e;
                                                                                sQLitePreparedStatement5 = sQLitePreparedStatement11;
                                                                                sQLitePreparedStatement = null;
                                                                                sQLitePreparedStatement4 = null;
                                                                                z5 = false;
                                                                                sQLitePreparedStatement9 = null;
                                                                                sQLitePreparedStatement8 = null;
                                                                                sQLitePreparedStatement7 = null;
                                                                                sQLitePreparedStatement6 = null;
                                                                                sQLitePreparedStatement10 = null;
                                                                                checkSQLException(th2);
                                                                                if (z5) {
                                                                                }
                                                                                if (sQLitePreparedStatement5 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement10 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement7 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement6 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement9 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement3 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement2 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement8 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement4 != null) {
                                                                                }
                                                                            } catch (Throwable th50) {
                                                                                th = th50;
                                                                                sQLitePreparedStatement2 = sQLitePreparedStatement33;
                                                                                sQLitePreparedStatement3 = sQLitePreparedStatement17;
                                                                                th = th;
                                                                                sQLitePreparedStatement5 = sQLitePreparedStatement11;
                                                                                sQLitePreparedStatement = null;
                                                                                sQLitePreparedStatement4 = null;
                                                                                z5 = false;
                                                                                sQLitePreparedStatement9 = null;
                                                                                sQLitePreparedStatement8 = null;
                                                                                sQLitePreparedStatement7 = null;
                                                                                sQLitePreparedStatement6 = null;
                                                                                sQLitePreparedStatement10 = null;
                                                                                if (z5) {
                                                                                }
                                                                                if (sQLitePreparedStatement5 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement10 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement7 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement6 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement9 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement3 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement2 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement8 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement4 != null) {
                                                                                }
                                                                                throw th;
                                                                            }
                                                                        } catch (Exception e47) {
                                                                            e = e47;
                                                                            sQLitePreparedStatement2 = sQLitePreparedStatement33;
                                                                            th2 = e;
                                                                            sQLitePreparedStatement4 = sQLitePreparedStatement20;
                                                                            sQLitePreparedStatement5 = sQLitePreparedStatement11;
                                                                            sQLitePreparedStatement = null;
                                                                            z5 = false;
                                                                            sQLitePreparedStatement9 = null;
                                                                            sQLitePreparedStatement8 = null;
                                                                            sQLitePreparedStatement7 = null;
                                                                            sQLitePreparedStatement6 = null;
                                                                            sQLitePreparedStatement10 = null;
                                                                            sQLitePreparedStatement3 = sQLitePreparedStatement17;
                                                                            checkSQLException(th2);
                                                                            if (z5) {
                                                                            }
                                                                            if (sQLitePreparedStatement5 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement10 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement7 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement6 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement9 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement3 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement2 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement8 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement4 != null) {
                                                                            }
                                                                        } catch (Throwable th51) {
                                                                            th = th51;
                                                                            sQLitePreparedStatement2 = sQLitePreparedStatement33;
                                                                            th = th;
                                                                            sQLitePreparedStatement4 = sQLitePreparedStatement20;
                                                                            sQLitePreparedStatement5 = sQLitePreparedStatement11;
                                                                            sQLitePreparedStatement = null;
                                                                            z5 = false;
                                                                            sQLitePreparedStatement9 = null;
                                                                            sQLitePreparedStatement8 = null;
                                                                            sQLitePreparedStatement7 = null;
                                                                            sQLitePreparedStatement6 = null;
                                                                            sQLitePreparedStatement10 = null;
                                                                            sQLitePreparedStatement3 = sQLitePreparedStatement17;
                                                                            if (z5) {
                                                                            }
                                                                            if (sQLitePreparedStatement5 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement10 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement7 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement6 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement9 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement3 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement2 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement8 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement4 != null) {
                                                                            }
                                                                            throw th;
                                                                        }
                                                                    } catch (Exception e48) {
                                                                        e = e48;
                                                                        sQLitePreparedStatement20 = sQLitePreparedStatement32;
                                                                    } catch (Throwable th52) {
                                                                        th = th52;
                                                                        sQLitePreparedStatement20 = sQLitePreparedStatement32;
                                                                    }
                                                                } catch (Exception e49) {
                                                                    e = e49;
                                                                    sQLitePreparedStatement2 = sQLitePreparedStatement33;
                                                                    sQLitePreparedStatement8 = executeFast7;
                                                                    sQLitePreparedStatement4 = sQLitePreparedStatement32;
                                                                    sQLitePreparedStatement5 = sQLitePreparedStatement11;
                                                                    sQLitePreparedStatement = null;
                                                                    z5 = false;
                                                                    sQLitePreparedStatement9 = null;
                                                                    sQLitePreparedStatement7 = null;
                                                                    sQLitePreparedStatement6 = null;
                                                                    sQLitePreparedStatement10 = null;
                                                                    sQLitePreparedStatement3 = sQLitePreparedStatement17;
                                                                    th2 = e;
                                                                    checkSQLException(th2);
                                                                    if (z5) {
                                                                    }
                                                                    if (sQLitePreparedStatement5 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement10 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement7 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement6 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement9 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement3 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement2 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement8 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement4 != null) {
                                                                    }
                                                                } catch (Throwable th53) {
                                                                    th3 = th53;
                                                                    sQLitePreparedStatement2 = sQLitePreparedStatement33;
                                                                    sQLitePreparedStatement8 = executeFast7;
                                                                    sQLitePreparedStatement4 = sQLitePreparedStatement32;
                                                                    sQLitePreparedStatement5 = sQLitePreparedStatement11;
                                                                    sQLitePreparedStatement = null;
                                                                    z5 = false;
                                                                    sQLitePreparedStatement9 = null;
                                                                    sQLitePreparedStatement7 = null;
                                                                    sQLitePreparedStatement6 = null;
                                                                    sQLitePreparedStatement10 = null;
                                                                    sQLitePreparedStatement3 = sQLitePreparedStatement17;
                                                                    th = th3;
                                                                    if (z5) {
                                                                    }
                                                                    if (sQLitePreparedStatement5 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement10 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement7 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement6 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement9 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement3 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement2 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement8 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement4 != null) {
                                                                    }
                                                                    throw th;
                                                                }
                                                            } catch (Exception e50) {
                                                                e = e50;
                                                                sQLitePreparedStatement19 = sQLitePreparedStatement32;
                                                                sQLitePreparedStatement2 = sQLitePreparedStatement33;
                                                                sQLitePreparedStatement8 = executeFast7;
                                                                sQLitePreparedStatement4 = sQLitePreparedStatement19;
                                                                sQLitePreparedStatement5 = sQLitePreparedStatement11;
                                                                z5 = false;
                                                                sQLitePreparedStatement9 = null;
                                                                sQLitePreparedStatement7 = null;
                                                                sQLitePreparedStatement6 = null;
                                                                sQLitePreparedStatement10 = null;
                                                                sQLitePreparedStatement3 = sQLitePreparedStatement17;
                                                                th2 = e;
                                                                checkSQLException(th2);
                                                                if (z5) {
                                                                }
                                                                if (sQLitePreparedStatement5 != null) {
                                                                }
                                                                if (sQLitePreparedStatement10 != null) {
                                                                }
                                                                if (sQLitePreparedStatement7 != null) {
                                                                }
                                                                if (sQLitePreparedStatement6 != null) {
                                                                }
                                                                if (sQLitePreparedStatement9 != null) {
                                                                }
                                                                if (sQLitePreparedStatement3 != null) {
                                                                }
                                                                if (sQLitePreparedStatement2 != null) {
                                                                }
                                                                if (sQLitePreparedStatement8 != null) {
                                                                }
                                                                if (sQLitePreparedStatement != null) {
                                                                }
                                                                if (sQLitePreparedStatement4 != null) {
                                                                }
                                                            } catch (Throwable th54) {
                                                                th3 = th54;
                                                                sQLitePreparedStatement18 = sQLitePreparedStatement32;
                                                                sQLitePreparedStatement2 = sQLitePreparedStatement33;
                                                                sQLitePreparedStatement8 = executeFast7;
                                                                sQLitePreparedStatement4 = sQLitePreparedStatement18;
                                                                sQLitePreparedStatement5 = sQLitePreparedStatement11;
                                                                z5 = false;
                                                                sQLitePreparedStatement9 = null;
                                                                sQLitePreparedStatement7 = null;
                                                                sQLitePreparedStatement6 = null;
                                                                sQLitePreparedStatement10 = null;
                                                                sQLitePreparedStatement3 = sQLitePreparedStatement17;
                                                                th = th3;
                                                                if (z5) {
                                                                }
                                                                if (sQLitePreparedStatement5 != null) {
                                                                }
                                                                if (sQLitePreparedStatement10 != null) {
                                                                }
                                                                if (sQLitePreparedStatement7 != null) {
                                                                }
                                                                if (sQLitePreparedStatement6 != null) {
                                                                }
                                                                if (sQLitePreparedStatement9 != null) {
                                                                }
                                                                if (sQLitePreparedStatement3 != null) {
                                                                }
                                                                if (sQLitePreparedStatement2 != null) {
                                                                }
                                                                if (sQLitePreparedStatement8 != null) {
                                                                }
                                                                if (sQLitePreparedStatement != null) {
                                                                }
                                                                if (sQLitePreparedStatement4 != null) {
                                                                }
                                                                throw th;
                                                            }
                                                        } catch (Exception e51) {
                                                            e = e51;
                                                            sQLitePreparedStatement17 = sQLitePreparedStatement3;
                                                            sQLitePreparedStatement19 = executeFast8;
                                                        } catch (Throwable th55) {
                                                            th3 = th55;
                                                            sQLitePreparedStatement17 = sQLitePreparedStatement3;
                                                            sQLitePreparedStatement18 = executeFast8;
                                                        }
                                                    } catch (Exception e52) {
                                                        e = e52;
                                                        sQLitePreparedStatement8 = executeFast7;
                                                        sQLitePreparedStatement5 = sQLitePreparedStatement11;
                                                        sQLitePreparedStatement4 = null;
                                                        z5 = false;
                                                        sQLitePreparedStatement9 = null;
                                                        sQLitePreparedStatement7 = null;
                                                        sQLitePreparedStatement6 = null;
                                                        sQLitePreparedStatement10 = null;
                                                        th2 = e;
                                                        checkSQLException(th2);
                                                        if (z5) {
                                                        }
                                                        if (sQLitePreparedStatement5 != null) {
                                                        }
                                                        if (sQLitePreparedStatement10 != null) {
                                                        }
                                                        if (sQLitePreparedStatement7 != null) {
                                                        }
                                                        if (sQLitePreparedStatement6 != null) {
                                                        }
                                                        if (sQLitePreparedStatement9 != null) {
                                                        }
                                                        if (sQLitePreparedStatement3 != null) {
                                                        }
                                                        if (sQLitePreparedStatement2 != null) {
                                                        }
                                                        if (sQLitePreparedStatement8 != null) {
                                                        }
                                                        if (sQLitePreparedStatement != null) {
                                                        }
                                                        if (sQLitePreparedStatement4 != null) {
                                                        }
                                                    } catch (Throwable th56) {
                                                        th3 = th56;
                                                        sQLitePreparedStatement8 = executeFast7;
                                                        sQLitePreparedStatement5 = sQLitePreparedStatement11;
                                                        sQLitePreparedStatement4 = null;
                                                        z5 = false;
                                                        sQLitePreparedStatement9 = null;
                                                        sQLitePreparedStatement7 = null;
                                                        sQLitePreparedStatement6 = null;
                                                        sQLitePreparedStatement10 = null;
                                                        th = th3;
                                                        if (z5) {
                                                        }
                                                        if (sQLitePreparedStatement5 != null) {
                                                        }
                                                        if (sQLitePreparedStatement10 != null) {
                                                        }
                                                        if (sQLitePreparedStatement7 != null) {
                                                        }
                                                        if (sQLitePreparedStatement6 != null) {
                                                        }
                                                        if (sQLitePreparedStatement9 != null) {
                                                        }
                                                        if (sQLitePreparedStatement3 != null) {
                                                        }
                                                        if (sQLitePreparedStatement2 != null) {
                                                        }
                                                        if (sQLitePreparedStatement8 != null) {
                                                        }
                                                        if (sQLitePreparedStatement != null) {
                                                        }
                                                        if (sQLitePreparedStatement4 != null) {
                                                        }
                                                        throw th;
                                                    }
                                                } catch (Exception e53) {
                                                    e = e53;
                                                    sQLitePreparedStatement8 = executeFast7;
                                                    sQLitePreparedStatement5 = sQLitePreparedStatement11;
                                                    sQLitePreparedStatement = null;
                                                } catch (Throwable th57) {
                                                    th3 = th57;
                                                    sQLitePreparedStatement8 = executeFast7;
                                                    sQLitePreparedStatement5 = sQLitePreparedStatement11;
                                                    sQLitePreparedStatement = null;
                                                }
                                            } catch (Exception e54) {
                                                e = e54;
                                            } catch (Throwable th58) {
                                                th = th58;
                                            }
                                        } catch (Exception e55) {
                                            th2 = e55;
                                            sQLitePreparedStatement6 = sQLitePreparedStatement15;
                                            sQLitePreparedStatement5 = sQLitePreparedStatement11;
                                            sQLitePreparedStatement = null;
                                            sQLitePreparedStatement4 = null;
                                            z5 = false;
                                            sQLitePreparedStatement9 = null;
                                            sQLitePreparedStatement8 = null;
                                            sQLitePreparedStatement7 = null;
                                            sQLitePreparedStatement10 = null;
                                            checkSQLException(th2);
                                            if (z5) {
                                            }
                                            if (sQLitePreparedStatement5 != null) {
                                            }
                                            if (sQLitePreparedStatement10 != null) {
                                            }
                                            if (sQLitePreparedStatement7 != null) {
                                            }
                                            if (sQLitePreparedStatement6 != null) {
                                            }
                                            if (sQLitePreparedStatement9 != null) {
                                            }
                                            if (sQLitePreparedStatement3 != null) {
                                            }
                                            if (sQLitePreparedStatement2 != null) {
                                            }
                                            if (sQLitePreparedStatement8 != null) {
                                            }
                                            if (sQLitePreparedStatement != null) {
                                            }
                                            if (sQLitePreparedStatement4 != null) {
                                            }
                                        } catch (Throwable th59) {
                                            th = th59;
                                            sQLitePreparedStatement6 = sQLitePreparedStatement15;
                                            sQLitePreparedStatement5 = sQLitePreparedStatement11;
                                            sQLitePreparedStatement = null;
                                            sQLitePreparedStatement4 = null;
                                            z5 = false;
                                            sQLitePreparedStatement9 = null;
                                            sQLitePreparedStatement8 = null;
                                            sQLitePreparedStatement7 = null;
                                            sQLitePreparedStatement10 = null;
                                            if (z5) {
                                            }
                                            if (sQLitePreparedStatement5 != null) {
                                            }
                                            if (sQLitePreparedStatement10 != null) {
                                            }
                                            if (sQLitePreparedStatement7 != null) {
                                            }
                                            if (sQLitePreparedStatement6 != null) {
                                            }
                                            if (sQLitePreparedStatement9 != null) {
                                            }
                                            if (sQLitePreparedStatement3 != null) {
                                            }
                                            if (sQLitePreparedStatement2 != null) {
                                            }
                                            if (sQLitePreparedStatement8 != null) {
                                            }
                                            if (sQLitePreparedStatement != null) {
                                            }
                                            if (sQLitePreparedStatement4 != null) {
                                            }
                                            throw th;
                                        }
                                    } catch (Exception e56) {
                                        e = e56;
                                        th2 = e;
                                        sQLitePreparedStatement6 = sQLitePreparedStatement15;
                                        sQLitePreparedStatement10 = sQLitePreparedStatement16;
                                        sQLitePreparedStatement7 = sQLitePreparedStatement14;
                                        sQLitePreparedStatement5 = sQLitePreparedStatement11;
                                        sQLitePreparedStatement = null;
                                        sQLitePreparedStatement4 = null;
                                        z5 = false;
                                        sQLitePreparedStatement9 = null;
                                        sQLitePreparedStatement8 = null;
                                        checkSQLException(th2);
                                        if (z5) {
                                        }
                                        if (sQLitePreparedStatement5 != null) {
                                        }
                                        if (sQLitePreparedStatement10 != null) {
                                        }
                                        if (sQLitePreparedStatement7 != null) {
                                        }
                                        if (sQLitePreparedStatement6 != null) {
                                        }
                                        if (sQLitePreparedStatement9 != null) {
                                        }
                                        if (sQLitePreparedStatement3 != null) {
                                        }
                                        if (sQLitePreparedStatement2 != null) {
                                        }
                                        if (sQLitePreparedStatement8 != null) {
                                        }
                                        if (sQLitePreparedStatement != null) {
                                        }
                                        if (sQLitePreparedStatement4 != null) {
                                        }
                                    } catch (Throwable th60) {
                                        th = th60;
                                        th = th;
                                        sQLitePreparedStatement6 = sQLitePreparedStatement15;
                                        sQLitePreparedStatement10 = sQLitePreparedStatement16;
                                        sQLitePreparedStatement7 = sQLitePreparedStatement14;
                                        sQLitePreparedStatement5 = sQLitePreparedStatement11;
                                        sQLitePreparedStatement = null;
                                        sQLitePreparedStatement4 = null;
                                        z5 = false;
                                        sQLitePreparedStatement9 = null;
                                        sQLitePreparedStatement8 = null;
                                        if (z5) {
                                        }
                                        if (sQLitePreparedStatement5 != null) {
                                        }
                                        if (sQLitePreparedStatement10 != null) {
                                        }
                                        if (sQLitePreparedStatement7 != null) {
                                        }
                                        if (sQLitePreparedStatement6 != null) {
                                        }
                                        if (sQLitePreparedStatement9 != null) {
                                        }
                                        if (sQLitePreparedStatement3 != null) {
                                        }
                                        if (sQLitePreparedStatement2 != null) {
                                        }
                                        if (sQLitePreparedStatement8 != null) {
                                        }
                                        if (sQLitePreparedStatement != null) {
                                        }
                                        if (sQLitePreparedStatement4 != null) {
                                        }
                                        throw th;
                                    }
                                } catch (Exception e57) {
                                    th2 = e57;
                                    sQLitePreparedStatement6 = sQLitePreparedStatement15;
                                    sQLitePreparedStatement10 = sQLitePreparedStatement16;
                                    sQLitePreparedStatement7 = sQLitePreparedStatement14;
                                    sQLitePreparedStatement5 = sQLitePreparedStatement11;
                                    sQLitePreparedStatement2 = sQLitePreparedStatement12;
                                    sQLitePreparedStatement3 = sQLitePreparedStatement13;
                                    sQLitePreparedStatement = null;
                                    sQLitePreparedStatement4 = null;
                                    z5 = false;
                                    sQLitePreparedStatement9 = null;
                                    sQLitePreparedStatement8 = null;
                                    checkSQLException(th2);
                                    if (z5) {
                                    }
                                    if (sQLitePreparedStatement5 != null) {
                                    }
                                    if (sQLitePreparedStatement10 != null) {
                                    }
                                    if (sQLitePreparedStatement7 != null) {
                                    }
                                    if (sQLitePreparedStatement6 != null) {
                                    }
                                    if (sQLitePreparedStatement9 != null) {
                                    }
                                    if (sQLitePreparedStatement3 != null) {
                                    }
                                    if (sQLitePreparedStatement2 != null) {
                                    }
                                    if (sQLitePreparedStatement8 != null) {
                                    }
                                    if (sQLitePreparedStatement != null) {
                                    }
                                    if (sQLitePreparedStatement4 != null) {
                                    }
                                } catch (Throwable th61) {
                                    th = th61;
                                    sQLitePreparedStatement6 = sQLitePreparedStatement15;
                                    sQLitePreparedStatement10 = sQLitePreparedStatement16;
                                    sQLitePreparedStatement7 = sQLitePreparedStatement14;
                                    sQLitePreparedStatement5 = sQLitePreparedStatement11;
                                    sQLitePreparedStatement2 = sQLitePreparedStatement12;
                                    sQLitePreparedStatement3 = sQLitePreparedStatement13;
                                    sQLitePreparedStatement = null;
                                    sQLitePreparedStatement4 = null;
                                    z5 = false;
                                    sQLitePreparedStatement9 = null;
                                    sQLitePreparedStatement8 = null;
                                    if (z5) {
                                    }
                                    if (sQLitePreparedStatement5 != null) {
                                    }
                                    if (sQLitePreparedStatement10 != null) {
                                    }
                                    if (sQLitePreparedStatement7 != null) {
                                    }
                                    if (sQLitePreparedStatement6 != null) {
                                    }
                                    if (sQLitePreparedStatement9 != null) {
                                    }
                                    if (sQLitePreparedStatement3 != null) {
                                    }
                                    if (sQLitePreparedStatement2 != null) {
                                    }
                                    if (sQLitePreparedStatement8 != null) {
                                    }
                                    if (sQLitePreparedStatement != null) {
                                    }
                                    if (sQLitePreparedStatement4 != null) {
                                    }
                                    throw th;
                                }
                            } catch (Exception e58) {
                                th2 = e58;
                                sQLitePreparedStatement10 = executeFast4;
                                sQLitePreparedStatement5 = sQLitePreparedStatement11;
                                sQLitePreparedStatement = null;
                                sQLitePreparedStatement2 = null;
                                sQLitePreparedStatement3 = null;
                            } catch (Throwable th62) {
                                th = th62;
                                sQLitePreparedStatement10 = executeFast4;
                                sQLitePreparedStatement5 = sQLitePreparedStatement11;
                                sQLitePreparedStatement = null;
                                sQLitePreparedStatement2 = null;
                                sQLitePreparedStatement3 = null;
                            }
                        } catch (Exception e59) {
                            e = e59;
                            th2 = e;
                            sQLitePreparedStatement5 = sQLitePreparedStatement11;
                            sQLitePreparedStatement = null;
                            sQLitePreparedStatement2 = null;
                            sQLitePreparedStatement3 = null;
                            sQLitePreparedStatement4 = null;
                            z5 = false;
                            sQLitePreparedStatement9 = null;
                            sQLitePreparedStatement8 = null;
                            sQLitePreparedStatement7 = null;
                            sQLitePreparedStatement6 = null;
                            sQLitePreparedStatement10 = null;
                            checkSQLException(th2);
                            if (z5) {
                            }
                            if (sQLitePreparedStatement5 != null) {
                            }
                            if (sQLitePreparedStatement10 != null) {
                            }
                            if (sQLitePreparedStatement7 != null) {
                            }
                            if (sQLitePreparedStatement6 != null) {
                            }
                            if (sQLitePreparedStatement9 != null) {
                            }
                            if (sQLitePreparedStatement3 != null) {
                            }
                            if (sQLitePreparedStatement2 != null) {
                            }
                            if (sQLitePreparedStatement8 != null) {
                            }
                            if (sQLitePreparedStatement != null) {
                            }
                            if (sQLitePreparedStatement4 != null) {
                            }
                        } catch (Throwable th63) {
                            th = th63;
                            th = th;
                            sQLitePreparedStatement5 = sQLitePreparedStatement11;
                            sQLitePreparedStatement = null;
                            sQLitePreparedStatement2 = null;
                            sQLitePreparedStatement3 = null;
                            sQLitePreparedStatement4 = null;
                            z5 = false;
                            sQLitePreparedStatement9 = null;
                            sQLitePreparedStatement8 = null;
                            sQLitePreparedStatement7 = null;
                            sQLitePreparedStatement6 = null;
                            sQLitePreparedStatement10 = null;
                            if (z5) {
                            }
                            if (sQLitePreparedStatement5 != null) {
                            }
                            if (sQLitePreparedStatement10 != null) {
                            }
                            if (sQLitePreparedStatement7 != null) {
                            }
                            if (sQLitePreparedStatement6 != null) {
                            }
                            if (sQLitePreparedStatement9 != null) {
                            }
                            if (sQLitePreparedStatement3 != null) {
                            }
                            if (sQLitePreparedStatement2 != null) {
                            }
                            if (sQLitePreparedStatement8 != null) {
                            }
                            if (sQLitePreparedStatement != null) {
                            }
                            if (sQLitePreparedStatement4 != null) {
                            }
                            throw th;
                        }
                    } catch (Exception e60) {
                        e = e60;
                        sQLitePreparedStatement11 = executeFast2;
                    } catch (Throwable th64) {
                        th = th64;
                        sQLitePreparedStatement11 = executeFast2;
                    }
                } catch (Exception e61) {
                    e = e61;
                    th2 = e;
                    sQLitePreparedStatement = null;
                    sQLitePreparedStatement2 = null;
                    sQLitePreparedStatement3 = null;
                    sQLitePreparedStatement4 = null;
                    sQLitePreparedStatement5 = null;
                    z5 = false;
                    sQLitePreparedStatement9 = null;
                    sQLitePreparedStatement8 = null;
                    sQLitePreparedStatement7 = null;
                    sQLitePreparedStatement6 = null;
                    sQLitePreparedStatement10 = null;
                    checkSQLException(th2);
                    if (z5) {
                    }
                    if (sQLitePreparedStatement5 != null) {
                    }
                    if (sQLitePreparedStatement10 != null) {
                    }
                    if (sQLitePreparedStatement7 != null) {
                    }
                    if (sQLitePreparedStatement6 != null) {
                    }
                    if (sQLitePreparedStatement9 != null) {
                    }
                    if (sQLitePreparedStatement3 != null) {
                    }
                    if (sQLitePreparedStatement2 != null) {
                    }
                    if (sQLitePreparedStatement8 != null) {
                    }
                    if (sQLitePreparedStatement != null) {
                    }
                    if (sQLitePreparedStatement4 != null) {
                    }
                } catch (Throwable th65) {
                    th = th65;
                    th = th;
                    sQLitePreparedStatement = null;
                    sQLitePreparedStatement2 = null;
                    sQLitePreparedStatement3 = null;
                    sQLitePreparedStatement4 = null;
                    sQLitePreparedStatement5 = null;
                    z5 = false;
                    sQLitePreparedStatement9 = null;
                    sQLitePreparedStatement8 = null;
                    sQLitePreparedStatement7 = null;
                    sQLitePreparedStatement6 = null;
                    sQLitePreparedStatement10 = null;
                    if (z5) {
                    }
                    if (sQLitePreparedStatement5 != null) {
                    }
                    if (sQLitePreparedStatement10 != null) {
                    }
                    if (sQLitePreparedStatement7 != null) {
                    }
                    if (sQLitePreparedStatement6 != null) {
                    }
                    if (sQLitePreparedStatement9 != null) {
                    }
                    if (sQLitePreparedStatement3 != null) {
                    }
                    if (sQLitePreparedStatement2 != null) {
                    }
                    if (sQLitePreparedStatement8 != null) {
                    }
                    if (sQLitePreparedStatement != null) {
                    }
                    if (sQLitePreparedStatement4 != null) {
                    }
                    throw th;
                }
            }
            if (z6 && (sQLiteDatabase3 = this.database) != null) {
                sQLiteDatabase3.commitTransaction();
            }
            if (sQLitePreparedStatement23 != null) {
                sQLitePreparedStatement23.dispose();
            }
            if (sQLitePreparedStatement22 != null) {
                sQLitePreparedStatement22.dispose();
            }
            if (sQLitePreparedStatement21 != null) {
                sQLitePreparedStatement21.dispose();
            }
        } catch (Exception e62) {
            e = e62;
        } catch (Throwable th66) {
            th = th66;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$putMessagesInternal$170(int i) {
        getDownloadController().newDownloadObjectsAvailable(i);
    }

    private void createOrEditTopic(final long j, TLRPC$Message tLRPC$Message) {
        final TLRPC$TL_forumTopic tLRPC$TL_forumTopic = new TLRPC$TL_forumTopic();
        tLRPC$TL_forumTopic.topicStartMessage = tLRPC$Message;
        tLRPC$TL_forumTopic.top_message = tLRPC$Message.id;
        tLRPC$TL_forumTopic.topMessage = tLRPC$Message;
        tLRPC$TL_forumTopic.from_id = getMessagesController().getPeer(getUserConfig().clientUserId);
        tLRPC$TL_forumTopic.notify_settings = new TLRPC$TL_peerNotifySettings();
        tLRPC$TL_forumTopic.unread_count = 0;
        TLRPC$MessageAction tLRPC$MessageAction = tLRPC$Message.action;
        if (tLRPC$MessageAction instanceof TLRPC$TL_messageActionTopicCreate) {
            TLRPC$TL_messageActionTopicCreate tLRPC$TL_messageActionTopicCreate = (TLRPC$TL_messageActionTopicCreate) tLRPC$MessageAction;
            tLRPC$TL_forumTopic.id = tLRPC$Message.id;
            long j2 = tLRPC$TL_messageActionTopicCreate.icon_emoji_id;
            tLRPC$TL_forumTopic.icon_emoji_id = j2;
            tLRPC$TL_forumTopic.title = tLRPC$TL_messageActionTopicCreate.title;
            tLRPC$TL_forumTopic.icon_color = tLRPC$TL_messageActionTopicCreate.icon_color;
            if (j2 != 0) {
                tLRPC$TL_forumTopic.flags |= 1;
            }
            ArrayList arrayList = new ArrayList();
            arrayList.add(tLRPC$TL_forumTopic);
            saveTopics(j, arrayList, false, false);
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda118
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesStorage.this.lambda$createOrEditTopic$171(j, tLRPC$TL_forumTopic);
                }
            });
        } else if (tLRPC$MessageAction instanceof TLRPC$TL_messageActionTopicEdit) {
            TLRPC$TL_messageActionTopicEdit tLRPC$TL_messageActionTopicEdit = (TLRPC$TL_messageActionTopicEdit) tLRPC$MessageAction;
            tLRPC$TL_forumTopic.id = MessageObject.getTopicId(tLRPC$Message, true);
            tLRPC$TL_forumTopic.icon_emoji_id = tLRPC$TL_messageActionTopicEdit.icon_emoji_id;
            tLRPC$TL_forumTopic.title = tLRPC$TL_messageActionTopicEdit.title;
            tLRPC$TL_forumTopic.closed = tLRPC$TL_messageActionTopicEdit.closed;
            tLRPC$TL_forumTopic.hidden = tLRPC$TL_messageActionTopicEdit.hidden;
            int i = tLRPC$TL_messageActionTopicEdit.flags;
            int i2 = (i & 1) != 0 ? 1 : 0;
            if ((i & 2) != 0) {
                i2 += 2;
            }
            if ((i & 4) != 0) {
                i2 += 8;
            }
            if ((i & 8) != 0) {
                i2 += 32;
            }
            final int i3 = i2;
            updateTopicData(j, tLRPC$TL_forumTopic, i3);
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda119
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesStorage.this.lambda$createOrEditTopic$172(j, tLRPC$TL_forumTopic, i3);
                }
            });
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createOrEditTopic$171(long j, TLRPC$TL_forumTopic tLRPC$TL_forumTopic) {
        getMessagesController().getTopicsController().onTopicCreated(j, tLRPC$TL_forumTopic, false);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createOrEditTopic$172(long j, TLRPC$TL_forumTopic tLRPC$TL_forumTopic, int i) {
        getMessagesController().getTopicsController().updateTopicInUi(j, tLRPC$TL_forumTopic, i);
    }

    public void putMessages(ArrayList<TLRPC$Message> arrayList, boolean z, boolean z2, boolean z3, int i, boolean z4, int i2) {
        putMessages(arrayList, z, z2, z3, i, false, z4, i2);
    }

    public void putMessages(final ArrayList<TLRPC$Message> arrayList, final boolean z, boolean z2, final boolean z3, final int i, final boolean z4, final boolean z5, final int i2) {
        if (arrayList.size() == 0) {
            return;
        }
        if (z2) {
            this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda161
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesStorage.this.lambda$putMessages$173(arrayList, z, z3, i, z4, z5, i2);
                }
            });
        } else {
            lambda$putMessages$173(arrayList, z, z3, i, z4, z5, i2);
        }
    }

    public void markMessageAsSendError(final TLRPC$Message tLRPC$Message, final boolean z) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda187
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$markMessageAsSendError$174(tLRPC$Message, z);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$markMessageAsSendError$174(TLRPC$Message tLRPC$Message, boolean z) {
        try {
            long j = tLRPC$Message.id;
            if (z) {
                this.database.executeFast(String.format(Locale.US, "UPDATE scheduled_messages_v2 SET send_state = 2 WHERE mid = %d AND uid = %d", Long.valueOf(j), Long.valueOf(MessageObject.getDialogId(tLRPC$Message)))).stepThis().dispose();
            } else {
                SQLiteDatabase sQLiteDatabase = this.database;
                Locale locale = Locale.US;
                sQLiteDatabase.executeFast(String.format(locale, "UPDATE messages_v2 SET send_state = 2 WHERE mid = %d AND uid = %d", Long.valueOf(j), Long.valueOf(MessageObject.getDialogId(tLRPC$Message)))).stepThis().dispose();
                this.database.executeFast(String.format(locale, "UPDATE messages_topics SET send_state = 2 WHERE mid = %d AND uid = %d", Long.valueOf(j), Long.valueOf(MessageObject.getDialogId(tLRPC$Message)))).stepThis().dispose();
            }
        } catch (Exception e) {
            checkSQLException(e);
        }
    }

    public void setMessageSeq(final int i, final int i2, final int i3) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda35
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$setMessageSeq$175(i, i2, i3);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$setMessageSeq$175(int i, int i2, int i3) {
        SQLitePreparedStatement sQLitePreparedStatement = null;
        try {
            try {
                sQLitePreparedStatement = this.database.executeFast("REPLACE INTO messages_seq VALUES(?, ?, ?)");
                sQLitePreparedStatement.requery();
                sQLitePreparedStatement.bindInteger(1, i);
                sQLitePreparedStatement.bindInteger(2, i2);
                sQLitePreparedStatement.bindInteger(3, i3);
                sQLitePreparedStatement.step();
            } catch (Exception e) {
                checkSQLException(e);
                if (sQLitePreparedStatement == null) {
                    return;
                }
            }
            sQLitePreparedStatement.dispose();
        } catch (Throwable th) {
            if (sQLitePreparedStatement != null) {
                sQLitePreparedStatement.dispose();
            }
            throw th;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Can't wrap try/catch for region: R(21:241|242|(1:244)|245|(0)|4|(0)|6|(0)|20|(0)|178|179|(4:180|181|(0)(0)|185)|(0)(0)|162|163|(0)|168|28|(0)(0)) */
    /* JADX WARN: Can't wrap try/catch for region: R(22:1|(7:229|230|231|232|(3:234|235|236)(1:248)|237|(1:239))(1:3)|4|(2:202|(18:204|205|206|207|208|209|210|211|20|(13:178|179|180|181|(2:183|184)(1:187)|185|(1:26)(1:177)|162|163|(2:165|166)|168|28|(1:30)(1:(4:70|(18:83|84|85|86|87|88|89|90|91|92|93|94|95|96|97|98|99|100)(3:72|73|74)|75|76)(10:33|(1:35)(1:65)|36|37|38|(1:40)|42|(1:44)|45|46)))(1:23)|24|(0)(0)|162|163|(0)|168|28|(0)(0)))|6|(6:8|(1:10)(1:19)|11|12|13|14)|20|(0)|178|179|180|181|(0)(0)|185|(0)(0)|162|163|(0)|168|28|(0)(0)|(10:(0)|(1:172)|(1:80)|(1:105)|(1:128)|(0)|(0)|(0)|(0)|(0))) */
    /* JADX WARN: Can't wrap try/catch for region: R(5:(2:133|134)|92|93|94|(7:95|96|97|(2:98|99)|100|75|76)) */
    /* JADX WARN: Code restructure failed: missing block: B:101:0x019a, code lost:
        r0 = move-exception;
     */
    /* JADX WARN: Code restructure failed: missing block: B:102:0x019b, code lost:
        checkSQLException(r0);
     */
    /* JADX WARN: Code restructure failed: missing block: B:103:0x019e, code lost:
        if (r8 == null) goto L28;
     */
    /* JADX WARN: Code restructure failed: missing block: B:170:0x0320, code lost:
        r0 = move-exception;
     */
    /* JADX WARN: Code restructure failed: missing block: B:171:0x0321, code lost:
        checkSQLException(r0);
     */
    /* JADX WARN: Code restructure failed: missing block: B:172:0x0324, code lost:
        if (r3 != null) goto L94;
     */
    /* JADX WARN: Code restructure failed: missing block: B:191:0x038f, code lost:
        if (r5 == null) goto L75;
     */
    /* JADX WARN: Code restructure failed: missing block: B:215:0x03f6, code lost:
        if (r5 != null) goto L74;
     */
    /* JADX WARN: Code restructure failed: missing block: B:49:0x009c, code lost:
        if (r10 == null) goto L20;
     */
    /* JADX WARN: Code restructure failed: missing block: B:83:0x0158, code lost:
        r0 = th;
     */
    /* JADX WARN: Code restructure failed: missing block: B:84:0x0159, code lost:
        r8 = r22;
     */
    /* JADX WARN: Code restructure failed: missing block: B:85:0x015d, code lost:
        r0 = e;
     */
    /* JADX WARN: Code restructure failed: missing block: B:86:0x015e, code lost:
        r8 = r22;
     */
    /* JADX WARN: Code restructure failed: missing block: B:92:0x016c, code lost:
        if (r4 == 1) goto L162;
     */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:107:0x01a9 A[RETURN] */
    /* JADX WARN: Removed duplicated region for block: B:108:0x01aa  */
    /* JADX WARN: Removed duplicated region for block: B:137:0x021a  */
    /* JADX WARN: Removed duplicated region for block: B:139:0x021f  */
    /* JADX WARN: Removed duplicated region for block: B:161:0x02d6  */
    /* JADX WARN: Removed duplicated region for block: B:163:0x02dc  */
    /* JADX WARN: Removed duplicated region for block: B:184:0x0374  */
    /* JADX WARN: Removed duplicated region for block: B:203:0x03a9  */
    /* JADX WARN: Removed duplicated region for block: B:205:0x03ae  */
    /* JADX WARN: Removed duplicated region for block: B:227:0x0418  */
    /* JADX WARN: Removed duplicated region for block: B:232:0x0072 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:25:0x0058 A[RETURN] */
    /* JADX WARN: Removed duplicated region for block: B:29:0x005d  */
    /* JADX WARN: Removed duplicated region for block: B:58:0x00b5  */
    /* JADX WARN: Removed duplicated region for block: B:70:0x0122 A[ADDED_TO_REGION] */
    /* JADX WARN: Removed duplicated region for block: B:77:0x0149 A[Catch: Exception -> 0x0156, all -> 0x0415, TRY_LEAVE, TryCatch #24 {Exception -> 0x0156, blocks: (B:75:0x0143, B:77:0x0149), top: B:255:0x0143 }] */
    /* JADX WARN: Removed duplicated region for block: B:79:0x014f  */
    /* JADX WARN: Removed duplicated region for block: B:91:0x016b  */
    /* JADX WARN: Removed duplicated region for block: B:94:0x016f  */
    /* JADX WARN: Removed duplicated region for block: B:97:0x018f A[Catch: all -> 0x0197, Exception -> 0x019a, TRY_LEAVE, TryCatch #10 {Exception -> 0x019a, blocks: (B:95:0x0170, B:97:0x018f), top: B:236:0x0170, outer: #32 }] */
    /* JADX WARN: Type inference failed for: r10v1 */
    /* JADX WARN: Type inference failed for: r10v10, types: [org.telegram.SQLite.SQLitePreparedStatement] */
    /* JADX WARN: Type inference failed for: r10v25 */
    /* JADX WARN: Type inference failed for: r10v26 */
    /* JADX WARN: Type inference failed for: r10v27 */
    /* JADX WARN: Type inference failed for: r10v6, types: [long] */
    /* JADX WARN: Type inference failed for: r10v7 */
    /* renamed from: updateMessageStateAndIdInternal */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public long[] lambda$updateMessageStateAndId$177(long j, long j2, Integer num, int i, int i2, int i3) {
        Integer num2;
        SQLiteCursor sQLiteCursor;
        long j3;
        long j4;
        int intValue;
        SQLiteCursor sQLiteCursor2;
        SQLitePreparedStatement sQLitePreparedStatement;
        SQLiteCursor sQLiteCursor3;
        long j5;
        long j6;
        long j7;
        SQLitePreparedStatement sQLitePreparedStatement2;
        SQLitePreparedStatement sQLitePreparedStatement3;
        SQLitePreparedStatement sQLitePreparedStatement4;
        SQLitePreparedStatement executeFast;
        int i4 = i3;
        SQLiteCursor sQLiteCursor4 = null;
        r5 = null;
        r5 = null;
        SQLitePreparedStatement sQLitePreparedStatement5 = null;
        r5 = null;
        SQLitePreparedStatement sQLitePreparedStatement6 = null;
        r5 = null;
        r5 = null;
        r5 = null;
        SQLitePreparedStatement sQLitePreparedStatement7 = null;
        SQLitePreparedStatement sQLitePreparedStatement8 = null;
        SQLitePreparedStatement sQLitePreparedStatement9 = null;
        SQLitePreparedStatement sQLitePreparedStatement10 = null;
        if (num == null) {
            try {
                sQLiteCursor = this.database.queryFinalized(String.format(Locale.US, "SELECT mid, uid FROM randoms_v2 WHERE random_id = %d LIMIT 1", Long.valueOf(j)), new Object[0]);
                try {
                    try {
                        if (sQLiteCursor.next()) {
                            num2 = Integer.valueOf(sQLiteCursor.intValue(0));
                            try {
                                j4 = sQLiteCursor.longValue(1);
                            } catch (Exception e) {
                                e = e;
                                checkSQLException(e);
                                if (sQLiteCursor != null) {
                                    sQLiteCursor.dispose();
                                }
                                j3 = j2;
                                if (num2 == null) {
                                }
                                intValue = num2.intValue();
                                if (num2.intValue() < 0) {
                                }
                                sQLiteCursor2 = sQLiteCursor;
                                if (num2.intValue() > 0) {
                                }
                                if (i4 != -1) {
                                }
                                sQLiteCursor3 = this.database.queryFinalized(String.format(Locale.US, "SELECT uid FROM messages_v2 WHERE mid = %d LIMIT 1", Integer.valueOf(intValue)), new Object[0]);
                                try {
                                    if (sQLiteCursor3.next()) {
                                    }
                                    sQLiteCursor3.dispose();
                                    j6 = j5;
                                } catch (Exception e2) {
                                    e = e2;
                                    checkSQLException(e);
                                    if (sQLiteCursor3 != null) {
                                        sQLiteCursor3.dispose();
                                    }
                                    j6 = 0;
                                    if (i4 != -1) {
                                    }
                                    SQLiteDatabase sQLiteDatabase = this.database;
                                    Locale locale = Locale.US;
                                    Object[] objArr = new Object[r7];
                                    objArr[0] = Integer.valueOf(intValue);
                                    sQLiteCursor3 = sQLiteDatabase.queryFinalized(String.format(locale, "SELECT uid FROM scheduled_messages_v2 WHERE mid = %d LIMIT 1", objArr), new Object[0]);
                                    if (sQLiteCursor3.next()) {
                                    }
                                    sQLiteCursor3.dispose();
                                    j7 = j6;
                                    if (j7 == 0) {
                                    }
                                }
                                if (i4 != -1) {
                                }
                                SQLiteDatabase sQLiteDatabase2 = this.database;
                                Locale locale2 = Locale.US;
                                Object[] objArr2 = new Object[r7];
                                objArr2[0] = Integer.valueOf(intValue);
                                sQLiteCursor3 = sQLiteDatabase2.queryFinalized(String.format(locale2, "SELECT uid FROM scheduled_messages_v2 WHERE mid = %d LIMIT 1", objArr2), new Object[0]);
                                if (sQLiteCursor3.next()) {
                                }
                                sQLiteCursor3.dispose();
                                j7 = j6;
                                if (j7 == 0) {
                                }
                            }
                        } else {
                            j4 = j2;
                            num2 = num;
                        }
                        sQLiteCursor.dispose();
                        j3 = j4;
                    } catch (Throwable th) {
                        th = th;
                        sQLiteCursor4 = sQLiteCursor;
                        if (sQLiteCursor4 != null) {
                            sQLiteCursor4.dispose();
                        }
                        throw th;
                    }
                } catch (Exception e3) {
                    e = e3;
                    num2 = num;
                }
            } catch (Exception e4) {
                e = e4;
                num2 = num;
                sQLiteCursor = null;
            } catch (Throwable th2) {
                th = th2;
                if (sQLiteCursor4 != null) {
                }
                throw th;
            }
            if (num2 == null) {
                return null;
            }
        } else {
            j3 = j2;
            num2 = num;
            sQLiteCursor = null;
        }
        intValue = num2.intValue();
        try {
            try {
                if (num2.intValue() < 0) {
                    try {
                        if (i4 == 1) {
                            try {
                                sQLitePreparedStatement = this.database.executeFast("UPDATE randoms_v2 SET mid = ? WHERE random_id = ? AND mid = ?");
                                try {
                                    sQLitePreparedStatement.bindInteger(1, i);
                                    sQLiteCursor2 = sQLiteCursor;
                                } catch (Exception e5) {
                                    e = e5;
                                    sQLiteCursor2 = sQLiteCursor;
                                }
                                try {
                                    sQLitePreparedStatement.bindLong(2, j);
                                    sQLitePreparedStatement.bindInteger(3, intValue);
                                    sQLitePreparedStatement.step();
                                    j3 = sQLitePreparedStatement;
                                } catch (Exception e6) {
                                    e = e6;
                                    checkSQLException(e);
                                    j3 = sQLitePreparedStatement;
                                }
                            } catch (Exception e7) {
                                e = e7;
                                sQLiteCursor2 = sQLiteCursor;
                                sQLitePreparedStatement = null;
                            } catch (Throwable th3) {
                                th = th3;
                                throw th;
                            }
                            j3.dispose();
                            if (i4 != -1 || i4 == 0) {
                                sQLiteCursor3 = this.database.queryFinalized(String.format(Locale.US, "SELECT uid FROM messages_v2 WHERE mid = %d LIMIT 1", Integer.valueOf(intValue)), new Object[0]);
                                if (sQLiteCursor3.next()) {
                                    j5 = sQLiteCursor3.longValue(0);
                                    i4 = 0;
                                } else {
                                    j5 = 0;
                                }
                                sQLiteCursor3.dispose();
                                j6 = j5;
                                int i5 = i4 != -1 ? 1 : 1;
                                SQLiteDatabase sQLiteDatabase22 = this.database;
                                Locale locale22 = Locale.US;
                                Object[] objArr22 = new Object[i5];
                                objArr22[0] = Integer.valueOf(intValue);
                                sQLiteCursor3 = sQLiteDatabase22.queryFinalized(String.format(locale22, "SELECT uid FROM scheduled_messages_v2 WHERE mid = %d LIMIT 1", objArr22), new Object[0]);
                                if (sQLiteCursor3.next()) {
                                    j6 = sQLiteCursor3.longValue(0);
                                    i4 = 1;
                                }
                                sQLiteCursor3.dispose();
                                j7 = j6;
                                if (j7 == 0) {
                                    return null;
                                }
                                if (intValue == i && i2 != 0) {
                                    try {
                                        if (i4 == 0) {
                                            executeFast = this.database.executeFast("UPDATE messages_v2 SET send_state = 0, date = ? WHERE mid = ? AND uid = ?");
                                        } else {
                                            executeFast = this.database.executeFast("UPDATE scheduled_messages_v2 SET send_state = 0, date = ? WHERE mid = ? AND uid = ?");
                                        }
                                        SQLitePreparedStatement sQLitePreparedStatement11 = executeFast;
                                        try {
                                            sQLitePreparedStatement11.bindInteger(1, i2);
                                            sQLitePreparedStatement11.bindInteger(2, i);
                                            sQLitePreparedStatement11.bindLong(3, j7);
                                            sQLitePreparedStatement11.step();
                                            if (i4 == 0) {
                                                sQLitePreparedStatement5 = this.database.executeFast("UPDATE messages_topics SET send_state = 0, date = ? WHERE mid = ? AND uid = ?");
                                                sQLitePreparedStatement5.bindInteger(1, i2);
                                                sQLitePreparedStatement5.bindInteger(2, i);
                                                sQLitePreparedStatement5.bindLong(3, j7);
                                                sQLitePreparedStatement5.step();
                                            }
                                            sQLitePreparedStatement11.dispose();
                                        } catch (Exception e8) {
                                            e = e8;
                                            sQLitePreparedStatement4 = sQLitePreparedStatement5;
                                            sQLitePreparedStatement6 = sQLitePreparedStatement11;
                                            try {
                                                checkSQLException(e);
                                                if (sQLitePreparedStatement6 != null) {
                                                    sQLitePreparedStatement6.dispose();
                                                }
                                                if (sQLitePreparedStatement4 != null) {
                                                    sQLitePreparedStatement4.dispose();
                                                }
                                                return new long[]{j7, i};
                                            } catch (Throwable th4) {
                                                th = th4;
                                                if (sQLitePreparedStatement6 != null) {
                                                    sQLitePreparedStatement6.dispose();
                                                }
                                                if (sQLitePreparedStatement4 != null) {
                                                    sQLitePreparedStatement4.dispose();
                                                }
                                                throw th;
                                            }
                                        } catch (Throwable th5) {
                                            th = th5;
                                            sQLitePreparedStatement4 = sQLitePreparedStatement5;
                                            sQLitePreparedStatement6 = sQLitePreparedStatement11;
                                            if (sQLitePreparedStatement6 != null) {
                                            }
                                            if (sQLitePreparedStatement4 != null) {
                                            }
                                            throw th;
                                        }
                                    } catch (Exception e9) {
                                        e = e9;
                                        sQLitePreparedStatement4 = null;
                                    } catch (Throwable th6) {
                                        th = th6;
                                        sQLitePreparedStatement4 = null;
                                    }
                                    return new long[]{j7, i};
                                }
                                try {
                                    if (i4 == 0) {
                                        try {
                                            sQLitePreparedStatement3 = this.database.executeFast("UPDATE messages_v2 SET mid = ?, send_state = 0 WHERE mid = ? AND uid = ?");
                                        } catch (Exception unused) {
                                            sQLitePreparedStatement3 = null;
                                            sQLitePreparedStatement2 = null;
                                        } catch (Throwable th7) {
                                            th = th7;
                                            sQLitePreparedStatement2 = null;
                                            if (sQLitePreparedStatement8 != null) {
                                            }
                                            if (sQLitePreparedStatement2 != null) {
                                            }
                                            throw th;
                                        }
                                        try {
                                            sQLitePreparedStatement3.bindInteger(1, i);
                                            sQLitePreparedStatement3.bindInteger(2, intValue);
                                            sQLitePreparedStatement3.bindLong(3, j7);
                                            sQLitePreparedStatement3.step();
                                            sQLitePreparedStatement2 = this.database.executeFast("UPDATE messages_topics SET mid = ?, send_state = 0 WHERE mid = ? AND uid = ?");
                                            try {
                                                try {
                                                    sQLitePreparedStatement2.bindInteger(1, i);
                                                    sQLitePreparedStatement2.bindInteger(2, intValue);
                                                    sQLitePreparedStatement2.bindLong(3, j7);
                                                    sQLitePreparedStatement2.step();
                                                    sQLitePreparedStatement3.dispose();
                                                    sQLitePreparedStatement2.dispose();
                                                    sQLitePreparedStatement3 = null;
                                                } catch (Exception unused2) {
                                                    try {
                                                        try {
                                                            SQLiteDatabase sQLiteDatabase3 = this.database;
                                                            Locale locale3 = Locale.US;
                                                            sQLiteDatabase3.executeFast(String.format(locale3, "DELETE FROM messages_v2 WHERE mid = %d AND uid = %d", Integer.valueOf(intValue), Long.valueOf(j7))).stepThis().dispose();
                                                            this.database.executeFast(String.format(locale3, "DELETE FROM messages_seq WHERE mid = %d", Integer.valueOf(intValue))).stepThis().dispose();
                                                            this.database.executeFast(String.format(locale3, "DELETE FROM messages_topics WHERE mid = %d AND uid = %d", Integer.valueOf(intValue), Long.valueOf(j7))).stepThis().dispose();
                                                        } catch (Exception e10) {
                                                            checkSQLException(e10);
                                                            if (sQLitePreparedStatement3 != null) {
                                                            }
                                                            if (sQLitePreparedStatement2 != null) {
                                                            }
                                                            sQLitePreparedStatement3 = this.database.executeFast("UPDATE media_v4 SET mid = ? WHERE mid = ? AND uid = ?");
                                                            sQLitePreparedStatement3.bindInteger(1, i);
                                                            sQLitePreparedStatement3.bindInteger(2, intValue);
                                                            sQLitePreparedStatement3.bindLong(3, j7);
                                                            sQLitePreparedStatement3.step();
                                                            sQLitePreparedStatement3.dispose();
                                                            sQLitePreparedStatement3 = null;
                                                            try {
                                                                sQLitePreparedStatement3 = this.database.executeFast("UPDATE media_topics SET mid = ? WHERE mid = ? AND uid = ?");
                                                                sQLitePreparedStatement3.bindInteger(1, i);
                                                                sQLitePreparedStatement3.bindInteger(2, intValue);
                                                                sQLitePreparedStatement3.bindLong(3, j7);
                                                                sQLitePreparedStatement3.step();
                                                            } catch (Exception e11) {
                                                                checkSQLException(e11);
                                                                if (sQLitePreparedStatement3 == null) {
                                                                    sQLitePreparedStatement7 = sQLitePreparedStatement3;
                                                                    sQLitePreparedStatement7 = this.database.executeFast("UPDATE dialogs SET last_mid = ? WHERE last_mid = ?");
                                                                    sQLitePreparedStatement7.bindInteger(1, i);
                                                                    sQLitePreparedStatement7.bindInteger(2, intValue);
                                                                    sQLitePreparedStatement7.step();
                                                                    sQLitePreparedStatement7.dispose();
                                                                    return new long[]{j7, num2.intValue()};
                                                                }
                                                                sQLitePreparedStatement3.dispose();
                                                                sQLitePreparedStatement7 = this.database.executeFast("UPDATE dialogs SET last_mid = ? WHERE last_mid = ?");
                                                                sQLitePreparedStatement7.bindInteger(1, i);
                                                                sQLitePreparedStatement7.bindInteger(2, intValue);
                                                                sQLitePreparedStatement7.step();
                                                                sQLitePreparedStatement7.dispose();
                                                                return new long[]{j7, num2.intValue()};
                                                            }
                                                            sQLitePreparedStatement3.dispose();
                                                            sQLitePreparedStatement7 = this.database.executeFast("UPDATE dialogs SET last_mid = ? WHERE last_mid = ?");
                                                            sQLitePreparedStatement7.bindInteger(1, i);
                                                            sQLitePreparedStatement7.bindInteger(2, intValue);
                                                            sQLitePreparedStatement7.step();
                                                            sQLitePreparedStatement7.dispose();
                                                            return new long[]{j7, num2.intValue()};
                                                        }
                                                        sQLitePreparedStatement3 = this.database.executeFast("UPDATE media_v4 SET mid = ? WHERE mid = ? AND uid = ?");
                                                        sQLitePreparedStatement3.bindInteger(1, i);
                                                        sQLitePreparedStatement3.bindInteger(2, intValue);
                                                        sQLitePreparedStatement3.bindLong(3, j7);
                                                        sQLitePreparedStatement3.step();
                                                        sQLitePreparedStatement3.dispose();
                                                        sQLitePreparedStatement3 = null;
                                                        try {
                                                            sQLitePreparedStatement3 = this.database.executeFast("UPDATE media_topics SET mid = ? WHERE mid = ? AND uid = ?");
                                                            sQLitePreparedStatement3.bindInteger(1, i);
                                                            sQLitePreparedStatement3.bindInteger(2, intValue);
                                                            sQLitePreparedStatement3.bindLong(3, j7);
                                                            sQLitePreparedStatement3.step();
                                                            sQLitePreparedStatement3.dispose();
                                                            try {
                                                                sQLitePreparedStatement7 = this.database.executeFast("UPDATE dialogs SET last_mid = ? WHERE last_mid = ?");
                                                                sQLitePreparedStatement7.bindInteger(1, i);
                                                                sQLitePreparedStatement7.bindInteger(2, intValue);
                                                                sQLitePreparedStatement7.step();
                                                            } catch (Exception e12) {
                                                                checkSQLException(e12);
                                                            }
                                                            sQLitePreparedStatement7.dispose();
                                                            return new long[]{j7, num2.intValue()};
                                                        } finally {
                                                            if (sQLitePreparedStatement3 != null) {
                                                                sQLitePreparedStatement3.dispose();
                                                            }
                                                        }
                                                    } finally {
                                                        if (sQLitePreparedStatement3 != null) {
                                                            sQLitePreparedStatement3.dispose();
                                                        }
                                                    }
                                                    if (sQLitePreparedStatement3 != null) {
                                                        sQLitePreparedStatement3.dispose();
                                                        sQLitePreparedStatement3 = null;
                                                    }
                                                    if (sQLitePreparedStatement2 != null) {
                                                        sQLitePreparedStatement2.dispose();
                                                    }
                                                }
                                            } catch (Throwable th8) {
                                                th = th8;
                                                sQLitePreparedStatement8 = sQLitePreparedStatement3;
                                                if (sQLitePreparedStatement8 != null) {
                                                    sQLitePreparedStatement8.dispose();
                                                }
                                                if (sQLitePreparedStatement2 != null) {
                                                    sQLitePreparedStatement2.dispose();
                                                }
                                                throw th;
                                            }
                                        } catch (Exception unused3) {
                                            sQLitePreparedStatement2 = null;
                                        } catch (Throwable th9) {
                                            th = th9;
                                            sQLitePreparedStatement2 = null;
                                            sQLitePreparedStatement8 = sQLitePreparedStatement3;
                                            if (sQLitePreparedStatement8 != null) {
                                            }
                                            if (sQLitePreparedStatement2 != null) {
                                            }
                                            throw th;
                                        }
                                        try {
                                            sQLitePreparedStatement3 = this.database.executeFast("UPDATE media_v4 SET mid = ? WHERE mid = ? AND uid = ?");
                                            sQLitePreparedStatement3.bindInteger(1, i);
                                            sQLitePreparedStatement3.bindInteger(2, intValue);
                                            sQLitePreparedStatement3.bindLong(3, j7);
                                            sQLitePreparedStatement3.step();
                                        } catch (Exception unused4) {
                                            this.database.executeFast(String.format(Locale.US, "DELETE FROM media_v4 WHERE mid = %d AND uid = %d", Integer.valueOf(intValue), Long.valueOf(j7))).stepThis().dispose();
                                        }
                                        sQLitePreparedStatement3.dispose();
                                        sQLitePreparedStatement3 = null;
                                        try {
                                            try {
                                                sQLitePreparedStatement3 = this.database.executeFast("UPDATE media_topics SET mid = ? WHERE mid = ? AND uid = ?");
                                                sQLitePreparedStatement3.bindInteger(1, i);
                                                sQLitePreparedStatement3.bindInteger(2, intValue);
                                                sQLitePreparedStatement3.bindLong(3, j7);
                                                sQLitePreparedStatement3.step();
                                            } catch (Exception unused5) {
                                                this.database.executeFast(String.format(Locale.US, "DELETE FROM media_topics WHERE mid = %d AND uid = %d", Integer.valueOf(intValue), Long.valueOf(j7))).stepThis().dispose();
                                                if (sQLitePreparedStatement3 == null) {
                                                }
                                                sQLitePreparedStatement3.dispose();
                                                sQLitePreparedStatement7 = this.database.executeFast("UPDATE dialogs SET last_mid = ? WHERE last_mid = ?");
                                                sQLitePreparedStatement7.bindInteger(1, i);
                                                sQLitePreparedStatement7.bindInteger(2, intValue);
                                                sQLitePreparedStatement7.step();
                                                sQLitePreparedStatement7.dispose();
                                                return new long[]{j7, num2.intValue()};
                                            }
                                            sQLitePreparedStatement7 = this.database.executeFast("UPDATE dialogs SET last_mid = ? WHERE last_mid = ?");
                                            sQLitePreparedStatement7.bindInteger(1, i);
                                            sQLitePreparedStatement7.bindInteger(2, intValue);
                                            sQLitePreparedStatement7.step();
                                            sQLitePreparedStatement7.dispose();
                                        } catch (Throwable th10) {
                                            if (sQLitePreparedStatement7 != null) {
                                                sQLitePreparedStatement7.dispose();
                                            }
                                            throw th10;
                                        }
                                        sQLitePreparedStatement3.dispose();
                                    } else {
                                        try {
                                            try {
                                                sQLitePreparedStatement9 = this.database.executeFast("UPDATE scheduled_messages_v2 SET mid = ?, send_state = 0 WHERE mid = ? AND uid = ?");
                                                sQLitePreparedStatement9.bindInteger(1, i);
                                                sQLitePreparedStatement9.bindInteger(2, intValue);
                                                sQLitePreparedStatement9.bindLong(3, j7);
                                                sQLitePreparedStatement9.step();
                                            } catch (Exception e13) {
                                                checkSQLException(e13);
                                            }
                                        } catch (Exception unused6) {
                                            this.database.executeFast(String.format(Locale.US, "DELETE FROM scheduled_messages_v2 WHERE mid = %d AND uid = %d", Integer.valueOf(intValue), Long.valueOf(j7))).stepThis().dispose();
                                        }
                                        sQLitePreparedStatement9.dispose();
                                    }
                                    return new long[]{j7, num2.intValue()};
                                } finally {
                                    if (sQLitePreparedStatement9 != null) {
                                        sQLitePreparedStatement9.dispose();
                                    }
                                }
                            }
                            sQLiteCursor3 = sQLiteCursor2;
                            j6 = 0;
                            if (i4 != -1) {
                            }
                            SQLiteDatabase sQLiteDatabase222 = this.database;
                            Locale locale222 = Locale.US;
                            Object[] objArr222 = new Object[i5];
                            objArr222[0] = Integer.valueOf(intValue);
                            sQLiteCursor3 = sQLiteDatabase222.queryFinalized(String.format(locale222, "SELECT uid FROM scheduled_messages_v2 WHERE mid = %d LIMIT 1", objArr222), new Object[0]);
                            if (sQLiteCursor3.next()) {
                            }
                            sQLiteCursor3.dispose();
                            j7 = j6;
                            if (j7 == 0) {
                            }
                        }
                    } catch (Throwable th11) {
                        th = th11;
                        sQLitePreparedStatement10 = j3;
                    }
                }
                SQLiteDatabase sQLiteDatabase2222 = this.database;
                Locale locale2222 = Locale.US;
                Object[] objArr2222 = new Object[i5];
                objArr2222[0] = Integer.valueOf(intValue);
                sQLiteCursor3 = sQLiteDatabase2222.queryFinalized(String.format(locale2222, "SELECT uid FROM scheduled_messages_v2 WHERE mid = %d LIMIT 1", objArr2222), new Object[0]);
                if (sQLiteCursor3.next()) {
                }
                sQLiteCursor3.dispose();
                j7 = j6;
                if (j7 == 0) {
                }
            } catch (Throwable th12) {
                if (sQLiteCursor3 != null) {
                    sQLiteCursor3.dispose();
                }
                throw th12;
            }
            if (sQLiteCursor3.next()) {
            }
            sQLiteCursor3.dispose();
            j6 = j5;
            if (i4 != -1) {
            }
        } catch (Throwable th13) {
            th = th13;
            if (sQLiteCursor3 != null) {
                sQLiteCursor3.dispose();
            }
            throw th;
        }
        sQLiteCursor2 = sQLiteCursor;
        if (num2.intValue() > 0) {
            TLRPC$TL_updateDeleteScheduledMessages tLRPC$TL_updateDeleteScheduledMessages = new TLRPC$TL_updateDeleteScheduledMessages();
            tLRPC$TL_updateDeleteScheduledMessages.messages.add(Integer.valueOf(intValue));
            if (DialogObject.isChatDialog(j3)) {
                TLRPC$TL_peerChannel tLRPC$TL_peerChannel = new TLRPC$TL_peerChannel();
                tLRPC$TL_updateDeleteScheduledMessages.peer = tLRPC$TL_peerChannel;
                tLRPC$TL_peerChannel.channel_id = -j3;
            } else {
                TLRPC$TL_peerUser tLRPC$TL_peerUser = new TLRPC$TL_peerUser();
                tLRPC$TL_updateDeleteScheduledMessages.peer = tLRPC$TL_peerUser;
                tLRPC$TL_peerUser.user_id = j3;
            }
            final TLRPC$TL_updates tLRPC$TL_updates = new TLRPC$TL_updates();
            tLRPC$TL_updates.updates.add(tLRPC$TL_updateDeleteScheduledMessages);
            Utilities.stageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda190
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesStorage.this.lambda$updateMessageStateAndIdInternal$176(tLRPC$TL_updates);
                }
            });
            try {
                this.database.executeFast(String.format(Locale.US, "DELETE FROM randoms_v2 WHERE random_id = %d AND mid = %d AND uid = %d", Long.valueOf(j), num2, Long.valueOf((long) j3))).stepThis().dispose();
            } catch (Exception e14) {
                checkSQLException(e14);
            }
            return null;
        }
        if (i4 != -1) {
        }
        sQLiteCursor3 = this.database.queryFinalized(String.format(Locale.US, "SELECT uid FROM messages_v2 WHERE mid = %d LIMIT 1", Integer.valueOf(intValue)), new Object[0]);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateMessageStateAndIdInternal$176(TLRPC$TL_updates tLRPC$TL_updates) {
        getMessagesController().processUpdates(tLRPC$TL_updates, false);
    }

    public long[] updateMessageStateAndId(final long j, final long j2, final Integer num, final int i, final int i2, boolean z, final int i3) {
        if (z) {
            this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda94
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesStorage.this.lambda$updateMessageStateAndId$177(j, j2, num, i, i2, i3);
                }
            });
            return null;
        }
        return lambda$updateMessageStateAndId$177(j, j2, num, i, i2, i3);
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* renamed from: updateUsersInternal */
    public void lambda$updateUsers$178(ArrayList<TLRPC$User> arrayList, boolean z, boolean z2) {
        SQLitePreparedStatement sQLitePreparedStatement = null;
        try {
            try {
                if (z) {
                    if (z2) {
                        this.database.beginTransaction();
                    }
                    SQLitePreparedStatement executeFast = this.database.executeFast("UPDATE users SET status = ? WHERE uid = ?");
                    try {
                        int size = arrayList.size();
                        for (int i = 0; i < size; i++) {
                            TLRPC$User tLRPC$User = arrayList.get(i);
                            executeFast.requery();
                            TLRPC$UserStatus tLRPC$UserStatus = tLRPC$User.status;
                            if (tLRPC$UserStatus != null) {
                                executeFast.bindInteger(1, tLRPC$UserStatus.expires);
                            } else {
                                executeFast.bindInteger(1, 0);
                            }
                            executeFast.bindLong(2, tLRPC$User.id);
                            executeFast.step();
                        }
                        executeFast.dispose();
                        if (z2) {
                            this.database.commitTransaction();
                        }
                    } catch (Exception e) {
                        e = e;
                        sQLitePreparedStatement = executeFast;
                        checkSQLException(e);
                        SQLiteDatabase sQLiteDatabase = this.database;
                        if (sQLiteDatabase != null) {
                            sQLiteDatabase.commitTransaction();
                        }
                        if (sQLitePreparedStatement != null) {
                            sQLitePreparedStatement.dispose();
                            return;
                        }
                        return;
                    } catch (Throwable th) {
                        th = th;
                        sQLitePreparedStatement = executeFast;
                        SQLiteDatabase sQLiteDatabase2 = this.database;
                        if (sQLiteDatabase2 != null) {
                            sQLiteDatabase2.commitTransaction();
                        }
                        if (sQLitePreparedStatement != null) {
                            sQLitePreparedStatement.dispose();
                        }
                        throw th;
                    }
                } else {
                    StringBuilder sb = new StringBuilder();
                    LongSparseArray longSparseArray = new LongSparseArray();
                    int size2 = arrayList.size();
                    for (int i2 = 0; i2 < size2; i2++) {
                        TLRPC$User tLRPC$User2 = arrayList.get(i2);
                        if (sb.length() != 0) {
                            sb.append(",");
                        }
                        sb.append(tLRPC$User2.id);
                        longSparseArray.put(tLRPC$User2.id, tLRPC$User2);
                    }
                    ArrayList<TLRPC$User> arrayList2 = new ArrayList<>();
                    getUsersInternal(sb.toString(), arrayList2);
                    int size3 = arrayList2.size();
                    for (int i3 = 0; i3 < size3; i3++) {
                        TLRPC$User tLRPC$User3 = arrayList2.get(i3);
                        TLRPC$User tLRPC$User4 = (TLRPC$User) longSparseArray.get(tLRPC$User3.id);
                        if (tLRPC$User4 != null) {
                            if (tLRPC$User4.first_name != null && tLRPC$User4.last_name != null) {
                                if (!UserObject.isContact(tLRPC$User3)) {
                                    tLRPC$User3.first_name = tLRPC$User4.first_name;
                                    tLRPC$User3.last_name = tLRPC$User4.last_name;
                                }
                                tLRPC$User3.username = tLRPC$User4.username;
                            } else {
                                TLRPC$UserProfilePhoto tLRPC$UserProfilePhoto = tLRPC$User4.photo;
                                if (tLRPC$UserProfilePhoto != null) {
                                    tLRPC$User3.photo = tLRPC$UserProfilePhoto;
                                } else {
                                    String str = tLRPC$User4.phone;
                                    if (str != null) {
                                        tLRPC$User3.phone = str;
                                    }
                                }
                            }
                        }
                    }
                    if (!arrayList2.isEmpty()) {
                        if (z2) {
                            this.database.beginTransaction();
                        }
                        putUsersInternal(arrayList2);
                        if (z2) {
                            this.database.commitTransaction();
                        }
                    }
                }
                SQLiteDatabase sQLiteDatabase3 = this.database;
                if (sQLiteDatabase3 != null) {
                    sQLiteDatabase3.commitTransaction();
                }
            } catch (Exception e2) {
                e = e2;
            }
        } catch (Throwable th2) {
            th = th2;
        }
    }

    public void updateUsers(final ArrayList<TLRPC$User> arrayList, final boolean z, final boolean z2, boolean z3) {
        if (arrayList == null || arrayList.isEmpty()) {
            return;
        }
        if (z3) {
            this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda160
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesStorage.this.lambda$updateUsers$178(arrayList, z, z2);
                }
            });
        } else {
            lambda$updateUsers$178(arrayList, z, z2);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:40:0x00e6  */
    /* JADX WARN: Removed duplicated region for block: B:44:0x00ed  */
    /* JADX WARN: Removed duplicated region for block: B:61:? A[RETURN, SYNTHETIC] */
    /* renamed from: markMessagesAsReadInternal */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void lambda$markMessagesAsRead$180(LongSparseIntArray longSparseIntArray, LongSparseIntArray longSparseIntArray2, SparseIntArray sparseIntArray) {
        SQLitePreparedStatement sQLitePreparedStatement;
        try {
            if (!isEmpty(longSparseIntArray)) {
                SQLitePreparedStatement executeFast = this.database.executeFast("DELETE FROM unread_push_messages WHERE uid = ? AND mid <= ?");
                for (int i = 0; i < longSparseIntArray.size(); i++) {
                    try {
                        long keyAt = longSparseIntArray.keyAt(i);
                        int i2 = longSparseIntArray.get(keyAt);
                        this.database.executeFast(String.format(Locale.US, "UPDATE messages_v2 SET read_state = read_state | 1 WHERE uid = %d AND mid > 0 AND mid <= %d AND read_state IN(0,2) AND out = 0", Long.valueOf(keyAt), Integer.valueOf(i2))).stepThis().dispose();
                        executeFast.requery();
                        executeFast.bindLong(1, keyAt);
                        executeFast.bindInteger(2, i2);
                        executeFast.step();
                    } catch (Exception e) {
                        e = e;
                        sQLitePreparedStatement = executeFast;
                        try {
                            checkSQLException(e);
                            if (sQLitePreparedStatement == null) {
                            }
                        } catch (Throwable th) {
                            th = th;
                            if (sQLitePreparedStatement != null) {
                                sQLitePreparedStatement.dispose();
                            }
                            throw th;
                        }
                    } catch (Throwable th2) {
                        th = th2;
                        sQLitePreparedStatement = executeFast;
                        if (sQLitePreparedStatement != null) {
                        }
                        throw th;
                    }
                }
                executeFast.dispose();
            }
            if (!isEmpty(longSparseIntArray2)) {
                for (int i3 = 0; i3 < longSparseIntArray2.size(); i3++) {
                    long keyAt2 = longSparseIntArray2.keyAt(i3);
                    this.database.executeFast(String.format(Locale.US, "UPDATE messages_v2 SET read_state = read_state | 1 WHERE uid = %d AND mid > 0 AND mid <= %d AND read_state IN(0,2) AND out = 1", Long.valueOf(keyAt2), Integer.valueOf(longSparseIntArray2.get(keyAt2)))).stepThis().dispose();
                }
            }
            if (sparseIntArray == null || isEmpty(sparseIntArray)) {
                return;
            }
            for (int i4 = 0; i4 < sparseIntArray.size(); i4++) {
                long makeEncryptedDialogId = DialogObject.makeEncryptedDialogId(sparseIntArray.keyAt(i4));
                int valueAt = sparseIntArray.valueAt(i4);
                SQLitePreparedStatement executeFast2 = this.database.executeFast("UPDATE messages_v2 SET read_state = read_state | 1 WHERE uid = ? AND date <= ? AND read_state IN(0,2) AND out = 1");
                try {
                    executeFast2.requery();
                    executeFast2.bindLong(1, makeEncryptedDialogId);
                    executeFast2.bindInteger(2, valueAt);
                    executeFast2.step();
                    executeFast2.dispose();
                } catch (Exception e2) {
                    e = e2;
                    sQLitePreparedStatement = executeFast2;
                    checkSQLException(e);
                    if (sQLitePreparedStatement == null) {
                        sQLitePreparedStatement.dispose();
                        return;
                    }
                    return;
                } catch (Throwable th3) {
                    th = th3;
                    sQLitePreparedStatement = executeFast2;
                    if (sQLitePreparedStatement != null) {
                    }
                    throw th;
                }
            }
        } catch (Exception e3) {
            e = e3;
            sQLitePreparedStatement = null;
        } catch (Throwable th4) {
            th = th4;
            sQLitePreparedStatement = null;
        }
    }

    private void markMessagesContentAsReadInternal(long j, ArrayList<Integer> arrayList, int i) {
        SQLiteCursor sQLiteCursor = null;
        ArrayList<Integer> arrayList2 = null;
        sQLiteCursor = null;
        try {
            try {
                String join = TextUtils.join(",", arrayList);
                SQLiteDatabase sQLiteDatabase = this.database;
                Locale locale = Locale.US;
                sQLiteDatabase.executeFast(String.format(locale, "UPDATE messages_v2 SET read_state = read_state | 2 WHERE mid IN (%s) AND uid = %d", join, Long.valueOf(j))).stepThis().dispose();
                if (i != 0) {
                    SQLiteCursor queryFinalized = this.database.queryFinalized(String.format(locale, "SELECT mid, ttl FROM messages_v2 WHERE mid IN (%s) AND uid = %d AND ttl > 0", join, Long.valueOf(j)), new Object[0]);
                    while (queryFinalized.next()) {
                        try {
                            if (arrayList2 == null) {
                                arrayList2 = new ArrayList<>();
                            }
                            arrayList2.add(Integer.valueOf(queryFinalized.intValue(0)));
                        } catch (Exception e) {
                            e = e;
                            sQLiteCursor = queryFinalized;
                            checkSQLException(e);
                            if (sQLiteCursor != null) {
                                sQLiteCursor.dispose();
                                return;
                            }
                            return;
                        } catch (Throwable th) {
                            th = th;
                            sQLiteCursor = queryFinalized;
                            if (sQLiteCursor != null) {
                                sQLiteCursor.dispose();
                            }
                            throw th;
                        }
                    }
                    if (arrayList2 != null) {
                        emptyMessagesMedia(j, arrayList2);
                    }
                    queryFinalized.dispose();
                }
            } catch (Exception e2) {
                e = e2;
            }
        } catch (Throwable th2) {
            th = th2;
        }
    }

    public void markMessagesContentAsRead(final long j, final ArrayList<Integer> arrayList, final int i) {
        if (isEmpty(arrayList)) {
            return;
        }
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda104
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$markMessagesContentAsRead$179(j, arrayList, i);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:28:0x007c  */
    /* JADX WARN: Type inference failed for: r9v1 */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$markMessagesContentAsRead$179(long j, ArrayList arrayList, int i) {
        Throwable th;
        SQLiteCursor sQLiteCursor;
        Exception e;
        if (j == 0) {
            try {
                try {
                    LongSparseArray longSparseArray = new LongSparseArray();
                    sQLiteCursor = this.database.queryFinalized(String.format(Locale.US, "SELECT uid, mid FROM messages_v2 WHERE mid IN (%s) AND is_channel = 0", TextUtils.join(",", arrayList)), new Object[0]);
                    while (sQLiteCursor.next()) {
                        try {
                            long longValue = sQLiteCursor.longValue(0);
                            ArrayList arrayList2 = (ArrayList) longSparseArray.get(longValue);
                            if (arrayList2 == null) {
                                arrayList2 = new ArrayList();
                                longSparseArray.put(longValue, arrayList2);
                            }
                            arrayList2.add(Integer.valueOf(sQLiteCursor.intValue(1)));
                        } catch (Exception e2) {
                            e = e2;
                            checkSQLException(e);
                            if (sQLiteCursor != null) {
                                sQLiteCursor.dispose();
                                return;
                            }
                            return;
                        }
                    }
                    sQLiteCursor.dispose();
                    int size = longSparseArray.size();
                    for (int i2 = 0; i2 < size; i2++) {
                        markMessagesContentAsReadInternal(longSparseArray.keyAt(i2), (ArrayList) longSparseArray.valueAt(i2), i);
                    }
                } catch (Throwable th2) {
                    th = th2;
                    if (arrayList != 0) {
                        arrayList.dispose();
                    }
                    throw th;
                }
            } catch (Exception e3) {
                sQLiteCursor = null;
                e = e3;
            } catch (Throwable th3) {
                arrayList = 0;
                th = th3;
                if (arrayList != 0) {
                }
                throw th;
            }
        } else {
            markMessagesContentAsReadInternal(j, arrayList, i);
        }
    }

    public void markMessagesAsRead(final LongSparseIntArray longSparseIntArray, final LongSparseIntArray longSparseIntArray2, final SparseIntArray sparseIntArray, boolean z) {
        if (z) {
            this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda168
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesStorage.this.lambda$markMessagesAsRead$180(longSparseIntArray, longSparseIntArray2, sparseIntArray);
                }
            });
        } else {
            lambda$markMessagesAsRead$180(longSparseIntArray, longSparseIntArray2, sparseIntArray);
        }
    }

    public void markMessagesAsDeletedByRandoms(final ArrayList<Long> arrayList) {
        if (arrayList.isEmpty()) {
            return;
        }
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda142
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$markMessagesAsDeletedByRandoms$182(arrayList);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$markMessagesAsDeletedByRandoms$182(ArrayList arrayList) {
        SQLiteCursor queryFinalized;
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT mid, uid FROM randoms_v2 WHERE random_id IN(%s)", TextUtils.join(",", arrayList)), new Object[0]);
            } catch (Throwable th) {
                th = th;
            }
        } catch (Exception e) {
            e = e;
        }
        try {
            LongSparseArray longSparseArray = new LongSparseArray();
            while (queryFinalized.next()) {
                long longValue = queryFinalized.longValue(1);
                ArrayList arrayList2 = (ArrayList) longSparseArray.get(longValue);
                if (arrayList2 == null) {
                    arrayList2 = new ArrayList();
                    longSparseArray.put(longValue, arrayList2);
                }
                arrayList2.add(Integer.valueOf(queryFinalized.intValue(0)));
            }
            queryFinalized.dispose();
            if (longSparseArray.isEmpty()) {
                return;
            }
            int size = longSparseArray.size();
            for (int i = 0; i < size; i++) {
                long keyAt = longSparseArray.keyAt(i);
                final ArrayList<Integer> arrayList3 = (ArrayList) longSparseArray.valueAt(i);
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda148
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesStorage.this.lambda$markMessagesAsDeletedByRandoms$181(arrayList3);
                    }
                });
                updateDialogsWithReadMessagesInternal(arrayList3, null, null, null, null);
                lambda$markMessagesAsDeleted$186(keyAt, arrayList3, true, false);
                lambda$updateDialogsWithDeletedMessages$185(keyAt, 0L, arrayList3, null);
            }
        } catch (Exception e2) {
            e = e2;
            sQLiteCursor = queryFinalized;
            checkSQLException(e);
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
        } catch (Throwable th2) {
            th = th2;
            sQLiteCursor = queryFinalized;
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
            throw th;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$markMessagesAsDeletedByRandoms$181(ArrayList arrayList) {
        getNotificationCenter().postNotificationName(NotificationCenter.messagesDeleted, arrayList, 0L, Boolean.FALSE);
    }

    /* JADX INFO: Access modifiers changed from: protected */
    public void deletePushMessages(long j, ArrayList<Integer> arrayList) {
        try {
            this.database.executeFast(String.format(Locale.US, "DELETE FROM unread_push_messages WHERE uid = %d AND mid IN(%s)", Long.valueOf(j), TextUtils.join(",", arrayList))).stepThis().dispose();
        } catch (Exception e) {
            checkSQLException(e);
        }
    }

    private void broadcastScheduledMessagesChange(final Long l) {
        SQLiteCursor queryFinalized;
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT COUNT(mid) FROM scheduled_messages_v2 WHERE uid = %d", l), new Object[0]);
            } catch (Throwable th) {
                th = th;
            }
        } catch (Exception e) {
            e = e;
        }
        try {
            final int intValue = queryFinalized.next() ? queryFinalized.intValue(0) : 0;
            queryFinalized.dispose();
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda134
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesStorage.this.lambda$broadcastScheduledMessagesChange$183(l, intValue);
                }
            });
        } catch (Exception e2) {
            e = e2;
            sQLiteCursor = queryFinalized;
            checkSQLException(e);
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
        } catch (Throwable th2) {
            th = th2;
            sQLiteCursor = queryFinalized;
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
            throw th;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$broadcastScheduledMessagesChange$183(Long l, int i) {
        getNotificationCenter().postNotificationName(NotificationCenter.scheduledMessagesUpdated, l, Integer.valueOf(i));
    }

    /*  JADX ERROR: JadxRuntimeException in pass: BlockProcessor
        jadx.core.utils.exceptions.JadxRuntimeException: Unreachable block: B:288:0x06d5
        	at jadx.core.dex.visitors.blocks.BlockProcessor.checkForUnreachableBlocks(BlockProcessor.java:81)
        	at jadx.core.dex.visitors.blocks.BlockProcessor.processBlocksTree(BlockProcessor.java:47)
        	at jadx.core.dex.visitors.blocks.BlockProcessor.visit(BlockProcessor.java:39)
        */
    /* JADX INFO: Access modifiers changed from: private */
    /* renamed from: markMessagesAsDeletedInternal */
    public java.util.ArrayList<java.lang.Long> lambda$markMessagesAsDeleted$186(long r38, java.util.ArrayList<java.lang.Integer> r40, boolean r41, boolean r42) {
        /*
            Method dump skipped, instructions count: 3343
            To view this dump add '--comments-level debug' option
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesStorage.lambda$markMessagesAsDeleted$186(long, java.util.ArrayList, boolean, boolean):java.util.ArrayList");
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$markMessagesAsDeletedInternal$184(ArrayList arrayList) {
        getFileLoader().cancelLoadFiles(arrayList);
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:193:0x0414  */
    /* JADX WARN: Removed duplicated region for block: B:195:0x0419  */
    /* JADX WARN: Removed duplicated region for block: B:197:0x041e  */
    /* JADX WARN: Removed duplicated region for block: B:202:0x0427  */
    /* JADX WARN: Removed duplicated region for block: B:204:0x042c  */
    /* JADX WARN: Removed duplicated region for block: B:206:0x0431  */
    /* JADX WARN: Removed duplicated region for block: B:257:? A[RETURN, SYNTHETIC] */
    /* renamed from: updateDialogsWithDeletedMessagesInternal */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void lambda$updateDialogsWithDeletedMessages$185(long j, long j2, ArrayList<Integer> arrayList, ArrayList<Long> arrayList2) {
        SQLiteCursor sQLiteCursor;
        SQLitePreparedStatement sQLitePreparedStatement;
        SQLiteDatabase sQLiteDatabase;
        SQLiteDatabase sQLiteDatabase2;
        SQLitePreparedStatement sQLitePreparedStatement2;
        SQLiteCursor sQLiteCursor2;
        ArrayList<TLRPC$EncryptedChat> arrayList3;
        TLRPC$Dialog tLRPC$Dialog;
        NativeByteBuffer byteBufferValue;
        ArrayList<TLRPC$EncryptedChat> arrayList4;
        TLRPC$TL_dialog tLRPC$TL_dialog;
        SQLitePreparedStatement executeFast;
        long j3 = j2;
        try {
            ArrayList arrayList5 = new ArrayList();
            try {
                if (!arrayList.isEmpty()) {
                    if (j3 != 0) {
                        arrayList5.add(Long.valueOf(-j3));
                        executeFast = this.database.executeFast("UPDATE dialogs SET (last_mid, last_mid_group) = (SELECT mid, group_id FROM messages_v2 WHERE uid = ? AND date = (SELECT MAX(date) FROM messages_v2 WHERE uid = ?)) WHERE did = ?");
                    } else {
                        if (j == 0) {
                            SQLiteCursor queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT did FROM dialogs WHERE last_mid IN(%s) AND flags = 0", TextUtils.join(",", arrayList)), new Object[0]);
                            while (queryFinalized.next()) {
                                try {
                                    arrayList5.add(Long.valueOf(queryFinalized.longValue(0)));
                                } catch (Exception e) {
                                    e = e;
                                    sQLiteCursor = queryFinalized;
                                    sQLitePreparedStatement = null;
                                    try {
                                        checkSQLException(e);
                                        sQLiteDatabase2 = this.database;
                                        if (sQLiteDatabase2 != null) {
                                        }
                                        if (sQLiteCursor != null) {
                                        }
                                        if (sQLitePreparedStatement == null) {
                                        }
                                    } catch (Throwable th) {
                                        th = th;
                                        sQLiteDatabase = this.database;
                                        if (sQLiteDatabase != null) {
                                            sQLiteDatabase.commitTransaction();
                                        }
                                        if (sQLiteCursor != null) {
                                            sQLiteCursor.dispose();
                                        }
                                        if (sQLitePreparedStatement != null) {
                                            sQLitePreparedStatement.dispose();
                                        }
                                        throw th;
                                    }
                                } catch (Throwable th2) {
                                    th = th2;
                                    sQLiteCursor = queryFinalized;
                                    sQLitePreparedStatement = null;
                                    sQLiteDatabase = this.database;
                                    if (sQLiteDatabase != null) {
                                    }
                                    if (sQLiteCursor != null) {
                                    }
                                    if (sQLitePreparedStatement != null) {
                                    }
                                    throw th;
                                }
                            }
                            queryFinalized.dispose();
                        } else {
                            arrayList5.add(Long.valueOf(j));
                        }
                        executeFast = this.database.executeFast("UPDATE dialogs SET (last_mid, last_mid_group) = (SELECT mid, group_id FROM messages_v2 WHERE uid = ? AND date = (SELECT MAX(date) FROM messages_v2 WHERE uid = ? AND date != 0)) WHERE did = ?");
                    }
                    try {
                        this.database.beginTransaction();
                        for (int i = 0; i < arrayList5.size(); i++) {
                            long longValue = ((Long) arrayList5.get(i)).longValue();
                            executeFast.requery();
                            executeFast.bindLong(1, longValue);
                            executeFast.bindLong(2, longValue);
                            executeFast.bindLong(3, longValue);
                            executeFast.step();
                        }
                        executeFast.dispose();
                        this.database.commitTransaction();
                    } catch (Exception e2) {
                        e = e2;
                        sQLitePreparedStatement = executeFast;
                        sQLiteCursor = null;
                        checkSQLException(e);
                        sQLiteDatabase2 = this.database;
                        if (sQLiteDatabase2 != null) {
                        }
                        if (sQLiteCursor != null) {
                        }
                        if (sQLitePreparedStatement == null) {
                        }
                    } catch (Throwable th3) {
                        th = th3;
                        sQLitePreparedStatement = executeFast;
                        sQLiteCursor = null;
                        sQLiteDatabase = this.database;
                        if (sQLiteDatabase != null) {
                        }
                        if (sQLiteCursor != null) {
                        }
                        if (sQLitePreparedStatement != null) {
                        }
                        throw th;
                    }
                } else {
                    arrayList5.add(Long.valueOf(-j3));
                }
                if (arrayList2 != null) {
                    for (int i2 = 0; i2 < arrayList2.size(); i2++) {
                        Long l = arrayList2.get(i2);
                        if (!arrayList5.contains(l)) {
                            arrayList5.add(l);
                        }
                    }
                }
                String join = TextUtils.join(",", arrayList5);
                TLRPC$TL_messages_dialogs tLRPC$TL_messages_dialogs = new TLRPC$TL_messages_dialogs();
                ArrayList<TLRPC$EncryptedChat> arrayList6 = new ArrayList<>();
                ArrayList<Long> arrayList7 = new ArrayList<>();
                ArrayList arrayList8 = new ArrayList();
                ArrayList arrayList9 = new ArrayList();
                LongSparseArray longSparseArray = new LongSparseArray();
                SQLiteCursor queryFinalized2 = this.database.queryFinalized(String.format(Locale.US, "SELECT d.did, d.last_mid, d.unread_count, d.date, m.data, m.read_state, m.mid, m.send_state, m.date, d.pts, d.inbox_max, d.outbox_max, d.pinned, d.unread_count_i, d.flags, d.folder_id, d.data, d.unread_reactions, d.last_mid_group, d.ttl_period FROM dialogs as d LEFT JOIN messages_v2 as m ON d.last_mid = m.mid AND d.did = m.uid AND d.last_mid_group IS NULL WHERE d.did IN(%s)", join), new Object[0]);
                while (queryFinalized2.next()) {
                    try {
                        try {
                            long longValue2 = queryFinalized2.longValue(0);
                            if (DialogObject.isFolderDialogId(longValue2)) {
                                TLRPC$TL_dialogFolder tLRPC$TL_dialogFolder = new TLRPC$TL_dialogFolder();
                                if (queryFinalized2.isNull(16)) {
                                    arrayList4 = arrayList6;
                                    tLRPC$TL_dialog = tLRPC$TL_dialogFolder;
                                } else {
                                    NativeByteBuffer byteBufferValue2 = queryFinalized2.byteBufferValue(16);
                                    if (byteBufferValue2 != null) {
                                        arrayList4 = arrayList6;
                                        tLRPC$TL_dialogFolder.folder = TLRPC$TL_folder.TLdeserialize(byteBufferValue2, byteBufferValue2.readInt32(false), false);
                                        byteBufferValue2.reuse();
                                        tLRPC$TL_dialog = tLRPC$TL_dialogFolder;
                                    } else {
                                        arrayList4 = arrayList6;
                                        TLRPC$TL_folder tLRPC$TL_folder = new TLRPC$TL_folder();
                                        tLRPC$TL_dialogFolder.folder = tLRPC$TL_folder;
                                        tLRPC$TL_folder.id = queryFinalized2.intValue(15);
                                        tLRPC$TL_dialog = tLRPC$TL_dialogFolder;
                                    }
                                }
                            } else {
                                arrayList4 = arrayList6;
                                tLRPC$TL_dialog = new TLRPC$TL_dialog();
                            }
                            tLRPC$TL_dialog.id = longValue2;
                            tLRPC$TL_dialog.top_message = queryFinalized2.intValue(1);
                            tLRPC$TL_dialog.read_inbox_max_id = queryFinalized2.intValue(10);
                            tLRPC$TL_dialog.read_outbox_max_id = queryFinalized2.intValue(11);
                            tLRPC$TL_dialog.unread_count = queryFinalized2.intValue(2);
                            tLRPC$TL_dialog.unread_mentions_count = queryFinalized2.intValue(13);
                            tLRPC$TL_dialog.last_message_date = queryFinalized2.intValue(3);
                            tLRPC$TL_dialog.pts = queryFinalized2.intValue(9);
                            tLRPC$TL_dialog.flags = j3 == 0 ? 0 : 1;
                            int intValue = queryFinalized2.intValue(12);
                            tLRPC$TL_dialog.pinnedNum = intValue;
                            tLRPC$TL_dialog.pinned = intValue != 0;
                            tLRPC$TL_dialog.unread_mark = (queryFinalized2.intValue(14) & 1) != 0;
                            tLRPC$TL_dialog.folder_id = queryFinalized2.intValue(15);
                            tLRPC$TL_dialog.unread_reactions_count = queryFinalized2.intValue(17);
                            long longValue3 = queryFinalized2.longValue(18);
                            if (longValue3 != 0) {
                                longSparseArray.put(longValue2, Long.valueOf(longValue3));
                            }
                            tLRPC$TL_dialog.ttl_period = queryFinalized2.intValue(19);
                            tLRPC$TL_messages_dialogs.dialogs.add(tLRPC$TL_dialog);
                            NativeByteBuffer byteBufferValue3 = queryFinalized2.byteBufferValue(4);
                            if (byteBufferValue3 != null) {
                                TLRPC$Message TLdeserialize = TLRPC$Message.TLdeserialize(byteBufferValue3, byteBufferValue3.readInt32(false), false);
                                TLdeserialize.readAttachPath(byteBufferValue3, getUserConfig().clientUserId);
                                byteBufferValue3.reuse();
                                MessageObject.setUnreadFlags(TLdeserialize, queryFinalized2.intValue(5));
                                TLdeserialize.id = queryFinalized2.intValue(6);
                                TLdeserialize.send_state = queryFinalized2.intValue(7);
                                int intValue2 = queryFinalized2.intValue(8);
                                if (intValue2 != 0) {
                                    tLRPC$TL_dialog.last_message_date = intValue2;
                                }
                                TLdeserialize.dialog_id = tLRPC$TL_dialog.id;
                                tLRPC$TL_messages_dialogs.messages.add(TLdeserialize);
                                addUsersAndChatsFromMessage(TLdeserialize, arrayList7, arrayList8, null);
                            }
                            if (!DialogObject.isEncryptedDialog(longValue2) && tLRPC$TL_dialog.read_inbox_max_id > tLRPC$TL_dialog.top_message) {
                                tLRPC$TL_dialog.read_inbox_max_id = 0;
                            }
                            if (DialogObject.isEncryptedDialog(longValue2)) {
                                int encryptedChatId = DialogObject.getEncryptedChatId(longValue2);
                                if (!arrayList9.contains(Integer.valueOf(encryptedChatId))) {
                                    arrayList9.add(Integer.valueOf(encryptedChatId));
                                }
                            } else if (DialogObject.isUserDialog(longValue2)) {
                                if (!arrayList7.contains(Long.valueOf(longValue2))) {
                                    arrayList7.add(Long.valueOf(longValue2));
                                }
                            } else {
                                long j4 = -longValue2;
                                if (!arrayList8.contains(Long.valueOf(j4))) {
                                    arrayList8.add(Long.valueOf(j4));
                                }
                            }
                            j3 = j2;
                            arrayList6 = arrayList4;
                        } catch (Exception e3) {
                            e = e3;
                            sQLiteCursor = queryFinalized2;
                            sQLitePreparedStatement = null;
                            checkSQLException(e);
                            sQLiteDatabase2 = this.database;
                            if (sQLiteDatabase2 != null) {
                                sQLiteDatabase2.commitTransaction();
                            }
                            if (sQLiteCursor != null) {
                                sQLiteCursor.dispose();
                            }
                            if (sQLitePreparedStatement == null) {
                                sQLitePreparedStatement.dispose();
                                return;
                            }
                            return;
                        } catch (Throwable th4) {
                            th = th4;
                            sQLiteCursor = queryFinalized2;
                            sQLitePreparedStatement = null;
                            sQLiteDatabase = this.database;
                            if (sQLiteDatabase != null) {
                            }
                            if (sQLiteCursor != null) {
                            }
                            if (sQLitePreparedStatement != null) {
                            }
                            throw th;
                        }
                    } catch (Exception e4) {
                        e = e4;
                        sQLitePreparedStatement2 = null;
                        sQLiteCursor = queryFinalized2;
                    } catch (Throwable th5) {
                        th = th5;
                        sQLitePreparedStatement2 = null;
                        sQLiteCursor = queryFinalized2;
                    }
                }
                ArrayList<TLRPC$EncryptedChat> arrayList10 = arrayList6;
                queryFinalized2.dispose();
                if (longSparseArray.isEmpty()) {
                    sQLitePreparedStatement2 = null;
                    sQLiteCursor2 = null;
                } else {
                    StringBuilder sb = new StringBuilder();
                    int i3 = 0;
                    while (i3 < longSparseArray.size()) {
                        sb.append("uid = ");
                        sb.append(longSparseArray.keyAt(i3));
                        sb.append(" AND group_id = ");
                        sb.append(longSparseArray.valueAt(i3));
                        i3++;
                        if (i3 < longSparseArray.size()) {
                            sb.append(" OR ");
                        }
                    }
                    int i4 = 0;
                    sQLiteCursor2 = this.database.queryFinalized(String.format(Locale.US, "SELECT uid, data, read_state, mid, send_state, date, group_id FROM messages_v2 WHERE %s", sb), new Object[0]);
                    while (sQLiteCursor2.next()) {
                        try {
                            long longValue4 = sQLiteCursor2.longValue(i4);
                            int i5 = 0;
                            while (true) {
                                if (i5 >= tLRPC$TL_messages_dialogs.dialogs.size()) {
                                    tLRPC$Dialog = null;
                                    break;
                                }
                                try {
                                    tLRPC$Dialog = tLRPC$TL_messages_dialogs.dialogs.get(i5);
                                    if (tLRPC$Dialog != null && tLRPC$Dialog.id == longValue4) {
                                        break;
                                    }
                                    i5++;
                                } catch (Exception e5) {
                                    e = e5;
                                    sQLiteCursor = sQLiteCursor2;
                                    sQLitePreparedStatement = null;
                                    checkSQLException(e);
                                    sQLiteDatabase2 = this.database;
                                    if (sQLiteDatabase2 != null) {
                                    }
                                    if (sQLiteCursor != null) {
                                    }
                                    if (sQLitePreparedStatement == null) {
                                    }
                                } catch (Throwable th6) {
                                    th = th6;
                                    sQLiteCursor = sQLiteCursor2;
                                    sQLitePreparedStatement = null;
                                    sQLiteDatabase = this.database;
                                    if (sQLiteDatabase != null) {
                                    }
                                    if (sQLiteCursor != null) {
                                    }
                                    if (sQLitePreparedStatement != null) {
                                    }
                                    throw th;
                                }
                            }
                            if (tLRPC$Dialog != null && (byteBufferValue = sQLiteCursor2.byteBufferValue(1)) != null) {
                                TLRPC$Message TLdeserialize2 = TLRPC$Message.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                                TLdeserialize2.readAttachPath(byteBufferValue, getUserConfig().clientUserId);
                                byteBufferValue.reuse();
                                MessageObject.setUnreadFlags(TLdeserialize2, sQLiteCursor2.intValue(2));
                                TLdeserialize2.id = sQLiteCursor2.intValue(3);
                                TLdeserialize2.send_state = sQLiteCursor2.intValue(4);
                                int intValue3 = sQLiteCursor2.intValue(5);
                                if (intValue3 != 0) {
                                    tLRPC$Dialog.last_message_date = intValue3;
                                }
                                TLdeserialize2.dialog_id = tLRPC$Dialog.id;
                                tLRPC$TL_messages_dialogs.messages.add(TLdeserialize2);
                                sQLitePreparedStatement2 = null;
                                try {
                                    addUsersAndChatsFromMessage(TLdeserialize2, arrayList7, arrayList8, null);
                                } catch (Exception e6) {
                                    e = e6;
                                    sQLiteCursor = sQLiteCursor2;
                                    sQLitePreparedStatement = sQLitePreparedStatement2;
                                    checkSQLException(e);
                                    sQLiteDatabase2 = this.database;
                                    if (sQLiteDatabase2 != null) {
                                    }
                                    if (sQLiteCursor != null) {
                                    }
                                    if (sQLitePreparedStatement == null) {
                                    }
                                } catch (Throwable th7) {
                                    th = th7;
                                    sQLiteCursor = sQLiteCursor2;
                                    sQLitePreparedStatement = sQLitePreparedStatement2;
                                    sQLiteDatabase = this.database;
                                    if (sQLiteDatabase != null) {
                                    }
                                    if (sQLiteCursor != null) {
                                    }
                                    if (sQLitePreparedStatement != null) {
                                    }
                                    throw th;
                                }
                            }
                            i4 = 0;
                        } catch (Exception e7) {
                            e = e7;
                            sQLitePreparedStatement2 = null;
                            sQLiteCursor = sQLiteCursor2;
                            sQLitePreparedStatement = sQLitePreparedStatement2;
                            checkSQLException(e);
                            sQLiteDatabase2 = this.database;
                            if (sQLiteDatabase2 != null) {
                            }
                            if (sQLiteCursor != null) {
                            }
                            if (sQLitePreparedStatement == null) {
                            }
                        } catch (Throwable th8) {
                            th = th8;
                            sQLitePreparedStatement2 = null;
                            sQLiteCursor = sQLiteCursor2;
                            sQLitePreparedStatement = sQLitePreparedStatement2;
                            sQLiteDatabase = this.database;
                            if (sQLiteDatabase != null) {
                            }
                            if (sQLiteCursor != null) {
                            }
                            if (sQLitePreparedStatement != null) {
                            }
                            throw th;
                        }
                    }
                    sQLitePreparedStatement2 = null;
                    sQLiteCursor2.dispose();
                }
                if (arrayList9.isEmpty()) {
                    arrayList3 = arrayList10;
                } else {
                    arrayList3 = arrayList10;
                    getEncryptedChatsInternal(TextUtils.join(",", arrayList9), arrayList3, arrayList7);
                }
                if (!arrayList8.isEmpty()) {
                    getChatsInternal(TextUtils.join(",", arrayList8), tLRPC$TL_messages_dialogs.chats);
                }
                if (!arrayList7.isEmpty()) {
                    getUsersInternal(TextUtils.join(",", arrayList7), tLRPC$TL_messages_dialogs.users);
                }
                getMessagesController().getTopicsController().updateTopicsWithDeletedMessages(j, arrayList);
                if (!tLRPC$TL_messages_dialogs.dialogs.isEmpty() || !arrayList3.isEmpty()) {
                    getMessagesController().processDialogsUpdate(tLRPC$TL_messages_dialogs, arrayList3, true);
                }
                SQLiteDatabase sQLiteDatabase3 = this.database;
                if (sQLiteDatabase3 != null) {
                    sQLiteDatabase3.commitTransaction();
                }
                if (sQLiteCursor2 != null) {
                    sQLiteCursor2.dispose();
                }
            } catch (Exception e8) {
                e = e8;
                sQLiteCursor = null;
            } catch (Throwable th9) {
                th = th9;
                sQLiteCursor = null;
            }
        } catch (Exception e9) {
            e = e9;
            sQLiteCursor = null;
            sQLitePreparedStatement = null;
        } catch (Throwable th10) {
            th = th10;
            sQLiteCursor = null;
            sQLitePreparedStatement = null;
        }
    }

    public void updateDialogsWithDeletedMessages(final long j, final long j2, final ArrayList<Integer> arrayList, final ArrayList<Long> arrayList2, boolean z) {
        if (z) {
            this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda95
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesStorage.this.lambda$updateDialogsWithDeletedMessages$185(j, j2, arrayList, arrayList2);
                }
            });
        } else {
            lambda$updateDialogsWithDeletedMessages$185(j, j2, arrayList, arrayList2);
        }
    }

    public ArrayList<Long> markMessagesAsDeleted(final long j, final ArrayList<Integer> arrayList, boolean z, final boolean z2, final boolean z3) {
        if (arrayList.isEmpty()) {
            return null;
        }
        if (z) {
            this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda108
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesStorage.this.lambda$markMessagesAsDeleted$186(j, arrayList, z2, z3);
                }
            });
            return null;
        }
        return lambda$markMessagesAsDeleted$186(j, arrayList, z2, z3);
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:115:0x0338  */
    /* JADX WARN: Removed duplicated region for block: B:117:0x033d  */
    /* JADX WARN: Removed duplicated region for block: B:123:0x0348  */
    /* JADX WARN: Removed duplicated region for block: B:125:0x034d  */
    /* JADX WARN: Removed duplicated region for block: B:158:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:35:0x00d4 A[Catch: all -> 0x0110, Exception -> 0x011b, TRY_LEAVE, TryCatch #15 {Exception -> 0x011b, all -> 0x0110, blocks: (B:5:0x004b, B:7:0x0051, B:29:0x00bf, B:33:0x00cd, B:35:0x00d4), top: B:142:0x004b }] */
    /* JADX WARN: Removed duplicated region for block: B:43:0x00fd  */
    /* JADX WARN: Removed duplicated region for block: B:57:0x0141 A[Catch: all -> 0x031d, Exception -> 0x031f, TRY_LEAVE, TryCatch #14 {Exception -> 0x031f, all -> 0x031d, blocks: (B:54:0x0127, B:55:0x013b, B:57:0x0141, B:63:0x0179, B:75:0x01cf, B:82:0x0231, B:91:0x0276), top: B:144:0x0127 }] */
    /* JADX WARN: Removed duplicated region for block: B:78:0x0226 A[Catch: all -> 0x0318, Exception -> 0x031b, TryCatch #13 {Exception -> 0x031b, all -> 0x0318, blocks: (B:76:0x0220, B:78:0x0226, B:80:0x022c, B:83:0x0248, B:85:0x024e, B:90:0x0273), top: B:146:0x0220 }] */
    /* JADX WARN: Removed duplicated region for block: B:79:0x022b  */
    /* JADX WARN: Removed duplicated region for block: B:82:0x0231 A[Catch: all -> 0x031d, Exception -> 0x031f, TRY_ENTER, TRY_LEAVE, TryCatch #14 {Exception -> 0x031f, all -> 0x031d, blocks: (B:54:0x0127, B:55:0x013b, B:57:0x0141, B:63:0x0179, B:75:0x01cf, B:82:0x0231, B:91:0x0276), top: B:144:0x0127 }] */
    /* JADX WARN: Type inference failed for: r7v14 */
    /* JADX WARN: Type inference failed for: r7v5 */
    /* renamed from: markMessagesAsDeletedInternal */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public ArrayList<Long> lambda$markMessagesAsDeleted$188(long j, int i, boolean z) {
        final MessagesStorage messagesStorage;
        SQLiteCursor sQLiteCursor;
        SQLiteCursor sQLiteCursor2;
        SQLitePreparedStatement sQLitePreparedStatement;
        SQLitePreparedStatement sQLitePreparedStatement2;
        LongSparseArray longSparseArray;
        ArrayList<File> arrayList;
        final ArrayList arrayList2;
        ArrayList<Pair<Long, Integer>> arrayList3;
        ArrayList<Long> arrayList4;
        long j2;
        SQLiteCursor sQLiteCursor3;
        boolean z2;
        int i2;
        int i3;
        Locale locale;
        SQLiteCursor queryFinalized;
        SQLiteCursor sQLiteCursor4;
        int intValue;
        int i4;
        int i5;
        ArrayList<Long> arrayList5;
        boolean z3;
        NativeByteBuffer byteBufferValue;
        try {
            ArrayList<Long> arrayList6 = new ArrayList<>();
            longSparseArray = new LongSparseArray();
            arrayList = new ArrayList<>();
            arrayList2 = new ArrayList();
            arrayList3 = new ArrayList<>();
            long clientUserId = getUserConfig().getClientUserId();
            arrayList4 = arrayList6;
            j2 = -j;
            int i6 = 0;
            SQLiteCursor queryFinalized2 = this.database.queryFinalized(String.format(Locale.US, "SELECT uid, data, read_state, out, mention FROM messages_v2 WHERE uid = %d AND mid <= %d", Long.valueOf(j2), Integer.valueOf(i)), new Object[0]);
            while (queryFinalized2.next()) {
                try {
                    long longValue = queryFinalized2.longValue(i6);
                    if (longValue != clientUserId) {
                        try {
                            int intValue2 = queryFinalized2.intValue(2);
                            if (queryFinalized2.intValue(3) == 0) {
                                Integer[] numArr = (Integer[]) longSparseArray.get(longValue);
                                if (numArr == null) {
                                    numArr = new Integer[]{0, 0};
                                    longSparseArray.put(longValue, numArr);
                                }
                                if (intValue2 < 2) {
                                    Integer num = numArr[1];
                                    numArr[1] = Integer.valueOf(numArr[1].intValue() + 1);
                                }
                                if (intValue2 == 0 || intValue2 == 2) {
                                    Integer num2 = numArr[0];
                                    numArr[0] = Integer.valueOf(numArr[0].intValue() + 1);
                                }
                                if (!DialogObject.isEncryptedDialog(longValue) || z) {
                                    byteBufferValue = queryFinalized2.byteBufferValue(1);
                                    if (byteBufferValue == null) {
                                        TLRPC$Message TLdeserialize = TLRPC$Message.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                                        TLdeserialize.readAttachPath(byteBufferValue, getUserConfig().clientUserId);
                                        byteBufferValue.reuse();
                                        sQLiteCursor3 = queryFinalized2;
                                        z2 = true;
                                        try {
                                            addFilesToDelete(TLdeserialize, arrayList, arrayList3, arrayList2, false);
                                        } catch (Exception e) {
                                            e = e;
                                            messagesStorage = this;
                                            z3 = z2;
                                            try {
                                                messagesStorage.checkSQLException(e);
                                                i2 = z3;
                                                sQLiteCursor3.dispose();
                                                messagesStorage.deleteFromDownloadQueue(arrayList3, i2);
                                                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda138
                                                    @Override // java.lang.Runnable
                                                    public final void run() {
                                                        MessagesStorage.this.lambda$markMessagesAsDeletedInternal$187(arrayList2);
                                                    }
                                                });
                                                getFileLoader().deleteFiles(arrayList, 0);
                                                i3 = 0;
                                                while (i3 < longSparseArray.size()) {
                                                }
                                                ArrayList<Long> arrayList7 = arrayList4;
                                                SQLiteDatabase sQLiteDatabase = messagesStorage.database;
                                                locale = Locale.US;
                                                Object[] objArr = new Object[2];
                                                objArr[0] = Long.valueOf(j);
                                                objArr[i2] = Integer.valueOf(i);
                                                sQLiteDatabase.executeFast(String.format(locale, "UPDATE chat_settings_v2 SET pinned = 0 WHERE uid = %d AND pinned <= %d", objArr)).stepThis().dispose();
                                                SQLiteDatabase sQLiteDatabase2 = messagesStorage.database;
                                                Object[] objArr2 = new Object[2];
                                                objArr2[0] = Long.valueOf(j);
                                                objArr2[i2] = Integer.valueOf(i);
                                                sQLiteDatabase2.executeFast(String.format(locale, "DELETE FROM chat_pinned_v2 WHERE uid = %d AND mid <= %d", objArr2)).stepThis().dispose();
                                                queryFinalized = messagesStorage.database.queryFinalized("SELECT changes()", new Object[0]);
                                                if (queryFinalized.next()) {
                                                }
                                                queryFinalized.dispose();
                                                if (intValue > 0) {
                                                }
                                                SQLiteDatabase sQLiteDatabase3 = messagesStorage.database;
                                                Object[] objArr3 = new Object[2];
                                                objArr3[0] = Long.valueOf(j2);
                                                objArr3[i2] = Integer.valueOf(i);
                                                sQLiteDatabase3.executeFast(String.format(locale, "DELETE FROM messages_v2 WHERE uid = %d AND mid <= %d", objArr3)).stepThis().dispose();
                                                SQLiteDatabase sQLiteDatabase4 = messagesStorage.database;
                                                Object[] objArr4 = new Object[2];
                                                objArr4[0] = Long.valueOf(j2);
                                                objArr4[i2] = Integer.valueOf(i);
                                                sQLiteDatabase4.executeFast(String.format(locale, "DELETE FROM messages_topics WHERE uid = %d AND mid <= %d", objArr4)).stepThis().dispose();
                                                SQLiteDatabase sQLiteDatabase5 = messagesStorage.database;
                                                Object[] objArr5 = new Object[2];
                                                objArr5[0] = Long.valueOf(j2);
                                                objArr5[i2] = Integer.valueOf(i);
                                                sQLiteDatabase5.executeFast(String.format(locale, "DELETE FROM media_v4 WHERE uid = %d AND mid <= %d", objArr5)).stepThis().dispose();
                                                SQLiteDatabase sQLiteDatabase6 = messagesStorage.database;
                                                Object[] objArr6 = new Object[i2];
                                                objArr6[0] = Long.valueOf(j2);
                                                sQLiteDatabase6.executeFast(String.format(locale, "UPDATE media_counts_v2 SET old = 1 WHERE uid = %d", objArr6)).stepThis().dispose();
                                                SQLiteDatabase sQLiteDatabase7 = messagesStorage.database;
                                                Object[] objArr7 = new Object[i2];
                                                objArr7[0] = Long.valueOf(j2);
                                                sQLiteDatabase7.executeFast(String.format(locale, "UPDATE media_counts_topics SET old = 1 WHERE uid = %d", objArr7)).stepThis().dispose();
                                                messagesStorage.updateWidgets(arrayList7);
                                                return arrayList7;
                                            } catch (Exception e2) {
                                                e = e2;
                                                sQLiteCursor2 = sQLiteCursor3;
                                                sQLitePreparedStatement2 = null;
                                                messagesStorage.checkSQLException(e);
                                                if (sQLiteCursor2 != null) {
                                                }
                                                if (sQLitePreparedStatement2 == null) {
                                                }
                                            } catch (Throwable th) {
                                                th = th;
                                                sQLiteCursor = sQLiteCursor3;
                                                sQLitePreparedStatement = null;
                                                if (sQLiteCursor != null) {
                                                }
                                                if (sQLitePreparedStatement != null) {
                                                }
                                                throw th;
                                            }
                                        } catch (Throwable th2) {
                                            th = th2;
                                            sQLitePreparedStatement = null;
                                            sQLiteCursor = sQLiteCursor3;
                                            if (sQLiteCursor != null) {
                                            }
                                            if (sQLitePreparedStatement != null) {
                                            }
                                            throw th;
                                        }
                                    } else {
                                        sQLiteCursor3 = queryFinalized2;
                                    }
                                    i6 = 0;
                                    queryFinalized2 = sQLiteCursor3;
                                } else {
                                    i6 = 0;
                                }
                            }
                        } catch (Exception e3) {
                            e = e3;
                            z3 = true;
                            messagesStorage = this;
                            sQLiteCursor3 = queryFinalized2;
                            messagesStorage.checkSQLException(e);
                            i2 = z3;
                            sQLiteCursor3.dispose();
                            messagesStorage.deleteFromDownloadQueue(arrayList3, i2);
                            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda138
                                @Override // java.lang.Runnable
                                public final void run() {
                                    MessagesStorage.this.lambda$markMessagesAsDeletedInternal$187(arrayList2);
                                }
                            });
                            getFileLoader().deleteFiles(arrayList, 0);
                            i3 = 0;
                            while (i3 < longSparseArray.size()) {
                            }
                            ArrayList<Long> arrayList72 = arrayList4;
                            SQLiteDatabase sQLiteDatabase8 = messagesStorage.database;
                            locale = Locale.US;
                            Object[] objArr8 = new Object[2];
                            objArr8[0] = Long.valueOf(j);
                            objArr8[i2] = Integer.valueOf(i);
                            sQLiteDatabase8.executeFast(String.format(locale, "UPDATE chat_settings_v2 SET pinned = 0 WHERE uid = %d AND pinned <= %d", objArr8)).stepThis().dispose();
                            SQLiteDatabase sQLiteDatabase22 = messagesStorage.database;
                            Object[] objArr22 = new Object[2];
                            objArr22[0] = Long.valueOf(j);
                            objArr22[i2] = Integer.valueOf(i);
                            sQLiteDatabase22.executeFast(String.format(locale, "DELETE FROM chat_pinned_v2 WHERE uid = %d AND mid <= %d", objArr22)).stepThis().dispose();
                            queryFinalized = messagesStorage.database.queryFinalized("SELECT changes()", new Object[0]);
                            if (queryFinalized.next()) {
                            }
                            queryFinalized.dispose();
                            if (intValue > 0) {
                            }
                            SQLiteDatabase sQLiteDatabase32 = messagesStorage.database;
                            Object[] objArr32 = new Object[2];
                            objArr32[0] = Long.valueOf(j2);
                            objArr32[i2] = Integer.valueOf(i);
                            sQLiteDatabase32.executeFast(String.format(locale, "DELETE FROM messages_v2 WHERE uid = %d AND mid <= %d", objArr32)).stepThis().dispose();
                            SQLiteDatabase sQLiteDatabase42 = messagesStorage.database;
                            Object[] objArr42 = new Object[2];
                            objArr42[0] = Long.valueOf(j2);
                            objArr42[i2] = Integer.valueOf(i);
                            sQLiteDatabase42.executeFast(String.format(locale, "DELETE FROM messages_topics WHERE uid = %d AND mid <= %d", objArr42)).stepThis().dispose();
                            SQLiteDatabase sQLiteDatabase52 = messagesStorage.database;
                            Object[] objArr52 = new Object[2];
                            objArr52[0] = Long.valueOf(j2);
                            objArr52[i2] = Integer.valueOf(i);
                            sQLiteDatabase52.executeFast(String.format(locale, "DELETE FROM media_v4 WHERE uid = %d AND mid <= %d", objArr52)).stepThis().dispose();
                            SQLiteDatabase sQLiteDatabase62 = messagesStorage.database;
                            Object[] objArr62 = new Object[i2];
                            objArr62[0] = Long.valueOf(j2);
                            sQLiteDatabase62.executeFast(String.format(locale, "UPDATE media_counts_v2 SET old = 1 WHERE uid = %d", objArr62)).stepThis().dispose();
                            SQLiteDatabase sQLiteDatabase72 = messagesStorage.database;
                            Object[] objArr72 = new Object[i2];
                            objArr72[0] = Long.valueOf(j2);
                            sQLiteDatabase72.executeFast(String.format(locale, "UPDATE media_counts_topics SET old = 1 WHERE uid = %d", objArr72)).stepThis().dispose();
                            messagesStorage.updateWidgets(arrayList72);
                            return arrayList72;
                        } catch (Throwable th3) {
                            th = th3;
                            sQLitePreparedStatement = null;
                            sQLiteCursor = queryFinalized2;
                            if (sQLiteCursor != null) {
                            }
                            if (sQLitePreparedStatement != null) {
                            }
                            throw th;
                        }
                    }
                    if (DialogObject.isEncryptedDialog(longValue)) {
                    }
                    byteBufferValue = queryFinalized2.byteBufferValue(1);
                    if (byteBufferValue == null) {
                    }
                    i6 = 0;
                    queryFinalized2 = sQLiteCursor3;
                } catch (Exception e4) {
                    e = e4;
                    sQLiteCursor3 = queryFinalized2;
                    z2 = true;
                } catch (Throwable th4) {
                    th = th4;
                    sQLiteCursor3 = queryFinalized2;
                }
            }
            sQLiteCursor3 = queryFinalized2;
            i2 = 1;
            messagesStorage = this;
            sQLiteCursor3.dispose();
        } catch (Exception e5) {
            e = e5;
            messagesStorage = this;
        } catch (Throwable th5) {
            th = th5;
        }
        try {
            messagesStorage.deleteFromDownloadQueue(arrayList3, i2);
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda138
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesStorage.this.lambda$markMessagesAsDeletedInternal$187(arrayList2);
                }
            });
            getFileLoader().deleteFiles(arrayList, 0);
            i3 = 0;
            while (i3 < longSparseArray.size()) {
                long keyAt = longSparseArray.keyAt(i3);
                Integer[] numArr2 = (Integer[]) longSparseArray.valueAt(i3);
                SQLiteDatabase sQLiteDatabase9 = messagesStorage.database;
                SQLiteCursor queryFinalized3 = sQLiteDatabase9.queryFinalized("SELECT unread_count, unread_count_i FROM dialogs WHERE did = " + keyAt, new Object[0]);
                try {
                    if (queryFinalized3.next()) {
                        i4 = queryFinalized3.intValue(0);
                        i5 = queryFinalized3.intValue(i2);
                    } else {
                        i4 = 0;
                        i5 = 0;
                    }
                    queryFinalized3.dispose();
                    arrayList5 = arrayList4;
                    arrayList5.add(Long.valueOf(keyAt));
                    sQLitePreparedStatement2 = messagesStorage.database.executeFast("UPDATE dialogs SET unread_count = ?, unread_count_i = ? WHERE did = ?");
                } catch (Exception e6) {
                    e = e6;
                    sQLiteCursor2 = queryFinalized3;
                    sQLitePreparedStatement2 = null;
                    messagesStorage.checkSQLException(e);
                    if (sQLiteCursor2 != null) {
                    }
                    if (sQLitePreparedStatement2 == null) {
                    }
                } catch (Throwable th6) {
                    th = th6;
                    sQLiteCursor = queryFinalized3;
                    sQLitePreparedStatement = null;
                    if (sQLiteCursor != null) {
                    }
                    if (sQLitePreparedStatement != null) {
                    }
                    throw th;
                }
                try {
                    sQLitePreparedStatement2.requery();
                    sQLitePreparedStatement2.bindInteger(i2, Math.max(0, i4 - numArr2[0].intValue()));
                    sQLitePreparedStatement2.bindInteger(2, Math.max(0, i5 - numArr2[i2].intValue()));
                    sQLitePreparedStatement2.bindLong(3, keyAt);
                    sQLitePreparedStatement2.step();
                    sQLitePreparedStatement2.dispose();
                    i3++;
                    arrayList4 = arrayList5;
                } catch (Exception e7) {
                    e = e7;
                    sQLiteCursor2 = null;
                    messagesStorage.checkSQLException(e);
                    if (sQLiteCursor2 != null) {
                    }
                    if (sQLitePreparedStatement2 == null) {
                    }
                } catch (Throwable th7) {
                    th = th7;
                    sQLitePreparedStatement = sQLitePreparedStatement2;
                    sQLiteCursor = null;
                    if (sQLiteCursor != null) {
                    }
                    if (sQLitePreparedStatement != null) {
                    }
                    throw th;
                }
            }
            ArrayList<Long> arrayList722 = arrayList4;
            SQLiteDatabase sQLiteDatabase82 = messagesStorage.database;
            locale = Locale.US;
            Object[] objArr82 = new Object[2];
            objArr82[0] = Long.valueOf(j);
            objArr82[i2] = Integer.valueOf(i);
            sQLiteDatabase82.executeFast(String.format(locale, "UPDATE chat_settings_v2 SET pinned = 0 WHERE uid = %d AND pinned <= %d", objArr82)).stepThis().dispose();
            SQLiteDatabase sQLiteDatabase222 = messagesStorage.database;
            Object[] objArr222 = new Object[2];
            objArr222[0] = Long.valueOf(j);
            objArr222[i2] = Integer.valueOf(i);
            sQLiteDatabase222.executeFast(String.format(locale, "DELETE FROM chat_pinned_v2 WHERE uid = %d AND mid <= %d", objArr222)).stepThis().dispose();
            queryFinalized = messagesStorage.database.queryFinalized("SELECT changes()", new Object[0]);
        } catch (Exception e8) {
            e = e8;
            sQLiteCursor2 = null;
            sQLitePreparedStatement2 = null;
            messagesStorage.checkSQLException(e);
            if (sQLiteCursor2 != null) {
            }
            if (sQLitePreparedStatement2 == null) {
            }
        } catch (Throwable th8) {
            th = th8;
            sQLiteCursor = null;
            sQLitePreparedStatement = null;
            if (sQLiteCursor != null) {
            }
            if (sQLitePreparedStatement != null) {
            }
            throw th;
        }
        try {
            intValue = queryFinalized.next() ? queryFinalized.intValue(0) : 0;
            queryFinalized.dispose();
            if (intValue > 0) {
                SQLiteDatabase sQLiteDatabase10 = messagesStorage.database;
                Object[] objArr9 = new Object[i2];
                objArr9[0] = Long.valueOf(j2);
                sQLiteCursor2 = sQLiteDatabase10.queryFinalized(String.format(locale, "SELECT count FROM chat_pinned_count WHERE uid = %d", objArr9), new Object[0]);
                if (sQLiteCursor2.next()) {
                    int intValue3 = sQLiteCursor2.intValue(0);
                    sQLitePreparedStatement2 = messagesStorage.database.executeFast("UPDATE chat_pinned_count SET count = ? WHERE uid = ?");
                    try {
                        try {
                            sQLitePreparedStatement2.requery();
                            sQLitePreparedStatement2.bindInteger(i2, Math.max(0, intValue3 - intValue));
                            sQLitePreparedStatement2.bindLong(2, j2);
                            sQLitePreparedStatement2.step();
                            sQLitePreparedStatement2.dispose();
                        } catch (Exception e9) {
                            e = e9;
                            messagesStorage.checkSQLException(e);
                            if (sQLiteCursor2 != null) {
                                sQLiteCursor2.dispose();
                            }
                            if (sQLitePreparedStatement2 == null) {
                                sQLitePreparedStatement2.dispose();
                                return null;
                            }
                            return null;
                        }
                    } catch (Throwable th9) {
                        th = th9;
                        sQLiteCursor = sQLiteCursor2;
                        sQLitePreparedStatement = sQLitePreparedStatement2;
                        if (sQLiteCursor != null) {
                            sQLiteCursor.dispose();
                        }
                        if (sQLitePreparedStatement != null) {
                            sQLitePreparedStatement.dispose();
                        }
                        throw th;
                    }
                }
                sQLiteCursor2.dispose();
            }
            SQLiteDatabase sQLiteDatabase322 = messagesStorage.database;
            Object[] objArr322 = new Object[2];
            objArr322[0] = Long.valueOf(j2);
            objArr322[i2] = Integer.valueOf(i);
            sQLiteDatabase322.executeFast(String.format(locale, "DELETE FROM messages_v2 WHERE uid = %d AND mid <= %d", objArr322)).stepThis().dispose();
            SQLiteDatabase sQLiteDatabase422 = messagesStorage.database;
            Object[] objArr422 = new Object[2];
            objArr422[0] = Long.valueOf(j2);
            objArr422[i2] = Integer.valueOf(i);
            sQLiteDatabase422.executeFast(String.format(locale, "DELETE FROM messages_topics WHERE uid = %d AND mid <= %d", objArr422)).stepThis().dispose();
            SQLiteDatabase sQLiteDatabase522 = messagesStorage.database;
            Object[] objArr522 = new Object[2];
            objArr522[0] = Long.valueOf(j2);
            objArr522[i2] = Integer.valueOf(i);
            sQLiteDatabase522.executeFast(String.format(locale, "DELETE FROM media_v4 WHERE uid = %d AND mid <= %d", objArr522)).stepThis().dispose();
            SQLiteDatabase sQLiteDatabase622 = messagesStorage.database;
            Object[] objArr622 = new Object[i2];
            objArr622[0] = Long.valueOf(j2);
            sQLiteDatabase622.executeFast(String.format(locale, "UPDATE media_counts_v2 SET old = 1 WHERE uid = %d", objArr622)).stepThis().dispose();
            SQLiteDatabase sQLiteDatabase722 = messagesStorage.database;
            Object[] objArr722 = new Object[i2];
            objArr722[0] = Long.valueOf(j2);
            sQLiteDatabase722.executeFast(String.format(locale, "UPDATE media_counts_topics SET old = 1 WHERE uid = %d", objArr722)).stepThis().dispose();
            messagesStorage.updateWidgets(arrayList722);
            return arrayList722;
        } catch (Exception e10) {
            e = e10;
            sQLitePreparedStatement2 = null;
            messagesStorage.checkSQLException(e);
            if (sQLiteCursor2 != null) {
            }
            if (sQLitePreparedStatement2 == null) {
            }
        } catch (Throwable th10) {
            th = th10;
            sQLiteCursor = sQLiteCursor4;
            sQLitePreparedStatement = null;
            if (sQLiteCursor != null) {
            }
            if (sQLitePreparedStatement != null) {
            }
            throw th;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$markMessagesAsDeletedInternal$187(ArrayList arrayList) {
        getFileLoader().cancelLoadFiles(arrayList);
    }

    public ArrayList<Long> markMessagesAsDeleted(final long j, final int i, boolean z, final boolean z2) {
        if (z) {
            this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda87
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesStorage.this.lambda$markMessagesAsDeleted$188(j, i, z2);
                }
            });
            return null;
        }
        return lambda$markMessagesAsDeleted$188(j, i, z2);
    }

    private void fixUnsupportedMedia(TLRPC$Message tLRPC$Message) {
        if (tLRPC$Message == null) {
            return;
        }
        TLRPC$MessageMedia tLRPC$MessageMedia = tLRPC$Message.media;
        if (tLRPC$MessageMedia instanceof TLRPC$TL_messageMediaUnsupported_old) {
            if (tLRPC$MessageMedia.bytes.length == 0) {
                tLRPC$MessageMedia.bytes = Utilities.intToBytes(152);
            }
        } else if (tLRPC$MessageMedia instanceof TLRPC$TL_messageMediaUnsupported) {
            TLRPC$TL_messageMediaUnsupported_old tLRPC$TL_messageMediaUnsupported_old = new TLRPC$TL_messageMediaUnsupported_old();
            tLRPC$Message.media = tLRPC$TL_messageMediaUnsupported_old;
            tLRPC$TL_messageMediaUnsupported_old.bytes = Utilities.intToBytes(152);
            tLRPC$Message.flags |= LiteMode.FLAG_CALLS_ANIMATIONS;
        }
    }

    private void doneHolesInTable(String str, long j, int i, int i2) throws Exception {
        SQLitePreparedStatement executeFast;
        int i3 = 2;
        if (i2 != 0) {
            if (i == 0) {
                SQLiteDatabase sQLiteDatabase = this.database;
                Locale locale = Locale.US;
                sQLiteDatabase.executeFast(String.format(locale, "DELETE FROM " + str + " WHERE uid = %d AND topic_id = %d", Long.valueOf(j), Integer.valueOf(i2))).stepThis().dispose();
            } else {
                SQLiteDatabase sQLiteDatabase2 = this.database;
                Locale locale2 = Locale.US;
                sQLiteDatabase2.executeFast(String.format(locale2, "DELETE FROM " + str + " WHERE uid = %d AND topic_id = %d AND start = 0", Long.valueOf(j), Integer.valueOf(i2))).stepThis().dispose();
            }
        } else if (i == 0) {
            SQLiteDatabase sQLiteDatabase3 = this.database;
            Locale locale3 = Locale.US;
            sQLiteDatabase3.executeFast(String.format(locale3, "DELETE FROM " + str + " WHERE uid = %d", Long.valueOf(j))).stepThis().dispose();
        } else {
            SQLiteDatabase sQLiteDatabase4 = this.database;
            Locale locale4 = Locale.US;
            sQLiteDatabase4.executeFast(String.format(locale4, "DELETE FROM " + str + " WHERE uid = %d AND start = 0", Long.valueOf(j))).stepThis().dispose();
        }
        SQLitePreparedStatement sQLitePreparedStatement = null;
        try {
            try {
                if (i2 != 0) {
                    SQLiteDatabase sQLiteDatabase5 = this.database;
                    executeFast = sQLiteDatabase5.executeFast("REPLACE INTO " + str + " VALUES(?, ?, ?, ?)");
                } else {
                    SQLiteDatabase sQLiteDatabase6 = this.database;
                    executeFast = sQLiteDatabase6.executeFast("REPLACE INTO " + str + " VALUES(?, ?, ?)");
                }
                sQLitePreparedStatement = executeFast;
                sQLitePreparedStatement.requery();
                sQLitePreparedStatement.bindLong(1, j);
                if (i2 != 0) {
                    sQLitePreparedStatement.bindInteger(2, i2);
                    i3 = 3;
                }
                sQLitePreparedStatement.bindInteger(i3, 1);
                sQLitePreparedStatement.bindInteger(i3 + 1, 1);
                sQLitePreparedStatement.step();
                sQLitePreparedStatement.dispose();
            } catch (Exception e) {
                throw e;
            }
        } catch (Throwable th) {
            if (sQLitePreparedStatement != null) {
                sQLitePreparedStatement.dispose();
            }
            throw th;
        }
    }

    public void doneHolesInMedia(long j, int i, int i2, int i3) throws Exception {
        SQLitePreparedStatement executeFast;
        SQLitePreparedStatement executeFast2;
        int i4;
        SQLitePreparedStatement sQLitePreparedStatement = null;
        int i5 = 3;
        if (i2 == -1) {
            if (i3 != 0) {
                if (i == 0) {
                    this.database.executeFast(String.format(Locale.US, "DELETE FROM media_holes_topics WHERE uid = %d AND topic_id = %d", Long.valueOf(j), Integer.valueOf(i3))).stepThis().dispose();
                } else {
                    this.database.executeFast(String.format(Locale.US, "DELETE FROM media_holes_topics WHERE uid = %d AND topic_id = %d AND start = 0", Long.valueOf(j), Integer.valueOf(i3))).stepThis().dispose();
                }
            } else if (i == 0) {
                this.database.executeFast(String.format(Locale.US, "DELETE FROM media_holes_v2 WHERE uid = %d", Long.valueOf(j))).stepThis().dispose();
            } else {
                this.database.executeFast(String.format(Locale.US, "DELETE FROM media_holes_v2 WHERE uid = %d AND start = 0", Long.valueOf(j))).stepThis().dispose();
            }
            try {
                try {
                    if (i3 != 0) {
                        executeFast2 = this.database.executeFast("REPLACE INTO media_holes_topics VALUES(?, ?, ?, ?, ?)");
                    } else {
                        executeFast2 = this.database.executeFast("REPLACE INTO media_holes_v2 VALUES(?, ?, ?, ?)");
                    }
                    sQLitePreparedStatement = executeFast2;
                    for (int i6 = 0; i6 < 8; i6++) {
                        sQLitePreparedStatement.requery();
                        sQLitePreparedStatement.bindLong(1, j);
                        if (i3 != 0) {
                            sQLitePreparedStatement.bindInteger(2, i3);
                            i4 = 3;
                        } else {
                            i4 = 2;
                        }
                        int i7 = i4 + 1;
                        sQLitePreparedStatement.bindInteger(i4, i6);
                        sQLitePreparedStatement.bindInteger(i7, 1);
                        sQLitePreparedStatement.bindInteger(i7 + 1, 1);
                        sQLitePreparedStatement.step();
                    }
                    if (sQLitePreparedStatement != null) {
                        sQLitePreparedStatement.dispose();
                        return;
                    }
                    return;
                } catch (Exception e) {
                    throw e;
                }
            } finally {
            }
        }
        if (i3 != 0) {
            if (i == 0) {
                this.database.executeFast(String.format(Locale.US, "DELETE FROM media_holes_topics WHERE uid = %d AND topic_id = %d AND type = %d", Long.valueOf(j), Integer.valueOf(i3), Integer.valueOf(i2))).stepThis().dispose();
            } else {
                this.database.executeFast(String.format(Locale.US, "DELETE FROM media_holes_topics WHERE uid = %d AND topic_id = %d AND type = %d AND start = 0", Long.valueOf(j), Integer.valueOf(i3), Integer.valueOf(i2))).stepThis().dispose();
            }
        } else if (i == 0) {
            this.database.executeFast(String.format(Locale.US, "DELETE FROM media_holes_v2 WHERE uid = %d AND type = %d", Long.valueOf(j), Integer.valueOf(i2))).stepThis().dispose();
        } else {
            this.database.executeFast(String.format(Locale.US, "DELETE FROM media_holes_v2 WHERE uid = %d AND type = %d AND start = 0", Long.valueOf(j), Integer.valueOf(i2))).stepThis().dispose();
        }
        try {
            try {
                if (i3 != 0) {
                    executeFast = this.database.executeFast("REPLACE INTO media_holes_topics VALUES(?, ?, ?, ?, ?)");
                } else {
                    executeFast = this.database.executeFast("REPLACE INTO media_holes_v2 VALUES(?, ?, ?, ?)");
                }
                sQLitePreparedStatement = executeFast;
                sQLitePreparedStatement.requery();
                sQLitePreparedStatement.bindLong(1, j);
                if (i3 != 0) {
                    sQLitePreparedStatement.bindInteger(2, i3);
                } else {
                    i5 = 2;
                }
                int i8 = i5 + 1;
                sQLitePreparedStatement.bindInteger(i5, i2);
                sQLitePreparedStatement.bindInteger(i8, 1);
                sQLitePreparedStatement.bindInteger(i8 + 1, 1);
                sQLitePreparedStatement.step();
                sQLitePreparedStatement.dispose();
                sQLitePreparedStatement.dispose();
            } finally {
            }
        } catch (Exception e2) {
            throw e2;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* loaded from: classes.dex */
    public static class Hole {
        public int end;
        public int start;
        public int type;

        public Hole(int i, int i2) {
            this.start = i;
            this.end = i2;
        }

        public Hole(int i, int i2, int i3) {
            this.type = i;
            this.start = i2;
            this.end = i3;
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:114:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:82:0x048d  */
    /* JADX WARN: Removed duplicated region for block: B:84:0x0492  */
    /* JADX WARN: Removed duplicated region for block: B:89:0x049a  */
    /* JADX WARN: Removed duplicated region for block: B:91:0x049f  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void closeHolesInMedia(long j, int i, int i2, int i3, int i4) {
        Throwable th;
        SQLitePreparedStatement sQLitePreparedStatement;
        Exception exc;
        SQLiteCursor sQLiteCursor;
        SQLiteCursor queryFinalized;
        SQLitePreparedStatement executeFast;
        int i5;
        int i6 = 1;
        try {
            try {
                if (i4 != 0) {
                    if (i3 < 0) {
                        queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT type, start, end FROM media_holes_topics WHERE uid = %d AND topic_id = %d AND type >= 0 AND ((end >= %d AND end <= %d) OR (start >= %d AND start <= %d) OR (start >= %d AND end <= %d) OR (start <= %d AND end >= %d))", Long.valueOf(j), Integer.valueOf(i4), Integer.valueOf(i), Integer.valueOf(i2), Integer.valueOf(i), Integer.valueOf(i2), Integer.valueOf(i), Integer.valueOf(i2), Integer.valueOf(i), Integer.valueOf(i2)), new Object[0]);
                    } else {
                        queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT type, start, end FROM media_holes_topics WHERE uid = %d AND topic_id = %d AND type = %d AND ((end >= %d AND end <= %d) OR (start >= %d AND start <= %d) OR (start >= %d AND end <= %d) OR (start <= %d AND end >= %d))", Long.valueOf(j), Integer.valueOf(i4), Integer.valueOf(i3), Integer.valueOf(i), Integer.valueOf(i2), Integer.valueOf(i), Integer.valueOf(i2), Integer.valueOf(i), Integer.valueOf(i2), Integer.valueOf(i), Integer.valueOf(i2)), new Object[0]);
                    }
                } else if (i3 < 0) {
                    queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT type, start, end FROM media_holes_v2 WHERE uid = %d AND type >= 0 AND ((end >= %d AND end <= %d) OR (start >= %d AND start <= %d) OR (start >= %d AND end <= %d) OR (start <= %d AND end >= %d))", Long.valueOf(j), Integer.valueOf(i), Integer.valueOf(i2), Integer.valueOf(i), Integer.valueOf(i2), Integer.valueOf(i), Integer.valueOf(i2), Integer.valueOf(i), Integer.valueOf(i2)), new Object[0]);
                } else {
                    queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT type, start, end FROM media_holes_v2 WHERE uid = %d AND type = %d AND ((end >= %d AND end <= %d) OR (start >= %d AND start <= %d) OR (start >= %d AND end <= %d) OR (start <= %d AND end >= %d))", Long.valueOf(j), Integer.valueOf(i3), Integer.valueOf(i), Integer.valueOf(i2), Integer.valueOf(i), Integer.valueOf(i2), Integer.valueOf(i), Integer.valueOf(i2), Integer.valueOf(i), Integer.valueOf(i2)), new Object[0]);
                }
                ArrayList arrayList = null;
                while (queryFinalized.next()) {
                    try {
                        if (arrayList == null) {
                            arrayList = new ArrayList();
                        }
                        int intValue = queryFinalized.intValue(0);
                        int intValue2 = queryFinalized.intValue(1);
                        int intValue3 = queryFinalized.intValue(2);
                        if (intValue2 != intValue3 || intValue2 != 1) {
                            arrayList.add(new Hole(intValue, intValue2, intValue3));
                        }
                    } catch (Exception e) {
                        exc = e;
                        sQLiteCursor = queryFinalized;
                        sQLitePreparedStatement = null;
                        try {
                            checkSQLException(exc);
                            if (sQLitePreparedStatement != null) {
                                sQLitePreparedStatement.dispose();
                            }
                            if (sQLiteCursor == null) {
                                sQLiteCursor.dispose();
                                return;
                            }
                            return;
                        } catch (Throwable th2) {
                            th = th2;
                            if (sQLitePreparedStatement != null) {
                                sQLitePreparedStatement.dispose();
                            }
                            if (sQLiteCursor != null) {
                                sQLiteCursor.dispose();
                            }
                            throw th;
                        }
                    } catch (Throwable th3) {
                        th = th3;
                        sQLiteCursor = queryFinalized;
                        sQLitePreparedStatement = null;
                        if (sQLitePreparedStatement != null) {
                        }
                        if (sQLiteCursor != null) {
                        }
                        throw th;
                    }
                }
                queryFinalized.dispose();
                if (arrayList != null) {
                    int i7 = 0;
                    while (i7 < arrayList.size()) {
                        Hole hole = (Hole) arrayList.get(i7);
                        int i8 = hole.end;
                        if (i2 < i8 - 1 || i > hole.start + i6) {
                            if (i2 < i8 - 1) {
                                int i9 = hole.start;
                                if (i > i9 + 1) {
                                    if (i4 != 0) {
                                        this.database.executeFast(String.format(Locale.US, "DELETE FROM media_holes_topics WHERE uid = %d AND topic_id = %d AND type = %d AND start = %d AND end = %d", Long.valueOf(j), Integer.valueOf(i4), Integer.valueOf(hole.type), Integer.valueOf(hole.start), Integer.valueOf(hole.end))).stepThis().dispose();
                                        executeFast = this.database.executeFast("REPLACE INTO media_holes_topics VALUES(?, ?, ?, ?, ?)");
                                    } else {
                                        this.database.executeFast(String.format(Locale.US, "DELETE FROM media_holes_v2 WHERE uid = %d AND type = %d AND start = %d AND end = %d", Long.valueOf(j), Integer.valueOf(hole.type), Integer.valueOf(hole.start), Integer.valueOf(hole.end))).stepThis().dispose();
                                        executeFast = this.database.executeFast("REPLACE INTO media_holes_v2 VALUES(?, ?, ?, ?)");
                                    }
                                    try {
                                        executeFast.requery();
                                        executeFast.bindLong(1, j);
                                        if (i4 != 0) {
                                            executeFast.bindInteger(2, i4);
                                            i5 = 3;
                                        } else {
                                            i5 = 2;
                                        }
                                        int i10 = i5 + 1;
                                        executeFast.bindInteger(i5, hole.type);
                                        executeFast.bindInteger(i10, hole.start);
                                        executeFast.bindInteger(i10 + 1, i);
                                        executeFast.step();
                                        executeFast.requery();
                                        executeFast.bindLong(1, j);
                                        executeFast.bindInteger(2, hole.type);
                                        executeFast.bindInteger(3, i2);
                                        executeFast.bindInteger(4, hole.end);
                                        executeFast.step();
                                        executeFast.dispose();
                                        i7++;
                                        i6 = 1;
                                    } catch (Exception e2) {
                                        exc = e2;
                                        sQLitePreparedStatement = executeFast;
                                        sQLiteCursor = null;
                                        checkSQLException(exc);
                                        if (sQLitePreparedStatement != null) {
                                        }
                                        if (sQLiteCursor == null) {
                                        }
                                    } catch (Throwable th4) {
                                        th = th4;
                                        sQLitePreparedStatement = executeFast;
                                        sQLiteCursor = null;
                                        if (sQLitePreparedStatement != null) {
                                        }
                                        if (sQLiteCursor != null) {
                                        }
                                        throw th;
                                    }
                                } else if (i9 != i2) {
                                    if (i4 != 0) {
                                        try {
                                            this.database.executeFast(String.format(Locale.US, "UPDATE media_holes_topics SET start = %d WHERE uid = %d AND topic_id = %d AND type = %d AND start = %d AND end = %d", Integer.valueOf(i2), Long.valueOf(j), Integer.valueOf(i4), Integer.valueOf(hole.type), Integer.valueOf(hole.start), Integer.valueOf(hole.end))).stepThis().dispose();
                                        } catch (Exception e3) {
                                            checkSQLException(e3, false);
                                        }
                                    } else {
                                        this.database.executeFast(String.format(Locale.US, "UPDATE media_holes_v2 SET start = %d WHERE uid = %d AND type = %d AND start = %d AND end = %d", Integer.valueOf(i2), Long.valueOf(j), Integer.valueOf(hole.type), Integer.valueOf(hole.start), Integer.valueOf(hole.end))).stepThis().dispose();
                                    }
                                }
                            } else if (i8 != i) {
                                if (i4 != 0) {
                                    try {
                                        this.database.executeFast(String.format(Locale.US, "UPDATE media_holes_topics SET end = %d WHERE uid = %d AND topic_id = %d AND type = %d AND start = %d AND end = %d", Integer.valueOf(i), Long.valueOf(j), Integer.valueOf(i4), Integer.valueOf(hole.type), Integer.valueOf(hole.start), Integer.valueOf(hole.end))).stepThis().dispose();
                                    } catch (Exception e4) {
                                        checkSQLException(e4, false);
                                    }
                                } else {
                                    this.database.executeFast(String.format(Locale.US, "UPDATE media_holes_v2 SET end = %d WHERE uid = %d AND type = %d AND start = %d AND end = %d", Integer.valueOf(i), Long.valueOf(j), Integer.valueOf(hole.type), Integer.valueOf(hole.start), Integer.valueOf(hole.end))).stepThis().dispose();
                                }
                            }
                        } else if (i4 != 0) {
                            this.database.executeFast(String.format(Locale.US, "DELETE FROM media_holes_topics WHERE uid = %d AND topic_id = %d AND type = %d AND start = %d AND end = %d", Long.valueOf(j), Integer.valueOf(i4), Integer.valueOf(hole.type), Integer.valueOf(hole.start), Integer.valueOf(hole.end))).stepThis().dispose();
                        } else {
                            this.database.executeFast(String.format(Locale.US, "DELETE FROM media_holes_v2 WHERE uid = %d AND type = %d AND start = %d AND end = %d", Long.valueOf(j), Integer.valueOf(hole.type), Integer.valueOf(hole.start), Integer.valueOf(hole.end))).stepThis().dispose();
                        }
                        i7++;
                        i6 = 1;
                    }
                }
            } catch (Exception e5) {
                exc = e5;
                sQLitePreparedStatement = null;
            }
        } catch (Throwable th5) {
            th = th5;
            sQLitePreparedStatement = null;
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:122:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:88:0x046f  */
    /* JADX WARN: Removed duplicated region for block: B:90:0x0474  */
    /* JADX WARN: Removed duplicated region for block: B:95:0x047c  */
    /* JADX WARN: Removed duplicated region for block: B:97:0x0481  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void closeHolesInTable(String str, long j, int i, int i2, int i3) {
        Throwable th;
        SQLitePreparedStatement sQLitePreparedStatement;
        Exception exc;
        SQLiteCursor sQLiteCursor;
        SQLiteCursor queryFinalized;
        ArrayList arrayList;
        SQLitePreparedStatement executeFast;
        int i4;
        int i5;
        try {
            try {
                if (i3 != 0) {
                    SQLiteDatabase sQLiteDatabase = this.database;
                    Locale locale = Locale.US;
                    queryFinalized = sQLiteDatabase.queryFinalized(String.format(locale, "SELECT start, end FROM " + str + " WHERE uid = %d AND topic_id = %d AND ((end >= %d AND end <= %d) OR (start >= %d AND start <= %d) OR (start >= %d AND end <= %d) OR (start <= %d AND end >= %d))", Long.valueOf(j), Integer.valueOf(i3), Integer.valueOf(i), Integer.valueOf(i2), Integer.valueOf(i), Integer.valueOf(i2), Integer.valueOf(i), Integer.valueOf(i2), Integer.valueOf(i), Integer.valueOf(i2)), new Object[0]);
                } else {
                    SQLiteDatabase sQLiteDatabase2 = this.database;
                    Locale locale2 = Locale.US;
                    queryFinalized = sQLiteDatabase2.queryFinalized(String.format(locale2, "SELECT start, end FROM " + str + " WHERE uid = %d AND ((end >= %d AND end <= %d) OR (start >= %d AND start <= %d) OR (start >= %d AND end <= %d) OR (start <= %d AND end >= %d))", Long.valueOf(j), Integer.valueOf(i), Integer.valueOf(i2), Integer.valueOf(i), Integer.valueOf(i2), Integer.valueOf(i), Integer.valueOf(i2), Integer.valueOf(i), Integer.valueOf(i2)), new Object[0]);
                }
                ArrayList arrayList2 = null;
                while (queryFinalized.next()) {
                    try {
                        if (arrayList2 == null) {
                            arrayList2 = new ArrayList();
                        }
                        int intValue = queryFinalized.intValue(0);
                        int intValue2 = queryFinalized.intValue(1);
                        if (intValue != intValue2 || intValue != 1) {
                            arrayList2.add(new Hole(intValue, intValue2));
                        }
                    } catch (Exception e) {
                        exc = e;
                        sQLiteCursor = queryFinalized;
                        sQLitePreparedStatement = null;
                        try {
                            checkSQLException(exc);
                            if (sQLitePreparedStatement != null) {
                            }
                            if (sQLiteCursor == null) {
                            }
                        } catch (Throwable th2) {
                            th = th2;
                            if (sQLitePreparedStatement != null) {
                                sQLitePreparedStatement.dispose();
                            }
                            if (sQLiteCursor != null) {
                                sQLiteCursor.dispose();
                            }
                            throw th;
                        }
                    } catch (Throwable th3) {
                        th = th3;
                        sQLiteCursor = queryFinalized;
                        sQLitePreparedStatement = null;
                        if (sQLitePreparedStatement != null) {
                        }
                        if (sQLiteCursor != null) {
                        }
                        throw th;
                    }
                }
                queryFinalized.dispose();
                if (arrayList2 != null) {
                    int i6 = 0;
                    while (i6 < arrayList2.size()) {
                        Hole hole = (Hole) arrayList2.get(i6);
                        int i7 = hole.end;
                        if (i2 < i7 - 1 || i > hole.start + 1) {
                            arrayList = arrayList2;
                            if (i2 < i7 - 1) {
                                int i8 = hole.start;
                                if (i > i8 + 1) {
                                    if (i3 != 0) {
                                        SQLiteDatabase sQLiteDatabase3 = this.database;
                                        Locale locale3 = Locale.US;
                                        sQLiteDatabase3.executeFast(String.format(locale3, "DELETE FROM " + str + " WHERE uid = %d AND topic_id = %d AND start = %d AND end = %d", Long.valueOf(j), Integer.valueOf(i3), Integer.valueOf(hole.start), Integer.valueOf(hole.end))).stepThis().dispose();
                                        SQLiteDatabase sQLiteDatabase4 = this.database;
                                        executeFast = sQLiteDatabase4.executeFast("REPLACE INTO " + str + " VALUES(?, ?, ?, ?)");
                                    } else {
                                        SQLiteDatabase sQLiteDatabase5 = this.database;
                                        Locale locale4 = Locale.US;
                                        sQLiteDatabase5.executeFast(String.format(locale4, "DELETE FROM " + str + " WHERE uid = %d AND start = %d AND end = %d", Long.valueOf(j), Integer.valueOf(hole.start), Integer.valueOf(hole.end))).stepThis().dispose();
                                        SQLiteDatabase sQLiteDatabase6 = this.database;
                                        executeFast = sQLiteDatabase6.executeFast("REPLACE INTO " + str + " VALUES(?, ?, ?)");
                                    }
                                    try {
                                        executeFast.requery();
                                        executeFast.bindLong(1, j);
                                        if (i3 != 0) {
                                            executeFast.bindInteger(2, i3);
                                            i4 = 3;
                                        } else {
                                            i4 = 2;
                                        }
                                        executeFast.bindInteger(i4, hole.start);
                                        executeFast.bindInteger(i4 + 1, i);
                                        executeFast.step();
                                        executeFast.requery();
                                        executeFast.bindLong(1, j);
                                        if (i3 != 0) {
                                            executeFast.bindInteger(2, i3);
                                            i5 = 3;
                                        } else {
                                            i5 = 2;
                                        }
                                        executeFast.bindInteger(i5, i2);
                                        executeFast.bindInteger(i5 + 1, hole.end);
                                        executeFast.step();
                                        executeFast.dispose();
                                        i6++;
                                        arrayList2 = arrayList;
                                    } catch (Exception e2) {
                                        exc = e2;
                                        sQLitePreparedStatement = executeFast;
                                        sQLiteCursor = null;
                                        checkSQLException(exc);
                                        if (sQLitePreparedStatement != null) {
                                            sQLitePreparedStatement.dispose();
                                        }
                                        if (sQLiteCursor == null) {
                                            sQLiteCursor.dispose();
                                            return;
                                        }
                                        return;
                                    } catch (Throwable th4) {
                                        th = th4;
                                        sQLitePreparedStatement = executeFast;
                                        sQLiteCursor = null;
                                        if (sQLitePreparedStatement != null) {
                                        }
                                        if (sQLiteCursor != null) {
                                        }
                                        throw th;
                                    }
                                } else if (i8 != i2) {
                                    if (i3 != 0) {
                                        try {
                                            SQLiteDatabase sQLiteDatabase7 = this.database;
                                            Locale locale5 = Locale.US;
                                            try {
                                                sQLiteDatabase7.executeFast(String.format(locale5, "UPDATE " + str + " SET start = %d WHERE uid = %d AND topic_id = %d AND start = %d AND end = %d", Integer.valueOf(i2), Long.valueOf(j), Integer.valueOf(i3), Integer.valueOf(hole.start), Integer.valueOf(hole.end))).stepThis().dispose();
                                            } catch (Exception e3) {
                                                e = e3;
                                                checkSQLException(e, false);
                                                i6++;
                                                arrayList2 = arrayList;
                                            }
                                        } catch (Exception e4) {
                                            e = e4;
                                        }
                                    } else {
                                        SQLiteDatabase sQLiteDatabase8 = this.database;
                                        Locale locale6 = Locale.US;
                                        sQLiteDatabase8.executeFast(String.format(locale6, "UPDATE " + str + " SET start = %d WHERE uid = %d AND start = %d AND end = %d", Integer.valueOf(i2), Long.valueOf(j), Integer.valueOf(hole.start), Integer.valueOf(hole.end))).stepThis().dispose();
                                    }
                                    i6++;
                                    arrayList2 = arrayList;
                                }
                            } else if (i7 != i) {
                                if (i3 != 0) {
                                    try {
                                        SQLiteDatabase sQLiteDatabase9 = this.database;
                                        Locale locale7 = Locale.US;
                                        sQLiteDatabase9.executeFast(String.format(locale7, "UPDATE " + str + " SET end = %d WHERE uid = %d AND topic_id = %d AND start = %d AND end = %d", Integer.valueOf(i), Long.valueOf(j), Integer.valueOf(i3), Integer.valueOf(hole.start), Integer.valueOf(hole.end))).stepThis().dispose();
                                    } catch (Exception e5) {
                                        checkSQLException(e5, false);
                                    }
                                } else {
                                    SQLiteDatabase sQLiteDatabase10 = this.database;
                                    Locale locale8 = Locale.US;
                                    sQLiteDatabase10.executeFast(String.format(locale8, "UPDATE " + str + " SET end = %d WHERE uid = %d AND start = %d AND end = %d", Integer.valueOf(i), Long.valueOf(j), Integer.valueOf(hole.start), Integer.valueOf(hole.end))).stepThis().dispose();
                                }
                            }
                        } else {
                            if (i3 != 0) {
                                SQLiteDatabase sQLiteDatabase11 = this.database;
                                Locale locale9 = Locale.US;
                                sQLiteDatabase11.executeFast(String.format(locale9, "DELETE FROM " + str + " WHERE uid = %d AND topic_id = %d AND start = %d AND end = %d", Long.valueOf(j), Integer.valueOf(i3), Integer.valueOf(hole.start), Integer.valueOf(hole.end))).stepThis().dispose();
                            } else {
                                SQLiteDatabase sQLiteDatabase12 = this.database;
                                Locale locale10 = Locale.US;
                                sQLiteDatabase12.executeFast(String.format(locale10, "DELETE FROM " + str + " WHERE uid = %d AND start = %d AND end = %d", Long.valueOf(j), Integer.valueOf(hole.start), Integer.valueOf(hole.end))).stepThis().dispose();
                            }
                            arrayList = arrayList2;
                        }
                        i6++;
                        arrayList2 = arrayList;
                    }
                }
            } catch (Exception e6) {
                exc = e6;
                sQLitePreparedStatement = null;
            }
        } catch (Throwable th5) {
            th = th5;
            sQLitePreparedStatement = null;
        }
    }

    public void replaceMessageIfExists(final TLRPC$Message tLRPC$Message, final ArrayList<TLRPC$User> arrayList, final ArrayList<TLRPC$Chat> arrayList2, final boolean z) {
        if (tLRPC$Message == null) {
            return;
        }
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda188
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$replaceMessageIfExists$190(tLRPC$Message, z, arrayList, arrayList2);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:100:0x01ac  */
    /* JADX WARN: Removed duplicated region for block: B:125:0x0221 A[Catch: all -> 0x0291, Exception -> 0x0296, TRY_ENTER, TryCatch #9 {Exception -> 0x0296, all -> 0x0291, blocks: (B:6:0x0031, B:13:0x0044, B:28:0x005c, B:30:0x0069, B:31:0x006c, B:37:0x0084, B:93:0x0195, B:42:0x0098, B:92:0x0192, B:43:0x00a1, B:98:0x01a4, B:106:0x01b5, B:111:0x01c9, B:112:0x01d2, B:125:0x0221, B:126:0x0224, B:128:0x022e, B:129:0x0239, B:131:0x023f, B:132:0x0253, B:134:0x0259, B:135:0x026d, B:26:0x0058, B:147:0x029e, B:148:0x02a1), top: B:182:0x0007 }] */
    /* JADX WARN: Removed duplicated region for block: B:128:0x022e A[Catch: all -> 0x0291, Exception -> 0x0296, TryCatch #9 {Exception -> 0x0296, all -> 0x0291, blocks: (B:6:0x0031, B:13:0x0044, B:28:0x005c, B:30:0x0069, B:31:0x006c, B:37:0x0084, B:93:0x0195, B:42:0x0098, B:92:0x0192, B:43:0x00a1, B:98:0x01a4, B:106:0x01b5, B:111:0x01c9, B:112:0x01d2, B:125:0x0221, B:126:0x0224, B:128:0x022e, B:129:0x0239, B:131:0x023f, B:132:0x0253, B:134:0x0259, B:135:0x026d, B:26:0x0058, B:147:0x029e, B:148:0x02a1), top: B:182:0x0007 }] */
    /* JADX WARN: Removed duplicated region for block: B:138:0x028d  */
    /* JADX WARN: Removed duplicated region for block: B:147:0x029e A[Catch: all -> 0x0291, Exception -> 0x0296, TRY_ENTER, TryCatch #9 {Exception -> 0x0296, all -> 0x0291, blocks: (B:6:0x0031, B:13:0x0044, B:28:0x005c, B:30:0x0069, B:31:0x006c, B:37:0x0084, B:93:0x0195, B:42:0x0098, B:92:0x0192, B:43:0x00a1, B:98:0x01a4, B:106:0x01b5, B:111:0x01c9, B:112:0x01d2, B:125:0x0221, B:126:0x0224, B:128:0x022e, B:129:0x0239, B:131:0x023f, B:132:0x0253, B:134:0x0259, B:135:0x026d, B:26:0x0058, B:147:0x029e, B:148:0x02a1), top: B:182:0x0007 }] */
    /* JADX WARN: Removed duplicated region for block: B:152:0x02a9  */
    /* JADX WARN: Removed duplicated region for block: B:154:0x02ae  */
    /* JADX WARN: Removed duplicated region for block: B:156:0x02b3  */
    /* JADX WARN: Removed duplicated region for block: B:161:0x02bc  */
    /* JADX WARN: Removed duplicated region for block: B:163:0x02c1  */
    /* JADX WARN: Removed duplicated region for block: B:165:0x02c6  */
    /* JADX WARN: Removed duplicated region for block: B:186:0x0195 A[SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:193:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:195:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:26:0x0058 A[Catch: all -> 0x0291, Exception -> 0x0296, TRY_ENTER, TryCatch #9 {Exception -> 0x0296, all -> 0x0291, blocks: (B:6:0x0031, B:13:0x0044, B:28:0x005c, B:30:0x0069, B:31:0x006c, B:37:0x0084, B:93:0x0195, B:42:0x0098, B:92:0x0192, B:43:0x00a1, B:98:0x01a4, B:106:0x01b5, B:111:0x01c9, B:112:0x01d2, B:125:0x0221, B:126:0x0224, B:128:0x022e, B:129:0x0239, B:131:0x023f, B:132:0x0253, B:134:0x0259, B:135:0x026d, B:26:0x0058, B:147:0x029e, B:148:0x02a1), top: B:182:0x0007 }] */
    /* JADX WARN: Removed duplicated region for block: B:30:0x0069 A[Catch: all -> 0x0291, Exception -> 0x0296, TryCatch #9 {Exception -> 0x0296, all -> 0x0291, blocks: (B:6:0x0031, B:13:0x0044, B:28:0x005c, B:30:0x0069, B:31:0x006c, B:37:0x0084, B:93:0x0195, B:42:0x0098, B:92:0x0192, B:43:0x00a1, B:98:0x01a4, B:106:0x01b5, B:111:0x01c9, B:112:0x01d2, B:125:0x0221, B:126:0x0224, B:128:0x022e, B:129:0x0239, B:131:0x023f, B:132:0x0253, B:134:0x0259, B:135:0x026d, B:26:0x0058, B:147:0x029e, B:148:0x02a1), top: B:182:0x0007 }] */
    /* JADX WARN: Removed duplicated region for block: B:34:0x007f  */
    /* JADX WARN: Removed duplicated region for block: B:57:0x00f6 A[Catch: all -> 0x019c, Exception -> 0x01a0, TryCatch #12 {Exception -> 0x01a0, all -> 0x019c, blocks: (B:44:0x00a9, B:46:0x00b8, B:48:0x00be, B:50:0x00de, B:55:0x00e6, B:57:0x00f6, B:59:0x0107, B:65:0x0112, B:69:0x0120, B:71:0x012e, B:73:0x014a, B:75:0x014e, B:79:0x0157, B:81:0x0160, B:83:0x016d, B:86:0x017a, B:88:0x0181, B:89:0x0187, B:90:0x018a, B:84:0x0173, B:78:0x0155, B:80:0x015b, B:72:0x0144, B:58:0x00fe), top: B:176:0x00a9 }] */
    /* JADX WARN: Removed duplicated region for block: B:58:0x00fe A[Catch: all -> 0x019c, Exception -> 0x01a0, TryCatch #12 {Exception -> 0x01a0, all -> 0x019c, blocks: (B:44:0x00a9, B:46:0x00b8, B:48:0x00be, B:50:0x00de, B:55:0x00e6, B:57:0x00f6, B:59:0x0107, B:65:0x0112, B:69:0x0120, B:71:0x012e, B:73:0x014a, B:75:0x014e, B:79:0x0157, B:81:0x0160, B:83:0x016d, B:86:0x017a, B:88:0x0181, B:89:0x0187, B:90:0x018a, B:84:0x0173, B:78:0x0155, B:80:0x015b, B:72:0x0144, B:58:0x00fe), top: B:176:0x00a9 }] */
    /* JADX WARN: Removed duplicated region for block: B:61:0x010b  */
    /* JADX WARN: Removed duplicated region for block: B:62:0x010d  */
    /* JADX WARN: Removed duplicated region for block: B:67:0x011d  */
    /* JADX WARN: Removed duplicated region for block: B:68:0x011f  */
    /* JADX WARN: Removed duplicated region for block: B:71:0x012e A[Catch: all -> 0x019c, Exception -> 0x01a0, TryCatch #12 {Exception -> 0x01a0, all -> 0x019c, blocks: (B:44:0x00a9, B:46:0x00b8, B:48:0x00be, B:50:0x00de, B:55:0x00e6, B:57:0x00f6, B:59:0x0107, B:65:0x0112, B:69:0x0120, B:71:0x012e, B:73:0x014a, B:75:0x014e, B:79:0x0157, B:81:0x0160, B:83:0x016d, B:86:0x017a, B:88:0x0181, B:89:0x0187, B:90:0x018a, B:84:0x0173, B:78:0x0155, B:80:0x015b, B:72:0x0144, B:58:0x00fe), top: B:176:0x00a9 }] */
    /* JADX WARN: Removed duplicated region for block: B:72:0x0144 A[Catch: all -> 0x019c, Exception -> 0x01a0, TryCatch #12 {Exception -> 0x01a0, all -> 0x019c, blocks: (B:44:0x00a9, B:46:0x00b8, B:48:0x00be, B:50:0x00de, B:55:0x00e6, B:57:0x00f6, B:59:0x0107, B:65:0x0112, B:69:0x0120, B:71:0x012e, B:73:0x014a, B:75:0x014e, B:79:0x0157, B:81:0x0160, B:83:0x016d, B:86:0x017a, B:88:0x0181, B:89:0x0187, B:90:0x018a, B:84:0x0173, B:78:0x0155, B:80:0x015b, B:72:0x0144, B:58:0x00fe), top: B:176:0x00a9 }] */
    /* JADX WARN: Removed duplicated region for block: B:75:0x014e A[Catch: all -> 0x019c, Exception -> 0x01a0, TryCatch #12 {Exception -> 0x01a0, all -> 0x019c, blocks: (B:44:0x00a9, B:46:0x00b8, B:48:0x00be, B:50:0x00de, B:55:0x00e6, B:57:0x00f6, B:59:0x0107, B:65:0x0112, B:69:0x0120, B:71:0x012e, B:73:0x014a, B:75:0x014e, B:79:0x0157, B:81:0x0160, B:83:0x016d, B:86:0x017a, B:88:0x0181, B:89:0x0187, B:90:0x018a, B:84:0x0173, B:78:0x0155, B:80:0x015b, B:72:0x0144, B:58:0x00fe), top: B:176:0x00a9 }] */
    /* JADX WARN: Removed duplicated region for block: B:80:0x015b A[Catch: all -> 0x019c, Exception -> 0x01a0, TryCatch #12 {Exception -> 0x01a0, all -> 0x019c, blocks: (B:44:0x00a9, B:46:0x00b8, B:48:0x00be, B:50:0x00de, B:55:0x00e6, B:57:0x00f6, B:59:0x0107, B:65:0x0112, B:69:0x0120, B:71:0x012e, B:73:0x014a, B:75:0x014e, B:79:0x0157, B:81:0x0160, B:83:0x016d, B:86:0x017a, B:88:0x0181, B:89:0x0187, B:90:0x018a, B:84:0x0173, B:78:0x0155, B:80:0x015b, B:72:0x0144, B:58:0x00fe), top: B:176:0x00a9 }] */
    /* JADX WARN: Removed duplicated region for block: B:83:0x016d A[Catch: all -> 0x019c, Exception -> 0x01a0, TryCatch #12 {Exception -> 0x01a0, all -> 0x019c, blocks: (B:44:0x00a9, B:46:0x00b8, B:48:0x00be, B:50:0x00de, B:55:0x00e6, B:57:0x00f6, B:59:0x0107, B:65:0x0112, B:69:0x0120, B:71:0x012e, B:73:0x014a, B:75:0x014e, B:79:0x0157, B:81:0x0160, B:83:0x016d, B:86:0x017a, B:88:0x0181, B:89:0x0187, B:90:0x018a, B:84:0x0173, B:78:0x0155, B:80:0x015b, B:72:0x0144, B:58:0x00fe), top: B:176:0x00a9 }] */
    /* JADX WARN: Removed duplicated region for block: B:84:0x0173 A[Catch: all -> 0x019c, Exception -> 0x01a0, TryCatch #12 {Exception -> 0x01a0, all -> 0x019c, blocks: (B:44:0x00a9, B:46:0x00b8, B:48:0x00be, B:50:0x00de, B:55:0x00e6, B:57:0x00f6, B:59:0x0107, B:65:0x0112, B:69:0x0120, B:71:0x012e, B:73:0x014a, B:75:0x014e, B:79:0x0157, B:81:0x0160, B:83:0x016d, B:86:0x017a, B:88:0x0181, B:89:0x0187, B:90:0x018a, B:84:0x0173, B:78:0x0155, B:80:0x015b, B:72:0x0144, B:58:0x00fe), top: B:176:0x00a9 }] */
    /* JADX WARN: Removed duplicated region for block: B:86:0x017a A[Catch: all -> 0x019c, Exception -> 0x01a0, TryCatch #12 {Exception -> 0x01a0, all -> 0x019c, blocks: (B:44:0x00a9, B:46:0x00b8, B:48:0x00be, B:50:0x00de, B:55:0x00e6, B:57:0x00f6, B:59:0x0107, B:65:0x0112, B:69:0x0120, B:71:0x012e, B:73:0x014a, B:75:0x014e, B:79:0x0157, B:81:0x0160, B:83:0x016d, B:86:0x017a, B:88:0x0181, B:89:0x0187, B:90:0x018a, B:84:0x0173, B:78:0x0155, B:80:0x015b, B:72:0x0144, B:58:0x00fe), top: B:176:0x00a9 }] */
    /* JADX WARN: Removed duplicated region for block: B:92:0x0192 A[Catch: all -> 0x0291, Exception -> 0x0296, TRY_ENTER, TryCatch #9 {Exception -> 0x0296, all -> 0x0291, blocks: (B:6:0x0031, B:13:0x0044, B:28:0x005c, B:30:0x0069, B:31:0x006c, B:37:0x0084, B:93:0x0195, B:42:0x0098, B:92:0x0192, B:43:0x00a1, B:98:0x01a4, B:106:0x01b5, B:111:0x01c9, B:112:0x01d2, B:125:0x0221, B:126:0x0224, B:128:0x022e, B:129:0x0239, B:131:0x023f, B:132:0x0253, B:134:0x0259, B:135:0x026d, B:26:0x0058, B:147:0x029e, B:148:0x02a1), top: B:182:0x0007 }] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$replaceMessageIfExists$190(TLRPC$Message tLRPC$Message, boolean z, ArrayList arrayList, ArrayList arrayList2) {
        SQLitePreparedStatement sQLitePreparedStatement;
        SQLitePreparedStatement sQLitePreparedStatement2;
        SQLiteDatabase sQLiteDatabase;
        SQLiteDatabase sQLiteDatabase2;
        SQLiteCursor sQLiteCursor;
        int i;
        NativeByteBuffer nativeByteBuffer;
        int i2;
        SQLiteDatabase sQLiteDatabase3;
        int i3;
        NativeByteBuffer nativeByteBuffer2;
        int i4;
        int i5;
        int i6;
        int i7;
        NativeByteBuffer nativeByteBuffer3;
        TLRPC$TL_messageReplyHeader tLRPC$TL_messageReplyHeader;
        int i8;
        NativeByteBuffer nativeByteBuffer4;
        int i9;
        int i10 = 1;
        try {
            try {
                sQLiteCursor = this.database.queryFinalized(String.format(Locale.US, "SELECT uid, read_state, custom_params FROM messages_v2 WHERE mid = %d AND uid = %d LIMIT 1", Integer.valueOf(tLRPC$Message.id), Long.valueOf(MessageObject.getDialogId(tLRPC$Message))), new Object[0]);
                try {
                    try {
                    } catch (Exception e) {
                        e = e;
                        i = 0;
                        checkSQLException(e);
                        if (sQLiteCursor != null) {
                            sQLiteCursor.dispose();
                        }
                        nativeByteBuffer = null;
                        this.database.beginTransaction();
                        if (tLRPC$Message.dialog_id == 0) {
                        }
                        fixUnsupportedMedia(tLRPC$Message);
                        NativeByteBuffer nativeByteBuffer5 = new NativeByteBuffer(tLRPC$Message.getObjectSize());
                        tLRPC$Message.serializeToStream(nativeByteBuffer5);
                        i2 = 0;
                        while (i2 < 2) {
                        }
                        NativeByteBuffer nativeByteBuffer6 = nativeByteBuffer5;
                        if (MediaDataController.canAddMessageToMedia(tLRPC$Message)) {
                        }
                        NativeByteBuffer nativeByteBuffer7 = nativeByteBuffer6;
                        if (nativeByteBuffer != null) {
                        }
                        nativeByteBuffer7.reuse();
                        this.database.commitTransaction();
                        if (z) {
                        }
                        sQLiteDatabase3 = this.database;
                        if (sQLiteDatabase3 != null) {
                        }
                    }
                } catch (Throwable th) {
                    th = th;
                    if (sQLiteCursor != null) {
                        sQLiteCursor.dispose();
                    }
                    throw th;
                }
            } catch (Exception e2) {
                e = e2;
                sQLiteCursor = null;
            } catch (Throwable th2) {
                th = th2;
                sQLiteCursor = null;
                if (sQLiteCursor != null) {
                }
                throw th;
            }
            if (!sQLiteCursor.next()) {
                sQLiteCursor.dispose();
                SQLiteDatabase sQLiteDatabase4 = this.database;
                if (sQLiteDatabase4 != null) {
                    sQLiteDatabase4.commitTransaction();
                    return;
                }
                return;
            }
            i = sQLiteCursor.intValue(1);
            try {
                nativeByteBuffer = sQLiteCursor.byteBufferValue(2);
                sQLiteCursor.dispose();
            } catch (Exception e3) {
                e = e3;
                checkSQLException(e);
                if (sQLiteCursor != null) {
                }
                nativeByteBuffer = null;
                this.database.beginTransaction();
                if (tLRPC$Message.dialog_id == 0) {
                }
                fixUnsupportedMedia(tLRPC$Message);
                NativeByteBuffer nativeByteBuffer52 = new NativeByteBuffer(tLRPC$Message.getObjectSize());
                tLRPC$Message.serializeToStream(nativeByteBuffer52);
                i2 = 0;
                while (i2 < 2) {
                }
                NativeByteBuffer nativeByteBuffer62 = nativeByteBuffer52;
                if (MediaDataController.canAddMessageToMedia(tLRPC$Message)) {
                }
                NativeByteBuffer nativeByteBuffer72 = nativeByteBuffer62;
                if (nativeByteBuffer != null) {
                }
                nativeByteBuffer72.reuse();
                this.database.commitTransaction();
                if (z) {
                }
                sQLiteDatabase3 = this.database;
                if (sQLiteDatabase3 != null) {
                }
            }
            this.database.beginTransaction();
            if (tLRPC$Message.dialog_id == 0) {
                MessageObject.getDialogId(tLRPC$Message);
            }
            fixUnsupportedMedia(tLRPC$Message);
            NativeByteBuffer nativeByteBuffer522 = new NativeByteBuffer(tLRPC$Message.getObjectSize());
            tLRPC$Message.serializeToStream(nativeByteBuffer522);
            i2 = 0;
            while (i2 < 2) {
                boolean z2 = i2 == i10;
                int topicId = MessageObject.getTopicId(tLRPC$Message, isForum(tLRPC$Message.dialog_id));
                if (z2 && topicId == 0) {
                    nativeByteBuffer4 = nativeByteBuffer522;
                } else {
                    SQLitePreparedStatement executeFast = z2 ? this.database.executeFast("REPLACE INTO messages_topics VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, NULL, ?, ?, ?, ?, ?, ?, 0, ?)") : this.database.executeFast("REPLACE INTO messages_v2 VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, NULL, ?, ?, ?, ?, ?, ?, 0, ?, ?)");
                    try {
                        executeFast.requery();
                        executeFast.bindInteger(i10, tLRPC$Message.id);
                        executeFast.bindLong(2, tLRPC$Message.dialog_id);
                        if (z2) {
                            executeFast.bindInteger(3, topicId);
                            i4 = 4;
                        } else {
                            i4 = 3;
                        }
                        int i11 = i4 + 1;
                        executeFast.bindInteger(i4, i);
                        int i12 = i11 + 1;
                        executeFast.bindInteger(i11, tLRPC$Message.send_state);
                        int i13 = i12 + 1;
                        executeFast.bindInteger(i12, tLRPC$Message.date);
                        int i14 = i13 + 1;
                        executeFast.bindByteBuffer(i13, nativeByteBuffer522);
                        int i15 = i14 + 1;
                        if (!MessageObject.isOut(tLRPC$Message) && !tLRPC$Message.from_scheduled) {
                            i5 = 0;
                            executeFast.bindInteger(i14, i5);
                            int i16 = i15 + 1;
                            executeFast.bindInteger(i15, tLRPC$Message.ttl);
                            if ((tLRPC$Message.flags & 1024) == 0) {
                                i6 = i16 + 1;
                                executeFast.bindInteger(i16, tLRPC$Message.views);
                            } else {
                                i6 = i16 + 1;
                                executeFast.bindInteger(i16, getMessageMediaType(tLRPC$Message));
                            }
                            int i17 = tLRPC$Message.stickerVerified;
                            int i18 = i6 + 1;
                            executeFast.bindInteger(i6, i17 != 0 ? 1 : i17 == 2 ? 2 : 0);
                            int i19 = i18 + 1;
                            executeFast.bindInteger(i18, !tLRPC$Message.mentioned ? 1 : 0);
                            int i20 = i19 + 1;
                            executeFast.bindInteger(i19, tLRPC$Message.forwards);
                            if (tLRPC$Message.replies == null) {
                                nativeByteBuffer3 = new NativeByteBuffer(tLRPC$Message.replies.getObjectSize());
                                tLRPC$Message.replies.serializeToStream(nativeByteBuffer3);
                                i7 = i20 + 1;
                                executeFast.bindByteBuffer(i20, nativeByteBuffer3);
                            } else {
                                i7 = i20 + 1;
                                executeFast.bindNull(i20);
                                nativeByteBuffer3 = null;
                            }
                            tLRPC$TL_messageReplyHeader = tLRPC$Message.reply_to;
                            if (tLRPC$TL_messageReplyHeader == null) {
                                i8 = i7 + 1;
                                int i21 = tLRPC$TL_messageReplyHeader.reply_to_top_id;
                                if (i21 == 0) {
                                    i21 = tLRPC$TL_messageReplyHeader.reply_to_msg_id;
                                }
                                executeFast.bindInteger(i7, i21);
                            } else {
                                i8 = i7 + 1;
                                executeFast.bindInteger(i7, 0);
                            }
                            int i22 = i8 + 1;
                            nativeByteBuffer4 = nativeByteBuffer522;
                            executeFast.bindLong(i8, MessageObject.getChannelId(tLRPC$Message));
                            if (nativeByteBuffer == null) {
                                i9 = i22 + 1;
                                executeFast.bindByteBuffer(i22, nativeByteBuffer);
                            } else {
                                i9 = i22 + 1;
                                executeFast.bindNull(i22);
                            }
                            if (!z2) {
                                if ((tLRPC$Message.flags & 131072) != 0) {
                                    executeFast.bindLong(i9, tLRPC$Message.grouped_id);
                                } else {
                                    executeFast.bindNull(i9);
                                }
                            }
                            executeFast.step();
                            executeFast.dispose();
                            if (nativeByteBuffer3 == null) {
                                nativeByteBuffer3.reuse();
                            }
                        }
                        i5 = 1;
                        executeFast.bindInteger(i14, i5);
                        int i162 = i15 + 1;
                        executeFast.bindInteger(i15, tLRPC$Message.ttl);
                        if ((tLRPC$Message.flags & 1024) == 0) {
                        }
                        int i172 = tLRPC$Message.stickerVerified;
                        int i182 = i6 + 1;
                        executeFast.bindInteger(i6, i172 != 0 ? 1 : i172 == 2 ? 2 : 0);
                        int i192 = i182 + 1;
                        executeFast.bindInteger(i182, !tLRPC$Message.mentioned ? 1 : 0);
                        int i202 = i192 + 1;
                        executeFast.bindInteger(i192, tLRPC$Message.forwards);
                        if (tLRPC$Message.replies == null) {
                        }
                        tLRPC$TL_messageReplyHeader = tLRPC$Message.reply_to;
                        if (tLRPC$TL_messageReplyHeader == null) {
                        }
                        int i222 = i8 + 1;
                        nativeByteBuffer4 = nativeByteBuffer522;
                        executeFast.bindLong(i8, MessageObject.getChannelId(tLRPC$Message));
                        if (nativeByteBuffer == null) {
                        }
                        if (!z2) {
                        }
                        executeFast.step();
                        executeFast.dispose();
                        if (nativeByteBuffer3 == null) {
                        }
                    } catch (Exception e4) {
                        e = e4;
                        sQLitePreparedStatement = executeFast;
                        sQLitePreparedStatement2 = null;
                        try {
                            checkSQLException(e);
                            sQLiteDatabase2 = this.database;
                            if (sQLiteDatabase2 != null) {
                                sQLiteDatabase2.commitTransaction();
                            }
                            if (sQLitePreparedStatement != null) {
                                sQLitePreparedStatement.dispose();
                            }
                            if (sQLitePreparedStatement2 == null) {
                                sQLitePreparedStatement2.dispose();
                                return;
                            }
                            return;
                        } catch (Throwable th3) {
                            th = th3;
                            sQLiteDatabase = this.database;
                            if (sQLiteDatabase != null) {
                                sQLiteDatabase.commitTransaction();
                            }
                            if (sQLitePreparedStatement != null) {
                                sQLitePreparedStatement.dispose();
                            }
                            if (sQLitePreparedStatement2 != null) {
                                sQLitePreparedStatement2.dispose();
                            }
                            throw th;
                        }
                    } catch (Throwable th4) {
                        th = th4;
                        sQLitePreparedStatement = executeFast;
                        sQLitePreparedStatement2 = null;
                        sQLiteDatabase = this.database;
                        if (sQLiteDatabase != null) {
                        }
                        if (sQLitePreparedStatement != null) {
                        }
                        if (sQLitePreparedStatement2 != null) {
                        }
                        throw th;
                    }
                }
                i2++;
                nativeByteBuffer522 = nativeByteBuffer4;
                i10 = 1;
            }
            NativeByteBuffer nativeByteBuffer622 = nativeByteBuffer522;
            if (MediaDataController.canAddMessageToMedia(tLRPC$Message)) {
                int i23 = 0;
                while (i23 < 2) {
                    boolean z3 = i23 == 1;
                    int topicId2 = MessageObject.getTopicId(tLRPC$Message, isForum(tLRPC$Message.dialog_id));
                    if (z3 && topicId2 == 0) {
                        nativeByteBuffer2 = nativeByteBuffer622;
                    } else {
                        SQLitePreparedStatement executeFast2 = i23 == 0 ? this.database.executeFast("REPLACE INTO media_v4 VALUES(?, ?, ?, ?, ?)") : this.database.executeFast("REPLACE INTO media_topics VALUES(?, ?, ?, ?, ?, ?)");
                        try {
                            executeFast2.requery();
                            executeFast2.bindInteger(1, tLRPC$Message.id);
                            executeFast2.bindLong(2, tLRPC$Message.dialog_id);
                            if (i23 != 0) {
                                executeFast2.bindLong(3, topicId2);
                                i3 = 4;
                            } else {
                                i3 = 3;
                            }
                            int i24 = i3 + 1;
                            executeFast2.bindInteger(i3, tLRPC$Message.date);
                            int i25 = i24 + 1;
                            executeFast2.bindInteger(i24, MediaDataController.getMediaType(tLRPC$Message));
                            nativeByteBuffer2 = nativeByteBuffer622;
                            executeFast2.bindByteBuffer(i25, nativeByteBuffer2);
                            executeFast2.step();
                            executeFast2.dispose();
                        } catch (Exception e5) {
                            e = e5;
                            sQLitePreparedStatement2 = executeFast2;
                            sQLitePreparedStatement = null;
                            checkSQLException(e);
                            sQLiteDatabase2 = this.database;
                            if (sQLiteDatabase2 != null) {
                            }
                            if (sQLitePreparedStatement != null) {
                            }
                            if (sQLitePreparedStatement2 == null) {
                            }
                        } catch (Throwable th5) {
                            th = th5;
                            sQLitePreparedStatement2 = executeFast2;
                            sQLitePreparedStatement = null;
                            sQLiteDatabase = this.database;
                            if (sQLiteDatabase != null) {
                            }
                            if (sQLitePreparedStatement != null) {
                            }
                            if (sQLitePreparedStatement2 != null) {
                            }
                            throw th;
                        }
                    }
                    i23++;
                    nativeByteBuffer622 = nativeByteBuffer2;
                }
            }
            NativeByteBuffer nativeByteBuffer722 = nativeByteBuffer622;
            if (nativeByteBuffer != null) {
                nativeByteBuffer.reuse();
            }
            nativeByteBuffer722.reuse();
            this.database.commitTransaction();
            if (z) {
                HashMap hashMap = new HashMap();
                HashMap hashMap2 = new HashMap();
                for (int i26 = 0; i26 < arrayList.size(); i26++) {
                    TLRPC$User tLRPC$User = (TLRPC$User) arrayList.get(i26);
                    hashMap.put(Long.valueOf(tLRPC$User.id), tLRPC$User);
                }
                for (int i27 = 0; i27 < arrayList2.size(); i27++) {
                    TLRPC$Chat tLRPC$Chat = (TLRPC$Chat) arrayList2.get(i27);
                    hashMap2.put(Long.valueOf(tLRPC$Chat.id), tLRPC$Chat);
                }
                final MessageObject messageObject = new MessageObject(this.currentAccount, tLRPC$Message, (AbstractMap<Long, TLRPC$User>) hashMap, (AbstractMap<Long, TLRPC$Chat>) hashMap2, true, true);
                final ArrayList arrayList3 = new ArrayList();
                arrayList3.add(messageObject);
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda165
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesStorage.this.lambda$replaceMessageIfExists$189(messageObject, arrayList3);
                    }
                });
            }
            sQLiteDatabase3 = this.database;
            if (sQLiteDatabase3 != null) {
                sQLiteDatabase3.commitTransaction();
            }
        } catch (Exception e6) {
            e = e6;
            sQLitePreparedStatement = null;
        } catch (Throwable th6) {
            th = th6;
            sQLitePreparedStatement = null;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$replaceMessageIfExists$189(MessageObject messageObject, ArrayList arrayList) {
        getNotificationCenter().postNotificationName(NotificationCenter.replaceMessagesObjects, Long.valueOf(messageObject.getDialogId()), arrayList);
    }

    public void putMessages(final TLRPC$messages_Messages tLRPC$messages_Messages, final long j, final int i, final int i2, final boolean z, final boolean z2, final int i3) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda203
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$putMessages$192(z2, j, tLRPC$messages_Messages, i3, i, i2, z);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Can't wrap try/catch for region: R(7:105|(2:106|107)|(28:(1:109)(2:596|(1:598)(33:599|(2:601|(0))(1:609)|(1:608)(1:606)|607|111|112|113|115|116|117|118|119|(37:121|122|123|(28:(2:497|498)(1:500)|132|(2:134|135)|136|(11:386|387|388|389|390|392|393|(6:395|(12:397|398|(4:464|465|(1:467)|468)|400|(2:402|(2:408|409))|452|453|(2:455|(2:457|(2:459|(2:461|462))))|451|(3:413|414|415)(1:450)|416|(1:418))(1:474)|419|(1:421)(1:444)|422|(5:424|(3:426|(1:428)|429)(1:441)|(2:431|(1:433))(2:438|(1:440))|434|(3:436|437|295))(1:442))(1:475)|443|434|(0))(1:138)|(9:141|142|143|144|(1:146)(1:179)|147|148|(5:150|151|152|(1:154)(1:157)|155)(7:165|166|167|168|(1:170)(1:173)|171|172)|156)|196|197|198|(5:200|(1:202)(1:269)|(1:268)(1:205)|(22:(1:212)(1:267)|213|(1:215)(1:266)|216|(17:221|222|(1:224)(1:264)|225|(1:227)(2:260|(1:262)(1:263))|228|(1:230)(1:259)|231|(1:233)(1:258)|234|(3:236|(1:238)(1:256)|239)(1:257)|240|(1:242)(1:255)|(2:244|(1:246)(1:247))|248|(1:250)|(2:252|253)(1:254))|265|222|(0)(0)|225|(0)(0)|228|(0)(0)|231|(0)(0)|234|(0)(0)|240|(0)(0)|(0)|248|(0)|(0)(0))(2:208|209)|210)|270|271|(2:366|(3:368|369|370)(2:371|(2:375|376)))(1:274)|275|(12:(1:279)|280|281|(3:342|343|(11:(1:346)(1:355)|347|348|349|284|(4:(1:287)(1:317)|288|289|290)(4:318|319|(4:(2:322|323)(1:333)|324|325|326)(1:334)|327)|(3:296|297|(5:299|(3:303|304|295)|293|294|295))|292|293|294|295))|283|284|(0)(0)|(0)|292|293|294|295)|358|(13:360|(1:362)(1:364)|363|281|(0)|283|284|(0)(0)|(0)|292|293|294|295)|280|281|(0)|283|284|(0)(0)|(0)|292|293|294|295)(1:126)|127|128|(1:130)(1:490)|131|132|(0)|136|(0)(0)|(9:141|142|143|144|(0)(0)|147|148|(0)(0)|156)|196|197|198|(0)|270|271|(0)|366|(0)(0)|275|(0)|358|(0)|280|281|(0)|283|284|(0)(0)|(0)|292|293|294|295)|506|507|508|509|511|512|513|514|(2:561|562)|(1:517)|(1:519)|(1:521)|529|530|531|(4:533|534|535|536)(1:556)|(4:538|(1:540)(1:549)|541|542)(1:550)|543|(1:547)|546))|115|116|117|118|119|(0)|506|507|508|509|511|512|513|514|(0)|(0)|(0)|(0)|529|530|531|(0)(0)|(0)(0)|543|(0)|547|546)|110|111|112|113) */
    /* JADX WARN: Can't wrap try/catch for region: R(9:(10:(9:(1:109)(2:596|(1:598)(33:599|(2:601|(0))(1:609)|(1:608)(1:606)|607|111|112|113|115|116|117|118|119|(37:121|122|123|(28:(2:497|498)(1:500)|132|(2:134|135)|136|(11:386|387|388|389|390|392|393|(6:395|(12:397|398|(4:464|465|(1:467)|468)|400|(2:402|(2:408|409))|452|453|(2:455|(2:457|(2:459|(2:461|462))))|451|(3:413|414|415)(1:450)|416|(1:418))(1:474)|419|(1:421)(1:444)|422|(5:424|(3:426|(1:428)|429)(1:441)|(2:431|(1:433))(2:438|(1:440))|434|(3:436|437|295))(1:442))(1:475)|443|434|(0))(1:138)|(9:141|142|143|144|(1:146)(1:179)|147|148|(5:150|151|152|(1:154)(1:157)|155)(7:165|166|167|168|(1:170)(1:173)|171|172)|156)|196|197|198|(5:200|(1:202)(1:269)|(1:268)(1:205)|(22:(1:212)(1:267)|213|(1:215)(1:266)|216|(17:221|222|(1:224)(1:264)|225|(1:227)(2:260|(1:262)(1:263))|228|(1:230)(1:259)|231|(1:233)(1:258)|234|(3:236|(1:238)(1:256)|239)(1:257)|240|(1:242)(1:255)|(2:244|(1:246)(1:247))|248|(1:250)|(2:252|253)(1:254))|265|222|(0)(0)|225|(0)(0)|228|(0)(0)|231|(0)(0)|234|(0)(0)|240|(0)(0)|(0)|248|(0)|(0)(0))(2:208|209)|210)|270|271|(2:366|(3:368|369|370)(2:371|(2:375|376)))(1:274)|275|(12:(1:279)|280|281|(3:342|343|(11:(1:346)(1:355)|347|348|349|284|(4:(1:287)(1:317)|288|289|290)(4:318|319|(4:(2:322|323)(1:333)|324|325|326)(1:334)|327)|(3:296|297|(5:299|(3:303|304|295)|293|294|295))|292|293|294|295))|283|284|(0)(0)|(0)|292|293|294|295)|358|(13:360|(1:362)(1:364)|363|281|(0)|283|284|(0)(0)|(0)|292|293|294|295)|280|281|(0)|283|284|(0)(0)|(0)|292|293|294|295)(1:126)|127|128|(1:130)(1:490)|131|132|(0)|136|(0)(0)|(9:141|142|143|144|(0)(0)|147|148|(0)(0)|156)|196|197|198|(0)|270|271|(0)|366|(0)(0)|275|(0)|358|(0)|280|281|(0)|283|284|(0)(0)|(0)|292|293|294|295)|506|507|508|509|511|512|513|514|(2:561|562)|(1:517)|(1:519)|(1:521)|529|530|531|(4:533|534|535|536)(1:556)|(4:538|(1:540)(1:549)|541|542)(1:550)|543|(1:547)|546))|530|531|(0)(0)|(0)(0)|543|(0)|547|546)|511|512|513|514|(0)|(0)|(0)|(0)|529)|117|118|119|(0)|506|507|508|509) */
    /* JADX WARN: Code restructure failed: missing block: B:128:0x0334, code lost:
        if (r4.id == r2.id) goto L411;
     */
    /* JADX WARN: Code restructure failed: missing block: B:129:0x0336, code lost:
        r4 = true;
     */
    /* JADX WARN: Code restructure failed: missing block: B:141:0x0352, code lost:
        if (r1.id == r2.id) goto L411;
     */
    /* JADX WARN: Code restructure failed: missing block: B:492:0x0a63, code lost:
        r0 = move-exception;
     */
    /* JADX WARN: Code restructure failed: missing block: B:493:0x0a64, code lost:
        r12 = null;
        r1 = r0;
        r33 = r6;
        r16 = null;
     */
    /* JADX WARN: Code restructure failed: missing block: B:494:0x0a6b, code lost:
        r0 = move-exception;
     */
    /* JADX WARN: Code restructure failed: missing block: B:495:0x0a6c, code lost:
        r12 = null;
        r1 = r0;
        r33 = r6;
        r16 = null;
     */
    /* JADX WARN: Code restructure failed: missing block: B:504:0x0aa2, code lost:
        r0 = move-exception;
     */
    /* JADX WARN: Code restructure failed: missing block: B:505:0x0aa3, code lost:
        r12 = null;
        r1 = r0;
        r16 = null;
        r19 = null;
        r24 = null;
     */
    /* JADX WARN: Code restructure failed: missing block: B:508:0x0ab5, code lost:
        r0 = move-exception;
     */
    /* JADX WARN: Code restructure failed: missing block: B:509:0x0ab6, code lost:
        r12 = null;
        r1 = r0;
        r16 = null;
        r19 = null;
        r24 = null;
     */
    /* JADX WARN: Code restructure failed: missing block: B:58:0x01a1, code lost:
        if (r13 != 4) goto L110;
     */
    /* JADX WARN: Code restructure failed: missing block: B:82:0x0256, code lost:
        if (r25.intValue() < r15.id) goto L127;
     */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:177:0x040c  */
    /* JADX WARN: Removed duplicated region for block: B:198:0x0443  */
    /* JADX WARN: Removed duplicated region for block: B:204:0x0477 A[Catch: all -> 0x0571, Exception -> 0x0579, TryCatch #46 {Exception -> 0x0579, all -> 0x0571, blocks: (B:202:0x0471, B:204:0x0477, B:206:0x048b), top: B:614:0x0471 }] */
    /* JADX WARN: Removed duplicated region for block: B:205:0x0488  */
    /* JADX WARN: Removed duplicated region for block: B:209:0x0493 A[Catch: all -> 0x0581, Exception -> 0x0584, TRY_ENTER, TRY_LEAVE, TryCatch #44 {Exception -> 0x0584, all -> 0x0581, blocks: (B:201:0x0457, B:209:0x0493, B:220:0x04e0, B:255:0x05a4, B:263:0x05bf, B:265:0x05ce, B:267:0x05d6, B:269:0x05fa, B:274:0x0602, B:276:0x0612, B:278:0x0623, B:285:0x062f, B:289:0x063d, B:291:0x064b, B:293:0x0667, B:295:0x066b, B:299:0x0674, B:301:0x067e, B:303:0x0691, B:306:0x069e, B:308:0x06a4, B:309:0x06aa, B:310:0x06ad, B:312:0x06b2, B:314:0x06b7, B:304:0x0697, B:298:0x0672, B:300:0x0678, B:292:0x0661, B:277:0x061a), top: B:618:0x0457 }] */
    /* JADX WARN: Removed duplicated region for block: B:220:0x04e0 A[Catch: all -> 0x0581, Exception -> 0x0584, TRY_ENTER, TRY_LEAVE, TryCatch #44 {Exception -> 0x0584, all -> 0x0581, blocks: (B:201:0x0457, B:209:0x0493, B:220:0x04e0, B:255:0x05a4, B:263:0x05bf, B:265:0x05ce, B:267:0x05d6, B:269:0x05fa, B:274:0x0602, B:276:0x0612, B:278:0x0623, B:285:0x062f, B:289:0x063d, B:291:0x064b, B:293:0x0667, B:295:0x066b, B:299:0x0674, B:301:0x067e, B:303:0x0691, B:306:0x069e, B:308:0x06a4, B:309:0x06aa, B:310:0x06ad, B:312:0x06b2, B:314:0x06b7, B:304:0x0697, B:298:0x0672, B:300:0x0678, B:292:0x0661, B:277:0x061a), top: B:618:0x0457 }] */
    /* JADX WARN: Removed duplicated region for block: B:249:0x059a  */
    /* JADX WARN: Removed duplicated region for block: B:276:0x0612 A[Catch: all -> 0x0581, Exception -> 0x0584, TryCatch #44 {Exception -> 0x0584, all -> 0x0581, blocks: (B:201:0x0457, B:209:0x0493, B:220:0x04e0, B:255:0x05a4, B:263:0x05bf, B:265:0x05ce, B:267:0x05d6, B:269:0x05fa, B:274:0x0602, B:276:0x0612, B:278:0x0623, B:285:0x062f, B:289:0x063d, B:291:0x064b, B:293:0x0667, B:295:0x066b, B:299:0x0674, B:301:0x067e, B:303:0x0691, B:306:0x069e, B:308:0x06a4, B:309:0x06aa, B:310:0x06ad, B:312:0x06b2, B:314:0x06b7, B:304:0x0697, B:298:0x0672, B:300:0x0678, B:292:0x0661, B:277:0x061a), top: B:618:0x0457 }] */
    /* JADX WARN: Removed duplicated region for block: B:277:0x061a A[Catch: all -> 0x0581, Exception -> 0x0584, TryCatch #44 {Exception -> 0x0584, all -> 0x0581, blocks: (B:201:0x0457, B:209:0x0493, B:220:0x04e0, B:255:0x05a4, B:263:0x05bf, B:265:0x05ce, B:267:0x05d6, B:269:0x05fa, B:274:0x0602, B:276:0x0612, B:278:0x0623, B:285:0x062f, B:289:0x063d, B:291:0x064b, B:293:0x0667, B:295:0x066b, B:299:0x0674, B:301:0x067e, B:303:0x0691, B:306:0x069e, B:308:0x06a4, B:309:0x06aa, B:310:0x06ad, B:312:0x06b2, B:314:0x06b7, B:304:0x0697, B:298:0x0672, B:300:0x0678, B:292:0x0661, B:277:0x061a), top: B:618:0x0457 }] */
    /* JADX WARN: Removed duplicated region for block: B:280:0x0627  */
    /* JADX WARN: Removed duplicated region for block: B:281:0x0629  */
    /* JADX WARN: Removed duplicated region for block: B:287:0x063a  */
    /* JADX WARN: Removed duplicated region for block: B:288:0x063c  */
    /* JADX WARN: Removed duplicated region for block: B:291:0x064b A[Catch: all -> 0x0581, Exception -> 0x0584, TryCatch #44 {Exception -> 0x0584, all -> 0x0581, blocks: (B:201:0x0457, B:209:0x0493, B:220:0x04e0, B:255:0x05a4, B:263:0x05bf, B:265:0x05ce, B:267:0x05d6, B:269:0x05fa, B:274:0x0602, B:276:0x0612, B:278:0x0623, B:285:0x062f, B:289:0x063d, B:291:0x064b, B:293:0x0667, B:295:0x066b, B:299:0x0674, B:301:0x067e, B:303:0x0691, B:306:0x069e, B:308:0x06a4, B:309:0x06aa, B:310:0x06ad, B:312:0x06b2, B:314:0x06b7, B:304:0x0697, B:298:0x0672, B:300:0x0678, B:292:0x0661, B:277:0x061a), top: B:618:0x0457 }] */
    /* JADX WARN: Removed duplicated region for block: B:292:0x0661 A[Catch: all -> 0x0581, Exception -> 0x0584, TryCatch #44 {Exception -> 0x0584, all -> 0x0581, blocks: (B:201:0x0457, B:209:0x0493, B:220:0x04e0, B:255:0x05a4, B:263:0x05bf, B:265:0x05ce, B:267:0x05d6, B:269:0x05fa, B:274:0x0602, B:276:0x0612, B:278:0x0623, B:285:0x062f, B:289:0x063d, B:291:0x064b, B:293:0x0667, B:295:0x066b, B:299:0x0674, B:301:0x067e, B:303:0x0691, B:306:0x069e, B:308:0x06a4, B:309:0x06aa, B:310:0x06ad, B:312:0x06b2, B:314:0x06b7, B:304:0x0697, B:298:0x0672, B:300:0x0678, B:292:0x0661, B:277:0x061a), top: B:618:0x0457 }] */
    /* JADX WARN: Removed duplicated region for block: B:295:0x066b A[Catch: all -> 0x0581, Exception -> 0x0584, TryCatch #44 {Exception -> 0x0584, all -> 0x0581, blocks: (B:201:0x0457, B:209:0x0493, B:220:0x04e0, B:255:0x05a4, B:263:0x05bf, B:265:0x05ce, B:267:0x05d6, B:269:0x05fa, B:274:0x0602, B:276:0x0612, B:278:0x0623, B:285:0x062f, B:289:0x063d, B:291:0x064b, B:293:0x0667, B:295:0x066b, B:299:0x0674, B:301:0x067e, B:303:0x0691, B:306:0x069e, B:308:0x06a4, B:309:0x06aa, B:310:0x06ad, B:312:0x06b2, B:314:0x06b7, B:304:0x0697, B:298:0x0672, B:300:0x0678, B:292:0x0661, B:277:0x061a), top: B:618:0x0457 }] */
    /* JADX WARN: Removed duplicated region for block: B:300:0x0678 A[Catch: all -> 0x0581, Exception -> 0x0584, TryCatch #44 {Exception -> 0x0584, all -> 0x0581, blocks: (B:201:0x0457, B:209:0x0493, B:220:0x04e0, B:255:0x05a4, B:263:0x05bf, B:265:0x05ce, B:267:0x05d6, B:269:0x05fa, B:274:0x0602, B:276:0x0612, B:278:0x0623, B:285:0x062f, B:289:0x063d, B:291:0x064b, B:293:0x0667, B:295:0x066b, B:299:0x0674, B:301:0x067e, B:303:0x0691, B:306:0x069e, B:308:0x06a4, B:309:0x06aa, B:310:0x06ad, B:312:0x06b2, B:314:0x06b7, B:304:0x0697, B:298:0x0672, B:300:0x0678, B:292:0x0661, B:277:0x061a), top: B:618:0x0457 }] */
    /* JADX WARN: Removed duplicated region for block: B:303:0x0691 A[Catch: all -> 0x0581, Exception -> 0x0584, TryCatch #44 {Exception -> 0x0584, all -> 0x0581, blocks: (B:201:0x0457, B:209:0x0493, B:220:0x04e0, B:255:0x05a4, B:263:0x05bf, B:265:0x05ce, B:267:0x05d6, B:269:0x05fa, B:274:0x0602, B:276:0x0612, B:278:0x0623, B:285:0x062f, B:289:0x063d, B:291:0x064b, B:293:0x0667, B:295:0x066b, B:299:0x0674, B:301:0x067e, B:303:0x0691, B:306:0x069e, B:308:0x06a4, B:309:0x06aa, B:310:0x06ad, B:312:0x06b2, B:314:0x06b7, B:304:0x0697, B:298:0x0672, B:300:0x0678, B:292:0x0661, B:277:0x061a), top: B:618:0x0457 }] */
    /* JADX WARN: Removed duplicated region for block: B:304:0x0697 A[Catch: all -> 0x0581, Exception -> 0x0584, TryCatch #44 {Exception -> 0x0584, all -> 0x0581, blocks: (B:201:0x0457, B:209:0x0493, B:220:0x04e0, B:255:0x05a4, B:263:0x05bf, B:265:0x05ce, B:267:0x05d6, B:269:0x05fa, B:274:0x0602, B:276:0x0612, B:278:0x0623, B:285:0x062f, B:289:0x063d, B:291:0x064b, B:293:0x0667, B:295:0x066b, B:299:0x0674, B:301:0x067e, B:303:0x0691, B:306:0x069e, B:308:0x06a4, B:309:0x06aa, B:310:0x06ad, B:312:0x06b2, B:314:0x06b7, B:304:0x0697, B:298:0x0672, B:300:0x0678, B:292:0x0661, B:277:0x061a), top: B:618:0x0457 }] */
    /* JADX WARN: Removed duplicated region for block: B:306:0x069e A[Catch: all -> 0x0581, Exception -> 0x0584, TryCatch #44 {Exception -> 0x0584, all -> 0x0581, blocks: (B:201:0x0457, B:209:0x0493, B:220:0x04e0, B:255:0x05a4, B:263:0x05bf, B:265:0x05ce, B:267:0x05d6, B:269:0x05fa, B:274:0x0602, B:276:0x0612, B:278:0x0623, B:285:0x062f, B:289:0x063d, B:291:0x064b, B:293:0x0667, B:295:0x066b, B:299:0x0674, B:301:0x067e, B:303:0x0691, B:306:0x069e, B:308:0x06a4, B:309:0x06aa, B:310:0x06ad, B:312:0x06b2, B:314:0x06b7, B:304:0x0697, B:298:0x0672, B:300:0x0678, B:292:0x0661, B:277:0x061a), top: B:618:0x0457 }] */
    /* JADX WARN: Removed duplicated region for block: B:312:0x06b2 A[Catch: all -> 0x0581, Exception -> 0x0584, TryCatch #44 {Exception -> 0x0584, all -> 0x0581, blocks: (B:201:0x0457, B:209:0x0493, B:220:0x04e0, B:255:0x05a4, B:263:0x05bf, B:265:0x05ce, B:267:0x05d6, B:269:0x05fa, B:274:0x0602, B:276:0x0612, B:278:0x0623, B:285:0x062f, B:289:0x063d, B:291:0x064b, B:293:0x0667, B:295:0x066b, B:299:0x0674, B:301:0x067e, B:303:0x0691, B:306:0x069e, B:308:0x06a4, B:309:0x06aa, B:310:0x06ad, B:312:0x06b2, B:314:0x06b7, B:304:0x0697, B:298:0x0672, B:300:0x0678, B:292:0x0661, B:277:0x061a), top: B:618:0x0457 }] */
    /* JADX WARN: Removed duplicated region for block: B:314:0x06b7 A[Catch: all -> 0x0581, Exception -> 0x0584, TRY_LEAVE, TryCatch #44 {Exception -> 0x0584, all -> 0x0581, blocks: (B:201:0x0457, B:209:0x0493, B:220:0x04e0, B:255:0x05a4, B:263:0x05bf, B:265:0x05ce, B:267:0x05d6, B:269:0x05fa, B:274:0x0602, B:276:0x0612, B:278:0x0623, B:285:0x062f, B:289:0x063d, B:291:0x064b, B:293:0x0667, B:295:0x066b, B:299:0x0674, B:301:0x067e, B:303:0x0691, B:306:0x069e, B:308:0x06a4, B:309:0x06aa, B:310:0x06ad, B:312:0x06b2, B:314:0x06b7, B:304:0x0697, B:298:0x0672, B:300:0x0678, B:292:0x0661, B:277:0x061a), top: B:618:0x0457 }] */
    /* JADX WARN: Removed duplicated region for block: B:323:0x06d8 A[Catch: all -> 0x08cb, Exception -> 0x08d0, TRY_LEAVE, TryCatch #49 {Exception -> 0x08d0, all -> 0x08cb, blocks: (B:246:0x0587, B:321:0x06d2, B:323:0x06d8), top: B:608:0x0587 }] */
    /* JADX WARN: Removed duplicated region for block: B:326:0x06fc A[Catch: all -> 0x08c7, Exception -> 0x08c9, TryCatch #16 {all -> 0x08c7, blocks: (B:335:0x0756, B:348:0x079e, B:350:0x07a5, B:353:0x07ab, B:363:0x07fc, B:366:0x0804, B:379:0x084c, B:341:0x076c, B:343:0x0772, B:345:0x0783, B:347:0x0786, B:346:0x0785, B:325:0x06e0, B:326:0x06fc, B:328:0x0702, B:330:0x0708, B:334:0x0753), top: B:571:0x07a5 }] */
    /* JADX WARN: Removed duplicated region for block: B:337:0x0762  */
    /* JADX WARN: Removed duplicated region for block: B:343:0x0772 A[Catch: all -> 0x08c7, Exception -> 0x08c9, TryCatch #16 {all -> 0x08c7, blocks: (B:335:0x0756, B:348:0x079e, B:350:0x07a5, B:353:0x07ab, B:363:0x07fc, B:366:0x0804, B:379:0x084c, B:341:0x076c, B:343:0x0772, B:345:0x0783, B:347:0x0786, B:346:0x0785, B:325:0x06e0, B:326:0x06fc, B:328:0x0702, B:330:0x0708, B:334:0x0753), top: B:571:0x07a5 }] */
    /* JADX WARN: Removed duplicated region for block: B:365:0x0802  */
    /* JADX WARN: Removed duplicated region for block: B:440:0x0921 A[Catch: all -> 0x090b, Exception -> 0x0915, TryCatch #50 {Exception -> 0x0915, all -> 0x090b, blocks: (B:434:0x0905, B:440:0x0921, B:442:0x0932, B:444:0x0939), top: B:606:0x0905 }] */
    /* JADX WARN: Removed duplicated region for block: B:442:0x0932 A[Catch: all -> 0x090b, Exception -> 0x0915, TryCatch #50 {Exception -> 0x0915, all -> 0x090b, blocks: (B:434:0x0905, B:440:0x0921, B:442:0x0932, B:444:0x0939), top: B:606:0x0905 }] */
    /* JADX WARN: Removed duplicated region for block: B:444:0x0939 A[Catch: all -> 0x090b, Exception -> 0x0915, TRY_LEAVE, TryCatch #50 {Exception -> 0x0915, all -> 0x090b, blocks: (B:434:0x0905, B:440:0x0921, B:442:0x0932, B:444:0x0939), top: B:606:0x0905 }] */
    /* JADX WARN: Removed duplicated region for block: B:448:0x096a A[Catch: all -> 0x0a1d, Exception -> 0x0a29, TRY_LEAVE, TryCatch #42 {Exception -> 0x0a29, all -> 0x0a1d, blocks: (B:446:0x0943, B:448:0x096a), top: B:622:0x0943 }] */
    /* JADX WARN: Removed duplicated region for block: B:451:0x09a2  */
    /* JADX WARN: Removed duplicated region for block: B:453:0x09a5 A[Catch: all -> 0x0a19, Exception -> 0x0a1b, TryCatch #41 {Exception -> 0x0a1b, all -> 0x0a19, blocks: (B:450:0x099e, B:453:0x09a5, B:458:0x09c7, B:460:0x09e6, B:463:0x09ef, B:457:0x09b5), top: B:624:0x099e }] */
    /* JADX WARN: Removed duplicated region for block: B:459:0x09e4  */
    /* JADX WARN: Removed duplicated region for block: B:527:0x0af5  */
    /* JADX WARN: Removed duplicated region for block: B:529:0x0afa  */
    /* JADX WARN: Removed duplicated region for block: B:531:0x0aff  */
    /* JADX WARN: Removed duplicated region for block: B:533:0x0b04  */
    /* JADX WARN: Removed duplicated region for block: B:535:0x0b09  */
    /* JADX WARN: Removed duplicated region for block: B:537:0x0b0e  */
    /* JADX WARN: Removed duplicated region for block: B:539:0x0b13  */
    /* JADX WARN: Removed duplicated region for block: B:541:0x0b18  */
    /* JADX WARN: Removed duplicated region for block: B:543:0x0b1d  */
    /* JADX WARN: Removed duplicated region for block: B:549:0x0b27  */
    /* JADX WARN: Removed duplicated region for block: B:551:0x0b2c  */
    /* JADX WARN: Removed duplicated region for block: B:553:0x0b31  */
    /* JADX WARN: Removed duplicated region for block: B:555:0x0b36  */
    /* JADX WARN: Removed duplicated region for block: B:557:0x0b3b  */
    /* JADX WARN: Removed duplicated region for block: B:559:0x0b40  */
    /* JADX WARN: Removed duplicated region for block: B:561:0x0b45  */
    /* JADX WARN: Removed duplicated region for block: B:563:0x0b4a  */
    /* JADX WARN: Removed duplicated region for block: B:565:0x0b4f  */
    /* JADX WARN: Removed duplicated region for block: B:571:0x07a5 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:593:0x0292 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:597:0x0844 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:599:0x0236 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:606:0x0905 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:632:0x0889 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:646:0x06ba A[SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:650:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:95:0x0289 A[Catch: all -> 0x0273, Exception -> 0x0279, TRY_LEAVE, TryCatch #45 {Exception -> 0x0279, all -> 0x0273, blocks: (B:83:0x0258, B:85:0x0264, B:95:0x0289, B:81:0x024e), top: B:616:0x0258 }] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$putMessages$192(boolean z, long j, TLRPC$messages_Messages tLRPC$messages_Messages, int i, int i2, int i3, boolean z2) {
        Throwable th;
        SQLitePreparedStatement sQLitePreparedStatement;
        SQLiteCursor sQLiteCursor;
        SQLitePreparedStatement sQLitePreparedStatement2;
        SQLitePreparedStatement sQLitePreparedStatement3;
        SQLitePreparedStatement sQLitePreparedStatement4;
        SQLitePreparedStatement sQLitePreparedStatement5;
        SQLitePreparedStatement sQLitePreparedStatement6;
        Exception exc;
        SQLiteCursor sQLiteCursor2;
        SQLitePreparedStatement sQLitePreparedStatement7;
        SQLiteCursor sQLiteCursor3;
        SQLiteDatabase sQLiteDatabase;
        SQLiteCursor sQLiteCursor4;
        Throwable th2;
        SQLiteDatabase sQLiteDatabase2;
        SQLiteCursor sQLiteCursor5;
        SQLiteCursor sQLiteCursor6;
        int i4;
        int size;
        SQLitePreparedStatement executeFast;
        SQLiteCursor sQLiteCursor7;
        SQLiteCursor sQLiteCursor8;
        SQLitePreparedStatement executeFast2;
        int i5;
        Integer num;
        long j2;
        TLRPC$Message tLRPC$Message;
        SQLitePreparedStatement sQLitePreparedStatement8;
        int i6;
        SQLitePreparedStatement sQLitePreparedStatement9;
        boolean z3;
        SQLitePreparedStatement sQLitePreparedStatement10;
        SQLitePreparedStatement sQLitePreparedStatement11;
        SQLiteCursor sQLiteCursor9;
        SQLiteCursor sQLiteCursor10;
        TLRPC$Message tLRPC$Message2;
        int i7;
        SQLitePreparedStatement sQLitePreparedStatement12;
        int i8;
        ArrayList<File> arrayList;
        int i9;
        int i10;
        SQLitePreparedStatement sQLitePreparedStatement13;
        ArrayList<Pair<Long, Integer>> arrayList2;
        ArrayList arrayList3;
        int i11;
        int i12;
        SQLitePreparedStatement sQLitePreparedStatement14;
        int i13;
        int i14;
        boolean z4;
        ArrayList<File> arrayList4;
        int i15;
        int i16;
        SQLiteCursor sQLiteCursor11;
        TLRPC$MessageMedia tLRPC$MessageMedia;
        SQLitePreparedStatement sQLitePreparedStatement15;
        SQLitePreparedStatement sQLitePreparedStatement16;
        TLRPC$Message tLRPC$Message3;
        int i17;
        int i18;
        int i19;
        int i20;
        NativeByteBuffer nativeByteBuffer;
        TLRPC$TL_messageReplyHeader tLRPC$TL_messageReplyHeader;
        int i21;
        int i22;
        NativeByteBuffer writeLocalParams;
        int i23;
        SQLiteCursor queryFinalized;
        boolean next;
        int i24;
        int i25;
        int i26;
        SQLitePreparedStatement sQLitePreparedStatement17;
        Long l;
        ArrayList<TLRPC$Message> arrayList5;
        final MessagesStorage messagesStorage = this;
        TLRPC$messages_Messages tLRPC$messages_Messages2 = tLRPC$messages_Messages;
        int i27 = i2;
        try {
            if (z) {
                messagesStorage.database.executeFast(String.format(Locale.US, "DELETE FROM scheduled_messages_v2 WHERE uid = %d AND mid > 0", Long.valueOf(j))).stepThis().dispose();
                SQLitePreparedStatement executeFast3 = messagesStorage.database.executeFast("REPLACE INTO scheduled_messages_v2 VALUES(?, ?, ?, ?, ?, ?, NULL, 0)");
                try {
                    int size2 = tLRPC$messages_Messages2.messages.size();
                    for (int i28 = 0; i28 < size2; i28++) {
                        TLRPC$Message tLRPC$Message4 = tLRPC$messages_Messages2.messages.get(i28);
                        if (!(tLRPC$Message4 instanceof TLRPC$TL_messageEmpty)) {
                            messagesStorage.fixUnsupportedMedia(tLRPC$Message4);
                            executeFast3.requery();
                            NativeByteBuffer nativeByteBuffer2 = new NativeByteBuffer(tLRPC$Message4.getObjectSize());
                            tLRPC$Message4.serializeToStream(nativeByteBuffer2);
                            executeFast3.bindInteger(1, tLRPC$Message4.id);
                            executeFast3.bindLong(2, j);
                            executeFast3.bindInteger(3, tLRPC$Message4.send_state);
                            executeFast3.bindInteger(4, tLRPC$Message4.date);
                            executeFast3.bindByteBuffer(5, nativeByteBuffer2);
                            executeFast3.bindInteger(6, tLRPC$Message4.ttl);
                            executeFast3.step();
                            nativeByteBuffer2.reuse();
                        }
                    }
                    executeFast3.dispose();
                    messagesStorage.putUsersInternal(tLRPC$messages_Messages2.users);
                    messagesStorage.putChatsInternal(tLRPC$messages_Messages2.chats);
                    messagesStorage.database.commitTransaction();
                    messagesStorage.broadcastScheduledMessagesChange(Long.valueOf(j));
                    sQLitePreparedStatement10 = null;
                    sQLitePreparedStatement4 = null;
                    sQLitePreparedStatement5 = null;
                } catch (Exception e) {
                    e = e;
                    sQLitePreparedStatement3 = executeFast3;
                    sQLitePreparedStatement = null;
                    sQLiteCursor11 = null;
                    sQLitePreparedStatement2 = null;
                    sQLitePreparedStatement4 = null;
                    sQLitePreparedStatement5 = null;
                    sQLitePreparedStatement6 = null;
                    sQLitePreparedStatement7 = null;
                    exc = e;
                    sQLiteCursor4 = sQLiteCursor11;
                    try {
                        messagesStorage.checkSQLException(exc);
                        sQLiteDatabase2 = messagesStorage.database;
                        if (sQLiteDatabase2 != null) {
                        }
                        if (sQLitePreparedStatement != null) {
                        }
                        if (sQLitePreparedStatement3 != null) {
                        }
                        if (sQLitePreparedStatement7 != null) {
                        }
                        if (sQLitePreparedStatement6 != null) {
                        }
                        if (sQLitePreparedStatement4 != null) {
                        }
                        if (sQLitePreparedStatement5 != null) {
                        }
                        if (sQLitePreparedStatement2 != null) {
                        }
                        if (sQLiteCursor4 == null) {
                        }
                    } catch (Throwable th3) {
                        th2 = th3;
                        th = th2;
                        sQLiteCursor3 = sQLiteCursor4;
                        sQLiteDatabase = messagesStorage.database;
                        if (sQLiteDatabase != null) {
                            sQLiteDatabase.commitTransaction();
                        }
                        if (sQLitePreparedStatement != null) {
                            sQLitePreparedStatement.dispose();
                        }
                        if (sQLitePreparedStatement3 != null) {
                            sQLitePreparedStatement3.dispose();
                        }
                        if (sQLitePreparedStatement7 != null) {
                            sQLitePreparedStatement7.dispose();
                        }
                        if (sQLitePreparedStatement6 != null) {
                            sQLitePreparedStatement6.dispose();
                        }
                        if (sQLitePreparedStatement4 != null) {
                            sQLitePreparedStatement4.dispose();
                        }
                        if (sQLitePreparedStatement5 != null) {
                            sQLitePreparedStatement5.dispose();
                        }
                        if (sQLitePreparedStatement2 != null) {
                            sQLitePreparedStatement2.dispose();
                        }
                        if (sQLiteCursor3 != null) {
                            sQLiteCursor3.dispose();
                        }
                        throw th;
                    }
                } catch (Throwable th4) {
                    th2 = th4;
                    sQLitePreparedStatement3 = executeFast3;
                    sQLitePreparedStatement = null;
                    sQLiteCursor4 = null;
                    sQLitePreparedStatement2 = null;
                    sQLitePreparedStatement4 = null;
                    sQLitePreparedStatement5 = null;
                    sQLitePreparedStatement6 = null;
                    sQLitePreparedStatement7 = null;
                    th = th2;
                    sQLiteCursor3 = sQLiteCursor4;
                    sQLiteDatabase = messagesStorage.database;
                    if (sQLiteDatabase != null) {
                    }
                    if (sQLitePreparedStatement != null) {
                    }
                    if (sQLitePreparedStatement3 != null) {
                    }
                    if (sQLitePreparedStatement7 != null) {
                    }
                    if (sQLitePreparedStatement6 != null) {
                    }
                    if (sQLitePreparedStatement4 != null) {
                    }
                    if (sQLitePreparedStatement5 != null) {
                    }
                    if (sQLitePreparedStatement2 != null) {
                    }
                    if (sQLiteCursor3 != null) {
                    }
                    throw th;
                }
            } else {
                try {
                    String str = i != 0 ? "messages_holes_topics" : "messages_holes";
                    if (tLRPC$messages_Messages2.messages.isEmpty()) {
                        if (i27 == 0) {
                            try {
                                doneHolesInTable(str, j, i3, i);
                                doneHolesInMedia(j, i3, -1, i);
                            } catch (Exception e2) {
                                exc = e2;
                                sQLitePreparedStatement = null;
                                sQLiteCursor6 = null;
                                sQLitePreparedStatement2 = null;
                                sQLitePreparedStatement3 = sQLitePreparedStatement2;
                                sQLitePreparedStatement4 = sQLitePreparedStatement3;
                                sQLitePreparedStatement5 = sQLitePreparedStatement4;
                                sQLitePreparedStatement6 = sQLitePreparedStatement5;
                                sQLitePreparedStatement7 = sQLitePreparedStatement6;
                                sQLiteCursor4 = sQLiteCursor6;
                                messagesStorage.checkSQLException(exc);
                                sQLiteDatabase2 = messagesStorage.database;
                                if (sQLiteDatabase2 != null) {
                                }
                                if (sQLitePreparedStatement != null) {
                                }
                                if (sQLitePreparedStatement3 != null) {
                                }
                                if (sQLitePreparedStatement7 != null) {
                                }
                                if (sQLitePreparedStatement6 != null) {
                                }
                                if (sQLitePreparedStatement4 != null) {
                                }
                                if (sQLitePreparedStatement5 != null) {
                                }
                                if (sQLitePreparedStatement2 != null) {
                                }
                                if (sQLiteCursor4 == null) {
                                }
                            } catch (Throwable th5) {
                                th = th5;
                                sQLitePreparedStatement = null;
                                sQLiteCursor5 = null;
                                sQLitePreparedStatement2 = null;
                                sQLitePreparedStatement3 = sQLitePreparedStatement2;
                                sQLitePreparedStatement4 = sQLitePreparedStatement3;
                                sQLitePreparedStatement5 = sQLitePreparedStatement4;
                                sQLitePreparedStatement6 = sQLitePreparedStatement5;
                                sQLitePreparedStatement7 = sQLitePreparedStatement6;
                                sQLiteCursor3 = sQLiteCursor5;
                                sQLiteDatabase = messagesStorage.database;
                                if (sQLiteDatabase != null) {
                                }
                                if (sQLitePreparedStatement != null) {
                                }
                                if (sQLitePreparedStatement3 != null) {
                                }
                                if (sQLitePreparedStatement7 != null) {
                                }
                                if (sQLitePreparedStatement6 != null) {
                                }
                                if (sQLitePreparedStatement4 != null) {
                                }
                                if (sQLitePreparedStatement5 != null) {
                                }
                                if (sQLitePreparedStatement2 != null) {
                                }
                                if (sQLiteCursor3 != null) {
                                }
                                throw th;
                            }
                        }
                        SQLiteDatabase sQLiteDatabase3 = messagesStorage.database;
                        if (sQLiteDatabase3 != null) {
                            sQLiteDatabase3.commitTransaction();
                            return;
                        }
                        return;
                    }
                    try {
                        messagesStorage.database.beginTransaction();
                    } catch (Exception e3) {
                        e = e3;
                        sQLiteCursor6 = null;
                        exc = e;
                        SQLiteCursor sQLiteCursor12 = sQLiteCursor6;
                        sQLitePreparedStatement2 = sQLiteCursor12;
                        sQLitePreparedStatement = sQLiteCursor12;
                        sQLitePreparedStatement3 = sQLitePreparedStatement2;
                        sQLitePreparedStatement4 = sQLitePreparedStatement3;
                        sQLitePreparedStatement5 = sQLitePreparedStatement4;
                        sQLitePreparedStatement6 = sQLitePreparedStatement5;
                        sQLitePreparedStatement7 = sQLitePreparedStatement6;
                        sQLiteCursor4 = sQLiteCursor6;
                        messagesStorage.checkSQLException(exc);
                        sQLiteDatabase2 = messagesStorage.database;
                        if (sQLiteDatabase2 != null) {
                        }
                        if (sQLitePreparedStatement != null) {
                        }
                        if (sQLitePreparedStatement3 != null) {
                        }
                        if (sQLitePreparedStatement7 != null) {
                        }
                        if (sQLitePreparedStatement6 != null) {
                        }
                        if (sQLitePreparedStatement4 != null) {
                        }
                        if (sQLitePreparedStatement5 != null) {
                        }
                        if (sQLitePreparedStatement2 != null) {
                        }
                        if (sQLiteCursor4 == null) {
                        }
                    } catch (Throwable th6) {
                        th = th6;
                        sQLiteCursor5 = null;
                        th = th;
                        SQLiteCursor sQLiteCursor13 = sQLiteCursor5;
                        sQLitePreparedStatement2 = sQLiteCursor13;
                        sQLitePreparedStatement = sQLiteCursor13;
                        sQLitePreparedStatement3 = sQLitePreparedStatement2;
                        sQLitePreparedStatement4 = sQLitePreparedStatement3;
                        sQLitePreparedStatement5 = sQLitePreparedStatement4;
                        sQLitePreparedStatement6 = sQLitePreparedStatement5;
                        sQLitePreparedStatement7 = sQLitePreparedStatement6;
                        sQLiteCursor3 = sQLiteCursor5;
                        sQLiteDatabase = messagesStorage.database;
                        if (sQLiteDatabase != null) {
                        }
                        if (sQLitePreparedStatement != null) {
                        }
                        if (sQLitePreparedStatement3 != null) {
                        }
                        if (sQLitePreparedStatement7 != null) {
                        }
                        if (sQLitePreparedStatement6 != null) {
                        }
                        if (sQLitePreparedStatement4 != null) {
                        }
                        if (sQLitePreparedStatement5 != null) {
                        }
                        if (sQLitePreparedStatement2 != null) {
                        }
                        if (sQLiteCursor3 != null) {
                        }
                        throw th;
                    }
                    try {
                        try {
                            try {
                                try {
                                    try {
                                        if (i27 == 0) {
                                            int i29 = tLRPC$messages_Messages2.messages.get(arrayList5.size() - 1).id;
                                            closeHolesInTable(str, j, i29, i3, i);
                                            closeHolesInMedia(j, i29, i3, -1, i);
                                        } else if (i27 == 1) {
                                            int i30 = tLRPC$messages_Messages2.messages.get(0).id;
                                            closeHolesInTable(str, j, i3, i30, i);
                                            closeHolesInMedia(j, i3, i30, -1, i);
                                        } else {
                                            if (i27 != 3) {
                                                i4 = 4;
                                                if (i27 != 2) {
                                                }
                                            } else {
                                                i4 = 4;
                                            }
                                            int i31 = (i3 != 0 || i27 == i4) ? tLRPC$messages_Messages2.messages.get(0).id : ConnectionsManager.DEFAULT_DATACENTER_ID;
                                            ArrayList<TLRPC$Message> arrayList6 = tLRPC$messages_Messages2.messages;
                                            int i32 = arrayList6.get(arrayList6.size() - 1).id;
                                            closeHolesInTable(str, j, i32, i31, i);
                                            closeHolesInMedia(j, i32, i31, -1, i);
                                            size = tLRPC$messages_Messages2.messages.size();
                                            ArrayList<File> arrayList7 = new ArrayList<>();
                                            ArrayList arrayList8 = new ArrayList();
                                            ArrayList<Pair<Long, Integer>> arrayList9 = new ArrayList<>();
                                            executeFast = messagesStorage.database.executeFast("REPLACE INTO messages_topics VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, NULL, ?, ?, ?, ?, ?, ?, 0, ?)");
                                            sQLitePreparedStatement3 = messagesStorage.database.executeFast("REPLACE INTO messages_v2 VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, NULL, ?, ?, ?, ?, ?, ?, 0, ?, ?)");
                                            executeFast2 = messagesStorage.database.executeFast("REPLACE INTO media_v4 VALUES(?, ?, ?, ?, ?)");
                                            SQLitePreparedStatement executeFast4 = messagesStorage.database.executeFast("REPLACE INTO media_topics VALUES(?, ?, ?, ?, ?, ?)");
                                            int i33 = ConnectionsManager.DEFAULT_DATACENTER_ID;
                                            i5 = 0;
                                            int i34 = ConnectionsManager.DEFAULT_DATACENTER_ID;
                                            sQLitePreparedStatement4 = null;
                                            num = null;
                                            sQLitePreparedStatement5 = null;
                                            TLRPC$Message tLRPC$Message5 = null;
                                            sQLitePreparedStatement6 = null;
                                            Long l2 = null;
                                            j2 = 0;
                                            while (i5 < size) {
                                                try {
                                                    tLRPC$Message2 = tLRPC$messages_Messages2.messages.get(i5);
                                                } catch (Exception e4) {
                                                    e = e4;
                                                    sQLitePreparedStatement11 = executeFast2;
                                                } catch (Throwable th7) {
                                                    th = th7;
                                                    sQLitePreparedStatement11 = executeFast2;
                                                }
                                                try {
                                                    try {
                                                        if (num != null || tLRPC$Message2 == null) {
                                                            if (num != null) {
                                                                i7 = i33;
                                                                sQLitePreparedStatement12 = executeFast4;
                                                            } else {
                                                                i7 = i33;
                                                                sQLitePreparedStatement12 = executeFast4;
                                                            }
                                                            if (j2 == 0) {
                                                                j2 = tLRPC$Message2.peer_id.channel_id;
                                                            }
                                                            if (i27 != -2) {
                                                                try {
                                                                    SQLitePreparedStatement sQLitePreparedStatement18 = executeFast2;
                                                                    try {
                                                                        ArrayList<Pair<Long, Integer>> arrayList10 = arrayList9;
                                                                        ArrayList arrayList11 = arrayList8;
                                                                        i8 = size;
                                                                        SQLiteCursor queryFinalized2 = messagesStorage.database.queryFinalized(String.format(Locale.US, "SELECT mid, data, ttl, mention, read_state, send_state, custom_params FROM messages_v2 WHERE mid = %d AND uid = %d", Integer.valueOf(tLRPC$Message2.id), Long.valueOf(MessageObject.getDialogId(tLRPC$Message2))), new Object[0]);
                                                                        try {
                                                                            boolean next2 = queryFinalized2.next();
                                                                            if (next2) {
                                                                                NativeByteBuffer byteBufferValue = queryFinalized2.byteBufferValue(1);
                                                                                if (byteBufferValue != null) {
                                                                                    TLRPC$Message TLdeserialize = TLRPC$Message.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                                                                                    TLdeserialize.readAttachPath(byteBufferValue, getUserConfig().clientUserId);
                                                                                    byteBufferValue.reuse();
                                                                                    if (queryFinalized2.intValue(5) != 3) {
                                                                                        try {
                                                                                            if (MessageObject.getFileName(TLdeserialize).equals(MessageObject.getFileName(tLRPC$Message2))) {
                                                                                                tLRPC$Message2.attachPath = TLdeserialize.attachPath;
                                                                                            }
                                                                                            tLRPC$Message2.ttl = queryFinalized2.intValue(2);
                                                                                        } catch (Exception e5) {
                                                                                            exc = e5;
                                                                                            sQLiteCursor10 = queryFinalized2;
                                                                                            sQLitePreparedStatement = executeFast;
                                                                                            sQLitePreparedStatement7 = sQLitePreparedStatement18;
                                                                                            sQLitePreparedStatement2 = null;
                                                                                            sQLiteCursor4 = sQLiteCursor10;
                                                                                            messagesStorage.checkSQLException(exc);
                                                                                            sQLiteDatabase2 = messagesStorage.database;
                                                                                            if (sQLiteDatabase2 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement3 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement7 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement6 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement4 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement5 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement2 != null) {
                                                                                            }
                                                                                            if (sQLiteCursor4 == null) {
                                                                                            }
                                                                                        } catch (Throwable th8) {
                                                                                            th = th8;
                                                                                            sQLiteCursor9 = queryFinalized2;
                                                                                            sQLitePreparedStatement = executeFast;
                                                                                            sQLitePreparedStatement7 = sQLitePreparedStatement18;
                                                                                            sQLitePreparedStatement2 = null;
                                                                                            sQLiteCursor3 = sQLiteCursor9;
                                                                                            sQLiteDatabase = messagesStorage.database;
                                                                                            if (sQLiteDatabase != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement3 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement7 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement6 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement4 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement5 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement2 != null) {
                                                                                            }
                                                                                            if (sQLiteCursor3 != null) {
                                                                                            }
                                                                                            throw th;
                                                                                        }
                                                                                    }
                                                                                    TLRPC$MessageMedia tLRPC$MessageMedia2 = TLdeserialize.media;
                                                                                    if (tLRPC$MessageMedia2 instanceof TLRPC$TL_messageMediaPhoto) {
                                                                                        TLRPC$MessageMedia tLRPC$MessageMedia3 = tLRPC$Message2.media;
                                                                                        if ((tLRPC$MessageMedia3 instanceof TLRPC$TL_messageMediaPhoto) && (r4 = tLRPC$MessageMedia2.photo) != null && (r2 = tLRPC$MessageMedia3.photo) != null) {
                                                                                            arrayList4 = arrayList7;
                                                                                        }
                                                                                    }
                                                                                    arrayList4 = arrayList7;
                                                                                    if (tLRPC$MessageMedia2 instanceof TLRPC$TL_messageMediaDocument) {
                                                                                        TLRPC$MessageMedia tLRPC$MessageMedia4 = tLRPC$Message2.media;
                                                                                        if (tLRPC$MessageMedia4 instanceof TLRPC$TL_messageMediaDocument) {
                                                                                            TLRPC$Document tLRPC$Document = tLRPC$MessageMedia2.document;
                                                                                            if (tLRPC$Document != null) {
                                                                                                TLRPC$Document tLRPC$Document2 = tLRPC$MessageMedia4.document;
                                                                                                if (tLRPC$Document2 != null) {
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    boolean z5 = false;
                                                                                    if (z5) {
                                                                                        arrayList = arrayList4;
                                                                                        i10 = i7;
                                                                                        sQLitePreparedStatement13 = sQLitePreparedStatement12;
                                                                                        sQLitePreparedStatement7 = sQLitePreparedStatement18;
                                                                                        arrayList2 = arrayList10;
                                                                                        arrayList3 = arrayList11;
                                                                                        i13 = 3;
                                                                                    } else {
                                                                                        int i35 = i7;
                                                                                        sQLitePreparedStatement7 = sQLitePreparedStatement18;
                                                                                        sQLitePreparedStatement13 = sQLitePreparedStatement12;
                                                                                        arrayList2 = arrayList10;
                                                                                        i10 = i35;
                                                                                        arrayList3 = arrayList11;
                                                                                        i13 = 3;
                                                                                        arrayList = arrayList4;
                                                                                        try {
                                                                                            addFilesToDelete(TLdeserialize, arrayList4, arrayList2, arrayList3, false);
                                                                                        } catch (Exception e6) {
                                                                                            e = e6;
                                                                                            exc = e;
                                                                                            sQLiteCursor10 = queryFinalized2;
                                                                                            sQLitePreparedStatement = executeFast;
                                                                                            sQLitePreparedStatement2 = null;
                                                                                            sQLiteCursor4 = sQLiteCursor10;
                                                                                            messagesStorage.checkSQLException(exc);
                                                                                            sQLiteDatabase2 = messagesStorage.database;
                                                                                            if (sQLiteDatabase2 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement3 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement7 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement6 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement4 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement5 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement2 != null) {
                                                                                            }
                                                                                            if (sQLiteCursor4 == null) {
                                                                                            }
                                                                                        } catch (Throwable th9) {
                                                                                            th = th9;
                                                                                            th = th;
                                                                                            sQLiteCursor9 = queryFinalized2;
                                                                                            sQLitePreparedStatement = executeFast;
                                                                                            sQLitePreparedStatement2 = null;
                                                                                            sQLiteCursor3 = sQLiteCursor9;
                                                                                            sQLiteDatabase = messagesStorage.database;
                                                                                            if (sQLiteDatabase != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement3 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement7 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement6 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement4 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement5 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement2 != null) {
                                                                                            }
                                                                                            if (sQLiteCursor3 != null) {
                                                                                            }
                                                                                            throw th;
                                                                                        }
                                                                                    }
                                                                                    NativeByteBuffer byteBufferValue2 = queryFinalized2.byteBufferValue(6);
                                                                                    MessageCustomParamsHelper.readLocalParams(tLRPC$Message2, byteBufferValue2);
                                                                                    if (byteBufferValue2 != null) {
                                                                                        byteBufferValue2.reuse();
                                                                                    }
                                                                                } else {
                                                                                    arrayList = arrayList7;
                                                                                    i10 = i7;
                                                                                    sQLitePreparedStatement13 = sQLitePreparedStatement12;
                                                                                    sQLitePreparedStatement7 = sQLitePreparedStatement18;
                                                                                    arrayList2 = arrayList10;
                                                                                    arrayList3 = arrayList11;
                                                                                    i13 = 3;
                                                                                }
                                                                                if (queryFinalized2.intValue(i13) != 0) {
                                                                                    i14 = 4;
                                                                                    z4 = true;
                                                                                } else {
                                                                                    i14 = 4;
                                                                                    z4 = false;
                                                                                }
                                                                                int intValue = queryFinalized2.intValue(i14);
                                                                                if (z4 != tLRPC$Message2.mentioned) {
                                                                                    int i36 = i34;
                                                                                    if (i36 == Integer.MAX_VALUE) {
                                                                                        SQLiteCursor queryFinalized3 = messagesStorage.database.queryFinalized("SELECT unread_count_i FROM dialogs WHERE did = " + j, new Object[0]);
                                                                                        if (queryFinalized3.next()) {
                                                                                            i36 = queryFinalized3.intValue(0);
                                                                                        }
                                                                                        i34 = i36;
                                                                                        queryFinalized3.dispose();
                                                                                    } else {
                                                                                        i34 = i36;
                                                                                    }
                                                                                    if (z4) {
                                                                                        if (intValue <= 1) {
                                                                                            i34--;
                                                                                        }
                                                                                    } else if (tLRPC$Message2.media_unread) {
                                                                                        i34++;
                                                                                    }
                                                                                    queryFinalized2.dispose();
                                                                                    if (!next2) {
                                                                                        i11 = i2;
                                                                                        i12 = i5;
                                                                                        sQLitePreparedStatement11 = sQLitePreparedStatement7;
                                                                                        sQLitePreparedStatement14 = sQLitePreparedStatement13;
                                                                                        i33 = i10;
                                                                                        i5 = i12 + 1;
                                                                                        tLRPC$messages_Messages2 = tLRPC$messages_Messages;
                                                                                        i27 = i11;
                                                                                        executeFast2 = sQLitePreparedStatement11;
                                                                                        executeFast4 = sQLitePreparedStatement14;
                                                                                        arrayList9 = arrayList2;
                                                                                        arrayList8 = arrayList3;
                                                                                        size = i8;
                                                                                        arrayList7 = arrayList;
                                                                                    }
                                                                                } else {
                                                                                    i9 = i34;
                                                                                }
                                                                            } else {
                                                                                arrayList = arrayList7;
                                                                                i9 = i34;
                                                                                i10 = i7;
                                                                                sQLitePreparedStatement13 = sQLitePreparedStatement12;
                                                                                sQLitePreparedStatement7 = sQLitePreparedStatement18;
                                                                                arrayList2 = arrayList10;
                                                                                arrayList3 = arrayList11;
                                                                            }
                                                                            i34 = i9;
                                                                            queryFinalized2.dispose();
                                                                            if (!next2) {
                                                                            }
                                                                        } catch (Exception e7) {
                                                                            e = e7;
                                                                            sQLitePreparedStatement7 = sQLitePreparedStatement18;
                                                                        } catch (Throwable th10) {
                                                                            th = th10;
                                                                            sQLitePreparedStatement7 = sQLitePreparedStatement18;
                                                                        }
                                                                    } catch (Exception e8) {
                                                                        e = e8;
                                                                        sQLitePreparedStatement7 = sQLitePreparedStatement18;
                                                                        exc = e;
                                                                        sQLitePreparedStatement = executeFast;
                                                                        sQLiteCursor10 = null;
                                                                        sQLitePreparedStatement2 = null;
                                                                        sQLiteCursor4 = sQLiteCursor10;
                                                                        messagesStorage.checkSQLException(exc);
                                                                        sQLiteDatabase2 = messagesStorage.database;
                                                                        if (sQLiteDatabase2 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement3 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement7 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement6 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement4 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement5 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement2 != null) {
                                                                        }
                                                                        if (sQLiteCursor4 == null) {
                                                                        }
                                                                    } catch (Throwable th11) {
                                                                        th = th11;
                                                                        sQLitePreparedStatement7 = sQLitePreparedStatement18;
                                                                        th = th;
                                                                        sQLitePreparedStatement = executeFast;
                                                                        sQLiteCursor9 = null;
                                                                        sQLitePreparedStatement2 = null;
                                                                        sQLiteCursor3 = sQLiteCursor9;
                                                                        sQLiteDatabase = messagesStorage.database;
                                                                        if (sQLiteDatabase != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement3 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement7 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement6 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement4 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement5 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement2 != null) {
                                                                        }
                                                                        if (sQLiteCursor3 != null) {
                                                                        }
                                                                        throw th;
                                                                    }
                                                                } catch (Exception e9) {
                                                                    e = e9;
                                                                    sQLitePreparedStatement7 = executeFast2;
                                                                } catch (Throwable th12) {
                                                                    th = th12;
                                                                    sQLitePreparedStatement7 = executeFast2;
                                                                }
                                                            } else {
                                                                arrayList3 = arrayList8;
                                                                arrayList = arrayList7;
                                                                i8 = size;
                                                                i10 = i7;
                                                                sQLitePreparedStatement13 = sQLitePreparedStatement12;
                                                                sQLitePreparedStatement7 = executeFast2;
                                                                arrayList2 = arrayList9;
                                                            }
                                                            if (i5 == 0 && z2) {
                                                                try {
                                                                    queryFinalized = messagesStorage.database.queryFinalized("SELECT pinned, unread_count_i, flags FROM dialogs WHERE did = " + j, new Object[0]);
                                                                    try {
                                                                        next = queryFinalized.next();
                                                                        if (next) {
                                                                            i24 = 0;
                                                                            i25 = 0;
                                                                            i26 = 0;
                                                                        } else {
                                                                            int intValue2 = queryFinalized.intValue(0);
                                                                            int intValue3 = queryFinalized.intValue(1);
                                                                            i26 = queryFinalized.intValue(2);
                                                                            i24 = intValue2;
                                                                            i25 = intValue3;
                                                                        }
                                                                        queryFinalized.dispose();
                                                                        if (next) {
                                                                            SQLitePreparedStatement executeFast5 = messagesStorage.database.executeFast("REPLACE INTO dialogs VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
                                                                            try {
                                                                                executeFast5.bindLong(1, j);
                                                                                executeFast5.bindInteger(2, tLRPC$Message2.date);
                                                                                executeFast5.bindInteger(3, 0);
                                                                                executeFast5.bindInteger(4, tLRPC$Message2.id);
                                                                                executeFast5.bindInteger(5, tLRPC$Message2.id);
                                                                                executeFast5.bindInteger(6, 0);
                                                                                executeFast5.bindInteger(7, tLRPC$Message2.id);
                                                                                executeFast5.bindInteger(8, i25);
                                                                                executeFast5.bindInteger(9, tLRPC$messages_Messages2.pts);
                                                                                executeFast5.bindInteger(10, tLRPC$Message2.date);
                                                                                executeFast5.bindInteger(11, i24);
                                                                                executeFast5.bindInteger(12, i26);
                                                                                executeFast5.bindInteger(13, -1);
                                                                                executeFast5.bindNull(14);
                                                                                executeFast5.bindInteger(15, 0);
                                                                                if ((tLRPC$Message2.flags & 131072) != 0) {
                                                                                    executeFast5.bindLong(16, tLRPC$Message2.grouped_id);
                                                                                } else {
                                                                                    executeFast5.bindNull(16);
                                                                                }
                                                                                executeFast5.bindInteger(17, 0);
                                                                                messagesStorage.unknownDialogsIds.put(j, Boolean.TRUE);
                                                                                sQLitePreparedStatement17 = executeFast5;
                                                                            } catch (Exception e10) {
                                                                                exc = e10;
                                                                                sQLitePreparedStatement2 = executeFast5;
                                                                                sQLitePreparedStatement = executeFast;
                                                                                sQLiteCursor4 = null;
                                                                                messagesStorage.checkSQLException(exc);
                                                                                sQLiteDatabase2 = messagesStorage.database;
                                                                                if (sQLiteDatabase2 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement3 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement7 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement6 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement4 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement5 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement2 != null) {
                                                                                }
                                                                                if (sQLiteCursor4 == null) {
                                                                                }
                                                                            } catch (Throwable th13) {
                                                                                th = th13;
                                                                                sQLitePreparedStatement2 = executeFast5;
                                                                                sQLitePreparedStatement = executeFast;
                                                                                sQLiteCursor3 = null;
                                                                                sQLiteDatabase = messagesStorage.database;
                                                                                if (sQLiteDatabase != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement3 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement7 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement6 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement4 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement5 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement2 != null) {
                                                                                }
                                                                                if (sQLiteCursor3 != null) {
                                                                                }
                                                                                throw th;
                                                                            }
                                                                        } else {
                                                                            sQLitePreparedStatement17 = messagesStorage.database.executeFast("UPDATE dialogs SET date = ?, last_mid = ?, last_mid_group = ?, inbox_max = ?, last_mid_i = ?, pts = ?, date_i = ? WHERE did = ?");
                                                                            try {
                                                                                sQLitePreparedStatement17.bindInteger(1, tLRPC$Message2.date);
                                                                                sQLitePreparedStatement17.bindInteger(2, tLRPC$Message2.id);
                                                                                if ((tLRPC$Message2.flags & 131072) != 0) {
                                                                                    sQLitePreparedStatement17.bindLong(3, tLRPC$Message2.grouped_id);
                                                                                } else {
                                                                                    sQLitePreparedStatement17.bindNull(3);
                                                                                }
                                                                                sQLitePreparedStatement17.bindInteger(4, tLRPC$Message2.id);
                                                                                sQLitePreparedStatement17.bindInteger(5, tLRPC$Message2.id);
                                                                                sQLitePreparedStatement17.bindInteger(6, tLRPC$messages_Messages2.pts);
                                                                                sQLitePreparedStatement17.bindInteger(7, tLRPC$Message2.date);
                                                                                sQLitePreparedStatement17.bindLong(8, j);
                                                                            } catch (Exception e11) {
                                                                                exc = e11;
                                                                                sQLitePreparedStatement2 = sQLitePreparedStatement17;
                                                                                sQLitePreparedStatement = executeFast;
                                                                                sQLiteCursor4 = null;
                                                                                messagesStorage.checkSQLException(exc);
                                                                                sQLiteDatabase2 = messagesStorage.database;
                                                                                if (sQLiteDatabase2 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement3 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement7 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement6 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement4 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement5 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement2 != null) {
                                                                                }
                                                                                if (sQLiteCursor4 == null) {
                                                                                }
                                                                            } catch (Throwable th14) {
                                                                                th = th14;
                                                                                sQLitePreparedStatement2 = sQLitePreparedStatement17;
                                                                                sQLitePreparedStatement = executeFast;
                                                                                sQLiteCursor3 = null;
                                                                                sQLiteDatabase = messagesStorage.database;
                                                                                if (sQLiteDatabase != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement3 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement7 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement6 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement4 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement5 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement2 != null) {
                                                                                }
                                                                                if (sQLiteCursor3 != null) {
                                                                                }
                                                                                throw th;
                                                                            }
                                                                        }
                                                                        sQLitePreparedStatement17.step();
                                                                        sQLitePreparedStatement17.dispose();
                                                                    } catch (Exception e12) {
                                                                        e = e12;
                                                                        sQLiteCursor11 = queryFinalized;
                                                                        sQLitePreparedStatement = executeFast;
                                                                        sQLitePreparedStatement2 = null;
                                                                        exc = e;
                                                                        sQLiteCursor4 = sQLiteCursor11;
                                                                        messagesStorage.checkSQLException(exc);
                                                                        sQLiteDatabase2 = messagesStorage.database;
                                                                        if (sQLiteDatabase2 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement3 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement7 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement6 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement4 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement5 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement2 != null) {
                                                                        }
                                                                        if (sQLiteCursor4 == null) {
                                                                        }
                                                                    } catch (Throwable th15) {
                                                                        th2 = th15;
                                                                        sQLiteCursor4 = queryFinalized;
                                                                        sQLitePreparedStatement = executeFast;
                                                                        sQLitePreparedStatement2 = null;
                                                                        th = th2;
                                                                        sQLiteCursor3 = sQLiteCursor4;
                                                                        sQLiteDatabase = messagesStorage.database;
                                                                        if (sQLiteDatabase != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement3 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement7 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement6 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement4 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement5 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement2 != null) {
                                                                        }
                                                                        if (sQLiteCursor3 != null) {
                                                                        }
                                                                        throw th;
                                                                    }
                                                                } catch (Exception e13) {
                                                                    e = e13;
                                                                    exc = e;
                                                                    sQLitePreparedStatement = executeFast;
                                                                    sQLiteCursor10 = null;
                                                                    sQLitePreparedStatement2 = null;
                                                                    sQLiteCursor4 = sQLiteCursor10;
                                                                    messagesStorage.checkSQLException(exc);
                                                                    sQLiteDatabase2 = messagesStorage.database;
                                                                    if (sQLiteDatabase2 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement3 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement7 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement6 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement4 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement5 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement2 != null) {
                                                                    }
                                                                    if (sQLiteCursor4 == null) {
                                                                    }
                                                                } catch (Throwable th16) {
                                                                    th = th16;
                                                                    th = th;
                                                                    sQLitePreparedStatement = executeFast;
                                                                    sQLiteCursor9 = null;
                                                                    sQLitePreparedStatement2 = null;
                                                                    sQLiteCursor3 = sQLiteCursor9;
                                                                    sQLiteDatabase = messagesStorage.database;
                                                                    if (sQLiteDatabase != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement3 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement7 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement6 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement4 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement5 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement2 != null) {
                                                                    }
                                                                    if (sQLiteCursor3 != null) {
                                                                    }
                                                                    throw th;
                                                                }
                                                            }
                                                            messagesStorage.fixUnsupportedMedia(tLRPC$Message2);
                                                            NativeByteBuffer nativeByteBuffer3 = new NativeByteBuffer(tLRPC$Message2.getObjectSize());
                                                            tLRPC$Message2.serializeToStream(nativeByteBuffer3);
                                                            i16 = 0;
                                                            for (i15 = 2; i16 < i15; i15 = 2) {
                                                                boolean z6 = i16 == 1;
                                                                int topicId = (z6 && i == 0) ? MessageObject.getTopicId(tLRPC$Message2, messagesStorage.isForum(tLRPC$Message2.dialog_id)) : i;
                                                                if (z6 && topicId == 0) {
                                                                    i22 = i5;
                                                                } else {
                                                                    SQLitePreparedStatement sQLitePreparedStatement19 = z6 ? executeFast : sQLitePreparedStatement3;
                                                                    sQLitePreparedStatement19.requery();
                                                                    sQLitePreparedStatement19.bindInteger(1, tLRPC$Message2.id);
                                                                    sQLitePreparedStatement19.bindLong(2, j);
                                                                    if (z6) {
                                                                        sQLitePreparedStatement19.bindInteger(3, topicId);
                                                                        i17 = 4;
                                                                    } else {
                                                                        i17 = 3;
                                                                    }
                                                                    int i37 = i17 + 1;
                                                                    sQLitePreparedStatement19.bindInteger(i17, MessageObject.getUnreadFlags(tLRPC$Message2));
                                                                    int i38 = i37 + 1;
                                                                    sQLitePreparedStatement19.bindInteger(i37, tLRPC$Message2.send_state);
                                                                    int i39 = i38 + 1;
                                                                    sQLitePreparedStatement19.bindInteger(i38, tLRPC$Message2.date);
                                                                    int i40 = i39 + 1;
                                                                    sQLitePreparedStatement19.bindByteBuffer(i39, nativeByteBuffer3);
                                                                    int i41 = i40 + 1;
                                                                    if (!MessageObject.isOut(tLRPC$Message2) && !tLRPC$Message2.from_scheduled) {
                                                                        i18 = 0;
                                                                        sQLitePreparedStatement19.bindInteger(i40, i18);
                                                                        int i42 = i41 + 1;
                                                                        sQLitePreparedStatement19.bindInteger(i41, tLRPC$Message2.ttl);
                                                                        if ((tLRPC$Message2.flags & 1024) == 0) {
                                                                            i19 = i42 + 1;
                                                                            sQLitePreparedStatement19.bindInteger(i42, tLRPC$Message2.views);
                                                                        } else {
                                                                            i19 = i42 + 1;
                                                                            sQLitePreparedStatement19.bindInteger(i42, messagesStorage.getMessageMediaType(tLRPC$Message2));
                                                                        }
                                                                        int i43 = tLRPC$Message2.stickerVerified;
                                                                        int i44 = i19 + 1;
                                                                        sQLitePreparedStatement19.bindInteger(i19, i43 != 0 ? 1 : i43 == 2 ? 2 : 0);
                                                                        int i45 = i44 + 1;
                                                                        sQLitePreparedStatement19.bindInteger(i44, !tLRPC$Message2.mentioned ? 1 : 0);
                                                                        int i46 = i45 + 1;
                                                                        sQLitePreparedStatement19.bindInteger(i45, tLRPC$Message2.forwards);
                                                                        if (tLRPC$Message2.replies == null) {
                                                                            nativeByteBuffer = new NativeByteBuffer(tLRPC$Message2.replies.getObjectSize());
                                                                            tLRPC$Message2.replies.serializeToStream(nativeByteBuffer);
                                                                            i20 = i46 + 1;
                                                                            sQLitePreparedStatement19.bindByteBuffer(i46, nativeByteBuffer);
                                                                        } else {
                                                                            i20 = i46 + 1;
                                                                            sQLitePreparedStatement19.bindNull(i46);
                                                                            nativeByteBuffer = null;
                                                                        }
                                                                        tLRPC$TL_messageReplyHeader = tLRPC$Message2.reply_to;
                                                                        if (tLRPC$TL_messageReplyHeader == null) {
                                                                            i21 = i20 + 1;
                                                                            int i47 = tLRPC$TL_messageReplyHeader.reply_to_top_id;
                                                                            if (i47 == 0) {
                                                                                i47 = tLRPC$TL_messageReplyHeader.reply_to_msg_id;
                                                                            }
                                                                            sQLitePreparedStatement19.bindInteger(i20, i47);
                                                                        } else {
                                                                            i21 = i20 + 1;
                                                                            sQLitePreparedStatement19.bindInteger(i20, 0);
                                                                        }
                                                                        int i48 = i21;
                                                                        int i49 = i48 + 1;
                                                                        i22 = i5;
                                                                        sQLitePreparedStatement19.bindLong(i48, MessageObject.getChannelId(tLRPC$Message2));
                                                                        writeLocalParams = MessageCustomParamsHelper.writeLocalParams(tLRPC$Message2);
                                                                        if (writeLocalParams != null) {
                                                                            i23 = i49 + 1;
                                                                            sQLitePreparedStatement19.bindNull(i49);
                                                                        } else {
                                                                            i23 = i49 + 1;
                                                                            sQLitePreparedStatement19.bindByteBuffer(i49, writeLocalParams);
                                                                        }
                                                                        if (!z6) {
                                                                            if ((tLRPC$Message2.flags & 131072) != 0) {
                                                                                sQLitePreparedStatement19.bindLong(i23, tLRPC$Message2.grouped_id);
                                                                            } else {
                                                                                sQLitePreparedStatement19.bindNull(i23);
                                                                            }
                                                                        }
                                                                        sQLitePreparedStatement19.step();
                                                                        if (nativeByteBuffer != null) {
                                                                            nativeByteBuffer.reuse();
                                                                        }
                                                                        if (writeLocalParams == null) {
                                                                            writeLocalParams.reuse();
                                                                        }
                                                                    }
                                                                    i18 = 1;
                                                                    sQLitePreparedStatement19.bindInteger(i40, i18);
                                                                    int i422 = i41 + 1;
                                                                    sQLitePreparedStatement19.bindInteger(i41, tLRPC$Message2.ttl);
                                                                    if ((tLRPC$Message2.flags & 1024) == 0) {
                                                                    }
                                                                    int i432 = tLRPC$Message2.stickerVerified;
                                                                    int i442 = i19 + 1;
                                                                    sQLitePreparedStatement19.bindInteger(i19, i432 != 0 ? 1 : i432 == 2 ? 2 : 0);
                                                                    int i452 = i442 + 1;
                                                                    sQLitePreparedStatement19.bindInteger(i442, !tLRPC$Message2.mentioned ? 1 : 0);
                                                                    int i462 = i452 + 1;
                                                                    sQLitePreparedStatement19.bindInteger(i452, tLRPC$Message2.forwards);
                                                                    if (tLRPC$Message2.replies == null) {
                                                                    }
                                                                    tLRPC$TL_messageReplyHeader = tLRPC$Message2.reply_to;
                                                                    if (tLRPC$TL_messageReplyHeader == null) {
                                                                    }
                                                                    int i482 = i21;
                                                                    int i492 = i482 + 1;
                                                                    i22 = i5;
                                                                    sQLitePreparedStatement19.bindLong(i482, MessageObject.getChannelId(tLRPC$Message2));
                                                                    writeLocalParams = MessageCustomParamsHelper.writeLocalParams(tLRPC$Message2);
                                                                    if (writeLocalParams != null) {
                                                                    }
                                                                    if (!z6) {
                                                                    }
                                                                    sQLitePreparedStatement19.step();
                                                                    if (nativeByteBuffer != null) {
                                                                    }
                                                                    if (writeLocalParams == null) {
                                                                    }
                                                                }
                                                                i16++;
                                                                i5 = i22;
                                                            }
                                                            i12 = i5;
                                                            i11 = i2;
                                                            if (i == 0 && i11 != -2) {
                                                                sQLitePreparedStatement11 = sQLitePreparedStatement7;
                                                            } else if (MediaDataController.canAddMessageToMedia(tLRPC$Message2)) {
                                                                sQLitePreparedStatement11 = sQLitePreparedStatement7;
                                                                if ((tLRPC$Message2 instanceof TLRPC$TL_messageService) && (tLRPC$Message2.action instanceof TLRPC$TL_messageActionHistoryClear)) {
                                                                    try {
                                                                        messagesStorage.database.executeFast(String.format(Locale.US, "DELETE FROM media_v4 WHERE mid = %d AND uid = %d", Integer.valueOf(tLRPC$Message2.id), Long.valueOf(j))).stepThis().dispose();
                                                                        messagesStorage.database.executeFast("DELETE FROM media_counts_v2 WHERE uid = " + j).stepThis().dispose();
                                                                    } catch (Exception e14) {
                                                                        messagesStorage.checkSQLException(e14);
                                                                    }
                                                                }
                                                            } else {
                                                                sQLitePreparedStatement7.requery();
                                                                sQLitePreparedStatement11 = sQLitePreparedStatement7;
                                                                sQLitePreparedStatement11.bindInteger(1, tLRPC$Message2.id);
                                                                sQLitePreparedStatement11.bindLong(2, j);
                                                                sQLitePreparedStatement11.bindInteger(3, tLRPC$Message2.date);
                                                                sQLitePreparedStatement11.bindInteger(4, MediaDataController.getMediaType(tLRPC$Message2));
                                                                sQLitePreparedStatement11.bindByteBuffer(5, nativeByteBuffer3);
                                                                sQLitePreparedStatement11.step();
                                                            }
                                                            int topicId2 = MessageObject.getTopicId(tLRPC$Message2, messagesStorage.isForum(tLRPC$Message2.dialog_id));
                                                            if (i == 0) {
                                                                if (i11 == -2 && topicId2 != 0) {
                                                                }
                                                                sQLitePreparedStatement14 = sQLitePreparedStatement13;
                                                                nativeByteBuffer3.reuse();
                                                                if (tLRPC$Message2.ttl_period != 0) {
                                                                    try {
                                                                        try {
                                                                            if (tLRPC$Message2.id > 0) {
                                                                                SQLitePreparedStatement executeFast6 = sQLitePreparedStatement5 == null ? messagesStorage.database.executeFast("REPLACE INTO enc_tasks_v4 VALUES(?, ?, ?, ?)") : sQLitePreparedStatement5;
                                                                                try {
                                                                                    executeFast6.requery();
                                                                                    executeFast6.bindInteger(1, tLRPC$Message2.id);
                                                                                    executeFast6.bindLong(2, tLRPC$Message2.dialog_id);
                                                                                    executeFast6.bindInteger(3, tLRPC$Message2.date + tLRPC$Message2.ttl_period);
                                                                                    executeFast6.bindInteger(4, 0);
                                                                                    executeFast6.step();
                                                                                    sQLitePreparedStatement5 = executeFast6;
                                                                                    i33 = Math.min(i10, tLRPC$Message2.date + tLRPC$Message2.ttl_period);
                                                                                    tLRPC$MessageMedia = tLRPC$Message2.media;
                                                                                    if (tLRPC$MessageMedia instanceof TLRPC$TL_messageMediaPoll) {
                                                                                        SQLitePreparedStatement executeFast7 = sQLitePreparedStatement6 == null ? messagesStorage.database.executeFast("REPLACE INTO polls_v2 VALUES(?, ?, ?)") : sQLitePreparedStatement6;
                                                                                        try {
                                                                                            executeFast7.requery();
                                                                                            executeFast7.bindInteger(1, tLRPC$Message2.id);
                                                                                            executeFast7.bindLong(2, tLRPC$Message2.dialog_id);
                                                                                            executeFast7.bindLong(3, ((TLRPC$TL_messageMediaPoll) tLRPC$Message2.media).poll.id);
                                                                                            executeFast7.step();
                                                                                            messagesStorage = this;
                                                                                            sQLitePreparedStatement15 = executeFast7;
                                                                                        } catch (Exception e15) {
                                                                                            messagesStorage = this;
                                                                                            exc = e15;
                                                                                            sQLitePreparedStatement7 = sQLitePreparedStatement11;
                                                                                            sQLitePreparedStatement6 = executeFast7;
                                                                                            sQLitePreparedStatement = executeFast;
                                                                                            sQLiteCursor10 = null;
                                                                                            sQLitePreparedStatement2 = null;
                                                                                            sQLiteCursor4 = sQLiteCursor10;
                                                                                            messagesStorage.checkSQLException(exc);
                                                                                            sQLiteDatabase2 = messagesStorage.database;
                                                                                            if (sQLiteDatabase2 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement3 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement7 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement6 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement4 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement5 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement2 != null) {
                                                                                            }
                                                                                            if (sQLiteCursor4 == null) {
                                                                                            }
                                                                                        } catch (Throwable th17) {
                                                                                            messagesStorage = this;
                                                                                            th = th17;
                                                                                            sQLitePreparedStatement7 = sQLitePreparedStatement11;
                                                                                            sQLitePreparedStatement6 = executeFast7;
                                                                                            sQLitePreparedStatement = executeFast;
                                                                                            sQLiteCursor9 = null;
                                                                                            sQLitePreparedStatement2 = null;
                                                                                            sQLiteCursor3 = sQLiteCursor9;
                                                                                            sQLiteDatabase = messagesStorage.database;
                                                                                            if (sQLiteDatabase != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement3 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement7 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement6 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement4 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement5 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement2 != null) {
                                                                                            }
                                                                                            if (sQLiteCursor3 != null) {
                                                                                            }
                                                                                            throw th;
                                                                                        }
                                                                                    } else {
                                                                                        try {
                                                                                            if (tLRPC$MessageMedia instanceof TLRPC$TL_messageMediaWebPage) {
                                                                                                if (sQLitePreparedStatement4 == null) {
                                                                                                    messagesStorage = this;
                                                                                                    sQLitePreparedStatement16 = messagesStorage.database.executeFast("REPLACE INTO webpage_pending_v2 VALUES(?, ?, ?)");
                                                                                                } else {
                                                                                                    messagesStorage = this;
                                                                                                    sQLitePreparedStatement16 = sQLitePreparedStatement4;
                                                                                                }
                                                                                                try {
                                                                                                    sQLitePreparedStatement16.requery();
                                                                                                    sQLitePreparedStatement16.bindLong(1, tLRPC$Message2.media.webpage.id);
                                                                                                    sQLitePreparedStatement16.bindInteger(2, tLRPC$Message2.id);
                                                                                                    sQLitePreparedStatement16.bindLong(3, tLRPC$Message2.dialog_id);
                                                                                                    sQLitePreparedStatement16.step();
                                                                                                    sQLitePreparedStatement4 = sQLitePreparedStatement16;
                                                                                                } catch (Exception e16) {
                                                                                                    exc = e16;
                                                                                                    sQLitePreparedStatement4 = sQLitePreparedStatement16;
                                                                                                    sQLitePreparedStatement7 = sQLitePreparedStatement11;
                                                                                                    sQLitePreparedStatement = executeFast;
                                                                                                    sQLiteCursor10 = null;
                                                                                                    sQLitePreparedStatement2 = null;
                                                                                                    sQLiteCursor4 = sQLiteCursor10;
                                                                                                    messagesStorage.checkSQLException(exc);
                                                                                                    sQLiteDatabase2 = messagesStorage.database;
                                                                                                    if (sQLiteDatabase2 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement3 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement7 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement6 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement4 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement5 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement2 != null) {
                                                                                                    }
                                                                                                    if (sQLiteCursor4 == null) {
                                                                                                    }
                                                                                                } catch (Throwable th18) {
                                                                                                    th = th18;
                                                                                                    sQLitePreparedStatement4 = sQLitePreparedStatement16;
                                                                                                    sQLitePreparedStatement7 = sQLitePreparedStatement11;
                                                                                                    sQLitePreparedStatement = executeFast;
                                                                                                    sQLiteCursor9 = null;
                                                                                                    sQLitePreparedStatement2 = null;
                                                                                                    sQLiteCursor3 = sQLiteCursor9;
                                                                                                    sQLiteDatabase = messagesStorage.database;
                                                                                                    if (sQLiteDatabase != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement3 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement7 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement6 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement4 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement5 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement2 != null) {
                                                                                                    }
                                                                                                    if (sQLiteCursor3 != null) {
                                                                                                    }
                                                                                                    throw th;
                                                                                                }
                                                                                            } else {
                                                                                                messagesStorage = this;
                                                                                            }
                                                                                            sQLitePreparedStatement15 = sQLitePreparedStatement6;
                                                                                        } catch (Exception e17) {
                                                                                            e = e17;
                                                                                            messagesStorage = this;
                                                                                            exc = e;
                                                                                            sQLitePreparedStatement7 = sQLitePreparedStatement11;
                                                                                            sQLitePreparedStatement = executeFast;
                                                                                            sQLiteCursor10 = null;
                                                                                            sQLitePreparedStatement2 = null;
                                                                                            sQLiteCursor4 = sQLiteCursor10;
                                                                                            messagesStorage.checkSQLException(exc);
                                                                                            sQLiteDatabase2 = messagesStorage.database;
                                                                                            if (sQLiteDatabase2 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement3 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement7 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement6 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement4 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement5 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement2 != null) {
                                                                                            }
                                                                                            if (sQLiteCursor4 == null) {
                                                                                            }
                                                                                        } catch (Throwable th19) {
                                                                                            th = th19;
                                                                                            messagesStorage = this;
                                                                                            th = th;
                                                                                            sQLitePreparedStatement7 = sQLitePreparedStatement11;
                                                                                            sQLitePreparedStatement = executeFast;
                                                                                            sQLiteCursor9 = null;
                                                                                            sQLitePreparedStatement2 = null;
                                                                                            sQLiteCursor3 = sQLiteCursor9;
                                                                                            sQLiteDatabase = messagesStorage.database;
                                                                                            if (sQLiteDatabase != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement3 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement7 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement6 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement4 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement5 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement2 != null) {
                                                                                            }
                                                                                            if (sQLiteCursor3 != null) {
                                                                                            }
                                                                                            throw th;
                                                                                        }
                                                                                    }
                                                                                    if (i11 == 0) {
                                                                                        try {
                                                                                            if (messagesStorage.isValidKeyboardToSave(tLRPC$Message2)) {
                                                                                                tLRPC$Message3 = tLRPC$Message5;
                                                                                                if (tLRPC$Message3 == null || tLRPC$Message3.id < tLRPC$Message2.id) {
                                                                                                    sQLitePreparedStatement6 = sQLitePreparedStatement15;
                                                                                                    tLRPC$Message5 = tLRPC$Message2;
                                                                                                    i5 = i12 + 1;
                                                                                                    tLRPC$messages_Messages2 = tLRPC$messages_Messages;
                                                                                                    i27 = i11;
                                                                                                    executeFast2 = sQLitePreparedStatement11;
                                                                                                    executeFast4 = sQLitePreparedStatement14;
                                                                                                    arrayList9 = arrayList2;
                                                                                                    arrayList8 = arrayList3;
                                                                                                    size = i8;
                                                                                                    arrayList7 = arrayList;
                                                                                                }
                                                                                                sQLitePreparedStatement6 = sQLitePreparedStatement15;
                                                                                                tLRPC$Message5 = tLRPC$Message3;
                                                                                                i5 = i12 + 1;
                                                                                                tLRPC$messages_Messages2 = tLRPC$messages_Messages;
                                                                                                i27 = i11;
                                                                                                executeFast2 = sQLitePreparedStatement11;
                                                                                                executeFast4 = sQLitePreparedStatement14;
                                                                                                arrayList9 = arrayList2;
                                                                                                arrayList8 = arrayList3;
                                                                                                size = i8;
                                                                                                arrayList7 = arrayList;
                                                                                            }
                                                                                        } catch (Exception e18) {
                                                                                            exc = e18;
                                                                                            sQLitePreparedStatement6 = sQLitePreparedStatement15;
                                                                                            sQLitePreparedStatement7 = sQLitePreparedStatement11;
                                                                                            sQLitePreparedStatement = executeFast;
                                                                                            sQLiteCursor10 = null;
                                                                                            sQLitePreparedStatement2 = null;
                                                                                            sQLiteCursor4 = sQLiteCursor10;
                                                                                            messagesStorage.checkSQLException(exc);
                                                                                            sQLiteDatabase2 = messagesStorage.database;
                                                                                            if (sQLiteDatabase2 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement3 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement7 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement6 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement4 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement5 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement2 != null) {
                                                                                            }
                                                                                            if (sQLiteCursor4 == null) {
                                                                                            }
                                                                                        } catch (Throwable th20) {
                                                                                            th = th20;
                                                                                            sQLitePreparedStatement6 = sQLitePreparedStatement15;
                                                                                            sQLitePreparedStatement7 = sQLitePreparedStatement11;
                                                                                            sQLitePreparedStatement = executeFast;
                                                                                            sQLiteCursor9 = null;
                                                                                            sQLitePreparedStatement2 = null;
                                                                                            sQLiteCursor3 = sQLiteCursor9;
                                                                                            sQLiteDatabase = messagesStorage.database;
                                                                                            if (sQLiteDatabase != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement3 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement7 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement6 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement4 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement5 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement2 != null) {
                                                                                            }
                                                                                            if (sQLiteCursor3 != null) {
                                                                                            }
                                                                                            throw th;
                                                                                        }
                                                                                    }
                                                                                    tLRPC$Message3 = tLRPC$Message5;
                                                                                    sQLitePreparedStatement6 = sQLitePreparedStatement15;
                                                                                    tLRPC$Message5 = tLRPC$Message3;
                                                                                    i5 = i12 + 1;
                                                                                    tLRPC$messages_Messages2 = tLRPC$messages_Messages;
                                                                                    i27 = i11;
                                                                                    executeFast2 = sQLitePreparedStatement11;
                                                                                    executeFast4 = sQLitePreparedStatement14;
                                                                                    arrayList9 = arrayList2;
                                                                                    arrayList8 = arrayList3;
                                                                                    size = i8;
                                                                                    arrayList7 = arrayList;
                                                                                } catch (Exception e19) {
                                                                                    e = e19;
                                                                                    sQLitePreparedStatement5 = executeFast6;
                                                                                    sQLitePreparedStatement7 = sQLitePreparedStatement11;
                                                                                    sQLitePreparedStatement = executeFast;
                                                                                    sQLiteCursor11 = null;
                                                                                    sQLitePreparedStatement2 = null;
                                                                                    exc = e;
                                                                                    sQLiteCursor4 = sQLiteCursor11;
                                                                                    messagesStorage.checkSQLException(exc);
                                                                                    sQLiteDatabase2 = messagesStorage.database;
                                                                                    if (sQLiteDatabase2 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement3 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement7 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement6 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement4 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement5 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement2 != null) {
                                                                                    }
                                                                                    if (sQLiteCursor4 == null) {
                                                                                    }
                                                                                } catch (Throwable th21) {
                                                                                    th2 = th21;
                                                                                    sQLitePreparedStatement5 = executeFast6;
                                                                                    sQLitePreparedStatement7 = sQLitePreparedStatement11;
                                                                                    sQLitePreparedStatement = executeFast;
                                                                                    sQLiteCursor4 = null;
                                                                                    sQLitePreparedStatement2 = null;
                                                                                    th = th2;
                                                                                    sQLiteCursor3 = sQLiteCursor4;
                                                                                    sQLiteDatabase = messagesStorage.database;
                                                                                    if (sQLiteDatabase != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement3 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement7 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement6 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement4 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement5 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement2 != null) {
                                                                                    }
                                                                                    if (sQLiteCursor3 != null) {
                                                                                    }
                                                                                    throw th;
                                                                                }
                                                                            }
                                                                        } catch (Throwable th22) {
                                                                            th = th22;
                                                                            th = th;
                                                                            sQLitePreparedStatement7 = sQLitePreparedStatement11;
                                                                            sQLitePreparedStatement = executeFast;
                                                                            sQLiteCursor9 = null;
                                                                            sQLitePreparedStatement2 = null;
                                                                            sQLiteCursor3 = sQLiteCursor9;
                                                                            sQLiteDatabase = messagesStorage.database;
                                                                            if (sQLiteDatabase != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement3 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement7 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement6 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement4 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement5 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement2 != null) {
                                                                            }
                                                                            if (sQLiteCursor3 != null) {
                                                                            }
                                                                            throw th;
                                                                        }
                                                                    } catch (Exception e20) {
                                                                        e = e20;
                                                                        exc = e;
                                                                        sQLitePreparedStatement7 = sQLitePreparedStatement11;
                                                                        sQLitePreparedStatement = executeFast;
                                                                        sQLiteCursor10 = null;
                                                                        sQLitePreparedStatement2 = null;
                                                                        sQLiteCursor4 = sQLiteCursor10;
                                                                        messagesStorage.checkSQLException(exc);
                                                                        sQLiteDatabase2 = messagesStorage.database;
                                                                        if (sQLiteDatabase2 != null) {
                                                                            sQLiteDatabase2.commitTransaction();
                                                                        }
                                                                        if (sQLitePreparedStatement != null) {
                                                                            sQLitePreparedStatement.dispose();
                                                                        }
                                                                        if (sQLitePreparedStatement3 != null) {
                                                                            sQLitePreparedStatement3.dispose();
                                                                        }
                                                                        if (sQLitePreparedStatement7 != null) {
                                                                            sQLitePreparedStatement7.dispose();
                                                                        }
                                                                        if (sQLitePreparedStatement6 != null) {
                                                                            sQLitePreparedStatement6.dispose();
                                                                        }
                                                                        if (sQLitePreparedStatement4 != null) {
                                                                            sQLitePreparedStatement4.dispose();
                                                                        }
                                                                        if (sQLitePreparedStatement5 != null) {
                                                                            sQLitePreparedStatement5.dispose();
                                                                        }
                                                                        if (sQLitePreparedStatement2 != null) {
                                                                            sQLitePreparedStatement2.dispose();
                                                                        }
                                                                        if (sQLiteCursor4 == null) {
                                                                            sQLiteCursor4.dispose();
                                                                            return;
                                                                        }
                                                                        return;
                                                                    }
                                                                }
                                                                i33 = i10;
                                                                tLRPC$MessageMedia = tLRPC$Message2.media;
                                                                if (tLRPC$MessageMedia instanceof TLRPC$TL_messageMediaPoll) {
                                                                }
                                                                if (i11 == 0) {
                                                                }
                                                                tLRPC$Message3 = tLRPC$Message5;
                                                                sQLitePreparedStatement6 = sQLitePreparedStatement15;
                                                                tLRPC$Message5 = tLRPC$Message3;
                                                                i5 = i12 + 1;
                                                                tLRPC$messages_Messages2 = tLRPC$messages_Messages;
                                                                i27 = i11;
                                                                executeFast2 = sQLitePreparedStatement11;
                                                                executeFast4 = sQLitePreparedStatement14;
                                                                arrayList9 = arrayList2;
                                                                arrayList8 = arrayList3;
                                                                size = i8;
                                                                arrayList7 = arrayList;
                                                            }
                                                            if (MediaDataController.canAddMessageToMedia(tLRPC$Message2)) {
                                                                sQLitePreparedStatement13.requery();
                                                                sQLitePreparedStatement14 = sQLitePreparedStatement13;
                                                                sQLitePreparedStatement14.bindInteger(1, tLRPC$Message2.id);
                                                                sQLitePreparedStatement14.bindLong(2, j);
                                                                sQLitePreparedStatement14.bindLong(3, i != 0 ? i : topicId2);
                                                                sQLitePreparedStatement14.bindInteger(4, tLRPC$Message2.date);
                                                                sQLitePreparedStatement14.bindInteger(5, MediaDataController.getMediaType(tLRPC$Message2));
                                                                sQLitePreparedStatement14.bindByteBuffer(6, nativeByteBuffer3);
                                                                sQLitePreparedStatement14.step();
                                                                nativeByteBuffer3.reuse();
                                                                if (tLRPC$Message2.ttl_period != 0) {
                                                                }
                                                                i33 = i10;
                                                                tLRPC$MessageMedia = tLRPC$Message2.media;
                                                                if (tLRPC$MessageMedia instanceof TLRPC$TL_messageMediaPoll) {
                                                                }
                                                                if (i11 == 0) {
                                                                }
                                                                tLRPC$Message3 = tLRPC$Message5;
                                                                sQLitePreparedStatement6 = sQLitePreparedStatement15;
                                                                tLRPC$Message5 = tLRPC$Message3;
                                                                i5 = i12 + 1;
                                                                tLRPC$messages_Messages2 = tLRPC$messages_Messages;
                                                                i27 = i11;
                                                                executeFast2 = sQLitePreparedStatement11;
                                                                executeFast4 = sQLitePreparedStatement14;
                                                                arrayList9 = arrayList2;
                                                                arrayList8 = arrayList3;
                                                                size = i8;
                                                                arrayList7 = arrayList;
                                                            }
                                                            sQLitePreparedStatement14 = sQLitePreparedStatement13;
                                                            nativeByteBuffer3.reuse();
                                                            if (tLRPC$Message2.ttl_period != 0) {
                                                            }
                                                            i33 = i10;
                                                            tLRPC$MessageMedia = tLRPC$Message2.media;
                                                            if (tLRPC$MessageMedia instanceof TLRPC$TL_messageMediaPoll) {
                                                            }
                                                            if (i11 == 0) {
                                                            }
                                                            tLRPC$Message3 = tLRPC$Message5;
                                                            sQLitePreparedStatement6 = sQLitePreparedStatement15;
                                                            tLRPC$Message5 = tLRPC$Message3;
                                                            i5 = i12 + 1;
                                                            tLRPC$messages_Messages2 = tLRPC$messages_Messages;
                                                            i27 = i11;
                                                            executeFast2 = sQLitePreparedStatement11;
                                                            executeFast4 = sQLitePreparedStatement14;
                                                            arrayList9 = arrayList2;
                                                            arrayList8 = arrayList3;
                                                            size = i8;
                                                            arrayList7 = arrayList;
                                                        } else {
                                                            i7 = i33;
                                                            sQLitePreparedStatement12 = executeFast4;
                                                        }
                                                        messagesStorage.fixUnsupportedMedia(tLRPC$Message2);
                                                        NativeByteBuffer nativeByteBuffer32 = new NativeByteBuffer(tLRPC$Message2.getObjectSize());
                                                        tLRPC$Message2.serializeToStream(nativeByteBuffer32);
                                                        i16 = 0;
                                                        while (i16 < i15) {
                                                        }
                                                        i12 = i5;
                                                        i11 = i2;
                                                        if (i == 0) {
                                                        }
                                                        if (MediaDataController.canAddMessageToMedia(tLRPC$Message2)) {
                                                        }
                                                        int topicId22 = MessageObject.getTopicId(tLRPC$Message2, messagesStorage.isForum(tLRPC$Message2.dialog_id));
                                                        if (i == 0) {
                                                        }
                                                        if (MediaDataController.canAddMessageToMedia(tLRPC$Message2)) {
                                                        }
                                                        sQLitePreparedStatement14 = sQLitePreparedStatement13;
                                                        nativeByteBuffer32.reuse();
                                                        if (tLRPC$Message2.ttl_period != 0) {
                                                        }
                                                        i33 = i10;
                                                        tLRPC$MessageMedia = tLRPC$Message2.media;
                                                        if (tLRPC$MessageMedia instanceof TLRPC$TL_messageMediaPoll) {
                                                        }
                                                        if (i11 == 0) {
                                                        }
                                                        tLRPC$Message3 = tLRPC$Message5;
                                                        sQLitePreparedStatement6 = sQLitePreparedStatement15;
                                                        tLRPC$Message5 = tLRPC$Message3;
                                                        i5 = i12 + 1;
                                                        tLRPC$messages_Messages2 = tLRPC$messages_Messages;
                                                        i27 = i11;
                                                        executeFast2 = sQLitePreparedStatement11;
                                                        executeFast4 = sQLitePreparedStatement14;
                                                        arrayList9 = arrayList2;
                                                        arrayList8 = arrayList3;
                                                        size = i8;
                                                        arrayList7 = arrayList;
                                                    } catch (Exception e21) {
                                                        e = e21;
                                                        exc = e;
                                                        sQLitePreparedStatement = executeFast;
                                                        sQLiteCursor10 = null;
                                                        sQLitePreparedStatement2 = null;
                                                        sQLiteCursor4 = sQLiteCursor10;
                                                        messagesStorage.checkSQLException(exc);
                                                        sQLiteDatabase2 = messagesStorage.database;
                                                        if (sQLiteDatabase2 != null) {
                                                        }
                                                        if (sQLitePreparedStatement != null) {
                                                        }
                                                        if (sQLitePreparedStatement3 != null) {
                                                        }
                                                        if (sQLitePreparedStatement7 != null) {
                                                        }
                                                        if (sQLitePreparedStatement6 != null) {
                                                        }
                                                        if (sQLitePreparedStatement4 != null) {
                                                        }
                                                        if (sQLitePreparedStatement5 != null) {
                                                        }
                                                        if (sQLitePreparedStatement2 != null) {
                                                        }
                                                        if (sQLiteCursor4 == null) {
                                                        }
                                                    } catch (Throwable th23) {
                                                        th = th23;
                                                        th = th;
                                                        sQLitePreparedStatement = executeFast;
                                                        sQLiteCursor9 = null;
                                                        sQLitePreparedStatement2 = null;
                                                        sQLiteCursor3 = sQLiteCursor9;
                                                        sQLiteDatabase = messagesStorage.database;
                                                        if (sQLiteDatabase != null) {
                                                        }
                                                        if (sQLitePreparedStatement != null) {
                                                        }
                                                        if (sQLitePreparedStatement3 != null) {
                                                        }
                                                        if (sQLitePreparedStatement7 != null) {
                                                        }
                                                        if (sQLitePreparedStatement6 != null) {
                                                        }
                                                        if (sQLitePreparedStatement4 != null) {
                                                        }
                                                        if (sQLitePreparedStatement5 != null) {
                                                        }
                                                        if (sQLitePreparedStatement2 != null) {
                                                        }
                                                        if (sQLiteCursor3 != null) {
                                                        }
                                                        throw th;
                                                    }
                                                    Integer valueOf = Integer.valueOf(tLRPC$Message2.id);
                                                    if ((tLRPC$Message2.flags & 131072) != 0) {
                                                        num = valueOf;
                                                        l = Long.valueOf(tLRPC$Message2.grouped_id);
                                                    } else {
                                                        num = valueOf;
                                                        l = null;
                                                    }
                                                    l2 = l;
                                                    if (j2 == 0) {
                                                    }
                                                    if (i27 != -2) {
                                                    }
                                                    if (i5 == 0) {
                                                        queryFinalized = messagesStorage.database.queryFinalized("SELECT pinned, unread_count_i, flags FROM dialogs WHERE did = " + j, new Object[0]);
                                                        next = queryFinalized.next();
                                                        if (next) {
                                                        }
                                                        queryFinalized.dispose();
                                                        if (next) {
                                                        }
                                                        sQLitePreparedStatement17.step();
                                                        sQLitePreparedStatement17.dispose();
                                                    }
                                                } catch (Exception e22) {
                                                    exc = e22;
                                                    sQLitePreparedStatement7 = executeFast2;
                                                    sQLitePreparedStatement = executeFast;
                                                    sQLiteCursor10 = null;
                                                    sQLitePreparedStatement2 = null;
                                                    sQLiteCursor4 = sQLiteCursor10;
                                                    messagesStorage.checkSQLException(exc);
                                                    sQLiteDatabase2 = messagesStorage.database;
                                                    if (sQLiteDatabase2 != null) {
                                                    }
                                                    if (sQLitePreparedStatement != null) {
                                                    }
                                                    if (sQLitePreparedStatement3 != null) {
                                                    }
                                                    if (sQLitePreparedStatement7 != null) {
                                                    }
                                                    if (sQLitePreparedStatement6 != null) {
                                                    }
                                                    if (sQLitePreparedStatement4 != null) {
                                                    }
                                                    if (sQLitePreparedStatement5 != null) {
                                                    }
                                                    if (sQLitePreparedStatement2 != null) {
                                                    }
                                                    if (sQLiteCursor4 == null) {
                                                    }
                                                } catch (Throwable th24) {
                                                    th = th24;
                                                    sQLitePreparedStatement7 = executeFast2;
                                                    sQLitePreparedStatement = executeFast;
                                                    sQLiteCursor9 = null;
                                                    sQLitePreparedStatement2 = null;
                                                    sQLiteCursor3 = sQLiteCursor9;
                                                    sQLiteDatabase = messagesStorage.database;
                                                    if (sQLiteDatabase != null) {
                                                    }
                                                    if (sQLitePreparedStatement != null) {
                                                    }
                                                    if (sQLitePreparedStatement3 != null) {
                                                    }
                                                    if (sQLitePreparedStatement7 != null) {
                                                    }
                                                    if (sQLitePreparedStatement6 != null) {
                                                    }
                                                    if (sQLitePreparedStatement4 != null) {
                                                    }
                                                    if (sQLitePreparedStatement5 != null) {
                                                    }
                                                    if (sQLitePreparedStatement2 != null) {
                                                    }
                                                    if (sQLiteCursor3 != null) {
                                                    }
                                                    throw th;
                                                }
                                            }
                                            int i50 = i33;
                                            ArrayList<Pair<Long, Integer>> arrayList12 = arrayList9;
                                            final ArrayList arrayList13 = arrayList8;
                                            ArrayList<File> arrayList14 = arrayList7;
                                            tLRPC$Message = tLRPC$Message5;
                                            sQLitePreparedStatement8 = executeFast2;
                                            i6 = i34;
                                            sQLitePreparedStatement3.dispose();
                                            executeFast.dispose();
                                            sQLitePreparedStatement8.dispose();
                                            if (sQLitePreparedStatement4 != null) {
                                                try {
                                                    sQLitePreparedStatement4.dispose();
                                                    sQLitePreparedStatement4 = null;
                                                } catch (Exception e23) {
                                                    exc = e23;
                                                    sQLitePreparedStatement = null;
                                                    sQLiteCursor2 = null;
                                                    sQLitePreparedStatement2 = null;
                                                    sQLitePreparedStatement3 = null;
                                                    sQLitePreparedStatement7 = null;
                                                    sQLiteCursor4 = sQLiteCursor2;
                                                    messagesStorage.checkSQLException(exc);
                                                    sQLiteDatabase2 = messagesStorage.database;
                                                    if (sQLiteDatabase2 != null) {
                                                    }
                                                    if (sQLitePreparedStatement != null) {
                                                    }
                                                    if (sQLitePreparedStatement3 != null) {
                                                    }
                                                    if (sQLitePreparedStatement7 != null) {
                                                    }
                                                    if (sQLitePreparedStatement6 != null) {
                                                    }
                                                    if (sQLitePreparedStatement4 != null) {
                                                    }
                                                    if (sQLitePreparedStatement5 != null) {
                                                    }
                                                    if (sQLitePreparedStatement2 != null) {
                                                    }
                                                    if (sQLiteCursor4 == null) {
                                                    }
                                                } catch (Throwable th25) {
                                                    th = th25;
                                                    sQLitePreparedStatement = null;
                                                    sQLiteCursor = null;
                                                    sQLitePreparedStatement2 = null;
                                                    sQLitePreparedStatement3 = null;
                                                    sQLitePreparedStatement7 = null;
                                                    sQLiteCursor3 = sQLiteCursor;
                                                    sQLiteDatabase = messagesStorage.database;
                                                    if (sQLiteDatabase != null) {
                                                    }
                                                    if (sQLitePreparedStatement != null) {
                                                    }
                                                    if (sQLitePreparedStatement3 != null) {
                                                    }
                                                    if (sQLitePreparedStatement7 != null) {
                                                    }
                                                    if (sQLitePreparedStatement6 != null) {
                                                    }
                                                    if (sQLitePreparedStatement4 != null) {
                                                    }
                                                    if (sQLitePreparedStatement5 != null) {
                                                    }
                                                    if (sQLitePreparedStatement2 != null) {
                                                    }
                                                    if (sQLiteCursor3 != null) {
                                                    }
                                                    throw th;
                                                }
                                            }
                                            if (sQLitePreparedStatement5 != null) {
                                                sQLitePreparedStatement5.dispose();
                                                getMessagesController().didAddedNewTask(i50, 0L, null);
                                                sQLitePreparedStatement5 = null;
                                            }
                                            if (sQLitePreparedStatement6 != null) {
                                                sQLitePreparedStatement6.dispose();
                                                sQLitePreparedStatement6 = null;
                                            }
                                            if (tLRPC$Message != null) {
                                                getMediaDataController().putBotKeyboard(j, tLRPC$Message);
                                            }
                                            messagesStorage.deleteFromDownloadQueue(arrayList12, false);
                                            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda145
                                                @Override // java.lang.Runnable
                                                public final void run() {
                                                    MessagesStorage.this.lambda$putMessages$191(arrayList13);
                                                }
                                            });
                                            getFileLoader().deleteFiles(arrayList14, 0);
                                            messagesStorage.putUsersInternal(tLRPC$messages_Messages.users);
                                            messagesStorage.putChatsInternal(tLRPC$messages_Messages.chats);
                                            if (i6 == Integer.MAX_VALUE) {
                                                messagesStorage.database.executeFast(String.format(Locale.US, "UPDATE dialogs SET unread_count_i = %d WHERE did = %d", Integer.valueOf(i6), Long.valueOf(j))).stepThis().dispose();
                                                LongSparseIntArray longSparseIntArray = new LongSparseIntArray(1);
                                                longSparseIntArray.put(j, i6);
                                                sQLitePreparedStatement9 = null;
                                                sQLitePreparedStatement9 = null;
                                                sQLitePreparedStatement9 = null;
                                                try {
                                                    getMessagesController().processDialogsUpdateRead(null, longSparseIntArray);
                                                } catch (Exception e24) {
                                                    e = e24;
                                                    exc = e;
                                                    sQLitePreparedStatement = sQLitePreparedStatement9;
                                                    sQLitePreparedStatement2 = sQLitePreparedStatement;
                                                    sQLitePreparedStatement3 = sQLitePreparedStatement2;
                                                    sQLitePreparedStatement7 = sQLitePreparedStatement3;
                                                    sQLiteCursor4 = sQLitePreparedStatement9;
                                                    messagesStorage.checkSQLException(exc);
                                                    sQLiteDatabase2 = messagesStorage.database;
                                                    if (sQLiteDatabase2 != null) {
                                                    }
                                                    if (sQLitePreparedStatement != null) {
                                                    }
                                                    if (sQLitePreparedStatement3 != null) {
                                                    }
                                                    if (sQLitePreparedStatement7 != null) {
                                                    }
                                                    if (sQLitePreparedStatement6 != null) {
                                                    }
                                                    if (sQLitePreparedStatement4 != null) {
                                                    }
                                                    if (sQLitePreparedStatement5 != null) {
                                                    }
                                                    if (sQLitePreparedStatement2 != null) {
                                                    }
                                                    if (sQLiteCursor4 == null) {
                                                    }
                                                } catch (Throwable th26) {
                                                    th = th26;
                                                    th = th;
                                                    sQLitePreparedStatement = sQLitePreparedStatement9;
                                                    sQLitePreparedStatement2 = sQLitePreparedStatement;
                                                    sQLitePreparedStatement3 = sQLitePreparedStatement2;
                                                    sQLitePreparedStatement7 = sQLitePreparedStatement3;
                                                    sQLiteCursor3 = sQLitePreparedStatement9;
                                                    sQLiteDatabase = messagesStorage.database;
                                                    if (sQLiteDatabase != null) {
                                                    }
                                                    if (sQLitePreparedStatement != null) {
                                                    }
                                                    if (sQLitePreparedStatement3 != null) {
                                                    }
                                                    if (sQLitePreparedStatement7 != null) {
                                                    }
                                                    if (sQLitePreparedStatement6 != null) {
                                                    }
                                                    if (sQLitePreparedStatement4 != null) {
                                                    }
                                                    if (sQLitePreparedStatement5 != null) {
                                                    }
                                                    if (sQLitePreparedStatement2 != null) {
                                                    }
                                                    if (sQLiteCursor3 != null) {
                                                    }
                                                    throw th;
                                                }
                                            } else {
                                                sQLitePreparedStatement9 = null;
                                            }
                                            if (num == null) {
                                                SQLiteDatabase sQLiteDatabase4 = messagesStorage.database;
                                                Locale locale = Locale.US;
                                                Object[] objArr = new Object[3];
                                                Long l3 = l2;
                                                objArr[0] = l3 == null ? "NULL" : l3 + "";
                                                objArr[1] = Long.valueOf(j);
                                                objArr[2] = num;
                                                sQLiteDatabase4.executeFast(String.format(locale, "UPDATE dialogs SET last_mid_group = %s WHERE did = %d AND last_mid <= %d", objArr)).stepThis().dispose();
                                                z3 = true;
                                            } else {
                                                z3 = false;
                                            }
                                            messagesStorage.database.commitTransaction();
                                            if (!z2 || z3) {
                                                updateDialogsWithDeletedMessages(j, j2, new ArrayList(), null, false);
                                            }
                                            sQLitePreparedStatement10 = sQLitePreparedStatement6;
                                        }
                                        messagesStorage.deleteFromDownloadQueue(arrayList12, false);
                                        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda145
                                            @Override // java.lang.Runnable
                                            public final void run() {
                                                MessagesStorage.this.lambda$putMessages$191(arrayList13);
                                            }
                                        });
                                        getFileLoader().deleteFiles(arrayList14, 0);
                                        messagesStorage.putUsersInternal(tLRPC$messages_Messages.users);
                                        messagesStorage.putChatsInternal(tLRPC$messages_Messages.chats);
                                        if (i6 == Integer.MAX_VALUE) {
                                        }
                                        if (num == null) {
                                        }
                                        messagesStorage.database.commitTransaction();
                                        if (!z2) {
                                        }
                                        updateDialogsWithDeletedMessages(j, j2, new ArrayList(), null, false);
                                        sQLitePreparedStatement10 = sQLitePreparedStatement6;
                                    } catch (Exception e25) {
                                        e = e25;
                                        sQLitePreparedStatement9 = null;
                                    } catch (Throwable th27) {
                                        th = th27;
                                        sQLitePreparedStatement9 = null;
                                    }
                                    sQLitePreparedStatement8.dispose();
                                    if (sQLitePreparedStatement4 != null) {
                                    }
                                    if (sQLitePreparedStatement5 != null) {
                                    }
                                    if (sQLitePreparedStatement6 != null) {
                                    }
                                    if (tLRPC$Message != null) {
                                    }
                                } catch (Exception e26) {
                                    sQLiteCursor4 = null;
                                    exc = e26;
                                    sQLitePreparedStatement7 = sQLitePreparedStatement8;
                                    sQLitePreparedStatement = null;
                                    sQLitePreparedStatement2 = null;
                                    sQLitePreparedStatement3 = null;
                                } catch (Throwable th28) {
                                    sQLiteCursor3 = null;
                                    th = th28;
                                    sQLitePreparedStatement7 = sQLitePreparedStatement8;
                                    sQLitePreparedStatement = null;
                                    sQLitePreparedStatement2 = null;
                                    sQLitePreparedStatement3 = null;
                                }
                                executeFast.dispose();
                            } catch (Exception e27) {
                                sQLiteCursor8 = null;
                                exc = e27;
                                sQLitePreparedStatement7 = sQLitePreparedStatement8;
                                sQLitePreparedStatement2 = null;
                                sQLitePreparedStatement3 = null;
                                sQLitePreparedStatement = executeFast;
                                sQLiteCursor4 = sQLiteCursor8;
                                messagesStorage.checkSQLException(exc);
                                sQLiteDatabase2 = messagesStorage.database;
                                if (sQLiteDatabase2 != null) {
                                }
                                if (sQLitePreparedStatement != null) {
                                }
                                if (sQLitePreparedStatement3 != null) {
                                }
                                if (sQLitePreparedStatement7 != null) {
                                }
                                if (sQLitePreparedStatement6 != null) {
                                }
                                if (sQLitePreparedStatement4 != null) {
                                }
                                if (sQLitePreparedStatement5 != null) {
                                }
                                if (sQLitePreparedStatement2 != null) {
                                }
                                if (sQLiteCursor4 == null) {
                                }
                            } catch (Throwable th29) {
                                sQLiteCursor7 = null;
                                th = th29;
                                sQLitePreparedStatement7 = sQLitePreparedStatement8;
                                sQLitePreparedStatement2 = null;
                                sQLitePreparedStatement3 = null;
                                sQLitePreparedStatement = executeFast;
                                sQLiteCursor3 = sQLiteCursor7;
                                sQLiteDatabase = messagesStorage.database;
                                if (sQLiteDatabase != null) {
                                }
                                if (sQLitePreparedStatement != null) {
                                }
                                if (sQLitePreparedStatement3 != null) {
                                }
                                if (sQLitePreparedStatement7 != null) {
                                }
                                if (sQLitePreparedStatement6 != null) {
                                }
                                if (sQLitePreparedStatement4 != null) {
                                }
                                if (sQLitePreparedStatement5 != null) {
                                }
                                if (sQLitePreparedStatement2 != null) {
                                }
                                if (sQLiteCursor3 != null) {
                                }
                                throw th;
                            }
                            SQLitePreparedStatement executeFast42 = messagesStorage.database.executeFast("REPLACE INTO media_topics VALUES(?, ?, ?, ?, ?, ?)");
                            int i332 = ConnectionsManager.DEFAULT_DATACENTER_ID;
                            i5 = 0;
                            int i342 = ConnectionsManager.DEFAULT_DATACENTER_ID;
                            sQLitePreparedStatement4 = null;
                            num = null;
                            sQLitePreparedStatement5 = null;
                            TLRPC$Message tLRPC$Message52 = null;
                            sQLitePreparedStatement6 = null;
                            Long l22 = null;
                            j2 = 0;
                            while (i5 < size) {
                            }
                            int i502 = i332;
                            ArrayList<Pair<Long, Integer>> arrayList122 = arrayList9;
                            final ArrayList arrayList132 = arrayList8;
                            ArrayList<File> arrayList142 = arrayList7;
                            tLRPC$Message = tLRPC$Message52;
                            sQLitePreparedStatement8 = executeFast2;
                            i6 = i342;
                            sQLitePreparedStatement3.dispose();
                        } catch (Exception e28) {
                            sQLiteCursor8 = null;
                            exc = e28;
                            sQLitePreparedStatement7 = executeFast2;
                            sQLitePreparedStatement2 = null;
                            sQLitePreparedStatement4 = null;
                            sQLitePreparedStatement5 = null;
                            sQLitePreparedStatement6 = null;
                        } catch (Throwable th30) {
                            sQLiteCursor7 = null;
                            th = th30;
                            sQLitePreparedStatement7 = executeFast2;
                            sQLitePreparedStatement2 = null;
                            sQLitePreparedStatement4 = null;
                            sQLitePreparedStatement5 = null;
                            sQLitePreparedStatement6 = null;
                        }
                        executeFast2 = messagesStorage.database.executeFast("REPLACE INTO media_v4 VALUES(?, ?, ?, ?, ?)");
                    } catch (Exception e29) {
                        SQLiteCursor sQLiteCursor14 = null;
                        exc = e29;
                        sQLitePreparedStatement2 = null;
                        sQLitePreparedStatement4 = null;
                        sQLitePreparedStatement5 = sQLitePreparedStatement4;
                        sQLitePreparedStatement6 = sQLitePreparedStatement5;
                        sQLitePreparedStatement7 = sQLitePreparedStatement6;
                        sQLiteCursor8 = sQLiteCursor14;
                        sQLitePreparedStatement = executeFast;
                        sQLiteCursor4 = sQLiteCursor8;
                        messagesStorage.checkSQLException(exc);
                        sQLiteDatabase2 = messagesStorage.database;
                        if (sQLiteDatabase2 != null) {
                        }
                        if (sQLitePreparedStatement != null) {
                        }
                        if (sQLitePreparedStatement3 != null) {
                        }
                        if (sQLitePreparedStatement7 != null) {
                        }
                        if (sQLitePreparedStatement6 != null) {
                        }
                        if (sQLitePreparedStatement4 != null) {
                        }
                        if (sQLitePreparedStatement5 != null) {
                        }
                        if (sQLitePreparedStatement2 != null) {
                        }
                        if (sQLiteCursor4 == null) {
                        }
                    } catch (Throwable th31) {
                        SQLiteCursor sQLiteCursor15 = null;
                        th = th31;
                        sQLitePreparedStatement2 = null;
                        sQLitePreparedStatement4 = null;
                        sQLitePreparedStatement5 = sQLitePreparedStatement4;
                        sQLitePreparedStatement6 = sQLitePreparedStatement5;
                        sQLitePreparedStatement7 = sQLitePreparedStatement6;
                        sQLiteCursor7 = sQLiteCursor15;
                        sQLitePreparedStatement = executeFast;
                        sQLiteCursor3 = sQLiteCursor7;
                        sQLiteDatabase = messagesStorage.database;
                        if (sQLiteDatabase != null) {
                        }
                        if (sQLitePreparedStatement != null) {
                        }
                        if (sQLitePreparedStatement3 != null) {
                        }
                        if (sQLitePreparedStatement7 != null) {
                        }
                        if (sQLitePreparedStatement6 != null) {
                        }
                        if (sQLitePreparedStatement4 != null) {
                        }
                        if (sQLitePreparedStatement5 != null) {
                        }
                        if (sQLitePreparedStatement2 != null) {
                        }
                        if (sQLiteCursor3 != null) {
                        }
                        throw th;
                    }
                    size = tLRPC$messages_Messages2.messages.size();
                    ArrayList<File> arrayList72 = new ArrayList<>();
                    ArrayList arrayList82 = new ArrayList();
                    ArrayList<Pair<Long, Integer>> arrayList92 = new ArrayList<>();
                    executeFast = messagesStorage.database.executeFast("REPLACE INTO messages_topics VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, NULL, ?, ?, ?, ?, ?, ?, 0, ?)");
                    sQLitePreparedStatement3 = messagesStorage.database.executeFast("REPLACE INTO messages_v2 VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, NULL, ?, ?, ?, ?, ?, ?, 0, ?, ?)");
                } catch (Exception e30) {
                    e = e30;
                    sQLiteCursor6 = null;
                } catch (Throwable th32) {
                    th = th32;
                    sQLiteCursor5 = null;
                }
            }
            SQLiteDatabase sQLiteDatabase5 = messagesStorage.database;
            if (sQLiteDatabase5 != null) {
                sQLiteDatabase5.commitTransaction();
            }
            if (sQLitePreparedStatement10 != null) {
                sQLitePreparedStatement10.dispose();
            }
            if (sQLitePreparedStatement4 != null) {
                sQLitePreparedStatement4.dispose();
            }
            if (sQLitePreparedStatement5 != null) {
                sQLitePreparedStatement5.dispose();
            }
        } catch (Exception e31) {
            exc = e31;
            sQLitePreparedStatement = null;
            sQLiteCursor2 = null;
            sQLitePreparedStatement2 = null;
            sQLitePreparedStatement3 = null;
            sQLitePreparedStatement4 = null;
            sQLitePreparedStatement5 = null;
            sQLitePreparedStatement6 = null;
        } catch (Throwable th33) {
            th = th33;
            sQLitePreparedStatement = null;
            sQLiteCursor = null;
            sQLitePreparedStatement2 = null;
            sQLitePreparedStatement3 = null;
            sQLitePreparedStatement4 = null;
            sQLitePreparedStatement5 = null;
            sQLitePreparedStatement6 = null;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$putMessages$191(ArrayList arrayList) {
        getFileLoader().cancelLoadFiles(arrayList);
    }

    public static void addUsersAndChatsFromMessage(TLRPC$Message tLRPC$Message, ArrayList<Long> arrayList, ArrayList<Long> arrayList2, ArrayList<Long> arrayList3) {
        String str;
        TLRPC$Peer tLRPC$Peer;
        long fromChatId = MessageObject.getFromChatId(tLRPC$Message);
        if (DialogObject.isUserDialog(fromChatId)) {
            if (!arrayList.contains(Long.valueOf(fromChatId))) {
                arrayList.add(Long.valueOf(fromChatId));
            }
        } else if (DialogObject.isChatDialog(fromChatId)) {
            long j = -fromChatId;
            if (!arrayList2.contains(Long.valueOf(j))) {
                arrayList2.add(Long.valueOf(j));
            }
        }
        long j2 = tLRPC$Message.via_bot_id;
        if (j2 != 0 && !arrayList.contains(Long.valueOf(j2))) {
            arrayList.add(Long.valueOf(tLRPC$Message.via_bot_id));
        }
        TLRPC$MessageAction tLRPC$MessageAction = tLRPC$Message.action;
        if (tLRPC$MessageAction != null) {
            long j3 = tLRPC$MessageAction.user_id;
            if (j3 != 0 && !arrayList.contains(Long.valueOf(j3))) {
                arrayList.add(Long.valueOf(tLRPC$Message.action.user_id));
            }
            long j4 = tLRPC$Message.action.channel_id;
            if (j4 != 0 && !arrayList2.contains(Long.valueOf(j4))) {
                arrayList2.add(Long.valueOf(tLRPC$Message.action.channel_id));
            }
            long j5 = tLRPC$Message.action.chat_id;
            if (j5 != 0 && !arrayList2.contains(Long.valueOf(j5))) {
                arrayList2.add(Long.valueOf(tLRPC$Message.action.chat_id));
            }
            TLRPC$MessageAction tLRPC$MessageAction2 = tLRPC$Message.action;
            if (tLRPC$MessageAction2 instanceof TLRPC$TL_messageActionGeoProximityReached) {
                TLRPC$TL_messageActionGeoProximityReached tLRPC$TL_messageActionGeoProximityReached = (TLRPC$TL_messageActionGeoProximityReached) tLRPC$MessageAction2;
                long peerId = MessageObject.getPeerId(tLRPC$TL_messageActionGeoProximityReached.from_id);
                if (DialogObject.isUserDialog(peerId)) {
                    if (!arrayList.contains(Long.valueOf(peerId))) {
                        arrayList.add(Long.valueOf(peerId));
                    }
                } else {
                    long j6 = -peerId;
                    if (!arrayList2.contains(Long.valueOf(j6))) {
                        arrayList2.add(Long.valueOf(j6));
                    }
                }
                long peerId2 = MessageObject.getPeerId(tLRPC$TL_messageActionGeoProximityReached.to_id);
                if (peerId2 > 0) {
                    if (!arrayList.contains(Long.valueOf(peerId2))) {
                        arrayList.add(Long.valueOf(peerId2));
                    }
                } else {
                    long j7 = -peerId2;
                    if (!arrayList2.contains(Long.valueOf(j7))) {
                        arrayList2.add(Long.valueOf(j7));
                    }
                }
            }
            if (!tLRPC$Message.action.users.isEmpty()) {
                for (int i = 0; i < tLRPC$Message.action.users.size(); i++) {
                    Long l = tLRPC$Message.action.users.get(i);
                    if (!arrayList.contains(l)) {
                        arrayList.add(l);
                    }
                }
            }
        }
        if (!tLRPC$Message.entities.isEmpty()) {
            for (int i2 = 0; i2 < tLRPC$Message.entities.size(); i2++) {
                TLRPC$MessageEntity tLRPC$MessageEntity = tLRPC$Message.entities.get(i2);
                if (tLRPC$MessageEntity instanceof TLRPC$TL_messageEntityMentionName) {
                    arrayList.add(Long.valueOf(((TLRPC$TL_messageEntityMentionName) tLRPC$MessageEntity).user_id));
                } else if (tLRPC$MessageEntity instanceof TLRPC$TL_inputMessageEntityMentionName) {
                    arrayList.add(Long.valueOf(((TLRPC$TL_inputMessageEntityMentionName) tLRPC$MessageEntity).user_id.user_id));
                } else if (arrayList3 != null && (tLRPC$MessageEntity instanceof TLRPC$TL_messageEntityCustomEmoji)) {
                    arrayList3.add(Long.valueOf(((TLRPC$TL_messageEntityCustomEmoji) tLRPC$MessageEntity).document_id));
                }
            }
        }
        TLRPC$MessageMedia tLRPC$MessageMedia = tLRPC$Message.media;
        if (tLRPC$MessageMedia != null) {
            long j8 = tLRPC$MessageMedia.user_id;
            if (j8 != 0 && !arrayList.contains(Long.valueOf(j8))) {
                arrayList.add(Long.valueOf(tLRPC$Message.media.user_id));
            }
            TLRPC$MessageMedia tLRPC$MessageMedia2 = tLRPC$Message.media;
            if (tLRPC$MessageMedia2 instanceof TLRPC$TL_messageMediaPoll) {
                TLRPC$TL_messageMediaPoll tLRPC$TL_messageMediaPoll = (TLRPC$TL_messageMediaPoll) tLRPC$MessageMedia2;
                if (!tLRPC$TL_messageMediaPoll.results.recent_voters.isEmpty()) {
                    arrayList.addAll(tLRPC$TL_messageMediaPoll.results.recent_voters);
                }
            }
        }
        TLRPC$MessageReplies tLRPC$MessageReplies = tLRPC$Message.replies;
        if (tLRPC$MessageReplies != null) {
            int size = tLRPC$MessageReplies.recent_repliers.size();
            for (int i3 = 0; i3 < size; i3++) {
                long peerId3 = MessageObject.getPeerId(tLRPC$Message.replies.recent_repliers.get(i3));
                if (DialogObject.isUserDialog(peerId3)) {
                    if (!arrayList.contains(Long.valueOf(peerId3))) {
                        arrayList.add(Long.valueOf(peerId3));
                    }
                } else if (DialogObject.isChatDialog(peerId3)) {
                    long j9 = -peerId3;
                    if (!arrayList2.contains(Long.valueOf(j9))) {
                        arrayList2.add(Long.valueOf(j9));
                    }
                }
            }
        }
        TLRPC$TL_messageReplyHeader tLRPC$TL_messageReplyHeader = tLRPC$Message.reply_to;
        if (tLRPC$TL_messageReplyHeader != null && (tLRPC$Peer = tLRPC$TL_messageReplyHeader.reply_to_peer_id) != null) {
            long peerId4 = MessageObject.getPeerId(tLRPC$Peer);
            if (DialogObject.isUserDialog(peerId4)) {
                if (!arrayList.contains(Long.valueOf(peerId4))) {
                    arrayList.add(Long.valueOf(peerId4));
                }
            } else if (DialogObject.isChatDialog(peerId4)) {
                long j10 = -peerId4;
                if (!arrayList2.contains(Long.valueOf(j10))) {
                    arrayList2.add(Long.valueOf(j10));
                }
            }
        }
        TLRPC$MessageFwdHeader tLRPC$MessageFwdHeader = tLRPC$Message.fwd_from;
        if (tLRPC$MessageFwdHeader != null) {
            TLRPC$Peer tLRPC$Peer2 = tLRPC$MessageFwdHeader.from_id;
            if (tLRPC$Peer2 instanceof TLRPC$TL_peerUser) {
                if (!arrayList.contains(Long.valueOf(tLRPC$Peer2.user_id))) {
                    arrayList.add(Long.valueOf(tLRPC$Message.fwd_from.from_id.user_id));
                }
            } else if (tLRPC$Peer2 instanceof TLRPC$TL_peerChannel) {
                if (!arrayList2.contains(Long.valueOf(tLRPC$Peer2.channel_id))) {
                    arrayList2.add(Long.valueOf(tLRPC$Message.fwd_from.from_id.channel_id));
                }
            } else if ((tLRPC$Peer2 instanceof TLRPC$TL_peerChat) && !arrayList2.contains(Long.valueOf(tLRPC$Peer2.chat_id))) {
                arrayList2.add(Long.valueOf(tLRPC$Message.fwd_from.from_id.chat_id));
            }
            TLRPC$Peer tLRPC$Peer3 = tLRPC$Message.fwd_from.saved_from_peer;
            if (tLRPC$Peer3 != null) {
                long j11 = tLRPC$Peer3.user_id;
                if (j11 != 0) {
                    if (!arrayList2.contains(Long.valueOf(j11))) {
                        arrayList.add(Long.valueOf(tLRPC$Message.fwd_from.saved_from_peer.user_id));
                    }
                } else {
                    long j12 = tLRPC$Peer3.channel_id;
                    if (j12 != 0) {
                        if (!arrayList2.contains(Long.valueOf(j12))) {
                            arrayList2.add(Long.valueOf(tLRPC$Message.fwd_from.saved_from_peer.channel_id));
                        }
                    } else {
                        long j13 = tLRPC$Peer3.chat_id;
                        if (j13 != 0 && !arrayList2.contains(Long.valueOf(j13))) {
                            arrayList2.add(Long.valueOf(tLRPC$Message.fwd_from.saved_from_peer.chat_id));
                        }
                    }
                }
            }
        }
        HashMap<String, String> hashMap = tLRPC$Message.params;
        if (hashMap == null || (str = hashMap.get("fwd_peer")) == null) {
            return;
        }
        long longValue = Utilities.parseLong(str).longValue();
        if (longValue < 0) {
            long j14 = -longValue;
            if (arrayList2.contains(Long.valueOf(j14))) {
                return;
            }
            arrayList2.add(Long.valueOf(j14));
        }
    }

    public void getDialogs(final int i, final int i2, final int i3, boolean z) {
        LongSparseArray<SparseArray<TLRPC$DraftMessage>> drafts;
        int size;
        long[] jArr = null;
        if (z && (size = (drafts = getMediaDataController().getDrafts()).size()) > 0) {
            jArr = new long[size];
            for (int i4 = 0; i4 < size; i4++) {
                if (drafts.valueAt(i4).get(0) != null) {
                    jArr[i4] = drafts.keyAt(i4);
                }
            }
        }
        final long[] jArr2 = jArr;
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda38
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$getDialogs$194(i, i2, i3, jArr2);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Can't wrap try/catch for region: R(19:(10:5|6|7|(13:9|10|(1:12)(1:304)|13|14|15|(25:19|(3:21|(2:23|(1:25)(1:26))|(1:28))(1:166)|29|(2:31|(1:33)(19:164|35|(1:37)(1:163)|38|(1:40)(1:162)|41|(2:43|(1:45))|46|(1:48)|49|(1:51)|52|(7:54|(8:56|(1:58)|59|60|61|(10:65|(3:148|149|(1:151))|67|68|(3:133|134|(9:136|137|138|139|(1:141)|71|72|(3:74|75|76)|129))|70|71|72|(0)|129)|156|129)(1:160)|78|(3:103|104|(1:106))|80|(4:82|(1:84)|85|86)(2:88|(4:90|(1:92)|93|94)(2:95|(2:97|(2:99|100)(1:101))(1:102)))|87)(1:161)|77|78|(0)|80|(0)(0)|87))(1:165)|34|35|(0)(0)|38|(0)(0)|41|(0)|46|(0)|49|(0)|52|(0)(0)|77|78|(0)|80|(0)(0)|87|16|17)|167|168|169|170|(9:172|(6:175|176|177|(2:179|180)(1:182)|181|173)|188|189|(6:193|(2:194|(3:196|(2:198|(2:200|201)(1:268))(2:270|271)|269)(2:272|273))|(2:207|(12:209|210|211|212|(1:214)|215|216|217|(2:221|(7:227|(2:231|(7:233|234|235|236|(1:238)|239|240))|256|236|(0)|239|240))|257|239|240)(2:266|267))(2:203|204)|205|190|191)|274|275|276|277)(2:284|285)|278)(1:310)|110|111|112|(1:117)|114|115)|318|319|(6:321|322|323|324|325|326)(1:379)|327|328|(1:330)|331|(1:333)|334|(5:336|(4:339|(4:342|(2:346|347)|348|340)|351|337)|352|353|(9:355|356|357|358|359|360|(1:362)|114|115))|367|357|358|359|360|(0)|114|115) */
    /* JADX WARN: Can't wrap try/catch for region: R(28:1|(3:2|3|4)|(10:5|6|7|(13:9|10|(1:12)(1:304)|13|14|15|(25:19|(3:21|(2:23|(1:25)(1:26))|(1:28))(1:166)|29|(2:31|(1:33)(19:164|35|(1:37)(1:163)|38|(1:40)(1:162)|41|(2:43|(1:45))|46|(1:48)|49|(1:51)|52|(7:54|(8:56|(1:58)|59|60|61|(10:65|(3:148|149|(1:151))|67|68|(3:133|134|(9:136|137|138|139|(1:141)|71|72|(3:74|75|76)|129))|70|71|72|(0)|129)|156|129)(1:160)|78|(3:103|104|(1:106))|80|(4:82|(1:84)|85|86)(2:88|(4:90|(1:92)|93|94)(2:95|(2:97|(2:99|100)(1:101))(1:102)))|87)(1:161)|77|78|(0)|80|(0)(0)|87))(1:165)|34|35|(0)(0)|38|(0)(0)|41|(0)|46|(0)|49|(0)|52|(0)(0)|77|78|(0)|80|(0)(0)|87|16|17)|167|168|169|170|(9:172|(6:175|176|177|(2:179|180)(1:182)|181|173)|188|189|(6:193|(2:194|(3:196|(2:198|(2:200|201)(1:268))(2:270|271)|269)(2:272|273))|(2:207|(12:209|210|211|212|(1:214)|215|216|217|(2:221|(7:227|(2:231|(7:233|234|235|236|(1:238)|239|240))|256|236|(0)|239|240))|257|239|240)(2:266|267))(2:203|204)|205|190|191)|274|275|276|277)(2:284|285)|278)(1:310)|110|111|112|(1:117)|114|115)|311|312|313|314|(7:385|386|(4:389|(4:394|(2:396|(1:398))(2:404|(1:406))|399|(2:401|402)(1:403))(2:391|392)|393|387)|407|408|(5:410|(3:414|411|412)|415|416|417)(1:425)|418)(1:316)|317|318|319|(6:321|322|323|324|325|326)(1:379)|327|328|(1:330)|331|(1:333)|334|(5:336|(4:339|(4:342|(2:346|347)|348|340)|351|337)|352|353|(9:355|356|357|358|359|360|(1:362)|114|115))|367|357|358|359|360|(0)|114|115|(1:(0))) */
    /* JADX WARN: Code restructure failed: missing block: B:338:0x06d2, code lost:
        r0 = e;
     */
    /* JADX WARN: Code restructure failed: missing block: B:340:0x06d4, code lost:
        r0 = e;
     */
    /* JADX WARN: Code restructure failed: missing block: B:341:0x06d5, code lost:
        r3 = r13;
        r5 = r15;
     */
    /* JADX WARN: Code restructure failed: missing block: B:344:0x06dc, code lost:
        r0 = e;
     */
    /* JADX WARN: Code restructure failed: missing block: B:348:0x06e3, code lost:
        r0 = th;
     */
    /* JADX WARN: Code restructure failed: missing block: B:350:0x06e6, code lost:
        r0 = e;
     */
    /* JADX WARN: Code restructure failed: missing block: B:351:0x06e7, code lost:
        r3 = r13;
        r5 = r15;
        r4 = r22;
     */
    /* JADX WARN: Code restructure failed: missing block: B:358:0x06f6, code lost:
        r1 = r0;
        r2 = r18;
     */
    /* JADX WARN: Code restructure failed: missing block: B:71:0x0231, code lost:
        if ((r2 instanceof org.telegram.tgnet.TLRPC$TL_messageActionGameScore) == false) goto L156;
     */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:109:0x02bf  */
    /* JADX WARN: Removed duplicated region for block: B:118:0x02e0 A[Catch: all -> 0x0513, Exception -> 0x0519, TryCatch #41 {Exception -> 0x0519, all -> 0x0513, blocks: (B:111:0x02cb, B:113:0x02d1, B:115:0x02d7, B:116:0x02da, B:118:0x02e0, B:120:0x02f0, B:122:0x02fa, B:124:0x0302, B:126:0x030c, B:127:0x0313, B:128:0x031d, B:130:0x0325, B:132:0x0330, B:107:0x02ab, B:108:0x02af, B:134:0x034b), top: B:411:0x02d1 }] */
    /* JADX WARN: Removed duplicated region for block: B:122:0x02fa A[Catch: all -> 0x0513, Exception -> 0x0519, TryCatch #41 {Exception -> 0x0519, all -> 0x0513, blocks: (B:111:0x02cb, B:113:0x02d1, B:115:0x02d7, B:116:0x02da, B:118:0x02e0, B:120:0x02f0, B:122:0x02fa, B:124:0x0302, B:126:0x030c, B:127:0x0313, B:128:0x031d, B:130:0x0325, B:132:0x0330, B:107:0x02ab, B:108:0x02af, B:134:0x034b), top: B:411:0x02d1 }] */
    /* JADX WARN: Removed duplicated region for block: B:195:0x0497 A[Catch: Exception -> 0x049b, all -> 0x04aa, TRY_LEAVE, TryCatch #3 {all -> 0x04aa, blocks: (B:170:0x041d, B:172:0x043b, B:173:0x043d, B:174:0x044f, B:176:0x0453, B:178:0x0457, B:180:0x045d, B:182:0x0461, B:184:0x0465, B:186:0x046c, B:188:0x0472, B:191:0x048e, B:193:0x0493, B:195:0x0497), top: B:374:0x041d }] */
    /* JADX WARN: Removed duplicated region for block: B:370:0x073d  */
    /* JADX WARN: Removed duplicated region for block: B:37:0x0151  */
    /* JADX WARN: Removed duplicated region for block: B:38:0x0153  */
    /* JADX WARN: Removed duplicated region for block: B:411:0x02d1 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:41:0x0168  */
    /* JADX WARN: Removed duplicated region for block: B:42:0x016a  */
    /* JADX WARN: Removed duplicated region for block: B:459:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:45:0x0183 A[Catch: all -> 0x051f, Exception -> 0x0526, TryCatch #18 {Exception -> 0x0526, blocks: (B:14:0x00af, B:16:0x00b5, B:18:0x00c2, B:20:0x00cf, B:22:0x00d5, B:23:0x00e4, B:25:0x00f3, B:27:0x0104, B:29:0x0125, B:35:0x0135, B:39:0x0154, B:43:0x016b, B:45:0x0183, B:47:0x018b, B:48:0x0190, B:50:0x01aa, B:51:0x01ba, B:53:0x01c9, B:54:0x01d0, B:56:0x01d7, B:58:0x01e2, B:60:0x0206, B:61:0x0208, B:26:0x00ff), top: B:392:0x00af }] */
    /* JADX WARN: Removed duplicated region for block: B:460:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:50:0x01aa A[Catch: all -> 0x051f, Exception -> 0x0526, TryCatch #18 {Exception -> 0x0526, blocks: (B:14:0x00af, B:16:0x00b5, B:18:0x00c2, B:20:0x00cf, B:22:0x00d5, B:23:0x00e4, B:25:0x00f3, B:27:0x0104, B:29:0x0125, B:35:0x0135, B:39:0x0154, B:43:0x016b, B:45:0x0183, B:47:0x018b, B:48:0x0190, B:50:0x01aa, B:51:0x01ba, B:53:0x01c9, B:54:0x01d0, B:56:0x01d7, B:58:0x01e2, B:60:0x0206, B:61:0x0208, B:26:0x00ff), top: B:392:0x00af }] */
    /* JADX WARN: Removed duplicated region for block: B:53:0x01c9 A[Catch: all -> 0x051f, Exception -> 0x0526, TryCatch #18 {Exception -> 0x0526, blocks: (B:14:0x00af, B:16:0x00b5, B:18:0x00c2, B:20:0x00cf, B:22:0x00d5, B:23:0x00e4, B:25:0x00f3, B:27:0x0104, B:29:0x0125, B:35:0x0135, B:39:0x0154, B:43:0x016b, B:45:0x0183, B:47:0x018b, B:48:0x0190, B:50:0x01aa, B:51:0x01ba, B:53:0x01c9, B:54:0x01d0, B:56:0x01d7, B:58:0x01e2, B:60:0x0206, B:61:0x0208, B:26:0x00ff), top: B:392:0x00af }] */
    /* JADX WARN: Removed duplicated region for block: B:56:0x01d7 A[Catch: all -> 0x051f, Exception -> 0x0526, TryCatch #18 {Exception -> 0x0526, blocks: (B:14:0x00af, B:16:0x00b5, B:18:0x00c2, B:20:0x00cf, B:22:0x00d5, B:23:0x00e4, B:25:0x00f3, B:27:0x0104, B:29:0x0125, B:35:0x0135, B:39:0x0154, B:43:0x016b, B:45:0x0183, B:47:0x018b, B:48:0x0190, B:50:0x01aa, B:51:0x01ba, B:53:0x01c9, B:54:0x01d0, B:56:0x01d7, B:58:0x01e2, B:60:0x0206, B:61:0x0208, B:26:0x00ff), top: B:392:0x00af }] */
    /* JADX WARN: Removed duplicated region for block: B:94:0x028a  */
    /* JADX WARN: Type inference failed for: r7v31, types: [org.telegram.tgnet.TLRPC$TL_dialog] */
    /* JADX WARN: Type inference failed for: r7v32, types: [java.lang.Object, org.telegram.tgnet.TLRPC$Dialog] */
    /* JADX WARN: Type inference failed for: r7v36, types: [org.telegram.tgnet.TLRPC$TL_dialogFolder] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$getDialogs$194(int i, int i2, int i3, long[] jArr) {
        Throwable th;
        SQLiteCursor sQLiteCursor;
        MessagesStorage messagesStorage;
        ArrayList<TLRPC$EncryptedChat> arrayList;
        TLRPC$TL_messages_dialogs tLRPC$TL_messages_dialogs;
        Exception exc;
        SQLiteCursor sQLiteCursor2;
        ArrayList<Long> arrayList2;
        HashSet hashSet;
        ArrayList<Long> arrayList3;
        ArrayList arrayList4;
        ArrayList arrayList5;
        ArrayList arrayList6;
        LongSparseArray<SparseArray<ArrayList<TLRPC$Message>>> longSparseArray;
        LongSparseArray<ArrayList<Integer>> longSparseArray2;
        ArrayList arrayList7;
        int i4;
        SQLiteCursor sQLiteCursor3;
        ArrayList<TLRPC$EncryptedChat> arrayList8;
        ArrayList<Long> arrayList9;
        ArrayList arrayList10;
        final MessagesStorage messagesStorage2;
        HashSet hashSet2;
        final LongSparseArray longSparseArray3;
        ArrayList<TLRPC$UserFull> arrayList11;
        int i5;
        int i6;
        ArrayList arrayList12;
        int i7;
        ArrayList<Long> arrayList13;
        ArrayList arrayList14;
        HashSet hashSet3;
        ArrayList arrayList15;
        LongSparseArray<SparseArray<ArrayList<TLRPC$Message>>> longSparseArray4;
        LongSparseArray<ArrayList<Integer>> longSparseArray5;
        MessagesStorage messagesStorage3;
        ArrayList arrayList16;
        ArrayList arrayList17;
        ArrayList arrayList18;
        HashSet hashSet4;
        MessagesStorage messagesStorage4;
        ArrayList arrayList19;
        ArrayList arrayList20;
        TLRPC$Dialog tLRPC$Dialog;
        HashSet hashSet5;
        NativeByteBuffer byteBufferValue;
        ?? tLRPC$TL_dialog;
        ArrayList arrayList21;
        int i8;
        int i9;
        long longValue;
        long longValue2;
        NativeByteBuffer byteBufferValue2;
        int i10;
        ArrayList<Long> arrayList22;
        LongSparseArray<SparseArray<ArrayList<TLRPC$Message>>> longSparseArray6;
        LongSparseArray<ArrayList<Integer>> longSparseArray7;
        ArrayList arrayList23;
        ArrayList arrayList24;
        HashSet hashSet6;
        Exception exc2;
        MessagesStorage messagesStorage5 = this;
        long[] jArr2 = jArr;
        TLRPC$TL_messages_dialogs tLRPC$TL_messages_dialogs2 = new TLRPC$TL_messages_dialogs();
        ArrayList<TLRPC$EncryptedChat> arrayList25 = new ArrayList<>();
        try {
            try {
                arrayList2 = new ArrayList<>();
                hashSet = new HashSet();
                arrayList2.add(Long.valueOf(getUserConfig().getClientUserId()));
                arrayList3 = new ArrayList<>();
                arrayList4 = new ArrayList();
                arrayList5 = new ArrayList();
                arrayList6 = new ArrayList();
                longSparseArray = new LongSparseArray<>();
                longSparseArray2 = new LongSparseArray<>();
                arrayList7 = new ArrayList(2);
                arrayList7.add(Integer.valueOf(i));
                i4 = 0;
                sQLiteCursor3 = null;
            } catch (Throwable th2) {
                th = th2;
            }
        } catch (Exception e) {
            messagesStorage = messagesStorage5;
            arrayList = arrayList25;
            tLRPC$TL_messages_dialogs = tLRPC$TL_messages_dialogs2;
            exc = e;
            sQLiteCursor2 = null;
        } catch (Throwable th3) {
            th = th3;
            sQLiteCursor = null;
        }
        try {
            while (true) {
                try {
                    arrayList8 = arrayList25;
                    if (i4 >= arrayList7.size()) {
                        break;
                    }
                    try {
                        int intValue = ((Integer) arrayList7.get(i4)).intValue();
                        if (i4 == 0) {
                            i5 = i2;
                            i6 = i3;
                        } else {
                            i5 = 0;
                            i6 = 100;
                        }
                        ArrayList arrayList26 = new ArrayList();
                        HashSet hashSet7 = hashSet;
                        ArrayList arrayList27 = arrayList4;
                        try {
                            LongSparseArray<SparseArray<ArrayList<TLRPC$Message>>> longSparseArray8 = longSparseArray;
                            LongSparseArray<ArrayList<Integer>> longSparseArray9 = longSparseArray2;
                            SQLiteCursor queryFinalized = messagesStorage5.database.queryFinalized(String.format(Locale.US, "SELECT d.did, d.last_mid, d.unread_count, d.date, m.data, m.read_state, m.mid, m.send_state, s.flags, m.date, d.pts, d.inbox_max, d.outbox_max, m.replydata, d.pinned, d.unread_count_i, d.flags, d.folder_id, d.data, d.unread_reactions, d.last_mid_group, d.ttl_period FROM dialogs as d LEFT JOIN messages_v2 as m ON d.last_mid = m.mid AND d.did = m.uid AND d.last_mid_group IS NULL LEFT JOIN dialog_settings as s ON d.did = s.did WHERE d.folder_id = %d ORDER BY d.pinned DESC, d.date DESC LIMIT %d,%d", Integer.valueOf(intValue), Integer.valueOf(i5), Integer.valueOf(i6)), new Object[0]);
                            while (queryFinalized.next()) {
                                try {
                                    try {
                                        ArrayList<Long> arrayList28 = arrayList3;
                                        long longValue3 = queryFinalized.longValue(0);
                                        if (DialogObject.isFolderDialogId(longValue3)) {
                                            tLRPC$TL_dialog = new TLRPC$TL_dialogFolder();
                                            if (!queryFinalized.isNull(18)) {
                                                NativeByteBuffer byteBufferValue3 = queryFinalized.byteBufferValue(18);
                                                if (byteBufferValue3 != null) {
                                                    tLRPC$TL_dialog.folder = TLRPC$TL_folder.TLdeserialize(byteBufferValue3, byteBufferValue3.readInt32(false), false);
                                                    byteBufferValue3.reuse();
                                                } else {
                                                    TLRPC$TL_folder tLRPC$TL_folder = new TLRPC$TL_folder();
                                                    tLRPC$TL_dialog.folder = tLRPC$TL_folder;
                                                    tLRPC$TL_folder.id = DialogObject.getFolderId(longValue3);
                                                }
                                            }
                                            if (i4 == 0) {
                                                arrayList7.add(Integer.valueOf(tLRPC$TL_dialog.folder.id));
                                            }
                                        } else {
                                            tLRPC$TL_dialog = new TLRPC$TL_dialog();
                                        }
                                        tLRPC$TL_dialog.id = longValue3;
                                        tLRPC$TL_dialog.top_message = queryFinalized.intValue(1);
                                        tLRPC$TL_dialog.unread_count = queryFinalized.intValue(2);
                                        tLRPC$TL_dialog.last_message_date = queryFinalized.intValue(3);
                                        int intValue2 = queryFinalized.intValue(10);
                                        tLRPC$TL_dialog.pts = intValue2;
                                        if (intValue2 != 0) {
                                            arrayList21 = arrayList7;
                                            i8 = i4;
                                            if (!DialogObject.isUserDialog(tLRPC$TL_dialog.id)) {
                                                i9 = 1;
                                                tLRPC$TL_dialog.flags = i9;
                                                tLRPC$TL_dialog.read_inbox_max_id = queryFinalized.intValue(11);
                                                tLRPC$TL_dialog.read_outbox_max_id = queryFinalized.intValue(12);
                                                int intValue3 = queryFinalized.intValue(14);
                                                tLRPC$TL_dialog.pinnedNum = intValue3;
                                                tLRPC$TL_dialog.pinned = intValue3 == 0;
                                                tLRPC$TL_dialog.unread_mentions_count = queryFinalized.intValue(15);
                                                tLRPC$TL_dialog.unread_mark = (queryFinalized.intValue(16) & 1) == 0;
                                                longValue = queryFinalized.longValue(8);
                                                ArrayList arrayList29 = arrayList21;
                                                TLRPC$TL_peerNotifySettings tLRPC$TL_peerNotifySettings = new TLRPC$TL_peerNotifySettings();
                                                tLRPC$TL_dialog.notify_settings = tLRPC$TL_peerNotifySettings;
                                                if ((((int) longValue) & 1) != 0) {
                                                    int i11 = (int) (longValue >> 32);
                                                    tLRPC$TL_peerNotifySettings.mute_until = i11;
                                                    if (i11 == 0) {
                                                        tLRPC$TL_peerNotifySettings.mute_until = ConnectionsManager.DEFAULT_DATACENTER_ID;
                                                    }
                                                }
                                                tLRPC$TL_dialog.folder_id = queryFinalized.intValue(17);
                                                tLRPC$TL_dialog.unread_reactions_count = queryFinalized.intValue(19);
                                                longValue2 = queryFinalized.longValue(20);
                                                if (longValue2 != 0) {
                                                    arrayList26.add(new Pair(Long.valueOf(longValue3), Long.valueOf(longValue2)));
                                                }
                                                tLRPC$TL_dialog.ttl_period = queryFinalized.intValue(21);
                                                tLRPC$TL_messages_dialogs2.dialogs.add(tLRPC$TL_dialog);
                                                if (jArr2 != null) {
                                                    arrayList5.add(Long.valueOf(longValue3));
                                                }
                                                byteBufferValue2 = queryFinalized.byteBufferValue(4);
                                                if (byteBufferValue2 == null) {
                                                    TLRPC$Message TLdeserialize = TLRPC$Message.TLdeserialize(byteBufferValue2, byteBufferValue2.readInt32(false), false);
                                                    if (TLdeserialize != null) {
                                                        int i12 = i8;
                                                        TLdeserialize.readAttachPath(byteBufferValue2, getUserConfig().clientUserId);
                                                        byteBufferValue2.reuse();
                                                        MessageObject.setUnreadFlags(TLdeserialize, queryFinalized.intValue(5));
                                                        TLdeserialize.id = queryFinalized.intValue(6);
                                                        int intValue4 = queryFinalized.intValue(9);
                                                        if (intValue4 != 0) {
                                                            tLRPC$TL_dialog.last_message_date = intValue4;
                                                        }
                                                        TLdeserialize.send_state = queryFinalized.intValue(7);
                                                        TLdeserialize.dialog_id = tLRPC$TL_dialog.id;
                                                        tLRPC$TL_messages_dialogs2.messages.add(TLdeserialize);
                                                        arrayList22 = arrayList28;
                                                        addUsersAndChatsFromMessage(TLdeserialize, arrayList2, arrayList22, arrayList6);
                                                        try {
                                                            TLRPC$TL_messageReplyHeader tLRPC$TL_messageReplyHeader = TLdeserialize.reply_to;
                                                            if (tLRPC$TL_messageReplyHeader != null && tLRPC$TL_messageReplyHeader.reply_to_msg_id != 0) {
                                                                TLRPC$MessageAction tLRPC$MessageAction = TLdeserialize.action;
                                                                if (!(tLRPC$MessageAction instanceof TLRPC$TL_messageActionPinMessage)) {
                                                                    try {
                                                                        if (!(tLRPC$MessageAction instanceof TLRPC$TL_messageActionPaymentSent)) {
                                                                        }
                                                                    } catch (Exception e2) {
                                                                        exc2 = e2;
                                                                        i10 = i12;
                                                                        arrayList23 = arrayList26;
                                                                        longSparseArray6 = longSparseArray8;
                                                                        longSparseArray7 = longSparseArray9;
                                                                        messagesStorage3 = this;
                                                                        messagesStorage3.checkSQLException(exc2);
                                                                        if (!DialogObject.isEncryptedDialog(longValue3)) {
                                                                        }
                                                                        if (DialogObject.isEncryptedDialog(longValue3)) {
                                                                        }
                                                                        longSparseArray8 = longSparseArray6;
                                                                        arrayList27 = arrayList24;
                                                                        arrayList3 = arrayList22;
                                                                        longSparseArray9 = longSparseArray7;
                                                                        hashSet7 = hashSet6;
                                                                        arrayList26 = arrayList23;
                                                                        arrayList7 = arrayList29;
                                                                        i4 = i10;
                                                                        jArr2 = jArr;
                                                                    }
                                                                }
                                                                try {
                                                                    if (!queryFinalized.isNull(13)) {
                                                                        try {
                                                                            NativeByteBuffer byteBufferValue4 = queryFinalized.byteBufferValue(13);
                                                                            if (byteBufferValue4 != null) {
                                                                                TLRPC$Message TLdeserialize2 = TLRPC$Message.TLdeserialize(byteBufferValue4, byteBufferValue4.readInt32(false), false);
                                                                                TLdeserialize.replyMessage = TLdeserialize2;
                                                                                i10 = i12;
                                                                                arrayList23 = arrayList26;
                                                                                try {
                                                                                    TLdeserialize2.readAttachPath(byteBufferValue4, getUserConfig().clientUserId);
                                                                                    byteBufferValue4.reuse();
                                                                                    TLRPC$Message tLRPC$Message = TLdeserialize.replyMessage;
                                                                                    if (tLRPC$Message != null) {
                                                                                        addUsersAndChatsFromMessage(tLRPC$Message, arrayList2, arrayList22, arrayList6);
                                                                                    }
                                                                                    if (TLdeserialize.replyMessage == null) {
                                                                                        longSparseArray6 = longSparseArray8;
                                                                                        longSparseArray7 = longSparseArray9;
                                                                                        try {
                                                                                            addReplyMessages(TLdeserialize, longSparseArray6, longSparseArray7);
                                                                                        } catch (Exception e3) {
                                                                                            e = e3;
                                                                                            messagesStorage3 = this;
                                                                                            exc2 = e;
                                                                                            messagesStorage3.checkSQLException(exc2);
                                                                                            if (!DialogObject.isEncryptedDialog(longValue3)) {
                                                                                            }
                                                                                            if (DialogObject.isEncryptedDialog(longValue3)) {
                                                                                            }
                                                                                            longSparseArray8 = longSparseArray6;
                                                                                            arrayList27 = arrayList24;
                                                                                            arrayList3 = arrayList22;
                                                                                            longSparseArray9 = longSparseArray7;
                                                                                            hashSet7 = hashSet6;
                                                                                            arrayList26 = arrayList23;
                                                                                            arrayList7 = arrayList29;
                                                                                            i4 = i10;
                                                                                            jArr2 = jArr;
                                                                                        }
                                                                                    }
                                                                                    longSparseArray6 = longSparseArray8;
                                                                                    longSparseArray7 = longSparseArray9;
                                                                                } catch (Exception e4) {
                                                                                    e = e4;
                                                                                    messagesStorage3 = this;
                                                                                    exc2 = e;
                                                                                    longSparseArray6 = longSparseArray8;
                                                                                    longSparseArray7 = longSparseArray9;
                                                                                    messagesStorage3.checkSQLException(exc2);
                                                                                    if (!DialogObject.isEncryptedDialog(longValue3)) {
                                                                                    }
                                                                                    if (DialogObject.isEncryptedDialog(longValue3)) {
                                                                                    }
                                                                                    longSparseArray8 = longSparseArray6;
                                                                                    arrayList27 = arrayList24;
                                                                                    arrayList3 = arrayList22;
                                                                                    longSparseArray9 = longSparseArray7;
                                                                                    hashSet7 = hashSet6;
                                                                                    arrayList26 = arrayList23;
                                                                                    arrayList7 = arrayList29;
                                                                                    i4 = i10;
                                                                                    jArr2 = jArr;
                                                                                }
                                                                            }
                                                                        } catch (Exception e5) {
                                                                            e = e5;
                                                                            i10 = i12;
                                                                            arrayList23 = arrayList26;
                                                                        }
                                                                    }
                                                                    if (TLdeserialize.replyMessage == null) {
                                                                    }
                                                                    longSparseArray6 = longSparseArray8;
                                                                    longSparseArray7 = longSparseArray9;
                                                                } catch (Exception e6) {
                                                                    e = e6;
                                                                    longSparseArray6 = longSparseArray8;
                                                                    longSparseArray7 = longSparseArray9;
                                                                    messagesStorage3 = this;
                                                                    exc2 = e;
                                                                    messagesStorage3.checkSQLException(exc2);
                                                                    if (!DialogObject.isEncryptedDialog(longValue3)) {
                                                                    }
                                                                    if (DialogObject.isEncryptedDialog(longValue3)) {
                                                                    }
                                                                    longSparseArray8 = longSparseArray6;
                                                                    arrayList27 = arrayList24;
                                                                    arrayList3 = arrayList22;
                                                                    longSparseArray9 = longSparseArray7;
                                                                    hashSet7 = hashSet6;
                                                                    arrayList26 = arrayList23;
                                                                    arrayList7 = arrayList29;
                                                                    i4 = i10;
                                                                    jArr2 = jArr;
                                                                }
                                                                i10 = i12;
                                                                arrayList23 = arrayList26;
                                                            }
                                                            i10 = i12;
                                                            arrayList23 = arrayList26;
                                                            longSparseArray6 = longSparseArray8;
                                                            longSparseArray7 = longSparseArray9;
                                                        } catch (Exception e7) {
                                                            e = e7;
                                                            i10 = i12;
                                                            arrayList23 = arrayList26;
                                                        }
                                                    } else {
                                                        i10 = i8;
                                                        arrayList22 = arrayList28;
                                                        longSparseArray6 = longSparseArray8;
                                                        longSparseArray7 = longSparseArray9;
                                                        arrayList23 = arrayList26;
                                                        messagesStorage3 = this;
                                                        byteBufferValue2.reuse();
                                                    }
                                                    if (!DialogObject.isEncryptedDialog(longValue3)) {
                                                        try {
                                                            if (tLRPC$TL_dialog.read_inbox_max_id > tLRPC$TL_dialog.top_message) {
                                                                tLRPC$TL_dialog.read_inbox_max_id = 0;
                                                            }
                                                        } catch (Exception e8) {
                                                            exc = e8;
                                                            sQLiteCursor2 = queryFinalized;
                                                            messagesStorage = messagesStorage3;
                                                            tLRPC$TL_messages_dialogs = tLRPC$TL_messages_dialogs2;
                                                            arrayList = arrayList8;
                                                            tLRPC$TL_messages_dialogs.dialogs.clear();
                                                            tLRPC$TL_messages_dialogs.users.clear();
                                                            tLRPC$TL_messages_dialogs.chats.clear();
                                                            arrayList.clear();
                                                            messagesStorage.checkSQLException(exc);
                                                            getMessagesController().processLoadedDialogs(tLRPC$TL_messages_dialogs, arrayList, null, i, 0, 100, 1, true, false, true);
                                                            if (sQLiteCursor2 == null) {
                                                            }
                                                            sQLiteCursor2.dispose();
                                                            return;
                                                        } catch (Throwable th4) {
                                                            th = th4;
                                                            sQLiteCursor = queryFinalized;
                                                            if (sQLiteCursor != null) {
                                                            }
                                                            throw th;
                                                        }
                                                    }
                                                    if (DialogObject.isEncryptedDialog(longValue3)) {
                                                        int encryptedChatId = DialogObject.getEncryptedChatId(longValue3);
                                                        arrayList24 = arrayList27;
                                                        if (!arrayList24.contains(Integer.valueOf(encryptedChatId))) {
                                                            arrayList24.add(Integer.valueOf(encryptedChatId));
                                                        }
                                                        hashSet6 = hashSet7;
                                                    } else {
                                                        arrayList24 = arrayList27;
                                                        if (DialogObject.isUserDialog(longValue3)) {
                                                            if (!arrayList2.contains(Long.valueOf(longValue3))) {
                                                                arrayList2.add(Long.valueOf(longValue3));
                                                            }
                                                            hashSet6 = hashSet7;
                                                            hashSet6.add(Long.valueOf(longValue3));
                                                        } else {
                                                            hashSet6 = hashSet7;
                                                            if (DialogObject.isChatDialog(longValue3)) {
                                                                long j = -longValue3;
                                                                if (!arrayList22.contains(Long.valueOf(j))) {
                                                                    arrayList22.add(Long.valueOf(j));
                                                                }
                                                            }
                                                        }
                                                    }
                                                    longSparseArray8 = longSparseArray6;
                                                    arrayList27 = arrayList24;
                                                    arrayList3 = arrayList22;
                                                    longSparseArray9 = longSparseArray7;
                                                    hashSet7 = hashSet6;
                                                    arrayList26 = arrayList23;
                                                    arrayList7 = arrayList29;
                                                    i4 = i10;
                                                    jArr2 = jArr;
                                                } else {
                                                    i10 = i8;
                                                    arrayList22 = arrayList28;
                                                    longSparseArray6 = longSparseArray8;
                                                    longSparseArray7 = longSparseArray9;
                                                    arrayList23 = arrayList26;
                                                }
                                                messagesStorage3 = this;
                                                if (!DialogObject.isEncryptedDialog(longValue3)) {
                                                }
                                                if (DialogObject.isEncryptedDialog(longValue3)) {
                                                }
                                                longSparseArray8 = longSparseArray6;
                                                arrayList27 = arrayList24;
                                                arrayList3 = arrayList22;
                                                longSparseArray9 = longSparseArray7;
                                                hashSet7 = hashSet6;
                                                arrayList26 = arrayList23;
                                                arrayList7 = arrayList29;
                                                i4 = i10;
                                                jArr2 = jArr;
                                            }
                                        } else {
                                            arrayList21 = arrayList7;
                                            i8 = i4;
                                        }
                                        i9 = 0;
                                        tLRPC$TL_dialog.flags = i9;
                                        tLRPC$TL_dialog.read_inbox_max_id = queryFinalized.intValue(11);
                                        tLRPC$TL_dialog.read_outbox_max_id = queryFinalized.intValue(12);
                                        int intValue32 = queryFinalized.intValue(14);
                                        tLRPC$TL_dialog.pinnedNum = intValue32;
                                        tLRPC$TL_dialog.pinned = intValue32 == 0;
                                        tLRPC$TL_dialog.unread_mentions_count = queryFinalized.intValue(15);
                                        tLRPC$TL_dialog.unread_mark = (queryFinalized.intValue(16) & 1) == 0;
                                        longValue = queryFinalized.longValue(8);
                                        ArrayList arrayList292 = arrayList21;
                                        TLRPC$TL_peerNotifySettings tLRPC$TL_peerNotifySettings2 = new TLRPC$TL_peerNotifySettings();
                                        tLRPC$TL_dialog.notify_settings = tLRPC$TL_peerNotifySettings2;
                                        if ((((int) longValue) & 1) != 0) {
                                        }
                                        tLRPC$TL_dialog.folder_id = queryFinalized.intValue(17);
                                        tLRPC$TL_dialog.unread_reactions_count = queryFinalized.intValue(19);
                                        longValue2 = queryFinalized.longValue(20);
                                        if (longValue2 != 0) {
                                        }
                                        tLRPC$TL_dialog.ttl_period = queryFinalized.intValue(21);
                                        tLRPC$TL_messages_dialogs2.dialogs.add(tLRPC$TL_dialog);
                                        if (jArr2 != null) {
                                        }
                                        byteBufferValue2 = queryFinalized.byteBufferValue(4);
                                        if (byteBufferValue2 == null) {
                                        }
                                        messagesStorage3 = this;
                                        if (!DialogObject.isEncryptedDialog(longValue3)) {
                                        }
                                        if (DialogObject.isEncryptedDialog(longValue3)) {
                                        }
                                        longSparseArray8 = longSparseArray6;
                                        arrayList27 = arrayList24;
                                        arrayList3 = arrayList22;
                                        longSparseArray9 = longSparseArray7;
                                        hashSet7 = hashSet6;
                                        arrayList26 = arrayList23;
                                        arrayList7 = arrayList292;
                                        i4 = i10;
                                        jArr2 = jArr;
                                    } catch (Exception e9) {
                                        exc = e9;
                                        sQLiteCursor2 = queryFinalized;
                                        tLRPC$TL_messages_dialogs = tLRPC$TL_messages_dialogs2;
                                        arrayList = arrayList8;
                                        messagesStorage = this;
                                    }
                                } catch (Throwable th5) {
                                    th = th5;
                                    sQLiteCursor = queryFinalized;
                                }
                            }
                            arrayList12 = arrayList7;
                            i7 = i4;
                            arrayList13 = arrayList3;
                            arrayList14 = arrayList26;
                            hashSet3 = hashSet7;
                            arrayList15 = arrayList27;
                            longSparseArray4 = longSparseArray8;
                            longSparseArray5 = longSparseArray9;
                            messagesStorage3 = this;
                            queryFinalized.dispose();
                        } catch (Exception e10) {
                            messagesStorage = this;
                            exc = e10;
                            tLRPC$TL_messages_dialogs = tLRPC$TL_messages_dialogs2;
                            sQLiteCursor2 = sQLiteCursor3;
                            arrayList = arrayList8;
                            tLRPC$TL_messages_dialogs.dialogs.clear();
                            tLRPC$TL_messages_dialogs.users.clear();
                            tLRPC$TL_messages_dialogs.chats.clear();
                            arrayList.clear();
                            messagesStorage.checkSQLException(exc);
                            getMessagesController().processLoadedDialogs(tLRPC$TL_messages_dialogs, arrayList, null, i, 0, 100, 1, true, false, true);
                            if (sQLiteCursor2 == null) {
                            }
                            sQLiteCursor2.dispose();
                            return;
                        } catch (Throwable th6) {
                            th = th6;
                            th = th;
                            sQLiteCursor = sQLiteCursor3;
                            if (sQLiteCursor != null) {
                            }
                            throw th;
                        }
                    } catch (Exception e11) {
                        exc = e11;
                        messagesStorage = messagesStorage5;
                    } catch (Throwable th7) {
                        th = th7;
                        sQLiteCursor = sQLiteCursor3;
                        if (sQLiteCursor != null) {
                        }
                        throw th;
                    }
                    try {
                        if (arrayList14.isEmpty()) {
                            arrayList16 = arrayList6;
                            arrayList17 = arrayList5;
                            arrayList18 = arrayList15;
                            hashSet4 = hashSet3;
                            messagesStorage4 = messagesStorage3;
                            sQLiteCursor3 = null;
                        } else {
                            StringBuilder sb = new StringBuilder();
                            int i13 = 0;
                            while (i13 < arrayList14.size()) {
                                ArrayList arrayList30 = arrayList14;
                                try {
                                    Pair pair = (Pair) arrayList30.get(i13);
                                    sb.append("uid = ");
                                    sb.append(pair.first);
                                    sb.append(" AND group_id = ");
                                    sb.append(pair.second);
                                    i13++;
                                    if (i13 < arrayList30.size()) {
                                        sb.append(" OR ");
                                    }
                                    arrayList14 = arrayList30;
                                } catch (Exception e12) {
                                    exc = e12;
                                    messagesStorage = messagesStorage3;
                                    tLRPC$TL_messages_dialogs = tLRPC$TL_messages_dialogs2;
                                    arrayList = arrayList8;
                                    sQLiteCursor2 = null;
                                } catch (Throwable th8) {
                                    th = th8;
                                    sQLiteCursor = null;
                                    if (sQLiteCursor != null) {
                                    }
                                    throw th;
                                }
                            }
                            arrayList16 = arrayList6;
                            int i14 = 0;
                            SQLiteCursor queryFinalized2 = messagesStorage3.database.queryFinalized(String.format(Locale.US, "SELECT uid, data, read_state, mid, send_state, date, replydata, group_id FROM messages_v2 WHERE %s ORDER BY date DESC", sb), new Object[0]);
                            while (queryFinalized2.next()) {
                                try {
                                    long longValue4 = queryFinalized2.longValue(i14);
                                    NativeByteBuffer byteBufferValue5 = queryFinalized2.byteBufferValue(1);
                                    int i15 = 0;
                                    while (true) {
                                        if (i15 >= tLRPC$TL_messages_dialogs2.dialogs.size()) {
                                            arrayList19 = arrayList5;
                                            arrayList20 = arrayList15;
                                            tLRPC$Dialog = null;
                                            break;
                                        }
                                        tLRPC$Dialog = tLRPC$TL_messages_dialogs2.dialogs.get(i15);
                                        if (tLRPC$Dialog != null) {
                                            arrayList19 = arrayList5;
                                            arrayList20 = arrayList15;
                                            if (tLRPC$Dialog.id == longValue4) {
                                                break;
                                            }
                                        } else {
                                            arrayList19 = arrayList5;
                                            arrayList20 = arrayList15;
                                        }
                                        i15++;
                                        arrayList5 = arrayList19;
                                        arrayList15 = arrayList20;
                                    }
                                    if (tLRPC$Dialog == null || byteBufferValue5 == null) {
                                        hashSet5 = hashSet3;
                                        messagesStorage2 = messagesStorage3;
                                    } else {
                                        TLRPC$Message TLdeserialize3 = TLRPC$Message.TLdeserialize(byteBufferValue5, byteBufferValue5.readInt32(false), false);
                                        if (TLdeserialize3 != null) {
                                            hashSet5 = hashSet3;
                                            try {
                                                try {
                                                    TLdeserialize3.readAttachPath(byteBufferValue5, getUserConfig().clientUserId);
                                                    byteBufferValue5.reuse();
                                                    MessageObject.setUnreadFlags(TLdeserialize3, queryFinalized2.intValue(2));
                                                    TLdeserialize3.id = queryFinalized2.intValue(3);
                                                    int intValue5 = queryFinalized2.intValue(5);
                                                    if (intValue5 != 0) {
                                                        tLRPC$Dialog.last_message_date = intValue5;
                                                    }
                                                    TLdeserialize3.send_state = queryFinalized2.intValue(4);
                                                    TLdeserialize3.dialog_id = longValue4;
                                                    tLRPC$TL_messages_dialogs2.messages.add(TLdeserialize3);
                                                    addUsersAndChatsFromMessage(TLdeserialize3, arrayList2, arrayList13, null);
                                                    try {
                                                        TLRPC$TL_messageReplyHeader tLRPC$TL_messageReplyHeader2 = TLdeserialize3.reply_to;
                                                        if (tLRPC$TL_messageReplyHeader2 != null && tLRPC$TL_messageReplyHeader2.reply_to_msg_id != 0) {
                                                            TLRPC$MessageAction tLRPC$MessageAction2 = TLdeserialize3.action;
                                                            if ((tLRPC$MessageAction2 instanceof TLRPC$TL_messageActionPinMessage) || (tLRPC$MessageAction2 instanceof TLRPC$TL_messageActionPaymentSent) || (tLRPC$MessageAction2 instanceof TLRPC$TL_messageActionGameScore)) {
                                                                if (!queryFinalized2.isNull(7) && (byteBufferValue = queryFinalized2.byteBufferValue(7)) != null) {
                                                                    TLRPC$Message TLdeserialize4 = TLRPC$Message.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                                                                    TLdeserialize3.replyMessage = TLdeserialize4;
                                                                    TLdeserialize4.readAttachPath(byteBufferValue, getUserConfig().clientUserId);
                                                                    byteBufferValue.reuse();
                                                                    TLRPC$Message tLRPC$Message2 = TLdeserialize3.replyMessage;
                                                                    if (tLRPC$Message2 != null) {
                                                                        try {
                                                                            addUsersAndChatsFromMessage(tLRPC$Message2, arrayList2, arrayList13, null);
                                                                            if (TLdeserialize3.replyMessage == null) {
                                                                                addReplyMessages(TLdeserialize3, longSparseArray4, longSparseArray5);
                                                                            }
                                                                            messagesStorage2 = this;
                                                                        } catch (Exception e13) {
                                                                            e = e13;
                                                                            messagesStorage2 = this;
                                                                            try {
                                                                                messagesStorage2.checkSQLException(e);
                                                                                messagesStorage3 = messagesStorage2;
                                                                                arrayList5 = arrayList19;
                                                                                i14 = 0;
                                                                                hashSet3 = hashSet5;
                                                                                arrayList15 = arrayList20;
                                                                            } catch (Exception e14) {
                                                                                e = e14;
                                                                                sQLiteCursor2 = queryFinalized2;
                                                                                messagesStorage = messagesStorage2;
                                                                                tLRPC$TL_messages_dialogs = tLRPC$TL_messages_dialogs2;
                                                                                arrayList = arrayList8;
                                                                                exc = e;
                                                                                tLRPC$TL_messages_dialogs.dialogs.clear();
                                                                                tLRPC$TL_messages_dialogs.users.clear();
                                                                                tLRPC$TL_messages_dialogs.chats.clear();
                                                                                arrayList.clear();
                                                                                messagesStorage.checkSQLException(exc);
                                                                                getMessagesController().processLoadedDialogs(tLRPC$TL_messages_dialogs, arrayList, null, i, 0, 100, 1, true, false, true);
                                                                                if (sQLiteCursor2 == null) {
                                                                                }
                                                                                sQLiteCursor2.dispose();
                                                                                return;
                                                                            } catch (Throwable th9) {
                                                                                th = th9;
                                                                                sQLiteCursor = queryFinalized2;
                                                                                th = th;
                                                                                if (sQLiteCursor != null) {
                                                                                }
                                                                                throw th;
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                                if (TLdeserialize3.replyMessage == null) {
                                                                }
                                                                messagesStorage2 = this;
                                                            }
                                                        }
                                                        messagesStorage2 = this;
                                                    } catch (Exception e15) {
                                                        e = e15;
                                                    }
                                                } catch (Exception e16) {
                                                    e = e16;
                                                    messagesStorage = this;
                                                    sQLiteCursor2 = queryFinalized2;
                                                    tLRPC$TL_messages_dialogs = tLRPC$TL_messages_dialogs2;
                                                    arrayList = arrayList8;
                                                    exc = e;
                                                    tLRPC$TL_messages_dialogs.dialogs.clear();
                                                    tLRPC$TL_messages_dialogs.users.clear();
                                                    tLRPC$TL_messages_dialogs.chats.clear();
                                                    arrayList.clear();
                                                    messagesStorage.checkSQLException(exc);
                                                    getMessagesController().processLoadedDialogs(tLRPC$TL_messages_dialogs, arrayList, null, i, 0, 100, 1, true, false, true);
                                                    if (sQLiteCursor2 == null) {
                                                    }
                                                    sQLiteCursor2.dispose();
                                                    return;
                                                }
                                            } catch (Throwable th10) {
                                                th = th10;
                                                sQLiteCursor = queryFinalized2;
                                            }
                                        } else {
                                            hashSet5 = hashSet3;
                                            messagesStorage2 = messagesStorage3;
                                            byteBufferValue5.reuse();
                                        }
                                    }
                                    messagesStorage3 = messagesStorage2;
                                    arrayList5 = arrayList19;
                                    i14 = 0;
                                    hashSet3 = hashSet5;
                                    arrayList15 = arrayList20;
                                } catch (Exception e17) {
                                    e = e17;
                                    sQLiteCursor2 = queryFinalized2;
                                    messagesStorage = messagesStorage3;
                                } catch (Throwable th11) {
                                    th = th11;
                                    sQLiteCursor = queryFinalized2;
                                }
                            }
                            arrayList17 = arrayList5;
                            arrayList18 = arrayList15;
                            hashSet4 = hashSet3;
                            messagesStorage4 = messagesStorage3;
                            queryFinalized2.dispose();
                            sQLiteCursor3 = queryFinalized2;
                        }
                        i4 = i7 + 1;
                        longSparseArray = longSparseArray4;
                        hashSet = hashSet4;
                        arrayList3 = arrayList13;
                        longSparseArray2 = longSparseArray5;
                        messagesStorage5 = messagesStorage4;
                        arrayList25 = arrayList8;
                        arrayList6 = arrayList16;
                        arrayList5 = arrayList17;
                        arrayList4 = arrayList18;
                        arrayList7 = arrayList12;
                        jArr2 = jArr;
                    } catch (Exception e18) {
                        exc = e18;
                        sQLiteCursor2 = null;
                        messagesStorage = messagesStorage3;
                        tLRPC$TL_messages_dialogs = tLRPC$TL_messages_dialogs2;
                        arrayList = arrayList8;
                        tLRPC$TL_messages_dialogs.dialogs.clear();
                        tLRPC$TL_messages_dialogs.users.clear();
                        tLRPC$TL_messages_dialogs.chats.clear();
                        arrayList.clear();
                        messagesStorage.checkSQLException(exc);
                        getMessagesController().processLoadedDialogs(tLRPC$TL_messages_dialogs, arrayList, null, i, 0, 100, 1, true, false, true);
                        if (sQLiteCursor2 == null) {
                        }
                        sQLiteCursor2.dispose();
                        return;
                    } catch (Throwable th12) {
                        th = th12;
                        sQLiteCursor = null;
                        if (sQLiteCursor != null) {
                        }
                        throw th;
                    }
                    tLRPC$TL_messages_dialogs = tLRPC$TL_messages_dialogs2;
                    arrayList = arrayList8;
                } catch (Exception e19) {
                    e = e19;
                    messagesStorage = messagesStorage5;
                    arrayList = arrayList25;
                    tLRPC$TL_messages_dialogs = tLRPC$TL_messages_dialogs2;
                } catch (Throwable th13) {
                    th = th13;
                }
                tLRPC$TL_messages_dialogs.dialogs.clear();
                tLRPC$TL_messages_dialogs.users.clear();
                tLRPC$TL_messages_dialogs.chats.clear();
                arrayList.clear();
                messagesStorage.checkSQLException(exc);
                getMessagesController().processLoadedDialogs(tLRPC$TL_messages_dialogs, arrayList, null, i, 0, 100, 1, true, false, true);
                if (sQLiteCursor2 == null) {
                    return;
                }
                sQLiteCursor2.dispose();
                return;
            }
            if (arrayList10.isEmpty()) {
                arrayList = arrayList8;
            } else {
                try {
                    try {
                        arrayList = arrayList8;
                        try {
                            messagesStorage2.getEncryptedChatsInternal(TextUtils.join(",", arrayList10), arrayList, arrayList2);
                        } catch (Exception e20) {
                            exc = e20;
                            messagesStorage = messagesStorage2;
                            tLRPC$TL_messages_dialogs = tLRPC$TL_messages_dialogs2;
                        }
                    } catch (Throwable th14) {
                        th = th14;
                        sQLiteCursor = sQLiteCursor2;
                        if (sQLiteCursor != null) {
                            sQLiteCursor.dispose();
                        }
                        throw th;
                    }
                } catch (Exception e21) {
                    exc = e21;
                    messagesStorage = messagesStorage2;
                    tLRPC$TL_messages_dialogs = tLRPC$TL_messages_dialogs2;
                    arrayList = arrayList8;
                    tLRPC$TL_messages_dialogs.dialogs.clear();
                    tLRPC$TL_messages_dialogs.users.clear();
                    tLRPC$TL_messages_dialogs.chats.clear();
                    arrayList.clear();
                    messagesStorage.checkSQLException(exc);
                    getMessagesController().processLoadedDialogs(tLRPC$TL_messages_dialogs, arrayList, null, i, 0, 100, 1, true, false, true);
                    if (sQLiteCursor2 == null) {
                    }
                    sQLiteCursor2.dispose();
                    return;
                }
            }
            if (!arrayList9.isEmpty()) {
                messagesStorage2.getChatsInternal(TextUtils.join(",", arrayList9), tLRPC$TL_messages_dialogs2.chats);
            }
            if (!arrayList2.isEmpty()) {
                messagesStorage2.getUsersInternal(TextUtils.join(",", arrayList2), tLRPC$TL_messages_dialogs2.users);
            }
            if (!hashSet2.isEmpty()) {
                HashSet<Long> hashSet8 = new HashSet<>();
                Iterator it = hashSet2.iterator();
                while (it.hasNext()) {
                    Long l = (Long) it.next();
                    for (int i16 = 0; i16 < tLRPC$TL_messages_dialogs2.users.size(); i16++) {
                        if (tLRPC$TL_messages_dialogs2.users.get(i16).id == l.longValue() && tLRPC$TL_messages_dialogs2.users.get(i16).premium) {
                            hashSet8.add(l);
                        }
                    }
                }
                if (!hashSet8.isEmpty()) {
                    arrayList11 = messagesStorage2.loadUserInfos(hashSet8);
                    messagesStorage = this;
                    tLRPC$TL_messages_dialogs = tLRPC$TL_messages_dialogs2;
                    getMessagesController().processLoadedDialogs(tLRPC$TL_messages_dialogs2, arrayList, arrayList11, i, i2, i3, 1, false, false, true);
                    if (sQLiteCursor2 == null) {
                        return;
                    }
                    sQLiteCursor2.dispose();
                    return;
                }
            }
            arrayList11 = null;
            messagesStorage = this;
            tLRPC$TL_messages_dialogs = tLRPC$TL_messages_dialogs2;
            getMessagesController().processLoadedDialogs(tLRPC$TL_messages_dialogs2, arrayList, arrayList11, i, i2, i3, 1, false, false, true);
            if (sQLiteCursor2 == null) {
            }
            sQLiteCursor2.dispose();
            return;
        } catch (Throwable th15) {
            th = th15;
            th = th;
            sQLiteCursor = sQLiteCursor2;
            if (sQLiteCursor != null) {
            }
            throw th;
        }
        ArrayList arrayList31 = arrayList5;
        arrayList9 = arrayList3;
        arrayList10 = arrayList4;
        messagesStorage2 = messagesStorage5;
        hashSet2 = hashSet;
        loadReplyMessages(longSparseArray, longSparseArray2, arrayList2, arrayList9, false);
        if (jArr != null) {
            try {
                ArrayList arrayList32 = new ArrayList();
                for (int i17 = 0; i17 < jArr.length; i17++) {
                    long j2 = jArr[i17];
                    if (!DialogObject.isEncryptedDialog(j2)) {
                        if (j2 > 0) {
                            if (!arrayList2.contains(Long.valueOf(j2))) {
                                arrayList2.add(Long.valueOf(j2));
                            }
                        } else {
                            long j3 = -j2;
                            if (!arrayList9.contains(Long.valueOf(j3))) {
                                arrayList9.add(Long.valueOf(j3));
                            }
                        }
                        if (!arrayList31.contains(Long.valueOf(jArr[i17]))) {
                            arrayList32.add(Long.valueOf(jArr[i17]));
                        }
                    }
                }
                if (arrayList32.isEmpty()) {
                    longSparseArray3 = null;
                } else {
                    longSparseArray3 = new LongSparseArray(arrayList32.size());
                    SQLiteCursor queryFinalized3 = messagesStorage2.database.queryFinalized(String.format(Locale.US, "SELECT did, folder_id FROM dialogs WHERE did IN(%s)", TextUtils.join(",", arrayList32)), new Object[0]);
                    while (queryFinalized3.next()) {
                        try {
                            longSparseArray3.put(queryFinalized3.longValue(0), Integer.valueOf(queryFinalized3.intValue(1)));
                        } catch (Exception e22) {
                            exc = e22;
                            sQLiteCursor2 = queryFinalized3;
                            messagesStorage = messagesStorage2;
                            tLRPC$TL_messages_dialogs = tLRPC$TL_messages_dialogs2;
                            arrayList = arrayList8;
                            tLRPC$TL_messages_dialogs.dialogs.clear();
                            tLRPC$TL_messages_dialogs.users.clear();
                            tLRPC$TL_messages_dialogs.chats.clear();
                            arrayList.clear();
                            messagesStorage.checkSQLException(exc);
                            getMessagesController().processLoadedDialogs(tLRPC$TL_messages_dialogs, arrayList, null, i, 0, 100, 1, true, false, true);
                            if (sQLiteCursor2 == null) {
                            }
                            sQLiteCursor2.dispose();
                            return;
                        } catch (Throwable th16) {
                            th = th16;
                            sQLiteCursor = queryFinalized3;
                            if (sQLiteCursor != null) {
                            }
                            throw th;
                        }
                    }
                    queryFinalized3.dispose();
                    sQLiteCursor3 = null;
                }
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda130
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesStorage.this.lambda$getDialogs$193(longSparseArray3);
                    }
                });
            } catch (Exception e23) {
                exc = e23;
                messagesStorage = messagesStorage2;
                tLRPC$TL_messages_dialogs = tLRPC$TL_messages_dialogs2;
                sQLiteCursor2 = sQLiteCursor3;
                arrayList = arrayList8;
                tLRPC$TL_messages_dialogs.dialogs.clear();
                tLRPC$TL_messages_dialogs.users.clear();
                tLRPC$TL_messages_dialogs.chats.clear();
                arrayList.clear();
                messagesStorage.checkSQLException(exc);
                getMessagesController().processLoadedDialogs(tLRPC$TL_messages_dialogs, arrayList, null, i, 0, 100, 1, true, false, true);
                if (sQLiteCursor2 == null) {
                }
                sQLiteCursor2.dispose();
                return;
            } catch (Throwable th17) {
                th = th17;
                sQLiteCursor = sQLiteCursor3;
                if (sQLiteCursor != null) {
                }
                throw th;
            }
        }
        sQLiteCursor2 = sQLiteCursor3;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$getDialogs$193(LongSparseArray longSparseArray) {
        MediaDataController mediaDataController = getMediaDataController();
        mediaDataController.clearDraftsFolderIds();
        if (longSparseArray != null) {
            int size = longSparseArray.size();
            for (int i = 0; i < size; i++) {
                mediaDataController.setDraftFolderId(longSparseArray.keyAt(i), ((Integer) longSparseArray.valueAt(i)).intValue());
            }
        }
    }

    public static void createFirstHoles(long j, SQLitePreparedStatement sQLitePreparedStatement, SQLitePreparedStatement sQLitePreparedStatement2, int i, int i2) throws Exception {
        int i3;
        int i4;
        sQLitePreparedStatement.requery();
        sQLitePreparedStatement.bindLong(1, j);
        if (i2 != 0) {
            sQLitePreparedStatement.bindInteger(2, i2);
            i3 = 3;
        } else {
            i3 = 2;
        }
        int i5 = i3 + 1;
        sQLitePreparedStatement.bindInteger(i3, i == 1 ? 1 : 0);
        sQLitePreparedStatement.bindInteger(i5, i);
        sQLitePreparedStatement.step();
        for (int i6 = 0; i6 < 8; i6++) {
            sQLitePreparedStatement2.requery();
            sQLitePreparedStatement2.bindLong(1, j);
            if (i2 != 0) {
                sQLitePreparedStatement2.bindInteger(2, i2);
                i4 = 3;
            } else {
                i4 = 2;
            }
            int i7 = i4 + 1;
            sQLitePreparedStatement2.bindInteger(i4, i6);
            int i8 = i7 + 1;
            sQLitePreparedStatement2.bindInteger(i7, i == 1 ? 1 : 0);
            sQLitePreparedStatement2.bindInteger(i8, i);
            sQLitePreparedStatement2.step();
        }
    }

    public void updateDialogData(final TLRPC$Dialog tLRPC$Dialog) {
        if (tLRPC$Dialog == null) {
            return;
        }
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda176
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$updateDialogData$195(tLRPC$Dialog);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:34:0x0074  */
    /* JADX WARN: Removed duplicated region for block: B:36:0x0079  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$updateDialogData$195(TLRPC$Dialog tLRPC$Dialog) {
        SQLitePreparedStatement sQLitePreparedStatement;
        SQLiteCursor sQLiteCursor = null;
        try {
            SQLiteCursor queryFinalized = this.database.queryFinalized("SELECT data FROM dialogs WHERE did = " + tLRPC$Dialog.id, new Object[0]);
            try {
                if (!queryFinalized.next()) {
                    queryFinalized.dispose();
                    return;
                }
                sQLitePreparedStatement = this.database.executeFast("UPDATE dialogs SET data = ? WHERE did = ?");
                try {
                    NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(tLRPC$Dialog.getObjectSize());
                    tLRPC$Dialog.serializeToStream(nativeByteBuffer);
                    sQLitePreparedStatement.bindByteBuffer(1, nativeByteBuffer);
                    sQLitePreparedStatement.bindLong(2, tLRPC$Dialog.id);
                    sQLitePreparedStatement.step();
                    sQLitePreparedStatement.dispose();
                    nativeByteBuffer.reuse();
                    queryFinalized.dispose();
                } catch (Exception e) {
                    e = e;
                    sQLiteCursor = queryFinalized;
                    try {
                        checkSQLException(e);
                        if (sQLiteCursor != null) {
                            sQLiteCursor.dispose();
                        }
                        if (sQLitePreparedStatement != null) {
                            sQLitePreparedStatement.dispose();
                        }
                    } catch (Throwable th) {
                        th = th;
                        if (sQLiteCursor != null) {
                            sQLiteCursor.dispose();
                        }
                        if (sQLitePreparedStatement != null) {
                            sQLitePreparedStatement.dispose();
                        }
                        throw th;
                    }
                } catch (Throwable th2) {
                    th = th2;
                    sQLiteCursor = queryFinalized;
                    if (sQLiteCursor != null) {
                    }
                    if (sQLitePreparedStatement != null) {
                    }
                    throw th;
                }
            } catch (Exception e2) {
                e = e2;
                sQLitePreparedStatement = null;
            } catch (Throwable th3) {
                th = th3;
                sQLitePreparedStatement = null;
            }
        } catch (Exception e3) {
            e = e3;
            sQLitePreparedStatement = null;
        } catch (Throwable th4) {
            th = th4;
            sQLitePreparedStatement = null;
        }
    }

    /* JADX WARN: Code restructure failed: missing block: B:68:0x018a, code lost:
        if (r14 < 0) goto L309;
     */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:100:0x022b  */
    /* JADX WARN: Removed duplicated region for block: B:103:0x0235  */
    /* JADX WARN: Removed duplicated region for block: B:105:0x0239  */
    /* JADX WARN: Removed duplicated region for block: B:111:0x0247  */
    /* JADX WARN: Removed duplicated region for block: B:112:0x0249  */
    /* JADX WARN: Removed duplicated region for block: B:115:0x025a A[Catch: all -> 0x0207, Exception -> 0x020e, TRY_ENTER, TRY_LEAVE, TryCatch #47 {Exception -> 0x020e, all -> 0x0207, blocks: (B:85:0x0200, B:98:0x0226, B:115:0x025a, B:122:0x027c, B:126:0x0283, B:133:0x02a2, B:139:0x02b8, B:141:0x02de, B:144:0x02e8, B:147:0x02ee, B:148:0x02f6, B:125:0x0281), top: B:434:0x0200 }] */
    /* JADX WARN: Removed duplicated region for block: B:117:0x0270  */
    /* JADX WARN: Removed duplicated region for block: B:121:0x027a  */
    /* JADX WARN: Removed duplicated region for block: B:128:0x0289  */
    /* JADX WARN: Removed duplicated region for block: B:133:0x02a2 A[Catch: all -> 0x0207, Exception -> 0x020e, TRY_ENTER, TRY_LEAVE, TryCatch #47 {Exception -> 0x020e, all -> 0x0207, blocks: (B:85:0x0200, B:98:0x0226, B:115:0x025a, B:122:0x027c, B:126:0x0283, B:133:0x02a2, B:139:0x02b8, B:141:0x02de, B:144:0x02e8, B:147:0x02ee, B:148:0x02f6, B:125:0x0281), top: B:434:0x0200 }] */
    /* JADX WARN: Removed duplicated region for block: B:135:0x02aa  */
    /* JADX WARN: Removed duplicated region for block: B:139:0x02b8 A[Catch: all -> 0x0207, Exception -> 0x020e, TRY_ENTER, TryCatch #47 {Exception -> 0x020e, all -> 0x0207, blocks: (B:85:0x0200, B:98:0x0226, B:115:0x025a, B:122:0x027c, B:126:0x0283, B:133:0x02a2, B:139:0x02b8, B:141:0x02de, B:144:0x02e8, B:147:0x02ee, B:148:0x02f6, B:125:0x0281), top: B:434:0x0200 }] */
    /* JADX WARN: Removed duplicated region for block: B:141:0x02de A[Catch: all -> 0x0207, Exception -> 0x020e, TRY_LEAVE, TryCatch #47 {Exception -> 0x020e, all -> 0x0207, blocks: (B:85:0x0200, B:98:0x0226, B:115:0x025a, B:122:0x027c, B:126:0x0283, B:133:0x02a2, B:139:0x02b8, B:141:0x02de, B:144:0x02e8, B:147:0x02ee, B:148:0x02f6, B:125:0x0281), top: B:434:0x0200 }] */
    /* JADX WARN: Removed duplicated region for block: B:147:0x02ee A[Catch: all -> 0x0207, Exception -> 0x020e, TryCatch #47 {Exception -> 0x020e, all -> 0x0207, blocks: (B:85:0x0200, B:98:0x0226, B:115:0x025a, B:122:0x027c, B:126:0x0283, B:133:0x02a2, B:139:0x02b8, B:141:0x02de, B:144:0x02e8, B:147:0x02ee, B:148:0x02f6, B:125:0x0281), top: B:434:0x0200 }] */
    /* JADX WARN: Removed duplicated region for block: B:152:0x0328  */
    /* JADX WARN: Removed duplicated region for block: B:169:0x0397 A[Catch: all -> 0x03b9, Exception -> 0x03c1, TRY_LEAVE, TryCatch #49 {Exception -> 0x03c1, all -> 0x03b9, blocks: (B:164:0x037d, B:169:0x0397), top: B:430:0x037d }] */
    /* JADX WARN: Removed duplicated region for block: B:195:0x03ff  */
    /* JADX WARN: Removed duplicated region for block: B:204:0x0483  */
    /* JADX WARN: Removed duplicated region for block: B:216:0x04af A[Catch: all -> 0x047d, Exception -> 0x0480, TRY_ENTER, TRY_LEAVE, TryCatch #41 {Exception -> 0x0480, all -> 0x047d, blocks: (B:198:0x0464, B:208:0x0490, B:210:0x0496, B:216:0x04af), top: B:446:0x0464 }] */
    /* JADX WARN: Removed duplicated region for block: B:219:0x04b6 A[Catch: all -> 0x04e5, Exception -> 0x04ea, TRY_LEAVE, TryCatch #60 {Exception -> 0x04ea, all -> 0x04e5, blocks: (B:196:0x040c, B:206:0x0489, B:214:0x04a3, B:217:0x04b2, B:219:0x04b6, B:213:0x04a0, B:205:0x0485), top: B:408:0x040c }] */
    /* JADX WARN: Removed duplicated region for block: B:231:0x04d5  */
    /* JADX WARN: Removed duplicated region for block: B:350:0x0696  */
    /* JADX WARN: Removed duplicated region for block: B:352:0x069b  */
    /* JADX WARN: Removed duplicated region for block: B:354:0x06a0  */
    /* JADX WARN: Removed duplicated region for block: B:356:0x06a5  */
    /* JADX WARN: Removed duplicated region for block: B:358:0x06aa  */
    /* JADX WARN: Removed duplicated region for block: B:360:0x06af  */
    /* JADX WARN: Removed duplicated region for block: B:362:0x06b4  */
    /* JADX WARN: Removed duplicated region for block: B:364:0x06b9  */
    /* JADX WARN: Removed duplicated region for block: B:366:0x06be  */
    /* JADX WARN: Removed duplicated region for block: B:368:0x06c3  */
    /* JADX WARN: Removed duplicated region for block: B:376:0x06d2  */
    /* JADX WARN: Removed duplicated region for block: B:378:0x06d7  */
    /* JADX WARN: Removed duplicated region for block: B:380:0x06dc  */
    /* JADX WARN: Removed duplicated region for block: B:382:0x06e1  */
    /* JADX WARN: Removed duplicated region for block: B:384:0x06e6  */
    /* JADX WARN: Removed duplicated region for block: B:386:0x06eb  */
    /* JADX WARN: Removed duplicated region for block: B:388:0x06f0  */
    /* JADX WARN: Removed duplicated region for block: B:390:0x06f5  */
    /* JADX WARN: Removed duplicated region for block: B:392:0x06fa  */
    /* JADX WARN: Removed duplicated region for block: B:394:0x06ff  */
    /* JADX WARN: Removed duplicated region for block: B:396:0x0704  */
    /* JADX WARN: Removed duplicated region for block: B:410:0x019e A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:444:0x0364 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:446:0x0464 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:473:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:98:0x0226 A[Catch: all -> 0x0207, Exception -> 0x020e, TRY_ENTER, TRY_LEAVE, TryCatch #47 {Exception -> 0x020e, all -> 0x0207, blocks: (B:85:0x0200, B:98:0x0226, B:115:0x025a, B:122:0x027c, B:126:0x0283, B:133:0x02a2, B:139:0x02b8, B:141:0x02de, B:144:0x02e8, B:147:0x02ee, B:148:0x02f6, B:125:0x0281), top: B:434:0x0200 }] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void putDialogsInternal(TLRPC$messages_Dialogs tLRPC$messages_Dialogs, int i) {
        Throwable th;
        SQLitePreparedStatement sQLitePreparedStatement;
        SQLitePreparedStatement sQLitePreparedStatement2;
        SQLitePreparedStatement sQLitePreparedStatement3;
        Throwable th2;
        SQLitePreparedStatement sQLitePreparedStatement4;
        SQLitePreparedStatement sQLitePreparedStatement5;
        SQLitePreparedStatement sQLitePreparedStatement6;
        SQLitePreparedStatement sQLitePreparedStatement7;
        SQLitePreparedStatement sQLitePreparedStatement8;
        SQLitePreparedStatement sQLitePreparedStatement9;
        SQLitePreparedStatement sQLitePreparedStatement10;
        SQLitePreparedStatement sQLitePreparedStatement11;
        SQLitePreparedStatement sQLitePreparedStatement12;
        SQLiteCursor sQLiteCursor;
        SQLiteDatabase sQLiteDatabase;
        SQLiteCursor sQLiteCursor2;
        SQLiteDatabase sQLiteDatabase2;
        SQLitePreparedStatement sQLitePreparedStatement13;
        TLRPC$messages_Dialogs tLRPC$messages_Dialogs2;
        Throwable th3;
        Throwable e;
        SQLitePreparedStatement executeFast;
        SQLitePreparedStatement sQLitePreparedStatement14;
        SQLitePreparedStatement sQLitePreparedStatement15;
        SQLitePreparedStatement sQLitePreparedStatement16;
        Object obj;
        Object obj2;
        SQLitePreparedStatement sQLitePreparedStatement17;
        boolean z;
        int i2;
        LongSparseArray longSparseArray;
        TLRPC$Message tLRPC$Message;
        LongSparseArray longSparseArray2;
        int i3;
        int i4;
        int i5;
        NativeByteBuffer nativeByteBuffer;
        TLRPC$TL_messageReplyHeader tLRPC$TL_messageReplyHeader;
        TLRPC$Dialog tLRPC$Dialog;
        int i6;
        int i7;
        NativeByteBuffer nativeByteBuffer2;
        boolean z2;
        TLRPC$messages_Dialogs tLRPC$messages_Dialogs3 = tLRPC$messages_Dialogs;
        int i8 = i;
        try {
            this.database.beginTransaction();
            LongSparseArray longSparseArray3 = new LongSparseArray(tLRPC$messages_Dialogs3.messages.size());
            for (int i9 = 0; i9 < tLRPC$messages_Dialogs3.messages.size(); i9++) {
                try {
                    TLRPC$Message tLRPC$Message2 = tLRPC$messages_Dialogs3.messages.get(i9);
                    long dialogId = MessageObject.getDialogId(tLRPC$Message2);
                    if (!longSparseArray3.containsKey(dialogId) || (longSparseArray3.get(dialogId) != null && ((TLRPC$Message) longSparseArray3.get(dialogId)).date < tLRPC$Message2.date)) {
                        longSparseArray3.put(dialogId, tLRPC$Message2);
                    }
                } catch (Exception e2) {
                    th2 = e2;
                    sQLitePreparedStatement = null;
                    sQLitePreparedStatement2 = null;
                    sQLitePreparedStatement3 = null;
                    sQLiteCursor2 = 0;
                    sQLitePreparedStatement6 = null;
                    sQLitePreparedStatement5 = null;
                    sQLitePreparedStatement4 = null;
                    sQLitePreparedStatement8 = null;
                    sQLitePreparedStatement9 = null;
                    try {
                        checkSQLException(th2);
                        sQLiteDatabase2 = this.database;
                        if (sQLiteDatabase2 != null) {
                        }
                        if (sQLiteCursor2 != 0) {
                        }
                        if (sQLitePreparedStatement3 != null) {
                        }
                        if (sQLitePreparedStatement5 != null) {
                        }
                        if (sQLitePreparedStatement6 != null) {
                        }
                        if (sQLitePreparedStatement9 != null) {
                        }
                        if (sQLitePreparedStatement4 != null) {
                        }
                        if (sQLitePreparedStatement4 != null) {
                        }
                        if (sQLitePreparedStatement8 != null) {
                        }
                        if (sQLitePreparedStatement2 != null) {
                        }
                        if (sQLitePreparedStatement == null) {
                        }
                        sQLitePreparedStatement.dispose();
                    } catch (Throwable th4) {
                        th = th4;
                        sQLiteCursor = sQLiteCursor2;
                        sQLiteDatabase = this.database;
                        if (sQLiteDatabase != null) {
                            sQLiteDatabase.commitTransaction();
                        }
                        if (sQLiteCursor != 0) {
                            sQLiteCursor.dispose();
                        }
                        if (sQLitePreparedStatement3 != null) {
                            sQLitePreparedStatement3.dispose();
                        }
                        if (sQLitePreparedStatement5 != null) {
                            sQLitePreparedStatement5.dispose();
                        }
                        if (sQLitePreparedStatement6 != null) {
                            sQLitePreparedStatement6.dispose();
                        }
                        if (sQLitePreparedStatement9 != null) {
                            sQLitePreparedStatement9.dispose();
                        }
                        if (sQLitePreparedStatement4 != null) {
                            sQLitePreparedStatement4.dispose();
                        }
                        if (sQLitePreparedStatement4 != null) {
                            sQLitePreparedStatement4.dispose();
                        }
                        if (sQLitePreparedStatement8 != null) {
                            sQLitePreparedStatement8.dispose();
                        }
                        if (sQLitePreparedStatement2 != null) {
                            sQLitePreparedStatement2.dispose();
                        }
                        if (sQLitePreparedStatement != null) {
                            sQLitePreparedStatement.dispose();
                        }
                        throw th;
                    }
                } catch (Throwable th5) {
                    th = th5;
                    sQLitePreparedStatement = null;
                    sQLitePreparedStatement2 = null;
                    sQLitePreparedStatement3 = null;
                    sQLiteCursor = 0;
                    sQLitePreparedStatement6 = null;
                    sQLitePreparedStatement5 = null;
                    sQLitePreparedStatement4 = null;
                    sQLitePreparedStatement8 = null;
                    sQLitePreparedStatement9 = null;
                    sQLiteDatabase = this.database;
                    if (sQLiteDatabase != null) {
                    }
                    if (sQLiteCursor != 0) {
                    }
                    if (sQLitePreparedStatement3 != null) {
                    }
                    if (sQLitePreparedStatement5 != null) {
                    }
                    if (sQLitePreparedStatement6 != null) {
                    }
                    if (sQLitePreparedStatement9 != null) {
                    }
                    if (sQLitePreparedStatement4 != null) {
                    }
                    if (sQLitePreparedStatement4 != null) {
                    }
                    if (sQLitePreparedStatement8 != null) {
                    }
                    if (sQLitePreparedStatement2 != null) {
                    }
                    if (sQLitePreparedStatement != null) {
                    }
                    throw th;
                }
            }
            if (tLRPC$messages_Dialogs3.dialogs.isEmpty()) {
                sQLitePreparedStatement13 = null;
                tLRPC$messages_Dialogs2 = tLRPC$messages_Dialogs;
                sQLitePreparedStatement = null;
                sQLitePreparedStatement2 = null;
            } else {
                SQLitePreparedStatement executeFast2 = this.database.executeFast("REPLACE INTO messages_v2 VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, NULL, ?, ?, ?, ?, ?, ?, 0, NULL, ?)");
                try {
                    sQLitePreparedStatement5 = this.database.executeFast("REPLACE INTO dialogs VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
                    try {
                        SQLitePreparedStatement executeFast3 = this.database.executeFast("REPLACE INTO media_v4 VALUES(?, ?, ?, ?, ?)");
                        try {
                            executeFast = this.database.executeFast("REPLACE INTO dialog_settings VALUES(?, ?)");
                            try {
                                sQLitePreparedStatement4 = this.database.executeFast("REPLACE INTO messages_holes VALUES(?, ?, ?)");
                            } catch (Exception e3) {
                                sQLitePreparedStatement15 = executeFast;
                                sQLitePreparedStatement3 = executeFast2;
                                sQLitePreparedStatement6 = executeFast3;
                                th2 = e3;
                                sQLitePreparedStatement = null;
                                sQLitePreparedStatement2 = null;
                                sQLitePreparedStatement4 = null;
                                sQLitePreparedStatement8 = null;
                            } catch (Throwable th6) {
                                sQLitePreparedStatement14 = executeFast;
                                sQLitePreparedStatement3 = executeFast2;
                                sQLitePreparedStatement6 = executeFast3;
                                th = th6;
                                sQLitePreparedStatement = null;
                                sQLitePreparedStatement2 = null;
                                sQLitePreparedStatement4 = null;
                                sQLitePreparedStatement8 = null;
                            }
                        } catch (Exception e4) {
                            sQLitePreparedStatement3 = executeFast2;
                            sQLitePreparedStatement6 = executeFast3;
                            th2 = e4;
                            sQLitePreparedStatement = null;
                            sQLitePreparedStatement2 = null;
                            sQLitePreparedStatement11 = null;
                            sQLitePreparedStatement4 = null;
                            sQLitePreparedStatement8 = sQLitePreparedStatement4;
                            sQLitePreparedStatement9 = sQLitePreparedStatement8;
                            sQLiteCursor2 = sQLitePreparedStatement11;
                            checkSQLException(th2);
                            sQLiteDatabase2 = this.database;
                            if (sQLiteDatabase2 != null) {
                            }
                            if (sQLiteCursor2 != 0) {
                            }
                            if (sQLitePreparedStatement3 != null) {
                            }
                            if (sQLitePreparedStatement5 != null) {
                            }
                            if (sQLitePreparedStatement6 != null) {
                            }
                            if (sQLitePreparedStatement9 != null) {
                            }
                            if (sQLitePreparedStatement4 != null) {
                            }
                            if (sQLitePreparedStatement4 != null) {
                            }
                            if (sQLitePreparedStatement8 != null) {
                            }
                            if (sQLitePreparedStatement2 != null) {
                            }
                            if (sQLitePreparedStatement == null) {
                            }
                            sQLitePreparedStatement.dispose();
                        } catch (Throwable th7) {
                            sQLitePreparedStatement3 = executeFast2;
                            sQLitePreparedStatement6 = executeFast3;
                            th = th7;
                            sQLitePreparedStatement = null;
                            sQLitePreparedStatement2 = null;
                            sQLitePreparedStatement7 = null;
                            sQLitePreparedStatement4 = null;
                            sQLitePreparedStatement8 = sQLitePreparedStatement4;
                            sQLitePreparedStatement9 = sQLitePreparedStatement8;
                            sQLiteCursor = sQLitePreparedStatement7;
                            sQLiteDatabase = this.database;
                            if (sQLiteDatabase != null) {
                            }
                            if (sQLiteCursor != 0) {
                            }
                            if (sQLitePreparedStatement3 != null) {
                            }
                            if (sQLitePreparedStatement5 != null) {
                            }
                            if (sQLitePreparedStatement6 != null) {
                            }
                            if (sQLitePreparedStatement9 != null) {
                            }
                            if (sQLitePreparedStatement4 != null) {
                            }
                            if (sQLitePreparedStatement4 != null) {
                            }
                            if (sQLitePreparedStatement8 != null) {
                            }
                            if (sQLitePreparedStatement2 != null) {
                            }
                            if (sQLitePreparedStatement != null) {
                            }
                            throw th;
                        }
                        try {
                            sQLitePreparedStatement8 = this.database.executeFast("REPLACE INTO media_holes_v2 VALUES(?, ?, ?, ?)");
                            int i10 = ConnectionsManager.DEFAULT_DATACENTER_ID;
                            sQLitePreparedStatement = null;
                            sQLitePreparedStatement2 = null;
                            int i11 = 0;
                            while (true) {
                                try {
                                    LongSparseArray longSparseArray4 = longSparseArray3;
                                    if (i11 >= tLRPC$messages_Dialogs3.dialogs.size()) {
                                        break;
                                    }
                                    try {
                                        TLRPC$Dialog tLRPC$Dialog2 = tLRPC$messages_Dialogs3.dialogs.get(i11);
                                        DialogObject.initDialog(tLRPC$Dialog2);
                                        SQLitePreparedStatement sQLitePreparedStatement18 = executeFast2;
                                        try {
                                            this.unknownDialogsIds.remove(tLRPC$Dialog2.id);
                                            if (i8 == 1) {
                                                try {
                                                    SQLiteCursor queryFinalized = this.database.queryFinalized("SELECT did FROM dialogs WHERE did = " + tLRPC$Dialog2.id, new Object[0]);
                                                    try {
                                                        boolean next = queryFinalized.next();
                                                        queryFinalized.dispose();
                                                        if (!next) {
                                                            z = next;
                                                            tLRPC$Message = (TLRPC$Message) longSparseArray4.get(tLRPC$Dialog2.id);
                                                            if (tLRPC$Message == null) {
                                                                try {
                                                                    int i12 = i11;
                                                                    int max = Math.max(tLRPC$Message.date, 0);
                                                                    if (isValidKeyboardToSave(tLRPC$Message)) {
                                                                        longSparseArray2 = longSparseArray4;
                                                                        getMediaDataController().putBotKeyboard(tLRPC$Dialog2.id, tLRPC$Message);
                                                                    } else {
                                                                        longSparseArray2 = longSparseArray4;
                                                                    }
                                                                    fixUnsupportedMedia(tLRPC$Message);
                                                                    NativeByteBuffer nativeByteBuffer3 = new NativeByteBuffer(tLRPC$Message.getObjectSize());
                                                                    tLRPC$Message.serializeToStream(nativeByteBuffer3);
                                                                    sQLitePreparedStatement18.requery();
                                                                    SQLitePreparedStatement sQLitePreparedStatement19 = executeFast;
                                                                    try {
                                                                        sQLitePreparedStatement18.bindInteger(1, tLRPC$Message.id);
                                                                        sQLitePreparedStatement18.bindLong(2, tLRPC$Dialog2.id);
                                                                        sQLitePreparedStatement3 = sQLitePreparedStatement18;
                                                                        LongSparseArray longSparseArray5 = longSparseArray2;
                                                                        try {
                                                                            sQLitePreparedStatement3.bindInteger(3, MessageObject.getUnreadFlags(tLRPC$Message));
                                                                            sQLitePreparedStatement3.bindInteger(4, tLRPC$Message.send_state);
                                                                            sQLitePreparedStatement3.bindInteger(5, tLRPC$Message.date);
                                                                            sQLitePreparedStatement3.bindByteBuffer(6, nativeByteBuffer3);
                                                                            try {
                                                                                if (!MessageObject.isOut(tLRPC$Message)) {
                                                                                    try {
                                                                                        if (!tLRPC$Message.from_scheduled) {
                                                                                            i3 = 0;
                                                                                            sQLitePreparedStatement3.bindInteger(7, i3);
                                                                                            sQLitePreparedStatement3.bindInteger(8, 0);
                                                                                            if ((tLRPC$Message.flags & 1024) == 0) {
                                                                                                i5 = tLRPC$Message.views;
                                                                                                i4 = 9;
                                                                                            } else {
                                                                                                i4 = 9;
                                                                                                i5 = 0;
                                                                                            }
                                                                                            sQLitePreparedStatement3.bindInteger(i4, i5);
                                                                                            int i13 = tLRPC$Message.stickerVerified;
                                                                                            sQLitePreparedStatement3.bindInteger(10, i13 != 0 ? 1 : i13 == 2 ? 2 : 0);
                                                                                            sQLitePreparedStatement3.bindInteger(11, !tLRPC$Message.mentioned ? 1 : 0);
                                                                                            sQLitePreparedStatement3.bindInteger(12, tLRPC$Message.forwards);
                                                                                            if (tLRPC$Message.replies == null) {
                                                                                                nativeByteBuffer = new NativeByteBuffer(tLRPC$Message.replies.getObjectSize());
                                                                                                tLRPC$Message.replies.serializeToStream(nativeByteBuffer);
                                                                                                sQLitePreparedStatement3.bindByteBuffer(13, nativeByteBuffer);
                                                                                            } else {
                                                                                                sQLitePreparedStatement3.bindNull(13);
                                                                                                nativeByteBuffer = null;
                                                                                            }
                                                                                            tLRPC$TL_messageReplyHeader = tLRPC$Message.reply_to;
                                                                                            if (tLRPC$TL_messageReplyHeader == null) {
                                                                                                longSparseArray = longSparseArray5;
                                                                                                int i14 = tLRPC$TL_messageReplyHeader.reply_to_top_id;
                                                                                                if (i14 == 0) {
                                                                                                    i14 = tLRPC$TL_messageReplyHeader.reply_to_msg_id;
                                                                                                }
                                                                                                sQLitePreparedStatement3.bindInteger(14, i14);
                                                                                            } else {
                                                                                                longSparseArray = longSparseArray5;
                                                                                                sQLitePreparedStatement3.bindInteger(14, 0);
                                                                                            }
                                                                                            sQLitePreparedStatement3.bindLong(15, MessageObject.getChannelId(tLRPC$Message));
                                                                                            if ((tLRPC$Message.flags & 131072) == 0) {
                                                                                                sQLitePreparedStatement3.bindLong(16, tLRPC$Message.grouped_id);
                                                                                            } else {
                                                                                                sQLitePreparedStatement3.bindNull(16);
                                                                                            }
                                                                                            sQLitePreparedStatement3.step();
                                                                                            if (MediaDataController.canAddMessageToMedia(tLRPC$Message)) {
                                                                                                executeFast3.requery();
                                                                                                executeFast3.bindInteger(1, tLRPC$Message.id);
                                                                                                executeFast3.bindLong(2, tLRPC$Dialog2.id);
                                                                                                executeFast3.bindInteger(3, tLRPC$Message.date);
                                                                                                executeFast3.bindInteger(4, MediaDataController.getMediaType(tLRPC$Message));
                                                                                                executeFast3.bindByteBuffer(5, nativeByteBuffer3);
                                                                                                executeFast3.step();
                                                                                            }
                                                                                            if (nativeByteBuffer != null) {
                                                                                                nativeByteBuffer.reuse();
                                                                                            }
                                                                                            nativeByteBuffer3.reuse();
                                                                                            if (tLRPC$Message.ttl_period != 0 && tLRPC$Message.id > 0) {
                                                                                                if (sQLitePreparedStatement == null) {
                                                                                                    sQLitePreparedStatement = this.database.executeFast("REPLACE INTO enc_tasks_v4 VALUES(?, ?, ?, ?)");
                                                                                                }
                                                                                                sQLitePreparedStatement.requery();
                                                                                                sQLitePreparedStatement.bindInteger(1, tLRPC$Message.id);
                                                                                                sQLitePreparedStatement.bindLong(2, tLRPC$Message.dialog_id);
                                                                                                sQLitePreparedStatement.bindInteger(3, tLRPC$Message.date + tLRPC$Message.ttl_period);
                                                                                                sQLitePreparedStatement.bindInteger(4, 0);
                                                                                                sQLitePreparedStatement.step();
                                                                                                i10 = Math.min(i10, tLRPC$Message.date + tLRPC$Message.ttl_period);
                                                                                            }
                                                                                            int i15 = i10;
                                                                                            SQLitePreparedStatement sQLitePreparedStatement20 = sQLitePreparedStatement;
                                                                                            if (tLRPC$Message.media instanceof TLRPC$TL_messageMediaPoll) {
                                                                                                if (sQLitePreparedStatement2 == null) {
                                                                                                    try {
                                                                                                        sQLitePreparedStatement2 = this.database.executeFast("REPLACE INTO polls_v2 VALUES(?, ?, ?)");
                                                                                                    } catch (Exception e5) {
                                                                                                        th2 = e5;
                                                                                                        sQLitePreparedStatement6 = executeFast3;
                                                                                                        sQLitePreparedStatement9 = sQLitePreparedStatement19;
                                                                                                        sQLitePreparedStatement = sQLitePreparedStatement20;
                                                                                                        sQLiteCursor2 = 0;
                                                                                                        checkSQLException(th2);
                                                                                                        sQLiteDatabase2 = this.database;
                                                                                                        if (sQLiteDatabase2 != null) {
                                                                                                        }
                                                                                                        if (sQLiteCursor2 != 0) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement3 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement5 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement6 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement9 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement4 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement4 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement8 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement2 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement == null) {
                                                                                                        }
                                                                                                        sQLitePreparedStatement.dispose();
                                                                                                    } catch (Throwable th8) {
                                                                                                        th = th8;
                                                                                                        sQLitePreparedStatement6 = executeFast3;
                                                                                                        sQLitePreparedStatement9 = sQLitePreparedStatement19;
                                                                                                        sQLitePreparedStatement = sQLitePreparedStatement20;
                                                                                                        sQLiteCursor = 0;
                                                                                                        sQLiteDatabase = this.database;
                                                                                                        if (sQLiteDatabase != null) {
                                                                                                        }
                                                                                                        if (sQLiteCursor != 0) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement3 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement5 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement6 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement9 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement4 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement4 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement8 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement2 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement != null) {
                                                                                                        }
                                                                                                        throw th;
                                                                                                    }
                                                                                                }
                                                                                                sQLitePreparedStatement2.requery();
                                                                                                sQLitePreparedStatement2.bindInteger(1, tLRPC$Message.id);
                                                                                                sQLitePreparedStatement2.bindLong(2, tLRPC$Message.dialog_id);
                                                                                                sQLitePreparedStatement2.bindLong(3, ((TLRPC$TL_messageMediaPoll) tLRPC$Message.media).poll.id);
                                                                                                sQLitePreparedStatement2.step();
                                                                                            }
                                                                                            SQLitePreparedStatement sQLitePreparedStatement21 = sQLitePreparedStatement2;
                                                                                            if (!z) {
                                                                                                try {
                                                                                                    long j = tLRPC$Dialog2.id;
                                                                                                    int i16 = tLRPC$Message.id;
                                                                                                    tLRPC$Dialog = tLRPC$Dialog2;
                                                                                                    i2 = i12;
                                                                                                    sQLitePreparedStatement9 = sQLitePreparedStatement19;
                                                                                                    i6 = 15;
                                                                                                    sQLitePreparedStatement6 = executeFast3;
                                                                                                    try {
                                                                                                        closeHolesInTable("messages_holes", j, i16, i16, 0);
                                                                                                        long j2 = tLRPC$Dialog.id;
                                                                                                        int i17 = tLRPC$Message.id;
                                                                                                        closeHolesInMedia(j2, i17, i17, -1, 0);
                                                                                                    } catch (Exception e6) {
                                                                                                        e = e6;
                                                                                                        th2 = e;
                                                                                                        sQLitePreparedStatement = sQLitePreparedStatement20;
                                                                                                        sQLitePreparedStatement2 = sQLitePreparedStatement21;
                                                                                                        sQLiteCursor2 = 0;
                                                                                                        checkSQLException(th2);
                                                                                                        sQLiteDatabase2 = this.database;
                                                                                                        if (sQLiteDatabase2 != null) {
                                                                                                        }
                                                                                                        if (sQLiteCursor2 != 0) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement3 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement5 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement6 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement9 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement4 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement4 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement8 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement2 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement == null) {
                                                                                                        }
                                                                                                        sQLitePreparedStatement.dispose();
                                                                                                    } catch (Throwable th9) {
                                                                                                        th = th9;
                                                                                                        th = th;
                                                                                                        sQLitePreparedStatement = sQLitePreparedStatement20;
                                                                                                        sQLitePreparedStatement2 = sQLitePreparedStatement21;
                                                                                                        sQLiteCursor = 0;
                                                                                                        sQLiteDatabase = this.database;
                                                                                                        if (sQLiteDatabase != null) {
                                                                                                        }
                                                                                                        if (sQLiteCursor != 0) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement3 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement5 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement6 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement9 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement4 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement4 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement8 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement2 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement != null) {
                                                                                                        }
                                                                                                        throw th;
                                                                                                    }
                                                                                                } catch (Exception e7) {
                                                                                                    e = e7;
                                                                                                    sQLitePreparedStatement6 = executeFast3;
                                                                                                    sQLitePreparedStatement9 = sQLitePreparedStatement19;
                                                                                                } catch (Throwable th10) {
                                                                                                    th = th10;
                                                                                                    sQLitePreparedStatement6 = executeFast3;
                                                                                                    sQLitePreparedStatement9 = sQLitePreparedStatement19;
                                                                                                }
                                                                                            } else {
                                                                                                tLRPC$Dialog = tLRPC$Dialog2;
                                                                                                sQLitePreparedStatement6 = executeFast3;
                                                                                                i2 = i12;
                                                                                                sQLitePreparedStatement9 = sQLitePreparedStatement19;
                                                                                                i6 = 15;
                                                                                                createFirstHoles(tLRPC$Dialog.id, sQLitePreparedStatement4, sQLitePreparedStatement8, tLRPC$Message.id, 0);
                                                                                            }
                                                                                            i10 = i15;
                                                                                            i7 = max;
                                                                                            sQLitePreparedStatement = sQLitePreparedStatement20;
                                                                                            sQLitePreparedStatement2 = sQLitePreparedStatement21;
                                                                                        }
                                                                                    } catch (Exception e8) {
                                                                                        th2 = e8;
                                                                                        sQLitePreparedStatement6 = executeFast3;
                                                                                        sQLitePreparedStatement9 = sQLitePreparedStatement19;
                                                                                        sQLiteCursor2 = 0;
                                                                                        checkSQLException(th2);
                                                                                        sQLiteDatabase2 = this.database;
                                                                                        if (sQLiteDatabase2 != null) {
                                                                                        }
                                                                                        if (sQLiteCursor2 != 0) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement3 != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement5 != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement6 != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement9 != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement4 != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement4 != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement8 != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement2 != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement == null) {
                                                                                        }
                                                                                        sQLitePreparedStatement.dispose();
                                                                                    } catch (Throwable th11) {
                                                                                        th = th11;
                                                                                        sQLitePreparedStatement6 = executeFast3;
                                                                                        sQLitePreparedStatement9 = sQLitePreparedStatement19;
                                                                                        sQLiteCursor = 0;
                                                                                        sQLiteDatabase = this.database;
                                                                                        if (sQLiteDatabase != null) {
                                                                                        }
                                                                                        if (sQLiteCursor != 0) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement3 != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement5 != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement6 != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement9 != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement4 != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement4 != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement8 != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement2 != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement != null) {
                                                                                        }
                                                                                        throw th;
                                                                                    }
                                                                                }
                                                                                if (tLRPC$Message.media instanceof TLRPC$TL_messageMediaPoll) {
                                                                                }
                                                                                SQLitePreparedStatement sQLitePreparedStatement212 = sQLitePreparedStatement2;
                                                                                if (!z) {
                                                                                }
                                                                                i10 = i15;
                                                                                i7 = max;
                                                                                sQLitePreparedStatement = sQLitePreparedStatement20;
                                                                                sQLitePreparedStatement2 = sQLitePreparedStatement212;
                                                                            } catch (Exception e9) {
                                                                                sQLitePreparedStatement6 = executeFast3;
                                                                                sQLitePreparedStatement9 = sQLitePreparedStatement19;
                                                                                th2 = e9;
                                                                            } catch (Throwable th12) {
                                                                                sQLitePreparedStatement6 = executeFast3;
                                                                                sQLitePreparedStatement9 = sQLitePreparedStatement19;
                                                                                th = th12;
                                                                            }
                                                                            i3 = 1;
                                                                            sQLitePreparedStatement3.bindInteger(7, i3);
                                                                            sQLitePreparedStatement3.bindInteger(8, 0);
                                                                            if ((tLRPC$Message.flags & 1024) == 0) {
                                                                            }
                                                                            sQLitePreparedStatement3.bindInteger(i4, i5);
                                                                            int i132 = tLRPC$Message.stickerVerified;
                                                                            sQLitePreparedStatement3.bindInteger(10, i132 != 0 ? 1 : i132 == 2 ? 2 : 0);
                                                                            sQLitePreparedStatement3.bindInteger(11, !tLRPC$Message.mentioned ? 1 : 0);
                                                                            sQLitePreparedStatement3.bindInteger(12, tLRPC$Message.forwards);
                                                                            if (tLRPC$Message.replies == null) {
                                                                            }
                                                                            tLRPC$TL_messageReplyHeader = tLRPC$Message.reply_to;
                                                                            if (tLRPC$TL_messageReplyHeader == null) {
                                                                            }
                                                                            sQLitePreparedStatement3.bindLong(15, MessageObject.getChannelId(tLRPC$Message));
                                                                            if ((tLRPC$Message.flags & 131072) == 0) {
                                                                            }
                                                                            sQLitePreparedStatement3.step();
                                                                            if (MediaDataController.canAddMessageToMedia(tLRPC$Message)) {
                                                                            }
                                                                            if (nativeByteBuffer != null) {
                                                                            }
                                                                            nativeByteBuffer3.reuse();
                                                                            if (tLRPC$Message.ttl_period != 0) {
                                                                                if (sQLitePreparedStatement == null) {
                                                                                }
                                                                                sQLitePreparedStatement.requery();
                                                                                sQLitePreparedStatement.bindInteger(1, tLRPC$Message.id);
                                                                                sQLitePreparedStatement.bindLong(2, tLRPC$Message.dialog_id);
                                                                                sQLitePreparedStatement.bindInteger(3, tLRPC$Message.date + tLRPC$Message.ttl_period);
                                                                                sQLitePreparedStatement.bindInteger(4, 0);
                                                                                sQLitePreparedStatement.step();
                                                                                i10 = Math.min(i10, tLRPC$Message.date + tLRPC$Message.ttl_period);
                                                                            }
                                                                            int i152 = i10;
                                                                            SQLitePreparedStatement sQLitePreparedStatement202 = sQLitePreparedStatement;
                                                                        } catch (Exception e10) {
                                                                            e = e10;
                                                                            sQLitePreparedStatement6 = executeFast3;
                                                                            sQLitePreparedStatement9 = sQLitePreparedStatement19;
                                                                            th2 = e;
                                                                            sQLiteCursor2 = 0;
                                                                            checkSQLException(th2);
                                                                            sQLiteDatabase2 = this.database;
                                                                            if (sQLiteDatabase2 != null) {
                                                                            }
                                                                            if (sQLiteCursor2 != 0) {
                                                                            }
                                                                            if (sQLitePreparedStatement3 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement5 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement6 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement9 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement4 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement4 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement8 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement2 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement == null) {
                                                                            }
                                                                            sQLitePreparedStatement.dispose();
                                                                        } catch (Throwable th13) {
                                                                            th = th13;
                                                                            sQLitePreparedStatement6 = executeFast3;
                                                                            sQLitePreparedStatement9 = sQLitePreparedStatement19;
                                                                            th = th;
                                                                            sQLiteCursor = 0;
                                                                            sQLiteDatabase = this.database;
                                                                            if (sQLiteDatabase != null) {
                                                                            }
                                                                            if (sQLiteCursor != 0) {
                                                                            }
                                                                            if (sQLitePreparedStatement3 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement5 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement6 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement9 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement4 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement4 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement8 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement2 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement != null) {
                                                                            }
                                                                            throw th;
                                                                        }
                                                                    } catch (Exception e11) {
                                                                        e = e11;
                                                                        sQLitePreparedStatement6 = executeFast3;
                                                                        sQLitePreparedStatement3 = sQLitePreparedStatement18;
                                                                    } catch (Throwable th14) {
                                                                        th = th14;
                                                                        sQLitePreparedStatement6 = executeFast3;
                                                                        sQLitePreparedStatement3 = sQLitePreparedStatement18;
                                                                    }
                                                                } catch (Exception e12) {
                                                                    e = e12;
                                                                    sQLitePreparedStatement9 = executeFast;
                                                                    sQLitePreparedStatement6 = executeFast3;
                                                                    sQLitePreparedStatement3 = sQLitePreparedStatement18;
                                                                } catch (Throwable th15) {
                                                                    th = th15;
                                                                    sQLitePreparedStatement9 = executeFast;
                                                                    sQLitePreparedStatement6 = executeFast3;
                                                                    sQLitePreparedStatement3 = sQLitePreparedStatement18;
                                                                }
                                                            } else {
                                                                tLRPC$Dialog = tLRPC$Dialog2;
                                                                i2 = i11;
                                                                sQLitePreparedStatement9 = executeFast;
                                                                sQLitePreparedStatement6 = executeFast3;
                                                                sQLitePreparedStatement3 = sQLitePreparedStatement18;
                                                                longSparseArray = longSparseArray4;
                                                                i6 = 15;
                                                                i7 = 0;
                                                            }
                                                            try {
                                                                sQLitePreparedStatement5.requery();
                                                                sQLitePreparedStatement5.bindLong(1, tLRPC$Dialog.id);
                                                                sQLitePreparedStatement5.bindInteger(2, i7);
                                                                sQLitePreparedStatement5.bindInteger(3, tLRPC$Dialog.unread_count);
                                                                sQLitePreparedStatement5.bindInteger(4, tLRPC$Dialog.top_message);
                                                                sQLitePreparedStatement5.bindInteger(5, tLRPC$Dialog.read_inbox_max_id);
                                                                sQLitePreparedStatement5.bindInteger(6, tLRPC$Dialog.read_outbox_max_id);
                                                                sQLitePreparedStatement5.bindLong(7, 0L);
                                                                sQLitePreparedStatement5.bindInteger(8, tLRPC$Dialog.unread_mentions_count);
                                                                sQLitePreparedStatement5.bindInteger(9, tLRPC$Dialog.pts);
                                                                sQLitePreparedStatement5.bindInteger(10, 0);
                                                                sQLitePreparedStatement5.bindInteger(11, tLRPC$Dialog.pinnedNum);
                                                                sQLitePreparedStatement5.bindInteger(12, tLRPC$Dialog.unread_mark ? 1 : 0);
                                                                sQLitePreparedStatement5.bindInteger(13, tLRPC$Dialog.folder_id);
                                                                if (!(tLRPC$Dialog instanceof TLRPC$TL_dialogFolder)) {
                                                                    try {
                                                                        TLRPC$TL_dialogFolder tLRPC$TL_dialogFolder = (TLRPC$TL_dialogFolder) tLRPC$Dialog;
                                                                        nativeByteBuffer2 = new NativeByteBuffer(tLRPC$TL_dialogFolder.folder.getObjectSize());
                                                                        tLRPC$TL_dialogFolder.folder.serializeToStream(nativeByteBuffer2);
                                                                        sQLitePreparedStatement5.bindByteBuffer(14, nativeByteBuffer2);
                                                                    } catch (Exception e13) {
                                                                        e = e13;
                                                                        th2 = e;
                                                                        sQLiteCursor2 = 0;
                                                                        checkSQLException(th2);
                                                                        sQLiteDatabase2 = this.database;
                                                                        if (sQLiteDatabase2 != null) {
                                                                        }
                                                                        if (sQLiteCursor2 != 0) {
                                                                        }
                                                                        if (sQLitePreparedStatement3 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement5 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement6 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement9 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement4 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement4 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement8 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement2 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement == null) {
                                                                        }
                                                                        sQLitePreparedStatement.dispose();
                                                                    } catch (Throwable th16) {
                                                                        th = th16;
                                                                        th = th;
                                                                        sQLiteCursor = 0;
                                                                        sQLiteDatabase = this.database;
                                                                        if (sQLiteDatabase != null) {
                                                                        }
                                                                        if (sQLiteCursor != 0) {
                                                                        }
                                                                        if (sQLitePreparedStatement3 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement5 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement6 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement9 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement4 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement4 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement8 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement2 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement != null) {
                                                                        }
                                                                        throw th;
                                                                    }
                                                                } else {
                                                                    sQLitePreparedStatement5.bindNull(14);
                                                                    nativeByteBuffer2 = null;
                                                                }
                                                                sQLitePreparedStatement5.bindInteger(i6, tLRPC$Dialog.unread_reactions_count);
                                                                if (tLRPC$Message == null && (tLRPC$Message.flags & 131072) != 0) {
                                                                    sQLitePreparedStatement5.bindLong(16, tLRPC$Message.grouped_id);
                                                                } else {
                                                                    sQLitePreparedStatement5.bindNull(16);
                                                                }
                                                                sQLitePreparedStatement5.bindInteger(17, tLRPC$Dialog.ttl_period);
                                                                sQLitePreparedStatement5.step();
                                                                if (nativeByteBuffer2 != null) {
                                                                    nativeByteBuffer2.reuse();
                                                                }
                                                                if (tLRPC$Dialog.notify_settings == null) {
                                                                    sQLitePreparedStatement9.requery();
                                                                    sQLitePreparedStatement17 = sQLitePreparedStatement9;
                                                                    int i18 = 1;
                                                                    try {
                                                                        sQLitePreparedStatement17.bindLong(1, tLRPC$Dialog.id);
                                                                        if (tLRPC$Dialog.notify_settings.mute_until == 0) {
                                                                            i18 = 0;
                                                                        }
                                                                        sQLitePreparedStatement17.bindInteger(2, i18);
                                                                        sQLitePreparedStatement17.step();
                                                                    } catch (Exception e14) {
                                                                        e = e14;
                                                                        th2 = e;
                                                                        sQLitePreparedStatement9 = sQLitePreparedStatement17;
                                                                        sQLiteCursor2 = 0;
                                                                        checkSQLException(th2);
                                                                        sQLiteDatabase2 = this.database;
                                                                        if (sQLiteDatabase2 != null) {
                                                                        }
                                                                        if (sQLiteCursor2 != 0) {
                                                                        }
                                                                        if (sQLitePreparedStatement3 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement5 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement6 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement9 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement4 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement4 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement8 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement2 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement == null) {
                                                                        }
                                                                        sQLitePreparedStatement.dispose();
                                                                    } catch (Throwable th17) {
                                                                        th = th17;
                                                                        th = th;
                                                                        sQLitePreparedStatement9 = sQLitePreparedStatement17;
                                                                        sQLiteCursor = 0;
                                                                        sQLiteDatabase = this.database;
                                                                        if (sQLiteDatabase != null) {
                                                                        }
                                                                        if (sQLiteCursor != 0) {
                                                                        }
                                                                        if (sQLitePreparedStatement3 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement5 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement6 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement9 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement4 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement4 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement8 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement2 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement != null) {
                                                                        }
                                                                        throw th;
                                                                    }
                                                                } else {
                                                                    sQLitePreparedStatement17 = sQLitePreparedStatement9;
                                                                }
                                                            } catch (Exception e15) {
                                                                e = e15;
                                                            } catch (Throwable th18) {
                                                                th = th18;
                                                            }
                                                        }
                                                        i2 = i11;
                                                        sQLitePreparedStatement17 = executeFast;
                                                        sQLitePreparedStatement6 = executeFast3;
                                                        sQLitePreparedStatement3 = sQLitePreparedStatement18;
                                                        longSparseArray = longSparseArray4;
                                                    } catch (Exception e16) {
                                                        th2 = e16;
                                                        sQLitePreparedStatement9 = executeFast;
                                                        sQLitePreparedStatement6 = executeFast3;
                                                        sQLitePreparedStatement3 = sQLitePreparedStatement18;
                                                        sQLiteCursor2 = queryFinalized;
                                                        checkSQLException(th2);
                                                        sQLiteDatabase2 = this.database;
                                                        if (sQLiteDatabase2 != null) {
                                                        }
                                                        if (sQLiteCursor2 != 0) {
                                                        }
                                                        if (sQLitePreparedStatement3 != null) {
                                                        }
                                                        if (sQLitePreparedStatement5 != null) {
                                                        }
                                                        if (sQLitePreparedStatement6 != null) {
                                                        }
                                                        if (sQLitePreparedStatement9 != null) {
                                                        }
                                                        if (sQLitePreparedStatement4 != null) {
                                                        }
                                                        if (sQLitePreparedStatement4 != null) {
                                                        }
                                                        if (sQLitePreparedStatement8 != null) {
                                                        }
                                                        if (sQLitePreparedStatement2 != null) {
                                                        }
                                                        if (sQLitePreparedStatement == null) {
                                                        }
                                                        sQLitePreparedStatement.dispose();
                                                    } catch (Throwable th19) {
                                                        th = th19;
                                                        sQLitePreparedStatement9 = executeFast;
                                                        sQLitePreparedStatement6 = executeFast3;
                                                        sQLitePreparedStatement3 = sQLitePreparedStatement18;
                                                        sQLiteCursor = queryFinalized;
                                                        sQLiteDatabase = this.database;
                                                        if (sQLiteDatabase != null) {
                                                        }
                                                        if (sQLiteCursor != 0) {
                                                        }
                                                        if (sQLitePreparedStatement3 != null) {
                                                        }
                                                        if (sQLitePreparedStatement5 != null) {
                                                        }
                                                        if (sQLitePreparedStatement6 != null) {
                                                        }
                                                        if (sQLitePreparedStatement9 != null) {
                                                        }
                                                        if (sQLitePreparedStatement4 != null) {
                                                        }
                                                        if (sQLitePreparedStatement4 != null) {
                                                        }
                                                        if (sQLitePreparedStatement8 != null) {
                                                        }
                                                        if (sQLitePreparedStatement2 != null) {
                                                        }
                                                        if (sQLitePreparedStatement != null) {
                                                        }
                                                        throw th;
                                                    }
                                                } catch (Exception e17) {
                                                    th2 = e17;
                                                    sQLitePreparedStatement9 = executeFast;
                                                    sQLitePreparedStatement6 = executeFast3;
                                                    sQLitePreparedStatement3 = sQLitePreparedStatement18;
                                                    sQLiteCursor2 = 0;
                                                    checkSQLException(th2);
                                                    sQLiteDatabase2 = this.database;
                                                    if (sQLiteDatabase2 != null) {
                                                    }
                                                    if (sQLiteCursor2 != 0) {
                                                    }
                                                    if (sQLitePreparedStatement3 != null) {
                                                    }
                                                    if (sQLitePreparedStatement5 != null) {
                                                    }
                                                    if (sQLitePreparedStatement6 != null) {
                                                    }
                                                    if (sQLitePreparedStatement9 != null) {
                                                    }
                                                    if (sQLitePreparedStatement4 != null) {
                                                    }
                                                    if (sQLitePreparedStatement4 != null) {
                                                    }
                                                    if (sQLitePreparedStatement8 != null) {
                                                    }
                                                    if (sQLitePreparedStatement2 != null) {
                                                    }
                                                    if (sQLitePreparedStatement == null) {
                                                    }
                                                    sQLitePreparedStatement.dispose();
                                                } catch (Throwable th20) {
                                                    th = th20;
                                                    sQLitePreparedStatement9 = executeFast;
                                                    sQLitePreparedStatement6 = executeFast3;
                                                    sQLitePreparedStatement3 = sQLitePreparedStatement18;
                                                    sQLiteCursor = 0;
                                                    sQLiteDatabase = this.database;
                                                    if (sQLiteDatabase != null) {
                                                    }
                                                    if (sQLiteCursor != 0) {
                                                    }
                                                    if (sQLitePreparedStatement3 != null) {
                                                    }
                                                    if (sQLitePreparedStatement5 != null) {
                                                    }
                                                    if (sQLitePreparedStatement6 != null) {
                                                    }
                                                    if (sQLitePreparedStatement9 != null) {
                                                    }
                                                    if (sQLitePreparedStatement4 != null) {
                                                    }
                                                    if (sQLitePreparedStatement4 != null) {
                                                    }
                                                    if (sQLitePreparedStatement8 != null) {
                                                    }
                                                    if (sQLitePreparedStatement2 != null) {
                                                    }
                                                    if (sQLitePreparedStatement != null) {
                                                    }
                                                    throw th;
                                                }
                                            } else {
                                                if (i8 == 2) {
                                                    SQLiteCursor queryFinalized2 = this.database.queryFinalized("SELECT pinned FROM dialogs WHERE did = " + tLRPC$Dialog2.id, new Object[0]);
                                                    if (queryFinalized2.next()) {
                                                        if (tLRPC$Dialog2.pinned) {
                                                            tLRPC$Dialog2.pinnedNum = queryFinalized2.intValue(0);
                                                        }
                                                        z2 = true;
                                                    } else {
                                                        z2 = false;
                                                    }
                                                    queryFinalized2.dispose();
                                                    z = z2;
                                                } else {
                                                    if (i8 == 3) {
                                                        SQLiteCursor queryFinalized3 = this.database.queryFinalized("SELECT last_mid FROM dialogs WHERE did = " + tLRPC$Dialog2.id, new Object[0]);
                                                        int intValue = queryFinalized3.next() ? queryFinalized3.intValue(0) : 0;
                                                        queryFinalized3.dispose();
                                                    }
                                                    z = false;
                                                }
                                                tLRPC$Message = (TLRPC$Message) longSparseArray4.get(tLRPC$Dialog2.id);
                                                if (tLRPC$Message == null) {
                                                }
                                                sQLitePreparedStatement5.requery();
                                                sQLitePreparedStatement5.bindLong(1, tLRPC$Dialog.id);
                                                sQLitePreparedStatement5.bindInteger(2, i7);
                                                sQLitePreparedStatement5.bindInteger(3, tLRPC$Dialog.unread_count);
                                                sQLitePreparedStatement5.bindInteger(4, tLRPC$Dialog.top_message);
                                                sQLitePreparedStatement5.bindInteger(5, tLRPC$Dialog.read_inbox_max_id);
                                                sQLitePreparedStatement5.bindInteger(6, tLRPC$Dialog.read_outbox_max_id);
                                                sQLitePreparedStatement5.bindLong(7, 0L);
                                                sQLitePreparedStatement5.bindInteger(8, tLRPC$Dialog.unread_mentions_count);
                                                sQLitePreparedStatement5.bindInteger(9, tLRPC$Dialog.pts);
                                                sQLitePreparedStatement5.bindInteger(10, 0);
                                                sQLitePreparedStatement5.bindInteger(11, tLRPC$Dialog.pinnedNum);
                                                sQLitePreparedStatement5.bindInteger(12, tLRPC$Dialog.unread_mark ? 1 : 0);
                                                sQLitePreparedStatement5.bindInteger(13, tLRPC$Dialog.folder_id);
                                                if (!(tLRPC$Dialog instanceof TLRPC$TL_dialogFolder)) {
                                                }
                                                sQLitePreparedStatement5.bindInteger(i6, tLRPC$Dialog.unread_reactions_count);
                                                if (tLRPC$Message == null) {
                                                }
                                                sQLitePreparedStatement5.bindNull(16);
                                                sQLitePreparedStatement5.bindInteger(17, tLRPC$Dialog.ttl_period);
                                                sQLitePreparedStatement5.step();
                                                if (nativeByteBuffer2 != null) {
                                                }
                                                if (tLRPC$Dialog.notify_settings == null) {
                                                }
                                            }
                                            tLRPC$messages_Dialogs3 = tLRPC$messages_Dialogs;
                                            i11 = i2 + 1;
                                            executeFast = sQLitePreparedStatement17;
                                            executeFast3 = sQLitePreparedStatement6;
                                            longSparseArray3 = longSparseArray;
                                            executeFast2 = sQLitePreparedStatement3;
                                            i8 = i;
                                        } catch (Exception e18) {
                                            e = e18;
                                            sQLitePreparedStatement17 = executeFast;
                                            sQLitePreparedStatement6 = executeFast3;
                                            sQLitePreparedStatement3 = sQLitePreparedStatement18;
                                        } catch (Throwable th21) {
                                            th = th21;
                                            sQLitePreparedStatement17 = executeFast;
                                            sQLitePreparedStatement6 = executeFast3;
                                            sQLitePreparedStatement3 = sQLitePreparedStatement18;
                                        }
                                    } catch (Exception e19) {
                                        e = e19;
                                        sQLitePreparedStatement17 = executeFast;
                                        sQLitePreparedStatement3 = executeFast2;
                                        sQLitePreparedStatement6 = executeFast3;
                                    } catch (Throwable th22) {
                                        th = th22;
                                        sQLitePreparedStatement17 = executeFast;
                                        sQLitePreparedStatement3 = executeFast2;
                                        sQLitePreparedStatement6 = executeFast3;
                                    }
                                } catch (Exception e20) {
                                    e = e20;
                                    sQLitePreparedStatement16 = executeFast;
                                    sQLitePreparedStatement3 = executeFast2;
                                    obj2 = null;
                                    sQLitePreparedStatement6 = executeFast3;
                                } catch (Throwable th23) {
                                    th = th23;
                                    sQLitePreparedStatement16 = executeFast;
                                    sQLitePreparedStatement3 = executeFast2;
                                    obj = null;
                                    sQLitePreparedStatement6 = executeFast3;
                                }
                            }
                            sQLitePreparedStatement16 = executeFast;
                            sQLitePreparedStatement3 = executeFast2;
                            sQLitePreparedStatement6 = executeFast3;
                            try {
                                sQLitePreparedStatement3.dispose();
                                try {
                                    sQLitePreparedStatement5.dispose();
                                    try {
                                        sQLitePreparedStatement6.dispose();
                                    } catch (Exception e21) {
                                        th2 = e21;
                                        sQLitePreparedStatement3 = null;
                                        sQLitePreparedStatement5 = null;
                                    } catch (Throwable th24) {
                                        th = th24;
                                        sQLitePreparedStatement3 = null;
                                        sQLitePreparedStatement5 = null;
                                    }
                                    try {
                                        sQLitePreparedStatement16.dispose();
                                        try {
                                            sQLitePreparedStatement4.dispose();
                                        } catch (Exception e22) {
                                            th2 = e22;
                                            sQLitePreparedStatement3 = null;
                                            sQLiteCursor2 = 0;
                                            sQLitePreparedStatement6 = null;
                                            sQLitePreparedStatement5 = null;
                                            sQLitePreparedStatement9 = null;
                                        } catch (Throwable th25) {
                                            th = th25;
                                            sQLitePreparedStatement3 = null;
                                            sQLiteCursor = 0;
                                            sQLitePreparedStatement6 = null;
                                            sQLitePreparedStatement5 = null;
                                            sQLitePreparedStatement9 = null;
                                        }
                                        try {
                                            sQLitePreparedStatement8.dispose();
                                            if (sQLitePreparedStatement != null) {
                                                try {
                                                    sQLitePreparedStatement.dispose();
                                                    sQLitePreparedStatement13 = null;
                                                    try {
                                                        getMessagesController().didAddedNewTask(i10, 0L, null);
                                                    } catch (Exception e23) {
                                                        e = e23;
                                                        th2 = e;
                                                        sQLitePreparedStatement3 = sQLitePreparedStatement13;
                                                        sQLitePreparedStatement12 = sQLitePreparedStatement3;
                                                        sQLitePreparedStatement6 = sQLitePreparedStatement12;
                                                        sQLitePreparedStatement5 = sQLitePreparedStatement6;
                                                        sQLitePreparedStatement4 = sQLitePreparedStatement5;
                                                        sQLitePreparedStatement11 = sQLitePreparedStatement12;
                                                        sQLitePreparedStatement8 = sQLitePreparedStatement4;
                                                        sQLitePreparedStatement9 = sQLitePreparedStatement8;
                                                        sQLiteCursor2 = sQLitePreparedStatement11;
                                                        checkSQLException(th2);
                                                        sQLiteDatabase2 = this.database;
                                                        if (sQLiteDatabase2 != null) {
                                                            sQLiteDatabase2.commitTransaction();
                                                        }
                                                        if (sQLiteCursor2 != 0) {
                                                            sQLiteCursor2.dispose();
                                                        }
                                                        if (sQLitePreparedStatement3 != null) {
                                                            sQLitePreparedStatement3.dispose();
                                                        }
                                                        if (sQLitePreparedStatement5 != null) {
                                                            sQLitePreparedStatement5.dispose();
                                                        }
                                                        if (sQLitePreparedStatement6 != null) {
                                                            sQLitePreparedStatement6.dispose();
                                                        }
                                                        if (sQLitePreparedStatement9 != null) {
                                                            sQLitePreparedStatement9.dispose();
                                                        }
                                                        if (sQLitePreparedStatement4 != null) {
                                                            sQLitePreparedStatement4.dispose();
                                                        }
                                                        if (sQLitePreparedStatement4 != null) {
                                                            sQLitePreparedStatement4.dispose();
                                                        }
                                                        if (sQLitePreparedStatement8 != null) {
                                                            sQLitePreparedStatement8.dispose();
                                                        }
                                                        if (sQLitePreparedStatement2 != null) {
                                                            sQLitePreparedStatement2.dispose();
                                                        }
                                                        if (sQLitePreparedStatement == null) {
                                                            return;
                                                        }
                                                        sQLitePreparedStatement.dispose();
                                                    } catch (Throwable th26) {
                                                        th3 = th26;
                                                        th = th3;
                                                        sQLitePreparedStatement3 = sQLitePreparedStatement13;
                                                        sQLitePreparedStatement10 = sQLitePreparedStatement3;
                                                        sQLitePreparedStatement6 = sQLitePreparedStatement10;
                                                        sQLitePreparedStatement5 = sQLitePreparedStatement6;
                                                        sQLitePreparedStatement4 = sQLitePreparedStatement5;
                                                        sQLitePreparedStatement7 = sQLitePreparedStatement10;
                                                        sQLitePreparedStatement8 = sQLitePreparedStatement4;
                                                        sQLitePreparedStatement9 = sQLitePreparedStatement8;
                                                        sQLiteCursor = sQLitePreparedStatement7;
                                                        sQLiteDatabase = this.database;
                                                        if (sQLiteDatabase != null) {
                                                        }
                                                        if (sQLiteCursor != 0) {
                                                        }
                                                        if (sQLitePreparedStatement3 != null) {
                                                        }
                                                        if (sQLitePreparedStatement5 != null) {
                                                        }
                                                        if (sQLitePreparedStatement6 != null) {
                                                        }
                                                        if (sQLitePreparedStatement9 != null) {
                                                        }
                                                        if (sQLitePreparedStatement4 != null) {
                                                        }
                                                        if (sQLitePreparedStatement4 != null) {
                                                        }
                                                        if (sQLitePreparedStatement8 != null) {
                                                        }
                                                        if (sQLitePreparedStatement2 != null) {
                                                        }
                                                        if (sQLitePreparedStatement != null) {
                                                        }
                                                        throw th;
                                                    }
                                                } catch (Exception e24) {
                                                    e = e24;
                                                    sQLitePreparedStatement13 = null;
                                                    th2 = e;
                                                    sQLitePreparedStatement3 = sQLitePreparedStatement13;
                                                    sQLitePreparedStatement12 = sQLitePreparedStatement3;
                                                    sQLitePreparedStatement6 = sQLitePreparedStatement12;
                                                    sQLitePreparedStatement5 = sQLitePreparedStatement6;
                                                    sQLitePreparedStatement4 = sQLitePreparedStatement5;
                                                    sQLitePreparedStatement11 = sQLitePreparedStatement12;
                                                    sQLitePreparedStatement8 = sQLitePreparedStatement4;
                                                    sQLitePreparedStatement9 = sQLitePreparedStatement8;
                                                    sQLiteCursor2 = sQLitePreparedStatement11;
                                                    checkSQLException(th2);
                                                    sQLiteDatabase2 = this.database;
                                                    if (sQLiteDatabase2 != null) {
                                                    }
                                                    if (sQLiteCursor2 != 0) {
                                                    }
                                                    if (sQLitePreparedStatement3 != null) {
                                                    }
                                                    if (sQLitePreparedStatement5 != null) {
                                                    }
                                                    if (sQLitePreparedStatement6 != null) {
                                                    }
                                                    if (sQLitePreparedStatement9 != null) {
                                                    }
                                                    if (sQLitePreparedStatement4 != null) {
                                                    }
                                                    if (sQLitePreparedStatement4 != null) {
                                                    }
                                                    if (sQLitePreparedStatement8 != null) {
                                                    }
                                                    if (sQLitePreparedStatement2 != null) {
                                                    }
                                                    if (sQLitePreparedStatement == null) {
                                                    }
                                                    sQLitePreparedStatement.dispose();
                                                } catch (Throwable th27) {
                                                    th3 = th27;
                                                    sQLitePreparedStatement13 = null;
                                                    th = th3;
                                                    sQLitePreparedStatement3 = sQLitePreparedStatement13;
                                                    sQLitePreparedStatement10 = sQLitePreparedStatement3;
                                                    sQLitePreparedStatement6 = sQLitePreparedStatement10;
                                                    sQLitePreparedStatement5 = sQLitePreparedStatement6;
                                                    sQLitePreparedStatement4 = sQLitePreparedStatement5;
                                                    sQLitePreparedStatement7 = sQLitePreparedStatement10;
                                                    sQLitePreparedStatement8 = sQLitePreparedStatement4;
                                                    sQLitePreparedStatement9 = sQLitePreparedStatement8;
                                                    sQLiteCursor = sQLitePreparedStatement7;
                                                    sQLiteDatabase = this.database;
                                                    if (sQLiteDatabase != null) {
                                                    }
                                                    if (sQLiteCursor != 0) {
                                                    }
                                                    if (sQLitePreparedStatement3 != null) {
                                                    }
                                                    if (sQLitePreparedStatement5 != null) {
                                                    }
                                                    if (sQLitePreparedStatement6 != null) {
                                                    }
                                                    if (sQLitePreparedStatement9 != null) {
                                                    }
                                                    if (sQLitePreparedStatement4 != null) {
                                                    }
                                                    if (sQLitePreparedStatement4 != null) {
                                                    }
                                                    if (sQLitePreparedStatement8 != null) {
                                                    }
                                                    if (sQLitePreparedStatement2 != null) {
                                                    }
                                                    if (sQLitePreparedStatement != null) {
                                                    }
                                                    throw th;
                                                }
                                            } else {
                                                sQLitePreparedStatement13 = null;
                                            }
                                            if (sQLitePreparedStatement2 != null) {
                                                sQLitePreparedStatement2.dispose();
                                            }
                                            tLRPC$messages_Dialogs2 = tLRPC$messages_Dialogs;
                                        } catch (Exception e25) {
                                            th2 = e25;
                                            sQLitePreparedStatement3 = null;
                                            sQLiteCursor2 = 0;
                                            sQLitePreparedStatement6 = null;
                                            sQLitePreparedStatement5 = null;
                                            sQLitePreparedStatement4 = null;
                                            sQLitePreparedStatement9 = null;
                                            checkSQLException(th2);
                                            sQLiteDatabase2 = this.database;
                                            if (sQLiteDatabase2 != null) {
                                            }
                                            if (sQLiteCursor2 != 0) {
                                            }
                                            if (sQLitePreparedStatement3 != null) {
                                            }
                                            if (sQLitePreparedStatement5 != null) {
                                            }
                                            if (sQLitePreparedStatement6 != null) {
                                            }
                                            if (sQLitePreparedStatement9 != null) {
                                            }
                                            if (sQLitePreparedStatement4 != null) {
                                            }
                                            if (sQLitePreparedStatement4 != null) {
                                            }
                                            if (sQLitePreparedStatement8 != null) {
                                            }
                                            if (sQLitePreparedStatement2 != null) {
                                            }
                                            if (sQLitePreparedStatement == null) {
                                            }
                                            sQLitePreparedStatement.dispose();
                                        } catch (Throwable th28) {
                                            th = th28;
                                            sQLitePreparedStatement3 = null;
                                            sQLiteCursor = 0;
                                            sQLitePreparedStatement6 = null;
                                            sQLitePreparedStatement5 = null;
                                            sQLitePreparedStatement4 = null;
                                            sQLitePreparedStatement9 = null;
                                            sQLiteDatabase = this.database;
                                            if (sQLiteDatabase != null) {
                                            }
                                            if (sQLiteCursor != 0) {
                                            }
                                            if (sQLitePreparedStatement3 != null) {
                                            }
                                            if (sQLitePreparedStatement5 != null) {
                                            }
                                            if (sQLitePreparedStatement6 != null) {
                                            }
                                            if (sQLitePreparedStatement9 != null) {
                                            }
                                            if (sQLitePreparedStatement4 != null) {
                                            }
                                            if (sQLitePreparedStatement4 != null) {
                                            }
                                            if (sQLitePreparedStatement8 != null) {
                                            }
                                            if (sQLitePreparedStatement2 != null) {
                                            }
                                            if (sQLitePreparedStatement != null) {
                                            }
                                            throw th;
                                        }
                                    } catch (Exception e26) {
                                        th2 = e26;
                                        sQLitePreparedStatement3 = null;
                                        sQLitePreparedStatement6 = null;
                                        sQLitePreparedStatement5 = null;
                                        sQLitePreparedStatement9 = sQLitePreparedStatement16;
                                        sQLiteCursor2 = sQLitePreparedStatement5;
                                        checkSQLException(th2);
                                        sQLiteDatabase2 = this.database;
                                        if (sQLiteDatabase2 != null) {
                                        }
                                        if (sQLiteCursor2 != 0) {
                                        }
                                        if (sQLitePreparedStatement3 != null) {
                                        }
                                        if (sQLitePreparedStatement5 != null) {
                                        }
                                        if (sQLitePreparedStatement6 != null) {
                                        }
                                        if (sQLitePreparedStatement9 != null) {
                                        }
                                        if (sQLitePreparedStatement4 != null) {
                                        }
                                        if (sQLitePreparedStatement4 != null) {
                                        }
                                        if (sQLitePreparedStatement8 != null) {
                                        }
                                        if (sQLitePreparedStatement2 != null) {
                                        }
                                        if (sQLitePreparedStatement == null) {
                                        }
                                        sQLitePreparedStatement.dispose();
                                    } catch (Throwable th29) {
                                        th = th29;
                                        sQLitePreparedStatement3 = null;
                                        sQLitePreparedStatement6 = null;
                                        sQLitePreparedStatement5 = null;
                                        sQLitePreparedStatement9 = sQLitePreparedStatement16;
                                        sQLiteCursor = sQLitePreparedStatement5;
                                        sQLiteDatabase = this.database;
                                        if (sQLiteDatabase != null) {
                                        }
                                        if (sQLiteCursor != 0) {
                                        }
                                        if (sQLitePreparedStatement3 != null) {
                                        }
                                        if (sQLitePreparedStatement5 != null) {
                                        }
                                        if (sQLitePreparedStatement6 != null) {
                                        }
                                        if (sQLitePreparedStatement9 != null) {
                                        }
                                        if (sQLitePreparedStatement4 != null) {
                                        }
                                        if (sQLitePreparedStatement4 != null) {
                                        }
                                        if (sQLitePreparedStatement8 != null) {
                                        }
                                        if (sQLitePreparedStatement2 != null) {
                                        }
                                        if (sQLitePreparedStatement != null) {
                                        }
                                        throw th;
                                    }
                                } catch (Exception e27) {
                                    th2 = e27;
                                    sQLitePreparedStatement3 = null;
                                    sQLitePreparedStatement9 = sQLitePreparedStatement16;
                                    sQLiteCursor2 = 0;
                                } catch (Throwable th30) {
                                    th = th30;
                                    sQLitePreparedStatement3 = null;
                                    sQLitePreparedStatement9 = sQLitePreparedStatement16;
                                    sQLiteCursor = 0;
                                }
                            } catch (Exception e28) {
                                e = e28;
                                obj2 = null;
                                th2 = e;
                                sQLitePreparedStatement9 = sQLitePreparedStatement16;
                                sQLiteCursor2 = obj2;
                                checkSQLException(th2);
                                sQLiteDatabase2 = this.database;
                                if (sQLiteDatabase2 != null) {
                                }
                                if (sQLiteCursor2 != 0) {
                                }
                                if (sQLitePreparedStatement3 != null) {
                                }
                                if (sQLitePreparedStatement5 != null) {
                                }
                                if (sQLitePreparedStatement6 != null) {
                                }
                                if (sQLitePreparedStatement9 != null) {
                                }
                                if (sQLitePreparedStatement4 != null) {
                                }
                                if (sQLitePreparedStatement4 != null) {
                                }
                                if (sQLitePreparedStatement8 != null) {
                                }
                                if (sQLitePreparedStatement2 != null) {
                                }
                                if (sQLitePreparedStatement == null) {
                                }
                                sQLitePreparedStatement.dispose();
                            } catch (Throwable th31) {
                                th = th31;
                                obj = null;
                                th = th;
                                sQLitePreparedStatement9 = sQLitePreparedStatement16;
                                sQLiteCursor = obj;
                                sQLiteDatabase = this.database;
                                if (sQLiteDatabase != null) {
                                }
                                if (sQLiteCursor != 0) {
                                }
                                if (sQLitePreparedStatement3 != null) {
                                }
                                if (sQLitePreparedStatement5 != null) {
                                }
                                if (sQLitePreparedStatement6 != null) {
                                }
                                if (sQLitePreparedStatement9 != null) {
                                }
                                if (sQLitePreparedStatement4 != null) {
                                }
                                if (sQLitePreparedStatement4 != null) {
                                }
                                if (sQLitePreparedStatement8 != null) {
                                }
                                if (sQLitePreparedStatement2 != null) {
                                }
                                if (sQLitePreparedStatement != null) {
                                }
                                throw th;
                            }
                        } catch (Exception e29) {
                            sQLitePreparedStatement15 = executeFast;
                            sQLitePreparedStatement3 = executeFast2;
                            sQLitePreparedStatement6 = executeFast3;
                            th2 = e29;
                            sQLitePreparedStatement = null;
                            sQLitePreparedStatement2 = null;
                            sQLitePreparedStatement8 = null;
                            sQLitePreparedStatement9 = sQLitePreparedStatement15;
                            sQLiteCursor2 = sQLitePreparedStatement8;
                            checkSQLException(th2);
                            sQLiteDatabase2 = this.database;
                            if (sQLiteDatabase2 != null) {
                            }
                            if (sQLiteCursor2 != 0) {
                            }
                            if (sQLitePreparedStatement3 != null) {
                            }
                            if (sQLitePreparedStatement5 != null) {
                            }
                            if (sQLitePreparedStatement6 != null) {
                            }
                            if (sQLitePreparedStatement9 != null) {
                            }
                            if (sQLitePreparedStatement4 != null) {
                            }
                            if (sQLitePreparedStatement4 != null) {
                            }
                            if (sQLitePreparedStatement8 != null) {
                            }
                            if (sQLitePreparedStatement2 != null) {
                            }
                            if (sQLitePreparedStatement == null) {
                            }
                            sQLitePreparedStatement.dispose();
                        } catch (Throwable th32) {
                            sQLitePreparedStatement14 = executeFast;
                            sQLitePreparedStatement3 = executeFast2;
                            sQLitePreparedStatement6 = executeFast3;
                            th = th32;
                            sQLitePreparedStatement = null;
                            sQLitePreparedStatement2 = null;
                            sQLitePreparedStatement8 = null;
                            sQLitePreparedStatement9 = sQLitePreparedStatement14;
                            sQLiteCursor = sQLitePreparedStatement8;
                            sQLiteDatabase = this.database;
                            if (sQLiteDatabase != null) {
                            }
                            if (sQLiteCursor != 0) {
                            }
                            if (sQLitePreparedStatement3 != null) {
                            }
                            if (sQLitePreparedStatement5 != null) {
                            }
                            if (sQLitePreparedStatement6 != null) {
                            }
                            if (sQLitePreparedStatement9 != null) {
                            }
                            if (sQLitePreparedStatement4 != null) {
                            }
                            if (sQLitePreparedStatement4 != null) {
                            }
                            if (sQLitePreparedStatement8 != null) {
                            }
                            if (sQLitePreparedStatement2 != null) {
                            }
                            if (sQLitePreparedStatement != null) {
                            }
                            throw th;
                        }
                    } catch (Exception e30) {
                        sQLitePreparedStatement3 = executeFast2;
                        th2 = e30;
                        sQLitePreparedStatement = null;
                        sQLitePreparedStatement2 = null;
                        sQLitePreparedStatement11 = null;
                        sQLitePreparedStatement6 = null;
                        sQLitePreparedStatement4 = null;
                    } catch (Throwable th33) {
                        sQLitePreparedStatement3 = executeFast2;
                        th = th33;
                        sQLitePreparedStatement = null;
                        sQLitePreparedStatement2 = null;
                        sQLitePreparedStatement7 = null;
                        sQLitePreparedStatement6 = null;
                        sQLitePreparedStatement4 = null;
                    }
                } catch (Exception e31) {
                    sQLitePreparedStatement3 = executeFast2;
                    th2 = e31;
                    sQLitePreparedStatement = null;
                    sQLitePreparedStatement2 = null;
                    sQLitePreparedStatement12 = null;
                    sQLitePreparedStatement6 = sQLitePreparedStatement12;
                    sQLitePreparedStatement5 = sQLitePreparedStatement6;
                    sQLitePreparedStatement4 = sQLitePreparedStatement5;
                    sQLitePreparedStatement11 = sQLitePreparedStatement12;
                    sQLitePreparedStatement8 = sQLitePreparedStatement4;
                    sQLitePreparedStatement9 = sQLitePreparedStatement8;
                    sQLiteCursor2 = sQLitePreparedStatement11;
                    checkSQLException(th2);
                    sQLiteDatabase2 = this.database;
                    if (sQLiteDatabase2 != null) {
                    }
                    if (sQLiteCursor2 != 0) {
                    }
                    if (sQLitePreparedStatement3 != null) {
                    }
                    if (sQLitePreparedStatement5 != null) {
                    }
                    if (sQLitePreparedStatement6 != null) {
                    }
                    if (sQLitePreparedStatement9 != null) {
                    }
                    if (sQLitePreparedStatement4 != null) {
                    }
                    if (sQLitePreparedStatement4 != null) {
                    }
                    if (sQLitePreparedStatement8 != null) {
                    }
                    if (sQLitePreparedStatement2 != null) {
                    }
                    if (sQLitePreparedStatement == null) {
                    }
                    sQLitePreparedStatement.dispose();
                } catch (Throwable th34) {
                    sQLitePreparedStatement3 = executeFast2;
                    th = th34;
                    sQLitePreparedStatement = null;
                    sQLitePreparedStatement2 = null;
                    sQLitePreparedStatement10 = null;
                    sQLitePreparedStatement6 = sQLitePreparedStatement10;
                    sQLitePreparedStatement5 = sQLitePreparedStatement6;
                    sQLitePreparedStatement4 = sQLitePreparedStatement5;
                    sQLitePreparedStatement7 = sQLitePreparedStatement10;
                    sQLitePreparedStatement8 = sQLitePreparedStatement4;
                    sQLitePreparedStatement9 = sQLitePreparedStatement8;
                    sQLiteCursor = sQLitePreparedStatement7;
                    sQLiteDatabase = this.database;
                    if (sQLiteDatabase != null) {
                    }
                    if (sQLiteCursor != 0) {
                    }
                    if (sQLitePreparedStatement3 != null) {
                    }
                    if (sQLitePreparedStatement5 != null) {
                    }
                    if (sQLitePreparedStatement6 != null) {
                    }
                    if (sQLitePreparedStatement9 != null) {
                    }
                    if (sQLitePreparedStatement4 != null) {
                    }
                    if (sQLitePreparedStatement4 != null) {
                    }
                    if (sQLitePreparedStatement8 != null) {
                    }
                    if (sQLitePreparedStatement2 != null) {
                    }
                    if (sQLitePreparedStatement != null) {
                    }
                    throw th;
                }
            }
            putUsersInternal(tLRPC$messages_Dialogs2.users);
            putChatsInternal(tLRPC$messages_Dialogs2.chats);
            this.database.commitTransaction();
            resetAllUnreadCounters(false);
            SQLiteDatabase sQLiteDatabase3 = this.database;
            if (sQLiteDatabase3 != null) {
                sQLiteDatabase3.commitTransaction();
            }
            if (sQLitePreparedStatement2 != null) {
                sQLitePreparedStatement2.dispose();
            }
            if (sQLitePreparedStatement == null) {
                return;
            }
        } catch (Exception e32) {
            th2 = e32;
            sQLitePreparedStatement = null;
            sQLitePreparedStatement2 = null;
            sQLitePreparedStatement3 = null;
        } catch (Throwable th35) {
            th = th35;
            sQLitePreparedStatement = null;
            sQLitePreparedStatement2 = null;
            sQLitePreparedStatement3 = null;
        }
        sQLitePreparedStatement.dispose();
    }

    public void getDialogFolderId(final long j, final IntCallback intCallback) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda111
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$getDialogFolderId$197(j, intCallback);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$getDialogFolderId$197(long j, final IntCallback intCallback) {
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                if (this.unknownDialogsIds.get(j) == null) {
                    sQLiteCursor = this.database.queryFinalized("SELECT folder_id FROM dialogs WHERE did = ?", Long.valueOf(j));
                    r2 = sQLiteCursor.next() ? sQLiteCursor.intValue(0) : -1;
                    sQLiteCursor.dispose();
                }
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda3
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesStorage.IntCallback.this.run(r2);
                    }
                });
                if (sQLiteCursor == null) {
                    return;
                }
            } catch (Exception e) {
                checkSQLException(e);
                if (sQLiteCursor == null) {
                    return;
                }
            }
            sQLiteCursor.dispose();
        } catch (Throwable th) {
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
            throw th;
        }
    }

    public void setDialogsFolderId(final ArrayList<TLRPC$TL_folderPeer> arrayList, final ArrayList<TLRPC$TL_inputFolderPeer> arrayList2, final long j, final int i) {
        if (arrayList == null && arrayList2 == null && j == 0) {
            return;
        }
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda157
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$setDialogsFolderId$198(arrayList, arrayList2, i, j);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$setDialogsFolderId$198(ArrayList arrayList, ArrayList arrayList2, int i, long j) {
        SQLitePreparedStatement executeFast;
        SQLitePreparedStatement sQLitePreparedStatement = null;
        try {
            try {
                this.database.beginTransaction();
                executeFast = this.database.executeFast("UPDATE dialogs SET folder_id = ?, pinned = ? WHERE did = ?");
            } catch (Exception e) {
                e = e;
            }
        } catch (Throwable th) {
            th = th;
        }
        try {
            if (arrayList != null) {
                int size = arrayList.size();
                for (int i2 = 0; i2 < size; i2++) {
                    TLRPC$TL_folderPeer tLRPC$TL_folderPeer = (TLRPC$TL_folderPeer) arrayList.get(i2);
                    long peerDialogId = DialogObject.getPeerDialogId(tLRPC$TL_folderPeer.peer);
                    executeFast.requery();
                    executeFast.bindInteger(1, tLRPC$TL_folderPeer.folder_id);
                    executeFast.bindInteger(2, 0);
                    executeFast.bindLong(3, peerDialogId);
                    executeFast.step();
                    this.unknownDialogsIds.remove(peerDialogId);
                }
            } else if (arrayList2 != null) {
                int size2 = arrayList2.size();
                for (int i3 = 0; i3 < size2; i3++) {
                    TLRPC$TL_inputFolderPeer tLRPC$TL_inputFolderPeer = (TLRPC$TL_inputFolderPeer) arrayList2.get(i3);
                    long peerDialogId2 = DialogObject.getPeerDialogId(tLRPC$TL_inputFolderPeer.peer);
                    executeFast.requery();
                    executeFast.bindInteger(1, tLRPC$TL_inputFolderPeer.folder_id);
                    executeFast.bindInteger(2, 0);
                    executeFast.bindLong(3, peerDialogId2);
                    executeFast.step();
                    this.unknownDialogsIds.remove(peerDialogId2);
                }
            } else {
                executeFast.requery();
                executeFast.bindInteger(1, i);
                executeFast.bindInteger(2, 0);
                executeFast.bindLong(3, j);
                executeFast.step();
            }
            executeFast.dispose();
            this.database.commitTransaction();
            lambda$checkIfFolderEmpty$200(1);
            resetAllUnreadCounters(false);
            SQLiteDatabase sQLiteDatabase = this.database;
            if (sQLiteDatabase != null) {
                sQLiteDatabase.commitTransaction();
            }
        } catch (Exception e2) {
            e = e2;
            sQLitePreparedStatement = executeFast;
            checkSQLException(e);
            SQLiteDatabase sQLiteDatabase2 = this.database;
            if (sQLiteDatabase2 != null) {
                sQLiteDatabase2.commitTransaction();
            }
            if (sQLitePreparedStatement != null) {
                sQLitePreparedStatement.dispose();
            }
        } catch (Throwable th2) {
            th = th2;
            sQLitePreparedStatement = executeFast;
            SQLiteDatabase sQLiteDatabase3 = this.database;
            if (sQLiteDatabase3 != null) {
                sQLiteDatabase3.commitTransaction();
            }
            if (sQLitePreparedStatement != null) {
                sQLitePreparedStatement.dispose();
            }
            throw th;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* renamed from: checkIfFolderEmptyInternal */
    public void lambda$checkIfFolderEmpty$200(final int i) {
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                boolean z = true;
                sQLiteCursor = this.database.queryFinalized("SELECT did FROM dialogs WHERE folder_id = ?", Integer.valueOf(i));
                while (sQLiteCursor.next()) {
                    long longValue = sQLiteCursor.longValue(0);
                    if (!DialogObject.isUserDialog(longValue) && !DialogObject.isEncryptedDialog(longValue)) {
                        TLRPC$Chat chat = getChat(-longValue);
                        if (ChatObject.isNotInChat(chat) || chat.migrated_to != null) {
                        }
                    }
                    z = false;
                }
                sQLiteCursor.dispose();
                if (z) {
                    AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda31
                        @Override // java.lang.Runnable
                        public final void run() {
                            MessagesStorage.this.lambda$checkIfFolderEmptyInternal$199(i);
                        }
                    });
                    SQLiteDatabase sQLiteDatabase = this.database;
                    sQLiteDatabase.executeFast("DELETE FROM dialogs WHERE did = " + DialogObject.makeFolderDialogId(i)).stepThis().dispose();
                }
            } catch (Exception e) {
                checkSQLException(e);
                if (sQLiteCursor == null) {
                    return;
                }
            }
            sQLiteCursor.dispose();
        } catch (Throwable th) {
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
            throw th;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$checkIfFolderEmptyInternal$199(int i) {
        getMessagesController().onFolderEmpty(i);
    }

    public void checkIfFolderEmpty(final int i) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda33
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$checkIfFolderEmpty$200(i);
            }
        });
    }

    public void unpinAllDialogsExceptNew(final ArrayList<Long> arrayList, final int i) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda151
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$unpinAllDialogsExceptNew$201(arrayList, i);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:41:0x00a2  */
    /* JADX WARN: Removed duplicated region for block: B:43:0x00a7  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$unpinAllDialogsExceptNew$201(ArrayList arrayList, int i) {
        SQLitePreparedStatement sQLitePreparedStatement;
        SQLiteCursor sQLiteCursor = null;
        try {
            ArrayList arrayList2 = new ArrayList();
            SQLiteCursor queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT did, folder_id FROM dialogs WHERE pinned > 0 AND did NOT IN (%s)", TextUtils.join(",", arrayList)), new Object[0]);
            while (queryFinalized.next()) {
                try {
                    long longValue = queryFinalized.longValue(0);
                    if (queryFinalized.intValue(1) == i && !DialogObject.isEncryptedDialog(longValue) && !DialogObject.isFolderDialogId(longValue)) {
                        arrayList2.add(Long.valueOf(queryFinalized.longValue(0)));
                    }
                } catch (Exception e) {
                    e = e;
                    sQLiteCursor = queryFinalized;
                    sQLitePreparedStatement = null;
                } catch (Throwable th) {
                    th = th;
                    sQLiteCursor = queryFinalized;
                    sQLitePreparedStatement = null;
                    if (sQLiteCursor != null) {
                    }
                    if (sQLitePreparedStatement != null) {
                    }
                    throw th;
                }
            }
            queryFinalized.dispose();
            if (arrayList2.isEmpty()) {
                return;
            }
            sQLitePreparedStatement = this.database.executeFast("UPDATE dialogs SET pinned = ? WHERE did = ?");
            for (int i2 = 0; i2 < arrayList2.size(); i2++) {
                try {
                    try {
                        long longValue2 = ((Long) arrayList2.get(i2)).longValue();
                        sQLitePreparedStatement.requery();
                        sQLitePreparedStatement.bindInteger(1, 0);
                        sQLitePreparedStatement.bindLong(2, longValue2);
                        sQLitePreparedStatement.step();
                    } catch (Exception e2) {
                        e = e2;
                        checkSQLException(e);
                        if (sQLiteCursor != null) {
                            sQLiteCursor.dispose();
                        }
                        if (sQLitePreparedStatement != null) {
                            sQLitePreparedStatement.dispose();
                            return;
                        }
                        return;
                    }
                } catch (Throwable th2) {
                    th = th2;
                    if (sQLiteCursor != null) {
                        sQLiteCursor.dispose();
                    }
                    if (sQLitePreparedStatement != null) {
                        sQLitePreparedStatement.dispose();
                    }
                    throw th;
                }
            }
            sQLitePreparedStatement.dispose();
        } catch (Exception e3) {
            e = e3;
            sQLitePreparedStatement = null;
        } catch (Throwable th3) {
            th = th3;
            sQLitePreparedStatement = null;
        }
    }

    public void setDialogUnread(final long j, final boolean z) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda122
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$setDialogUnread$202(j, z);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:27:0x0043 A[Catch: all -> 0x003b, Exception -> 0x003d, TryCatch #2 {Exception -> 0x003d, blocks: (B:9:0x0027, B:27:0x0043, B:29:0x0048, B:28:0x0046, B:19:0x0037, B:32:0x0064, B:33:0x0067), top: B:42:0x0002, outer: #4 }] */
    /* JADX WARN: Removed duplicated region for block: B:28:0x0046 A[Catch: all -> 0x003b, Exception -> 0x003d, TryCatch #2 {Exception -> 0x003d, blocks: (B:9:0x0027, B:27:0x0043, B:29:0x0048, B:28:0x0046, B:19:0x0037, B:32:0x0064, B:33:0x0067), top: B:42:0x0002, outer: #4 }] */
    /* JADX WARN: Removed duplicated region for block: B:32:0x0064 A[Catch: all -> 0x003b, Exception -> 0x003d, TryCatch #2 {Exception -> 0x003d, blocks: (B:9:0x0027, B:27:0x0043, B:29:0x0048, B:28:0x0046, B:19:0x0037, B:32:0x0064, B:33:0x0067), top: B:42:0x0002, outer: #4 }] */
    /* JADX WARN: Type inference failed for: r0v0, types: [org.telegram.SQLite.SQLitePreparedStatement, org.telegram.SQLite.SQLiteCursor] */
    /* JADX WARN: Type inference failed for: r0v3 */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$setDialogUnread$202(long j, boolean z) {
        SQLiteCursor sQLiteCursor;
        int i;
        SQLitePreparedStatement sQLitePreparedStatement = 0;
        try {
            try {
                try {
                    try {
                        sQLiteCursor = this.database.queryFinalized("SELECT flags FROM dialogs WHERE did = " + j, new Object[0]);
                        try {
                            i = sQLiteCursor.next() ? sQLiteCursor.intValue(0) : 0;
                            sQLiteCursor.dispose();
                        } catch (Exception e) {
                            e = e;
                            checkSQLException(e);
                            if (sQLiteCursor != null) {
                                sQLiteCursor.dispose();
                            }
                            i = 0;
                            if (!z) {
                            }
                            SQLitePreparedStatement executeFast = this.database.executeFast("UPDATE dialogs SET flags = ? WHERE did = ?");
                            executeFast.bindInteger(1, r8);
                            executeFast.bindLong(2, j);
                            executeFast.step();
                            executeFast.dispose();
                            resetAllUnreadCounters(false);
                            sQLitePreparedStatement = executeFast;
                            sQLitePreparedStatement.dispose();
                        }
                    } catch (Throwable th) {
                        th = th;
                        if (0 != 0) {
                            sQLitePreparedStatement.dispose();
                        }
                        throw th;
                    }
                } catch (Throwable th2) {
                    if (0 != 0) {
                        sQLitePreparedStatement.dispose();
                    }
                    throw th2;
                }
            } catch (Exception e2) {
                e = e2;
                sQLiteCursor = null;
            } catch (Throwable th3) {
                th = th3;
                if (0 != 0) {
                }
                throw th;
            }
            int i2 = !z ? i | 1 : i & (-2);
            SQLitePreparedStatement executeFast2 = this.database.executeFast("UPDATE dialogs SET flags = ? WHERE did = ?");
            executeFast2.bindInteger(1, i2);
            executeFast2.bindLong(2, j);
            executeFast2.step();
            executeFast2.dispose();
            resetAllUnreadCounters(false);
            sQLitePreparedStatement = executeFast2;
        } catch (Exception e3) {
            checkSQLException(e3);
            if (0 == 0) {
                return;
            }
        }
        sQLitePreparedStatement.dispose();
    }

    public void resetAllUnreadCounters(boolean z) {
        int size = this.dialogFilters.size();
        for (int i = 0; i < size; i++) {
            MessagesController.DialogFilter dialogFilter = this.dialogFilters.get(i);
            if (z) {
                if ((dialogFilter.flags & MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED) != 0) {
                    dialogFilter.pendingUnreadCount = -1;
                }
            } else {
                dialogFilter.pendingUnreadCount = -1;
            }
        }
        calcUnreadCounters(false);
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda15
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$resetAllUnreadCounters$203();
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$resetAllUnreadCounters$203() {
        ArrayList<MessagesController.DialogFilter> arrayList = getMessagesController().dialogFilters;
        int size = arrayList.size();
        for (int i = 0; i < size; i++) {
            arrayList.get(i).unreadCount = arrayList.get(i).pendingUnreadCount;
        }
        this.mainUnreadCount = this.pendingMainUnreadCount;
        this.archiveUnreadCount = this.pendingArchiveUnreadCount;
        getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, Integer.valueOf(MessagesController.UPDATE_MASK_READ_DIALOG_MESSAGE));
    }

    public void setDialogPinned(final long j, final int i) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda40
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$setDialogPinned$204(i, j);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$setDialogPinned$204(int i, long j) {
        SQLitePreparedStatement sQLitePreparedStatement = null;
        try {
            try {
                sQLitePreparedStatement = this.database.executeFast("UPDATE dialogs SET pinned = ? WHERE did = ?");
                sQLitePreparedStatement.bindInteger(1, i);
                sQLitePreparedStatement.bindLong(2, j);
                sQLitePreparedStatement.step();
                sQLitePreparedStatement.dispose();
            } catch (Exception e) {
                checkSQLException(e);
                if (sQLitePreparedStatement != null) {
                    sQLitePreparedStatement.dispose();
                }
            }
        } catch (Throwable th) {
            if (sQLitePreparedStatement != null) {
                sQLitePreparedStatement.dispose();
            }
            throw th;
        }
    }

    public void setDialogsPinned(final ArrayList<Long> arrayList, final ArrayList<Integer> arrayList2) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda156
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$setDialogsPinned$205(arrayList, arrayList2);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$setDialogsPinned$205(ArrayList arrayList, ArrayList arrayList2) {
        SQLitePreparedStatement sQLitePreparedStatement = null;
        try {
            try {
                sQLitePreparedStatement = this.database.executeFast("UPDATE dialogs SET pinned = ? WHERE did = ?");
                int size = arrayList.size();
                for (int i = 0; i < size; i++) {
                    sQLitePreparedStatement.requery();
                    sQLitePreparedStatement.bindInteger(1, ((Integer) arrayList2.get(i)).intValue());
                    sQLitePreparedStatement.bindLong(2, ((Long) arrayList.get(i)).longValue());
                    sQLitePreparedStatement.step();
                }
                sQLitePreparedStatement.dispose();
            } catch (Exception e) {
                checkSQLException(e);
                if (sQLitePreparedStatement != null) {
                    sQLitePreparedStatement.dispose();
                }
            }
        } catch (Throwable th) {
            if (sQLitePreparedStatement != null) {
                sQLitePreparedStatement.dispose();
            }
            throw th;
        }
    }

    public void putDialogs(final TLRPC$messages_Dialogs tLRPC$messages_Dialogs, final int i) {
        if (tLRPC$messages_Dialogs.dialogs.isEmpty()) {
            return;
        }
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda193
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$putDialogs$206(tLRPC$messages_Dialogs, i);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$putDialogs$206(TLRPC$messages_Dialogs tLRPC$messages_Dialogs, int i) {
        putDialogsInternal(tLRPC$messages_Dialogs, i);
        try {
            loadUnreadMessages();
        } catch (Exception e) {
            checkSQLException(e);
        }
    }

    public void getDialogMaxMessageId(final long j, final IntCallback intCallback) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda112
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$getDialogMaxMessageId$208(j, intCallback);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Code restructure failed: missing block: B:11:0x0031, code lost:
        if (r1 == null) goto L8;
     */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$getDialogMaxMessageId$208(long j, final IntCallback intCallback) {
        final int[] iArr = new int[1];
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                SQLiteDatabase sQLiteDatabase = this.database;
                sQLiteCursor = sQLiteDatabase.queryFinalized("SELECT MAX(mid) FROM messages_v2 WHERE uid = " + j, new Object[0]);
                if (sQLiteCursor.next()) {
                    iArr[0] = sQLiteCursor.intValue(0);
                }
            } catch (Exception e) {
                checkSQLException(e);
            }
            sQLiteCursor.dispose();
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda5
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesStorage.lambda$getDialogMaxMessageId$207(MessagesStorage.IntCallback.this, iArr);
                }
            });
        } catch (Throwable th) {
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
            throw th;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$getDialogMaxMessageId$207(IntCallback intCallback, int[] iArr) {
        intCallback.run(iArr[0]);
    }

    public int getDialogReadMax(final boolean z, final long j) {
        final CountDownLatch countDownLatch = new CountDownLatch(1);
        final Integer[] numArr = {0};
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda204
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$getDialogReadMax$209(z, j, numArr, countDownLatch);
            }
        });
        try {
            countDownLatch.await();
        } catch (Exception e) {
            checkSQLException(e);
        }
        return numArr[0].intValue();
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Code restructure failed: missing block: B:18:0x006c, code lost:
        if (r1 == null) goto L9;
     */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$getDialogReadMax$209(boolean z, long j, Integer[] numArr, CountDownLatch countDownLatch) {
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                if (z) {
                    SQLiteDatabase sQLiteDatabase = this.database;
                    sQLiteCursor = sQLiteDatabase.queryFinalized("SELECT outbox_max FROM dialogs WHERE did = " + j, new Object[0]);
                    if (sQLiteCursor.next()) {
                        numArr[0] = Integer.valueOf(sQLiteCursor.intValue(0));
                    }
                } else {
                    SQLiteDatabase sQLiteDatabase2 = this.database;
                    sQLiteCursor = sQLiteDatabase2.queryFinalized("SELECT last_mid, inbox_max FROM dialogs WHERE did = " + j, new Object[0]);
                    if (sQLiteCursor.next()) {
                        int intValue = sQLiteCursor.intValue(0);
                        int intValue2 = sQLiteCursor.intValue(1);
                        if (intValue2 > intValue) {
                            numArr[0] = 0;
                        } else {
                            numArr[0] = Integer.valueOf(intValue2);
                        }
                    }
                }
            } catch (Exception e) {
                checkSQLException(e);
            }
            sQLiteCursor.dispose();
            countDownLatch.countDown();
        } catch (Throwable th) {
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
            throw th;
        }
    }

    public int getChannelPtsSync(final long j) {
        final CountDownLatch countDownLatch = new CountDownLatch(1);
        final Integer[] numArr = {0};
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda125
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$getChannelPtsSync$210(j, numArr, countDownLatch);
            }
        });
        try {
            countDownLatch.await();
        } catch (Exception e) {
            checkSQLException(e);
        }
        return numArr[0].intValue();
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Code restructure failed: missing block: B:11:0x0033, code lost:
        if (r0 == null) goto L8;
     */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$getChannelPtsSync$210(long j, Integer[] numArr, CountDownLatch countDownLatch) {
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                SQLiteDatabase sQLiteDatabase = this.database;
                sQLiteCursor = sQLiteDatabase.queryFinalized("SELECT pts FROM dialogs WHERE did = " + (-j), new Object[0]);
                if (sQLiteCursor.next()) {
                    numArr[0] = Integer.valueOf(sQLiteCursor.intValue(0));
                }
            } catch (Exception e) {
                checkSQLException(e);
            }
            sQLiteCursor.dispose();
            try {
                countDownLatch.countDown();
            } catch (Exception e2) {
                checkSQLException(e2);
            }
        } catch (Throwable th) {
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
            throw th;
        }
    }

    public TLRPC$User getUserSync(final long j) {
        final CountDownLatch countDownLatch = new CountDownLatch(1);
        final TLRPC$User[] tLRPC$UserArr = new TLRPC$User[1];
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda210
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$getUserSync$211(tLRPC$UserArr, j, countDownLatch);
            }
        });
        try {
            countDownLatch.await();
        } catch (Exception e) {
            checkSQLException(e);
        }
        return tLRPC$UserArr[0];
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$getUserSync$211(TLRPC$User[] tLRPC$UserArr, long j, CountDownLatch countDownLatch) {
        tLRPC$UserArr[0] = getUser(j);
        countDownLatch.countDown();
    }

    public TLRPC$Chat getChatSync(final long j) {
        final CountDownLatch countDownLatch = new CountDownLatch(1);
        final TLRPC$Chat[] tLRPC$ChatArr = new TLRPC$Chat[1];
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda208
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$getChatSync$212(tLRPC$ChatArr, j, countDownLatch);
            }
        });
        try {
            countDownLatch.await();
        } catch (Exception e) {
            checkSQLException(e);
        }
        return tLRPC$ChatArr[0];
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$getChatSync$212(TLRPC$Chat[] tLRPC$ChatArr, long j, CountDownLatch countDownLatch) {
        tLRPC$ChatArr[0] = getChat(j);
        countDownLatch.countDown();
    }

    public TLRPC$User getUser(long j) {
        try {
            ArrayList<TLRPC$User> arrayList = new ArrayList<>();
            getUsersInternal("" + j, arrayList);
            if (arrayList.isEmpty()) {
                return null;
            }
            return arrayList.get(0);
        } catch (Exception e) {
            checkSQLException(e);
            return null;
        }
    }

    public ArrayList<TLRPC$User> getUsers(ArrayList<Long> arrayList) {
        ArrayList<TLRPC$User> arrayList2 = new ArrayList<>();
        try {
            getUsersInternal(TextUtils.join(",", arrayList), arrayList2);
        } catch (Exception e) {
            arrayList2.clear();
            checkSQLException(e);
        }
        return arrayList2;
    }

    public TLRPC$Chat getChat(long j) {
        try {
            ArrayList<TLRPC$Chat> arrayList = new ArrayList<>();
            getChatsInternal("" + j, arrayList);
            if (arrayList.isEmpty()) {
                return null;
            }
            return arrayList.get(0);
        } catch (Exception e) {
            checkSQLException(e);
            return null;
        }
    }

    public TLRPC$EncryptedChat getEncryptedChat(long j) {
        try {
            ArrayList<TLRPC$EncryptedChat> arrayList = new ArrayList<>();
            getEncryptedChatsInternal("" + j, arrayList, null);
            if (arrayList.isEmpty()) {
                return null;
            }
            return arrayList.get(0);
        } catch (Exception e) {
            checkSQLException(e);
            return null;
        }
    }

    /* JADX WARN: Code restructure failed: missing block: B:149:0x02da, code lost:
        r6 = (org.telegram.ui.Adapters.DialogsSearchAdapter.DialogSearchResult) r9.get(r14.id);
        r7 = r14.status;
        r26 = r9;
     */
    /* JADX WARN: Code restructure failed: missing block: B:150:0x02e6, code lost:
        if (r7 == null) goto L158;
     */
    /* JADX WARN: Code restructure failed: missing block: B:151:0x02e8, code lost:
        r7.expires = r1.intValue(1);
     */
    /* JADX WARN: Code restructure failed: missing block: B:153:0x02f0, code lost:
        if (r10 != 1) goto L164;
     */
    /* JADX WARN: Code restructure failed: missing block: B:154:0x02f2, code lost:
        r6.name = org.telegram.messenger.AndroidUtilities.generateSearchName(r14.first_name, r14.last_name, r4);
     */
    /* JADX WARN: Code restructure failed: missing block: B:155:0x02fd, code lost:
        r6.name = org.telegram.messenger.AndroidUtilities.generateSearchName("@" + org.telegram.messenger.UserObject.getPublicUsername(r14), null, "@" + r4);
     */
    /* JADX WARN: Code restructure failed: missing block: B:156:0x0326, code lost:
        r6.object = r14;
        r8 = r8 + 1;
     */
    /* JADX WARN: Code restructure failed: missing block: B:183:0x03e7, code lost:
        if (r3.contains(" " + r7) != false) goto L205;
     */
    /* JADX WARN: Code restructure failed: missing block: B:81:0x0175, code lost:
        if (r11.startsWith(r6) == false) goto L405;
     */
    /* JADX WARN: Code restructure failed: missing block: B:9:0x0053, code lost:
        if (r15.length() == 0) goto L9;
     */
    /* JADX WARN: Removed duplicated region for block: B:103:0x01d1 A[Catch: all -> 0x01a0, Exception -> 0x01a5, TryCatch #11 {Exception -> 0x01a5, all -> 0x01a0, blocks: (B:88:0x0184, B:96:0x01b0, B:101:0x01c0, B:103:0x01d1, B:105:0x01e2), top: B:369:0x0184 }] */
    /* JADX WARN: Removed duplicated region for block: B:105:0x01e2 A[Catch: all -> 0x01a0, Exception -> 0x01a5, TRY_LEAVE, TryCatch #11 {Exception -> 0x01a5, all -> 0x01a0, blocks: (B:88:0x0184, B:96:0x01b0, B:101:0x01c0, B:103:0x01d1, B:105:0x01e2), top: B:369:0x0184 }] */
    /* JADX WARN: Removed duplicated region for block: B:110:0x020a A[Catch: all -> 0x00ac, Exception -> 0x00b2, TRY_ENTER, TRY_LEAVE, TryCatch #7 {Exception -> 0x00b2, all -> 0x00ac, blocks: (B:28:0x0092, B:80:0x0171, B:110:0x020a, B:167:0x0374, B:221:0x0478, B:280:0x0670, B:282:0x067a, B:284:0x067e, B:290:0x0694), top: B:377:0x0092 }] */
    /* JADX WARN: Removed duplicated region for block: B:141:0x02ad A[Catch: all -> 0x07d8, Exception -> 0x07de, TryCatch #10 {Exception -> 0x07de, all -> 0x07d8, blocks: (B:36:0x00cc, B:38:0x00d2, B:41:0x00f0, B:44:0x00fb, B:46:0x0101, B:60:0x0119, B:62:0x0123, B:66:0x012f, B:68:0x013a, B:72:0x0147, B:74:0x0155, B:76:0x0162, B:112:0x022a, B:114:0x0230, B:117:0x0244, B:119:0x024b, B:123:0x025c, B:125:0x0266, B:128:0x027f, B:130:0x0285, B:134:0x029d, B:141:0x02ad, B:143:0x02b8, B:146:0x02cb, B:159:0x0336, B:149:0x02da, B:151:0x02e8, B:154:0x02f2, B:156:0x0326, B:155:0x02fd, B:162:0x0358, B:168:0x0390, B:170:0x0396, B:175:0x03af, B:177:0x03b7, B:180:0x03ce, B:182:0x03d4, B:203:0x0429, B:184:0x03e9, B:186:0x03f0, B:189:0x0401, B:196:0x0419, B:201:0x0423, B:205:0x0431, B:207:0x0435, B:209:0x043b, B:211:0x0441, B:214:0x0462, B:222:0x0496, B:224:0x049c, B:227:0x04b0, B:229:0x04b9, B:233:0x04c5, B:235:0x04cd, B:238:0x04e4, B:240:0x04ea, B:244:0x0502, B:249:0x050d, B:251:0x0514, B:253:0x0523, B:255:0x0529, B:259:0x053b, B:261:0x05ca, B:262:0x05cc, B:264:0x05d8, B:267:0x05e2, B:269:0x0634, B:268:0x060b, B:270:0x063e, B:273:0x065a, B:301:0x06d1, B:303:0x06d7, B:306:0x06e3, B:309:0x06f7, B:311:0x0700, B:315:0x070d, B:317:0x0715, B:320:0x072c, B:322:0x0732, B:326:0x074a, B:332:0x0758, B:334:0x0761, B:336:0x0770, B:339:0x077a, B:341:0x07b1, B:340:0x0787, B:342:0x07b6, B:346:0x07d2), top: B:371:0x00cc }] */
    /* JADX WARN: Removed duplicated region for block: B:158:0x032e  */
    /* JADX WARN: Removed duplicated region for block: B:164:0x0364  */
    /* JADX WARN: Removed duplicated region for block: B:167:0x0374 A[Catch: all -> 0x00ac, Exception -> 0x00b2, TRY_ENTER, TRY_LEAVE, TryCatch #7 {Exception -> 0x00b2, all -> 0x00ac, blocks: (B:28:0x0092, B:80:0x0171, B:110:0x020a, B:167:0x0374, B:221:0x0478, B:280:0x0670, B:282:0x067a, B:284:0x067e, B:290:0x0694), top: B:377:0x0092 }] */
    /* JADX WARN: Removed duplicated region for block: B:216:0x046a  */
    /* JADX WARN: Removed duplicated region for block: B:219:0x0474  */
    /* JADX WARN: Removed duplicated region for block: B:270:0x063e A[Catch: all -> 0x07d8, Exception -> 0x07de, LOOP:6: B:232:0x04c3->B:270:0x063e, LOOP_END, TryCatch #10 {Exception -> 0x07de, all -> 0x07d8, blocks: (B:36:0x00cc, B:38:0x00d2, B:41:0x00f0, B:44:0x00fb, B:46:0x0101, B:60:0x0119, B:62:0x0123, B:66:0x012f, B:68:0x013a, B:72:0x0147, B:74:0x0155, B:76:0x0162, B:112:0x022a, B:114:0x0230, B:117:0x0244, B:119:0x024b, B:123:0x025c, B:125:0x0266, B:128:0x027f, B:130:0x0285, B:134:0x029d, B:141:0x02ad, B:143:0x02b8, B:146:0x02cb, B:159:0x0336, B:149:0x02da, B:151:0x02e8, B:154:0x02f2, B:156:0x0326, B:155:0x02fd, B:162:0x0358, B:168:0x0390, B:170:0x0396, B:175:0x03af, B:177:0x03b7, B:180:0x03ce, B:182:0x03d4, B:203:0x0429, B:184:0x03e9, B:186:0x03f0, B:189:0x0401, B:196:0x0419, B:201:0x0423, B:205:0x0431, B:207:0x0435, B:209:0x043b, B:211:0x0441, B:214:0x0462, B:222:0x0496, B:224:0x049c, B:227:0x04b0, B:229:0x04b9, B:233:0x04c5, B:235:0x04cd, B:238:0x04e4, B:240:0x04ea, B:244:0x0502, B:249:0x050d, B:251:0x0514, B:253:0x0523, B:255:0x0529, B:259:0x053b, B:261:0x05ca, B:262:0x05cc, B:264:0x05d8, B:267:0x05e2, B:269:0x0634, B:268:0x060b, B:270:0x063e, B:273:0x065a, B:301:0x06d1, B:303:0x06d7, B:306:0x06e3, B:309:0x06f7, B:311:0x0700, B:315:0x070d, B:317:0x0715, B:320:0x072c, B:322:0x0732, B:326:0x074a, B:332:0x0758, B:334:0x0761, B:336:0x0770, B:339:0x077a, B:341:0x07b1, B:340:0x0787, B:342:0x07b6, B:346:0x07d2), top: B:371:0x00cc }] */
    /* JADX WARN: Removed duplicated region for block: B:279:0x066e  */
    /* JADX WARN: Removed duplicated region for block: B:290:0x0694 A[Catch: all -> 0x00ac, Exception -> 0x00b2, TRY_ENTER, TRY_LEAVE, TryCatch #7 {Exception -> 0x00b2, all -> 0x00ac, blocks: (B:28:0x0092, B:80:0x0171, B:110:0x020a, B:167:0x0374, B:221:0x0478, B:280:0x0670, B:282:0x067a, B:284:0x067e, B:290:0x0694), top: B:377:0x0092 }] */
    /* JADX WARN: Removed duplicated region for block: B:294:0x06ba  */
    /* JADX WARN: Removed duplicated region for block: B:303:0x06d7 A[Catch: all -> 0x07d8, Exception -> 0x07de, TryCatch #10 {Exception -> 0x07de, all -> 0x07d8, blocks: (B:36:0x00cc, B:38:0x00d2, B:41:0x00f0, B:44:0x00fb, B:46:0x0101, B:60:0x0119, B:62:0x0123, B:66:0x012f, B:68:0x013a, B:72:0x0147, B:74:0x0155, B:76:0x0162, B:112:0x022a, B:114:0x0230, B:117:0x0244, B:119:0x024b, B:123:0x025c, B:125:0x0266, B:128:0x027f, B:130:0x0285, B:134:0x029d, B:141:0x02ad, B:143:0x02b8, B:146:0x02cb, B:159:0x0336, B:149:0x02da, B:151:0x02e8, B:154:0x02f2, B:156:0x0326, B:155:0x02fd, B:162:0x0358, B:168:0x0390, B:170:0x0396, B:175:0x03af, B:177:0x03b7, B:180:0x03ce, B:182:0x03d4, B:203:0x0429, B:184:0x03e9, B:186:0x03f0, B:189:0x0401, B:196:0x0419, B:201:0x0423, B:205:0x0431, B:207:0x0435, B:209:0x043b, B:211:0x0441, B:214:0x0462, B:222:0x0496, B:224:0x049c, B:227:0x04b0, B:229:0x04b9, B:233:0x04c5, B:235:0x04cd, B:238:0x04e4, B:240:0x04ea, B:244:0x0502, B:249:0x050d, B:251:0x0514, B:253:0x0523, B:255:0x0529, B:259:0x053b, B:261:0x05ca, B:262:0x05cc, B:264:0x05d8, B:267:0x05e2, B:269:0x0634, B:268:0x060b, B:270:0x063e, B:273:0x065a, B:301:0x06d1, B:303:0x06d7, B:306:0x06e3, B:309:0x06f7, B:311:0x0700, B:315:0x070d, B:317:0x0715, B:320:0x072c, B:322:0x0732, B:326:0x074a, B:332:0x0758, B:334:0x0761, B:336:0x0770, B:339:0x077a, B:341:0x07b1, B:340:0x0787, B:342:0x07b6, B:346:0x07d2), top: B:371:0x00cc }] */
    /* JADX WARN: Removed duplicated region for block: B:342:0x07b6 A[Catch: all -> 0x07d8, Exception -> 0x07de, LOOP:10: B:314:0x070b->B:342:0x07b6, LOOP_END, TryCatch #10 {Exception -> 0x07de, all -> 0x07d8, blocks: (B:36:0x00cc, B:38:0x00d2, B:41:0x00f0, B:44:0x00fb, B:46:0x0101, B:60:0x0119, B:62:0x0123, B:66:0x012f, B:68:0x013a, B:72:0x0147, B:74:0x0155, B:76:0x0162, B:112:0x022a, B:114:0x0230, B:117:0x0244, B:119:0x024b, B:123:0x025c, B:125:0x0266, B:128:0x027f, B:130:0x0285, B:134:0x029d, B:141:0x02ad, B:143:0x02b8, B:146:0x02cb, B:159:0x0336, B:149:0x02da, B:151:0x02e8, B:154:0x02f2, B:156:0x0326, B:155:0x02fd, B:162:0x0358, B:168:0x0390, B:170:0x0396, B:175:0x03af, B:177:0x03b7, B:180:0x03ce, B:182:0x03d4, B:203:0x0429, B:184:0x03e9, B:186:0x03f0, B:189:0x0401, B:196:0x0419, B:201:0x0423, B:205:0x0431, B:207:0x0435, B:209:0x043b, B:211:0x0441, B:214:0x0462, B:222:0x0496, B:224:0x049c, B:227:0x04b0, B:229:0x04b9, B:233:0x04c5, B:235:0x04cd, B:238:0x04e4, B:240:0x04ea, B:244:0x0502, B:249:0x050d, B:251:0x0514, B:253:0x0523, B:255:0x0529, B:259:0x053b, B:261:0x05ca, B:262:0x05cc, B:264:0x05d8, B:267:0x05e2, B:269:0x0634, B:268:0x060b, B:270:0x063e, B:273:0x065a, B:301:0x06d1, B:303:0x06d7, B:306:0x06e3, B:309:0x06f7, B:311:0x0700, B:315:0x070d, B:317:0x0715, B:320:0x072c, B:322:0x0732, B:326:0x074a, B:332:0x0758, B:334:0x0761, B:336:0x0770, B:339:0x077a, B:341:0x07b1, B:340:0x0787, B:342:0x07b6, B:346:0x07d2), top: B:371:0x00cc }] */
    /* JADX WARN: Removed duplicated region for block: B:358:0x07f6  */
    /* JADX WARN: Removed duplicated region for block: B:363:0x07fe  */
    /* JADX WARN: Removed duplicated region for block: B:420:0x050d A[SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:433:0x0758 A[SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:435:? A[RETURN, SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void localSearch(int i, String str, ArrayList<Object> arrayList, ArrayList<CharSequence> arrayList2, ArrayList<TLRPC$User> arrayList3, ArrayList<Long> arrayList4, int i2) {
        Throwable th;
        SQLiteCursor sQLiteCursor;
        Exception exc;
        Throwable th2;
        String str2;
        String str3;
        String str4;
        SQLiteCursor queryFinalized;
        String str5;
        MessagesStorage messagesStorage;
        int i3;
        ArrayList arrayList5;
        LongSparseArray longSparseArray;
        String str6;
        int i4;
        int i5;
        LongSparseArray longSparseArray2;
        LongSparseArray longSparseArray3;
        ArrayList arrayList6;
        int i6;
        int i7;
        SQLiteCursor queryFinalized2;
        LongSparseArray longSparseArray4;
        char c;
        Object obj;
        LongSparseArray longSparseArray5;
        int i8;
        TLRPC$EncryptedChat tLRPC$EncryptedChat;
        TLRPC$User tLRPC$User;
        LongSparseArray longSparseArray6;
        String str7;
        String str8;
        ArrayList arrayList7;
        LongSparseArray longSparseArray7;
        int i9;
        char c2;
        String str9;
        String str10;
        LongSparseArray longSparseArray8;
        String str11;
        TLRPC$User user;
        MessagesStorage messagesStorage2 = this;
        long clientUserId = UserConfig.getInstance(messagesStorage2.currentAccount).getClientUserId();
        try {
            String lowerCase = str.trim().toLowerCase();
            if (TextUtils.isEmpty(lowerCase)) {
                return;
            }
            String lowerCase2 = LocaleController.getString("SavedMessages", R.string.SavedMessages).toLowerCase();
            String str12 = "saved messages";
            String lowerCase3 = LocaleController.getString("RepliesTitle", R.string.RepliesTitle).toLowerCase();
            String translitString = LocaleController.getInstance().getTranslitString(lowerCase);
            if (!lowerCase.equals(translitString)) {
                try {
                } catch (Exception e) {
                    exc = e;
                    sQLiteCursor = null;
                    try {
                        messagesStorage2.checkSQLException(exc);
                        if (sQLiteCursor == null) {
                        }
                    } catch (Throwable th3) {
                        th2 = th3;
                        th = th2;
                        if (sQLiteCursor != null) {
                            sQLiteCursor.dispose();
                        }
                        throw th;
                    }
                } catch (Throwable th4) {
                    th = th4;
                    sQLiteCursor = null;
                    if (sQLiteCursor != null) {
                    }
                    throw th;
                }
            }
            translitString = null;
            int i10 = 1 + (translitString != null ? 1 : 0);
            String[] strArr = new String[i10];
            strArr[0] = lowerCase;
            if (translitString != null) {
                strArr[1] = translitString;
            }
            ArrayList arrayList8 = new ArrayList();
            ArrayList arrayList9 = new ArrayList();
            String[] strArr2 = strArr;
            ArrayList arrayList10 = new ArrayList();
            int i11 = i10;
            LongSparseArray longSparseArray9 = new LongSparseArray();
            if (i2 >= 0) {
                str2 = "RepliesTitle";
                try {
                    str4 = "replies";
                    str3 = lowerCase3;
                    queryFinalized = getDatabase().queryFinalized("SELECT did, date FROM dialogs WHERE folder_id = ? ORDER BY date DESC LIMIT 600", Integer.valueOf(i2));
                } catch (Exception e2) {
                    sQLiteCursor = null;
                    messagesStorage2 = this;
                    exc = e2;
                    messagesStorage2.checkSQLException(exc);
                    if (sQLiteCursor == null) {
                    }
                } catch (Throwable th5) {
                    th2 = th5;
                    sQLiteCursor = null;
                    th = th2;
                    if (sQLiteCursor != null) {
                    }
                    throw th;
                }
            } else {
                str2 = "RepliesTitle";
                str3 = lowerCase3;
                str4 = "replies";
                queryFinalized = getDatabase().queryFinalized("SELECT did, date FROM dialogs ORDER BY date DESC LIMIT 600", new Object[0]);
            }
            while (queryFinalized.next()) {
                try {
                    long longValue = queryFinalized.longValue(0);
                    DialogsSearchAdapter.DialogSearchResult dialogSearchResult = new DialogsSearchAdapter.DialogSearchResult();
                    String str13 = lowerCase;
                    String str14 = str12;
                    dialogSearchResult.date = queryFinalized.intValue(1);
                    longSparseArray9.put(longValue, dialogSearchResult);
                    if (i != 15 || (arrayList4 != null && arrayList4.contains(Long.valueOf(longValue)))) {
                        if (DialogObject.isEncryptedDialog(longValue)) {
                            if (i == 0 || i == 3) {
                                int encryptedChatId = DialogObject.getEncryptedChatId(longValue);
                                if (!arrayList10.contains(Integer.valueOf(encryptedChatId))) {
                                    arrayList10.add(Integer.valueOf(encryptedChatId));
                                }
                            }
                        } else if (DialogObject.isUserDialog(longValue)) {
                            if ((i != 4 || longValue != clientUserId) && i != 6 && i != 5 && i != 2 && !arrayList8.contains(Long.valueOf(longValue))) {
                                arrayList8.add(Long.valueOf(longValue));
                            }
                        } else if (i != 4) {
                            long j = -longValue;
                            if (!arrayList9.contains(Long.valueOf(j))) {
                                arrayList9.add(Long.valueOf(j));
                            }
                        }
                    }
                    str12 = str14;
                    lowerCase = str13;
                } catch (Exception e3) {
                    exc = e3;
                    sQLiteCursor = queryFinalized;
                    messagesStorage2 = this;
                    messagesStorage2.checkSQLException(exc);
                    if (sQLiteCursor == null) {
                    }
                } catch (Throwable th6) {
                    th = th6;
                    sQLiteCursor = queryFinalized;
                    if (sQLiteCursor != null) {
                    }
                    throw th;
                }
            }
            String str15 = lowerCase;
            String str16 = str12;
            queryFinalized.dispose();
            if (i != 4) {
                str5 = str15;
            } else {
                str5 = str15;
            }
            try {
                if (!str16.startsWith(str5)) {
                    messagesStorage = this;
                    i3 = 0;
                    if ((i != 4 && str3.startsWith(str5)) || str4.startsWith(str5)) {
                        user = getMessagesController().getUser(708513L);
                        if (user == null) {
                            user = getMessagesController().getUser(1271266957L);
                        }
                        if (user != null) {
                            DialogsSearchAdapter.DialogSearchResult dialogSearchResult2 = new DialogsSearchAdapter.DialogSearchResult();
                            dialogSearchResult2.date = ConnectionsManager.DEFAULT_DATACENTER_ID;
                            dialogSearchResult2.name = LocaleController.getString(str2, R.string.RepliesTitle);
                            dialogSearchResult2.object = user;
                            longSparseArray9.put(user.id, dialogSearchResult2);
                            i3++;
                        }
                    }
                    String str17 = ";;;";
                    if (arrayList8.isEmpty()) {
                        arrayList5 = arrayList10;
                        longSparseArray = longSparseArray9;
                        str6 = ";;;";
                        i4 = i11;
                    } else {
                        int i12 = i3;
                        SQLiteCursor queryFinalized3 = getDatabase().queryFinalized(String.format(Locale.US, "SELECT data, status, name FROM users WHERE uid IN(%s)", TextUtils.join(",", arrayList8)), new Object[0]);
                        i3 = i12;
                        while (queryFinalized3.next()) {
                            String stringValue = queryFinalized3.stringValue(2);
                            String translitString2 = LocaleController.getInstance().getTranslitString(stringValue);
                            if (stringValue.equals(translitString2)) {
                                translitString2 = null;
                            }
                            int lastIndexOf = stringValue.lastIndexOf(str17);
                            String substring = lastIndexOf != -1 ? stringValue.substring(lastIndexOf + 3) : null;
                            String str18 = str17;
                            int i13 = i11;
                            int i14 = 0;
                            char c3 = 0;
                            while (true) {
                                if (i14 >= i13) {
                                    arrayList7 = arrayList10;
                                    longSparseArray7 = longSparseArray9;
                                    i9 = i13;
                                    break;
                                }
                                arrayList7 = arrayList10;
                                String str19 = strArr2[i14];
                                if (stringValue.startsWith(str19)) {
                                    i9 = i13;
                                } else {
                                    i9 = i13;
                                    if (!stringValue.contains(" " + str19)) {
                                        if (translitString2 != null) {
                                            if (!translitString2.startsWith(str19)) {
                                                if (translitString2.contains(" " + str19)) {
                                                }
                                            }
                                        }
                                        c2 = (substring == null || !substring.startsWith(str19)) ? c3 : (char) 2;
                                        if (c2 == 0) {
                                            str9 = translitString2;
                                            str10 = stringValue;
                                            NativeByteBuffer byteBufferValue = queryFinalized3.byteBufferValue(0);
                                            if (byteBufferValue == null) {
                                                longSparseArray7 = longSparseArray9;
                                                break;
                                            }
                                            str11 = substring;
                                            TLRPC$User TLdeserialize = TLRPC$User.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                                            byteBufferValue.reuse();
                                            if (i != 15 || (arrayList4 != null && arrayList4.contains(Long.valueOf(TLdeserialize.id)))) {
                                                break;
                                            }
                                            longSparseArray8 = longSparseArray9;
                                        } else {
                                            str9 = translitString2;
                                            str10 = stringValue;
                                            longSparseArray8 = longSparseArray9;
                                            str11 = substring;
                                        }
                                        i14++;
                                        translitString2 = str9;
                                        stringValue = str10;
                                        arrayList10 = arrayList7;
                                        substring = str11;
                                        longSparseArray9 = longSparseArray8;
                                        c3 = c2;
                                        i13 = i9;
                                    }
                                }
                                c2 = 1;
                                if (c2 == 0) {
                                }
                                i14++;
                                translitString2 = str9;
                                stringValue = str10;
                                arrayList10 = arrayList7;
                                substring = str11;
                                longSparseArray9 = longSparseArray8;
                                c3 = c2;
                                i13 = i9;
                            }
                            str17 = str18;
                            arrayList10 = arrayList7;
                            i11 = i9;
                            longSparseArray9 = longSparseArray7;
                        }
                        arrayList5 = arrayList10;
                        longSparseArray = longSparseArray9;
                        str6 = str17;
                        i4 = i11;
                        queryFinalized3.dispose();
                    }
                    if (arrayList9.isEmpty()) {
                        i5 = i4;
                        longSparseArray2 = longSparseArray;
                    } else {
                        SQLiteCursor queryFinalized4 = getDatabase().queryFinalized(String.format(Locale.US, "SELECT data, name FROM chats WHERE uid IN(%s)", TextUtils.join(",", arrayList9)), new Object[0]);
                        while (queryFinalized4.next()) {
                            String stringValue2 = queryFinalized4.stringValue(1);
                            String translitString3 = LocaleController.getInstance().getTranslitString(stringValue2);
                            if (stringValue2.equals(translitString3)) {
                                translitString3 = null;
                            }
                            int i15 = i4;
                            int i16 = 0;
                            while (i16 < i15) {
                                String str20 = strArr2[i16];
                                if (!stringValue2.startsWith(str20)) {
                                    if (!stringValue2.contains(" " + str20)) {
                                        if (translitString3 != null) {
                                            if (!translitString3.startsWith(str20)) {
                                            }
                                        }
                                        str7 = translitString3;
                                        str8 = stringValue2;
                                        i16++;
                                        stringValue2 = str8;
                                        translitString3 = str7;
                                    }
                                }
                                NativeByteBuffer byteBufferValue2 = queryFinalized4.byteBufferValue(0);
                                if (byteBufferValue2 == null) {
                                    break;
                                }
                                TLRPC$Chat TLdeserialize2 = TLRPC$Chat.TLdeserialize(byteBufferValue2, byteBufferValue2.readInt32(false), false);
                                byteBufferValue2.reuse();
                                if (i == 15) {
                                    if (arrayList4 != null) {
                                        str7 = translitString3;
                                        str8 = stringValue2;
                                        if (!arrayList4.contains(Long.valueOf(-TLdeserialize2.id))) {
                                            i16++;
                                            stringValue2 = str8;
                                            translitString3 = str7;
                                        }
                                    }
                                    str7 = translitString3;
                                    str8 = stringValue2;
                                    i16++;
                                    stringValue2 = str8;
                                    translitString3 = str7;
                                } else {
                                    str7 = translitString3;
                                    str8 = stringValue2;
                                }
                                if ((i != 6 || !ChatObject.isChannelAndNotMegaGroup(TLdeserialize2)) && (i != 5 || ChatObject.isChannelAndNotMegaGroup(TLdeserialize2))) {
                                    if (TLdeserialize2 != null && !TLdeserialize2.deactivated && (!ChatObject.isChannel(TLdeserialize2) || !ChatObject.isNotInChat(TLdeserialize2))) {
                                        longSparseArray6 = longSparseArray;
                                        DialogsSearchAdapter.DialogSearchResult dialogSearchResult3 = (DialogsSearchAdapter.DialogSearchResult) longSparseArray6.get(-TLdeserialize2.id);
                                        dialogSearchResult3.name = AndroidUtilities.generateSearchName(TLdeserialize2.title, null, str20);
                                        dialogSearchResult3.object = TLdeserialize2;
                                        i3++;
                                        longSparseArray = longSparseArray6;
                                        i4 = i15;
                                    }
                                }
                                i16++;
                                stringValue2 = str8;
                                translitString3 = str7;
                            }
                            longSparseArray6 = longSparseArray;
                            longSparseArray = longSparseArray6;
                            i4 = i15;
                        }
                        i5 = i4;
                        longSparseArray2 = longSparseArray;
                        queryFinalized4.dispose();
                    }
                    if (!arrayList5.isEmpty() || i == 15) {
                        longSparseArray3 = longSparseArray2;
                    } else {
                        SQLiteCursor queryFinalized5 = getDatabase().queryFinalized(String.format(Locale.US, "SELECT q.data, u.name, q.user, q.g, q.authkey, q.ttl, u.data, u.status, q.layer, q.seq_in, q.seq_out, q.use_count, q.exchange_id, q.key_date, q.fprint, q.fauthkey, q.khash, q.in_seq_no, q.admin_id, q.mtproto_seq FROM enc_chats as q INNER JOIN users as u ON q.user = u.uid WHERE q.uid IN(%s)", TextUtils.join(",", arrayList5)), new Object[0]);
                        while (queryFinalized5.next()) {
                            String stringValue3 = queryFinalized5.stringValue(1);
                            String translitString4 = LocaleController.getInstance().getTranslitString(stringValue3);
                            if (stringValue3.equals(translitString4)) {
                                translitString4 = null;
                            }
                            String str21 = str6;
                            int lastIndexOf2 = stringValue3.lastIndexOf(str21);
                            String substring2 = lastIndexOf2 != -1 ? stringValue3.substring(lastIndexOf2 + 2) : null;
                            char c4 = 0;
                            int i17 = 0;
                            while (true) {
                                if (i17 >= i5) {
                                    break;
                                }
                                String str22 = strArr2[i17];
                                if (!stringValue3.startsWith(str22)) {
                                    if (!stringValue3.contains(" " + str22)) {
                                        if (translitString4 != null) {
                                            if (!translitString4.startsWith(str22)) {
                                                if (translitString4.contains(" " + str22)) {
                                                }
                                            }
                                        }
                                        if (substring2 != null && substring2.startsWith(str22)) {
                                            c4 = 2;
                                        }
                                        if (c4 == 0) {
                                            NativeByteBuffer byteBufferValue3 = queryFinalized5.byteBufferValue(0);
                                            if (byteBufferValue3 != null) {
                                                tLRPC$EncryptedChat = TLRPC$EncryptedChat.TLdeserialize(byteBufferValue3, byteBufferValue3.readInt32(false), false);
                                                byteBufferValue3.reuse();
                                                i8 = 6;
                                            } else {
                                                i8 = 6;
                                                tLRPC$EncryptedChat = null;
                                            }
                                            NativeByteBuffer byteBufferValue4 = queryFinalized5.byteBufferValue(i8);
                                            if (byteBufferValue4 != null) {
                                                tLRPC$User = TLRPC$User.TLdeserialize(byteBufferValue4, byteBufferValue4.readInt32(false), false);
                                                byteBufferValue4.reuse();
                                            } else {
                                                tLRPC$User = null;
                                            }
                                            if (tLRPC$EncryptedChat != null && tLRPC$User != null) {
                                                DialogsSearchAdapter.DialogSearchResult dialogSearchResult4 = (DialogsSearchAdapter.DialogSearchResult) longSparseArray2.get(DialogObject.makeEncryptedDialogId(tLRPC$EncryptedChat.id));
                                                str6 = str21;
                                                longSparseArray5 = longSparseArray2;
                                                tLRPC$EncryptedChat.user_id = queryFinalized5.longValue(2);
                                                tLRPC$EncryptedChat.a_or_b = queryFinalized5.byteArrayValue(3);
                                                tLRPC$EncryptedChat.auth_key = queryFinalized5.byteArrayValue(4);
                                                tLRPC$EncryptedChat.ttl = queryFinalized5.intValue(5);
                                                tLRPC$EncryptedChat.layer = queryFinalized5.intValue(8);
                                                tLRPC$EncryptedChat.seq_in = queryFinalized5.intValue(9);
                                                tLRPC$EncryptedChat.seq_out = queryFinalized5.intValue(10);
                                                int intValue = queryFinalized5.intValue(11);
                                                tLRPC$EncryptedChat.key_use_count_in = (short) (intValue >> 16);
                                                tLRPC$EncryptedChat.key_use_count_out = (short) intValue;
                                                tLRPC$EncryptedChat.exchange_id = queryFinalized5.longValue(12);
                                                tLRPC$EncryptedChat.key_create_date = queryFinalized5.intValue(13);
                                                tLRPC$EncryptedChat.future_key_fingerprint = queryFinalized5.longValue(14);
                                                tLRPC$EncryptedChat.future_auth_key = queryFinalized5.byteArrayValue(15);
                                                tLRPC$EncryptedChat.key_hash = queryFinalized5.byteArrayValue(16);
                                                tLRPC$EncryptedChat.in_seq_no = queryFinalized5.intValue(17);
                                                long longValue2 = queryFinalized5.longValue(18);
                                                if (longValue2 != 0) {
                                                    tLRPC$EncryptedChat.admin_id = longValue2;
                                                }
                                                tLRPC$EncryptedChat.mtproto_seq = queryFinalized5.intValue(19);
                                                TLRPC$UserStatus tLRPC$UserStatus = tLRPC$User.status;
                                                if (tLRPC$UserStatus != null) {
                                                    tLRPC$UserStatus.expires = queryFinalized5.intValue(7);
                                                }
                                                if (c4 == 1) {
                                                    SpannableStringBuilder spannableStringBuilder = new SpannableStringBuilder(ContactsController.formatName(tLRPC$User.first_name, tLRPC$User.last_name));
                                                    dialogSearchResult4.name = spannableStringBuilder;
                                                    spannableStringBuilder.setSpan(new ForegroundColorSpan(Theme.getColor("chats_secretName")), 0, dialogSearchResult4.name.length(), 33);
                                                } else {
                                                    dialogSearchResult4.name = AndroidUtilities.generateSearchName("@" + UserObject.getPublicUsername(tLRPC$User), null, "@" + str22);
                                                }
                                                dialogSearchResult4.object = tLRPC$EncryptedChat;
                                                arrayList3.add(tLRPC$User);
                                                i3++;
                                            }
                                        } else {
                                            i17++;
                                            str21 = str21;
                                        }
                                    }
                                }
                                c4 = 1;
                                if (c4 == 0) {
                                }
                            }
                            str6 = str21;
                            longSparseArray5 = longSparseArray2;
                            longSparseArray2 = longSparseArray5;
                        }
                        longSparseArray3 = longSparseArray2;
                        queryFinalized5.dispose();
                    }
                    arrayList6 = new ArrayList(i3);
                    i6 = 0;
                    while (i6 < longSparseArray3.size()) {
                        LongSparseArray longSparseArray10 = longSparseArray3;
                        DialogsSearchAdapter.DialogSearchResult dialogSearchResult5 = (DialogsSearchAdapter.DialogSearchResult) longSparseArray10.valueAt(i6);
                        if (dialogSearchResult5.object != null && dialogSearchResult5.name != null) {
                            arrayList6.add(dialogSearchResult5);
                        }
                        i6++;
                        longSparseArray3 = longSparseArray10;
                    }
                    LongSparseArray longSparseArray11 = longSparseArray3;
                    Collections.sort(arrayList6, MessagesStorage$$ExternalSyntheticLambda216.INSTANCE);
                    i7 = 0;
                    while (i7 < arrayList6.size()) {
                        DialogsSearchAdapter.DialogSearchResult dialogSearchResult6 = (DialogsSearchAdapter.DialogSearchResult) arrayList6.get(i7);
                        arrayList.add(dialogSearchResult6.object);
                        String[] strArr3 = strArr2;
                        arrayList2.add(dialogSearchResult6.name);
                        i7++;
                        strArr2 = strArr3;
                    }
                    String[] strArr4 = strArr2;
                    if (i != 2 && i != 15 && i != 6 && i != 5) {
                        queryFinalized2 = getDatabase().queryFinalized("SELECT u.data, u.status, u.name, u.uid FROM users as u INNER JOIN contacts as c ON u.uid = c.uid", new Object[0]);
                        while (queryFinalized2.next()) {
                            if (longSparseArray11.indexOfKey(queryFinalized2.longValue(3)) < 0) {
                                String stringValue4 = queryFinalized2.stringValue(2);
                                String translitString5 = LocaleController.getInstance().getTranslitString(stringValue4);
                                if (stringValue4.equals(translitString5)) {
                                    translitString5 = null;
                                }
                                String str23 = str6;
                                int lastIndexOf3 = stringValue4.lastIndexOf(str23);
                                String substring3 = lastIndexOf3 != -1 ? stringValue4.substring(lastIndexOf3 + 3) : null;
                                int i18 = 0;
                                char c5 = 0;
                                while (true) {
                                    if (i18 >= i5) {
                                        longSparseArray4 = longSparseArray11;
                                        break;
                                    }
                                    String str24 = strArr4[i18];
                                    if (!stringValue4.startsWith(str24)) {
                                        if (!stringValue4.contains(" " + str24)) {
                                            if (translitString5 != null) {
                                                if (!translitString5.startsWith(str24)) {
                                                    if (translitString5.contains(" " + str24)) {
                                                    }
                                                }
                                            }
                                            c = (substring3 == null || !substring3.startsWith(str24)) ? c5 : (char) 2;
                                            if (c == 0) {
                                                longSparseArray4 = longSparseArray11;
                                                NativeByteBuffer byteBufferValue5 = queryFinalized2.byteBufferValue(0);
                                                if (byteBufferValue5 != null) {
                                                    TLRPC$User TLdeserialize3 = TLRPC$User.TLdeserialize(byteBufferValue5, byteBufferValue5.readInt32(false), false);
                                                    byteBufferValue5.reuse();
                                                    TLRPC$UserStatus tLRPC$UserStatus2 = TLdeserialize3.status;
                                                    if (tLRPC$UserStatus2 != null) {
                                                        tLRPC$UserStatus2.expires = queryFinalized2.intValue(1);
                                                    }
                                                    if (c == 1) {
                                                        arrayList2.add(AndroidUtilities.generateSearchName(TLdeserialize3.first_name, TLdeserialize3.last_name, str24));
                                                        obj = null;
                                                    } else {
                                                        obj = null;
                                                        arrayList2.add(AndroidUtilities.generateSearchName("@" + UserObject.getPublicUsername(TLdeserialize3), null, "@" + str24));
                                                    }
                                                    arrayList.add(TLdeserialize3);
                                                }
                                            } else {
                                                i18++;
                                                c5 = c;
                                                longSparseArray11 = longSparseArray11;
                                            }
                                        }
                                    }
                                    c = 1;
                                    if (c == 0) {
                                    }
                                }
                                str6 = str23;
                                longSparseArray11 = longSparseArray4;
                            }
                        }
                        queryFinalized2.dispose();
                    }
                    return;
                }
                TLRPC$User currentUser = UserConfig.getInstance(messagesStorage.currentAccount).getCurrentUser();
                DialogsSearchAdapter.DialogSearchResult dialogSearchResult7 = new DialogsSearchAdapter.DialogSearchResult();
                dialogSearchResult7.date = ConnectionsManager.DEFAULT_DATACENTER_ID;
                dialogSearchResult7.name = lowerCase2;
                dialogSearchResult7.object = currentUser;
                longSparseArray9.put(currentUser.id, dialogSearchResult7);
                i3 = 1;
                if (i != 4) {
                    user = getMessagesController().getUser(708513L);
                    if (user == null) {
                    }
                    if (user != null) {
                    }
                    String str172 = ";;;";
                    if (arrayList8.isEmpty()) {
                    }
                    if (arrayList9.isEmpty()) {
                    }
                    if (arrayList5.isEmpty()) {
                    }
                    longSparseArray3 = longSparseArray2;
                    arrayList6 = new ArrayList(i3);
                    i6 = 0;
                    while (i6 < longSparseArray3.size()) {
                    }
                    LongSparseArray longSparseArray112 = longSparseArray3;
                    Collections.sort(arrayList6, MessagesStorage$$ExternalSyntheticLambda216.INSTANCE);
                    i7 = 0;
                    while (i7 < arrayList6.size()) {
                    }
                    String[] strArr42 = strArr2;
                    if (i != 2) {
                        queryFinalized2 = getDatabase().queryFinalized("SELECT u.data, u.status, u.name, u.uid FROM users as u INNER JOIN contacts as c ON u.uid = c.uid", new Object[0]);
                        while (queryFinalized2.next()) {
                        }
                        queryFinalized2.dispose();
                    }
                    return;
                }
                user = getMessagesController().getUser(708513L);
                if (user == null) {
                }
                if (user != null) {
                }
                String str1722 = ";;;";
                if (arrayList8.isEmpty()) {
                }
                if (arrayList9.isEmpty()) {
                }
                if (arrayList5.isEmpty()) {
                }
                longSparseArray3 = longSparseArray2;
                arrayList6 = new ArrayList(i3);
                i6 = 0;
                while (i6 < longSparseArray3.size()) {
                }
                LongSparseArray longSparseArray1122 = longSparseArray3;
                Collections.sort(arrayList6, MessagesStorage$$ExternalSyntheticLambda216.INSTANCE);
                i7 = 0;
                while (i7 < arrayList6.size()) {
                }
                String[] strArr422 = strArr2;
                if (i != 2) {
                }
                return;
            } catch (Exception e4) {
                exc = e4;
                messagesStorage2 = messagesStorage;
                sQLiteCursor = null;
                messagesStorage2.checkSQLException(exc);
                if (sQLiteCursor == null) {
                    sQLiteCursor.dispose();
                    return;
                }
                return;
            } catch (Throwable th7) {
                th = th7;
                sQLiteCursor = null;
                if (sQLiteCursor != null) {
                }
                throw th;
            }
            messagesStorage = this;
        } catch (Exception e5) {
            messagesStorage2 = this;
            exc = e5;
            sQLiteCursor = null;
        } catch (Throwable th8) {
            th = th8;
            sQLiteCursor = null;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ int lambda$localSearch$213(DialogsSearchAdapter.DialogSearchResult dialogSearchResult, DialogsSearchAdapter.DialogSearchResult dialogSearchResult2) {
        int i = dialogSearchResult.date;
        int i2 = dialogSearchResult2.date;
        if (i < i2) {
            return 1;
        }
        return i > i2 ? -1 : 0;
    }

    /* JADX WARN: Code restructure failed: missing block: B:16:0x004e, code lost:
        if (0 == 0) goto L11;
     */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public ArrayList<Integer> getCachedMessagesInRange(long j, int i, int i2) {
        ArrayList<Integer> arrayList = new ArrayList<>();
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                sQLiteCursor = this.database.queryFinalized(String.format(Locale.US, "SELECT mid FROM messages_v2 WHERE uid = %d AND date >= %d AND date <= %d", Long.valueOf(j), Integer.valueOf(i), Integer.valueOf(i2)), new Object[0]);
                while (sQLiteCursor.next()) {
                    try {
                        arrayList.add(Integer.valueOf(sQLiteCursor.intValue(0)));
                    } catch (Exception e) {
                        checkSQLException(e);
                    }
                }
                sQLiteCursor.dispose();
            } catch (Exception e2) {
                checkSQLException(e2);
            }
            sQLiteCursor.dispose();
            return arrayList;
        } catch (Throwable th) {
            if (0 != 0) {
                sQLiteCursor.dispose();
            }
            throw th;
        }
    }

    public void updateUnreadReactionsCount(long j, int i, int i2) {
        updateUnreadReactionsCount(j, i, i2, false);
    }

    public void updateUnreadReactionsCount(final long j, final int i, final int i2, final boolean z) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda67
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$updateUnreadReactionsCount$214(i, z, j, i2);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:26:0x0077  */
    /* JADX WARN: Removed duplicated region for block: B:28:0x007d  */
    /* JADX WARN: Removed duplicated region for block: B:62:? A[RETURN, SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$updateUnreadReactionsCount$214(int i, boolean z, long j, int i2) {
        SQLitePreparedStatement executeFast;
        int intValue;
        Throwable th;
        SQLiteException e;
        SQLitePreparedStatement sQLitePreparedStatement = null;
        try {
            if (i != 0) {
                if (z) {
                    try {
                        try {
                            SQLiteCursor queryFinalized = this.database.queryFinalized(String.format("SELECT unread_reactions FROM topics WHERE did = %d AND topic_id = %d", Long.valueOf(j), Integer.valueOf(i)), new Object[0]);
                            intValue = queryFinalized.next() ? queryFinalized.intValue(0) : 0;
                            queryFinalized.dispose();
                        } catch (SQLiteException e2) {
                            e = e2;
                            e.printStackTrace();
                            if (sQLitePreparedStatement == null) {
                                sQLitePreparedStatement.dispose();
                                return;
                            }
                            return;
                        }
                    } catch (Throwable th2) {
                        th = th2;
                        if (sQLitePreparedStatement != null) {
                            sQLitePreparedStatement.dispose();
                        }
                        throw th;
                    }
                } else {
                    intValue = 0;
                }
                SQLitePreparedStatement executeFast2 = this.database.executeFast("UPDATE topics SET unread_reactions = ? WHERE did = ? AND topic_id = ?");
                try {
                    executeFast2.bindInteger(1, Math.max(intValue + i2, 0));
                    executeFast2.bindLong(2, j);
                    executeFast2.bindInteger(3, i);
                    executeFast2.step();
                    executeFast2.dispose();
                    if (i2 == 0) {
                        sQLitePreparedStatement = this.database.executeFast("UPDATE reaction_mentions_topics SET state = 0 WHERE dialog_id = ? AND topic_id = ? ");
                        sQLitePreparedStatement.bindLong(1, j);
                        sQLitePreparedStatement.bindInteger(2, i);
                        sQLitePreparedStatement.step();
                        sQLitePreparedStatement.dispose();
                    }
                } catch (SQLiteException e3) {
                    e = e3;
                    sQLitePreparedStatement = executeFast2;
                    e.printStackTrace();
                    if (sQLitePreparedStatement == null) {
                    }
                } catch (Throwable th3) {
                    th = th3;
                    sQLitePreparedStatement = executeFast2;
                    if (sQLitePreparedStatement != null) {
                    }
                    throw th;
                }
            } else {
                try {
                    executeFast = this.database.executeFast("UPDATE dialogs SET unread_reactions = ? WHERE did = ?");
                } catch (SQLiteException e4) {
                    e = e4;
                }
                try {
                    executeFast.bindInteger(1, Math.max(i2, 0));
                    executeFast.bindLong(2, j);
                    executeFast.step();
                    executeFast.dispose();
                    if (i2 == 0) {
                        sQLitePreparedStatement = this.database.executeFast("UPDATE reaction_mentions SET state = 0 WHERE dialog_id = ?");
                        sQLitePreparedStatement.bindLong(1, j);
                        sQLitePreparedStatement.step();
                        sQLitePreparedStatement.dispose();
                    }
                } catch (SQLiteException e5) {
                    sQLitePreparedStatement = executeFast;
                    e = e5;
                    e.printStackTrace();
                    if (sQLitePreparedStatement != null) {
                        sQLitePreparedStatement.dispose();
                    }
                } catch (Throwable th4) {
                    sQLitePreparedStatement = executeFast;
                    th = th4;
                    if (sQLitePreparedStatement != null) {
                        sQLitePreparedStatement.dispose();
                    }
                    throw th;
                }
            }
        } catch (Throwable th5) {
            th = th5;
        }
    }

    public void markMessageReactionsAsRead(final long j, final int i, final int i2, boolean z) {
        if (z) {
            getStorageQueue().postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda75
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesStorage.this.lambda$markMessageReactionsAsRead$215(j, i, i2);
                }
            });
        } else {
            lambda$markMessageReactionsAsRead$215(j, i, i2);
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:56:0x0161  */
    /* JADX WARN: Removed duplicated region for block: B:58:0x0166  */
    /* JADX WARN: Removed duplicated region for block: B:61:0x016d  */
    /* JADX WARN: Removed duplicated region for block: B:63:0x0172  */
    /* JADX WARN: Removed duplicated region for block: B:83:? A[RETURN, SYNTHETIC] */
    /* renamed from: markMessageReactionsAsReadInternal */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void lambda$markMessageReactionsAsRead$215(long j, int i, int i2) {
        SQLiteCursor sQLiteCursor;
        TLRPC$Message tLRPC$Message;
        SQLitePreparedStatement executeFast;
        NativeByteBuffer byteBufferValue;
        SQLitePreparedStatement sQLitePreparedStatement = null;
        SQLitePreparedStatement sQLitePreparedStatement2 = null;
        int i3 = 0;
        while (i3 < 2) {
            boolean z = i3 == 1;
            if (!z || i != 0) {
                if (!z) {
                    try {
                        try {
                            sQLitePreparedStatement2 = getMessagesStorage().getDatabase().executeFast("UPDATE reaction_mentions SET state = 0 WHERE message_id = ? AND dialog_id = ?");
                            sQLitePreparedStatement2.bindInteger(1, i2);
                            sQLitePreparedStatement2.bindLong(2, j);
                            sQLitePreparedStatement2.step();
                            sQLitePreparedStatement2.dispose();
                        } catch (SQLiteException e) {
                            e = e;
                            SQLitePreparedStatement sQLitePreparedStatement3 = sQLitePreparedStatement2;
                            sQLiteCursor = null;
                            sQLitePreparedStatement = sQLitePreparedStatement3;
                        }
                    } catch (Throwable th) {
                        th = th;
                        SQLitePreparedStatement sQLitePreparedStatement4 = sQLitePreparedStatement2;
                        sQLiteCursor = null;
                        sQLitePreparedStatement = sQLitePreparedStatement4;
                    }
                    try {
                        sQLiteCursor = this.database.queryFinalized(String.format(Locale.US, "SELECT data FROM messages_v2 WHERE uid = %d AND mid = %d", Long.valueOf(j), Integer.valueOf(i2)), new Object[0]);
                    } catch (SQLiteException e2) {
                        e = e2;
                        sQLiteCursor = null;
                        checkSQLException(e);
                        if (sQLitePreparedStatement != null) {
                        }
                        if (sQLiteCursor == null) {
                        }
                    } catch (Throwable th2) {
                        th = th2;
                        sQLiteCursor = null;
                        if (sQLitePreparedStatement != null) {
                        }
                        if (sQLiteCursor != null) {
                        }
                        throw th;
                    }
                } else {
                    SQLitePreparedStatement executeFast2 = getMessagesStorage().getDatabase().executeFast("UPDATE reaction_mentions_topics SET state = 0 WHERE message_id = ? AND dialog_id = ? AND topic_id = ? ");
                    executeFast2.bindInteger(1, i2);
                    executeFast2.bindLong(2, j);
                    executeFast2.bindInteger(3, i);
                    executeFast2.step();
                    executeFast2.dispose();
                    sQLiteCursor = this.database.queryFinalized(String.format(Locale.US, "SELECT data FROM messages_topics WHERE uid = %d AND mid = %d", Long.valueOf(j), Integer.valueOf(i2)), new Object[0]);
                }
                try {
                    try {
                        if (!sQLiteCursor.next() || (byteBufferValue = sQLiteCursor.byteBufferValue(0)) == null) {
                            tLRPC$Message = null;
                        } else {
                            tLRPC$Message = TLRPC$Message.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                            tLRPC$Message.readAttachPath(byteBufferValue, getUserConfig().clientUserId);
                            byteBufferValue.reuse();
                            TLRPC$TL_messageReactions tLRPC$TL_messageReactions = tLRPC$Message.reactions;
                            if (tLRPC$TL_messageReactions != null && tLRPC$TL_messageReactions.recent_reactions != null) {
                                for (int i4 = 0; i4 < tLRPC$Message.reactions.recent_reactions.size(); i4++) {
                                    tLRPC$Message.reactions.recent_reactions.get(i4).unread = false;
                                }
                            }
                        }
                        sQLiteCursor.dispose();
                        if (tLRPC$Message != null) {
                            if (!z) {
                                executeFast = getMessagesStorage().getDatabase().executeFast(String.format(Locale.US, "UPDATE messages_v2 SET data = ? WHERE uid = %d AND mid = %d", Long.valueOf(j), Integer.valueOf(i2)));
                            } else {
                                executeFast = getMessagesStorage().getDatabase().executeFast(String.format(Locale.US, "UPDATE messages_topics SET data = ? WHERE uid = %d AND mid = %d", Long.valueOf(j), Integer.valueOf(i2)));
                            }
                            sQLitePreparedStatement2 = executeFast;
                            try {
                                NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(tLRPC$Message.getObjectSize());
                                tLRPC$Message.serializeToStream(nativeByteBuffer);
                                sQLitePreparedStatement2.bindByteBuffer(1, nativeByteBuffer);
                                sQLitePreparedStatement2.step();
                                sQLitePreparedStatement2.dispose();
                                nativeByteBuffer.reuse();
                            } catch (Exception e3) {
                                FileLog.e(e3);
                            }
                        } else {
                            sQLitePreparedStatement2 = null;
                        }
                    } catch (SQLiteException e4) {
                        e = e4;
                        checkSQLException(e);
                        if (sQLitePreparedStatement != null) {
                            sQLitePreparedStatement.dispose();
                        }
                        if (sQLiteCursor == null) {
                            sQLiteCursor.dispose();
                            return;
                        }
                        return;
                    }
                } catch (Throwable th3) {
                    th = th3;
                    if (sQLitePreparedStatement != null) {
                        sQLitePreparedStatement.dispose();
                    }
                    if (sQLiteCursor != null) {
                        sQLiteCursor.dispose();
                    }
                    throw th;
                }
            }
            i3++;
        }
        if (sQLitePreparedStatement2 != null) {
            sQLitePreparedStatement2.dispose();
        }
    }

    public void updateDialogUnreadReactions(final long j, final int i, final int i2, final boolean z) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda201
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$updateDialogUnreadReactions$216(z, j, i2, i);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:50:0x00ca  */
    /* JADX WARN: Removed duplicated region for block: B:52:0x00cf  */
    /* JADX WARN: Removed duplicated region for block: B:56:0x00d6  */
    /* JADX WARN: Removed duplicated region for block: B:58:0x00db  */
    /* JADX WARN: Removed duplicated region for block: B:72:? A[RETURN, SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$updateDialogUnreadReactions$216(boolean z, long j, int i, int i2) {
        SQLiteCursor sQLiteCursor;
        SQLiteCursor queryFinalized;
        int max;
        SQLitePreparedStatement sQLitePreparedStatement = null;
        try {
            if (z) {
                try {
                    queryFinalized = this.database.queryFinalized("SELECT unread_reactions FROM dialogs WHERE did = " + j, new Object[0]);
                    try {
                        max = queryFinalized.next() ? Math.max(0, queryFinalized.intValue(0)) : 0;
                        queryFinalized.dispose();
                    } catch (SQLiteException e) {
                        e = e;
                        e.printStackTrace();
                        if (sQLitePreparedStatement != null) {
                            sQLitePreparedStatement.dispose();
                        }
                        if (queryFinalized != null) {
                            queryFinalized.dispose();
                            return;
                        }
                        return;
                    }
                } catch (SQLiteException e2) {
                    e = e2;
                    queryFinalized = null;
                } catch (Throwable th) {
                    th = th;
                    sQLiteCursor = null;
                    if (sQLitePreparedStatement != null) {
                        sQLitePreparedStatement.dispose();
                    }
                    if (sQLiteCursor != null) {
                        sQLiteCursor.dispose();
                    }
                    throw th;
                }
            } else {
                max = 0;
            }
            int i3 = max + i;
            SQLitePreparedStatement executeFast = getMessagesStorage().getDatabase().executeFast("UPDATE dialogs SET unread_reactions = ? WHERE did = ?");
            try {
                executeFast.bindInteger(1, i3);
                executeFast.bindLong(2, j);
                executeFast.step();
                executeFast.dispose();
                if (i2 == 0) {
                    return;
                }
                if (z) {
                    SQLiteCursor queryFinalized2 = this.database.queryFinalized(String.format(Locale.US, "SELECT unread_reactions FROM topics WHERE did = %d AND topic_id = %d", Long.valueOf(j), Integer.valueOf(i2)), new Object[0]);
                    try {
                        r1 = queryFinalized2.next() ? Math.max(0, queryFinalized2.intValue(0)) : 0;
                        queryFinalized2.dispose();
                    } catch (SQLiteException e3) {
                        e = e3;
                        queryFinalized = queryFinalized2;
                        e = e;
                        e.printStackTrace();
                        if (sQLitePreparedStatement != null) {
                        }
                        if (queryFinalized != null) {
                        }
                    } catch (Throwable th2) {
                        th = th2;
                        sQLiteCursor = queryFinalized2;
                        th = th;
                        if (sQLitePreparedStatement != null) {
                        }
                        if (sQLiteCursor != null) {
                        }
                        throw th;
                    }
                }
                int i4 = r1 + i;
                SQLitePreparedStatement executeFast2 = getMessagesStorage().getDatabase().executeFast("UPDATE topics SET unread_reactions = ? WHERE did = ? AND topic_id = ?");
                try {
                    executeFast2.bindInteger(1, i4);
                    executeFast2.bindLong(2, j);
                    executeFast2.bindInteger(3, i2);
                    executeFast2.step();
                    executeFast2.dispose();
                } catch (SQLiteException e4) {
                    e = e4;
                    queryFinalized = null;
                    sQLitePreparedStatement = executeFast2;
                    e = e;
                    e.printStackTrace();
                    if (sQLitePreparedStatement != null) {
                    }
                    if (queryFinalized != null) {
                    }
                } catch (Throwable th3) {
                    th = th3;
                    sQLiteCursor = null;
                    sQLitePreparedStatement = executeFast2;
                    th = th;
                    if (sQLitePreparedStatement != null) {
                    }
                    if (sQLiteCursor != null) {
                    }
                    throw th;
                }
            } catch (SQLiteException e5) {
                e = e5;
                queryFinalized = null;
                sQLitePreparedStatement = executeFast;
            } catch (Throwable th4) {
                th = th4;
                sQLiteCursor = null;
                sQLitePreparedStatement = executeFast;
            }
        } catch (Throwable th5) {
            th = th5;
        }
    }

    private boolean isForum(long j) {
        int i = this.dialogIsForum.get(j, -1);
        if (i == -1) {
            TLRPC$Chat chat = getChat(-j);
            i = (chat == null || !chat.forum) ? 0 : 1;
            this.dialogIsForum.put(j, i);
        }
        return i == 1;
    }

    /* loaded from: classes.dex */
    public static class TopicKey {
        public long dialogId;
        public int topicId;

        public static TopicKey of(long j, int i) {
            TopicKey topicKey = new TopicKey();
            topicKey.dialogId = j;
            topicKey.topicId = i;
            return topicKey;
        }

        public boolean equals(Object obj) {
            if (this == obj) {
                return true;
            }
            if (obj == null || getClass() != obj.getClass()) {
                return false;
            }
            TopicKey topicKey = (TopicKey) obj;
            return this.dialogId == topicKey.dialogId && this.topicId == topicKey.topicId;
        }

        public int hashCode() {
            return Objects.hash(Long.valueOf(this.dialogId), Integer.valueOf(this.topicId));
        }
    }
}

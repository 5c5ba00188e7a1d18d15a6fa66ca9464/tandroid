package org.telegram.messenger;

import android.appwidget.AppWidgetManager;
import android.text.SpannableStringBuilder;
import android.text.TextUtils;
import android.text.style.ForegroundColorSpan;
import android.util.Pair;
import android.util.SparseArray;
import android.util.SparseIntArray;
import androidx.collection.LongSparseArray;
import j$.util.function.Consumer;
import java.io.File;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Objects;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.atomic.AtomicLong;
import java.util.concurrent.atomic.AtomicReference;
import org.telegram.PhoneFormat.PhoneFormat;
import org.telegram.SQLite.SQLiteCursor;
import org.telegram.SQLite.SQLiteDatabase;
import org.telegram.SQLite.SQLiteException;
import org.telegram.SQLite.SQLitePreparedStatement;
import org.telegram.messenger.ContactsController;
import org.telegram.messenger.MessagesController;
import org.telegram.messenger.MessagesStorage;
import org.telegram.messenger.NotificationsController;
import org.telegram.messenger.Timer;
import org.telegram.messenger.TopicsController;
import org.telegram.messenger.Utilities;
import org.telegram.messenger.support.LongSparseIntArray;
import org.telegram.tgnet.AbstractSerializedData;
import org.telegram.tgnet.ConnectionsManager;
import org.telegram.tgnet.NativeByteBuffer;
import org.telegram.tgnet.RequestDelegate;
import org.telegram.tgnet.TLObject;
import org.telegram.tgnet.TLRPC;
import org.telegram.tgnet.tl.TL_stories;
import org.telegram.ui.ActionBar.Theme;
import org.telegram.ui.Adapters.DialogsSearchAdapter;
import org.telegram.ui.Components.Reactions.ReactionsLayoutInBubble;

/* loaded from: classes3.dex */
public class MessagesStorage extends BaseController {
    public static final String[] DATABASE_TABLES;
    public static final int LAST_DB_VERSION = 159;
    private int archiveUnreadCount;
    private int[][] bots;
    private File cacheFile;
    private int[][] channels;
    private int[][] contacts;
    private SQLiteDatabase database;
    private boolean databaseCreated;
    private boolean databaseMigrationInProgress;
    private ArrayList<MessagesController.DialogFilter> dialogFilters;
    private SparseArray<MessagesController.DialogFilter> dialogFiltersMap;
    private LongSparseIntArray dialogIsForum;
    private LongSparseArray dialogsWithMentions;
    private LongSparseArray dialogsWithUnread;
    private int[][] groups;
    private int lastDateValue;
    private int lastPtsValue;
    private int lastQtsValue;
    private int lastSavedDate;
    private int lastSavedPts;
    private int lastSavedQts;
    private int lastSavedSeq;
    private int lastSecretVersion;
    private int lastSeqValue;
    private AtomicLong lastTaskId;
    private int mainUnreadCount;
    private int[] mentionChannels;
    private int[] mentionGroups;
    private int[][] nonContacts;
    private CountDownLatch openSync;
    private volatile int pendingArchiveUnreadCount;
    private volatile int pendingMainUnreadCount;
    private int secretG;
    private byte[] secretPBytes;
    private File shmCacheFile;
    public boolean showClearDatabaseAlert;
    private DispatchQueue storageQueue;
    private SparseArray<ArrayList<Runnable>> tasks;
    boolean tryRecover;
    private LongSparseArray unknownDialogsIds;
    private File walCacheFile;
    private static volatile MessagesStorage[] Instance = new MessagesStorage[4];
    private static final Object[] lockObjects = new Object[4];

    public interface BooleanCallback {
        void run(boolean z);
    }

    private static class Hole {
        public int end;
        public int start;
        public int type;

        public Hole(int i, int i2) {
            this.start = i;
            this.end = i2;
        }

        public Hole(int i, int i2, int i3) {
            this.type = i;
            this.start = i2;
            this.end = i3;
        }
    }

    public interface IntCallback {
        void run(int i);
    }

    public interface LongCallback {
        void run(long j);
    }

    private static class ReadDialog {
        public int date;
        public int lastMid;
        public int unreadCount;

        private ReadDialog() {
        }
    }

    private class SavedReactionsUpdate {
        TLRPC.TL_messageReactions last;
        TLRPC.TL_messageReactions old;
        long topic_id;

        public SavedReactionsUpdate(long j, TLRPC.Message message, TLRPC.Message message2) {
            this.topic_id = MessageObject.getSavedDialogId(j, message2);
            this.old = message.reactions;
            this.last = message2.reactions;
        }
    }

    public interface StringCallback {
        void run(String str);
    }

    public static class TopicKey {
        public long dialogId;
        public long topicId;

        public static TopicKey of(long j, long j2) {
            TopicKey topicKey = new TopicKey();
            topicKey.dialogId = j;
            topicKey.topicId = j2;
            return topicKey;
        }

        public boolean equals(Object obj) {
            if (this == obj) {
                return true;
            }
            if (obj == null || getClass() != obj.getClass()) {
                return false;
            }
            TopicKey topicKey = (TopicKey) obj;
            return this.dialogId == topicKey.dialogId && this.topicId == topicKey.topicId;
        }

        public int hashCode() {
            return Objects.hash(Long.valueOf(this.dialogId), Long.valueOf(this.topicId));
        }

        public String toString() {
            return "TopicKey{dialogId=" + this.dialogId + ", topicId=" + this.topicId + '}';
        }
    }

    static {
        for (int i = 0; i < 4; i++) {
            lockObjects[i] = new Object();
        }
        DATABASE_TABLES = new String[]{"messages_holes", "media_holes_v2", "scheduled_messages_v2", "quick_replies", "messages_v2", "download_queue", "user_contacts_v7", "user_phones_v7", "dialogs", "dialog_filter", "dialog_filter_ep", "dialog_filter_pin_v2", "randoms_v2", "enc_tasks_v4", "messages_seq", "params", "media_v4", "bot_keyboard", "bot_keyboard_topics", "chat_settings_v2", "user_settings", "chat_pinned_v2", "chat_pinned_count", "chat_hints", "botcache", "users_data", "users", "chats", "enc_chats", "channel_users_v2", "channel_admins_v3", "contacts", "dialog_photos", "dialog_settings", "web_recent_v3", "stickers_v2", "stickers_featured", "stickers_dice", "stickersets", "hashtag_recent_v2", "webpage_pending_v2", "sent_files_v2", "search_recent", "media_counts_v2", "keyvalue", "bot_info_v2", "pending_tasks", "requested_holes", "sharing_locations", "shortcut_widget", "emoji_keywords_v2", "emoji_keywords_info_v2", "wallpapers2", "unread_push_messages", "polls_v2", "reactions", "reaction_mentions", "downloading_documents", "animated_emoji", "attach_menu_bots", "premium_promo", "emoji_statuses", "messages_holes_topics", "messages_topics", "saved_dialogs", "media_topics", "media_holes_topics", "topics", "media_counts_topics", "reaction_mentions_topics", "emoji_groups"};
    }

    public MessagesStorage(int i) {
        super(i);
        this.lastTaskId = new AtomicLong(System.currentTimeMillis());
        this.tasks = new SparseArray<>();
        this.lastDateValue = 0;
        this.lastPtsValue = 0;
        this.lastQtsValue = 0;
        this.lastSeqValue = 0;
        this.lastSecretVersion = 0;
        this.secretPBytes = null;
        this.secretG = 0;
        this.lastSavedSeq = 0;
        this.lastSavedPts = 0;
        this.lastSavedDate = 0;
        this.lastSavedQts = 0;
        this.dialogFilters = new ArrayList<>();
        this.dialogFiltersMap = new SparseArray<>();
        this.unknownDialogsIds = new LongSparseArray();
        this.openSync = new CountDownLatch(1);
        this.dialogIsForum = new LongSparseIntArray();
        this.contacts = new int[][]{new int[2], new int[2]};
        this.nonContacts = new int[][]{new int[2], new int[2]};
        this.bots = new int[][]{new int[2], new int[2]};
        this.channels = new int[][]{new int[2], new int[2]};
        this.groups = new int[][]{new int[2], new int[2]};
        this.mentionChannels = new int[2];
        this.mentionGroups = new int[2];
        this.dialogsWithMentions = new LongSparseArray();
        this.dialogsWithUnread = new LongSparseArray();
        DispatchQueue dispatchQueue = new DispatchQueue("storageQueue_" + i);
        this.storageQueue = dispatchQueue;
        dispatchQueue.setPriority(8);
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda216
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$new$0();
            }
        });
    }

    private boolean addFilesToDelete(TLRPC.Message message, ArrayList<File> arrayList, ArrayList<Pair<Long, Integer>> arrayList2, ArrayList<String> arrayList3, boolean z) {
        long j;
        int i;
        int i2 = 0;
        if (message == null) {
            return false;
        }
        TLRPC.Document document = MessageObject.getDocument(message);
        TLRPC.Photo photo = MessageObject.getPhoto(message);
        if (!MessageObject.isVoiceMessage(message)) {
            if (MessageObject.isStickerMessage(message) || MessageObject.isAnimatedStickerMessage(message)) {
                if (document == null) {
                    return false;
                }
                j = document.id;
            } else if (MessageObject.isVideoMessage(message) || MessageObject.isRoundVideoMessage(message) || MessageObject.isGifMessage(message)) {
                if (document == null) {
                    return false;
                }
                j = document.id;
                i = 4;
            } else if (document != null) {
                if (getMediaDataController().ringtoneDataStore.contains(document.id)) {
                    return false;
                }
                j = document.id;
                i = 8;
            } else if (photo == null || FileLoader.getClosestPhotoSizeWithSize(photo.sizes, AndroidUtilities.getPhotoSize()) == null) {
                j = 0;
                i = 0;
            } else {
                j = photo.id;
            }
            i = 1;
        } else {
            if (document == null || getMediaDataController().ringtoneDataStore.contains(document.id)) {
                return false;
            }
            j = document.id;
            i = 2;
        }
        if (j != 0) {
            arrayList2.add(new Pair<>(Long.valueOf(j), Integer.valueOf(i)));
        }
        if (photo != null) {
            int size = photo.sizes.size();
            while (i2 < size) {
                TLRPC.PhotoSize photoSize = photo.sizes.get(i2);
                String attachFileName = FileLoader.getAttachFileName(photoSize);
                if (!TextUtils.isEmpty(attachFileName)) {
                    arrayList3.add(attachFileName);
                }
                File pathToAttach = getFileLoader().getPathToAttach(photoSize, z);
                if (pathToAttach.toString().length() > 0) {
                    arrayList.add(pathToAttach);
                }
                i2++;
            }
            return true;
        }
        if (document == null) {
            return false;
        }
        String attachFileName2 = FileLoader.getAttachFileName(document);
        if (!TextUtils.isEmpty(attachFileName2)) {
            arrayList3.add(attachFileName2);
        }
        File pathToAttach2 = getFileLoader().getPathToAttach(document, z);
        if (pathToAttach2.toString().length() > 0) {
            arrayList.add(pathToAttach2);
        }
        int size2 = document.thumbs.size();
        while (i2 < size2) {
            File pathToAttach3 = getFileLoader().getPathToAttach(document.thumbs.get(i2));
            if (pathToAttach3.toString().length() > 0) {
                arrayList.add(pathToAttach3);
            }
            i2++;
        }
        return true;
    }

    public static void addLoadPeerInfo(TLRPC.Peer peer, ArrayList<Long> arrayList, ArrayList<Long> arrayList2) {
        long j;
        if (peer instanceof TLRPC.TL_peerUser) {
            if (arrayList.contains(Long.valueOf(peer.user_id))) {
                return;
            }
            arrayList.add(Long.valueOf(peer.user_id));
            return;
        }
        if (peer instanceof TLRPC.TL_peerChannel) {
            if (arrayList2.contains(Long.valueOf(peer.channel_id))) {
                return;
            } else {
                j = peer.channel_id;
            }
        } else if (!(peer instanceof TLRPC.TL_peerChat) || arrayList2.contains(Long.valueOf(peer.chat_id))) {
            return;
        } else {
            j = peer.chat_id;
        }
        arrayList2.add(Long.valueOf(j));
    }

    protected static void addReplyMessages(TLRPC.Message message, LongSparseArray longSparseArray, LongSparseArray longSparseArray2) {
        int i = message.reply_to.reply_to_msg_id;
        long replyToDialogId = (message.flags & 1073741824) != 0 ? message.quick_reply_shortcut_id : MessageObject.getReplyToDialogId(message);
        SparseArray sparseArray = (SparseArray) longSparseArray.get(replyToDialogId);
        ArrayList arrayList = (ArrayList) longSparseArray2.get(replyToDialogId);
        if (sparseArray == null) {
            sparseArray = new SparseArray();
            longSparseArray.put(replyToDialogId, sparseArray);
        }
        if (arrayList == null) {
            arrayList = new ArrayList();
            longSparseArray2.put(replyToDialogId, arrayList);
        }
        ArrayList arrayList2 = (ArrayList) sparseArray.get(message.reply_to.reply_to_msg_id);
        if (arrayList2 == null) {
            arrayList2 = new ArrayList();
            sparseArray.put(message.reply_to.reply_to_msg_id, arrayList2);
            if (!arrayList.contains(Integer.valueOf(message.reply_to.reply_to_msg_id))) {
                arrayList.add(Integer.valueOf(message.reply_to.reply_to_msg_id));
            }
        }
        arrayList2.add(message);
    }

    public static void addUsersAndChatsFromMessage(TLRPC.Message message, ArrayList<Long> arrayList, ArrayList<Long> arrayList2, ArrayList<Long> arrayList3) {
        TLRPC.Peer peer;
        String str;
        TLRPC.MessageFwdHeader messageFwdHeader;
        TLRPC.Peer peer2;
        TLRPC.Peer peer3;
        TLRPC.WebPage webPage;
        TLRPC.Peer peer4;
        TL_stories.StoryFwdHeader storyFwdHeader;
        TL_stories.StoryItem storyItem;
        TLRPC.Peer peer5;
        long j;
        long fromChatId = MessageObject.getFromChatId(message);
        if (DialogObject.isUserDialog(fromChatId)) {
            if (!arrayList.contains(Long.valueOf(fromChatId))) {
                arrayList.add(Long.valueOf(fromChatId));
            }
        } else if (DialogObject.isChatDialog(fromChatId)) {
            long j2 = -fromChatId;
            if (!arrayList2.contains(Long.valueOf(j2))) {
                arrayList2.add(Long.valueOf(j2));
            }
        }
        long j3 = message.via_bot_id;
        if (j3 != 0 && !arrayList.contains(Long.valueOf(j3))) {
            arrayList.add(Long.valueOf(message.via_bot_id));
        }
        TLRPC.MessageAction messageAction = message.action;
        if (messageAction != null) {
            long j4 = messageAction.user_id;
            if (j4 != 0 && !arrayList.contains(Long.valueOf(j4))) {
                arrayList.add(Long.valueOf(message.action.user_id));
            }
            long j5 = message.action.channel_id;
            if (j5 != 0 && !arrayList2.contains(Long.valueOf(j5))) {
                arrayList2.add(Long.valueOf(message.action.channel_id));
            }
            long j6 = message.action.chat_id;
            if (j6 != 0 && !arrayList2.contains(Long.valueOf(j6))) {
                arrayList2.add(Long.valueOf(message.action.chat_id));
            }
            TLRPC.MessageAction messageAction2 = message.action;
            if (messageAction2 instanceof TLRPC.TL_messageActionGiftCode) {
                addLoadPeerInfo(((TLRPC.TL_messageActionGiftCode) messageAction2).boost_peer, arrayList, arrayList2);
            }
            TLRPC.MessageAction messageAction3 = message.action;
            if (messageAction3 instanceof TLRPC.TL_messageActionGeoProximityReached) {
                TLRPC.TL_messageActionGeoProximityReached tL_messageActionGeoProximityReached = (TLRPC.TL_messageActionGeoProximityReached) messageAction3;
                addLoadPeerInfo(tL_messageActionGeoProximityReached.from_id, arrayList, arrayList2);
                addLoadPeerInfo(tL_messageActionGeoProximityReached.to_id, arrayList, arrayList2);
            }
            if (!message.action.users.isEmpty()) {
                for (int i = 0; i < message.action.users.size(); i++) {
                    Long l = message.action.users.get(i);
                    if (!arrayList.contains(l)) {
                        arrayList.add(l);
                    }
                }
            }
        }
        if (!message.entities.isEmpty()) {
            for (int i2 = 0; i2 < message.entities.size(); i2++) {
                TLRPC.MessageEntity messageEntity = message.entities.get(i2);
                if (messageEntity instanceof TLRPC.TL_messageEntityMentionName) {
                    j = ((TLRPC.TL_messageEntityMentionName) messageEntity).user_id;
                } else if (messageEntity instanceof TLRPC.TL_inputMessageEntityMentionName) {
                    j = ((TLRPC.TL_inputMessageEntityMentionName) messageEntity).user_id.user_id;
                } else {
                    if (arrayList3 != null && (messageEntity instanceof TLRPC.TL_messageEntityCustomEmoji)) {
                        arrayList3.add(Long.valueOf(((TLRPC.TL_messageEntityCustomEmoji) messageEntity).document_id));
                    }
                }
                arrayList.add(Long.valueOf(j));
            }
        }
        TLRPC.MessageMedia messageMedia = message.media;
        if (messageMedia != null) {
            long j7 = messageMedia.user_id;
            if (j7 != 0 && !arrayList.contains(Long.valueOf(j7))) {
                arrayList.add(Long.valueOf(message.media.user_id));
            }
            TLRPC.MessageMedia messageMedia2 = message.media;
            if (messageMedia2 instanceof TLRPC.TL_messageMediaGiveaway) {
                Iterator<Long> it = ((TLRPC.TL_messageMediaGiveaway) messageMedia2).channels.iterator();
                while (it.hasNext()) {
                    Long next = it.next();
                    if (!arrayList2.contains(next)) {
                        arrayList2.add(next);
                    }
                }
            }
            TLRPC.MessageMedia messageMedia3 = message.media;
            if (messageMedia3 instanceof TLRPC.TL_messageMediaGiveawayResults) {
                Iterator<Long> it2 = ((TLRPC.TL_messageMediaGiveawayResults) messageMedia3).winners.iterator();
                while (it2.hasNext()) {
                    Long next2 = it2.next();
                    if (!arrayList.contains(next2)) {
                        arrayList.add(next2);
                    }
                }
            }
            TLRPC.MessageMedia messageMedia4 = message.media;
            if (messageMedia4 instanceof TLRPC.TL_messageMediaPoll) {
                TLRPC.TL_messageMediaPoll tL_messageMediaPoll = (TLRPC.TL_messageMediaPoll) messageMedia4;
                if (!tL_messageMediaPoll.results.recent_voters.isEmpty()) {
                    for (int i3 = 0; i3 < tL_messageMediaPoll.results.recent_voters.size(); i3++) {
                        addLoadPeerInfo(tL_messageMediaPoll.results.recent_voters.get(i3), arrayList, arrayList2);
                    }
                }
            }
            TLRPC.MessageMedia messageMedia5 = message.media;
            if ((messageMedia5 instanceof TLRPC.TL_messageMediaStory) && (storyItem = messageMedia5.storyItem) != null) {
                TL_stories.StoryFwdHeader storyFwdHeader2 = storyItem.fwd_from;
                if (storyFwdHeader2 != null) {
                    addLoadPeerInfo(storyFwdHeader2.from, arrayList, arrayList2);
                }
                TL_stories.StoryItem storyItem2 = message.media.storyItem;
                if (storyItem2 != null && storyItem2.media_areas != null) {
                    for (int i4 = 0; i4 < message.media.storyItem.media_areas.size(); i4++) {
                        if (message.media.storyItem.media_areas.get(i4) instanceof TL_stories.TL_mediaAreaChannelPost) {
                            long j8 = ((TL_stories.TL_mediaAreaChannelPost) message.media.storyItem.media_areas.get(i4)).channel_id;
                            if (!arrayList2.contains(Long.valueOf(j8))) {
                                arrayList2.add(Long.valueOf(j8));
                            }
                        }
                    }
                }
                TL_stories.StoryItem storyItem3 = message.media.storyItem;
                if (storyItem3 != null && (peer5 = storyItem3.from_id) != null) {
                    addLoadPeerInfo(peer5, arrayList, arrayList2);
                }
            }
            TLRPC.MessageMedia messageMedia6 = message.media;
            if ((messageMedia6 instanceof TLRPC.TL_messageMediaWebPage) && (webPage = messageMedia6.webpage) != null && webPage.attributes != null) {
                for (int i5 = 0; i5 < message.media.webpage.attributes.size(); i5++) {
                    if (message.media.webpage.attributes.get(i5) instanceof TLRPC.TL_webPageAttributeStory) {
                        TLRPC.TL_webPageAttributeStory tL_webPageAttributeStory = (TLRPC.TL_webPageAttributeStory) message.media.webpage.attributes.get(i5);
                        TL_stories.StoryItem storyItem4 = tL_webPageAttributeStory.storyItem;
                        if (storyItem4 != null && (storyFwdHeader = storyItem4.fwd_from) != null) {
                            addLoadPeerInfo(storyFwdHeader.from, arrayList, arrayList2);
                        }
                        TL_stories.StoryItem storyItem5 = tL_webPageAttributeStory.storyItem;
                        if (storyItem5 != null && storyItem5.media_areas != null) {
                            for (int i6 = 0; i6 < tL_webPageAttributeStory.storyItem.media_areas.size(); i6++) {
                                if (tL_webPageAttributeStory.storyItem.media_areas.get(i6) instanceof TL_stories.TL_mediaAreaChannelPost) {
                                    long j9 = ((TL_stories.TL_mediaAreaChannelPost) tL_webPageAttributeStory.storyItem.media_areas.get(i6)).channel_id;
                                    if (!arrayList2.contains(Long.valueOf(j9))) {
                                        arrayList2.add(Long.valueOf(j9));
                                    }
                                }
                            }
                        }
                        TL_stories.StoryItem storyItem6 = tL_webPageAttributeStory.storyItem;
                        if (storyItem6 != null && (peer4 = storyItem6.from_id) != null) {
                            addLoadPeerInfo(peer4, arrayList, arrayList2);
                        }
                    }
                }
            }
            TLRPC.Peer peer6 = message.media.peer;
            if (peer6 != null) {
                addLoadPeerInfo(peer6, arrayList, arrayList2);
            }
        }
        TLRPC.MessageReplies messageReplies = message.replies;
        if (messageReplies != null) {
            int size = messageReplies.recent_repliers.size();
            for (int i7 = 0; i7 < size; i7++) {
                addLoadPeerInfo(message.replies.recent_repliers.get(i7), arrayList, arrayList2);
            }
        }
        TLRPC.MessageReplyHeader messageReplyHeader = message.reply_to;
        if (messageReplyHeader != null && (peer3 = messageReplyHeader.reply_to_peer_id) != null) {
            addLoadPeerInfo(peer3, arrayList, arrayList2);
        }
        TLRPC.MessageFwdHeader messageFwdHeader2 = message.fwd_from;
        if (messageFwdHeader2 != null) {
            addLoadPeerInfo(messageFwdHeader2.from_id, arrayList, arrayList2);
            addLoadPeerInfo(message.fwd_from.saved_from_peer, arrayList, arrayList2);
        }
        TLRPC.MessageReplyHeader messageReplyHeader2 = message.reply_to;
        if (messageReplyHeader2 != null && (messageFwdHeader = messageReplyHeader2.reply_from) != null && (peer2 = messageFwdHeader.from_id) != null) {
            addLoadPeerInfo(peer2, arrayList, arrayList2);
        }
        HashMap<String, String> hashMap = message.params;
        if (hashMap != null && (str = hashMap.get("fwd_peer")) != null) {
            long longValue = Utilities.parseLong(str).longValue();
            if (longValue < 0) {
                long j10 = -longValue;
                if (!arrayList2.contains(Long.valueOf(j10))) {
                    arrayList2.add(Long.valueOf(j10));
                }
            }
        }
        TLRPC.TL_messageReactions tL_messageReactions = message.reactions;
        if (tL_messageReactions == null || tL_messageReactions.top_reactors == null) {
            return;
        }
        for (int i8 = 0; i8 < message.reactions.top_reactors.size(); i8++) {
            TLRPC.MessageReactor messageReactor = message.reactions.top_reactors.get(i8);
            if (messageReactor != null && (peer = messageReactor.peer_id) != null) {
                addLoadPeerInfo(peer, arrayList, arrayList2);
            }
        }
    }

    private void bindMessageTags(SQLitePreparedStatement sQLitePreparedStatement, TLRPC.Message message) {
        ArrayList<TLRPC.ReactionCount> arrayList;
        long clientUserId = getUserConfig().getClientUserId();
        TLRPC.TL_messageReactions tL_messageReactions = message.reactions;
        if (tL_messageReactions == null || !tL_messageReactions.reactions_as_tags || (arrayList = tL_messageReactions.results) == null || arrayList.isEmpty()) {
            return;
        }
        LocaleController localeController = LocaleController.getInstance();
        String str = message.message;
        if (str == null) {
            str = "";
        }
        String translitString = localeController.getTranslitString(str);
        Iterator<TLRPC.ReactionCount> it = message.reactions.results.iterator();
        while (it.hasNext()) {
            TLRPC.ReactionCount next = it.next();
            TLRPC.Reaction reaction = next.reaction;
            if ((reaction instanceof TLRPC.TL_reactionEmoji) || (reaction instanceof TLRPC.TL_reactionCustomEmoji)) {
                sQLitePreparedStatement.requery();
                sQLitePreparedStatement.bindLong(1, message.id);
                sQLitePreparedStatement.bindLong(2, MessageObject.getSavedDialogId(clientUserId, message));
                TLRPC.Reaction reaction2 = next.reaction;
                sQLitePreparedStatement.bindLong(3, reaction2 instanceof TLRPC.TL_reactionEmoji ? ((TLRPC.TL_reactionEmoji) reaction2).emoticon.hashCode() : reaction2 instanceof TLRPC.TL_reactionCustomEmoji ? ((TLRPC.TL_reactionCustomEmoji) reaction2).document_id : 0L);
                sQLitePreparedStatement.bindString(4, translitString == null ? "" : translitString);
                sQLitePreparedStatement.step();
            }
        }
    }

    private void broadcastQuickRepliesMessagesChange(Long l, long j) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda81
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$broadcastQuickRepliesMessagesChange$203();
            }
        });
    }

    private void broadcastScheduledMessagesChange(final Long l) {
        SQLiteCursor queryFinalized;
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT COUNT(mid) FROM scheduled_messages_v2 WHERE uid = %d", l), new Object[0]);
            } catch (Throwable th) {
                th = th;
            }
        } catch (Exception e) {
            e = e;
        }
        try {
            final int intValue = queryFinalized.next() ? queryFinalized.intValue(0) : 0;
            queryFinalized.dispose();
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda52
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesStorage.this.lambda$broadcastScheduledMessagesChange$202(l, intValue);
                }
            });
        } catch (Exception e2) {
            e = e2;
            sQLiteCursor = queryFinalized;
            checkSQLException(e);
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
        } catch (Throwable th2) {
            th = th2;
            sQLiteCursor = queryFinalized;
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
            throw th;
        }
    }

    /* JADX WARN: Code restructure failed: missing block: B:278:0x04c7, code lost:
    
        if (r22 == 0) goto L235;
     */
    /* JADX WARN: Code restructure failed: missing block: B:358:0x05ae, code lost:
    
        if (r19 == 0) goto L303;
     */
    /* JADX WARN: Removed duplicated region for block: B:136:0x02b5 A[Catch: all -> 0x002b, Exception -> 0x0030, TryCatch #6 {Exception -> 0x0030, all -> 0x002b, blocks: (B:8:0x000a, B:24:0x0035, B:26:0x0038, B:75:0x0137, B:77:0x015e, B:79:0x0169, B:81:0x018d, B:84:0x0197, B:85:0x019e, B:87:0x01a2, B:89:0x01cb, B:90:0x01ad, B:92:0x01b1, B:95:0x01b6, B:97:0x01c1, B:100:0x01db, B:103:0x01e7, B:105:0x01fe, B:107:0x020b, B:109:0x021d, B:111:0x0225, B:115:0x0299, B:116:0x023d, B:118:0x025a, B:121:0x0264, B:122:0x026b, B:124:0x026f, B:127:0x0274, B:128:0x028a, B:130:0x0280, B:134:0x02af, B:136:0x02b5, B:138:0x02c6, B:140:0x02d2, B:142:0x02db, B:144:0x02f5, B:148:0x0305, B:151:0x0310, B:152:0x0318, B:154:0x031e, B:156:0x0322, B:157:0x0337, B:159:0x034f, B:160:0x032d, B:163:0x033f, B:166:0x0355, B:167:0x035e, B:170:0x0364, B:175:0x0372, B:176:0x038b, B:178:0x0390, B:180:0x0395, B:182:0x03a1, B:183:0x03a9, B:185:0x03ae, B:187:0x03bc, B:188:0x03c1, B:190:0x03c6, B:192:0x03cb, B:194:0x03d8, B:195:0x03dc, B:197:0x03e1, B:199:0x03ef, B:200:0x03f2, B:202:0x03f7, B:204:0x03fc, B:206:0x0409, B:207:0x040d, B:209:0x0412, B:211:0x0420, B:212:0x0423, B:214:0x0428, B:216:0x042d, B:218:0x043a, B:219:0x043e, B:221:0x0443, B:223:0x0451, B:224:0x0454, B:226:0x0459, B:228:0x045e, B:230:0x046b, B:231:0x046f, B:233:0x0474, B:235:0x0482, B:237:0x0489, B:239:0x0492, B:245:0x04b1, B:249:0x04cc, B:251:0x04d0, B:252:0x04e1, B:255:0x0506, B:257:0x050c, B:258:0x04e7, B:260:0x04ec, B:263:0x04f9, B:265:0x04fe, B:270:0x04d3, B:272:0x04d7, B:275:0x04dc, B:276:0x04df, B:277:0x04c0, B:286:0x0565, B:287:0x0519, B:289:0x0528, B:291:0x052e, B:293:0x0532, B:294:0x0537, B:297:0x0563, B:299:0x053b, B:301:0x0540, B:303:0x0549, B:306:0x0555, B:308:0x055a, B:312:0x0535, B:315:0x0570, B:317:0x057b, B:324:0x0598, B:328:0x05b3, B:330:0x05b7, B:331:0x05c8, B:335:0x05f0, B:336:0x05cb, B:338:0x05d0, B:341:0x05dd, B:343:0x05e2, B:346:0x05ea, B:350:0x05ba, B:352:0x05be, B:355:0x05c3, B:356:0x05c6, B:357:0x05a7, B:364:0x0644, B:365:0x05fc, B:367:0x0609, B:369:0x060f, B:371:0x0613, B:372:0x0618, B:374:0x061b, B:376:0x0620, B:379:0x0629, B:381:0x062e, B:383:0x0637, B:386:0x0642, B:389:0x0616, B:392:0x064c, B:394:0x0650, B:398:0x0657, B:400:0x065b, B:403:0x065e, B:405:0x0662, B:407:0x0666, B:415:0x0375, B:417:0x0379, B:419:0x0381, B:420:0x0384, B:421:0x0389, B:422:0x0387), top: B:7:0x000a }] */
    /* JADX WARN: Removed duplicated region for block: B:13:0x0671  */
    /* JADX WARN: Removed duplicated region for block: B:169:0x0362  */
    /* JADX WARN: Removed duplicated region for block: B:16:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:20:0x0677  */
    /* JADX WARN: Removed duplicated region for block: B:22:? A[SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:237:0x0489 A[Catch: all -> 0x002b, Exception -> 0x0030, TryCatch #6 {Exception -> 0x0030, all -> 0x002b, blocks: (B:8:0x000a, B:24:0x0035, B:26:0x0038, B:75:0x0137, B:77:0x015e, B:79:0x0169, B:81:0x018d, B:84:0x0197, B:85:0x019e, B:87:0x01a2, B:89:0x01cb, B:90:0x01ad, B:92:0x01b1, B:95:0x01b6, B:97:0x01c1, B:100:0x01db, B:103:0x01e7, B:105:0x01fe, B:107:0x020b, B:109:0x021d, B:111:0x0225, B:115:0x0299, B:116:0x023d, B:118:0x025a, B:121:0x0264, B:122:0x026b, B:124:0x026f, B:127:0x0274, B:128:0x028a, B:130:0x0280, B:134:0x02af, B:136:0x02b5, B:138:0x02c6, B:140:0x02d2, B:142:0x02db, B:144:0x02f5, B:148:0x0305, B:151:0x0310, B:152:0x0318, B:154:0x031e, B:156:0x0322, B:157:0x0337, B:159:0x034f, B:160:0x032d, B:163:0x033f, B:166:0x0355, B:167:0x035e, B:170:0x0364, B:175:0x0372, B:176:0x038b, B:178:0x0390, B:180:0x0395, B:182:0x03a1, B:183:0x03a9, B:185:0x03ae, B:187:0x03bc, B:188:0x03c1, B:190:0x03c6, B:192:0x03cb, B:194:0x03d8, B:195:0x03dc, B:197:0x03e1, B:199:0x03ef, B:200:0x03f2, B:202:0x03f7, B:204:0x03fc, B:206:0x0409, B:207:0x040d, B:209:0x0412, B:211:0x0420, B:212:0x0423, B:214:0x0428, B:216:0x042d, B:218:0x043a, B:219:0x043e, B:221:0x0443, B:223:0x0451, B:224:0x0454, B:226:0x0459, B:228:0x045e, B:230:0x046b, B:231:0x046f, B:233:0x0474, B:235:0x0482, B:237:0x0489, B:239:0x0492, B:245:0x04b1, B:249:0x04cc, B:251:0x04d0, B:252:0x04e1, B:255:0x0506, B:257:0x050c, B:258:0x04e7, B:260:0x04ec, B:263:0x04f9, B:265:0x04fe, B:270:0x04d3, B:272:0x04d7, B:275:0x04dc, B:276:0x04df, B:277:0x04c0, B:286:0x0565, B:287:0x0519, B:289:0x0528, B:291:0x052e, B:293:0x0532, B:294:0x0537, B:297:0x0563, B:299:0x053b, B:301:0x0540, B:303:0x0549, B:306:0x0555, B:308:0x055a, B:312:0x0535, B:315:0x0570, B:317:0x057b, B:324:0x0598, B:328:0x05b3, B:330:0x05b7, B:331:0x05c8, B:335:0x05f0, B:336:0x05cb, B:338:0x05d0, B:341:0x05dd, B:343:0x05e2, B:346:0x05ea, B:350:0x05ba, B:352:0x05be, B:355:0x05c3, B:356:0x05c6, B:357:0x05a7, B:364:0x0644, B:365:0x05fc, B:367:0x0609, B:369:0x060f, B:371:0x0613, B:372:0x0618, B:374:0x061b, B:376:0x0620, B:379:0x0629, B:381:0x062e, B:383:0x0637, B:386:0x0642, B:389:0x0616, B:392:0x064c, B:394:0x0650, B:398:0x0657, B:400:0x065b, B:403:0x065e, B:405:0x0662, B:407:0x0666, B:415:0x0375, B:417:0x0379, B:419:0x0381, B:420:0x0384, B:421:0x0389, B:422:0x0387), top: B:7:0x000a }] */
    /* JADX WARN: Removed duplicated region for block: B:397:0x0655  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void calcUnreadCounters(boolean z) {
        int i;
        Throwable th;
        SQLiteCursor sQLiteCursor;
        Exception exc;
        SQLiteCursor sQLiteCursor2;
        int i2;
        ArrayList<TLRPC.User> arrayList;
        LongSparseArray longSparseArray;
        LongSparseArray longSparseArray2;
        int size;
        int i3;
        int i4;
        int i5;
        MessagesController.DialogFilter dialogFilter;
        int i6;
        int i7;
        MessagesController.DialogFilter dialogFilter2;
        int i8;
        MessagesController.DialogFilter dialogFilter3;
        int i9;
        int i10;
        int i11;
        MessagesController.DialogFilter dialogFilter4;
        int i12;
        int i13;
        MessagesController.DialogFilter dialogFilter5;
        int i14;
        int i15;
        LongSparseArray longSparseArray3;
        ArrayList<TLRPC.EncryptedChat> arrayList2;
        LongSparseArray longSparseArray4;
        LongSparseArray longSparseArray5;
        int i16;
        LongSparseIntArray longSparseIntArray;
        int intValue;
        int intValue2;
        Long valueOf;
        ArrayList<Long> arrayList3;
        int i17 = 0;
        int i18 = 0;
        while (true) {
            i = 2;
            try {
                if (i18 >= 2) {
                    break;
                }
                for (int i19 = 0; i19 < 2; i19++) {
                    try {
                        int[] iArr = this.contacts[i18];
                        int[] iArr2 = this.nonContacts[i18];
                        int[] iArr3 = this.bots[i18];
                        int[] iArr4 = this.channels[i18];
                        this.groups[i18][i19] = 0;
                        iArr4[i19] = 0;
                        iArr3[i19] = 0;
                        iArr2[i19] = 0;
                        iArr[i19] = 0;
                    } catch (Exception e) {
                        exc = e;
                        sQLiteCursor2 = null;
                        checkSQLException(exc);
                        if (sQLiteCursor2 == null) {
                        }
                    } catch (Throwable th2) {
                        th = th2;
                        sQLiteCursor = null;
                        if (sQLiteCursor != null) {
                            throw th;
                        }
                        sQLiteCursor.dispose();
                        throw th;
                    }
                }
                i18++;
            } catch (Throwable th3) {
                th = th3;
            }
        }
        this.dialogsWithMentions.clear();
        this.dialogsWithUnread.clear();
        ArrayList<TLRPC.User> arrayList4 = new ArrayList<>();
        ArrayList<TLRPC.User> arrayList5 = new ArrayList<>();
        ArrayList<TLRPC.Chat> arrayList6 = new ArrayList<>();
        ArrayList<Long> arrayList7 = new ArrayList<>();
        ArrayList<Long> arrayList8 = new ArrayList<>();
        ArrayList arrayList9 = new ArrayList();
        LongSparseIntArray longSparseIntArray2 = new LongSparseIntArray();
        LongSparseIntArray longSparseIntArray3 = new LongSparseIntArray();
        SQLiteCursor queryFinalized = this.database.queryFinalized("SELECT DISTINCT did FROM topics WHERE unread_count > 0 OR unread_mentions > 0", new Object[0]);
        while (true) {
            try {
                i2 = 1;
                arrayList = arrayList5;
                if (!queryFinalized.next()) {
                    break;
                }
                long longValue = queryFinalized.longValue(0);
                if (isForum(longValue)) {
                    longSparseIntArray3.put(longValue, 1);
                }
                arrayList5 = arrayList;
            } catch (Exception e2) {
                exc = e2;
                sQLiteCursor2 = queryFinalized;
            } catch (Throwable th4) {
                th = th4;
                sQLiteCursor = queryFinalized;
                if (sQLiteCursor != null) {
                }
            }
        }
        queryFinalized.dispose();
        sQLiteCursor2 = this.database.queryFinalized("SELECT did, folder_id, unread_count, unread_count_i FROM dialogs WHERE unread_count > 0 OR flags > 0 UNION ALL SELECT did, folder_id, unread_count, unread_count_i FROM dialogs WHERE unread_count_i > 0", new Object[0]);
        while (sQLiteCursor2.next()) {
            try {
                int intValue3 = sQLiteCursor2.intValue(i2);
                long longValue2 = sQLiteCursor2.longValue(i17);
                if (isForum(longValue2)) {
                    intValue = longSparseIntArray3.get(longValue2, i17);
                    if (intValue != 0) {
                        intValue2 = 0;
                    }
                } else {
                    intValue = sQLiteCursor2.intValue(i);
                    intValue2 = sQLiteCursor2.intValue(3);
                }
                if (intValue > 0) {
                    this.dialogsWithUnread.put(longValue2, Integer.valueOf(intValue));
                }
                if (intValue2 > 0) {
                    this.dialogsWithMentions.put(longValue2, Integer.valueOf(intValue2));
                }
                longSparseIntArray2.put(longValue2, intValue3);
                if (DialogObject.isEncryptedDialog(longValue2)) {
                    int encryptedChatId = DialogObject.getEncryptedChatId(longValue2);
                    if (!arrayList9.contains(Integer.valueOf(encryptedChatId))) {
                        arrayList9.add(Integer.valueOf(encryptedChatId));
                    }
                } else if (!DialogObject.isUserDialog(longValue2)) {
                    long j = -longValue2;
                    if (!arrayList8.contains(Long.valueOf(j))) {
                        valueOf = Long.valueOf(j);
                        arrayList3 = arrayList8;
                        arrayList3.add(valueOf);
                    }
                } else if (!arrayList7.contains(Long.valueOf(longValue2))) {
                    valueOf = Long.valueOf(longValue2);
                    arrayList3 = arrayList7;
                    arrayList3.add(valueOf);
                }
                i17 = 0;
                i = 2;
                i2 = 1;
            } catch (Exception e3) {
                exc = e3;
                checkSQLException(exc);
                if (sQLiteCursor2 == null) {
                    sQLiteCursor2.dispose();
                    return;
                }
                return;
            }
        }
        sQLiteCursor2.dispose();
        LongSparseArray longSparseArray6 = new LongSparseArray();
        LongSparseArray longSparseArray7 = new LongSparseArray();
        LongSparseArray longSparseArray8 = new LongSparseArray();
        LongSparseIntArray longSparseIntArray4 = new LongSparseIntArray();
        LongSparseArray longSparseArray9 = new LongSparseArray();
        LongSparseArray longSparseArray10 = new LongSparseArray();
        LongSparseIntArray longSparseIntArray5 = longSparseIntArray4;
        if (!arrayList7.isEmpty()) {
            getUsersInternal(arrayList7, arrayList4, true);
            int size2 = arrayList4.size();
            int i20 = 0;
            while (i20 < size2) {
                TLRPC.User user = arrayList4.get(i20);
                ArrayList<TLRPC.User> arrayList10 = arrayList4;
                LongSparseArray longSparseArray11 = longSparseArray7;
                int i21 = size2;
                ArrayList<Long> arrayList11 = arrayList8;
                boolean isDialogMuted = getMessagesController().isDialogMuted(user.id, 0L);
                int i22 = longSparseIntArray2.get(user.id);
                if (isDialogMuted) {
                    longSparseArray9.put(user.id, Boolean.TRUE);
                }
                if (i22 == 1) {
                    longSparseArray10.put(user.id, Boolean.TRUE);
                }
                if (user.bot) {
                    int[] iArr5 = this.bots[i22];
                    iArr5[isDialogMuted ? 1 : 0] = iArr5[isDialogMuted ? 1 : 0] + 1;
                } else {
                    if (!user.self && !user.contact) {
                        int[] iArr6 = this.nonContacts[i22];
                        iArr6[isDialogMuted ? 1 : 0] = iArr6[isDialogMuted ? 1 : 0] + 1;
                    }
                    int[] iArr7 = this.contacts[i22];
                    iArr7[isDialogMuted ? 1 : 0] = iArr7[isDialogMuted ? 1 : 0] + 1;
                }
                longSparseArray6.put(user.id, user);
                i20++;
                arrayList4 = arrayList10;
                longSparseArray7 = longSparseArray11;
                arrayList8 = arrayList11;
                size2 = i21;
            }
        }
        LongSparseArray longSparseArray12 = longSparseArray7;
        ArrayList<Long> arrayList12 = arrayList8;
        if (!arrayList9.isEmpty()) {
            ArrayList<Long> arrayList13 = new ArrayList<>();
            ArrayList<TLRPC.EncryptedChat> arrayList14 = new ArrayList<>();
            getEncryptedChatsInternal(TextUtils.join(",", arrayList9), arrayList14, arrayList13);
            if (!arrayList13.isEmpty()) {
                getUsersInternal(arrayList13, arrayList, true);
                int i23 = 0;
                LongSparseArray longSparseArray13 = longSparseArray6;
                for (int size3 = arrayList.size(); i23 < size3; size3 = size3) {
                    TLRPC.User user2 = arrayList.get(i23);
                    longSparseArray8.put(user2.id, user2);
                    i23++;
                    longSparseArray13 = longSparseArray13;
                }
                LongSparseArray longSparseArray14 = longSparseArray13;
                int size4 = arrayList14.size();
                int i24 = 0;
                LongSparseArray longSparseArray15 = longSparseArray8;
                while (i24 < size4) {
                    TLRPC.User user3 = (TLRPC.User) longSparseArray15.get(arrayList14.get(i24).user_id);
                    if (user3 == null) {
                        longSparseArray4 = longSparseArray15;
                        arrayList2 = arrayList14;
                        longSparseArray5 = longSparseArray14;
                        longSparseIntArray = longSparseIntArray5;
                    } else {
                        LongSparseArray longSparseArray16 = longSparseArray15;
                        arrayList2 = arrayList14;
                        long makeEncryptedDialogId = DialogObject.makeEncryptedDialogId(r7.id);
                        longSparseArray4 = longSparseArray16;
                        longSparseArray5 = longSparseArray14;
                        boolean isDialogMuted2 = getMessagesController().isDialogMuted(makeEncryptedDialogId, 0L);
                        int i25 = longSparseIntArray2.get(makeEncryptedDialogId);
                        if (isDialogMuted2) {
                            longSparseArray9.put(user3.id, Boolean.TRUE);
                        }
                        if (i25 == 1) {
                            longSparseArray10.put(user3.id, Boolean.TRUE);
                        }
                        if (!user3.self && !user3.contact) {
                            int[] iArr8 = this.nonContacts[i25];
                            iArr8[isDialogMuted2 ? 1 : 0] = iArr8[isDialogMuted2 ? 1 : 0] + 1;
                            i16 = 1;
                            longSparseIntArray = longSparseIntArray5;
                            longSparseIntArray.put(user3.id, longSparseIntArray.get(user3.id, 0) + i16);
                        }
                        int[] iArr9 = this.contacts[i25];
                        i16 = 1;
                        iArr9[isDialogMuted2 ? 1 : 0] = iArr9[isDialogMuted2 ? 1 : 0] + 1;
                        longSparseIntArray = longSparseIntArray5;
                        longSparseIntArray.put(user3.id, longSparseIntArray.get(user3.id, 0) + i16);
                    }
                    i24++;
                    longSparseIntArray5 = longSparseIntArray;
                    arrayList14 = arrayList2;
                    longSparseArray14 = longSparseArray5;
                    longSparseArray15 = longSparseArray4;
                }
                longSparseArray2 = longSparseArray15;
                longSparseArray = longSparseArray14;
                LongSparseIntArray longSparseIntArray6 = longSparseIntArray5;
                if (!arrayList12.isEmpty()) {
                    getChatsInternal(TextUtils.join(",", arrayList12), arrayList6);
                    int size5 = arrayList6.size();
                    int i26 = 0;
                    while (i26 < size5) {
                        TLRPC.Chat chat = arrayList6.get(i26);
                        if ((chat.migrated_to instanceof TLRPC.TL_inputChannel) || ChatObject.isNotInChat(chat)) {
                            longSparseArray3 = longSparseArray12;
                            this.dialogsWithUnread.remove(-chat.id);
                            this.dialogsWithMentions.remove(-chat.id);
                        } else {
                            boolean isDialogMuted3 = getMessagesController().isDialogMuted(-chat.id, 0L, chat);
                            int i27 = longSparseIntArray2.get(-chat.id);
                            char c = (!isDialogMuted3 || this.dialogsWithMentions.indexOfKey(-chat.id) >= 0) ? (char) 0 : (char) 1;
                            if (isDialogMuted3) {
                                longSparseArray9.put(-chat.id, Boolean.TRUE);
                            }
                            if (i27 == 1) {
                                longSparseArray10.put(-chat.id, Boolean.TRUE);
                            }
                            if (!ChatObject.isChannel(chat) || chat.megagroup) {
                                int[] iArr10 = this.groups[i27];
                                iArr10[c] = iArr10[c] + 1;
                            } else {
                                int[] iArr11 = this.channels[i27];
                                iArr11[c] = iArr11[c] + 1;
                            }
                            longSparseArray3 = longSparseArray12;
                            longSparseArray3.put(chat.id, chat);
                        }
                        i26++;
                        longSparseArray12 = longSparseArray3;
                    }
                }
                LongSparseArray longSparseArray17 = longSparseArray12;
                size = this.dialogFilters.size();
                for (i3 = 0; i3 < size + 2; i3++) {
                    if (i3 < size) {
                        dialogFilter = this.dialogFilters.get(i3);
                        if (dialogFilter.pendingUnreadCount < 0) {
                            i5 = dialogFilter.flags;
                        }
                    } else {
                        int i28 = MessagesController.DIALOG_FILTER_FLAG_ALL_CHATS;
                        if (i3 == size) {
                            if (!getNotificationsController().showBadgeMuted) {
                                i28 |= MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED;
                            }
                            i4 = MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED;
                        } else {
                            i4 = MessagesController.DIALOG_FILTER_FLAG_ONLY_ARCHIVED;
                        }
                        i5 = i4 | i28;
                        dialogFilter = null;
                    }
                    if ((MessagesController.DIALOG_FILTER_FLAG_CONTACTS & i5) != 0) {
                        if ((MessagesController.DIALOG_FILTER_FLAG_ONLY_ARCHIVED & i5) == 0) {
                            int[] iArr12 = this.contacts[0];
                            int i29 = iArr12[0];
                            i6 = (MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i5) == 0 ? iArr12[1] + i29 : i29;
                        } else {
                            i6 = 0;
                        }
                        if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED & i5) == 0) {
                            int[] iArr13 = this.contacts[1];
                            i6 += iArr13[0];
                            if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i5) == 0) {
                                i6 += iArr13[1];
                            }
                        }
                    } else {
                        i6 = 0;
                    }
                    if ((MessagesController.DIALOG_FILTER_FLAG_NON_CONTACTS & i5) != 0) {
                        if ((MessagesController.DIALOG_FILTER_FLAG_ONLY_ARCHIVED & i5) == 0) {
                            int[] iArr14 = this.nonContacts[0];
                            i6 += iArr14[0];
                            if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i5) == 0) {
                                i6 += iArr14[1];
                            }
                        }
                        if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED & i5) == 0) {
                            int[] iArr15 = this.nonContacts[1];
                            i6 += iArr15[0];
                            if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i5) == 0) {
                                i6 += iArr15[1];
                            }
                        }
                    }
                    if ((MessagesController.DIALOG_FILTER_FLAG_GROUPS & i5) != 0) {
                        if ((MessagesController.DIALOG_FILTER_FLAG_ONLY_ARCHIVED & i5) == 0) {
                            int[] iArr16 = this.groups[0];
                            i6 += iArr16[0];
                            if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i5) == 0) {
                                i6 += iArr16[1];
                            }
                        }
                        if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED & i5) == 0) {
                            int[] iArr17 = this.groups[1];
                            i6 += iArr17[0];
                            if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i5) == 0) {
                                i6 += iArr17[1];
                            }
                        }
                    }
                    if ((MessagesController.DIALOG_FILTER_FLAG_CHANNELS & i5) != 0) {
                        if ((MessagesController.DIALOG_FILTER_FLAG_ONLY_ARCHIVED & i5) == 0) {
                            int[] iArr18 = this.channels[0];
                            i6 += iArr18[0];
                            if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i5) == 0) {
                                i6 += iArr18[1];
                            }
                        }
                        if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED & i5) == 0) {
                            int[] iArr19 = this.channels[1];
                            i6 += iArr19[0];
                            if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i5) == 0) {
                                i6 += iArr19[1];
                            }
                        }
                    }
                    if ((MessagesController.DIALOG_FILTER_FLAG_BOTS & i5) != 0) {
                        if ((MessagesController.DIALOG_FILTER_FLAG_ONLY_ARCHIVED & i5) == 0) {
                            int[] iArr20 = this.bots[0];
                            i6 += iArr20[0];
                            if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i5) == 0) {
                                i6 += iArr20[1];
                            }
                        }
                        if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED & i5) == 0) {
                            int[] iArr21 = this.bots[1];
                            i6 += iArr21[0];
                            if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i5) == 0) {
                                i6 += iArr21[1];
                            }
                            if (dialogFilter == null) {
                                int size6 = dialogFilter.alwaysShow.size();
                                int i30 = 0;
                                while (i30 < size6) {
                                    long longValue3 = dialogFilter.alwaysShow.get(i30).longValue();
                                    if (DialogObject.isUserDialog(longValue3)) {
                                        i12 = size6;
                                        int i31 = 0;
                                        for (int i32 = 2; i31 < i32; i32 = 2) {
                                            TLRPC.User user4 = (TLRPC.User) (i31 == 0 ? longSparseArray : longSparseArray2).get(longValue3);
                                            if (user4 != null) {
                                                if (i31 == 0) {
                                                    i13 = size;
                                                    i14 = 1;
                                                } else {
                                                    i13 = size;
                                                    i14 = longSparseIntArray6.get(longValue3, 0);
                                                }
                                                if (user4.bot) {
                                                    i15 = MessagesController.DIALOG_FILTER_FLAG_BOTS;
                                                } else {
                                                    if (!user4.self && !user4.contact) {
                                                        i15 = MessagesController.DIALOG_FILTER_FLAG_NON_CONTACTS;
                                                    }
                                                    i15 = MessagesController.DIALOG_FILTER_FLAG_CONTACTS;
                                                }
                                                if ((i15 & i5) == 0) {
                                                    dialogFilter5 = dialogFilter;
                                                } else {
                                                    if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i5) != 0) {
                                                        dialogFilter5 = dialogFilter;
                                                        if (longSparseArray9.indexOfKey(user4.id) >= 0) {
                                                        }
                                                    } else {
                                                        dialogFilter5 = dialogFilter;
                                                    }
                                                    if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED & i5) != 0) {
                                                        if (longSparseArray10.indexOfKey(user4.id) < 0) {
                                                        }
                                                    }
                                                    i31++;
                                                    size = i13;
                                                    dialogFilter = dialogFilter5;
                                                }
                                                i6 += i14;
                                                i31++;
                                                size = i13;
                                                dialogFilter = dialogFilter5;
                                            } else {
                                                i13 = size;
                                            }
                                            dialogFilter5 = dialogFilter;
                                            i31++;
                                            size = i13;
                                            dialogFilter = dialogFilter5;
                                        }
                                        i11 = size;
                                        dialogFilter4 = dialogFilter;
                                    } else {
                                        i11 = size;
                                        dialogFilter4 = dialogFilter;
                                        i12 = size6;
                                        TLRPC.Chat chat2 = (TLRPC.Chat) longSparseArray17.get(-longValue3);
                                        if (chat2 != null) {
                                            if ((((!ChatObject.isChannel(chat2) || chat2.megagroup) ? MessagesController.DIALOG_FILTER_FLAG_GROUPS : MessagesController.DIALOG_FILTER_FLAG_CHANNELS) & i5) != 0) {
                                                if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i5) != 0) {
                                                    if (longSparseArray9.indexOfKey(-chat2.id) >= 0 && this.dialogsWithMentions.indexOfKey(-chat2.id) < 0) {
                                                    }
                                                }
                                                if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED & i5) != 0) {
                                                    if (longSparseArray10.indexOfKey(-chat2.id) < 0) {
                                                    }
                                                }
                                            }
                                            i6++;
                                        }
                                    }
                                    i30++;
                                    size6 = i12;
                                    size = i11;
                                    dialogFilter = dialogFilter4;
                                }
                                int i33 = size;
                                int size7 = dialogFilter.neverShow.size();
                                int i34 = 0;
                                while (i34 < size7) {
                                    long longValue4 = dialogFilter.neverShow.get(i34).longValue();
                                    if (DialogObject.isUserDialog(longValue4)) {
                                        int i35 = 0;
                                        while (i35 < 2) {
                                            TLRPC.User user5 = (TLRPC.User) (i35 == 0 ? longSparseArray : longSparseArray2).get(longValue4);
                                            if (user5 != null) {
                                                if (i35 == 0) {
                                                    i8 = size7;
                                                    i9 = 1;
                                                } else {
                                                    i8 = size7;
                                                    i9 = longSparseIntArray6.get(longValue4, 0);
                                                }
                                                if (user5.bot) {
                                                    i10 = MessagesController.DIALOG_FILTER_FLAG_BOTS;
                                                } else {
                                                    if (!user5.self && !user5.contact) {
                                                        i10 = MessagesController.DIALOG_FILTER_FLAG_NON_CONTACTS;
                                                    }
                                                    i10 = MessagesController.DIALOG_FILTER_FLAG_CONTACTS;
                                                }
                                                if ((i10 & i5) != 0) {
                                                    if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED & i5) != 0) {
                                                        dialogFilter3 = dialogFilter;
                                                        if (longSparseArray10.indexOfKey(user5.id) >= 0) {
                                                            i35++;
                                                            size7 = i8;
                                                            dialogFilter = dialogFilter3;
                                                        }
                                                    } else {
                                                        dialogFilter3 = dialogFilter;
                                                    }
                                                    if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i5) == 0 || longSparseArray9.indexOfKey(user5.id) < 0) {
                                                        i6 -= i9;
                                                    }
                                                    i35++;
                                                    size7 = i8;
                                                    dialogFilter = dialogFilter3;
                                                }
                                            } else {
                                                i8 = size7;
                                            }
                                            dialogFilter3 = dialogFilter;
                                            i35++;
                                            size7 = i8;
                                            dialogFilter = dialogFilter3;
                                        }
                                        i7 = size7;
                                        dialogFilter2 = dialogFilter;
                                    } else {
                                        i7 = size7;
                                        dialogFilter2 = dialogFilter;
                                        TLRPC.Chat chat3 = (TLRPC.Chat) longSparseArray17.get(-longValue4);
                                        if (chat3 != null) {
                                            if ((((!ChatObject.isChannel(chat3) || chat3.megagroup) ? MessagesController.DIALOG_FILTER_FLAG_GROUPS : MessagesController.DIALOG_FILTER_FLAG_CHANNELS) & i5) != 0 && (((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED & i5) == 0 || longSparseArray10.indexOfKey(-chat3.id) < 0) && ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i5) == 0 || longSparseArray9.indexOfKey(-chat3.id) < 0 || this.dialogsWithMentions.indexOfKey(-chat3.id) >= 0))) {
                                                i6--;
                                            }
                                        }
                                    }
                                    i34++;
                                    size7 = i7;
                                    dialogFilter = dialogFilter2;
                                }
                                dialogFilter.pendingUnreadCount = i6;
                                if (z) {
                                    dialogFilter.unreadCount = i6;
                                }
                                size = i33;
                            } else if (i3 == size) {
                                this.pendingMainUnreadCount = i6;
                                if (z) {
                                    this.mainUnreadCount = i6;
                                }
                            } else if (i3 == size + 1) {
                                this.pendingArchiveUnreadCount = i6;
                                if (z) {
                                    this.archiveUnreadCount = i6;
                                }
                            }
                        }
                    }
                    if (dialogFilter == null) {
                    }
                }
            }
        }
        longSparseArray = longSparseArray6;
        longSparseArray2 = longSparseArray8;
        LongSparseIntArray longSparseIntArray62 = longSparseIntArray5;
        if (!arrayList12.isEmpty()) {
        }
        LongSparseArray longSparseArray172 = longSparseArray12;
        size = this.dialogFilters.size();
        while (i3 < size + 2) {
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* renamed from: checkIfFolderEmptyInternal, reason: merged with bridge method [inline-methods] */
    public void lambda$checkIfFolderEmpty$226(final int i) {
        boolean z = false;
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                sQLiteCursor = this.database.queryFinalized("SELECT did FROM dialogs WHERE folder_id = ?", Integer.valueOf(i));
                while (true) {
                    if (!sQLiteCursor.next()) {
                        z = true;
                        break;
                    }
                    long longValue = sQLiteCursor.longValue(0);
                    if (!DialogObject.isUserDialog(longValue) && !DialogObject.isEncryptedDialog(longValue)) {
                        TLRPC.Chat chat = getChat(-longValue);
                        if (!ChatObject.isNotInChat(chat) && chat.migrated_to == null) {
                            break;
                        }
                    } else {
                        break;
                    }
                }
                sQLiteCursor.dispose();
                if (z) {
                    AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda140
                        @Override // java.lang.Runnable
                        public final void run() {
                            MessagesStorage.this.lambda$checkIfFolderEmptyInternal$225(i);
                        }
                    });
                    this.database.executeFast("DELETE FROM dialogs WHERE did = " + DialogObject.makeFolderDialogId(i)).stepThis().dispose();
                }
            } catch (Exception e) {
                checkSQLException(e);
                if (sQLiteCursor == null) {
                    return;
                }
            }
            sQLiteCursor.dispose();
        } catch (Throwable th) {
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
            throw th;
        }
    }

    private void checkSQLException(Throwable th, boolean z) {
        if (!(th instanceof SQLiteException) || th.getMessage() == null || !th.getMessage().contains("is malformed") || this.tryRecover) {
            FileLog.e(th, z);
            return;
        }
        this.tryRecover = true;
        FileLog.e("disk image malformed detected, try recover");
        if (!recoverDatabase()) {
            FileLog.e(new Exception(th), z);
            return;
        }
        this.tryRecover = false;
        clearLoadingDialogsOffsets();
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda194
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$checkSQLException$8();
            }
        });
        FileLog.e(new Exception("database restored!!"));
    }

    private void cleanupInternal(boolean z) {
        if (z) {
            reset();
        } else {
            clearDatabaseValues();
        }
        SQLiteDatabase sQLiteDatabase = this.database;
        if (sQLiteDatabase != null) {
            sQLiteDatabase.close();
            this.database = null;
        }
        if (z) {
            File file = this.cacheFile;
            if (file != null) {
                file.delete();
                this.cacheFile = null;
            }
            File file2 = this.walCacheFile;
            if (file2 != null) {
                file2.delete();
                this.walCacheFile = null;
            }
            File file3 = this.shmCacheFile;
            if (file3 != null) {
                file3.delete();
                this.shmCacheFile = null;
            }
        }
    }

    private void clearLoadingDialogsOffsets() {
        for (int i = 0; i < 2; i++) {
            getUserConfig().setDialogsLoadOffset(i, 0, 0, 0L, 0L, 0L, 0L);
            getUserConfig().setTotalDialogsCount(i, 0);
        }
        getUserConfig().saveConfig(false);
    }

    /* JADX WARN: Removed duplicated region for block: B:183:0x059b  */
    /* JADX WARN: Removed duplicated region for block: B:185:0x05a0  */
    /* JADX WARN: Removed duplicated region for block: B:187:? A[RETURN, SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void closeHolesInTable(String str, long j, int i, int i2, long j2) {
        SQLiteCursor sQLiteCursor;
        Throwable th;
        Exception exc;
        ArrayList arrayList;
        int i3;
        SQLiteDatabase sQLiteDatabase;
        String str2;
        long j3;
        int i4;
        int i5;
        int i6;
        int i7;
        SQLitePreparedStatement executeFast;
        SQLitePreparedStatement executeFast2;
        SQLitePreparedStatement executeFast3;
        int i8 = i;
        int i9 = i2;
        long j4 = j2;
        SQLitePreparedStatement sQLitePreparedStatement = null;
        try {
            try {
                try {
                    if (j4 != 0) {
                        sQLiteCursor = this.database.queryFinalized(String.format(Locale.US, "SELECT start, end FROM " + str + " WHERE uid = %d AND topic_id = %d AND ((end >= %d AND end <= %d) OR (start >= %d AND start <= %d) OR (start >= %d AND end <= %d) OR (start <= %d AND end >= %d))", Long.valueOf(j), Long.valueOf(j2), Integer.valueOf(i), Integer.valueOf(i2), Integer.valueOf(i), Integer.valueOf(i2), Integer.valueOf(i), Integer.valueOf(i2), Integer.valueOf(i), Integer.valueOf(i2)), new Object[0]);
                    } else {
                        sQLiteCursor = this.database.queryFinalized(String.format(Locale.US, "SELECT start, end FROM " + str + " WHERE uid = %d AND ((end >= %d AND end <= %d) OR (start >= %d AND start <= %d) OR (start >= %d AND end <= %d) OR (start <= %d AND end >= %d))", Long.valueOf(j), Integer.valueOf(i), Integer.valueOf(i2), Integer.valueOf(i), Integer.valueOf(i2), Integer.valueOf(i), Integer.valueOf(i2), Integer.valueOf(i), Integer.valueOf(i2)), new Object[0]);
                    }
                    arrayList = null;
                    while (sQLiteCursor.next()) {
                        try {
                            try {
                                if (arrayList == null) {
                                    arrayList = new ArrayList();
                                }
                                int intValue = sQLiteCursor.intValue(0);
                                int intValue2 = sQLiteCursor.intValue(1);
                                if (intValue != intValue2 || intValue != 1) {
                                    arrayList.add(new Hole(intValue, intValue2));
                                }
                            } catch (Exception e) {
                                exc = e;
                            }
                        } catch (Throwable th2) {
                            th = th2;
                        }
                    }
                    sQLiteCursor.dispose();
                } catch (Throwable th3) {
                    th = th3;
                }
            } catch (Exception e2) {
                e = e2;
            }
        } catch (Exception e3) {
            e = e3;
        } catch (Throwable th4) {
            th = th4;
        }
        if (arrayList != null) {
            int i10 = 0;
            while (i10 < arrayList.size()) {
                try {
                    Hole hole = (Hole) arrayList.get(i10);
                    int i11 = hole.end;
                    int i12 = i11 - 1;
                    ArrayList arrayList2 = arrayList;
                    if (i9 >= i12) {
                        i3 = i10;
                        if (i8 <= hole.start + 1) {
                            if (j4 != 0) {
                                try {
                                    executeFast3 = this.database.executeFast(String.format(Locale.US, "DELETE FROM " + str + " WHERE uid = %d AND topic_id = %d AND start = %d AND end = %d", Long.valueOf(j), Long.valueOf(j2), Integer.valueOf(hole.start), Integer.valueOf(hole.end)));
                                } catch (Throwable th5) {
                                    th = th5;
                                }
                            } else {
                                try {
                                    executeFast3 = this.database.executeFast(String.format(Locale.US, "DELETE FROM " + str + " WHERE uid = %d AND start = %d AND end = %d", Long.valueOf(j), Integer.valueOf(hole.start), Integer.valueOf(hole.end)));
                                } catch (Throwable th6) {
                                    th = th6;
                                }
                            }
                            executeFast3.stepThis().dispose();
                            i5 = i8;
                            i7 = i9;
                            j3 = j;
                            i10 = i3 + 1;
                            i8 = i5;
                            arrayList = arrayList2;
                            i9 = i7;
                            j4 = j2;
                        }
                    } else {
                        i3 = i10;
                    }
                    if (i9 < i12) {
                        int i13 = hole.start;
                        if (i8 <= i13 + 1) {
                            if (i13 != i2) {
                                if (j2 != 0) {
                                    try {
                                        SQLiteDatabase sQLiteDatabase2 = this.database;
                                        Locale locale = Locale.US;
                                        try {
                                            sQLiteDatabase2.executeFast(String.format(locale, "DELETE FROM " + str + " WHERE uid = %d AND topic_id = %d AND start = %d AND end = %d", Long.valueOf(j), Long.valueOf(j2), Integer.valueOf(hole.start), Integer.valueOf(hole.end))).stepThis().dispose();
                                            try {
                                                executeFast = this.database.executeFast(String.format(locale, "REPLACE INTO " + str + " VALUES(%d, %d, %d, %d)", Long.valueOf(j), Long.valueOf(j2), Integer.valueOf(i2), Integer.valueOf(hole.end)));
                                            } catch (Throwable th7) {
                                                th = th7;
                                            }
                                        } catch (Throwable th8) {
                                            th = th8;
                                        }
                                    } catch (Exception e4) {
                                        e = e4;
                                        checkSQLException(e, false);
                                        j3 = j;
                                        i5 = i;
                                        i7 = i2;
                                        i10 = i3 + 1;
                                        i8 = i5;
                                        arrayList = arrayList2;
                                        i9 = i7;
                                        j4 = j2;
                                    }
                                } else {
                                    SQLiteDatabase sQLiteDatabase3 = this.database;
                                    Locale locale2 = Locale.US;
                                    try {
                                        sQLiteDatabase3.executeFast(String.format(locale2, "DELETE FROM " + str + " WHERE uid = %d AND start = %d AND end = %d", Long.valueOf(j), Integer.valueOf(hole.start), Integer.valueOf(hole.end))).stepThis().dispose();
                                        try {
                                            executeFast = this.database.executeFast(String.format(locale2, "REPLACE INTO " + str + " VALUES(%d, %d, %d)", Long.valueOf(j), Integer.valueOf(i2), Integer.valueOf(hole.end)));
                                        } catch (Throwable th9) {
                                            th = th9;
                                        }
                                    } catch (Throwable th10) {
                                        th = th10;
                                    }
                                }
                                executeFast.stepThis().dispose();
                            }
                            j3 = j;
                            i5 = i;
                            i7 = i2;
                            i10 = i3 + 1;
                            i8 = i5;
                            arrayList = arrayList2;
                            i9 = i7;
                            j4 = j2;
                        } else {
                            if (j2 != 0) {
                                try {
                                    this.database.executeFast(String.format(Locale.US, "DELETE FROM " + str + " WHERE uid = %d AND topic_id = %d AND start = %d AND end = %d", Long.valueOf(j), Long.valueOf(j2), Integer.valueOf(hole.start), Integer.valueOf(hole.end))).stepThis().dispose();
                                    sQLiteDatabase = this.database;
                                    str2 = "REPLACE INTO " + str + " VALUES(?, ?, ?, ?)";
                                } catch (Throwable th11) {
                                    th = th11;
                                }
                            } else {
                                try {
                                    this.database.executeFast(String.format(Locale.US, "DELETE FROM " + str + " WHERE uid = %d AND start = %d AND end = %d", Long.valueOf(j), Integer.valueOf(hole.start), Integer.valueOf(hole.end))).stepThis().dispose();
                                    sQLiteDatabase = this.database;
                                    str2 = "REPLACE INTO " + str + " VALUES(?, ?, ?)";
                                } catch (Throwable th12) {
                                    th = th12;
                                }
                            }
                            SQLitePreparedStatement executeFast4 = sQLiteDatabase.executeFast(str2);
                            try {
                                executeFast4.requery();
                                j3 = j;
                                executeFast4.bindLong(1, j3);
                                if (j2 != 0) {
                                    executeFast4.bindLong(2, j2);
                                    i4 = 3;
                                } else {
                                    i4 = 2;
                                }
                                int i14 = i4 + 1;
                                executeFast4.bindInteger(i4, hole.start);
                                i5 = i;
                                executeFast4.bindInteger(i14, i5);
                                executeFast4.step();
                                executeFast4.requery();
                                executeFast4.bindLong(1, j3);
                                if (j2 != 0) {
                                    executeFast4.bindLong(2, j2);
                                    i6 = 3;
                                } else {
                                    i6 = 2;
                                }
                                i7 = i2;
                                executeFast4.bindInteger(i6, i7);
                                executeFast4.bindInteger(i6 + 1, hole.end);
                                executeFast4.step();
                                executeFast4.dispose();
                                i10 = i3 + 1;
                                i8 = i5;
                                arrayList = arrayList2;
                                i9 = i7;
                                j4 = j2;
                            } catch (Exception e5) {
                                exc = e5;
                                sQLiteCursor = null;
                                sQLitePreparedStatement = executeFast4;
                                checkSQLException(exc);
                                if (sQLitePreparedStatement != null) {
                                }
                                if (sQLiteCursor == null) {
                                }
                            } catch (Throwable th13) {
                                th = th13;
                                sQLiteCursor = null;
                                sQLitePreparedStatement = executeFast4;
                            }
                        }
                        th = th;
                        sQLiteCursor = null;
                        if (sQLitePreparedStatement != null) {
                            sQLitePreparedStatement.dispose();
                        }
                        if (sQLiteCursor == null) {
                            throw th;
                        }
                        sQLiteCursor.dispose();
                        throw th;
                    }
                    if (i11 != i8) {
                        if (j4 != 0) {
                            try {
                                SQLiteDatabase sQLiteDatabase4 = this.database;
                                Locale locale3 = Locale.US;
                                try {
                                    sQLiteDatabase4.executeFast(String.format(locale3, "DELETE FROM " + str + " WHERE uid = %d AND topic_id = %d AND start = %d AND end = %d", Long.valueOf(j), Long.valueOf(j2), Integer.valueOf(hole.start), Integer.valueOf(hole.end))).stepThis().dispose();
                                    try {
                                        executeFast2 = this.database.executeFast(String.format(locale3, "REPLACE INTO " + str + " VALUES(%d, %d, %d, %d)", Long.valueOf(j), Long.valueOf(j2), Integer.valueOf(hole.start), Integer.valueOf(i)));
                                    } catch (Throwable th14) {
                                        th = th14;
                                    }
                                } catch (Throwable th15) {
                                    th = th15;
                                }
                            } catch (Exception e6) {
                                e = e6;
                                checkSQLException(e, false);
                                j3 = j;
                                i5 = i;
                                i7 = i2;
                                i10 = i3 + 1;
                                i8 = i5;
                                arrayList = arrayList2;
                                i9 = i7;
                                j4 = j2;
                            }
                        } else {
                            SQLiteDatabase sQLiteDatabase5 = this.database;
                            Locale locale4 = Locale.US;
                            try {
                                sQLiteDatabase5.executeFast(String.format(locale4, "DELETE FROM " + str + " WHERE uid = %d AND start = %d AND end = %d", Long.valueOf(j), Integer.valueOf(hole.start), Integer.valueOf(hole.end))).stepThis().dispose();
                                try {
                                    executeFast2 = this.database.executeFast(String.format(locale4, "REPLACE INTO " + str + " VALUES(%d, %d, %d)", Long.valueOf(j), Integer.valueOf(hole.start), Integer.valueOf(i)));
                                } catch (Throwable th16) {
                                    th = th16;
                                }
                            } catch (Throwable th17) {
                                th = th17;
                            }
                        }
                        executeFast2.stepThis().dispose();
                    }
                    j3 = j;
                    i7 = i2;
                    i5 = i8;
                    i10 = i3 + 1;
                    i8 = i5;
                    arrayList = arrayList2;
                    i9 = i7;
                    j4 = j2;
                } catch (Exception e7) {
                    e = e7;
                    exc = e;
                    sQLiteCursor = null;
                    checkSQLException(exc);
                    if (sQLitePreparedStatement != null) {
                        sQLitePreparedStatement.dispose();
                    }
                    if (sQLiteCursor == null) {
                        sQLiteCursor.dispose();
                        return;
                    }
                    return;
                }
            }
        }
    }

    public static void createFirstHoles(long j, SQLitePreparedStatement sQLitePreparedStatement, SQLitePreparedStatement sQLitePreparedStatement2, int i, long j2) {
        int i2;
        int i3;
        sQLitePreparedStatement.requery();
        sQLitePreparedStatement.bindLong(1, j);
        if (j2 != 0) {
            sQLitePreparedStatement.bindLong(2, j2);
            i2 = 3;
        } else {
            i2 = 2;
        }
        int i4 = i2 + 1;
        sQLitePreparedStatement.bindInteger(i2, i == 1 ? 1 : 0);
        sQLitePreparedStatement.bindInteger(i4, i);
        sQLitePreparedStatement.step();
        for (int i5 = 0; i5 < 8; i5++) {
            sQLitePreparedStatement2.requery();
            sQLitePreparedStatement2.bindLong(1, j);
            if (j2 != 0) {
                sQLitePreparedStatement2.bindLong(2, j2);
                i3 = 3;
            } else {
                i3 = 2;
            }
            int i6 = i3 + 1;
            sQLitePreparedStatement2.bindInteger(i3, i5);
            int i7 = i3 + 2;
            sQLitePreparedStatement2.bindInteger(i6, i == 1 ? 1 : 0);
            sQLitePreparedStatement2.bindInteger(i7, i);
            sQLitePreparedStatement2.step();
        }
    }

    private void createOrEditTopic(final long j, TLRPC.Message message) {
        final TLRPC.TL_forumTopic tL_forumTopic = new TLRPC.TL_forumTopic();
        tL_forumTopic.topicStartMessage = message;
        tL_forumTopic.top_message = message.id;
        tL_forumTopic.topMessage = message;
        tL_forumTopic.from_id = message.from_id;
        tL_forumTopic.notify_settings = new TLRPC.TL_peerNotifySettings();
        tL_forumTopic.unread_count = 0;
        TLRPC.MessageAction messageAction = message.action;
        if (messageAction instanceof TLRPC.TL_messageActionTopicCreate) {
            TLRPC.TL_messageActionTopicCreate tL_messageActionTopicCreate = (TLRPC.TL_messageActionTopicCreate) messageAction;
            tL_forumTopic.id = message.id;
            long j2 = tL_messageActionTopicCreate.icon_emoji_id;
            tL_forumTopic.icon_emoji_id = j2;
            tL_forumTopic.title = tL_messageActionTopicCreate.title;
            tL_forumTopic.icon_color = tL_messageActionTopicCreate.icon_color;
            if (j2 != 0) {
                tL_forumTopic.flags |= 1;
            }
            ArrayList arrayList = new ArrayList();
            arrayList.add(tL_forumTopic);
            saveTopics(j, arrayList, false, false, message.date);
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda47
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesStorage.this.lambda$createOrEditTopic$191(j, tL_forumTopic);
                }
            });
            return;
        }
        if (messageAction instanceof TLRPC.TL_messageActionTopicEdit) {
            TLRPC.TL_messageActionTopicEdit tL_messageActionTopicEdit = (TLRPC.TL_messageActionTopicEdit) messageAction;
            tL_forumTopic.id = (int) MessageObject.getTopicId(this.currentAccount, message, true);
            tL_forumTopic.icon_emoji_id = tL_messageActionTopicEdit.icon_emoji_id;
            tL_forumTopic.title = tL_messageActionTopicEdit.title;
            tL_forumTopic.closed = tL_messageActionTopicEdit.closed;
            tL_forumTopic.hidden = tL_messageActionTopicEdit.hidden;
            int i = tL_messageActionTopicEdit.flags;
            int i2 = (i & 1) != 0 ? 1 : 0;
            if ((i & 2) != 0) {
                i2 += 2;
            }
            if ((i & 4) != 0) {
                i2 += 8;
            }
            if ((i & 8) != 0) {
                i2 += 32;
            }
            updateTopicData(j, tL_forumTopic, i2, message.date);
        }
    }

    public static void createTables(SQLiteDatabase sQLiteDatabase) {
        sQLiteDatabase.executeFast("CREATE TABLE messages_holes(uid INTEGER, start INTEGER, end INTEGER, PRIMARY KEY(uid, start));").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS uid_end_messages_holes ON messages_holes(uid, end);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE media_holes_v2(uid INTEGER, type INTEGER, start INTEGER, end INTEGER, PRIMARY KEY(uid, type, start));").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS uid_end_media_holes_v2 ON media_holes_v2(uid, type, end);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE scheduled_messages_v2(mid INTEGER, uid INTEGER, send_state INTEGER, date INTEGER, data BLOB, ttl INTEGER, replydata BLOB, reply_to_message_id INTEGER, PRIMARY KEY(mid, uid))").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS send_state_idx_scheduled_messages_v2 ON scheduled_messages_v2(mid, send_state, date);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS uid_date_idx_scheduled_messages_v2 ON scheduled_messages_v2(uid, date);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS reply_to_idx_scheduled_messages_v2 ON scheduled_messages_v2(mid, reply_to_message_id);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS idx_to_reply_scheduled_messages_v2 ON scheduled_messages_v2(reply_to_message_id, mid);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE messages_v2(mid INTEGER, uid INTEGER, read_state INTEGER, send_state INTEGER, date INTEGER, data BLOB, out INTEGER, ttl INTEGER, media INTEGER, replydata BLOB, imp INTEGER, mention INTEGER, forwards INTEGER, replies_data BLOB, thread_reply_id INTEGER, is_channel INTEGER, reply_to_message_id INTEGER, custom_params BLOB, group_id INTEGER, reply_to_story_id INTEGER, PRIMARY KEY(mid, uid))").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS uid_mid_read_out_idx_messages_v2 ON messages_v2(uid, mid, read_state, out);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS uid_date_mid_idx_messages_v2 ON messages_v2(uid, date, mid);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS mid_out_idx_messages_v2 ON messages_v2(mid, out);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS task_idx_messages_v2 ON messages_v2(uid, out, read_state, ttl, date, send_state);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS send_state_idx_messages_v2 ON messages_v2(mid, send_state, date);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS uid_mention_idx_messages_v2 ON messages_v2(uid, mention, read_state);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS is_channel_idx_messages_v2 ON messages_v2(mid, is_channel);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS reply_to_idx_messages_v2 ON messages_v2(mid, reply_to_message_id);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS idx_to_reply_messages_v2 ON messages_v2(reply_to_message_id, mid);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS uid_mid_groupid_messages_v2 ON messages_v2(uid, mid, group_id);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE saved_dialogs(did INTEGER PRIMARY KEY, date INTEGER, last_mid INTEGER, pinned INTEGER, flags INTEGER, folder_id INTEGER, last_mid_group INTEGER, count INTEGER)").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS date_idx_dialogs ON saved_dialogs(date);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS last_mid_idx_dialogs ON saved_dialogs(last_mid);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS folder_id_idx_dialogs ON saved_dialogs(folder_id);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS flags_idx_dialogs ON saved_dialogs(flags);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE download_queue(uid INTEGER, type INTEGER, date INTEGER, data BLOB, parent TEXT, PRIMARY KEY (uid, type));").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS type_date_idx_download_queue ON download_queue(type, date);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE user_contacts_v7(key TEXT PRIMARY KEY, uid INTEGER, fname TEXT, sname TEXT, imported INTEGER)").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE user_phones_v7(key TEXT, phone TEXT, sphone TEXT, deleted INTEGER, PRIMARY KEY (key, phone))").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS sphone_deleted_idx_user_phones ON user_phones_v7(sphone, deleted);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE dialogs(did INTEGER PRIMARY KEY, date INTEGER, unread_count INTEGER, last_mid INTEGER, inbox_max INTEGER, outbox_max INTEGER, last_mid_i INTEGER, unread_count_i INTEGER, pts INTEGER, date_i INTEGER, pinned INTEGER, flags INTEGER, folder_id INTEGER, data BLOB, unread_reactions INTEGER, last_mid_group INTEGER, ttl_period INTEGER)").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS date_idx_dialogs ON dialogs(date);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS last_mid_idx_dialogs ON dialogs(last_mid);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS unread_count_idx_dialogs ON dialogs(unread_count);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS last_mid_i_idx_dialogs ON dialogs(last_mid_i);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS unread_count_i_idx_dialogs ON dialogs(unread_count_i);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS folder_id_idx_dialogs ON dialogs(folder_id);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS flags_idx_dialogs ON dialogs(flags);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE dialog_filter(id INTEGER PRIMARY KEY, ord INTEGER, unread_count INTEGER, flags INTEGER, title TEXT, color INTEGER DEFAULT -1)").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE dialog_filter_ep(id INTEGER, peer INTEGER, PRIMARY KEY (id, peer))").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE dialog_filter_pin_v2(id INTEGER, peer INTEGER, pin INTEGER, PRIMARY KEY (id, peer))").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE randoms_v2(random_id INTEGER, mid INTEGER, uid INTEGER, PRIMARY KEY (random_id, mid, uid))").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS mid_idx_randoms_v2 ON randoms_v2(mid, uid);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE enc_tasks_v4(mid INTEGER, uid INTEGER, date INTEGER, media INTEGER, PRIMARY KEY(mid, uid, media))").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS date_idx_enc_tasks_v4 ON enc_tasks_v4(date);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE messages_seq(mid INTEGER PRIMARY KEY, seq_in INTEGER, seq_out INTEGER);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS seq_idx_messages_seq ON messages_seq(seq_in, seq_out);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE params(id INTEGER PRIMARY KEY, seq INTEGER, pts INTEGER, date INTEGER, qts INTEGER, lsv INTEGER, sg INTEGER, pbytes BLOB)").stepThis().dispose();
        sQLiteDatabase.executeFast("INSERT INTO params VALUES(1, 0, 0, 0, 0, 0, 0, NULL)").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE media_v4(mid INTEGER, uid INTEGER, date INTEGER, type INTEGER, data BLOB, PRIMARY KEY(mid, uid, type))").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS uid_mid_type_date_idx_media_v4 ON media_v4(uid, mid, type, date);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE bot_keyboard(uid INTEGER PRIMARY KEY, mid INTEGER, info BLOB)").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS bot_keyboard_idx_mid_v2 ON bot_keyboard(mid, uid);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE bot_keyboard_topics(uid INTEGER, tid INTEGER, mid INTEGER, info BLOB, PRIMARY KEY(uid, tid))").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS bot_keyboard_topics_idx_mid_v2 ON bot_keyboard_topics(mid, uid, tid);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE chat_settings_v2(uid INTEGER PRIMARY KEY, info BLOB, pinned INTEGER, online INTEGER, inviter INTEGER, links INTEGER, participants_count INTEGER)").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS chat_settings_pinned_idx ON chat_settings_v2(uid, pinned) WHERE pinned != 0;").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE user_settings(uid INTEGER PRIMARY KEY, info BLOB, pinned INTEGER)").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS user_settings_pinned_idx ON user_settings(uid, pinned) WHERE pinned != 0;").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE chat_pinned_v2(uid INTEGER, mid INTEGER, data BLOB, PRIMARY KEY (uid, mid));").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE chat_pinned_count(uid INTEGER PRIMARY KEY, count INTEGER, end INTEGER);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE chat_hints(did INTEGER, type INTEGER, rating REAL, date INTEGER, PRIMARY KEY(did, type))").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS chat_hints_rating_idx ON chat_hints(rating);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE botcache(id TEXT PRIMARY KEY, date INTEGER, data BLOB)").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS botcache_date_idx ON botcache(date);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE users_data(uid INTEGER PRIMARY KEY, about TEXT)").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE users(uid INTEGER PRIMARY KEY, name TEXT, status INTEGER, data BLOB)").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE chats(uid INTEGER PRIMARY KEY, name TEXT, data BLOB)").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE enc_chats(uid INTEGER PRIMARY KEY, user INTEGER, name TEXT, data BLOB, g BLOB, authkey BLOB, ttl INTEGER, layer INTEGER, seq_in INTEGER, seq_out INTEGER, use_count INTEGER, exchange_id INTEGER, key_date INTEGER, fprint INTEGER, fauthkey BLOB, khash BLOB, in_seq_no INTEGER, admin_id INTEGER, mtproto_seq INTEGER)").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE channel_users_v2(did INTEGER, uid INTEGER, date INTEGER, data BLOB, PRIMARY KEY(did, uid))").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE channel_admins_v3(did INTEGER, uid INTEGER, data BLOB, PRIMARY KEY(did, uid))").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE contacts(uid INTEGER PRIMARY KEY, mutual INTEGER)").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE dialog_photos(uid INTEGER, id INTEGER, num INTEGER, data BLOB, PRIMARY KEY (uid, id))").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE dialog_photos_count(uid INTEGER PRIMARY KEY, count INTEGER)").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE dialog_settings(did INTEGER PRIMARY KEY, flags INTEGER);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE web_recent_v3(id TEXT, type INTEGER, image_url TEXT, thumb_url TEXT, local_url TEXT, width INTEGER, height INTEGER, size INTEGER, date INTEGER, document BLOB, PRIMARY KEY (id, type));").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE stickers_v2(id INTEGER PRIMARY KEY, data BLOB, date INTEGER, hash INTEGER);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE stickers_featured(id INTEGER PRIMARY KEY, data BLOB, unread BLOB, date INTEGER, hash INTEGER, premium INTEGER, emoji INTEGER);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE stickers_dice(emoji TEXT PRIMARY KEY, data BLOB, date INTEGER);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE hashtag_recent_v2(id TEXT PRIMARY KEY, date INTEGER);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE webpage_pending_v2(id INTEGER, mid INTEGER, uid INTEGER, PRIMARY KEY (id, mid, uid));").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE sent_files_v2(uid TEXT, type INTEGER, data BLOB, parent TEXT, PRIMARY KEY (uid, type))").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE search_recent(did INTEGER PRIMARY KEY, date INTEGER);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE media_counts_v2(uid INTEGER, type INTEGER, count INTEGER, old INTEGER, PRIMARY KEY(uid, type))").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE keyvalue(id TEXT PRIMARY KEY, value TEXT)").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE bot_info_v2(uid INTEGER, dialogId INTEGER, info BLOB, PRIMARY KEY(uid, dialogId))").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE pending_tasks(id INTEGER PRIMARY KEY, data BLOB);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE requested_holes(uid INTEGER, seq_out_start INTEGER, seq_out_end INTEGER, PRIMARY KEY (uid, seq_out_start, seq_out_end));").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE sharing_locations(uid INTEGER PRIMARY KEY, mid INTEGER, date INTEGER, period INTEGER, message BLOB, proximity INTEGER);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE stickersets2(id INTEGER PRIMATE KEY, data BLOB, hash INTEGER, date INTEGER, short_name TEXT);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS stickersets2_id_index ON stickersets2(id);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS stickersets2_id_short_name ON stickersets2(id, short_name);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS stickers_featured_emoji_index ON stickers_featured(emoji);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE shortcut_widget(id INTEGER, did INTEGER, ord INTEGER, PRIMARY KEY (id, did));").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS shortcut_widget_did ON shortcut_widget(did);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE emoji_keywords_v2(lang TEXT, keyword TEXT, emoji TEXT, PRIMARY KEY(lang, keyword, emoji));").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS emoji_keywords_v2_keyword ON emoji_keywords_v2(keyword);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE emoji_keywords_info_v2(lang TEXT PRIMARY KEY, alias TEXT, version INTEGER, date INTEGER);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE wallpapers2(uid INTEGER PRIMARY KEY, data BLOB, num INTEGER)").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS wallpapers_num ON wallpapers2(num);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE unread_push_messages(uid INTEGER, mid INTEGER, random INTEGER, date INTEGER, data BLOB, fm TEXT, name TEXT, uname TEXT, flags INTEGER, topicId INTEGER, is_reaction INTEGER, PRIMARY KEY(uid, mid))").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS unread_push_messages_idx_date ON unread_push_messages(date);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS unread_push_messages_idx_random ON unread_push_messages(random);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE polls_v2(mid INTEGER, uid INTEGER, id INTEGER, PRIMARY KEY (mid, uid));").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS polls_id_v2 ON polls_v2(id);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE reactions(data BLOB, hash INTEGER, date INTEGER);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE reaction_mentions(message_id INTEGER, state INTEGER, dialog_id INTEGER, PRIMARY KEY(message_id, dialog_id))").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS reaction_mentions_did ON reaction_mentions(dialog_id);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE downloading_documents(data BLOB, hash INTEGER, id INTEGER, state INTEGER, date INTEGER, PRIMARY KEY(hash, id));").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE animated_emoji(document_id INTEGER PRIMARY KEY, data BLOB);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE attach_menu_bots(data BLOB, hash INTEGER, date INTEGER);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE premium_promo(data BLOB, date INTEGER);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE emoji_statuses(data BLOB, type INTEGER);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE messages_holes_topics(uid INTEGER, topic_id INTEGER, start INTEGER, end INTEGER, PRIMARY KEY(uid, topic_id, start));").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS uid_end_messages_holes ON messages_holes_topics(uid, topic_id, end);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE messages_topics(mid INTEGER, uid INTEGER, topic_id INTEGER, read_state INTEGER, send_state INTEGER, date INTEGER, data BLOB, out INTEGER, ttl INTEGER, media INTEGER, replydata BLOB, imp INTEGER, mention INTEGER, forwards INTEGER, replies_data BLOB, thread_reply_id INTEGER, is_channel INTEGER, reply_to_message_id INTEGER, custom_params BLOB, reply_to_story_id INTEGER, PRIMARY KEY(mid, topic_id, uid))").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS uid_date_mid_idx_messages_topics ON messages_topics(uid, date, mid);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS mid_out_idx_messages_topics ON messages_topics(mid, out);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS task_idx_messages_topics ON messages_topics(uid, out, read_state, ttl, date, send_state);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS send_state_idx_messages_topics ON messages_topics(mid, send_state, date);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS is_channel_idx_messages_topics ON messages_topics(mid, is_channel);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS reply_to_idx_messages_topics ON messages_topics(mid, reply_to_message_id);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS idx_to_reply_messages_topics ON messages_topics(reply_to_message_id, mid);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS mid_uid_messages_topics ON messages_topics(mid, uid);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS uid_mid_read_out_idx_messages_topics ON messages_topics(uid, topic_id, mid, read_state, out);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS uid_mention_idx_messages_topics ON messages_topics(uid, topic_id, mention, read_state);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS uid_topic_id_messages_topics ON messages_topics(uid, topic_id);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS uid_topic_id_date_mid_messages_topics ON messages_topics(uid, topic_id, date, mid);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS uid_topic_id_mid_messages_topics ON messages_topics(uid, topic_id, mid);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE media_topics(mid INTEGER, uid INTEGER, topic_id INTEGER, date INTEGER, type INTEGER, data BLOB, PRIMARY KEY(mid, uid, topic_id, type))").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS uid_mid_type_date_idx_media_topics ON media_topics(uid, topic_id, mid, type, date);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE media_holes_topics(uid INTEGER, topic_id INTEGER, type INTEGER, start INTEGER, end INTEGER, PRIMARY KEY(uid, topic_id, type, start));").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS uid_end_media_holes_topics ON media_holes_topics(uid, topic_id, type, end);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE topics(did INTEGER, topic_id INTEGER, data BLOB, top_message INTEGER, topic_message BLOB, unread_count INTEGER, max_read_id INTEGER, unread_mentions INTEGER, unread_reactions INTEGER, read_outbox INTEGER, pinned INTEGER, total_messages_count INTEGER, hidden INTEGER, edit_date INTEGER, PRIMARY KEY(did, topic_id));").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS did_top_message_topics ON topics(did, top_message);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS did_topics ON topics(did);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE media_counts_topics(uid INTEGER, topic_id INTEGER, type INTEGER, count INTEGER, old INTEGER, PRIMARY KEY(uid, topic_id, type))").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE reaction_mentions_topics(message_id INTEGER, state INTEGER, dialog_id INTEGER, topic_id INTEGER, PRIMARY KEY(message_id, dialog_id, topic_id))").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS reaction_mentions_topics_did ON reaction_mentions_topics(dialog_id, topic_id);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE emoji_groups(type INTEGER PRIMARY KEY, data BLOB)").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE app_config(data BLOB)").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE effects(data BLOB)").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE stories (dialog_id INTEGER, story_id INTEGER, data BLOB, custom_params BLOB, PRIMARY KEY (dialog_id, story_id));").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE stories_counter (dialog_id INTEGER PRIMARY KEY, count INTEGER, max_read INTEGER);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE profile_stories (dialog_id INTEGER, story_id INTEGER, data BLOB, type INTEGER, seen INTEGER, pin INTEGER, PRIMARY KEY(dialog_id, story_id));").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE story_drafts (id INTEGER PRIMARY KEY, date INTEGER, data BLOB, type INTEGER);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE story_pushes (uid INTEGER, sid INTEGER, date INTEGER, localName TEXT, flags INTEGER, expire_date INTEGER, PRIMARY KEY(uid, sid));").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE unconfirmed_auth (data BLOB);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE saved_reaction_tags (topic_id INTEGER PRIMARY KEY, data BLOB);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE tag_message_id(mid INTEGER, topic_id INTEGER, tag INTEGER, text TEXT);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS tag_idx_tag_message_id ON tag_message_id(tag);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS tag_text_idx_tag_message_id ON tag_message_id(tag, text COLLATE NOCASE);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS tag_topic_idx_tag_message_id ON tag_message_id(topic_id, tag);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS tag_topic_text_idx_tag_message_id ON tag_message_id(topic_id, tag, text COLLATE NOCASE);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE business_replies(topic_id INTEGER PRIMARY KEY, name TEXT, order_value INTEGER, count INTEGER);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE quick_replies_messages(mid INTEGER, topic_id INTEGER, send_state INTEGER, date INTEGER, data BLOB, ttl INTEGER, replydata BLOB, reply_to_message_id INTEGER, PRIMARY KEY(mid, topic_id))").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS topic_date_idx_quick_replies_messages ON quick_replies_messages(topic_id, date);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS reply_to_idx_quick_replies_messages ON quick_replies_messages(mid, reply_to_message_id);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS idx_to_reply_quick_replies_messages ON quick_replies_messages(reply_to_message_id, mid);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE business_links(data BLOB, order_value INTEGER);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE fact_checks(hash INTEGER PRIMARY KEY, data BLOB, expires INTEGER);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE popular_bots(uid INTEGER PRIMARY KEY, time INTEGER, offset TEXT);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE star_gifts2(id INTEGER PRIMARY KEY, data BLOB, hash INTEGER, time INTEGER, pos INTEGER);").stepThis().dispose();
        sQLiteDatabase.executeFast("PRAGMA user_version = 159").stepThis().dispose();
    }

    /* JADX WARN: Removed duplicated region for block: B:37:0x00c9  */
    /* JADX WARN: Removed duplicated region for block: B:39:0x00ce  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void createTaskForSecretMedia(long j, SparseArray<ArrayList<Integer>> sparseArray) {
        SQLitePreparedStatement sQLitePreparedStatement;
        SQLiteDatabase sQLiteDatabase;
        try {
            ArrayList arrayList = new ArrayList();
            if (sparseArray.size() != 0) {
                this.database.beginTransaction();
                SQLitePreparedStatement executeFast = this.database.executeFast("REPLACE INTO enc_tasks_v4 VALUES(?, ?, ?, ?)");
                int i = ConnectionsManager.DEFAULT_DATACENTER_ID;
                for (int i2 = 0; i2 < sparseArray.size(); i2++) {
                    try {
                        int keyAt = sparseArray.keyAt(i2);
                        ArrayList<Integer> arrayList2 = sparseArray.get(keyAt);
                        for (int i3 = 0; i3 < arrayList2.size(); i3++) {
                            int intValue = arrayList2.get(i3).intValue();
                            executeFast.requery();
                            executeFast.bindInteger(1, intValue);
                            executeFast.bindLong(2, j);
                            executeFast.bindInteger(3, keyAt);
                            executeFast.bindInteger(4, 1);
                            i = Math.min(i, intValue);
                            executeFast.step();
                            arrayList.add(arrayList2.get(i3));
                        }
                    } catch (Exception e) {
                        e = e;
                        sQLitePreparedStatement = executeFast;
                        try {
                            checkSQLException(e);
                            SQLiteDatabase sQLiteDatabase2 = this.database;
                            if (sQLiteDatabase2 != null) {
                                sQLiteDatabase2.commitTransaction();
                            }
                            if (sQLitePreparedStatement != null) {
                                sQLitePreparedStatement.dispose();
                                return;
                            }
                            return;
                        } catch (Throwable th) {
                            th = th;
                            sQLiteDatabase = this.database;
                            if (sQLiteDatabase != null) {
                                sQLiteDatabase.commitTransaction();
                            }
                            if (sQLitePreparedStatement != null) {
                                sQLitePreparedStatement.dispose();
                            }
                            throw th;
                        }
                    } catch (Throwable th2) {
                        th = th2;
                        sQLitePreparedStatement = executeFast;
                        sQLiteDatabase = this.database;
                        if (sQLiteDatabase != null) {
                        }
                        if (sQLitePreparedStatement != null) {
                        }
                        throw th;
                    }
                }
                executeFast.dispose();
                this.database.commitTransaction();
                this.database.executeFast(String.format(Locale.US, "UPDATE messages_v2 SET ttl = 0 WHERE uid = %d AND mid IN(%s)", Long.valueOf(j), TextUtils.join(", ", arrayList))).stepThis().dispose();
                getMessagesController().didAddedNewTask(i, j, sparseArray);
            }
            SQLiteDatabase sQLiteDatabase3 = this.database;
            if (sQLiteDatabase3 != null) {
                sQLiteDatabase3.commitTransaction();
            }
        } catch (Exception e2) {
            e = e2;
            sQLitePreparedStatement = null;
        } catch (Throwable th3) {
            th = th3;
            sQLitePreparedStatement = null;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* renamed from: deleteDialogFilterInternal, reason: merged with bridge method [inline-methods] */
    public void lambda$deleteDialogFilter$69(MessagesController.DialogFilter dialogFilter) {
        try {
            this.dialogFilters.remove(dialogFilter);
            this.dialogFiltersMap.remove(dialogFilter.id);
            this.database.executeFast("DELETE FROM dialog_filter WHERE id = " + dialogFilter.id).stepThis().dispose();
            this.database.executeFast("DELETE FROM dialog_filter_ep WHERE id = " + dialogFilter.id).stepThis().dispose();
            this.database.executeFast("DELETE FROM dialog_filter_pin_v2 WHERE id = " + dialogFilter.id).stepThis().dispose();
        } catch (Exception e) {
            checkSQLException(e);
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:30:0x0072  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void deleteFromDownloadQueue(final ArrayList<Pair<Long, Integer>> arrayList, boolean z) {
        SQLiteDatabase sQLiteDatabase;
        Exception e;
        SQLiteDatabase sQLiteDatabase2;
        SQLitePreparedStatement executeFast;
        if (arrayList == null || arrayList.isEmpty()) {
            return;
        }
        SQLitePreparedStatement sQLitePreparedStatement = null;
        try {
            if (z) {
                try {
                    this.database.beginTransaction();
                } catch (Exception e2) {
                    e = e2;
                    checkSQLException(e);
                    if (sQLitePreparedStatement != null) {
                        sQLitePreparedStatement.dispose();
                    }
                    if (z || (sQLiteDatabase2 = this.database) == null) {
                        return;
                    }
                    sQLiteDatabase2.commitTransaction();
                }
            }
            executeFast = this.database.executeFast("DELETE FROM download_queue WHERE uid = ? AND type = ?");
        } catch (Throwable th) {
            th = th;
        }
        try {
            int size = arrayList.size();
            for (int i = 0; i < size; i++) {
                Pair<Long, Integer> pair = arrayList.get(i);
                executeFast.requery();
                executeFast.bindLong(1, ((Long) pair.first).longValue());
                executeFast.bindInteger(2, ((Integer) pair.second).intValue());
                executeFast.step();
            }
            executeFast.dispose();
            if (z) {
                this.database.commitTransaction();
            }
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda123
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesStorage.this.lambda$deleteFromDownloadQueue$176(arrayList);
                }
            });
            if (!z || (sQLiteDatabase2 = this.database) == null) {
                return;
            }
        } catch (Exception e3) {
            e = e3;
            sQLitePreparedStatement = executeFast;
            checkSQLException(e);
            if (sQLitePreparedStatement != null) {
            }
            if (z) {
                return;
            } else {
                return;
            }
        } catch (Throwable th2) {
            th = th2;
            sQLitePreparedStatement = executeFast;
            if (sQLitePreparedStatement != null) {
                sQLitePreparedStatement.dispose();
            }
            if (z && (sQLiteDatabase = this.database) != null) {
                sQLiteDatabase.commitTransaction();
            }
            throw th;
        }
        sQLiteDatabase2.commitTransaction();
    }

    private void doneHolesInTable(String str, long j, int i, long j2) {
        SQLiteDatabase sQLiteDatabase;
        StringBuilder sb;
        String format;
        SQLiteDatabase sQLiteDatabase2;
        String str2;
        StringBuilder sb2;
        int i2 = 2;
        if (j2 != 0) {
            sQLiteDatabase = this.database;
            Locale locale = Locale.US;
            if (i == 0) {
                sb2 = new StringBuilder();
                sb2.append("DELETE FROM ");
                sb2.append(str);
                sb2.append(" WHERE uid = %d AND topic_id = %d");
                format = String.format(locale, sb2.toString(), Long.valueOf(j), Long.valueOf(j2));
            } else {
                sb2 = new StringBuilder();
                sb2.append("DELETE FROM ");
                sb2.append(str);
                sb2.append(" WHERE uid = %d AND topic_id = %d AND start = 0");
                format = String.format(locale, sb2.toString(), Long.valueOf(j), Long.valueOf(j2));
            }
        } else {
            sQLiteDatabase = this.database;
            Locale locale2 = Locale.US;
            if (i == 0) {
                sb = new StringBuilder();
                sb.append("DELETE FROM ");
                sb.append(str);
                sb.append(" WHERE uid = %d");
                format = String.format(locale2, sb.toString(), Long.valueOf(j));
            } else {
                sb = new StringBuilder();
                sb.append("DELETE FROM ");
                sb.append(str);
                sb.append(" WHERE uid = %d AND start = 0");
                format = String.format(locale2, sb.toString(), Long.valueOf(j));
            }
        }
        sQLiteDatabase.executeFast(format).stepThis().dispose();
        SQLitePreparedStatement sQLitePreparedStatement = null;
        try {
            try {
                if (j2 != 0) {
                    sQLiteDatabase2 = this.database;
                    str2 = "REPLACE INTO " + str + " VALUES(?, ?, ?, ?)";
                } else {
                    sQLiteDatabase2 = this.database;
                    str2 = "REPLACE INTO " + str + " VALUES(?, ?, ?)";
                }
                sQLitePreparedStatement = sQLiteDatabase2.executeFast(str2);
                sQLitePreparedStatement.requery();
                sQLitePreparedStatement.bindLong(1, j);
                if (j2 != 0) {
                    sQLitePreparedStatement.bindLong(2, j2);
                    i2 = 3;
                }
                sQLitePreparedStatement.bindInteger(i2, 1);
                sQLitePreparedStatement.bindInteger(i2 + 1, 1);
                sQLitePreparedStatement.step();
                sQLitePreparedStatement.dispose();
            } catch (Exception e) {
                throw e;
            }
        } catch (Throwable th) {
            if (sQLitePreparedStatement != null) {
                sQLitePreparedStatement.dispose();
            }
            throw th;
        }
    }

    private void ensureOpened() {
        try {
            this.openSync.await();
        } catch (Throwable unused) {
        }
    }

    private void fixUnsupportedMedia(TLRPC.Message message) {
        if (message == null) {
            return;
        }
        TLRPC.MessageMedia messageMedia = message.media;
        if (messageMedia instanceof TLRPC.TL_messageMediaUnsupported_old) {
            if (messageMedia.bytes.length == 0) {
                messageMedia.bytes = Utilities.intToBytes(193);
            }
        } else if (messageMedia instanceof TLRPC.TL_messageMediaUnsupported) {
            TLRPC.TL_messageMediaUnsupported_old tL_messageMediaUnsupported_old = new TLRPC.TL_messageMediaUnsupported_old();
            message.media = tL_messageMediaUnsupported_old;
            tL_messageMediaUnsupported_old.bytes = Utilities.intToBytes(193);
            message.flags |= 512;
        }
    }

    private String formatUserSearchName(TLRPC.User user) {
        StringBuilder sb = new StringBuilder();
        String str = user.first_name;
        if (str != null && str.length() > 0) {
            sb.append(user.first_name);
        }
        String str2 = user.last_name;
        if (str2 != null && str2.length() > 0) {
            if (sb.length() > 0) {
                sb.append(" ");
            }
            sb.append(user.last_name);
        }
        sb.append(";;;");
        String str3 = user.username;
        if (str3 == null || str3.length() <= 0) {
            ArrayList<TLRPC.TL_username> arrayList = user.usernames;
            if (arrayList != null && arrayList.size() > 0) {
                for (int i = 0; i < user.usernames.size(); i++) {
                    TLRPC.TL_username tL_username = user.usernames.get(i);
                    if (tL_username != null && tL_username.active) {
                        sb.append(tL_username.username);
                        sb.append(";;");
                    }
                }
            }
        } else {
            sb.append(user.username);
        }
        return sb.toString().toLowerCase();
    }

    private int getDialogFolderIdInternal(long j) {
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                if (this.unknownDialogsIds.get(j) == null) {
                    sQLiteCursor = this.database.queryFinalized("SELECT folder_id FROM dialogs WHERE did = ?", Long.valueOf(j));
                    r3 = sQLiteCursor.next() ? sQLiteCursor.intValue(0) : -1;
                    sQLiteCursor.dispose();
                }
                return r3;
            } catch (Exception e) {
                checkSQLException(e);
                if (sQLiteCursor != null) {
                    sQLiteCursor.dispose();
                }
                return 0;
            }
        } finally {
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
        }
    }

    public static MessagesStorage getInstance(int i) {
        MessagesStorage messagesStorage = Instance[i];
        if (messagesStorage == null) {
            synchronized (lockObjects[i]) {
                try {
                    messagesStorage = Instance[i];
                    if (messagesStorage == null) {
                        MessagesStorage[] messagesStorageArr = Instance;
                        MessagesStorage messagesStorage2 = new MessagesStorage(i);
                        messagesStorageArr[i] = messagesStorage2;
                        messagesStorage = messagesStorage2;
                    }
                } finally {
                }
            }
        }
        return messagesStorage;
    }

    private static boolean isEmpty(SparseArray<?> sparseArray) {
        return sparseArray == null || sparseArray.size() == 0;
    }

    private static boolean isEmpty(SparseIntArray sparseIntArray) {
        return sparseIntArray == null || sparseIntArray.size() == 0;
    }

    private static boolean isEmpty(LongSparseArray longSparseArray) {
        return longSparseArray == null || longSparseArray.size() == 0;
    }

    private static boolean isEmpty(List<?> list) {
        return list == null || list.isEmpty();
    }

    private static boolean isEmpty(LongSparseIntArray longSparseIntArray) {
        return longSparseIntArray == null || longSparseIntArray.size() == 0;
    }

    private boolean isForum(long j) {
        int i = this.dialogIsForum.get(j, -1);
        if (i == -1) {
            TLRPC.Chat chat = getChat(-j);
            i = (chat == null || !chat.forum) ? 0 : 1;
            this.dialogIsForum.put(j, i);
        }
        return i == 1;
    }

    private boolean isValidKeyboardToSave(TLRPC.Message message) {
        TLRPC.ReplyMarkup replyMarkup = message.reply_markup;
        return (replyMarkup == null || (replyMarkup instanceof TLRPC.TL_replyInlineMarkup) || (replyMarkup.selective && !message.mentioned)) ? false : true;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$addRecentLocalFile$79(TLRPC.Document document, String str, String str2) {
        SQLitePreparedStatement sQLitePreparedStatement = null;
        try {
            try {
                if (document != null) {
                    sQLitePreparedStatement = this.database.executeFast("UPDATE web_recent_v3 SET document = ? WHERE image_url = ?");
                    sQLitePreparedStatement.requery();
                    NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(document.getObjectSize());
                    document.serializeToStream(nativeByteBuffer);
                    sQLitePreparedStatement.bindByteBuffer(1, nativeByteBuffer);
                    sQLitePreparedStatement.bindString(2, str);
                    sQLitePreparedStatement.step();
                    sQLitePreparedStatement.dispose();
                    nativeByteBuffer.reuse();
                } else {
                    sQLitePreparedStatement = this.database.executeFast("UPDATE web_recent_v3 SET local_url = ? WHERE image_url = ?");
                    sQLitePreparedStatement.requery();
                    sQLitePreparedStatement.bindString(1, str2);
                    sQLitePreparedStatement.bindString(2, str);
                    sQLitePreparedStatement.step();
                    sQLitePreparedStatement.dispose();
                }
            } catch (Exception e) {
                checkSQLException(e);
                if (sQLitePreparedStatement == null) {
                    return;
                }
            }
            sQLitePreparedStatement.dispose();
        } catch (Throwable th) {
            if (sQLitePreparedStatement != null) {
                sQLitePreparedStatement.dispose();
            }
            throw th;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$applyPhoneBookUpdates$142(String str, String str2) {
        try {
            if (str.length() != 0) {
                this.database.executeFast(String.format(Locale.US, "UPDATE user_phones_v7 SET deleted = 0 WHERE sphone IN(%s)", str)).stepThis().dispose();
            }
            if (str2.length() != 0) {
                this.database.executeFast(String.format(Locale.US, "UPDATE user_phones_v7 SET deleted = 1 WHERE sphone IN(%s)", str2)).stepThis().dispose();
            }
        } catch (Exception e) {
            checkSQLException(e);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$broadcastQuickRepliesMessagesChange$203() {
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.quickRepliesUpdated, new Object[0]);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$broadcastScheduledMessagesChange$202(Long l, int i) {
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.scheduledMessagesUpdated, l, Integer.valueOf(i), Boolean.TRUE);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$checkIfFolderEmptyInternal$225(int i) {
        getMessagesController().onFolderEmpty(i);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ int lambda$checkLoadedRemoteFilters$65(LongSparseIntArray longSparseIntArray, Long l, Long l2) {
        int i = longSparseIntArray.get(l.longValue());
        int i2 = longSparseIntArray.get(l2.longValue());
        if (i > i2) {
            return 1;
        }
        return i < i2 ? -1 : 0;
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:115:0x026e A[Catch: Exception -> 0x0020, TryCatch #0 {Exception -> 0x0020, blocks: (B:3:0x0002, B:5:0x0010, B:7:0x0023, B:9:0x005c, B:11:0x0075, B:12:0x0079, B:14:0x007d, B:15:0x0080, B:17:0x0084, B:18:0x0087, B:20:0x008b, B:21:0x008e, B:23:0x0092, B:24:0x0095, B:26:0x0099, B:27:0x009c, B:29:0x00a0, B:30:0x00a3, B:32:0x00a7, B:33:0x00aa, B:35:0x00ae, B:37:0x00b5, B:38:0x00b8, B:40:0x00cc, B:42:0x00dd, B:43:0x00e4, B:45:0x00ea, B:46:0x00f2, B:48:0x00f6, B:49:0x00fc, B:51:0x0100, B:52:0x0106, B:54:0x0123, B:56:0x0137, B:60:0x0147, B:64:0x0155, B:66:0x016d, B:70:0x018d, B:71:0x0184, B:74:0x019e, B:76:0x01a7, B:80:0x01c2, B:81:0x01b4, B:84:0x01c5, B:86:0x01d3, B:88:0x01e5, B:89:0x01f5, B:92:0x01ff, B:94:0x020b, B:97:0x0232, B:99:0x0244, B:101:0x024a, B:104:0x0252, B:107:0x01ea, B:111:0x01f1, B:115:0x026e, B:116:0x0276, B:118:0x027c, B:124:0x02a2, B:125:0x02a7, B:127:0x02ad, B:129:0x02b4, B:130:0x02bb, B:132:0x02c1, B:134:0x02cb, B:135:0x02d1, B:141:0x02e7, B:143:0x02f3, B:149:0x02fb, B:153:0x02fe, B:152:0x0303, B:157:0x02b0, B:158:0x02a5, B:160:0x0309, B:162:0x030f, B:164:0x0321, B:166:0x0326, B:169:0x048b, B:179:0x0340, B:181:0x0360, B:182:0x0364, B:185:0x036f, B:187:0x0378, B:189:0x0387, B:190:0x0397, B:192:0x039f, B:193:0x03a4, B:195:0x03bf, B:197:0x03c5, B:199:0x038c, B:203:0x0393, B:207:0x03d5, B:209:0x03dc, B:210:0x03e1, B:212:0x03e8, B:214:0x03f4, B:216:0x03fe, B:217:0x0401, B:219:0x0407, B:220:0x0454, B:222:0x045c, B:225:0x0424, B:228:0x0432, B:230:0x0441, B:231:0x0444, B:233:0x044c, B:236:0x0430, B:238:0x046b, B:239:0x03df, B:240:0x03d8, B:242:0x047e, B:247:0x049c, B:250:0x04af, B:252:0x04c5, B:254:0x04de, B:256:0x04e9, B:258:0x04f3, B:260:0x0505, B:262:0x0510, B:264:0x051e, B:266:0x0530, B:268:0x0536, B:270:0x053c, B:272:0x0542, B:275:0x0554, B:277:0x04d9), top: B:2:0x0002 }] */
    /* JADX WARN: Removed duplicated region for block: B:122:0x029e  */
    /* JADX WARN: Removed duplicated region for block: B:162:0x030f A[Catch: Exception -> 0x0020, TryCatch #0 {Exception -> 0x0020, blocks: (B:3:0x0002, B:5:0x0010, B:7:0x0023, B:9:0x005c, B:11:0x0075, B:12:0x0079, B:14:0x007d, B:15:0x0080, B:17:0x0084, B:18:0x0087, B:20:0x008b, B:21:0x008e, B:23:0x0092, B:24:0x0095, B:26:0x0099, B:27:0x009c, B:29:0x00a0, B:30:0x00a3, B:32:0x00a7, B:33:0x00aa, B:35:0x00ae, B:37:0x00b5, B:38:0x00b8, B:40:0x00cc, B:42:0x00dd, B:43:0x00e4, B:45:0x00ea, B:46:0x00f2, B:48:0x00f6, B:49:0x00fc, B:51:0x0100, B:52:0x0106, B:54:0x0123, B:56:0x0137, B:60:0x0147, B:64:0x0155, B:66:0x016d, B:70:0x018d, B:71:0x0184, B:74:0x019e, B:76:0x01a7, B:80:0x01c2, B:81:0x01b4, B:84:0x01c5, B:86:0x01d3, B:88:0x01e5, B:89:0x01f5, B:92:0x01ff, B:94:0x020b, B:97:0x0232, B:99:0x0244, B:101:0x024a, B:104:0x0252, B:107:0x01ea, B:111:0x01f1, B:115:0x026e, B:116:0x0276, B:118:0x027c, B:124:0x02a2, B:125:0x02a7, B:127:0x02ad, B:129:0x02b4, B:130:0x02bb, B:132:0x02c1, B:134:0x02cb, B:135:0x02d1, B:141:0x02e7, B:143:0x02f3, B:149:0x02fb, B:153:0x02fe, B:152:0x0303, B:157:0x02b0, B:158:0x02a5, B:160:0x0309, B:162:0x030f, B:164:0x0321, B:166:0x0326, B:169:0x048b, B:179:0x0340, B:181:0x0360, B:182:0x0364, B:185:0x036f, B:187:0x0378, B:189:0x0387, B:190:0x0397, B:192:0x039f, B:193:0x03a4, B:195:0x03bf, B:197:0x03c5, B:199:0x038c, B:203:0x0393, B:207:0x03d5, B:209:0x03dc, B:210:0x03e1, B:212:0x03e8, B:214:0x03f4, B:216:0x03fe, B:217:0x0401, B:219:0x0407, B:220:0x0454, B:222:0x045c, B:225:0x0424, B:228:0x0432, B:230:0x0441, B:231:0x0444, B:233:0x044c, B:236:0x0430, B:238:0x046b, B:239:0x03df, B:240:0x03d8, B:242:0x047e, B:247:0x049c, B:250:0x04af, B:252:0x04c5, B:254:0x04de, B:256:0x04e9, B:258:0x04f3, B:260:0x0505, B:262:0x0510, B:264:0x051e, B:266:0x0530, B:268:0x0536, B:270:0x053c, B:272:0x0542, B:275:0x0554, B:277:0x04d9), top: B:2:0x0002 }] */
    /* JADX WARN: Removed duplicated region for block: B:164:0x0321 A[Catch: Exception -> 0x0020, TryCatch #0 {Exception -> 0x0020, blocks: (B:3:0x0002, B:5:0x0010, B:7:0x0023, B:9:0x005c, B:11:0x0075, B:12:0x0079, B:14:0x007d, B:15:0x0080, B:17:0x0084, B:18:0x0087, B:20:0x008b, B:21:0x008e, B:23:0x0092, B:24:0x0095, B:26:0x0099, B:27:0x009c, B:29:0x00a0, B:30:0x00a3, B:32:0x00a7, B:33:0x00aa, B:35:0x00ae, B:37:0x00b5, B:38:0x00b8, B:40:0x00cc, B:42:0x00dd, B:43:0x00e4, B:45:0x00ea, B:46:0x00f2, B:48:0x00f6, B:49:0x00fc, B:51:0x0100, B:52:0x0106, B:54:0x0123, B:56:0x0137, B:60:0x0147, B:64:0x0155, B:66:0x016d, B:70:0x018d, B:71:0x0184, B:74:0x019e, B:76:0x01a7, B:80:0x01c2, B:81:0x01b4, B:84:0x01c5, B:86:0x01d3, B:88:0x01e5, B:89:0x01f5, B:92:0x01ff, B:94:0x020b, B:97:0x0232, B:99:0x0244, B:101:0x024a, B:104:0x0252, B:107:0x01ea, B:111:0x01f1, B:115:0x026e, B:116:0x0276, B:118:0x027c, B:124:0x02a2, B:125:0x02a7, B:127:0x02ad, B:129:0x02b4, B:130:0x02bb, B:132:0x02c1, B:134:0x02cb, B:135:0x02d1, B:141:0x02e7, B:143:0x02f3, B:149:0x02fb, B:153:0x02fe, B:152:0x0303, B:157:0x02b0, B:158:0x02a5, B:160:0x0309, B:162:0x030f, B:164:0x0321, B:166:0x0326, B:169:0x048b, B:179:0x0340, B:181:0x0360, B:182:0x0364, B:185:0x036f, B:187:0x0378, B:189:0x0387, B:190:0x0397, B:192:0x039f, B:193:0x03a4, B:195:0x03bf, B:197:0x03c5, B:199:0x038c, B:203:0x0393, B:207:0x03d5, B:209:0x03dc, B:210:0x03e1, B:212:0x03e8, B:214:0x03f4, B:216:0x03fe, B:217:0x0401, B:219:0x0407, B:220:0x0454, B:222:0x045c, B:225:0x0424, B:228:0x0432, B:230:0x0441, B:231:0x0444, B:233:0x044c, B:236:0x0430, B:238:0x046b, B:239:0x03df, B:240:0x03d8, B:242:0x047e, B:247:0x049c, B:250:0x04af, B:252:0x04c5, B:254:0x04de, B:256:0x04e9, B:258:0x04f3, B:260:0x0505, B:262:0x0510, B:264:0x051e, B:266:0x0530, B:268:0x0536, B:270:0x053c, B:272:0x0542, B:275:0x0554, B:277:0x04d9), top: B:2:0x0002 }] */
    /* JADX WARN: Removed duplicated region for block: B:166:0x0326 A[Catch: Exception -> 0x0020, TryCatch #0 {Exception -> 0x0020, blocks: (B:3:0x0002, B:5:0x0010, B:7:0x0023, B:9:0x005c, B:11:0x0075, B:12:0x0079, B:14:0x007d, B:15:0x0080, B:17:0x0084, B:18:0x0087, B:20:0x008b, B:21:0x008e, B:23:0x0092, B:24:0x0095, B:26:0x0099, B:27:0x009c, B:29:0x00a0, B:30:0x00a3, B:32:0x00a7, B:33:0x00aa, B:35:0x00ae, B:37:0x00b5, B:38:0x00b8, B:40:0x00cc, B:42:0x00dd, B:43:0x00e4, B:45:0x00ea, B:46:0x00f2, B:48:0x00f6, B:49:0x00fc, B:51:0x0100, B:52:0x0106, B:54:0x0123, B:56:0x0137, B:60:0x0147, B:64:0x0155, B:66:0x016d, B:70:0x018d, B:71:0x0184, B:74:0x019e, B:76:0x01a7, B:80:0x01c2, B:81:0x01b4, B:84:0x01c5, B:86:0x01d3, B:88:0x01e5, B:89:0x01f5, B:92:0x01ff, B:94:0x020b, B:97:0x0232, B:99:0x0244, B:101:0x024a, B:104:0x0252, B:107:0x01ea, B:111:0x01f1, B:115:0x026e, B:116:0x0276, B:118:0x027c, B:124:0x02a2, B:125:0x02a7, B:127:0x02ad, B:129:0x02b4, B:130:0x02bb, B:132:0x02c1, B:134:0x02cb, B:135:0x02d1, B:141:0x02e7, B:143:0x02f3, B:149:0x02fb, B:153:0x02fe, B:152:0x0303, B:157:0x02b0, B:158:0x02a5, B:160:0x0309, B:162:0x030f, B:164:0x0321, B:166:0x0326, B:169:0x048b, B:179:0x0340, B:181:0x0360, B:182:0x0364, B:185:0x036f, B:187:0x0378, B:189:0x0387, B:190:0x0397, B:192:0x039f, B:193:0x03a4, B:195:0x03bf, B:197:0x03c5, B:199:0x038c, B:203:0x0393, B:207:0x03d5, B:209:0x03dc, B:210:0x03e1, B:212:0x03e8, B:214:0x03f4, B:216:0x03fe, B:217:0x0401, B:219:0x0407, B:220:0x0454, B:222:0x045c, B:225:0x0424, B:228:0x0432, B:230:0x0441, B:231:0x0444, B:233:0x044c, B:236:0x0430, B:238:0x046b, B:239:0x03df, B:240:0x03d8, B:242:0x047e, B:247:0x049c, B:250:0x04af, B:252:0x04c5, B:254:0x04de, B:256:0x04e9, B:258:0x04f3, B:260:0x0505, B:262:0x0510, B:264:0x051e, B:266:0x0530, B:268:0x0536, B:270:0x053c, B:272:0x0542, B:275:0x0554, B:277:0x04d9), top: B:2:0x0002 }] */
    /* JADX WARN: Removed duplicated region for block: B:170:0x0336  */
    /* JADX WARN: Removed duplicated region for block: B:171:0x031b  */
    /* JADX WARN: Removed duplicated region for block: B:76:0x01a7 A[Catch: Exception -> 0x0020, TryCatch #0 {Exception -> 0x0020, blocks: (B:3:0x0002, B:5:0x0010, B:7:0x0023, B:9:0x005c, B:11:0x0075, B:12:0x0079, B:14:0x007d, B:15:0x0080, B:17:0x0084, B:18:0x0087, B:20:0x008b, B:21:0x008e, B:23:0x0092, B:24:0x0095, B:26:0x0099, B:27:0x009c, B:29:0x00a0, B:30:0x00a3, B:32:0x00a7, B:33:0x00aa, B:35:0x00ae, B:37:0x00b5, B:38:0x00b8, B:40:0x00cc, B:42:0x00dd, B:43:0x00e4, B:45:0x00ea, B:46:0x00f2, B:48:0x00f6, B:49:0x00fc, B:51:0x0100, B:52:0x0106, B:54:0x0123, B:56:0x0137, B:60:0x0147, B:64:0x0155, B:66:0x016d, B:70:0x018d, B:71:0x0184, B:74:0x019e, B:76:0x01a7, B:80:0x01c2, B:81:0x01b4, B:84:0x01c5, B:86:0x01d3, B:88:0x01e5, B:89:0x01f5, B:92:0x01ff, B:94:0x020b, B:97:0x0232, B:99:0x0244, B:101:0x024a, B:104:0x0252, B:107:0x01ea, B:111:0x01f1, B:115:0x026e, B:116:0x0276, B:118:0x027c, B:124:0x02a2, B:125:0x02a7, B:127:0x02ad, B:129:0x02b4, B:130:0x02bb, B:132:0x02c1, B:134:0x02cb, B:135:0x02d1, B:141:0x02e7, B:143:0x02f3, B:149:0x02fb, B:153:0x02fe, B:152:0x0303, B:157:0x02b0, B:158:0x02a5, B:160:0x0309, B:162:0x030f, B:164:0x0321, B:166:0x0326, B:169:0x048b, B:179:0x0340, B:181:0x0360, B:182:0x0364, B:185:0x036f, B:187:0x0378, B:189:0x0387, B:190:0x0397, B:192:0x039f, B:193:0x03a4, B:195:0x03bf, B:197:0x03c5, B:199:0x038c, B:203:0x0393, B:207:0x03d5, B:209:0x03dc, B:210:0x03e1, B:212:0x03e8, B:214:0x03f4, B:216:0x03fe, B:217:0x0401, B:219:0x0407, B:220:0x0454, B:222:0x045c, B:225:0x0424, B:228:0x0432, B:230:0x0441, B:231:0x0444, B:233:0x044c, B:236:0x0430, B:238:0x046b, B:239:0x03df, B:240:0x03d8, B:242:0x047e, B:247:0x049c, B:250:0x04af, B:252:0x04c5, B:254:0x04de, B:256:0x04e9, B:258:0x04f3, B:260:0x0505, B:262:0x0510, B:264:0x051e, B:266:0x0530, B:268:0x0536, B:270:0x053c, B:272:0x0542, B:275:0x0554, B:277:0x04d9), top: B:2:0x0002 }] */
    /* JADX WARN: Removed duplicated region for block: B:86:0x01d3 A[Catch: Exception -> 0x0020, TryCatch #0 {Exception -> 0x0020, blocks: (B:3:0x0002, B:5:0x0010, B:7:0x0023, B:9:0x005c, B:11:0x0075, B:12:0x0079, B:14:0x007d, B:15:0x0080, B:17:0x0084, B:18:0x0087, B:20:0x008b, B:21:0x008e, B:23:0x0092, B:24:0x0095, B:26:0x0099, B:27:0x009c, B:29:0x00a0, B:30:0x00a3, B:32:0x00a7, B:33:0x00aa, B:35:0x00ae, B:37:0x00b5, B:38:0x00b8, B:40:0x00cc, B:42:0x00dd, B:43:0x00e4, B:45:0x00ea, B:46:0x00f2, B:48:0x00f6, B:49:0x00fc, B:51:0x0100, B:52:0x0106, B:54:0x0123, B:56:0x0137, B:60:0x0147, B:64:0x0155, B:66:0x016d, B:70:0x018d, B:71:0x0184, B:74:0x019e, B:76:0x01a7, B:80:0x01c2, B:81:0x01b4, B:84:0x01c5, B:86:0x01d3, B:88:0x01e5, B:89:0x01f5, B:92:0x01ff, B:94:0x020b, B:97:0x0232, B:99:0x0244, B:101:0x024a, B:104:0x0252, B:107:0x01ea, B:111:0x01f1, B:115:0x026e, B:116:0x0276, B:118:0x027c, B:124:0x02a2, B:125:0x02a7, B:127:0x02ad, B:129:0x02b4, B:130:0x02bb, B:132:0x02c1, B:134:0x02cb, B:135:0x02d1, B:141:0x02e7, B:143:0x02f3, B:149:0x02fb, B:153:0x02fe, B:152:0x0303, B:157:0x02b0, B:158:0x02a5, B:160:0x0309, B:162:0x030f, B:164:0x0321, B:166:0x0326, B:169:0x048b, B:179:0x0340, B:181:0x0360, B:182:0x0364, B:185:0x036f, B:187:0x0378, B:189:0x0387, B:190:0x0397, B:192:0x039f, B:193:0x03a4, B:195:0x03bf, B:197:0x03c5, B:199:0x038c, B:203:0x0393, B:207:0x03d5, B:209:0x03dc, B:210:0x03e1, B:212:0x03e8, B:214:0x03f4, B:216:0x03fe, B:217:0x0401, B:219:0x0407, B:220:0x0454, B:222:0x045c, B:225:0x0424, B:228:0x0432, B:230:0x0441, B:231:0x0444, B:233:0x044c, B:236:0x0430, B:238:0x046b, B:239:0x03df, B:240:0x03d8, B:242:0x047e, B:247:0x049c, B:250:0x04af, B:252:0x04c5, B:254:0x04de, B:256:0x04e9, B:258:0x04f3, B:260:0x0505, B:262:0x0510, B:264:0x051e, B:266:0x0530, B:268:0x0536, B:270:0x053c, B:272:0x0542, B:275:0x0554, B:277:0x04d9), top: B:2:0x0002 }] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$checkLoadedRemoteFilters$66(ArrayList arrayList, Runnable runnable) {
        TLRPC.messages_Dialogs tL_messages_dialogs;
        SparseArray<MessagesController.DialogFilter> sparseArray;
        int i;
        HashMap<Integer, HashSet<Long>> hashMap;
        HashSet<Integer> hashSet;
        ArrayList<Long> arrayList2;
        HashMap<Long, TLRPC.InputPeer> hashMap2;
        ArrayList<Long> arrayList3;
        TLRPC.DialogFilter dialogFilter;
        ArrayList<TLRPC.InputPeer> arrayList4;
        ArrayList<Long> arrayList5;
        Long valueOf;
        HashMap<Long, TLRPC.InputPeer> hashMap3;
        ArrayList<Long> arrayList6;
        ArrayList<Long> arrayList7;
        HashMap<Long, TLRPC.InputPeer> hashMap4;
        boolean z;
        boolean z2;
        int i2;
        boolean z3;
        boolean z4;
        ArrayList<Long> arrayList8;
        HashMap<Long, TLRPC.InputPeer> hashMap5;
        LinkedHashMap linkedHashMap;
        int size;
        int i3;
        int size2;
        int i4;
        LinkedHashMap linkedHashMap2;
        boolean z5;
        int i5;
        int i6;
        HashMap<Integer, HashSet<Long>> hashMap6;
        ArrayList<Long> arrayList9;
        TLRPC.DialogFilter dialogFilter2;
        LinkedHashMap linkedHashMap3;
        int i7;
        ArrayList arrayList10;
        try {
            SparseArray<MessagesController.DialogFilter> sparseArray2 = new SparseArray<>();
            int size3 = this.dialogFilters.size();
            for (int i8 = 0; i8 < size3; i8++) {
                MessagesController.DialogFilter dialogFilter3 = this.dialogFilters.get(i8);
                sparseArray2.put(dialogFilter3.id, dialogFilter3);
            }
            ArrayList<Integer> arrayList11 = new ArrayList<>();
            ArrayList<Long> arrayList12 = new ArrayList<>();
            HashMap<Long, TLRPC.InputPeer> hashMap7 = new HashMap<>();
            ArrayList<Long> arrayList13 = new ArrayList<>();
            HashMap<Long, TLRPC.InputPeer> hashMap8 = new HashMap<>();
            ArrayList arrayList14 = new ArrayList();
            HashMap<Long, TLRPC.InputPeer> hashMap9 = new HashMap<>();
            ArrayList<MessagesController.DialogFilter> arrayList15 = new ArrayList<>();
            HashMap<Integer, HashSet<Long>> hashMap10 = new HashMap<>();
            HashSet<Integer> hashSet2 = new HashSet<>();
            int size4 = arrayList.size();
            int i9 = 0;
            while (i9 < size4) {
                TLRPC.DialogFilter dialogFilter4 = (TLRPC.DialogFilter) arrayList.get(i9);
                int i10 = size4;
                arrayList11.add(Integer.valueOf(dialogFilter4.id));
                int i11 = dialogFilter4.contacts ? MessagesController.DIALOG_FILTER_FLAG_CONTACTS : 0;
                if (dialogFilter4.non_contacts) {
                    i11 |= MessagesController.DIALOG_FILTER_FLAG_NON_CONTACTS;
                }
                if (dialogFilter4.groups) {
                    i11 |= MessagesController.DIALOG_FILTER_FLAG_GROUPS;
                }
                if (dialogFilter4.broadcasts) {
                    i11 |= MessagesController.DIALOG_FILTER_FLAG_CHANNELS;
                }
                if (dialogFilter4.bots) {
                    i11 |= MessagesController.DIALOG_FILTER_FLAG_BOTS;
                }
                if (dialogFilter4.exclude_muted) {
                    i11 |= MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED;
                }
                if (dialogFilter4.exclude_read) {
                    i11 |= MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_READ;
                }
                if (dialogFilter4.exclude_archived) {
                    i11 |= MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED;
                }
                if (dialogFilter4 instanceof TLRPC.TL_dialogFilterChatlist) {
                    i11 |= MessagesController.DIALOG_FILTER_FLAG_CHATLIST;
                    if (dialogFilter4.has_my_invites) {
                        i11 |= MessagesController.DIALOG_FILTER_FLAG_CHATLIST_ADMIN;
                    }
                }
                ArrayList<Integer> arrayList16 = arrayList11;
                MessagesController.DialogFilter dialogFilter5 = this.dialogFiltersMap.get(dialogFilter4.id);
                boolean z6 = true;
                if (dialogFilter5 != null) {
                    sparseArray2.remove(dialogFilter4.id);
                    sparseArray = sparseArray2;
                    if (TextUtils.equals(dialogFilter5.name, dialogFilter4.title)) {
                        z = false;
                    } else {
                        dialogFilter5.name = dialogFilter4.title;
                        z = true;
                    }
                    if ((dialogFilter4.flags & 134217728) != 0) {
                        i2 = dialogFilter4.color;
                        z2 = z;
                    } else {
                        z2 = z;
                        i2 = -1;
                    }
                    if (dialogFilter5.color != i2) {
                        dialogFilter5.color = i2;
                        z3 = true;
                    } else {
                        z3 = z2;
                    }
                    if (dialogFilter5.flags != i11) {
                        dialogFilter5.flags = i11;
                        z3 = true;
                        z4 = true;
                    } else {
                        z4 = false;
                    }
                    boolean z7 = z3;
                    HashSet hashSet3 = new HashSet(dialogFilter5.alwaysShow);
                    hashSet3.addAll(dialogFilter5.neverShow);
                    HashSet<Long> hashSet4 = new HashSet<>();
                    boolean z8 = z4;
                    if (dialogFilter5.pinnedDialogs.size() != 0) {
                        ArrayList arrayList17 = new ArrayList();
                        i = i9;
                        int size5 = dialogFilter5.pinnedDialogs.size();
                        arrayList8 = arrayList13;
                        int i12 = 0;
                        boolean z9 = false;
                        while (i12 < size5) {
                            int i13 = size5;
                            long keyAt = dialogFilter5.pinnedDialogs.keyAt(i12);
                            if (DialogObject.isEncryptedDialog(keyAt)) {
                                z9 = true;
                            }
                            arrayList17.add(Long.valueOf(keyAt));
                            i12++;
                            size5 = i13;
                        }
                        if (z9) {
                            linkedHashMap = new LinkedHashMap();
                            final LongSparseIntArray longSparseIntArray = dialogFilter5.pinnedDialogs;
                            hashMap5 = hashMap8;
                            Collections.sort(arrayList17, new Comparator() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda112
                                @Override // java.util.Comparator
                                public final int compare(Object obj, Object obj2) {
                                    int lambda$checkLoadedRemoteFilters$65;
                                    lambda$checkLoadedRemoteFilters$65 = MessagesStorage.lambda$checkLoadedRemoteFilters$65(LongSparseIntArray.this, (Long) obj, (Long) obj2);
                                    return lambda$checkLoadedRemoteFilters$65;
                                }
                            });
                            int size6 = arrayList17.size();
                            int i14 = 0;
                            while (i14 < size6) {
                                int i15 = size6;
                                Long l = (Long) arrayList17.get(i14);
                                if (DialogObject.isEncryptedDialog(l.longValue())) {
                                    arrayList10 = arrayList17;
                                    linkedHashMap.put(Integer.valueOf(i14), l);
                                } else {
                                    arrayList10 = arrayList17;
                                }
                                i14++;
                                arrayList17 = arrayList10;
                                size6 = i15;
                            }
                            size = dialogFilter5.pinnedDialogs.size();
                            for (i3 = 0; i3 < size; i3++) {
                                long keyAt2 = dialogFilter5.pinnedDialogs.keyAt(i3);
                                if (!DialogObject.isEncryptedDialog(keyAt2)) {
                                    hashSet4.add(Long.valueOf(keyAt2));
                                    hashSet3.remove(Long.valueOf(keyAt2));
                                }
                            }
                            dialogFilter5.pinnedDialogs.clear();
                            size2 = dialogFilter4.pinned_peers.size();
                            i4 = 0;
                            while (i4 < size2) {
                                TLRPC.InputPeer inputPeer = dialogFilter4.pinned_peers.get(i4);
                                HashMap<Integer, HashSet<Long>> hashMap11 = hashMap10;
                                HashSet<Integer> hashSet5 = hashSet2;
                                long j = inputPeer.user_id;
                                if (j == 0) {
                                    long j2 = inputPeer.chat_id;
                                    if (j2 == 0) {
                                        j2 = inputPeer.channel_id;
                                    }
                                    j = -j2;
                                }
                                Long valueOf2 = Long.valueOf(j);
                                int size7 = dialogFilter5.pinnedDialogs.size();
                                if (linkedHashMap != null) {
                                    i7 = size2;
                                    while (true) {
                                        Long l2 = (Long) linkedHashMap.remove(Integer.valueOf(size7));
                                        if (l2 == null) {
                                            break;
                                        }
                                        dialogFilter5.pinnedDialogs.put(l2.longValue(), size7);
                                        size7++;
                                        arrayList12 = arrayList12;
                                        dialogFilter4 = dialogFilter4;
                                        linkedHashMap = linkedHashMap;
                                    }
                                    arrayList9 = arrayList12;
                                    dialogFilter2 = dialogFilter4;
                                    linkedHashMap3 = linkedHashMap;
                                } else {
                                    arrayList9 = arrayList12;
                                    dialogFilter2 = dialogFilter4;
                                    linkedHashMap3 = linkedHashMap;
                                    i7 = size2;
                                }
                                dialogFilter5.pinnedDialogs.put(valueOf2.longValue(), size7);
                                hashSet3.remove(valueOf2);
                                if (!hashSet4.remove(valueOf2)) {
                                    if (!hashMap9.containsKey(valueOf2)) {
                                        arrayList14.add(valueOf2);
                                        hashMap9.put(valueOf2, inputPeer);
                                    }
                                    z7 = true;
                                }
                                i4++;
                                hashMap10 = hashMap11;
                                hashSet2 = hashSet5;
                                size2 = i7;
                                arrayList12 = arrayList9;
                                dialogFilter4 = dialogFilter2;
                                linkedHashMap = linkedHashMap3;
                            }
                            ArrayList<Long> arrayList18 = arrayList12;
                            TLRPC.DialogFilter dialogFilter6 = dialogFilter4;
                            linkedHashMap2 = linkedHashMap;
                            HashMap<Integer, HashSet<Long>> hashMap12 = hashMap10;
                            hashSet = hashSet2;
                            if (linkedHashMap2 != null) {
                                Iterator it = linkedHashMap2.entrySet().iterator();
                                while (it.hasNext()) {
                                    dialogFilter5.pinnedDialogs.put(((Long) ((Map.Entry) it.next()).getValue()).longValue(), dialogFilter5.pinnedDialogs.size());
                                }
                            }
                            z5 = z8;
                            i6 = 0;
                            for (i5 = 2; i6 < i5; i5 = 2) {
                                TLRPC.DialogFilter dialogFilter7 = dialogFilter6;
                                ArrayList<Long> peerIds = toPeerIds(i6 == 0 ? dialogFilter7.include_peers : dialogFilter7.exclude_peers);
                                ArrayList<Long> arrayList19 = i6 == 0 ? dialogFilter5.alwaysShow : dialogFilter5.neverShow;
                                if (i6 == 0) {
                                    ArrayList<Long> peerIds2 = toPeerIds(dialogFilter7.pinned_peers);
                                    for (int i16 = 0; i16 < peerIds2.size(); i16++) {
                                        peerIds.remove(peerIds2.get(i16));
                                    }
                                    peerIds.addAll(0, peerIds2);
                                }
                                int size8 = peerIds.size();
                                boolean z10 = peerIds.size() != arrayList19.size();
                                if (!z10) {
                                    int i17 = 0;
                                    while (true) {
                                        if (i17 >= size8) {
                                            break;
                                        }
                                        if (!arrayList19.contains(peerIds.get(i17))) {
                                            z10 = true;
                                            break;
                                        }
                                        i17++;
                                    }
                                }
                                if (z10) {
                                    if (i6 == 0) {
                                        dialogFilter5.alwaysShow = peerIds;
                                    } else {
                                        dialogFilter5.neverShow = peerIds;
                                    }
                                    z5 = true;
                                    z7 = true;
                                }
                                i6++;
                                dialogFilter6 = dialogFilter7;
                            }
                            if (hashSet4.isEmpty()) {
                                hashMap6 = hashMap12;
                                hashMap6.put(Integer.valueOf(dialogFilter5.id), hashSet4);
                            } else {
                                hashMap6 = hashMap12;
                                z6 = z7;
                            }
                            if (z6) {
                                arrayList15.add(dialogFilter5);
                            }
                            if (z5) {
                                hashMap = hashMap6;
                            } else {
                                hashSet.add(Integer.valueOf(dialogFilter5.id));
                                hashMap = hashMap6;
                                hashSet = hashSet;
                            }
                            arrayList2 = arrayList8;
                            hashMap2 = hashMap5;
                            arrayList3 = arrayList18;
                        } else {
                            hashMap5 = hashMap8;
                        }
                    } else {
                        arrayList8 = arrayList13;
                        hashMap5 = hashMap8;
                        i = i9;
                    }
                    linkedHashMap = null;
                    size = dialogFilter5.pinnedDialogs.size();
                    while (i3 < size) {
                    }
                    dialogFilter5.pinnedDialogs.clear();
                    size2 = dialogFilter4.pinned_peers.size();
                    i4 = 0;
                    while (i4 < size2) {
                    }
                    ArrayList<Long> arrayList182 = arrayList12;
                    TLRPC.DialogFilter dialogFilter62 = dialogFilter4;
                    linkedHashMap2 = linkedHashMap;
                    HashMap<Integer, HashSet<Long>> hashMap122 = hashMap10;
                    hashSet = hashSet2;
                    if (linkedHashMap2 != null) {
                    }
                    z5 = z8;
                    i6 = 0;
                    while (i6 < i5) {
                    }
                    if (hashSet4.isEmpty()) {
                    }
                    if (z6) {
                    }
                    if (z5) {
                    }
                    arrayList2 = arrayList8;
                    hashMap2 = hashMap5;
                    arrayList3 = arrayList182;
                } else {
                    sparseArray = sparseArray2;
                    ArrayList<Long> arrayList20 = arrayList12;
                    TLRPC.DialogFilter dialogFilter8 = dialogFilter4;
                    ArrayList<Long> arrayList21 = arrayList13;
                    HashMap<Long, TLRPC.InputPeer> hashMap13 = hashMap8;
                    i = i9;
                    MessagesController.DialogFilter dialogFilter9 = new MessagesController.DialogFilter();
                    dialogFilter9.id = dialogFilter8.id;
                    dialogFilter9.flags = i11;
                    dialogFilter9.name = dialogFilter8.title;
                    dialogFilter9.color = (dialogFilter8.flags & 134217728) != 0 ? dialogFilter8.color : -1;
                    dialogFilter9.pendingUnreadCount = -1;
                    int i18 = 0;
                    for (int i19 = 2; i18 < i19; i19 = 2) {
                        if (i18 == 0) {
                            int size9 = dialogFilter8.pinned_peers.size();
                            int i20 = 0;
                            while (i20 < size9) {
                                TLRPC.InputPeer inputPeer2 = dialogFilter8.pinned_peers.get(i20);
                                int i21 = i18;
                                long j3 = inputPeer2.user_id;
                                if (j3 == 0) {
                                    long j4 = inputPeer2.chat_id;
                                    if (j4 == 0) {
                                        j4 = inputPeer2.channel_id;
                                    }
                                    j3 = -j4;
                                }
                                Long valueOf3 = Long.valueOf(j3);
                                if (!dialogFilter9.alwaysShow.contains(valueOf3)) {
                                    dialogFilter9.alwaysShow.add(valueOf3);
                                }
                                HashMap<Integer, HashSet<Long>> hashMap14 = hashMap10;
                                HashSet<Integer> hashSet6 = hashSet2;
                                dialogFilter9.pinnedDialogs.put(valueOf3.longValue(), dialogFilter9.pinnedDialogs.size() + 1);
                                if (!hashMap9.containsKey(valueOf3)) {
                                    arrayList14.add(valueOf3);
                                    hashMap9.put(valueOf3, inputPeer2);
                                }
                                i20++;
                                i18 = i21;
                                hashMap10 = hashMap14;
                                hashSet2 = hashSet6;
                            }
                        }
                        int i22 = i18;
                        HashMap<Integer, HashSet<Long>> hashMap15 = hashMap10;
                        HashSet<Integer> hashSet7 = hashSet2;
                        ArrayList<TLRPC.InputPeer> arrayList22 = i22 == 0 ? dialogFilter8.include_peers : dialogFilter8.exclude_peers;
                        ArrayList<Long> arrayList23 = i22 == 0 ? dialogFilter9.alwaysShow : dialogFilter9.neverShow;
                        int size10 = arrayList22.size();
                        int i23 = 0;
                        while (i23 < size10) {
                            TLRPC.InputPeer inputPeer3 = arrayList22.get(i23);
                            long j5 = inputPeer3.user_id;
                            if (j5 != 0) {
                                Long valueOf4 = Long.valueOf(j5);
                                if (!arrayList23.contains(valueOf4)) {
                                    arrayList23.add(valueOf4);
                                }
                                if (hashMap7.containsKey(valueOf4)) {
                                    arrayList5 = arrayList20;
                                    dialogFilter = dialogFilter8;
                                    arrayList4 = arrayList22;
                                    arrayList6 = arrayList23;
                                    arrayList7 = arrayList21;
                                    hashMap3 = hashMap13;
                                    i23++;
                                    hashMap13 = hashMap3;
                                    arrayList21 = arrayList7;
                                    arrayList22 = arrayList4;
                                    arrayList20 = arrayList5;
                                    arrayList23 = arrayList6;
                                    dialogFilter8 = dialogFilter;
                                } else {
                                    arrayList5 = arrayList20;
                                    arrayList5.add(valueOf4);
                                    dialogFilter = dialogFilter8;
                                    arrayList6 = arrayList23;
                                    valueOf = valueOf4;
                                    hashMap4 = hashMap7;
                                    hashMap3 = hashMap13;
                                    arrayList4 = arrayList22;
                                    arrayList7 = arrayList21;
                                    hashMap4.put(valueOf, inputPeer3);
                                    i23++;
                                    hashMap13 = hashMap3;
                                    arrayList21 = arrayList7;
                                    arrayList22 = arrayList4;
                                    arrayList20 = arrayList5;
                                    arrayList23 = arrayList6;
                                    dialogFilter8 = dialogFilter;
                                }
                            } else {
                                dialogFilter = dialogFilter8;
                                arrayList4 = arrayList22;
                                arrayList5 = arrayList20;
                                long j6 = inputPeer3.chat_id;
                                if (j6 == 0) {
                                    j6 = inputPeer3.channel_id;
                                }
                                valueOf = Long.valueOf(j6);
                                Long valueOf5 = Long.valueOf(-j6);
                                if (!arrayList23.contains(valueOf5)) {
                                    arrayList23.add(valueOf5);
                                }
                                hashMap3 = hashMap13;
                                if (hashMap3.containsKey(valueOf)) {
                                    arrayList6 = arrayList23;
                                    arrayList7 = arrayList21;
                                    i23++;
                                    hashMap13 = hashMap3;
                                    arrayList21 = arrayList7;
                                    arrayList22 = arrayList4;
                                    arrayList20 = arrayList5;
                                    arrayList23 = arrayList6;
                                    dialogFilter8 = dialogFilter;
                                } else {
                                    arrayList7 = arrayList21;
                                    arrayList7.add(valueOf);
                                    arrayList6 = arrayList23;
                                    hashMap4 = hashMap3;
                                    hashMap4.put(valueOf, inputPeer3);
                                    i23++;
                                    hashMap13 = hashMap3;
                                    arrayList21 = arrayList7;
                                    arrayList22 = arrayList4;
                                    arrayList20 = arrayList5;
                                    arrayList23 = arrayList6;
                                    dialogFilter8 = dialogFilter;
                                }
                            }
                        }
                        i18 = i22 + 1;
                        hashMap10 = hashMap15;
                        hashSet2 = hashSet7;
                        dialogFilter8 = dialogFilter8;
                    }
                    hashMap = hashMap10;
                    hashSet = hashSet2;
                    arrayList2 = arrayList21;
                    hashMap2 = hashMap13;
                    arrayList3 = arrayList20;
                    arrayList15.add(dialogFilter9);
                }
                i9 = i + 1;
                hashMap8 = hashMap2;
                arrayList13 = arrayList2;
                arrayList12 = arrayList3;
                size4 = i10;
                arrayList11 = arrayList16;
                sparseArray2 = sparseArray;
                hashMap10 = hashMap;
                hashSet2 = hashSet;
            }
            SparseArray<MessagesController.DialogFilter> sparseArray3 = sparseArray2;
            ArrayList<Long> arrayList24 = arrayList13;
            ArrayList<Integer> arrayList25 = arrayList11;
            HashMap<Integer, HashSet<Long>> hashMap16 = hashMap10;
            HashSet<Integer> hashSet8 = hashSet2;
            ArrayList<Long> arrayList26 = arrayList12;
            HashMap<Long, TLRPC.InputPeer> hashMap17 = hashMap8;
            if (arrayList14.isEmpty()) {
                tL_messages_dialogs = new TLRPC.TL_messages_dialogs();
            } else {
                tL_messages_dialogs = loadDialogsByIds(TextUtils.join(",", arrayList14), arrayList26, arrayList24, new ArrayList<>());
                int size11 = tL_messages_dialogs.dialogs.size();
                for (int i24 = 0; i24 < size11; i24++) {
                    hashMap9.remove(Long.valueOf(tL_messages_dialogs.dialogs.get(i24).id));
                }
            }
            ArrayList<TLRPC.User> arrayList27 = new ArrayList<>();
            if (!arrayList26.isEmpty()) {
                getUsersInternal(arrayList26, arrayList27);
                int size12 = arrayList27.size();
                for (int i25 = 0; i25 < size12; i25++) {
                    hashMap7.remove(Long.valueOf(arrayList27.get(i25).id));
                }
            }
            ArrayList<TLRPC.Chat> arrayList28 = new ArrayList<>();
            if (!arrayList24.isEmpty()) {
                getChatsInternal(TextUtils.join(",", arrayList24), arrayList28);
                int size13 = arrayList28.size();
                for (int i26 = 0; i26 < size13; i26++) {
                    hashMap17.remove(Long.valueOf(arrayList28.get(i26).id));
                }
            }
            if (hashMap7.isEmpty() && hashMap17.isEmpty() && hashMap9.isEmpty()) {
                lambda$processLoadedFilterPeers$68(tL_messages_dialogs, null, arrayList27, arrayList28, arrayList15, sparseArray3, arrayList25, hashMap16, hashSet8, runnable);
            } else {
                getMessagesController().loadFilterPeers(hashMap9, hashMap7, hashMap17, tL_messages_dialogs, new TLRPC.TL_messages_dialogs(), arrayList27, arrayList28, arrayList15, sparseArray3, arrayList25, hashMap16, hashSet8, runnable);
            }
        } catch (Exception e) {
            checkSQLException(e);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Code restructure failed: missing block: B:18:0x002a, code lost:
    
        if (r2 == null) goto L13;
     */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$checkMessageByRandomId$147(long j, boolean[] zArr, CountDownLatch countDownLatch) {
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                sQLiteCursor = this.database.queryFinalized(String.format(Locale.US, "SELECT random_id FROM randoms_v2 WHERE random_id = %d", Long.valueOf(j)), new Object[0]);
                if (sQLiteCursor.next()) {
                    zArr[0] = true;
                }
            } catch (Exception e) {
                checkSQLException(e);
            }
            sQLiteCursor.dispose();
            countDownLatch.countDown();
        } catch (Throwable th) {
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
            throw th;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Code restructure failed: missing block: B:13:0x0031, code lost:
    
        if (r2 == null) goto L13;
     */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$checkMessageId$148(long j, int i, boolean[] zArr, CountDownLatch countDownLatch) {
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                sQLiteCursor = this.database.queryFinalized(String.format(Locale.US, "SELECT mid FROM messages_v2 WHERE uid = %d AND mid = %d", Long.valueOf(j), Integer.valueOf(i)), new Object[0]);
                if (sQLiteCursor.next()) {
                    zArr[0] = true;
                }
            } catch (Exception e) {
                checkSQLException(e);
            }
            sQLiteCursor.dispose();
            countDownLatch.countDown();
        } catch (Throwable th) {
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
            throw th;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$checkSQLException$8() {
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.onDatabaseReset, new Object[0]);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$cleanup$5() {
        getMessagesController().getDifference();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$cleanup$6(boolean z) {
        cleanupInternal(true);
        openDatabase(1);
        if (z) {
            Utilities.stageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda75
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesStorage.this.lambda$cleanup$5();
                }
            });
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$clearDownloadQueue$177(int i) {
        try {
            (i == 0 ? this.database.executeFast("DELETE FROM download_queue WHERE 1") : this.database.executeFast(String.format(Locale.US, "DELETE FROM download_queue WHERE type = %d", Integer.valueOf(i)))).stepThis().dispose();
        } catch (Exception e) {
            checkSQLException(e);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$clearLocalDatabase$43() {
        getMessagesController().getSavedMessagesController().cleanup();
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Code restructure failed: missing block: B:151:0x045e, code lost:
    
        if (r8 != null) goto L132;
     */
    /* JADX WARN: Code restructure failed: missing block: B:89:0x049f, code lost:
    
        if (r8 == null) goto L133;
     */
    /* JADX WARN: Code restructure failed: missing block: B:90:0x04a1, code lost:
    
        r8.dispose();
     */
    /* JADX WARN: Code restructure failed: missing block: B:91:0x04a4, code lost:
    
        reset();
     */
    /* JADX WARN: Code restructure failed: missing block: B:92:0x04a7, code lost:
    
        return;
     */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:101:0x04b3  */
    /* JADX WARN: Removed duplicated region for block: B:103:0x04b8  */
    /* JADX WARN: Removed duplicated region for block: B:105:0x04bd  */
    /* JADX WARN: Removed duplicated region for block: B:111:0x03f3  */
    /* JADX WARN: Removed duplicated region for block: B:69:0x03d3 A[Catch: all -> 0x03eb, Exception -> 0x03ef, TRY_LEAVE, TryCatch #23 {Exception -> 0x03ef, all -> 0x03eb, blocks: (B:65:0x02de, B:67:0x02e2, B:69:0x03d3), top: B:64:0x02de }] */
    /* JADX WARN: Removed duplicated region for block: B:84:0x0492  */
    /* JADX WARN: Removed duplicated region for block: B:86:0x0497  */
    /* JADX WARN: Removed duplicated region for block: B:88:0x049c  */
    /* JADX WARN: Removed duplicated region for block: B:99:0x04ae  */
    /* JADX WARN: Type inference failed for: r7v13 */
    /* JADX WARN: Type inference failed for: r7v14 */
    /* JADX WARN: Type inference failed for: r7v18 */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$clearLocalDatabase$44() {
        Throwable th;
        SQLitePreparedStatement sQLitePreparedStatement;
        Exception exc;
        SQLiteCursor sQLiteCursor;
        SQLitePreparedStatement sQLitePreparedStatement2;
        SQLiteDatabase sQLiteDatabase;
        SQLiteDatabase sQLiteDatabase2;
        SQLiteCursor sQLiteCursor2;
        ArrayList arrayList;
        int i;
        SQLiteCursor sQLiteCursor3;
        int i2;
        Exception exc2;
        try {
            ArrayList arrayList2 = new ArrayList();
            this.database.executeFast("DELETE FROM reaction_mentions").stepThis().dispose();
            this.database.executeFast("DELETE FROM reaction_mentions_topics").stepThis().dispose();
            this.database.executeFast("DELETE FROM downloading_documents").stepThis().dispose();
            this.database.executeFast("DELETE FROM attach_menu_bots").stepThis().dispose();
            this.database.executeFast("DELETE FROM animated_emoji").stepThis().dispose();
            this.database.executeFast("DELETE FROM stickers_v2").stepThis().dispose();
            this.database.executeFast("DELETE FROM stickersets2").stepThis().dispose();
            this.database.executeFast("DELETE FROM messages_holes_topics").stepThis().dispose();
            this.database.executeFast("DELETE FROM messages_topics").stepThis().dispose();
            this.database.executeFast("DELETE FROM saved_dialogs").stepThis().dispose();
            this.database.executeFast("DELETE FROM topics").stepThis().dispose();
            this.database.executeFast("DELETE FROM media_holes_topics").stepThis().dispose();
            this.database.executeFast("DELETE FROM media_topics").stepThis().dispose();
            this.database.executeFast("DELETE FROM media_counts_topics").stepThis().dispose();
            this.database.executeFast("DELETE FROM chat_pinned_v2").stepThis().dispose();
            this.database.executeFast("DELETE FROM chat_pinned_count").stepThis().dispose();
            this.database.executeFast("DELETE FROM profile_stories").stepThis().dispose();
            this.database.executeFast("DELETE FROM story_pushes").stepThis().dispose();
            this.database.executeFast("DELETE FROM dialog_photos").stepThis().dispose();
            this.database.executeFast("DELETE FROM dialog_photos_count").stepThis().dispose();
            this.database.executeFast("DELETE FROM saved_reaction_tags").stepThis().dispose();
            this.database.executeFast("DELETE FROM business_replies").stepThis().dispose();
            this.database.executeFast("DELETE FROM quick_replies_messages").stepThis().dispose();
            this.database.executeFast("DELETE FROM effects").stepThis().dispose();
            this.database.executeFast("DELETE FROM app_config").stepThis().dispose();
            this.database.executeFast("DELETE FROM star_gifts2").stepThis().dispose();
            int i3 = 0;
            SQLiteCursor queryFinalized = this.database.queryFinalized("SELECT did FROM dialogs WHERE 1", new Object[0]);
            while (queryFinalized.next()) {
                try {
                    long longValue = queryFinalized.longValue(0);
                    if (!DialogObject.isEncryptedDialog(longValue)) {
                        arrayList2.add(Long.valueOf(longValue));
                    }
                } catch (Exception e) {
                    exc = e;
                    sQLiteCursor = queryFinalized;
                } catch (Throwable th2) {
                    th = th2;
                    sQLiteCursor = queryFinalized;
                }
            }
            queryFinalized.dispose();
            SQLitePreparedStatement executeFast = this.database.executeFast("REPLACE INTO messages_holes VALUES(?, ?, ?)");
            try {
                SQLitePreparedStatement executeFast2 = this.database.executeFast("REPLACE INTO media_holes_v2 VALUES(?, ?, ?, ?)");
                try {
                    this.database.beginTransaction();
                    sQLiteCursor = null;
                    int i4 = 0;
                    while (i4 < arrayList2.size()) {
                        try {
                            Long l = (Long) arrayList2.get(i4);
                            sQLiteCursor = this.database.queryFinalized("SELECT COUNT(mid) FROM messages_v2 WHERE uid = " + l, new Object[i3]);
                            int intValue = sQLiteCursor.next() ? sQLiteCursor.intValue(i3) : 0;
                            sQLiteCursor.dispose();
                            if (intValue <= 2) {
                                arrayList = arrayList2;
                                i = i4;
                            } else {
                                SQLiteCursor queryFinalized2 = this.database.queryFinalized("SELECT last_mid_i, last_mid FROM dialogs WHERE did = " + l, new Object[i3]);
                                try {
                                    if (queryFinalized2.next()) {
                                        long longValue2 = queryFinalized2.longValue(i3);
                                        arrayList = arrayList2;
                                        long longValue3 = queryFinalized2.longValue(1);
                                        SQLiteCursor queryFinalized3 = this.database.queryFinalized("SELECT data FROM messages_v2 WHERE uid = " + l + " AND mid IN (" + longValue2 + "," + longValue3 + ")", new Object[i3]);
                                        int i5 = -1;
                                        while (queryFinalized3.next()) {
                                            try {
                                                NativeByteBuffer byteBufferValue = queryFinalized3.byteBufferValue(i3 ? 1 : 0);
                                                if (byteBufferValue != null) {
                                                    sQLiteCursor3 = queryFinalized2;
                                                    try {
                                                        try {
                                                            TLRPC.Message TLdeserialize = TLRPC.Message.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(i3), i3);
                                                            if (TLdeserialize != null) {
                                                                i5 = TLdeserialize.id;
                                                                try {
                                                                    i = i4;
                                                                    try {
                                                                        TLdeserialize.readAttachPath(byteBufferValue, UserConfig.getInstance(this.currentAccount).clientUserId);
                                                                        i5 = i5;
                                                                    } catch (Exception e2) {
                                                                        exc2 = e2;
                                                                        i5 = i5;
                                                                        try {
                                                                            checkSQLException(exc2);
                                                                            i2 = i5;
                                                                            queryFinalized3.dispose();
                                                                            this.database.executeFast("DELETE FROM messages_v2 WHERE uid = " + l + " AND mid != " + longValue2 + " AND mid != " + longValue3).stepThis().dispose();
                                                                            SQLiteDatabase sQLiteDatabase3 = this.database;
                                                                            StringBuilder sb = new StringBuilder();
                                                                            sb.append("DELETE FROM messages_holes WHERE uid = ");
                                                                            sb.append(l);
                                                                            sQLiteDatabase3.executeFast(sb.toString()).stepThis().dispose();
                                                                            this.database.executeFast("DELETE FROM bot_keyboard WHERE uid = " + l).stepThis().dispose();
                                                                            this.database.executeFast("DELETE FROM bot_keyboard_topics WHERE uid = " + l).stepThis().dispose();
                                                                            this.database.executeFast("DELETE FROM media_counts_v2 WHERE uid = " + l).stepThis().dispose();
                                                                            this.database.executeFast("DELETE FROM media_v4 WHERE uid = " + l).stepThis().dispose();
                                                                            this.database.executeFast("DELETE FROM media_holes_v2 WHERE uid = " + l).stepThis().dispose();
                                                                            MediaDataController.getInstance(this.currentAccount).clearBotKeyboard(l.longValue());
                                                                            if (i2 == -1) {
                                                                            }
                                                                            sQLiteCursor2.dispose();
                                                                            sQLiteCursor = null;
                                                                            i4 = i + 1;
                                                                            arrayList2 = arrayList;
                                                                            i3 = 0;
                                                                        } catch (Exception e3) {
                                                                            e = e3;
                                                                            sQLiteCursor2 = sQLiteCursor3;
                                                                            exc = e;
                                                                            sQLiteCursor = sQLiteCursor2;
                                                                            sQLitePreparedStatement = executeFast;
                                                                            sQLitePreparedStatement2 = executeFast2;
                                                                            try {
                                                                                checkSQLException(exc);
                                                                                sQLiteDatabase2 = this.database;
                                                                                if (sQLiteDatabase2 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement2 != null) {
                                                                                }
                                                                            } catch (Throwable th3) {
                                                                                th = th3;
                                                                                sQLiteDatabase = this.database;
                                                                                if (sQLiteDatabase != null) {
                                                                                    sQLiteDatabase.commitTransaction();
                                                                                }
                                                                                if (sQLitePreparedStatement != null) {
                                                                                    sQLitePreparedStatement.dispose();
                                                                                }
                                                                                if (sQLitePreparedStatement2 != null) {
                                                                                    sQLitePreparedStatement2.dispose();
                                                                                }
                                                                                if (sQLiteCursor != null) {
                                                                                    sQLiteCursor.dispose();
                                                                                }
                                                                                reset();
                                                                                throw th;
                                                                            }
                                                                        } catch (Throwable th4) {
                                                                            th = th4;
                                                                            sQLiteCursor2 = sQLiteCursor3;
                                                                            th = th;
                                                                            sQLiteCursor = sQLiteCursor2;
                                                                            sQLitePreparedStatement = executeFast;
                                                                            sQLitePreparedStatement2 = executeFast2;
                                                                            sQLiteDatabase = this.database;
                                                                            if (sQLiteDatabase != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement2 != null) {
                                                                            }
                                                                            if (sQLiteCursor != null) {
                                                                            }
                                                                            reset();
                                                                            throw th;
                                                                        }
                                                                    }
                                                                } catch (Exception e4) {
                                                                    e = e4;
                                                                    i = i4;
                                                                    exc2 = e;
                                                                    checkSQLException(exc2);
                                                                    i2 = i5;
                                                                    queryFinalized3.dispose();
                                                                    this.database.executeFast("DELETE FROM messages_v2 WHERE uid = " + l + " AND mid != " + longValue2 + " AND mid != " + longValue3).stepThis().dispose();
                                                                    SQLiteDatabase sQLiteDatabase32 = this.database;
                                                                    StringBuilder sb2 = new StringBuilder();
                                                                    sb2.append("DELETE FROM messages_holes WHERE uid = ");
                                                                    sb2.append(l);
                                                                    sQLiteDatabase32.executeFast(sb2.toString()).stepThis().dispose();
                                                                    this.database.executeFast("DELETE FROM bot_keyboard WHERE uid = " + l).stepThis().dispose();
                                                                    this.database.executeFast("DELETE FROM bot_keyboard_topics WHERE uid = " + l).stepThis().dispose();
                                                                    this.database.executeFast("DELETE FROM media_counts_v2 WHERE uid = " + l).stepThis().dispose();
                                                                    this.database.executeFast("DELETE FROM media_v4 WHERE uid = " + l).stepThis().dispose();
                                                                    this.database.executeFast("DELETE FROM media_holes_v2 WHERE uid = " + l).stepThis().dispose();
                                                                    MediaDataController.getInstance(this.currentAccount).clearBotKeyboard(l.longValue());
                                                                    if (i2 == -1) {
                                                                    }
                                                                    sQLiteCursor2.dispose();
                                                                    sQLiteCursor = null;
                                                                    i4 = i + 1;
                                                                    arrayList2 = arrayList;
                                                                    i3 = 0;
                                                                }
                                                            } else {
                                                                i = i4;
                                                            }
                                                            try {
                                                                byteBufferValue.reuse();
                                                                queryFinalized2 = sQLiteCursor3;
                                                                i4 = i;
                                                                i3 = 0;
                                                            } catch (Exception e5) {
                                                                e = e5;
                                                                exc2 = e;
                                                                checkSQLException(exc2);
                                                                i2 = i5;
                                                                queryFinalized3.dispose();
                                                                this.database.executeFast("DELETE FROM messages_v2 WHERE uid = " + l + " AND mid != " + longValue2 + " AND mid != " + longValue3).stepThis().dispose();
                                                                SQLiteDatabase sQLiteDatabase322 = this.database;
                                                                StringBuilder sb22 = new StringBuilder();
                                                                sb22.append("DELETE FROM messages_holes WHERE uid = ");
                                                                sb22.append(l);
                                                                sQLiteDatabase322.executeFast(sb22.toString()).stepThis().dispose();
                                                                this.database.executeFast("DELETE FROM bot_keyboard WHERE uid = " + l).stepThis().dispose();
                                                                this.database.executeFast("DELETE FROM bot_keyboard_topics WHERE uid = " + l).stepThis().dispose();
                                                                this.database.executeFast("DELETE FROM media_counts_v2 WHERE uid = " + l).stepThis().dispose();
                                                                this.database.executeFast("DELETE FROM media_v4 WHERE uid = " + l).stepThis().dispose();
                                                                this.database.executeFast("DELETE FROM media_holes_v2 WHERE uid = " + l).stepThis().dispose();
                                                                MediaDataController.getInstance(this.currentAccount).clearBotKeyboard(l.longValue());
                                                                if (i2 == -1) {
                                                                }
                                                                sQLiteCursor2.dispose();
                                                                sQLiteCursor = null;
                                                                i4 = i + 1;
                                                                arrayList2 = arrayList;
                                                                i3 = 0;
                                                            }
                                                        } catch (Throwable th5) {
                                                            th = th5;
                                                            th = th;
                                                            sQLitePreparedStatement = executeFast;
                                                            sQLitePreparedStatement2 = executeFast2;
                                                            sQLiteCursor = sQLiteCursor3;
                                                            sQLiteDatabase = this.database;
                                                            if (sQLiteDatabase != null) {
                                                            }
                                                            if (sQLitePreparedStatement != null) {
                                                            }
                                                            if (sQLitePreparedStatement2 != null) {
                                                            }
                                                            if (sQLiteCursor != null) {
                                                            }
                                                            reset();
                                                            throw th;
                                                        }
                                                    } catch (Exception e6) {
                                                        e = e6;
                                                    }
                                                }
                                            } catch (Exception e7) {
                                                e = e7;
                                                sQLiteCursor3 = queryFinalized2;
                                            } catch (Throwable th6) {
                                                th = th6;
                                                sQLiteCursor3 = queryFinalized2;
                                            }
                                        }
                                        sQLiteCursor3 = queryFinalized2;
                                        i = i4;
                                        i2 = i5;
                                        queryFinalized3.dispose();
                                        this.database.executeFast("DELETE FROM messages_v2 WHERE uid = " + l + " AND mid != " + longValue2 + " AND mid != " + longValue3).stepThis().dispose();
                                        SQLiteDatabase sQLiteDatabase3222 = this.database;
                                        StringBuilder sb222 = new StringBuilder();
                                        sb222.append("DELETE FROM messages_holes WHERE uid = ");
                                        sb222.append(l);
                                        sQLiteDatabase3222.executeFast(sb222.toString()).stepThis().dispose();
                                        this.database.executeFast("DELETE FROM bot_keyboard WHERE uid = " + l).stepThis().dispose();
                                        this.database.executeFast("DELETE FROM bot_keyboard_topics WHERE uid = " + l).stepThis().dispose();
                                        this.database.executeFast("DELETE FROM media_counts_v2 WHERE uid = " + l).stepThis().dispose();
                                        this.database.executeFast("DELETE FROM media_v4 WHERE uid = " + l).stepThis().dispose();
                                        this.database.executeFast("DELETE FROM media_holes_v2 WHERE uid = " + l).stepThis().dispose();
                                        MediaDataController.getInstance(this.currentAccount).clearBotKeyboard(l.longValue());
                                        if (i2 == -1) {
                                            sQLiteCursor2 = sQLiteCursor3;
                                            try {
                                                createFirstHoles(l.longValue(), executeFast, executeFast2, i2, 0L);
                                            } catch (Exception e8) {
                                                e = e8;
                                                exc = e;
                                                sQLiteCursor = sQLiteCursor2;
                                                sQLitePreparedStatement = executeFast;
                                                sQLitePreparedStatement2 = executeFast2;
                                                checkSQLException(exc);
                                                sQLiteDatabase2 = this.database;
                                                if (sQLiteDatabase2 != null) {
                                                }
                                                if (sQLitePreparedStatement != null) {
                                                }
                                                if (sQLitePreparedStatement2 != null) {
                                                }
                                            } catch (Throwable th7) {
                                                th = th7;
                                                th = th;
                                                sQLiteCursor = sQLiteCursor2;
                                                sQLitePreparedStatement = executeFast;
                                                sQLitePreparedStatement2 = executeFast2;
                                                sQLiteDatabase = this.database;
                                                if (sQLiteDatabase != null) {
                                                }
                                                if (sQLitePreparedStatement != null) {
                                                }
                                                if (sQLitePreparedStatement2 != null) {
                                                }
                                                if (sQLiteCursor != null) {
                                                }
                                                reset();
                                                throw th;
                                            }
                                        } else {
                                            sQLiteCursor2 = sQLiteCursor3;
                                        }
                                    } else {
                                        arrayList = arrayList2;
                                        sQLiteCursor2 = queryFinalized2;
                                        i = i4;
                                    }
                                    sQLiteCursor2.dispose();
                                    sQLiteCursor = null;
                                } catch (Exception e9) {
                                    e = e9;
                                    sQLiteCursor2 = queryFinalized2;
                                } catch (Throwable th8) {
                                    th = th8;
                                    sQLiteCursor2 = queryFinalized2;
                                }
                            }
                            i4 = i + 1;
                            arrayList2 = arrayList;
                            i3 = 0;
                        } catch (Exception e10) {
                            exc = e10;
                        } catch (Throwable th9) {
                            th = th9;
                        }
                    }
                    executeFast.dispose();
                    executeFast2.dispose();
                } catch (Exception e11) {
                    exc = e11;
                    sQLitePreparedStatement = executeFast;
                    sQLitePreparedStatement2 = executeFast2;
                    sQLiteCursor = null;
                } catch (Throwable th10) {
                    th = th10;
                    sQLitePreparedStatement = executeFast;
                    sQLitePreparedStatement2 = executeFast2;
                    sQLiteCursor = null;
                }
                try {
                    this.database.commitTransaction();
                    this.database.executeFast("PRAGMA journal_size_limit = 0").stepThis().dispose();
                    this.database.executeFast("VACUUM").stepThis().dispose();
                    this.database.executeFast("PRAGMA journal_size_limit = -1").stepThis().dispose();
                    getMessagesController().getTopicsController().databaseCleared();
                    AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda116
                        @Override // java.lang.Runnable
                        public final void run() {
                            MessagesStorage.this.lambda$clearLocalDatabase$43();
                        }
                    });
                    SQLiteDatabase sQLiteDatabase4 = this.database;
                    if (sQLiteDatabase4 != null) {
                        sQLiteDatabase4.commitTransaction();
                    }
                } catch (Exception e12) {
                    exc = e12;
                    sQLitePreparedStatement = null;
                    sQLitePreparedStatement2 = null;
                    checkSQLException(exc);
                    sQLiteDatabase2 = this.database;
                    if (sQLiteDatabase2 != null) {
                        sQLiteDatabase2.commitTransaction();
                    }
                    if (sQLitePreparedStatement != null) {
                        sQLitePreparedStatement.dispose();
                    }
                    if (sQLitePreparedStatement2 != null) {
                        sQLitePreparedStatement2.dispose();
                    }
                } catch (Throwable th11) {
                    th = th11;
                    sQLitePreparedStatement = null;
                    sQLitePreparedStatement2 = null;
                    sQLiteDatabase = this.database;
                    if (sQLiteDatabase != null) {
                    }
                    if (sQLitePreparedStatement != null) {
                    }
                    if (sQLitePreparedStatement2 != null) {
                    }
                    if (sQLiteCursor != null) {
                    }
                    reset();
                    throw th;
                }
            } catch (Exception e13) {
                exc = e13;
                sQLitePreparedStatement = executeFast;
                sQLiteCursor = null;
                sQLitePreparedStatement2 = null;
                checkSQLException(exc);
                sQLiteDatabase2 = this.database;
                if (sQLiteDatabase2 != null) {
                }
                if (sQLitePreparedStatement != null) {
                }
                if (sQLitePreparedStatement2 != null) {
                }
            } catch (Throwable th12) {
                th = th12;
                sQLitePreparedStatement = executeFast;
                sQLiteCursor = null;
                sQLitePreparedStatement2 = null;
                sQLiteDatabase = this.database;
                if (sQLiteDatabase != null) {
                }
                if (sQLitePreparedStatement != null) {
                }
                if (sQLitePreparedStatement2 != null) {
                }
                if (sQLiteCursor != null) {
                }
                reset();
                throw th;
            }
        } catch (Exception e14) {
            exc = e14;
            sQLitePreparedStatement = null;
        } catch (Throwable th13) {
            th = th13;
            sQLitePreparedStatement = null;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$clearSentMedia$157() {
        try {
            this.database.executeFast("DELETE FROM sent_files_v2 WHERE 1").stepThis().dispose();
        } catch (Exception e) {
            checkSQLException(e);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$clearUserPhoto$88(long j, long j2) {
        try {
            this.database.executeFast("DELETE FROM dialog_photos WHERE uid = " + j + " AND id = " + j2).stepThis().dispose();
            this.database.executeFast("UPDATE dialog_photos_count SET count = count - 1 WHERE uid = " + j + " AND count > 0").stepThis().dispose();
        } catch (Exception e) {
            checkSQLException(e);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$clearUserPhotos$87(long j) {
        try {
            this.database.executeFast("DELETE FROM dialog_photos WHERE uid = " + j).stepThis().dispose();
            this.database.executeFast("DELETE FROM dialog_photos_count WHERE uid = " + j).stepThis().dispose();
        } catch (Exception e) {
            checkSQLException(e);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$clearWidgetDialogs$160(int i) {
        try {
            this.database.executeFast("DELETE FROM shortcut_widget WHERE id = " + i).stepThis().dispose();
        } catch (Exception e) {
            checkSQLException(e);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Code restructure failed: missing block: B:11:0x002f, code lost:
    
        if (r0 == null) goto L11;
     */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$containsLocalDialog$172(long j, Boolean[] boolArr, CountDownLatch countDownLatch) {
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                sQLiteCursor = this.database.queryFinalized("SELECT date FROM dialogs WHERE did = " + j, new Object[0]);
                boolArr[0] = Boolean.valueOf(sQLiteCursor.next());
            } catch (Exception e) {
                checkSQLException(e);
            }
            sQLiteCursor.dispose();
            countDownLatch.countDown();
        } catch (Throwable th) {
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
            throw th;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createOrEditTopic$191(long j, TLRPC.TL_forumTopic tL_forumTopic) {
        getMessagesController().getTopicsController().onTopicCreated(j, tL_forumTopic, false);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createPendingTask$10(long j, NativeByteBuffer nativeByteBuffer) {
        try {
            try {
                SQLitePreparedStatement executeFast = this.database.executeFast("REPLACE INTO pending_tasks VALUES(?, ?)");
                executeFast.bindLong(1, j);
                executeFast.bindByteBuffer(2, nativeByteBuffer);
                executeFast.step();
                executeFast.dispose();
            } catch (Exception e) {
                checkSQLException(e);
            }
        } finally {
            nativeByteBuffer.reuse();
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createTaskForMid$109(boolean z, long j, ArrayList arrayList) {
        if (!z) {
            markMessagesContentAsRead(j, arrayList, 0, 0);
        }
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.messagesReadContent, Long.valueOf(j), arrayList);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createTaskForMid$110(int i, int i2, int i3, int i4, final boolean z, final long j) {
        SQLitePreparedStatement sQLitePreparedStatement = null;
        try {
            try {
                int max = Math.max(i, i2) + i3;
                SparseArray<ArrayList<Integer>> sparseArray = new SparseArray<>();
                final ArrayList<Integer> arrayList = new ArrayList<>();
                arrayList.add(Integer.valueOf(i4));
                sparseArray.put(max, arrayList);
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda234
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesStorage.this.lambda$createTaskForMid$109(z, j, arrayList);
                    }
                });
                SQLitePreparedStatement executeFast = this.database.executeFast("REPLACE INTO enc_tasks_v4 VALUES(?, ?, ?, ?)");
                for (int i5 = 0; i5 < sparseArray.size(); i5++) {
                    try {
                        int keyAt = sparseArray.keyAt(i5);
                        ArrayList<Integer> arrayList2 = sparseArray.get(keyAt);
                        for (int i6 = 0; i6 < arrayList2.size(); i6++) {
                            executeFast.requery();
                            executeFast.bindInteger(1, arrayList2.get(i6).intValue());
                            executeFast.bindLong(2, j);
                            executeFast.bindInteger(3, keyAt);
                            executeFast.bindInteger(4, 1);
                            executeFast.step();
                        }
                    } catch (Exception e) {
                        e = e;
                        sQLitePreparedStatement = executeFast;
                        checkSQLException(e);
                        if (sQLitePreparedStatement != null) {
                            sQLitePreparedStatement.dispose();
                            return;
                        }
                        return;
                    } catch (Throwable th) {
                        th = th;
                        sQLitePreparedStatement = executeFast;
                        if (sQLitePreparedStatement != null) {
                            sQLitePreparedStatement.dispose();
                        }
                        throw th;
                    }
                }
                executeFast.dispose();
                this.database.executeFast(String.format(Locale.US, "UPDATE messages_v2 SET ttl = 0 WHERE mid = %d AND uid = %d", Integer.valueOf(i4), Long.valueOf(j))).stepThis().dispose();
                getMessagesController().didAddedNewTask(max, j, sparseArray);
            } catch (Exception e2) {
                e = e2;
            }
        } catch (Throwable th2) {
            th = th2;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createTaskForSecretChat$111(long j, ArrayList arrayList) {
        markMessagesContentAsRead(j, arrayList, 0, 0);
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.messagesReadContent, Long.valueOf(j), arrayList);
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:56:0x015c  */
    /* JADX WARN: Removed duplicated region for block: B:58:0x0161  */
    /* JADX WARN: Removed duplicated region for block: B:60:0x0166  */
    /* JADX WARN: Removed duplicated region for block: B:63:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:68:0x016f  */
    /* JADX WARN: Removed duplicated region for block: B:70:0x0174  */
    /* JADX WARN: Removed duplicated region for block: B:72:0x0179  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$createTaskForSecretChat$112(int i, ArrayList arrayList, int i2, int i3, int i4) {
        SQLiteCursor sQLiteCursor;
        SQLitePreparedStatement sQLitePreparedStatement;
        SQLiteDatabase sQLiteDatabase;
        SQLiteDatabase sQLiteDatabase2;
        try {
            final long makeEncryptedDialogId = DialogObject.makeEncryptedDialogId(i);
            SparseArray<ArrayList<Integer>> sparseArray = new SparseArray<>();
            final ArrayList arrayList2 = new ArrayList();
            StringBuilder sb = new StringBuilder();
            SQLiteCursor queryFinalized = arrayList == null ? this.database.queryFinalized(String.format(Locale.US, "SELECT mid, ttl FROM messages_v2 WHERE uid = %d AND out = %d AND read_state > 0 AND ttl > 0 AND date <= %d AND send_state = 0 AND media != 1", Long.valueOf(makeEncryptedDialogId), Integer.valueOf(i2), Integer.valueOf(i3)), new Object[0]) : this.database.queryFinalized(String.format(Locale.US, "SELECT m.mid, m.ttl FROM messages_v2 as m INNER JOIN randoms_v2 as r ON m.mid = r.mid AND m.uid = r.uid WHERE r.random_id IN (%s)", TextUtils.join(",", arrayList)), new Object[0]);
            int i5 = ConnectionsManager.DEFAULT_DATACENTER_ID;
            while (queryFinalized.next()) {
                try {
                    int intValue = queryFinalized.intValue(1);
                    int intValue2 = queryFinalized.intValue(0);
                    if (arrayList != null) {
                        arrayList2.add(Integer.valueOf(intValue2));
                    }
                    if (intValue > 0) {
                        int max = Math.max(i3, i4) + intValue;
                        i5 = Math.min(i5, max);
                        ArrayList<Integer> arrayList3 = sparseArray.get(max);
                        if (arrayList3 == null) {
                            arrayList3 = new ArrayList<>();
                            sparseArray.put(max, arrayList3);
                        }
                        if (sb.length() != 0) {
                            sb.append(",");
                        }
                        sb.append(intValue2);
                        arrayList3.add(Integer.valueOf(intValue2));
                    }
                } catch (Exception e) {
                    e = e;
                    sQLiteCursor = queryFinalized;
                    sQLitePreparedStatement = null;
                    try {
                        checkSQLException(e);
                        sQLiteDatabase2 = this.database;
                        if (sQLiteDatabase2 != null) {
                        }
                        if (sQLitePreparedStatement != null) {
                        }
                        if (sQLiteCursor == null) {
                        }
                    } catch (Throwable th) {
                        th = th;
                        sQLiteDatabase = this.database;
                        if (sQLiteDatabase != null) {
                            sQLiteDatabase.commitTransaction();
                        }
                        if (sQLitePreparedStatement != null) {
                            sQLitePreparedStatement.dispose();
                        }
                        if (sQLiteCursor != null) {
                            sQLiteCursor.dispose();
                        }
                        throw th;
                    }
                } catch (Throwable th2) {
                    th = th2;
                    sQLiteCursor = queryFinalized;
                    sQLitePreparedStatement = null;
                    sQLiteDatabase = this.database;
                    if (sQLiteDatabase != null) {
                    }
                    if (sQLitePreparedStatement != null) {
                    }
                    if (sQLiteCursor != null) {
                    }
                    throw th;
                }
            }
            queryFinalized.dispose();
            if (arrayList != null) {
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda160
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesStorage.this.lambda$createTaskForSecretChat$111(makeEncryptedDialogId, arrayList2);
                    }
                });
            }
            if (sparseArray.size() != 0) {
                this.database.beginTransaction();
                sQLitePreparedStatement = this.database.executeFast("REPLACE INTO enc_tasks_v4 VALUES(?, ?, ?, ?)");
                for (int i6 = 0; i6 < sparseArray.size(); i6++) {
                    try {
                        int keyAt = sparseArray.keyAt(i6);
                        ArrayList<Integer> arrayList4 = sparseArray.get(keyAt);
                        for (int i7 = 0; i7 < arrayList4.size(); i7++) {
                            sQLitePreparedStatement.requery();
                            sQLitePreparedStatement.bindInteger(1, arrayList4.get(i7).intValue());
                            sQLitePreparedStatement.bindLong(2, makeEncryptedDialogId);
                            sQLitePreparedStatement.bindInteger(3, keyAt);
                            sQLitePreparedStatement.bindInteger(4, 0);
                            sQLitePreparedStatement.step();
                        }
                    } catch (Exception e2) {
                        e = e2;
                        sQLiteCursor = null;
                        checkSQLException(e);
                        sQLiteDatabase2 = this.database;
                        if (sQLiteDatabase2 != null) {
                            sQLiteDatabase2.commitTransaction();
                        }
                        if (sQLitePreparedStatement != null) {
                            sQLitePreparedStatement.dispose();
                        }
                        if (sQLiteCursor == null) {
                            sQLiteCursor.dispose();
                            return;
                        }
                        return;
                    } catch (Throwable th3) {
                        th = th3;
                        sQLiteCursor = null;
                        sQLiteDatabase = this.database;
                        if (sQLiteDatabase != null) {
                        }
                        if (sQLitePreparedStatement != null) {
                        }
                        if (sQLiteCursor != null) {
                        }
                        throw th;
                    }
                }
                sQLitePreparedStatement.dispose();
                this.database.commitTransaction();
                this.database.executeFast(String.format(Locale.US, "UPDATE messages_v2 SET ttl = 0 WHERE mid IN(%s) AND uid = %d", sb.toString(), Long.valueOf(makeEncryptedDialogId))).stepThis().dispose();
                getMessagesController().didAddedNewTask(i5, makeEncryptedDialogId, sparseArray);
            }
            SQLiteDatabase sQLiteDatabase3 = this.database;
            if (sQLiteDatabase3 != null) {
                sQLiteDatabase3.commitTransaction();
            }
        } catch (Exception e3) {
            e = e3;
            sQLiteCursor = null;
        } catch (Throwable th4) {
            th = th4;
            sQLiteCursor = null;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$deleteAllStoryPushMessages$40() {
        try {
            this.database.executeFast("DELETE FROM story_pushes").stepThis().dispose();
        } catch (Exception e) {
            checkSQLException(e);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$deleteAllStoryReactionPushMessages$41() {
        try {
            this.database.executeFast("DELETE FROM unread_push_messages WHERE is_reaction = 2").stepThis().dispose();
        } catch (Exception e) {
            checkSQLException(e);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$deleteContacts$141(ArrayList arrayList) {
        try {
            String join = TextUtils.join(",", arrayList);
            this.database.executeFast("DELETE FROM contacts WHERE uid IN(" + join + ")").stepThis().dispose();
        } catch (Exception e) {
            checkSQLException(e);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$deleteDialog$83(ArrayList arrayList) {
        getFileLoader().cancelLoadFiles(arrayList);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$deleteDialog$84() {
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.needReloadRecentDialogsSearch, new Object[0]);
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:101:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:121:0x0345  */
    /* JADX WARN: Removed duplicated region for block: B:129:0x0229 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:172:0x050a A[Catch: all -> 0x03cd, Exception -> 0x03d2, TryCatch #25 {Exception -> 0x03d2, all -> 0x03cd, blocks: (B:15:0x0130, B:170:0x04c4, B:172:0x050a, B:173:0x0526, B:176:0x03e6, B:178:0x0482, B:180:0x0488, B:181:0x04a0, B:182:0x04c1, B:183:0x04a5), top: B:9:0x0119 }] */
    /* JADX WARN: Removed duplicated region for block: B:178:0x0482 A[Catch: all -> 0x03cd, Exception -> 0x03d2, TryCatch #25 {Exception -> 0x03d2, all -> 0x03cd, blocks: (B:15:0x0130, B:170:0x04c4, B:172:0x050a, B:173:0x0526, B:176:0x03e6, B:178:0x0482, B:180:0x0488, B:181:0x04a0, B:182:0x04c1, B:183:0x04a5), top: B:9:0x0119 }] */
    /* JADX WARN: Removed duplicated region for block: B:183:0x04a5 A[Catch: all -> 0x03cd, Exception -> 0x03d2, TryCatch #25 {Exception -> 0x03d2, all -> 0x03cd, blocks: (B:15:0x0130, B:170:0x04c4, B:172:0x050a, B:173:0x0526, B:176:0x03e6, B:178:0x0482, B:180:0x0488, B:181:0x04a0, B:182:0x04c1, B:183:0x04a5), top: B:9:0x0119 }] */
    /* JADX WARN: Removed duplicated region for block: B:59:0x0330  */
    /* JADX WARN: Removed duplicated region for block: B:76:0x061d  */
    /* JADX WARN: Removed duplicated region for block: B:78:0x0622  */
    /* JADX WARN: Removed duplicated region for block: B:80:0x0627  */
    /* JADX WARN: Removed duplicated region for block: B:82:0x062c  */
    /* JADX WARN: Removed duplicated region for block: B:84:? A[SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:93:0x05fc  */
    /* JADX WARN: Removed duplicated region for block: B:95:0x0601  */
    /* JADX WARN: Removed duplicated region for block: B:97:0x0606  */
    /* JADX WARN: Removed duplicated region for block: B:99:0x060b  */
    /* JADX WARN: Type inference failed for: r11v0 */
    /* JADX WARN: Type inference failed for: r11v1, types: [boolean, int] */
    /* JADX WARN: Type inference failed for: r11v6 */
    /* JADX WARN: Type inference failed for: r12v41 */
    /* JADX WARN: Type inference failed for: r12v42, types: [boolean, int] */
    /* JADX WARN: Type inference failed for: r12v44 */
    /* JADX WARN: Type inference failed for: r15v42, types: [org.telegram.tgnet.AbstractSerializedData, org.telegram.tgnet.NativeByteBuffer] */
    /* JADX WARN: Type inference failed for: r27v0, types: [org.telegram.messenger.BaseController, org.telegram.messenger.MessagesStorage] */
    /* JADX WARN: Type inference failed for: r3v12, types: [org.telegram.SQLite.SQLiteCursor] */
    /* JADX WARN: Type inference failed for: r3v13 */
    /* JADX WARN: Type inference failed for: r3v14, types: [org.telegram.SQLite.SQLiteCursor] */
    /* JADX WARN: Type inference failed for: r3v15 */
    /* JADX WARN: Type inference failed for: r3v17 */
    /* JADX WARN: Type inference failed for: r3v43, types: [org.telegram.SQLite.SQLiteCursor] */
    /* JADX WARN: Type inference failed for: r3v67 */
    /* JADX WARN: Type inference failed for: r3v68 */
    /* JADX WARN: Type inference failed for: r4v1, types: [org.telegram.tgnet.AbstractSerializedData, org.telegram.tgnet.NativeByteBuffer] */
    /* JADX WARN: Type inference failed for: r4v35, types: [org.telegram.tgnet.TLRPC$Message] */
    /* JADX WARN: Type inference failed for: r6v1, types: [org.telegram.tgnet.TLRPC$Message] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$deleteDialog$85(int i, long j) {
        SQLiteCursor queryFinalized;
        Throwable th;
        Exception exc;
        SQLiteCursor sQLiteCursor;
        SQLitePreparedStatement sQLitePreparedStatement;
        SQLitePreparedStatement sQLitePreparedStatement2;
        SQLiteCursor sQLiteCursor2;
        SQLitePreparedStatement sQLitePreparedStatement3;
        SQLitePreparedStatement sQLitePreparedStatement4;
        SQLiteCursor sQLiteCursor3;
        SQLiteCursor sQLiteCursor4;
        final ArrayList arrayList;
        ArrayList<File> arrayList2;
        String str;
        String str2;
        boolean z;
        SQLiteCursor sQLiteCursor5;
        SQLiteCursor sQLiteCursor6;
        String str3;
        String str4;
        long j2;
        String str5;
        String str6;
        String str7;
        String str8;
        SQLitePreparedStatement executeFast;
        SQLiteCursor sQLiteCursor7;
        SQLiteCursor sQLiteCursor8;
        SQLiteCursor sQLiteCursor9;
        int i2;
        String str9;
        String str10;
        SQLitePreparedStatement executeFast2;
        SQLitePreparedStatement executeFast3;
        int i3;
        long j3;
        String str11 = " AND mid != ";
        ?? r11 = 0;
        if (i == 3) {
            try {
                queryFinalized = this.database.queryFinalized("SELECT last_mid FROM dialogs WHERE did = " + j, new Object[0]);
                try {
                    int intValue = queryFinalized.next() ? queryFinalized.intValue(0) : -1;
                    queryFinalized.dispose();
                    if (intValue != 0) {
                        return;
                    }
                } catch (Exception e) {
                    exc = e;
                    sQLitePreparedStatement3 = null;
                    sQLiteCursor2 = null;
                    sQLitePreparedStatement2 = null;
                    try {
                        checkSQLException(exc);
                        if (queryFinalized != null) {
                        }
                        if (sQLiteCursor2 != null) {
                        }
                        if (sQLitePreparedStatement2 != null) {
                        }
                        if (sQLitePreparedStatement3 == null) {
                        }
                    } catch (Throwable th2) {
                        th = th2;
                        SQLiteCursor sQLiteCursor10 = sQLiteCursor2;
                        sQLitePreparedStatement4 = sQLitePreparedStatement3;
                        sQLiteCursor3 = sQLiteCursor10;
                        SQLitePreparedStatement sQLitePreparedStatement5 = sQLitePreparedStatement4;
                        sQLiteCursor = sQLiteCursor3;
                        sQLitePreparedStatement = sQLitePreparedStatement5;
                        if (queryFinalized != null) {
                        }
                        if (sQLiteCursor != null) {
                        }
                        if (sQLitePreparedStatement2 != null) {
                        }
                        if (sQLitePreparedStatement == null) {
                        }
                    }
                } catch (Throwable th3) {
                    th = th3;
                    sQLitePreparedStatement = null;
                    sQLiteCursor = null;
                    sQLitePreparedStatement2 = null;
                    if (queryFinalized != null) {
                    }
                    if (sQLiteCursor != null) {
                    }
                    if (sQLitePreparedStatement2 != null) {
                    }
                    if (sQLitePreparedStatement == null) {
                    }
                }
            } catch (Exception e2) {
                exc = e2;
                queryFinalized = null;
            } catch (Throwable th4) {
                th = th4;
                queryFinalized = null;
            }
        }
        String str12 = "SELECT data FROM messages_v2 WHERE uid = ";
        if (DialogObject.isEncryptedDialog(j) || i == 2) {
            ?? queryFinalized2 = this.database.queryFinalized("SELECT data FROM messages_v2 WHERE uid = " + j, new Object[0]);
            try {
                try {
                    ArrayList<File> arrayList3 = new ArrayList<>();
                    ArrayList arrayList4 = new ArrayList();
                    ArrayList arrayList5 = new ArrayList();
                    queryFinalized2 = queryFinalized2;
                    while (queryFinalized2.next()) {
                        try {
                            ?? byteBufferValue = queryFinalized2.byteBufferValue(r11);
                            if (byteBufferValue != 0) {
                                ?? TLdeserialize = TLRPC.Message.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(r11), r11);
                                TLdeserialize.readAttachPath(byteBufferValue, getUserConfig().clientUserId);
                                byteBufferValue.reuse();
                                arrayList = arrayList4;
                                arrayList2 = arrayList3;
                                sQLiteCursor4 = queryFinalized2;
                                str2 = str11;
                                str = str12;
                                z = true;
                                try {
                                    try {
                                        addFilesToDelete(TLdeserialize, arrayList2, arrayList5, arrayList, false);
                                        arrayList4 = arrayList;
                                        arrayList3 = arrayList2;
                                        str11 = str2;
                                        queryFinalized2 = sQLiteCursor4;
                                        str12 = str;
                                    } catch (Throwable th5) {
                                        th = th5;
                                        th = th;
                                        queryFinalized = sQLiteCursor4;
                                        sQLitePreparedStatement = null;
                                        sQLiteCursor = null;
                                        sQLitePreparedStatement2 = null;
                                        if (queryFinalized != null) {
                                        }
                                        if (sQLiteCursor != null) {
                                        }
                                        if (sQLitePreparedStatement2 != null) {
                                        }
                                        if (sQLitePreparedStatement == null) {
                                        }
                                    }
                                } catch (Exception e3) {
                                    e = e3;
                                    try {
                                        checkSQLException(e);
                                        sQLiteCursor4.dispose();
                                        deleteFromDownloadQueue(arrayList5, z);
                                        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda211
                                            @Override // java.lang.Runnable
                                            public final void run() {
                                                MessagesStorage.this.lambda$deleteDialog$83(arrayList);
                                            }
                                        });
                                        getFileLoader().deleteFiles(arrayList2, i);
                                        String str13 = "DELETE FROM bot_keyboard WHERE uid = ";
                                        String str14 = "DELETE FROM messages_holes WHERE uid = ";
                                        if (i != 0) {
                                        }
                                        str3 = "DELETE FROM media_holes_v2 WHERE uid = ";
                                        str4 = "DELETE FROM media_v4 WHERE uid = ";
                                        j2 = j;
                                        str5 = "DELETE FROM media_counts_v2 WHERE uid = ";
                                        str6 = "DELETE FROM messages_holes WHERE uid = ";
                                        str7 = "DELETE FROM bot_keyboard_topics WHERE uid = ";
                                        str8 = "DELETE FROM bot_keyboard WHERE uid = ";
                                        this.database.executeFast("DELETE FROM dialogs WHERE did = " + j2).stepThis().dispose();
                                        this.database.executeFast("DELETE FROM chat_pinned_v2 WHERE uid = " + j2).stepThis().dispose();
                                        this.database.executeFast("DELETE FROM chat_pinned_count WHERE uid = " + j2).stepThis().dispose();
                                        this.database.executeFast("DELETE FROM channel_users_v2 WHERE did = " + j2).stepThis().dispose();
                                        this.database.executeFast("DELETE FROM search_recent WHERE did = " + j2).stepThis().dispose();
                                        if (!DialogObject.isEncryptedDialog(j)) {
                                        }
                                        executeFast.stepThis().dispose();
                                        this.database.executeFast("UPDATE dialogs SET unread_count = 0, unread_count_i = 0 WHERE did = " + j2).stepThis().dispose();
                                        this.database.executeFast("DELETE FROM messages_v2 WHERE uid = " + j2).stepThis().dispose();
                                        if (j2 == getUserConfig().getClientUserId()) {
                                        }
                                        this.database.executeFast(str8 + j2).stepThis().dispose();
                                        this.database.executeFast(str7 + j2).stepThis().dispose();
                                        this.database.executeFast(str5 + j2).stepThis().dispose();
                                        this.database.executeFast(str4 + j2).stepThis().dispose();
                                        this.database.executeFast(str6 + j2).stepThis().dispose();
                                        this.database.executeFast(str3 + j2).stepThis().dispose();
                                        getMediaDataController().clearBotKeyboard(j2);
                                        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda212
                                            @Override // java.lang.Runnable
                                            public final void run() {
                                                MessagesStorage.this.lambda$deleteDialog$84();
                                            }
                                        });
                                        resetAllUnreadCounters(false);
                                        updateWidgets(j2);
                                    } catch (Exception e4) {
                                        e = e4;
                                        exc = e;
                                        queryFinalized = sQLiteCursor4;
                                        sQLitePreparedStatement3 = null;
                                        sQLiteCursor2 = null;
                                        sQLitePreparedStatement2 = null;
                                        checkSQLException(exc);
                                        if (queryFinalized != null) {
                                            queryFinalized.dispose();
                                        }
                                        if (sQLiteCursor2 != null) {
                                            sQLiteCursor2.dispose();
                                        }
                                        if (sQLitePreparedStatement2 != null) {
                                            sQLitePreparedStatement2.dispose();
                                        }
                                        if (sQLitePreparedStatement3 == null) {
                                            sQLitePreparedStatement3.dispose();
                                            return;
                                        }
                                        return;
                                    }
                                }
                            }
                            r11 = 0;
                            queryFinalized2 = queryFinalized2;
                        } catch (Exception e5) {
                            e = e5;
                            arrayList = arrayList4;
                            arrayList2 = arrayList3;
                            sQLiteCursor4 = queryFinalized2;
                            str = str12;
                            str2 = str11;
                            z = true;
                        }
                    }
                    arrayList = arrayList4;
                    arrayList2 = arrayList3;
                    sQLiteCursor4 = queryFinalized2;
                    str = str12;
                    str2 = str11;
                    z = true;
                    sQLiteCursor4.dispose();
                    deleteFromDownloadQueue(arrayList5, z);
                    AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda211
                        @Override // java.lang.Runnable
                        public final void run() {
                            MessagesStorage.this.lambda$deleteDialog$83(arrayList);
                        }
                    });
                    getFileLoader().deleteFiles(arrayList2, i);
                } catch (Exception e6) {
                    e = e6;
                    sQLiteCursor4 = queryFinalized2;
                }
            } catch (Throwable th6) {
                th = th6;
                sQLiteCursor4 = queryFinalized2;
            }
        } else {
            str = "SELECT data FROM messages_v2 WHERE uid = ";
            str2 = " AND mid != ";
        }
        String str132 = "DELETE FROM bot_keyboard WHERE uid = ";
        String str142 = "DELETE FROM messages_holes WHERE uid = ";
        try {
            if (i != 0 || i == 3) {
                str3 = "DELETE FROM media_holes_v2 WHERE uid = ";
                str4 = "DELETE FROM media_v4 WHERE uid = ";
                j2 = j;
                str5 = "DELETE FROM media_counts_v2 WHERE uid = ";
                str6 = "DELETE FROM messages_holes WHERE uid = ";
                str7 = "DELETE FROM bot_keyboard_topics WHERE uid = ";
                str8 = "DELETE FROM bot_keyboard WHERE uid = ";
                this.database.executeFast("DELETE FROM dialogs WHERE did = " + j2).stepThis().dispose();
                this.database.executeFast("DELETE FROM chat_pinned_v2 WHERE uid = " + j2).stepThis().dispose();
                this.database.executeFast("DELETE FROM chat_pinned_count WHERE uid = " + j2).stepThis().dispose();
                this.database.executeFast("DELETE FROM channel_users_v2 WHERE did = " + j2).stepThis().dispose();
                this.database.executeFast("DELETE FROM search_recent WHERE did = " + j2).stepThis().dispose();
                if (!DialogObject.isEncryptedDialog(j)) {
                    executeFast = this.database.executeFast("DELETE FROM enc_chats WHERE uid = " + DialogObject.getEncryptedChatId(j));
                } else if (DialogObject.isChatDialog(j)) {
                    executeFast = this.database.executeFast("DELETE FROM chat_settings_v2 WHERE uid = " + (-j2));
                }
                executeFast.stepThis().dispose();
            } else if (i == 2) {
                SQLiteCursor queryFinalized3 = this.database.queryFinalized("SELECT last_mid_i, last_mid FROM dialogs WHERE did = " + j, new Object[0]);
                try {
                    if (queryFinalized3.next()) {
                        long longValue = queryFinalized3.longValue(0);
                        long longValue2 = queryFinalized3.longValue(1);
                        try {
                            ?? r12 = 0;
                            ?? queryFinalized4 = this.database.queryFinalized(str + j + " AND mid IN (" + longValue + "," + longValue2 + ")", new Object[0]);
                            int i4 = -1;
                            while (queryFinalized4.next()) {
                                try {
                                    try {
                                        ?? byteBufferValue2 = queryFinalized4.byteBufferValue(r12);
                                        if (byteBufferValue2 != 0) {
                                            i2 = i4;
                                            try {
                                                ?? TLdeserialize2 = TLRPC.Message.TLdeserialize(byteBufferValue2, byteBufferValue2.readInt32(r12), r12);
                                                if (TLdeserialize2 != 0) {
                                                    str9 = str132;
                                                    str10 = str142;
                                                    try {
                                                        TLdeserialize2.readAttachPath(byteBufferValue2, getUserConfig().clientUserId);
                                                    } catch (Exception e7) {
                                                        e = e7;
                                                        try {
                                                            checkSQLException(e);
                                                            queryFinalized4.dispose();
                                                            SQLiteDatabase sQLiteDatabase = this.database;
                                                            StringBuilder sb = new StringBuilder();
                                                            sb.append("DELETE FROM messages_v2 WHERE uid = ");
                                                            sb.append(j);
                                                            String str15 = str2;
                                                            sb.append(str15);
                                                            sb.append(longValue);
                                                            sb.append(str15);
                                                            sb.append(longValue2);
                                                            sQLiteDatabase.executeFast(sb.toString()).stepThis().dispose();
                                                            if (j == getUserConfig().getClientUserId()) {
                                                            }
                                                            this.database.executeFast(str10 + j).stepThis().dispose();
                                                            this.database.executeFast(str9 + j).stepThis().dispose();
                                                            this.database.executeFast("DELETE FROM bot_keyboard_topics WHERE uid = " + j).stepThis().dispose();
                                                            this.database.executeFast("DELETE FROM media_counts_v2 WHERE uid = " + j).stepThis().dispose();
                                                            this.database.executeFast("DELETE FROM media_v4 WHERE uid = " + j).stepThis().dispose();
                                                            this.database.executeFast("DELETE FROM media_holes_v2 WHERE uid = " + j).stepThis().dispose();
                                                            getMediaDataController().clearBotKeyboard(j);
                                                            executeFast2 = this.database.executeFast("REPLACE INTO messages_holes VALUES(?, ?, ?)");
                                                            executeFast3 = this.database.executeFast("REPLACE INTO media_holes_v2 VALUES(?, ?, ?, ?)");
                                                            i3 = i2;
                                                            if (i3 != -1) {
                                                            }
                                                            executeFast2.dispose();
                                                        } catch (Exception e8) {
                                                            exc = e8;
                                                            queryFinalized = queryFinalized3;
                                                            sQLiteCursor6 = queryFinalized4;
                                                            sQLiteCursor2 = sQLiteCursor6;
                                                            sQLitePreparedStatement3 = null;
                                                            sQLitePreparedStatement2 = null;
                                                            checkSQLException(exc);
                                                            if (queryFinalized != null) {
                                                            }
                                                            if (sQLiteCursor2 != null) {
                                                            }
                                                            if (sQLitePreparedStatement2 != null) {
                                                            }
                                                            if (sQLitePreparedStatement3 == null) {
                                                            }
                                                        } catch (Throwable th7) {
                                                            th = th7;
                                                            queryFinalized = queryFinalized3;
                                                            sQLiteCursor5 = queryFinalized4;
                                                            sQLiteCursor = sQLiteCursor5;
                                                            sQLitePreparedStatement = null;
                                                            sQLitePreparedStatement2 = null;
                                                            if (queryFinalized != null) {
                                                            }
                                                            if (sQLiteCursor != null) {
                                                            }
                                                            if (sQLitePreparedStatement2 != null) {
                                                            }
                                                            if (sQLitePreparedStatement == null) {
                                                            }
                                                        }
                                                        try {
                                                            executeFast3.dispose();
                                                            try {
                                                                try {
                                                                    updateWidgets(j3);
                                                                    sQLiteCursor9.dispose();
                                                                    return;
                                                                } catch (Exception e9) {
                                                                    exc = e9;
                                                                    queryFinalized = sQLiteCursor9;
                                                                    sQLitePreparedStatement3 = null;
                                                                    sQLiteCursor2 = null;
                                                                    sQLitePreparedStatement2 = null;
                                                                    checkSQLException(exc);
                                                                    if (queryFinalized != null) {
                                                                    }
                                                                    if (sQLiteCursor2 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement2 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement3 == null) {
                                                                    }
                                                                }
                                                            } catch (Throwable th8) {
                                                                th = th8;
                                                                queryFinalized = sQLiteCursor9;
                                                                sQLitePreparedStatement = null;
                                                                sQLiteCursor = null;
                                                                sQLitePreparedStatement2 = null;
                                                                if (queryFinalized != null) {
                                                                }
                                                                if (sQLiteCursor != null) {
                                                                }
                                                                if (sQLitePreparedStatement2 != null) {
                                                                }
                                                                if (sQLitePreparedStatement == null) {
                                                                }
                                                            }
                                                        } catch (Exception e10) {
                                                            sQLitePreparedStatement3 = executeFast3;
                                                            queryFinalized = sQLiteCursor9;
                                                            sQLiteCursor2 = null;
                                                            sQLitePreparedStatement2 = null;
                                                            exc = e10;
                                                            checkSQLException(exc);
                                                            if (queryFinalized != null) {
                                                            }
                                                            if (sQLiteCursor2 != null) {
                                                            }
                                                            if (sQLitePreparedStatement2 != null) {
                                                            }
                                                            if (sQLitePreparedStatement3 == null) {
                                                            }
                                                        } catch (Throwable th9) {
                                                            sQLitePreparedStatement = executeFast3;
                                                            queryFinalized = sQLiteCursor9;
                                                            sQLiteCursor = null;
                                                            sQLitePreparedStatement2 = null;
                                                            th = th9;
                                                            if (queryFinalized != null) {
                                                            }
                                                            if (sQLiteCursor != null) {
                                                            }
                                                            if (sQLitePreparedStatement2 != null) {
                                                            }
                                                            if (sQLitePreparedStatement == null) {
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    str9 = str132;
                                                    str10 = str142;
                                                }
                                                byteBufferValue2.reuse();
                                                if (TLdeserialize2 != 0) {
                                                    i4 = TLdeserialize2.id;
                                                    str132 = str9;
                                                    str142 = str10;
                                                    r12 = 0;
                                                }
                                            } catch (Exception e11) {
                                                e = e11;
                                                str9 = str132;
                                                str10 = str142;
                                                checkSQLException(e);
                                                queryFinalized4.dispose();
                                                SQLiteDatabase sQLiteDatabase2 = this.database;
                                                StringBuilder sb2 = new StringBuilder();
                                                sb2.append("DELETE FROM messages_v2 WHERE uid = ");
                                                sb2.append(j);
                                                String str152 = str2;
                                                sb2.append(str152);
                                                sb2.append(longValue);
                                                sb2.append(str152);
                                                sb2.append(longValue2);
                                                sQLiteDatabase2.executeFast(sb2.toString()).stepThis().dispose();
                                                if (j == getUserConfig().getClientUserId()) {
                                                }
                                                this.database.executeFast(str10 + j).stepThis().dispose();
                                                this.database.executeFast(str9 + j).stepThis().dispose();
                                                this.database.executeFast("DELETE FROM bot_keyboard_topics WHERE uid = " + j).stepThis().dispose();
                                                this.database.executeFast("DELETE FROM media_counts_v2 WHERE uid = " + j).stepThis().dispose();
                                                this.database.executeFast("DELETE FROM media_v4 WHERE uid = " + j).stepThis().dispose();
                                                this.database.executeFast("DELETE FROM media_holes_v2 WHERE uid = " + j).stepThis().dispose();
                                                getMediaDataController().clearBotKeyboard(j);
                                                executeFast2 = this.database.executeFast("REPLACE INTO messages_holes VALUES(?, ?, ?)");
                                                executeFast3 = this.database.executeFast("REPLACE INTO media_holes_v2 VALUES(?, ?, ?, ?)");
                                                i3 = i2;
                                                if (i3 != -1) {
                                                }
                                                executeFast2.dispose();
                                                executeFast3.dispose();
                                                updateWidgets(j3);
                                                sQLiteCursor9.dispose();
                                                return;
                                            }
                                        } else {
                                            i2 = i4;
                                            str9 = str132;
                                            str10 = str142;
                                        }
                                        i4 = i2;
                                        str132 = str9;
                                        str142 = str10;
                                        r12 = 0;
                                    } catch (Throwable th10) {
                                        queryFinalized = queryFinalized3;
                                        th = th10;
                                        sQLiteCursor5 = queryFinalized4;
                                        sQLiteCursor = sQLiteCursor5;
                                        sQLitePreparedStatement = null;
                                        sQLitePreparedStatement2 = null;
                                        if (queryFinalized != null) {
                                            queryFinalized.dispose();
                                        }
                                        if (sQLiteCursor != null) {
                                            sQLiteCursor.dispose();
                                        }
                                        if (sQLitePreparedStatement2 != null) {
                                            sQLitePreparedStatement2.dispose();
                                        }
                                        if (sQLitePreparedStatement == null) {
                                            throw th;
                                        }
                                        sQLitePreparedStatement.dispose();
                                        throw th;
                                    }
                                } catch (Exception e12) {
                                    e = e12;
                                    i2 = i4;
                                }
                            }
                            i2 = i4;
                            str9 = str132;
                            str10 = str142;
                            queryFinalized4.dispose();
                            SQLiteDatabase sQLiteDatabase22 = this.database;
                            StringBuilder sb22 = new StringBuilder();
                            sb22.append("DELETE FROM messages_v2 WHERE uid = ");
                            sb22.append(j);
                            String str1522 = str2;
                            sb22.append(str1522);
                            sb22.append(longValue);
                            sb22.append(str1522);
                            sb22.append(longValue2);
                            sQLiteDatabase22.executeFast(sb22.toString()).stepThis().dispose();
                            if (j == getUserConfig().getClientUserId()) {
                                try {
                                    this.database.executeFast("DELETE FROM messages_topics WHERE uid = " + j + str1522 + longValue + str1522 + longValue2).stepThis().dispose();
                                } catch (Exception e13) {
                                    queryFinalized = queryFinalized3;
                                    exc = e13;
                                    sQLiteCursor6 = null;
                                    sQLiteCursor2 = sQLiteCursor6;
                                    sQLitePreparedStatement3 = null;
                                    sQLitePreparedStatement2 = null;
                                    checkSQLException(exc);
                                    if (queryFinalized != null) {
                                    }
                                    if (sQLiteCursor2 != null) {
                                    }
                                    if (sQLitePreparedStatement2 != null) {
                                    }
                                    if (sQLitePreparedStatement3 == null) {
                                    }
                                } catch (Throwable th11) {
                                    queryFinalized = queryFinalized3;
                                    th = th11;
                                    sQLiteCursor5 = null;
                                    sQLiteCursor = sQLiteCursor5;
                                    sQLitePreparedStatement = null;
                                    sQLitePreparedStatement2 = null;
                                    if (queryFinalized != null) {
                                    }
                                    if (sQLiteCursor != null) {
                                    }
                                    if (sQLitePreparedStatement2 != null) {
                                    }
                                    if (sQLitePreparedStatement == null) {
                                    }
                                }
                            }
                            this.database.executeFast(str10 + j).stepThis().dispose();
                            this.database.executeFast(str9 + j).stepThis().dispose();
                            this.database.executeFast("DELETE FROM bot_keyboard_topics WHERE uid = " + j).stepThis().dispose();
                            this.database.executeFast("DELETE FROM media_counts_v2 WHERE uid = " + j).stepThis().dispose();
                            this.database.executeFast("DELETE FROM media_v4 WHERE uid = " + j).stepThis().dispose();
                            this.database.executeFast("DELETE FROM media_holes_v2 WHERE uid = " + j).stepThis().dispose();
                            getMediaDataController().clearBotKeyboard(j);
                            executeFast2 = this.database.executeFast("REPLACE INTO messages_holes VALUES(?, ?, ?)");
                            try {
                                executeFast3 = this.database.executeFast("REPLACE INTO media_holes_v2 VALUES(?, ?, ?, ?)");
                                i3 = i2;
                                if (i3 != -1) {
                                    sQLiteCursor9 = queryFinalized3;
                                    j3 = j;
                                    try {
                                        createFirstHoles(j, executeFast2, executeFast3, i3, 0L);
                                    } catch (Exception e14) {
                                        sQLitePreparedStatement2 = executeFast2;
                                        queryFinalized = sQLiteCursor9;
                                        sQLiteCursor2 = null;
                                        sQLitePreparedStatement3 = executeFast3;
                                        exc = e14;
                                        checkSQLException(exc);
                                        if (queryFinalized != null) {
                                        }
                                        if (sQLiteCursor2 != null) {
                                        }
                                        if (sQLitePreparedStatement2 != null) {
                                        }
                                        if (sQLitePreparedStatement3 == null) {
                                        }
                                    } catch (Throwable th12) {
                                        sQLitePreparedStatement2 = executeFast2;
                                        queryFinalized = sQLiteCursor9;
                                        sQLiteCursor = null;
                                        sQLitePreparedStatement = executeFast3;
                                        th = th12;
                                        if (queryFinalized != null) {
                                        }
                                        if (sQLiteCursor != null) {
                                        }
                                        if (sQLitePreparedStatement2 != null) {
                                        }
                                        if (sQLitePreparedStatement == null) {
                                        }
                                    }
                                } else {
                                    sQLiteCursor9 = queryFinalized3;
                                    j3 = j;
                                }
                                executeFast2.dispose();
                                executeFast3.dispose();
                                updateWidgets(j3);
                            } catch (Exception e15) {
                                exc = e15;
                                sQLitePreparedStatement2 = executeFast2;
                                queryFinalized = queryFinalized3;
                                sQLitePreparedStatement3 = null;
                                sQLiteCursor2 = null;
                            } catch (Throwable th13) {
                                th = th13;
                                sQLitePreparedStatement2 = executeFast2;
                                queryFinalized = queryFinalized3;
                                sQLitePreparedStatement = null;
                                sQLiteCursor = null;
                            }
                        } catch (Exception e16) {
                            e = e16;
                            sQLiteCursor8 = queryFinalized3;
                            exc = e;
                            queryFinalized = sQLiteCursor8;
                            sQLiteCursor6 = null;
                            sQLiteCursor2 = sQLiteCursor6;
                            sQLitePreparedStatement3 = null;
                            sQLitePreparedStatement2 = null;
                            checkSQLException(exc);
                            if (queryFinalized != null) {
                            }
                            if (sQLiteCursor2 != null) {
                            }
                            if (sQLitePreparedStatement2 != null) {
                            }
                            if (sQLitePreparedStatement3 == null) {
                            }
                        } catch (Throwable th14) {
                            th = th14;
                            sQLiteCursor7 = queryFinalized3;
                            th = th;
                            queryFinalized = sQLiteCursor7;
                            sQLiteCursor5 = null;
                            sQLiteCursor = sQLiteCursor5;
                            sQLitePreparedStatement = null;
                            sQLitePreparedStatement2 = null;
                            if (queryFinalized != null) {
                            }
                            if (sQLiteCursor != null) {
                            }
                            if (sQLitePreparedStatement2 != null) {
                            }
                            if (sQLitePreparedStatement == null) {
                            }
                        }
                    } else {
                        sQLiteCursor9 = queryFinalized3;
                    }
                    try {
                        sQLiteCursor9.dispose();
                        return;
                    } catch (Throwable th15) {
                        th = th15;
                        queryFinalized = sQLiteCursor9;
                        sQLiteCursor3 = null;
                        sQLitePreparedStatement4 = null;
                        sQLitePreparedStatement2 = null;
                        SQLitePreparedStatement sQLitePreparedStatement52 = sQLitePreparedStatement4;
                        sQLiteCursor = sQLiteCursor3;
                        sQLitePreparedStatement = sQLitePreparedStatement52;
                        if (queryFinalized != null) {
                        }
                        if (sQLiteCursor != null) {
                        }
                        if (sQLitePreparedStatement2 != null) {
                        }
                        if (sQLitePreparedStatement == null) {
                        }
                    }
                } catch (Exception e17) {
                    e = e17;
                    sQLiteCursor8 = queryFinalized3;
                } catch (Throwable th16) {
                    th = th16;
                    sQLiteCursor7 = queryFinalized3;
                }
            } else {
                str3 = "DELETE FROM media_holes_v2 WHERE uid = ";
                str4 = "DELETE FROM media_v4 WHERE uid = ";
                j2 = j;
                str5 = "DELETE FROM media_counts_v2 WHERE uid = ";
                str6 = "DELETE FROM messages_holes WHERE uid = ";
                str7 = "DELETE FROM bot_keyboard_topics WHERE uid = ";
                str8 = "DELETE FROM bot_keyboard WHERE uid = ";
            }
            this.database.executeFast("UPDATE dialogs SET unread_count = 0, unread_count_i = 0 WHERE did = " + j2).stepThis().dispose();
            this.database.executeFast("DELETE FROM messages_v2 WHERE uid = " + j2).stepThis().dispose();
            if (j2 == getUserConfig().getClientUserId()) {
                this.database.executeFast("DELETE FROM messages_topics WHERE uid = " + j2).stepThis().dispose();
            }
            this.database.executeFast(str8 + j2).stepThis().dispose();
            this.database.executeFast(str7 + j2).stepThis().dispose();
            this.database.executeFast(str5 + j2).stepThis().dispose();
            this.database.executeFast(str4 + j2).stepThis().dispose();
            this.database.executeFast(str6 + j2).stepThis().dispose();
            this.database.executeFast(str3 + j2).stepThis().dispose();
            getMediaDataController().clearBotKeyboard(j2);
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda212
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesStorage.this.lambda$deleteDialog$84();
                }
            });
            resetAllUnreadCounters(false);
            updateWidgets(j2);
        } catch (Exception e18) {
            exc = e18;
            queryFinalized = null;
        } catch (Throwable th17) {
            th = th17;
            queryFinalized = null;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$deleteFromDownloadQueue$176(ArrayList arrayList) {
        getDownloadController().cancelDownloading(arrayList);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$deleteSavedDialog$52(long j, ArrayList arrayList) {
        getMessagesController().markDialogMessageAsDeleted(j, arrayList);
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.messagesDeleted, arrayList, 0L, Boolean.FALSE);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$deleteSavedDialog$53(long j) {
        final long clientUserId;
        SQLiteCursor queryFinalized;
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                clientUserId = getUserConfig().getClientUserId();
                queryFinalized = this.database.queryFinalized("SELECT mid FROM messages_topics WHERE uid = ? AND topic_id = ?", Long.valueOf(clientUserId), Long.valueOf(j));
            } catch (Exception e) {
                e = e;
            }
        } catch (Throwable th) {
            th = th;
        }
        try {
            final ArrayList<Integer> arrayList = new ArrayList<>();
            while (queryFinalized.next()) {
                arrayList.add(Integer.valueOf(queryFinalized.intValue(0)));
            }
            queryFinalized.dispose();
            queryFinalized = this.database.queryFinalized("SELECT mid, data FROM messages_v2 WHERE uid = ?", Long.valueOf(clientUserId));
            while (queryFinalized.next()) {
                int intValue = queryFinalized.intValue(0);
                if (!arrayList.contains(Integer.valueOf(intValue))) {
                    NativeByteBuffer byteBufferValue = queryFinalized.byteBufferValue(1);
                    if (MessageObject.getSavedDialogId(clientUserId, TLRPC.Message.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false)) == j) {
                        arrayList.add(Integer.valueOf(intValue));
                    }
                    byteBufferValue.reuse();
                }
            }
            queryFinalized.dispose();
            if (arrayList.isEmpty()) {
                return;
            }
            lambda$markMessagesAsDeleted$209(clientUserId, arrayList, true, 0, 0);
            updateDialogsWithDeletedMessages(clientUserId, -clientUserId, arrayList, null, false);
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda209
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesStorage.this.lambda$deleteSavedDialog$52(clientUserId, arrayList);
                }
            });
        } catch (Exception e2) {
            e = e2;
            sQLiteCursor = queryFinalized;
            checkSQLException(e);
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
        } catch (Throwable th2) {
            th = th2;
            sQLiteCursor = queryFinalized;
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
            throw th;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$deleteStoryPushMessage$39(long j) {
        try {
            this.database.executeFast("DELETE FROM story_pushes WHERE uid = " + j).stepThis().dispose();
        } catch (Exception e) {
            checkSQLException(e);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$deleteUserChatHistory$80(ArrayList arrayList, long j, ArrayList arrayList2) {
        getFileLoader().cancelLoadFiles(arrayList);
        getMessagesController().markDialogMessageAsDeleted(j, arrayList2);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$deleteUserChatHistory$81(ArrayList arrayList, long j) {
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.messagesDeleted, arrayList, Long.valueOf(DialogObject.isChatDialog(j) ? -j : 0L), Boolean.FALSE);
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Code restructure failed: missing block: B:48:0x0077, code lost:
    
        if (r2.id != 1) goto L25;
     */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:34:0x00c7  */
    /* JADX WARN: Removed duplicated region for block: B:38:0x00e4 A[Catch: all -> 0x00ed, Exception -> 0x00f0, TRY_LEAVE, TryCatch #7 {Exception -> 0x00f0, all -> 0x00ed, blocks: (B:3:0x0004, B:32:0x00a4, B:36:0x00cd, B:38:0x00e4), top: B:2:0x0004 }] */
    /* JADX WARN: Removed duplicated region for block: B:42:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:43:0x00ca  */
    /* JADX WARN: Removed duplicated region for block: B:59:0x0101  */
    /* JADX WARN: Type inference failed for: r13v0 */
    /* JADX WARN: Type inference failed for: r13v1, types: [boolean, int] */
    /* JADX WARN: Type inference failed for: r13v6 */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$deleteUserChatHistory$82(final long j, long j2) {
        SQLiteCursor sQLiteCursor;
        ArrayList<Pair<Long, Integer>> arrayList;
        boolean z;
        try {
            final ArrayList<Integer> arrayList2 = new ArrayList<>();
            ?? r13 = 0;
            SQLiteCursor queryFinalized = this.database.queryFinalized("SELECT data FROM messages_v2 WHERE uid = " + j, new Object[0]);
            try {
                try {
                    ArrayList<File> arrayList3 = new ArrayList<>();
                    final ArrayList<String> arrayList4 = new ArrayList<>();
                    ArrayList<Pair<Long, Integer>> arrayList5 = new ArrayList<>();
                    while (queryFinalized.next()) {
                        try {
                            NativeByteBuffer byteBufferValue = queryFinalized.byteBufferValue(r13);
                            if (byteBufferValue != 0) {
                                TLRPC.Message TLdeserialize = TLRPC.Message.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(r13), r13);
                                if (TLdeserialize != null) {
                                    TLdeserialize.readAttachPath(byteBufferValue, getUserConfig().clientUserId);
                                    if (UserObject.isReplyUser(j)) {
                                        if (MessageObject.getPeerId(TLdeserialize.fwd_from.from_id) != j2) {
                                        }
                                        arrayList2.add(Integer.valueOf(TLdeserialize.id));
                                        z = true;
                                        arrayList = arrayList5;
                                        try {
                                            addFilesToDelete(TLdeserialize, arrayList3, arrayList5, arrayList4, false);
                                            byteBufferValue.reuse();
                                            arrayList5 = arrayList;
                                        } catch (Exception e) {
                                            e = e;
                                            checkSQLException(e);
                                            queryFinalized.dispose();
                                            deleteFromDownloadQueue(arrayList, z);
                                            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda137
                                                @Override // java.lang.Runnable
                                                public final void run() {
                                                    MessagesStorage.this.lambda$deleteUserChatHistory$80(arrayList4, j, arrayList2);
                                                }
                                            });
                                            lambda$markMessagesAsDeleted$209(j, arrayList2, false, 0, 0);
                                            lambda$updateDialogsWithDeletedMessages$208(j, !DialogObject.isChatDialog(j) ? -j : 0L, arrayList2, null);
                                            getFileLoader().deleteFiles(arrayList3, 0);
                                            if (arrayList2.isEmpty()) {
                                            }
                                        }
                                    }
                                    if (MessageObject.getFromChatId(TLdeserialize) == j2) {
                                    }
                                }
                                arrayList = arrayList5;
                                z = true;
                                byteBufferValue.reuse();
                                arrayList5 = arrayList;
                            }
                            r13 = 0;
                        } catch (Exception e2) {
                            e = e2;
                            arrayList = arrayList5;
                            z = true;
                        }
                    }
                    arrayList = arrayList5;
                    z = true;
                    queryFinalized.dispose();
                    deleteFromDownloadQueue(arrayList, z);
                    AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda137
                        @Override // java.lang.Runnable
                        public final void run() {
                            MessagesStorage.this.lambda$deleteUserChatHistory$80(arrayList4, j, arrayList2);
                        }
                    });
                    lambda$markMessagesAsDeleted$209(j, arrayList2, false, 0, 0);
                    lambda$updateDialogsWithDeletedMessages$208(j, !DialogObject.isChatDialog(j) ? -j : 0L, arrayList2, null);
                    getFileLoader().deleteFiles(arrayList3, 0);
                    if (arrayList2.isEmpty()) {
                        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda138
                            @Override // java.lang.Runnable
                            public final void run() {
                                MessagesStorage.this.lambda$deleteUserChatHistory$81(arrayList2, j);
                            }
                        });
                    }
                } catch (Throwable th) {
                    th = th;
                    sQLiteCursor = queryFinalized;
                    if (sQLiteCursor != null) {
                        sQLiteCursor.dispose();
                    }
                    throw th;
                }
            } catch (Exception e3) {
                e = e3;
                sQLiteCursor = queryFinalized;
                try {
                    checkSQLException(e);
                    if (sQLiteCursor != null) {
                        sQLiteCursor.dispose();
                    }
                } catch (Throwable th2) {
                    th = th2;
                    if (sQLiteCursor != null) {
                    }
                    throw th;
                }
            }
        } catch (Exception e4) {
            e = e4;
            sQLiteCursor = null;
        } catch (Throwable th3) {
            th = th3;
            sQLiteCursor = null;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$deleteWallpaper$76(long j) {
        try {
            this.database.executeFast("DELETE FROM wallpapers2 WHERE uid = " + j).stepThis().dispose();
        } catch (Exception e) {
            checkSQLException(e);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$emptyMessagesMedia$91(ArrayList arrayList) {
        for (int i = 0; i < arrayList.size(); i++) {
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.updateMessageMedia, arrayList.get(i));
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$emptyMessagesMedia$92(ArrayList arrayList) {
        getFileLoader().cancelLoadFiles(arrayList);
    }

    private /* synthetic */ void lambda$emptyMessagesMedia$93(ArrayList arrayList) {
        if (getMessagesController().getSavedMessagesController().updateSavedDialogs(arrayList)) {
            getMessagesController().getSavedMessagesController().update();
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:105:0x026c  */
    /* JADX WARN: Removed duplicated region for block: B:110:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:114:0x0278  */
    /* JADX WARN: Removed duplicated region for block: B:116:0x027d  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$emptyMessagesMedia$94(ArrayList arrayList, long j) {
        SQLitePreparedStatement sQLitePreparedStatement;
        final MessagesStorage messagesStorage;
        SQLiteCursor sQLiteCursor;
        NativeByteBuffer nativeByteBuffer;
        NativeByteBuffer nativeByteBuffer2;
        MessagesStorage messagesStorage2 = this;
        boolean z = false;
        int i = 2;
        int i2 = 1;
        try {
            ArrayList<File> arrayList2 = new ArrayList<>();
            final ArrayList<String> arrayList3 = new ArrayList<>();
            ArrayList<Pair<Long, Integer>> arrayList4 = new ArrayList<>();
            final ArrayList arrayList5 = new ArrayList();
            SQLiteCursor queryFinalized = messagesStorage2.database.queryFinalized(String.format(Locale.US, "SELECT data, mid, date, uid, custom_params FROM messages_v2 WHERE mid IN (%s) AND uid = %d", TextUtils.join(",", arrayList), Long.valueOf(j)), new Object[0]);
            while (queryFinalized.next()) {
                try {
                    NativeByteBuffer byteBufferValue = queryFinalized.byteBufferValue(z ? 1 : 0);
                    if (byteBufferValue != null) {
                        TLRPC.Message TLdeserialize = TLRPC.Message.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(z), z);
                        TLdeserialize.readAttachPath(byteBufferValue, getUserConfig().clientUserId);
                        byteBufferValue.reuse();
                        if (TLdeserialize.media != null) {
                            if (addFilesToDelete(TLdeserialize, arrayList2, arrayList4, arrayList3, true)) {
                                TLRPC.MessageMedia messageMedia = TLdeserialize.media;
                                if (messageMedia.document != null) {
                                    messageMedia.document = new TLRPC.TL_documentEmpty();
                                } else if (messageMedia.photo != null) {
                                    messageMedia.photo = new TLRPC.TL_photoEmpty();
                                }
                                TLdeserialize.media.flags &= -2;
                                TLdeserialize.id = queryFinalized.intValue(1);
                                TLdeserialize.date = queryFinalized.intValue(2);
                                TLdeserialize.dialog_id = queryFinalized.longValue(3);
                                NativeByteBuffer byteBufferValue2 = queryFinalized.byteBufferValue(4);
                                if (byteBufferValue2 != null) {
                                    MessageCustomParamsHelper.readLocalParams(TLdeserialize, byteBufferValue2);
                                    byteBufferValue2.reuse();
                                }
                                arrayList5.add(TLdeserialize);
                            }
                            z = false;
                        }
                    }
                } catch (Exception e) {
                    e = e;
                    messagesStorage = messagesStorage2;
                    sQLiteCursor = queryFinalized;
                    sQLitePreparedStatement = null;
                } catch (Throwable th) {
                    th = th;
                    sQLiteCursor = queryFinalized;
                    sQLitePreparedStatement = null;
                }
            }
            int i3 = 3;
            queryFinalized.dispose();
            messagesStorage2.deleteFromDownloadQueue(arrayList4, true);
            if (arrayList5.isEmpty()) {
                messagesStorage = messagesStorage2;
                sQLitePreparedStatement = null;
            } else {
                sQLitePreparedStatement = messagesStorage2.database.executeFast("REPLACE INTO messages_v2 VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 0, ?, ?, ?)");
                int i4 = 0;
                while (i4 < arrayList5.size()) {
                    try {
                        try {
                            TLRPC.Message message = (TLRPC.Message) arrayList5.get(i4);
                            MessageObject.normalizeFlags(message);
                            NativeByteBuffer nativeByteBuffer3 = new NativeByteBuffer(message.getObjectSize());
                            message.serializeToStream(nativeByteBuffer3);
                            sQLitePreparedStatement.requery();
                            sQLitePreparedStatement.bindInteger(i2, message.id);
                            sQLitePreparedStatement.bindLong(i, message.dialog_id);
                            sQLitePreparedStatement.bindInteger(i3, MessageObject.getUnreadFlags(message));
                            sQLitePreparedStatement.bindInteger(4, message.send_state);
                            sQLitePreparedStatement.bindInteger(5, message.date);
                            sQLitePreparedStatement.bindByteBuffer(6, nativeByteBuffer3);
                            sQLitePreparedStatement.bindInteger(7, (MessageObject.isOut(message) || message.from_scheduled) ? 1 : 0);
                            sQLitePreparedStatement.bindInteger(8, message.ttl);
                            if ((message.flags & 1024) != 0) {
                                sQLitePreparedStatement.bindInteger(9, message.views);
                            } else {
                                sQLitePreparedStatement.bindInteger(9, messagesStorage2.getMessageMediaType(message));
                            }
                            if (message.replyStory != null) {
                                nativeByteBuffer = new NativeByteBuffer(message.replyStory.getObjectSize());
                                message.replyStory.serializeToStream(nativeByteBuffer);
                                sQLitePreparedStatement.bindByteBuffer(10, nativeByteBuffer);
                            } else {
                                sQLitePreparedStatement.bindNull(10);
                                nativeByteBuffer = null;
                            }
                            int i5 = message.stickerVerified;
                            sQLitePreparedStatement.bindInteger(11, i5 == 0 ? 1 : i5 == i ? 2 : 0);
                            sQLitePreparedStatement.bindInteger(12, message.mentioned ? 1 : 0);
                            sQLitePreparedStatement.bindInteger(13, message.forwards);
                            if (message.replies != null) {
                                nativeByteBuffer2 = new NativeByteBuffer(message.replies.getObjectSize());
                                message.replies.serializeToStream(nativeByteBuffer2);
                                sQLitePreparedStatement.bindByteBuffer(14, nativeByteBuffer2);
                            } else {
                                sQLitePreparedStatement.bindNull(14);
                                nativeByteBuffer2 = null;
                            }
                            TLRPC.MessageReplyHeader messageReplyHeader = message.reply_to;
                            if (messageReplyHeader != null) {
                                int i6 = messageReplyHeader.reply_to_top_id;
                                if (i6 == 0) {
                                    i6 = messageReplyHeader.reply_to_msg_id;
                                }
                                sQLitePreparedStatement.bindInteger(15, i6);
                            } else {
                                sQLitePreparedStatement.bindInteger(15, 0);
                            }
                            sQLitePreparedStatement.bindLong(16, MessageObject.getChannelId(message));
                            NativeByteBuffer writeLocalParams = MessageCustomParamsHelper.writeLocalParams(message);
                            if (writeLocalParams != null) {
                                sQLitePreparedStatement.bindByteBuffer(16, writeLocalParams);
                            } else {
                                sQLitePreparedStatement.bindNull(17);
                            }
                            NativeByteBuffer nativeByteBuffer4 = nativeByteBuffer;
                            if ((message.flags & 131072) != 0) {
                                sQLitePreparedStatement.bindLong(18, message.grouped_id);
                            } else {
                                sQLitePreparedStatement.bindNull(18);
                            }
                            TLRPC.MessageReplyHeader messageReplyHeader2 = message.reply_to;
                            if (messageReplyHeader2 != null) {
                                sQLitePreparedStatement.bindInteger(19, messageReplyHeader2.story_id);
                            } else {
                                sQLitePreparedStatement.bindInteger(19, 0);
                            }
                            sQLitePreparedStatement.step();
                            nativeByteBuffer3.reuse();
                            if (nativeByteBuffer2 != null) {
                                nativeByteBuffer2.reuse();
                            }
                            if (writeLocalParams != null) {
                                writeLocalParams.reuse();
                            }
                            if (nativeByteBuffer4 != null) {
                                nativeByteBuffer4.reuse();
                            }
                            i4++;
                            i3 = 3;
                            i = 2;
                            i2 = 1;
                            messagesStorage2 = this;
                        } catch (Exception e2) {
                            e = e2;
                            sQLiteCursor = null;
                            messagesStorage = this;
                            try {
                                messagesStorage.checkSQLException(e);
                                if (sQLiteCursor != null) {
                                    sQLiteCursor.dispose();
                                }
                                if (sQLitePreparedStatement == null) {
                                    return;
                                }
                                sQLitePreparedStatement.dispose();
                            } catch (Throwable th2) {
                                th = th2;
                                if (sQLiteCursor != null) {
                                    sQLiteCursor.dispose();
                                }
                                if (sQLitePreparedStatement != null) {
                                    sQLitePreparedStatement.dispose();
                                }
                                throw th;
                            }
                        } catch (Throwable th3) {
                            th = th3;
                            sQLiteCursor = null;
                            if (sQLiteCursor != null) {
                            }
                            if (sQLitePreparedStatement != null) {
                            }
                            throw th;
                        }
                    } catch (Exception e3) {
                        e = e3;
                        messagesStorage = messagesStorage2;
                    } catch (Throwable th4) {
                        th = th4;
                    }
                }
                if (sQLitePreparedStatement != null) {
                    sQLitePreparedStatement.dispose();
                    sQLitePreparedStatement = null;
                }
                try {
                    messagesStorage = this;
                    try {
                        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda142
                            @Override // java.lang.Runnable
                            public final void run() {
                                MessagesStorage.this.lambda$emptyMessagesMedia$91(arrayList5);
                            }
                        });
                    } catch (Exception e4) {
                        e = e4;
                        sQLiteCursor = null;
                        messagesStorage.checkSQLException(e);
                        if (sQLiteCursor != null) {
                        }
                        if (sQLitePreparedStatement == null) {
                        }
                        sQLitePreparedStatement.dispose();
                    } catch (Throwable th5) {
                        th = th5;
                        sQLiteCursor = null;
                        if (sQLiteCursor != null) {
                        }
                        if (sQLitePreparedStatement != null) {
                        }
                        throw th;
                    }
                } catch (Exception e5) {
                    e = e5;
                    messagesStorage = this;
                    sQLiteCursor = null;
                    messagesStorage.checkSQLException(e);
                    if (sQLiteCursor != null) {
                    }
                    if (sQLitePreparedStatement == null) {
                    }
                    sQLitePreparedStatement.dispose();
                } catch (Throwable th6) {
                    th = th6;
                    sQLiteCursor = null;
                    if (sQLiteCursor != null) {
                    }
                    if (sQLitePreparedStatement != null) {
                    }
                    throw th;
                }
            }
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda143
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesStorage.this.lambda$emptyMessagesMedia$92(arrayList3);
                }
            });
            getFileLoader().deleteFiles(arrayList2, 0);
            if (sQLitePreparedStatement == null) {
                return;
            }
        } catch (Exception e6) {
            e = e6;
            messagesStorage = messagesStorage2;
            sQLitePreparedStatement = null;
        } catch (Throwable th7) {
            th = th7;
            sQLitePreparedStatement = null;
        }
        sQLitePreparedStatement.dispose();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$fixNotificationSettings$9() {
        try {
            LongSparseArray longSparseArray = new LongSparseArray();
            Map<String, ?> all = MessagesController.getNotificationsSettings(this.currentAccount).getAll();
            for (Map.Entry<String, ?> entry : all.entrySet()) {
                String key = entry.getKey();
                if (key.startsWith(NotificationsSettingsFacade.PROPERTY_NOTIFY)) {
                    Integer num = (Integer) entry.getValue();
                    if (num.intValue() != 2 && num.intValue() != 3) {
                    }
                    String replace = key.replace(NotificationsSettingsFacade.PROPERTY_NOTIFY, "");
                    long j = 1;
                    if (num.intValue() != 2) {
                        if (((Integer) all.get(NotificationsSettingsFacade.PROPERTY_NOTIFY_UNTIL + replace)) != null) {
                            j = 1 | (r4.intValue() << 32);
                        }
                    }
                    try {
                        longSparseArray.put(Long.parseLong(replace), Long.valueOf(j));
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            }
            try {
                this.database.beginTransaction();
                SQLitePreparedStatement executeFast = this.database.executeFast("REPLACE INTO dialog_settings VALUES(?, ?)");
                for (int i = 0; i < longSparseArray.size(); i++) {
                    executeFast.requery();
                    executeFast.bindLong(1, longSparseArray.keyAt(i));
                    executeFast.bindLong(2, ((Long) longSparseArray.valueAt(i)).longValue());
                    executeFast.step();
                }
                executeFast.dispose();
                this.database.commitTransaction();
            } catch (Exception e2) {
                checkSQLException(e2);
            }
        } catch (Throwable th) {
            checkSQLException(th);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$fullReset$59() {
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.onDatabaseReset, new Object[0]);
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.didClearDatabase, new Object[0]);
        getMessagesController().getSavedMessagesController().cleanup();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$fullReset$60() {
        cleanupInternal(true);
        clearLoadingDialogsOffsets();
        openDatabase(1);
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda95
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$fullReset$59();
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:22:0x0081  */
    /* JADX WARN: Removed duplicated region for block: B:24:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:46:0x008a  */
    /* JADX WARN: Type inference failed for: r6v13 */
    /* JADX WARN: Type inference failed for: r6v14 */
    /* JADX WARN: Type inference failed for: r6v5, types: [org.telegram.SQLite.SQLiteCursor] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$getBotCache$121(int i, String str, RequestDelegate requestDelegate) {
        NativeByteBuffer byteBufferValue;
        TLObject tLObject = null;
        try {
            try {
                this.database.executeFast("DELETE FROM botcache WHERE date < " + i).stepThis().dispose();
            } catch (Throwable th) {
                th = th;
            }
        } catch (Exception e) {
            e = e;
        } catch (Throwable th2) {
            th = th2;
        }
        try {
            i = this.database.queryFinalized("SELECT data FROM botcache WHERE id = ?", str);
            try {
                try {
                    if (i.next()) {
                        try {
                            byteBufferValue = i.byteBufferValue(0);
                        } catch (Exception e2) {
                            e = e2;
                            tLObject = null;
                        }
                        if (byteBufferValue != null) {
                            int readInt32 = byteBufferValue.readInt32(false);
                            tLObject = readInt32 == 911761060 ? TLRPC.TL_messages_botCallbackAnswer.TLdeserialize(byteBufferValue, readInt32, false) : TLRPC.messages_BotResults.TLdeserialize(byteBufferValue, readInt32, false);
                            try {
                                byteBufferValue.reuse();
                            } catch (Exception e3) {
                                e = e3;
                                try {
                                    checkSQLException(e);
                                    i.dispose();
                                    requestDelegate.run(tLObject, null);
                                } catch (Exception e4) {
                                    e = e4;
                                    i = i;
                                    checkSQLException(e);
                                    requestDelegate.run(tLObject, null);
                                    if (i == 0) {
                                        i.dispose();
                                        return;
                                    }
                                    return;
                                }
                            }
                            i.dispose();
                            requestDelegate.run(tLObject, null);
                        }
                    }
                    tLObject = null;
                    i.dispose();
                    requestDelegate.run(tLObject, null);
                } catch (Throwable th3) {
                    th = th3;
                    tLObject = null;
                    requestDelegate.run(tLObject, null);
                    if (i != 0) {
                        i.dispose();
                    }
                    throw th;
                }
            } catch (Exception e5) {
                e = e5;
                tLObject = null;
                i = i;
            }
        } catch (Exception e6) {
            e = e6;
            i = 0;
            tLObject = null;
            checkSQLException(e);
            requestDelegate.run(tLObject, null);
            if (i == 0) {
            }
        } catch (Throwable th4) {
            th = th4;
            i = 0;
            tLObject = null;
            requestDelegate.run(tLObject, null);
            if (i != 0) {
            }
            throw th;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Code restructure failed: missing block: B:133:0x013c, code lost:
    
        if (r13 != null) goto L71;
     */
    /* JADX WARN: Removed duplicated region for block: B:119:0x0169 A[Catch: all -> 0x0163, Exception -> 0x0166, TryCatch #5 {Exception -> 0x0166, blocks: (B:79:0x0148, B:81:0x0174, B:83:0x017a, B:85:0x0186, B:87:0x01a8, B:88:0x01aa, B:90:0x01ae, B:91:0x01b0, B:92:0x01b3, B:95:0x01ba, B:98:0x01c6, B:100:0x01cc, B:102:0x01d2, B:103:0x01d6, B:106:0x01f4, B:119:0x0169), top: B:77:0x0146, outer: #2 }] */
    /* JADX WARN: Removed duplicated region for block: B:145:0x0134  */
    /* JADX WARN: Removed duplicated region for block: B:64:0x00fd A[Catch: all -> 0x0131, TRY_LEAVE, TryCatch #1 {all -> 0x0131, blocks: (B:62:0x00ed, B:64:0x00fd), top: B:61:0x00ed }] */
    /* JADX WARN: Removed duplicated region for block: B:79:0x0148 A[Catch: all -> 0x0163, Exception -> 0x0166, TRY_ENTER, TryCatch #5 {Exception -> 0x0166, blocks: (B:79:0x0148, B:81:0x0174, B:83:0x017a, B:85:0x0186, B:87:0x01a8, B:88:0x01aa, B:90:0x01ae, B:91:0x01b0, B:92:0x01b3, B:95:0x01ba, B:98:0x01c6, B:100:0x01cc, B:102:0x01d2, B:103:0x01d6, B:106:0x01f4, B:119:0x0169), top: B:77:0x0146, outer: #2 }] */
    /* JADX WARN: Removed duplicated region for block: B:83:0x017a A[Catch: all -> 0x0163, Exception -> 0x0166, TryCatch #5 {Exception -> 0x0166, blocks: (B:79:0x0148, B:81:0x0174, B:83:0x017a, B:85:0x0186, B:87:0x01a8, B:88:0x01aa, B:90:0x01ae, B:91:0x01b0, B:92:0x01b3, B:95:0x01ba, B:98:0x01c6, B:100:0x01cc, B:102:0x01d2, B:103:0x01d6, B:106:0x01f4, B:119:0x0169), top: B:77:0x0146, outer: #2 }] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$getCachedPhoneBook$144(boolean z) {
        SQLiteCursor sQLiteCursor;
        int i;
        int i2;
        int i3;
        HashMap<String, ContactsController.Contact> hashMap;
        SQLiteCursor queryFinalized;
        SQLiteCursor queryFinalized2;
        boolean next;
        int i4 = 6;
        try {
            queryFinalized2 = this.database.queryFinalized("SELECT name FROM sqlite_master WHERE type='table' AND name='user_contacts_v6'", new Object[0]);
            try {
                next = queryFinalized2.next();
                queryFinalized2.dispose();
            } catch (Throwable th) {
                th = th;
                sQLiteCursor = queryFinalized2;
            }
        } catch (Throwable th2) {
            th = th2;
            sQLiteCursor = null;
        }
        if (next) {
            queryFinalized2 = this.database.queryFinalized("SELECT COUNT(uid) FROM user_contacts_v6 WHERE 1", new Object[0]);
            int min = queryFinalized2.next() ? Math.min(5000, queryFinalized2.intValue(0)) : 16;
            queryFinalized2.dispose();
            SparseArray<ContactsController.Contact> sparseArray = new SparseArray<>(min);
            SQLiteCursor queryFinalized3 = this.database.queryFinalized("SELECT us.uid, us.fname, us.sname, up.phone, up.sphone, up.deleted, us.imported FROM user_contacts_v6 as us LEFT JOIN user_phones_v6 as up ON us.uid = up.uid WHERE 1", new Object[0]);
            while (queryFinalized3.next()) {
                try {
                    int intValue = queryFinalized3.intValue(0);
                    ContactsController.Contact contact = sparseArray.get(intValue);
                    if (contact == null) {
                        contact = new ContactsController.Contact();
                        contact.first_name = queryFinalized3.stringValue(1);
                        contact.last_name = queryFinalized3.stringValue(2);
                        contact.imported = queryFinalized3.intValue(i4);
                        if (contact.first_name == null) {
                            contact.first_name = "";
                        }
                        if (contact.last_name == null) {
                            contact.last_name = "";
                        }
                        contact.contact_id = intValue;
                        sparseArray.put(intValue, contact);
                    }
                    String stringValue = queryFinalized3.stringValue(3);
                    if (stringValue != null) {
                        contact.phones.add(stringValue);
                        String stringValue2 = queryFinalized3.stringValue(4);
                        if (stringValue2 != null) {
                            if (stringValue2.length() == 8 && stringValue.length() != 8) {
                                stringValue2 = PhoneFormat.stripExceptNumbers(stringValue);
                            }
                            contact.shortPhones.add(stringValue2);
                            contact.phoneDeleted.add(Integer.valueOf(queryFinalized3.intValue(5)));
                            contact.phoneTypes.add("");
                            if (sparseArray.size() == 5000) {
                                break;
                            } else {
                                i4 = 6;
                            }
                        }
                    }
                } catch (Throwable th3) {
                    th = th3;
                    sQLiteCursor = queryFinalized3;
                    try {
                        checkSQLException(th);
                        if (sQLiteCursor != null) {
                            sQLiteCursor.dispose();
                        }
                        try {
                            sQLiteCursor = this.database.queryFinalized("SELECT COUNT(key) FROM user_contacts_v7 WHERE 1", new Object[0]);
                            if (sQLiteCursor.next()) {
                            }
                        } catch (Throwable th4) {
                            th = th4;
                            i = 0;
                        }
                        sQLiteCursor.dispose();
                        hashMap = new HashMap<>(i2);
                        try {
                            try {
                                if (i3 == 0) {
                                }
                                sQLiteCursor = queryFinalized;
                                while (sQLiteCursor.next()) {
                                }
                                sQLiteCursor.dispose();
                            } catch (Throwable th5) {
                            }
                        } catch (Exception e) {
                            hashMap.clear();
                            checkSQLException(e);
                            if (sQLiteCursor != null) {
                                sQLiteCursor.dispose();
                            }
                        }
                        getContactsController().performSyncPhoneBook(hashMap, true, true, false, false, !z, false);
                    } finally {
                        if (sQLiteCursor == null) {
                            throw th;
                        }
                        sQLiteCursor.dispose();
                    }
                }
            }
            queryFinalized3.dispose();
            getContactsController().migratePhoneBookToV7(sparseArray);
            return;
        }
        sQLiteCursor = null;
        sQLiteCursor = this.database.queryFinalized("SELECT COUNT(key) FROM user_contacts_v7 WHERE 1", new Object[0]);
        if (sQLiteCursor.next()) {
            i = 0;
            i2 = 16;
            i3 = 0;
        } else {
            i = sQLiteCursor.intValue(0);
            try {
                i2 = Math.min(5000, i);
                i3 = i > 5000 ? i - 5000 : 0;
                try {
                    if (BuildVars.LOGS_ENABLED) {
                        FileLog.d(this.currentAccount + " current cached contacts count = " + i);
                    }
                } catch (Throwable th6) {
                    th = th6;
                    try {
                        checkSQLException(th);
                    } finally {
                        if (sQLiteCursor == null) {
                            throw th5;
                        }
                        sQLiteCursor.dispose();
                    }
                }
            } catch (Throwable th7) {
                th = th7;
                i2 = 16;
                i3 = 0;
                checkSQLException(th);
            }
        }
        sQLiteCursor.dispose();
        hashMap = new HashMap<>(i2);
        if (i3 == 0) {
            queryFinalized = this.database.queryFinalized("SELECT us.key, us.uid, us.fname, us.sname, up.phone, up.sphone, up.deleted, us.imported FROM user_contacts_v7 as us LEFT JOIN user_phones_v7 as up ON us.key = up.key WHERE 1 LIMIT 0," + i, new Object[0]);
        } else {
            queryFinalized = this.database.queryFinalized("SELECT us.key, us.uid, us.fname, us.sname, up.phone, up.sphone, up.deleted, us.imported FROM user_contacts_v7 as us LEFT JOIN user_phones_v7 as up ON us.key = up.key WHERE 1", new Object[0]);
        }
        sQLiteCursor = queryFinalized;
        while (sQLiteCursor.next()) {
            String stringValue3 = sQLiteCursor.stringValue(0);
            ContactsController.Contact contact2 = hashMap.get(stringValue3);
            if (contact2 == null) {
                contact2 = new ContactsController.Contact();
                contact2.contact_id = sQLiteCursor.intValue(1);
                contact2.first_name = sQLiteCursor.stringValue(2);
                contact2.last_name = sQLiteCursor.stringValue(3);
                contact2.imported = sQLiteCursor.intValue(7);
                if (contact2.first_name == null) {
                    contact2.first_name = "";
                }
                if (contact2.last_name == null) {
                    contact2.last_name = "";
                }
                hashMap.put(stringValue3, contact2);
            }
            String stringValue4 = sQLiteCursor.stringValue(4);
            if (stringValue4 != null) {
                contact2.phones.add(stringValue4);
                String stringValue5 = sQLiteCursor.stringValue(5);
                if (stringValue5 != null) {
                    if (stringValue5.length() == 8 && stringValue4.length() != 8) {
                        stringValue5 = PhoneFormat.stripExceptNumbers(stringValue4);
                    }
                    contact2.shortPhones.add(stringValue5);
                    contact2.phoneDeleted.add(Integer.valueOf(sQLiteCursor.intValue(6)));
                    contact2.phoneTypes.add("");
                    if (hashMap.size() == 5000) {
                        break;
                    }
                }
            }
        }
        sQLiteCursor.dispose();
        getContactsController().performSyncPhoneBook(hashMap, true, true, false, false, !z, false);
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Code restructure failed: missing block: B:18:0x0033, code lost:
    
        if (r0 == null) goto L23;
     */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$getChannelPtsSync$237(long j, Integer[] numArr, CountDownLatch countDownLatch) {
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                sQLiteCursor = this.database.queryFinalized("SELECT pts FROM dialogs WHERE did = " + (-j), new Object[0]);
                if (sQLiteCursor.next()) {
                    numArr[0] = Integer.valueOf(sQLiteCursor.intValue(0));
                }
            } catch (Exception e) {
                checkSQLException(e);
            }
            sQLiteCursor.dispose();
            try {
                countDownLatch.countDown();
            } catch (Exception e2) {
                checkSQLException(e2);
            }
        } catch (Throwable th) {
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
            throw th;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$getChatSync$239(TLRPC.Chat[] chatArr, long j, CountDownLatch countDownLatch) {
        chatArr[0] = getChat(j);
        countDownLatch.countDown();
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Not initialized variable reg: 4, insn: 0x0047: MOVE (r3 I:??[OBJECT, ARRAY]) = (r4 I:??[OBJECT, ARRAY]), block:B:31:0x0047 */
    /* JADX WARN: Removed duplicated region for block: B:33:0x0076  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$getContacts$145() {
        SQLiteCursor sQLiteCursor;
        Exception e;
        SQLiteCursor sQLiteCursor2;
        ArrayList<TLRPC.TL_contact> arrayList = new ArrayList<>();
        ArrayList<TLRPC.User> arrayList2 = new ArrayList<>();
        SQLiteCursor sQLiteCursor3 = null;
        try {
            try {
                sQLiteCursor = this.database.queryFinalized("SELECT * FROM contacts WHERE 1", new Object[0]);
                try {
                    ArrayList<Long> arrayList3 = new ArrayList<>();
                    while (sQLiteCursor.next()) {
                        long intValue = sQLiteCursor.intValue(0);
                        TLRPC.TL_contact tL_contact = new TLRPC.TL_contact();
                        tL_contact.user_id = intValue;
                        tL_contact.mutual = sQLiteCursor.intValue(1) == 1;
                        arrayList.add(tL_contact);
                        arrayList3.add(Long.valueOf(tL_contact.user_id));
                    }
                    sQLiteCursor.dispose();
                    if (!arrayList3.isEmpty()) {
                        getUsersInternal(arrayList3, arrayList2);
                    }
                } catch (Exception e2) {
                    e = e2;
                    arrayList.clear();
                    arrayList2.clear();
                    checkSQLException(e);
                    if (sQLiteCursor != null) {
                        sQLiteCursor.dispose();
                    }
                    getContactsController().processLoadedContacts(arrayList, arrayList2, 1);
                }
            } catch (Throwable th) {
                th = th;
                sQLiteCursor3 = sQLiteCursor2;
                if (sQLiteCursor3 != null) {
                    sQLiteCursor3.dispose();
                }
                throw th;
            }
        } catch (Exception e3) {
            sQLiteCursor = null;
            e = e3;
        } catch (Throwable th2) {
            th = th2;
            if (sQLiteCursor3 != null) {
            }
            throw th;
        }
        getContactsController().processLoadedContacts(arrayList, arrayList2, 1);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$getDialogFolderId$223(long j, final IntCallback intCallback) {
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                if (this.unknownDialogsIds.get(j) == null) {
                    sQLiteCursor = this.database.queryFinalized("SELECT folder_id FROM dialogs WHERE did = ?", Long.valueOf(j));
                    r3 = sQLiteCursor.next() ? sQLiteCursor.intValue(0) : -1;
                    sQLiteCursor.dispose();
                }
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda200
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesStorage.IntCallback.this.run(r2);
                    }
                });
                if (sQLiteCursor == null) {
                    return;
                }
            } catch (Exception e) {
                checkSQLException(e);
                if (sQLiteCursor == null) {
                    return;
                }
            }
            sQLiteCursor.dispose();
        } catch (Throwable th) {
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
            throw th;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$getDialogMaxMessageId$234(IntCallback intCallback, int[] iArr) {
        intCallback.run(iArr[0]);
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Code restructure failed: missing block: B:13:0x0031, code lost:
    
        if (r1 == null) goto L13;
     */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$getDialogMaxMessageId$235(long j, final IntCallback intCallback) {
        final int[] iArr = new int[1];
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                sQLiteCursor = this.database.queryFinalized("SELECT MAX(mid) FROM messages_v2 WHERE uid = " + j, new Object[0]);
                if (sQLiteCursor.next()) {
                    iArr[0] = sQLiteCursor.intValue(0);
                }
            } catch (Exception e) {
                checkSQLException(e);
            }
            sQLiteCursor.dispose();
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda64
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesStorage.lambda$getDialogMaxMessageId$234(MessagesStorage.IntCallback.this, iArr);
                }
            });
        } catch (Throwable th) {
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
            throw th;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Code restructure failed: missing block: B:22:0x006d, code lost:
    
        if (r1 == null) goto L21;
     */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$getDialogReadMax$236(boolean z, long j, Integer[] numArr, CountDownLatch countDownLatch) {
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                if (z) {
                    sQLiteCursor = this.database.queryFinalized("SELECT outbox_max FROM dialogs WHERE did = " + j, new Object[0]);
                    if (sQLiteCursor.next()) {
                        numArr[0] = Integer.valueOf(sQLiteCursor.intValue(0));
                    }
                } else {
                    sQLiteCursor = this.database.queryFinalized("SELECT last_mid, inbox_max FROM dialogs WHERE did = " + j, new Object[0]);
                    if (sQLiteCursor.next()) {
                        int intValue = sQLiteCursor.intValue(0);
                        int intValue2 = sQLiteCursor.intValue(1);
                        if (intValue2 > intValue) {
                            numArr[0] = 0;
                        } else {
                            numArr[0] = Integer.valueOf(intValue2);
                        }
                    }
                }
            } catch (Exception e) {
                checkSQLException(e);
            }
            sQLiteCursor.dispose();
            countDownLatch.countDown();
        } catch (Throwable th) {
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
            throw th;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$getDialogs$219(LongSparseArray longSparseArray) {
        MediaDataController mediaDataController = getMediaDataController();
        mediaDataController.clearDraftsFolderIds();
        if (longSparseArray != null) {
            int size = longSparseArray.size();
            for (int i = 0; i < size; i++) {
                mediaDataController.setDraftFolderId(longSparseArray.keyAt(i), ((Integer) longSparseArray.valueAt(i)).intValue());
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Can't wrap try/catch for region: R(13:0|1|(6:2|3|4|(24:9|10|(1:12)(1:369)|13|14|16|17|18|19|20|21|(36:25|26|27|(5:185|186|(2:188|(1:190)(1:191))|192|(3:194|195|97)(1:(1:197)))(1:29)|30|(3:32|33|(28:35|36|(1:38)(1:182)|39|(1:41)(1:181)|42|(1:44)(1:180)|45|46|(3:48|49|(1:51))|52|53|54|(1:56)|57|58|(1:60)|61|62|(2:64|(10:66|(1:68)|69|70|71|72|(11:76|(3:166|167|(1:169))|78|79|(3:146|147|(12:149|150|151|152|153|154|(1:156)|82|83|(4:136|137|138|86)|85|86))|81|82|83|(0)|85|86)|174|85|86)(1:178))(1:179)|87|(3:110|111|(1:113))|89|(2:91|(1:93)(4:98|95|96|97))(2:99|(3:101|(1:103)|104)(2:105|(2:107|(1:109))))|94|95|96|97))(1:184)|183|36|(0)(0)|39|(0)(0)|42|(0)(0)|45|46|(0)|52|53|54|(0)|57|58|(0)|61|62|(0)(0)|87|(0)|89|(0)(0)|94|95|96|97|22|23)|208|209|210|211|212|213|(11:215|(6:218|219|220|(2:222|223)(1:225)|224|216)|231|232|233|234|235|236|(7:239|(2:240|(4:242|(3:244|245|(1:249))(1:317)|247|248)(2:318|319))|(4:252|253|(11:255|256|(1:258)|259|260|261|262|(2:266|(7:276|277|(2:281|(6:283|284|285|286|288|(1:290)))|306|286|288|(0))(1:272))|273|274|275)(2:312|313)|296)|297|298|275|237)|320|321)(1:334)|322|323|5|6|7)|375|376)|(14:377|378|379|(7:452|453|(5:456|(2:460|(4:462|(2:464|465)|466|(1:468))(4:469|(2:471|465)|466|(0)))|458|459|454)|472|473|(9:475|476|477|478|479|(3:483|480|481)|484|485|486)(1:495)|487)(1:381)|382|383|384|(5:439|440|441|442|443)(1:386)|387|388|(1:390)|391|(1:393)|394)|(5:396|(4:399|(4:402|(2:406|407)|408|400)|411|397)|412|413|(9:415|416|417|418|419|420|(1:422)|122|123))|436|417|418|419|420|(0)|122|123) */
    /* JADX WARN: Code restructure failed: missing block: B:170:0x024a, code lost:
    
        if ((r2 instanceof org.telegram.tgnet.TLRPC.TL_messageActionGameScore) == false) goto L98;
     */
    /* JADX WARN: Code restructure failed: missing block: B:424:0x072d, code lost:
    
        r0 = e;
     */
    /* JADX WARN: Code restructure failed: missing block: B:425:0x072e, code lost:
    
        r10 = r2;
     */
    /* JADX WARN: Code restructure failed: missing block: B:427:0x0729, code lost:
    
        r0 = th;
     */
    /* JADX WARN: Code restructure failed: missing block: B:428:0x072a, code lost:
    
        r11 = r2;
     */
    /* JADX WARN: Removed duplicated region for block: B:110:0x031c A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:121:0x0791  */
    /* JADX WARN: Removed duplicated region for block: B:125:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:130:0x079a  */
    /* JADX WARN: Removed duplicated region for block: B:132:? A[SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:136:0x02bc  */
    /* JADX WARN: Removed duplicated region for block: B:179:0x0306  */
    /* JADX WARN: Removed duplicated region for block: B:180:0x0183  */
    /* JADX WARN: Removed duplicated region for block: B:181:0x017a  */
    /* JADX WARN: Removed duplicated region for block: B:182:0x0162  */
    /* JADX WARN: Removed duplicated region for block: B:290:0x04fb A[Catch: all -> 0x00dc, Exception -> 0x04f4, TRY_LEAVE, TryCatch #3 {Exception -> 0x04f4, blocks: (B:285:0x04f0, B:286:0x04f7, B:290:0x04fb), top: B:284:0x04f0 }] */
    /* JADX WARN: Removed duplicated region for block: B:38:0x0160  */
    /* JADX WARN: Removed duplicated region for block: B:41:0x0178  */
    /* JADX WARN: Removed duplicated region for block: B:422:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:44:0x0181  */
    /* JADX WARN: Removed duplicated region for block: B:468:0x0609 A[Catch: all -> 0x05e6, Exception -> 0x05e8, TryCatch #49 {Exception -> 0x05e8, all -> 0x05e6, blocks: (B:453:0x05bf, B:454:0x05c5, B:456:0x05c8, B:459:0x0613, B:462:0x05d6, B:464:0x05e0, B:465:0x05fa, B:466:0x05fd, B:468:0x0609, B:469:0x05ea, B:471:0x05f5, B:473:0x0615, B:475:0x061b, B:479:0x0634, B:487:0x0672), top: B:452:0x05bf }] */
    /* JADX WARN: Removed duplicated region for block: B:48:0x019c  */
    /* JADX WARN: Removed duplicated region for block: B:56:0x01c3 A[Catch: all -> 0x00dc, Exception -> 0x00e3, TRY_ENTER, TRY_LEAVE, TryCatch #10 {Exception -> 0x00e3, blocks: (B:186:0x00ba, B:188:0x00c7, B:190:0x00cd, B:191:0x00ed, B:192:0x00fa, B:197:0x0104, B:33:0x0136, B:49:0x01a0, B:51:0x01a4, B:56:0x01c3, B:60:0x01e2, B:68:0x021f, B:258:0x048d), top: B:185:0x00ba }] */
    /* JADX WARN: Removed duplicated region for block: B:60:0x01e2 A[Catch: all -> 0x00dc, Exception -> 0x00e3, TRY_ENTER, TRY_LEAVE, TryCatch #10 {Exception -> 0x00e3, blocks: (B:186:0x00ba, B:188:0x00c7, B:190:0x00cd, B:191:0x00ed, B:192:0x00fa, B:197:0x0104, B:33:0x0136, B:49:0x01a0, B:51:0x01a4, B:56:0x01c3, B:60:0x01e2, B:68:0x021f, B:258:0x048d), top: B:185:0x00ba }] */
    /* JADX WARN: Removed duplicated region for block: B:64:0x01f0 A[Catch: all -> 0x02ea, Exception -> 0x02ee, TryCatch #54 {Exception -> 0x02ee, all -> 0x02ea, blocks: (B:27:0x00b0, B:30:0x0113, B:36:0x0144, B:39:0x0163, B:42:0x017b, B:45:0x0184, B:53:0x01ab, B:58:0x01d5, B:62:0x01ea, B:64:0x01f0, B:66:0x01fb, B:70:0x0222, B:29:0x010e), top: B:26:0x00b0 }] */
    /* JADX WARN: Removed duplicated region for block: B:91:0x032b A[Catch: all -> 0x02db, Exception -> 0x02e1, TryCatch #47 {Exception -> 0x02e1, all -> 0x02db, blocks: (B:87:0x0316, B:111:0x031c, B:113:0x0322, B:89:0x0325, B:91:0x032b, B:93:0x033b, B:99:0x0357, B:101:0x035f, B:103:0x0369, B:104:0x0370, B:105:0x037a, B:107:0x0382, B:109:0x038d, B:142:0x02d7, B:178:0x02f2, B:242:0x0437, B:244:0x0441), top: B:110:0x031c }] */
    /* JADX WARN: Removed duplicated region for block: B:99:0x0357 A[Catch: all -> 0x02db, Exception -> 0x02e1, TryCatch #47 {Exception -> 0x02e1, all -> 0x02db, blocks: (B:87:0x0316, B:111:0x031c, B:113:0x0322, B:89:0x0325, B:91:0x032b, B:93:0x033b, B:99:0x0357, B:101:0x035f, B:103:0x0369, B:104:0x0370, B:105:0x037a, B:107:0x0382, B:109:0x038d, B:142:0x02d7, B:178:0x02f2, B:242:0x0437, B:244:0x0441), top: B:110:0x031c }] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$getDialogs$220(int i, int i2, int i3, long[] jArr) {
        SQLiteCursor sQLiteCursor;
        MessagesStorage messagesStorage;
        ArrayList<TLRPC.EncryptedChat> arrayList;
        TLRPC.TL_messages_dialogs tL_messages_dialogs;
        Exception exc;
        SQLiteCursor sQLiteCursor2;
        Throwable th;
        SQLiteCursor sQLiteCursor3;
        ArrayList<Long> arrayList2;
        LongSparseArray longSparseArray;
        LongSparseArray longSparseArray2;
        SQLiteCursor sQLiteCursor4;
        ArrayList arrayList3;
        ArrayList arrayList4;
        ArrayList<Long> arrayList5;
        HashSet hashSet;
        ArrayList<TLRPC.EncryptedChat> arrayList6;
        final MessagesStorage messagesStorage2;
        final LongSparseArray longSparseArray3;
        Long valueOf;
        ArrayList<Long> arrayList7;
        ArrayList<TLRPC.EncryptedChat> arrayList8;
        ArrayList<TLRPC.UserFull> arrayList9;
        Integer num;
        int i4;
        int i5;
        ArrayList arrayList10;
        HashSet hashSet2;
        ArrayList arrayList11;
        MessagesStorage messagesStorage3;
        SQLiteCursor sQLiteCursor5;
        ArrayList arrayList12;
        ArrayList arrayList13;
        HashSet hashSet3;
        MessagesStorage messagesStorage4;
        HashSet hashSet4;
        TLRPC.Dialog dialog;
        NativeByteBuffer byteBufferValue;
        MessagesStorage messagesStorage5;
        TLRPC.Dialog dialog2;
        int i6;
        ArrayList arrayList14;
        int i7;
        int i8;
        long longValue;
        NativeByteBuffer byteBufferValue2;
        int i9;
        ArrayList arrayList15;
        LongSparseArray longSparseArray4;
        LongSparseArray longSparseArray5;
        ArrayList arrayList16;
        ArrayList<Long> arrayList17;
        ArrayList arrayList18;
        HashSet hashSet5;
        Exception exc2;
        MessagesStorage messagesStorage6 = this;
        TLRPC.TL_messages_dialogs tL_messages_dialogs2 = new TLRPC.TL_messages_dialogs();
        ArrayList<TLRPC.EncryptedChat> arrayList19 = new ArrayList<>();
        try {
            ArrayList<Long> arrayList20 = new ArrayList<>();
            HashSet hashSet6 = new HashSet();
            arrayList20.add(Long.valueOf(getUserConfig().getClientUserId()));
            arrayList2 = new ArrayList<>();
            ArrayList arrayList21 = new ArrayList();
            ArrayList arrayList22 = new ArrayList();
            ArrayList arrayList23 = new ArrayList();
            longSparseArray = new LongSparseArray();
            longSparseArray2 = new LongSparseArray();
            ArrayList arrayList24 = new ArrayList(2);
            arrayList24.add(Integer.valueOf(i));
            int i10 = 0;
            sQLiteCursor4 = null;
            while (i10 < arrayList24.size()) {
                try {
                    try {
                        try {
                            num = (Integer) arrayList24.get(i10);
                            num.intValue();
                            if (i10 == 0) {
                                i4 = i2;
                                i5 = i3;
                                arrayList6 = arrayList19;
                            } else {
                                arrayList6 = arrayList19;
                                i4 = 0;
                                i5 = 100;
                            }
                            try {
                                arrayList10 = new ArrayList();
                                hashSet2 = hashSet6;
                                arrayList11 = arrayList21;
                            } catch (Exception e) {
                                e = e;
                                messagesStorage2 = messagesStorage6;
                            }
                        } catch (Exception e2) {
                            e = e2;
                            messagesStorage2 = messagesStorage6;
                            arrayList6 = arrayList19;
                        }
                    } catch (Throwable th2) {
                        th = th2;
                        messagesStorage2 = messagesStorage6;
                    }
                } catch (Exception e3) {
                    e = e3;
                    messagesStorage = messagesStorage6;
                    arrayList = arrayList19;
                    tL_messages_dialogs = tL_messages_dialogs2;
                } catch (Throwable th3) {
                    th = th3;
                }
                try {
                    LongSparseArray longSparseArray6 = longSparseArray2;
                    LongSparseArray longSparseArray7 = longSparseArray;
                    try {
                        int i11 = 0;
                        SQLiteCursor queryFinalized = messagesStorage6.database.queryFinalized(String.format(Locale.US, "SELECT d.did, d.last_mid, d.unread_count, d.date, m.data, m.read_state, m.mid, m.send_state, s.flags, m.date, d.pts, d.inbox_max, d.outbox_max, m.replydata, d.pinned, d.unread_count_i, d.flags, d.folder_id, d.data, d.unread_reactions, d.last_mid_group, d.ttl_period FROM dialogs as d LEFT JOIN messages_v2 as m ON d.last_mid = m.mid AND d.did = m.uid AND d.last_mid_group IS NULL LEFT JOIN dialog_settings as s ON d.did = s.did WHERE d.folder_id = %d ORDER BY d.pinned DESC, d.date DESC LIMIT %d,%d", num, Integer.valueOf(i4), Integer.valueOf(i5)), new Object[0]);
                        while (queryFinalized.next()) {
                            try {
                                ArrayList<Long> arrayList25 = arrayList20;
                                try {
                                    long longValue2 = queryFinalized.longValue(i11);
                                    if (DialogObject.isFolderDialogId(longValue2)) {
                                        try {
                                            try {
                                                TLRPC.TL_dialogFolder tL_dialogFolder = new TLRPC.TL_dialogFolder();
                                                if (!queryFinalized.isNull(18)) {
                                                    NativeByteBuffer byteBufferValue3 = queryFinalized.byteBufferValue(18);
                                                    if (byteBufferValue3 != null) {
                                                        tL_dialogFolder.folder = TLRPC.TL_folder.TLdeserialize(byteBufferValue3, byteBufferValue3.readInt32(false), false);
                                                        byteBufferValue3.reuse();
                                                    } else {
                                                        TLRPC.TL_folder tL_folder = new TLRPC.TL_folder();
                                                        tL_dialogFolder.folder = tL_folder;
                                                        tL_folder.id = DialogObject.getFolderId(longValue2);
                                                    }
                                                }
                                                TLRPC.TL_folder tL_folder2 = tL_dialogFolder.folder;
                                                dialog2 = tL_dialogFolder;
                                                if (tL_folder2 == null) {
                                                    arrayList20 = arrayList25;
                                                    i11 = 0;
                                                } else if (i10 == 0) {
                                                    arrayList24.add(Integer.valueOf(tL_folder2.id));
                                                    dialog2 = tL_dialogFolder;
                                                }
                                            } catch (Exception e4) {
                                                exc = e4;
                                                sQLiteCursor = queryFinalized;
                                                tL_messages_dialogs = tL_messages_dialogs2;
                                                arrayList = arrayList6;
                                                messagesStorage = this;
                                                try {
                                                    tL_messages_dialogs.dialogs.clear();
                                                    tL_messages_dialogs.users.clear();
                                                    tL_messages_dialogs.chats.clear();
                                                    arrayList.clear();
                                                    messagesStorage.checkSQLException(exc);
                                                    getMessagesController().processLoadedDialogs(tL_messages_dialogs, arrayList, null, i, 0, 100, 1, true, false, true);
                                                    if (sQLiteCursor == null) {
                                                    }
                                                } catch (Throwable th4) {
                                                    th = th4;
                                                    th = th;
                                                    sQLiteCursor2 = sQLiteCursor;
                                                    if (sQLiteCursor2 != null) {
                                                    }
                                                }
                                            }
                                        } catch (Throwable th5) {
                                            th = th5;
                                            sQLiteCursor2 = queryFinalized;
                                            if (sQLiteCursor2 != null) {
                                            }
                                        }
                                    } else {
                                        dialog2 = new TLRPC.TL_dialog();
                                    }
                                    dialog2.id = longValue2;
                                    dialog2.top_message = queryFinalized.intValue(1);
                                    dialog2.unread_count = queryFinalized.intValue(2);
                                    dialog2.last_message_date = queryFinalized.intValue(3);
                                    int intValue = queryFinalized.intValue(10);
                                    dialog2.pts = intValue;
                                    if (intValue != 0) {
                                        i6 = i10;
                                        arrayList14 = arrayList23;
                                        if (!DialogObject.isUserDialog(dialog2.id)) {
                                            i7 = 1;
                                            dialog2.flags = i7;
                                            dialog2.read_inbox_max_id = queryFinalized.intValue(11);
                                            dialog2.read_outbox_max_id = queryFinalized.intValue(12);
                                            int intValue2 = queryFinalized.intValue(14);
                                            dialog2.pinnedNum = intValue2;
                                            dialog2.pinned = intValue2 == 0;
                                            dialog2.unread_mentions_count = queryFinalized.intValue(15);
                                            int intValue3 = queryFinalized.intValue(16);
                                            dialog2.unread_mark = (intValue3 & 1) == 0;
                                            dialog2.view_forum_as_messages = (intValue3 & 64) == 0;
                                            long longValue3 = queryFinalized.longValue(8);
                                            i8 = (int) longValue3;
                                            ArrayList arrayList26 = arrayList24;
                                            TLRPC.TL_peerNotifySettings tL_peerNotifySettings = new TLRPC.TL_peerNotifySettings();
                                            dialog2.notify_settings = tL_peerNotifySettings;
                                            if ((i8 & 1) != 0) {
                                                int i12 = (int) (longValue3 >> 32);
                                                tL_peerNotifySettings.mute_until = i12;
                                                if (i12 == 0) {
                                                    tL_peerNotifySettings.mute_until = ConnectionsManager.DEFAULT_DATACENTER_ID;
                                                }
                                            }
                                            dialog2.folder_id = queryFinalized.intValue(17);
                                            dialog2.unread_reactions_count = queryFinalized.intValue(19);
                                            longValue = queryFinalized.longValue(20);
                                            if (longValue != 0) {
                                                arrayList10.add(new Pair(Long.valueOf(longValue2), Long.valueOf(longValue)));
                                            }
                                            dialog2.ttl_period = queryFinalized.intValue(21);
                                            tL_messages_dialogs2.dialogs.add(dialog2);
                                            if (jArr != null) {
                                                arrayList22.add(Long.valueOf(longValue2));
                                            }
                                            byteBufferValue2 = queryFinalized.byteBufferValue(4);
                                            if (byteBufferValue2 == null) {
                                                TLRPC.Message TLdeserialize = TLRPC.Message.TLdeserialize(byteBufferValue2, byteBufferValue2.readInt32(false), false);
                                                if (TLdeserialize != null) {
                                                    ArrayList arrayList27 = arrayList22;
                                                    TLdeserialize.readAttachPath(byteBufferValue2, getUserConfig().clientUserId);
                                                    byteBufferValue2.reuse();
                                                    MessageObject.setUnreadFlags(TLdeserialize, queryFinalized.intValue(5));
                                                    TLdeserialize.id = queryFinalized.intValue(6);
                                                    int intValue4 = queryFinalized.intValue(9);
                                                    if (intValue4 != 0) {
                                                        dialog2.last_message_date = intValue4;
                                                    }
                                                    TLdeserialize.send_state = queryFinalized.intValue(7);
                                                    TLdeserialize.dialog_id = dialog2.id;
                                                    tL_messages_dialogs2.messages.add(TLdeserialize);
                                                    arrayList17 = arrayList25;
                                                    addUsersAndChatsFromMessage(TLdeserialize, arrayList17, arrayList2, arrayList14);
                                                    try {
                                                        TLRPC.MessageReplyHeader messageReplyHeader = TLdeserialize.reply_to;
                                                        if (messageReplyHeader != null && messageReplyHeader.reply_to_msg_id != 0) {
                                                            TLRPC.MessageAction messageAction = TLdeserialize.action;
                                                            if (!(messageAction instanceof TLRPC.TL_messageActionPinMessage)) {
                                                                try {
                                                                    if (!(messageAction instanceof TLRPC.TL_messageActionPaymentSent)) {
                                                                    }
                                                                } catch (Exception e5) {
                                                                    exc2 = e5;
                                                                    arrayList16 = arrayList27;
                                                                    i9 = i6;
                                                                    arrayList15 = arrayList10;
                                                                    longSparseArray4 = longSparseArray6;
                                                                    longSparseArray5 = longSparseArray7;
                                                                    messagesStorage5 = this;
                                                                    messagesStorage5.checkSQLException(exc2);
                                                                    if (!DialogObject.isEncryptedDialog(longValue2)) {
                                                                    }
                                                                    if (DialogObject.isEncryptedDialog(longValue2)) {
                                                                    }
                                                                    longSparseArray7 = longSparseArray5;
                                                                    arrayList20 = arrayList17;
                                                                    arrayList23 = arrayList14;
                                                                    longSparseArray6 = longSparseArray4;
                                                                    arrayList11 = arrayList18;
                                                                    hashSet2 = hashSet5;
                                                                    i10 = i9;
                                                                    arrayList22 = arrayList16;
                                                                    arrayList24 = arrayList26;
                                                                    arrayList10 = arrayList15;
                                                                    i11 = 0;
                                                                }
                                                            }
                                                            try {
                                                                if (!queryFinalized.isNull(13)) {
                                                                    try {
                                                                        NativeByteBuffer byteBufferValue4 = queryFinalized.byteBufferValue(13);
                                                                        if (byteBufferValue4 != null) {
                                                                            arrayList16 = arrayList27;
                                                                            try {
                                                                                TLRPC.Message TLdeserialize2 = TLRPC.Message.TLdeserialize(byteBufferValue4, byteBufferValue4.readInt32(false), false);
                                                                                TLdeserialize.replyMessage = TLdeserialize2;
                                                                                i9 = i6;
                                                                                arrayList15 = arrayList10;
                                                                                try {
                                                                                    TLdeserialize2.readAttachPath(byteBufferValue4, getUserConfig().clientUserId);
                                                                                    byteBufferValue4.reuse();
                                                                                    TLRPC.Message message = TLdeserialize.replyMessage;
                                                                                    if (message != null) {
                                                                                        addUsersAndChatsFromMessage(message, arrayList17, arrayList2, arrayList14);
                                                                                    }
                                                                                    if (TLdeserialize.replyMessage == null) {
                                                                                        longSparseArray4 = longSparseArray6;
                                                                                        longSparseArray5 = longSparseArray7;
                                                                                        try {
                                                                                            addReplyMessages(TLdeserialize, longSparseArray5, longSparseArray4);
                                                                                            messagesStorage5 = this;
                                                                                        } catch (Exception e6) {
                                                                                            e = e6;
                                                                                            messagesStorage5 = this;
                                                                                            exc2 = e;
                                                                                            messagesStorage5.checkSQLException(exc2);
                                                                                            if (!DialogObject.isEncryptedDialog(longValue2)) {
                                                                                            }
                                                                                            if (DialogObject.isEncryptedDialog(longValue2)) {
                                                                                            }
                                                                                            longSparseArray7 = longSparseArray5;
                                                                                            arrayList20 = arrayList17;
                                                                                            arrayList23 = arrayList14;
                                                                                            longSparseArray6 = longSparseArray4;
                                                                                            arrayList11 = arrayList18;
                                                                                            hashSet2 = hashSet5;
                                                                                            i10 = i9;
                                                                                            arrayList22 = arrayList16;
                                                                                            arrayList24 = arrayList26;
                                                                                            arrayList10 = arrayList15;
                                                                                            i11 = 0;
                                                                                        }
                                                                                    }
                                                                                    longSparseArray4 = longSparseArray6;
                                                                                    longSparseArray5 = longSparseArray7;
                                                                                    messagesStorage5 = this;
                                                                                } catch (Exception e7) {
                                                                                    e = e7;
                                                                                    messagesStorage5 = this;
                                                                                    exc2 = e;
                                                                                    longSparseArray4 = longSparseArray6;
                                                                                    longSparseArray5 = longSparseArray7;
                                                                                    messagesStorage5.checkSQLException(exc2);
                                                                                    if (!DialogObject.isEncryptedDialog(longValue2)) {
                                                                                    }
                                                                                    if (DialogObject.isEncryptedDialog(longValue2)) {
                                                                                    }
                                                                                    longSparseArray7 = longSparseArray5;
                                                                                    arrayList20 = arrayList17;
                                                                                    arrayList23 = arrayList14;
                                                                                    longSparseArray6 = longSparseArray4;
                                                                                    arrayList11 = arrayList18;
                                                                                    hashSet2 = hashSet5;
                                                                                    i10 = i9;
                                                                                    arrayList22 = arrayList16;
                                                                                    arrayList24 = arrayList26;
                                                                                    arrayList10 = arrayList15;
                                                                                    i11 = 0;
                                                                                }
                                                                            } catch (Exception e8) {
                                                                                e = e8;
                                                                                i9 = i6;
                                                                                arrayList15 = arrayList10;
                                                                                messagesStorage5 = this;
                                                                                exc2 = e;
                                                                                longSparseArray4 = longSparseArray6;
                                                                                longSparseArray5 = longSparseArray7;
                                                                                messagesStorage5.checkSQLException(exc2);
                                                                                if (!DialogObject.isEncryptedDialog(longValue2)) {
                                                                                }
                                                                                if (DialogObject.isEncryptedDialog(longValue2)) {
                                                                                }
                                                                                longSparseArray7 = longSparseArray5;
                                                                                arrayList20 = arrayList17;
                                                                                arrayList23 = arrayList14;
                                                                                longSparseArray6 = longSparseArray4;
                                                                                arrayList11 = arrayList18;
                                                                                hashSet2 = hashSet5;
                                                                                i10 = i9;
                                                                                arrayList22 = arrayList16;
                                                                                arrayList24 = arrayList26;
                                                                                arrayList10 = arrayList15;
                                                                                i11 = 0;
                                                                            }
                                                                        }
                                                                    } catch (Exception e9) {
                                                                        e = e9;
                                                                        arrayList16 = arrayList27;
                                                                    }
                                                                }
                                                                if (TLdeserialize.replyMessage == null) {
                                                                }
                                                                longSparseArray4 = longSparseArray6;
                                                                longSparseArray5 = longSparseArray7;
                                                                messagesStorage5 = this;
                                                            } catch (Exception e10) {
                                                                e = e10;
                                                                longSparseArray4 = longSparseArray6;
                                                                longSparseArray5 = longSparseArray7;
                                                                messagesStorage5 = this;
                                                                exc2 = e;
                                                                messagesStorage5.checkSQLException(exc2);
                                                                if (!DialogObject.isEncryptedDialog(longValue2)) {
                                                                }
                                                                if (DialogObject.isEncryptedDialog(longValue2)) {
                                                                }
                                                                longSparseArray7 = longSparseArray5;
                                                                arrayList20 = arrayList17;
                                                                arrayList23 = arrayList14;
                                                                longSparseArray6 = longSparseArray4;
                                                                arrayList11 = arrayList18;
                                                                hashSet2 = hashSet5;
                                                                i10 = i9;
                                                                arrayList22 = arrayList16;
                                                                arrayList24 = arrayList26;
                                                                arrayList10 = arrayList15;
                                                                i11 = 0;
                                                            }
                                                            arrayList16 = arrayList27;
                                                            i9 = i6;
                                                            arrayList15 = arrayList10;
                                                        }
                                                        arrayList16 = arrayList27;
                                                        i9 = i6;
                                                        arrayList15 = arrayList10;
                                                        longSparseArray4 = longSparseArray6;
                                                        longSparseArray5 = longSparseArray7;
                                                        messagesStorage5 = this;
                                                    } catch (Exception e11) {
                                                        e = e11;
                                                        arrayList16 = arrayList27;
                                                        i9 = i6;
                                                        arrayList15 = arrayList10;
                                                    }
                                                } else {
                                                    i9 = i6;
                                                    arrayList15 = arrayList10;
                                                    longSparseArray4 = longSparseArray6;
                                                    longSparseArray5 = longSparseArray7;
                                                    messagesStorage5 = this;
                                                    arrayList16 = arrayList22;
                                                    arrayList17 = arrayList25;
                                                    byteBufferValue2.reuse();
                                                }
                                            } else {
                                                i9 = i6;
                                                arrayList15 = arrayList10;
                                                longSparseArray4 = longSparseArray6;
                                                longSparseArray5 = longSparseArray7;
                                                messagesStorage5 = this;
                                                arrayList16 = arrayList22;
                                                arrayList17 = arrayList25;
                                            }
                                            if (!DialogObject.isEncryptedDialog(longValue2)) {
                                                try {
                                                    if (dialog2.read_inbox_max_id > dialog2.top_message) {
                                                        dialog2.read_inbox_max_id = 0;
                                                    }
                                                } catch (Exception e12) {
                                                    e = e12;
                                                    exc = e;
                                                    sQLiteCursor = queryFinalized;
                                                    messagesStorage = messagesStorage5;
                                                    tL_messages_dialogs = tL_messages_dialogs2;
                                                    arrayList = arrayList6;
                                                    tL_messages_dialogs.dialogs.clear();
                                                    tL_messages_dialogs.users.clear();
                                                    tL_messages_dialogs.chats.clear();
                                                    arrayList.clear();
                                                    messagesStorage.checkSQLException(exc);
                                                    getMessagesController().processLoadedDialogs(tL_messages_dialogs, arrayList, null, i, 0, 100, 1, true, false, true);
                                                    if (sQLiteCursor == null) {
                                                    }
                                                } catch (Throwable th6) {
                                                    th = th6;
                                                    th = th;
                                                    sQLiteCursor2 = queryFinalized;
                                                    if (sQLiteCursor2 != null) {
                                                    }
                                                }
                                            }
                                            if (DialogObject.isEncryptedDialog(longValue2)) {
                                                int encryptedChatId = DialogObject.getEncryptedChatId(longValue2);
                                                arrayList18 = arrayList11;
                                                if (arrayList18.contains(Integer.valueOf(encryptedChatId))) {
                                                    longSparseArray7 = longSparseArray5;
                                                    arrayList20 = arrayList17;
                                                    arrayList23 = arrayList14;
                                                    longSparseArray6 = longSparseArray4;
                                                    arrayList11 = arrayList18;
                                                    i10 = i9;
                                                    arrayList22 = arrayList16;
                                                    arrayList24 = arrayList26;
                                                    arrayList10 = arrayList15;
                                                    i11 = 0;
                                                } else {
                                                    arrayList18.add(Integer.valueOf(encryptedChatId));
                                                    hashSet5 = hashSet2;
                                                }
                                            } else {
                                                arrayList18 = arrayList11;
                                                if (DialogObject.isUserDialog(longValue2)) {
                                                    if (!arrayList17.contains(Long.valueOf(longValue2))) {
                                                        arrayList17.add(Long.valueOf(longValue2));
                                                    }
                                                    hashSet5 = hashSet2;
                                                    hashSet5.add(Long.valueOf(longValue2));
                                                } else {
                                                    hashSet5 = hashSet2;
                                                    if (DialogObject.isChatDialog(longValue2)) {
                                                        long j = -longValue2;
                                                        if (!arrayList2.contains(Long.valueOf(j))) {
                                                            arrayList2.add(Long.valueOf(j));
                                                        }
                                                    }
                                                }
                                            }
                                            longSparseArray7 = longSparseArray5;
                                            arrayList20 = arrayList17;
                                            arrayList23 = arrayList14;
                                            longSparseArray6 = longSparseArray4;
                                            arrayList11 = arrayList18;
                                            hashSet2 = hashSet5;
                                            i10 = i9;
                                            arrayList22 = arrayList16;
                                            arrayList24 = arrayList26;
                                            arrayList10 = arrayList15;
                                            i11 = 0;
                                        }
                                    } else {
                                        i6 = i10;
                                        arrayList14 = arrayList23;
                                    }
                                    i7 = 0;
                                    dialog2.flags = i7;
                                    dialog2.read_inbox_max_id = queryFinalized.intValue(11);
                                    dialog2.read_outbox_max_id = queryFinalized.intValue(12);
                                    int intValue22 = queryFinalized.intValue(14);
                                    dialog2.pinnedNum = intValue22;
                                    dialog2.pinned = intValue22 == 0;
                                    dialog2.unread_mentions_count = queryFinalized.intValue(15);
                                    int intValue32 = queryFinalized.intValue(16);
                                    dialog2.unread_mark = (intValue32 & 1) == 0;
                                    dialog2.view_forum_as_messages = (intValue32 & 64) == 0;
                                    long longValue32 = queryFinalized.longValue(8);
                                    i8 = (int) longValue32;
                                    ArrayList arrayList262 = arrayList24;
                                    TLRPC.TL_peerNotifySettings tL_peerNotifySettings2 = new TLRPC.TL_peerNotifySettings();
                                    dialog2.notify_settings = tL_peerNotifySettings2;
                                    if ((i8 & 1) != 0) {
                                    }
                                    dialog2.folder_id = queryFinalized.intValue(17);
                                    dialog2.unread_reactions_count = queryFinalized.intValue(19);
                                    longValue = queryFinalized.longValue(20);
                                    if (longValue != 0) {
                                    }
                                    dialog2.ttl_period = queryFinalized.intValue(21);
                                    tL_messages_dialogs2.dialogs.add(dialog2);
                                    if (jArr != null) {
                                    }
                                    byteBufferValue2 = queryFinalized.byteBufferValue(4);
                                    if (byteBufferValue2 == null) {
                                    }
                                    if (!DialogObject.isEncryptedDialog(longValue2)) {
                                    }
                                    if (DialogObject.isEncryptedDialog(longValue2)) {
                                    }
                                    longSparseArray7 = longSparseArray5;
                                    arrayList20 = arrayList17;
                                    arrayList23 = arrayList14;
                                    longSparseArray6 = longSparseArray4;
                                    arrayList11 = arrayList18;
                                    hashSet2 = hashSet5;
                                    i10 = i9;
                                    arrayList22 = arrayList16;
                                    arrayList24 = arrayList262;
                                    arrayList10 = arrayList15;
                                    i11 = 0;
                                } catch (Exception e13) {
                                    e = e13;
                                    messagesStorage5 = this;
                                } catch (Throwable th7) {
                                    th = th7;
                                    messagesStorage5 = this;
                                }
                            } catch (Exception e14) {
                                e = e14;
                                messagesStorage3 = this;
                            } catch (Throwable th8) {
                                th = th8;
                                messagesStorage3 = this;
                            }
                        }
                        int i13 = i10;
                        ArrayList arrayList28 = arrayList23;
                        ArrayList arrayList29 = arrayList22;
                        ArrayList arrayList30 = arrayList24;
                        ArrayList<Long> arrayList31 = arrayList20;
                        ArrayList arrayList32 = arrayList10;
                        HashSet hashSet7 = hashSet2;
                        ArrayList arrayList33 = arrayList11;
                        LongSparseArray longSparseArray8 = longSparseArray6;
                        LongSparseArray longSparseArray9 = longSparseArray7;
                        MessagesStorage messagesStorage7 = this;
                        try {
                            queryFinalized.dispose();
                            try {
                                if (arrayList32.isEmpty()) {
                                    arrayList12 = arrayList28;
                                    arrayList13 = arrayList33;
                                    hashSet3 = hashSet7;
                                    messagesStorage4 = messagesStorage7;
                                    queryFinalized = null;
                                } else {
                                    StringBuilder sb = new StringBuilder();
                                    int i14 = 0;
                                    while (i14 < arrayList32.size()) {
                                        ArrayList arrayList34 = arrayList32;
                                        try {
                                            Pair pair = (Pair) arrayList34.get(i14);
                                            sb.append("uid = ");
                                            sb.append(pair.first);
                                            sb.append(" AND group_id = ");
                                            sb.append(pair.second);
                                            i14++;
                                            if (i14 < arrayList34.size()) {
                                                sb.append(" OR ");
                                            }
                                            arrayList32 = arrayList34;
                                        } catch (Exception e15) {
                                            exc = e15;
                                            messagesStorage = messagesStorage7;
                                            tL_messages_dialogs = tL_messages_dialogs2;
                                            arrayList = arrayList6;
                                            sQLiteCursor = null;
                                            tL_messages_dialogs.dialogs.clear();
                                            tL_messages_dialogs.users.clear();
                                            tL_messages_dialogs.chats.clear();
                                            arrayList.clear();
                                            messagesStorage.checkSQLException(exc);
                                            getMessagesController().processLoadedDialogs(tL_messages_dialogs, arrayList, null, i, 0, 100, 1, true, false, true);
                                            if (sQLiteCursor == null) {
                                            }
                                        } catch (Throwable th9) {
                                            th = th9;
                                            sQLiteCursor2 = null;
                                            if (sQLiteCursor2 != null) {
                                            }
                                        }
                                    }
                                    arrayList12 = arrayList28;
                                    try {
                                        int i15 = 0;
                                        queryFinalized = messagesStorage7.database.queryFinalized(String.format(Locale.US, "SELECT uid, data, read_state, mid, send_state, date, replydata, group_id FROM messages_v2 WHERE %s ORDER BY date DESC", sb), new Object[0]);
                                        while (queryFinalized.next()) {
                                            ArrayList arrayList35 = arrayList33;
                                            long longValue4 = queryFinalized.longValue(i15);
                                            NativeByteBuffer byteBufferValue5 = queryFinalized.byteBufferValue(1);
                                            int i16 = 0;
                                            while (true) {
                                                if (i16 >= tL_messages_dialogs2.dialogs.size()) {
                                                    hashSet4 = hashSet7;
                                                    dialog = null;
                                                    break;
                                                }
                                                dialog = tL_messages_dialogs2.dialogs.get(i16);
                                                if (dialog != null) {
                                                    hashSet4 = hashSet7;
                                                    if (dialog.id == longValue4) {
                                                        break;
                                                    }
                                                } else {
                                                    hashSet4 = hashSet7;
                                                }
                                                i16++;
                                                hashSet7 = hashSet4;
                                            }
                                            if (dialog != null && byteBufferValue5 != null) {
                                                TLRPC.Message TLdeserialize3 = TLRPC.Message.TLdeserialize(byteBufferValue5, byteBufferValue5.readInt32(false), false);
                                                if (TLdeserialize3 != null) {
                                                    TLdeserialize3.readAttachPath(byteBufferValue5, getUserConfig().clientUserId);
                                                    byteBufferValue5.reuse();
                                                    MessageObject.setUnreadFlags(TLdeserialize3, queryFinalized.intValue(2));
                                                    TLdeserialize3.id = queryFinalized.intValue(3);
                                                    int intValue5 = queryFinalized.intValue(5);
                                                    if (intValue5 != 0) {
                                                        dialog.last_message_date = intValue5;
                                                    }
                                                    TLdeserialize3.send_state = queryFinalized.intValue(4);
                                                    TLdeserialize3.dialog_id = longValue4;
                                                    tL_messages_dialogs2.messages.add(TLdeserialize3);
                                                    addUsersAndChatsFromMessage(TLdeserialize3, arrayList31, arrayList2, null);
                                                    try {
                                                        TLRPC.MessageReplyHeader messageReplyHeader2 = TLdeserialize3.reply_to;
                                                        if (messageReplyHeader2 != null && messageReplyHeader2.reply_to_msg_id != 0) {
                                                            TLRPC.MessageAction messageAction2 = TLdeserialize3.action;
                                                            if ((messageAction2 instanceof TLRPC.TL_messageActionPinMessage) || (messageAction2 instanceof TLRPC.TL_messageActionPaymentSent) || (messageAction2 instanceof TLRPC.TL_messageActionGameScore)) {
                                                                if (!queryFinalized.isNull(7) && (byteBufferValue = queryFinalized.byteBufferValue(7)) != null) {
                                                                    TLRPC.Message TLdeserialize4 = TLRPC.Message.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                                                                    TLdeserialize3.replyMessage = TLdeserialize4;
                                                                    TLdeserialize4.readAttachPath(byteBufferValue, getUserConfig().clientUserId);
                                                                    byteBufferValue.reuse();
                                                                    TLRPC.Message message2 = TLdeserialize3.replyMessage;
                                                                    if (message2 != null) {
                                                                        try {
                                                                            addUsersAndChatsFromMessage(message2, arrayList31, arrayList2, null);
                                                                            if (TLdeserialize3.replyMessage == null) {
                                                                                addReplyMessages(TLdeserialize3, longSparseArray9, longSparseArray8);
                                                                            }
                                                                        } catch (Exception e16) {
                                                                            e = e16;
                                                                            messagesStorage3 = this;
                                                                            try {
                                                                                messagesStorage3.checkSQLException(e);
                                                                                messagesStorage7 = messagesStorage3;
                                                                                arrayList33 = arrayList35;
                                                                                hashSet7 = hashSet4;
                                                                                i15 = 0;
                                                                            } catch (Exception e17) {
                                                                                e = e17;
                                                                                exc = e;
                                                                                sQLiteCursor = queryFinalized;
                                                                                messagesStorage = messagesStorage3;
                                                                                tL_messages_dialogs = tL_messages_dialogs2;
                                                                                arrayList = arrayList6;
                                                                                tL_messages_dialogs.dialogs.clear();
                                                                                tL_messages_dialogs.users.clear();
                                                                                tL_messages_dialogs.chats.clear();
                                                                                arrayList.clear();
                                                                                messagesStorage.checkSQLException(exc);
                                                                                getMessagesController().processLoadedDialogs(tL_messages_dialogs, arrayList, null, i, 0, 100, 1, true, false, true);
                                                                                if (sQLiteCursor == null) {
                                                                                }
                                                                            } catch (Throwable th10) {
                                                                                th = th10;
                                                                                th = th;
                                                                                sQLiteCursor2 = queryFinalized;
                                                                                if (sQLiteCursor2 != null) {
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                                if (TLdeserialize3.replyMessage == null) {
                                                                }
                                                            }
                                                        }
                                                        i15 = 0;
                                                        messagesStorage7 = this;
                                                        arrayList33 = arrayList35;
                                                        hashSet7 = hashSet4;
                                                    } catch (Exception e18) {
                                                        e = e18;
                                                    }
                                                } else {
                                                    messagesStorage3 = messagesStorage7;
                                                    byteBufferValue5.reuse();
                                                }
                                                messagesStorage7 = messagesStorage3;
                                            }
                                            arrayList33 = arrayList35;
                                            hashSet7 = hashSet4;
                                            i15 = 0;
                                        }
                                        arrayList13 = arrayList33;
                                        hashSet3 = hashSet7;
                                        messagesStorage4 = messagesStorage7;
                                        queryFinalized.dispose();
                                    } catch (Exception e19) {
                                        messagesStorage3 = messagesStorage7;
                                        sQLiteCursor = null;
                                        exc = e19;
                                        messagesStorage = messagesStorage3;
                                        tL_messages_dialogs = tL_messages_dialogs2;
                                        arrayList = arrayList6;
                                        tL_messages_dialogs.dialogs.clear();
                                        tL_messages_dialogs.users.clear();
                                        tL_messages_dialogs.chats.clear();
                                        arrayList.clear();
                                        messagesStorage.checkSQLException(exc);
                                        getMessagesController().processLoadedDialogs(tL_messages_dialogs, arrayList, null, i, 0, 100, 1, true, false, true);
                                        if (sQLiteCursor == null) {
                                        }
                                    } catch (Throwable th11) {
                                        messagesStorage3 = messagesStorage7;
                                        sQLiteCursor5 = null;
                                        th = th11;
                                        sQLiteCursor2 = sQLiteCursor5;
                                        if (sQLiteCursor2 != null) {
                                        }
                                    }
                                }
                                int i17 = i13 + 1;
                                sQLiteCursor4 = queryFinalized;
                                longSparseArray = longSparseArray9;
                                i10 = i17;
                                longSparseArray2 = longSparseArray8;
                                messagesStorage6 = messagesStorage4;
                                arrayList19 = arrayList6;
                                arrayList23 = arrayList12;
                                arrayList21 = arrayList13;
                                hashSet6 = hashSet3;
                                arrayList24 = arrayList30;
                                arrayList20 = arrayList31;
                                arrayList22 = arrayList29;
                            } catch (Exception e20) {
                                messagesStorage3 = messagesStorage7;
                                sQLiteCursor = null;
                                exc = e20;
                            } catch (Throwable th12) {
                                messagesStorage3 = messagesStorage7;
                                sQLiteCursor5 = null;
                                th = th12;
                            }
                        } catch (Exception e21) {
                            e = e21;
                            messagesStorage3 = messagesStorage7;
                        } catch (Throwable th13) {
                            th = th13;
                            messagesStorage3 = messagesStorage7;
                        }
                    } catch (Exception e22) {
                        e = e22;
                        messagesStorage2 = this;
                        exc = e;
                        messagesStorage = messagesStorage2;
                        tL_messages_dialogs = tL_messages_dialogs2;
                        sQLiteCursor = sQLiteCursor4;
                        arrayList = arrayList6;
                        tL_messages_dialogs.dialogs.clear();
                        tL_messages_dialogs.users.clear();
                        tL_messages_dialogs.chats.clear();
                        arrayList.clear();
                        messagesStorage.checkSQLException(exc);
                        getMessagesController().processLoadedDialogs(tL_messages_dialogs, arrayList, null, i, 0, 100, 1, true, false, true);
                        if (sQLiteCursor == null) {
                        }
                    } catch (Throwable th14) {
                        th = th14;
                        messagesStorage2 = this;
                        th = th;
                        sQLiteCursor2 = sQLiteCursor4;
                        if (sQLiteCursor2 != null) {
                        }
                    }
                } catch (Exception e23) {
                    e = e23;
                    messagesStorage2 = this;
                    exc = e;
                    messagesStorage = messagesStorage2;
                    tL_messages_dialogs = tL_messages_dialogs2;
                    sQLiteCursor = sQLiteCursor4;
                    arrayList = arrayList6;
                    tL_messages_dialogs.dialogs.clear();
                    tL_messages_dialogs.users.clear();
                    tL_messages_dialogs.chats.clear();
                    arrayList.clear();
                    messagesStorage.checkSQLException(exc);
                    getMessagesController().processLoadedDialogs(tL_messages_dialogs, arrayList, null, i, 0, 100, 1, true, false, true);
                    if (sQLiteCursor == null) {
                    }
                } catch (Throwable th15) {
                    th = th15;
                    messagesStorage2 = this;
                    th = th;
                    sQLiteCursor2 = sQLiteCursor4;
                    if (sQLiteCursor2 != null) {
                    }
                }
            }
            arrayList3 = arrayList22;
            arrayList4 = arrayList21;
            arrayList5 = arrayList20;
            hashSet = hashSet6;
            arrayList6 = arrayList19;
            messagesStorage2 = messagesStorage6;
        } catch (Exception e24) {
            e = e24;
            messagesStorage = messagesStorage6;
            arrayList = arrayList19;
            tL_messages_dialogs = tL_messages_dialogs2;
            sQLiteCursor = null;
        } catch (Throwable th16) {
            th = th16;
            sQLiteCursor = null;
            th = th;
            sQLiteCursor2 = sQLiteCursor;
            if (sQLiteCursor2 != null) {
            }
        }
        try {
            loadReplyMessages(longSparseArray, longSparseArray2, arrayList5, arrayList2, 0);
            if (jArr != null) {
                try {
                    ArrayList arrayList36 = new ArrayList();
                    for (int i18 = 0; i18 < jArr.length; i18++) {
                        long j2 = jArr[i18];
                        if (!DialogObject.isEncryptedDialog(j2)) {
                            if (j2 > 0) {
                                if (!arrayList5.contains(Long.valueOf(j2))) {
                                    valueOf = Long.valueOf(j2);
                                    arrayList7 = arrayList5;
                                    arrayList7.add(valueOf);
                                }
                                if (!arrayList3.contains(Long.valueOf(jArr[i18]))) {
                                    arrayList36.add(Long.valueOf(jArr[i18]));
                                }
                            } else {
                                long j3 = -j2;
                                if (!arrayList2.contains(Long.valueOf(j3))) {
                                    valueOf = Long.valueOf(j3);
                                    arrayList7 = arrayList2;
                                    arrayList7.add(valueOf);
                                }
                                if (!arrayList3.contains(Long.valueOf(jArr[i18]))) {
                                }
                            }
                        }
                    }
                    if (arrayList36.isEmpty()) {
                        longSparseArray3 = null;
                    } else {
                        longSparseArray3 = new LongSparseArray(arrayList36.size());
                        try {
                            sQLiteCursor3 = messagesStorage2.database.queryFinalized(String.format(Locale.US, "SELECT did, folder_id FROM dialogs WHERE did IN(%s)", TextUtils.join(",", arrayList36)), new Object[0]);
                            while (sQLiteCursor3.next()) {
                                try {
                                    try {
                                        longSparseArray3.put(sQLiteCursor3.longValue(0), Integer.valueOf(sQLiteCursor3.intValue(1)));
                                    } catch (Exception e25) {
                                        e = e25;
                                        sQLiteCursor = sQLiteCursor3;
                                        messagesStorage = messagesStorage2;
                                        tL_messages_dialogs = tL_messages_dialogs2;
                                        arrayList = arrayList6;
                                        exc = e;
                                        tL_messages_dialogs.dialogs.clear();
                                        tL_messages_dialogs.users.clear();
                                        tL_messages_dialogs.chats.clear();
                                        arrayList.clear();
                                        messagesStorage.checkSQLException(exc);
                                        getMessagesController().processLoadedDialogs(tL_messages_dialogs, arrayList, null, i, 0, 100, 1, true, false, true);
                                        if (sQLiteCursor == null) {
                                            sQLiteCursor3 = sQLiteCursor;
                                            sQLiteCursor3.dispose();
                                        }
                                        return;
                                    }
                                } catch (Throwable th17) {
                                    th = th17;
                                    sQLiteCursor2 = sQLiteCursor3;
                                    th = th;
                                    if (sQLiteCursor2 != null) {
                                        throw th;
                                    }
                                    sQLiteCursor2.dispose();
                                    throw th;
                                }
                            }
                            sQLiteCursor3.dispose();
                            sQLiteCursor4 = null;
                        } catch (Exception e26) {
                            e = e26;
                            exc = e;
                            messagesStorage = messagesStorage2;
                            tL_messages_dialogs = tL_messages_dialogs2;
                            sQLiteCursor = sQLiteCursor4;
                            arrayList = arrayList6;
                            tL_messages_dialogs.dialogs.clear();
                            tL_messages_dialogs.users.clear();
                            tL_messages_dialogs.chats.clear();
                            arrayList.clear();
                            messagesStorage.checkSQLException(exc);
                            getMessagesController().processLoadedDialogs(tL_messages_dialogs, arrayList, null, i, 0, 100, 1, true, false, true);
                            if (sQLiteCursor == null) {
                            }
                        } catch (Throwable th18) {
                            th = th18;
                            th = th;
                            sQLiteCursor2 = sQLiteCursor4;
                            if (sQLiteCursor2 != null) {
                            }
                        }
                    }
                    AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda202
                        @Override // java.lang.Runnable
                        public final void run() {
                            MessagesStorage.this.lambda$getDialogs$219(longSparseArray3);
                        }
                    });
                } catch (Exception e27) {
                    e = e27;
                    exc = e;
                    messagesStorage = messagesStorage2;
                    tL_messages_dialogs = tL_messages_dialogs2;
                    sQLiteCursor = sQLiteCursor4;
                    arrayList = arrayList6;
                    tL_messages_dialogs.dialogs.clear();
                    tL_messages_dialogs.users.clear();
                    tL_messages_dialogs.chats.clear();
                    arrayList.clear();
                    messagesStorage.checkSQLException(exc);
                    getMessagesController().processLoadedDialogs(tL_messages_dialogs, arrayList, null, i, 0, 100, 1, true, false, true);
                    if (sQLiteCursor == null) {
                    }
                } catch (Throwable th19) {
                    th = th19;
                    th = th;
                    sQLiteCursor2 = sQLiteCursor4;
                    if (sQLiteCursor2 != null) {
                    }
                }
            }
            sQLiteCursor3 = sQLiteCursor4;
            try {
                try {
                    if (arrayList4.isEmpty()) {
                        arrayList8 = arrayList6;
                    } else {
                        try {
                            arrayList8 = arrayList6;
                            try {
                                messagesStorage2.getEncryptedChatsInternal(TextUtils.join(",", arrayList4), arrayList8, arrayList5);
                            } catch (Exception e28) {
                                e = e28;
                                sQLiteCursor = sQLiteCursor3;
                                arrayList = arrayList8;
                                messagesStorage = messagesStorage2;
                                tL_messages_dialogs = tL_messages_dialogs2;
                                exc = e;
                                tL_messages_dialogs.dialogs.clear();
                                tL_messages_dialogs.users.clear();
                                tL_messages_dialogs.chats.clear();
                                arrayList.clear();
                                messagesStorage.checkSQLException(exc);
                                getMessagesController().processLoadedDialogs(tL_messages_dialogs, arrayList, null, i, 0, 100, 1, true, false, true);
                                if (sQLiteCursor == null) {
                                }
                            }
                        } catch (Exception e29) {
                            e = e29;
                            arrayList8 = arrayList6;
                            sQLiteCursor = sQLiteCursor3;
                            arrayList = arrayList8;
                            messagesStorage = messagesStorage2;
                            tL_messages_dialogs = tL_messages_dialogs2;
                            exc = e;
                            tL_messages_dialogs.dialogs.clear();
                            tL_messages_dialogs.users.clear();
                            tL_messages_dialogs.chats.clear();
                            arrayList.clear();
                            messagesStorage.checkSQLException(exc);
                            getMessagesController().processLoadedDialogs(tL_messages_dialogs, arrayList, null, i, 0, 100, 1, true, false, true);
                            if (sQLiteCursor == null) {
                            }
                        }
                    }
                    try {
                        if (!arrayList2.isEmpty()) {
                            messagesStorage2.getChatsInternal(TextUtils.join(",", arrayList2), tL_messages_dialogs2.chats);
                        }
                        if (!arrayList5.isEmpty()) {
                            messagesStorage2.getUsersInternal(arrayList5, tL_messages_dialogs2.users);
                        }
                    } catch (Exception e30) {
                        e = e30;
                        arrayList = arrayList8;
                        messagesStorage = messagesStorage2;
                        tL_messages_dialogs = tL_messages_dialogs2;
                    }
                } catch (Throwable th20) {
                    th = th20;
                }
            } catch (Exception e31) {
                e = e31;
                messagesStorage = messagesStorage2;
                tL_messages_dialogs = tL_messages_dialogs2;
                arrayList = arrayList6;
            }
        } catch (Exception e32) {
            e = e32;
            messagesStorage = messagesStorage2;
            tL_messages_dialogs = tL_messages_dialogs2;
            arrayList = arrayList6;
            exc = e;
            sQLiteCursor = sQLiteCursor4;
            tL_messages_dialogs.dialogs.clear();
            tL_messages_dialogs.users.clear();
            tL_messages_dialogs.chats.clear();
            arrayList.clear();
            messagesStorage.checkSQLException(exc);
            getMessagesController().processLoadedDialogs(tL_messages_dialogs, arrayList, null, i, 0, 100, 1, true, false, true);
            if (sQLiteCursor == null) {
            }
        } catch (Throwable th21) {
            th = th21;
            th = th;
            sQLiteCursor2 = sQLiteCursor4;
            if (sQLiteCursor2 != null) {
            }
        }
        if (!hashSet.isEmpty()) {
            HashSet<Long> hashSet8 = new HashSet<>();
            Iterator it = hashSet.iterator();
            while (it.hasNext()) {
                Long l = (Long) it.next();
                for (int i19 = 0; i19 < tL_messages_dialogs2.users.size(); i19++) {
                    if (tL_messages_dialogs2.users.get(i19).id == l.longValue() && tL_messages_dialogs2.users.get(i19).premium) {
                        hashSet8.add(l);
                    }
                }
            }
            if (!hashSet8.isEmpty()) {
                arrayList9 = messagesStorage2.loadUserInfos(hashSet8);
                ArrayList<TLRPC.EncryptedChat> arrayList37 = arrayList8;
                messagesStorage = this;
                arrayList = arrayList8;
                tL_messages_dialogs = tL_messages_dialogs2;
                getMessagesController().processLoadedDialogs(tL_messages_dialogs2, arrayList37, arrayList9, i, i2, i3, 1, false, false, true);
                if (sQLiteCursor3 == null) {
                    return;
                }
                sQLiteCursor3.dispose();
            }
        }
        arrayList9 = null;
        ArrayList<TLRPC.EncryptedChat> arrayList372 = arrayList8;
        messagesStorage = this;
        arrayList = arrayList8;
        tL_messages_dialogs = tL_messages_dialogs2;
        getMessagesController().processLoadedDialogs(tL_messages_dialogs2, arrayList372, arrayList9, i, i2, i3, 1, false, false, true);
        if (sQLiteCursor3 == null) {
        }
        sQLiteCursor3.dispose();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$getDownloadQueue$178(int i, ArrayList arrayList) {
        getDownloadController().processDownloadObjects(i, arrayList);
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Code restructure failed: missing block: B:29:0x007c, code lost:
    
        if (r6 <= 60) goto L25;
     */
    /* JADX WARN: Code restructure failed: missing block: B:31:0x007e, code lost:
    
        if (r6 == Integer.MAX_VALUE) goto L25;
     */
    /* JADX WARN: Code restructure failed: missing block: B:36:0x008e, code lost:
    
        if (r6 <= 60) goto L25;
     */
    /* JADX WARN: Removed duplicated region for block: B:22:0x009c  */
    /* JADX WARN: Removed duplicated region for block: B:26:0x009e  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$getDownloadQueue$179(final int i) {
        boolean z;
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                final ArrayList arrayList = new ArrayList();
                SQLiteCursor queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT uid, type, data, parent FROM download_queue WHERE type = %d ORDER BY date DESC LIMIT 3", Integer.valueOf(i)), new Object[0]);
                while (queryFinalized.next()) {
                    try {
                        DownloadObject downloadObject = new DownloadObject();
                        downloadObject.type = queryFinalized.intValue(1);
                        downloadObject.id = queryFinalized.longValue(0);
                        downloadObject.parent = queryFinalized.stringValue(3);
                        NativeByteBuffer byteBufferValue = queryFinalized.byteBufferValue(2);
                        if (byteBufferValue != null) {
                            TLRPC.MessageMedia TLdeserialize = TLRPC.MessageMedia.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                            byteBufferValue.reuse();
                            TLRPC.Document document = TLdeserialize.document;
                            if (document != null) {
                                downloadObject.object = document;
                                if (!MessageObject.isVideoDocument(document)) {
                                    if (!MessageObject.isVoiceDocument(TLdeserialize.document)) {
                                        if (MessageObject.isRoundVideoDocument(TLdeserialize.document)) {
                                        }
                                    }
                                }
                                int i2 = TLdeserialize.ttl_seconds;
                                if (i2 > 0) {
                                }
                            } else {
                                TLRPC.Photo photo = TLdeserialize.photo;
                                if (photo != null) {
                                    downloadObject.object = photo;
                                    int i3 = TLdeserialize.ttl_seconds;
                                    if (i3 > 0) {
                                    }
                                    z = i3 == Integer.MAX_VALUE;
                                }
                                downloadObject.forceCache = (TLdeserialize.flags & Integer.MIN_VALUE) == 0;
                            }
                            downloadObject.secret = z;
                            downloadObject.forceCache = (TLdeserialize.flags & Integer.MIN_VALUE) == 0;
                        }
                        arrayList.add(downloadObject);
                    } catch (Exception e) {
                        e = e;
                        sQLiteCursor = queryFinalized;
                        checkSQLException(e);
                        if (sQLiteCursor != null) {
                            sQLiteCursor.dispose();
                        }
                    } catch (Throwable th) {
                        th = th;
                        sQLiteCursor = queryFinalized;
                        if (sQLiteCursor != null) {
                            sQLiteCursor.dispose();
                        }
                        throw th;
                    }
                }
                queryFinalized.dispose();
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda193
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesStorage.this.lambda$getDownloadQueue$178(i, arrayList);
                    }
                });
            } catch (Throwable th2) {
                th = th2;
            }
        } catch (Exception e2) {
            e = e2;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$getEncryptedChat$170(long j, ArrayList arrayList, CountDownLatch countDownLatch) {
        try {
            try {
                ArrayList<Long> arrayList2 = new ArrayList<>();
                ArrayList<TLRPC.EncryptedChat> arrayList3 = new ArrayList<>();
                getEncryptedChatsInternal("" + j, arrayList3, arrayList2);
                if (!arrayList3.isEmpty() && !arrayList2.isEmpty()) {
                    ArrayList<TLRPC.User> arrayList4 = new ArrayList<>();
                    getUsersInternal(arrayList2, arrayList4);
                    if (!arrayList4.isEmpty()) {
                        arrayList.add(arrayList3.get(0));
                        arrayList.add(arrayList4.get(0));
                    }
                }
            } catch (Exception e) {
                checkSQLException(e);
            }
        } finally {
            countDownLatch.countDown();
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$getMessage$136(long j, long j2, AtomicReference atomicReference, CountDownLatch countDownLatch) {
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                sQLiteCursor = this.database.queryFinalized("SELECT data FROM messages_v2 WHERE uid = " + j + " AND mid = " + j2 + " LIMIT 1", new Object[0]);
                while (sQLiteCursor.next()) {
                    NativeByteBuffer byteBufferValue = sQLiteCursor.byteBufferValue(0);
                    if (byteBufferValue != null) {
                        TLRPC.Message TLdeserialize = TLRPC.Message.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                        byteBufferValue.reuse();
                        atomicReference.set(TLdeserialize);
                    }
                }
                sQLiteCursor.dispose();
            } catch (Exception e) {
                checkSQLException(e);
                if (sQLiteCursor != null) {
                    sQLiteCursor.dispose();
                }
            }
            countDownLatch.countDown();
        } catch (Throwable th) {
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
            countDownLatch.countDown();
            throw th;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$getMessages$155(Timer.Task task, Runnable runnable) {
        Timer.done(task);
        runnable.run();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$getMessages$156(Timer.Task task, Timer timer, long j, long j2, int i, int i2, int i3, int i4, int i5, int i6, int i7, long j3, int i8, boolean z, boolean z2) {
        Timer.done(task);
        Timer.Task start = Timer.start(timer, "MessagesStorage.getMessages");
        final Runnable messagesInternal = getMessagesInternal(j, j2, i, i2, i3, i4, i5, i6, i7, j3, i8, z, z2, timer);
        Timer.done(start);
        final Timer.Task start2 = Timer.start(timer, "MessagesStorage.getMessages: stageQueue.postRunnable");
        Utilities.stageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda171
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.lambda$getMessages$155(Timer.Task.this, messagesInternal);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$getMessagesCount$152(long j, final IntCallback intCallback) {
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                sQLiteCursor = this.database.queryFinalized(String.format(Locale.US, "SELECT COUNT(mid) FROM messages_v2 WHERE uid = %d", Long.valueOf(j)), new Object[0]);
                final int intValue = sQLiteCursor.next() ? sQLiteCursor.intValue(0) : 0;
                sQLiteCursor.dispose();
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda10
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesStorage.IntCallback.this.run(intValue);
                    }
                });
            } catch (Exception e) {
                checkSQLException(e);
                if (sQLiteCursor == null) {
                    return;
                }
            }
            sQLiteCursor.dispose();
        } catch (Throwable th) {
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
            throw th;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ int lambda$getMessagesInternal$153(TLRPC.Message message, TLRPC.Message message2) {
        int i;
        int i2;
        int i3 = message.id;
        if (i3 > 0 && (i2 = message2.id) > 0) {
            if (i3 > i2) {
                return -1;
            }
            return i3 < i2 ? 1 : 0;
        }
        if (i3 < 0 && (i = message2.id) < 0) {
            if (i3 < i) {
                return -1;
            }
            return i3 > i ? 1 : 0;
        }
        int i4 = message.date;
        int i5 = message2.date;
        if (i4 > i5) {
            return -1;
        }
        return i4 < i5 ? 1 : 0;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$getMessagesInternal$154(TLRPC.TL_messages_messages tL_messages_messages, int i, long j, long j2, int i2, int i3, int i4, int i5, int i6, int i7, int i8, int i9, int i10, boolean z, int i11, long j3, int i12, boolean z2, int i13, boolean z3, boolean z4, Timer timer) {
        getMessagesController().processLoadedMessages(tL_messages_messages, i, j, j2, i2, i3, i4, true, i5, i6, i7, i8, i9, i10, z, i11, j3, i12, z2, i13, z3, z4, timer);
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Code restructure failed: missing block: B:30:0x00a6, code lost:
    
        if (r7 != 0) goto L24;
     */
    /* JADX WARN: Removed duplicated region for block: B:39:0x00ed  */
    /* JADX WARN: Removed duplicated region for block: B:42:? A[RETURN, SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$getNewTask$105(LongSparseArray longSparseArray, LongSparseArray longSparseArray2) {
        Exception e;
        LongSparseArray longSparseArray3;
        SQLiteCursor sQLiteCursor = null;
        try {
            if (longSparseArray != null) {
                try {
                    int size = longSparseArray.size();
                    for (int i = 0; i < size; i++) {
                        this.database.executeFast(String.format(Locale.US, "DELETE FROM enc_tasks_v4 WHERE mid IN(%s) AND uid = %d AND media = 0", TextUtils.join(",", (Iterable) longSparseArray.valueAt(i)), Long.valueOf(longSparseArray.keyAt(i)))).stepThis().dispose();
                    }
                } catch (Exception e2) {
                    e = e2;
                    checkSQLException(e);
                    if (sQLiteCursor == null) {
                        sQLiteCursor.dispose();
                        return;
                    }
                    return;
                }
            }
            if (longSparseArray2 != null) {
                int size2 = longSparseArray2.size();
                for (int i2 = 0; i2 < size2; i2++) {
                    this.database.executeFast(String.format(Locale.US, "DELETE FROM enc_tasks_v4 WHERE mid IN(%s) AND uid = %d AND media = 1", TextUtils.join(",", (Iterable) longSparseArray2.valueAt(i2)), Long.valueOf(longSparseArray2.keyAt(i2)))).stepThis().dispose();
                }
            }
            SQLiteCursor queryFinalized = this.database.queryFinalized("SELECT mid, date, media, uid FROM enc_tasks_v4 WHERE date = (SELECT min(date) FROM enc_tasks_v4)", new Object[0]);
            LongSparseArray longSparseArray4 = null;
            LongSparseArray longSparseArray5 = null;
            int i3 = 0;
            while (queryFinalized.next()) {
                try {
                    int intValue = queryFinalized.intValue(0);
                    int intValue2 = queryFinalized.intValue(1);
                    int intValue3 = queryFinalized.intValue(2);
                    long longValue = queryFinalized.longValue(3);
                    if (intValue3 == -1) {
                        if (intValue > 0) {
                            if (longSparseArray5 == null) {
                                longSparseArray5 = new LongSparseArray();
                            }
                            longSparseArray3 = longSparseArray5;
                        }
                        if (longSparseArray4 == null) {
                            longSparseArray4 = new LongSparseArray();
                        }
                        longSparseArray3 = longSparseArray5;
                        longSparseArray5 = longSparseArray4;
                    }
                    ArrayList arrayList = (ArrayList) longSparseArray5.get(longValue);
                    if (arrayList == null) {
                        arrayList = new ArrayList();
                        longSparseArray5.put(longValue, arrayList);
                    }
                    arrayList.add(Integer.valueOf(intValue));
                    i3 = intValue2;
                    longSparseArray5 = longSparseArray3;
                } catch (Exception e3) {
                    sQLiteCursor = queryFinalized;
                    e = e3;
                    checkSQLException(e);
                    if (sQLiteCursor == null) {
                    }
                } catch (Throwable th) {
                    sQLiteCursor = queryFinalized;
                    th = th;
                    if (sQLiteCursor != null) {
                        sQLiteCursor.dispose();
                    }
                    throw th;
                }
            }
            queryFinalized.dispose();
            getMessagesController().processLoadedDeleteTask(i3, longSparseArray4, longSparseArray5);
        } catch (Throwable th2) {
            th = th2;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$getSavedDialogMaxMessageId$50(IntCallback intCallback, int[] iArr) {
        intCallback.run(iArr[0]);
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Code restructure failed: missing block: B:18:0x0037, code lost:
    
        if (r3 == null) goto L13;
     */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$getSavedDialogMaxMessageId$51(long j, final IntCallback intCallback) {
        final int[] iArr = new int[1];
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                sQLiteCursor = this.database.queryFinalized("SELECT MAX(mid) FROM messages_topics WHERE uid = ? AND topic_id = ?", Long.valueOf(getUserConfig().getClientUserId()), Long.valueOf(j));
                if (sQLiteCursor.next()) {
                    iArr[0] = sQLiteCursor.intValue(0);
                }
            } catch (Exception e) {
                checkSQLException(e);
            }
            sQLiteCursor.dispose();
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda227
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesStorage.lambda$getSavedDialogMaxMessageId$50(MessagesStorage.IntCallback.this, iArr);
                }
            });
        } catch (Throwable th) {
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
            throw th;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$getSentFile$158(String str, int i, Object[] objArr, CountDownLatch countDownLatch) {
        NativeByteBuffer byteBufferValue;
        try {
            try {
                String MD5 = Utilities.MD5(str);
                if (MD5 != null) {
                    SQLiteCursor queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT data, parent FROM sent_files_v2 WHERE uid = '%s' AND type = %d", MD5, Integer.valueOf(i)), new Object[0]);
                    if (queryFinalized.next() && (byteBufferValue = queryFinalized.byteBufferValue(0)) != null) {
                        TLRPC.MessageMedia TLdeserialize = TLRPC.MessageMedia.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                        byteBufferValue.reuse();
                        if (TLdeserialize instanceof TLRPC.TL_messageMediaDocument) {
                            objArr[0] = ((TLRPC.TL_messageMediaDocument) TLdeserialize).document;
                        } else if (TLdeserialize instanceof TLRPC.TL_messageMediaPhoto) {
                            objArr[0] = ((TLRPC.TL_messageMediaPhoto) TLdeserialize).photo;
                        }
                        if (objArr[0] != null) {
                            objArr[1] = queryFinalized.stringValue(1);
                        }
                    }
                    queryFinalized.dispose();
                }
            } catch (Exception e) {
                checkSQLException(e);
            }
            countDownLatch.countDown();
        } catch (Throwable th) {
            countDownLatch.countDown();
            throw th;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$getUnreadMention$150(long j, long j2, final IntCallback intCallback) {
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                sQLiteCursor = j != 0 ? this.database.queryFinalized(String.format(Locale.US, "SELECT MIN(mid) FROM messages_topics WHERE uid = %d AND topic_id = %d AND mention = 1 AND read_state IN(0, 1)", Long.valueOf(j2), Long.valueOf(j)), new Object[0]) : this.database.queryFinalized(String.format(Locale.US, "SELECT MIN(mid) FROM messages_v2 WHERE uid = %d AND mention = 1 AND read_state IN(0, 1)", Long.valueOf(j2)), new Object[0]);
                final int intValue = sQLiteCursor.next() ? sQLiteCursor.intValue(0) : 0;
                sQLiteCursor.dispose();
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda210
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesStorage.IntCallback.this.run(intValue);
                    }
                });
            } catch (Exception e) {
                checkSQLException(e);
                if (sQLiteCursor == null) {
                    return;
                }
            }
            sQLiteCursor.dispose();
        } catch (Throwable th) {
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
            throw th;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:176:0x046c  */
    /* JADX WARN: Removed duplicated region for block: B:178:? A[SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$getUnsentMessages$146(int i) {
        Throwable th;
        SQLiteCursor sQLiteCursor;
        Exception exc;
        Throwable th2;
        ArrayList<TLRPC.User> arrayList;
        ArrayList<TLRPC.Chat> arrayList2;
        Long valueOf;
        ArrayList<Long> arrayList3;
        Long valueOf2;
        ArrayList<Long> arrayList4;
        Long valueOf3;
        ArrayList<Long> arrayList5;
        boolean z = false;
        try {
            SparseArray sparseArray = new SparseArray();
            ArrayList<TLRPC.Message> arrayList6 = new ArrayList<>();
            ArrayList<TLRPC.Message> arrayList7 = new ArrayList<>();
            ArrayList<TLRPC.User> arrayList8 = new ArrayList<>();
            ArrayList<TLRPC.Chat> arrayList9 = new ArrayList<>();
            ArrayList<TLRPC.EncryptedChat> arrayList10 = new ArrayList<>();
            ArrayList<Long> arrayList11 = new ArrayList<>();
            ArrayList<Long> arrayList12 = new ArrayList<>();
            ArrayList arrayList13 = new ArrayList();
            ArrayList arrayList14 = new ArrayList();
            SQLiteCursor queryFinalized = this.database.queryFinalized("SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.uid, s.seq_in, s.seq_out, m.ttl FROM messages_v2 as m LEFT JOIN randoms_v2 as r ON r.mid = m.mid AND r.uid = m.uid LEFT JOIN messages_seq as s ON m.mid = s.mid WHERE (m.mid < 0 AND m.send_state = 1) OR (m.mid > 0 AND m.send_state = 3) ORDER BY m.mid DESC LIMIT " + i, new Object[0]);
            while (queryFinalized.next()) {
                try {
                    NativeByteBuffer byteBufferValue = queryFinalized.byteBufferValue(1);
                    if (byteBufferValue != null) {
                        TLRPC.Message TLdeserialize = TLRPC.Message.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(z), z);
                        TLdeserialize.send_state = queryFinalized.intValue(2);
                        ArrayList<TLRPC.User> arrayList15 = arrayList8;
                        ArrayList<TLRPC.Chat> arrayList16 = arrayList9;
                        TLdeserialize.readAttachPath(byteBufferValue, getUserConfig().clientUserId);
                        byteBufferValue.reuse();
                        if (sparseArray.indexOfKey(TLdeserialize.id) < 0) {
                            MessageObject.setUnreadFlags(TLdeserialize, queryFinalized.intValue(0));
                            TLdeserialize.id = queryFinalized.intValue(3);
                            TLdeserialize.date = queryFinalized.intValue(4);
                            if (!queryFinalized.isNull(5)) {
                                TLdeserialize.random_id = queryFinalized.longValue(5);
                            }
                            TLdeserialize.dialog_id = queryFinalized.longValue(6);
                            TLdeserialize.seq_in = queryFinalized.intValue(7);
                            TLdeserialize.seq_out = queryFinalized.intValue(8);
                            TLdeserialize.ttl = queryFinalized.intValue(9);
                            if (TLdeserialize.media instanceof TLRPC.TL_messageMediaPaidMedia) {
                                arrayList14.add(TLdeserialize);
                            } else {
                                arrayList6.add(TLdeserialize);
                            }
                            sparseArray.put(TLdeserialize.id, TLdeserialize);
                            if (DialogObject.isEncryptedDialog(TLdeserialize.dialog_id)) {
                                int encryptedChatId = DialogObject.getEncryptedChatId(TLdeserialize.dialog_id);
                                if (!arrayList13.contains(Integer.valueOf(encryptedChatId))) {
                                    arrayList13.add(Integer.valueOf(encryptedChatId));
                                }
                            } else if (DialogObject.isUserDialog(TLdeserialize.dialog_id)) {
                                if (!arrayList11.contains(Long.valueOf(TLdeserialize.dialog_id))) {
                                    valueOf3 = Long.valueOf(TLdeserialize.dialog_id);
                                    arrayList5 = arrayList11;
                                    arrayList5.add(valueOf3);
                                }
                            } else if (!arrayList12.contains(Long.valueOf(-TLdeserialize.dialog_id))) {
                                valueOf3 = Long.valueOf(-TLdeserialize.dialog_id);
                                arrayList5 = arrayList12;
                                arrayList5.add(valueOf3);
                            }
                            addUsersAndChatsFromMessage(TLdeserialize, arrayList11, arrayList12, null);
                            if (TLdeserialize.send_state != 3) {
                                if (TLdeserialize.peer_id.channel_id == 0) {
                                    if (!MessageObject.isUnread(TLdeserialize)) {
                                        if (DialogObject.isEncryptedDialog(TLdeserialize.dialog_id)) {
                                        }
                                        TLdeserialize.send_state = 0;
                                    }
                                }
                                if (TLdeserialize.id > 0) {
                                    TLdeserialize.send_state = 0;
                                }
                            }
                        }
                        arrayList8 = arrayList15;
                        arrayList9 = arrayList16;
                        z = false;
                    }
                } catch (Exception e) {
                    sQLiteCursor = queryFinalized;
                    exc = e;
                } catch (Throwable th3) {
                    th2 = th3;
                    sQLiteCursor = queryFinalized;
                    th = th2;
                    if (sQLiteCursor == null) {
                    }
                }
            }
            ArrayList<TLRPC.User> arrayList17 = arrayList8;
            ArrayList<TLRPC.Chat> arrayList18 = arrayList9;
            queryFinalized.dispose();
            if (!arrayList14.isEmpty()) {
                Iterator it = arrayList14.iterator();
                while (it.hasNext()) {
                    TLRPC.Message message = (TLRPC.Message) it.next();
                    this.database.executeFast("DELETE FROM messages_v2 WHERE uid = " + message.dialog_id + " AND mid = " + message.id).stepThis().dispose();
                }
            }
            boolean z2 = false;
            SQLiteCursor queryFinalized2 = this.database.queryFinalized("SELECT m.data, m.send_state, m.mid, m.date, r.random_id, m.uid, m.ttl FROM scheduled_messages_v2 as m LEFT JOIN randoms_v2 as r ON r.mid = m.mid AND r.uid = m.uid WHERE (m.mid < 0 AND m.send_state = 1) OR (m.mid > 0 AND m.send_state = 3) ORDER BY date ASC", new Object[0]);
            while (queryFinalized2.next()) {
                try {
                    NativeByteBuffer byteBufferValue2 = queryFinalized2.byteBufferValue(z2 ? 1 : 0);
                    if (byteBufferValue2 != null) {
                        TLRPC.Message TLdeserialize2 = TLRPC.Message.TLdeserialize(byteBufferValue2, byteBufferValue2.readInt32(z2), z2);
                        TLdeserialize2.send_state = queryFinalized2.intValue(1);
                        TLdeserialize2.readAttachPath(byteBufferValue2, getUserConfig().clientUserId);
                        byteBufferValue2.reuse();
                        if (sparseArray.indexOfKey(TLdeserialize2.id) < 0) {
                            TLdeserialize2.id = queryFinalized2.intValue(2);
                            TLdeserialize2.date = queryFinalized2.intValue(3);
                            if (!queryFinalized2.isNull(4)) {
                                TLdeserialize2.random_id = queryFinalized2.longValue(4);
                            }
                            TLdeserialize2.dialog_id = queryFinalized2.longValue(5);
                            TLdeserialize2.ttl = queryFinalized2.intValue(6);
                            arrayList7.add(TLdeserialize2);
                            sparseArray.put(TLdeserialize2.id, TLdeserialize2);
                            if (DialogObject.isEncryptedDialog(TLdeserialize2.dialog_id)) {
                                int encryptedChatId2 = DialogObject.getEncryptedChatId(TLdeserialize2.dialog_id);
                                if (!arrayList13.contains(Integer.valueOf(encryptedChatId2))) {
                                    arrayList13.add(Integer.valueOf(encryptedChatId2));
                                }
                            } else if (DialogObject.isUserDialog(TLdeserialize2.dialog_id)) {
                                if (!arrayList11.contains(Long.valueOf(TLdeserialize2.dialog_id))) {
                                    valueOf2 = Long.valueOf(TLdeserialize2.dialog_id);
                                    arrayList4 = arrayList11;
                                    arrayList4.add(valueOf2);
                                }
                            } else if (!arrayList12.contains(Long.valueOf(-TLdeserialize2.dialog_id))) {
                                valueOf2 = Long.valueOf(-TLdeserialize2.dialog_id);
                                arrayList4 = arrayList12;
                                arrayList4.add(valueOf2);
                            }
                            addUsersAndChatsFromMessage(TLdeserialize2, arrayList11, arrayList12, null);
                            if (TLdeserialize2.send_state != 3) {
                                if (TLdeserialize2.peer_id.channel_id == 0) {
                                    if (!MessageObject.isUnread(TLdeserialize2)) {
                                        if (DialogObject.isEncryptedDialog(TLdeserialize2.dialog_id)) {
                                        }
                                        TLdeserialize2.send_state = 0;
                                    }
                                }
                                if (TLdeserialize2.id > 0) {
                                    TLdeserialize2.send_state = 0;
                                }
                            }
                        }
                        z2 = false;
                    }
                } catch (Exception e2) {
                    e = e2;
                } catch (Throwable th4) {
                    th = th4;
                }
            }
            queryFinalized2.dispose();
            getUserConfig().getClientUserId();
            boolean z3 = false;
            queryFinalized2 = this.database.queryFinalized("SELECT m.data, m.send_state, m.mid, m.date, m.topic_id, m.ttl FROM quick_replies_messages as m WHERE (m.mid < 0 AND m.send_state = 1) OR (m.mid > 0 AND m.send_state = 3) ORDER BY mid DESC", new Object[0]);
            while (queryFinalized2.next()) {
                NativeByteBuffer byteBufferValue3 = queryFinalized2.byteBufferValue(z3 ? 1 : 0);
                if (byteBufferValue3 != null) {
                    TLRPC.Message TLdeserialize3 = TLRPC.Message.TLdeserialize(byteBufferValue3, byteBufferValue3.readInt32(z3), z3);
                    TLdeserialize3.send_state = queryFinalized2.intValue(1);
                    TLdeserialize3.readAttachPath(byteBufferValue3, getUserConfig().clientUserId);
                    byteBufferValue3.reuse();
                    if (sparseArray.indexOfKey(TLdeserialize3.id) < 0) {
                        TLdeserialize3.id = queryFinalized2.intValue(2);
                        int intValue = queryFinalized2.intValue(4);
                        try {
                            SQLiteCursor queryFinalized3 = this.database.queryFinalized("SELECT name FROM business_replies WHERE topic_id = ?", Integer.valueOf(intValue));
                            String stringValue = queryFinalized3.next() ? queryFinalized3.stringValue(1) : null;
                            queryFinalized3.dispose();
                            if (stringValue == null) {
                                this.database.executeFast("DELETE FROM quick_replies_messages WHERE mid = " + TLdeserialize3.id + " AND topic_id = " + intValue).stepThis().dispose();
                            } else {
                                TLRPC.TL_inputQuickReplyShortcut tL_inputQuickReplyShortcut = new TLRPC.TL_inputQuickReplyShortcut();
                                tL_inputQuickReplyShortcut.shortcut = stringValue;
                                TLdeserialize3.quick_reply_shortcut = tL_inputQuickReplyShortcut;
                                TLdeserialize3.quick_reply_shortcut_id = intValue;
                                if (intValue != 0) {
                                    TLdeserialize3.flags |= 1073741824;
                                }
                                TLdeserialize3.date = queryFinalized2.intValue(3);
                                TLdeserialize3.ttl = queryFinalized2.intValue(5);
                                arrayList7.add(TLdeserialize3);
                                sparseArray.put(TLdeserialize3.id, TLdeserialize3);
                                if (DialogObject.isEncryptedDialog(TLdeserialize3.dialog_id)) {
                                    int encryptedChatId3 = DialogObject.getEncryptedChatId(TLdeserialize3.dialog_id);
                                    if (!arrayList13.contains(Integer.valueOf(encryptedChatId3))) {
                                        arrayList13.add(Integer.valueOf(encryptedChatId3));
                                    }
                                } else if (DialogObject.isUserDialog(TLdeserialize3.dialog_id)) {
                                    if (!arrayList11.contains(Long.valueOf(TLdeserialize3.dialog_id))) {
                                        valueOf = Long.valueOf(TLdeserialize3.dialog_id);
                                        arrayList3 = arrayList11;
                                        arrayList3.add(valueOf);
                                    }
                                } else if (!arrayList12.contains(Long.valueOf(-TLdeserialize3.dialog_id))) {
                                    valueOf = Long.valueOf(-TLdeserialize3.dialog_id);
                                    arrayList3 = arrayList12;
                                    arrayList3.add(valueOf);
                                }
                                addUsersAndChatsFromMessage(TLdeserialize3, arrayList11, arrayList12, null);
                                if (TLdeserialize3.send_state != 3) {
                                    if (TLdeserialize3.peer_id.channel_id == 0) {
                                        if (!MessageObject.isUnread(TLdeserialize3)) {
                                            if (DialogObject.isEncryptedDialog(TLdeserialize3.dialog_id)) {
                                            }
                                            TLdeserialize3.send_state = 0;
                                        }
                                    }
                                    if (TLdeserialize3.id > 0) {
                                        TLdeserialize3.send_state = 0;
                                    }
                                }
                            }
                        } catch (Exception e3) {
                            e = e3;
                            exc = e;
                            sQLiteCursor = queryFinalized2;
                            try {
                                checkSQLException(exc);
                                if (sQLiteCursor != null) {
                                    sQLiteCursor.dispose();
                                    return;
                                }
                                return;
                            } catch (Throwable th5) {
                                th2 = th5;
                                th = th2;
                                if (sQLiteCursor == null) {
                                    throw th;
                                }
                                sQLiteCursor.dispose();
                                throw th;
                            }
                        } catch (Throwable th6) {
                            th = th6;
                            th = th;
                            sQLiteCursor = queryFinalized2;
                            if (sQLiteCursor == null) {
                            }
                        }
                    }
                    z3 = false;
                }
            }
            queryFinalized2.dispose();
            if (!arrayList13.isEmpty()) {
                getEncryptedChatsInternal(TextUtils.join(",", arrayList13), arrayList10, arrayList11);
            }
            if (arrayList11.isEmpty()) {
                arrayList = arrayList17;
            } else {
                arrayList = arrayList17;
                getUsersInternal(arrayList11, arrayList);
            }
            if (arrayList12.isEmpty()) {
                arrayList2 = arrayList18;
            } else {
                StringBuilder sb = new StringBuilder();
                for (int i2 = 0; i2 < arrayList12.size(); i2++) {
                    Long l = arrayList12.get(i2);
                    if (sb.length() != 0) {
                        sb.append(",");
                    }
                    sb.append(l);
                }
                arrayList2 = arrayList18;
                getChatsInternal(sb.toString(), arrayList2);
            }
            getSendMessagesHelper().processUnsentMessages(arrayList6, arrayList7, arrayList, arrayList2, arrayList10);
        } catch (Exception e4) {
            exc = e4;
            sQLiteCursor = null;
        } catch (Throwable th7) {
            th = th7;
            sQLiteCursor = null;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$getUserSync$238(TLRPC.User[] userArr, long j, CountDownLatch countDownLatch) {
        userArr[0] = getUser(j);
        countDownLatch.countDown();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$getWallpapers$77(ArrayList arrayList) {
        NotificationCenter.getGlobalInstance().lambda$postNotificationNameOnUIThread$1(NotificationCenter.wallpapersDidLoad, arrayList);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$getWallpapers$78() {
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                sQLiteCursor = this.database.queryFinalized("SELECT data FROM wallpapers2 WHERE 1 ORDER BY num ASC", new Object[0]);
                final ArrayList arrayList = new ArrayList();
                while (sQLiteCursor.next()) {
                    NativeByteBuffer byteBufferValue = sQLiteCursor.byteBufferValue(0);
                    if (byteBufferValue != null) {
                        TLRPC.WallPaper TLdeserialize = TLRPC.WallPaper.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                        byteBufferValue.reuse();
                        if (TLdeserialize != null) {
                            arrayList.add(TLdeserialize);
                        }
                    }
                }
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda141
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesStorage.lambda$getWallpapers$77(arrayList);
                    }
                });
            } catch (Exception e) {
                checkSQLException(e);
                if (sQLiteCursor == null) {
                    return;
                }
            }
            sQLiteCursor.dispose();
        } catch (Throwable th) {
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
            throw th;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$getWidgetDialogIds$161(int i, ArrayList arrayList, ArrayList arrayList2, ArrayList arrayList3, boolean z, int i2, CountDownLatch countDownLatch) {
        Long valueOf;
        ArrayList<Long> arrayList4;
        Long valueOf2;
        ArrayList<Long> arrayList5;
        Long valueOf3;
        ArrayList<Long> arrayList6;
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                ArrayList<Long> arrayList7 = new ArrayList<>();
                ArrayList<Long> arrayList8 = new ArrayList<>();
                SQLiteCursor queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT did FROM shortcut_widget WHERE id = %d ORDER BY ord ASC", Integer.valueOf(i)), new Object[0]);
                while (queryFinalized.next()) {
                    try {
                        long longValue = queryFinalized.longValue(0);
                        if (longValue != -1) {
                            arrayList.add(Long.valueOf(longValue));
                            if (arrayList2 != null && arrayList3 != null) {
                                if (DialogObject.isUserDialog(longValue)) {
                                    valueOf3 = Long.valueOf(longValue);
                                    arrayList6 = arrayList7;
                                } else {
                                    valueOf3 = Long.valueOf(-longValue);
                                    arrayList6 = arrayList8;
                                }
                                arrayList6.add(valueOf3);
                            }
                        }
                    } catch (Exception e) {
                        e = e;
                        sQLiteCursor = queryFinalized;
                        checkSQLException(e);
                        if (sQLiteCursor != null) {
                            sQLiteCursor.dispose();
                        }
                        countDownLatch.countDown();
                    } catch (Throwable th) {
                        th = th;
                        sQLiteCursor = queryFinalized;
                        if (sQLiteCursor != null) {
                            sQLiteCursor.dispose();
                        }
                        countDownLatch.countDown();
                        throw th;
                    }
                }
                queryFinalized.dispose();
                if (!z && arrayList.isEmpty()) {
                    if (i2 == 0) {
                        queryFinalized = this.database.queryFinalized("SELECT did FROM dialogs WHERE folder_id = 0 ORDER BY pinned DESC, date DESC LIMIT 0,10", new Object[0]);
                        while (queryFinalized.next()) {
                            long longValue2 = queryFinalized.longValue(0);
                            if (!DialogObject.isFolderDialogId(longValue2)) {
                                arrayList.add(Long.valueOf(longValue2));
                                if (arrayList2 != null && arrayList3 != null) {
                                    if (DialogObject.isUserDialog(longValue2)) {
                                        valueOf2 = Long.valueOf(longValue2);
                                        arrayList5 = arrayList7;
                                    } else {
                                        valueOf2 = Long.valueOf(-longValue2);
                                        arrayList5 = arrayList8;
                                    }
                                    arrayList5.add(valueOf2);
                                }
                            }
                        }
                    } else {
                        queryFinalized = getMessagesStorage().getDatabase().queryFinalized("SELECT did FROM chat_hints WHERE type = 0 ORDER BY rating DESC LIMIT 4", new Object[0]);
                        while (queryFinalized.next()) {
                            long longValue3 = queryFinalized.longValue(0);
                            arrayList.add(Long.valueOf(longValue3));
                            if (arrayList2 != null && arrayList3 != null) {
                                if (DialogObject.isUserDialog(longValue3)) {
                                    valueOf = Long.valueOf(longValue3);
                                    arrayList4 = arrayList7;
                                } else {
                                    valueOf = Long.valueOf(-longValue3);
                                    arrayList4 = arrayList8;
                                }
                                arrayList4.add(valueOf);
                            }
                        }
                    }
                    queryFinalized.dispose();
                }
                if (arrayList2 != null && arrayList3 != null) {
                    if (!arrayList8.isEmpty()) {
                        getChatsInternal(TextUtils.join(",", arrayList8), arrayList3);
                    }
                    if (!arrayList7.isEmpty()) {
                        getUsersInternal(arrayList7, (ArrayList<TLRPC.User>) arrayList2);
                    }
                }
            } catch (Exception e2) {
                e = e2;
            }
            countDownLatch.countDown();
        } catch (Throwable th2) {
            th = th2;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$getWidgetDialogs$162(int i, ArrayList arrayList, int i2, LongSparseArray longSparseArray, LongSparseArray longSparseArray2, ArrayList arrayList2, ArrayList arrayList3, CountDownLatch countDownLatch) {
        boolean z;
        Long valueOf;
        ArrayList<Long> arrayList4;
        Long valueOf2;
        ArrayList<Long> arrayList5;
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                ArrayList<Long> arrayList6 = new ArrayList<>();
                ArrayList<Long> arrayList7 = new ArrayList<>();
                SQLiteCursor queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT did FROM shortcut_widget WHERE id = %d ORDER BY ord ASC", Integer.valueOf(i)), new Object[0]);
                while (queryFinalized.next()) {
                    try {
                        long longValue = queryFinalized.longValue(0);
                        if (longValue != -1) {
                            arrayList.add(Long.valueOf(longValue));
                            if (DialogObject.isUserDialog(longValue)) {
                                valueOf2 = Long.valueOf(longValue);
                                arrayList5 = arrayList6;
                            } else {
                                valueOf2 = Long.valueOf(-longValue);
                                arrayList5 = arrayList7;
                            }
                            arrayList5.add(valueOf2);
                        }
                    } catch (Exception e) {
                        e = e;
                        sQLiteCursor = queryFinalized;
                        checkSQLException(e);
                        if (sQLiteCursor != null) {
                            sQLiteCursor.dispose();
                        }
                        countDownLatch.countDown();
                    } catch (Throwable th) {
                        th = th;
                        sQLiteCursor = queryFinalized;
                        if (sQLiteCursor != null) {
                            sQLiteCursor.dispose();
                        }
                        countDownLatch.countDown();
                        throw th;
                    }
                }
                queryFinalized.dispose();
                if (arrayList.isEmpty() && i2 == 1) {
                    SQLiteCursor queryFinalized2 = getMessagesStorage().getDatabase().queryFinalized("SELECT did FROM chat_hints WHERE type = 0 ORDER BY rating DESC LIMIT 4", new Object[0]);
                    while (queryFinalized2.next()) {
                        long longValue2 = queryFinalized2.longValue(0);
                        arrayList.add(Long.valueOf(longValue2));
                        if (DialogObject.isUserDialog(longValue2)) {
                            valueOf = Long.valueOf(longValue2);
                            arrayList4 = arrayList6;
                        } else {
                            valueOf = Long.valueOf(-longValue2);
                            arrayList4 = arrayList7;
                        }
                        arrayList4.add(valueOf);
                    }
                    queryFinalized2.dispose();
                }
                if (arrayList.isEmpty()) {
                    queryFinalized = this.database.queryFinalized("SELECT d.did, d.last_mid, d.unread_count, d.date, m.data, m.read_state, m.mid, m.send_state, m.date FROM dialogs as d LEFT JOIN messages_v2 as m ON d.last_mid = m.mid AND d.did = m.uid WHERE d.folder_id = 0 ORDER BY d.pinned DESC, d.date DESC LIMIT 0,10", new Object[0]);
                    z = true;
                } else {
                    queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT d.did, d.last_mid, d.unread_count, d.date, m.data, m.read_state, m.mid, m.send_state, m.date FROM dialogs as d LEFT JOIN messages_v2 as m ON d.last_mid = m.mid AND d.did = m.uid WHERE d.did IN(%s)", TextUtils.join(",", arrayList)), new Object[0]);
                    z = false;
                }
                while (queryFinalized.next()) {
                    long longValue3 = queryFinalized.longValue(0);
                    if (!DialogObject.isFolderDialogId(longValue3)) {
                        if (z) {
                            arrayList.add(Long.valueOf(longValue3));
                        }
                        TLRPC.TL_dialog tL_dialog = new TLRPC.TL_dialog();
                        tL_dialog.id = longValue3;
                        tL_dialog.top_message = queryFinalized.intValue(1);
                        tL_dialog.unread_count = queryFinalized.intValue(2);
                        tL_dialog.last_message_date = queryFinalized.intValue(3);
                        longSparseArray.put(tL_dialog.id, tL_dialog);
                        NativeByteBuffer byteBufferValue = queryFinalized.byteBufferValue(4);
                        if (byteBufferValue != null) {
                            TLRPC.Message TLdeserialize = TLRPC.Message.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                            TLdeserialize.readAttachPath(byteBufferValue, getUserConfig().clientUserId);
                            byteBufferValue.reuse();
                            MessageObject.setUnreadFlags(TLdeserialize, queryFinalized.intValue(5));
                            TLdeserialize.id = queryFinalized.intValue(6);
                            TLdeserialize.send_state = queryFinalized.intValue(7);
                            int intValue = queryFinalized.intValue(8);
                            if (intValue != 0) {
                                tL_dialog.last_message_date = intValue;
                            }
                            long j = tL_dialog.id;
                            TLdeserialize.dialog_id = j;
                            longSparseArray2.put(j, TLdeserialize);
                            addUsersAndChatsFromMessage(TLdeserialize, arrayList6, arrayList7, null);
                        }
                    }
                }
                queryFinalized.dispose();
                if (!z && arrayList.size() > longSparseArray.size()) {
                    int size = arrayList.size();
                    for (int i3 = 0; i3 < size; i3++) {
                        Long l = (Long) arrayList.get(i3);
                        long longValue4 = l.longValue();
                        if (longSparseArray.get(((Long) arrayList.get(i3)).longValue()) == null) {
                            TLRPC.TL_dialog tL_dialog2 = new TLRPC.TL_dialog();
                            tL_dialog2.id = longValue4;
                            longSparseArray.put(longValue4, tL_dialog2);
                            if (DialogObject.isChatDialog(longValue4)) {
                                long j2 = -longValue4;
                                if (arrayList7.contains(Long.valueOf(j2))) {
                                    arrayList7.add(Long.valueOf(j2));
                                }
                            } else if (arrayList6.contains(l)) {
                                arrayList6.add(l);
                            }
                        }
                    }
                }
                if (!arrayList7.isEmpty()) {
                    getChatsInternal(TextUtils.join(",", arrayList7), arrayList2);
                }
                if (!arrayList6.isEmpty()) {
                    getUsersInternal(arrayList6, (ArrayList<TLRPC.User>) arrayList3);
                }
            } catch (Throwable th2) {
                th = th2;
            }
        } catch (Exception e2) {
            e = e2;
        }
        countDownLatch.countDown();
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Code restructure failed: missing block: B:11:0x002e, code lost:
    
        if (r1 == null) goto L5;
     */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$hasAuthMessage$169(int i, boolean[] zArr, CountDownLatch countDownLatch) {
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                sQLiteCursor = this.database.queryFinalized(String.format(Locale.US, "SELECT mid FROM messages_v2 WHERE uid = 777000 AND date = %d AND mid < 0 LIMIT 1", Integer.valueOf(i)), new Object[0]);
                zArr[0] = sQLiteCursor.next();
            } catch (Exception e) {
                checkSQLException(e);
            }
            sQLiteCursor.dispose();
            countDownLatch.countDown();
        } catch (Throwable th) {
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
            countDownLatch.countDown();
            throw th;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$hasInviteMeMessage$137(long j, boolean[] zArr, CountDownLatch countDownLatch) {
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                long clientUserId = getUserConfig().getClientUserId();
                sQLiteCursor = this.database.queryFinalized("SELECT data FROM messages_v2 WHERE uid = " + (-j) + " AND out = 0 ORDER BY mid DESC LIMIT 100", new Object[0]);
                while (true) {
                    if (!sQLiteCursor.next()) {
                        break;
                    }
                    NativeByteBuffer byteBufferValue = sQLiteCursor.byteBufferValue(0);
                    if (byteBufferValue != null) {
                        TLRPC.Message TLdeserialize = TLRPC.Message.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                        byteBufferValue.reuse();
                        TLRPC.MessageAction messageAction = TLdeserialize.action;
                        if ((messageAction instanceof TLRPC.TL_messageActionChatAddUser) && messageAction.users.contains(Long.valueOf(clientUserId))) {
                            zArr[0] = true;
                            break;
                        }
                    }
                }
                sQLiteCursor.dispose();
            } catch (Exception e) {
                checkSQLException(e);
                if (sQLiteCursor != null) {
                    sQLiteCursor.dispose();
                }
            }
            countDownLatch.countDown();
        } catch (Throwable th) {
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
            countDownLatch.countDown();
            throw th;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Code restructure failed: missing block: B:17:0x0030, code lost:
    
        if (r2 == null) goto L16;
     */
    /* JADX WARN: Code restructure failed: missing block: B:6:0x0025, code lost:
    
        if (r2.intValue(0) != 0) goto L15;
     */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$isDialogHasTopMessage$168(long j, Runnable runnable) {
        boolean z = true;
        boolean z2 = false;
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                sQLiteCursor = this.database.queryFinalized(String.format(Locale.US, "SELECT last_mid FROM dialogs WHERE did = %d", Long.valueOf(j)), new Object[0]);
                if (sQLiteCursor.next()) {
                }
            } catch (Exception e) {
                checkSQLException(e);
            }
            z = false;
            sQLiteCursor.dispose();
            z2 = z;
            if (z2) {
                return;
            }
            AndroidUtilities.runOnUIThread(runnable);
        } catch (Throwable th) {
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
            throw th;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$isMigratedChat$135(long j, boolean[] zArr, CountDownLatch countDownLatch) {
        SQLiteCursor queryFinalized;
        TLRPC.ChatFull chatFull;
        NativeByteBuffer byteBufferValue;
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                queryFinalized = this.database.queryFinalized("SELECT info FROM chat_settings_v2 WHERE uid = " + j, new Object[0]);
            } catch (Throwable th) {
                th = th;
            }
        } catch (Exception e) {
            e = e;
        }
        try {
            new ArrayList();
            if (!queryFinalized.next() || (byteBufferValue = queryFinalized.byteBufferValue(0)) == null) {
                chatFull = null;
            } else {
                chatFull = TLRPC.ChatFull.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                byteBufferValue.reuse();
            }
            queryFinalized.dispose();
            zArr[0] = (chatFull instanceof TLRPC.TL_channelFull) && chatFull.migrated_from_chat_id != 0;
            countDownLatch.countDown();
        } catch (Exception e2) {
            e = e2;
            sQLiteCursor = queryFinalized;
            checkSQLException(e);
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
            countDownLatch.countDown();
        } catch (Throwable th2) {
            th = th2;
            sQLiteCursor = queryFinalized;
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
            countDownLatch.countDown();
            throw th;
        }
        countDownLatch.countDown();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadChannelAdmins$117(long j) {
        SQLiteCursor queryFinalized;
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                queryFinalized = this.database.queryFinalized("SELECT uid, data FROM channel_admins_v3 WHERE did = " + j, new Object[0]);
            } catch (Throwable th) {
                th = th;
            }
        } catch (Exception e) {
            e = e;
        }
        try {
            LongSparseArray longSparseArray = new LongSparseArray();
            while (queryFinalized.next()) {
                NativeByteBuffer byteBufferValue = queryFinalized.byteBufferValue(1);
                if (byteBufferValue != null) {
                    TLRPC.ChannelParticipant TLdeserialize = TLRPC.ChannelParticipant.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                    byteBufferValue.reuse();
                    if (TLdeserialize != null) {
                        longSparseArray.put(queryFinalized.longValue(0), TLdeserialize);
                    }
                }
            }
            queryFinalized.dispose();
            getMessagesController().processLoadedChannelAdmins(longSparseArray, j, true);
        } catch (Exception e2) {
            e = e2;
            sQLiteCursor = queryFinalized;
            checkSQLException(e);
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
        } catch (Throwable th2) {
            th = th2;
            sQLiteCursor = queryFinalized;
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
            throw th;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadChatInfo$138(TLRPC.ChatFull[] chatFullArr, long j, boolean z, boolean z2, boolean z3, int i, CountDownLatch countDownLatch) {
        chatFullArr[0] = loadChatInfoInternal(j, z, z2, z3, i);
        if (countDownLatch != null) {
            countDownLatch.countDown();
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ int lambda$loadDialogFilters$63(MessagesController.DialogFilter dialogFilter, MessagesController.DialogFilter dialogFilter2) {
        int i = dialogFilter.order;
        int i2 = dialogFilter2.order;
        if (i > i2) {
            return 1;
        }
        return i < i2 ? -1 : 0;
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:31:0x0113 A[Catch: all -> 0x00a1, Exception -> 0x00a5, TryCatch #8 {Exception -> 0x00a5, all -> 0x00a1, blocks: (B:6:0x0037, B:8:0x0041, B:14:0x0085, B:16:0x00c4, B:18:0x00ca, B:20:0x00d0, B:22:0x00d6, B:23:0x00df, B:25:0x00e8, B:27:0x00f7, B:28:0x010a, B:29:0x010d, B:31:0x0113, B:33:0x011e, B:34:0x013c, B:38:0x0127, B:40:0x012d, B:42:0x0137, B:44:0x0140, B:46:0x014e, B:49:0x00fe, B:51:0x0104, B:53:0x0156, B:54:0x00a9, B:56:0x0160, B:63:0x0168), top: B:5:0x0037 }] */
    /* JADX WARN: Removed duplicated region for block: B:38:0x0127 A[Catch: all -> 0x00a1, Exception -> 0x00a5, TryCatch #8 {Exception -> 0x00a5, all -> 0x00a1, blocks: (B:6:0x0037, B:8:0x0041, B:14:0x0085, B:16:0x00c4, B:18:0x00ca, B:20:0x00d0, B:22:0x00d6, B:23:0x00df, B:25:0x00e8, B:27:0x00f7, B:28:0x010a, B:29:0x010d, B:31:0x0113, B:33:0x011e, B:34:0x013c, B:38:0x0127, B:40:0x012d, B:42:0x0137, B:44:0x0140, B:46:0x014e, B:49:0x00fe, B:51:0x0104, B:53:0x0156, B:54:0x00a9, B:56:0x0160, B:63:0x0168), top: B:5:0x0037 }] */
    /* JADX WARN: Removed duplicated region for block: B:80:0x026a  */
    /* JADX WARN: Removed duplicated region for block: B:82:0x026f  */
    /* JADX WARN: Removed duplicated region for block: B:85:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:89:0x0276  */
    /* JADX WARN: Removed duplicated region for block: B:91:0x027b  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$loadDialogFilters$64() {
        SQLitePreparedStatement sQLitePreparedStatement;
        SQLiteCursor sQLiteCursor;
        SQLitePreparedStatement sQLitePreparedStatement2;
        ArrayList<Long> arrayList;
        ArrayList<Long> arrayList2;
        ArrayList<Integer> arrayList3;
        ArrayList<Long> arrayList4;
        boolean z;
        ArrayList<Long> arrayList5;
        Long valueOf;
        Long valueOf2;
        ArrayList<Long> arrayList6;
        try {
            try {
                arrayList = new ArrayList<>();
                arrayList2 = new ArrayList<>();
                arrayList3 = new ArrayList<>();
                arrayList4 = new ArrayList<>();
                SparseArray sparseArray = new SparseArray();
                arrayList.add(Long.valueOf(getUserConfig().getClientUserId()));
                int i = 0;
                SQLiteCursor sQLiteCursor2 = this.database.queryFinalized("SELECT id, ord, unread_count, flags, title, color FROM dialog_filter WHERE 1", new Object[0]);
                boolean z2 = false;
                z = false;
                while (sQLiteCursor2.next()) {
                    try {
                        MessagesController.DialogFilter dialogFilter = new MessagesController.DialogFilter();
                        dialogFilter.id = sQLiteCursor2.intValue(i);
                        dialogFilter.order = sQLiteCursor2.intValue(1);
                        dialogFilter.unreadCount = -1;
                        dialogFilter.pendingUnreadCount = -1;
                        dialogFilter.flags = sQLiteCursor2.intValue(3);
                        dialogFilter.name = sQLiteCursor2.stringValue(4);
                        dialogFilter.color = sQLiteCursor2.intValue(5);
                        this.dialogFilters.add(dialogFilter);
                        this.dialogFiltersMap.put(dialogFilter.id, dialogFilter);
                        sparseArray.put(dialogFilter.id, dialogFilter);
                        if (dialogFilter.pendingUnreadCount < 0) {
                            z = true;
                        }
                        int i2 = 2;
                        int i3 = 0;
                        while (i3 < i2) {
                            SQLiteCursor queryFinalized = i3 == 0 ? this.database.queryFinalized("SELECT peer, pin FROM dialog_filter_pin_v2 WHERE id = " + dialogFilter.id, new Object[i]) : this.database.queryFinalized("SELECT peer FROM dialog_filter_ep WHERE id = " + dialogFilter.id, new Object[i]);
                            while (queryFinalized.next()) {
                                long longValue = queryFinalized.longValue(i);
                                if (i3 == 0) {
                                    if (!DialogObject.isEncryptedDialog(longValue)) {
                                        dialogFilter.alwaysShow.add(Long.valueOf(longValue));
                                    }
                                    int intValue = queryFinalized.intValue(1);
                                    if (intValue != Integer.MIN_VALUE) {
                                        dialogFilter.pinnedDialogs.put(longValue, intValue);
                                        if (!arrayList4.contains(Long.valueOf(longValue))) {
                                            valueOf = Long.valueOf(longValue);
                                            arrayList5 = arrayList4;
                                            arrayList5.add(valueOf);
                                        }
                                    }
                                    if (DialogObject.isChatDialog(longValue)) {
                                        if (!DialogObject.isUserDialog(longValue)) {
                                            int encryptedChatId = DialogObject.getEncryptedChatId(longValue);
                                            if (!arrayList3.contains(Integer.valueOf(encryptedChatId))) {
                                                arrayList3.add(Integer.valueOf(encryptedChatId));
                                            }
                                        } else if (!arrayList.contains(Long.valueOf(longValue))) {
                                            valueOf2 = Long.valueOf(longValue);
                                            arrayList6 = arrayList;
                                            arrayList6.add(valueOf2);
                                        }
                                        i = 0;
                                    } else {
                                        long j = -longValue;
                                        if (arrayList2.contains(Long.valueOf(j))) {
                                            i = 0;
                                        } else {
                                            valueOf2 = Long.valueOf(j);
                                            arrayList6 = arrayList2;
                                            arrayList6.add(valueOf2);
                                            i = 0;
                                        }
                                    }
                                } else {
                                    if (!DialogObject.isEncryptedDialog(longValue)) {
                                        arrayList5 = dialogFilter.neverShow;
                                        valueOf = Long.valueOf(longValue);
                                        arrayList5.add(valueOf);
                                    }
                                    if (DialogObject.isChatDialog(longValue)) {
                                    }
                                }
                            }
                            queryFinalized.dispose();
                            i3++;
                            i2 = 2;
                            i = 0;
                        }
                        if (dialogFilter.id == 0) {
                            z2 = true;
                        }
                        i = 0;
                    } catch (Exception e) {
                        e = e;
                        sQLiteCursor = sQLiteCursor2;
                        sQLitePreparedStatement2 = null;
                        try {
                            checkSQLException(e);
                            if (sQLiteCursor != null) {
                                sQLiteCursor.dispose();
                            }
                            if (sQLitePreparedStatement2 == null) {
                                sQLitePreparedStatement2.dispose();
                                return;
                            }
                            return;
                        } catch (Throwable th) {
                            th = th;
                            if (sQLiteCursor != null) {
                                sQLiteCursor.dispose();
                            }
                            if (sQLitePreparedStatement2 != null) {
                                sQLitePreparedStatement2.dispose();
                            }
                            throw th;
                        }
                    } catch (Throwable th2) {
                        th = th2;
                        sQLitePreparedStatement = null;
                        sQLitePreparedStatement2 = sQLitePreparedStatement;
                        sQLiteCursor = sQLiteCursor2;
                        if (sQLiteCursor != null) {
                        }
                        if (sQLitePreparedStatement2 != null) {
                        }
                        throw th;
                    }
                }
                sQLiteCursor2.dispose();
                if (!z2) {
                    MessagesController.DialogFilter dialogFilter2 = new MessagesController.DialogFilter();
                    dialogFilter2.id = 0;
                    dialogFilter2.order = 0;
                    dialogFilter2.color = -1;
                    dialogFilter2.name = "ALL_CHATS";
                    for (int i4 = 0; i4 < this.dialogFilters.size(); i4++) {
                        this.dialogFilters.get(i4).order++;
                    }
                    this.dialogFilters.add(dialogFilter2);
                    this.dialogFiltersMap.put(dialogFilter2.id, dialogFilter2);
                    sparseArray.put(dialogFilter2.id, dialogFilter2);
                    sQLitePreparedStatement = this.database.executeFast("REPLACE INTO dialog_filter VALUES(?, ?, ?, ?, ?, ?)");
                    try {
                        sQLitePreparedStatement.bindInteger(1, dialogFilter2.id);
                        sQLitePreparedStatement.bindInteger(2, dialogFilter2.order);
                        sQLitePreparedStatement.bindInteger(3, dialogFilter2.unreadCount);
                        sQLitePreparedStatement.bindInteger(4, dialogFilter2.flags);
                        sQLitePreparedStatement.bindString(5, dialogFilter2.name);
                        sQLitePreparedStatement.bindInteger(6, dialogFilter2.color);
                        sQLitePreparedStatement.stepThis().dispose();
                    } catch (Exception e2) {
                        e = e2;
                        sQLitePreparedStatement2 = sQLitePreparedStatement;
                        sQLiteCursor = null;
                        checkSQLException(e);
                        if (sQLiteCursor != null) {
                        }
                        if (sQLitePreparedStatement2 == null) {
                        }
                    } catch (Throwable th3) {
                        th = th3;
                        sQLiteCursor2 = null;
                        sQLitePreparedStatement2 = sQLitePreparedStatement;
                        sQLiteCursor = sQLiteCursor2;
                        if (sQLiteCursor != null) {
                        }
                        if (sQLitePreparedStatement2 != null) {
                        }
                        throw th;
                    }
                }
            } catch (Exception e3) {
                e = e3;
                sQLiteCursor = null;
            }
        } catch (Throwable th4) {
            th = th4;
            sQLitePreparedStatement = null;
        }
        try {
            Collections.sort(this.dialogFilters, new Comparator() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda42
                @Override // java.util.Comparator
                public final int compare(Object obj, Object obj2) {
                    int lambda$loadDialogFilters$63;
                    lambda$loadDialogFilters$63 = MessagesStorage.lambda$loadDialogFilters$63((MessagesController.DialogFilter) obj, (MessagesController.DialogFilter) obj2);
                    return lambda$loadDialogFilters$63;
                }
            });
            if (z) {
                calcUnreadCounters(true);
            }
            TLRPC.messages_Dialogs loadDialogsByIds = !arrayList4.isEmpty() ? loadDialogsByIds(TextUtils.join(",", arrayList4), arrayList, arrayList2, arrayList3) : new TLRPC.TL_messages_dialogs();
            ArrayList<TLRPC.User> arrayList7 = new ArrayList<>();
            ArrayList<TLRPC.Chat> arrayList8 = new ArrayList<>();
            ArrayList<TLRPC.EncryptedChat> arrayList9 = new ArrayList<>();
            if (!arrayList3.isEmpty()) {
                getEncryptedChatsInternal(TextUtils.join(",", arrayList3), arrayList9, arrayList);
            }
            if (!arrayList.isEmpty()) {
                getUsersInternal(arrayList, arrayList7);
            }
            if (!arrayList2.isEmpty()) {
                getChatsInternal(TextUtils.join(",", arrayList2), arrayList8);
            }
            getMessagesController().processLoadedDialogFilters(new ArrayList<>(this.dialogFilters), loadDialogsByIds, null, arrayList7, arrayList8, arrayList9, 0, null);
        } catch (Throwable th5) {
            th = th5;
            sQLiteCursor = null;
            sQLitePreparedStatement2 = null;
            if (sQLiteCursor != null) {
            }
            if (sQLitePreparedStatement2 != null) {
            }
            throw th;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadMessageAttachPaths$215(ArrayList arrayList, Runnable runnable) {
        NativeByteBuffer byteBufferValue;
        long clientUserId = getUserConfig().getClientUserId();
        Iterator it = arrayList.iterator();
        while (it.hasNext()) {
            MessageObject messageObject = (MessageObject) it.next();
            if (!messageObject.scheduled && !messageObject.isQuickReply()) {
                SQLiteCursor sQLiteCursor = null;
                try {
                    try {
                        sQLiteCursor = this.database.queryFinalized("SELECT data FROM messages_v2 WHERE uid = ? AND mid = ?", Long.valueOf(messageObject.getDialogId()), Integer.valueOf(messageObject.getId()));
                        if (sQLiteCursor.next() && (byteBufferValue = sQLiteCursor.byteBufferValue(0)) != null) {
                            TLRPC.Message TLdeserialize = TLRPC.Message.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                            TLdeserialize.readAttachPath(byteBufferValue, clientUserId);
                            byteBufferValue.reuse();
                            messageObject.messageOwner.attachPath = TLdeserialize.attachPath;
                            messageObject.checkMediaExistance();
                        }
                    } catch (Exception e) {
                        FileLog.e(e);
                        if (sQLiteCursor != null) {
                        }
                    }
                    sQLiteCursor.dispose();
                } catch (Throwable th) {
                    if (sQLiteCursor != null) {
                        sQLiteCursor.dispose();
                    }
                    throw th;
                }
            }
        }
        AndroidUtilities.runOnUIThread(runnable);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadPendingTasks$12(TLRPC.Chat chat, long j) {
        getMessagesController().loadUnknownChannel(chat, j);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadPendingTasks$13(long j, int i, long j2) {
        getMessagesController().getChannelDifference(j, i, j2, null);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadPendingTasks$14(TLRPC.Dialog dialog, TLRPC.InputPeer inputPeer, long j) {
        getMessagesController().checkLastDialogMessage(dialog, inputPeer, j);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadPendingTasks$15(long j, boolean z, TLRPC.InputPeer inputPeer, long j2) {
        getMessagesController().pinDialog(j, z, inputPeer, j2);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadPendingTasks$16(long j, int i, long j2, TLRPC.InputChannel inputChannel) {
        getMessagesController().getChannelDifference(j, i, j2, inputChannel);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadPendingTasks$17(long j, int i, long j2, TLRPC.InputChannel inputChannel) {
        getMessagesController().getChannelDifference(j, i, j2, inputChannel);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadPendingTasks$18(long j, long j2, TLObject tLObject) {
        getMessagesController().deleteMessages(null, null, null, -j, true, 0, false, j2, tLObject, 0);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadPendingTasks$19(long j, long j2, TLObject tLObject) {
        getMessagesController().deleteMessages(null, null, null, j, true, 0, false, j2, tLObject, 0);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadPendingTasks$20(long j, long j2, TLObject tLObject, int i) {
        getMessagesController().deleteMessages(null, null, null, j, true, 0, false, j2, tLObject, i);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadPendingTasks$21(long j, TLRPC.InputPeer inputPeer, long j2) {
        getMessagesController().markDialogAsUnread(j, inputPeer, j2);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadPendingTasks$22(long j, int i, TLRPC.InputChannel inputChannel, int i2, long j2) {
        getMessagesController().markMessageAsRead2(-j, i, inputChannel, i2, j2);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadPendingTasks$23(long j, int i, TLRPC.InputChannel inputChannel, int i2, long j2, int i3) {
        getMessagesController().markMessageAsRead2(j, i, inputChannel, i2, j2, i3 == 23);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadPendingTasks$24(Theme.OverrideWallpaperInfo overrideWallpaperInfo, boolean z, long j) {
        getMessagesController().saveWallpaperToServer(null, overrideWallpaperInfo, z, j);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadPendingTasks$25(long j, boolean z, int i, int i2, boolean z2, TLRPC.InputPeer inputPeer, long j2) {
        getMessagesController().deleteDialog(j, z ? 1 : 0, i, i2, z2, inputPeer, j2);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadPendingTasks$26(TLRPC.InputPeer inputPeer, long j) {
        getMessagesController().loadUnknownDialog(inputPeer, j);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadPendingTasks$27(int i, ArrayList arrayList, long j) {
        getMessagesController().reorderPinnedDialogs(i, arrayList, j);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadPendingTasks$28(int i, ArrayList arrayList, long j) {
        getMessagesController().addDialogToFolder(null, i, -1, arrayList, j);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadPendingTasks$29(long j, long j2, TLObject tLObject) {
        getMessagesController().deleteMessages(null, null, null, j, true, 1, false, j2, tLObject, 0);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadPendingTasks$30(TLRPC.InputPeer inputPeer, long j) {
        getMessagesController().reloadMentionsCountForChannel(inputPeer, j);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadPendingTasks$31(int i, boolean z, long j) {
        getSecretChatHelper().declineSecretChat(i, z, j);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadPendingTasks$32(long j, long j2, int i) {
        getMessagesController().lambda$checkDeletingTask$78(j, j2, i);
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Can't fix incorrect switch cases order, some code will duplicate */
    /* JADX WARN: Removed duplicated region for block: B:35:0x00bd A[Catch: Exception -> 0x0043, TryCatch #0 {Exception -> 0x0043, blocks: (B:3:0x0002, B:4:0x000d, B:6:0x0013, B:9:0x001e, B:10:0x0023, B:11:0x0026, B:13:0x0351, B:16:0x002b, B:18:0x003d, B:21:0x004b, B:22:0x0324, B:24:0x0056, B:25:0x0069, B:26:0x007c, B:27:0x034e, B:28:0x0099, B:30:0x00a7, B:33:0x00b2, B:35:0x00bd, B:37:0x00cf, B:39:0x00d5, B:41:0x00db, B:42:0x00e3, B:43:0x00f3, B:44:0x0102, B:45:0x014a, B:48:0x015d, B:49:0x0168, B:51:0x0178, B:53:0x0186, B:54:0x0191, B:56:0x01a1, B:58:0x01af, B:59:0x01ba, B:60:0x01cb, B:62:0x01f2, B:64:0x0205, B:65:0x020d, B:66:0x0218, B:67:0x022f, B:69:0x023e, B:71:0x024c, B:73:0x0247, B:74:0x0257, B:75:0x0275, B:76:0x0290, B:77:0x02b1, B:79:0x02e9, B:82:0x02f9, B:85:0x0303, B:88:0x030d, B:89:0x0313, B:90:0x0328, B:91:0x033d, B:93:0x0347, B:96:0x0356), top: B:2:0x0002 }] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$loadPendingTasks$33() {
        DispatchQueue dispatchQueue;
        Runnable runnable;
        Runnable runnable2;
        Runnable runnable3;
        try {
            SQLiteCursor queryFinalized = this.database.queryFinalized("SELECT id, data FROM pending_tasks WHERE 1", new Object[0]);
            while (queryFinalized.next()) {
                final long longValue = queryFinalized.longValue(0);
                NativeByteBuffer byteBufferValue = queryFinalized.byteBufferValue(1);
                if (byteBufferValue != null) {
                    final int readInt32 = byteBufferValue.readInt32(false);
                    switch (readInt32) {
                        case 0:
                            final TLRPC.Chat TLdeserialize = TLRPC.Chat.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                            if (TLdeserialize != null) {
                                dispatchQueue = Utilities.stageQueue;
                                runnable = new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda25
                                    @Override // java.lang.Runnable
                                    public final void run() {
                                        MessagesStorage.this.lambda$loadPendingTasks$12(TLdeserialize, longValue);
                                    }
                                };
                                dispatchQueue.postRunnable(runnable);
                                break;
                            }
                            break;
                        case 1:
                            final long readInt322 = byteBufferValue.readInt32(false);
                            final int readInt323 = byteBufferValue.readInt32(false);
                            dispatchQueue = Utilities.stageQueue;
                            runnable = new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda23
                                @Override // java.lang.Runnable
                                public final void run() {
                                    MessagesStorage.this.lambda$loadPendingTasks$13(readInt322, readInt323, longValue);
                                }
                            };
                            dispatchQueue.postRunnable(runnable);
                            break;
                        case 2:
                        case 5:
                        case 8:
                        case 10:
                        case 14:
                            final TLRPC.TL_dialog tL_dialog = new TLRPC.TL_dialog();
                            tL_dialog.id = byteBufferValue.readInt64(false);
                            tL_dialog.top_message = byteBufferValue.readInt32(false);
                            tL_dialog.read_inbox_max_id = byteBufferValue.readInt32(false);
                            tL_dialog.read_outbox_max_id = byteBufferValue.readInt32(false);
                            tL_dialog.unread_count = byteBufferValue.readInt32(false);
                            tL_dialog.last_message_date = byteBufferValue.readInt32(false);
                            tL_dialog.pts = byteBufferValue.readInt32(false);
                            tL_dialog.flags = byteBufferValue.readInt32(false);
                            if (readInt32 >= 5) {
                                tL_dialog.pinned = byteBufferValue.readBool(false);
                                tL_dialog.pinnedNum = byteBufferValue.readInt32(false);
                            }
                            if (readInt32 >= 8) {
                                tL_dialog.unread_mentions_count = byteBufferValue.readInt32(false);
                            }
                            if (readInt32 >= 10) {
                                tL_dialog.unread_mark = byteBufferValue.readBool(false);
                            }
                            if (readInt32 >= 14) {
                                tL_dialog.folder_id = byteBufferValue.readInt32(false);
                            }
                            final TLRPC.InputPeer TLdeserialize2 = TLRPC.InputPeer.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                            runnable2 = new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda22
                                @Override // java.lang.Runnable
                                public final void run() {
                                    MessagesStorage.this.lambda$loadPendingTasks$14(tL_dialog, TLdeserialize2, longValue);
                                }
                            };
                            AndroidUtilities.runOnUIThread(runnable2);
                            break;
                        case 3:
                            getSendMessagesHelper().sendGame(TLRPC.InputPeer.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false), (TLRPC.TL_inputMediaGame) TLRPC.InputMedia.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false), byteBufferValue.readInt64(false), longValue);
                            break;
                        case 4:
                            final long readInt64 = byteBufferValue.readInt64(false);
                            final boolean readBool = byteBufferValue.readBool(false);
                            final TLRPC.InputPeer TLdeserialize3 = TLRPC.InputPeer.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                            runnable2 = new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda21
                                @Override // java.lang.Runnable
                                public final void run() {
                                    MessagesStorage.this.lambda$loadPendingTasks$15(readInt64, readBool, TLdeserialize3, longValue);
                                }
                            };
                            AndroidUtilities.runOnUIThread(runnable2);
                            break;
                        case 6:
                            final long readInt324 = byteBufferValue.readInt32(false);
                            final int readInt325 = byteBufferValue.readInt32(false);
                            final TLRPC.InputChannel TLdeserialize4 = TLRPC.InputChannel.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                            dispatchQueue = Utilities.stageQueue;
                            runnable = new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda20
                                @Override // java.lang.Runnable
                                public final void run() {
                                    MessagesStorage.this.lambda$loadPendingTasks$16(readInt324, readInt325, longValue, TLdeserialize4);
                                }
                            };
                            dispatchQueue.postRunnable(runnable);
                            break;
                        case 7:
                            final long readInt326 = byteBufferValue.readInt32(false);
                            int readInt327 = byteBufferValue.readInt32(false);
                            TLObject TLdeserialize5 = TLRPC.TL_messages_deleteMessages.TLdeserialize(byteBufferValue, readInt327, false);
                            final TLObject TLdeserialize6 = TLdeserialize5 == null ? TLRPC.TL_channels_deleteMessages.TLdeserialize(byteBufferValue, readInt327, false) : TLdeserialize5;
                            if (TLdeserialize6 != null) {
                                runnable2 = new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda19
                                    @Override // java.lang.Runnable
                                    public final void run() {
                                        MessagesStorage.this.lambda$loadPendingTasks$18(readInt326, longValue, TLdeserialize6);
                                    }
                                };
                                AndroidUtilities.runOnUIThread(runnable2);
                                break;
                            }
                            removePendingTask(longValue);
                            break;
                        case 9:
                            final long readInt642 = byteBufferValue.readInt64(false);
                            final TLRPC.InputPeer TLdeserialize7 = TLRPC.InputPeer.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                            runnable2 = new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda18
                                @Override // java.lang.Runnable
                                public final void run() {
                                    MessagesStorage.this.lambda$loadPendingTasks$21(readInt642, TLdeserialize7, longValue);
                                }
                            };
                            AndroidUtilities.runOnUIThread(runnable2);
                            break;
                        case 11:
                            final int readInt328 = byteBufferValue.readInt32(false);
                            final long readInt329 = byteBufferValue.readInt32(false);
                            final int readInt3210 = byteBufferValue.readInt32(false);
                            final TLRPC.InputChannel TLdeserialize8 = readInt329 != 0 ? TLRPC.InputChannel.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false) : null;
                            runnable3 = new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda17
                                @Override // java.lang.Runnable
                                public final void run() {
                                    MessagesStorage.this.lambda$loadPendingTasks$22(readInt329, readInt328, TLdeserialize8, readInt3210, longValue);
                                }
                            };
                            runnable2 = runnable3;
                            AndroidUtilities.runOnUIThread(runnable2);
                            break;
                        case 12:
                        case 19:
                        case 20:
                            removePendingTask(longValue);
                            break;
                        case 13:
                            final long readInt643 = byteBufferValue.readInt64(false);
                            final boolean readBool2 = byteBufferValue.readBool(false);
                            final int readInt3211 = byteBufferValue.readInt32(false);
                            final int readInt3212 = byteBufferValue.readInt32(false);
                            final boolean readBool3 = byteBufferValue.readBool(false);
                            final TLRPC.InputPeer TLdeserialize9 = TLRPC.InputPeer.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                            runnable3 = new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda16
                                @Override // java.lang.Runnable
                                public final void run() {
                                    MessagesStorage.this.lambda$loadPendingTasks$25(readInt643, readBool2, readInt3211, readInt3212, readBool3, TLdeserialize9, longValue);
                                }
                            };
                            runnable2 = runnable3;
                            AndroidUtilities.runOnUIThread(runnable2);
                            break;
                        case 15:
                            final TLRPC.InputPeer TLdeserialize10 = TLRPC.InputPeer.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                            dispatchQueue = Utilities.stageQueue;
                            runnable = new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda15
                                @Override // java.lang.Runnable
                                public final void run() {
                                    MessagesStorage.this.lambda$loadPendingTasks$26(TLdeserialize10, longValue);
                                }
                            };
                            dispatchQueue.postRunnable(runnable);
                            break;
                        case 16:
                            final int readInt3213 = byteBufferValue.readInt32(false);
                            int readInt3214 = byteBufferValue.readInt32(false);
                            final ArrayList arrayList = new ArrayList();
                            for (int i = 0; i < readInt3214; i++) {
                                arrayList.add(TLRPC.InputDialogPeer.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false));
                            }
                            runnable2 = new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda14
                                @Override // java.lang.Runnable
                                public final void run() {
                                    MessagesStorage.this.lambda$loadPendingTasks$27(readInt3213, arrayList, longValue);
                                }
                            };
                            AndroidUtilities.runOnUIThread(runnable2);
                            break;
                        case 17:
                            final int readInt3215 = byteBufferValue.readInt32(false);
                            int readInt3216 = byteBufferValue.readInt32(false);
                            final ArrayList arrayList2 = new ArrayList();
                            for (int i2 = 0; i2 < readInt3216; i2++) {
                                arrayList2.add(TLRPC.TL_inputFolderPeer.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false));
                            }
                            runnable2 = new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda33
                                @Override // java.lang.Runnable
                                public final void run() {
                                    MessagesStorage.this.lambda$loadPendingTasks$28(readInt3215, arrayList2, longValue);
                                }
                            };
                            AndroidUtilities.runOnUIThread(runnable2);
                            break;
                        case 18:
                            final long readInt644 = byteBufferValue.readInt64(false);
                            byteBufferValue.readInt32(false);
                            final TLRPC.TL_messages_deleteScheduledMessages TLdeserialize11 = TLRPC.TL_messages_deleteScheduledMessages.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                            if (TLdeserialize11 == null) {
                                removePendingTask(longValue);
                                break;
                            } else {
                                runnable2 = new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda32
                                    @Override // java.lang.Runnable
                                    public final void run() {
                                        MessagesStorage.this.lambda$loadPendingTasks$29(readInt644, longValue, TLdeserialize11);
                                    }
                                };
                                AndroidUtilities.runOnUIThread(runnable2);
                                break;
                            }
                        case 21:
                            final Theme.OverrideWallpaperInfo overrideWallpaperInfo = new Theme.OverrideWallpaperInfo();
                            byteBufferValue.readInt64(false);
                            overrideWallpaperInfo.isBlurred = byteBufferValue.readBool(false);
                            overrideWallpaperInfo.isMotion = byteBufferValue.readBool(false);
                            overrideWallpaperInfo.color = byteBufferValue.readInt32(false);
                            overrideWallpaperInfo.gradientColor1 = byteBufferValue.readInt32(false);
                            overrideWallpaperInfo.rotation = byteBufferValue.readInt32(false);
                            overrideWallpaperInfo.intensity = (float) byteBufferValue.readDouble(false);
                            final boolean readBool4 = byteBufferValue.readBool(false);
                            overrideWallpaperInfo.slug = byteBufferValue.readString(false);
                            overrideWallpaperInfo.originalFileName = byteBufferValue.readString(false);
                            runnable2 = new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda31
                                @Override // java.lang.Runnable
                                public final void run() {
                                    MessagesStorage.this.lambda$loadPendingTasks$24(overrideWallpaperInfo, readBool4, longValue);
                                }
                            };
                            AndroidUtilities.runOnUIThread(runnable2);
                            break;
                        case 22:
                            final TLRPC.InputPeer TLdeserialize12 = TLRPC.InputPeer.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                            runnable2 = new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda30
                                @Override // java.lang.Runnable
                                public final void run() {
                                    MessagesStorage.this.lambda$loadPendingTasks$30(TLdeserialize12, longValue);
                                }
                            };
                            AndroidUtilities.runOnUIThread(runnable2);
                            break;
                        case 23:
                            final long readInt645 = byteBufferValue.readInt64(false);
                            final int readInt3217 = byteBufferValue.readInt32(false);
                            final int readInt3218 = byteBufferValue.readInt32(false);
                            if (!DialogObject.isEncryptedDialog(readInt645) && DialogObject.isChatDialog(readInt645) && byteBufferValue.hasRemaining()) {
                                r1 = TLRPC.InputChannel.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                            }
                            final TLRPC.InputChannel inputChannel = r1;
                            runnable2 = new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda29
                                @Override // java.lang.Runnable
                                public final void run() {
                                    MessagesStorage.this.lambda$loadPendingTasks$23(readInt645, readInt3217, inputChannel, readInt3218, longValue, readInt32);
                                }
                            };
                            AndroidUtilities.runOnUIThread(runnable2);
                            break;
                        case 24:
                            final long readInt646 = byteBufferValue.readInt64(false);
                            int readInt3219 = byteBufferValue.readInt32(false);
                            TLObject TLdeserialize13 = TLRPC.TL_messages_deleteMessages.TLdeserialize(byteBufferValue, readInt3219, false);
                            final TLObject TLdeserialize14 = TLdeserialize13 == null ? TLRPC.TL_channels_deleteMessages.TLdeserialize(byteBufferValue, readInt3219, false) : TLdeserialize13;
                            if (TLdeserialize14 == null) {
                                removePendingTask(longValue);
                                break;
                            } else {
                                runnable2 = new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda28
                                    @Override // java.lang.Runnable
                                    public final void run() {
                                        MessagesStorage.this.lambda$loadPendingTasks$19(readInt646, longValue, TLdeserialize14);
                                    }
                                };
                                AndroidUtilities.runOnUIThread(runnable2);
                                break;
                            }
                        case 25:
                            final long readInt647 = byteBufferValue.readInt64(false);
                            final int readInt3220 = byteBufferValue.readInt32(false);
                            final TLRPC.InputChannel TLdeserialize15 = TLRPC.InputChannel.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                            dispatchQueue = Utilities.stageQueue;
                            runnable = new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda27
                                @Override // java.lang.Runnable
                                public final void run() {
                                    MessagesStorage.this.lambda$loadPendingTasks$17(readInt647, readInt3220, longValue, TLdeserialize15);
                                }
                            };
                            dispatchQueue.postRunnable(runnable);
                            break;
                        default:
                            switch (readInt32) {
                                case 100:
                                    final int readInt3221 = byteBufferValue.readInt32(false);
                                    final boolean readBool5 = byteBufferValue.readBool(false);
                                    runnable2 = new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda26
                                        @Override // java.lang.Runnable
                                        public final void run() {
                                            MessagesStorage.this.lambda$loadPendingTasks$31(readInt3221, readBool5, longValue);
                                        }
                                    };
                                    AndroidUtilities.runOnUIThread(runnable2);
                                    break;
                                case 102:
                                    final long readInt648 = byteBufferValue.readInt64(false);
                                    final int readInt3222 = byteBufferValue.readInt32(false);
                                    runnable2 = new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda24
                                        @Override // java.lang.Runnable
                                        public final void run() {
                                            MessagesStorage.this.lambda$loadPendingTasks$32(longValue, readInt648, readInt3222);
                                        }
                                    };
                                    AndroidUtilities.runOnUIThread(runnable2);
                                    break;
                                case 103:
                                    final long readInt649 = byteBufferValue.readInt64(false);
                                    final int readInt3223 = byteBufferValue.readInt32(false);
                                    int readInt3224 = byteBufferValue.readInt32(false);
                                    TLObject TLdeserialize16 = TLRPC.TL_messages_deleteMessages.TLdeserialize(byteBufferValue, readInt3224, false);
                                    final TLObject TLdeserialize17 = TLdeserialize16 == null ? TLRPC.TL_channels_deleteMessages.TLdeserialize(byteBufferValue, readInt3224, false) : TLdeserialize16;
                                    if (TLdeserialize17 == null) {
                                        removePendingTask(longValue);
                                        break;
                                    } else {
                                        runnable2 = new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda13
                                            @Override // java.lang.Runnable
                                            public final void run() {
                                                MessagesStorage.this.lambda$loadPendingTasks$20(readInt649, longValue, TLdeserialize17, readInt3223);
                                            }
                                        };
                                        AndroidUtilities.runOnUIThread(runnable2);
                                        break;
                                    }
                            }
                    }
                    byteBufferValue.reuse();
                }
            }
            queryFinalized.dispose();
        } catch (Exception e) {
            checkSQLException(e);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadTopics$48(ArrayList arrayList, ArrayList arrayList2) {
        if (!arrayList.isEmpty()) {
            getMessagesController().putUsers(arrayList, true);
        }
        if (arrayList2.isEmpty()) {
            return;
        }
        getMessagesController().putChats(arrayList2, true);
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:38:0x02c2  */
    /* JADX WARN: Removed duplicated region for block: B:46:0x02cf  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$loadTopics$49(long j, Consumer consumer) {
        SQLiteCursor sQLiteCursor;
        ArrayList<TLRPC.TL_forumTopic> arrayList;
        SQLiteCursor sQLiteCursor2;
        ArrayList<TLRPC.TL_forumTopic> arrayList2;
        SQLiteCursor sQLiteCursor3;
        ArrayList<TLRPC.TL_forumTopic> arrayList3;
        int i;
        long j2;
        NativeByteBuffer byteBufferValue;
        ArrayList arrayList4;
        int i2 = 1;
        String str = ")";
        try {
            SQLiteCursor queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT top_message, data, topic_message, unread_count, max_read_id, unread_mentions, unread_reactions, read_outbox, pinned, total_messages_count FROM topics WHERE did = %d ORDER BY pinned ASC", Long.valueOf(j)), new Object[0]);
            SparseArray sparseArray = null;
            arrayList2 = null;
            HashSet hashSet = null;
            while (queryFinalized.next()) {
                try {
                    try {
                        if (arrayList2 == null) {
                            try {
                                ArrayList<TLRPC.TL_forumTopic> arrayList5 = new ArrayList<>();
                                try {
                                    SparseArray sparseArray2 = new SparseArray();
                                    hashSet = new HashSet();
                                    arrayList2 = arrayList5;
                                    sparseArray = sparseArray2;
                                } catch (Exception e) {
                                    e = e;
                                    arrayList2 = arrayList5;
                                    sQLiteCursor = queryFinalized;
                                    try {
                                        checkSQLException(e);
                                        if (sQLiteCursor != null) {
                                        }
                                        consumer.r(arrayList2);
                                    } catch (Throwable th) {
                                        th = th;
                                        if (sQLiteCursor != null) {
                                        }
                                        throw th;
                                    }
                                }
                            } catch (Throwable th2) {
                                th = th2;
                                sQLiteCursor = queryFinalized;
                                if (sQLiteCursor != null) {
                                    sQLiteCursor.dispose();
                                }
                                throw th;
                            }
                        }
                        int intValue = queryFinalized.intValue(0);
                        NativeByteBuffer byteBufferValue2 = queryFinalized.byteBufferValue(i2);
                        if (byteBufferValue2 != null) {
                            TLRPC.TL_forumTopic TLdeserialize = TLRPC.TL_forumTopic.TLdeserialize((AbstractSerializedData) byteBufferValue2, byteBufferValue2.readInt32(false), false);
                            if (TLdeserialize != null) {
                                TLdeserialize.top_message = intValue;
                                ArrayList arrayList6 = (ArrayList) sparseArray.get(intValue);
                                if (arrayList6 == null) {
                                    arrayList4 = new ArrayList();
                                    sparseArray.put(intValue, arrayList4);
                                } else {
                                    arrayList4 = arrayList6;
                                }
                                arrayList4.add(TLdeserialize);
                                hashSet.add(Integer.valueOf(intValue));
                                arrayList2.add(TLdeserialize);
                                NativeByteBuffer byteBufferValue3 = queryFinalized.byteBufferValue(2);
                                TLdeserialize.topicStartMessage = TLRPC.Message.TLdeserialize(byteBufferValue3, byteBufferValue3.readInt32(false), false);
                                byteBufferValue3.reuse();
                                TLdeserialize.unread_count = queryFinalized.intValue(3);
                                TLdeserialize.read_inbox_max_id = queryFinalized.intValue(4);
                                TLdeserialize.unread_mentions_count = queryFinalized.intValue(5);
                                TLdeserialize.unread_reactions_count = queryFinalized.intValue(6);
                                TLdeserialize.read_outbox_max_id = queryFinalized.intValue(7);
                                int intValue2 = queryFinalized.intValue(8) - 1;
                                TLdeserialize.pinnedOrder = intValue2;
                                TLdeserialize.pinned = intValue2 >= 0;
                                TLdeserialize.totalMessagesCount = queryFinalized.intValue(9);
                            }
                            byteBufferValue2.reuse();
                        }
                        i2 = 1;
                    } catch (Exception e2) {
                        e = e2;
                        sQLiteCursor2 = queryFinalized;
                    }
                } catch (Throwable th3) {
                    th = th3;
                    sQLiteCursor2 = queryFinalized;
                }
            }
            ArrayList<Long> arrayList7 = new ArrayList<>();
            ArrayList<Long> arrayList8 = new ArrayList<>();
            LongSparseArray longSparseArray = new LongSparseArray();
            LongSparseArray longSparseArray2 = new LongSparseArray();
            if (arrayList2 == null || arrayList2.isEmpty()) {
                sQLiteCursor2 = queryFinalized;
            } else {
                SQLiteDatabase sQLiteDatabase = this.database;
                StringBuilder sb = new StringBuilder();
                sQLiteCursor2 = queryFinalized;
                try {
                    try {
                        sb.append("SELECT mid, data, replydata FROM messages_v2 WHERE uid = ");
                        sb.append(j);
                        sb.append(" AND mid IN (");
                        sb.append(TextUtils.join(",", hashSet));
                        sb.append(")");
                        arrayList3 = arrayList2;
                        i = 0;
                    } catch (Throwable th4) {
                        th = th4;
                        sQLiteCursor = sQLiteCursor2;
                        if (sQLiteCursor != null) {
                        }
                        throw th;
                    }
                } catch (Exception e3) {
                    e = e3;
                }
                try {
                    SQLiteCursor queryFinalized2 = sQLiteDatabase.queryFinalized(sb.toString(), new Object[0]);
                    while (queryFinalized2.next()) {
                        try {
                            int intValue3 = queryFinalized2.intValue(i);
                            NativeByteBuffer byteBufferValue4 = queryFinalized2.byteBufferValue(1);
                            if (byteBufferValue4 != null) {
                                String str2 = str;
                                TLRPC.Message TLdeserialize2 = TLRPC.Message.TLdeserialize(byteBufferValue4, byteBufferValue4.readInt32(false), false);
                                if (TLdeserialize2 != null) {
                                    TLdeserialize2.readAttachPath(byteBufferValue4, UserConfig.getInstance(this.currentAccount).clientUserId);
                                }
                                byteBufferValue4.reuse();
                                hashSet.remove(Integer.valueOf(intValue3));
                                ArrayList arrayList9 = (ArrayList) sparseArray.get(intValue3);
                                if (arrayList9 != null) {
                                    for (int i3 = 0; i3 < arrayList9.size(); i3++) {
                                        ((TLRPC.TL_forumTopic) arrayList9.get(i3)).topMessage = TLdeserialize2;
                                    }
                                }
                                addUsersAndChatsFromMessage(TLdeserialize2, arrayList7, arrayList8, null);
                                if (TLdeserialize2 != null) {
                                    try {
                                        TLRPC.MessageReplyHeader messageReplyHeader = TLdeserialize2.reply_to;
                                        if (messageReplyHeader != null && messageReplyHeader.reply_to_msg_id != 0) {
                                            TLRPC.MessageAction messageAction = TLdeserialize2.action;
                                            if ((messageAction instanceof TLRPC.TL_messageActionPinMessage) || (messageAction instanceof TLRPC.TL_messageActionPaymentSent) || (messageAction instanceof TLRPC.TL_messageActionGameScore)) {
                                                if (!queryFinalized2.isNull(2) && (byteBufferValue = queryFinalized2.byteBufferValue(2)) != null) {
                                                    TLRPC.Message TLdeserialize3 = TLRPC.Message.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                                                    TLdeserialize2.replyMessage = TLdeserialize3;
                                                    TLdeserialize3.readAttachPath(byteBufferValue, getUserConfig().clientUserId);
                                                    byteBufferValue.reuse();
                                                    TLRPC.Message message = TLdeserialize2.replyMessage;
                                                    if (message != null) {
                                                        addUsersAndChatsFromMessage(message, arrayList7, arrayList8, null);
                                                    }
                                                }
                                                if (TLdeserialize2.replyMessage == null) {
                                                    addReplyMessages(TLdeserialize2, longSparseArray, longSparseArray2);
                                                }
                                            }
                                        }
                                    } catch (Exception e4) {
                                        checkSQLException(e4);
                                    }
                                }
                                str = str2;
                            }
                            i = 0;
                        } catch (Exception e5) {
                            e = e5;
                            arrayList = arrayList3;
                            arrayList2 = arrayList;
                            sQLiteCursor = sQLiteCursor2;
                            checkSQLException(e);
                            if (sQLiteCursor != null) {
                                sQLiteCursor3 = sQLiteCursor;
                                sQLiteCursor3.dispose();
                            }
                            consumer.r(arrayList2);
                        }
                    }
                    String str3 = str;
                    queryFinalized2.dispose();
                    if (hashSet.isEmpty()) {
                        j2 = j;
                    } else {
                        SQLiteDatabase sQLiteDatabase2 = this.database;
                        StringBuilder sb2 = new StringBuilder();
                        sb2.append("SELECT mid, data FROM messages_topics WHERE uid = ");
                        j2 = j;
                        sb2.append(j2);
                        sb2.append(" AND mid IN (");
                        sb2.append(TextUtils.join(",", hashSet));
                        sb2.append(str3);
                        boolean z = false;
                        SQLiteCursor queryFinalized3 = sQLiteDatabase2.queryFinalized(sb2.toString(), new Object[0]);
                        while (queryFinalized3.next()) {
                            try {
                                int intValue4 = queryFinalized3.intValue(z ? 1 : 0);
                                NativeByteBuffer byteBufferValue5 = queryFinalized3.byteBufferValue(1);
                                if (byteBufferValue5 != null) {
                                    TLRPC.Message TLdeserialize4 = TLRPC.Message.TLdeserialize(byteBufferValue5, byteBufferValue5.readInt32(z), z);
                                    if (TLdeserialize4 != null) {
                                        TLdeserialize4.readAttachPath(byteBufferValue5, UserConfig.getInstance(this.currentAccount).clientUserId);
                                    }
                                    byteBufferValue5.reuse();
                                    hashSet.remove(Integer.valueOf(intValue4));
                                    addUsersAndChatsFromMessage(TLdeserialize4, arrayList7, arrayList8, null);
                                    ArrayList arrayList10 = (ArrayList) sparseArray.get(intValue4);
                                    if (arrayList10 != null) {
                                        for (int i4 = 0; i4 < arrayList10.size(); i4++) {
                                            ((TLRPC.TL_forumTopic) arrayList10.get(i4)).topMessage = TLdeserialize4;
                                        }
                                    }
                                    z = false;
                                }
                            } catch (Exception e6) {
                                checkSQLException(e6);
                            }
                        }
                    }
                    loadReplyMessages(longSparseArray, longSparseArray2, arrayList7, arrayList8, 0);
                    final ArrayList<TLRPC.Chat> arrayList11 = new ArrayList<>();
                    final ArrayList<TLRPC.User> arrayList12 = new ArrayList<>();
                    if (!arrayList8.isEmpty()) {
                        getChatsInternal(TextUtils.join(",", arrayList8), arrayList11);
                    }
                    if (!arrayList7.isEmpty()) {
                        getUsersInternal(arrayList7, arrayList12);
                    }
                    AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda152
                        @Override // java.lang.Runnable
                        public final void run() {
                            MessagesStorage.this.lambda$loadTopics$48(arrayList12, arrayList11);
                        }
                    });
                    arrayList2 = arrayList3;
                    loadGroupedMessagesForTopics(j2, arrayList2);
                } catch (Exception e7) {
                    e = e7;
                    arrayList2 = arrayList3;
                    arrayList = arrayList2;
                    arrayList2 = arrayList;
                    sQLiteCursor = sQLiteCursor2;
                    checkSQLException(e);
                    if (sQLiteCursor != null) {
                    }
                    consumer.r(arrayList2);
                }
            }
            sQLiteCursor3 = sQLiteCursor2;
        } catch (Exception e8) {
            e = e8;
            arrayList = null;
            sQLiteCursor2 = null;
        } catch (Throwable th5) {
            th = th5;
            sQLiteCursor = null;
        }
        sQLiteCursor3.dispose();
        consumer.r(arrayList2);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadUnreadMessages$73(LongSparseArray longSparseArray, ArrayList arrayList, ArrayList arrayList2, ArrayList arrayList3, ArrayList arrayList4, ArrayList arrayList5, HashMap hashMap) {
        getNotificationsController().processLoadedUnreadMessages(longSparseArray, arrayList, arrayList2, arrayList3, arrayList4, arrayList5, hashMap.values());
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Can't wrap try/catch for region: R(13:61|62|(2:64|(12:66|(1:68)|69|70|71|(1:75)|76|77|(2:81|(7:87|88|(1:109)(5:92|93|94|95|(1:97))|98|(1:100)|101|102))|110|101|102))|114|(3:116|69|70)|71|(2:73|75)|76|77|(11:79|81|(1:83)|87|88|(1:90)|109|98|(0)|101|102)|110|101|102) */
    /* JADX WARN: Code restructure failed: missing block: B:112:0x01cb, code lost:
    
        r0 = e;
     */
    /* JADX WARN: Code restructure failed: missing block: B:113:0x01cc, code lost:
    
        r24 = r6;
        r15 = r7;
     */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:100:0x0209 A[Catch: all -> 0x0189, Exception -> 0x0200, TRY_LEAVE, TryCatch #4 {all -> 0x0189, blocks: (B:57:0x011a, B:59:0x0120, B:62:0x0127, B:64:0x0178, B:66:0x017e, B:70:0x0198, B:71:0x019a, B:73:0x01a2, B:75:0x01a9, B:77:0x01af, B:79:0x01b3, B:81:0x01b7, B:83:0x01bd, B:85:0x01c1, B:88:0x01d1, B:90:0x01d7, B:92:0x01dd, B:95:0x01ef, B:97:0x01fb, B:98:0x0205, B:100:0x0209, B:108:0x020d, B:114:0x0193, B:119:0x021a, B:121:0x024b, B:123:0x0251, B:125:0x0257, B:128:0x0291, B:131:0x02a0, B:134:0x02b0, B:152:0x0334, B:155:0x0341, B:158:0x0349, B:161:0x0355, B:164:0x036c, B:167:0x0374, B:202:0x02aa, B:203:0x029a, B:204:0x028a, B:207:0x0382), top: B:56:0x011a }] */
    /* JADX WARN: Removed duplicated region for block: B:149:0x0324 A[Catch: all -> 0x02da, Exception -> 0x02df, TryCatch #11 {Exception -> 0x02df, all -> 0x02da, blocks: (B:139:0x02c6, B:141:0x02ce, B:142:0x02e6, B:144:0x02ee, B:146:0x02fa, B:147:0x031f, B:149:0x0324, B:150:0x0330, B:175:0x0302, B:177:0x030a, B:179:0x0317), top: B:138:0x02c6 }] */
    /* JADX WARN: Removed duplicated region for block: B:154:0x033c  */
    /* JADX WARN: Removed duplicated region for block: B:157:0x0344  */
    /* JADX WARN: Removed duplicated region for block: B:160:0x0350  */
    /* JADX WARN: Removed duplicated region for block: B:163:0x0369  */
    /* JADX WARN: Removed duplicated region for block: B:166:0x0371  */
    /* JADX WARN: Removed duplicated region for block: B:170:0x0373  */
    /* JADX WARN: Removed duplicated region for block: B:171:0x036b  */
    /* JADX WARN: Removed duplicated region for block: B:172:0x0353  */
    /* JADX WARN: Removed duplicated region for block: B:173:0x0347  */
    /* JADX WARN: Removed duplicated region for block: B:174:0x033f  */
    /* JADX WARN: Removed duplicated region for block: B:187:0x0597  */
    /* JADX WARN: Removed duplicated region for block: B:190:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:195:0x05a0  */
    /* JADX WARN: Removed duplicated region for block: B:197:? A[SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:270:0x04f1 A[Catch: all -> 0x04ae, Exception -> 0x04b3, TryCatch #12 {Exception -> 0x04b3, all -> 0x04ae, blocks: (B:5:0x0023, B:6:0x0030, B:9:0x003a, B:12:0x004b, B:19:0x005c, B:22:0x0067, B:24:0x0078, B:25:0x007b, B:27:0x0084, B:29:0x0092, B:33:0x009b, B:35:0x00a1, B:37:0x00ab, B:38:0x00c1, B:39:0x00b1, B:41:0x00bc, B:51:0x00c5, B:258:0x048a, B:259:0x048f, B:261:0x0495, B:263:0x049e, B:265:0x04a8, B:266:0x04c9, B:268:0x04cd, B:270:0x04f1, B:273:0x051d, B:275:0x0526, B:280:0x0530, B:283:0x0549, B:286:0x04ba, B:288:0x04c4, B:290:0x0553), top: B:4:0x0023 }] */
    /* JADX WARN: Removed duplicated region for block: B:280:0x0530 A[Catch: all -> 0x04ae, Exception -> 0x04b3, TryCatch #12 {Exception -> 0x04b3, all -> 0x04ae, blocks: (B:5:0x0023, B:6:0x0030, B:9:0x003a, B:12:0x004b, B:19:0x005c, B:22:0x0067, B:24:0x0078, B:25:0x007b, B:27:0x0084, B:29:0x0092, B:33:0x009b, B:35:0x00a1, B:37:0x00ab, B:38:0x00c1, B:39:0x00b1, B:41:0x00bc, B:51:0x00c5, B:258:0x048a, B:259:0x048f, B:261:0x0495, B:263:0x049e, B:265:0x04a8, B:266:0x04c9, B:268:0x04cd, B:270:0x04f1, B:273:0x051d, B:275:0x0526, B:280:0x0530, B:283:0x0549, B:286:0x04ba, B:288:0x04c4, B:290:0x0553), top: B:4:0x0023 }] */
    /* JADX WARN: Type inference failed for: r2v15, types: [org.telegram.SQLite.SQLiteCursor] */
    /* JADX WARN: Type inference failed for: r2v16 */
    /* JADX WARN: Type inference failed for: r2v17 */
    /* JADX WARN: Type inference failed for: r2v18 */
    /* JADX WARN: Type inference failed for: r2v19 */
    /* JADX WARN: Type inference failed for: r2v24, types: [org.telegram.SQLite.SQLiteCursor] */
    /* JADX WARN: Type inference failed for: r6v25, types: [org.telegram.tgnet.AbstractSerializedData, org.telegram.tgnet.NativeByteBuffer] */
    /* JADX WARN: Type inference failed for: r7v11 */
    /* JADX WARN: Type inference failed for: r7v8 */
    /* JADX WARN: Type inference failed for: r7v9, types: [boolean, int] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$loadUnreadMessages$74() {
        Throwable th;
        SQLiteCursor sQLiteCursor;
        Exception exc;
        Throwable th2;
        ArrayList<Long> arrayList;
        ArrayList<Long> arrayList2;
        ArrayList arrayList3;
        LongSparseArray longSparseArray;
        SQLiteCursor queryFinalized;
        ArrayList<TLRPC.User> arrayList4;
        ArrayList arrayList5;
        ArrayList arrayList6;
        LongSparseArray longSparseArray2;
        CharSequence charSequence;
        ArrayList<TLRPC.Chat> arrayList7;
        Long valueOf;
        ArrayList<Long> arrayList8;
        NotificationsController.StoryNotification storyNotification;
        LongSparseArray longSparseArray3;
        ArrayList arrayList9;
        ArrayList arrayList10;
        ArrayList<TLRPC.EncryptedChat> arrayList11;
        ArrayList arrayList12;
        LongSparseArray longSparseArray4;
        long j;
        String stringValue;
        int i;
        ArrayList arrayList13;
        Long valueOf2;
        ArrayList<Long> arrayList14;
        int i2;
        ArrayList arrayList15;
        TLRPC.MessageReplyHeader messageReplyHeader;
        TLRPC.MessageAction messageAction;
        NativeByteBuffer byteBufferValue;
        Long valueOf3;
        ArrayList<Long> arrayList16;
        MessagesStorage messagesStorage = this;
        int i3 = 2;
        boolean z = false;
        try {
            arrayList = new ArrayList<>();
            arrayList2 = new ArrayList<>();
            arrayList3 = new ArrayList();
            longSparseArray = new LongSparseArray();
            queryFinalized = messagesStorage.database.queryFinalized("SELECT d.did, d.unread_count, s.flags FROM dialogs as d LEFT JOIN dialog_settings as s ON d.did = s.did WHERE d.unread_count > 0", new Object[0]);
        } catch (Exception e) {
            e = e;
        } catch (Throwable th3) {
            th = th3;
        }
        try {
            StringBuilder sb = new StringBuilder();
            int currentTime = getConnectionsManager().getCurrentTime();
            while (queryFinalized.next()) {
                long longValue = queryFinalized.longValue(i3);
                boolean z2 = (longValue & 1) != 0;
                int i4 = (int) (longValue >> 32);
                if (queryFinalized.isNull(i3) || !z2 || (i4 != 0 && i4 < currentTime)) {
                    long longValue2 = queryFinalized.longValue(0);
                    if (!DialogObject.isFolderDialogId(longValue2)) {
                        longSparseArray.put(longValue2, Integer.valueOf(queryFinalized.intValue(1)));
                        if (sb.length() != 0) {
                            sb.append(",");
                        }
                        sb.append(longValue2);
                        if (DialogObject.isEncryptedDialog(longValue2)) {
                            int encryptedChatId = DialogObject.getEncryptedChatId(longValue2);
                            if (!arrayList3.contains(Integer.valueOf(encryptedChatId))) {
                                arrayList3.add(Integer.valueOf(encryptedChatId));
                            }
                        } else if (!DialogObject.isUserDialog(longValue2)) {
                            long j2 = -longValue2;
                            if (!arrayList2.contains(Long.valueOf(j2))) {
                                valueOf3 = Long.valueOf(j2);
                                arrayList16 = arrayList2;
                                arrayList16.add(valueOf3);
                            }
                        } else if (!arrayList.contains(Long.valueOf(longValue2))) {
                            valueOf3 = Long.valueOf(longValue2);
                            arrayList16 = arrayList;
                            arrayList16.add(valueOf3);
                        }
                        i3 = 2;
                    }
                }
            }
            queryFinalized.dispose();
            LongSparseArray longSparseArray5 = new LongSparseArray();
            LongSparseArray longSparseArray6 = new LongSparseArray();
            ArrayList arrayList17 = new ArrayList();
            ArrayList arrayList18 = new ArrayList();
            ArrayList<TLRPC.User> arrayList19 = new ArrayList<>();
            ArrayList<TLRPC.Chat> arrayList20 = new ArrayList<>();
            ArrayList<TLRPC.EncryptedChat> arrayList21 = new ArrayList<>();
            if (sb.length() > 0) {
                ?? queryFinalized2 = messagesStorage.database.queryFinalized("SELECT read_state, data, send_state, mid, date, uid, replydata FROM messages_v2 WHERE uid IN (" + sb.toString() + ") AND out = 0 AND read_state IN(0,2) ORDER BY date DESC LIMIT 50", new Object[0]);
                int i5 = 0;
                while (queryFinalized2.next()) {
                    try {
                        try {
                            NativeByteBuffer byteBufferValue2 = queryFinalized2.byteBufferValue(1);
                            if (byteBufferValue2 != null) {
                                TLRPC.Message TLdeserialize = TLRPC.Message.TLdeserialize(byteBufferValue2, byteBufferValue2.readInt32(z), z);
                                ArrayList arrayList22 = arrayList3;
                                LongSparseArray longSparseArray7 = longSparseArray;
                                TLdeserialize.readAttachPath(byteBufferValue2, getUserConfig().clientUserId);
                                byteBufferValue2.reuse();
                                MessageObject.setUnreadFlags(TLdeserialize, queryFinalized2.intValue(0));
                                TLdeserialize.id = queryFinalized2.intValue(3);
                                TLdeserialize.date = queryFinalized2.intValue(4);
                                TLdeserialize.dialog_id = queryFinalized2.longValue(5);
                                arrayList17.add(TLdeserialize);
                                int max = Math.max(i5, TLdeserialize.date);
                                addUsersAndChatsFromMessage(TLdeserialize, arrayList, arrayList2, null);
                                TLdeserialize.send_state = queryFinalized2.intValue(2);
                                if (TLdeserialize.peer_id.channel_id == 0) {
                                    if (!MessageObject.isUnread(TLdeserialize)) {
                                        if (DialogObject.isEncryptedDialog(TLdeserialize.dialog_id)) {
                                        }
                                        TLdeserialize.send_state = 0;
                                        if (DialogObject.isEncryptedDialog(TLdeserialize.dialog_id) && !queryFinalized2.isNull(5)) {
                                            TLdeserialize.random_id = queryFinalized2.longValue(5);
                                        }
                                        messageReplyHeader = TLdeserialize.reply_to;
                                        if (messageReplyHeader != null && messageReplyHeader.reply_to_msg_id != 0) {
                                            messageAction = TLdeserialize.action;
                                            if (!(messageAction instanceof TLRPC.TL_messageActionPinMessage) || (messageAction instanceof TLRPC.TL_messageActionPaymentSent) || (messageAction instanceof TLRPC.TL_messageActionGameScore)) {
                                                if (!queryFinalized2.isNull(6) || (byteBufferValue = queryFinalized2.byteBufferValue(6)) == null) {
                                                    i2 = max;
                                                    arrayList15 = arrayList17;
                                                } else {
                                                    TLRPC.Message TLdeserialize2 = TLRPC.Message.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                                                    TLdeserialize.replyMessage = TLdeserialize2;
                                                    i2 = max;
                                                    arrayList15 = arrayList17;
                                                    try {
                                                        TLdeserialize2.readAttachPath(byteBufferValue, getUserConfig().clientUserId);
                                                        byteBufferValue.reuse();
                                                        TLRPC.Message message = TLdeserialize.replyMessage;
                                                        if (message != null) {
                                                            addUsersAndChatsFromMessage(message, arrayList, arrayList2, null);
                                                        }
                                                    } catch (Exception e2) {
                                                        e = e2;
                                                        messagesStorage.checkSQLException(e);
                                                        arrayList17 = arrayList15;
                                                        i5 = i2;
                                                        arrayList3 = arrayList22;
                                                        longSparseArray = longSparseArray7;
                                                        z = false;
                                                    }
                                                }
                                                if (TLdeserialize.replyMessage == null) {
                                                    addReplyMessages(TLdeserialize, longSparseArray5, longSparseArray6);
                                                }
                                                arrayList17 = arrayList15;
                                                i5 = i2;
                                                arrayList3 = arrayList22;
                                                longSparseArray = longSparseArray7;
                                                z = false;
                                            }
                                        }
                                        i2 = max;
                                        arrayList15 = arrayList17;
                                        arrayList17 = arrayList15;
                                        i5 = i2;
                                        arrayList3 = arrayList22;
                                        longSparseArray = longSparseArray7;
                                        z = false;
                                    }
                                }
                                if (TLdeserialize.id > 0) {
                                    TLdeserialize.send_state = 0;
                                }
                                if (DialogObject.isEncryptedDialog(TLdeserialize.dialog_id)) {
                                    TLdeserialize.random_id = queryFinalized2.longValue(5);
                                }
                                messageReplyHeader = TLdeserialize.reply_to;
                                if (messageReplyHeader != null) {
                                    messageAction = TLdeserialize.action;
                                    if (!(messageAction instanceof TLRPC.TL_messageActionPinMessage)) {
                                    }
                                    if (queryFinalized2.isNull(6)) {
                                    }
                                    i2 = max;
                                    arrayList15 = arrayList17;
                                    if (TLdeserialize.replyMessage == null) {
                                    }
                                    arrayList17 = arrayList15;
                                    i5 = i2;
                                    arrayList3 = arrayList22;
                                    longSparseArray = longSparseArray7;
                                    z = false;
                                }
                                i2 = max;
                                arrayList15 = arrayList17;
                                arrayList17 = arrayList15;
                                i5 = i2;
                                arrayList3 = arrayList22;
                                longSparseArray = longSparseArray7;
                                z = false;
                            }
                        } catch (Exception e3) {
                            e = e3;
                        }
                    } catch (Throwable th4) {
                        th = th4;
                    }
                }
                ArrayList arrayList23 = arrayList3;
                LongSparseArray longSparseArray8 = longSparseArray;
                ArrayList arrayList24 = arrayList17;
                queryFinalized2.dispose();
                messagesStorage.database.executeFast("DELETE FROM unread_push_messages WHERE date <= " + i5).stepThis().dispose();
                ?? r7 = 0;
                queryFinalized2 = messagesStorage.database.queryFinalized("SELECT data, mid, date, uid, random, fm, name, uname, flags, topicId, is_reaction FROM unread_push_messages WHERE 1 ORDER BY date DESC LIMIT 50", new Object[0]);
                while (queryFinalized2.next()) {
                    ?? byteBufferValue3 = queryFinalized2.byteBufferValue(r7);
                    if (byteBufferValue3 != 0) {
                        TLRPC.Message TLdeserialize3 = TLRPC.Message.TLdeserialize(byteBufferValue3, byteBufferValue3.readInt32(r7), r7);
                        byteBufferValue3.reuse();
                        TLdeserialize3.id = queryFinalized2.intValue(1);
                        TLdeserialize3.date = queryFinalized2.intValue(2);
                        ArrayList arrayList25 = arrayList24;
                        TLdeserialize3.dialog_id = queryFinalized2.longValue(3);
                        TLdeserialize3.random_id = queryFinalized2.longValue(4);
                        if (queryFinalized2.isNull(5)) {
                            i = 6;
                            stringValue = null;
                        } else {
                            stringValue = queryFinalized2.stringValue(5);
                            i = 6;
                        }
                        String stringValue2 = queryFinalized2.isNull(i) ? null : queryFinalized2.stringValue(i);
                        String stringValue3 = queryFinalized2.isNull(7) ? null : queryFinalized2.stringValue(7);
                        int intValue = queryFinalized2.intValue(8);
                        int intValue2 = queryFinalized2.intValue(9);
                        if (MessageObject.getFromChatId(TLdeserialize3) == 0) {
                            arrayList13 = arrayList25;
                            try {
                                if (DialogObject.isUserDialog(TLdeserialize3.dialog_id)) {
                                    TLRPC.TL_peerUser tL_peerUser = new TLRPC.TL_peerUser();
                                    TLdeserialize3.from_id = tL_peerUser;
                                    tL_peerUser.user_id = TLdeserialize3.dialog_id;
                                }
                            } catch (Exception e4) {
                                e = e4;
                                messagesStorage = this;
                                exc = e;
                                sQLiteCursor = queryFinalized2;
                                try {
                                    messagesStorage.checkSQLException(exc);
                                    if (sQLiteCursor == null) {
                                        sQLiteCursor.dispose();
                                        return;
                                    }
                                    return;
                                } catch (Throwable th5) {
                                    th2 = th5;
                                    th = th2;
                                    if (sQLiteCursor != null) {
                                        throw th;
                                    }
                                    sQLiteCursor.dispose();
                                    throw th;
                                }
                            } catch (Throwable th6) {
                                th = th6;
                                th = th;
                                sQLiteCursor = queryFinalized2;
                                if (sQLiteCursor != null) {
                                }
                            }
                        } else {
                            arrayList13 = arrayList25;
                        }
                        if (DialogObject.isUserDialog(TLdeserialize3.dialog_id)) {
                            if (!arrayList.contains(Long.valueOf(TLdeserialize3.dialog_id))) {
                                valueOf2 = Long.valueOf(TLdeserialize3.dialog_id);
                                arrayList14 = arrayList;
                                arrayList14.add(valueOf2);
                            }
                            if (intValue2 != 0) {
                                TLRPC.TL_messageReplyHeader tL_messageReplyHeader = new TLRPC.TL_messageReplyHeader();
                                TLdeserialize3.reply_to = tL_messageReplyHeader;
                                tL_messageReplyHeader.forum_topic = true;
                                tL_messageReplyHeader.reply_to_top_id = intValue2;
                            }
                            messagesStorage = this;
                            MessageObject messageObject = new MessageObject(messagesStorage.currentAccount, TLdeserialize3, stringValue, stringValue2, stringValue3, (intValue & 1) == 0, (intValue & 2) == 0, (TLdeserialize3.flags & Integer.MIN_VALUE) == 0, false);
                            int intValue3 = queryFinalized2.intValue(10);
                            messageObject.isReactionPush = intValue3 != 1;
                            messageObject.isStoryReactionPush = intValue3 != 2;
                            arrayList18.add(messageObject);
                            addUsersAndChatsFromMessage(TLdeserialize3, arrayList, arrayList2, null);
                            arrayList24 = arrayList13;
                        } else {
                            if (DialogObject.isChatDialog(TLdeserialize3.dialog_id) && !arrayList2.contains(Long.valueOf(-TLdeserialize3.dialog_id))) {
                                valueOf2 = Long.valueOf(-TLdeserialize3.dialog_id);
                                arrayList14 = arrayList2;
                                arrayList14.add(valueOf2);
                            }
                            if (intValue2 != 0) {
                            }
                            messagesStorage = this;
                            MessageObject messageObject2 = new MessageObject(messagesStorage.currentAccount, TLdeserialize3, stringValue, stringValue2, stringValue3, (intValue & 1) == 0, (intValue & 2) == 0, (TLdeserialize3.flags & Integer.MIN_VALUE) == 0, false);
                            int intValue32 = queryFinalized2.intValue(10);
                            messageObject2.isReactionPush = intValue32 != 1;
                            messageObject2.isStoryReactionPush = intValue32 != 2;
                            arrayList18.add(messageObject2);
                            addUsersAndChatsFromMessage(TLdeserialize3, arrayList, arrayList2, null);
                            arrayList24 = arrayList13;
                        }
                    }
                    r7 = 0;
                }
                ArrayList arrayList26 = arrayList24;
                queryFinalized2.dispose();
                arrayList4 = arrayList19;
                arrayList5 = arrayList18;
                charSequence = ",";
                arrayList7 = arrayList20;
                ArrayList<TLRPC.EncryptedChat> arrayList27 = arrayList21;
                loadReplyMessages(longSparseArray5, longSparseArray6, arrayList, arrayList2, 0);
                if (!arrayList23.isEmpty()) {
                    messagesStorage.getEncryptedChatsInternal(TextUtils.join(charSequence, arrayList23), arrayList27, arrayList);
                }
                if (!arrayList.isEmpty()) {
                    messagesStorage.getUsersInternal(arrayList, arrayList4);
                }
                if (!arrayList2.isEmpty()) {
                    messagesStorage.getChatsInternal(TextUtils.join(charSequence, arrayList2), arrayList7);
                    int i6 = 0;
                    while (i6 < arrayList7.size()) {
                        TLRPC.Chat chat = arrayList7.get(i6);
                        try {
                            if (chat == null || (!ChatObject.isNotInChat(chat) && !chat.min && chat.migrated_to == null)) {
                                arrayList11 = arrayList27;
                                arrayList12 = arrayList26;
                                longSparseArray4 = longSparseArray8;
                                i6++;
                                longSparseArray8 = longSparseArray4;
                                arrayList26 = arrayList12;
                                arrayList27 = arrayList11;
                            }
                            messagesStorage.database.executeFast(String.format(Locale.US, "UPDATE messages_v2 SET read_state = 3 WHERE uid = %d AND mid > 0 AND read_state IN(0,2) AND out = 0", Long.valueOf(j))).stepThis().dispose();
                            arrayList7.remove(i6);
                            i6--;
                            longSparseArray4 = longSparseArray8;
                            longSparseArray4.remove(j);
                            int i7 = 0;
                            while (i7 < arrayList26.size()) {
                                ArrayList arrayList28 = arrayList26;
                                if (((TLRPC.Message) arrayList28.get(i7)).dialog_id == j) {
                                    arrayList28.remove(i7);
                                    i7--;
                                }
                                i7++;
                                arrayList26 = arrayList28;
                            }
                            arrayList12 = arrayList26;
                            i6++;
                            longSparseArray8 = longSparseArray4;
                            arrayList26 = arrayList12;
                            arrayList27 = arrayList11;
                        } catch (Exception e5) {
                            e = e5;
                            exc = e;
                            sQLiteCursor = null;
                            messagesStorage.checkSQLException(exc);
                            if (sQLiteCursor == null) {
                            }
                        } catch (Throwable th7) {
                            th = th7;
                            th = th;
                            sQLiteCursor = null;
                            if (sQLiteCursor != null) {
                            }
                        }
                        j = -chat.id;
                        messagesStorage.database.executeFast("UPDATE dialogs SET unread_count = 0 WHERE did = " + j).stepThis().dispose();
                        arrayList11 = arrayList27;
                    }
                }
                arrayList21 = arrayList27;
                arrayList6 = arrayList26;
                longSparseArray2 = longSparseArray8;
            } else {
                arrayList4 = arrayList19;
                arrayList5 = arrayList18;
                arrayList6 = arrayList17;
                longSparseArray2 = longSparseArray;
                charSequence = ",";
                arrayList7 = arrayList20;
            }
            Collections.reverse(arrayList6);
            arrayList.clear();
            arrayList2.clear();
            queryFinalized = messagesStorage.database.queryFinalized("SELECT uid, sid, date, expire_date, localName, flags FROM story_pushes", new Object[0]);
            final HashMap hashMap = new HashMap();
            while (queryFinalized.next()) {
                long longValue3 = queryFinalized.longValue(0);
                if (longValue3 >= 0) {
                    if (!arrayList.contains(Long.valueOf(longValue3))) {
                        valueOf = Long.valueOf(longValue3);
                        arrayList8 = arrayList;
                        arrayList8.add(valueOf);
                    }
                    int intValue4 = queryFinalized.intValue(1);
                    long longValue4 = queryFinalized.longValue(2);
                    long longValue5 = queryFinalized.longValue(3);
                    String stringValue4 = queryFinalized.stringValue(4);
                    int intValue5 = queryFinalized.intValue(5);
                    storyNotification = (NotificationsController.StoryNotification) hashMap.get(Long.valueOf(longValue3));
                    if (storyNotification == null) {
                        arrayList10 = arrayList5;
                        arrayList9 = arrayList6;
                        longSparseArray3 = longSparseArray2;
                        storyNotification.dateByIds.put(Integer.valueOf(intValue4), new Pair<>(Long.valueOf(longValue4), Long.valueOf(longValue5)));
                        storyNotification.date = storyNotification.getLeastDate();
                        storyNotification.hidden |= (intValue5 & 1) != 0;
                        if (!TextUtils.isEmpty(stringValue4)) {
                            storyNotification.localName = stringValue4;
                        }
                    } else {
                        longSparseArray3 = longSparseArray2;
                        arrayList9 = arrayList6;
                        arrayList10 = arrayList5;
                        NotificationsController.StoryNotification storyNotification2 = new NotificationsController.StoryNotification(longValue3, stringValue4, intValue4, longValue4, longValue5);
                        storyNotification2.hidden = (intValue5 & 1) != 0;
                        hashMap.put(Long.valueOf(longValue3), storyNotification2);
                    }
                    arrayList5 = arrayList10;
                    arrayList6 = arrayList9;
                    longSparseArray2 = longSparseArray3;
                } else {
                    if (!arrayList2.contains(Long.valueOf(longValue3))) {
                        valueOf = Long.valueOf(longValue3);
                        arrayList8 = arrayList2;
                        arrayList8.add(valueOf);
                    }
                    int intValue42 = queryFinalized.intValue(1);
                    long longValue42 = queryFinalized.longValue(2);
                    long longValue52 = queryFinalized.longValue(3);
                    String stringValue42 = queryFinalized.stringValue(4);
                    int intValue52 = queryFinalized.intValue(5);
                    storyNotification = (NotificationsController.StoryNotification) hashMap.get(Long.valueOf(longValue3));
                    if (storyNotification == null) {
                    }
                    arrayList5 = arrayList10;
                    arrayList6 = arrayList9;
                    longSparseArray2 = longSparseArray3;
                }
            }
            final LongSparseArray longSparseArray9 = longSparseArray2;
            final ArrayList arrayList29 = arrayList6;
            final ArrayList arrayList30 = arrayList5;
            queryFinalized.dispose();
            if (!arrayList.isEmpty()) {
                messagesStorage.getUsersInternal(arrayList, arrayList4);
            }
            if (!arrayList2.isEmpty()) {
                messagesStorage.getChatsInternal(TextUtils.join(charSequence, arrayList2), arrayList7);
            }
            final ArrayList<TLRPC.User> arrayList31 = arrayList4;
            final ArrayList<TLRPC.Chat> arrayList32 = arrayList7;
            final ArrayList<TLRPC.EncryptedChat> arrayList33 = arrayList21;
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda223
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesStorage.this.lambda$loadUnreadMessages$73(longSparseArray9, arrayList29, arrayList30, arrayList31, arrayList32, arrayList33, hashMap);
                }
            });
        } catch (Exception e6) {
            sQLiteCursor = queryFinalized;
            exc = e6;
        } catch (Throwable th8) {
            th2 = th8;
            sQLiteCursor = queryFinalized;
            th = th2;
            if (sQLiteCursor != null) {
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadUserInfo$122(ArrayList arrayList) {
        getMessagesController().putChats(arrayList, true);
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:39:0x0142 A[Catch: all -> 0x00fe, Exception -> 0x0107, LOOP:1: B:38:0x0140->B:39:0x0142, LOOP_END, TryCatch #9 {Exception -> 0x0107, all -> 0x00fe, blocks: (B:75:0x00e5, B:77:0x00e9, B:79:0x00ef, B:82:0x0110, B:33:0x0125, B:35:0x012b, B:37:0x013c, B:39:0x0142, B:41:0x0155, B:43:0x015c, B:45:0x0162, B:47:0x016a, B:48:0x0171, B:50:0x0177), top: B:74:0x00e5 }] */
    /* JADX WARN: Removed duplicated region for block: B:47:0x016a A[Catch: all -> 0x00fe, Exception -> 0x0107, TryCatch #9 {Exception -> 0x0107, all -> 0x00fe, blocks: (B:75:0x00e5, B:77:0x00e9, B:79:0x00ef, B:82:0x0110, B:33:0x0125, B:35:0x012b, B:37:0x013c, B:39:0x0142, B:41:0x0155, B:43:0x015c, B:45:0x0162, B:47:0x016a, B:48:0x0171, B:50:0x0177), top: B:74:0x00e5 }] */
    /* JADX WARN: Removed duplicated region for block: B:50:0x0177 A[Catch: all -> 0x00fe, Exception -> 0x0107, TRY_LEAVE, TryCatch #9 {Exception -> 0x0107, all -> 0x00fe, blocks: (B:75:0x00e5, B:77:0x00e9, B:79:0x00ef, B:82:0x0110, B:33:0x0125, B:35:0x012b, B:37:0x013c, B:39:0x0142, B:41:0x0155, B:43:0x015c, B:45:0x0162, B:47:0x016a, B:48:0x0171, B:50:0x0177), top: B:74:0x00e5 }] */
    /* JADX WARN: Removed duplicated region for block: B:59:0x01cc  */
    /* JADX WARN: Removed duplicated region for block: B:62:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:67:0x01e1  */
    /* JADX WARN: Removed duplicated region for block: B:74:0x00e5 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$loadUserInfo$123(TLRPC.User user, boolean z, int i) {
        SQLiteCursor sQLiteCursor;
        int i2;
        boolean z2;
        TLRPC.UserFull userFull;
        int i3;
        boolean z3;
        ArrayList arrayList;
        long j;
        ArrayList<MessageObject> loadPinnedMessages;
        int size;
        NativeByteBuffer byteBufferValue;
        HashMap<Integer, MessageObject> hashMap = new HashMap<>();
        ArrayList<Integer> arrayList2 = new ArrayList<>();
        TLRPC.UserFull userFull2 = null;
        try {
            SQLiteCursor queryFinalized = this.database.queryFinalized("SELECT info, pinned FROM user_settings WHERE uid = " + user.id, new Object[0]);
            try {
                if (!queryFinalized.next() || (byteBufferValue = queryFinalized.byteBufferValue(0)) == null) {
                    userFull = null;
                } else {
                    userFull = TLRPC.UserFull.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                    try {
                        userFull.pinned_msg_id = queryFinalized.intValue(1);
                        byteBufferValue.reuse();
                    } catch (Exception e) {
                        e = e;
                        sQLiteCursor = queryFinalized;
                        userFull2 = userFull;
                        i2 = 0;
                        z2 = false;
                        try {
                            checkSQLException(e);
                            getMessagesController().processUserInfo(user, userFull2, true, z, i, arrayList2, hashMap, i2, z2);
                            if (sQLiteCursor == null) {
                            }
                        } catch (Throwable th) {
                            th = th;
                            getMessagesController().processUserInfo(user, userFull2, true, z, i, arrayList2, hashMap, i2, z2);
                            if (sQLiteCursor != null) {
                                sQLiteCursor.dispose();
                            }
                            throw th;
                        }
                    } catch (Throwable th2) {
                        th = th2;
                        sQLiteCursor = queryFinalized;
                        userFull2 = userFull;
                        i2 = 0;
                        z2 = false;
                        getMessagesController().processUserInfo(user, userFull2, true, z, i, arrayList2, hashMap, i2, z2);
                        if (sQLiteCursor != null) {
                        }
                        throw th;
                    }
                }
                queryFinalized.dispose();
                try {
                    SQLiteCursor queryFinalized2 = getMessagesStorage().getDatabase().queryFinalized(String.format(Locale.US, "SELECT mid FROM chat_pinned_v2 WHERE uid = %d ORDER BY mid DESC", Long.valueOf(user.id)), new Object[0]);
                    while (queryFinalized2.next()) {
                        int intValue = queryFinalized2.intValue(0);
                        arrayList2.add(Integer.valueOf(intValue));
                        hashMap.put(Integer.valueOf(intValue), null);
                    }
                    queryFinalized2.dispose();
                    queryFinalized = this.database.queryFinalized("SELECT count, end FROM chat_pinned_count WHERE uid = " + user.id, new Object[0]);
                    try {
                        if (queryFinalized.next()) {
                            int intValue2 = queryFinalized.intValue(0);
                            try {
                                i3 = intValue2;
                                if (queryFinalized.intValue(1) != 0) {
                                    z3 = true;
                                    queryFinalized.dispose();
                                    if (userFull != null) {
                                        try {
                                            if (userFull.pinned_msg_id != 0) {
                                                if (!arrayList2.isEmpty()) {
                                                    if (userFull.pinned_msg_id > arrayList2.get(0).intValue()) {
                                                    }
                                                }
                                                arrayList2.clear();
                                                arrayList2.add(Integer.valueOf(userFull.pinned_msg_id));
                                                hashMap.put(Integer.valueOf(userFull.pinned_msg_id), null);
                                            }
                                        } catch (Exception e2) {
                                            e = e2;
                                            sQLiteCursor = null;
                                            userFull2 = userFull;
                                            i2 = i3;
                                            z2 = z3;
                                            checkSQLException(e);
                                            getMessagesController().processUserInfo(user, userFull2, true, z, i, arrayList2, hashMap, i2, z2);
                                            if (sQLiteCursor == null) {
                                            }
                                        } catch (Throwable th3) {
                                            th = th3;
                                            sQLiteCursor = null;
                                            userFull2 = userFull;
                                            i2 = i3;
                                            z2 = z3;
                                            getMessagesController().processUserInfo(user, userFull2, true, z, i, arrayList2, hashMap, i2, z2);
                                            if (sQLiteCursor != null) {
                                            }
                                            throw th;
                                        }
                                    }
                                    if (!arrayList2.isEmpty() && (loadPinnedMessages = getMediaDataController().loadPinnedMessages(user.id, 0L, arrayList2, false)) != null) {
                                        size = loadPinnedMessages.size();
                                        for (int i4 = 0; i4 < size; i4++) {
                                            MessageObject messageObject = loadPinnedMessages.get(i4);
                                            hashMap.put(Integer.valueOf(messageObject.getId()), messageObject);
                                        }
                                    }
                                    arrayList = new ArrayList();
                                    if (userFull != null && (userFull.flags2 & 64) != 0) {
                                        j = userFull.personal_channel_id;
                                        if (j != 0) {
                                            arrayList.add(Long.valueOf(j));
                                        }
                                    }
                                    if (!arrayList.isEmpty()) {
                                        final ArrayList<TLRPC.Chat> arrayList3 = new ArrayList<>();
                                        getChatsInternal(TextUtils.join(",", arrayList), arrayList3);
                                        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda54
                                            @Override // java.lang.Runnable
                                            public final void run() {
                                                MessagesStorage.this.lambda$loadUserInfo$122(arrayList3);
                                            }
                                        });
                                    }
                                    getMessagesController().processUserInfo(user, userFull, true, z, i, arrayList2, hashMap, i3, z3);
                                    return;
                                }
                            } catch (Exception e3) {
                                e = e3;
                                sQLiteCursor = queryFinalized;
                                i2 = intValue2;
                                userFull2 = userFull;
                                z2 = false;
                                checkSQLException(e);
                                getMessagesController().processUserInfo(user, userFull2, true, z, i, arrayList2, hashMap, i2, z2);
                                if (sQLiteCursor == null) {
                                }
                            } catch (Throwable th4) {
                                th = th4;
                                sQLiteCursor = queryFinalized;
                                i2 = intValue2;
                                userFull2 = userFull;
                                z2 = false;
                                getMessagesController().processUserInfo(user, userFull2, true, z, i, arrayList2, hashMap, i2, z2);
                                if (sQLiteCursor != null) {
                                }
                                throw th;
                            }
                        } else {
                            i3 = 0;
                        }
                        queryFinalized.dispose();
                        if (userFull != null) {
                        }
                        if (!arrayList2.isEmpty()) {
                            size = loadPinnedMessages.size();
                            while (i4 < size) {
                            }
                        }
                        arrayList = new ArrayList();
                        if (userFull != null) {
                            j = userFull.personal_channel_id;
                            if (j != 0) {
                            }
                        }
                        if (!arrayList.isEmpty()) {
                        }
                        getMessagesController().processUserInfo(user, userFull, true, z, i, arrayList2, hashMap, i3, z3);
                        return;
                    } catch (Exception e4) {
                        e = e4;
                        sQLiteCursor = queryFinalized;
                    } catch (Throwable th5) {
                        th = th5;
                        sQLiteCursor = queryFinalized;
                    }
                    z3 = false;
                } catch (Exception e5) {
                    e = e5;
                    sQLiteCursor = null;
                    userFull2 = userFull;
                    i2 = 0;
                    z2 = false;
                    checkSQLException(e);
                    getMessagesController().processUserInfo(user, userFull2, true, z, i, arrayList2, hashMap, i2, z2);
                    if (sQLiteCursor == null) {
                        sQLiteCursor.dispose();
                    }
                } catch (Throwable th6) {
                    th = th6;
                    sQLiteCursor = null;
                    userFull2 = userFull;
                    i2 = 0;
                    z2 = false;
                    getMessagesController().processUserInfo(user, userFull2, true, z, i, arrayList2, hashMap, i2, z2);
                    if (sQLiteCursor != null) {
                    }
                    throw th;
                }
            } catch (Exception e6) {
                e = e6;
                sQLiteCursor = queryFinalized;
            } catch (Throwable th7) {
                th = th7;
                sQLiteCursor = queryFinalized;
            }
        } catch (Exception e7) {
            e = e7;
            sQLiteCursor = null;
        } catch (Throwable th8) {
            th = th8;
            sQLiteCursor = null;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ int lambda$localSearch$240(DialogsSearchAdapter.DialogSearchResult dialogSearchResult, DialogsSearchAdapter.DialogSearchResult dialogSearchResult2) {
        int i = dialogSearchResult.date;
        int i2 = dialogSearchResult2.date;
        if (i < i2) {
            return 1;
        }
        return i > i2 ? -1 : 0;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$markMentionMessageAsRead$106(int i, long j, long j2) {
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                SQLiteDatabase sQLiteDatabase = this.database;
                Locale locale = Locale.US;
                sQLiteDatabase.executeFast(String.format(locale, "UPDATE messages_v2 SET read_state = read_state | 2 WHERE mid = %d AND uid = %d", Integer.valueOf(i), Long.valueOf(j))).stepThis().dispose();
                SQLiteCursor queryFinalized = this.database.queryFinalized("SELECT unread_count_i FROM dialogs WHERE did = " + j2, new Object[0]);
                try {
                    int max = queryFinalized.next() ? Math.max(0, queryFinalized.intValue(0) - 1) : 0;
                    queryFinalized.dispose();
                    this.database.executeFast(String.format(locale, "UPDATE dialogs SET unread_count_i = %d WHERE did = %d", Integer.valueOf(max), Long.valueOf(j2))).stepThis().dispose();
                    LongSparseIntArray longSparseIntArray = new LongSparseIntArray(1);
                    longSparseIntArray.put(j2, max);
                    if (max == 0) {
                        updateFiltersReadCounter(null, longSparseIntArray, true);
                    }
                    getMessagesController().processDialogsUpdateRead(null, longSparseIntArray);
                    this.database.executeFast(String.format(locale, "UPDATE messages_topics SET read_state = read_state | 2 WHERE mid = %d AND uid = %d", Integer.valueOf(i), Long.valueOf(j))).stepThis().dispose();
                    queryFinalized = this.database.queryFinalized(String.format(locale, "SELECT data FROM messages_topics WHERE mid = %d AND uid = %d", Integer.valueOf(i), Long.valueOf(j)), new Object[0]);
                    long j3 = 0;
                    while (queryFinalized.next()) {
                        NativeByteBuffer byteBufferValue = queryFinalized.byteBufferValue(0);
                        if (byteBufferValue != null) {
                            TLRPC.Message TLdeserialize = TLRPC.Message.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                            byteBufferValue.reuse();
                            j3 = MessageObject.getTopicId(this.currentAccount, TLdeserialize, isForum(j));
                        }
                    }
                    queryFinalized.dispose();
                    if (j3 != 0) {
                        SQLiteDatabase sQLiteDatabase2 = this.database;
                        Locale locale2 = Locale.US;
                        SQLiteCursor queryFinalized2 = sQLiteDatabase2.queryFinalized(String.format(locale2, "SELECT unread_mentions FROM topics WHERE did = %d AND topic_id = %d", Long.valueOf(j2), Long.valueOf(j3)), new Object[0]);
                        try {
                            int max2 = queryFinalized2.next() ? Math.max(0, queryFinalized2.intValue(0) - 1) : 0;
                            queryFinalized2.dispose();
                            this.database.executeFast(String.format(locale2, "UPDATE topics SET unread_mentions = %d WHERE did = %d AND topic_id = %d", Integer.valueOf(max2), Long.valueOf(j), Long.valueOf(j3))).stepThis().dispose();
                            getMessagesController().getTopicsController().updateMentionsUnread(j, j3, max2);
                        } catch (Exception e) {
                            e = e;
                            sQLiteCursor = queryFinalized2;
                            checkSQLException(e);
                            if (sQLiteCursor != null) {
                                sQLiteCursor.dispose();
                            }
                        } catch (Throwable th) {
                            th = th;
                            sQLiteCursor = queryFinalized2;
                            if (sQLiteCursor != null) {
                                sQLiteCursor.dispose();
                            }
                            throw th;
                        }
                    }
                } catch (Exception e2) {
                    e = e2;
                    sQLiteCursor = queryFinalized;
                } catch (Throwable th2) {
                    th = th2;
                    sQLiteCursor = queryFinalized;
                }
            } catch (Exception e3) {
                e = e3;
            }
        } catch (Throwable th3) {
            th = th3;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$markMessageAsMention$107(int i, long j) {
        try {
            this.database.executeFast(String.format(Locale.US, "UPDATE messages_v2 SET mention = 1, read_state = read_state & ~2 WHERE mid = %d AND uid = %d", Integer.valueOf(i), Long.valueOf(j))).stepThis().dispose();
        } catch (Exception e) {
            checkSQLException(e);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$markMessageAsSendError$193(int i, TLRPC.Message message) {
        SQLitePreparedStatement executeFast;
        try {
            long j = message.id;
            if (MessageObject.isQuickReply(message)) {
                i = 5;
            }
            if (i == 5) {
                executeFast = this.database.executeFast(String.format(Locale.US, "UPDATE quick_replies_messages SET send_state = 2 WHERE mid = %d AND topic_id = %d", Long.valueOf(j), Integer.valueOf(MessageObject.getQuickReplyId(this.currentAccount, message))));
            } else if (i == 1) {
                executeFast = this.database.executeFast(String.format(Locale.US, "UPDATE scheduled_messages_v2 SET send_state = 2 WHERE mid = %d AND uid = %d", Long.valueOf(j), Long.valueOf(MessageObject.getDialogId(message))));
            } else {
                SQLiteDatabase sQLiteDatabase = this.database;
                Locale locale = Locale.US;
                sQLiteDatabase.executeFast(String.format(locale, "UPDATE messages_v2 SET send_state = 2 WHERE mid = %d AND uid = %d", Long.valueOf(j), Long.valueOf(MessageObject.getDialogId(message)))).stepThis().dispose();
                executeFast = this.database.executeFast(String.format(locale, "UPDATE messages_topics SET send_state = 2 WHERE mid = %d AND uid = %d", Long.valueOf(j), Long.valueOf(MessageObject.getDialogId(message))));
            }
            executeFast.stepThis().dispose();
        } catch (Exception e) {
            checkSQLException(e);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$markMessagesAsDeletedByRandoms$200(ArrayList arrayList) {
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.messagesDeleted, arrayList, 0L, Boolean.FALSE);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$markMessagesAsDeletedByRandoms$201(ArrayList arrayList) {
        SQLiteCursor queryFinalized;
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                try {
                    queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT mid, uid FROM randoms_v2 WHERE random_id IN(%s)", TextUtils.join(",", arrayList)), new Object[0]);
                } catch (Exception e) {
                    e = e;
                } catch (Throwable th) {
                    th = th;
                }
            } catch (Throwable th2) {
                th = th2;
            }
        } catch (Exception e2) {
            e = e2;
        }
        try {
            LongSparseArray longSparseArray = new LongSparseArray();
            while (queryFinalized.next()) {
                long longValue = queryFinalized.longValue(1);
                ArrayList arrayList2 = (ArrayList) longSparseArray.get(longValue);
                if (arrayList2 == null) {
                    arrayList2 = new ArrayList();
                    longSparseArray.put(longValue, arrayList2);
                }
                arrayList2.add(Integer.valueOf(queryFinalized.intValue(0)));
            }
            queryFinalized.dispose();
            if (longSparseArray.isEmpty()) {
                return;
            }
            int size = longSparseArray.size();
            for (int i = 0; i < size; i++) {
                long keyAt = longSparseArray.keyAt(i);
                final ArrayList<Integer> arrayList3 = (ArrayList) longSparseArray.valueAt(i);
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda63
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesStorage.this.lambda$markMessagesAsDeletedByRandoms$200(arrayList3);
                    }
                });
                updateDialogsWithReadMessagesInternal(arrayList3, null, null, null, null);
                lambda$markMessagesAsDeleted$209(keyAt, arrayList3, true, 0, 0);
                lambda$updateDialogsWithDeletedMessages$208(keyAt, 0L, arrayList3, null);
            }
        } catch (Exception e3) {
            e = e3;
            sQLiteCursor = queryFinalized;
            checkSQLException(e);
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
        } catch (Throwable th3) {
            th = th3;
            sQLiteCursor = queryFinalized;
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
            throw th;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$markMessagesAsDeletedInternal$204(ArrayList arrayList) {
        getFileLoader().cancelLoadFiles(arrayList);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$markMessagesAsDeletedInternal$205(LongSparseArray longSparseArray) {
        getMessagesController().getSavedMessagesController().updateDeleted(longSparseArray);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$markMessagesAsDeletedInternal$206(ArrayList arrayList, long j) {
        HashSet<Long> hashSet = new HashSet<>();
        Iterator it = arrayList.iterator();
        boolean z = false;
        while (it.hasNext()) {
            TLRPC.Message message = (TLRPC.Message) it.next();
            if (getMessagesController().processDeletedReactionTags(message)) {
                hashSet.add(Long.valueOf(MessageObject.getSavedDialogId(j, message)));
                z = true;
            }
        }
        if (z) {
            getMessagesController().updateSavedReactionTags(hashSet);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$markMessagesAsDeletedInternal$207(ArrayList arrayList) {
        HashSet<Long> hashSet = new HashSet<>();
        long[] jArr = new long[1];
        boolean z = false;
        for (int i = 0; i < arrayList.size(); i++) {
            if (getMediaDataController().processDeletedMessage(((Integer) arrayList.get(i)).intValue(), jArr)) {
                hashSet.add(Long.valueOf(jArr[0]));
                z = true;
            }
        }
        if (z) {
            getMessagesController().updateSavedReactionTags(hashSet);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$markMessagesAsDeletedInternal$210(ArrayList arrayList) {
        getFileLoader().cancelLoadFiles(arrayList);
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:54:0x00d0  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$markMessagesContentAsRead$198(long j, ArrayList arrayList, int i, int i2) {
        SQLiteCursor sQLiteCursor;
        Throwable th;
        SQLiteCursor sQLiteCursor2;
        Exception e;
        ArrayList arrayList2;
        int i3;
        if (j != 0) {
            markMessagesContentAsReadInternal(j, arrayList, i2);
            return;
        }
        try {
            try {
                LongSparseArray longSparseArray = new LongSparseArray();
                LongSparseArray longSparseArray2 = new LongSparseArray();
                sQLiteCursor2 = this.database.queryFinalized(String.format(Locale.US, "SELECT uid, mid, ttl FROM messages_v2 WHERE mid IN (%s) AND is_channel = 0", TextUtils.join(",", arrayList)), new Object[0]);
                while (sQLiteCursor2.next()) {
                    try {
                        long longValue = sQLiteCursor2.longValue(0);
                        int intValue = sQLiteCursor2.intValue(1);
                        int intValue2 = sQLiteCursor2.intValue(2);
                        if (intValue2 > 0 && intValue2 != Integer.MAX_VALUE && i != 0 && (i3 = intValue2 + i) >= i2) {
                            SparseArray sparseArray = (SparseArray) longSparseArray2.get(longValue);
                            if (sparseArray == null) {
                                sparseArray = new SparseArray();
                                longSparseArray2.put(longValue, sparseArray);
                            }
                            arrayList2 = (ArrayList) sparseArray.get(i3);
                            if (arrayList2 == null) {
                                arrayList2 = new ArrayList();
                                sparseArray.put(i3, arrayList2);
                            }
                            arrayList2.add(Integer.valueOf(intValue));
                        }
                        ArrayList arrayList3 = (ArrayList) longSparseArray.get(longValue);
                        if (arrayList3 == null) {
                            arrayList3 = new ArrayList();
                            longSparseArray.put(longValue, arrayList3);
                        }
                        arrayList2 = arrayList3;
                        arrayList2.add(Integer.valueOf(intValue));
                    } catch (Exception e2) {
                        e = e2;
                        checkSQLException(e);
                        if (sQLiteCursor2 != null) {
                            sQLiteCursor2.dispose();
                            return;
                        }
                        return;
                    }
                }
                sQLiteCursor2.dispose();
                int size = longSparseArray.size();
                for (int i4 = 0; i4 < size; i4++) {
                    markMessagesContentAsReadInternal(longSparseArray.keyAt(i4), (ArrayList) longSparseArray.valueAt(i4), i2);
                }
                int size2 = longSparseArray2.size();
                for (int i5 = 0; i5 < size2; i5++) {
                    createTaskForSecretMedia(longSparseArray2.keyAt(i5), (SparseArray) longSparseArray2.valueAt(i5));
                }
            } catch (Throwable th2) {
                th = th2;
                sQLiteCursor = arrayList;
                if (sQLiteCursor != 0) {
                    sQLiteCursor.dispose();
                }
                throw th;
            }
        } catch (Exception e3) {
            sQLiteCursor2 = null;
            e = e3;
        } catch (Throwable th3) {
            sQLiteCursor = 0;
            th = th3;
            if (sQLiteCursor != 0) {
            }
            throw th;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$new$0() {
        openDatabase(1);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$onDeleteQueryComplete$86(long j) {
        try {
            this.database.executeFast("DELETE FROM media_counts_v2 WHERE uid = " + j).stepThis().dispose();
        } catch (Exception e) {
            checkSQLException(e);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$onReactionsUpdate$100(TLRPC.TL_messageReactions tL_messageReactions, TLRPC.TL_messageReactions tL_messageReactions2, long j) {
        LongSparseArray longSparseArray = new LongSparseArray();
        LongSparseArray longSparseArray2 = new LongSparseArray();
        if (tL_messageReactions != null && tL_messageReactions.results != null && tL_messageReactions.reactions_as_tags) {
            for (int i = 0; i < tL_messageReactions.results.size(); i++) {
                ReactionsLayoutInBubble.VisibleReaction fromTL = ReactionsLayoutInBubble.VisibleReaction.fromTL(tL_messageReactions.results.get(i).reaction);
                longSparseArray.put(fromTL.hash, fromTL);
            }
        }
        if (tL_messageReactions2 != null && tL_messageReactions2.results != null && tL_messageReactions2.reactions_as_tags) {
            for (int i2 = 0; i2 < tL_messageReactions2.results.size(); i2++) {
                ReactionsLayoutInBubble.VisibleReaction fromTL2 = ReactionsLayoutInBubble.VisibleReaction.fromTL(tL_messageReactions2.results.get(i2).reaction);
                longSparseArray2.put(fromTL2.hash, fromTL2);
            }
        }
        boolean z = false;
        for (int i3 = 0; i3 < longSparseArray.size(); i3++) {
            long keyAt = longSparseArray.keyAt(i3);
            ReactionsLayoutInBubble.VisibleReaction visibleReaction = (ReactionsLayoutInBubble.VisibleReaction) longSparseArray.valueAt(i3);
            if (!longSparseArray2.containsKey(keyAt)) {
                z = getMessagesController().updateSavedReactionTags(j, visibleReaction, false, false) || z;
            }
        }
        for (int i4 = 0; i4 < longSparseArray2.size(); i4++) {
            long keyAt2 = longSparseArray2.keyAt(i4);
            ReactionsLayoutInBubble.VisibleReaction visibleReaction2 = (ReactionsLayoutInBubble.VisibleReaction) longSparseArray2.valueAt(i4);
            if (!longSparseArray.containsKey(keyAt2)) {
                z = getMessagesController().updateSavedReactionTags(j, visibleReaction2, true, false) || z;
            }
        }
        if (z) {
            if (j != 0) {
                getMessagesController().updateSavedReactionTags(0L);
            }
            getMessagesController().updateSavedReactionTags(j);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$onReactionsUpdate$99(ArrayList arrayList) {
        HashSet<Long> hashSet = new HashSet<>();
        LongSparseArray longSparseArray = new LongSparseArray();
        LongSparseArray longSparseArray2 = new LongSparseArray();
        boolean z = false;
        for (int i = 0; i < arrayList.size(); i++) {
            SavedReactionsUpdate savedReactionsUpdate = (SavedReactionsUpdate) arrayList.get(i);
            TLRPC.TL_messageReactions tL_messageReactions = savedReactionsUpdate.old;
            TLRPC.TL_messageReactions tL_messageReactions2 = savedReactionsUpdate.last;
            longSparseArray.clear();
            longSparseArray2.clear();
            if (tL_messageReactions != null && tL_messageReactions.results != null && tL_messageReactions.reactions_as_tags) {
                for (int i2 = 0; i2 < tL_messageReactions.results.size(); i2++) {
                    ReactionsLayoutInBubble.VisibleReaction fromTL = ReactionsLayoutInBubble.VisibleReaction.fromTL(tL_messageReactions.results.get(i2).reaction);
                    if (fromTL != null) {
                        longSparseArray.put(fromTL.hash, fromTL);
                    }
                }
            }
            if (tL_messageReactions2 != null && tL_messageReactions2.results != null && tL_messageReactions2.reactions_as_tags) {
                for (int i3 = 0; i3 < tL_messageReactions2.results.size(); i3++) {
                    ReactionsLayoutInBubble.VisibleReaction fromTL2 = ReactionsLayoutInBubble.VisibleReaction.fromTL(tL_messageReactions2.results.get(i3).reaction);
                    if (fromTL2 != null) {
                        longSparseArray2.put(fromTL2.hash, fromTL2);
                    }
                }
            }
            for (int i4 = 0; i4 < longSparseArray.size(); i4++) {
                long keyAt = longSparseArray.keyAt(i4);
                ReactionsLayoutInBubble.VisibleReaction visibleReaction = (ReactionsLayoutInBubble.VisibleReaction) longSparseArray.valueAt(i4);
                if (!longSparseArray2.containsKey(keyAt) && getMessagesController().updateSavedReactionTags(savedReactionsUpdate.topic_id, visibleReaction, false, false)) {
                    hashSet.add(Long.valueOf(savedReactionsUpdate.topic_id));
                    z = true;
                }
            }
            for (int i5 = 0; i5 < longSparseArray2.size(); i5++) {
                long keyAt2 = longSparseArray2.keyAt(i5);
                ReactionsLayoutInBubble.VisibleReaction visibleReaction2 = (ReactionsLayoutInBubble.VisibleReaction) longSparseArray2.valueAt(i5);
                if (!longSparseArray.containsKey(keyAt2) && getMessagesController().updateSavedReactionTags(savedReactionsUpdate.topic_id, visibleReaction2, true, false)) {
                    hashSet.add(Long.valueOf(savedReactionsUpdate.topic_id));
                    z = true;
                }
            }
        }
        if (!z || hashSet.isEmpty()) {
            return;
        }
        getMessagesController().updateSavedReactionTags(hashSet);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$openDatabase$1() {
        if (this.databaseMigrationInProgress) {
            this.databaseMigrationInProgress = false;
            NotificationCenter.getInstance(this.currentAccount).lambda$postNotificationNameOnUIThread$1(NotificationCenter.onDatabaseMigration, Boolean.FALSE);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$openDatabase$2() {
        this.showClearDatabaseAlert = false;
        NotificationCenter.getInstance(this.currentAccount).lambda$postNotificationNameOnUIThread$1(NotificationCenter.onDatabaseOpened, new Object[0]);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$overwriteChannel$182(long j, TLRPC.TL_updates_channelDifferenceTooLong tL_updates_channelDifferenceTooLong) {
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.removeAllMessagesFromDialog, Long.valueOf(j), Boolean.TRUE, tL_updates_channelDifferenceTooLong);
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:13:0x0229  */
    /* JADX WARN: Removed duplicated region for block: B:16:0x0258  */
    /* JADX WARN: Removed duplicated region for block: B:20:0x0272 A[Catch: all -> 0x0262, Exception -> 0x0265, TRY_LEAVE, TryCatch #5 {Exception -> 0x0265, all -> 0x0262, blocks: (B:3:0x000a, B:11:0x003c, B:14:0x022c, B:17:0x025a, B:18:0x0268, B:20:0x0272), top: B:2:0x000a }] */
    /* JADX WARN: Removed duplicated region for block: B:23:0x028d  */
    /* JADX WARN: Removed duplicated region for block: B:26:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:27:0x022b  */
    /* JADX WARN: Removed duplicated region for block: B:40:0x0294  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$overwriteChannel$183(long j, int i, final TLRPC.TL_updates_channelDifferenceTooLong tL_updates_channelDifferenceTooLong, Runnable runnable) {
        SQLiteCursor sQLiteCursor;
        SQLiteCursor queryFinalized;
        int intValue;
        boolean z;
        final long j2 = -j;
        try {
            queryFinalized = this.database.queryFinalized("SELECT pinned FROM dialogs WHERE did = " + j2, new Object[0]);
        } catch (Exception e) {
            e = e;
            sQLiteCursor = null;
        } catch (Throwable th) {
            th = th;
            sQLiteCursor = null;
        }
        try {
        } catch (Exception e2) {
            e = e2;
            sQLiteCursor = queryFinalized;
            try {
                checkSQLException(e);
                if (sQLiteCursor != null) {
                    sQLiteCursor.dispose();
                }
                if (runnable != null) {
                }
            } catch (Throwable th2) {
                th = th2;
                if (sQLiteCursor != null) {
                    sQLiteCursor.dispose();
                }
                throw th;
            }
        } catch (Throwable th3) {
            th = th3;
            sQLiteCursor = queryFinalized;
            if (sQLiteCursor != null) {
            }
            throw th;
        }
        if (queryFinalized.next()) {
            intValue = queryFinalized.intValue(0);
        } else {
            intValue = 0;
            if (i != 0) {
                z = true;
                queryFinalized.dispose();
                this.database.executeFast("DELETE FROM chat_pinned_count WHERE uid = " + j2).stepThis().dispose();
                this.database.executeFast("DELETE FROM chat_pinned_v2 WHERE uid = " + j2).stepThis().dispose();
                this.database.executeFast("DELETE FROM messages_v2 WHERE uid = " + j2).stepThis().dispose();
                this.database.executeFast("DELETE FROM bot_keyboard WHERE uid = " + j2).stepThis().dispose();
                this.database.executeFast("DELETE FROM bot_keyboard_topics WHERE uid = " + j2).stepThis().dispose();
                this.database.executeFast("UPDATE media_counts_v2 SET old = 1 WHERE uid = " + j2).stepThis().dispose();
                this.database.executeFast("DELETE FROM media_v4 WHERE uid = " + j2).stepThis().dispose();
                this.database.executeFast("DELETE FROM messages_holes WHERE uid = " + j2).stepThis().dispose();
                this.database.executeFast("DELETE FROM media_holes_v2 WHERE uid = " + j2).stepThis().dispose();
                this.database.executeFast("DELETE FROM topics WHERE did = " + j2).stepThis().dispose();
                this.database.executeFast("DELETE FROM media_topics WHERE uid = " + j2).stepThis().dispose();
                this.database.executeFast("DELETE FROM media_holes_topics WHERE uid = " + j2).stepThis().dispose();
                this.database.executeFast("UPDATE media_counts_topics SET old = 1 WHERE uid = " + j2).stepThis().dispose();
                this.database.executeFast("DELETE FROM messages_topics WHERE uid = " + j2).stepThis().dispose();
                this.database.executeFast("DELETE FROM messages_holes_topics WHERE uid = " + j2).stepThis().dispose();
                getMediaDataController().clearBotKeyboard(j2);
                TLRPC.TL_messages_dialogs tL_messages_dialogs = new TLRPC.TL_messages_dialogs();
                tL_messages_dialogs.chats.addAll(tL_updates_channelDifferenceTooLong.chats);
                tL_messages_dialogs.users.addAll(tL_updates_channelDifferenceTooLong.users);
                tL_messages_dialogs.messages.addAll(tL_updates_channelDifferenceTooLong.messages);
                TLRPC.Dialog dialog = tL_updates_channelDifferenceTooLong.dialog;
                dialog.id = j2;
                dialog.flags = 1;
                dialog.notify_settings = null;
                dialog.pinned = intValue == 0;
                dialog.pinnedNum = intValue;
                tL_messages_dialogs.dialogs.add(dialog);
                putDialogsInternal(tL_messages_dialogs, 0);
                updateDialogsWithDeletedMessages(j2, j, new ArrayList<>(), null, false);
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda11
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesStorage.this.lambda$overwriteChannel$182(j2, tL_updates_channelDifferenceTooLong);
                    }
                });
                if (z) {
                    if (i == 1) {
                        getMessagesController().checkChatInviter(j, true);
                    } else {
                        getMessagesController().generateJoinMessage(j, false);
                    }
                }
                if (i != 1) {
                    getMessagesController().getTopicsController().reloadTopics(j);
                }
                if (runnable != null) {
                    runnable.run();
                    return;
                }
                return;
            }
        }
        z = false;
        queryFinalized.dispose();
        this.database.executeFast("DELETE FROM chat_pinned_count WHERE uid = " + j2).stepThis().dispose();
        this.database.executeFast("DELETE FROM chat_pinned_v2 WHERE uid = " + j2).stepThis().dispose();
        this.database.executeFast("DELETE FROM messages_v2 WHERE uid = " + j2).stepThis().dispose();
        this.database.executeFast("DELETE FROM bot_keyboard WHERE uid = " + j2).stepThis().dispose();
        this.database.executeFast("DELETE FROM bot_keyboard_topics WHERE uid = " + j2).stepThis().dispose();
        this.database.executeFast("UPDATE media_counts_v2 SET old = 1 WHERE uid = " + j2).stepThis().dispose();
        this.database.executeFast("DELETE FROM media_v4 WHERE uid = " + j2).stepThis().dispose();
        this.database.executeFast("DELETE FROM messages_holes WHERE uid = " + j2).stepThis().dispose();
        this.database.executeFast("DELETE FROM media_holes_v2 WHERE uid = " + j2).stepThis().dispose();
        this.database.executeFast("DELETE FROM topics WHERE did = " + j2).stepThis().dispose();
        this.database.executeFast("DELETE FROM media_topics WHERE uid = " + j2).stepThis().dispose();
        this.database.executeFast("DELETE FROM media_holes_topics WHERE uid = " + j2).stepThis().dispose();
        this.database.executeFast("UPDATE media_counts_topics SET old = 1 WHERE uid = " + j2).stepThis().dispose();
        this.database.executeFast("DELETE FROM messages_topics WHERE uid = " + j2).stepThis().dispose();
        this.database.executeFast("DELETE FROM messages_holes_topics WHERE uid = " + j2).stepThis().dispose();
        getMediaDataController().clearBotKeyboard(j2);
        TLRPC.TL_messages_dialogs tL_messages_dialogs2 = new TLRPC.TL_messages_dialogs();
        tL_messages_dialogs2.chats.addAll(tL_updates_channelDifferenceTooLong.chats);
        tL_messages_dialogs2.users.addAll(tL_updates_channelDifferenceTooLong.users);
        tL_messages_dialogs2.messages.addAll(tL_updates_channelDifferenceTooLong.messages);
        TLRPC.Dialog dialog2 = tL_updates_channelDifferenceTooLong.dialog;
        dialog2.id = j2;
        dialog2.flags = 1;
        dialog2.notify_settings = null;
        dialog2.pinned = intValue == 0;
        dialog2.pinnedNum = intValue;
        tL_messages_dialogs2.dialogs.add(dialog2);
        putDialogsInternal(tL_messages_dialogs2, 0);
        updateDialogsWithDeletedMessages(j2, j, new ArrayList<>(), null, false);
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda11
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$overwriteChannel$182(j2, tL_updates_channelDifferenceTooLong);
            }
        });
        if (z) {
        }
        if (i != 1) {
        }
        if (runnable != null) {
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ int lambda$processLoadedFilterPeersInternal$67(MessagesController.DialogFilter dialogFilter, MessagesController.DialogFilter dialogFilter2) {
        int i = dialogFilter.order;
        int i2 = dialogFilter2.order;
        if (i > i2) {
            return 1;
        }
        return i < i2 ? -1 : 0;
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:52:0x01bd  */
    /* JADX WARN: Removed duplicated region for block: B:54:0x01c2  */
    /* JADX WARN: Removed duplicated region for block: B:57:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:61:0x01d0  */
    /* JADX WARN: Removed duplicated region for block: B:63:0x01d5  */
    /* JADX WARN: Removed duplicated region for block: B:66:0x01dc  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$processPendingRead$139(long j, int i, int i2, int i3, int i4) {
        SQLitePreparedStatement sQLitePreparedStatement;
        SQLiteCursor sQLiteCursor;
        SQLiteCursor sQLiteCursor2;
        SQLitePreparedStatement sQLitePreparedStatement2;
        SQLiteDatabase sQLiteDatabase;
        SQLiteDatabase sQLiteDatabase2;
        long j2;
        int i5;
        int i6;
        int i7;
        SQLiteCursor queryFinalized;
        int intValue;
        SQLitePreparedStatement sQLitePreparedStatement3;
        SQLitePreparedStatement sQLitePreparedStatement4;
        int i8 = i4;
        try {
            int i9 = 0;
            sQLiteCursor = this.database.queryFinalized("SELECT unread_count, inbox_max, last_mid FROM dialogs WHERE did = " + j, new Object[0]);
            try {
                if (sQLiteCursor.next()) {
                    i5 = sQLiteCursor.intValue(0);
                    int intValue2 = sQLiteCursor.intValue(1);
                    j2 = sQLiteCursor.longValue(2);
                    i7 = intValue2;
                    i6 = i5;
                } else {
                    j2 = 0;
                    i5 = 0;
                    i6 = 0;
                    i7 = 0;
                }
                sQLiteCursor.dispose();
                this.database.beginTransaction();
                if (DialogObject.isEncryptedDialog(j)) {
                    sQLitePreparedStatement2 = this.database.executeFast("UPDATE messages_v2 SET read_state = read_state | 1 WHERE uid = ? AND mid >= ? AND read_state IN(0,2) AND out = 0");
                    try {
                        sQLitePreparedStatement2.requery();
                        sQLitePreparedStatement2.bindLong(1, j);
                        sQLitePreparedStatement2.bindInteger(2, i8);
                        sQLitePreparedStatement2.step();
                        sQLitePreparedStatement2.dispose();
                        if (i8 <= j2) {
                            queryFinalized = null;
                        } else {
                            try {
                                queryFinalized = this.database.queryFinalized("SELECT changes()", new Object[0]);
                            } catch (Exception e) {
                                e = e;
                                sQLitePreparedStatement2 = null;
                                sQLiteCursor2 = null;
                            } catch (Throwable th) {
                                th = th;
                                sQLitePreparedStatement2 = null;
                                sQLiteCursor2 = null;
                            }
                            try {
                                if (queryFinalized.next()) {
                                    try {
                                        intValue = queryFinalized.intValue(0) + i2;
                                    } catch (Exception e2) {
                                        e = e2;
                                        sQLiteCursor2 = queryFinalized;
                                        sQLitePreparedStatement2 = null;
                                        checkSQLException(e);
                                        if (sQLitePreparedStatement2 != null) {
                                        }
                                        if (sQLiteCursor2 != null) {
                                        }
                                        sQLiteDatabase2 = this.database;
                                        if (sQLiteDatabase2 == null) {
                                        }
                                        sQLiteDatabase2.commitTransaction();
                                    } catch (Throwable th2) {
                                        th = th2;
                                        sQLiteCursor2 = queryFinalized;
                                        sQLitePreparedStatement2 = null;
                                        if (sQLitePreparedStatement2 != null) {
                                        }
                                        if (sQLiteCursor2 != null) {
                                        }
                                        sQLiteDatabase = this.database;
                                        if (sQLiteDatabase != null) {
                                        }
                                        throw th;
                                    }
                                } else {
                                    intValue = 0;
                                }
                                queryFinalized.dispose();
                                i9 = Math.max(0, i5 - intValue);
                            } catch (Exception e3) {
                                e = e3;
                                sQLitePreparedStatement = null;
                                sQLiteCursor2 = queryFinalized;
                                sQLitePreparedStatement2 = sQLitePreparedStatement;
                                checkSQLException(e);
                                if (sQLitePreparedStatement2 != null) {
                                }
                                if (sQLiteCursor2 != null) {
                                }
                                sQLiteDatabase2 = this.database;
                                if (sQLiteDatabase2 == null) {
                                }
                                sQLiteDatabase2.commitTransaction();
                            } catch (Throwable th3) {
                                th = th3;
                                sQLitePreparedStatement = null;
                                sQLiteCursor2 = queryFinalized;
                                sQLitePreparedStatement2 = sQLitePreparedStatement;
                                if (sQLitePreparedStatement2 != null) {
                                }
                                if (sQLiteCursor2 != null) {
                                }
                                sQLiteDatabase = this.database;
                                if (sQLiteDatabase != null) {
                                }
                                throw th;
                            }
                        }
                    } catch (Exception e4) {
                        e = e4;
                        sQLiteCursor2 = null;
                    } catch (Throwable th4) {
                        th = th4;
                        sQLiteCursor2 = null;
                    }
                } else {
                    try {
                        i8 = Math.max(i7, i);
                        SQLitePreparedStatement executeFast = this.database.executeFast("UPDATE messages_v2 SET read_state = read_state | 1 WHERE uid = ? AND mid <= ? AND read_state IN(0,2) AND out = 0");
                        try {
                            executeFast.requery();
                            executeFast.bindLong(1, j);
                            executeFast.bindInteger(2, i8);
                            executeFast.step();
                            executeFast.dispose();
                            sQLitePreparedStatement4 = executeFast;
                            if (i8 >= j2) {
                                queryFinalized = null;
                            } else {
                                try {
                                    queryFinalized = this.database.queryFinalized("SELECT changes()", new Object[0]);
                                } catch (Exception e5) {
                                    e = e5;
                                    sQLitePreparedStatement2 = sQLitePreparedStatement4;
                                    sQLiteCursor2 = null;
                                    try {
                                        checkSQLException(e);
                                        if (sQLitePreparedStatement2 != null) {
                                        }
                                        if (sQLiteCursor2 != null) {
                                        }
                                        sQLiteDatabase2 = this.database;
                                        if (sQLiteDatabase2 == null) {
                                        }
                                        sQLiteDatabase2.commitTransaction();
                                    } catch (Throwable th5) {
                                        th = th5;
                                        if (sQLitePreparedStatement2 != null) {
                                            sQLitePreparedStatement2.dispose();
                                        }
                                        if (sQLiteCursor2 != null) {
                                            sQLiteCursor2.dispose();
                                        }
                                        sQLiteDatabase = this.database;
                                        if (sQLiteDatabase != null) {
                                            sQLiteDatabase.commitTransaction();
                                        }
                                        throw th;
                                    }
                                } catch (Throwable th6) {
                                    th = th6;
                                    sQLitePreparedStatement2 = sQLitePreparedStatement4;
                                    sQLiteCursor2 = null;
                                    if (sQLitePreparedStatement2 != null) {
                                    }
                                    if (sQLiteCursor2 != null) {
                                    }
                                    sQLiteDatabase = this.database;
                                    if (sQLiteDatabase != null) {
                                    }
                                    throw th;
                                }
                                try {
                                    int intValue3 = queryFinalized.next() ? queryFinalized.intValue(0) + i2 : 0;
                                    queryFinalized.dispose();
                                    i9 = Math.max(0, i5 - intValue3);
                                } catch (Exception e6) {
                                    e = e6;
                                    sQLiteCursor2 = queryFinalized;
                                    sQLitePreparedStatement2 = sQLitePreparedStatement4;
                                    checkSQLException(e);
                                    if (sQLitePreparedStatement2 != null) {
                                    }
                                    if (sQLiteCursor2 != null) {
                                    }
                                    sQLiteDatabase2 = this.database;
                                    if (sQLiteDatabase2 == null) {
                                    }
                                    sQLiteDatabase2.commitTransaction();
                                } catch (Throwable th7) {
                                    th = th7;
                                    sQLiteCursor2 = queryFinalized;
                                    sQLitePreparedStatement2 = sQLitePreparedStatement4;
                                    if (sQLitePreparedStatement2 != null) {
                                    }
                                    if (sQLiteCursor2 != null) {
                                    }
                                    sQLiteDatabase = this.database;
                                    if (sQLiteDatabase != null) {
                                    }
                                    throw th;
                                }
                            }
                            sQLitePreparedStatement3 = this.database.executeFast("DELETE FROM unread_push_messages WHERE uid = ? AND mid <= ?");
                            try {
                                try {
                                    sQLitePreparedStatement3.requery();
                                    sQLitePreparedStatement3.bindLong(1, j);
                                    sQLitePreparedStatement3.bindInteger(2, i8);
                                    sQLitePreparedStatement3.step();
                                    sQLitePreparedStatement3.dispose();
                                    sQLitePreparedStatement3 = this.database.executeFast("DELETE FROM unread_push_messages WHERE uid = ? AND date <= ?");
                                    sQLitePreparedStatement3.requery();
                                    sQLitePreparedStatement3.bindLong(1, j);
                                    sQLitePreparedStatement3.bindInteger(2, i3);
                                    sQLitePreparedStatement3.step();
                                    sQLitePreparedStatement3.dispose();
                                } catch (Exception e7) {
                                    e = e7;
                                    sQLiteCursor2 = queryFinalized;
                                    sQLitePreparedStatement2 = sQLitePreparedStatement3;
                                    checkSQLException(e);
                                    if (sQLitePreparedStatement2 != null) {
                                        sQLitePreparedStatement2.dispose();
                                    }
                                    if (sQLiteCursor2 != null) {
                                        sQLiteCursor2.dispose();
                                    }
                                    sQLiteDatabase2 = this.database;
                                    if (sQLiteDatabase2 == null) {
                                        return;
                                    }
                                    sQLiteDatabase2.commitTransaction();
                                }
                            } catch (Throwable th8) {
                                th = th8;
                                sQLiteCursor2 = queryFinalized;
                                sQLitePreparedStatement2 = sQLitePreparedStatement3;
                                if (sQLitePreparedStatement2 != null) {
                                }
                                if (sQLiteCursor2 != null) {
                                }
                                sQLiteDatabase = this.database;
                                if (sQLiteDatabase != null) {
                                }
                                throw th;
                            }
                        } catch (Exception e8) {
                            e = e8;
                            sQLitePreparedStatement4 = executeFast;
                        } catch (Throwable th9) {
                            th = th9;
                            sQLitePreparedStatement4 = executeFast;
                        }
                    } catch (Exception e9) {
                        e = e9;
                        sQLiteCursor = null;
                        sQLitePreparedStatement = null;
                        sQLiteCursor2 = sQLiteCursor;
                        sQLitePreparedStatement2 = sQLitePreparedStatement;
                        checkSQLException(e);
                        if (sQLitePreparedStatement2 != null) {
                        }
                        if (sQLiteCursor2 != null) {
                        }
                        sQLiteDatabase2 = this.database;
                        if (sQLiteDatabase2 == null) {
                        }
                        sQLiteDatabase2.commitTransaction();
                    } catch (Throwable th10) {
                        th = th10;
                        sQLiteCursor = null;
                        sQLitePreparedStatement = null;
                        sQLiteCursor2 = sQLiteCursor;
                        sQLitePreparedStatement2 = sQLitePreparedStatement;
                        if (sQLitePreparedStatement2 != null) {
                        }
                        if (sQLiteCursor2 != null) {
                        }
                        sQLiteDatabase = this.database;
                        if (sQLiteDatabase != null) {
                        }
                        throw th;
                    }
                }
                sQLitePreparedStatement3 = this.database.executeFast("UPDATE dialogs SET unread_count = ?, inbox_max = ? WHERE did = ?");
                try {
                    sQLitePreparedStatement3.requery();
                    sQLitePreparedStatement3.bindInteger(1, i9);
                    sQLitePreparedStatement3.bindInteger(2, i8);
                    sQLitePreparedStatement3.bindLong(3, j);
                    sQLitePreparedStatement3.step();
                    sQLitePreparedStatement3.dispose();
                    this.database.commitTransaction();
                    if (i6 == 0 || i9 != 0 || isForum(j)) {
                        sQLitePreparedStatement = null;
                    } else {
                        LongSparseIntArray longSparseIntArray = new LongSparseIntArray();
                        longSparseIntArray.put(j, i9);
                        sQLitePreparedStatement = null;
                        try {
                            updateFiltersReadCounter(longSparseIntArray, null, true);
                        } catch (Exception e10) {
                            e = e10;
                            sQLiteCursor2 = queryFinalized;
                            sQLitePreparedStatement2 = sQLitePreparedStatement;
                            checkSQLException(e);
                            if (sQLitePreparedStatement2 != null) {
                            }
                            if (sQLiteCursor2 != null) {
                            }
                            sQLiteDatabase2 = this.database;
                            if (sQLiteDatabase2 == null) {
                            }
                            sQLiteDatabase2.commitTransaction();
                        } catch (Throwable th11) {
                            th = th11;
                            sQLiteCursor2 = queryFinalized;
                            sQLitePreparedStatement2 = sQLitePreparedStatement;
                            if (sQLitePreparedStatement2 != null) {
                            }
                            if (sQLiteCursor2 != null) {
                            }
                            sQLiteDatabase = this.database;
                            if (sQLiteDatabase != null) {
                            }
                            throw th;
                        }
                    }
                    updateWidgets(j);
                    if (queryFinalized != null) {
                        queryFinalized.dispose();
                    }
                    sQLiteDatabase2 = this.database;
                    if (sQLiteDatabase2 == null) {
                        return;
                    }
                } catch (Exception e11) {
                    e = e11;
                    sQLitePreparedStatement = sQLitePreparedStatement3;
                }
            } catch (Exception e12) {
                e = e12;
            } catch (Throwable th12) {
                th = th12;
            }
        } catch (Exception e13) {
            e = e13;
            sQLitePreparedStatement = null;
            sQLiteCursor = null;
        } catch (Throwable th13) {
            th = th13;
            sQLitePreparedStatement = null;
            sQLiteCursor = null;
        }
        sQLiteDatabase2.commitTransaction();
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Code restructure failed: missing block: B:38:0x011f, code lost:
    
        if (r12 != null) goto L51;
     */
    /* JADX WARN: Code restructure failed: missing block: B:39:0x013d, code lost:
    
        r12.commitTransaction();
     */
    /* JADX WARN: Code restructure failed: missing block: B:41:0x0140, code lost:
    
        return;
     */
    /* JADX WARN: Code restructure failed: missing block: B:52:0x013b, code lost:
    
        if (r12 != null) goto L51;
     */
    /* JADX WARN: Removed duplicated region for block: B:48:0x0131  */
    /* JADX WARN: Removed duplicated region for block: B:50:0x0136  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$putCachedPhoneBook$143(HashMap hashMap, boolean z) {
        SQLitePreparedStatement sQLitePreparedStatement;
        SQLiteDatabase sQLiteDatabase;
        SQLitePreparedStatement sQLitePreparedStatement2 = null;
        try {
            try {
                if (BuildVars.LOGS_ENABLED) {
                    FileLog.d(this.currentAccount + " save contacts to db " + hashMap.size());
                }
                this.database.executeFast("DELETE FROM user_contacts_v7 WHERE 1").stepThis().dispose();
                this.database.executeFast("DELETE FROM user_phones_v7 WHERE 1").stepThis().dispose();
                this.database.beginTransaction();
                SQLitePreparedStatement executeFast = this.database.executeFast("REPLACE INTO user_contacts_v7 VALUES(?, ?, ?, ?, ?)");
                try {
                    sQLitePreparedStatement = this.database.executeFast("REPLACE INTO user_phones_v7 VALUES(?, ?, ?, ?)");
                    try {
                        Iterator it = hashMap.entrySet().iterator();
                        while (true) {
                            if (!it.hasNext()) {
                                break;
                            }
                            ContactsController.Contact contact = (ContactsController.Contact) ((Map.Entry) it.next()).getValue();
                            if (!contact.phones.isEmpty() && !contact.shortPhones.isEmpty()) {
                                executeFast.requery();
                                executeFast.bindString(1, contact.key);
                                executeFast.bindInteger(2, contact.contact_id);
                                executeFast.bindString(3, contact.first_name);
                                executeFast.bindString(4, contact.last_name);
                                executeFast.bindInteger(5, contact.imported);
                                executeFast.step();
                                for (int i = 0; i < contact.phones.size(); i++) {
                                    sQLitePreparedStatement.requery();
                                    sQLitePreparedStatement.bindString(1, contact.key);
                                    sQLitePreparedStatement.bindString(2, contact.phones.get(i));
                                    sQLitePreparedStatement.bindString(3, contact.shortPhones.get(i));
                                    sQLitePreparedStatement.bindInteger(4, contact.phoneDeleted.get(i).intValue());
                                    sQLitePreparedStatement.step();
                                }
                            }
                        }
                        executeFast.dispose();
                        try {
                            sQLitePreparedStatement.dispose();
                            this.database.commitTransaction();
                            if (z) {
                                this.database.executeFast("DROP TABLE IF EXISTS user_contacts_v6;").stepThis().dispose();
                                this.database.executeFast("DROP TABLE IF EXISTS user_phones_v6;").stepThis().dispose();
                                getCachedPhoneBook(false);
                            }
                            sQLiteDatabase = this.database;
                        } catch (Exception e) {
                            e = e;
                            checkSQLException(e);
                            if (sQLitePreparedStatement2 != null) {
                                sQLitePreparedStatement2.dispose();
                            }
                            if (sQLitePreparedStatement != null) {
                                sQLitePreparedStatement.dispose();
                            }
                            sQLiteDatabase = this.database;
                        }
                    } catch (Exception e2) {
                        e = e2;
                        sQLitePreparedStatement2 = executeFast;
                        checkSQLException(e);
                        if (sQLitePreparedStatement2 != null) {
                        }
                        if (sQLitePreparedStatement != null) {
                        }
                        sQLiteDatabase = this.database;
                    } catch (Throwable th) {
                        th = th;
                        sQLitePreparedStatement2 = executeFast;
                        if (sQLitePreparedStatement2 != null) {
                            sQLitePreparedStatement2.dispose();
                        }
                        if (sQLitePreparedStatement != null) {
                            sQLitePreparedStatement.dispose();
                        }
                        SQLiteDatabase sQLiteDatabase2 = this.database;
                        if (sQLiteDatabase2 != null) {
                            sQLiteDatabase2.commitTransaction();
                        }
                        throw th;
                    }
                } catch (Exception e3) {
                    e = e3;
                    sQLitePreparedStatement = null;
                } catch (Throwable th2) {
                    th = th2;
                    sQLitePreparedStatement = null;
                }
            } catch (Throwable th3) {
                th = th3;
            }
        } catch (Exception e4) {
            e = e4;
            sQLitePreparedStatement = null;
        } catch (Throwable th4) {
            th = th4;
            sQLitePreparedStatement = null;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$putChannelAdmins$118(long j, LongSparseArray longSparseArray) {
        SQLitePreparedStatement sQLitePreparedStatement = null;
        try {
            try {
                this.database.executeFast("DELETE FROM channel_admins_v3 WHERE did = " + j).stepThis().dispose();
                this.database.beginTransaction();
                SQLitePreparedStatement executeFast = this.database.executeFast("REPLACE INTO channel_admins_v3 VALUES(?, ?, ?)");
                for (int i = 0; i < longSparseArray.size(); i++) {
                    try {
                        executeFast.requery();
                        executeFast.bindLong(1, j);
                        executeFast.bindLong(2, longSparseArray.keyAt(i));
                        TLRPC.ChannelParticipant channelParticipant = (TLRPC.ChannelParticipant) longSparseArray.valueAt(i);
                        NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(channelParticipant.getObjectSize());
                        channelParticipant.serializeToStream(nativeByteBuffer);
                        executeFast.bindByteBuffer(3, nativeByteBuffer);
                        executeFast.step();
                        nativeByteBuffer.reuse();
                    } catch (Exception e) {
                        e = e;
                        sQLitePreparedStatement = executeFast;
                        checkSQLException(e);
                        SQLiteDatabase sQLiteDatabase = this.database;
                        if (sQLiteDatabase != null) {
                            sQLiteDatabase.commitTransaction();
                        }
                        if (sQLitePreparedStatement != null) {
                            sQLitePreparedStatement.dispose();
                            return;
                        }
                        return;
                    } catch (Throwable th) {
                        th = th;
                        sQLitePreparedStatement = executeFast;
                        SQLiteDatabase sQLiteDatabase2 = this.database;
                        if (sQLiteDatabase2 != null) {
                            sQLiteDatabase2.commitTransaction();
                        }
                        if (sQLitePreparedStatement != null) {
                            sQLitePreparedStatement.dispose();
                        }
                        throw th;
                    }
                }
                executeFast.dispose();
                this.database.commitTransaction();
                SQLiteDatabase sQLiteDatabase3 = this.database;
                if (sQLiteDatabase3 != null) {
                    sQLiteDatabase3.commitTransaction();
                }
            } catch (Exception e2) {
                e = e2;
            }
        } catch (Throwable th2) {
            th = th2;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:32:0x0259  */
    /* JADX WARN: Removed duplicated region for block: B:36:0x0262  */
    /* JADX WARN: Removed duplicated region for block: B:39:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:43:0x0269  */
    /* JADX WARN: Removed duplicated region for block: B:47:0x0272  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$putChannelViews$184(LongSparseArray longSparseArray, LongSparseArray longSparseArray2, LongSparseArray longSparseArray3, boolean z) {
        boolean z2;
        boolean z3;
        SQLitePreparedStatement sQLitePreparedStatement;
        boolean z4;
        SQLiteDatabase sQLiteDatabase;
        SQLiteDatabase sQLiteDatabase2;
        int keyAt;
        SQLiteDatabase sQLiteDatabase3;
        Locale locale;
        Integer valueOf;
        Long valueOf2;
        TLRPC.MessageReplies messageReplies;
        int i;
        int i2;
        int i3;
        NativeByteBuffer byteBufferValue;
        LongSparseArray longSparseArray4 = longSparseArray3;
        int i4 = 2;
        char c = 1;
        try {
            this.database.beginTransaction();
            try {
                if (!isEmpty(longSparseArray)) {
                    try {
                        SQLitePreparedStatement executeFast = this.database.executeFast("UPDATE messages_v2 SET media = max((SELECT media FROM messages_v2 WHERE mid = ? AND uid = ?), ?) WHERE mid = ? AND uid = ?");
                        for (int i5 = 0; i5 < longSparseArray.size(); i5++) {
                            try {
                                long keyAt2 = longSparseArray.keyAt(i5);
                                SparseIntArray sparseIntArray = (SparseIntArray) longSparseArray.valueAt(i5);
                                int size = sparseIntArray.size();
                                for (int i6 = 0; i6 < size; i6++) {
                                    int valueAt = sparseIntArray.valueAt(i6);
                                    int keyAt3 = sparseIntArray.keyAt(i6);
                                    executeFast.requery();
                                    executeFast.bindInteger(1, keyAt3);
                                    executeFast.bindLong(2, keyAt2);
                                    executeFast.bindInteger(3, valueAt);
                                    executeFast.bindInteger(4, keyAt3);
                                    executeFast.bindLong(5, keyAt2);
                                    executeFast.step();
                                }
                            } catch (Exception e) {
                                e = e;
                                sQLitePreparedStatement = executeFast;
                                z3 = true;
                                z4 = z3;
                                try {
                                    checkSQLException(e);
                                    if (z4) {
                                    }
                                    if (sQLitePreparedStatement != null) {
                                    }
                                } catch (Throwable th) {
                                    th = th;
                                    if (z4 && (sQLiteDatabase = this.database) != null) {
                                        sQLiteDatabase.commitTransaction();
                                    }
                                    if (sQLitePreparedStatement != null) {
                                        sQLitePreparedStatement.dispose();
                                    }
                                    throw th;
                                }
                            } catch (Throwable th2) {
                                th = th2;
                                sQLitePreparedStatement = executeFast;
                                z2 = true;
                                z4 = z2;
                                if (z4) {
                                }
                                if (sQLitePreparedStatement != null) {
                                }
                                throw th;
                            }
                        }
                        executeFast.dispose();
                    } catch (Exception e2) {
                        e = e2;
                        z3 = true;
                        sQLitePreparedStatement = null;
                        z4 = z3;
                        checkSQLException(e);
                        if (z4) {
                            sQLiteDatabase2.commitTransaction();
                        }
                        if (sQLitePreparedStatement != null) {
                        }
                    } catch (Throwable th3) {
                        th = th3;
                        z2 = true;
                        sQLitePreparedStatement = null;
                        z4 = z2;
                        if (z4) {
                        }
                        if (sQLitePreparedStatement != null) {
                        }
                        throw th;
                    }
                }
                try {
                    if (!isEmpty(longSparseArray2)) {
                        SQLitePreparedStatement executeFast2 = this.database.executeFast("UPDATE messages_v2 SET forwards = max((SELECT forwards FROM messages_v2 WHERE mid = ? AND uid = ?), ?) WHERE mid = ? AND uid = ?");
                        for (int i7 = 0; i7 < longSparseArray2.size(); i7++) {
                            try {
                                long keyAt4 = longSparseArray2.keyAt(i7);
                                SparseIntArray sparseIntArray2 = (SparseIntArray) longSparseArray2.valueAt(i7);
                                int size2 = sparseIntArray2.size();
                                for (int i8 = 0; i8 < size2; i8++) {
                                    int valueAt2 = sparseIntArray2.valueAt(i8);
                                    int keyAt5 = sparseIntArray2.keyAt(i8);
                                    executeFast2.requery();
                                    executeFast2.bindInteger(1, keyAt5);
                                    executeFast2.bindLong(2, keyAt4);
                                    executeFast2.bindInteger(3, valueAt2);
                                    executeFast2.bindInteger(4, keyAt5);
                                    executeFast2.bindLong(5, keyAt4);
                                    executeFast2.step();
                                }
                            } catch (Exception e3) {
                                e = e3;
                                sQLitePreparedStatement = executeFast2;
                                z4 = true;
                                checkSQLException(e);
                                if (z4) {
                                }
                                if (sQLitePreparedStatement != null) {
                                }
                            } catch (Throwable th4) {
                                th = th4;
                                sQLitePreparedStatement = executeFast2;
                                z4 = true;
                                if (z4) {
                                }
                                if (sQLitePreparedStatement != null) {
                                }
                                throw th;
                            }
                        }
                        executeFast2.dispose();
                    }
                    if (!isEmpty(longSparseArray3)) {
                        SQLitePreparedStatement executeFast3 = this.database.executeFast("UPDATE messages_v2 SET replies_data = ? WHERE mid = ? AND uid = ?");
                        int i9 = 0;
                        while (i9 < longSparseArray3.size()) {
                            try {
                                long keyAt6 = longSparseArray4.keyAt(i9);
                                SparseArray sparseArray = (SparseArray) longSparseArray4.valueAt(i9);
                                int size3 = sparseArray.size();
                                int i10 = 0;
                                while (i10 < size3) {
                                    try {
                                        keyAt = sparseArray.keyAt(i10);
                                        sQLiteDatabase3 = this.database;
                                        locale = Locale.US;
                                        valueOf = Integer.valueOf(keyAt);
                                        valueOf2 = Long.valueOf(keyAt6);
                                    } catch (Exception e4) {
                                        e = e4;
                                        sQLitePreparedStatement = executeFast3;
                                        z4 = true;
                                        checkSQLException(e);
                                        if (z4 && (sQLiteDatabase2 = this.database) != null) {
                                            sQLiteDatabase2.commitTransaction();
                                        }
                                        if (sQLitePreparedStatement != null) {
                                            sQLitePreparedStatement.dispose();
                                            return;
                                        }
                                        return;
                                    } catch (Throwable th5) {
                                        th = th5;
                                        sQLitePreparedStatement = executeFast3;
                                        z4 = true;
                                        if (z4) {
                                            sQLiteDatabase.commitTransaction();
                                        }
                                        if (sQLitePreparedStatement != null) {
                                        }
                                        throw th;
                                    }
                                    try {
                                        Object[] objArr = new Object[i4];
                                        objArr[0] = valueOf;
                                        objArr[c] = valueOf2;
                                        SQLiteCursor queryFinalized = sQLiteDatabase3.queryFinalized(String.format(locale, "SELECT replies_data FROM messages_v2 WHERE mid = %d AND uid = %d", objArr), new Object[0]);
                                        boolean next = queryFinalized.next();
                                        if (!next || (byteBufferValue = queryFinalized.byteBufferValue(0)) == null) {
                                            messageReplies = null;
                                        } else {
                                            messageReplies = TLRPC.MessageReplies.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                                            byteBufferValue.reuse();
                                        }
                                        queryFinalized.dispose();
                                        if (next) {
                                            TLRPC.MessageReplies messageReplies2 = (TLRPC.MessageReplies) sparseArray.get(sparseArray.keyAt(i10));
                                            if (z || messageReplies == null || (i3 = messageReplies.replies_pts) == 0 || messageReplies2.replies_pts > i3 || messageReplies2.read_max_id > messageReplies.read_max_id || messageReplies2.max_id > messageReplies.max_id) {
                                                if (z) {
                                                    if (messageReplies == null) {
                                                        messageReplies = new TLRPC.TL_messageReplies();
                                                        messageReplies.flags |= 2;
                                                    }
                                                    messageReplies.replies += messageReplies2.replies;
                                                    int size4 = messageReplies2.recent_repliers.size();
                                                    for (int i11 = 0; i11 < size4; i11++) {
                                                        long peerId = MessageObject.getPeerId(messageReplies2.recent_repliers.get(i11));
                                                        int size5 = messageReplies.recent_repliers.size();
                                                        int i12 = 0;
                                                        while (i12 < size5) {
                                                            if (peerId == MessageObject.getPeerId(messageReplies.recent_repliers.get(i12))) {
                                                                messageReplies.recent_repliers.remove(i12);
                                                                i12--;
                                                                size5--;
                                                            }
                                                            i12++;
                                                        }
                                                    }
                                                    messageReplies.recent_repliers.addAll(0, messageReplies2.recent_repliers);
                                                    while (messageReplies.recent_repliers.size() > 3) {
                                                        messageReplies.recent_repliers.remove(0);
                                                    }
                                                    messageReplies2 = messageReplies;
                                                }
                                                if (messageReplies != null && (i2 = messageReplies.read_max_id) > messageReplies2.read_max_id) {
                                                    messageReplies2.read_max_id = i2;
                                                }
                                                executeFast3.requery();
                                                NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(messageReplies2.getObjectSize());
                                                messageReplies2.serializeToStream(nativeByteBuffer);
                                                i = 1;
                                                executeFast3.bindByteBuffer(1, nativeByteBuffer);
                                                executeFast3.bindInteger(2, keyAt);
                                                executeFast3.bindLong(3, keyAt6);
                                                executeFast3.step();
                                                nativeByteBuffer.reuse();
                                                i10 += i;
                                                i4 = 2;
                                                c = 1;
                                            }
                                        }
                                        i = 1;
                                        i10 += i;
                                        i4 = 2;
                                        c = 1;
                                    } catch (Exception e5) {
                                        e = e5;
                                        sQLitePreparedStatement = executeFast3;
                                        z4 = true;
                                        checkSQLException(e);
                                        if (z4) {
                                        }
                                        if (sQLitePreparedStatement != null) {
                                        }
                                    } catch (Throwable th6) {
                                        th = th6;
                                        sQLitePreparedStatement = executeFast3;
                                        z4 = true;
                                        if (z4) {
                                        }
                                        if (sQLitePreparedStatement != null) {
                                        }
                                        throw th;
                                    }
                                }
                                i9++;
                                longSparseArray4 = longSparseArray3;
                                i4 = 2;
                                c = 1;
                            } catch (Exception e6) {
                                e = e6;
                            } catch (Throwable th7) {
                                th = th7;
                            }
                        }
                        try {
                            executeFast3.dispose();
                        } catch (Exception e7) {
                            e = e7;
                            sQLitePreparedStatement = executeFast3;
                            z4 = true;
                            checkSQLException(e);
                            if (z4) {
                            }
                            if (sQLitePreparedStatement != null) {
                            }
                        } catch (Throwable th8) {
                            th = th8;
                            sQLitePreparedStatement = executeFast3;
                            z4 = true;
                            if (z4) {
                            }
                            if (sQLitePreparedStatement != null) {
                            }
                            throw th;
                        }
                    }
                } catch (Exception e8) {
                    e = e8;
                } catch (Throwable th9) {
                    th = th9;
                }
                try {
                    this.database.commitTransaction();
                } catch (Exception e9) {
                    e = e9;
                    z4 = true;
                    sQLitePreparedStatement = null;
                    checkSQLException(e);
                    if (z4) {
                    }
                    if (sQLitePreparedStatement != null) {
                    }
                } catch (Throwable th10) {
                    th = th10;
                    z4 = true;
                    sQLitePreparedStatement = null;
                    if (z4) {
                    }
                    if (sQLitePreparedStatement != null) {
                    }
                    throw th;
                }
            } catch (Exception e10) {
                e = e10;
            } catch (Throwable th11) {
                th = th11;
            }
        } catch (Exception e11) {
            e = e11;
            z3 = false;
        } catch (Throwable th12) {
            th = th12;
            z2 = false;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:24:0x0060  */
    /* JADX WARN: Removed duplicated region for block: B:27:? A[RETURN, SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$putContacts$140(boolean z, ArrayList arrayList) {
        Exception e;
        SQLiteDatabase sQLiteDatabase;
        SQLitePreparedStatement sQLitePreparedStatement = null;
        try {
            if (z) {
                try {
                    this.database.executeFast("DELETE FROM contacts WHERE 1").stepThis().dispose();
                } catch (Exception e2) {
                    e = e2;
                    checkSQLException(e);
                    if (sQLitePreparedStatement != null) {
                        sQLitePreparedStatement.dispose();
                    }
                    sQLiteDatabase = this.database;
                    if (sQLiteDatabase == null) {
                        return;
                    }
                    sQLiteDatabase.commitTransaction();
                }
            }
            this.database.beginTransaction();
            SQLitePreparedStatement executeFast = this.database.executeFast("REPLACE INTO contacts VALUES(?, ?)");
            for (int i = 0; i < arrayList.size(); i++) {
                try {
                    TLRPC.TL_contact tL_contact = (TLRPC.TL_contact) arrayList.get(i);
                    executeFast.requery();
                    executeFast.bindLong(1, tL_contact.user_id);
                    executeFast.bindInteger(2, tL_contact.mutual ? 1 : 0);
                    executeFast.step();
                } catch (Exception e3) {
                    sQLitePreparedStatement = executeFast;
                    e = e3;
                    checkSQLException(e);
                    if (sQLitePreparedStatement != null) {
                    }
                    sQLiteDatabase = this.database;
                    if (sQLiteDatabase == null) {
                    }
                    sQLiteDatabase.commitTransaction();
                } catch (Throwable th) {
                    sQLitePreparedStatement = executeFast;
                    th = th;
                    if (sQLitePreparedStatement != null) {
                        sQLitePreparedStatement.dispose();
                    }
                    SQLiteDatabase sQLiteDatabase2 = this.database;
                    if (sQLiteDatabase2 != null) {
                        sQLiteDatabase2.commitTransaction();
                    }
                    throw th;
                }
            }
            executeFast.dispose();
            this.database.commitTransaction();
            sQLiteDatabase = this.database;
            if (sQLiteDatabase == null) {
                return;
            }
            sQLiteDatabase.commitTransaction();
        } catch (Throwable th2) {
            th = th2;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$putDialogs$233(TLRPC.messages_Dialogs messages_dialogs, int i) {
        putDialogsInternal(messages_dialogs, i);
        try {
            loadUnreadMessages();
        } catch (Exception e) {
            checkSQLException(e);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:12:0x003c A[Catch: all -> 0x003e, Exception -> 0x0042, TryCatch #4 {Exception -> 0x0042, all -> 0x003e, blocks: (B:10:0x002c, B:12:0x003c, B:13:0x0047, B:15:0x0050, B:16:0x0053, B:18:0x005c, B:19:0x005f, B:21:0x0068, B:22:0x006b, B:24:0x008c, B:25:0x008f, B:27:0x0093, B:28:0x0096, B:30:0x009a, B:31:0x009d, B:33:0x00a1, B:34:0x00a4, B:38:0x0123), top: B:9:0x002c }] */
    /* JADX WARN: Removed duplicated region for block: B:15:0x0050 A[Catch: all -> 0x003e, Exception -> 0x0042, TryCatch #4 {Exception -> 0x0042, all -> 0x003e, blocks: (B:10:0x002c, B:12:0x003c, B:13:0x0047, B:15:0x0050, B:16:0x0053, B:18:0x005c, B:19:0x005f, B:21:0x0068, B:22:0x006b, B:24:0x008c, B:25:0x008f, B:27:0x0093, B:28:0x0096, B:30:0x009a, B:31:0x009d, B:33:0x00a1, B:34:0x00a4, B:38:0x0123), top: B:9:0x002c }] */
    /* JADX WARN: Removed duplicated region for block: B:18:0x005c A[Catch: all -> 0x003e, Exception -> 0x0042, TryCatch #4 {Exception -> 0x0042, all -> 0x003e, blocks: (B:10:0x002c, B:12:0x003c, B:13:0x0047, B:15:0x0050, B:16:0x0053, B:18:0x005c, B:19:0x005f, B:21:0x0068, B:22:0x006b, B:24:0x008c, B:25:0x008f, B:27:0x0093, B:28:0x0096, B:30:0x009a, B:31:0x009d, B:33:0x00a1, B:34:0x00a4, B:38:0x0123), top: B:9:0x002c }] */
    /* JADX WARN: Removed duplicated region for block: B:21:0x0068 A[Catch: all -> 0x003e, Exception -> 0x0042, TryCatch #4 {Exception -> 0x0042, all -> 0x003e, blocks: (B:10:0x002c, B:12:0x003c, B:13:0x0047, B:15:0x0050, B:16:0x0053, B:18:0x005c, B:19:0x005f, B:21:0x0068, B:22:0x006b, B:24:0x008c, B:25:0x008f, B:27:0x0093, B:28:0x0096, B:30:0x009a, B:31:0x009d, B:33:0x00a1, B:34:0x00a4, B:38:0x0123), top: B:9:0x002c }] */
    /* JADX WARN: Removed duplicated region for block: B:24:0x008c A[Catch: all -> 0x003e, Exception -> 0x0042, TryCatch #4 {Exception -> 0x0042, all -> 0x003e, blocks: (B:10:0x002c, B:12:0x003c, B:13:0x0047, B:15:0x0050, B:16:0x0053, B:18:0x005c, B:19:0x005f, B:21:0x0068, B:22:0x006b, B:24:0x008c, B:25:0x008f, B:27:0x0093, B:28:0x0096, B:30:0x009a, B:31:0x009d, B:33:0x00a1, B:34:0x00a4, B:38:0x0123), top: B:9:0x002c }] */
    /* JADX WARN: Removed duplicated region for block: B:27:0x0093 A[Catch: all -> 0x003e, Exception -> 0x0042, TryCatch #4 {Exception -> 0x0042, all -> 0x003e, blocks: (B:10:0x002c, B:12:0x003c, B:13:0x0047, B:15:0x0050, B:16:0x0053, B:18:0x005c, B:19:0x005f, B:21:0x0068, B:22:0x006b, B:24:0x008c, B:25:0x008f, B:27:0x0093, B:28:0x0096, B:30:0x009a, B:31:0x009d, B:33:0x00a1, B:34:0x00a4, B:38:0x0123), top: B:9:0x002c }] */
    /* JADX WARN: Removed duplicated region for block: B:30:0x009a A[Catch: all -> 0x003e, Exception -> 0x0042, TryCatch #4 {Exception -> 0x0042, all -> 0x003e, blocks: (B:10:0x002c, B:12:0x003c, B:13:0x0047, B:15:0x0050, B:16:0x0053, B:18:0x005c, B:19:0x005f, B:21:0x0068, B:22:0x006b, B:24:0x008c, B:25:0x008f, B:27:0x0093, B:28:0x0096, B:30:0x009a, B:31:0x009d, B:33:0x00a1, B:34:0x00a4, B:38:0x0123), top: B:9:0x002c }] */
    /* JADX WARN: Removed duplicated region for block: B:33:0x00a1 A[Catch: all -> 0x003e, Exception -> 0x0042, TryCatch #4 {Exception -> 0x0042, all -> 0x003e, blocks: (B:10:0x002c, B:12:0x003c, B:13:0x0047, B:15:0x0050, B:16:0x0053, B:18:0x005c, B:19:0x005f, B:21:0x0068, B:22:0x006b, B:24:0x008c, B:25:0x008f, B:27:0x0093, B:28:0x0096, B:30:0x009a, B:31:0x009d, B:33:0x00a1, B:34:0x00a4, B:38:0x0123), top: B:9:0x002c }] */
    /* JADX WARN: Removed duplicated region for block: B:37:0x011b A[Catch: all -> 0x0012, Exception -> 0x0016, TRY_LEAVE, TryCatch #5 {Exception -> 0x0016, all -> 0x0012, blocks: (B:3:0x0008, B:5:0x000e, B:8:0x0024, B:35:0x010a, B:37:0x011b, B:63:0x001a, B:65:0x001e), top: B:2:0x0008 }] */
    /* JADX WARN: Removed duplicated region for block: B:43:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:44:0x006a  */
    /* JADX WARN: Removed duplicated region for block: B:45:0x005e  */
    /* JADX WARN: Removed duplicated region for block: B:46:0x0052  */
    /* JADX WARN: Removed duplicated region for block: B:47:0x0046  */
    /* JADX WARN: Removed duplicated region for block: B:59:0x0199  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$putEncryptedChat$171(TLRPC.EncryptedChat encryptedChat, TLRPC.User user, TLRPC.Dialog dialog) {
        SQLitePreparedStatement sQLitePreparedStatement;
        byte[] bArr;
        SQLitePreparedStatement executeFast;
        byte[] bArr2;
        byte[] bArr3;
        byte[] bArr4;
        byte[] bArr5;
        try {
            bArr = encryptedChat.key_hash;
        } catch (Exception e) {
            e = e;
            sQLitePreparedStatement = null;
        } catch (Throwable th) {
            th = th;
            sQLitePreparedStatement = null;
        }
        try {
            if (bArr != null) {
                if (bArr.length < 16) {
                }
                executeFast = this.database.executeFast("REPLACE INTO enc_chats VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
                NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(encryptedChat.getObjectSize());
                byte[] bArr6 = encryptedChat.a_or_b;
                NativeByteBuffer nativeByteBuffer2 = new NativeByteBuffer(bArr6 == null ? bArr6.length : 1);
                byte[] bArr7 = encryptedChat.auth_key;
                NativeByteBuffer nativeByteBuffer3 = new NativeByteBuffer(bArr7 == null ? bArr7.length : 1);
                byte[] bArr8 = encryptedChat.future_auth_key;
                NativeByteBuffer nativeByteBuffer4 = new NativeByteBuffer(bArr8 == null ? bArr8.length : 1);
                byte[] bArr9 = encryptedChat.key_hash;
                NativeByteBuffer nativeByteBuffer5 = new NativeByteBuffer(bArr9 == null ? bArr9.length : 1);
                encryptedChat.serializeToStream(nativeByteBuffer);
                executeFast.bindInteger(1, encryptedChat.id);
                executeFast.bindLong(2, user.id);
                executeFast.bindString(3, formatUserSearchName(user));
                executeFast.bindByteBuffer(4, nativeByteBuffer);
                bArr2 = encryptedChat.a_or_b;
                if (bArr2 != null) {
                    nativeByteBuffer2.writeBytes(bArr2);
                }
                bArr3 = encryptedChat.auth_key;
                if (bArr3 != null) {
                    nativeByteBuffer3.writeBytes(bArr3);
                }
                bArr4 = encryptedChat.future_auth_key;
                if (bArr4 != null) {
                    nativeByteBuffer4.writeBytes(bArr4);
                }
                bArr5 = encryptedChat.key_hash;
                if (bArr5 != null) {
                    nativeByteBuffer5.writeBytes(bArr5);
                }
                executeFast.bindByteBuffer(5, nativeByteBuffer2);
                executeFast.bindByteBuffer(6, nativeByteBuffer3);
                executeFast.bindInteger(7, encryptedChat.ttl);
                executeFast.bindInteger(8, encryptedChat.layer);
                executeFast.bindInteger(9, encryptedChat.seq_in);
                executeFast.bindInteger(10, encryptedChat.seq_out);
                executeFast.bindInteger(11, (encryptedChat.key_use_count_in << 16) | encryptedChat.key_use_count_out);
                executeFast.bindLong(12, encryptedChat.exchange_id);
                executeFast.bindInteger(13, encryptedChat.key_create_date);
                executeFast.bindLong(14, encryptedChat.future_key_fingerprint);
                executeFast.bindByteBuffer(15, nativeByteBuffer4);
                executeFast.bindByteBuffer(16, nativeByteBuffer5);
                executeFast.bindInteger(17, encryptedChat.in_seq_no);
                executeFast.bindLong(18, encryptedChat.admin_id);
                executeFast.bindInteger(19, encryptedChat.mtproto_seq);
                executeFast.step();
                executeFast.dispose();
                nativeByteBuffer.reuse();
                nativeByteBuffer2.reuse();
                nativeByteBuffer3.reuse();
                nativeByteBuffer4.reuse();
                nativeByteBuffer5.reuse();
                if (dialog == null) {
                    executeFast = this.database.executeFast("REPLACE INTO dialogs VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
                    executeFast.bindLong(1, dialog.id);
                    executeFast.bindInteger(2, dialog.last_message_date);
                    executeFast.bindInteger(3, dialog.unread_count);
                    executeFast.bindInteger(4, dialog.top_message);
                    executeFast.bindInteger(5, dialog.read_inbox_max_id);
                    executeFast.bindInteger(6, dialog.read_outbox_max_id);
                    executeFast.bindInteger(7, 0);
                    executeFast.bindInteger(8, dialog.unread_mentions_count);
                    executeFast.bindInteger(9, dialog.pts);
                    executeFast.bindInteger(10, 0);
                    executeFast.bindInteger(11, dialog.pinnedNum);
                    executeFast.bindInteger(12, dialog.flags);
                    executeFast.bindInteger(13, dialog.folder_id);
                    executeFast.bindNull(14);
                    executeFast.bindInteger(15, dialog.unread_reactions_count);
                    executeFast.bindInteger(16, 0);
                    executeFast.bindInteger(17, dialog.ttl_period);
                    executeFast.step();
                    executeFast.dispose();
                    return;
                }
                return;
            }
            NativeByteBuffer nativeByteBuffer6 = new NativeByteBuffer(encryptedChat.getObjectSize());
            byte[] bArr62 = encryptedChat.a_or_b;
            NativeByteBuffer nativeByteBuffer22 = new NativeByteBuffer(bArr62 == null ? bArr62.length : 1);
            byte[] bArr72 = encryptedChat.auth_key;
            NativeByteBuffer nativeByteBuffer32 = new NativeByteBuffer(bArr72 == null ? bArr72.length : 1);
            byte[] bArr82 = encryptedChat.future_auth_key;
            NativeByteBuffer nativeByteBuffer42 = new NativeByteBuffer(bArr82 == null ? bArr82.length : 1);
            byte[] bArr92 = encryptedChat.key_hash;
            NativeByteBuffer nativeByteBuffer52 = new NativeByteBuffer(bArr92 == null ? bArr92.length : 1);
            encryptedChat.serializeToStream(nativeByteBuffer6);
            executeFast.bindInteger(1, encryptedChat.id);
            executeFast.bindLong(2, user.id);
            executeFast.bindString(3, formatUserSearchName(user));
            executeFast.bindByteBuffer(4, nativeByteBuffer6);
            bArr2 = encryptedChat.a_or_b;
            if (bArr2 != null) {
            }
            bArr3 = encryptedChat.auth_key;
            if (bArr3 != null) {
            }
            bArr4 = encryptedChat.future_auth_key;
            if (bArr4 != null) {
            }
            bArr5 = encryptedChat.key_hash;
            if (bArr5 != null) {
            }
            executeFast.bindByteBuffer(5, nativeByteBuffer22);
            executeFast.bindByteBuffer(6, nativeByteBuffer32);
            executeFast.bindInteger(7, encryptedChat.ttl);
            executeFast.bindInteger(8, encryptedChat.layer);
            executeFast.bindInteger(9, encryptedChat.seq_in);
            executeFast.bindInteger(10, encryptedChat.seq_out);
            executeFast.bindInteger(11, (encryptedChat.key_use_count_in << 16) | encryptedChat.key_use_count_out);
            executeFast.bindLong(12, encryptedChat.exchange_id);
            executeFast.bindInteger(13, encryptedChat.key_create_date);
            executeFast.bindLong(14, encryptedChat.future_key_fingerprint);
            executeFast.bindByteBuffer(15, nativeByteBuffer42);
            executeFast.bindByteBuffer(16, nativeByteBuffer52);
            executeFast.bindInteger(17, encryptedChat.in_seq_no);
            executeFast.bindLong(18, encryptedChat.admin_id);
            executeFast.bindInteger(19, encryptedChat.mtproto_seq);
            executeFast.step();
            executeFast.dispose();
            nativeByteBuffer6.reuse();
            nativeByteBuffer22.reuse();
            nativeByteBuffer32.reuse();
            nativeByteBuffer42.reuse();
            nativeByteBuffer52.reuse();
            if (dialog == null) {
            }
        } catch (Exception e2) {
            e = e2;
            sQLitePreparedStatement = executeFast;
            try {
                checkSQLException(e);
                if (sQLitePreparedStatement != null) {
                    sQLitePreparedStatement.dispose();
                    return;
                }
                return;
            } catch (Throwable th2) {
                th = th2;
                if (sQLitePreparedStatement != null) {
                    sQLitePreparedStatement.dispose();
                }
                throw th;
            }
        } catch (Throwable th3) {
            th = th3;
            sQLitePreparedStatement = executeFast;
            if (sQLitePreparedStatement != null) {
            }
            throw th;
        }
        byte[] bArr10 = encryptedChat.auth_key;
        if (bArr10 != null) {
            encryptedChat.key_hash = AndroidUtilities.calcAuthKeyHash(bArr10);
        }
        executeFast = this.database.executeFast("REPLACE INTO enc_chats VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$putMessages$216(ArrayList arrayList) {
        getFileLoader().cancelLoadFiles(arrayList);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$putMessages$217(ArrayList arrayList) {
        if (getMessagesController().getSavedMessagesController().updateSavedDialogs(arrayList)) {
            getMessagesController().getSavedMessagesController().update();
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Can't wrap try/catch for region: R(20:173|174|175|(20:(34:(5:651|652|653|654|655)(1:664)|657|658|183|(2:185|186)|187|(15:510|511|512|513|514|515|516|517|518|519|520|(7:522|(17:524|(4:526|527|528|529)(1:620)|530|531|(4:533|(1:535)(1:611)|536|537)(1:612)|538|(2:540|(9:546|(8:548|549|550|(1:554)|(1:556)(1:585)|557|558|(1:560))|586|550|(2:552|554)|(0)(0)|557|558|(0)))|587|(2:589|(9:595|(8:597|549|550|(0)|(0)(0)|557|558|(0))|586|550|(0)|(0)(0)|557|558|(0)))|598|(3:605|(2:607|(1:609))|586)(3:602|(2:604|549)|586)|550|(0)|(0)(0)|557|558|(0))(1:621)|561|562|(1:564)(1:584)|565|(3:567|(3:569|(1:571)|572)|(2:574|(3:576|577|(3:579|373|374)))(2:580|(3:582|577|(0)))))(1:622)|583|577|(0))(1:189)|(1:509)(9:192|193|194|195|(1:197)(1:498)|198|199|(7:472|473|474|475|(1:477)(1:480)|478|479)(7:201|202|203|204|205|(1:207)(1:464)|208)|209)|210|211|212|(35:215|(1:217)(1:336)|(4:219|(1:221)(1:334)|222|(3:224|225|226)(3:227|(3:(1:232)|233|234)|235))(1:335)|236|237|(3:239|240|241)(1:328)|242|243|(1:327)(1:247)|248|249|(2:251|252)(2:325|326)|253|(2:255|256)(2:323|324)|257|(1:259)(2:319|(1:321)(1:322))|260|261|(1:263)(2:317|318)|264|(5:266|267|(1:269)(1:314)|270|271)(2:315|316)|272|273|(1:275)(1:313)|(3:277|(1:279)(1:281)|280)|282|(1:284)(2:311|312)|285|(1:310)(3:288|289|290)|(1:292)|(1:294)|(1:296)|225|226|213)|337|338|(2:340|(17:342|343|(2:345|(14:347|(1:349)|350|351|(3:402|403|(13:(1:406)|407|408|409|410|354|(5:(1:357)|358|359|360|361)(6:389|(5:(1:392)|393|394|395|396)|(1:381)(3:366|(1:368)(1:380)|(5:(1:376)(1:379)|377|378|373|374))|372|373|374)|362|(1:364)|381|372|373|374))|353|354|(0)(0)|362|(0)|381|372|373|374)(12:420|351|(0)|353|354|(0)(0)|362|(0)|381|372|373|374))|421|(14:423|(1:425)|426|351|(0)|353|354|(0)(0)|362|(0)|381|372|373|374)|350|351|(0)|353|354|(0)(0)|362|(0)|381|372|373|374))(1:458)|428|429|(3:431|432|433)(2:434|(6:438|439|440|441|442|443))|343|(0)|421|(0)|350|351|(0)|353|354|(0)(0)|362|(0)|381|372|373|374)(1:178)|428|429|(0)(0)|343|(0)|421|(0)|350|351|(0)|353|354|(0)(0)|362|(0)|381|372|373|374)|179|180|(1:182)(1:644)|183|(0)|187|(0)(0)|(0)|509|210|211|212|(1:213)|337|338|(0)(0)) */
    /* JADX WARN: Can't wrap try/catch for region: R(6:(25:(1:148)(51:840|(1:842)(4:844|(2:846|(0))(1:854)|(1:853)(1:851)|852)|843|150|151|(2:153|154)(1:839)|155|157|158|159|160|162|163|164|165|166|167|(6:802|803|(1:805)|806|807|808)(1:169)|170|(40:172|173|174|175|(34:(5:651|652|653|654|655)(1:664)|657|658|183|(2:185|186)|187|(15:510|511|512|513|514|515|516|517|518|519|520|(7:522|(17:524|(4:526|527|528|529)(1:620)|530|531|(4:533|(1:535)(1:611)|536|537)(1:612)|538|(2:540|(9:546|(8:548|549|550|(1:554)|(1:556)(1:585)|557|558|(1:560))|586|550|(2:552|554)|(0)(0)|557|558|(0)))|587|(2:589|(9:595|(8:597|549|550|(0)|(0)(0)|557|558|(0))|586|550|(0)|(0)(0)|557|558|(0)))|598|(3:605|(2:607|(1:609))|586)(3:602|(2:604|549)|586)|550|(0)|(0)(0)|557|558|(0))(1:621)|561|562|(1:564)(1:584)|565|(3:567|(3:569|(1:571)|572)|(2:574|(3:576|577|(3:579|373|374)))(2:580|(3:582|577|(0)))))(1:622)|583|577|(0))(1:189)|(1:509)(9:192|193|194|195|(1:197)(1:498)|198|199|(7:472|473|474|475|(1:477)(1:480)|478|479)(7:201|202|203|204|205|(1:207)(1:464)|208)|209)|210|211|212|(35:215|(1:217)(1:336)|(4:219|(1:221)(1:334)|222|(3:224|225|226)(3:227|(3:(1:232)|233|234)|235))(1:335)|236|237|(3:239|240|241)(1:328)|242|243|(1:327)(1:247)|248|249|(2:251|252)(2:325|326)|253|(2:255|256)(2:323|324)|257|(1:259)(2:319|(1:321)(1:322))|260|261|(1:263)(2:317|318)|264|(5:266|267|(1:269)(1:314)|270|271)(2:315|316)|272|273|(1:275)(1:313)|(3:277|(1:279)(1:281)|280)|282|(1:284)(2:311|312)|285|(1:310)(3:288|289|290)|(1:292)|(1:294)|(1:296)|225|226|213)|337|338|(2:340|(17:342|343|(2:345|(14:347|(1:349)|350|351|(3:402|403|(13:(1:406)|407|408|409|410|354|(5:(1:357)|358|359|360|361)(6:389|(5:(1:392)|393|394|395|396)|(1:381)(3:366|(1:368)(1:380)|(5:(1:376)(1:379)|377|378|373|374))|372|373|374)|362|(1:364)|381|372|373|374))|353|354|(0)(0)|362|(0)|381|372|373|374)(12:420|351|(0)|353|354|(0)(0)|362|(0)|381|372|373|374))|421|(14:423|(1:425)|426|351|(0)|353|354|(0)(0)|362|(0)|381|372|373|374)|350|351|(0)|353|354|(0)(0)|362|(0)|381|372|373|374))(1:458)|428|429|(3:431|432|433)(2:434|(6:438|439|440|441|442|443))|343|(0)|421|(0)|350|351|(0)|353|354|(0)(0)|362|(0)|381|372|373|374)(1:178)|179|180|(1:182)(1:644)|183|(0)|187|(0)(0)|(0)|509|210|211|212|(1:213)|337|338|(0)(0)|428|429|(0)(0)|343|(0)|421|(0)|350|351|(0)|353|354|(0)(0)|362|(0)|381|372|373|374)|670|671|672|673|674|675|(3:784|785|786)(1:677)|678|679|(3:769|770|771)|(3:763|764|765)|(3:753|754|755)|(4:742|743|(2:746|744)|747)|684|685|686|(8:688|689|690|691|692|693|694|695)(1:737)|(7:697|(1:699)(1:725)|700|701|702|703|704)(1:726)|705|(11:(1:708)|709|(1:711)|712|713|92|(1:94)|(1:96)|(1:98)|(1:100)|(2:102|103)(1:104))|715|709|(0)|712|713|92|(0)|(0)|(0)|(0)|(0)(0))|678|679|(0)|(0)|(0)|(0)|684|685|686|(0)(0)|(0)(0)|705|(0)|715|709|(0)|712|713|92|(0)|(0)|(0)|(0)|(0)(0))|672|673|674|675|(0)(0)) */
    /* JADX WARN: Can't wrap try/catch for region: R(8:(9:(30:(1:148)(51:840|(1:842)(4:844|(2:846|(0))(1:854)|(1:853)(1:851)|852)|843|150|151|(2:153|154)(1:839)|155|157|158|159|160|162|163|164|165|166|167|(6:802|803|(1:805)|806|807|808)(1:169)|170|(40:172|173|174|175|(34:(5:651|652|653|654|655)(1:664)|657|658|183|(2:185|186)|187|(15:510|511|512|513|514|515|516|517|518|519|520|(7:522|(17:524|(4:526|527|528|529)(1:620)|530|531|(4:533|(1:535)(1:611)|536|537)(1:612)|538|(2:540|(9:546|(8:548|549|550|(1:554)|(1:556)(1:585)|557|558|(1:560))|586|550|(2:552|554)|(0)(0)|557|558|(0)))|587|(2:589|(9:595|(8:597|549|550|(0)|(0)(0)|557|558|(0))|586|550|(0)|(0)(0)|557|558|(0)))|598|(3:605|(2:607|(1:609))|586)(3:602|(2:604|549)|586)|550|(0)|(0)(0)|557|558|(0))(1:621)|561|562|(1:564)(1:584)|565|(3:567|(3:569|(1:571)|572)|(2:574|(3:576|577|(3:579|373|374)))(2:580|(3:582|577|(0)))))(1:622)|583|577|(0))(1:189)|(1:509)(9:192|193|194|195|(1:197)(1:498)|198|199|(7:472|473|474|475|(1:477)(1:480)|478|479)(7:201|202|203|204|205|(1:207)(1:464)|208)|209)|210|211|212|(35:215|(1:217)(1:336)|(4:219|(1:221)(1:334)|222|(3:224|225|226)(3:227|(3:(1:232)|233|234)|235))(1:335)|236|237|(3:239|240|241)(1:328)|242|243|(1:327)(1:247)|248|249|(2:251|252)(2:325|326)|253|(2:255|256)(2:323|324)|257|(1:259)(2:319|(1:321)(1:322))|260|261|(1:263)(2:317|318)|264|(5:266|267|(1:269)(1:314)|270|271)(2:315|316)|272|273|(1:275)(1:313)|(3:277|(1:279)(1:281)|280)|282|(1:284)(2:311|312)|285|(1:310)(3:288|289|290)|(1:292)|(1:294)|(1:296)|225|226|213)|337|338|(2:340|(17:342|343|(2:345|(14:347|(1:349)|350|351|(3:402|403|(13:(1:406)|407|408|409|410|354|(5:(1:357)|358|359|360|361)(6:389|(5:(1:392)|393|394|395|396)|(1:381)(3:366|(1:368)(1:380)|(5:(1:376)(1:379)|377|378|373|374))|372|373|374)|362|(1:364)|381|372|373|374))|353|354|(0)(0)|362|(0)|381|372|373|374)(12:420|351|(0)|353|354|(0)(0)|362|(0)|381|372|373|374))|421|(14:423|(1:425)|426|351|(0)|353|354|(0)(0)|362|(0)|381|372|373|374)|350|351|(0)|353|354|(0)(0)|362|(0)|381|372|373|374))(1:458)|428|429|(3:431|432|433)(2:434|(6:438|439|440|441|442|443))|343|(0)|421|(0)|350|351|(0)|353|354|(0)(0)|362|(0)|381|372|373|374)(1:178)|179|180|(1:182)(1:644)|183|(0)|187|(0)(0)|(0)|509|210|211|212|(1:213)|337|338|(0)(0)|428|429|(0)(0)|343|(0)|421|(0)|350|351|(0)|353|354|(0)(0)|362|(0)|381|372|373|374)|670|671|672|673|674|675|(3:784|785|786)(1:677)|678|679|(3:769|770|771)|(3:763|764|765)|(3:753|754|755)|(4:742|743|(2:746|744)|747)|684|685|686|(8:688|689|690|691|692|693|694|695)(1:737)|(7:697|(1:699)(1:725)|700|701|702|703|704)(1:726)|705|(11:(1:708)|709|(1:711)|712|713|92|(1:94)|(1:96)|(1:98)|(1:100)|(2:102|103)(1:104))|715|709|(0)|712|713|92|(0)|(0)|(0)|(0)|(0)(0))|672|673|674|675|(0)(0)|678|679|(0)|(0)|(0)|(0)|684|685|686|(0)(0)|(0)(0)|705|(0)|715|709|(0)|712|713|92|(0)|(0)|(0)|(0)|(0)(0))|165|166|167|(0)(0)|170|(0)|670|671)|157|158|159|160|162|163|164) */
    /* JADX WARN: Code restructure failed: missing block: B:460:0x0c0b, code lost:
    
        r0 = e;
     */
    /* JADX WARN: Code restructure failed: missing block: B:461:0x0c0c, code lost:
    
        r4 = r38;
     */
    /* JADX WARN: Code restructure failed: missing block: B:462:0x0c06, code lost:
    
        r0 = th;
     */
    /* JADX WARN: Code restructure failed: missing block: B:463:0x0c07, code lost:
    
        r4 = r38;
     */
    /* JADX WARN: Code restructure failed: missing block: B:610:0x0542, code lost:
    
        if (org.telegram.messenger.MessageObject.getDocument(r2).id == org.telegram.messenger.MessageObject.getDocument(r6).id) goto L234;
     */
    /* JADX WARN: Code restructure failed: missing block: B:646:0x03cd, code lost:
    
        r0 = e;
     */
    /* JADX WARN: Code restructure failed: missing block: B:648:0x03c2, code lost:
    
        r0 = th;
     */
    /* JADX WARN: Code restructure failed: missing block: B:656:0x03a5, code lost:
    
        if (r22.intValue() < r4.id) goto L823;
     */
    /* JADX WARN: Code restructure failed: missing block: B:793:0x0e0a, code lost:
    
        r0 = move-exception;
     */
    /* JADX WARN: Code restructure failed: missing block: B:794:0x0e0b, code lost:
    
        r13 = null;
        r2 = r0;
        r5 = r7;
        r15 = null;
        r14 = r14;
     */
    /* JADX WARN: Code restructure failed: missing block: B:795:0x0e02, code lost:
    
        r0 = move-exception;
     */
    /* JADX WARN: Code restructure failed: missing block: B:796:0x0e03, code lost:
    
        r13 = null;
        r2 = r0;
        r5 = r7;
        r15 = null;
        r14 = r14;
     */
    /* JADX WARN: Code restructure failed: missing block: B:826:0x0e5b, code lost:
    
        r0 = move-exception;
     */
    /* JADX WARN: Code restructure failed: missing block: B:827:0x0e5c, code lost:
    
        r44 = r15;
        r13 = null;
        r2 = r0;
     */
    /* JADX WARN: Code restructure failed: missing block: B:828:0x0e52, code lost:
    
        r0 = move-exception;
     */
    /* JADX WARN: Code restructure failed: missing block: B:829:0x0e53, code lost:
    
        r44 = r15;
        r13 = null;
        r2 = r0;
     */
    /* JADX WARN: Code restructure failed: missing block: B:830:0x0e6d, code lost:
    
        r0 = move-exception;
     */
    /* JADX WARN: Code restructure failed: missing block: B:831:0x0e6e, code lost:
    
        r44 = r15;
        r13 = null;
        r2 = r0;
        r5 = null;
     */
    /* JADX WARN: Code restructure failed: missing block: B:832:0x0e64, code lost:
    
        r0 = move-exception;
     */
    /* JADX WARN: Code restructure failed: missing block: B:833:0x0e65, code lost:
    
        r44 = r15;
        r13 = null;
        r2 = r0;
        r5 = null;
     */
    /* JADX WARN: Code restructure failed: missing block: B:848:0x025b, code lost:
    
        if (r13 != 4) goto L87;
     */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:100:0x0de8  */
    /* JADX WARN: Removed duplicated region for block: B:102:0x0ded  */
    /* JADX WARN: Removed duplicated region for block: B:104:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:153:0x02ba A[Catch: all -> 0x00df, Exception -> 0x00e3, TRY_ENTER, TRY_LEAVE, TryCatch #76 {Exception -> 0x00e3, all -> 0x00df, blocks: (B:9:0x0021, B:90:0x00ce, B:106:0x00e9, B:110:0x00f8, B:122:0x0168, B:140:0x01d8, B:148:0x01f6, B:153:0x02ba, B:842:0x022c), top: B:7:0x001f }] */
    /* JADX WARN: Removed duplicated region for block: B:169:0x0365  */
    /* JADX WARN: Removed duplicated region for block: B:172:0x0383  */
    /* JADX WARN: Removed duplicated region for block: B:185:0x03fb A[Catch: all -> 0x03c2, Exception -> 0x03cd, TRY_LEAVE, TryCatch #74 {Exception -> 0x03cd, all -> 0x03c2, blocks: (B:180:0x03a7, B:182:0x03b3, B:185:0x03fb, B:655:0x03a3), top: B:179:0x03a7 }] */
    /* JADX WARN: Removed duplicated region for block: B:189:0x0655  */
    /* JADX WARN: Removed duplicated region for block: B:215:0x07df  */
    /* JADX WARN: Removed duplicated region for block: B:33:0x0eb8  */
    /* JADX WARN: Removed duplicated region for block: B:340:0x09c0  */
    /* JADX WARN: Removed duplicated region for block: B:345:0x0a8e  */
    /* JADX WARN: Removed duplicated region for block: B:356:0x0b33  */
    /* JADX WARN: Removed duplicated region for block: B:35:0x0ebd  */
    /* JADX WARN: Removed duplicated region for block: B:364:0x0ba6 A[Catch: all -> 0x09fb, Exception -> 0x0a04, TryCatch #35 {Exception -> 0x0a04, blocks: (B:343:0x0a7c, B:351:0x0ad8, B:403:0x0adf, B:406:0x0ae5, B:354:0x0b2d, B:357:0x0b35, B:362:0x0b94, B:364:0x0ba6, B:366:0x0bac, B:370:0x0bca, B:376:0x0bd2, B:377:0x0bd9, B:380:0x0bc0, B:389:0x0b69, B:392:0x0b6f, B:421:0x0aa2, B:423:0x0aa8, B:426:0x0abf, B:433:0x09db, B:434:0x0a15, B:436:0x0a1d, B:452:0x0a79), top: B:402:0x0adf }] */
    /* JADX WARN: Removed duplicated region for block: B:37:0x0ec2  */
    /* JADX WARN: Removed duplicated region for block: B:389:0x0b69 A[Catch: all -> 0x09fb, Exception -> 0x0a04, TRY_ENTER, TryCatch #35 {Exception -> 0x0a04, blocks: (B:343:0x0a7c, B:351:0x0ad8, B:403:0x0adf, B:406:0x0ae5, B:354:0x0b2d, B:357:0x0b35, B:362:0x0b94, B:364:0x0ba6, B:366:0x0bac, B:370:0x0bca, B:376:0x0bd2, B:377:0x0bd9, B:380:0x0bc0, B:389:0x0b69, B:392:0x0b6f, B:421:0x0aa2, B:423:0x0aa8, B:426:0x0abf, B:433:0x09db, B:434:0x0a15, B:436:0x0a1d, B:452:0x0a79), top: B:402:0x0adf }] */
    /* JADX WARN: Removed duplicated region for block: B:39:0x0ec7  */
    /* JADX WARN: Removed duplicated region for block: B:402:0x0adf A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:41:0x0ecc  */
    /* JADX WARN: Removed duplicated region for block: B:423:0x0aa8 A[Catch: all -> 0x09fb, Exception -> 0x0a04, TryCatch #35 {Exception -> 0x0a04, blocks: (B:343:0x0a7c, B:351:0x0ad8, B:403:0x0adf, B:406:0x0ae5, B:354:0x0b2d, B:357:0x0b35, B:362:0x0b94, B:364:0x0ba6, B:366:0x0bac, B:370:0x0bca, B:376:0x0bd2, B:377:0x0bd9, B:380:0x0bc0, B:389:0x0b69, B:392:0x0b6f, B:421:0x0aa2, B:423:0x0aa8, B:426:0x0abf, B:433:0x09db, B:434:0x0a15, B:436:0x0a1d, B:452:0x0a79), top: B:402:0x0adf }] */
    /* JADX WARN: Removed duplicated region for block: B:431:0x09d3 A[Catch: all -> 0x0a0d, Exception -> 0x0a11, TRY_LEAVE, TryCatch #66 {Exception -> 0x0a11, all -> 0x0a0d, blocks: (B:429:0x09cd, B:431:0x09d3), top: B:428:0x09cd }] */
    /* JADX WARN: Removed duplicated region for block: B:434:0x0a15 A[Catch: all -> 0x09fb, Exception -> 0x0a04, TryCatch #35 {Exception -> 0x0a04, blocks: (B:343:0x0a7c, B:351:0x0ad8, B:403:0x0adf, B:406:0x0ae5, B:354:0x0b2d, B:357:0x0b35, B:362:0x0b94, B:364:0x0ba6, B:366:0x0bac, B:370:0x0bca, B:376:0x0bd2, B:377:0x0bd9, B:380:0x0bc0, B:389:0x0b69, B:392:0x0b6f, B:421:0x0aa2, B:423:0x0aa8, B:426:0x0abf, B:433:0x09db, B:434:0x0a15, B:436:0x0a1d, B:452:0x0a79), top: B:402:0x0adf }] */
    /* JADX WARN: Removed duplicated region for block: B:43:0x0ed1  */
    /* JADX WARN: Removed duplicated region for block: B:458:0x09cb  */
    /* JADX WARN: Removed duplicated region for block: B:45:0x0ed6  */
    /* JADX WARN: Removed duplicated region for block: B:47:0x0edb  */
    /* JADX WARN: Removed duplicated region for block: B:49:0x0ee0  */
    /* JADX WARN: Removed duplicated region for block: B:510:0x0404 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:51:0x0ee5  */
    /* JADX WARN: Removed duplicated region for block: B:54:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:552:0x054b A[Catch: all -> 0x0478, Exception -> 0x047c, TryCatch #61 {Exception -> 0x047c, all -> 0x0478, blocks: (B:529:0x0470, B:531:0x04a0, B:533:0x04a7, B:535:0x04b5, B:537:0x04c4, B:538:0x04cf, B:540:0x04d5, B:542:0x04db, B:544:0x04df, B:546:0x04e3, B:550:0x0547, B:552:0x054b, B:554:0x054f, B:556:0x0553, B:558:0x0564, B:560:0x056d, B:562:0x0587, B:565:0x0591, B:569:0x05a0, B:571:0x05c0, B:572:0x05c5, B:576:0x05cd, B:577:0x05ef, B:580:0x05d1, B:582:0x05d6, B:587:0x04ee, B:589:0x04f4, B:591:0x04fa, B:593:0x04fe, B:595:0x0502, B:598:0x050b, B:600:0x0511, B:602:0x0517, B:605:0x0528, B:607:0x052e, B:609:0x0534), top: B:528:0x0470 }] */
    /* JADX WARN: Removed duplicated region for block: B:556:0x0553 A[Catch: all -> 0x0478, Exception -> 0x047c, TryCatch #61 {Exception -> 0x047c, all -> 0x0478, blocks: (B:529:0x0470, B:531:0x04a0, B:533:0x04a7, B:535:0x04b5, B:537:0x04c4, B:538:0x04cf, B:540:0x04d5, B:542:0x04db, B:544:0x04df, B:546:0x04e3, B:550:0x0547, B:552:0x054b, B:554:0x054f, B:556:0x0553, B:558:0x0564, B:560:0x056d, B:562:0x0587, B:565:0x0591, B:569:0x05a0, B:571:0x05c0, B:572:0x05c5, B:576:0x05cd, B:577:0x05ef, B:580:0x05d1, B:582:0x05d6, B:587:0x04ee, B:589:0x04f4, B:591:0x04fa, B:593:0x04fe, B:595:0x0502, B:598:0x050b, B:600:0x0511, B:602:0x0517, B:605:0x0528, B:607:0x052e, B:609:0x0534), top: B:528:0x0470 }] */
    /* JADX WARN: Removed duplicated region for block: B:560:0x056d A[Catch: all -> 0x0478, Exception -> 0x047c, TryCatch #61 {Exception -> 0x047c, all -> 0x0478, blocks: (B:529:0x0470, B:531:0x04a0, B:533:0x04a7, B:535:0x04b5, B:537:0x04c4, B:538:0x04cf, B:540:0x04d5, B:542:0x04db, B:544:0x04df, B:546:0x04e3, B:550:0x0547, B:552:0x054b, B:554:0x054f, B:556:0x0553, B:558:0x0564, B:560:0x056d, B:562:0x0587, B:565:0x0591, B:569:0x05a0, B:571:0x05c0, B:572:0x05c5, B:576:0x05cd, B:577:0x05ef, B:580:0x05d1, B:582:0x05d6, B:587:0x04ee, B:589:0x04f4, B:591:0x04fa, B:593:0x04fe, B:595:0x0502, B:598:0x050b, B:600:0x0511, B:602:0x0517, B:605:0x0528, B:607:0x052e, B:609:0x0534), top: B:528:0x0470 }] */
    /* JADX WARN: Removed duplicated region for block: B:579:0x05f4  */
    /* JADX WARN: Removed duplicated region for block: B:585:0x0562  */
    /* JADX WARN: Removed duplicated region for block: B:60:0x0eef  */
    /* JADX WARN: Removed duplicated region for block: B:62:0x0ef4  */
    /* JADX WARN: Removed duplicated region for block: B:64:0x0ef9  */
    /* JADX WARN: Removed duplicated region for block: B:66:0x0efe  */
    /* JADX WARN: Removed duplicated region for block: B:677:0x0c57  */
    /* JADX WARN: Removed duplicated region for block: B:688:0x0cfb A[Catch: all -> 0x0d3a, Exception -> 0x0d3d, TRY_LEAVE, TryCatch #78 {Exception -> 0x0d3d, all -> 0x0d3a, blocks: (B:686:0x0cd4, B:688:0x0cfb, B:692:0x0d12), top: B:685:0x0cd4 }] */
    /* JADX WARN: Removed duplicated region for block: B:68:0x0f03  */
    /* JADX WARN: Removed duplicated region for block: B:697:0x0d4d A[Catch: all -> 0x0d33, Exception -> 0x0d36, TryCatch #84 {Exception -> 0x0d36, all -> 0x0d33, blocks: (B:695:0x0d2f, B:697:0x0d4d, B:700:0x0d69, B:704:0x0d79, B:705:0x0da5, B:711:0x0dc5, B:712:0x0dcd, B:715:0x0db2, B:725:0x0d58), top: B:694:0x0d2f }] */
    /* JADX WARN: Removed duplicated region for block: B:707:0x0dac  */
    /* JADX WARN: Removed duplicated region for block: B:70:0x0f08  */
    /* JADX WARN: Removed duplicated region for block: B:711:0x0dc5 A[Catch: all -> 0x0d33, Exception -> 0x0d36, TryCatch #84 {Exception -> 0x0d36, all -> 0x0d33, blocks: (B:695:0x0d2f, B:697:0x0d4d, B:700:0x0d69, B:704:0x0d79, B:705:0x0da5, B:711:0x0dc5, B:712:0x0dcd, B:715:0x0db2, B:725:0x0d58), top: B:694:0x0d2f }] */
    /* JADX WARN: Removed duplicated region for block: B:726:0x0da3  */
    /* JADX WARN: Removed duplicated region for block: B:72:0x0f0d  */
    /* JADX WARN: Removed duplicated region for block: B:737:0x0d4a  */
    /* JADX WARN: Removed duplicated region for block: B:742:0x0ca5 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:74:0x0f12  */
    /* JADX WARN: Removed duplicated region for block: B:753:0x0c97 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:763:0x0c6f A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:769:0x0c5d A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:76:0x0f17  */
    /* JADX WARN: Removed duplicated region for block: B:784:0x0c42 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:78:0x0f1c  */
    /* JADX WARN: Removed duplicated region for block: B:802:0x02ea A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:80:? A[SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:839:0x02c1  */
    /* JADX WARN: Removed duplicated region for block: B:94:0x0dd9  */
    /* JADX WARN: Removed duplicated region for block: B:96:0x0dde  */
    /* JADX WARN: Removed duplicated region for block: B:98:0x0de3  */
    /* JADX WARN: Type inference failed for: r13v100 */
    /* JADX WARN: Type inference failed for: r13v101 */
    /* JADX WARN: Type inference failed for: r13v102 */
    /* JADX WARN: Type inference failed for: r13v103 */
    /* JADX WARN: Type inference failed for: r13v104 */
    /* JADX WARN: Type inference failed for: r13v105 */
    /* JADX WARN: Type inference failed for: r13v106 */
    /* JADX WARN: Type inference failed for: r13v107 */
    /* JADX WARN: Type inference failed for: r13v108 */
    /* JADX WARN: Type inference failed for: r13v109 */
    /* JADX WARN: Type inference failed for: r13v110 */
    /* JADX WARN: Type inference failed for: r13v19 */
    /* JADX WARN: Type inference failed for: r13v20 */
    /* JADX WARN: Type inference failed for: r13v5, types: [org.telegram.SQLite.SQLiteCursor] */
    /* JADX WARN: Type inference failed for: r13v6, types: [org.telegram.SQLite.SQLiteCursor] */
    /* JADX WARN: Type inference failed for: r13v84 */
    /* JADX WARN: Type inference failed for: r13v85 */
    /* JADX WARN: Type inference failed for: r13v88 */
    /* JADX WARN: Type inference failed for: r13v89 */
    /* JADX WARN: Type inference failed for: r1v1 */
    /* JADX WARN: Type inference failed for: r1v184 */
    /* JADX WARN: Type inference failed for: r1v185 */
    /* JADX WARN: Type inference failed for: r1v2 */
    /* JADX WARN: Type inference failed for: r1v3 */
    /* JADX WARN: Type inference failed for: r1v33 */
    /* JADX WARN: Type inference failed for: r1v34 */
    /* JADX WARN: Type inference failed for: r1v36 */
    /* JADX WARN: Type inference failed for: r1v37 */
    /* JADX WARN: Type inference failed for: r1v4 */
    /* JADX WARN: Type inference failed for: r49v0, types: [org.telegram.messenger.BaseController, org.telegram.messenger.MessagesStorage] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$putMessages$218(int i, TLRPC.messages_Messages messages_messages, long j, long j2, int i2, int i3, boolean z) {
        SQLitePreparedStatement sQLitePreparedStatement;
        Throwable th;
        ?? r1;
        SQLitePreparedStatement sQLitePreparedStatement2;
        SQLitePreparedStatement sQLitePreparedStatement3;
        SQLitePreparedStatement sQLitePreparedStatement4;
        Exception exc;
        ?? r12;
        SQLitePreparedStatement sQLitePreparedStatement5;
        SQLitePreparedStatement sQLitePreparedStatement6;
        SQLitePreparedStatement sQLitePreparedStatement7;
        SQLitePreparedStatement sQLitePreparedStatement8;
        SQLitePreparedStatement sQLitePreparedStatement9;
        SQLitePreparedStatement sQLitePreparedStatement10;
        SQLitePreparedStatement sQLitePreparedStatement11;
        ?? r13;
        SQLiteDatabase sQLiteDatabase;
        ?? r132;
        SQLiteDatabase sQLiteDatabase2;
        long clientUserId;
        boolean z2;
        long j3;
        int i4;
        int i5;
        long j4;
        int i6;
        int i7;
        int i8;
        int size;
        long j5;
        SQLitePreparedStatement executeFast;
        SQLitePreparedStatement sQLitePreparedStatement12;
        long j6;
        SQLitePreparedStatement sQLitePreparedStatement13;
        SQLitePreparedStatement executeFast2;
        int i9;
        Integer num;
        SQLitePreparedStatement sQLitePreparedStatement14;
        SQLitePreparedStatement sQLitePreparedStatement15;
        int i10;
        SQLitePreparedStatement sQLitePreparedStatement16;
        HashMap hashMap;
        SQLitePreparedStatement sQLitePreparedStatement17;
        SQLitePreparedStatement sQLitePreparedStatement18;
        SQLitePreparedStatement sQLitePreparedStatement19;
        SQLitePreparedStatement sQLitePreparedStatement20;
        SQLitePreparedStatement sQLitePreparedStatement21;
        boolean z3;
        boolean z4;
        SQLitePreparedStatement sQLitePreparedStatement22;
        SQLitePreparedStatement sQLitePreparedStatement23;
        SQLitePreparedStatement sQLitePreparedStatement24;
        SQLitePreparedStatement sQLitePreparedStatement25;
        Throwable th2;
        SQLitePreparedStatement sQLitePreparedStatement26;
        Exception e;
        boolean z5;
        final ArrayList arrayList;
        SQLitePreparedStatement sQLitePreparedStatement27;
        SQLitePreparedStatement sQLitePreparedStatement28;
        int i11;
        ArrayList arrayList2;
        Integer num2;
        long j7;
        Long l;
        int i12;
        SQLitePreparedStatement sQLitePreparedStatement29;
        SQLiteCursor sQLiteCursor;
        SQLiteCursor sQLiteCursor2;
        SQLiteCursor sQLiteCursor3;
        int i13;
        ArrayList arrayList3;
        ArrayList arrayList4;
        HashMap hashMap2;
        int i14;
        TLRPC.Message message;
        long j8;
        int i15;
        int i16;
        int i17;
        ArrayList<File> arrayList5;
        long j9;
        ArrayList arrayList6;
        SQLitePreparedStatement sQLitePreparedStatement30;
        int i18;
        int i19;
        TLRPC.Message message2;
        int i20;
        TLRPC.Message message3;
        TLRPC.Message message4;
        TLRPC.Document document;
        TLRPC.Document document2;
        boolean z6;
        boolean z7;
        NativeByteBuffer byteBufferValue;
        TLRPC.Photo photo;
        TLRPC.Photo photo2;
        SQLiteCursor sQLiteCursor4;
        int i21;
        TLRPC.MessageMedia messageMedia;
        SQLitePreparedStatement sQLitePreparedStatement31;
        HashMap hashMap3;
        TLRPC.Message message5;
        int i22;
        long j10;
        long j11;
        SQLitePreparedStatement sQLitePreparedStatement32;
        SQLitePreparedStatement sQLitePreparedStatement33;
        int i23;
        int i24;
        int messageMediaType;
        int i25;
        NativeByteBuffer nativeByteBuffer;
        ArrayList arrayList7;
        int i26;
        NativeByteBuffer nativeByteBuffer2;
        int i27;
        ArrayList<File> arrayList8;
        int i28;
        int i29;
        int i30;
        int i31;
        SQLitePreparedStatement executeFast3;
        SQLitePreparedStatement sQLitePreparedStatement34;
        int i32;
        SQLiteDatabase sQLiteDatabase3;
        int i33 = i;
        TLRPC.messages_Messages messages_messages2 = messages_messages;
        long j12 = j;
        int i34 = i2;
        int i35 = 0;
        int i36 = 1;
        try {
            clientUserId = getUserConfig().getClientUserId();
            z2 = i33 == 1;
            j3 = 0;
        } catch (Exception e2) {
            sQLitePreparedStatement4 = null;
            exc = e2;
            r12 = 0;
            sQLitePreparedStatement2 = null;
            sQLitePreparedStatement3 = null;
        } catch (Throwable th3) {
            sQLitePreparedStatement = null;
            th = th3;
            r1 = 0;
            sQLitePreparedStatement2 = null;
            sQLitePreparedStatement3 = null;
        }
        try {
            try {
                if (i33 == 5) {
                    sQLitePreparedStatement34 = this.database.executeFast("REPLACE INTO quick_replies_messages VALUES(?, ?, ?, ?, ?, ?, NULL, 0)");
                    int size2 = messages_messages2.messages.size();
                    int i37 = 0;
                    while (i37 < size2) {
                        TLRPC.Message message6 = messages_messages2.messages.get(i37);
                        if (!(message6 instanceof TLRPC.TL_messageEmpty)) {
                            long quickReplyId = MessageObject.getQuickReplyId(this.currentAccount, message6);
                            if (quickReplyId != j3) {
                                try {
                                    this.database.executeFast(String.format(Locale.ENGLISH, "DELETE FROM quick_replies_messages WHERE mid = %d AND topic_id = %d", Integer.valueOf(message6.id), Long.valueOf(quickReplyId))).stepThis().dispose();
                                } catch (Exception e3) {
                                    exc = e3;
                                    sQLitePreparedStatement5 = sQLitePreparedStatement34;
                                    z4 = false;
                                    sQLitePreparedStatement3 = null;
                                    sQLitePreparedStatement7 = null;
                                    sQLitePreparedStatement8 = null;
                                    sQLitePreparedStatement9 = null;
                                    sQLitePreparedStatement10 = null;
                                    sQLitePreparedStatement11 = null;
                                    sQLitePreparedStatement6 = null;
                                    r132 = z4;
                                    try {
                                        checkSQLException(exc);
                                        sQLiteDatabase2 = this.database;
                                        if (sQLiteDatabase2 != null) {
                                        }
                                        if (sQLitePreparedStatement3 != null) {
                                        }
                                        if (sQLitePreparedStatement11 != null) {
                                        }
                                        if (sQLitePreparedStatement5 != null) {
                                        }
                                        if (sQLitePreparedStatement6 != null) {
                                        }
                                        if (sQLitePreparedStatement10 != null) {
                                        }
                                        if (sQLitePreparedStatement8 != null) {
                                        }
                                        if (sQLitePreparedStatement9 != null) {
                                        }
                                        if (sQLitePreparedStatement7 != null) {
                                        }
                                        if (r132 == 0) {
                                        }
                                    } catch (Throwable th4) {
                                        th = th4;
                                        r13 = r132;
                                        sQLiteDatabase = this.database;
                                        if (sQLiteDatabase != null) {
                                        }
                                        if (sQLitePreparedStatement3 != null) {
                                        }
                                        if (sQLitePreparedStatement11 != null) {
                                        }
                                        if (sQLitePreparedStatement5 != null) {
                                        }
                                        if (sQLitePreparedStatement6 != null) {
                                        }
                                        if (sQLitePreparedStatement10 != null) {
                                        }
                                        if (sQLitePreparedStatement8 != null) {
                                        }
                                        if (sQLitePreparedStatement9 != null) {
                                        }
                                        if (sQLitePreparedStatement7 != null) {
                                        }
                                        if (r13 != 0) {
                                        }
                                    }
                                } catch (Throwable th5) {
                                    th = th5;
                                    sQLitePreparedStatement5 = sQLitePreparedStatement34;
                                    z3 = false;
                                    sQLitePreparedStatement3 = null;
                                    sQLitePreparedStatement7 = null;
                                    sQLitePreparedStatement8 = null;
                                    sQLitePreparedStatement9 = null;
                                    sQLitePreparedStatement10 = null;
                                    sQLitePreparedStatement11 = null;
                                    sQLitePreparedStatement6 = null;
                                    r13 = z3;
                                    sQLiteDatabase = this.database;
                                    if (sQLiteDatabase != null) {
                                    }
                                    if (sQLitePreparedStatement3 != null) {
                                    }
                                    if (sQLitePreparedStatement11 != null) {
                                    }
                                    if (sQLitePreparedStatement5 != null) {
                                    }
                                    if (sQLitePreparedStatement6 != null) {
                                    }
                                    if (sQLitePreparedStatement10 != null) {
                                    }
                                    if (sQLitePreparedStatement8 != null) {
                                    }
                                    if (sQLitePreparedStatement9 != null) {
                                    }
                                    if (sQLitePreparedStatement7 != null) {
                                    }
                                    if (r13 != 0) {
                                    }
                                }
                            }
                            fixUnsupportedMedia(message6);
                            MessageObject.normalizeFlags(message6);
                            sQLitePreparedStatement34.requery();
                            NativeByteBuffer nativeByteBuffer3 = new NativeByteBuffer(message6.getObjectSize());
                            message6.serializeToStream(nativeByteBuffer3);
                            sQLitePreparedStatement34.bindInteger(1, message6.id);
                            sQLitePreparedStatement34.bindLong(2, quickReplyId);
                            sQLitePreparedStatement34.bindInteger(3, message6.send_state);
                            sQLitePreparedStatement34.bindInteger(4, message6.date);
                            sQLitePreparedStatement34.bindByteBuffer(5, nativeByteBuffer3);
                            sQLitePreparedStatement34.bindInteger(6, message6.ttl);
                            sQLitePreparedStatement34.step();
                            nativeByteBuffer3.reuse();
                            i36 = 1;
                        }
                        i37 += i36;
                        j3 = 0;
                    }
                    sQLitePreparedStatement34.dispose();
                    putUsersInternal(messages_messages2.users);
                    putChatsInternal(messages_messages2.chats);
                    this.database.commitTransaction();
                } else if (z2) {
                    try {
                        this.database.executeFast(String.format(Locale.US, "DELETE FROM scheduled_messages_v2 WHERE uid = %d AND mid > 0", Long.valueOf(j))).stepThis().dispose();
                        SQLitePreparedStatement executeFast4 = this.database.executeFast("REPLACE INTO scheduled_messages_v2 VALUES(?, ?, ?, ?, ?, ?, NULL, 0)");
                        int size3 = messages_messages2.messages.size();
                        while (i35 < size3) {
                            TLRPC.Message message7 = messages_messages2.messages.get(i35);
                            if (message7 instanceof TLRPC.TL_messageEmpty) {
                                i32 = 1;
                            } else {
                                fixUnsupportedMedia(message7);
                                MessageObject.normalizeFlags(message7);
                                executeFast4.requery();
                                NativeByteBuffer nativeByteBuffer4 = new NativeByteBuffer(message7.getObjectSize());
                                message7.serializeToStream(nativeByteBuffer4);
                                executeFast4.bindInteger(1, message7.id);
                                executeFast4.bindLong(2, j12);
                                executeFast4.bindInteger(3, message7.send_state);
                                executeFast4.bindInteger(4, message7.date);
                                executeFast4.bindByteBuffer(5, nativeByteBuffer4);
                                executeFast4.bindInteger(6, message7.ttl);
                                executeFast4.step();
                                nativeByteBuffer4.reuse();
                                i32 = 1;
                            }
                            i35 += i32;
                        }
                        executeFast4.dispose();
                        putUsersInternal(messages_messages2.users);
                        putChatsInternal(messages_messages2.chats);
                        this.database.commitTransaction();
                        broadcastScheduledMessagesChange(Long.valueOf(j));
                    } catch (Exception e4) {
                        exc = e4;
                        sQLitePreparedStatement34 = null;
                        sQLitePreparedStatement5 = sQLitePreparedStatement34;
                        z4 = false;
                        sQLitePreparedStatement3 = null;
                        sQLitePreparedStatement7 = null;
                        sQLitePreparedStatement8 = null;
                        sQLitePreparedStatement9 = null;
                        sQLitePreparedStatement10 = null;
                        sQLitePreparedStatement11 = null;
                        sQLitePreparedStatement6 = null;
                        r132 = z4;
                        checkSQLException(exc);
                        sQLiteDatabase2 = this.database;
                        if (sQLiteDatabase2 != null) {
                        }
                        if (sQLitePreparedStatement3 != null) {
                        }
                        if (sQLitePreparedStatement11 != null) {
                        }
                        if (sQLitePreparedStatement5 != null) {
                        }
                        if (sQLitePreparedStatement6 != null) {
                        }
                        if (sQLitePreparedStatement10 != null) {
                        }
                        if (sQLitePreparedStatement8 != null) {
                        }
                        if (sQLitePreparedStatement9 != null) {
                        }
                        if (sQLitePreparedStatement7 != null) {
                        }
                        if (r132 == 0) {
                        }
                    } catch (Throwable th6) {
                        th = th6;
                        sQLitePreparedStatement34 = null;
                        sQLitePreparedStatement5 = sQLitePreparedStatement34;
                        z3 = false;
                        sQLitePreparedStatement3 = null;
                        sQLitePreparedStatement7 = null;
                        sQLitePreparedStatement8 = null;
                        sQLitePreparedStatement9 = null;
                        sQLitePreparedStatement10 = null;
                        sQLitePreparedStatement11 = null;
                        sQLitePreparedStatement6 = null;
                        r13 = z3;
                        sQLiteDatabase = this.database;
                        if (sQLiteDatabase != null) {
                        }
                        if (sQLitePreparedStatement3 != null) {
                        }
                        if (sQLitePreparedStatement11 != null) {
                        }
                        if (sQLitePreparedStatement5 != null) {
                        }
                        if (sQLitePreparedStatement6 != null) {
                        }
                        if (sQLitePreparedStatement10 != null) {
                        }
                        if (sQLitePreparedStatement8 != null) {
                        }
                        if (sQLitePreparedStatement9 != null) {
                        }
                        if (sQLitePreparedStatement7 != null) {
                        }
                        if (r13 != 0) {
                        }
                    }
                } else {
                    String str = j2 != 0 ? "messages_holes_topics" : "messages_holes";
                    if (messages_messages2.messages.isEmpty()) {
                        if (i34 == 0) {
                            doneHolesInTable(str, j, i3, j2);
                            doneHolesInMedia(j, i3, -1, j2);
                        }
                        SQLiteDatabase sQLiteDatabase4 = this.database;
                        if (sQLiteDatabase4 != null) {
                            sQLiteDatabase4.commitTransaction();
                            return;
                        }
                        return;
                    }
                    this.database.beginTransaction();
                    try {
                        try {
                            try {
                                try {
                                    try {
                                        if (i34 == 0) {
                                            int i38 = messages_messages2.messages.get(r1.size() - 1).id;
                                            j4 = clientUserId;
                                            closeHolesInTable(str, j, i38, i3, j2);
                                            i7 = i3;
                                            i8 = i38;
                                        } else {
                                            j4 = clientUserId;
                                            if (i34 == 1) {
                                                int i39 = messages_messages2.messages.get(0).id;
                                                closeHolesInTable(str, j, i3, i39, j2);
                                                closeHolesInMedia(j, i3, i39, -1, j2);
                                            } else {
                                                if (i34 != 3) {
                                                    i6 = 4;
                                                    if (i34 != 2) {
                                                    }
                                                } else {
                                                    i6 = 4;
                                                }
                                                int i40 = (i3 != 0 || i34 == i6) ? messages_messages2.messages.get(0).id : ConnectionsManager.DEFAULT_DATACENTER_ID;
                                                ArrayList<TLRPC.Message> arrayList9 = messages_messages2.messages;
                                                int i41 = arrayList9.get(arrayList9.size() - 1).id;
                                                closeHolesInTable(str, j, i41, i40, j2);
                                                i7 = i40;
                                                i8 = i41;
                                            }
                                            size = messages_messages2.messages.size();
                                            ArrayList<File> arrayList10 = new ArrayList<>();
                                            ArrayList arrayList11 = new ArrayList();
                                            ArrayList arrayList12 = new ArrayList();
                                            j5 = j4;
                                            ArrayList arrayList13 = j12 != j5 ? new ArrayList() : null;
                                            sQLitePreparedStatement3 = this.database.executeFast("REPLACE INTO messages_topics VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 0, ?, ?)");
                                            executeFast = this.database.executeFast("REPLACE INTO messages_v2 VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 0, ?, ?, ?)");
                                            sQLitePreparedStatement2 = this.database.executeFast("REPLACE INTO media_v4 VALUES(?, ?, ?, ?, ?)");
                                            sQLitePreparedStatement12 = sQLitePreparedStatement2;
                                            SQLitePreparedStatement executeFast5 = this.database.executeFast("REPLACE INTO media_topics VALUES(?, ?, ?, ?, ?, ?)");
                                            if (j5 != j12) {
                                                try {
                                                    ArrayList arrayList14 = new ArrayList();
                                                    j6 = j5;
                                                    for (int i42 = 0; i42 < size; i42++) {
                                                        arrayList14.add(Integer.valueOf(messages_messages2.messages.get(i42).id));
                                                    }
                                                    SQLiteDatabase sQLiteDatabase5 = this.database;
                                                    StringBuilder sb = new StringBuilder();
                                                    sQLitePreparedStatement13 = executeFast5;
                                                    sb.append("DELETE FROM tag_message_id WHERE mid IN (");
                                                    sb.append(TextUtils.join(",", arrayList14));
                                                    sb.append(")");
                                                    sQLiteDatabase5.executeFast(sb.toString()).stepThis().dispose();
                                                    executeFast2 = this.database.executeFast("REPLACE INTO tag_message_id VALUES(?, ?, ?, ?)");
                                                } catch (Exception e5) {
                                                    exc = e5;
                                                    sQLitePreparedStatement5 = executeFast;
                                                    sQLitePreparedStatement6 = sQLitePreparedStatement12;
                                                    r132 = 0;
                                                    sQLitePreparedStatement7 = null;
                                                    sQLitePreparedStatement8 = null;
                                                    sQLitePreparedStatement9 = null;
                                                    sQLitePreparedStatement10 = null;
                                                    sQLitePreparedStatement11 = null;
                                                    checkSQLException(exc);
                                                    sQLiteDatabase2 = this.database;
                                                    if (sQLiteDatabase2 != null) {
                                                    }
                                                    if (sQLitePreparedStatement3 != null) {
                                                    }
                                                    if (sQLitePreparedStatement11 != null) {
                                                    }
                                                    if (sQLitePreparedStatement5 != null) {
                                                    }
                                                    if (sQLitePreparedStatement6 != null) {
                                                    }
                                                    if (sQLitePreparedStatement10 != null) {
                                                    }
                                                    if (sQLitePreparedStatement8 != null) {
                                                    }
                                                    if (sQLitePreparedStatement9 != null) {
                                                    }
                                                    if (sQLitePreparedStatement7 != null) {
                                                    }
                                                    if (r132 == 0) {
                                                    }
                                                } catch (Throwable th7) {
                                                    th = th7;
                                                    sQLitePreparedStatement5 = executeFast;
                                                    sQLitePreparedStatement6 = sQLitePreparedStatement12;
                                                    r13 = 0;
                                                    sQLitePreparedStatement7 = null;
                                                    sQLitePreparedStatement8 = null;
                                                    sQLitePreparedStatement9 = null;
                                                    sQLitePreparedStatement10 = null;
                                                    sQLitePreparedStatement11 = null;
                                                    sQLiteDatabase = this.database;
                                                    if (sQLiteDatabase != null) {
                                                    }
                                                    if (sQLitePreparedStatement3 != null) {
                                                    }
                                                    if (sQLitePreparedStatement11 != null) {
                                                    }
                                                    if (sQLitePreparedStatement5 != null) {
                                                    }
                                                    if (sQLitePreparedStatement6 != null) {
                                                    }
                                                    if (sQLitePreparedStatement10 != null) {
                                                    }
                                                    if (sQLitePreparedStatement8 != null) {
                                                    }
                                                    if (sQLitePreparedStatement9 != null) {
                                                    }
                                                    if (sQLitePreparedStatement7 != null) {
                                                    }
                                                    if (r13 != 0) {
                                                    }
                                                }
                                            } else {
                                                j6 = j5;
                                                sQLitePreparedStatement13 = executeFast5;
                                                executeFast2 = null;
                                            }
                                            i9 = 0;
                                            Long l2 = null;
                                            int i43 = ConnectionsManager.DEFAULT_DATACENTER_ID;
                                            HashMap hashMap4 = null;
                                            long j13 = 0;
                                            num = null;
                                            sQLitePreparedStatement8 = null;
                                            sQLitePreparedStatement9 = null;
                                            sQLitePreparedStatement10 = null;
                                            ArrayList arrayList15 = null;
                                            int i44 = ConnectionsManager.DEFAULT_DATACENTER_ID;
                                            while (i9 < size) {
                                                int i45 = i43;
                                                try {
                                                    TLRPC.Message message8 = messages_messages2.messages.get(i9);
                                                    try {
                                                        if (num != null || message8 == null) {
                                                            if (num != null) {
                                                                i11 = i9;
                                                                try {
                                                                    sQLitePreparedStatement11 = executeFast2;
                                                                } catch (Exception e6) {
                                                                    e = e6;
                                                                    sQLitePreparedStatement11 = executeFast2;
                                                                    exc = e;
                                                                    sQLitePreparedStatement20 = sQLitePreparedStatement12;
                                                                    sQLitePreparedStatement3 = sQLitePreparedStatement3;
                                                                    sQLitePreparedStatement16 = sQLitePreparedStatement11;
                                                                    sQLitePreparedStatement19 = null;
                                                                    sQLitePreparedStatement11 = sQLitePreparedStatement16;
                                                                    sQLitePreparedStatement6 = sQLitePreparedStatement20;
                                                                    sQLitePreparedStatement7 = sQLitePreparedStatement19;
                                                                    sQLitePreparedStatement5 = executeFast;
                                                                    r132 = sQLitePreparedStatement19;
                                                                    checkSQLException(exc);
                                                                    sQLiteDatabase2 = this.database;
                                                                    if (sQLiteDatabase2 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement3 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement11 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement5 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement6 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement10 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement8 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement9 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement7 != null) {
                                                                    }
                                                                    if (r132 == 0) {
                                                                    }
                                                                } catch (Throwable th8) {
                                                                    th = th8;
                                                                    sQLitePreparedStatement11 = executeFast2;
                                                                    th = th;
                                                                    sQLitePreparedStatement18 = sQLitePreparedStatement12;
                                                                    sQLitePreparedStatement3 = sQLitePreparedStatement3;
                                                                    sQLitePreparedStatement16 = sQLitePreparedStatement11;
                                                                    sQLitePreparedStatement17 = null;
                                                                    sQLitePreparedStatement11 = sQLitePreparedStatement16;
                                                                    sQLitePreparedStatement6 = sQLitePreparedStatement18;
                                                                    sQLitePreparedStatement7 = sQLitePreparedStatement17;
                                                                    sQLitePreparedStatement5 = executeFast;
                                                                    r13 = sQLitePreparedStatement17;
                                                                    sQLiteDatabase = this.database;
                                                                    if (sQLiteDatabase != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement3 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement11 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement5 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement6 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement10 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement8 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement9 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement7 != null) {
                                                                    }
                                                                    if (r13 != 0) {
                                                                    }
                                                                }
                                                            } else {
                                                                i11 = i9;
                                                                sQLitePreparedStatement11 = executeFast2;
                                                            }
                                                            arrayList2 = arrayList11;
                                                            num2 = num;
                                                            j7 = 0;
                                                            l = l2;
                                                            if (j13 == j7) {
                                                                j13 = message8.peer_id.channel_id;
                                                            }
                                                            if (i34 != -2) {
                                                                try {
                                                                    SQLiteDatabase sQLiteDatabase6 = this.database;
                                                                    Locale locale = Locale.US;
                                                                    Integer valueOf = Integer.valueOf(message8.id);
                                                                    Long valueOf2 = Long.valueOf(MessageObject.getDialogId(message8));
                                                                    i12 = size;
                                                                    try {
                                                                        try {
                                                                            Object[] objArr = new Object[2];
                                                                            try {
                                                                                objArr[0] = valueOf;
                                                                                objArr[1] = valueOf2;
                                                                                SQLiteCursor queryFinalized = sQLiteDatabase6.queryFinalized(String.format(locale, "SELECT mid, data, ttl, mention, read_state, send_state, custom_params FROM messages_v2 WHERE mid = %d AND uid = %d", objArr), new Object[0]);
                                                                                try {
                                                                                    boolean next = queryFinalized.next();
                                                                                    if (next) {
                                                                                        NativeByteBuffer byteBufferValue2 = queryFinalized.byteBufferValue(1);
                                                                                        if (byteBufferValue2 != null) {
                                                                                            TLRPC.Message TLdeserialize = TLRPC.Message.TLdeserialize(byteBufferValue2, byteBufferValue2.readInt32(false), false);
                                                                                            TLdeserialize.readAttachPath(byteBufferValue2, getUserConfig().clientUserId);
                                                                                            byteBufferValue2.reuse();
                                                                                            if (arrayList13 != null) {
                                                                                                sQLitePreparedStatement5 = executeFast;
                                                                                                arrayList4 = arrayList13;
                                                                                                long j14 = j6;
                                                                                                hashMap2 = hashMap4;
                                                                                                i14 = i44;
                                                                                                i20 = i45;
                                                                                                j8 = j14;
                                                                                                sQLitePreparedStatement6 = sQLitePreparedStatement12;
                                                                                                message2 = TLdeserialize;
                                                                                                arrayList3 = arrayList2;
                                                                                                try {
                                                                                                    arrayList4.add(new SavedReactionsUpdate(j8, TLdeserialize, message8));
                                                                                                } catch (Exception e7) {
                                                                                                    e = e7;
                                                                                                    exc = e;
                                                                                                    sQLiteCursor3 = queryFinalized;
                                                                                                    sQLitePreparedStatement3 = sQLitePreparedStatement3;
                                                                                                    sQLiteCursor = sQLiteCursor3;
                                                                                                    sQLitePreparedStatement7 = null;
                                                                                                    r132 = sQLiteCursor;
                                                                                                    checkSQLException(exc);
                                                                                                    sQLiteDatabase2 = this.database;
                                                                                                    if (sQLiteDatabase2 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement3 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement11 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement5 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement6 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement10 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement8 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement9 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement7 != null) {
                                                                                                    }
                                                                                                    if (r132 == 0) {
                                                                                                    }
                                                                                                } catch (Throwable th9) {
                                                                                                    th = th9;
                                                                                                    th = th;
                                                                                                    sQLiteCursor2 = queryFinalized;
                                                                                                    sQLitePreparedStatement3 = sQLitePreparedStatement3;
                                                                                                    sQLiteCursor4 = sQLiteCursor2;
                                                                                                    sQLitePreparedStatement7 = null;
                                                                                                    r13 = sQLiteCursor4;
                                                                                                    sQLiteDatabase = this.database;
                                                                                                    if (sQLiteDatabase != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement3 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement11 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement5 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement6 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement10 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement8 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement9 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement7 != null) {
                                                                                                    }
                                                                                                    if (r13 != 0) {
                                                                                                    }
                                                                                                }
                                                                                            } else {
                                                                                                message2 = TLdeserialize;
                                                                                                sQLitePreparedStatement5 = executeFast;
                                                                                                sQLitePreparedStatement6 = sQLitePreparedStatement12;
                                                                                                arrayList3 = arrayList2;
                                                                                                arrayList4 = arrayList13;
                                                                                                long j15 = j6;
                                                                                                hashMap2 = hashMap4;
                                                                                                i14 = i44;
                                                                                                i20 = i45;
                                                                                                j8 = j15;
                                                                                            }
                                                                                            if (queryFinalized.intValue(5) != 3) {
                                                                                                if (MessageObject.getFileName(message2).equals(MessageObject.getFileName(message8))) {
                                                                                                    message3 = message2;
                                                                                                    message4 = message8;
                                                                                                    message4.attachPath = message3.attachPath;
                                                                                                } else {
                                                                                                    message3 = message2;
                                                                                                    message4 = message8;
                                                                                                }
                                                                                                message4.ttl = queryFinalized.intValue(2);
                                                                                            } else {
                                                                                                message3 = message2;
                                                                                                message4 = message8;
                                                                                            }
                                                                                            TLRPC.MessageMedia messageMedia2 = message3.media;
                                                                                            if (messageMedia2 instanceof TLRPC.TL_messageMediaPhoto) {
                                                                                                TLRPC.MessageMedia messageMedia3 = message4.media;
                                                                                                if ((messageMedia3 instanceof TLRPC.TL_messageMediaPhoto) && (photo = messageMedia2.photo) != null && (photo2 = messageMedia3.photo) != null) {
                                                                                                    i19 = i20;
                                                                                                    if (photo.id == photo2.id) {
                                                                                                        z7 = message3.out;
                                                                                                        if (z7 && !message4.out) {
                                                                                                            message4.out = z7;
                                                                                                        }
                                                                                                        if (z6) {
                                                                                                            message = message4;
                                                                                                        } else {
                                                                                                            message = message4;
                                                                                                            addFilesToDelete(message3, arrayList10, arrayList12, arrayList3, false);
                                                                                                        }
                                                                                                        byteBufferValue = queryFinalized.byteBufferValue(6);
                                                                                                        MessageCustomParamsHelper.readLocalParams(message, byteBufferValue);
                                                                                                        if (byteBufferValue != null) {
                                                                                                            byteBufferValue.reuse();
                                                                                                        }
                                                                                                    }
                                                                                                    z7 = message3.out;
                                                                                                    if (z7) {
                                                                                                        message4.out = z7;
                                                                                                    }
                                                                                                    if (z6) {
                                                                                                    }
                                                                                                    byteBufferValue = queryFinalized.byteBufferValue(6);
                                                                                                    MessageCustomParamsHelper.readLocalParams(message, byteBufferValue);
                                                                                                    if (byteBufferValue != null) {
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                            i19 = i20;
                                                                                            if (messageMedia2 instanceof TLRPC.TL_messageMediaDocument) {
                                                                                                TLRPC.MessageMedia messageMedia4 = message4.media;
                                                                                                if ((messageMedia4 instanceof TLRPC.TL_messageMediaDocument) && (document = messageMedia2.document) != null && (document2 = messageMedia4.document) != null) {
                                                                                                    if (document.id == document2.id) {
                                                                                                        z7 = message3.out;
                                                                                                        if (z7) {
                                                                                                        }
                                                                                                        if (z6) {
                                                                                                        }
                                                                                                        byteBufferValue = queryFinalized.byteBufferValue(6);
                                                                                                        MessageCustomParamsHelper.readLocalParams(message, byteBufferValue);
                                                                                                        if (byteBufferValue != null) {
                                                                                                        }
                                                                                                    }
                                                                                                    z7 = message3.out;
                                                                                                    if (z7) {
                                                                                                    }
                                                                                                    if (z6) {
                                                                                                    }
                                                                                                    byteBufferValue = queryFinalized.byteBufferValue(6);
                                                                                                    MessageCustomParamsHelper.readLocalParams(message, byteBufferValue);
                                                                                                    if (byteBufferValue != null) {
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                            if (MessageObject.getPhoto(message3) != null && MessageObject.getPhoto(message4) != null) {
                                                                                                z6 = MessageObject.getPhoto(message3).id == MessageObject.getPhoto(message4).id;
                                                                                            } else if (MessageObject.getDocument(message3) != null) {
                                                                                                if (MessageObject.getDocument(message4) != null) {
                                                                                                }
                                                                                            }
                                                                                            z7 = message3.out;
                                                                                            if (z7) {
                                                                                            }
                                                                                            if (z6) {
                                                                                            }
                                                                                            byteBufferValue = queryFinalized.byteBufferValue(6);
                                                                                            MessageCustomParamsHelper.readLocalParams(message, byteBufferValue);
                                                                                            if (byteBufferValue != null) {
                                                                                            }
                                                                                        } else {
                                                                                            sQLitePreparedStatement5 = executeFast;
                                                                                            sQLitePreparedStatement6 = sQLitePreparedStatement12;
                                                                                            i19 = i45;
                                                                                            arrayList3 = arrayList2;
                                                                                            arrayList4 = arrayList13;
                                                                                            long j16 = j6;
                                                                                            hashMap2 = hashMap4;
                                                                                            i14 = i44;
                                                                                            message = message8;
                                                                                            j8 = j16;
                                                                                        }
                                                                                        boolean z8 = queryFinalized.intValue(3) != 0;
                                                                                        int intValue = queryFinalized.intValue(4);
                                                                                        i13 = i19;
                                                                                        if (z8 != message.mentioned) {
                                                                                            if (i13 == Integer.MAX_VALUE) {
                                                                                                SQLiteCursor queryFinalized2 = this.database.queryFinalized("SELECT unread_count_i FROM dialogs WHERE did = " + j12, new Object[0]);
                                                                                                if (queryFinalized2.next()) {
                                                                                                    i13 = queryFinalized2.intValue(0);
                                                                                                }
                                                                                                queryFinalized2.dispose();
                                                                                            }
                                                                                            if (z8) {
                                                                                                if (intValue <= 1) {
                                                                                                    i15 = i13 - 1;
                                                                                                    queryFinalized.dispose();
                                                                                                    if (!next) {
                                                                                                        i16 = i2;
                                                                                                        i17 = i15;
                                                                                                        arrayList5 = arrayList10;
                                                                                                        j9 = j12;
                                                                                                        arrayList6 = arrayList4;
                                                                                                        sQLitePreparedStatement30 = sQLitePreparedStatement13;
                                                                                                        hashMap4 = hashMap2;
                                                                                                        i18 = i14;
                                                                                                        sQLitePreparedStatement16 = sQLitePreparedStatement11;
                                                                                                        sQLitePreparedStatement29 = sQLitePreparedStatement6;
                                                                                                        i34 = i16;
                                                                                                        i9 = i11 + 1;
                                                                                                        executeFast2 = sQLitePreparedStatement16;
                                                                                                        sQLitePreparedStatement13 = sQLitePreparedStatement30;
                                                                                                        j12 = j9;
                                                                                                        i43 = i17;
                                                                                                        arrayList11 = arrayList3;
                                                                                                        l2 = l;
                                                                                                        num = num2;
                                                                                                        j6 = j8;
                                                                                                        arrayList13 = arrayList6;
                                                                                                        arrayList10 = arrayList5;
                                                                                                        messages_messages2 = messages_messages;
                                                                                                        sQLitePreparedStatement12 = sQLitePreparedStatement29;
                                                                                                        i44 = i18;
                                                                                                        size = i12;
                                                                                                        executeFast = sQLitePreparedStatement5;
                                                                                                    }
                                                                                                }
                                                                                            } else if (message.media_unread) {
                                                                                                i15 = i13 + 1;
                                                                                                queryFinalized.dispose();
                                                                                                if (!next) {
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    } else {
                                                                                        sQLitePreparedStatement5 = executeFast;
                                                                                        sQLitePreparedStatement6 = sQLitePreparedStatement12;
                                                                                        i13 = i45;
                                                                                        arrayList3 = arrayList2;
                                                                                        arrayList4 = arrayList13;
                                                                                        long j17 = j6;
                                                                                        hashMap2 = hashMap4;
                                                                                        i14 = i44;
                                                                                        message = message8;
                                                                                        j8 = j17;
                                                                                    }
                                                                                    i15 = i13;
                                                                                    queryFinalized.dispose();
                                                                                    if (!next) {
                                                                                    }
                                                                                } catch (Exception e8) {
                                                                                    e = e8;
                                                                                    sQLitePreparedStatement5 = executeFast;
                                                                                    sQLitePreparedStatement6 = sQLitePreparedStatement12;
                                                                                } catch (Throwable th10) {
                                                                                    th = th10;
                                                                                    sQLitePreparedStatement5 = executeFast;
                                                                                    sQLitePreparedStatement6 = sQLitePreparedStatement12;
                                                                                }
                                                                            } catch (Exception e9) {
                                                                                sQLitePreparedStatement5 = executeFast;
                                                                                sQLitePreparedStatement6 = sQLitePreparedStatement12;
                                                                                exc = e9;
                                                                                sQLitePreparedStatement3 = sQLitePreparedStatement3;
                                                                                sQLiteCursor = null;
                                                                                sQLitePreparedStatement7 = null;
                                                                                r132 = sQLiteCursor;
                                                                                checkSQLException(exc);
                                                                                sQLiteDatabase2 = this.database;
                                                                                if (sQLiteDatabase2 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement3 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement11 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement5 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement6 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement10 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement8 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement9 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement7 != null) {
                                                                                }
                                                                                if (r132 == 0) {
                                                                                }
                                                                            }
                                                                        } catch (Throwable th11) {
                                                                            sQLitePreparedStatement5 = executeFast;
                                                                            th = th11;
                                                                            sQLitePreparedStatement16 = sQLitePreparedStatement11;
                                                                            sQLitePreparedStatement29 = sQLitePreparedStatement12;
                                                                            sQLitePreparedStatement11 = sQLitePreparedStatement16;
                                                                            sQLitePreparedStatement6 = sQLitePreparedStatement29;
                                                                            sQLitePreparedStatement3 = sQLitePreparedStatement3;
                                                                            sQLiteCursor4 = null;
                                                                            sQLitePreparedStatement7 = null;
                                                                            r13 = sQLiteCursor4;
                                                                            sQLiteDatabase = this.database;
                                                                            if (sQLiteDatabase != null) {
                                                                                sQLiteDatabase.commitTransaction();
                                                                            }
                                                                            if (sQLitePreparedStatement3 != null) {
                                                                                sQLitePreparedStatement3.dispose();
                                                                            }
                                                                            if (sQLitePreparedStatement11 != null) {
                                                                                sQLitePreparedStatement11.dispose();
                                                                            }
                                                                            if (sQLitePreparedStatement5 != null) {
                                                                                sQLitePreparedStatement5.dispose();
                                                                            }
                                                                            if (sQLitePreparedStatement6 != null) {
                                                                                sQLitePreparedStatement6.dispose();
                                                                            }
                                                                            if (sQLitePreparedStatement10 != null) {
                                                                                sQLitePreparedStatement10.dispose();
                                                                            }
                                                                            if (sQLitePreparedStatement8 != null) {
                                                                                sQLitePreparedStatement8.dispose();
                                                                            }
                                                                            if (sQLitePreparedStatement9 != null) {
                                                                                sQLitePreparedStatement9.dispose();
                                                                            }
                                                                            if (sQLitePreparedStatement7 != null) {
                                                                                sQLitePreparedStatement7.dispose();
                                                                            }
                                                                            if (r13 != 0) {
                                                                                throw th;
                                                                            }
                                                                            r13.dispose();
                                                                            throw th;
                                                                        }
                                                                    } catch (Exception e10) {
                                                                        sQLitePreparedStatement5 = executeFast;
                                                                        sQLitePreparedStatement6 = sQLitePreparedStatement12;
                                                                        exc = e10;
                                                                    }
                                                                } catch (Exception e11) {
                                                                    sQLitePreparedStatement6 = sQLitePreparedStatement12;
                                                                    exc = e11;
                                                                    sQLitePreparedStatement3 = sQLitePreparedStatement3;
                                                                    sQLitePreparedStatement16 = sQLitePreparedStatement11;
                                                                    sQLitePreparedStatement20 = sQLitePreparedStatement6;
                                                                    sQLitePreparedStatement19 = null;
                                                                    sQLitePreparedStatement11 = sQLitePreparedStatement16;
                                                                    sQLitePreparedStatement6 = sQLitePreparedStatement20;
                                                                    sQLitePreparedStatement7 = sQLitePreparedStatement19;
                                                                    sQLitePreparedStatement5 = executeFast;
                                                                    r132 = sQLitePreparedStatement19;
                                                                    checkSQLException(exc);
                                                                    sQLiteDatabase2 = this.database;
                                                                    if (sQLiteDatabase2 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement3 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement11 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement5 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement6 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement10 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement8 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement9 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement7 != null) {
                                                                    }
                                                                    if (r132 == 0) {
                                                                    }
                                                                } catch (Throwable th12) {
                                                                    sQLitePreparedStatement6 = sQLitePreparedStatement12;
                                                                    th = th12;
                                                                    sQLitePreparedStatement3 = sQLitePreparedStatement3;
                                                                    sQLitePreparedStatement16 = sQLitePreparedStatement11;
                                                                    sQLitePreparedStatement18 = sQLitePreparedStatement6;
                                                                    sQLitePreparedStatement17 = null;
                                                                    sQLitePreparedStatement11 = sQLitePreparedStatement16;
                                                                    sQLitePreparedStatement6 = sQLitePreparedStatement18;
                                                                    sQLitePreparedStatement7 = sQLitePreparedStatement17;
                                                                    sQLitePreparedStatement5 = executeFast;
                                                                    r13 = sQLitePreparedStatement17;
                                                                    sQLiteDatabase = this.database;
                                                                    if (sQLiteDatabase != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement3 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement11 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement5 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement6 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement10 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement8 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement9 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement7 != null) {
                                                                    }
                                                                    if (r13 != 0) {
                                                                    }
                                                                }
                                                            } else {
                                                                i12 = size;
                                                                sQLitePreparedStatement5 = executeFast;
                                                                sQLitePreparedStatement6 = sQLitePreparedStatement12;
                                                                arrayList3 = arrayList2;
                                                                arrayList4 = arrayList13;
                                                                HashMap hashMap5 = hashMap4;
                                                                message = message8;
                                                                long j18 = j6;
                                                                hashMap2 = hashMap5;
                                                                i14 = i44;
                                                                j8 = j18;
                                                                i15 = i45;
                                                            }
                                                            if (i11 != 0 && z) {
                                                                try {
                                                                    SQLiteCursor queryFinalized3 = this.database.queryFinalized("SELECT pinned, unread_count_i, flags FROM dialogs WHERE did = " + j12, new Object[0]);
                                                                    try {
                                                                        boolean next2 = queryFinalized3.next();
                                                                        if (next2) {
                                                                            i30 = queryFinalized3.intValue(0);
                                                                            int intValue2 = queryFinalized3.intValue(1);
                                                                            i31 = queryFinalized3.intValue(2);
                                                                            i29 = intValue2;
                                                                        } else {
                                                                            i29 = 0;
                                                                            i30 = 0;
                                                                            i31 = 0;
                                                                        }
                                                                        queryFinalized3.dispose();
                                                                        if (next2) {
                                                                            try {
                                                                                executeFast3 = this.database.executeFast("UPDATE dialogs SET date = ?, last_mid = ?, last_mid_group = ?, inbox_max = ?, last_mid_i = ?, pts = ?, date_i = ? WHERE did = ?");
                                                                                try {
                                                                                    executeFast3.bindInteger(1, message.date);
                                                                                    executeFast3.bindInteger(2, message.id);
                                                                                    if ((message.flags & 131072) != 0) {
                                                                                        executeFast3.bindLong(3, message.grouped_id);
                                                                                    } else {
                                                                                        executeFast3.bindNull(3);
                                                                                    }
                                                                                    executeFast3.bindInteger(4, message.id);
                                                                                    executeFast3.bindInteger(5, message.id);
                                                                                    executeFast3.bindInteger(6, messages_messages2.pts);
                                                                                    executeFast3.bindInteger(7, message.date);
                                                                                    executeFast3.bindLong(8, j12);
                                                                                } catch (Exception e12) {
                                                                                    exc = e12;
                                                                                    sQLitePreparedStatement7 = executeFast3;
                                                                                    sQLitePreparedStatement3 = sQLitePreparedStatement3;
                                                                                    r132 = 0;
                                                                                    checkSQLException(exc);
                                                                                    sQLiteDatabase2 = this.database;
                                                                                    if (sQLiteDatabase2 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement3 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement11 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement5 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement6 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement10 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement8 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement9 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement7 != null) {
                                                                                    }
                                                                                    if (r132 == 0) {
                                                                                    }
                                                                                } catch (Throwable th13) {
                                                                                    th = th13;
                                                                                    sQLitePreparedStatement7 = executeFast3;
                                                                                    sQLitePreparedStatement3 = sQLitePreparedStatement3;
                                                                                    r13 = 0;
                                                                                    sQLiteDatabase = this.database;
                                                                                    if (sQLiteDatabase != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement3 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement11 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement5 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement6 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement10 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement8 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement9 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement7 != null) {
                                                                                    }
                                                                                    if (r13 != 0) {
                                                                                    }
                                                                                }
                                                                            } catch (Exception e13) {
                                                                                exc = e13;
                                                                                queryFinalized3 = null;
                                                                                sQLiteCursor3 = queryFinalized3;
                                                                                sQLitePreparedStatement3 = sQLitePreparedStatement3;
                                                                                sQLiteCursor = sQLiteCursor3;
                                                                                sQLitePreparedStatement7 = null;
                                                                                r132 = sQLiteCursor;
                                                                                checkSQLException(exc);
                                                                                sQLiteDatabase2 = this.database;
                                                                                if (sQLiteDatabase2 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement3 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement11 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement5 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement6 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement10 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement8 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement9 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement7 != null) {
                                                                                }
                                                                                if (r132 == 0) {
                                                                                }
                                                                            } catch (Throwable th14) {
                                                                                th = th14;
                                                                                queryFinalized3 = null;
                                                                                sQLiteCursor2 = queryFinalized3;
                                                                                sQLitePreparedStatement3 = sQLitePreparedStatement3;
                                                                                sQLiteCursor4 = sQLiteCursor2;
                                                                                sQLitePreparedStatement7 = null;
                                                                                r13 = sQLiteCursor4;
                                                                                sQLiteDatabase = this.database;
                                                                                if (sQLiteDatabase != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement3 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement11 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement5 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement6 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement10 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement8 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement9 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement7 != null) {
                                                                                }
                                                                                if (r13 != 0) {
                                                                                }
                                                                            }
                                                                        } else {
                                                                            executeFast3 = this.database.executeFast("REPLACE INTO dialogs VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
                                                                            try {
                                                                                executeFast3.bindLong(1, j12);
                                                                                executeFast3.bindInteger(2, message.date);
                                                                                executeFast3.bindInteger(3, 0);
                                                                                executeFast3.bindInteger(4, message.id);
                                                                                executeFast3.bindInteger(5, message.id);
                                                                                executeFast3.bindInteger(6, 0);
                                                                                executeFast3.bindInteger(7, message.id);
                                                                                executeFast3.bindInteger(8, i29);
                                                                                executeFast3.bindInteger(9, messages_messages2.pts);
                                                                                executeFast3.bindInteger(10, message.date);
                                                                                executeFast3.bindInteger(11, i30);
                                                                                executeFast3.bindInteger(12, i31);
                                                                                executeFast3.bindInteger(13, -1);
                                                                                executeFast3.bindNull(14);
                                                                                executeFast3.bindInteger(15, 0);
                                                                                if ((message.flags & 131072) != 0) {
                                                                                    executeFast3.bindLong(16, message.grouped_id);
                                                                                } else {
                                                                                    executeFast3.bindNull(16);
                                                                                }
                                                                                executeFast3.bindInteger(17, 0);
                                                                                this.unknownDialogsIds.put(j12, Boolean.TRUE);
                                                                            } catch (Exception e14) {
                                                                                sQLitePreparedStatement7 = executeFast3;
                                                                                sQLitePreparedStatement3 = sQLitePreparedStatement3;
                                                                                r132 = 0;
                                                                                exc = e14;
                                                                                checkSQLException(exc);
                                                                                sQLiteDatabase2 = this.database;
                                                                                if (sQLiteDatabase2 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement3 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement11 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement5 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement6 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement10 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement8 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement9 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement7 != null) {
                                                                                }
                                                                                if (r132 == 0) {
                                                                                }
                                                                            } catch (Throwable th15) {
                                                                                sQLitePreparedStatement7 = executeFast3;
                                                                                sQLitePreparedStatement3 = sQLitePreparedStatement3;
                                                                                r13 = 0;
                                                                                th = th15;
                                                                                sQLiteDatabase = this.database;
                                                                                if (sQLiteDatabase != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement3 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement11 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement5 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement6 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement10 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement8 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement9 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement7 != null) {
                                                                                }
                                                                                if (r13 != 0) {
                                                                                }
                                                                            }
                                                                        }
                                                                        executeFast3.step();
                                                                        executeFast3.dispose();
                                                                    } catch (Exception e15) {
                                                                        exc = e15;
                                                                    } catch (Throwable th16) {
                                                                        th = th16;
                                                                    }
                                                                } catch (Exception e16) {
                                                                    exc = e16;
                                                                    sQLitePreparedStatement3 = sQLitePreparedStatement3;
                                                                    sQLitePreparedStatement16 = sQLitePreparedStatement11;
                                                                    executeFast = sQLitePreparedStatement5;
                                                                    sQLitePreparedStatement20 = sQLitePreparedStatement6;
                                                                    sQLitePreparedStatement19 = null;
                                                                    sQLitePreparedStatement11 = sQLitePreparedStatement16;
                                                                    sQLitePreparedStatement6 = sQLitePreparedStatement20;
                                                                    sQLitePreparedStatement7 = sQLitePreparedStatement19;
                                                                    sQLitePreparedStatement5 = executeFast;
                                                                    r132 = sQLitePreparedStatement19;
                                                                    checkSQLException(exc);
                                                                    sQLiteDatabase2 = this.database;
                                                                    if (sQLiteDatabase2 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement3 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement11 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement5 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement6 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement10 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement8 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement9 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement7 != null) {
                                                                    }
                                                                    if (r132 == 0) {
                                                                    }
                                                                } catch (Throwable th17) {
                                                                    th = th17;
                                                                    sQLitePreparedStatement3 = sQLitePreparedStatement3;
                                                                    sQLitePreparedStatement16 = sQLitePreparedStatement11;
                                                                    executeFast = sQLitePreparedStatement5;
                                                                    sQLitePreparedStatement18 = sQLitePreparedStatement6;
                                                                    sQLitePreparedStatement17 = null;
                                                                    sQLitePreparedStatement11 = sQLitePreparedStatement16;
                                                                    sQLitePreparedStatement6 = sQLitePreparedStatement18;
                                                                    sQLitePreparedStatement7 = sQLitePreparedStatement17;
                                                                    sQLitePreparedStatement5 = executeFast;
                                                                    r13 = sQLitePreparedStatement17;
                                                                    sQLiteDatabase = this.database;
                                                                    if (sQLiteDatabase != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement3 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement11 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement5 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement6 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement10 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement8 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement9 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement7 != null) {
                                                                    }
                                                                    if (r13 != 0) {
                                                                    }
                                                                }
                                                            }
                                                            fixUnsupportedMedia(message);
                                                            MessageObject.normalizeFlags(message);
                                                            NativeByteBuffer nativeByteBuffer5 = new NativeByteBuffer(message.getObjectSize());
                                                            message.serializeToStream(nativeByteBuffer5);
                                                            i21 = 0;
                                                            while (i21 < 2) {
                                                                boolean z9 = i21 == 1;
                                                                try {
                                                                    if (z9) {
                                                                        if (j2 == 0) {
                                                                            i22 = i15;
                                                                            j11 = MessageObject.getTopicId(this.currentAccount, message, isForum(message.dialog_id));
                                                                        } else {
                                                                            i22 = i15;
                                                                            j11 = j2;
                                                                        }
                                                                        if (j11 == 0) {
                                                                            arrayList8 = arrayList10;
                                                                            arrayList7 = arrayList4;
                                                                            sQLitePreparedStatement33 = sQLitePreparedStatement11;
                                                                            i21++;
                                                                            j12 = j;
                                                                            sQLitePreparedStatement11 = sQLitePreparedStatement33;
                                                                            i15 = i22;
                                                                            arrayList4 = arrayList7;
                                                                            arrayList10 = arrayList8;
                                                                        } else {
                                                                            j10 = j8;
                                                                            if (j12 == j10 && MessageObject.getSavedDialogId(j10, message) != 0) {
                                                                                if (arrayList15 == null) {
                                                                                    arrayList15 = new ArrayList();
                                                                                }
                                                                                ArrayList arrayList16 = arrayList15;
                                                                                arrayList16.add(message);
                                                                                arrayList15 = arrayList16;
                                                                            }
                                                                            sQLitePreparedStatement32 = sQLitePreparedStatement3;
                                                                        }
                                                                    } else {
                                                                        i22 = i15;
                                                                        j10 = j8;
                                                                        j11 = j2;
                                                                        sQLitePreparedStatement32 = sQLitePreparedStatement5;
                                                                    }
                                                                    sQLitePreparedStatement32.requery();
                                                                    j8 = j10;
                                                                    sQLitePreparedStatement32.bindInteger(1, message.id);
                                                                    sQLitePreparedStatement32.bindLong(2, j12);
                                                                    if (z9) {
                                                                        sQLitePreparedStatement32.bindLong(3, j11);
                                                                        i23 = 4;
                                                                    } else {
                                                                        i23 = 3;
                                                                    }
                                                                    int i46 = i23 + 1;
                                                                    sQLitePreparedStatement32.bindInteger(i23, MessageObject.getUnreadFlags(message));
                                                                    sQLitePreparedStatement32.bindInteger(i46, message.send_state);
                                                                    sQLitePreparedStatement32.bindInteger(i23 + 2, message.date);
                                                                    int i47 = i23 + 4;
                                                                    sQLitePreparedStatement32.bindByteBuffer(i23 + 3, nativeByteBuffer5);
                                                                    int i48 = i23 + 5;
                                                                    sQLitePreparedStatement32.bindInteger(i47, (MessageObject.isOut(message) || message.from_scheduled) ? 1 : 0);
                                                                    int i49 = i23 + 6;
                                                                    sQLitePreparedStatement32.bindInteger(i48, message.ttl);
                                                                    if ((message.flags & 1024) != 0) {
                                                                        i24 = i23 + 7;
                                                                        messageMediaType = message.views;
                                                                    } else {
                                                                        i24 = i23 + 7;
                                                                        messageMediaType = getMessageMediaType(message);
                                                                    }
                                                                    sQLitePreparedStatement32.bindInteger(i49, messageMediaType);
                                                                    if (message.replyStory != null) {
                                                                        nativeByteBuffer = new NativeByteBuffer(message.replyStory.getObjectSize());
                                                                        message.replyStory.serializeToStream(nativeByteBuffer);
                                                                        int i50 = i24 + 1;
                                                                        sQLitePreparedStatement32.bindByteBuffer(i24, nativeByteBuffer);
                                                                        i25 = i50;
                                                                    } else {
                                                                        int i51 = i24 + 1;
                                                                        sQLitePreparedStatement32.bindNull(i24);
                                                                        i25 = i51;
                                                                        nativeByteBuffer = null;
                                                                    }
                                                                    int i52 = message.stickerVerified;
                                                                    sQLitePreparedStatement32.bindInteger(i25, i52 == 0 ? 1 : i52 == 2 ? 2 : 0);
                                                                    arrayList7 = arrayList4;
                                                                    sQLitePreparedStatement32.bindInteger(i25 + 1, message.mentioned ? 1 : 0);
                                                                    int i53 = i25 + 3;
                                                                    sQLitePreparedStatement32.bindInteger(i25 + 2, message.forwards);
                                                                    if (message.replies != null) {
                                                                        nativeByteBuffer2 = new NativeByteBuffer(message.replies.getObjectSize());
                                                                        message.replies.serializeToStream(nativeByteBuffer2);
                                                                        i26 = i25 + 4;
                                                                        sQLitePreparedStatement32.bindByteBuffer(i53, nativeByteBuffer2);
                                                                    } else {
                                                                        i26 = i25 + 4;
                                                                        sQLitePreparedStatement32.bindNull(i53);
                                                                        nativeByteBuffer2 = null;
                                                                    }
                                                                    TLRPC.MessageReplyHeader messageReplyHeader = message.reply_to;
                                                                    if (messageReplyHeader != null) {
                                                                        int i54 = i26 + 1;
                                                                        int i55 = messageReplyHeader.reply_to_top_id;
                                                                        if (i55 == 0) {
                                                                            i55 = messageReplyHeader.reply_to_msg_id;
                                                                        }
                                                                        sQLitePreparedStatement32.bindInteger(i26, i55);
                                                                        i27 = i54;
                                                                    } else {
                                                                        int i56 = i26 + 1;
                                                                        sQLitePreparedStatement32.bindInteger(i26, 0);
                                                                        i27 = i56;
                                                                    }
                                                                    int i57 = i27 + 1;
                                                                    arrayList8 = arrayList10;
                                                                    sQLitePreparedStatement32.bindLong(i27, MessageObject.getChannelId(message));
                                                                    NativeByteBuffer writeLocalParams = MessageCustomParamsHelper.writeLocalParams(message);
                                                                    int i58 = i27 + 2;
                                                                    if (writeLocalParams == null) {
                                                                        sQLitePreparedStatement32.bindNull(i57);
                                                                    } else {
                                                                        sQLitePreparedStatement32.bindByteBuffer(i57, writeLocalParams);
                                                                    }
                                                                    if (!z9) {
                                                                        if ((message.flags & 131072) != 0) {
                                                                            i28 = i58 + 1;
                                                                            sQLitePreparedStatement32.bindLong(i58, message.grouped_id);
                                                                        } else {
                                                                            i28 = i58 + 1;
                                                                            sQLitePreparedStatement32.bindNull(i58);
                                                                        }
                                                                        i58 = i28;
                                                                    }
                                                                    TLRPC.MessageReplyHeader messageReplyHeader2 = message.reply_to;
                                                                    if (messageReplyHeader2 != null) {
                                                                        sQLitePreparedStatement32.bindInteger(i58, messageReplyHeader2.story_id);
                                                                    } else {
                                                                        sQLitePreparedStatement32.bindInteger(i58, 0);
                                                                    }
                                                                    sQLitePreparedStatement32.step();
                                                                    if (i21 != 0 || sQLitePreparedStatement11 == null) {
                                                                        sQLitePreparedStatement33 = sQLitePreparedStatement11;
                                                                    } else {
                                                                        sQLitePreparedStatement33 = sQLitePreparedStatement11;
                                                                        try {
                                                                            bindMessageTags(sQLitePreparedStatement33, message);
                                                                        } catch (Exception e17) {
                                                                            e = e17;
                                                                            exc = e;
                                                                            sQLitePreparedStatement16 = sQLitePreparedStatement33;
                                                                            sQLitePreparedStatement3 = sQLitePreparedStatement3;
                                                                            executeFast = sQLitePreparedStatement5;
                                                                            sQLitePreparedStatement20 = sQLitePreparedStatement6;
                                                                            sQLitePreparedStatement19 = null;
                                                                            sQLitePreparedStatement11 = sQLitePreparedStatement16;
                                                                            sQLitePreparedStatement6 = sQLitePreparedStatement20;
                                                                            sQLitePreparedStatement7 = sQLitePreparedStatement19;
                                                                            sQLitePreparedStatement5 = executeFast;
                                                                            r132 = sQLitePreparedStatement19;
                                                                            checkSQLException(exc);
                                                                            sQLiteDatabase2 = this.database;
                                                                            if (sQLiteDatabase2 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement3 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement11 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement5 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement6 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement10 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement8 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement9 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement7 != null) {
                                                                            }
                                                                            if (r132 == 0) {
                                                                            }
                                                                        } catch (Throwable th18) {
                                                                            th = th18;
                                                                            th = th;
                                                                            sQLitePreparedStatement16 = sQLitePreparedStatement33;
                                                                            sQLitePreparedStatement3 = sQLitePreparedStatement3;
                                                                            executeFast = sQLitePreparedStatement5;
                                                                            sQLitePreparedStatement18 = sQLitePreparedStatement6;
                                                                            sQLitePreparedStatement17 = null;
                                                                            sQLitePreparedStatement11 = sQLitePreparedStatement16;
                                                                            sQLitePreparedStatement6 = sQLitePreparedStatement18;
                                                                            sQLitePreparedStatement7 = sQLitePreparedStatement17;
                                                                            sQLitePreparedStatement5 = executeFast;
                                                                            r13 = sQLitePreparedStatement17;
                                                                            sQLiteDatabase = this.database;
                                                                            if (sQLiteDatabase != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement3 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement11 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement5 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement6 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement10 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement8 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement9 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement7 != null) {
                                                                            }
                                                                            if (r13 != 0) {
                                                                            }
                                                                        }
                                                                    }
                                                                    if (nativeByteBuffer2 != null) {
                                                                        nativeByteBuffer2.reuse();
                                                                    }
                                                                    if (writeLocalParams != null) {
                                                                        writeLocalParams.reuse();
                                                                    }
                                                                    if (nativeByteBuffer != null) {
                                                                        nativeByteBuffer.reuse();
                                                                    }
                                                                    i21++;
                                                                    j12 = j;
                                                                    sQLitePreparedStatement11 = sQLitePreparedStatement33;
                                                                    i15 = i22;
                                                                    arrayList4 = arrayList7;
                                                                    arrayList10 = arrayList8;
                                                                } catch (Exception e18) {
                                                                    e = e18;
                                                                    sQLitePreparedStatement33 = sQLitePreparedStatement11;
                                                                } catch (Throwable th19) {
                                                                    th = th19;
                                                                    sQLitePreparedStatement33 = sQLitePreparedStatement11;
                                                                }
                                                            }
                                                            i17 = i15;
                                                            arrayList5 = arrayList10;
                                                            arrayList6 = arrayList4;
                                                            SQLitePreparedStatement sQLitePreparedStatement35 = sQLitePreparedStatement11;
                                                            i16 = i2;
                                                            if (j2 == 0) {
                                                                sQLitePreparedStatement16 = sQLitePreparedStatement35;
                                                                if (i16 != -2) {
                                                                    j9 = j;
                                                                    sQLitePreparedStatement29 = sQLitePreparedStatement6;
                                                                    long topicId = MessageObject.getTopicId(this.currentAccount, message, isForum(message.dialog_id));
                                                                    if (j2 == 0) {
                                                                        if (i16 == -2) {
                                                                            if (topicId != 0) {
                                                                            }
                                                                            sQLitePreparedStatement30 = sQLitePreparedStatement13;
                                                                            nativeByteBuffer5.reuse();
                                                                            if (message.ttl_period != 0) {
                                                                                try {
                                                                                    try {
                                                                                        if (message.id > 0) {
                                                                                            if (sQLitePreparedStatement9 == null) {
                                                                                                sQLitePreparedStatement9 = this.database.executeFast("REPLACE INTO enc_tasks_v4 VALUES(?, ?, ?, ?)");
                                                                                            }
                                                                                            SQLitePreparedStatement sQLitePreparedStatement36 = sQLitePreparedStatement9;
                                                                                            try {
                                                                                                sQLitePreparedStatement36.requery();
                                                                                                sQLitePreparedStatement36.bindInteger(1, message.id);
                                                                                                sQLitePreparedStatement36.bindLong(2, message.dialog_id);
                                                                                                sQLitePreparedStatement36.bindInteger(3, message.date + message.ttl_period);
                                                                                                sQLitePreparedStatement36.bindInteger(4, 0);
                                                                                                sQLitePreparedStatement36.step();
                                                                                                sQLitePreparedStatement9 = sQLitePreparedStatement36;
                                                                                                i18 = Math.min(i14, message.date + message.ttl_period);
                                                                                                messageMedia = message.media;
                                                                                                if (messageMedia instanceof TLRPC.TL_messageMediaPoll) {
                                                                                                    if (sQLitePreparedStatement10 == null) {
                                                                                                        sQLitePreparedStatement10 = this.database.executeFast("REPLACE INTO polls_v2 VALUES(?, ?, ?)");
                                                                                                    }
                                                                                                    sQLitePreparedStatement31 = sQLitePreparedStatement10;
                                                                                                    try {
                                                                                                        TLRPC.TL_messageMediaPoll tL_messageMediaPoll = (TLRPC.TL_messageMediaPoll) message.media;
                                                                                                        sQLitePreparedStatement31.requery();
                                                                                                        sQLitePreparedStatement31.bindInteger(1, message.id);
                                                                                                        sQLitePreparedStatement31.bindLong(2, message.dialog_id);
                                                                                                        sQLitePreparedStatement31.bindLong(3, tL_messageMediaPoll.poll.id);
                                                                                                        sQLitePreparedStatement10 = sQLitePreparedStatement31;
                                                                                                    } catch (Exception e19) {
                                                                                                        exc = e19;
                                                                                                        sQLitePreparedStatement10 = sQLitePreparedStatement31;
                                                                                                        sQLitePreparedStatement20 = sQLitePreparedStatement29;
                                                                                                        sQLitePreparedStatement3 = sQLitePreparedStatement3;
                                                                                                        executeFast = sQLitePreparedStatement5;
                                                                                                        sQLitePreparedStatement19 = null;
                                                                                                        sQLitePreparedStatement11 = sQLitePreparedStatement16;
                                                                                                        sQLitePreparedStatement6 = sQLitePreparedStatement20;
                                                                                                        sQLitePreparedStatement7 = sQLitePreparedStatement19;
                                                                                                        sQLitePreparedStatement5 = executeFast;
                                                                                                        r132 = sQLitePreparedStatement19;
                                                                                                        checkSQLException(exc);
                                                                                                        sQLiteDatabase2 = this.database;
                                                                                                        if (sQLiteDatabase2 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement3 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement11 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement5 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement6 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement10 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement8 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement9 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement7 != null) {
                                                                                                        }
                                                                                                        if (r132 == 0) {
                                                                                                        }
                                                                                                    } catch (Throwable th20) {
                                                                                                        th = th20;
                                                                                                        sQLitePreparedStatement10 = sQLitePreparedStatement31;
                                                                                                        sQLitePreparedStatement18 = sQLitePreparedStatement29;
                                                                                                        sQLitePreparedStatement3 = sQLitePreparedStatement3;
                                                                                                        executeFast = sQLitePreparedStatement5;
                                                                                                        sQLitePreparedStatement17 = null;
                                                                                                        sQLitePreparedStatement11 = sQLitePreparedStatement16;
                                                                                                        sQLitePreparedStatement6 = sQLitePreparedStatement18;
                                                                                                        sQLitePreparedStatement7 = sQLitePreparedStatement17;
                                                                                                        sQLitePreparedStatement5 = executeFast;
                                                                                                        r13 = sQLitePreparedStatement17;
                                                                                                        sQLiteDatabase = this.database;
                                                                                                        if (sQLiteDatabase != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement3 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement11 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement5 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement6 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement10 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement8 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement9 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement7 != null) {
                                                                                                        }
                                                                                                        if (r13 != 0) {
                                                                                                        }
                                                                                                    }
                                                                                                } else {
                                                                                                    if (messageMedia instanceof TLRPC.TL_messageMediaWebPage) {
                                                                                                        if (sQLitePreparedStatement8 == null) {
                                                                                                            sQLitePreparedStatement8 = this.database.executeFast("REPLACE INTO webpage_pending_v2 VALUES(?, ?, ?)");
                                                                                                        }
                                                                                                        sQLitePreparedStatement31 = sQLitePreparedStatement8;
                                                                                                        try {
                                                                                                            sQLitePreparedStatement31.requery();
                                                                                                            sQLitePreparedStatement31.bindLong(1, message.media.webpage.id);
                                                                                                            sQLitePreparedStatement31.bindInteger(2, message.id);
                                                                                                            sQLitePreparedStatement31.bindLong(3, message.dialog_id);
                                                                                                            sQLitePreparedStatement8 = sQLitePreparedStatement31;
                                                                                                        } catch (Exception e20) {
                                                                                                            exc = e20;
                                                                                                            sQLitePreparedStatement8 = sQLitePreparedStatement31;
                                                                                                            sQLitePreparedStatement20 = sQLitePreparedStatement29;
                                                                                                            sQLitePreparedStatement3 = sQLitePreparedStatement3;
                                                                                                            executeFast = sQLitePreparedStatement5;
                                                                                                            sQLitePreparedStatement19 = null;
                                                                                                            sQLitePreparedStatement11 = sQLitePreparedStatement16;
                                                                                                            sQLitePreparedStatement6 = sQLitePreparedStatement20;
                                                                                                            sQLitePreparedStatement7 = sQLitePreparedStatement19;
                                                                                                            sQLitePreparedStatement5 = executeFast;
                                                                                                            r132 = sQLitePreparedStatement19;
                                                                                                            checkSQLException(exc);
                                                                                                            sQLiteDatabase2 = this.database;
                                                                                                            if (sQLiteDatabase2 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement3 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement11 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement5 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement6 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement10 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement8 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement9 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement7 != null) {
                                                                                                            }
                                                                                                            if (r132 == 0) {
                                                                                                            }
                                                                                                        } catch (Throwable th21) {
                                                                                                            th = th21;
                                                                                                            sQLitePreparedStatement8 = sQLitePreparedStatement31;
                                                                                                            sQLitePreparedStatement18 = sQLitePreparedStatement29;
                                                                                                            sQLitePreparedStatement3 = sQLitePreparedStatement3;
                                                                                                            executeFast = sQLitePreparedStatement5;
                                                                                                            sQLitePreparedStatement17 = null;
                                                                                                            sQLitePreparedStatement11 = sQLitePreparedStatement16;
                                                                                                            sQLitePreparedStatement6 = sQLitePreparedStatement18;
                                                                                                            sQLitePreparedStatement7 = sQLitePreparedStatement17;
                                                                                                            sQLitePreparedStatement5 = executeFast;
                                                                                                            r13 = sQLitePreparedStatement17;
                                                                                                            sQLiteDatabase = this.database;
                                                                                                            if (sQLiteDatabase != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement3 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement11 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement5 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement6 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement10 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement8 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement9 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement7 != null) {
                                                                                                            }
                                                                                                            if (r13 != 0) {
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                    if (i16 == 0 || !isValidKeyboardToSave(message)) {
                                                                                                        hashMap3 = hashMap2;
                                                                                                    } else {
                                                                                                        TopicKey of = TopicKey.of(j9, MessageObject.getTopicId(this.currentAccount, message, isForum(j9)));
                                                                                                        if (hashMap2 == null) {
                                                                                                            hashMap3 = hashMap2;
                                                                                                            message5 = null;
                                                                                                        } else {
                                                                                                            hashMap3 = hashMap2;
                                                                                                            message5 = (TLRPC.Message) hashMap3.get(of);
                                                                                                        }
                                                                                                        if (message5 == null || message5.id < message.id) {
                                                                                                            HashMap hashMap6 = hashMap3 == null ? new HashMap() : hashMap3;
                                                                                                            hashMap6.put(of, message);
                                                                                                            hashMap4 = hashMap6;
                                                                                                            i34 = i16;
                                                                                                            i9 = i11 + 1;
                                                                                                            executeFast2 = sQLitePreparedStatement16;
                                                                                                            sQLitePreparedStatement13 = sQLitePreparedStatement30;
                                                                                                            j12 = j9;
                                                                                                            i43 = i17;
                                                                                                            arrayList11 = arrayList3;
                                                                                                            l2 = l;
                                                                                                            num = num2;
                                                                                                            j6 = j8;
                                                                                                            arrayList13 = arrayList6;
                                                                                                            arrayList10 = arrayList5;
                                                                                                            messages_messages2 = messages_messages;
                                                                                                            sQLitePreparedStatement12 = sQLitePreparedStatement29;
                                                                                                            i44 = i18;
                                                                                                            size = i12;
                                                                                                            executeFast = sQLitePreparedStatement5;
                                                                                                        }
                                                                                                    }
                                                                                                    hashMap4 = hashMap3;
                                                                                                    i34 = i16;
                                                                                                    i9 = i11 + 1;
                                                                                                    executeFast2 = sQLitePreparedStatement16;
                                                                                                    sQLitePreparedStatement13 = sQLitePreparedStatement30;
                                                                                                    j12 = j9;
                                                                                                    i43 = i17;
                                                                                                    arrayList11 = arrayList3;
                                                                                                    l2 = l;
                                                                                                    num = num2;
                                                                                                    j6 = j8;
                                                                                                    arrayList13 = arrayList6;
                                                                                                    arrayList10 = arrayList5;
                                                                                                    messages_messages2 = messages_messages;
                                                                                                    sQLitePreparedStatement12 = sQLitePreparedStatement29;
                                                                                                    i44 = i18;
                                                                                                    size = i12;
                                                                                                    executeFast = sQLitePreparedStatement5;
                                                                                                }
                                                                                                sQLitePreparedStatement31.step();
                                                                                                if (i16 == 0) {
                                                                                                }
                                                                                                hashMap3 = hashMap2;
                                                                                                hashMap4 = hashMap3;
                                                                                                i34 = i16;
                                                                                                i9 = i11 + 1;
                                                                                                executeFast2 = sQLitePreparedStatement16;
                                                                                                sQLitePreparedStatement13 = sQLitePreparedStatement30;
                                                                                                j12 = j9;
                                                                                                i43 = i17;
                                                                                                arrayList11 = arrayList3;
                                                                                                l2 = l;
                                                                                                num = num2;
                                                                                                j6 = j8;
                                                                                                arrayList13 = arrayList6;
                                                                                                arrayList10 = arrayList5;
                                                                                                messages_messages2 = messages_messages;
                                                                                                sQLitePreparedStatement12 = sQLitePreparedStatement29;
                                                                                                i44 = i18;
                                                                                                size = i12;
                                                                                                executeFast = sQLitePreparedStatement5;
                                                                                            } catch (Exception e21) {
                                                                                                exc = e21;
                                                                                                sQLitePreparedStatement9 = sQLitePreparedStatement36;
                                                                                                sQLitePreparedStatement20 = sQLitePreparedStatement29;
                                                                                                sQLitePreparedStatement3 = sQLitePreparedStatement3;
                                                                                                executeFast = sQLitePreparedStatement5;
                                                                                                sQLitePreparedStatement19 = null;
                                                                                                sQLitePreparedStatement11 = sQLitePreparedStatement16;
                                                                                                sQLitePreparedStatement6 = sQLitePreparedStatement20;
                                                                                                sQLitePreparedStatement7 = sQLitePreparedStatement19;
                                                                                                sQLitePreparedStatement5 = executeFast;
                                                                                                r132 = sQLitePreparedStatement19;
                                                                                                checkSQLException(exc);
                                                                                                sQLiteDatabase2 = this.database;
                                                                                                if (sQLiteDatabase2 != null) {
                                                                                                }
                                                                                                if (sQLitePreparedStatement3 != null) {
                                                                                                }
                                                                                                if (sQLitePreparedStatement11 != null) {
                                                                                                }
                                                                                                if (sQLitePreparedStatement5 != null) {
                                                                                                }
                                                                                                if (sQLitePreparedStatement6 != null) {
                                                                                                }
                                                                                                if (sQLitePreparedStatement10 != null) {
                                                                                                }
                                                                                                if (sQLitePreparedStatement8 != null) {
                                                                                                }
                                                                                                if (sQLitePreparedStatement9 != null) {
                                                                                                }
                                                                                                if (sQLitePreparedStatement7 != null) {
                                                                                                }
                                                                                                if (r132 == 0) {
                                                                                                }
                                                                                            } catch (Throwable th22) {
                                                                                                th = th22;
                                                                                                sQLitePreparedStatement9 = sQLitePreparedStatement36;
                                                                                                sQLitePreparedStatement18 = sQLitePreparedStatement29;
                                                                                                sQLitePreparedStatement3 = sQLitePreparedStatement3;
                                                                                                executeFast = sQLitePreparedStatement5;
                                                                                                sQLitePreparedStatement17 = null;
                                                                                                sQLitePreparedStatement11 = sQLitePreparedStatement16;
                                                                                                sQLitePreparedStatement6 = sQLitePreparedStatement18;
                                                                                                sQLitePreparedStatement7 = sQLitePreparedStatement17;
                                                                                                sQLitePreparedStatement5 = executeFast;
                                                                                                r13 = sQLitePreparedStatement17;
                                                                                                sQLiteDatabase = this.database;
                                                                                                if (sQLiteDatabase != null) {
                                                                                                }
                                                                                                if (sQLitePreparedStatement3 != null) {
                                                                                                }
                                                                                                if (sQLitePreparedStatement11 != null) {
                                                                                                }
                                                                                                if (sQLitePreparedStatement5 != null) {
                                                                                                }
                                                                                                if (sQLitePreparedStatement6 != null) {
                                                                                                }
                                                                                                if (sQLitePreparedStatement10 != null) {
                                                                                                }
                                                                                                if (sQLitePreparedStatement8 != null) {
                                                                                                }
                                                                                                if (sQLitePreparedStatement9 != null) {
                                                                                                }
                                                                                                if (sQLitePreparedStatement7 != null) {
                                                                                                }
                                                                                                if (r13 != 0) {
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    } catch (Exception e22) {
                                                                                        e = e22;
                                                                                        exc = e;
                                                                                        sQLitePreparedStatement20 = sQLitePreparedStatement29;
                                                                                        sQLitePreparedStatement3 = sQLitePreparedStatement3;
                                                                                        executeFast = sQLitePreparedStatement5;
                                                                                        sQLitePreparedStatement19 = null;
                                                                                        sQLitePreparedStatement11 = sQLitePreparedStatement16;
                                                                                        sQLitePreparedStatement6 = sQLitePreparedStatement20;
                                                                                        sQLitePreparedStatement7 = sQLitePreparedStatement19;
                                                                                        sQLitePreparedStatement5 = executeFast;
                                                                                        r132 = sQLitePreparedStatement19;
                                                                                        checkSQLException(exc);
                                                                                        sQLiteDatabase2 = this.database;
                                                                                        if (sQLiteDatabase2 != null) {
                                                                                            sQLiteDatabase2.commitTransaction();
                                                                                        }
                                                                                        if (sQLitePreparedStatement3 != null) {
                                                                                            sQLitePreparedStatement3.dispose();
                                                                                        }
                                                                                        if (sQLitePreparedStatement11 != null) {
                                                                                            sQLitePreparedStatement11.dispose();
                                                                                        }
                                                                                        if (sQLitePreparedStatement5 != null) {
                                                                                            sQLitePreparedStatement5.dispose();
                                                                                        }
                                                                                        if (sQLitePreparedStatement6 != null) {
                                                                                            sQLitePreparedStatement6.dispose();
                                                                                        }
                                                                                        if (sQLitePreparedStatement10 != null) {
                                                                                            sQLitePreparedStatement10.dispose();
                                                                                        }
                                                                                        if (sQLitePreparedStatement8 != null) {
                                                                                            sQLitePreparedStatement8.dispose();
                                                                                        }
                                                                                        if (sQLitePreparedStatement9 != null) {
                                                                                            sQLitePreparedStatement9.dispose();
                                                                                        }
                                                                                        if (sQLitePreparedStatement7 != null) {
                                                                                            sQLitePreparedStatement7.dispose();
                                                                                        }
                                                                                        if (r132 == 0) {
                                                                                            r132.dispose();
                                                                                            return;
                                                                                        }
                                                                                        return;
                                                                                    }
                                                                                } catch (Throwable th23) {
                                                                                    th = th23;
                                                                                    th = th;
                                                                                    sQLitePreparedStatement18 = sQLitePreparedStatement29;
                                                                                    sQLitePreparedStatement3 = sQLitePreparedStatement3;
                                                                                    executeFast = sQLitePreparedStatement5;
                                                                                    sQLitePreparedStatement17 = null;
                                                                                    sQLitePreparedStatement11 = sQLitePreparedStatement16;
                                                                                    sQLitePreparedStatement6 = sQLitePreparedStatement18;
                                                                                    sQLitePreparedStatement7 = sQLitePreparedStatement17;
                                                                                    sQLitePreparedStatement5 = executeFast;
                                                                                    r13 = sQLitePreparedStatement17;
                                                                                    sQLiteDatabase = this.database;
                                                                                    if (sQLiteDatabase != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement3 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement11 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement5 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement6 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement10 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement8 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement9 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement7 != null) {
                                                                                    }
                                                                                    if (r13 != 0) {
                                                                                    }
                                                                                }
                                                                            }
                                                                            i18 = i14;
                                                                            messageMedia = message.media;
                                                                            if (messageMedia instanceof TLRPC.TL_messageMediaPoll) {
                                                                            }
                                                                            sQLitePreparedStatement31.step();
                                                                            if (i16 == 0) {
                                                                            }
                                                                            hashMap3 = hashMap2;
                                                                            hashMap4 = hashMap3;
                                                                            i34 = i16;
                                                                            i9 = i11 + 1;
                                                                            executeFast2 = sQLitePreparedStatement16;
                                                                            sQLitePreparedStatement13 = sQLitePreparedStatement30;
                                                                            j12 = j9;
                                                                            i43 = i17;
                                                                            arrayList11 = arrayList3;
                                                                            l2 = l;
                                                                            num = num2;
                                                                            j6 = j8;
                                                                            arrayList13 = arrayList6;
                                                                            arrayList10 = arrayList5;
                                                                            messages_messages2 = messages_messages;
                                                                            sQLitePreparedStatement12 = sQLitePreparedStatement29;
                                                                            i44 = i18;
                                                                            size = i12;
                                                                            executeFast = sQLitePreparedStatement5;
                                                                        } else {
                                                                            sQLitePreparedStatement30 = sQLitePreparedStatement13;
                                                                            nativeByteBuffer5.reuse();
                                                                            if (message.ttl_period != 0) {
                                                                            }
                                                                            i18 = i14;
                                                                            messageMedia = message.media;
                                                                            if (messageMedia instanceof TLRPC.TL_messageMediaPoll) {
                                                                            }
                                                                            sQLitePreparedStatement31.step();
                                                                            if (i16 == 0) {
                                                                            }
                                                                            hashMap3 = hashMap2;
                                                                            hashMap4 = hashMap3;
                                                                            i34 = i16;
                                                                            i9 = i11 + 1;
                                                                            executeFast2 = sQLitePreparedStatement16;
                                                                            sQLitePreparedStatement13 = sQLitePreparedStatement30;
                                                                            j12 = j9;
                                                                            i43 = i17;
                                                                            arrayList11 = arrayList3;
                                                                            l2 = l;
                                                                            num = num2;
                                                                            j6 = j8;
                                                                            arrayList13 = arrayList6;
                                                                            arrayList10 = arrayList5;
                                                                            messages_messages2 = messages_messages;
                                                                            sQLitePreparedStatement12 = sQLitePreparedStatement29;
                                                                            i44 = i18;
                                                                            size = i12;
                                                                            executeFast = sQLitePreparedStatement5;
                                                                        }
                                                                    }
                                                                    if (MediaDataController.canAddMessageToMedia(message)) {
                                                                        sQLitePreparedStatement13.requery();
                                                                        sQLitePreparedStatement30 = sQLitePreparedStatement13;
                                                                        sQLitePreparedStatement30.bindInteger(1, message.id);
                                                                        sQLitePreparedStatement30.bindLong(2, j9);
                                                                        if (j2 != 0) {
                                                                            topicId = j2;
                                                                        }
                                                                        sQLitePreparedStatement30.bindLong(3, topicId);
                                                                        sQLitePreparedStatement30.bindInteger(4, message.date);
                                                                        sQLitePreparedStatement30.bindInteger(5, MediaDataController.getMediaType(message));
                                                                        sQLitePreparedStatement30.bindByteBuffer(6, nativeByteBuffer5);
                                                                        sQLitePreparedStatement30.step();
                                                                        nativeByteBuffer5.reuse();
                                                                        if (message.ttl_period != 0) {
                                                                        }
                                                                        i18 = i14;
                                                                        messageMedia = message.media;
                                                                        if (messageMedia instanceof TLRPC.TL_messageMediaPoll) {
                                                                        }
                                                                        sQLitePreparedStatement31.step();
                                                                        if (i16 == 0) {
                                                                        }
                                                                        hashMap3 = hashMap2;
                                                                        hashMap4 = hashMap3;
                                                                        i34 = i16;
                                                                        i9 = i11 + 1;
                                                                        executeFast2 = sQLitePreparedStatement16;
                                                                        sQLitePreparedStatement13 = sQLitePreparedStatement30;
                                                                        j12 = j9;
                                                                        i43 = i17;
                                                                        arrayList11 = arrayList3;
                                                                        l2 = l;
                                                                        num = num2;
                                                                        j6 = j8;
                                                                        arrayList13 = arrayList6;
                                                                        arrayList10 = arrayList5;
                                                                        messages_messages2 = messages_messages;
                                                                        sQLitePreparedStatement12 = sQLitePreparedStatement29;
                                                                        i44 = i18;
                                                                        size = i12;
                                                                        executeFast = sQLitePreparedStatement5;
                                                                    }
                                                                    sQLitePreparedStatement30 = sQLitePreparedStatement13;
                                                                    nativeByteBuffer5.reuse();
                                                                    if (message.ttl_period != 0) {
                                                                    }
                                                                    i18 = i14;
                                                                    messageMedia = message.media;
                                                                    if (messageMedia instanceof TLRPC.TL_messageMediaPoll) {
                                                                    }
                                                                    sQLitePreparedStatement31.step();
                                                                    if (i16 == 0) {
                                                                    }
                                                                    hashMap3 = hashMap2;
                                                                    hashMap4 = hashMap3;
                                                                    i34 = i16;
                                                                    i9 = i11 + 1;
                                                                    executeFast2 = sQLitePreparedStatement16;
                                                                    sQLitePreparedStatement13 = sQLitePreparedStatement30;
                                                                    j12 = j9;
                                                                    i43 = i17;
                                                                    arrayList11 = arrayList3;
                                                                    l2 = l;
                                                                    num = num2;
                                                                    j6 = j8;
                                                                    arrayList13 = arrayList6;
                                                                    arrayList10 = arrayList5;
                                                                    messages_messages2 = messages_messages;
                                                                    sQLitePreparedStatement12 = sQLitePreparedStatement29;
                                                                    i44 = i18;
                                                                    size = i12;
                                                                    executeFast = sQLitePreparedStatement5;
                                                                }
                                                            } else {
                                                                sQLitePreparedStatement16 = sQLitePreparedStatement35;
                                                            }
                                                            if (MediaDataController.canAddMessageToMedia(message)) {
                                                                j9 = j;
                                                                sQLitePreparedStatement29 = sQLitePreparedStatement6;
                                                                if ((message instanceof TLRPC.TL_messageService) && (message.action instanceof TLRPC.TL_messageActionHistoryClear)) {
                                                                    try {
                                                                        try {
                                                                            this.database.executeFast(String.format(Locale.US, "DELETE FROM media_v4 WHERE mid = %d AND uid = %d", Integer.valueOf(message.id), Long.valueOf(j))).stepThis().dispose();
                                                                            this.database.executeFast("DELETE FROM media_counts_v2 WHERE uid = " + j9).stepThis().dispose();
                                                                        } catch (Throwable th24) {
                                                                            th = th24;
                                                                            sQLitePreparedStatement11 = sQLitePreparedStatement16;
                                                                            sQLitePreparedStatement6 = sQLitePreparedStatement29;
                                                                            sQLitePreparedStatement3 = sQLitePreparedStatement3;
                                                                            sQLiteCursor4 = null;
                                                                            sQLitePreparedStatement7 = null;
                                                                            r13 = sQLiteCursor4;
                                                                            sQLiteDatabase = this.database;
                                                                            if (sQLiteDatabase != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement3 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement11 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement5 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement6 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement10 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement8 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement9 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement7 != null) {
                                                                            }
                                                                            if (r13 != 0) {
                                                                            }
                                                                        }
                                                                    } catch (Exception e23) {
                                                                        checkSQLException(e23);
                                                                    }
                                                                }
                                                            } else {
                                                                sQLitePreparedStatement6.requery();
                                                                sQLitePreparedStatement29 = sQLitePreparedStatement6;
                                                                sQLitePreparedStatement29.bindInteger(1, message.id);
                                                                j9 = j;
                                                                sQLitePreparedStatement29.bindLong(2, j9);
                                                                sQLitePreparedStatement29.bindInteger(3, message.date);
                                                                sQLitePreparedStatement29.bindInteger(4, MediaDataController.getMediaType(message));
                                                                sQLitePreparedStatement29.bindByteBuffer(5, nativeByteBuffer5);
                                                                sQLitePreparedStatement29.step();
                                                            }
                                                            long topicId2 = MessageObject.getTopicId(this.currentAccount, message, isForum(message.dialog_id));
                                                            if (j2 == 0) {
                                                            }
                                                            if (MediaDataController.canAddMessageToMedia(message)) {
                                                            }
                                                            sQLitePreparedStatement30 = sQLitePreparedStatement13;
                                                            nativeByteBuffer5.reuse();
                                                            if (message.ttl_period != 0) {
                                                            }
                                                            i18 = i14;
                                                            messageMedia = message.media;
                                                            if (messageMedia instanceof TLRPC.TL_messageMediaPoll) {
                                                            }
                                                            sQLitePreparedStatement31.step();
                                                            if (i16 == 0) {
                                                            }
                                                            hashMap3 = hashMap2;
                                                            hashMap4 = hashMap3;
                                                            i34 = i16;
                                                            i9 = i11 + 1;
                                                            executeFast2 = sQLitePreparedStatement16;
                                                            sQLitePreparedStatement13 = sQLitePreparedStatement30;
                                                            j12 = j9;
                                                            i43 = i17;
                                                            arrayList11 = arrayList3;
                                                            l2 = l;
                                                            num = num2;
                                                            j6 = j8;
                                                            arrayList13 = arrayList6;
                                                            arrayList10 = arrayList5;
                                                            messages_messages2 = messages_messages;
                                                            sQLitePreparedStatement12 = sQLitePreparedStatement29;
                                                            i44 = i18;
                                                            size = i12;
                                                            executeFast = sQLitePreparedStatement5;
                                                        } else {
                                                            i11 = i9;
                                                            sQLitePreparedStatement11 = executeFast2;
                                                        }
                                                        if (MediaDataController.canAddMessageToMedia(message)) {
                                                        }
                                                        long topicId22 = MessageObject.getTopicId(this.currentAccount, message, isForum(message.dialog_id));
                                                        if (j2 == 0) {
                                                        }
                                                        if (MediaDataController.canAddMessageToMedia(message)) {
                                                        }
                                                        sQLitePreparedStatement30 = sQLitePreparedStatement13;
                                                        nativeByteBuffer5.reuse();
                                                        if (message.ttl_period != 0) {
                                                        }
                                                        i18 = i14;
                                                        messageMedia = message.media;
                                                        if (messageMedia instanceof TLRPC.TL_messageMediaPoll) {
                                                        }
                                                        sQLitePreparedStatement31.step();
                                                        if (i16 == 0) {
                                                        }
                                                        hashMap3 = hashMap2;
                                                        hashMap4 = hashMap3;
                                                        i34 = i16;
                                                        i9 = i11 + 1;
                                                        executeFast2 = sQLitePreparedStatement16;
                                                        sQLitePreparedStatement13 = sQLitePreparedStatement30;
                                                        j12 = j9;
                                                        i43 = i17;
                                                        arrayList11 = arrayList3;
                                                        l2 = l;
                                                        num = num2;
                                                        j6 = j8;
                                                        arrayList13 = arrayList6;
                                                        arrayList10 = arrayList5;
                                                        messages_messages2 = messages_messages;
                                                        sQLitePreparedStatement12 = sQLitePreparedStatement29;
                                                        i44 = i18;
                                                        size = i12;
                                                        executeFast = sQLitePreparedStatement5;
                                                    } catch (Exception e24) {
                                                        e = e24;
                                                        sQLitePreparedStatement29 = sQLitePreparedStatement6;
                                                        exc = e;
                                                        sQLitePreparedStatement20 = sQLitePreparedStatement29;
                                                        sQLitePreparedStatement3 = sQLitePreparedStatement3;
                                                        executeFast = sQLitePreparedStatement5;
                                                        sQLitePreparedStatement19 = null;
                                                        sQLitePreparedStatement11 = sQLitePreparedStatement16;
                                                        sQLitePreparedStatement6 = sQLitePreparedStatement20;
                                                        sQLitePreparedStatement7 = sQLitePreparedStatement19;
                                                        sQLitePreparedStatement5 = executeFast;
                                                        r132 = sQLitePreparedStatement19;
                                                        checkSQLException(exc);
                                                        sQLiteDatabase2 = this.database;
                                                        if (sQLiteDatabase2 != null) {
                                                        }
                                                        if (sQLitePreparedStatement3 != null) {
                                                        }
                                                        if (sQLitePreparedStatement11 != null) {
                                                        }
                                                        if (sQLitePreparedStatement5 != null) {
                                                        }
                                                        if (sQLitePreparedStatement6 != null) {
                                                        }
                                                        if (sQLitePreparedStatement10 != null) {
                                                        }
                                                        if (sQLitePreparedStatement8 != null) {
                                                        }
                                                        if (sQLitePreparedStatement9 != null) {
                                                        }
                                                        if (sQLitePreparedStatement7 != null) {
                                                        }
                                                        if (r132 == 0) {
                                                        }
                                                    } catch (Throwable th25) {
                                                        th = th25;
                                                        sQLitePreparedStatement29 = sQLitePreparedStatement6;
                                                        th = th;
                                                        sQLitePreparedStatement18 = sQLitePreparedStatement29;
                                                        sQLitePreparedStatement3 = sQLitePreparedStatement3;
                                                        executeFast = sQLitePreparedStatement5;
                                                        sQLitePreparedStatement17 = null;
                                                        sQLitePreparedStatement11 = sQLitePreparedStatement16;
                                                        sQLitePreparedStatement6 = sQLitePreparedStatement18;
                                                        sQLitePreparedStatement7 = sQLitePreparedStatement17;
                                                        sQLitePreparedStatement5 = executeFast;
                                                        r13 = sQLitePreparedStatement17;
                                                        sQLiteDatabase = this.database;
                                                        if (sQLiteDatabase != null) {
                                                        }
                                                        if (sQLitePreparedStatement3 != null) {
                                                        }
                                                        if (sQLitePreparedStatement11 != null) {
                                                        }
                                                        if (sQLitePreparedStatement5 != null) {
                                                        }
                                                        if (sQLitePreparedStatement6 != null) {
                                                        }
                                                        if (sQLitePreparedStatement10 != null) {
                                                        }
                                                        if (sQLitePreparedStatement8 != null) {
                                                        }
                                                        if (sQLitePreparedStatement9 != null) {
                                                        }
                                                        if (sQLitePreparedStatement7 != null) {
                                                        }
                                                        if (r13 != 0) {
                                                        }
                                                    }
                                                    Integer valueOf3 = Integer.valueOf(message8.id);
                                                    if ((message8.flags & 131072) != 0) {
                                                        arrayList2 = arrayList11;
                                                        num2 = valueOf3;
                                                        l = Long.valueOf(message8.grouped_id);
                                                        j7 = 0;
                                                    } else {
                                                        arrayList2 = arrayList11;
                                                        num2 = valueOf3;
                                                        j7 = 0;
                                                        l = null;
                                                    }
                                                    if (j13 == j7) {
                                                    }
                                                    if (i34 != -2) {
                                                    }
                                                    if (i11 != 0) {
                                                    }
                                                    fixUnsupportedMedia(message);
                                                    MessageObject.normalizeFlags(message);
                                                    NativeByteBuffer nativeByteBuffer52 = new NativeByteBuffer(message.getObjectSize());
                                                    message.serializeToStream(nativeByteBuffer52);
                                                    i21 = 0;
                                                    while (i21 < 2) {
                                                    }
                                                    i17 = i15;
                                                    arrayList5 = arrayList10;
                                                    arrayList6 = arrayList4;
                                                    SQLitePreparedStatement sQLitePreparedStatement352 = sQLitePreparedStatement11;
                                                    i16 = i2;
                                                    if (j2 == 0) {
                                                    }
                                                } catch (Exception e25) {
                                                    sQLitePreparedStatement16 = executeFast2;
                                                    exc = e25;
                                                    sQLitePreparedStatement20 = sQLitePreparedStatement12;
                                                    sQLitePreparedStatement3 = sQLitePreparedStatement3;
                                                } catch (Throwable th26) {
                                                    sQLitePreparedStatement16 = executeFast2;
                                                    th = th26;
                                                    sQLitePreparedStatement18 = sQLitePreparedStatement12;
                                                    sQLitePreparedStatement3 = sQLitePreparedStatement3;
                                                }
                                            }
                                            ArrayList arrayList17 = arrayList13;
                                            ArrayList<File> arrayList18 = arrayList10;
                                            long j19 = j12;
                                            sQLitePreparedStatement14 = executeFast;
                                            sQLitePreparedStatement15 = sQLitePreparedStatement12;
                                            int i59 = i44;
                                            final ArrayList arrayList19 = arrayList11;
                                            i10 = i43;
                                            sQLitePreparedStatement16 = executeFast2;
                                            hashMap = hashMap4;
                                            sQLitePreparedStatement14.dispose();
                                            sQLitePreparedStatement3.dispose();
                                            if (sQLitePreparedStatement16 == null) {
                                                try {
                                                    sQLitePreparedStatement16.dispose();
                                                    sQLitePreparedStatement21 = null;
                                                } catch (Exception e26) {
                                                    exc = e26;
                                                    sQLitePreparedStatement20 = sQLitePreparedStatement15;
                                                    sQLitePreparedStatement19 = null;
                                                    sQLitePreparedStatement3 = null;
                                                    executeFast = null;
                                                    sQLitePreparedStatement11 = sQLitePreparedStatement16;
                                                    sQLitePreparedStatement6 = sQLitePreparedStatement20;
                                                    sQLitePreparedStatement7 = sQLitePreparedStatement19;
                                                    sQLitePreparedStatement5 = executeFast;
                                                    r132 = sQLitePreparedStatement19;
                                                    checkSQLException(exc);
                                                    sQLiteDatabase2 = this.database;
                                                    if (sQLiteDatabase2 != null) {
                                                    }
                                                    if (sQLitePreparedStatement3 != null) {
                                                    }
                                                    if (sQLitePreparedStatement11 != null) {
                                                    }
                                                    if (sQLitePreparedStatement5 != null) {
                                                    }
                                                    if (sQLitePreparedStatement6 != null) {
                                                    }
                                                    if (sQLitePreparedStatement10 != null) {
                                                    }
                                                    if (sQLitePreparedStatement8 != null) {
                                                    }
                                                    if (sQLitePreparedStatement9 != null) {
                                                    }
                                                    if (sQLitePreparedStatement7 != null) {
                                                    }
                                                    if (r132 == 0) {
                                                    }
                                                } catch (Throwable th27) {
                                                    th = th27;
                                                    sQLitePreparedStatement18 = sQLitePreparedStatement15;
                                                    sQLitePreparedStatement17 = null;
                                                    sQLitePreparedStatement3 = null;
                                                    executeFast = null;
                                                    sQLitePreparedStatement11 = sQLitePreparedStatement16;
                                                    sQLitePreparedStatement6 = sQLitePreparedStatement18;
                                                    sQLitePreparedStatement7 = sQLitePreparedStatement17;
                                                    sQLitePreparedStatement5 = executeFast;
                                                    r13 = sQLitePreparedStatement17;
                                                    sQLiteDatabase = this.database;
                                                    if (sQLiteDatabase != null) {
                                                    }
                                                    if (sQLitePreparedStatement3 != null) {
                                                    }
                                                    if (sQLitePreparedStatement11 != null) {
                                                    }
                                                    if (sQLitePreparedStatement5 != null) {
                                                    }
                                                    if (sQLitePreparedStatement6 != null) {
                                                    }
                                                    if (sQLitePreparedStatement10 != null) {
                                                    }
                                                    if (sQLitePreparedStatement8 != null) {
                                                    }
                                                    if (sQLitePreparedStatement9 != null) {
                                                    }
                                                    if (sQLitePreparedStatement7 != null) {
                                                    }
                                                    if (r13 != 0) {
                                                    }
                                                }
                                            } else {
                                                sQLitePreparedStatement21 = sQLitePreparedStatement16;
                                            }
                                            sQLitePreparedStatement15.dispose();
                                            if (sQLitePreparedStatement8 != null) {
                                                try {
                                                    sQLitePreparedStatement8.dispose();
                                                    sQLitePreparedStatement8 = null;
                                                } catch (Exception e27) {
                                                    exc = e27;
                                                    sQLitePreparedStatement16 = sQLitePreparedStatement21;
                                                    sQLitePreparedStatement20 = null;
                                                    sQLitePreparedStatement19 = null;
                                                    sQLitePreparedStatement3 = null;
                                                    executeFast = null;
                                                    sQLitePreparedStatement11 = sQLitePreparedStatement16;
                                                    sQLitePreparedStatement6 = sQLitePreparedStatement20;
                                                    sQLitePreparedStatement7 = sQLitePreparedStatement19;
                                                    sQLitePreparedStatement5 = executeFast;
                                                    r132 = sQLitePreparedStatement19;
                                                    checkSQLException(exc);
                                                    sQLiteDatabase2 = this.database;
                                                    if (sQLiteDatabase2 != null) {
                                                    }
                                                    if (sQLitePreparedStatement3 != null) {
                                                    }
                                                    if (sQLitePreparedStatement11 != null) {
                                                    }
                                                    if (sQLitePreparedStatement5 != null) {
                                                    }
                                                    if (sQLitePreparedStatement6 != null) {
                                                    }
                                                    if (sQLitePreparedStatement10 != null) {
                                                    }
                                                    if (sQLitePreparedStatement8 != null) {
                                                    }
                                                    if (sQLitePreparedStatement9 != null) {
                                                    }
                                                    if (sQLitePreparedStatement7 != null) {
                                                    }
                                                    if (r132 == 0) {
                                                    }
                                                } catch (Throwable th28) {
                                                    th = th28;
                                                    sQLitePreparedStatement16 = sQLitePreparedStatement21;
                                                    sQLitePreparedStatement18 = null;
                                                    sQLitePreparedStatement17 = null;
                                                    sQLitePreparedStatement3 = null;
                                                    executeFast = null;
                                                    sQLitePreparedStatement11 = sQLitePreparedStatement16;
                                                    sQLitePreparedStatement6 = sQLitePreparedStatement18;
                                                    sQLitePreparedStatement7 = sQLitePreparedStatement17;
                                                    sQLitePreparedStatement5 = executeFast;
                                                    r13 = sQLitePreparedStatement17;
                                                    sQLiteDatabase = this.database;
                                                    if (sQLiteDatabase != null) {
                                                    }
                                                    if (sQLitePreparedStatement3 != null) {
                                                    }
                                                    if (sQLitePreparedStatement11 != null) {
                                                    }
                                                    if (sQLitePreparedStatement5 != null) {
                                                    }
                                                    if (sQLitePreparedStatement6 != null) {
                                                    }
                                                    if (sQLitePreparedStatement10 != null) {
                                                    }
                                                    if (sQLitePreparedStatement8 != null) {
                                                    }
                                                    if (sQLitePreparedStatement9 != null) {
                                                    }
                                                    if (sQLitePreparedStatement7 != null) {
                                                    }
                                                    if (r13 != 0) {
                                                    }
                                                }
                                            }
                                            if (sQLitePreparedStatement9 != null) {
                                                try {
                                                    sQLitePreparedStatement9.dispose();
                                                    getMessagesController().didAddedNewTask(i59, 0L, null);
                                                    sQLitePreparedStatement9 = null;
                                                } catch (Exception e28) {
                                                    e = e28;
                                                    exc = e;
                                                    sQLitePreparedStatement11 = sQLitePreparedStatement21;
                                                    z4 = false;
                                                    sQLitePreparedStatement3 = null;
                                                    sQLitePreparedStatement7 = null;
                                                    sQLitePreparedStatement5 = null;
                                                    sQLitePreparedStatement6 = null;
                                                    r132 = z4;
                                                    checkSQLException(exc);
                                                    sQLiteDatabase2 = this.database;
                                                    if (sQLiteDatabase2 != null) {
                                                    }
                                                    if (sQLitePreparedStatement3 != null) {
                                                    }
                                                    if (sQLitePreparedStatement11 != null) {
                                                    }
                                                    if (sQLitePreparedStatement5 != null) {
                                                    }
                                                    if (sQLitePreparedStatement6 != null) {
                                                    }
                                                    if (sQLitePreparedStatement10 != null) {
                                                    }
                                                    if (sQLitePreparedStatement8 != null) {
                                                    }
                                                    if (sQLitePreparedStatement9 != null) {
                                                    }
                                                    if (sQLitePreparedStatement7 != null) {
                                                    }
                                                    if (r132 == 0) {
                                                    }
                                                } catch (Throwable th29) {
                                                    th = th29;
                                                    th = th;
                                                    sQLitePreparedStatement11 = sQLitePreparedStatement21;
                                                    z3 = false;
                                                    sQLitePreparedStatement3 = null;
                                                    sQLitePreparedStatement7 = null;
                                                    sQLitePreparedStatement5 = null;
                                                    sQLitePreparedStatement6 = null;
                                                    r13 = z3;
                                                    sQLiteDatabase = this.database;
                                                    if (sQLiteDatabase != null) {
                                                    }
                                                    if (sQLitePreparedStatement3 != null) {
                                                    }
                                                    if (sQLitePreparedStatement11 != null) {
                                                    }
                                                    if (sQLitePreparedStatement5 != null) {
                                                    }
                                                    if (sQLitePreparedStatement6 != null) {
                                                    }
                                                    if (sQLitePreparedStatement10 != null) {
                                                    }
                                                    if (sQLitePreparedStatement8 != null) {
                                                    }
                                                    if (sQLitePreparedStatement9 != null) {
                                                    }
                                                    if (sQLitePreparedStatement7 != null) {
                                                    }
                                                    if (r13 != 0) {
                                                    }
                                                }
                                            }
                                            if (sQLitePreparedStatement10 != null) {
                                                try {
                                                    sQLitePreparedStatement10.dispose();
                                                    sQLitePreparedStatement10 = null;
                                                } catch (Exception e29) {
                                                    e = e29;
                                                    exc = e;
                                                    sQLitePreparedStatement11 = sQLitePreparedStatement21;
                                                    z4 = false;
                                                    sQLitePreparedStatement3 = null;
                                                    sQLitePreparedStatement7 = null;
                                                    sQLitePreparedStatement5 = null;
                                                    sQLitePreparedStatement6 = null;
                                                    r132 = z4;
                                                    checkSQLException(exc);
                                                    sQLiteDatabase2 = this.database;
                                                    if (sQLiteDatabase2 != null) {
                                                    }
                                                    if (sQLitePreparedStatement3 != null) {
                                                    }
                                                    if (sQLitePreparedStatement11 != null) {
                                                    }
                                                    if (sQLitePreparedStatement5 != null) {
                                                    }
                                                    if (sQLitePreparedStatement6 != null) {
                                                    }
                                                    if (sQLitePreparedStatement10 != null) {
                                                    }
                                                    if (sQLitePreparedStatement8 != null) {
                                                    }
                                                    if (sQLitePreparedStatement9 != null) {
                                                    }
                                                    if (sQLitePreparedStatement7 != null) {
                                                    }
                                                    if (r132 == 0) {
                                                    }
                                                } catch (Throwable th30) {
                                                    th = th30;
                                                    th = th;
                                                    sQLitePreparedStatement11 = sQLitePreparedStatement21;
                                                    z3 = false;
                                                    sQLitePreparedStatement3 = null;
                                                    sQLitePreparedStatement7 = null;
                                                    sQLitePreparedStatement5 = null;
                                                    sQLitePreparedStatement6 = null;
                                                    r13 = z3;
                                                    sQLiteDatabase = this.database;
                                                    if (sQLiteDatabase != null) {
                                                    }
                                                    if (sQLitePreparedStatement3 != null) {
                                                    }
                                                    if (sQLitePreparedStatement11 != null) {
                                                    }
                                                    if (sQLitePreparedStatement5 != null) {
                                                    }
                                                    if (sQLitePreparedStatement6 != null) {
                                                    }
                                                    if (sQLitePreparedStatement10 != null) {
                                                    }
                                                    if (sQLitePreparedStatement8 != null) {
                                                    }
                                                    if (sQLitePreparedStatement9 != null) {
                                                    }
                                                    if (sQLitePreparedStatement7 != null) {
                                                    }
                                                    if (r13 != 0) {
                                                    }
                                                }
                                            }
                                            if (hashMap != null) {
                                                try {
                                                    for (TopicKey topicKey : hashMap.keySet()) {
                                                        getMediaDataController().putBotKeyboard(topicKey, (TLRPC.Message) hashMap.get(topicKey));
                                                    }
                                                } catch (Exception e30) {
                                                    exc = e30;
                                                    sQLitePreparedStatement23 = null;
                                                    sQLitePreparedStatement11 = sQLitePreparedStatement21;
                                                    sQLitePreparedStatement3 = sQLitePreparedStatement23;
                                                    sQLitePreparedStatement7 = sQLitePreparedStatement3;
                                                    sQLitePreparedStatement5 = sQLitePreparedStatement7;
                                                    sQLitePreparedStatement6 = sQLitePreparedStatement5;
                                                    r132 = sQLitePreparedStatement23;
                                                    checkSQLException(exc);
                                                    sQLiteDatabase2 = this.database;
                                                    if (sQLiteDatabase2 != null) {
                                                    }
                                                    if (sQLitePreparedStatement3 != null) {
                                                    }
                                                    if (sQLitePreparedStatement11 != null) {
                                                    }
                                                    if (sQLitePreparedStatement5 != null) {
                                                    }
                                                    if (sQLitePreparedStatement6 != null) {
                                                    }
                                                    if (sQLitePreparedStatement10 != null) {
                                                    }
                                                    if (sQLitePreparedStatement8 != null) {
                                                    }
                                                    if (sQLitePreparedStatement9 != null) {
                                                    }
                                                    if (sQLitePreparedStatement7 != null) {
                                                    }
                                                    if (r132 == 0) {
                                                    }
                                                } catch (Throwable th31) {
                                                    th = th31;
                                                    sQLitePreparedStatement22 = null;
                                                    sQLitePreparedStatement11 = sQLitePreparedStatement21;
                                                    sQLitePreparedStatement3 = sQLitePreparedStatement22;
                                                    sQLitePreparedStatement7 = sQLitePreparedStatement3;
                                                    sQLitePreparedStatement5 = sQLitePreparedStatement7;
                                                    sQLitePreparedStatement6 = sQLitePreparedStatement5;
                                                    r13 = sQLitePreparedStatement22;
                                                    sQLiteDatabase = this.database;
                                                    if (sQLiteDatabase != null) {
                                                    }
                                                    if (sQLitePreparedStatement3 != null) {
                                                    }
                                                    if (sQLitePreparedStatement11 != null) {
                                                    }
                                                    if (sQLitePreparedStatement5 != null) {
                                                    }
                                                    if (sQLitePreparedStatement6 != null) {
                                                    }
                                                    if (sQLitePreparedStatement10 != null) {
                                                    }
                                                    if (sQLitePreparedStatement8 != null) {
                                                    }
                                                    if (sQLitePreparedStatement9 != null) {
                                                    }
                                                    if (sQLitePreparedStatement7 != null) {
                                                    }
                                                    if (r13 != 0) {
                                                    }
                                                }
                                            }
                                            deleteFromDownloadQueue(arrayList12, false);
                                            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda221
                                                @Override // java.lang.Runnable
                                                public final void run() {
                                                    MessagesStorage.this.lambda$putMessages$216(arrayList19);
                                                }
                                            });
                                            getFileLoader().deleteFiles(arrayList18, 0);
                                            putUsersInternal(messages_messages.users);
                                            putChatsInternal(messages_messages.chats);
                                            if (i10 == Integer.MAX_VALUE) {
                                                try {
                                                    this.database.executeFast(String.format(Locale.US, "UPDATE dialogs SET unread_count_i = %d WHERE did = %d", Integer.valueOf(i10), Long.valueOf(j))).stepThis().dispose();
                                                    LongSparseIntArray longSparseIntArray = new LongSparseIntArray(1);
                                                    longSparseIntArray.put(j19, i10);
                                                    sQLitePreparedStatement24 = null;
                                                    sQLitePreparedStatement24 = null;
                                                    sQLitePreparedStatement24 = null;
                                                    try {
                                                        getMessagesController().processDialogsUpdateRead(null, longSparseIntArray);
                                                    } catch (Exception e31) {
                                                        e = e31;
                                                        exc = e;
                                                        sQLitePreparedStatement23 = sQLitePreparedStatement24;
                                                        sQLitePreparedStatement11 = sQLitePreparedStatement21;
                                                        sQLitePreparedStatement3 = sQLitePreparedStatement23;
                                                        sQLitePreparedStatement7 = sQLitePreparedStatement3;
                                                        sQLitePreparedStatement5 = sQLitePreparedStatement7;
                                                        sQLitePreparedStatement6 = sQLitePreparedStatement5;
                                                        r132 = sQLitePreparedStatement23;
                                                        checkSQLException(exc);
                                                        sQLiteDatabase2 = this.database;
                                                        if (sQLiteDatabase2 != null) {
                                                        }
                                                        if (sQLitePreparedStatement3 != null) {
                                                        }
                                                        if (sQLitePreparedStatement11 != null) {
                                                        }
                                                        if (sQLitePreparedStatement5 != null) {
                                                        }
                                                        if (sQLitePreparedStatement6 != null) {
                                                        }
                                                        if (sQLitePreparedStatement10 != null) {
                                                        }
                                                        if (sQLitePreparedStatement8 != null) {
                                                        }
                                                        if (sQLitePreparedStatement9 != null) {
                                                        }
                                                        if (sQLitePreparedStatement7 != null) {
                                                        }
                                                        if (r132 == 0) {
                                                        }
                                                    } catch (Throwable th32) {
                                                        th = th32;
                                                        th = th;
                                                        sQLitePreparedStatement22 = sQLitePreparedStatement24;
                                                        sQLitePreparedStatement11 = sQLitePreparedStatement21;
                                                        sQLitePreparedStatement3 = sQLitePreparedStatement22;
                                                        sQLitePreparedStatement7 = sQLitePreparedStatement3;
                                                        sQLitePreparedStatement5 = sQLitePreparedStatement7;
                                                        sQLitePreparedStatement6 = sQLitePreparedStatement5;
                                                        r13 = sQLitePreparedStatement22;
                                                        sQLiteDatabase = this.database;
                                                        if (sQLiteDatabase != null) {
                                                        }
                                                        if (sQLitePreparedStatement3 != null) {
                                                        }
                                                        if (sQLitePreparedStatement11 != null) {
                                                        }
                                                        if (sQLitePreparedStatement5 != null) {
                                                        }
                                                        if (sQLitePreparedStatement6 != null) {
                                                        }
                                                        if (sQLitePreparedStatement10 != null) {
                                                        }
                                                        if (sQLitePreparedStatement8 != null) {
                                                        }
                                                        if (sQLitePreparedStatement9 != null) {
                                                        }
                                                        if (sQLitePreparedStatement7 != null) {
                                                        }
                                                        if (r13 != 0) {
                                                        }
                                                    }
                                                } catch (Exception e32) {
                                                    e = e32;
                                                    sQLitePreparedStatement26 = null;
                                                    exc = e;
                                                    sQLitePreparedStatement23 = sQLitePreparedStatement26;
                                                    sQLitePreparedStatement11 = sQLitePreparedStatement21;
                                                    sQLitePreparedStatement3 = sQLitePreparedStatement23;
                                                    sQLitePreparedStatement7 = sQLitePreparedStatement3;
                                                    sQLitePreparedStatement5 = sQLitePreparedStatement7;
                                                    sQLitePreparedStatement6 = sQLitePreparedStatement5;
                                                    r132 = sQLitePreparedStatement23;
                                                    checkSQLException(exc);
                                                    sQLiteDatabase2 = this.database;
                                                    if (sQLiteDatabase2 != null) {
                                                    }
                                                    if (sQLitePreparedStatement3 != null) {
                                                    }
                                                    if (sQLitePreparedStatement11 != null) {
                                                    }
                                                    if (sQLitePreparedStatement5 != null) {
                                                    }
                                                    if (sQLitePreparedStatement6 != null) {
                                                    }
                                                    if (sQLitePreparedStatement10 != null) {
                                                    }
                                                    if (sQLitePreparedStatement8 != null) {
                                                    }
                                                    if (sQLitePreparedStatement9 != null) {
                                                    }
                                                    if (sQLitePreparedStatement7 != null) {
                                                    }
                                                    if (r132 == 0) {
                                                    }
                                                } catch (Throwable th33) {
                                                    th2 = th33;
                                                    sQLitePreparedStatement25 = null;
                                                    th = th2;
                                                    sQLitePreparedStatement22 = sQLitePreparedStatement25;
                                                    sQLitePreparedStatement11 = sQLitePreparedStatement21;
                                                    sQLitePreparedStatement3 = sQLitePreparedStatement22;
                                                    sQLitePreparedStatement7 = sQLitePreparedStatement3;
                                                    sQLitePreparedStatement5 = sQLitePreparedStatement7;
                                                    sQLitePreparedStatement6 = sQLitePreparedStatement5;
                                                    r13 = sQLitePreparedStatement22;
                                                    sQLiteDatabase = this.database;
                                                    if (sQLiteDatabase != null) {
                                                    }
                                                    if (sQLitePreparedStatement3 != null) {
                                                    }
                                                    if (sQLitePreparedStatement11 != null) {
                                                    }
                                                    if (sQLitePreparedStatement5 != null) {
                                                    }
                                                    if (sQLitePreparedStatement6 != null) {
                                                    }
                                                    if (sQLitePreparedStatement10 != null) {
                                                    }
                                                    if (sQLitePreparedStatement8 != null) {
                                                    }
                                                    if (sQLitePreparedStatement9 != null) {
                                                    }
                                                    if (sQLitePreparedStatement7 != null) {
                                                    }
                                                    if (r13 != 0) {
                                                    }
                                                }
                                            } else {
                                                sQLitePreparedStatement24 = null;
                                            }
                                            if (num == null) {
                                                SQLiteDatabase sQLiteDatabase7 = this.database;
                                                Locale locale2 = Locale.US;
                                                String str2 = l2 == null ? "NULL" : l2 + "";
                                                try {
                                                    z5 = true;
                                                    sQLiteDatabase7.executeFast(String.format(locale2, "UPDATE dialogs SET last_mid_group = %s WHERE did = %d AND last_mid <= %d", str2, Long.valueOf(j), num)).stepThis().dispose();
                                                } catch (Exception e33) {
                                                    e = e33;
                                                    sQLitePreparedStatement26 = sQLitePreparedStatement24;
                                                    exc = e;
                                                    sQLitePreparedStatement23 = sQLitePreparedStatement26;
                                                    sQLitePreparedStatement11 = sQLitePreparedStatement21;
                                                    sQLitePreparedStatement3 = sQLitePreparedStatement23;
                                                    sQLitePreparedStatement7 = sQLitePreparedStatement3;
                                                    sQLitePreparedStatement5 = sQLitePreparedStatement7;
                                                    sQLitePreparedStatement6 = sQLitePreparedStatement5;
                                                    r132 = sQLitePreparedStatement23;
                                                    checkSQLException(exc);
                                                    sQLiteDatabase2 = this.database;
                                                    if (sQLiteDatabase2 != null) {
                                                    }
                                                    if (sQLitePreparedStatement3 != null) {
                                                    }
                                                    if (sQLitePreparedStatement11 != null) {
                                                    }
                                                    if (sQLitePreparedStatement5 != null) {
                                                    }
                                                    if (sQLitePreparedStatement6 != null) {
                                                    }
                                                    if (sQLitePreparedStatement10 != null) {
                                                    }
                                                    if (sQLitePreparedStatement8 != null) {
                                                    }
                                                    if (sQLitePreparedStatement9 != null) {
                                                    }
                                                    if (sQLitePreparedStatement7 != null) {
                                                    }
                                                    if (r132 == 0) {
                                                    }
                                                } catch (Throwable th34) {
                                                    th2 = th34;
                                                    sQLitePreparedStatement25 = sQLitePreparedStatement24;
                                                    th = th2;
                                                    sQLitePreparedStatement22 = sQLitePreparedStatement25;
                                                    sQLitePreparedStatement11 = sQLitePreparedStatement21;
                                                    sQLitePreparedStatement3 = sQLitePreparedStatement22;
                                                    sQLitePreparedStatement7 = sQLitePreparedStatement3;
                                                    sQLitePreparedStatement5 = sQLitePreparedStatement7;
                                                    sQLitePreparedStatement6 = sQLitePreparedStatement5;
                                                    r13 = sQLitePreparedStatement22;
                                                    sQLiteDatabase = this.database;
                                                    if (sQLiteDatabase != null) {
                                                    }
                                                    if (sQLitePreparedStatement3 != null) {
                                                    }
                                                    if (sQLitePreparedStatement11 != null) {
                                                    }
                                                    if (sQLitePreparedStatement5 != null) {
                                                    }
                                                    if (sQLitePreparedStatement6 != null) {
                                                    }
                                                    if (sQLitePreparedStatement10 != null) {
                                                    }
                                                    if (sQLitePreparedStatement8 != null) {
                                                    }
                                                    if (sQLitePreparedStatement9 != null) {
                                                    }
                                                    if (sQLitePreparedStatement7 != null) {
                                                    }
                                                    if (r13 != 0) {
                                                    }
                                                }
                                            } else {
                                                z5 = false;
                                            }
                                            this.database.commitTransaction();
                                            if (!z) {
                                                if (!z5) {
                                                }
                                                arrayList = arrayList15;
                                                if (arrayList != null) {
                                                    AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda222
                                                        @Override // java.lang.Runnable
                                                        public final void run() {
                                                            MessagesStorage.this.lambda$putMessages$217(arrayList);
                                                        }
                                                    });
                                                }
                                                onReactionsUpdate(arrayList17);
                                                sQLitePreparedStatement27 = sQLitePreparedStatement21;
                                                sQLitePreparedStatement28 = sQLitePreparedStatement10;
                                                sQLiteDatabase3 = this.database;
                                                if (sQLiteDatabase3 != null) {
                                                    sQLiteDatabase3.commitTransaction();
                                                }
                                                if (sQLitePreparedStatement27 != null) {
                                                    sQLitePreparedStatement27.dispose();
                                                }
                                                if (sQLitePreparedStatement28 != null) {
                                                    sQLitePreparedStatement28.dispose();
                                                }
                                                if (sQLitePreparedStatement8 != null) {
                                                    sQLitePreparedStatement8.dispose();
                                                }
                                                if (sQLitePreparedStatement9 == null) {
                                                    sQLitePreparedStatement9.dispose();
                                                    return;
                                                }
                                                return;
                                            }
                                            updateDialogsWithDeletedMessages(j, j13, new ArrayList(), null, false);
                                            arrayList = arrayList15;
                                            if (arrayList != null) {
                                            }
                                            onReactionsUpdate(arrayList17);
                                            sQLitePreparedStatement27 = sQLitePreparedStatement21;
                                            sQLitePreparedStatement28 = sQLitePreparedStatement10;
                                            sQLiteDatabase3 = this.database;
                                            if (sQLiteDatabase3 != null) {
                                            }
                                            if (sQLitePreparedStatement27 != null) {
                                            }
                                            if (sQLitePreparedStatement28 != null) {
                                            }
                                            if (sQLitePreparedStatement8 != null) {
                                            }
                                            if (sQLitePreparedStatement9 == null) {
                                            }
                                        }
                                        deleteFromDownloadQueue(arrayList12, false);
                                        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda221
                                            @Override // java.lang.Runnable
                                            public final void run() {
                                                MessagesStorage.this.lambda$putMessages$216(arrayList19);
                                            }
                                        });
                                        getFileLoader().deleteFiles(arrayList18, 0);
                                        putUsersInternal(messages_messages.users);
                                        putChatsInternal(messages_messages.chats);
                                        if (i10 == Integer.MAX_VALUE) {
                                        }
                                        if (num == null) {
                                        }
                                        this.database.commitTransaction();
                                        if (!z) {
                                        }
                                        updateDialogsWithDeletedMessages(j, j13, new ArrayList(), null, false);
                                        arrayList = arrayList15;
                                        if (arrayList != null) {
                                        }
                                        onReactionsUpdate(arrayList17);
                                        sQLitePreparedStatement27 = sQLitePreparedStatement21;
                                        sQLitePreparedStatement28 = sQLitePreparedStatement10;
                                        sQLiteDatabase3 = this.database;
                                        if (sQLiteDatabase3 != null) {
                                        }
                                        if (sQLitePreparedStatement27 != null) {
                                        }
                                        if (sQLitePreparedStatement28 != null) {
                                        }
                                        if (sQLitePreparedStatement8 != null) {
                                        }
                                        if (sQLitePreparedStatement9 == null) {
                                        }
                                    } catch (Exception e34) {
                                        e = e34;
                                        sQLitePreparedStatement24 = null;
                                    } catch (Throwable th35) {
                                        th = th35;
                                        sQLitePreparedStatement24 = null;
                                    }
                                    sQLitePreparedStatement15.dispose();
                                    if (sQLitePreparedStatement8 != null) {
                                    }
                                    if (sQLitePreparedStatement9 != null) {
                                    }
                                    if (sQLitePreparedStatement10 != null) {
                                    }
                                    if (hashMap != null) {
                                    }
                                } catch (Exception e35) {
                                    sQLitePreparedStatement19 = null;
                                    exc = e35;
                                    sQLitePreparedStatement20 = sQLitePreparedStatement15;
                                    sQLitePreparedStatement16 = sQLitePreparedStatement21;
                                    sQLitePreparedStatement3 = null;
                                    executeFast = null;
                                    sQLitePreparedStatement11 = sQLitePreparedStatement16;
                                    sQLitePreparedStatement6 = sQLitePreparedStatement20;
                                    sQLitePreparedStatement7 = sQLitePreparedStatement19;
                                    sQLitePreparedStatement5 = executeFast;
                                    r132 = sQLitePreparedStatement19;
                                    checkSQLException(exc);
                                    sQLiteDatabase2 = this.database;
                                    if (sQLiteDatabase2 != null) {
                                    }
                                    if (sQLitePreparedStatement3 != null) {
                                    }
                                    if (sQLitePreparedStatement11 != null) {
                                    }
                                    if (sQLitePreparedStatement5 != null) {
                                    }
                                    if (sQLitePreparedStatement6 != null) {
                                    }
                                    if (sQLitePreparedStatement10 != null) {
                                    }
                                    if (sQLitePreparedStatement8 != null) {
                                    }
                                    if (sQLitePreparedStatement9 != null) {
                                    }
                                    if (sQLitePreparedStatement7 != null) {
                                    }
                                    if (r132 == 0) {
                                    }
                                } catch (Throwable th36) {
                                    sQLitePreparedStatement17 = null;
                                    th = th36;
                                    sQLitePreparedStatement18 = sQLitePreparedStatement15;
                                    sQLitePreparedStatement16 = sQLitePreparedStatement21;
                                    sQLitePreparedStatement3 = null;
                                    executeFast = null;
                                    sQLitePreparedStatement11 = sQLitePreparedStatement16;
                                    sQLitePreparedStatement6 = sQLitePreparedStatement18;
                                    sQLitePreparedStatement7 = sQLitePreparedStatement17;
                                    sQLitePreparedStatement5 = executeFast;
                                    r13 = sQLitePreparedStatement17;
                                    sQLiteDatabase = this.database;
                                    if (sQLiteDatabase != null) {
                                    }
                                    if (sQLitePreparedStatement3 != null) {
                                    }
                                    if (sQLitePreparedStatement11 != null) {
                                    }
                                    if (sQLitePreparedStatement5 != null) {
                                    }
                                    if (sQLitePreparedStatement6 != null) {
                                    }
                                    if (sQLitePreparedStatement10 != null) {
                                    }
                                    if (sQLitePreparedStatement8 != null) {
                                    }
                                    if (sQLitePreparedStatement9 != null) {
                                    }
                                    if (sQLitePreparedStatement7 != null) {
                                    }
                                    if (r13 != 0) {
                                    }
                                }
                                sQLitePreparedStatement14.dispose();
                                sQLitePreparedStatement3.dispose();
                                if (sQLitePreparedStatement16 == null) {
                                }
                            } catch (Exception e36) {
                                sQLitePreparedStatement19 = null;
                                exc = e36;
                                sQLitePreparedStatement20 = sQLitePreparedStatement15;
                                sQLitePreparedStatement3 = sQLitePreparedStatement3;
                                executeFast = sQLitePreparedStatement14;
                            } catch (Throwable th37) {
                                sQLitePreparedStatement17 = null;
                                th = th37;
                                sQLitePreparedStatement18 = sQLitePreparedStatement15;
                                sQLitePreparedStatement3 = sQLitePreparedStatement3;
                                executeFast = sQLitePreparedStatement14;
                            }
                            SQLitePreparedStatement executeFast52 = this.database.executeFast("REPLACE INTO media_topics VALUES(?, ?, ?, ?, ?, ?)");
                            if (j5 != j12) {
                            }
                            i9 = 0;
                            Long l22 = null;
                            int i432 = ConnectionsManager.DEFAULT_DATACENTER_ID;
                            HashMap hashMap42 = null;
                            long j132 = 0;
                            num = null;
                            sQLitePreparedStatement8 = null;
                            sQLitePreparedStatement9 = null;
                            sQLitePreparedStatement10 = null;
                            ArrayList arrayList152 = null;
                            int i442 = ConnectionsManager.DEFAULT_DATACENTER_ID;
                            while (i9 < size) {
                            }
                            ArrayList arrayList172 = arrayList13;
                            ArrayList<File> arrayList182 = arrayList10;
                            long j192 = j12;
                            sQLitePreparedStatement14 = executeFast;
                            sQLitePreparedStatement15 = sQLitePreparedStatement12;
                            int i592 = i442;
                            final ArrayList arrayList192 = arrayList11;
                            i10 = i432;
                            sQLitePreparedStatement16 = executeFast2;
                            hashMap = hashMap42;
                        } catch (Exception e37) {
                            SQLitePreparedStatement sQLitePreparedStatement37 = executeFast;
                            SQLitePreparedStatement sQLitePreparedStatement38 = null;
                            exc = e37;
                            sQLitePreparedStatement2 = sQLitePreparedStatement12;
                            r12 = sQLitePreparedStatement37;
                            sQLitePreparedStatement4 = sQLitePreparedStatement38;
                            sQLitePreparedStatement5 = r12;
                            sQLitePreparedStatement6 = sQLitePreparedStatement2;
                            sQLitePreparedStatement7 = sQLitePreparedStatement4;
                            sQLitePreparedStatement8 = sQLitePreparedStatement7;
                            sQLitePreparedStatement9 = sQLitePreparedStatement8;
                            sQLitePreparedStatement10 = sQLitePreparedStatement9;
                            sQLitePreparedStatement11 = sQLitePreparedStatement10;
                            r132 = sQLitePreparedStatement4;
                            checkSQLException(exc);
                            sQLiteDatabase2 = this.database;
                            if (sQLiteDatabase2 != null) {
                            }
                            if (sQLitePreparedStatement3 != null) {
                            }
                            if (sQLitePreparedStatement11 != null) {
                            }
                            if (sQLitePreparedStatement5 != null) {
                            }
                            if (sQLitePreparedStatement6 != null) {
                            }
                            if (sQLitePreparedStatement10 != null) {
                            }
                            if (sQLitePreparedStatement8 != null) {
                            }
                            if (sQLitePreparedStatement9 != null) {
                            }
                            if (sQLitePreparedStatement7 != null) {
                            }
                            if (r132 == 0) {
                            }
                        } catch (Throwable th38) {
                            SQLitePreparedStatement sQLitePreparedStatement39 = executeFast;
                            SQLitePreparedStatement sQLitePreparedStatement40 = null;
                            th = th38;
                            sQLitePreparedStatement2 = sQLitePreparedStatement12;
                            r1 = sQLitePreparedStatement39;
                            sQLitePreparedStatement = sQLitePreparedStatement40;
                            sQLitePreparedStatement5 = r1;
                            sQLitePreparedStatement6 = sQLitePreparedStatement2;
                            sQLitePreparedStatement7 = sQLitePreparedStatement;
                            sQLitePreparedStatement8 = sQLitePreparedStatement7;
                            sQLitePreparedStatement9 = sQLitePreparedStatement8;
                            sQLitePreparedStatement10 = sQLitePreparedStatement9;
                            sQLitePreparedStatement11 = sQLitePreparedStatement10;
                            r13 = sQLitePreparedStatement;
                            sQLiteDatabase = this.database;
                            if (sQLiteDatabase != null) {
                            }
                            if (sQLitePreparedStatement3 != null) {
                            }
                            if (sQLitePreparedStatement11 != null) {
                            }
                            if (sQLitePreparedStatement5 != null) {
                            }
                            if (sQLitePreparedStatement6 != null) {
                            }
                            if (sQLitePreparedStatement10 != null) {
                            }
                            if (sQLitePreparedStatement8 != null) {
                            }
                            if (sQLitePreparedStatement9 != null) {
                            }
                            if (sQLitePreparedStatement7 != null) {
                            }
                            if (r13 != 0) {
                            }
                        }
                        executeFast = this.database.executeFast("REPLACE INTO messages_v2 VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 0, ?, ?, ?)");
                        sQLitePreparedStatement2 = this.database.executeFast("REPLACE INTO media_v4 VALUES(?, ?, ?, ?, ?)");
                        sQLitePreparedStatement12 = sQLitePreparedStatement2;
                    } catch (Exception e38) {
                        sQLitePreparedStatement4 = null;
                        exc = e38;
                        r12 = 0;
                        sQLitePreparedStatement2 = null;
                    } catch (Throwable th39) {
                        sQLitePreparedStatement = null;
                        th = th39;
                        r1 = 0;
                        sQLitePreparedStatement2 = null;
                    }
                    closeHolesInMedia(j, i8, i7, -1, j2);
                    size = messages_messages2.messages.size();
                    ArrayList<File> arrayList102 = new ArrayList<>();
                    ArrayList arrayList112 = new ArrayList();
                    ArrayList arrayList122 = new ArrayList();
                    j5 = j4;
                    if (j12 != j5) {
                    }
                    sQLitePreparedStatement3 = this.database.executeFast("REPLACE INTO messages_topics VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 0, ?, ?)");
                }
                sQLitePreparedStatement27 = null;
                sQLitePreparedStatement28 = null;
                sQLitePreparedStatement8 = null;
                sQLitePreparedStatement9 = null;
                sQLiteDatabase3 = this.database;
                if (sQLiteDatabase3 != null) {
                }
                if (sQLitePreparedStatement27 != null) {
                }
                if (sQLitePreparedStatement28 != null) {
                }
                if (sQLitePreparedStatement8 != null) {
                }
                if (sQLitePreparedStatement9 == null) {
                }
            } catch (Exception e39) {
                exc = e39;
                i5 = 0;
                sQLitePreparedStatement2 = null;
                sQLitePreparedStatement4 = null;
                sQLitePreparedStatement3 = null;
                r12 = i5;
                sQLitePreparedStatement5 = r12;
                sQLitePreparedStatement6 = sQLitePreparedStatement2;
                sQLitePreparedStatement7 = sQLitePreparedStatement4;
                sQLitePreparedStatement8 = sQLitePreparedStatement7;
                sQLitePreparedStatement9 = sQLitePreparedStatement8;
                sQLitePreparedStatement10 = sQLitePreparedStatement9;
                sQLitePreparedStatement11 = sQLitePreparedStatement10;
                r132 = sQLitePreparedStatement4;
                checkSQLException(exc);
                sQLiteDatabase2 = this.database;
                if (sQLiteDatabase2 != null) {
                }
                if (sQLitePreparedStatement3 != null) {
                }
                if (sQLitePreparedStatement11 != null) {
                }
                if (sQLitePreparedStatement5 != null) {
                }
                if (sQLitePreparedStatement6 != null) {
                }
                if (sQLitePreparedStatement10 != null) {
                }
                if (sQLitePreparedStatement8 != null) {
                }
                if (sQLitePreparedStatement9 != null) {
                }
                if (sQLitePreparedStatement7 != null) {
                }
                if (r132 == 0) {
                }
            } catch (Throwable th40) {
                th = th40;
                i4 = 0;
                sQLitePreparedStatement2 = null;
                sQLitePreparedStatement = null;
                sQLitePreparedStatement3 = null;
                r1 = i4;
                sQLitePreparedStatement5 = r1;
                sQLitePreparedStatement6 = sQLitePreparedStatement2;
                sQLitePreparedStatement7 = sQLitePreparedStatement;
                sQLitePreparedStatement8 = sQLitePreparedStatement7;
                sQLitePreparedStatement9 = sQLitePreparedStatement8;
                sQLitePreparedStatement10 = sQLitePreparedStatement9;
                sQLitePreparedStatement11 = sQLitePreparedStatement10;
                r13 = sQLitePreparedStatement;
                sQLiteDatabase = this.database;
                if (sQLiteDatabase != null) {
                }
                if (sQLitePreparedStatement3 != null) {
                }
                if (sQLitePreparedStatement11 != null) {
                }
                if (sQLitePreparedStatement5 != null) {
                }
                if (sQLitePreparedStatement6 != null) {
                }
                if (sQLitePreparedStatement10 != null) {
                }
                if (sQLitePreparedStatement8 != null) {
                }
                if (sQLitePreparedStatement9 != null) {
                }
                if (sQLitePreparedStatement7 != null) {
                }
                if (r13 != 0) {
                }
            }
        } catch (Exception e40) {
            exc = e40;
            i5 = i33;
            sQLitePreparedStatement2 = null;
            sQLitePreparedStatement4 = null;
            sQLitePreparedStatement3 = null;
            r12 = i5;
            sQLitePreparedStatement5 = r12;
            sQLitePreparedStatement6 = sQLitePreparedStatement2;
            sQLitePreparedStatement7 = sQLitePreparedStatement4;
            sQLitePreparedStatement8 = sQLitePreparedStatement7;
            sQLitePreparedStatement9 = sQLitePreparedStatement8;
            sQLitePreparedStatement10 = sQLitePreparedStatement9;
            sQLitePreparedStatement11 = sQLitePreparedStatement10;
            r132 = sQLitePreparedStatement4;
            checkSQLException(exc);
            sQLiteDatabase2 = this.database;
            if (sQLiteDatabase2 != null) {
            }
            if (sQLitePreparedStatement3 != null) {
            }
            if (sQLitePreparedStatement11 != null) {
            }
            if (sQLitePreparedStatement5 != null) {
            }
            if (sQLitePreparedStatement6 != null) {
            }
            if (sQLitePreparedStatement10 != null) {
            }
            if (sQLitePreparedStatement8 != null) {
            }
            if (sQLitePreparedStatement9 != null) {
            }
            if (sQLitePreparedStatement7 != null) {
            }
            if (r132 == 0) {
            }
        } catch (Throwable th41) {
            th = th41;
            i4 = i33;
            sQLitePreparedStatement2 = null;
            sQLitePreparedStatement = null;
            sQLitePreparedStatement3 = null;
            r1 = i4;
            sQLitePreparedStatement5 = r1;
            sQLitePreparedStatement6 = sQLitePreparedStatement2;
            sQLitePreparedStatement7 = sQLitePreparedStatement;
            sQLitePreparedStatement8 = sQLitePreparedStatement7;
            sQLitePreparedStatement9 = sQLitePreparedStatement8;
            sQLitePreparedStatement10 = sQLitePreparedStatement9;
            sQLitePreparedStatement11 = sQLitePreparedStatement10;
            r13 = sQLitePreparedStatement;
            sQLiteDatabase = this.database;
            if (sQLiteDatabase != null) {
            }
            if (sQLitePreparedStatement3 != null) {
            }
            if (sQLitePreparedStatement11 != null) {
            }
            if (sQLitePreparedStatement5 != null) {
            }
            if (sQLitePreparedStatement6 != null) {
            }
            if (sQLitePreparedStatement10 != null) {
            }
            if (sQLitePreparedStatement8 != null) {
            }
            if (sQLitePreparedStatement9 != null) {
            }
            if (sQLitePreparedStatement7 != null) {
            }
            if (r13 != 0) {
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$putMessagesInternal$189(int i) {
        getDownloadController().newDownloadObjectsAvailable(i);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$putMessagesInternal$190(ArrayList arrayList) {
        if (getMessagesController().getSavedMessagesController().updateSavedDialogs(arrayList)) {
            getMessagesController().getSavedMessagesController().update();
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$putPushMessage$42(MessageObject messageObject) {
        try {
            NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(messageObject.messageOwner.getObjectSize());
            messageObject.messageOwner.serializeToStream(nativeByteBuffer);
            int i = messageObject.localType == 2 ? 1 : 0;
            if (messageObject.localChannel) {
                i |= 2;
            }
            SQLitePreparedStatement executeFast = this.database.executeFast("REPLACE INTO unread_push_messages VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
            executeFast.requery();
            executeFast.bindLong(1, messageObject.getDialogId());
            executeFast.bindInteger(2, messageObject.getId());
            executeFast.bindLong(3, messageObject.messageOwner.random_id);
            executeFast.bindInteger(4, messageObject.messageOwner.date);
            executeFast.bindByteBuffer(5, nativeByteBuffer);
            CharSequence charSequence = messageObject.messageText;
            if (charSequence == null) {
                executeFast.bindNull(6);
            } else {
                executeFast.bindString(6, charSequence.toString());
            }
            String str = messageObject.localName;
            if (str == null) {
                executeFast.bindNull(7);
            } else {
                executeFast.bindString(7, str);
            }
            String str2 = messageObject.localUserName;
            if (str2 == null) {
                executeFast.bindNull(8);
            } else {
                executeFast.bindString(8, str2);
            }
            executeFast.bindInteger(9, i);
            executeFast.bindLong(10, MessageObject.getTopicId(this.currentAccount, messageObject.messageOwner, false));
            executeFast.bindInteger(11, (messageObject.isReactionPush ? 1 : 0) + (messageObject.isStoryReactionPush ? 1 : 0));
            executeFast.step();
            nativeByteBuffer.reuse();
            executeFast.dispose();
        } catch (Exception e) {
            checkSQLException(e);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:10:0x0033 A[RETURN] */
    /* JADX WARN: Removed duplicated region for block: B:12:0x0034 A[Catch: all -> 0x001b, Exception -> 0x001d, TRY_LEAVE, TryCatch #0 {Exception -> 0x001d, blocks: (B:3:0x0001, B:5:0x0007, B:7:0x000c, B:8:0x0018, B:12:0x0034, B:14:0x001f, B:16:0x0023), top: B:2:0x0001, outer: #1 }] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$putSentFile$163(String str, TLObject tLObject, int i, String str2) {
        TLRPC.MessageMedia messageMedia;
        int i2;
        SQLitePreparedStatement sQLitePreparedStatement = null;
        try {
            try {
                String MD5 = Utilities.MD5(str);
                if (MD5 != null) {
                    if (tLObject instanceof TLRPC.Photo) {
                        messageMedia = new TLRPC.TL_messageMediaPhoto();
                        messageMedia.photo = (TLRPC.Photo) tLObject;
                        i2 = messageMedia.flags | 1;
                    } else if (tLObject instanceof TLRPC.Document) {
                        messageMedia = new TLRPC.TL_messageMediaDocument();
                        messageMedia.document = (TLRPC.Document) tLObject;
                        i2 = messageMedia.flags | 1;
                    } else {
                        messageMedia = null;
                        if (messageMedia != null) {
                            return;
                        }
                        sQLitePreparedStatement = this.database.executeFast("REPLACE INTO sent_files_v2 VALUES(?, ?, ?, ?)");
                        sQLitePreparedStatement.requery();
                        NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(messageMedia.getObjectSize());
                        messageMedia.serializeToStream(nativeByteBuffer);
                        sQLitePreparedStatement.bindString(1, MD5);
                        sQLitePreparedStatement.bindInteger(2, i);
                        sQLitePreparedStatement.bindByteBuffer(3, nativeByteBuffer);
                        sQLitePreparedStatement.bindString(4, str2);
                        sQLitePreparedStatement.step();
                        nativeByteBuffer.reuse();
                    }
                    messageMedia.flags = i2;
                    if (messageMedia != null) {
                    }
                }
                if (sQLitePreparedStatement == null) {
                    return;
                }
            } catch (Exception e) {
                checkSQLException(e);
                if (sQLitePreparedStatement == null) {
                    return;
                }
            }
            sQLitePreparedStatement.dispose();
        } catch (Throwable th) {
            if (sQLitePreparedStatement != null) {
                sQLitePreparedStatement.dispose();
            }
            throw th;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$putStoryPushMessage$38(NotificationsController.StoryNotification storyNotification) {
        try {
            this.database.executeFast("DELETE FROM story_pushes WHERE uid = " + storyNotification.dialogId).stepThis().dispose();
            SQLitePreparedStatement executeFast = this.database.executeFast("REPLACE INTO story_pushes VALUES(?, ?, ?, ?, ?, ?)");
            for (Map.Entry<Integer, Pair<Long, Long>> entry : storyNotification.dateByIds.entrySet()) {
                int intValue = entry.getKey().intValue();
                long longValue = ((Long) entry.getValue().first).longValue();
                long longValue2 = ((Long) entry.getValue().second).longValue();
                executeFast.requery();
                executeFast.bindLong(1, storyNotification.dialogId);
                executeFast.bindInteger(2, intValue);
                executeFast.bindLong(3, longValue);
                if (storyNotification.localName == null) {
                    storyNotification.localName = "";
                }
                executeFast.bindString(4, storyNotification.localName);
                executeFast.bindInteger(5, storyNotification.hidden ? 1 : 0);
                executeFast.bindLong(6, longValue2);
                executeFast.step();
            }
            executeFast.dispose();
        } catch (Exception e) {
            checkSQLException(e);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:40:0x0093  */
    /* JADX WARN: Removed duplicated region for block: B:42:0x0098  */
    /* JADX WARN: Removed duplicated region for block: B:44:? A[RETURN, SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$putWallpapers$75(int i, ArrayList arrayList) {
        Exception e;
        SQLiteDatabase sQLiteDatabase;
        SQLiteDatabase sQLiteDatabase2;
        String str;
        SQLitePreparedStatement executeFast;
        SQLitePreparedStatement sQLitePreparedStatement = null;
        try {
            if (i == 1) {
                try {
                    this.database.executeFast("DELETE FROM wallpapers2 WHERE num >= -1").stepThis().dispose();
                } catch (Exception e2) {
                    e = e2;
                    checkSQLException(e);
                    sQLiteDatabase = this.database;
                    if (sQLiteDatabase != null) {
                        sQLiteDatabase.commitTransaction();
                    }
                    if (sQLitePreparedStatement == null) {
                        sQLitePreparedStatement.dispose();
                        return;
                    }
                    return;
                }
            }
            this.database.beginTransaction();
            if (i != 0) {
                sQLiteDatabase2 = this.database;
                str = "REPLACE INTO wallpapers2 VALUES(?, ?, ?)";
            } else {
                sQLiteDatabase2 = this.database;
                str = "UPDATE wallpapers2 SET data = ? WHERE uid = ?";
            }
            executeFast = sQLiteDatabase2.executeFast(str);
        } catch (Throwable th) {
            th = th;
        }
        try {
            int size = arrayList.size();
            for (int i2 = 0; i2 < size; i2++) {
                TLRPC.WallPaper wallPaper = (TLRPC.WallPaper) arrayList.get(i2);
                executeFast.requery();
                NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(wallPaper.getObjectSize());
                wallPaper.serializeToStream(nativeByteBuffer);
                if (i != 0) {
                    executeFast.bindLong(1, wallPaper.id);
                    executeFast.bindByteBuffer(2, nativeByteBuffer);
                    if (i < 0) {
                        executeFast.bindInteger(3, i);
                    } else {
                        executeFast.bindInteger(3, i == 2 ? -1 : i2);
                    }
                } else {
                    executeFast.bindByteBuffer(1, nativeByteBuffer);
                    executeFast.bindLong(2, wallPaper.id);
                }
                executeFast.step();
                nativeByteBuffer.reuse();
            }
            executeFast.dispose();
            this.database.commitTransaction();
            SQLiteDatabase sQLiteDatabase3 = this.database;
            if (sQLiteDatabase3 != null) {
                sQLiteDatabase3.commitTransaction();
            }
        } catch (Exception e3) {
            e = e3;
            sQLitePreparedStatement = executeFast;
            checkSQLException(e);
            sQLiteDatabase = this.database;
            if (sQLiteDatabase != null) {
            }
            if (sQLitePreparedStatement == null) {
            }
        } catch (Throwable th2) {
            th = th2;
            sQLitePreparedStatement = executeFast;
            SQLiteDatabase sQLiteDatabase4 = this.database;
            if (sQLiteDatabase4 != null) {
                sQLiteDatabase4.commitTransaction();
            }
            if (sQLitePreparedStatement != null) {
                sQLitePreparedStatement.dispose();
            }
            throw th;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$putWebPages$180(ArrayList arrayList) {
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.didReceivedWebpages, arrayList);
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:54:0x01bb  */
    /* JADX WARN: Removed duplicated region for block: B:56:0x01c0  */
    /* JADX WARN: Removed duplicated region for block: B:58:0x01c5  */
    /* JADX WARN: Removed duplicated region for block: B:64:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:68:0x01d3  */
    /* JADX WARN: Removed duplicated region for block: B:70:0x01d8  */
    /* JADX WARN: Removed duplicated region for block: B:72:0x01dd  */
    /* JADX WARN: Removed duplicated region for block: B:75:0x01e4  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$putWebPages$181(LongSparseArray longSparseArray) {
        SQLitePreparedStatement sQLitePreparedStatement;
        SQLiteCursor sQLiteCursor;
        SQLitePreparedStatement sQLitePreparedStatement2;
        SQLiteDatabase sQLiteDatabase;
        SQLiteDatabase sQLiteDatabase2;
        final ArrayList arrayList;
        SQLitePreparedStatement executeFast;
        int i = 0;
        int i2 = 1;
        try {
            try {
                arrayList = new ArrayList();
                int size = longSparseArray.size();
                int i3 = 0;
                while (i3 < size) {
                    try {
                        SQLiteCursor queryFinalized = this.database.queryFinalized("SELECT mid, uid FROM webpage_pending_v2 WHERE id = " + longSparseArray.keyAt(i3), new Object[i]);
                        try {
                            LongSparseArray longSparseArray2 = new LongSparseArray();
                            while (queryFinalized.next()) {
                                long longValue = queryFinalized.longValue(i2);
                                ArrayList arrayList2 = (ArrayList) longSparseArray2.get(longValue);
                                if (arrayList2 == null) {
                                    arrayList2 = new ArrayList();
                                    longSparseArray2.put(longValue, arrayList2);
                                }
                                arrayList2.add(Integer.valueOf(queryFinalized.intValue(i)));
                            }
                            queryFinalized.dispose();
                            try {
                                if (!longSparseArray2.isEmpty()) {
                                    int size2 = longSparseArray2.size();
                                    for (int i4 = 0; i4 < size2; i4++) {
                                        boolean z = false;
                                        SQLiteCursor queryFinalized2 = this.database.queryFinalized(String.format(Locale.US, "SELECT mid, data FROM messages_v2 WHERE mid IN (%s) AND uid = %d", TextUtils.join(",", (ArrayList) longSparseArray2.valueAt(i4)), Long.valueOf(longSparseArray2.keyAt(i4))), new Object[0]);
                                        while (queryFinalized2.next()) {
                                            try {
                                                int intValue = queryFinalized2.intValue(z ? 1 : 0);
                                                NativeByteBuffer byteBufferValue = queryFinalized2.byteBufferValue(1);
                                                if (byteBufferValue != null) {
                                                    TLRPC.Message TLdeserialize = TLRPC.Message.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(z), z);
                                                    TLdeserialize.readAttachPath(byteBufferValue, getUserConfig().clientUserId);
                                                    byteBufferValue.reuse();
                                                    TLRPC.MessageMedia messageMedia = TLdeserialize.media;
                                                    if (messageMedia instanceof TLRPC.TL_messageMediaWebPage) {
                                                        TLdeserialize.id = intValue;
                                                        messageMedia.webpage = (TLRPC.WebPage) longSparseArray.valueAt(i3);
                                                        arrayList.add(TLdeserialize);
                                                    }
                                                    z = false;
                                                }
                                            } catch (Exception e) {
                                                e = e;
                                                sQLiteCursor = queryFinalized2;
                                                sQLitePreparedStatement = null;
                                                sQLitePreparedStatement2 = null;
                                                try {
                                                    checkSQLException(e);
                                                    if (sQLiteCursor != null) {
                                                    }
                                                    if (sQLitePreparedStatement2 != null) {
                                                    }
                                                    if (sQLitePreparedStatement != null) {
                                                    }
                                                    sQLiteDatabase2 = this.database;
                                                    if (sQLiteDatabase2 == null) {
                                                    }
                                                    sQLiteDatabase2.commitTransaction();
                                                } catch (Throwable th) {
                                                    th = th;
                                                    if (sQLiteCursor != null) {
                                                        sQLiteCursor.dispose();
                                                    }
                                                    if (sQLitePreparedStatement2 != null) {
                                                        sQLitePreparedStatement2.dispose();
                                                    }
                                                    if (sQLitePreparedStatement != null) {
                                                        sQLitePreparedStatement.dispose();
                                                    }
                                                    sQLiteDatabase = this.database;
                                                    if (sQLiteDatabase != null) {
                                                        sQLiteDatabase.commitTransaction();
                                                    }
                                                    throw th;
                                                }
                                            } catch (Throwable th2) {
                                                th = th2;
                                                sQLiteCursor = queryFinalized2;
                                                sQLitePreparedStatement = null;
                                                sQLitePreparedStatement2 = null;
                                                if (sQLiteCursor != null) {
                                                }
                                                if (sQLitePreparedStatement2 != null) {
                                                }
                                                if (sQLitePreparedStatement != null) {
                                                }
                                                sQLiteDatabase = this.database;
                                                if (sQLiteDatabase != null) {
                                                }
                                                throw th;
                                            }
                                        }
                                        queryFinalized2.dispose();
                                    }
                                }
                                i3++;
                                i = 0;
                                i2 = 1;
                            } catch (Exception e2) {
                                e = e2;
                                queryFinalized = null;
                                sQLiteCursor = queryFinalized;
                                sQLitePreparedStatement = null;
                                sQLitePreparedStatement2 = null;
                                checkSQLException(e);
                                if (sQLiteCursor != null) {
                                }
                                if (sQLitePreparedStatement2 != null) {
                                }
                                if (sQLitePreparedStatement != null) {
                                }
                                sQLiteDatabase2 = this.database;
                                if (sQLiteDatabase2 == null) {
                                }
                                sQLiteDatabase2.commitTransaction();
                            } catch (Throwable th3) {
                                th = th3;
                                queryFinalized = null;
                                sQLiteCursor = queryFinalized;
                                sQLitePreparedStatement = null;
                                sQLitePreparedStatement2 = null;
                                if (sQLiteCursor != null) {
                                }
                                if (sQLitePreparedStatement2 != null) {
                                }
                                if (sQLitePreparedStatement != null) {
                                }
                                sQLiteDatabase = this.database;
                                if (sQLiteDatabase != null) {
                                }
                                throw th;
                            }
                        } catch (Exception e3) {
                            e = e3;
                        } catch (Throwable th4) {
                            th = th4;
                        }
                    } catch (Exception e4) {
                        e = e4;
                        executeFast = null;
                        sQLitePreparedStatement = null;
                        sQLitePreparedStatement2 = executeFast;
                        sQLiteCursor = null;
                        checkSQLException(e);
                        if (sQLiteCursor != null) {
                            sQLiteCursor.dispose();
                        }
                        if (sQLitePreparedStatement2 != null) {
                            sQLitePreparedStatement2.dispose();
                        }
                        if (sQLitePreparedStatement != null) {
                            sQLitePreparedStatement.dispose();
                        }
                        sQLiteDatabase2 = this.database;
                        if (sQLiteDatabase2 == null) {
                            return;
                        }
                        sQLiteDatabase2.commitTransaction();
                    }
                }
            } catch (Exception e5) {
                e = e5;
                sQLitePreparedStatement = null;
                sQLiteCursor = null;
            }
            if (arrayList.isEmpty()) {
                SQLiteDatabase sQLiteDatabase3 = this.database;
                if (sQLiteDatabase3 != null) {
                    sQLiteDatabase3.commitTransaction();
                    return;
                }
                return;
            }
            this.database.beginTransaction();
            executeFast = this.database.executeFast("UPDATE messages_v2 SET data = ? WHERE mid = ? AND uid = ?");
            try {
                sQLitePreparedStatement = this.database.executeFast("UPDATE media_v4 SET data = ? WHERE mid = ? AND uid = ?");
                for (int i5 = 0; i5 < arrayList.size(); i5++) {
                    try {
                        TLRPC.Message message = (TLRPC.Message) arrayList.get(i5);
                        MessageObject.normalizeFlags(message);
                        NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(message.getObjectSize());
                        message.serializeToStream(nativeByteBuffer);
                        executeFast.requery();
                        executeFast.bindByteBuffer(1, nativeByteBuffer);
                        executeFast.bindInteger(2, message.id);
                        executeFast.bindLong(3, MessageObject.getDialogId(message));
                        executeFast.step();
                        sQLitePreparedStatement.requery();
                        sQLitePreparedStatement.bindByteBuffer(1, nativeByteBuffer);
                        sQLitePreparedStatement.bindInteger(2, message.id);
                        sQLitePreparedStatement.bindLong(3, MessageObject.getDialogId(message));
                        sQLitePreparedStatement.step();
                        nativeByteBuffer.reuse();
                    } catch (Exception e6) {
                        e = e6;
                    } catch (Throwable th5) {
                        th = th5;
                        sQLitePreparedStatement2 = executeFast;
                        sQLiteCursor = null;
                        if (sQLiteCursor != null) {
                        }
                        if (sQLitePreparedStatement2 != null) {
                        }
                        if (sQLitePreparedStatement != null) {
                        }
                        sQLiteDatabase = this.database;
                        if (sQLiteDatabase != null) {
                        }
                        throw th;
                    }
                }
                executeFast.dispose();
            } catch (Exception e7) {
                e = e7;
                sQLitePreparedStatement = null;
                sQLitePreparedStatement2 = executeFast;
                sQLiteCursor = null;
                checkSQLException(e);
                if (sQLiteCursor != null) {
                }
                if (sQLitePreparedStatement2 != null) {
                }
                if (sQLitePreparedStatement != null) {
                }
                sQLiteDatabase2 = this.database;
                if (sQLiteDatabase2 == null) {
                }
                sQLiteDatabase2.commitTransaction();
            } catch (Throwable th6) {
                th = th6;
                sQLitePreparedStatement2 = executeFast;
                sQLitePreparedStatement = null;
            }
            try {
                sQLitePreparedStatement.dispose();
                this.database.commitTransaction();
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda69
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesStorage.this.lambda$putWebPages$180(arrayList);
                    }
                });
                sQLiteDatabase2 = this.database;
                if (sQLiteDatabase2 == null) {
                    return;
                }
            } catch (Exception e8) {
                e = e8;
                executeFast = null;
                sQLitePreparedStatement2 = executeFast;
                sQLiteCursor = null;
                checkSQLException(e);
                if (sQLiteCursor != null) {
                }
                if (sQLitePreparedStatement2 != null) {
                }
                if (sQLitePreparedStatement != null) {
                }
                sQLiteDatabase2 = this.database;
                if (sQLiteDatabase2 == null) {
                }
                sQLiteDatabase2.commitTransaction();
            } catch (Throwable th7) {
                th = th7;
                sQLiteCursor = null;
                sQLitePreparedStatement2 = null;
                if (sQLiteCursor != null) {
                }
                if (sQLitePreparedStatement2 != null) {
                }
                if (sQLitePreparedStatement != null) {
                }
                sQLiteDatabase = this.database;
                if (sQLiteDatabase != null) {
                }
                throw th;
            }
            sQLiteDatabase2.commitTransaction();
        } catch (Throwable th8) {
            th = th8;
            sQLitePreparedStatement = null;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$putWidgetDialogs$159(int i, ArrayList arrayList) {
        try {
            this.database.beginTransaction();
            this.database.executeFast("DELETE FROM shortcut_widget WHERE id = " + i).stepThis().dispose();
            SQLitePreparedStatement executeFast = this.database.executeFast("REPLACE INTO shortcut_widget VALUES(?, ?, ?)");
            if (arrayList.isEmpty()) {
                executeFast.requery();
                executeFast.bindInteger(1, i);
                executeFast.bindLong(2, -1L);
                executeFast.bindInteger(3, 0);
                executeFast.step();
            } else {
                int size = arrayList.size();
                for (int i2 = 0; i2 < size; i2++) {
                    long j = ((TopicKey) arrayList.get(i2)).dialogId;
                    executeFast.requery();
                    executeFast.bindInteger(1, i);
                    executeFast.bindLong(2, j);
                    executeFast.bindInteger(3, i2);
                    executeFast.step();
                }
            }
            executeFast.dispose();
            this.database.commitTransaction();
        } catch (Exception e) {
            checkSQLException(e);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$readAllDialogs$61(ArrayList arrayList, ArrayList arrayList2, ArrayList arrayList3, LongSparseArray longSparseArray) {
        getMessagesController().putUsers(arrayList, true);
        getMessagesController().putChats(arrayList2, true);
        getMessagesController().putEncryptedChats(arrayList3, true);
        for (int i = 0; i < longSparseArray.size(); i++) {
            long keyAt = longSparseArray.keyAt(i);
            ReadDialog readDialog = (ReadDialog) longSparseArray.valueAt(i);
            if (getMessagesController().isForum(keyAt)) {
                getMessagesController().markAllTopicsAsRead(keyAt);
            }
            MessagesController messagesController = getMessagesController();
            int i2 = readDialog.lastMid;
            messagesController.markDialogAsRead(keyAt, i2, i2, readDialog.date, false, 0L, readDialog.unreadCount, true, 0);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Type inference failed for: r2v0, types: [org.telegram.messenger.MessagesStorage$1] */
    /* JADX WARN: Type inference failed for: r2v4 */
    public /* synthetic */ void lambda$readAllDialogs$62(int i) {
        Long valueOf;
        ArrayList<Long> arrayList;
        SQLiteCursor sQLiteCursor = 0;
        SQLiteCursor sQLiteCursor2 = null;
        try {
            try {
                ArrayList<Long> arrayList2 = new ArrayList<>();
                ArrayList<Long> arrayList3 = new ArrayList<>();
                ArrayList arrayList4 = new ArrayList();
                final LongSparseArray longSparseArray = new LongSparseArray();
                SQLiteCursor queryFinalized = i >= 0 ? this.database.queryFinalized(String.format(Locale.US, "SELECT did, last_mid, unread_count, date FROM dialogs WHERE unread_count > 0 AND folder_id = %1$d", Integer.valueOf(i)), new Object[0]) : this.database.queryFinalized("SELECT did, last_mid, unread_count, date FROM dialogs WHERE unread_count > 0", new Object[0]);
                while (queryFinalized.next()) {
                    try {
                        long longValue = queryFinalized.longValue(0);
                        if (!DialogObject.isFolderDialogId(longValue)) {
                            ReadDialog readDialog = new ReadDialog();
                            readDialog.lastMid = queryFinalized.intValue(1);
                            readDialog.unreadCount = queryFinalized.intValue(2);
                            readDialog.date = queryFinalized.intValue(3);
                            longSparseArray.put(longValue, readDialog);
                            if (DialogObject.isEncryptedDialog(longValue)) {
                                int encryptedChatId = DialogObject.getEncryptedChatId(longValue);
                                if (!arrayList4.contains(Integer.valueOf(encryptedChatId))) {
                                    arrayList4.add(Integer.valueOf(encryptedChatId));
                                }
                            } else if (DialogObject.isChatDialog(longValue)) {
                                long j = -longValue;
                                if (!arrayList3.contains(Long.valueOf(j))) {
                                    valueOf = Long.valueOf(j);
                                    arrayList = arrayList3;
                                    arrayList.add(valueOf);
                                }
                            } else if (!arrayList2.contains(Long.valueOf(longValue))) {
                                valueOf = Long.valueOf(longValue);
                                arrayList = arrayList2;
                                arrayList.add(valueOf);
                            }
                        }
                    } catch (Exception e) {
                        sQLiteCursor = queryFinalized;
                        e = e;
                        checkSQLException(e);
                        if (sQLiteCursor != 0) {
                            sQLiteCursor.dispose();
                            return;
                        }
                        return;
                    } catch (Throwable th) {
                        sQLiteCursor2 = queryFinalized;
                        th = th;
                        if (sQLiteCursor2 != null) {
                            sQLiteCursor2.dispose();
                        }
                        throw th;
                    }
                }
                queryFinalized.dispose();
                final ArrayList<TLRPC.User> arrayList5 = new ArrayList<>();
                final ArrayList<TLRPC.Chat> arrayList6 = new ArrayList<>();
                final ArrayList<TLRPC.EncryptedChat> arrayList7 = new ArrayList<>();
                if (!arrayList4.isEmpty()) {
                    getEncryptedChatsInternal(TextUtils.join(",", arrayList4), arrayList7, arrayList2);
                }
                if (!arrayList2.isEmpty()) {
                    getUsersInternal(arrayList2, arrayList5);
                }
                if (!arrayList3.isEmpty()) {
                    getChatsInternal(TextUtils.join(",", arrayList3), arrayList6);
                }
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda147
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesStorage.this.lambda$readAllDialogs$61(arrayList5, arrayList6, arrayList7, longSparseArray);
                    }
                });
            } catch (Throwable th2) {
                th = th2;
            }
        } catch (Exception e2) {
            e = e2;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$removeFromDownloadQueue$175(boolean z, int i, long j) {
        Throwable th;
        Exception e;
        SQLitePreparedStatement executeFast;
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                try {
                    if (z) {
                        SQLiteDatabase sQLiteDatabase = this.database;
                        Locale locale = Locale.US;
                        SQLiteCursor queryFinalized = sQLiteDatabase.queryFinalized(String.format(locale, "SELECT min(date) FROM download_queue WHERE type = %d", Integer.valueOf(i)), new Object[0]);
                        try {
                            int intValue = queryFinalized.next() ? queryFinalized.intValue(0) : -1;
                            queryFinalized.dispose();
                            if (intValue == -1) {
                                return;
                            } else {
                                executeFast = this.database.executeFast(String.format(locale, "UPDATE download_queue SET date = %d WHERE uid = %d AND type = %d", Integer.valueOf(intValue - 1), Long.valueOf(j), Integer.valueOf(i)));
                            }
                        } catch (Exception e2) {
                            e = e2;
                            sQLiteCursor = queryFinalized;
                            checkSQLException(e);
                            if (sQLiteCursor != null) {
                                sQLiteCursor.dispose();
                                return;
                            }
                            return;
                        } catch (Throwable th2) {
                            th = th2;
                            sQLiteCursor = queryFinalized;
                            if (sQLiteCursor != null) {
                                sQLiteCursor.dispose();
                            }
                            throw th;
                        }
                    } else {
                        executeFast = this.database.executeFast(String.format(Locale.US, "DELETE FROM download_queue WHERE uid = %d AND type = %d", Long.valueOf(j), Integer.valueOf(i)));
                    }
                    executeFast.stepThis().dispose();
                } catch (Exception e3) {
                    e = e3;
                }
            } catch (Throwable th3) {
                th = th3;
            }
        } catch (Exception e4) {
            e = e4;
        } catch (Throwable th4) {
            th = th4;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$removePendingTask$11(long j) {
        try {
            this.database.executeFast("DELETE FROM pending_tasks WHERE id = " + j).stepThis().dispose();
        } catch (Exception e) {
            checkSQLException(e);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$removeTopic$54(long j, int i) {
        try {
            SQLiteDatabase sQLiteDatabase = this.database;
            Locale locale = Locale.US;
            sQLiteDatabase.executeFast(String.format(locale, "DELETE FROM topics WHERE did = %d AND topic_id = %d", Long.valueOf(j), Integer.valueOf(i))).stepThis().dispose();
            this.database.executeFast(String.format(locale, "DELETE FROM messages_topics WHERE uid = %d AND topic_id = %d", Long.valueOf(j), Integer.valueOf(i))).stepThis().dispose();
        } catch (SQLiteException e) {
            e.printStackTrace();
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$removeTopics$55(ArrayList arrayList, long j) {
        try {
            String join = TextUtils.join(", ", arrayList);
            SQLiteDatabase sQLiteDatabase = this.database;
            Locale locale = Locale.US;
            sQLiteDatabase.executeFast(String.format(locale, "DELETE FROM topics WHERE did = %d AND topic_id IN (%s)", Long.valueOf(j), join)).stepThis().dispose();
            this.database.executeFast(String.format(locale, "DELETE FROM messages_topics WHERE uid = %d AND topic_id IN (%s)", Long.valueOf(j), join)).stepThis().dispose();
        } catch (SQLiteException e) {
            e.printStackTrace();
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$replaceMessageIfExists$212(MessageObject messageObject, ArrayList arrayList) {
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.replaceMessagesObjects, Long.valueOf(messageObject.getDialogId()), arrayList);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$replaceMessageIfExists$213(ArrayList arrayList) {
        if (getMessagesController().getSavedMessagesController().updateSavedDialogs(arrayList)) {
            getMessagesController().getSavedMessagesController().update();
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:108:0x035c  */
    /* JADX WARN: Removed duplicated region for block: B:110:0x0361  */
    /* JADX WARN: Removed duplicated region for block: B:112:0x0366  */
    /* JADX WARN: Removed duplicated region for block: B:114:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:121:0x037b  */
    /* JADX WARN: Removed duplicated region for block: B:123:0x0380  */
    /* JADX WARN: Removed duplicated region for block: B:125:0x0385  */
    /* JADX WARN: Removed duplicated region for block: B:154:0x024e  */
    /* JADX WARN: Removed duplicated region for block: B:190:0x02da A[Catch: Exception -> 0x0224, all -> 0x02ca, TryCatch #3 {all -> 0x02ca, blocks: (B:211:0x02c6, B:188:0x02d0, B:190:0x02da, B:191:0x02e5, B:193:0x02eb, B:195:0x02ff, B:197:0x0305, B:199:0x0319, B:201:0x0337), top: B:210:0x02c6 }] */
    /* JADX WARN: Removed duplicated region for block: B:201:0x0337 A[Catch: Exception -> 0x0224, all -> 0x02ca, TRY_LEAVE, TryCatch #3 {all -> 0x02ca, blocks: (B:211:0x02c6, B:188:0x02d0, B:190:0x02da, B:191:0x02e5, B:193:0x02eb, B:195:0x02ff, B:197:0x0305, B:199:0x0319, B:201:0x0337), top: B:210:0x02c6 }] */
    /* JADX WARN: Removed duplicated region for block: B:207:0x0343  */
    /* JADX WARN: Removed duplicated region for block: B:209:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:210:0x02c6 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:217:0x005f A[Catch: all -> 0x0222, Exception -> 0x0224, TRY_ENTER, TryCatch #1 {all -> 0x0222, blocks: (B:9:0x0034, B:19:0x004d, B:20:0x0063, B:22:0x0070, B:23:0x0073, B:81:0x021e, B:83:0x0228, B:160:0x0258, B:168:0x0274, B:169:0x027d, B:183:0x0279, B:217:0x005f, B:223:0x0351, B:224:0x0354), top: B:3:0x0007 }] */
    /* JADX WARN: Removed duplicated region for block: B:22:0x0070 A[Catch: all -> 0x0222, Exception -> 0x0224, TryCatch #1 {all -> 0x0222, blocks: (B:9:0x0034, B:19:0x004d, B:20:0x0063, B:22:0x0070, B:23:0x0073, B:81:0x021e, B:83:0x0228, B:160:0x0258, B:168:0x0274, B:169:0x027d, B:183:0x0279, B:217:0x005f, B:223:0x0351, B:224:0x0354), top: B:3:0x0007 }] */
    /* JADX WARN: Removed duplicated region for block: B:26:0x0091  */
    /* JADX WARN: Removed duplicated region for block: B:52:0x0149 A[Catch: all -> 0x0100, Exception -> 0x0104, TryCatch #17 {Exception -> 0x0104, all -> 0x0100, blocks: (B:41:0x00ea, B:43:0x00f9, B:44:0x010a, B:46:0x012f, B:50:0x0137, B:52:0x0149, B:53:0x0150, B:55:0x0157, B:56:0x0175, B:59:0x0184, B:61:0x019c, B:62:0x01bc, B:64:0x01c3, B:67:0x01ca, B:68:0x01d7, B:70:0x01e6, B:72:0x01ef, B:74:0x01f7, B:75:0x0201, B:76:0x0207, B:78:0x020b, B:79:0x0216, B:86:0x0212, B:87:0x01ea, B:88:0x01c8, B:89:0x01d1, B:90:0x01b5, B:95:0x016e, B:96:0x014c), top: B:40:0x00ea }] */
    /* JADX WARN: Removed duplicated region for block: B:55:0x0157 A[Catch: all -> 0x0100, Exception -> 0x0104, TryCatch #17 {Exception -> 0x0104, all -> 0x0100, blocks: (B:41:0x00ea, B:43:0x00f9, B:44:0x010a, B:46:0x012f, B:50:0x0137, B:52:0x0149, B:53:0x0150, B:55:0x0157, B:56:0x0175, B:59:0x0184, B:61:0x019c, B:62:0x01bc, B:64:0x01c3, B:67:0x01ca, B:68:0x01d7, B:70:0x01e6, B:72:0x01ef, B:74:0x01f7, B:75:0x0201, B:76:0x0207, B:78:0x020b, B:79:0x0216, B:86:0x0212, B:87:0x01ea, B:88:0x01c8, B:89:0x01d1, B:90:0x01b5, B:95:0x016e, B:96:0x014c), top: B:40:0x00ea }] */
    /* JADX WARN: Removed duplicated region for block: B:58:0x0179  */
    /* JADX WARN: Removed duplicated region for block: B:61:0x019c A[Catch: all -> 0x0100, Exception -> 0x0104, TryCatch #17 {Exception -> 0x0104, all -> 0x0100, blocks: (B:41:0x00ea, B:43:0x00f9, B:44:0x010a, B:46:0x012f, B:50:0x0137, B:52:0x0149, B:53:0x0150, B:55:0x0157, B:56:0x0175, B:59:0x0184, B:61:0x019c, B:62:0x01bc, B:64:0x01c3, B:67:0x01ca, B:68:0x01d7, B:70:0x01e6, B:72:0x01ef, B:74:0x01f7, B:75:0x0201, B:76:0x0207, B:78:0x020b, B:79:0x0216, B:86:0x0212, B:87:0x01ea, B:88:0x01c8, B:89:0x01d1, B:90:0x01b5, B:95:0x016e, B:96:0x014c), top: B:40:0x00ea }] */
    /* JADX WARN: Removed duplicated region for block: B:64:0x01c3 A[Catch: all -> 0x0100, Exception -> 0x0104, TryCatch #17 {Exception -> 0x0104, all -> 0x0100, blocks: (B:41:0x00ea, B:43:0x00f9, B:44:0x010a, B:46:0x012f, B:50:0x0137, B:52:0x0149, B:53:0x0150, B:55:0x0157, B:56:0x0175, B:59:0x0184, B:61:0x019c, B:62:0x01bc, B:64:0x01c3, B:67:0x01ca, B:68:0x01d7, B:70:0x01e6, B:72:0x01ef, B:74:0x01f7, B:75:0x0201, B:76:0x0207, B:78:0x020b, B:79:0x0216, B:86:0x0212, B:87:0x01ea, B:88:0x01c8, B:89:0x01d1, B:90:0x01b5, B:95:0x016e, B:96:0x014c), top: B:40:0x00ea }] */
    /* JADX WARN: Removed duplicated region for block: B:70:0x01e6 A[Catch: all -> 0x0100, Exception -> 0x0104, TryCatch #17 {Exception -> 0x0104, all -> 0x0100, blocks: (B:41:0x00ea, B:43:0x00f9, B:44:0x010a, B:46:0x012f, B:50:0x0137, B:52:0x0149, B:53:0x0150, B:55:0x0157, B:56:0x0175, B:59:0x0184, B:61:0x019c, B:62:0x01bc, B:64:0x01c3, B:67:0x01ca, B:68:0x01d7, B:70:0x01e6, B:72:0x01ef, B:74:0x01f7, B:75:0x0201, B:76:0x0207, B:78:0x020b, B:79:0x0216, B:86:0x0212, B:87:0x01ea, B:88:0x01c8, B:89:0x01d1, B:90:0x01b5, B:95:0x016e, B:96:0x014c), top: B:40:0x00ea }] */
    /* JADX WARN: Removed duplicated region for block: B:72:0x01ef A[Catch: all -> 0x0100, Exception -> 0x0104, TryCatch #17 {Exception -> 0x0104, all -> 0x0100, blocks: (B:41:0x00ea, B:43:0x00f9, B:44:0x010a, B:46:0x012f, B:50:0x0137, B:52:0x0149, B:53:0x0150, B:55:0x0157, B:56:0x0175, B:59:0x0184, B:61:0x019c, B:62:0x01bc, B:64:0x01c3, B:67:0x01ca, B:68:0x01d7, B:70:0x01e6, B:72:0x01ef, B:74:0x01f7, B:75:0x0201, B:76:0x0207, B:78:0x020b, B:79:0x0216, B:86:0x0212, B:87:0x01ea, B:88:0x01c8, B:89:0x01d1, B:90:0x01b5, B:95:0x016e, B:96:0x014c), top: B:40:0x00ea }] */
    /* JADX WARN: Removed duplicated region for block: B:78:0x020b A[Catch: all -> 0x0100, Exception -> 0x0104, TryCatch #17 {Exception -> 0x0104, all -> 0x0100, blocks: (B:41:0x00ea, B:43:0x00f9, B:44:0x010a, B:46:0x012f, B:50:0x0137, B:52:0x0149, B:53:0x0150, B:55:0x0157, B:56:0x0175, B:59:0x0184, B:61:0x019c, B:62:0x01bc, B:64:0x01c3, B:67:0x01ca, B:68:0x01d7, B:70:0x01e6, B:72:0x01ef, B:74:0x01f7, B:75:0x0201, B:76:0x0207, B:78:0x020b, B:79:0x0216, B:86:0x0212, B:87:0x01ea, B:88:0x01c8, B:89:0x01d1, B:90:0x01b5, B:95:0x016e, B:96:0x014c), top: B:40:0x00ea }] */
    /* JADX WARN: Removed duplicated region for block: B:81:0x021e A[Catch: all -> 0x0222, Exception -> 0x0224, TRY_ENTER, TryCatch #1 {all -> 0x0222, blocks: (B:9:0x0034, B:19:0x004d, B:20:0x0063, B:22:0x0070, B:23:0x0073, B:81:0x021e, B:83:0x0228, B:160:0x0258, B:168:0x0274, B:169:0x027d, B:183:0x0279, B:217:0x005f, B:223:0x0351, B:224:0x0354), top: B:3:0x0007 }] */
    /* JADX WARN: Removed duplicated region for block: B:83:0x0228 A[Catch: all -> 0x0222, Exception -> 0x0224, TRY_LEAVE, TryCatch #1 {all -> 0x0222, blocks: (B:9:0x0034, B:19:0x004d, B:20:0x0063, B:22:0x0070, B:23:0x0073, B:81:0x021e, B:83:0x0228, B:160:0x0258, B:168:0x0274, B:169:0x027d, B:183:0x0279, B:217:0x005f, B:223:0x0351, B:224:0x0354), top: B:3:0x0007 }] */
    /* JADX WARN: Removed duplicated region for block: B:86:0x0212 A[Catch: all -> 0x0100, Exception -> 0x0104, TryCatch #17 {Exception -> 0x0104, all -> 0x0100, blocks: (B:41:0x00ea, B:43:0x00f9, B:44:0x010a, B:46:0x012f, B:50:0x0137, B:52:0x0149, B:53:0x0150, B:55:0x0157, B:56:0x0175, B:59:0x0184, B:61:0x019c, B:62:0x01bc, B:64:0x01c3, B:67:0x01ca, B:68:0x01d7, B:70:0x01e6, B:72:0x01ef, B:74:0x01f7, B:75:0x0201, B:76:0x0207, B:78:0x020b, B:79:0x0216, B:86:0x0212, B:87:0x01ea, B:88:0x01c8, B:89:0x01d1, B:90:0x01b5, B:95:0x016e, B:96:0x014c), top: B:40:0x00ea }] */
    /* JADX WARN: Removed duplicated region for block: B:87:0x01ea A[Catch: all -> 0x0100, Exception -> 0x0104, TryCatch #17 {Exception -> 0x0104, all -> 0x0100, blocks: (B:41:0x00ea, B:43:0x00f9, B:44:0x010a, B:46:0x012f, B:50:0x0137, B:52:0x0149, B:53:0x0150, B:55:0x0157, B:56:0x0175, B:59:0x0184, B:61:0x019c, B:62:0x01bc, B:64:0x01c3, B:67:0x01ca, B:68:0x01d7, B:70:0x01e6, B:72:0x01ef, B:74:0x01f7, B:75:0x0201, B:76:0x0207, B:78:0x020b, B:79:0x0216, B:86:0x0212, B:87:0x01ea, B:88:0x01c8, B:89:0x01d1, B:90:0x01b5, B:95:0x016e, B:96:0x014c), top: B:40:0x00ea }] */
    /* JADX WARN: Removed duplicated region for block: B:89:0x01d1 A[Catch: all -> 0x0100, Exception -> 0x0104, TryCatch #17 {Exception -> 0x0104, all -> 0x0100, blocks: (B:41:0x00ea, B:43:0x00f9, B:44:0x010a, B:46:0x012f, B:50:0x0137, B:52:0x0149, B:53:0x0150, B:55:0x0157, B:56:0x0175, B:59:0x0184, B:61:0x019c, B:62:0x01bc, B:64:0x01c3, B:67:0x01ca, B:68:0x01d7, B:70:0x01e6, B:72:0x01ef, B:74:0x01f7, B:75:0x0201, B:76:0x0207, B:78:0x020b, B:79:0x0216, B:86:0x0212, B:87:0x01ea, B:88:0x01c8, B:89:0x01d1, B:90:0x01b5, B:95:0x016e, B:96:0x014c), top: B:40:0x00ea }] */
    /* JADX WARN: Removed duplicated region for block: B:90:0x01b5 A[Catch: all -> 0x0100, Exception -> 0x0104, TryCatch #17 {Exception -> 0x0104, all -> 0x0100, blocks: (B:41:0x00ea, B:43:0x00f9, B:44:0x010a, B:46:0x012f, B:50:0x0137, B:52:0x0149, B:53:0x0150, B:55:0x0157, B:56:0x0175, B:59:0x0184, B:61:0x019c, B:62:0x01bc, B:64:0x01c3, B:67:0x01ca, B:68:0x01d7, B:70:0x01e6, B:72:0x01ef, B:74:0x01f7, B:75:0x0201, B:76:0x0207, B:78:0x020b, B:79:0x0216, B:86:0x0212, B:87:0x01ea, B:88:0x01c8, B:89:0x01d1, B:90:0x01b5, B:95:0x016e, B:96:0x014c), top: B:40:0x00ea }] */
    /* JADX WARN: Removed duplicated region for block: B:91:0x017d  */
    /* JADX WARN: Removed duplicated region for block: B:95:0x016e A[Catch: all -> 0x0100, Exception -> 0x0104, TryCatch #17 {Exception -> 0x0104, all -> 0x0100, blocks: (B:41:0x00ea, B:43:0x00f9, B:44:0x010a, B:46:0x012f, B:50:0x0137, B:52:0x0149, B:53:0x0150, B:55:0x0157, B:56:0x0175, B:59:0x0184, B:61:0x019c, B:62:0x01bc, B:64:0x01c3, B:67:0x01ca, B:68:0x01d7, B:70:0x01e6, B:72:0x01ef, B:74:0x01f7, B:75:0x0201, B:76:0x0207, B:78:0x020b, B:79:0x0216, B:86:0x0212, B:87:0x01ea, B:88:0x01c8, B:89:0x01d1, B:90:0x01b5, B:95:0x016e, B:96:0x014c), top: B:40:0x00ea }] */
    /* JADX WARN: Removed duplicated region for block: B:96:0x014c A[Catch: all -> 0x0100, Exception -> 0x0104, TryCatch #17 {Exception -> 0x0104, all -> 0x0100, blocks: (B:41:0x00ea, B:43:0x00f9, B:44:0x010a, B:46:0x012f, B:50:0x0137, B:52:0x0149, B:53:0x0150, B:55:0x0157, B:56:0x0175, B:59:0x0184, B:61:0x019c, B:62:0x01bc, B:64:0x01c3, B:67:0x01ca, B:68:0x01d7, B:70:0x01e6, B:72:0x01ef, B:74:0x01f7, B:75:0x0201, B:76:0x0207, B:78:0x020b, B:79:0x0216, B:86:0x0212, B:87:0x01ea, B:88:0x01c8, B:89:0x01d1, B:90:0x01b5, B:95:0x016e, B:96:0x014c), top: B:40:0x00ea }] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$replaceMessageIfExists$214(TLRPC.Message message, boolean z, ArrayList arrayList, ArrayList arrayList2) {
        SQLitePreparedStatement sQLitePreparedStatement;
        SQLitePreparedStatement sQLitePreparedStatement2;
        SQLitePreparedStatement sQLitePreparedStatement3;
        Throwable th;
        SQLiteDatabase sQLiteDatabase;
        SQLitePreparedStatement sQLitePreparedStatement4;
        SQLitePreparedStatement sQLitePreparedStatement5;
        SQLitePreparedStatement sQLitePreparedStatement6;
        SQLiteDatabase sQLiteDatabase2;
        SQLiteCursor sQLiteCursor;
        int i;
        NativeByteBuffer nativeByteBuffer;
        final ArrayList arrayList3;
        int i2;
        SQLiteDatabase sQLiteDatabase3;
        SQLiteDatabase sQLiteDatabase4;
        String str;
        SQLitePreparedStatement executeFast;
        int i3;
        NativeByteBuffer nativeByteBuffer2;
        int i4;
        SQLitePreparedStatement executeFast2;
        SQLitePreparedStatement sQLitePreparedStatement7;
        int i5;
        int i6;
        int i7;
        NativeByteBuffer nativeByteBuffer3;
        int i8;
        NativeByteBuffer nativeByteBuffer4;
        TLRPC.MessageReplyHeader messageReplyHeader;
        int i9;
        TLRPC.MessageReplyHeader messageReplyHeader2;
        int i10;
        int i11 = 2;
        int i12 = 1;
        try {
            try {
                try {
                    sQLiteCursor = this.database.queryFinalized(String.format(Locale.US, "SELECT uid, read_state, custom_params FROM messages_v2 WHERE mid = %d AND uid = %d LIMIT 1", Integer.valueOf(message.id), Long.valueOf(MessageObject.getDialogId(message))), new Object[0]);
                    try {
                        try {
                        } catch (Exception e) {
                            e = e;
                            i = 0;
                            checkSQLException(e);
                            if (sQLiteCursor != null) {
                            }
                            nativeByteBuffer = null;
                            this.database.beginTransaction();
                            long j = 0;
                            if (message.dialog_id == 0) {
                            }
                            fixUnsupportedMedia(message);
                            MessageObject.normalizeFlags(message);
                            NativeByteBuffer nativeByteBuffer5 = new NativeByteBuffer(message.getObjectSize());
                            message.serializeToStream(nativeByteBuffer5);
                            long clientUserId = getUserConfig().getClientUserId();
                            arrayList3 = null;
                            i2 = 0;
                            while (i2 < i11) {
                            }
                            NativeByteBuffer nativeByteBuffer6 = nativeByteBuffer5;
                            if (MediaDataController.canAddMessageToMedia(message)) {
                            }
                            NativeByteBuffer nativeByteBuffer7 = nativeByteBuffer6;
                            if (nativeByteBuffer != null) {
                            }
                            nativeByteBuffer7.reuse();
                            this.database.commitTransaction();
                            if (z) {
                            }
                            if (arrayList3 != null) {
                            }
                            sQLiteDatabase3 = this.database;
                            if (sQLiteDatabase3 != null) {
                            }
                        }
                    } catch (Throwable th2) {
                        th = th2;
                        if (sQLiteCursor != null) {
                            sQLiteCursor.dispose();
                        }
                        throw th;
                    }
                } catch (Throwable th3) {
                    th = th3;
                    sQLitePreparedStatement3 = null;
                    sQLitePreparedStatement2 = null;
                    sQLiteDatabase = this.database;
                    if (sQLiteDatabase != null) {
                        sQLiteDatabase.commitTransaction();
                    }
                    if (sQLitePreparedStatement3 != null) {
                        sQLitePreparedStatement3.dispose();
                    }
                    if (sQLitePreparedStatement2 != null) {
                        sQLitePreparedStatement2.dispose();
                    }
                    throw th;
                }
            } catch (Exception e2) {
                e = e2;
                sQLiteCursor = null;
            } catch (Throwable th4) {
                th = th4;
                sQLiteCursor = null;
            }
            if (!sQLiteCursor.next()) {
                sQLiteCursor.dispose();
                sQLiteCursor.dispose();
                SQLiteDatabase sQLiteDatabase5 = this.database;
                if (sQLiteDatabase5 != null) {
                    sQLiteDatabase5.commitTransaction();
                    return;
                }
                return;
            }
            i = sQLiteCursor.intValue(1);
            try {
                nativeByteBuffer = sQLiteCursor.byteBufferValue(2);
                sQLiteCursor.dispose();
            } catch (Exception e3) {
                e = e3;
                checkSQLException(e);
                if (sQLiteCursor != null) {
                    sQLiteCursor.dispose();
                }
                nativeByteBuffer = null;
                this.database.beginTransaction();
                long j2 = 0;
                if (message.dialog_id == 0) {
                }
                fixUnsupportedMedia(message);
                MessageObject.normalizeFlags(message);
                NativeByteBuffer nativeByteBuffer52 = new NativeByteBuffer(message.getObjectSize());
                message.serializeToStream(nativeByteBuffer52);
                long clientUserId2 = getUserConfig().getClientUserId();
                arrayList3 = null;
                i2 = 0;
                while (i2 < i11) {
                }
                NativeByteBuffer nativeByteBuffer62 = nativeByteBuffer52;
                if (MediaDataController.canAddMessageToMedia(message)) {
                }
                NativeByteBuffer nativeByteBuffer72 = nativeByteBuffer62;
                if (nativeByteBuffer != null) {
                }
                nativeByteBuffer72.reuse();
                this.database.commitTransaction();
                if (z) {
                }
                if (arrayList3 != null) {
                }
                sQLiteDatabase3 = this.database;
                if (sQLiteDatabase3 != null) {
                }
            }
            this.database.beginTransaction();
            long j22 = 0;
            if (message.dialog_id == 0) {
                MessageObject.getDialogId(message);
            }
            fixUnsupportedMedia(message);
            MessageObject.normalizeFlags(message);
            NativeByteBuffer nativeByteBuffer522 = new NativeByteBuffer(message.getObjectSize());
            message.serializeToStream(nativeByteBuffer522);
            long clientUserId22 = getUserConfig().getClientUserId();
            arrayList3 = null;
            i2 = 0;
            while (i2 < i11) {
                boolean z2 = i2 == i12;
                try {
                    long topicId = MessageObject.getTopicId(this.currentAccount, message, isForum(message.dialog_id));
                    NativeByteBuffer nativeByteBuffer8 = nativeByteBuffer522;
                    long j3 = message.dialog_id;
                    try {
                        if (!z2) {
                            executeFast2 = this.database.executeFast("REPLACE INTO messages_v2 VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 0, ?, ?, ?)");
                        } else if (topicId == j22) {
                            i10 = 1;
                            i2 += i10;
                            nativeByteBuffer522 = nativeByteBuffer8;
                            i11 = 2;
                            i12 = 1;
                            j22 = 0;
                        } else {
                            executeFast2 = this.database.executeFast("REPLACE INTO messages_topics VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 0, ?, ?)");
                            if (j3 == clientUserId22) {
                                try {
                                    if (MessageObject.getSavedDialogId(clientUserId22, message) != j22) {
                                        if (arrayList3 == null) {
                                            arrayList3 = new ArrayList();
                                        }
                                        arrayList3.add(message);
                                    }
                                } catch (Exception e4) {
                                    e = e4;
                                    sQLitePreparedStatement = executeFast2;
                                    sQLitePreparedStatement6 = null;
                                    try {
                                        checkSQLException(e);
                                        sQLiteDatabase2 = this.database;
                                        if (sQLiteDatabase2 != null) {
                                        }
                                        if (sQLitePreparedStatement != null) {
                                        }
                                        if (sQLitePreparedStatement6 == null) {
                                        }
                                    } catch (Throwable th5) {
                                        th = th5;
                                        SQLitePreparedStatement sQLitePreparedStatement8 = sQLitePreparedStatement6;
                                        sQLitePreparedStatement4 = sQLitePreparedStatement;
                                        sQLitePreparedStatement5 = sQLitePreparedStatement8;
                                        SQLitePreparedStatement sQLitePreparedStatement9 = sQLitePreparedStatement4;
                                        sQLitePreparedStatement2 = sQLitePreparedStatement5;
                                        sQLitePreparedStatement3 = sQLitePreparedStatement9;
                                        sQLiteDatabase = this.database;
                                        if (sQLiteDatabase != null) {
                                        }
                                        if (sQLitePreparedStatement3 != null) {
                                        }
                                        if (sQLitePreparedStatement2 != null) {
                                        }
                                        throw th;
                                    }
                                } catch (Throwable th6) {
                                    th = th6;
                                    sQLitePreparedStatement3 = executeFast2;
                                    sQLitePreparedStatement2 = null;
                                    sQLiteDatabase = this.database;
                                    if (sQLiteDatabase != null) {
                                    }
                                    if (sQLitePreparedStatement3 != null) {
                                    }
                                    if (sQLitePreparedStatement2 != null) {
                                    }
                                    throw th;
                                }
                            }
                        }
                        sQLitePreparedStatement7.requery();
                        sQLitePreparedStatement7.bindInteger(1, message.id);
                        sQLitePreparedStatement7.bindLong(2, j3);
                        if (z2) {
                            sQLitePreparedStatement7.bindLong(3, topicId);
                            i5 = 4;
                        } else {
                            i5 = 3;
                        }
                        sQLitePreparedStatement7.bindInteger(i5, i);
                        sQLitePreparedStatement7.bindInteger(i5 + 1, message.send_state);
                        sQLitePreparedStatement7.bindInteger(i5 + 2, message.date);
                        int i13 = i5 + 4;
                        sQLitePreparedStatement7.bindByteBuffer(i5 + 3, nativeByteBuffer8);
                        int i14 = i5 + 5;
                        if (!MessageObject.isOut(message) && !message.from_scheduled) {
                            i6 = 0;
                            sQLitePreparedStatement7.bindInteger(i13, i6);
                            int i15 = i5 + 6;
                            sQLitePreparedStatement7.bindInteger(i14, message.ttl);
                            int i16 = i5 + 7;
                            sQLitePreparedStatement7.bindInteger(i15, (message.flags & 1024) == 0 ? message.views : getMessageMediaType(message));
                            if (message.replyStory == null) {
                                nativeByteBuffer3 = new NativeByteBuffer(message.replyStory.getObjectSize());
                                message.replyStory.serializeToStream(nativeByteBuffer3);
                                i7 = i16 + 1;
                                sQLitePreparedStatement7.bindByteBuffer(i16, nativeByteBuffer3);
                            } else {
                                i7 = i16 + 1;
                                sQLitePreparedStatement7.bindNull(i16);
                                nativeByteBuffer3 = null;
                            }
                            int i17 = message.stickerVerified;
                            sQLitePreparedStatement7.bindInteger(i7, i17 != 0 ? 1 : i17 == 2 ? 2 : 0);
                            sQLitePreparedStatement7.bindInteger(i7 + 1, message.mentioned ? 1 : 0);
                            int i18 = i7 + 3;
                            sQLitePreparedStatement7.bindInteger(i7 + 2, message.forwards);
                            if (message.replies == null) {
                                NativeByteBuffer nativeByteBuffer9 = new NativeByteBuffer(message.replies.getObjectSize());
                                message.replies.serializeToStream(nativeByteBuffer9);
                                sQLitePreparedStatement7.bindByteBuffer(i18, nativeByteBuffer9);
                                i8 = i7 + 4;
                                nativeByteBuffer4 = nativeByteBuffer9;
                            } else {
                                sQLitePreparedStatement7.bindNull(i18);
                                i8 = i7 + 4;
                                nativeByteBuffer4 = null;
                            }
                            messageReplyHeader = message.reply_to;
                            int i19 = i8 + 1;
                            if (messageReplyHeader == null) {
                                int i20 = messageReplyHeader.reply_to_top_id;
                                if (i20 == 0) {
                                    i20 = messageReplyHeader.reply_to_msg_id;
                                }
                                sQLitePreparedStatement7.bindInteger(i8, i20);
                                i9 = i19;
                            } else {
                                sQLitePreparedStatement7.bindInteger(i8, 0);
                                i9 = i19;
                            }
                            int i21 = i9 + 1;
                            nativeByteBuffer8 = nativeByteBuffer8;
                            sQLitePreparedStatement7.bindLong(i9, MessageObject.getChannelId(message));
                            int i22 = i9 + 2;
                            if (nativeByteBuffer == null) {
                                sQLitePreparedStatement7.bindByteBuffer(i21, nativeByteBuffer);
                            } else {
                                sQLitePreparedStatement7.bindNull(i21);
                            }
                            if (!z2) {
                                if ((message.flags & 131072) != 0) {
                                    sQLitePreparedStatement7.bindLong(i22, message.grouped_id);
                                    i22++;
                                } else {
                                    sQLitePreparedStatement7.bindNull(i22);
                                    i22++;
                                }
                            }
                            messageReplyHeader2 = message.reply_to;
                            if (messageReplyHeader2 == null) {
                                sQLitePreparedStatement7.bindInteger(i22, messageReplyHeader2.story_id);
                            } else {
                                sQLitePreparedStatement7.bindInteger(i22, 0);
                            }
                            sQLitePreparedStatement7.step();
                            sQLitePreparedStatement7.dispose();
                            if (nativeByteBuffer4 != null) {
                                nativeByteBuffer4.reuse();
                            }
                            if (nativeByteBuffer3 != null) {
                                nativeByteBuffer3.reuse();
                            }
                            i10 = 1;
                            i2 += i10;
                            nativeByteBuffer522 = nativeByteBuffer8;
                            i11 = 2;
                            i12 = 1;
                            j22 = 0;
                        }
                        i6 = 1;
                        sQLitePreparedStatement7.bindInteger(i13, i6);
                        int i152 = i5 + 6;
                        sQLitePreparedStatement7.bindInteger(i14, message.ttl);
                        int i162 = i5 + 7;
                        sQLitePreparedStatement7.bindInteger(i152, (message.flags & 1024) == 0 ? message.views : getMessageMediaType(message));
                        if (message.replyStory == null) {
                        }
                        int i172 = message.stickerVerified;
                        sQLitePreparedStatement7.bindInteger(i7, i172 != 0 ? 1 : i172 == 2 ? 2 : 0);
                        sQLitePreparedStatement7.bindInteger(i7 + 1, message.mentioned ? 1 : 0);
                        int i182 = i7 + 3;
                        sQLitePreparedStatement7.bindInteger(i7 + 2, message.forwards);
                        if (message.replies == null) {
                        }
                        messageReplyHeader = message.reply_to;
                        int i192 = i8 + 1;
                        if (messageReplyHeader == null) {
                        }
                        int i212 = i9 + 1;
                        nativeByteBuffer8 = nativeByteBuffer8;
                        sQLitePreparedStatement7.bindLong(i9, MessageObject.getChannelId(message));
                        int i222 = i9 + 2;
                        if (nativeByteBuffer == null) {
                        }
                        if (!z2) {
                        }
                        messageReplyHeader2 = message.reply_to;
                        if (messageReplyHeader2 == null) {
                        }
                        sQLitePreparedStatement7.step();
                        sQLitePreparedStatement7.dispose();
                        if (nativeByteBuffer4 != null) {
                        }
                        if (nativeByteBuffer3 != null) {
                        }
                        i10 = 1;
                        i2 += i10;
                        nativeByteBuffer522 = nativeByteBuffer8;
                        i11 = 2;
                        i12 = 1;
                        j22 = 0;
                    } catch (Exception e5) {
                        e = e5;
                        executeFast2 = sQLitePreparedStatement7;
                        sQLitePreparedStatement = executeFast2;
                        sQLitePreparedStatement6 = null;
                        checkSQLException(e);
                        sQLiteDatabase2 = this.database;
                        if (sQLiteDatabase2 != null) {
                            sQLiteDatabase2.commitTransaction();
                        }
                        if (sQLitePreparedStatement != null) {
                            sQLitePreparedStatement.dispose();
                        }
                        if (sQLitePreparedStatement6 == null) {
                            sQLitePreparedStatement6.dispose();
                            return;
                        }
                        return;
                    } catch (Throwable th7) {
                        th = th7;
                        executeFast2 = sQLitePreparedStatement7;
                        sQLitePreparedStatement3 = executeFast2;
                        sQLitePreparedStatement2 = null;
                        sQLiteDatabase = this.database;
                        if (sQLiteDatabase != null) {
                        }
                        if (sQLitePreparedStatement3 != null) {
                        }
                        if (sQLitePreparedStatement2 != null) {
                        }
                        throw th;
                    }
                    sQLitePreparedStatement7 = executeFast2;
                } catch (Exception e6) {
                    e = e6;
                    executeFast = null;
                    sQLitePreparedStatement6 = executeFast;
                    sQLitePreparedStatement = null;
                    checkSQLException(e);
                    sQLiteDatabase2 = this.database;
                    if (sQLiteDatabase2 != null) {
                    }
                    if (sQLitePreparedStatement != null) {
                    }
                    if (sQLitePreparedStatement6 == null) {
                    }
                } catch (Throwable th8) {
                    th = th8;
                    executeFast = null;
                    sQLitePreparedStatement2 = executeFast;
                    sQLitePreparedStatement3 = null;
                    sQLiteDatabase = this.database;
                    if (sQLiteDatabase != null) {
                    }
                    if (sQLitePreparedStatement3 != null) {
                    }
                    if (sQLitePreparedStatement2 != null) {
                    }
                    throw th;
                }
            }
            NativeByteBuffer nativeByteBuffer622 = nativeByteBuffer522;
            if (MediaDataController.canAddMessageToMedia(message)) {
                int i23 = 0;
                while (i23 < 2) {
                    boolean z3 = i23 == 1;
                    long topicId2 = MessageObject.getTopicId(this.currentAccount, message, isForum(message.dialog_id));
                    if (z3 && topicId2 == 0) {
                        nativeByteBuffer2 = nativeByteBuffer622;
                        i4 = 1;
                    } else {
                        if (i23 == 0) {
                            sQLiteDatabase4 = this.database;
                            str = "REPLACE INTO media_v4 VALUES(?, ?, ?, ?, ?)";
                        } else {
                            sQLiteDatabase4 = this.database;
                            str = "REPLACE INTO media_topics VALUES(?, ?, ?, ?, ?, ?)";
                        }
                        executeFast = sQLiteDatabase4.executeFast(str);
                        try {
                            executeFast.requery();
                            executeFast.bindInteger(1, message.id);
                            executeFast.bindLong(2, message.dialog_id);
                            if (i23 != 0) {
                                executeFast.bindLong(3, topicId2);
                                i3 = 4;
                            } else {
                                i3 = 3;
                            }
                            executeFast.bindInteger(i3, message.date);
                            executeFast.bindInteger(i3 + 1, MediaDataController.getMediaType(message));
                            nativeByteBuffer2 = nativeByteBuffer622;
                            executeFast.bindByteBuffer(i3 + 2, nativeByteBuffer2);
                            executeFast.step();
                            executeFast.dispose();
                            i4 = 1;
                        } catch (Exception e7) {
                            e = e7;
                            sQLitePreparedStatement6 = executeFast;
                            sQLitePreparedStatement = null;
                            checkSQLException(e);
                            sQLiteDatabase2 = this.database;
                            if (sQLiteDatabase2 != null) {
                            }
                            if (sQLitePreparedStatement != null) {
                            }
                            if (sQLitePreparedStatement6 == null) {
                            }
                        } catch (Throwable th9) {
                            th = th9;
                            sQLitePreparedStatement2 = executeFast;
                            sQLitePreparedStatement3 = null;
                            sQLiteDatabase = this.database;
                            if (sQLiteDatabase != null) {
                            }
                            if (sQLitePreparedStatement3 != null) {
                            }
                            if (sQLitePreparedStatement2 != null) {
                            }
                            throw th;
                        }
                    }
                    i23 += i4;
                    nativeByteBuffer622 = nativeByteBuffer2;
                }
            }
            NativeByteBuffer nativeByteBuffer722 = nativeByteBuffer622;
            if (nativeByteBuffer != null) {
                try {
                    nativeByteBuffer.reuse();
                } catch (Throwable th10) {
                    th = th10;
                    sQLitePreparedStatement5 = null;
                    sQLitePreparedStatement4 = null;
                    SQLitePreparedStatement sQLitePreparedStatement92 = sQLitePreparedStatement4;
                    sQLitePreparedStatement2 = sQLitePreparedStatement5;
                    sQLitePreparedStatement3 = sQLitePreparedStatement92;
                    sQLiteDatabase = this.database;
                    if (sQLiteDatabase != null) {
                    }
                    if (sQLitePreparedStatement3 != null) {
                    }
                    if (sQLitePreparedStatement2 != null) {
                    }
                    throw th;
                }
            }
            nativeByteBuffer722.reuse();
            this.database.commitTransaction();
            if (z) {
                HashMap hashMap = new HashMap();
                HashMap hashMap2 = new HashMap();
                for (int i24 = 0; i24 < arrayList.size(); i24++) {
                    TLRPC.User user = (TLRPC.User) arrayList.get(i24);
                    hashMap.put(Long.valueOf(user.id), user);
                }
                for (int i25 = 0; i25 < arrayList2.size(); i25++) {
                    TLRPC.Chat chat = (TLRPC.Chat) arrayList2.get(i25);
                    hashMap2.put(Long.valueOf(chat.id), chat);
                }
                final MessageObject messageObject = new MessageObject(this.currentAccount, message, (AbstractMap<Long, TLRPC.User>) hashMap, (AbstractMap<Long, TLRPC.Chat>) hashMap2, true, true);
                final ArrayList arrayList4 = new ArrayList();
                arrayList4.add(messageObject);
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda85
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesStorage.this.lambda$replaceMessageIfExists$212(messageObject, arrayList4);
                    }
                });
            }
            if (arrayList3 != null) {
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda86
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesStorage.this.lambda$replaceMessageIfExists$213(arrayList3);
                    }
                });
            }
            sQLiteDatabase3 = this.database;
            if (sQLiteDatabase3 != null) {
                sQLiteDatabase3.commitTransaction();
            }
        } catch (Exception e8) {
            e = e8;
            sQLitePreparedStatement = null;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$reset$58() {
        for (int i = 0; i < 2; i++) {
            getUserConfig().setDialogsLoadOffset(i, 0, 0, 0L, 0L, 0L, 0L);
            getUserConfig().setTotalDialogsCount(i, 0);
        }
        getUserConfig().clearFilters();
        getUserConfig().clearPinnedDialogsLoaded();
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.didClearDatabase, new Object[0]);
        getMediaDataController().loadAttachMenuBots(false, true);
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.onDatabaseReset, new Object[0]);
        getMessagesController().getStoriesController().cleanup();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$resetAllUnreadCounters$230() {
        ArrayList<MessagesController.DialogFilter> arrayList = getMessagesController().dialogFilters;
        int size = arrayList.size();
        for (int i = 0; i < size; i++) {
            arrayList.get(i).unreadCount = arrayList.get(i).pendingUnreadCount;
        }
        this.mainUnreadCount = this.pendingMainUnreadCount;
        this.archiveUnreadCount = this.pendingArchiveUnreadCount;
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.updateInterfaces, Integer.valueOf(MessagesController.UPDATE_MASK_READ_DIALOG_MESSAGE));
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ int lambda$resetDialogs$89(LongSparseIntArray longSparseIntArray, Long l, Long l2) {
        int i = longSparseIntArray.get(l.longValue());
        int i2 = longSparseIntArray.get(l2.longValue());
        if (i < i2) {
            return 1;
        }
        return i > i2 ? -1 : 0;
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Code restructure failed: missing block: B:49:0x022f, code lost:
    
        if (r9 != (-1)) goto L45;
     */
    /* JADX WARN: Removed duplicated region for block: B:125:0x035e  */
    /* JADX WARN: Removed duplicated region for block: B:127:0x0363  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$resetDialogs$90(TLRPC.messages_Dialogs messages_dialogs, int i, int i2, int i3, int i4, int i5, TLRPC.Message message, int i6, LongSparseArray longSparseArray, LongSparseArray longSparseArray2) {
        SQLiteCursor sQLiteCursor;
        SQLiteDatabase sQLiteDatabase;
        long j;
        long j2;
        long j3;
        long j4;
        long j5;
        int i7;
        try {
            ArrayList arrayList = new ArrayList();
            int size = messages_dialogs.dialogs.size() - i;
            final LongSparseIntArray longSparseIntArray = new LongSparseIntArray();
            ArrayList arrayList2 = new ArrayList();
            ArrayList arrayList3 = new ArrayList();
            for (int i8 = i; i8 < messages_dialogs.dialogs.size(); i8++) {
                arrayList3.add(Long.valueOf(messages_dialogs.dialogs.get(i8).id));
            }
            SQLiteCursor queryFinalized = this.database.queryFinalized("SELECT did, pinned FROM dialogs WHERE 1", new Object[0]);
            int i9 = 0;
            while (queryFinalized.next()) {
                try {
                    long longValue = queryFinalized.longValue(0);
                    int intValue = queryFinalized.intValue(1);
                    if (!DialogObject.isEncryptedDialog(longValue)) {
                        arrayList.add(Long.valueOf(longValue));
                        if (intValue > 0) {
                            i9 = Math.max(intValue, i9);
                            longSparseIntArray.put(longValue, intValue);
                            arrayList2.add(Long.valueOf(longValue));
                        }
                    }
                } catch (Exception e) {
                    e = e;
                    sQLiteCursor = queryFinalized;
                    try {
                        checkSQLException(e);
                        SQLiteDatabase sQLiteDatabase2 = this.database;
                        if (sQLiteDatabase2 != null) {
                            sQLiteDatabase2.commitTransaction();
                        }
                        if (sQLiteCursor != null) {
                            sQLiteCursor.dispose();
                            return;
                        }
                        return;
                    } catch (Throwable th) {
                        th = th;
                        sQLiteDatabase = this.database;
                        if (sQLiteDatabase != null) {
                            sQLiteDatabase.commitTransaction();
                        }
                        if (sQLiteCursor != null) {
                            sQLiteCursor.dispose();
                        }
                        throw th;
                    }
                } catch (Throwable th2) {
                    th = th2;
                    sQLiteCursor = queryFinalized;
                    sQLiteDatabase = this.database;
                    if (sQLiteDatabase != null) {
                    }
                    if (sQLiteCursor != null) {
                    }
                    throw th;
                }
            }
            Collections.sort(arrayList2, new Comparator() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda82
                @Override // java.util.Comparator
                public final int compare(Object obj, Object obj2) {
                    int lambda$resetDialogs$89;
                    lambda$resetDialogs$89 = MessagesStorage.lambda$resetDialogs$89(LongSparseIntArray.this, (Long) obj, (Long) obj2);
                    return lambda$resetDialogs$89;
                }
            });
            while (arrayList2.size() < size) {
                arrayList2.add(0, 0L);
            }
            queryFinalized.dispose();
            String str = "(" + TextUtils.join(",", arrayList) + ")";
            this.database.beginTransaction();
            this.database.executeFast("DELETE FROM chat_pinned_count WHERE uid IN " + str).stepThis().dispose();
            this.database.executeFast("DELETE FROM chat_pinned_v2 WHERE uid IN " + str).stepThis().dispose();
            this.database.executeFast("DELETE FROM dialogs WHERE did IN " + str).stepThis().dispose();
            this.database.executeFast("DELETE FROM messages_v2 WHERE uid IN " + str).stepThis().dispose();
            this.database.executeFast("DELETE FROM polls_v2 WHERE 1").stepThis().dispose();
            this.database.executeFast("DELETE FROM bot_keyboard WHERE uid IN " + str).stepThis().dispose();
            this.database.executeFast("DELETE FROM bot_keyboard_topics WHERE uid IN " + str).stepThis().dispose();
            this.database.executeFast("DELETE FROM media_v4 WHERE uid IN " + str).stepThis().dispose();
            this.database.executeFast("DELETE FROM messages_holes WHERE uid IN " + str).stepThis().dispose();
            this.database.executeFast("DELETE FROM media_holes_v2 WHERE uid IN " + str).stepThis().dispose();
            this.database.commitTransaction();
            for (int i10 = 0; i10 < size; i10++) {
                TLRPC.Dialog dialog = messages_dialogs.dialogs.get(i + i10);
                if (!(dialog instanceof TLRPC.TL_dialog) || dialog.pinned) {
                    int indexOf = arrayList2.indexOf(Long.valueOf(dialog.id));
                    int indexOf2 = arrayList3.indexOf(Long.valueOf(dialog.id));
                    if (indexOf != -1 && indexOf2 != -1) {
                        if (indexOf == indexOf2) {
                            i7 = longSparseIntArray.get(dialog.id, -1);
                            if (i7 != -1) {
                                dialog.pinnedNum = i7;
                            }
                        } else {
                            i7 = longSparseIntArray.get(((Long) arrayList2.get(indexOf2)).longValue(), -1);
                        }
                    }
                    if (dialog.pinnedNum == 0) {
                        dialog.pinnedNum = (size - i10) + i9;
                    }
                }
            }
            putDialogsInternal(messages_dialogs, 0);
            lambda$saveDiffParams$35(i2, i3, i4, i5);
            int totalDialogsCount = getUserConfig().getTotalDialogsCount(0) + messages_dialogs.dialogs.size();
            int i11 = message.id;
            int i12 = message.date;
            TLRPC.Peer peer = message.peer_id;
            long j6 = peer.channel_id;
            if (j6 != 0) {
                int i13 = 0;
                while (true) {
                    if (i13 >= messages_dialogs.chats.size()) {
                        j2 = 0;
                        break;
                    }
                    TLRPC.Chat chat = messages_dialogs.chats.get(i13);
                    if (chat.id == j6) {
                        j2 = chat.access_hash;
                        break;
                    }
                    i13++;
                }
                j = j6;
                j3 = 0;
                j4 = 0;
            } else {
                long j7 = peer.chat_id;
                if (j7 != 0) {
                    int i14 = 0;
                    while (true) {
                        if (i14 >= messages_dialogs.chats.size()) {
                            j2 = 0;
                            break;
                        }
                        TLRPC.Chat chat2 = messages_dialogs.chats.get(i14);
                        if (chat2.id == j7) {
                            j2 = chat2.access_hash;
                            break;
                        }
                        i14++;
                    }
                    j4 = j7;
                    j3 = 0;
                    j = 0;
                } else {
                    long j8 = peer.user_id;
                    j = 0;
                    if (j8 != 0) {
                        int i15 = 0;
                        while (true) {
                            if (i15 >= messages_dialogs.users.size()) {
                                j5 = 0;
                                break;
                            }
                            TLRPC.User user = messages_dialogs.users.get(i15);
                            if (user.id == j8) {
                                j5 = user.access_hash;
                                break;
                            }
                            i15++;
                        }
                        j4 = 0;
                        j2 = j5;
                        j3 = j8;
                    } else {
                        j2 = 0;
                        j3 = 0;
                        j4 = 0;
                    }
                }
            }
            for (int i16 = 0; i16 < 2; i16++) {
                getUserConfig().setDialogsLoadOffset(i16, i11, i12, j3, j4, j, j2);
                getUserConfig().setTotalDialogsCount(i16, totalDialogsCount);
            }
            getUserConfig().draftsLoaded = false;
            getUserConfig().saveConfig(false);
            getMessagesController().completeDialogsReset(messages_dialogs, i6, i2, i3, i4, i5, longSparseArray, longSparseArray2, message);
            SQLiteDatabase sQLiteDatabase3 = this.database;
            if (sQLiteDatabase3 != null) {
                sQLiteDatabase3.commitTransaction();
            }
        } catch (Exception e2) {
            e = e2;
            sQLiteCursor = null;
        } catch (Throwable th3) {
            th = th3;
            sQLiteCursor = null;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:29:0x00f8  */
    /* JADX WARN: Removed duplicated region for block: B:31:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:35:0x00fe  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$resetMentionsCount$108(long j, long j2, int i) {
        SQLiteCursor queryFinalized;
        SQLiteCursor sQLiteCursor = null;
        try {
            if (j == 0) {
                try {
                    queryFinalized = this.database.queryFinalized("SELECT unread_count_i FROM dialogs WHERE did = " + j2, new Object[0]);
                } catch (Exception e) {
                    e = e;
                }
                try {
                    int intValue = queryFinalized.next() ? queryFinalized.intValue(0) : 0;
                    queryFinalized.dispose();
                    if (intValue == 0 && i == 0) {
                        return;
                    }
                    if (i == 0) {
                        this.database.executeFast(String.format(Locale.US, "UPDATE messages_v2 SET read_state = read_state | 2 WHERE uid = %d AND mention = 1 AND read_state IN(0, 1)", Long.valueOf(j2))).stepThis().dispose();
                    }
                    this.database.executeFast(String.format(Locale.US, "UPDATE dialogs SET unread_count_i = %d WHERE did = %d", Integer.valueOf(i), Long.valueOf(j2))).stepThis().dispose();
                    LongSparseIntArray longSparseIntArray = new LongSparseIntArray(1);
                    longSparseIntArray.put(j2, i);
                    getMessagesController().processDialogsUpdateRead(null, longSparseIntArray);
                    if (i == 0) {
                        updateFiltersReadCounter(null, longSparseIntArray, true);
                        return;
                    }
                    return;
                } catch (Exception e2) {
                    e = e2;
                    sQLiteCursor = queryFinalized;
                    checkSQLException(e);
                    if (sQLiteCursor == null) {
                        sQLiteCursor.dispose();
                        return;
                    }
                    return;
                } catch (Throwable th) {
                    th = th;
                    sQLiteCursor = queryFinalized;
                    if (sQLiteCursor != null) {
                        sQLiteCursor.dispose();
                    }
                    throw th;
                }
            }
            try {
                this.database.executeFast(String.format(Locale.US, "UPDATE topics SET unread_mentions = %d WHERE did = %d AND topic_id = %d", Integer.valueOf(i), Long.valueOf(j2), Long.valueOf(j))).stepThis().dispose();
                TopicsController.TopicUpdate topicUpdate = new TopicsController.TopicUpdate();
                topicUpdate.dialogId = j2;
                topicUpdate.topicId = j;
                topicUpdate.onlyCounters = true;
                topicUpdate.unreadMentions = i;
                topicUpdate.unreadCount = -1;
                getMessagesController().getTopicsController().processUpdate(Collections.singletonList(topicUpdate));
            } catch (Exception e3) {
                e = e3;
                sQLiteCursor = null;
                checkSQLException(e);
                if (sQLiteCursor == null) {
                }
            } catch (Throwable th2) {
                th = th2;
                sQLiteCursor = null;
                if (sQLiteCursor != null) {
                }
                throw th;
            }
        } catch (Throwable th3) {
            th = th3;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$saveBotCache$120(TLObject tLObject, String str) {
        int currentTime;
        int i;
        SQLitePreparedStatement executeFast;
        SQLitePreparedStatement sQLitePreparedStatement = null;
        try {
            try {
                currentTime = getConnectionsManager().getCurrentTime();
            } catch (Throwable th) {
                th = th;
            }
        } catch (Exception e) {
            e = e;
        }
        try {
            if (!(tLObject instanceof TLRPC.TL_messages_botCallbackAnswer)) {
                if (tLObject instanceof TLRPC.TL_messages_botResults) {
                    i = ((TLRPC.TL_messages_botResults) tLObject).cache_time;
                }
                executeFast = this.database.executeFast("REPLACE INTO botcache VALUES(?, ?, ?)");
                NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(tLObject.getObjectSize());
                tLObject.serializeToStream(nativeByteBuffer);
                executeFast.bindString(1, str);
                executeFast.bindInteger(2, currentTime);
                executeFast.bindByteBuffer(3, nativeByteBuffer);
                executeFast.step();
                executeFast.dispose();
                nativeByteBuffer.reuse();
                return;
            }
            i = ((TLRPC.TL_messages_botCallbackAnswer) tLObject).cache_time;
            NativeByteBuffer nativeByteBuffer2 = new NativeByteBuffer(tLObject.getObjectSize());
            tLObject.serializeToStream(nativeByteBuffer2);
            executeFast.bindString(1, str);
            executeFast.bindInteger(2, currentTime);
            executeFast.bindByteBuffer(3, nativeByteBuffer2);
            executeFast.step();
            executeFast.dispose();
            nativeByteBuffer2.reuse();
            return;
        } catch (Exception e2) {
            e = e2;
            sQLitePreparedStatement = executeFast;
            checkSQLException(e);
            if (sQLitePreparedStatement != null) {
                sQLitePreparedStatement.dispose();
                return;
            }
            return;
        } catch (Throwable th2) {
            th = th2;
            sQLitePreparedStatement = executeFast;
            if (sQLitePreparedStatement != null) {
                sQLitePreparedStatement.dispose();
            }
            throw th;
        }
        currentTime += i;
        executeFast = this.database.executeFast("REPLACE INTO botcache VALUES(?, ?, ?)");
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$saveChannelPts$34(int i, long j) {
        try {
            SQLitePreparedStatement executeFast = this.database.executeFast("UPDATE dialogs SET pts = ? WHERE did = ?");
            executeFast.bindInteger(1, i);
            executeFast.bindLong(2, -j);
            executeFast.step();
            executeFast.dispose();
        } catch (Exception e) {
            checkSQLException(e);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$saveChatInviter$126(long j, long j2) {
        SQLitePreparedStatement sQLitePreparedStatement = null;
        try {
            try {
                sQLitePreparedStatement = this.database.executeFast("UPDATE chat_settings_v2 SET inviter = ? WHERE uid = ?");
                sQLitePreparedStatement.requery();
                sQLitePreparedStatement.bindLong(1, j);
                sQLitePreparedStatement.bindLong(2, j2);
                sQLitePreparedStatement.step();
                sQLitePreparedStatement.dispose();
            } catch (Exception e) {
                checkSQLException(e);
                if (sQLitePreparedStatement == null) {
                    return;
                }
            }
            sQLitePreparedStatement.dispose();
        } catch (Throwable th) {
            if (sQLitePreparedStatement != null) {
                sQLitePreparedStatement.dispose();
            }
            throw th;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$saveChatLinksCount$127(int i, long j) {
        SQLitePreparedStatement sQLitePreparedStatement = null;
        try {
            try {
                sQLitePreparedStatement = this.database.executeFast("UPDATE chat_settings_v2 SET links = ? WHERE uid = ?");
                sQLitePreparedStatement.requery();
                sQLitePreparedStatement.bindInteger(1, i);
                sQLitePreparedStatement.bindLong(2, j);
                sQLitePreparedStatement.step();
                sQLitePreparedStatement.dispose();
            } catch (Exception e) {
                checkSQLException(e);
                if (sQLitePreparedStatement != null) {
                    sQLitePreparedStatement.dispose();
                }
            }
        } catch (Throwable th) {
            if (sQLitePreparedStatement != null) {
                sQLitePreparedStatement.dispose();
            }
            throw th;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$saveDialogFilter$70() {
        ArrayList<MessagesController.DialogFilter> arrayList = getMessagesController().dialogFilters;
        int size = arrayList.size();
        for (int i = 0; i < size; i++) {
            arrayList.get(i).unreadCount = arrayList.get(i).pendingUnreadCount;
        }
        this.mainUnreadCount = this.pendingMainUnreadCount;
        this.archiveUnreadCount = this.pendingArchiveUnreadCount;
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.updateInterfaces, Integer.valueOf(MessagesController.UPDATE_MASK_READ_DIALOG_MESSAGE));
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$saveDialogFilter$71(MessagesController.DialogFilter dialogFilter, boolean z, boolean z2) {
        saveDialogFilterInternal(dialogFilter, z, z2);
        calcUnreadCounters(false);
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda184
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$saveDialogFilter$70();
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$saveDialogFiltersOrder$72(ArrayList arrayList) {
        this.dialogFilters.clear();
        this.dialogFiltersMap.clear();
        this.dialogFilters.addAll(arrayList);
        for (int i = 0; i < arrayList.size(); i++) {
            ((MessagesController.DialogFilter) arrayList.get(i)).order = i;
            this.dialogFiltersMap.put(((MessagesController.DialogFilter) arrayList.get(i)).id, (MessagesController.DialogFilter) arrayList.get(i));
        }
        saveDialogFiltersOrderInternal();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$saveSecretParams$7(int i, int i2, byte[] bArr) {
        try {
            SQLitePreparedStatement executeFast = this.database.executeFast("UPDATE params SET lsv = ?, sg = ?, pbytes = ? WHERE id = 1");
            executeFast.bindInteger(1, i);
            executeFast.bindInteger(2, i2);
            NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(bArr != null ? bArr.length : 1);
            if (bArr != null) {
                nativeByteBuffer.writeBytes(bArr);
            }
            executeFast.bindByteBuffer(3, nativeByteBuffer);
            executeFast.step();
            executeFast.dispose();
            nativeByteBuffer.reuse();
        } catch (Exception e) {
            checkSQLException(e);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$saveTopics$45(long j, List list, boolean z, int i) {
        saveTopicsInternal(j, list, z, true, i);
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Can't wrap try/catch for region: R(34:0|1|2|3|4|(1:6)(1:155)|7|(1:9)(1:154)|10|11|12|(1:14)(2:145|(1:147)(21:148|16|(3:18|(1:20)(1:22)|21)|23|(1:25)(1:144)|26|28|29|30|(7:34|(3:89|90|(5:95|(1:113)(5:97|(3:99|(1:101)|111)(1:112)|102|(2:106|(1:108))|111)|109|110|56))(10:37|38|39|40|41|42|(4:45|(2:47|48)(1:50)|49|43)|51|52|53)|54|55|56|31|32)|114|115|(1:117)|118|119|(1:121)|122|(1:124)(1:131)|125|126|(3:128|69|70)(1:129)))|15|16|(0)|23|(0)(0)|26|28|29|30|(2:31|32)|114|115|(0)|118|119|(0)|122|(0)(0)|125|126|(0)(0)|(1:(0))) */
    /* JADX WARN: Code restructure failed: missing block: B:138:0x0261, code lost:
    
        r0 = e;
     */
    /* JADX WARN: Code restructure failed: missing block: B:139:0x002f, code lost:
    
        r7 = null;
     */
    /* JADX WARN: Code restructure failed: missing block: B:141:0x025e, code lost:
    
        r0 = th;
     */
    /* JADX WARN: Code restructure failed: missing block: B:142:0x0028, code lost:
    
        r7 = null;
     */
    /* JADX WARN: Removed duplicated region for block: B:117:0x021e A[Catch: all -> 0x0175, Exception -> 0x0179, TryCatch #10 {Exception -> 0x0179, all -> 0x0175, blocks: (B:40:0x00fe, B:90:0x018b, B:93:0x0192, B:95:0x019c, B:97:0x01a9, B:99:0x01ad, B:102:0x01bc, B:104:0x01c2, B:106:0x01c8, B:108:0x01dd, B:109:0x01e5, B:115:0x0211, B:117:0x021e, B:118:0x0221, B:121:0x0229, B:122:0x0230, B:124:0x0236, B:125:0x0242), top: B:39:0x00fe }] */
    /* JADX WARN: Removed duplicated region for block: B:121:0x0229 A[Catch: all -> 0x0175, Exception -> 0x0179, TRY_ENTER, TryCatch #10 {Exception -> 0x0179, all -> 0x0175, blocks: (B:40:0x00fe, B:90:0x018b, B:93:0x0192, B:95:0x019c, B:97:0x01a9, B:99:0x01ad, B:102:0x01bc, B:104:0x01c2, B:106:0x01c8, B:108:0x01dd, B:109:0x01e5, B:115:0x0211, B:117:0x021e, B:118:0x0221, B:121:0x0229, B:122:0x0230, B:124:0x0236, B:125:0x0242), top: B:39:0x00fe }] */
    /* JADX WARN: Removed duplicated region for block: B:124:0x0236 A[Catch: all -> 0x0175, Exception -> 0x0179, TryCatch #10 {Exception -> 0x0179, all -> 0x0175, blocks: (B:40:0x00fe, B:90:0x018b, B:93:0x0192, B:95:0x019c, B:97:0x01a9, B:99:0x01ad, B:102:0x01bc, B:104:0x01c2, B:106:0x01c8, B:108:0x01dd, B:109:0x01e5, B:115:0x0211, B:117:0x021e, B:118:0x0221, B:121:0x0229, B:122:0x0230, B:124:0x0236, B:125:0x0242), top: B:39:0x00fe }] */
    /* JADX WARN: Removed duplicated region for block: B:128:0x025b  */
    /* JADX WARN: Removed duplicated region for block: B:129:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:131:0x0240  */
    /* JADX WARN: Removed duplicated region for block: B:144:0x00c0  */
    /* JADX WARN: Removed duplicated region for block: B:18:0x00a0 A[Catch: all -> 0x0082, Exception -> 0x0086, TryCatch #13 {Exception -> 0x0086, all -> 0x0082, blocks: (B:12:0x0052, B:14:0x0077, B:16:0x0096, B:18:0x00a0, B:21:0x00ae, B:25:0x00b8, B:26:0x00c1, B:145:0x008a, B:147:0x008e), top: B:11:0x0052 }] */
    /* JADX WARN: Removed duplicated region for block: B:25:0x00b8 A[Catch: all -> 0x0082, Exception -> 0x0086, TryCatch #13 {Exception -> 0x0086, all -> 0x0082, blocks: (B:12:0x0052, B:14:0x0077, B:16:0x0096, B:18:0x00a0, B:21:0x00ae, B:25:0x00b8, B:26:0x00c1, B:145:0x008a, B:147:0x008e), top: B:11:0x0052 }] */
    /* JADX WARN: Removed duplicated region for block: B:34:0x00e0 A[Catch: all -> 0x017d, Exception -> 0x0181, TryCatch #9 {Exception -> 0x0181, all -> 0x017d, blocks: (B:32:0x00da, B:34:0x00e0, B:37:0x00ed), top: B:31:0x00da }] */
    /* JADX WARN: Removed duplicated region for block: B:64:0x0269  */
    /* JADX WARN: Removed duplicated region for block: B:66:0x026e  */
    /* JADX WARN: Removed duplicated region for block: B:68:0x0273  */
    /* JADX WARN: Removed duplicated region for block: B:72:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:76:0x027c  */
    /* JADX WARN: Removed duplicated region for block: B:78:0x0281  */
    /* JADX WARN: Removed duplicated region for block: B:80:0x0286  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$searchSavedByTag$97(String str, long j, TLRPC.Reaction reaction, int i, int i2, boolean z, final Utilities.Callback4 callback4) {
        SQLiteCursor sQLiteCursor;
        SQLitePreparedStatement sQLitePreparedStatement;
        SQLiteCursor sQLiteCursor2;
        SQLiteCursor sQLiteCursor3;
        long clientUserId;
        String str2;
        SQLitePreparedStatement executeFast;
        final ArrayList<TLRPC.User> arrayList;
        final ArrayList<TLRPC.Chat> arrayList2;
        ArrayList arrayList3;
        ArrayList<Long> arrayList4;
        ArrayList arrayList5;
        ArrayList<TLRPC.Document> arrayList6;
        int i3;
        long j2;
        SQLiteCursor sQLiteCursor4;
        ArrayList<TLRPC.Document> arrayList7;
        SQLiteCursor sQLiteCursor5;
        ArrayList<TLRPC.Document> arrayList8;
        TLRPC.Message TLdeserialize;
        int i4;
        NativeByteBuffer byteBufferValue;
        try {
            clientUserId = getUserConfig().getClientUserId();
            SQLiteDatabase sQLiteDatabase = this.database;
            StringBuilder sb = new StringBuilder();
            sb.append("SELECT m.data, m.replydata, m.group_id FROM messages_v2 m INNER JOIN tag_message_id t ON m.mid = t.mid WHERE m.uid = ? AND t.tag = ?");
            str2 = "";
            sb.append(!TextUtils.isEmpty(str) ? " AND t.text LIKE '%' || ? || '%'" : "");
            sb.append(j != 0 ? " AND topic_id = ? " : "");
            sb.append(" ORDER BY m.mid DESC LIMIT ? OFFSET ?");
            executeFast = sQLiteDatabase.executeFast(sb.toString());
            try {
                arrayList = new ArrayList<>();
                arrayList2 = new ArrayList<>();
                arrayList3 = new ArrayList();
                arrayList4 = new ArrayList<>();
                arrayList5 = new ArrayList();
                arrayList6 = new ArrayList<>();
                executeFast.bindLong(1, clientUserId);
            } catch (Exception e) {
                e = e;
                sQLitePreparedStatement = executeFast;
                sQLiteCursor = null;
                sQLiteCursor2 = null;
                try {
                    FileLog.e(e);
                    if (sQLitePreparedStatement != null) {
                        sQLitePreparedStatement.dispose();
                    }
                    if (sQLiteCursor != null) {
                        sQLiteCursor.dispose();
                    }
                    if (sQLiteCursor2 == null) {
                        sQLiteCursor3 = sQLiteCursor2;
                        sQLiteCursor3.dispose();
                        return;
                    }
                    return;
                } catch (Throwable th) {
                    th = th;
                    if (sQLitePreparedStatement != null) {
                        sQLitePreparedStatement.dispose();
                    }
                    if (sQLiteCursor != null) {
                        sQLiteCursor.dispose();
                    }
                    if (sQLiteCursor2 != null) {
                        sQLiteCursor2.dispose();
                    }
                    throw th;
                }
            } catch (Throwable th2) {
                th = th2;
                sQLitePreparedStatement = executeFast;
                sQLiteCursor = null;
                sQLiteCursor2 = null;
                if (sQLitePreparedStatement != null) {
                }
                if (sQLiteCursor != null) {
                }
                if (sQLiteCursor2 != null) {
                }
                throw th;
            }
        } catch (Exception e2) {
            e = e2;
            sQLiteCursor = null;
        } catch (Throwable th3) {
            th = th3;
            sQLiteCursor = null;
        }
        if (reaction instanceof TLRPC.TL_reactionEmoji) {
            j2 = ((TLRPC.TL_reactionEmoji) reaction).emoticon.hashCode();
        } else {
            if (!(reaction instanceof TLRPC.TL_reactionCustomEmoji)) {
                i3 = 2;
                j2 = 0;
                executeFast.bindLong(i3, j2);
                int i5 = 3;
                if (!TextUtils.isEmpty(str)) {
                    String translitString = LocaleController.getInstance().getTranslitString(str);
                    if (translitString != null) {
                        str2 = translitString;
                    }
                    executeFast.bindString(3, str2);
                    i5 = 4;
                }
                if (j == 0) {
                    executeFast.bindLong(i5, j);
                    i5++;
                }
                executeFast.bindInteger(i5, i);
                executeFast.bindInteger(i5 + 1, i2);
                sQLiteCursor = executeFast.query(new Object[0]);
                final ArrayList arrayList9 = new ArrayList();
                SQLiteCursor sQLiteCursor6 = null;
                while (sQLiteCursor.next()) {
                    try {
                        long longValue = sQLiteCursor.longValue(2);
                        if (longValue == 0 || !z) {
                            sQLiteCursor5 = sQLiteCursor6;
                            arrayList8 = arrayList6;
                            NativeByteBuffer byteBufferValue2 = sQLiteCursor.byteBufferValue(0);
                            if (byteBufferValue2 != null && (TLdeserialize = TLRPC.Message.TLdeserialize(byteBufferValue2, byteBufferValue2.readInt32(false), false)) != null) {
                                TLdeserialize.readAttachPath(byteBufferValue2, clientUserId);
                                byteBufferValue2.reuse();
                                addUsersAndChatsFromMessage(TLdeserialize, arrayList4, arrayList5, arrayList3);
                                TLRPC.MessageReplyHeader messageReplyHeader = TLdeserialize.reply_to;
                                if (messageReplyHeader != null) {
                                    if (messageReplyHeader.reply_to_msg_id == 0) {
                                        long j3 = messageReplyHeader.reply_to_random_id;
                                        i4 = 1;
                                        if (j3 != 0) {
                                        }
                                    } else {
                                        i4 = 1;
                                    }
                                    if (!sQLiteCursor.isNull(i4) && (byteBufferValue = sQLiteCursor.byteBufferValue(i4)) != null) {
                                        TLRPC.Message TLdeserialize2 = TLRPC.Message.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                                        TLdeserialize.replyMessage = TLdeserialize2;
                                        TLdeserialize2.readAttachPath(byteBufferValue, clientUserId);
                                        byteBufferValue.reuse();
                                        TLRPC.Message message = TLdeserialize.replyMessage;
                                        if (message != null) {
                                            addUsersAndChatsFromMessage(message, arrayList4, arrayList5, arrayList3);
                                        }
                                    }
                                }
                                arrayList9.add(new MessageObject(this.currentAccount, TLdeserialize, null, null, null, null, null, true, true, 0L, false, false, true));
                                arrayList6 = arrayList8;
                                sQLiteCursor6 = sQLiteCursor5;
                            }
                        } else {
                            SQLiteDatabase sQLiteDatabase2 = this.database;
                            Long valueOf = Long.valueOf(clientUserId);
                            Long valueOf2 = Long.valueOf(longValue);
                            sQLiteCursor4 = sQLiteCursor6;
                            arrayList8 = arrayList6;
                            try {
                                SQLiteCursor queryFinalized = sQLiteDatabase2.queryFinalized("SELECT data, replydata, group_id FROM messages_v2 WHERE uid = ? AND group_id = ? ORDER BY mid DESC", valueOf, valueOf2);
                                try {
                                    ArrayList arrayList10 = new ArrayList();
                                    while (queryFinalized.next()) {
                                        NativeByteBuffer byteBufferValue3 = queryFinalized.byteBufferValue(0);
                                        TLRPC.Message TLdeserialize3 = TLRPC.Message.TLdeserialize(byteBufferValue3, byteBufferValue3.readInt32(false), false);
                                        TLdeserialize3.readAttachPath(byteBufferValue3, clientUserId);
                                        byteBufferValue3.reuse();
                                        addUsersAndChatsFromMessage(TLdeserialize3, arrayList4, arrayList5, arrayList3);
                                        MessageObject messageObject = new MessageObject(this.currentAccount, TLdeserialize3, null, null, null, null, null, true, true, 0L, false, false, true);
                                        if (TLdeserialize3.reactions != null) {
                                            messageObject.isPrimaryGroupMessage = true;
                                        }
                                        arrayList10.add(messageObject);
                                    }
                                    queryFinalized.dispose();
                                    arrayList9.addAll(arrayList10);
                                    sQLiteCursor5 = queryFinalized;
                                } catch (Exception e3) {
                                    e = e3;
                                    sQLiteCursor2 = queryFinalized;
                                    sQLitePreparedStatement = null;
                                    FileLog.e(e);
                                    if (sQLitePreparedStatement != null) {
                                    }
                                    if (sQLiteCursor != null) {
                                    }
                                    if (sQLiteCursor2 == null) {
                                    }
                                } catch (Throwable th4) {
                                    th = th4;
                                    sQLiteCursor2 = queryFinalized;
                                    sQLitePreparedStatement = null;
                                    if (sQLitePreparedStatement != null) {
                                    }
                                    if (sQLiteCursor != null) {
                                    }
                                    if (sQLiteCursor2 != null) {
                                    }
                                    throw th;
                                }
                            } catch (Exception e4) {
                                e = e4;
                                sQLiteCursor2 = sQLiteCursor4;
                                sQLitePreparedStatement = null;
                                FileLog.e(e);
                                if (sQLitePreparedStatement != null) {
                                }
                                if (sQLiteCursor != null) {
                                }
                                if (sQLiteCursor2 == null) {
                                }
                            } catch (Throwable th5) {
                                th = th5;
                                sQLiteCursor2 = sQLiteCursor4;
                                sQLitePreparedStatement = null;
                                if (sQLitePreparedStatement != null) {
                                }
                                if (sQLiteCursor != null) {
                                }
                                if (sQLiteCursor2 != null) {
                                }
                                throw th;
                            }
                        }
                        arrayList6 = arrayList8;
                        sQLiteCursor6 = sQLiteCursor5;
                    } catch (Exception e5) {
                        e = e5;
                        sQLiteCursor4 = sQLiteCursor6;
                    } catch (Throwable th6) {
                        th = th6;
                        sQLiteCursor4 = sQLiteCursor6;
                    }
                }
                sQLiteCursor4 = sQLiteCursor6;
                ArrayList<TLRPC.Document> arrayList11 = arrayList6;
                sQLiteCursor.dispose();
                if (!arrayList4.isEmpty()) {
                    getUsersInternal(arrayList4, arrayList);
                }
                if (!arrayList5.isEmpty()) {
                    getChatsInternal(TextUtils.join(",", arrayList5), arrayList2);
                }
                if (arrayList3.isEmpty()) {
                    arrayList7 = arrayList11;
                    getAnimatedEmoji(TextUtils.join(",", arrayList3), arrayList7);
                } else {
                    arrayList7 = arrayList11;
                }
                final ArrayList<TLRPC.Document> arrayList12 = arrayList7;
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda203
                    @Override // java.lang.Runnable
                    public final void run() {
                        Utilities.Callback4.this.run(arrayList9, arrayList, arrayList2, arrayList12);
                    }
                });
                sQLiteCursor.dispose();
                if (sQLiteCursor4 == null) {
                    sQLiteCursor3 = sQLiteCursor4;
                    sQLiteCursor3.dispose();
                    return;
                }
                return;
            }
            j2 = ((TLRPC.TL_reactionCustomEmoji) reaction).document_id;
        }
        i3 = 2;
        executeFast.bindLong(i3, j2);
        int i52 = 3;
        if (!TextUtils.isEmpty(str)) {
        }
        if (j == 0) {
        }
        executeFast.bindInteger(i52, i);
        executeFast.bindInteger(i52 + 1, i2);
        sQLiteCursor = executeFast.query(new Object[0]);
        final ArrayList arrayList92 = new ArrayList();
        SQLiteCursor sQLiteCursor62 = null;
        while (sQLiteCursor.next()) {
        }
        sQLiteCursor4 = sQLiteCursor62;
        ArrayList<TLRPC.Document> arrayList112 = arrayList6;
        sQLiteCursor.dispose();
        if (!arrayList4.isEmpty()) {
        }
        if (!arrayList5.isEmpty()) {
        }
        if (arrayList3.isEmpty()) {
        }
        final ArrayList arrayList122 = arrayList7;
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda203
            @Override // java.lang.Runnable
            public final void run() {
                Utilities.Callback4.this.run(arrayList92, arrayList, arrayList2, arrayList122);
            }
        });
        sQLiteCursor.dispose();
        if (sQLiteCursor4 == null) {
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$setDialogFlags$37(long j, long j2) {
        try {
            SQLiteCursor queryFinalized = this.database.queryFinalized("SELECT flags FROM dialog_settings WHERE did = " + j, new Object[0]);
            int intValue = queryFinalized.next() ? queryFinalized.intValue(0) : 0;
            queryFinalized.dispose();
            if (j2 == intValue) {
                return;
            }
            this.database.executeFast(String.format(Locale.US, "REPLACE INTO dialog_settings VALUES(%d, %d)", Long.valueOf(j), Long.valueOf(j2))).stepThis().dispose();
            resetAllUnreadCounters(true);
        } catch (Exception e) {
            checkSQLException(e);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$setDialogPinned$231(int i, long j) {
        SQLitePreparedStatement sQLitePreparedStatement = null;
        try {
            try {
                sQLitePreparedStatement = this.database.executeFast("UPDATE dialogs SET pinned = ? WHERE did = ?");
                sQLitePreparedStatement.bindInteger(1, i);
                sQLitePreparedStatement.bindLong(2, j);
                sQLitePreparedStatement.step();
                sQLitePreparedStatement.dispose();
            } catch (Exception e) {
                checkSQLException(e);
                if (sQLitePreparedStatement != null) {
                    sQLitePreparedStatement.dispose();
                }
            }
        } catch (Throwable th) {
            if (sQLitePreparedStatement != null) {
                sQLitePreparedStatement.dispose();
            }
            throw th;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$setDialogTtl$57(int i, long j) {
        try {
            this.database.executeFast(String.format(Locale.US, "UPDATE dialogs SET ttl_period = %d WHERE did = %d", Integer.valueOf(i), Long.valueOf(j))).stepThis().dispose();
        } catch (SQLiteException e) {
            checkSQLException(e);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:12:0x0043 A[Catch: all -> 0x003b, Exception -> 0x003d, TryCatch #1 {Exception -> 0x003d, blocks: (B:9:0x0037, B:12:0x0043, B:13:0x0048, B:17:0x0046, B:40:0x0066, B:41:0x0069), top: B:3:0x0002, outer: #4 }] */
    /* JADX WARN: Removed duplicated region for block: B:17:0x0046 A[Catch: all -> 0x003b, Exception -> 0x003d, TryCatch #1 {Exception -> 0x003d, blocks: (B:9:0x0037, B:12:0x0043, B:13:0x0048, B:17:0x0046, B:40:0x0066, B:41:0x0069), top: B:3:0x0002, outer: #4 }] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$setDialogUnread$228(long j, boolean z) {
        SQLiteCursor sQLiteCursor;
        int i;
        SQLitePreparedStatement sQLitePreparedStatement = null;
        SQLiteCursor sQLiteCursor2 = null;
        SQLitePreparedStatement sQLitePreparedStatement2 = null;
        try {
        } catch (Throwable th) {
            th = th;
        }
        try {
            try {
                try {
                    sQLiteCursor = this.database.queryFinalized("SELECT flags FROM dialogs WHERE did = " + j, new Object[0]);
                } catch (Exception e) {
                    checkSQLException(e);
                    if (0 == 0) {
                        return;
                    }
                }
                try {
                } catch (Exception e2) {
                    e = e2;
                    checkSQLException(e);
                    if (sQLiteCursor == null) {
                        i = 0;
                        if (!z) {
                        }
                        sQLitePreparedStatement2 = this.database.executeFast("UPDATE dialogs SET flags = ? WHERE did = ?");
                        sQLitePreparedStatement2.bindInteger(1, r8);
                        sQLitePreparedStatement2.bindLong(2, j);
                        sQLitePreparedStatement2.step();
                        sQLitePreparedStatement2.dispose();
                        resetAllUnreadCounters(false);
                        sQLitePreparedStatement2.dispose();
                    }
                    i = 0;
                    sQLiteCursor.dispose();
                    if (!z) {
                    }
                    sQLitePreparedStatement2 = this.database.executeFast("UPDATE dialogs SET flags = ? WHERE did = ?");
                    sQLitePreparedStatement2.bindInteger(1, r8);
                    sQLitePreparedStatement2.bindLong(2, j);
                    sQLitePreparedStatement2.step();
                    sQLitePreparedStatement2.dispose();
                    resetAllUnreadCounters(false);
                    sQLitePreparedStatement2.dispose();
                }
            } catch (Throwable th2) {
                if (0 != 0) {
                    sQLitePreparedStatement.dispose();
                }
                throw th2;
            }
        } catch (Exception e3) {
            e = e3;
            sQLiteCursor = null;
        } catch (Throwable th3) {
            th = th3;
            if (0 != 0) {
                sQLiteCursor2.dispose();
            }
            throw th;
        }
        if (sQLiteCursor.next()) {
            i = sQLiteCursor.intValue(0);
            sQLiteCursor.dispose();
            int i2 = !z ? i | 1 : i & (-2);
            sQLitePreparedStatement2 = this.database.executeFast("UPDATE dialogs SET flags = ? WHERE did = ?");
            sQLitePreparedStatement2.bindInteger(1, i2);
            sQLitePreparedStatement2.bindLong(2, j);
            sQLitePreparedStatement2.step();
            sQLitePreparedStatement2.dispose();
            resetAllUnreadCounters(false);
            sQLitePreparedStatement2.dispose();
        }
        i = 0;
        sQLiteCursor.dispose();
        if (!z) {
        }
        sQLitePreparedStatement2 = this.database.executeFast("UPDATE dialogs SET flags = ? WHERE did = ?");
        sQLitePreparedStatement2.bindInteger(1, i2);
        sQLitePreparedStatement2.bindLong(2, j);
        sQLitePreparedStatement2.step();
        sQLitePreparedStatement2.dispose();
        resetAllUnreadCounters(false);
        sQLitePreparedStatement2.dispose();
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Code restructure failed: missing block: B:22:0x0032, code lost:
    
        if (r2 == null) goto L23;
     */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$setDialogViewThreadAsMessages$229(long j, boolean z) {
        SQLiteCursor sQLiteCursor;
        SQLitePreparedStatement sQLitePreparedStatement = null;
        int i = 0;
        try {
        } catch (Throwable th) {
            th = th;
        }
        try {
            try {
                sQLiteCursor = this.database.queryFinalized("SELECT flags FROM dialogs WHERE did = " + j, new Object[0]);
                try {
                    if (sQLiteCursor.next()) {
                        i = sQLiteCursor.intValue(0);
                    }
                } catch (Exception e) {
                    e = e;
                    checkSQLException(e);
                }
            } catch (Exception e2) {
                checkSQLException(e2);
                if (0 == 0) {
                    return;
                }
            }
        } catch (Exception e3) {
            e = e3;
            sQLiteCursor = null;
        } catch (Throwable th2) {
            th = th2;
            sQLiteCursor = null;
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
            throw th;
        }
        try {
            sQLiteCursor.dispose();
            int i2 = z ? i | 64 : i & (-65);
            sQLitePreparedStatement = this.database.executeFast("UPDATE dialogs SET flags = ? WHERE did = ?");
            sQLitePreparedStatement.bindInteger(1, i2);
            sQLitePreparedStatement.bindLong(2, j);
            sQLitePreparedStatement.step();
            sQLitePreparedStatement.dispose();
            sQLitePreparedStatement.dispose();
        } catch (Throwable th3) {
            if (0 != 0) {
                sQLitePreparedStatement.dispose();
            }
            throw th3;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$setDialogsFolderId$224(ArrayList arrayList, ArrayList arrayList2, int i, long j) {
        SQLitePreparedStatement executeFast;
        boolean z;
        SQLitePreparedStatement sQLitePreparedStatement = null;
        try {
            try {
                this.database.beginTransaction();
                executeFast = this.database.executeFast("UPDATE dialogs SET folder_id = ?, pinned = ? WHERE did = ?");
            } catch (Throwable th) {
                th = th;
            }
        } catch (Exception e) {
            e = e;
        }
        try {
            if (arrayList != null) {
                int size = arrayList.size();
                z = false;
                for (int i2 = 0; i2 < size; i2++) {
                    TLRPC.TL_folderPeer tL_folderPeer = (TLRPC.TL_folderPeer) arrayList.get(i2);
                    long peerDialogId = DialogObject.getPeerDialogId(tL_folderPeer.peer);
                    executeFast.requery();
                    executeFast.bindInteger(1, tL_folderPeer.folder_id);
                    if (tL_folderPeer.folder_id == 1) {
                        z = true;
                    }
                    executeFast.bindInteger(2, 0);
                    executeFast.bindLong(3, peerDialogId);
                    executeFast.step();
                    this.unknownDialogsIds.remove(peerDialogId);
                }
            } else if (arrayList2 != null) {
                int size2 = arrayList2.size();
                z = false;
                for (int i3 = 0; i3 < size2; i3++) {
                    TLRPC.TL_inputFolderPeer tL_inputFolderPeer = (TLRPC.TL_inputFolderPeer) arrayList2.get(i3);
                    long peerDialogId2 = DialogObject.getPeerDialogId(tL_inputFolderPeer.peer);
                    executeFast.requery();
                    executeFast.bindInteger(1, tL_inputFolderPeer.folder_id);
                    if (tL_inputFolderPeer.folder_id == 1) {
                        z = true;
                    }
                    executeFast.bindInteger(2, 0);
                    executeFast.bindLong(3, peerDialogId2);
                    executeFast.step();
                    this.unknownDialogsIds.remove(peerDialogId2);
                }
            } else {
                executeFast.requery();
                executeFast.bindInteger(1, i);
                boolean z2 = i == 1;
                executeFast.bindInteger(2, 0);
                executeFast.bindLong(3, j);
                executeFast.step();
                z = z2;
            }
            executeFast.dispose();
            this.database.commitTransaction();
            if (!z) {
                lambda$checkIfFolderEmpty$226(1);
            }
            resetAllUnreadCounters(false);
            SQLiteDatabase sQLiteDatabase = this.database;
            if (sQLiteDatabase != null) {
                sQLiteDatabase.commitTransaction();
            }
        } catch (Exception e2) {
            e = e2;
            sQLitePreparedStatement = executeFast;
            checkSQLException(e);
            SQLiteDatabase sQLiteDatabase2 = this.database;
            if (sQLiteDatabase2 != null) {
                sQLiteDatabase2.commitTransaction();
            }
            if (sQLitePreparedStatement != null) {
                sQLitePreparedStatement.dispose();
            }
        } catch (Throwable th2) {
            th = th2;
            sQLitePreparedStatement = executeFast;
            SQLiteDatabase sQLiteDatabase3 = this.database;
            if (sQLiteDatabase3 != null) {
                sQLiteDatabase3.commitTransaction();
            }
            if (sQLitePreparedStatement != null) {
                sQLitePreparedStatement.dispose();
            }
            throw th;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$setDialogsPinned$232(ArrayList arrayList, ArrayList arrayList2) {
        SQLitePreparedStatement sQLitePreparedStatement = null;
        try {
            try {
                sQLitePreparedStatement = this.database.executeFast("UPDATE dialogs SET pinned = ? WHERE did = ?");
                int size = arrayList.size();
                for (int i = 0; i < size; i++) {
                    sQLitePreparedStatement.requery();
                    sQLitePreparedStatement.bindInteger(1, ((Integer) arrayList2.get(i)).intValue());
                    sQLitePreparedStatement.bindLong(2, ((Long) arrayList.get(i)).longValue());
                    sQLitePreparedStatement.step();
                }
                sQLitePreparedStatement.dispose();
            } catch (Exception e) {
                checkSQLException(e);
                if (sQLitePreparedStatement != null) {
                    sQLitePreparedStatement.dispose();
                }
            }
        } catch (Throwable th) {
            if (sQLitePreparedStatement != null) {
                sQLitePreparedStatement.dispose();
            }
            throw th;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$setMessageSeq$194(int i, int i2, int i3) {
        SQLitePreparedStatement sQLitePreparedStatement = null;
        try {
            try {
                sQLitePreparedStatement = this.database.executeFast("REPLACE INTO messages_seq VALUES(?, ?, ?)");
                sQLitePreparedStatement.requery();
                sQLitePreparedStatement.bindInteger(1, i);
                sQLitePreparedStatement.bindInteger(2, i2);
                sQLitePreparedStatement.bindInteger(3, i3);
                sQLitePreparedStatement.step();
            } catch (Exception e) {
                checkSQLException(e);
                if (sQLitePreparedStatement == null) {
                    return;
                }
            }
            sQLitePreparedStatement.dispose();
        } catch (Throwable th) {
            if (sQLitePreparedStatement != null) {
                sQLitePreparedStatement.dispose();
            }
            throw th;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:44:0x00a1  */
    /* JADX WARN: Removed duplicated region for block: B:46:0x00a6  */
    /* JADX WARN: Removed duplicated region for block: B:48:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:57:0x00ac  */
    /* JADX WARN: Removed duplicated region for block: B:59:0x00b1  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$unpinAllDialogsExceptNew$227(ArrayList arrayList, int i) {
        SQLitePreparedStatement sQLitePreparedStatement;
        SQLitePreparedStatement sQLitePreparedStatement2;
        ArrayList arrayList2;
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                arrayList2 = new ArrayList();
            } catch (Throwable th) {
                th = th;
                sQLitePreparedStatement = arrayList;
            }
            try {
                SQLiteCursor queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT did, folder_id FROM dialogs WHERE pinned > 0 AND did NOT IN (%s)", TextUtils.join(",", arrayList)), new Object[0]);
                while (queryFinalized.next()) {
                    try {
                        long longValue = queryFinalized.longValue(0);
                        if (queryFinalized.intValue(1) == i && !DialogObject.isEncryptedDialog(longValue) && !DialogObject.isFolderDialogId(longValue)) {
                            arrayList2.add(Long.valueOf(queryFinalized.longValue(0)));
                        }
                    } catch (Exception e) {
                        e = e;
                        sQLiteCursor = queryFinalized;
                        sQLitePreparedStatement2 = null;
                    } catch (Throwable th2) {
                        th = th2;
                        sQLiteCursor = queryFinalized;
                        sQLitePreparedStatement = 0;
                        if (sQLiteCursor != null) {
                            sQLiteCursor.dispose();
                        }
                        if (sQLitePreparedStatement != 0) {
                            sQLitePreparedStatement.dispose();
                        }
                        throw th;
                    }
                }
                queryFinalized.dispose();
                if (arrayList2.isEmpty()) {
                    return;
                }
                sQLitePreparedStatement2 = this.database.executeFast("UPDATE dialogs SET pinned = ? WHERE did = ?");
                for (int i2 = 0; i2 < arrayList2.size(); i2++) {
                    try {
                        long longValue2 = ((Long) arrayList2.get(i2)).longValue();
                        sQLitePreparedStatement2.requery();
                        sQLitePreparedStatement2.bindInteger(1, 0);
                        sQLitePreparedStatement2.bindLong(2, longValue2);
                        sQLitePreparedStatement2.step();
                    } catch (Exception e2) {
                        e = e2;
                        checkSQLException(e);
                        if (sQLiteCursor != null) {
                            sQLiteCursor.dispose();
                        }
                        if (sQLitePreparedStatement2 == null) {
                            sQLitePreparedStatement2.dispose();
                            return;
                        }
                        return;
                    }
                }
                sQLitePreparedStatement2.dispose();
            } catch (Exception e3) {
                e = e3;
                sQLitePreparedStatement2 = null;
                checkSQLException(e);
                if (sQLiteCursor != null) {
                }
                if (sQLitePreparedStatement2 == null) {
                }
            } catch (Throwable th3) {
                th = th3;
                sQLitePreparedStatement = 0;
                if (sQLiteCursor != null) {
                }
                if (sQLitePreparedStatement != 0) {
                }
                throw th;
            }
        } catch (Exception e4) {
            e = e4;
        } catch (Throwable th4) {
            th = th4;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateChannelUsers$119(long j, ArrayList arrayList) {
        SQLitePreparedStatement executeFast;
        long j2 = -j;
        SQLitePreparedStatement sQLitePreparedStatement = null;
        try {
            try {
                this.database.executeFast("DELETE FROM channel_users_v2 WHERE did = " + j2).stepThis().dispose();
                this.database.beginTransaction();
                executeFast = this.database.executeFast("REPLACE INTO channel_users_v2 VALUES(?, ?, ?, ?)");
            } catch (Throwable th) {
                th = th;
            }
        } catch (Exception e) {
            e = e;
        }
        try {
            int currentTimeMillis = (int) (System.currentTimeMillis() / 1000);
            for (int i = 0; i < arrayList.size(); i++) {
                TLRPC.ChannelParticipant channelParticipant = (TLRPC.ChannelParticipant) arrayList.get(i);
                executeFast.requery();
                executeFast.bindLong(1, j2);
                executeFast.bindLong(2, MessageObject.getPeerId(channelParticipant.peer));
                executeFast.bindInteger(3, currentTimeMillis);
                NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(channelParticipant.getObjectSize());
                channelParticipant.serializeToStream(nativeByteBuffer);
                executeFast.bindByteBuffer(4, nativeByteBuffer);
                executeFast.step();
                nativeByteBuffer.reuse();
                currentTimeMillis--;
            }
            executeFast.dispose();
            this.database.commitTransaction();
            loadChatInfo(j, true, null, false, true);
            SQLiteDatabase sQLiteDatabase = this.database;
            if (sQLiteDatabase != null) {
                sQLiteDatabase.commitTransaction();
            }
        } catch (Exception e2) {
            e = e2;
            sQLitePreparedStatement = executeFast;
            checkSQLException(e);
            SQLiteDatabase sQLiteDatabase2 = this.database;
            if (sQLiteDatabase2 != null) {
                sQLiteDatabase2.commitTransaction();
            }
            if (sQLitePreparedStatement != null) {
                sQLitePreparedStatement.dispose();
            }
        } catch (Throwable th2) {
            th = th2;
            sQLitePreparedStatement = executeFast;
            SQLiteDatabase sQLiteDatabase3 = this.database;
            if (sQLiteDatabase3 != null) {
                sQLiteDatabase3.commitTransaction();
            }
            if (sQLitePreparedStatement != null) {
                sQLitePreparedStatement.dispose();
            }
            throw th;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:32:0x0097  */
    /* JADX WARN: Removed duplicated region for block: B:34:0x009c  */
    /* JADX WARN: Removed duplicated region for block: B:44:0x00a2  */
    /* JADX WARN: Removed duplicated region for block: B:46:0x00a7  */
    /* JADX WARN: Type inference failed for: r8v18, types: [org.telegram.SQLite.SQLitePreparedStatement] */
    /* JADX WARN: Type inference failed for: r8v6 */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$updateChatDefaultBannedRights$173(long j, int i, TLRPC.TL_chatBannedRights tL_chatBannedRights) {
        SQLiteCursor queryFinalized;
        TLRPC.Chat chat;
        NativeByteBuffer byteBufferValue;
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
            } catch (Throwable th) {
                th = th;
            }
            try {
                queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT data FROM chats WHERE uid = %d", Long.valueOf(j)), new Object[0]);
            } catch (Exception e) {
                e = e;
                j = 0;
                checkSQLException(e);
                if (sQLiteCursor != null) {
                }
                if (j != 0) {
                }
            } catch (Throwable th2) {
                th = th2;
                j = 0;
                if (sQLiteCursor != null) {
                    sQLiteCursor.dispose();
                }
                if (j != 0) {
                    j.dispose();
                }
                throw th;
            }
        } catch (Exception e2) {
            e = e2;
        } catch (Throwable th3) {
            th = th3;
        }
        try {
            if (!queryFinalized.next() || (byteBufferValue = queryFinalized.byteBufferValue(0)) == null) {
                chat = null;
            } else {
                chat = TLRPC.Chat.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                byteBufferValue.reuse();
            }
            queryFinalized.dispose();
        } catch (Exception e3) {
            e = e3;
            sQLiteCursor = queryFinalized;
            j = 0;
        } catch (Throwable th4) {
            th = th4;
            sQLiteCursor = queryFinalized;
            j = 0;
            if (sQLiteCursor != null) {
            }
            if (j != 0) {
            }
            throw th;
        }
        if (chat != null) {
            if (chat.default_banned_rights == null || i >= chat.version) {
                chat.default_banned_rights = tL_chatBannedRights;
                chat.flags |= 262144;
                chat.version = i;
                j = this.database.executeFast("UPDATE chats SET data = ? WHERE uid = ?");
                try {
                    NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(chat.getObjectSize());
                    chat.serializeToStream(nativeByteBuffer);
                    j.bindByteBuffer(1, nativeByteBuffer);
                    j.bindLong(2, chat.id);
                    j.step();
                    nativeByteBuffer.reuse();
                    j.dispose();
                } catch (Exception e4) {
                    e = e4;
                    checkSQLException(e);
                    if (sQLiteCursor != null) {
                        sQLiteCursor.dispose();
                    }
                    if (j != 0) {
                        j.dispose();
                    }
                }
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:47:0x0176  */
    /* JADX WARN: Removed duplicated region for block: B:49:0x017b  */
    /* JADX WARN: Removed duplicated region for block: B:51:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:57:0x0184  */
    /* JADX WARN: Removed duplicated region for block: B:59:0x0189  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$updateChatInfo$128(TLRPC.ChatFull chatFull, boolean z) {
        SQLiteCursor sQLiteCursor;
        SQLitePreparedStatement sQLitePreparedStatement;
        SQLitePreparedStatement sQLitePreparedStatement2;
        int i;
        int i2;
        SQLiteCursor sQLiteCursor2 = null;
        try {
            sQLiteCursor = this.database.queryFinalized("SELECT online, inviter, links FROM chat_settings_v2 WHERE uid = " + chatFull.id, new Object[0]);
        } catch (Exception e) {
            e = e;
            sQLiteCursor = null;
        } catch (Throwable th) {
            th = th;
            sQLiteCursor = null;
        }
        try {
            if (sQLiteCursor.next()) {
                i = sQLiteCursor.intValue(0);
                chatFull.inviterId = sQLiteCursor.longValue(1);
                i2 = sQLiteCursor.intValue(2);
            } else {
                i = -1;
                i2 = 0;
            }
            sQLiteCursor.dispose();
            if (z && i == -1) {
                return;
            }
            if (i >= 0) {
                try {
                    if ((chatFull.flags & LiteMode.FLAG_ANIMATED_EMOJI_REACTIONS_NOT_PREMIUM) == 0) {
                        chatFull.online_count = i;
                    }
                } catch (Exception e2) {
                    e = e2;
                    sQLitePreparedStatement = null;
                    try {
                        checkSQLException(e);
                        if (sQLiteCursor2 != null) {
                        }
                        if (sQLitePreparedStatement != null) {
                        }
                    } catch (Throwable th2) {
                        th = th2;
                        sQLitePreparedStatement2 = sQLitePreparedStatement;
                        sQLitePreparedStatement = sQLitePreparedStatement2;
                        if (sQLiteCursor2 != null) {
                            sQLiteCursor2.dispose();
                        }
                        if (sQLitePreparedStatement != null) {
                            sQLitePreparedStatement.dispose();
                        }
                        throw th;
                    }
                } catch (Throwable th3) {
                    th = th3;
                    sQLitePreparedStatement = null;
                    if (sQLiteCursor2 != null) {
                    }
                    if (sQLitePreparedStatement != null) {
                    }
                    throw th;
                }
            }
            if (i2 >= 0) {
                chatFull.invitesCount = i2;
            }
            sQLitePreparedStatement = this.database.executeFast("REPLACE INTO chat_settings_v2 VALUES(?, ?, ?, ?, ?, ?, ?)");
            try {
                NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(chatFull.getObjectSize());
                chatFull.serializeToStream(nativeByteBuffer);
                sQLitePreparedStatement.bindLong(1, chatFull.id);
                sQLitePreparedStatement.bindByteBuffer(2, nativeByteBuffer);
                sQLitePreparedStatement.bindInteger(3, chatFull.pinned_msg_id);
                sQLitePreparedStatement.bindInteger(4, chatFull.online_count);
                sQLitePreparedStatement.bindLong(5, chatFull.inviterId);
                sQLitePreparedStatement.bindInteger(6, chatFull.invitesCount);
                sQLitePreparedStatement.bindInteger(7, chatFull.participants_count);
                sQLitePreparedStatement.step();
                sQLitePreparedStatement.dispose();
                nativeByteBuffer.reuse();
                if (chatFull instanceof TLRPC.TL_channelFull) {
                    SQLiteCursor queryFinalized = this.database.queryFinalized("SELECT inbox_max, outbox_max FROM dialogs WHERE did = " + (-chatFull.id), new Object[0]);
                    try {
                        if (!queryFinalized.next() || queryFinalized.intValue(0) >= chatFull.read_inbox_max_id) {
                            sQLitePreparedStatement2 = null;
                        } else {
                            int intValue = queryFinalized.intValue(1);
                            sQLitePreparedStatement2 = this.database.executeFast("UPDATE dialogs SET unread_count = ?, inbox_max = ?, outbox_max = ? WHERE did = ?");
                            try {
                                sQLitePreparedStatement2.bindInteger(1, chatFull.unread_count);
                                sQLitePreparedStatement2.bindInteger(2, chatFull.read_inbox_max_id);
                                sQLitePreparedStatement2.bindInteger(3, Math.max(intValue, chatFull.read_outbox_max_id));
                                sQLitePreparedStatement2.bindLong(4, -chatFull.id);
                                sQLitePreparedStatement2.step();
                                sQLitePreparedStatement2.dispose();
                            } catch (Exception e3) {
                                e = e3;
                                sQLiteCursor2 = queryFinalized;
                                sQLitePreparedStatement = sQLitePreparedStatement2;
                                checkSQLException(e);
                                if (sQLiteCursor2 != null) {
                                }
                                if (sQLitePreparedStatement != null) {
                                }
                            } catch (Throwable th4) {
                                th = th4;
                                sQLiteCursor2 = queryFinalized;
                                sQLitePreparedStatement = sQLitePreparedStatement2;
                                if (sQLiteCursor2 != null) {
                                }
                                if (sQLitePreparedStatement != null) {
                                }
                                throw th;
                            }
                        }
                        queryFinalized.dispose();
                    } catch (Exception e4) {
                        e = e4;
                        sQLiteCursor2 = queryFinalized;
                        sQLitePreparedStatement = null;
                        checkSQLException(e);
                        if (sQLiteCursor2 != null) {
                            sQLiteCursor2.dispose();
                        }
                        if (sQLitePreparedStatement != null) {
                            sQLitePreparedStatement.dispose();
                            return;
                        }
                        return;
                    } catch (Throwable th5) {
                        th = th5;
                        sQLiteCursor2 = queryFinalized;
                        sQLitePreparedStatement = null;
                        if (sQLiteCursor2 != null) {
                        }
                        if (sQLitePreparedStatement != null) {
                        }
                        throw th;
                    }
                } else {
                    sQLitePreparedStatement2 = null;
                }
                try {
                    if ((chatFull.flags & 2048) != 0) {
                        SQLitePreparedStatement executeFast = this.database.executeFast("UPDATE dialogs SET folder_id = ? WHERE did = ?");
                        executeFast.bindInteger(1, chatFull.folder_id);
                        executeFast.bindLong(2, -chatFull.id);
                        executeFast.step();
                        executeFast.dispose();
                        try {
                            this.unknownDialogsIds.remove(-chatFull.id);
                        } catch (Exception e5) {
                            e = e5;
                            sQLitePreparedStatement2 = null;
                            sQLitePreparedStatement = sQLitePreparedStatement2;
                            checkSQLException(e);
                            if (sQLiteCursor2 != null) {
                            }
                            if (sQLitePreparedStatement != null) {
                            }
                        } catch (Throwable th6) {
                            th = th6;
                            sQLitePreparedStatement2 = null;
                            sQLitePreparedStatement = sQLitePreparedStatement2;
                            if (sQLiteCursor2 != null) {
                            }
                            if (sQLitePreparedStatement != null) {
                            }
                            throw th;
                        }
                    }
                    sQLitePreparedStatement2 = this.database.executeFast("UPDATE dialogs SET ttl_period = ? WHERE did = ?");
                    sQLitePreparedStatement2.bindInteger(1, chatFull.ttl_period);
                    sQLitePreparedStatement2.bindLong(2, -chatFull.id);
                    sQLitePreparedStatement2.step();
                    sQLitePreparedStatement2.dispose();
                } catch (Exception e6) {
                    e = e6;
                } catch (Throwable th7) {
                    th = th7;
                }
            } catch (Exception e7) {
                e = e7;
            } catch (Throwable th8) {
                th = th8;
            }
        } catch (Exception e8) {
            e = e8;
            sQLitePreparedStatement = null;
            sQLiteCursor2 = sQLiteCursor;
            checkSQLException(e);
            if (sQLiteCursor2 != null) {
            }
            if (sQLitePreparedStatement != null) {
            }
        } catch (Throwable th9) {
            th = th9;
            sQLitePreparedStatement = null;
            sQLiteCursor2 = sQLiteCursor;
            if (sQLiteCursor2 != null) {
            }
            if (sQLitePreparedStatement != null) {
            }
            throw th;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateChatInfo$133(TLRPC.ChatFull chatFull) {
        NotificationCenter notificationCenter = getNotificationCenter();
        int i = NotificationCenter.chatInfoDidLoad;
        Boolean bool = Boolean.FALSE;
        notificationCenter.lambda$postNotificationNameOnUIThread$1(i, chatFull, 0, bool, bool);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateChatInfo$134(long j, int i, long j2, long j3, int i2) {
        int i3;
        SQLiteCursor queryFinalized;
        final TLRPC.ChatFull chatFull;
        NativeByteBuffer byteBufferValue;
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                i3 = 0;
                queryFinalized = this.database.queryFinalized("SELECT info, pinned, online, inviter FROM chat_settings_v2 WHERE uid = " + j, new Object[0]);
            } catch (Exception e) {
                e = e;
            }
        } catch (Throwable th) {
            th = th;
        }
        try {
            new ArrayList();
            if (!queryFinalized.next() || (byteBufferValue = queryFinalized.byteBufferValue(0)) == null) {
                chatFull = null;
            } else {
                chatFull = TLRPC.ChatFull.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                byteBufferValue.reuse();
                chatFull.pinned_msg_id = queryFinalized.intValue(1);
                chatFull.online_count = queryFinalized.intValue(2);
                chatFull.inviterId = queryFinalized.longValue(3);
            }
            queryFinalized.dispose();
            if (chatFull instanceof TLRPC.TL_chatFull) {
                if (i == 1) {
                    while (true) {
                        if (i3 >= chatFull.participants.participants.size()) {
                            break;
                        }
                        if (chatFull.participants.participants.get(i3).user_id == j2) {
                            chatFull.participants.participants.remove(i3);
                            break;
                        }
                        i3++;
                    }
                } else if (i == 0) {
                    Iterator<TLRPC.ChatParticipant> it = chatFull.participants.participants.iterator();
                    while (it.hasNext()) {
                        if (it.next().user_id == j2) {
                            return;
                        }
                    }
                    TLRPC.TL_chatParticipant tL_chatParticipant = new TLRPC.TL_chatParticipant();
                    tL_chatParticipant.user_id = j2;
                    tL_chatParticipant.inviter_id = j3;
                    tL_chatParticipant.date = getConnectionsManager().getCurrentTime();
                    chatFull.participants.participants.add(tL_chatParticipant);
                } else if (i == 2) {
                    while (true) {
                        if (i3 >= chatFull.participants.participants.size()) {
                            break;
                        }
                        TLRPC.ChatParticipant chatParticipant = chatFull.participants.participants.get(i3);
                        if (chatParticipant.user_id == j2) {
                            TLRPC.ChatParticipant tL_chatParticipantAdmin = j3 == 1 ? new TLRPC.TL_chatParticipantAdmin() : new TLRPC.TL_chatParticipant();
                            tL_chatParticipantAdmin.user_id = chatParticipant.user_id;
                            tL_chatParticipantAdmin.date = chatParticipant.date;
                            tL_chatParticipantAdmin.inviter_id = chatParticipant.inviter_id;
                            chatFull.participants.participants.set(i3, tL_chatParticipantAdmin);
                        } else {
                            i3++;
                        }
                    }
                }
                chatFull.participants.version = i2;
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda139
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesStorage.this.lambda$updateChatInfo$133(chatFull);
                    }
                });
                SQLitePreparedStatement executeFast = this.database.executeFast("REPLACE INTO chat_settings_v2 VALUES(?, ?, ?, ?, ?, ?, ?)");
                NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(chatFull.getObjectSize());
                chatFull.serializeToStream(nativeByteBuffer);
                executeFast.bindLong(1, j);
                executeFast.bindByteBuffer(2, nativeByteBuffer);
                executeFast.bindInteger(3, chatFull.pinned_msg_id);
                executeFast.bindInteger(4, chatFull.online_count);
                executeFast.bindLong(5, chatFull.inviterId);
                executeFast.bindInteger(6, chatFull.invitesCount);
                executeFast.bindInteger(7, chatFull.participants_count);
                executeFast.step();
                executeFast.dispose();
                nativeByteBuffer.reuse();
            }
        } catch (Exception e2) {
            e = e2;
            sQLiteCursor = queryFinalized;
            checkSQLException(e);
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
        } catch (Throwable th2) {
            th = th2;
            sQLiteCursor = queryFinalized;
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
            throw th;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateChatOnlineCount$129(int i, long j) {
        SQLitePreparedStatement sQLitePreparedStatement = null;
        try {
            try {
                sQLitePreparedStatement = this.database.executeFast("UPDATE chat_settings_v2 SET online = ? WHERE uid = ?");
                sQLitePreparedStatement.requery();
                sQLitePreparedStatement.bindInteger(1, i);
                sQLitePreparedStatement.bindLong(2, j);
                sQLitePreparedStatement.step();
                sQLitePreparedStatement.dispose();
            } catch (Exception e) {
                checkSQLException(e);
                if (sQLitePreparedStatement != null) {
                    sQLitePreparedStatement.dispose();
                }
            }
        } catch (Throwable th) {
            if (sQLitePreparedStatement != null) {
                sQLitePreparedStatement.dispose();
            }
            throw th;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateChatParticipants$115(TLRPC.ChatFull chatFull) {
        NotificationCenter notificationCenter = getNotificationCenter();
        int i = NotificationCenter.chatInfoDidLoad;
        Boolean bool = Boolean.FALSE;
        notificationCenter.lambda$postNotificationNameOnUIThread$1(i, chatFull, 0, bool, bool);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateChatParticipants$116(TLRPC.ChatParticipants chatParticipants) {
        SQLiteCursor queryFinalized;
        final TLRPC.ChatFull chatFull;
        NativeByteBuffer byteBufferValue;
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                queryFinalized = this.database.queryFinalized("SELECT info, pinned, online, inviter FROM chat_settings_v2 WHERE uid = " + chatParticipants.chat_id, new Object[0]);
            } catch (Exception e) {
                e = e;
            }
        } catch (Throwable th) {
            th = th;
        }
        try {
            new ArrayList();
            if (!queryFinalized.next() || (byteBufferValue = queryFinalized.byteBufferValue(0)) == null) {
                chatFull = null;
            } else {
                chatFull = TLRPC.ChatFull.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                byteBufferValue.reuse();
                chatFull.pinned_msg_id = queryFinalized.intValue(1);
                chatFull.online_count = queryFinalized.intValue(2);
                chatFull.inviterId = queryFinalized.longValue(3);
            }
            queryFinalized.dispose();
            if (chatFull instanceof TLRPC.TL_chatFull) {
                chatFull.participants = chatParticipants;
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda176
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesStorage.this.lambda$updateChatParticipants$115(chatFull);
                    }
                });
                SQLitePreparedStatement executeFast = this.database.executeFast("REPLACE INTO chat_settings_v2 VALUES(?, ?, ?, ?, ?, ?, ?)");
                NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(chatFull.getObjectSize());
                chatFull.serializeToStream(nativeByteBuffer);
                executeFast.bindLong(1, chatFull.id);
                executeFast.bindByteBuffer(2, nativeByteBuffer);
                executeFast.bindInteger(3, chatFull.pinned_msg_id);
                executeFast.bindInteger(4, chatFull.online_count);
                executeFast.bindLong(5, chatFull.inviterId);
                executeFast.bindInteger(6, chatFull.invitesCount);
                executeFast.bindInteger(7, chatFull.participants_count);
                executeFast.step();
                executeFast.dispose();
                nativeByteBuffer.reuse();
            }
        } catch (Exception e2) {
            e = e2;
            sQLiteCursor = queryFinalized;
            checkSQLException(e);
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
        } catch (Throwable th2) {
            th = th2;
            sQLiteCursor = queryFinalized;
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
            throw th;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateDbToLastVersion$3() {
        this.databaseMigrationInProgress = true;
        NotificationCenter.getInstance(this.currentAccount).lambda$postNotificationNameOnUIThread$1(NotificationCenter.onDatabaseMigration, Boolean.TRUE);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateDbToLastVersion$4() {
        this.databaseMigrationInProgress = false;
        NotificationCenter.getInstance(this.currentAccount).lambda$postNotificationNameOnUIThread$1(NotificationCenter.onDatabaseMigration, Boolean.FALSE);
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:31:0x0074  */
    /* JADX WARN: Removed duplicated region for block: B:33:0x0079  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$updateDialogData$221(TLRPC.Dialog dialog) {
        SQLitePreparedStatement sQLitePreparedStatement;
        SQLiteCursor sQLiteCursor = null;
        try {
            SQLiteCursor queryFinalized = this.database.queryFinalized("SELECT data FROM dialogs WHERE did = " + dialog.id, new Object[0]);
            try {
                if (!queryFinalized.next()) {
                    queryFinalized.dispose();
                    return;
                }
                sQLitePreparedStatement = this.database.executeFast("UPDATE dialogs SET data = ? WHERE did = ?");
                try {
                    NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(dialog.getObjectSize());
                    dialog.serializeToStream(nativeByteBuffer);
                    sQLitePreparedStatement.bindByteBuffer(1, nativeByteBuffer);
                    sQLitePreparedStatement.bindLong(2, dialog.id);
                    sQLitePreparedStatement.step();
                    sQLitePreparedStatement.dispose();
                    nativeByteBuffer.reuse();
                    queryFinalized.dispose();
                } catch (Exception e) {
                    e = e;
                    sQLiteCursor = queryFinalized;
                    try {
                        checkSQLException(e);
                        if (sQLiteCursor != null) {
                            sQLiteCursor.dispose();
                        }
                        if (sQLitePreparedStatement != null) {
                            sQLitePreparedStatement.dispose();
                        }
                    } catch (Throwable th) {
                        th = th;
                        if (sQLiteCursor != null) {
                            sQLiteCursor.dispose();
                        }
                        if (sQLitePreparedStatement != null) {
                            sQLitePreparedStatement.dispose();
                        }
                        throw th;
                    }
                } catch (Throwable th2) {
                    th = th2;
                    sQLiteCursor = queryFinalized;
                    if (sQLiteCursor != null) {
                    }
                    if (sQLitePreparedStatement != null) {
                    }
                    throw th;
                }
            } catch (Exception e2) {
                e = e2;
                sQLitePreparedStatement = null;
            } catch (Throwable th3) {
                th = th3;
                sQLitePreparedStatement = null;
            }
        } catch (Exception e3) {
            e = e3;
            sQLitePreparedStatement = null;
        } catch (Throwable th4) {
            th = th4;
            sQLitePreparedStatement = null;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:26:0x00df  */
    /* JADX WARN: Removed duplicated region for block: B:28:0x00e4  */
    /* JADX WARN: Removed duplicated region for block: B:31:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:37:0x00ea  */
    /* JADX WARN: Removed duplicated region for block: B:39:0x00ef  */
    /* JADX WARN: Type inference failed for: r9v13 */
    /* JADX WARN: Type inference failed for: r9v2 */
    /* JADX WARN: Type inference failed for: r9v24, types: [org.telegram.SQLite.SQLiteCursor] */
    /* JADX WARN: Type inference failed for: r9v26 */
    /* JADX WARN: Type inference failed for: r9v27 */
    /* JADX WARN: Type inference failed for: r9v3 */
    /* JADX WARN: Type inference failed for: r9v4, types: [org.telegram.SQLite.SQLiteCursor] */
    /* JADX WARN: Type inference failed for: r9v6 */
    /* JADX WARN: Type inference failed for: r9v7 */
    /* JADX WARN: Type inference failed for: r9v9, types: [org.telegram.SQLite.SQLiteCursor] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$updateDialogUnreadReactions$243(boolean z, long j, int i, long j2) {
        int max;
        ?? r9;
        ?? r92;
        SQLitePreparedStatement sQLitePreparedStatement;
        SQLitePreparedStatement sQLitePreparedStatement2 = null;
        if (z) {
            try {
                SQLiteCursor queryFinalized = this.database.queryFinalized("SELECT unread_reactions FROM dialogs WHERE did = " + j, new Object[0]);
                try {
                    max = queryFinalized.next() ? Math.max(0, queryFinalized.intValue(0)) : 0;
                    queryFinalized.dispose();
                } catch (SQLiteException e) {
                    e = e;
                    r92 = queryFinalized;
                    e.printStackTrace();
                    if (sQLitePreparedStatement2 != null) {
                    }
                    if (r92 == 0) {
                    }
                } catch (Throwable th) {
                    th = th;
                    r9 = queryFinalized;
                    if (sQLitePreparedStatement2 != null) {
                    }
                    if (r9 != 0) {
                    }
                    throw th;
                }
            } catch (SQLiteException e2) {
                e = e2;
                r92 = 0;
            } catch (Throwable th2) {
                th = th2;
                r9 = 0;
            }
        } else {
            max = 0;
        }
        int i2 = max + i;
        try {
            sQLitePreparedStatement = getMessagesStorage().getDatabase().executeFast("UPDATE dialogs SET unread_reactions = ? WHERE did = ?");
            try {
                sQLitePreparedStatement.bindInteger(1, i2);
                sQLitePreparedStatement.bindLong(2, j);
                sQLitePreparedStatement.step();
                sQLitePreparedStatement.dispose();
                if (j2 != 0) {
                    if (z) {
                        r92 = this.database.queryFinalized(String.format(Locale.US, "SELECT unread_reactions FROM topics WHERE did = %d AND topic_id = %d", Long.valueOf(j), Long.valueOf(j2)), new Object[0]);
                        try {
                            try {
                                r8 = r92.next() ? Math.max(0, r92.intValue(0)) : 0;
                                r92.dispose();
                            } catch (SQLiteException e3) {
                                e = e3;
                                sQLitePreparedStatement = null;
                                sQLitePreparedStatement2 = r92;
                                SQLitePreparedStatement sQLitePreparedStatement3 = sQLitePreparedStatement;
                                r92 = sQLitePreparedStatement2;
                                sQLitePreparedStatement2 = sQLitePreparedStatement3;
                                e.printStackTrace();
                                if (sQLitePreparedStatement2 != null) {
                                    sQLitePreparedStatement2.dispose();
                                }
                                if (r92 == 0) {
                                    r92.dispose();
                                    return;
                                }
                                return;
                            }
                        } catch (Throwable th3) {
                            th = th3;
                            SQLitePreparedStatement sQLitePreparedStatement4 = r92;
                            sQLitePreparedStatement = sQLitePreparedStatement2;
                            sQLitePreparedStatement2 = sQLitePreparedStatement4;
                            SQLitePreparedStatement sQLitePreparedStatement5 = sQLitePreparedStatement;
                            r9 = sQLitePreparedStatement2;
                            sQLitePreparedStatement2 = sQLitePreparedStatement5;
                            if (sQLitePreparedStatement2 != null) {
                                sQLitePreparedStatement2.dispose();
                            }
                            if (r9 != 0) {
                                r9.dispose();
                            }
                            throw th;
                        }
                    }
                    int i3 = r8 + i;
                    sQLitePreparedStatement = getMessagesStorage().getDatabase().executeFast("UPDATE topics SET unread_reactions = ? WHERE did = ? AND topic_id = ?");
                    sQLitePreparedStatement.bindInteger(1, i3);
                    sQLitePreparedStatement.bindLong(2, j);
                    sQLitePreparedStatement.bindLong(3, j2);
                    sQLitePreparedStatement.step();
                    sQLitePreparedStatement.dispose();
                }
            } catch (SQLiteException e4) {
                e = e4;
            } catch (Throwable th4) {
                th = th4;
                SQLitePreparedStatement sQLitePreparedStatement52 = sQLitePreparedStatement;
                r9 = sQLitePreparedStatement2;
                sQLitePreparedStatement2 = sQLitePreparedStatement52;
                if (sQLitePreparedStatement2 != null) {
                }
                if (r9 != 0) {
                }
                throw th;
            }
        } catch (SQLiteException e5) {
            e = e5;
            sQLitePreparedStatement = null;
        } catch (Throwable th5) {
            th = th5;
            sQLitePreparedStatement = null;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateDialogsWithReadMessages$114(LongSparseIntArray longSparseIntArray, LongSparseIntArray longSparseIntArray2, LongSparseArray longSparseArray, LongSparseIntArray longSparseIntArray3) {
        updateDialogsWithReadMessagesInternal(null, longSparseIntArray, longSparseIntArray2, longSparseArray, longSparseIntArray3);
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:10:0x0033 A[Catch: all -> 0x000b, Exception -> 0x000e, TryCatch #0 {Exception -> 0x000e, blocks: (B:3:0x0001, B:5:0x0007, B:8:0x001b, B:10:0x0033, B:11:0x0036, B:13:0x003f, B:14:0x0042, B:16:0x004b, B:17:0x004e, B:19:0x0057, B:20:0x005a, B:22:0x0067, B:23:0x006a, B:25:0x006e, B:26:0x0071, B:28:0x0075, B:29:0x0078, B:31:0x007c, B:32:0x007f, B:41:0x0011, B:43:0x0015), top: B:2:0x0001, outer: #1 }] */
    /* JADX WARN: Removed duplicated region for block: B:13:0x003f A[Catch: all -> 0x000b, Exception -> 0x000e, TryCatch #0 {Exception -> 0x000e, blocks: (B:3:0x0001, B:5:0x0007, B:8:0x001b, B:10:0x0033, B:11:0x0036, B:13:0x003f, B:14:0x0042, B:16:0x004b, B:17:0x004e, B:19:0x0057, B:20:0x005a, B:22:0x0067, B:23:0x006a, B:25:0x006e, B:26:0x0071, B:28:0x0075, B:29:0x0078, B:31:0x007c, B:32:0x007f, B:41:0x0011, B:43:0x0015), top: B:2:0x0001, outer: #1 }] */
    /* JADX WARN: Removed duplicated region for block: B:16:0x004b A[Catch: all -> 0x000b, Exception -> 0x000e, TryCatch #0 {Exception -> 0x000e, blocks: (B:3:0x0001, B:5:0x0007, B:8:0x001b, B:10:0x0033, B:11:0x0036, B:13:0x003f, B:14:0x0042, B:16:0x004b, B:17:0x004e, B:19:0x0057, B:20:0x005a, B:22:0x0067, B:23:0x006a, B:25:0x006e, B:26:0x0071, B:28:0x0075, B:29:0x0078, B:31:0x007c, B:32:0x007f, B:41:0x0011, B:43:0x0015), top: B:2:0x0001, outer: #1 }] */
    /* JADX WARN: Removed duplicated region for block: B:19:0x0057 A[Catch: all -> 0x000b, Exception -> 0x000e, TryCatch #0 {Exception -> 0x000e, blocks: (B:3:0x0001, B:5:0x0007, B:8:0x001b, B:10:0x0033, B:11:0x0036, B:13:0x003f, B:14:0x0042, B:16:0x004b, B:17:0x004e, B:19:0x0057, B:20:0x005a, B:22:0x0067, B:23:0x006a, B:25:0x006e, B:26:0x0071, B:28:0x0075, B:29:0x0078, B:31:0x007c, B:32:0x007f, B:41:0x0011, B:43:0x0015), top: B:2:0x0001, outer: #1 }] */
    /* JADX WARN: Removed duplicated region for block: B:22:0x0067 A[Catch: all -> 0x000b, Exception -> 0x000e, TryCatch #0 {Exception -> 0x000e, blocks: (B:3:0x0001, B:5:0x0007, B:8:0x001b, B:10:0x0033, B:11:0x0036, B:13:0x003f, B:14:0x0042, B:16:0x004b, B:17:0x004e, B:19:0x0057, B:20:0x005a, B:22:0x0067, B:23:0x006a, B:25:0x006e, B:26:0x0071, B:28:0x0075, B:29:0x0078, B:31:0x007c, B:32:0x007f, B:41:0x0011, B:43:0x0015), top: B:2:0x0001, outer: #1 }] */
    /* JADX WARN: Removed duplicated region for block: B:25:0x006e A[Catch: all -> 0x000b, Exception -> 0x000e, TryCatch #0 {Exception -> 0x000e, blocks: (B:3:0x0001, B:5:0x0007, B:8:0x001b, B:10:0x0033, B:11:0x0036, B:13:0x003f, B:14:0x0042, B:16:0x004b, B:17:0x004e, B:19:0x0057, B:20:0x005a, B:22:0x0067, B:23:0x006a, B:25:0x006e, B:26:0x0071, B:28:0x0075, B:29:0x0078, B:31:0x007c, B:32:0x007f, B:41:0x0011, B:43:0x0015), top: B:2:0x0001, outer: #1 }] */
    /* JADX WARN: Removed duplicated region for block: B:28:0x0075 A[Catch: all -> 0x000b, Exception -> 0x000e, TryCatch #0 {Exception -> 0x000e, blocks: (B:3:0x0001, B:5:0x0007, B:8:0x001b, B:10:0x0033, B:11:0x0036, B:13:0x003f, B:14:0x0042, B:16:0x004b, B:17:0x004e, B:19:0x0057, B:20:0x005a, B:22:0x0067, B:23:0x006a, B:25:0x006e, B:26:0x0071, B:28:0x0075, B:29:0x0078, B:31:0x007c, B:32:0x007f, B:41:0x0011, B:43:0x0015), top: B:2:0x0001, outer: #1 }] */
    /* JADX WARN: Removed duplicated region for block: B:31:0x007c A[Catch: all -> 0x000b, Exception -> 0x000e, TryCatch #0 {Exception -> 0x000e, blocks: (B:3:0x0001, B:5:0x0007, B:8:0x001b, B:10:0x0033, B:11:0x0036, B:13:0x003f, B:14:0x0042, B:16:0x004b, B:17:0x004e, B:19:0x0057, B:20:0x005a, B:22:0x0067, B:23:0x006a, B:25:0x006e, B:26:0x0071, B:28:0x0075, B:29:0x0078, B:31:0x007c, B:32:0x007f, B:41:0x0011, B:43:0x0015), top: B:2:0x0001, outer: #1 }] */
    /* JADX WARN: Removed duplicated region for block: B:37:0x0059  */
    /* JADX WARN: Removed duplicated region for block: B:38:0x004d  */
    /* JADX WARN: Removed duplicated region for block: B:39:0x0041  */
    /* JADX WARN: Removed duplicated region for block: B:40:0x0035  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$updateEncryptedChat$167(TLRPC.EncryptedChat encryptedChat) {
        byte[] bArr;
        byte[] bArr2;
        byte[] bArr3;
        byte[] bArr4;
        byte[] bArr5;
        SQLitePreparedStatement sQLitePreparedStatement = null;
        try {
            try {
                bArr = encryptedChat.key_hash;
            } catch (Exception e) {
                checkSQLException(e);
                if (sQLitePreparedStatement == null) {
                    return;
                }
            }
            if (bArr != null) {
                if (bArr.length < 16) {
                }
                sQLitePreparedStatement = this.database.executeFast("UPDATE enc_chats SET data = ?, g = ?, authkey = ?, ttl = ?, layer = ?, seq_in = ?, seq_out = ?, use_count = ?, exchange_id = ?, key_date = ?, fprint = ?, fauthkey = ?, khash = ?, in_seq_no = ?, admin_id = ?, mtproto_seq = ? WHERE uid = ?");
                NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(encryptedChat.getObjectSize());
                byte[] bArr6 = encryptedChat.a_or_b;
                NativeByteBuffer nativeByteBuffer2 = new NativeByteBuffer(bArr6 == null ? bArr6.length : 1);
                byte[] bArr7 = encryptedChat.auth_key;
                NativeByteBuffer nativeByteBuffer3 = new NativeByteBuffer(bArr7 == null ? bArr7.length : 1);
                byte[] bArr8 = encryptedChat.future_auth_key;
                NativeByteBuffer nativeByteBuffer4 = new NativeByteBuffer(bArr8 == null ? bArr8.length : 1);
                byte[] bArr9 = encryptedChat.key_hash;
                NativeByteBuffer nativeByteBuffer5 = new NativeByteBuffer(bArr9 == null ? bArr9.length : 1);
                encryptedChat.serializeToStream(nativeByteBuffer);
                sQLitePreparedStatement.bindByteBuffer(1, nativeByteBuffer);
                bArr2 = encryptedChat.a_or_b;
                if (bArr2 != null) {
                    nativeByteBuffer2.writeBytes(bArr2);
                }
                bArr3 = encryptedChat.auth_key;
                if (bArr3 != null) {
                    nativeByteBuffer3.writeBytes(bArr3);
                }
                bArr4 = encryptedChat.future_auth_key;
                if (bArr4 != null) {
                    nativeByteBuffer4.writeBytes(bArr4);
                }
                bArr5 = encryptedChat.key_hash;
                if (bArr5 != null) {
                    nativeByteBuffer5.writeBytes(bArr5);
                }
                sQLitePreparedStatement.bindByteBuffer(2, nativeByteBuffer2);
                sQLitePreparedStatement.bindByteBuffer(3, nativeByteBuffer3);
                sQLitePreparedStatement.bindInteger(4, encryptedChat.ttl);
                sQLitePreparedStatement.bindInteger(5, encryptedChat.layer);
                sQLitePreparedStatement.bindInteger(6, encryptedChat.seq_in);
                sQLitePreparedStatement.bindInteger(7, encryptedChat.seq_out);
                sQLitePreparedStatement.bindInteger(8, (encryptedChat.key_use_count_in << 16) | encryptedChat.key_use_count_out);
                sQLitePreparedStatement.bindLong(9, encryptedChat.exchange_id);
                sQLitePreparedStatement.bindInteger(10, encryptedChat.key_create_date);
                sQLitePreparedStatement.bindLong(11, encryptedChat.future_key_fingerprint);
                sQLitePreparedStatement.bindByteBuffer(12, nativeByteBuffer4);
                sQLitePreparedStatement.bindByteBuffer(13, nativeByteBuffer5);
                sQLitePreparedStatement.bindInteger(14, encryptedChat.in_seq_no);
                sQLitePreparedStatement.bindLong(15, encryptedChat.admin_id);
                sQLitePreparedStatement.bindInteger(16, encryptedChat.mtproto_seq);
                sQLitePreparedStatement.bindInteger(17, encryptedChat.id);
                sQLitePreparedStatement.step();
                nativeByteBuffer.reuse();
                nativeByteBuffer2.reuse();
                nativeByteBuffer3.reuse();
                nativeByteBuffer4.reuse();
                nativeByteBuffer5.reuse();
                sQLitePreparedStatement.dispose();
            }
            byte[] bArr10 = encryptedChat.auth_key;
            if (bArr10 != null) {
                encryptedChat.key_hash = AndroidUtilities.calcAuthKeyHash(bArr10);
            }
            sQLitePreparedStatement = this.database.executeFast("UPDATE enc_chats SET data = ?, g = ?, authkey = ?, ttl = ?, layer = ?, seq_in = ?, seq_out = ?, use_count = ?, exchange_id = ?, key_date = ?, fprint = ?, fauthkey = ?, khash = ?, in_seq_no = ?, admin_id = ?, mtproto_seq = ? WHERE uid = ?");
            NativeByteBuffer nativeByteBuffer6 = new NativeByteBuffer(encryptedChat.getObjectSize());
            byte[] bArr62 = encryptedChat.a_or_b;
            NativeByteBuffer nativeByteBuffer22 = new NativeByteBuffer(bArr62 == null ? bArr62.length : 1);
            byte[] bArr72 = encryptedChat.auth_key;
            NativeByteBuffer nativeByteBuffer32 = new NativeByteBuffer(bArr72 == null ? bArr72.length : 1);
            byte[] bArr82 = encryptedChat.future_auth_key;
            NativeByteBuffer nativeByteBuffer42 = new NativeByteBuffer(bArr82 == null ? bArr82.length : 1);
            byte[] bArr92 = encryptedChat.key_hash;
            NativeByteBuffer nativeByteBuffer52 = new NativeByteBuffer(bArr92 == null ? bArr92.length : 1);
            encryptedChat.serializeToStream(nativeByteBuffer6);
            sQLitePreparedStatement.bindByteBuffer(1, nativeByteBuffer6);
            bArr2 = encryptedChat.a_or_b;
            if (bArr2 != null) {
            }
            bArr3 = encryptedChat.auth_key;
            if (bArr3 != null) {
            }
            bArr4 = encryptedChat.future_auth_key;
            if (bArr4 != null) {
            }
            bArr5 = encryptedChat.key_hash;
            if (bArr5 != null) {
            }
            sQLitePreparedStatement.bindByteBuffer(2, nativeByteBuffer22);
            sQLitePreparedStatement.bindByteBuffer(3, nativeByteBuffer32);
            sQLitePreparedStatement.bindInteger(4, encryptedChat.ttl);
            sQLitePreparedStatement.bindInteger(5, encryptedChat.layer);
            sQLitePreparedStatement.bindInteger(6, encryptedChat.seq_in);
            sQLitePreparedStatement.bindInteger(7, encryptedChat.seq_out);
            sQLitePreparedStatement.bindInteger(8, (encryptedChat.key_use_count_in << 16) | encryptedChat.key_use_count_out);
            sQLitePreparedStatement.bindLong(9, encryptedChat.exchange_id);
            sQLitePreparedStatement.bindInteger(10, encryptedChat.key_create_date);
            sQLitePreparedStatement.bindLong(11, encryptedChat.future_key_fingerprint);
            sQLitePreparedStatement.bindByteBuffer(12, nativeByteBuffer42);
            sQLitePreparedStatement.bindByteBuffer(13, nativeByteBuffer52);
            sQLitePreparedStatement.bindInteger(14, encryptedChat.in_seq_no);
            sQLitePreparedStatement.bindLong(15, encryptedChat.admin_id);
            sQLitePreparedStatement.bindInteger(16, encryptedChat.mtproto_seq);
            sQLitePreparedStatement.bindInteger(17, encryptedChat.id);
            sQLitePreparedStatement.step();
            nativeByteBuffer6.reuse();
            nativeByteBuffer22.reuse();
            nativeByteBuffer32.reuse();
            nativeByteBuffer42.reuse();
            nativeByteBuffer52.reuse();
            sQLitePreparedStatement.dispose();
        } catch (Throwable th) {
            if (sQLitePreparedStatement != null) {
                sQLitePreparedStatement.dispose();
            }
            throw th;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateEncryptedChatLayer$166(TLRPC.EncryptedChat encryptedChat) {
        SQLitePreparedStatement sQLitePreparedStatement = null;
        try {
            try {
                sQLitePreparedStatement = this.database.executeFast("UPDATE enc_chats SET layer = ? WHERE uid = ?");
                sQLitePreparedStatement.bindInteger(1, encryptedChat.layer);
                sQLitePreparedStatement.bindInteger(2, encryptedChat.id);
                sQLitePreparedStatement.step();
            } catch (Exception e) {
                checkSQLException(e);
                if (sQLitePreparedStatement == null) {
                    return;
                }
            }
            sQLitePreparedStatement.dispose();
        } catch (Throwable th) {
            if (sQLitePreparedStatement != null) {
                sQLitePreparedStatement.dispose();
            }
            throw th;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateEncryptedChatSeq$164(TLRPC.EncryptedChat encryptedChat, boolean z) {
        SQLitePreparedStatement sQLitePreparedStatement = null;
        try {
            try {
                sQLitePreparedStatement = this.database.executeFast("UPDATE enc_chats SET seq_in = ?, seq_out = ?, use_count = ?, in_seq_no = ?, mtproto_seq = ? WHERE uid = ?");
                sQLitePreparedStatement.bindInteger(1, encryptedChat.seq_in);
                sQLitePreparedStatement.bindInteger(2, encryptedChat.seq_out);
                sQLitePreparedStatement.bindInteger(3, (encryptedChat.key_use_count_in << 16) | encryptedChat.key_use_count_out);
                sQLitePreparedStatement.bindInteger(4, encryptedChat.in_seq_no);
                sQLitePreparedStatement.bindInteger(5, encryptedChat.mtproto_seq);
                sQLitePreparedStatement.bindInteger(6, encryptedChat.id);
                sQLitePreparedStatement.step();
                if (z && encryptedChat.in_seq_no != 0) {
                    long encryptedChatId = DialogObject.getEncryptedChatId(encryptedChat.id);
                    this.database.executeFast(String.format(Locale.US, "DELETE FROM messages_v2 WHERE mid IN (SELECT m.mid FROM messages_v2 as m LEFT JOIN messages_seq as s ON m.mid = s.mid WHERE m.uid = %d AND m.date = 0 AND m.mid < 0 AND s.seq_out <= %d) AND uid = %d", Long.valueOf(encryptedChatId), Integer.valueOf(encryptedChat.in_seq_no), Long.valueOf(encryptedChatId))).stepThis().dispose();
                }
            } catch (Exception e) {
                checkSQLException(e);
                if (sQLitePreparedStatement == null) {
                    return;
                }
            }
            sQLitePreparedStatement.dispose();
        } catch (Throwable th) {
            if (sQLitePreparedStatement != null) {
                sQLitePreparedStatement.dispose();
            }
            throw th;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateEncryptedChatTTL$165(TLRPC.EncryptedChat encryptedChat) {
        SQLitePreparedStatement sQLitePreparedStatement = null;
        try {
            try {
                sQLitePreparedStatement = this.database.executeFast("UPDATE enc_chats SET ttl = ? WHERE uid = ?");
                sQLitePreparedStatement.bindInteger(1, encryptedChat.ttl);
                sQLitePreparedStatement.bindInteger(2, encryptedChat.id);
                sQLitePreparedStatement.step();
            } catch (Exception e) {
                checkSQLException(e);
                if (sQLitePreparedStatement == null) {
                    return;
                }
            }
            sQLitePreparedStatement.dispose();
        } catch (Throwable th) {
            if (sQLitePreparedStatement != null) {
                sQLitePreparedStatement.dispose();
            }
            throw th;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateFiltersReadCounter$113() {
        ArrayList<MessagesController.DialogFilter> arrayList = getMessagesController().dialogFilters;
        int size = arrayList.size();
        for (int i = 0; i < size; i++) {
            arrayList.get(i).unreadCount = arrayList.get(i).pendingUnreadCount;
        }
        this.mainUnreadCount = this.pendingMainUnreadCount;
        this.archiveUnreadCount = this.pendingArchiveUnreadCount;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateMessageCustomParams$104(TLRPC.Message message, long j) {
        SQLiteDatabase sQLiteDatabase;
        String str;
        SQLitePreparedStatement sQLitePreparedStatement = null;
        try {
            try {
                this.database.beginTransaction();
                TLRPC.Message messageWithCustomParamsOnlyInternal = getMessageWithCustomParamsOnlyInternal(message.id, j);
                MessageCustomParamsHelper.copyParams(message, messageWithCustomParamsOnlyInternal);
                for (int i = 0; i < 2; i++) {
                    if (i == 0) {
                        sQLiteDatabase = this.database;
                        str = "UPDATE messages_v2 SET custom_params = ? WHERE mid = ? AND uid = ?";
                    } else {
                        sQLiteDatabase = this.database;
                        str = "UPDATE messages_topics SET custom_params = ? WHERE mid = ? AND uid = ?";
                    }
                    SQLitePreparedStatement executeFast = sQLiteDatabase.executeFast(str);
                    try {
                        executeFast.requery();
                        NativeByteBuffer writeLocalParams = MessageCustomParamsHelper.writeLocalParams(messageWithCustomParamsOnlyInternal);
                        if (writeLocalParams != null) {
                            executeFast.bindByteBuffer(1, writeLocalParams);
                        } else {
                            executeFast.bindNull(1);
                        }
                        executeFast.bindInteger(2, message.id);
                        executeFast.bindLong(3, j);
                        executeFast.step();
                        executeFast.dispose();
                        if (writeLocalParams != null) {
                            writeLocalParams.reuse();
                        }
                    } catch (Exception e) {
                        e = e;
                        sQLitePreparedStatement = executeFast;
                        checkSQLException(e);
                        SQLiteDatabase sQLiteDatabase2 = this.database;
                        if (sQLiteDatabase2 != null) {
                            sQLiteDatabase2.commitTransaction();
                        }
                        if (sQLitePreparedStatement != null) {
                            sQLitePreparedStatement.dispose();
                            return;
                        }
                        return;
                    } catch (Throwable th) {
                        th = th;
                        sQLitePreparedStatement = executeFast;
                        SQLiteDatabase sQLiteDatabase3 = this.database;
                        if (sQLiteDatabase3 != null) {
                            sQLiteDatabase3.commitTransaction();
                        }
                        if (sQLitePreparedStatement != null) {
                            sQLitePreparedStatement.dispose();
                        }
                        throw th;
                    }
                }
                this.database.commitTransaction();
                SQLiteDatabase sQLiteDatabase4 = this.database;
                if (sQLiteDatabase4 != null) {
                    sQLiteDatabase4.commitTransaction();
                }
            } catch (Exception e2) {
                e = e2;
            }
        } catch (Throwable th2) {
            th = th2;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:54:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:59:0x01d6  */
    /* JADX WARN: Type inference failed for: r14v16 */
    /* JADX WARN: Type inference failed for: r14v7 */
    /* JADX WARN: Type inference failed for: r14v8, types: [boolean, int] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$updateMessagePollResults$95(long j, TLRPC.Poll poll, TLRPC.PollResults pollResults) {
        LongSparseArray longSparseArray;
        int i;
        ArrayList arrayList;
        SQLitePreparedStatement sQLitePreparedStatement;
        int i2;
        ?? r14;
        SQLiteCursor sQLiteCursor;
        int i3 = 2;
        int i4 = 0;
        int i5 = 1;
        SQLiteCursor sQLiteCursor2 = null;
        try {
            try {
                SQLiteCursor queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT uid, mid FROM polls_v2 WHERE id = %d", Long.valueOf(j)), new Object[0]);
                LongSparseArray longSparseArray2 = null;
                while (queryFinalized.next()) {
                    try {
                        long longValue = queryFinalized.longValue(0);
                        if (longSparseArray2 == null) {
                            longSparseArray2 = new LongSparseArray();
                        }
                        ArrayList arrayList2 = (ArrayList) longSparseArray2.get(longValue);
                        if (arrayList2 == null) {
                            arrayList2 = new ArrayList();
                            longSparseArray2.put(longValue, arrayList2);
                        }
                        arrayList2.add(Integer.valueOf(queryFinalized.intValue(1)));
                    } catch (Exception e) {
                        e = e;
                        sQLiteCursor2 = queryFinalized;
                    } catch (Throwable th) {
                        th = th;
                        sQLiteCursor2 = queryFinalized;
                    }
                }
                queryFinalized.dispose();
                if (longSparseArray2 != null) {
                    this.database.beginTransaction();
                    SQLitePreparedStatement executeFast = this.database.executeFast("UPDATE messages_v2 SET data = ? WHERE mid = ? AND uid = ?");
                    SQLitePreparedStatement executeFast2 = this.database.executeFast("UPDATE messages_topics SET data = ? WHERE mid = ? AND uid = ?");
                    int size = longSparseArray2.size();
                    int i6 = 0;
                    while (i6 < size) {
                        long keyAt = longSparseArray2.keyAt(i6);
                        ArrayList arrayList3 = (ArrayList) longSparseArray2.valueAt(i6);
                        int size2 = arrayList3.size();
                        while (i4 < size2) {
                            Integer num = (Integer) arrayList3.get(i4);
                            SQLiteCursor sQLiteCursor3 = sQLiteCursor2;
                            int i7 = 0;
                            boolean z = false;
                            while (i7 < i3) {
                                if (i7 == i5) {
                                    try {
                                        longSparseArray = longSparseArray2;
                                        i = size;
                                        arrayList = arrayList3;
                                        sQLitePreparedStatement = executeFast2;
                                        i2 = size2;
                                        r14 = 0;
                                        sQLiteCursor = this.database.queryFinalized(String.format(Locale.US, "SELECT data FROM messages_topics WHERE mid = %d AND uid = %d", num, Long.valueOf(keyAt)), new Object[0]);
                                    } catch (Exception e2) {
                                        e = e2;
                                        sQLiteCursor2 = sQLiteCursor3;
                                        checkSQLException(e);
                                        if (sQLiteCursor2 == null) {
                                        }
                                        sQLiteCursor2.dispose();
                                    } catch (Throwable th2) {
                                        th = th2;
                                        sQLiteCursor2 = sQLiteCursor3;
                                        if (sQLiteCursor2 != null) {
                                        }
                                        throw th;
                                    }
                                } else {
                                    longSparseArray = longSparseArray2;
                                    i = size;
                                    arrayList = arrayList3;
                                    i2 = size2;
                                    r14 = 0;
                                    sQLitePreparedStatement = executeFast;
                                    sQLiteCursor = this.database.queryFinalized(String.format(Locale.US, "SELECT data FROM messages_v2 WHERE mid = %d AND uid = %d", num, Long.valueOf(keyAt)), new Object[0]);
                                }
                                try {
                                    if (sQLiteCursor.next()) {
                                        NativeByteBuffer byteBufferValue = sQLiteCursor.byteBufferValue(r14);
                                        if (byteBufferValue != 0) {
                                            TLRPC.Message TLdeserialize = TLRPC.Message.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(r14), r14);
                                            TLdeserialize.readAttachPath(byteBufferValue, getUserConfig().clientUserId);
                                            byteBufferValue.reuse();
                                            TLRPC.MessageMedia messageMedia = TLdeserialize.media;
                                            if (messageMedia instanceof TLRPC.TL_messageMediaPoll) {
                                                TLRPC.TL_messageMediaPoll tL_messageMediaPoll = (TLRPC.TL_messageMediaPoll) messageMedia;
                                                if (poll != null) {
                                                    tL_messageMediaPoll.poll = poll;
                                                }
                                                if (pollResults != null) {
                                                    MessageObject.updatePollResults(tL_messageMediaPoll, pollResults);
                                                }
                                                MessageObject.normalizeFlags(TLdeserialize);
                                                NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(TLdeserialize.getObjectSize());
                                                TLdeserialize.serializeToStream(nativeByteBuffer);
                                                sQLitePreparedStatement.requery();
                                                sQLitePreparedStatement.bindByteBuffer(1, nativeByteBuffer);
                                                sQLitePreparedStatement.bindInteger(2, num.intValue());
                                                sQLitePreparedStatement.bindLong(3, keyAt);
                                                sQLitePreparedStatement.step();
                                                nativeByteBuffer.reuse();
                                            }
                                        }
                                        z = true;
                                    }
                                    sQLiteCursor.dispose();
                                    i5 = 1;
                                    i7++;
                                    longSparseArray2 = longSparseArray;
                                    sQLiteCursor3 = sQLiteCursor;
                                    size2 = i2;
                                    size = i;
                                    arrayList3 = arrayList;
                                    i3 = 2;
                                } catch (Exception e3) {
                                    e = e3;
                                    sQLiteCursor2 = sQLiteCursor;
                                    checkSQLException(e);
                                    if (sQLiteCursor2 == null) {
                                        return;
                                    }
                                    sQLiteCursor2.dispose();
                                } catch (Throwable th3) {
                                    th = th3;
                                    sQLiteCursor2 = sQLiteCursor;
                                    if (sQLiteCursor2 != null) {
                                        sQLiteCursor2.dispose();
                                    }
                                    throw th;
                                }
                            }
                            LongSparseArray longSparseArray3 = longSparseArray2;
                            int i8 = size;
                            ArrayList arrayList4 = arrayList3;
                            int i9 = size2;
                            if (!z) {
                                this.database.executeFast(String.format(Locale.US, "DELETE FROM polls_v2 WHERE mid = %d AND uid = %d", num, Long.valueOf(keyAt))).stepThis().dispose();
                            }
                            i4++;
                            sQLiteCursor2 = sQLiteCursor3;
                            longSparseArray2 = longSparseArray3;
                            size2 = i9;
                            size = i8;
                            arrayList3 = arrayList4;
                            i3 = 2;
                            i5 = 1;
                        }
                        i6++;
                        size = size;
                        i3 = 2;
                        i4 = 0;
                        i5 = 1;
                    }
                    executeFast.dispose();
                    executeFast2.dispose();
                    this.database.commitTransaction();
                }
                if (sQLiteCursor2 == null) {
                    return;
                }
            } catch (Exception e4) {
                e = e4;
            }
            sQLiteCursor2.dispose();
        } catch (Throwable th4) {
            th = th4;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:49:0x015a  */
    /* JADX WARN: Removed duplicated region for block: B:51:0x015f  */
    /* JADX WARN: Type inference failed for: r5v0 */
    /* JADX WARN: Type inference failed for: r5v2 */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$updateMessageReactions$98(int i, long j, TLRPC.TL_messageReactions tL_messageReactions) {
        SQLiteCursor sQLiteCursor;
        SQLiteDatabase sQLiteDatabase;
        long j2;
        SQLiteCursor queryFinalized;
        NativeByteBuffer byteBufferValue;
        long j3;
        SQLiteDatabase sQLiteDatabase2;
        String str;
        TLRPC.TL_messageReactions tL_messageReactions2;
        long j4;
        int i2 = 2;
        int i3 = 0;
        try {
            long clientUserId = getUserConfig().getClientUserId();
            this.database.beginTransaction();
            long j5 = 0;
            int i4 = 0;
            TLRPC.TL_messageReactions tL_messageReactions3 = null;
            while (i4 < i2) {
                if (i4 == 0) {
                    SQLiteDatabase sQLiteDatabase3 = this.database;
                    Locale locale = Locale.US;
                    Integer valueOf = Integer.valueOf(i);
                    Long valueOf2 = Long.valueOf(j);
                    Object[] objArr = new Object[i2];
                    objArr[i3] = valueOf;
                    objArr[1] = valueOf2;
                    queryFinalized = sQLiteDatabase3.queryFinalized(String.format(locale, "SELECT data FROM messages_v2 WHERE mid = %d AND uid = %d", objArr), new Object[i3]);
                    j2 = j5;
                } else {
                    SQLiteDatabase sQLiteDatabase4 = this.database;
                    Locale locale2 = Locale.US;
                    Integer valueOf3 = Integer.valueOf(i);
                    Long valueOf4 = Long.valueOf(j);
                    j2 = j5;
                    Object[] objArr2 = new Object[i2];
                    objArr2[i3] = valueOf3;
                    objArr2[1] = valueOf4;
                    queryFinalized = sQLiteDatabase4.queryFinalized(String.format(locale2, "SELECT data FROM messages_topics WHERE mid = %d AND uid = %d", objArr2), new Object[i3]);
                }
                try {
                    if (queryFinalized.next() && (byteBufferValue = queryFinalized.byteBufferValue(i3)) != null) {
                        TLRPC.Message TLdeserialize = TLRPC.Message.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(i3), i3);
                        if (TLdeserialize != null) {
                            TLdeserialize.readAttachPath(byteBufferValue, getUserConfig().clientUserId);
                            byteBufferValue.reuse();
                            if (tL_messageReactions3 == null) {
                                tL_messageReactions3 = TLdeserialize.reactions;
                                j3 = MessageObject.getSavedDialogId(clientUserId, TLdeserialize);
                            } else {
                                j3 = j2;
                            }
                            MessageObject.updateReactions(TLdeserialize, tL_messageReactions);
                            if (i4 == 0) {
                                sQLiteDatabase2 = this.database;
                                str = "UPDATE messages_v2 SET data = ? WHERE mid = ? AND uid = ?";
                            } else {
                                sQLiteDatabase2 = this.database;
                                str = "UPDATE messages_topics SET data = ? WHERE mid = ? AND uid = ?";
                            }
                            SQLitePreparedStatement executeFast = sQLiteDatabase2.executeFast(str);
                            MessageObject.normalizeFlags(TLdeserialize);
                            NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(TLdeserialize.getObjectSize());
                            TLdeserialize.serializeToStream(nativeByteBuffer);
                            executeFast.requery();
                            executeFast.bindByteBuffer(1, nativeByteBuffer);
                            executeFast.bindInteger(i2, i);
                            executeFast.bindLong(3, j);
                            executeFast.step();
                            nativeByteBuffer.reuse();
                            executeFast.dispose();
                            if (clientUserId == j) {
                                tL_messageReactions2 = tL_messageReactions3;
                                j4 = j3;
                                this.database.executeFast(String.format(Locale.US, "DELETE FROM tag_message_id WHERE mid = %d", Integer.valueOf(TLdeserialize.id))).stepThis().dispose();
                                SQLitePreparedStatement executeFast2 = this.database.executeFast("REPLACE INTO tag_message_id VALUES(?, ?, ?, ?)");
                                bindMessageTags(executeFast2, TLdeserialize);
                                executeFast2.dispose();
                            } else {
                                tL_messageReactions2 = tL_messageReactions3;
                                j4 = j3;
                            }
                            tL_messageReactions3 = tL_messageReactions2;
                            j5 = j4;
                            queryFinalized.dispose();
                            i4++;
                            i2 = 2;
                            i3 = 0;
                        } else {
                            byteBufferValue.reuse();
                        }
                    }
                    j5 = j2;
                    queryFinalized.dispose();
                    i4++;
                    i2 = 2;
                    i3 = 0;
                } catch (Exception e) {
                    e = e;
                    sQLiteCursor = queryFinalized;
                    try {
                        checkSQLException(e);
                        SQLiteDatabase sQLiteDatabase5 = this.database;
                        if (sQLiteDatabase5 != null) {
                            sQLiteDatabase5.commitTransaction();
                        }
                        if (sQLiteCursor != null) {
                            sQLiteCursor.dispose();
                            return;
                        }
                        return;
                    } catch (Throwable th) {
                        th = th;
                        sQLiteDatabase = this.database;
                        if (sQLiteDatabase != null) {
                            sQLiteDatabase.commitTransaction();
                        }
                        if (sQLiteCursor != null) {
                            sQLiteCursor.dispose();
                        }
                        throw th;
                    }
                } catch (Throwable th2) {
                    th = th2;
                    sQLiteCursor = queryFinalized;
                    sQLiteDatabase = this.database;
                    if (sQLiteDatabase != null) {
                    }
                    if (sQLiteCursor != null) {
                    }
                    throw th;
                }
            }
            long j6 = j5;
            this.database.commitTransaction();
            if (j == clientUserId && tL_messageReactions3 != null) {
                onReactionsUpdate(j6, tL_messageReactions3, tL_messageReactions);
            }
            SQLiteDatabase sQLiteDatabase6 = this.database;
            if (sQLiteDatabase6 != null) {
                sQLiteDatabase6.commitTransaction();
            }
        } catch (Exception e2) {
            e = e2;
            sQLiteCursor = null;
        } catch (Throwable th3) {
            th = th3;
            sQLiteCursor = null;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateMessageStateAndIdInternal$195(TLRPC.TL_updates tL_updates) {
        getMessagesController().processUpdates(tL_updates, false);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateMessageVerifyFlags$188(ArrayList arrayList) {
        SQLiteDatabase sQLiteDatabase;
        SQLiteDatabase sQLiteDatabase2;
        boolean z = false;
        SQLitePreparedStatement sQLitePreparedStatement = null;
        try {
            try {
                this.database.beginTransaction();
                try {
                    SQLitePreparedStatement executeFast = this.database.executeFast("UPDATE messages_v2 SET imp = ? WHERE mid = ? AND uid = ?");
                    try {
                        int size = arrayList.size();
                        for (int i = 0; i < size; i++) {
                            TLRPC.Message message = (TLRPC.Message) arrayList.get(i);
                            executeFast.requery();
                            int i2 = message.stickerVerified;
                            executeFast.bindInteger(1, i2 == 0 ? 1 : i2 == 2 ? 2 : 0);
                            executeFast.bindInteger(2, message.id);
                            executeFast.bindLong(3, MessageObject.getDialogId(message));
                            executeFast.step();
                        }
                        executeFast.dispose();
                        this.database.commitTransaction();
                    } catch (Exception e) {
                        e = e;
                        sQLitePreparedStatement = executeFast;
                        z = true;
                        checkSQLException(e);
                        if (z && (sQLiteDatabase2 = this.database) != null) {
                            sQLiteDatabase2.commitTransaction();
                        }
                        if (sQLitePreparedStatement != null) {
                            sQLitePreparedStatement.dispose();
                        }
                    } catch (Throwable th) {
                        th = th;
                        sQLitePreparedStatement = executeFast;
                        z = true;
                        if (z && (sQLiteDatabase = this.database) != null) {
                            sQLiteDatabase.commitTransaction();
                        }
                        if (sQLitePreparedStatement != null) {
                            sQLitePreparedStatement.dispose();
                        }
                        throw th;
                    }
                } catch (Exception e2) {
                    e = e2;
                } catch (Throwable th2) {
                    th = th2;
                }
            } catch (Exception e3) {
                e = e3;
            }
        } catch (Throwable th3) {
            th = th3;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateMessageVoiceTranscription$102(int i, long j, boolean z, long j2, String str) {
        TLRPC.Message messageWithCustomParamsOnlyInternal;
        SQLitePreparedStatement executeFast;
        SQLitePreparedStatement sQLitePreparedStatement = null;
        try {
            try {
                this.database.beginTransaction();
                messageWithCustomParamsOnlyInternal = getMessageWithCustomParamsOnlyInternal(i, j);
                messageWithCustomParamsOnlyInternal.voiceTranscriptionFinal = z;
                messageWithCustomParamsOnlyInternal.voiceTranscriptionId = j2;
                messageWithCustomParamsOnlyInternal.voiceTranscription = str;
                executeFast = this.database.executeFast("UPDATE messages_v2 SET custom_params = ? WHERE mid = ? AND uid = ?");
            } catch (Exception e) {
                e = e;
            }
        } catch (Throwable th) {
            th = th;
        }
        try {
            executeFast.requery();
            NativeByteBuffer writeLocalParams = MessageCustomParamsHelper.writeLocalParams(messageWithCustomParamsOnlyInternal);
            if (writeLocalParams != null) {
                executeFast.bindByteBuffer(1, writeLocalParams);
            } else {
                executeFast.bindNull(1);
            }
            executeFast.bindInteger(2, i);
            executeFast.bindLong(3, j);
            executeFast.step();
            executeFast.dispose();
            this.database.commitTransaction();
            if (writeLocalParams != null) {
                writeLocalParams.reuse();
            }
            SQLiteDatabase sQLiteDatabase = this.database;
            if (sQLiteDatabase != null) {
                sQLiteDatabase.commitTransaction();
            }
        } catch (Exception e2) {
            e = e2;
            sQLitePreparedStatement = executeFast;
            checkSQLException(e);
            SQLiteDatabase sQLiteDatabase2 = this.database;
            if (sQLiteDatabase2 != null) {
                sQLiteDatabase2.commitTransaction();
            }
            if (sQLitePreparedStatement != null) {
                sQLitePreparedStatement.dispose();
            }
        } catch (Throwable th2) {
            th = th2;
            sQLitePreparedStatement = executeFast;
            SQLiteDatabase sQLiteDatabase3 = this.database;
            if (sQLiteDatabase3 != null) {
                sQLiteDatabase3.commitTransaction();
            }
            if (sQLitePreparedStatement != null) {
                sQLitePreparedStatement.dispose();
            }
            throw th;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateMessageVoiceTranscription$103(int i, long j, TLRPC.Message message, String str) {
        SQLiteDatabase sQLiteDatabase;
        String str2;
        SQLitePreparedStatement sQLitePreparedStatement = null;
        try {
            try {
                this.database.beginTransaction();
                TLRPC.Message messageWithCustomParamsOnlyInternal = getMessageWithCustomParamsOnlyInternal(i, j);
                messageWithCustomParamsOnlyInternal.voiceTranscriptionOpen = message.voiceTranscriptionOpen;
                messageWithCustomParamsOnlyInternal.voiceTranscriptionRated = message.voiceTranscriptionRated;
                messageWithCustomParamsOnlyInternal.voiceTranscriptionFinal = message.voiceTranscriptionFinal;
                messageWithCustomParamsOnlyInternal.voiceTranscriptionForce = message.voiceTranscriptionForce;
                messageWithCustomParamsOnlyInternal.voiceTranscriptionId = message.voiceTranscriptionId;
                messageWithCustomParamsOnlyInternal.voiceTranscription = str;
                for (int i2 = 0; i2 < 2; i2++) {
                    if (i2 == 0) {
                        sQLiteDatabase = this.database;
                        str2 = "UPDATE messages_v2 SET custom_params = ? WHERE mid = ? AND uid = ?";
                    } else {
                        sQLiteDatabase = this.database;
                        str2 = "UPDATE messages_topics SET custom_params = ? WHERE mid = ? AND uid = ?";
                    }
                    SQLitePreparedStatement executeFast = sQLiteDatabase.executeFast(str2);
                    try {
                        executeFast.requery();
                        NativeByteBuffer writeLocalParams = MessageCustomParamsHelper.writeLocalParams(messageWithCustomParamsOnlyInternal);
                        if (writeLocalParams != null) {
                            executeFast.bindByteBuffer(1, writeLocalParams);
                        } else {
                            executeFast.bindNull(1);
                        }
                        executeFast.bindInteger(2, i);
                        executeFast.bindLong(3, j);
                        executeFast.step();
                        executeFast.dispose();
                        this.database.commitTransaction();
                        if (writeLocalParams != null) {
                            writeLocalParams.reuse();
                        }
                    } catch (Exception e) {
                        e = e;
                        sQLitePreparedStatement = executeFast;
                        checkSQLException(e);
                        SQLiteDatabase sQLiteDatabase2 = this.database;
                        if (sQLiteDatabase2 != null) {
                            sQLiteDatabase2.commitTransaction();
                        }
                        if (sQLitePreparedStatement != null) {
                            sQLitePreparedStatement.dispose();
                            return;
                        }
                        return;
                    } catch (Throwable th) {
                        th = th;
                        sQLitePreparedStatement = executeFast;
                        SQLiteDatabase sQLiteDatabase3 = this.database;
                        if (sQLiteDatabase3 != null) {
                            sQLiteDatabase3.commitTransaction();
                        }
                        if (sQLitePreparedStatement != null) {
                            sQLitePreparedStatement.dispose();
                        }
                        throw th;
                    }
                }
                SQLiteDatabase sQLiteDatabase4 = this.database;
                if (sQLiteDatabase4 != null) {
                    sQLiteDatabase4.commitTransaction();
                }
            } catch (Throwable th2) {
                th = th2;
            }
        } catch (Exception e2) {
            e = e2;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateMessageVoiceTranscriptionOpen$101(int i, long j, TLRPC.Message message) {
        SQLiteDatabase sQLiteDatabase;
        String str;
        SQLitePreparedStatement sQLitePreparedStatement = null;
        try {
            try {
                this.database.beginTransaction();
                TLRPC.Message messageWithCustomParamsOnlyInternal = getMessageWithCustomParamsOnlyInternal(i, j);
                messageWithCustomParamsOnlyInternal.voiceTranscriptionOpen = message.voiceTranscriptionOpen;
                messageWithCustomParamsOnlyInternal.voiceTranscriptionRated = message.voiceTranscriptionRated;
                messageWithCustomParamsOnlyInternal.voiceTranscriptionFinal = message.voiceTranscriptionFinal;
                messageWithCustomParamsOnlyInternal.voiceTranscriptionForce = message.voiceTranscriptionForce;
                messageWithCustomParamsOnlyInternal.voiceTranscriptionId = message.voiceTranscriptionId;
                for (int i2 = 0; i2 < 2; i2++) {
                    if (i2 == 0) {
                        sQLiteDatabase = this.database;
                        str = "UPDATE messages_v2 SET custom_params = ? WHERE mid = ? AND uid = ?";
                    } else {
                        sQLiteDatabase = this.database;
                        str = "UPDATE messages_topics SET custom_params = ? WHERE mid = ? AND uid = ?";
                    }
                    SQLitePreparedStatement executeFast = sQLiteDatabase.executeFast(str);
                    try {
                        executeFast.requery();
                        NativeByteBuffer writeLocalParams = MessageCustomParamsHelper.writeLocalParams(messageWithCustomParamsOnlyInternal);
                        if (writeLocalParams != null) {
                            executeFast.bindByteBuffer(1, writeLocalParams);
                        } else {
                            executeFast.bindNull(1);
                        }
                        executeFast.bindInteger(2, i);
                        executeFast.bindLong(3, j);
                        executeFast.step();
                        executeFast.dispose();
                        if (writeLocalParams != null) {
                            writeLocalParams.reuse();
                        }
                    } catch (Exception e) {
                        e = e;
                        sQLitePreparedStatement = executeFast;
                        checkSQLException(e);
                        SQLiteDatabase sQLiteDatabase2 = this.database;
                        if (sQLiteDatabase2 != null) {
                            sQLiteDatabase2.commitTransaction();
                        }
                        if (sQLitePreparedStatement != null) {
                            sQLitePreparedStatement.dispose();
                            return;
                        }
                        return;
                    } catch (Throwable th) {
                        th = th;
                        sQLitePreparedStatement = executeFast;
                        SQLiteDatabase sQLiteDatabase3 = this.database;
                        if (sQLiteDatabase3 != null) {
                            sQLiteDatabase3.commitTransaction();
                        }
                        if (sQLitePreparedStatement != null) {
                            sQLitePreparedStatement.dispose();
                        }
                        throw th;
                    }
                }
                this.database.commitTransaction();
                SQLiteDatabase sQLiteDatabase4 = this.database;
                if (sQLiteDatabase4 != null) {
                    sQLiteDatabase4.commitTransaction();
                }
            } catch (Exception e2) {
                e = e2;
            }
        } catch (Throwable th2) {
            th = th2;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateMutedDialogsFiltersCounters$36() {
        resetAllUnreadCounters(true);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updatePinnedMessages$130(long j, ArrayList arrayList, HashMap hashMap, int i, int i2, boolean z) {
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.didLoadPinnedMessages, Long.valueOf(j), arrayList, Boolean.TRUE, null, hashMap, Integer.valueOf(i), Integer.valueOf(i2), Boolean.valueOf(z));
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updatePinnedMessages$131(long j, ArrayList arrayList, HashMap hashMap, int i, int i2, boolean z) {
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.didLoadPinnedMessages, Long.valueOf(j), arrayList, Boolean.FALSE, null, hashMap, Integer.valueOf(i), Integer.valueOf(i2), Boolean.valueOf(z));
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:65:0x0320  */
    /* JADX WARN: Removed duplicated region for block: B:67:0x0325  */
    /* JADX WARN: Removed duplicated region for block: B:69:0x032a  */
    /* JADX WARN: Removed duplicated region for block: B:71:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:76:0x0333  */
    /* JADX WARN: Removed duplicated region for block: B:78:0x0338  */
    /* JADX WARN: Removed duplicated region for block: B:80:0x033d  */
    /* JADX WARN: Type inference failed for: r14v0 */
    /* JADX WARN: Type inference failed for: r14v2 */
    /* JADX WARN: Type inference failed for: r14v23 */
    /* JADX WARN: Type inference failed for: r14v27 */
    /* JADX WARN: Type inference failed for: r14v4 */
    /* JADX WARN: Type inference failed for: r14v5 */
    /* JADX WARN: Type inference failed for: r14v6 */
    /* JADX WARN: Type inference failed for: r14v7, types: [org.telegram.SQLite.SQLiteCursor] */
    /* JADX WARN: Type inference failed for: r14v8, types: [org.telegram.SQLite.SQLiteCursor] */
    /* JADX WARN: Type inference failed for: r16v0 */
    /* JADX WARN: Type inference failed for: r16v1 */
    /* JADX WARN: Type inference failed for: r16v2 */
    /* JADX WARN: Type inference failed for: r16v3 */
    /* JADX WARN: Type inference failed for: r16v4 */
    /* JADX WARN: Type inference failed for: r16v5, types: [org.telegram.SQLite.SQLitePreparedStatement] */
    /* JADX WARN: Type inference failed for: r16v6, types: [org.telegram.SQLite.SQLitePreparedStatement] */
    /* JADX WARN: Type inference failed for: r16v7 */
    /* JADX WARN: Type inference failed for: r16v8 */
    /* JADX WARN: Type inference failed for: r16v9 */
    /* JADX WARN: Type inference failed for: r1v4, types: [org.telegram.SQLite.SQLitePreparedStatement] */
    /* JADX WARN: Type inference failed for: r1v7, types: [org.telegram.SQLite.SQLitePreparedStatement] */
    /* JADX WARN: Type inference failed for: r20v0, types: [java.util.HashMap] */
    /* JADX WARN: Type inference failed for: r6v15, types: [org.telegram.SQLite.SQLiteCursor] */
    /* JADX WARN: Type inference failed for: r9v14 */
    /* JADX WARN: Type inference failed for: r9v16, types: [boolean, int] */
    /* JADX WARN: Type inference failed for: r9v17 */
    /* JADX WARN: Type inference failed for: r9v4 */
    /* JADX WARN: Type inference failed for: r9v7, types: [boolean, int] */
    /* JADX WARN: Type inference failed for: r9v9 */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$updatePinnedMessages$132(boolean z, final HashMap hashMap, final int i, final long j, final ArrayList arrayList, int i2, boolean z2) {
        ?? r14;
        String str;
        ?? r16;
        SQLiteDatabase sQLiteDatabase;
        SQLiteDatabase sQLiteDatabase2;
        boolean z3;
        final ?? r9;
        final int max;
        Runnable runnable;
        int intValue;
        int i3;
        boolean z4;
        final int max2;
        final ?? r92;
        NativeByteBuffer nativeByteBuffer;
        Object obj = "REPLACE INTO chat_pinned_count VALUES(?, ?, ?)";
        String str2 = ",";
        int i4 = 2;
        try {
            try {
                try {
                    if (z) {
                        this.database.beginTransaction();
                        if (hashMap != 0) {
                            if (i == 0) {
                                this.database.executeFast("DELETE FROM chat_pinned_v2 WHERE uid = " + j).stepThis().dispose();
                            }
                            intValue = 0;
                        } else {
                            SQLiteCursor queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT COUNT(mid) FROM chat_pinned_v2 WHERE uid = %d AND mid IN (%s)", Long.valueOf(j), TextUtils.join(",", arrayList)), new Object[0]);
                            intValue = queryFinalized.next() ? queryFinalized.intValue(0) : 0;
                            queryFinalized.dispose();
                        }
                        SQLitePreparedStatement executeFast = this.database.executeFast("REPLACE INTO chat_pinned_v2 VALUES(?, ?, ?)");
                        try {
                            int size = arrayList.size();
                            int i5 = 0;
                            while (i5 < size) {
                                Integer num = (Integer) arrayList.get(i5);
                                executeFast.requery();
                                executeFast.bindLong(1, j);
                                executeFast.bindInteger(i4, num.intValue());
                                MessageObject messageObject = hashMap != 0 ? (MessageObject) hashMap.get(num) : null;
                                if (messageObject != null) {
                                    nativeByteBuffer = new NativeByteBuffer(messageObject.messageOwner.getObjectSize());
                                    messageObject.messageOwner.serializeToStream(nativeByteBuffer);
                                    executeFast.bindByteBuffer(3, nativeByteBuffer);
                                } else {
                                    executeFast.bindNull(3);
                                    nativeByteBuffer = null;
                                }
                                executeFast.step();
                                if (nativeByteBuffer != null) {
                                    nativeByteBuffer.reuse();
                                }
                                i5++;
                                i4 = 2;
                            }
                            executeFast.dispose();
                            this.database.commitTransaction();
                            SQLiteDatabase sQLiteDatabase3 = this.database;
                            Locale locale = Locale.US;
                            ?? queryFinalized2 = sQLiteDatabase3.queryFinalized(String.format(locale, "SELECT COUNT(mid) FROM chat_pinned_v2 WHERE uid = %d", Long.valueOf(j)), new Object[0]);
                            try {
                                int intValue2 = queryFinalized2.next() ? queryFinalized2.intValue(0) : 0;
                                queryFinalized2.dispose();
                                if (hashMap != 0) {
                                    r92 = z2;
                                    max2 = Math.max(i2, intValue2);
                                } else {
                                    SQLiteCursor queryFinalized3 = this.database.queryFinalized(String.format(locale, "SELECT count, end FROM chat_pinned_count WHERE uid = %d", Long.valueOf(j)), new Object[0]);
                                    if (queryFinalized3.next()) {
                                        i3 = queryFinalized3.intValue(0);
                                        if (queryFinalized3.intValue(1) != 0) {
                                            z4 = true;
                                            queryFinalized3.dispose();
                                            max2 = Math.max(i3 + (arrayList.size() - intValue), intValue2);
                                            r92 = z4;
                                        }
                                    } else {
                                        i3 = 0;
                                    }
                                    z4 = false;
                                    queryFinalized3.dispose();
                                    max2 = Math.max(i3 + (arrayList.size() - intValue), intValue2);
                                    r92 = z4;
                                }
                                ?? executeFast2 = this.database.executeFast("REPLACE INTO chat_pinned_count VALUES(?, ?, ?)");
                                executeFast2.requery();
                                executeFast2.bindLong(1, j);
                                executeFast2.bindInteger(2, max2);
                                executeFast2.bindInteger(3, r92);
                                executeFast2.step();
                                executeFast2.dispose();
                                obj = new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda229
                                    @Override // java.lang.Runnable
                                    public final void run() {
                                        MessagesStorage.this.lambda$updatePinnedMessages$130(j, arrayList, hashMap, i, max2, r92);
                                    }
                                };
                            } catch (Exception e) {
                                e = e;
                                str = queryFinalized2;
                                r16 = null;
                                r14 = str;
                                try {
                                    checkSQLException(e);
                                    sQLiteDatabase2 = this.database;
                                    if (sQLiteDatabase2 != null) {
                                    }
                                    if (r14 != 0) {
                                    }
                                    if (r16 != null) {
                                    }
                                } catch (Throwable th) {
                                    th = th;
                                    sQLiteDatabase = this.database;
                                    if (sQLiteDatabase != null) {
                                        sQLiteDatabase.commitTransaction();
                                    }
                                    if (r14 != 0) {
                                        r14.dispose();
                                    }
                                    if (r16 != null) {
                                        r16.dispose();
                                    }
                                    throw th;
                                }
                            } catch (Throwable th2) {
                                th = th2;
                                r14 = queryFinalized2;
                                r16 = null;
                                sQLiteDatabase = this.database;
                                if (sQLiteDatabase != null) {
                                }
                                if (r14 != 0) {
                                }
                                if (r16 != null) {
                                }
                                throw th;
                            }
                        } catch (Exception e2) {
                            e = e2;
                            r16 = executeFast;
                            r14 = 0;
                            checkSQLException(e);
                            sQLiteDatabase2 = this.database;
                            if (sQLiteDatabase2 != null) {
                            }
                            if (r14 != 0) {
                            }
                            if (r16 != null) {
                            }
                        } catch (Throwable th3) {
                            th = th3;
                            r16 = executeFast;
                            r14 = 0;
                            sQLiteDatabase = this.database;
                            if (sQLiteDatabase != null) {
                            }
                            if (r14 != 0) {
                            }
                            if (r16 != null) {
                            }
                            throw th;
                        }
                    } else {
                        if (arrayList == null) {
                            this.database.executeFast("DELETE FROM chat_pinned_v2 WHERE uid = " + j).stepThis().dispose();
                            (DialogObject.isChatDialog(j) ? this.database.executeFast(String.format(Locale.US, "UPDATE chat_settings_v2 SET pinned = 0 WHERE uid = %d", Long.valueOf(-j))) : this.database.executeFast(String.format(Locale.US, "UPDATE user_settings SET pinned = 0 WHERE uid = %d", Long.valueOf(j)))).stepThis().dispose();
                            max = 0;
                            r9 = 1;
                        } else {
                            String join = TextUtils.join(",", arrayList);
                            (DialogObject.isChatDialog(j) ? this.database.executeFast(String.format(Locale.US, "UPDATE chat_settings_v2 SET pinned = 0 WHERE uid = %d AND pinned IN (%s)", Long.valueOf(-j), join)) : this.database.executeFast(String.format(Locale.US, "UPDATE user_settings SET pinned = 0 WHERE uid = %d AND pinned IN (%s)", Long.valueOf(j), join))).stepThis().dispose();
                            SQLiteDatabase sQLiteDatabase4 = this.database;
                            Locale locale2 = Locale.US;
                            sQLiteDatabase4.executeFast(String.format(locale2, "DELETE FROM chat_pinned_v2 WHERE uid = %d AND mid IN(%s)", Long.valueOf(j), join)).stepThis().dispose();
                            SQLiteCursor queryFinalized4 = this.database.queryFinalized("SELECT changes()", new Object[0]);
                            int intValue3 = queryFinalized4.next() ? queryFinalized4.intValue(0) : 0;
                            queryFinalized4.dispose();
                            try {
                                SQLiteCursor queryFinalized5 = this.database.queryFinalized(String.format(locale2, "SELECT COUNT(mid) FROM chat_pinned_v2 WHERE uid = %d", Long.valueOf(j)), new Object[0]);
                                int intValue4 = queryFinalized5.next() ? queryFinalized5.intValue(0) : 0;
                                queryFinalized5.dispose();
                                int i6 = 0;
                                SQLiteCursor queryFinalized6 = this.database.queryFinalized(String.format(locale2, "SELECT count, end FROM chat_pinned_count WHERE uid = %d", Long.valueOf(j)), new Object[0]);
                                if (queryFinalized6.next()) {
                                    i6 = Math.max(0, queryFinalized6.intValue(0) - intValue3);
                                    if (queryFinalized6.intValue(1) != 0) {
                                        z3 = true;
                                        queryFinalized6.dispose();
                                        r9 = z3;
                                        max = Math.max(intValue4, i6);
                                    }
                                }
                                z3 = false;
                                queryFinalized6.dispose();
                                r9 = z3;
                                max = Math.max(intValue4, i6);
                            } catch (Exception e3) {
                                e = e3;
                                str2 = null;
                                str = str2;
                                r16 = null;
                                r14 = str;
                                checkSQLException(e);
                                sQLiteDatabase2 = this.database;
                                if (sQLiteDatabase2 != null) {
                                    sQLiteDatabase2.commitTransaction();
                                }
                                if (r14 != 0) {
                                    r14.dispose();
                                }
                                if (r16 != null) {
                                    r16.dispose();
                                    return;
                                }
                                return;
                            } catch (Throwable th4) {
                                th = th4;
                                str2 = null;
                                r14 = str2;
                                r16 = null;
                                sQLiteDatabase = this.database;
                                if (sQLiteDatabase != null) {
                                }
                                if (r14 != 0) {
                                }
                                if (r16 != null) {
                                }
                                throw th;
                            }
                        }
                        ?? executeFast3 = this.database.executeFast("REPLACE INTO chat_pinned_count VALUES(?, ?, ?)");
                        executeFast3.requery();
                        executeFast3.bindLong(1, j);
                        executeFast3.bindInteger(2, max);
                        executeFast3.bindInteger(3, r9);
                        executeFast3.step();
                        executeFast3.dispose();
                        obj = new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda230
                            @Override // java.lang.Runnable
                            public final void run() {
                                MessagesStorage.this.lambda$updatePinnedMessages$131(j, arrayList, hashMap, i, max, r9);
                            }
                        };
                    }
                    AndroidUtilities.runOnUIThread(runnable);
                    SQLiteDatabase sQLiteDatabase5 = this.database;
                    if (sQLiteDatabase5 != null) {
                        sQLiteDatabase5.commitTransaction();
                    }
                } catch (Exception e4) {
                    e = e4;
                    r16 = obj;
                } catch (Throwable th5) {
                    th = th5;
                    r16 = obj;
                }
            } catch (Exception e5) {
                e = e5;
            } catch (Throwable th6) {
                th = th6;
            }
        } catch (Exception e6) {
            e = e6;
            str = null;
        } catch (Throwable th7) {
            th = th7;
            r14 = 0;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:42:0x00b1  */
    /* JADX WARN: Removed duplicated region for block: B:44:0x00b6  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$updateRepliesCount$187(int i, long j, int i2, ArrayList arrayList, int i3) {
        SQLiteCursor sQLiteCursor;
        TLRPC.MessageReplies messageReplies;
        NativeByteBuffer byteBufferValue;
        SQLitePreparedStatement sQLitePreparedStatement = null;
        try {
            SQLitePreparedStatement executeFast = this.database.executeFast("UPDATE messages_v2 SET replies_data = ? WHERE mid = ? AND uid = ?");
            try {
                long j2 = -j;
                sQLiteCursor = this.database.queryFinalized(String.format(Locale.ENGLISH, "SELECT replies_data FROM messages_v2 WHERE mid = %d AND uid = %d", Integer.valueOf(i), Long.valueOf(j2)), new Object[0]);
                try {
                    if (!sQLiteCursor.next() || (byteBufferValue = sQLiteCursor.byteBufferValue(0)) == null) {
                        messageReplies = null;
                    } else {
                        messageReplies = TLRPC.MessageReplies.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                        byteBufferValue.reuse();
                    }
                    sQLiteCursor.dispose();
                    if (messageReplies != null) {
                        int i4 = messageReplies.replies + i2;
                        messageReplies.replies = i4;
                        if (i4 < 0) {
                            messageReplies.replies = 0;
                        }
                        if (arrayList != null) {
                            messageReplies.recent_repliers = arrayList;
                            messageReplies.flags |= 2;
                        }
                        if (i3 != 0) {
                            messageReplies.max_id = i3;
                        }
                        executeFast.requery();
                        NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(messageReplies.getObjectSize());
                        messageReplies.serializeToStream(nativeByteBuffer);
                        executeFast.bindByteBuffer(1, nativeByteBuffer);
                        executeFast.bindInteger(2, i);
                        executeFast.bindLong(3, j2);
                        executeFast.step();
                        nativeByteBuffer.reuse();
                    }
                    executeFast.dispose();
                } catch (Exception e) {
                    e = e;
                    sQLitePreparedStatement = executeFast;
                    try {
                        checkSQLException(e);
                        if (sQLitePreparedStatement != null) {
                            sQLitePreparedStatement.dispose();
                        }
                        if (sQLiteCursor != null) {
                            sQLiteCursor.dispose();
                        }
                    } catch (Throwable th) {
                        th = th;
                        if (sQLitePreparedStatement != null) {
                            sQLitePreparedStatement.dispose();
                        }
                        if (sQLiteCursor != null) {
                            sQLiteCursor.dispose();
                        }
                        throw th;
                    }
                } catch (Throwable th2) {
                    th = th2;
                    sQLitePreparedStatement = executeFast;
                    if (sQLitePreparedStatement != null) {
                    }
                    if (sQLiteCursor != null) {
                    }
                    throw th;
                }
            } catch (Exception e2) {
                e = e2;
                sQLiteCursor = null;
            } catch (Throwable th3) {
                th = th3;
                sQLiteCursor = null;
            }
        } catch (Exception e3) {
            e = e3;
            sQLiteCursor = null;
        } catch (Throwable th4) {
            th = th4;
            sQLiteCursor = null;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateRepliesMaxReadIdInternal$185(long j, int i, int i2, int i3, int i4) {
        getMessagesController().getTopicsController().updateMaxReadId(j, i, i2, i3, i4);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateTopicData$46(long j, TLRPC.TL_forumTopic tL_forumTopic, int i) {
        getMessagesController().getTopicsController().updateTopicInUi(j, tL_forumTopic, i);
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:17:0x00a8 A[Catch: all -> 0x003e, Exception -> 0x0044, TRY_ENTER, TRY_LEAVE, TryCatch #8 {Exception -> 0x0044, all -> 0x003e, blocks: (B:87:0x001d, B:4:0x0051, B:17:0x00a8, B:58:0x00ed), top: B:86:0x001d }] */
    /* JADX WARN: Removed duplicated region for block: B:22:0x00ca A[Catch: all -> 0x00ba, Exception -> 0x00c0, TRY_LEAVE, TryCatch #11 {Exception -> 0x00c0, all -> 0x00ba, blocks: (B:73:0x00b0, B:20:0x00c6, B:22:0x00ca, B:26:0x00d6, B:27:0x00db, B:29:0x00df, B:30:0x00e3, B:32:0x00e7), top: B:72:0x00b0 }] */
    /* JADX WARN: Removed duplicated region for block: B:26:0x00d6 A[Catch: all -> 0x00ba, Exception -> 0x00c0, TRY_ENTER, TryCatch #11 {Exception -> 0x00c0, all -> 0x00ba, blocks: (B:73:0x00b0, B:20:0x00c6, B:22:0x00ca, B:26:0x00d6, B:27:0x00db, B:29:0x00df, B:30:0x00e3, B:32:0x00e7), top: B:72:0x00b0 }] */
    /* JADX WARN: Removed duplicated region for block: B:29:0x00df A[Catch: all -> 0x00ba, Exception -> 0x00c0, TryCatch #11 {Exception -> 0x00c0, all -> 0x00ba, blocks: (B:73:0x00b0, B:20:0x00c6, B:22:0x00ca, B:26:0x00d6, B:27:0x00db, B:29:0x00df, B:30:0x00e3, B:32:0x00e7), top: B:72:0x00b0 }] */
    /* JADX WARN: Removed duplicated region for block: B:32:0x00e7 A[Catch: all -> 0x00ba, Exception -> 0x00c0, TRY_LEAVE, TryCatch #11 {Exception -> 0x00c0, all -> 0x00ba, blocks: (B:73:0x00b0, B:20:0x00c6, B:22:0x00ca, B:26:0x00d6, B:27:0x00db, B:29:0x00df, B:30:0x00e3, B:32:0x00e7), top: B:72:0x00b0 }] */
    /* JADX WARN: Removed duplicated region for block: B:40:0x014c  */
    /* JADX WARN: Removed duplicated region for block: B:42:0x0151  */
    /* JADX WARN: Removed duplicated region for block: B:49:0x015d  */
    /* JADX WARN: Removed duplicated region for block: B:51:0x0162  */
    /* JADX WARN: Removed duplicated region for block: B:66:0x00da  */
    /* JADX WARN: Removed duplicated region for block: B:72:0x00b0 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:75:0x0143  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$updateTopicData$47(final int i, final TLRPC.TL_forumTopic tL_forumTopic, final long j, int i2) {
        SQLitePreparedStatement sQLitePreparedStatement;
        SQLitePreparedStatement executeFast;
        SQLiteCursor sQLiteCursor;
        int i3;
        TLRPC.TL_forumTopic tL_forumTopic2;
        MessagesStorage messagesStorage = this;
        if ((i & 16) != 0) {
            try {
                executeFast = messagesStorage.database.executeFast("UPDATE topics SET total_messages_count = ? WHERE did = ? AND topic_id = ?");
            } catch (Exception e) {
                e = e;
                sQLitePreparedStatement = null;
                sQLiteCursor = null;
                try {
                    messagesStorage.checkSQLException(e);
                    if (sQLitePreparedStatement != null) {
                    }
                    if (sQLiteCursor != null) {
                    }
                    messagesStorage.database.commitTransaction();
                } catch (Throwable th) {
                    th = th;
                    if (sQLitePreparedStatement != null) {
                        sQLitePreparedStatement.dispose();
                    }
                    if (sQLiteCursor != null) {
                        sQLiteCursor.dispose();
                    }
                    messagesStorage.database.commitTransaction();
                    throw th;
                }
            } catch (Throwable th2) {
                th = th2;
                sQLitePreparedStatement = null;
                sQLiteCursor = null;
                if (sQLitePreparedStatement != null) {
                }
                if (sQLiteCursor != null) {
                }
                messagesStorage.database.commitTransaction();
                throw th;
            }
            try {
                executeFast.requery();
                executeFast.bindInteger(1, tL_forumTopic.totalMessagesCount);
                executeFast.bindLong(2, j);
                executeFast.bindInteger(3, tL_forumTopic.id);
                executeFast.step();
                executeFast.dispose();
                if (i == 16) {
                    executeFast.dispose();
                    messagesStorage.database.commitTransaction();
                    return;
                }
            } catch (Exception e2) {
                e = e2;
                sQLitePreparedStatement = executeFast;
                sQLiteCursor = null;
                messagesStorage.checkSQLException(e);
                if (sQLitePreparedStatement != null) {
                }
                if (sQLiteCursor != null) {
                }
                messagesStorage.database.commitTransaction();
            } catch (Throwable th3) {
                th = th3;
                sQLitePreparedStatement = executeFast;
                sQLiteCursor = null;
                if (sQLitePreparedStatement != null) {
                }
                if (sQLiteCursor != null) {
                }
                messagesStorage.database.commitTransaction();
                throw th;
            }
        } else {
            executeFast = null;
        }
        SQLiteCursor queryFinalized = messagesStorage.database.queryFinalized(String.format(Locale.US, "SELECT data, edit_date FROM topics WHERE did = %d AND topic_id = %d", Long.valueOf(j), Integer.valueOf(tL_forumTopic.id)), new Object[0]);
        try {
        } catch (Exception e3) {
            e = e3;
            sQLiteCursor = queryFinalized;
        } catch (Throwable th4) {
            th = th4;
            sQLiteCursor = queryFinalized;
        }
        if (queryFinalized.next()) {
            NativeByteBuffer byteBufferValue = queryFinalized.byteBufferValue(0);
            i3 = queryFinalized.intValue(1);
            if (byteBufferValue != null) {
                tL_forumTopic2 = TLRPC.TL_forumTopic.TLdeserialize((AbstractSerializedData) byteBufferValue, byteBufferValue.readInt32(true), true);
                byteBufferValue.reuse();
                queryFinalized.dispose();
                if (tL_forumTopic2 != null && (i3 == 0 || i3 <= i2)) {
                    if ((i & 1) != 0) {
                        tL_forumTopic2.title = tL_forumTopic.title;
                    }
                    if ((i & 2) != 0) {
                        try {
                            tL_forumTopic2.icon_emoji_id = tL_forumTopic.icon_emoji_id;
                            tL_forumTopic2.flags |= 1;
                        } catch (Exception e4) {
                            e = e4;
                            sQLiteCursor = null;
                            messagesStorage = this;
                            sQLitePreparedStatement = executeFast;
                            messagesStorage.checkSQLException(e);
                            if (sQLitePreparedStatement != null) {
                                sQLitePreparedStatement.dispose();
                            }
                            if (sQLiteCursor != null) {
                                sQLiteCursor.dispose();
                            }
                            messagesStorage.database.commitTransaction();
                        } catch (Throwable th5) {
                            th = th5;
                            sQLiteCursor = null;
                            messagesStorage = this;
                            sQLitePreparedStatement = executeFast;
                            if (sQLitePreparedStatement != null) {
                            }
                            if (sQLiteCursor != null) {
                            }
                            messagesStorage.database.commitTransaction();
                            throw th;
                        }
                    }
                    if ((i & 4) != 0) {
                        tL_forumTopic2.pinned = tL_forumTopic.pinned;
                        tL_forumTopic2.pinnedOrder = tL_forumTopic.pinnedOrder;
                    }
                    try {
                        int i4 = !tL_forumTopic2.pinned ? tL_forumTopic2.pinnedOrder + 1 : 0;
                        if ((i & 8) != 0) {
                            tL_forumTopic2.closed = tL_forumTopic.closed;
                        }
                        if ((i & 32) != 0) {
                            tL_forumTopic2.hidden = tL_forumTopic.hidden;
                        }
                        messagesStorage = this;
                        executeFast = messagesStorage.database.executeFast("UPDATE topics SET data = ?, pinned = ?, hidden = ?, edit_date = ? WHERE did = ? AND topic_id = ?");
                        messagesStorage.database.beginTransaction();
                        NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(tL_forumTopic2.getObjectSize());
                        tL_forumTopic2.serializeToStream(nativeByteBuffer);
                        executeFast.bindByteBuffer(1, nativeByteBuffer);
                        executeFast.bindInteger(2, i4);
                        executeFast.bindInteger(3, tL_forumTopic2.hidden ? 1 : 0);
                        executeFast.bindInteger(4, i2);
                        executeFast.bindLong(5, j);
                        executeFast.bindInteger(6, tL_forumTopic2.id);
                        executeFast.step();
                        nativeByteBuffer.reuse();
                        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda232
                            @Override // java.lang.Runnable
                            public final void run() {
                                MessagesStorage.this.lambda$updateTopicData$46(j, tL_forumTopic, i);
                            }
                        });
                    } catch (Exception e5) {
                        e = e5;
                        messagesStorage = this;
                        sQLitePreparedStatement = executeFast;
                        sQLiteCursor = null;
                        messagesStorage.checkSQLException(e);
                        if (sQLitePreparedStatement != null) {
                        }
                        if (sQLiteCursor != null) {
                        }
                        messagesStorage.database.commitTransaction();
                    } catch (Throwable th6) {
                        th = th6;
                        messagesStorage = this;
                        sQLitePreparedStatement = executeFast;
                        sQLiteCursor = null;
                        if (sQLitePreparedStatement != null) {
                        }
                        if (sQLiteCursor != null) {
                        }
                        messagesStorage.database.commitTransaction();
                        throw th;
                    }
                }
                if (executeFast != null) {
                    executeFast.dispose();
                }
                messagesStorage.database.commitTransaction();
            }
        } else {
            i3 = 0;
        }
        tL_forumTopic2 = null;
        queryFinalized.dispose();
        if (tL_forumTopic2 != null) {
            if ((i & 1) != 0) {
            }
            if ((i & 2) != 0) {
            }
            if ((i & 4) != 0) {
            }
            if (!tL_forumTopic2.pinned) {
            }
            if ((i & 8) != 0) {
            }
            if ((i & 32) != 0) {
            }
            messagesStorage = this;
            executeFast = messagesStorage.database.executeFast("UPDATE topics SET data = ?, pinned = ?, hidden = ?, edit_date = ? WHERE did = ? AND topic_id = ?");
            messagesStorage.database.beginTransaction();
            NativeByteBuffer nativeByteBuffer2 = new NativeByteBuffer(tL_forumTopic2.getObjectSize());
            tL_forumTopic2.serializeToStream(nativeByteBuffer2);
            executeFast.bindByteBuffer(1, nativeByteBuffer2);
            executeFast.bindInteger(2, i4);
            executeFast.bindInteger(3, tL_forumTopic2.hidden ? 1 : 0);
            executeFast.bindInteger(4, i2);
            executeFast.bindLong(5, j);
            executeFast.bindInteger(6, tL_forumTopic2.id);
            executeFast.step();
            nativeByteBuffer2.reuse();
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda232
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesStorage.this.lambda$updateTopicData$46(j, tL_forumTopic, i);
                }
            });
        }
        if (executeFast != null) {
        }
        messagesStorage.database.commitTransaction();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateTopicsWithReadMessages$56(HashMap hashMap) {
        for (TopicKey topicKey : hashMap.keySet()) {
            Integer num = (Integer) hashMap.get(topicKey);
            num.intValue();
            try {
                this.database.executeFast(String.format(Locale.US, "UPDATE topics SET read_outbox = max((SELECT read_outbox FROM topics WHERE did = %d AND topic_id = %d), %d) WHERE did = %d AND topic_id = %d", Long.valueOf(topicKey.dialogId), Long.valueOf(topicKey.topicId), num, Long.valueOf(topicKey.dialogId), Long.valueOf(topicKey.topicId))).stepThis().dispose();
            } catch (SQLiteException e) {
                checkSQLException(e);
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Code restructure failed: missing block: B:53:0x00be, code lost:
    
        if (r5 == null) goto L51;
     */
    /* JADX WARN: Removed duplicated region for block: B:23:? A[RETURN, SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$updateUnreadReactionsCount$241(long j, boolean z, long j2, int i) {
        SQLitePreparedStatement executeFast;
        int intValue;
        SQLiteException e;
        SQLitePreparedStatement executeFast2;
        SQLitePreparedStatement sQLitePreparedStatement = null;
        try {
            if (j == 0) {
                try {
                    executeFast = this.database.executeFast("UPDATE dialogs SET unread_reactions = ? WHERE did = ?");
                } catch (SQLiteException e2) {
                    e = e2;
                }
                try {
                    executeFast.bindInteger(1, Math.max(i, 0));
                    executeFast.bindLong(2, j2);
                    executeFast.step();
                    executeFast.dispose();
                    if (i == 0) {
                        sQLitePreparedStatement = this.database.executeFast("UPDATE reaction_mentions SET state = 0 WHERE dialog_id = ?");
                        sQLitePreparedStatement.bindLong(1, j2);
                        sQLitePreparedStatement.step();
                        sQLitePreparedStatement.dispose();
                    }
                } catch (SQLiteException e3) {
                    sQLitePreparedStatement = executeFast;
                    e = e3;
                    e.printStackTrace();
                } catch (Throwable th) {
                    sQLitePreparedStatement = executeFast;
                    th = th;
                    if (sQLitePreparedStatement != null) {
                        sQLitePreparedStatement.dispose();
                    }
                    throw th;
                }
            }
            try {
                if (z) {
                    try {
                        SQLiteCursor queryFinalized = this.database.queryFinalized(String.format(Locale.ENGLISH, "SELECT unread_reactions FROM topics WHERE did = %d AND topic_id = %d", Long.valueOf(j2), Long.valueOf(j)), new Object[0]);
                        intValue = queryFinalized.next() ? queryFinalized.intValue(0) : 0;
                        queryFinalized.dispose();
                    } catch (SQLiteException e4) {
                        e = e4;
                        e.printStackTrace();
                        if (sQLitePreparedStatement == null) {
                            return;
                        }
                        sQLitePreparedStatement.dispose();
                    }
                } else {
                    intValue = 0;
                }
                executeFast2 = this.database.executeFast("UPDATE topics SET unread_reactions = ? WHERE did = ? AND topic_id = ?");
            } catch (Throwable th2) {
                th = th2;
            }
            try {
                executeFast2.bindInteger(1, Math.max(intValue + i, 0));
                executeFast2.bindLong(2, j2);
                executeFast2.bindLong(3, j);
                executeFast2.step();
                executeFast2.dispose();
                if (i == 0) {
                    sQLitePreparedStatement = this.database.executeFast("UPDATE reaction_mentions_topics SET state = 0 WHERE dialog_id = ? AND topic_id = ? ");
                    sQLitePreparedStatement.bindLong(1, j2);
                    sQLitePreparedStatement.bindLong(2, j);
                    sQLitePreparedStatement.step();
                    sQLitePreparedStatement.dispose();
                    return;
                }
                return;
            } catch (SQLiteException e5) {
                e = e5;
                sQLitePreparedStatement = executeFast2;
                e.printStackTrace();
                if (sQLitePreparedStatement == null) {
                }
                sQLitePreparedStatement.dispose();
            } catch (Throwable th3) {
                th = th3;
                sQLitePreparedStatement = executeFast2;
                if (sQLitePreparedStatement != null) {
                    sQLitePreparedStatement.dispose();
                }
                throw th;
            }
            sQLitePreparedStatement.dispose();
        } catch (Throwable th4) {
            th = th4;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:13:0x00bf  */
    /* JADX WARN: Removed duplicated region for block: B:15:0x00c4  */
    /* JADX WARN: Removed duplicated region for block: B:18:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:38:0x00ca  */
    /* JADX WARN: Removed duplicated region for block: B:40:0x00cf  */
    /* JADX WARN: Type inference failed for: r11v12 */
    /* JADX WARN: Type inference failed for: r11v4 */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$updateUserInfo$124(TLRPC.UserFull userFull, boolean z) {
        SQLiteCursor queryFinalized;
        TLRPC.User user = userFull.user;
        long j = user != null ? user.id : userFull.id;
        SQLitePreparedStatement sQLitePreparedStatement = null;
        try {
            if (z != 0) {
                try {
                    try {
                        queryFinalized = this.database.queryFinalized("SELECT uid FROM user_settings WHERE uid = " + j, new Object[0]);
                    } catch (Throwable th) {
                        th = th;
                        z = 0;
                        if (sQLitePreparedStatement != null) {
                            sQLitePreparedStatement.dispose();
                        }
                        if (z != 0) {
                            z.dispose();
                        }
                        throw th;
                    }
                } catch (Exception e) {
                    e = e;
                    queryFinalized = null;
                }
                try {
                    boolean next = queryFinalized.next();
                    queryFinalized.dispose();
                    if (!next) {
                        return;
                    }
                } catch (Exception e2) {
                    e = e2;
                    checkSQLException(e);
                    if (sQLitePreparedStatement != null) {
                    }
                    if (queryFinalized == null) {
                    }
                }
            }
            SQLitePreparedStatement executeFast = this.database.executeFast("REPLACE INTO user_settings VALUES(?, ?, ?)");
            try {
                NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(userFull.getObjectSize());
                userFull.serializeToStream(nativeByteBuffer);
                executeFast.bindLong(1, j);
                executeFast.bindByteBuffer(2, nativeByteBuffer);
                executeFast.bindInteger(3, userFull.pinned_msg_id);
                executeFast.step();
                executeFast.dispose();
                try {
                    try {
                        nativeByteBuffer.reuse();
                        if ((userFull.flags & 2048) != 0) {
                            SQLitePreparedStatement executeFast2 = this.database.executeFast("UPDATE dialogs SET folder_id = ? WHERE did = ?");
                            executeFast2.bindInteger(1, userFull.folder_id);
                            executeFast2.bindLong(2, j);
                            executeFast2.step();
                            executeFast2.dispose();
                            this.unknownDialogsIds.remove(j);
                        }
                        if ((userFull.flags & LiteMode.FLAG_ANIMATED_EMOJI_KEYBOARD_NOT_PREMIUM) != 0) {
                            executeFast = this.database.executeFast("UPDATE dialogs SET ttl_period = ? WHERE did = ?");
                            executeFast.bindInteger(1, userFull.ttl_period);
                            executeFast.bindLong(2, j);
                            executeFast.step();
                            executeFast.dispose();
                        }
                    } catch (Exception e3) {
                        e = e3;
                        executeFast = null;
                        sQLitePreparedStatement = executeFast;
                        queryFinalized = null;
                        checkSQLException(e);
                        if (sQLitePreparedStatement != null) {
                            sQLitePreparedStatement.dispose();
                        }
                        if (queryFinalized == null) {
                            queryFinalized.dispose();
                        }
                    }
                } catch (Throwable th2) {
                    th = th2;
                    executeFast = null;
                    sQLitePreparedStatement = executeFast;
                    z = 0;
                    if (sQLitePreparedStatement != null) {
                    }
                    if (z != 0) {
                    }
                    throw th;
                }
            } catch (Exception e4) {
                e = e4;
            } catch (Throwable th3) {
                th = th3;
            }
        } catch (Throwable th4) {
            th = th4;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateUserInfoPremiumBlocked$125(long j, boolean z) {
        SQLiteCursor sQLiteCursor;
        TLRPC.UserFull userFull;
        SQLitePreparedStatement sQLitePreparedStatement = null;
        try {
            sQLiteCursor = this.database.queryFinalized("SELECT uid, info, pinned FROM user_settings WHERE uid = " + j, new Object[0]);
            try {
                try {
                    boolean next = sQLiteCursor.next();
                    if (next) {
                        NativeByteBuffer byteBufferValue = sQLiteCursor.byteBufferValue(1);
                        userFull = TLRPC.UserFull.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(true), true);
                        if (userFull != null) {
                            userFull.pinned_msg_id = sQLiteCursor.intValue(2);
                        }
                        byteBufferValue.reuse();
                    } else {
                        userFull = null;
                    }
                    sQLiteCursor.dispose();
                    if (next && userFull != null && userFull.contact_require_premium != z) {
                        userFull.contact_require_premium = z;
                        SQLitePreparedStatement executeFast = this.database.executeFast("REPLACE INTO user_settings VALUES(?, ?, ?)");
                        try {
                            NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(userFull.getObjectSize());
                            userFull.serializeToStream(nativeByteBuffer);
                            executeFast.bindLong(1, j);
                            executeFast.bindByteBuffer(2, nativeByteBuffer);
                            executeFast.bindInteger(3, userFull.pinned_msg_id);
                            executeFast.step();
                            executeFast.dispose();
                            nativeByteBuffer.reuse();
                        } catch (Exception e) {
                            e = e;
                            sQLiteCursor = null;
                            sQLitePreparedStatement = executeFast;
                            checkSQLException(e);
                            if (sQLitePreparedStatement != null) {
                                sQLitePreparedStatement.dispose();
                            }
                            if (sQLiteCursor != null) {
                                sQLiteCursor.dispose();
                            }
                        } catch (Throwable th) {
                            th = th;
                            sQLiteCursor = null;
                            sQLitePreparedStatement = executeFast;
                            if (sQLitePreparedStatement != null) {
                                sQLitePreparedStatement.dispose();
                            }
                            if (sQLiteCursor != null) {
                                sQLiteCursor.dispose();
                            }
                            throw th;
                        }
                    }
                } catch (Exception e2) {
                    e = e2;
                }
            } catch (Throwable th2) {
                th = th2;
            }
        } catch (Exception e3) {
            e = e3;
            sQLiteCursor = null;
        } catch (Throwable th3) {
            th = th3;
            sQLiteCursor = null;
        }
    }

    /* JADX WARN: Can't wrap try/catch for region: R(11:132|(3:145|146|(6:148|104|(6:106|(1:108)(1:126)|109|110|111|(3:113|(2:115|116)|118))(1:128)|119|44|45))(1:134)|135|136|137|138|104|(0)(0)|119|44|45) */
    /* JADX WARN: Can't wrap try/catch for region: R(42:0|1|(3:2|3|(3:5|6|7))|(3:308|309|(40:311|312|313|314|10|11|12|13|(3:15|(4:19|20|16|17)|21)(2:221|(41:223|224|225|226|(9:229|230|(2:264|265)(1:232)|233|(1:235)(1:263)|(4:237|238|239|(1:241))(1:262)|(4:244|(1:246)|247|248)|249|227)|272|273|274|(4:278|279|275|276)|280|281|23|(3:206|207|(1:209))|(2:30|(3:33|34|31))|58|59|60|61|62|63|64|65|(8:69|70|71|72|73|74|66|67)|86|87|88|89|90|91|92|(5:94|95|96|97|(10:99|100|101|(3:129|130|(11:132|(3:145|146|(6:148|104|(6:106|(1:108)(1:126)|109|110|111|(3:113|(2:115|116)|118))(1:128)|119|44|45))(1:134)|135|136|137|138|104|(0)(0)|119|44|45))|103|104|(0)(0)|119|44|45))(1:169)|162|100|101|(0)|103|104|(0)(0)|119|44|45))|22|23|(0)|(4:26|28|30|(1:31))|58|59|60|61|62|63|64|65|(2:66|67)|86|87|88|89|90|91|92|(0)(0)|162|100|101|(0)|103|104|(0)(0)|119|44|45))|9|10|11|12|13|(0)(0)|22|23|(0)|(0)|58|59|60|61|62|63|64|65|(2:66|67)|86|87|88|89|90|91|92|(0)(0)|162|100|101|(0)|103|104|(0)(0)|119|44|45|(1:(0))) */
    /* JADX WARN: Can't wrap try/catch for region: R(44:0|1|2|3|(3:5|6|7)|(3:308|309|(40:311|312|313|314|10|11|12|13|(3:15|(4:19|20|16|17)|21)(2:221|(41:223|224|225|226|(9:229|230|(2:264|265)(1:232)|233|(1:235)(1:263)|(4:237|238|239|(1:241))(1:262)|(4:244|(1:246)|247|248)|249|227)|272|273|274|(4:278|279|275|276)|280|281|23|(3:206|207|(1:209))|(2:30|(3:33|34|31))|58|59|60|61|62|63|64|65|(8:69|70|71|72|73|74|66|67)|86|87|88|89|90|91|92|(5:94|95|96|97|(10:99|100|101|(3:129|130|(11:132|(3:145|146|(6:148|104|(6:106|(1:108)(1:126)|109|110|111|(3:113|(2:115|116)|118))(1:128)|119|44|45))(1:134)|135|136|137|138|104|(0)(0)|119|44|45))|103|104|(0)(0)|119|44|45))(1:169)|162|100|101|(0)|103|104|(0)(0)|119|44|45))|22|23|(0)|(4:26|28|30|(1:31))|58|59|60|61|62|63|64|65|(2:66|67)|86|87|88|89|90|91|92|(0)(0)|162|100|101|(0)|103|104|(0)(0)|119|44|45))|9|10|11|12|13|(0)(0)|22|23|(0)|(0)|58|59|60|61|62|63|64|65|(2:66|67)|86|87|88|89|90|91|92|(0)(0)|162|100|101|(0)|103|104|(0)(0)|119|44|45|(1:(0))) */
    /* JADX WARN: Can't wrap try/catch for region: R(46:0|1|2|3|5|6|7|(3:308|309|(40:311|312|313|314|10|11|12|13|(3:15|(4:19|20|16|17)|21)(2:221|(41:223|224|225|226|(9:229|230|(2:264|265)(1:232)|233|(1:235)(1:263)|(4:237|238|239|(1:241))(1:262)|(4:244|(1:246)|247|248)|249|227)|272|273|274|(4:278|279|275|276)|280|281|23|(3:206|207|(1:209))|(2:30|(3:33|34|31))|58|59|60|61|62|63|64|65|(8:69|70|71|72|73|74|66|67)|86|87|88|89|90|91|92|(5:94|95|96|97|(10:99|100|101|(3:129|130|(11:132|(3:145|146|(6:148|104|(6:106|(1:108)(1:126)|109|110|111|(3:113|(2:115|116)|118))(1:128)|119|44|45))(1:134)|135|136|137|138|104|(0)(0)|119|44|45))|103|104|(0)(0)|119|44|45))(1:169)|162|100|101|(0)|103|104|(0)(0)|119|44|45))|22|23|(0)|(4:26|28|30|(1:31))|58|59|60|61|62|63|64|65|(2:66|67)|86|87|88|89|90|91|92|(0)(0)|162|100|101|(0)|103|104|(0)(0)|119|44|45))|9|10|11|12|13|(0)(0)|22|23|(0)|(0)|58|59|60|61|62|63|64|65|(2:66|67)|86|87|88|89|90|91|92|(0)(0)|162|100|101|(0)|103|104|(0)(0)|119|44|45|(1:(0))) */
    /* JADX WARN: Code restructure failed: missing block: B:140:0x030b, code lost:
    
        r0 = e;
     */
    /* JADX WARN: Code restructure failed: missing block: B:141:0x030c, code lost:
    
        r4 = r8;
        r19 = r15;
     */
    /* JADX WARN: Code restructure failed: missing block: B:142:0x0304, code lost:
    
        r0 = th;
     */
    /* JADX WARN: Code restructure failed: missing block: B:143:0x0305, code lost:
    
        r14 = r7;
        r4 = r8;
     */
    /* JADX WARN: Code restructure failed: missing block: B:158:0x0364, code lost:
    
        r0 = e;
     */
    /* JADX WARN: Code restructure failed: missing block: B:159:0x0365, code lost:
    
        r19 = r15;
     */
    /* JADX WARN: Code restructure failed: missing block: B:160:0x0360, code lost:
    
        r0 = th;
     */
    /* JADX WARN: Code restructure failed: missing block: B:172:0x0383, code lost:
    
        r0 = e;
     */
    /* JADX WARN: Code restructure failed: missing block: B:173:0x0384, code lost:
    
        r19 = r15;
        r2 = null;
     */
    /* JADX WARN: Code restructure failed: missing block: B:174:0x037a, code lost:
    
        r4 = false;
     */
    /* JADX WARN: Code restructure failed: missing block: B:176:0x037e, code lost:
    
        r0 = th;
     */
    /* JADX WARN: Code restructure failed: missing block: B:177:0x037f, code lost:
    
        r2 = null;
     */
    /* JADX WARN: Code restructure failed: missing block: B:178:0x0373, code lost:
    
        r4 = false;
     */
    /* JADX WARN: Code restructure failed: missing block: B:180:0x0377, code lost:
    
        r0 = e;
     */
    /* JADX WARN: Code restructure failed: missing block: B:181:0x0378, code lost:
    
        r19 = r15;
     */
    /* JADX WARN: Code restructure failed: missing block: B:182:0x0370, code lost:
    
        r0 = th;
     */
    /* JADX WARN: Code restructure failed: missing block: B:193:0x03ac, code lost:
    
        r0 = e;
     */
    /* JADX WARN: Code restructure failed: missing block: B:194:0x03ad, code lost:
    
        r7 = r19;
        r2 = null;
     */
    /* JADX WARN: Code restructure failed: missing block: B:195:0x03a0, code lost:
    
        r0 = th;
     */
    /* JADX WARN: Code restructure failed: missing block: B:196:0x03a1, code lost:
    
        r2 = null;
        r4 = false;
        r14 = r19;
        r15 = r15;
     */
    /* JADX WARN: Code restructure failed: missing block: B:197:0x039b, code lost:
    
        r0 = e;
     */
    /* JADX WARN: Code restructure failed: missing block: B:198:0x039c, code lost:
    
        r7 = r19;
        r2 = null;
     */
    /* JADX WARN: Code restructure failed: missing block: B:199:0x0396, code lost:
    
        r0 = th;
     */
    /* JADX WARN: Code restructure failed: missing block: B:200:0x0397, code lost:
    
        r7 = r19;
        r2 = null;
     */
    /* JADX WARN: Code restructure failed: missing block: B:202:0x03b5, code lost:
    
        r0 = e;
     */
    /* JADX WARN: Code restructure failed: missing block: B:204:0x03b1, code lost:
    
        r0 = th;
     */
    /* JADX WARN: Code restructure failed: missing block: B:299:0x03c6, code lost:
    
        r0 = e;
     */
    /* JADX WARN: Code restructure failed: missing block: B:300:0x03c7, code lost:
    
        r7 = r10;
        r4 = false;
        r8 = null;
     */
    /* JADX WARN: Code restructure failed: missing block: B:301:0x03bd, code lost:
    
        r0 = th;
     */
    /* JADX WARN: Code restructure failed: missing block: B:302:0x03be, code lost:
    
        r7 = r10;
        r8 = null;
     */
    /* JADX WARN: Code restructure failed: missing block: B:304:0x03d5, code lost:
    
        r0 = e;
     */
    /* JADX WARN: Code restructure failed: missing block: B:305:0x03d6, code lost:
    
        r7 = r10;
     */
    /* JADX WARN: Code restructure failed: missing block: B:306:0x03cf, code lost:
    
        r0 = th;
     */
    /* JADX WARN: Code restructure failed: missing block: B:307:0x03d0, code lost:
    
        r7 = r10;
     */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:106:0x0324 A[Catch: all -> 0x0360, Exception -> 0x0364, TRY_LEAVE, TryCatch #43 {Exception -> 0x0364, all -> 0x0360, blocks: (B:101:0x02bd, B:104:0x031e, B:106:0x0324), top: B:100:0x02bd }] */
    /* JADX WARN: Removed duplicated region for block: B:128:0x0368  */
    /* JADX WARN: Removed duplicated region for block: B:129:0x02c2 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:15:0x0085  */
    /* JADX WARN: Removed duplicated region for block: B:169:0x02bb  */
    /* JADX WARN: Removed duplicated region for block: B:206:0x01cc A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:221:0x00b2 A[Catch: all -> 0x03bd, Exception -> 0x03c6, TRY_ENTER, TRY_LEAVE, TryCatch #41 {Exception -> 0x03c6, all -> 0x03bd, blocks: (B:13:0x007c, B:221:0x00b2), top: B:12:0x007c }] */
    /* JADX WARN: Removed duplicated region for block: B:26:0x01f2 A[Catch: all -> 0x01da, Exception -> 0x01e4, TryCatch #42 {Exception -> 0x01e4, all -> 0x01da, blocks: (B:207:0x01cc, B:209:0x01d2, B:26:0x01f2, B:28:0x01f6, B:31:0x01fd, B:33:0x0209), top: B:206:0x01cc }] */
    /* JADX WARN: Removed duplicated region for block: B:33:0x0209 A[Catch: all -> 0x01da, Exception -> 0x01e4, TRY_LEAVE, TryCatch #42 {Exception -> 0x01e4, all -> 0x01da, blocks: (B:207:0x01cc, B:209:0x01d2, B:26:0x01f2, B:28:0x01f6, B:31:0x01fd, B:33:0x0209), top: B:206:0x01cc }] */
    /* JADX WARN: Removed duplicated region for block: B:42:0x0405  */
    /* JADX WARN: Removed duplicated region for block: B:52:0x0426  */
    /* JADX WARN: Removed duplicated region for block: B:69:0x0247 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:94:0x029c A[Catch: all -> 0x0260, Exception -> 0x0267, TRY_ENTER, TRY_LEAVE, TryCatch #45 {Exception -> 0x0267, all -> 0x0260, blocks: (B:73:0x0251, B:94:0x029c), top: B:72:0x0251 }] */
    /* JADX WARN: Type inference failed for: r2v0 */
    /* JADX WARN: Type inference failed for: r2v12, types: [boolean, int] */
    /* JADX WARN: Type inference failed for: r2v20 */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private TLRPC.ChatFull loadChatInfoInternal(long j, boolean z, boolean z2, boolean z3, int i) {
        ArrayList<Integer> arrayList;
        SQLiteCursor sQLiteCursor;
        TLRPC.ChatFull chatFull;
        ArrayList<Integer> arrayList2;
        boolean z4;
        ArrayList<Integer> arrayList3;
        TLRPC.ChatFull chatFull2;
        int i2;
        boolean z5;
        SQLiteCursor sQLiteCursor2;
        int i3;
        SQLiteCursor sQLiteCursor3;
        boolean z6;
        int i4;
        int i5;
        NativeByteBuffer byteBufferValue;
        ArrayList<Long> arrayList4;
        ArrayList<Integer> arrayList5;
        ArrayList<Long> arrayList6;
        TLRPC.User TLdeserialize;
        TLRPC.ChannelParticipant channelParticipant;
        TLRPC.ChatFull chatFull3;
        SQLiteCursor sQLiteCursor4;
        long j2;
        int i6;
        boolean z7;
        int i7;
        int intValue;
        ArrayList<Long> arrayList7;
        int i8;
        long j3 = j;
        ?? r2 = 0;
        ArrayList<TLRPC.User> arrayList8 = new ArrayList<>();
        HashMap<Integer, MessageObject> hashMap = new HashMap<>();
        ArrayList<Integer> arrayList9 = new ArrayList<>();
        try {
            sQLiteCursor = this.database.queryFinalized("SELECT info, pinned, online, inviter, links FROM chat_settings_v2 WHERE uid = " + j3, new Object[0]);
            try {
                i5 = 2;
            } catch (Exception e) {
                e = e;
                arrayList2 = arrayList9;
                z4 = false;
                chatFull = null;
            } catch (Throwable th) {
                th = th;
                arrayList = arrayList9;
                chatFull = null;
            }
        } catch (Exception e2) {
            e = e2;
            arrayList2 = arrayList9;
            z4 = false;
            sQLiteCursor = null;
            chatFull = null;
        } catch (Throwable th2) {
            th = th2;
            arrayList = arrayList9;
            sQLiteCursor = null;
            chatFull = null;
        }
        if (sQLiteCursor.next()) {
            try {
                byteBufferValue = sQLiteCursor.byteBufferValue(0);
            } catch (Exception e3) {
                e = e3;
                arrayList2 = arrayList9;
                chatFull = null;
            } catch (Throwable th3) {
                th = th3;
                arrayList = arrayList9;
                chatFull = null;
            }
            if (byteBufferValue != null) {
                TLRPC.ChatFull TLdeserialize2 = TLRPC.ChatFull.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                try {
                    byteBufferValue.reuse();
                    TLdeserialize2.pinned_msg_id = sQLiteCursor.intValue(1);
                    TLdeserialize2.online_count = sQLiteCursor.intValue(2);
                    TLdeserialize2.inviterId = sQLiteCursor.longValue(3);
                    TLdeserialize2.invitesCount = sQLiteCursor.intValue(4);
                    chatFull = TLdeserialize2;
                    sQLiteCursor.dispose();
                    arrayList4 = new ArrayList<>();
                } catch (Exception e4) {
                    e = e4;
                    arrayList2 = arrayList9;
                    chatFull = TLdeserialize2;
                    z4 = false;
                    sQLiteCursor2 = sQLiteCursor;
                    i3 = 0;
                    try {
                        checkSQLException(e);
                        if (sQLiteCursor2 != null) {
                        }
                        i4 = i3;
                        z6 = z4;
                        getMessagesController().processChatInfo(j, chatFull, arrayList8, true, z2, z3, arrayList2, hashMap, i4, z6);
                        return chatFull;
                    } catch (Throwable th4) {
                        th = th4;
                        arrayList3 = arrayList2;
                        sQLiteCursor3 = sQLiteCursor2;
                        i2 = i3;
                        z5 = z4;
                        sQLiteCursor = sQLiteCursor3;
                        chatFull2 = chatFull;
                        if (sQLiteCursor != null) {
                        }
                        getMessagesController().processChatInfo(j, chatFull2, arrayList8, true, z2, z3, arrayList3, hashMap, i2, z5);
                        throw th;
                    }
                } catch (Throwable th5) {
                    th = th5;
                    arrayList = arrayList9;
                    chatFull = TLdeserialize2;
                    arrayList3 = arrayList;
                    chatFull2 = chatFull;
                    i2 = 0;
                    z5 = false;
                    if (sQLiteCursor != null) {
                    }
                    getMessagesController().processChatInfo(j, chatFull2, arrayList8, true, z2, z3, arrayList3, hashMap, i2, z5);
                    throw th;
                }
                if (!(chatFull instanceof TLRPC.TL_chatFull)) {
                    for (int i9 = 0; i9 < chatFull.participants.participants.size(); i9++) {
                        try {
                            arrayList4.add(Long.valueOf(chatFull.participants.participants.get(i9).user_id));
                        } catch (Exception e5) {
                            e = e5;
                            arrayList2 = arrayList9;
                            sQLiteCursor = null;
                            z4 = false;
                            sQLiteCursor2 = sQLiteCursor;
                            i3 = 0;
                            checkSQLException(e);
                            if (sQLiteCursor2 != null) {
                            }
                            i4 = i3;
                            z6 = z4;
                            getMessagesController().processChatInfo(j, chatFull, arrayList8, true, z2, z3, arrayList2, hashMap, i4, z6);
                            return chatFull;
                        } catch (Throwable th6) {
                            th = th6;
                            arrayList = arrayList9;
                            sQLiteCursor = null;
                            arrayList3 = arrayList;
                            chatFull2 = chatFull;
                            i2 = 0;
                            z5 = false;
                            if (sQLiteCursor != null) {
                            }
                            getMessagesController().processChatInfo(j, chatFull2, arrayList8, true, z2, z3, arrayList3, hashMap, i2, z5);
                            throw th;
                        }
                    }
                } else if (chatFull instanceof TLRPC.TL_channelFull) {
                    try {
                        SQLiteDatabase sQLiteDatabase = this.database;
                        StringBuilder sb = new StringBuilder();
                        sb.append("SELECT us.data, us.status, cu.data, cu.date FROM channel_users_v2 as cu LEFT JOIN users as us ON us.uid = cu.uid WHERE cu.did = ");
                        ArrayList<Long> arrayList10 = arrayList4;
                        sb.append(-j3);
                        sb.append(" ORDER BY cu.date DESC");
                        SQLiteCursor queryFinalized = sQLiteDatabase.queryFinalized(sb.toString(), new Object[0]);
                        try {
                            try {
                                chatFull.participants = new TLRPC.TL_chatParticipants();
                                while (queryFinalized.next()) {
                                    try {
                                        NativeByteBuffer byteBufferValue2 = queryFinalized.byteBufferValue(r2);
                                        if (byteBufferValue2 != 0) {
                                            try {
                                                TLdeserialize = TLRPC.User.TLdeserialize(byteBufferValue2, byteBufferValue2.readInt32(r2), r2);
                                                byteBufferValue2.reuse();
                                            } catch (Throwable th7) {
                                                th = th7;
                                                sQLiteCursor = queryFinalized;
                                                arrayList = arrayList9;
                                                arrayList3 = arrayList;
                                                chatFull2 = chatFull;
                                                i2 = 0;
                                                z5 = false;
                                                if (sQLiteCursor != null) {
                                                }
                                                getMessagesController().processChatInfo(j, chatFull2, arrayList8, true, z2, z3, arrayList3, hashMap, i2, z5);
                                                throw th;
                                            }
                                        } else {
                                            TLdeserialize = null;
                                        }
                                        NativeByteBuffer byteBufferValue3 = queryFinalized.byteBufferValue(i5);
                                        if (byteBufferValue3 != 0) {
                                            channelParticipant = TLRPC.ChannelParticipant.TLdeserialize(byteBufferValue3, byteBufferValue3.readInt32(r2), r2);
                                            byteBufferValue3.reuse();
                                        } else {
                                            channelParticipant = null;
                                        }
                                        if (channelParticipant != null) {
                                            arrayList5 = arrayList9;
                                            try {
                                                try {
                                                    if (channelParticipant.user_id == getUserConfig().clientUserId) {
                                                        TLdeserialize = getUserConfig().getCurrentUser();
                                                    }
                                                } catch (Throwable th8) {
                                                    th = th8;
                                                    sQLiteCursor = queryFinalized;
                                                    arrayList = arrayList5;
                                                    arrayList3 = arrayList;
                                                    chatFull2 = chatFull;
                                                    i2 = 0;
                                                    z5 = false;
                                                    if (sQLiteCursor != null) {
                                                        sQLiteCursor.dispose();
                                                    }
                                                    getMessagesController().processChatInfo(j, chatFull2, arrayList8, true, z2, z3, arrayList3, hashMap, i2, z5);
                                                    throw th;
                                                }
                                            } catch (Exception e6) {
                                                e = e6;
                                                try {
                                                    checkSQLException(e);
                                                    j3 = j;
                                                    arrayList9 = arrayList5;
                                                    r2 = 0;
                                                    i5 = 2;
                                                } catch (Exception e7) {
                                                    e = e7;
                                                    sQLiteCursor = queryFinalized;
                                                    arrayList2 = arrayList5;
                                                    z4 = false;
                                                    sQLiteCursor2 = sQLiteCursor;
                                                    i3 = 0;
                                                    checkSQLException(e);
                                                    if (sQLiteCursor2 != null) {
                                                        sQLiteCursor2.dispose();
                                                    }
                                                    i4 = i3;
                                                    z6 = z4;
                                                    getMessagesController().processChatInfo(j, chatFull, arrayList8, true, z2, z3, arrayList2, hashMap, i4, z6);
                                                    return chatFull;
                                                }
                                            }
                                        } else {
                                            arrayList5 = arrayList9;
                                        }
                                        if (TLdeserialize != null && channelParticipant != null) {
                                            TLRPC.UserStatus userStatus = TLdeserialize.status;
                                            if (userStatus != null) {
                                                userStatus.expires = queryFinalized.intValue(1);
                                            }
                                            arrayList8.add(TLdeserialize);
                                            channelParticipant.date = queryFinalized.intValue(3);
                                            TLRPC.TL_chatChannelParticipant tL_chatChannelParticipant = new TLRPC.TL_chatChannelParticipant();
                                            tL_chatChannelParticipant.user_id = MessageObject.getPeerId(channelParticipant.peer);
                                            tL_chatChannelParticipant.date = channelParticipant.date;
                                            tL_chatChannelParticipant.inviter_id = channelParticipant.inviter_id;
                                            tL_chatChannelParticipant.channelParticipant = channelParticipant;
                                            chatFull.participants.participants.add(tL_chatChannelParticipant);
                                        }
                                    } catch (Exception e8) {
                                        e = e8;
                                        arrayList5 = arrayList9;
                                    }
                                    j3 = j;
                                    arrayList9 = arrayList5;
                                    r2 = 0;
                                    i5 = 2;
                                }
                                arrayList5 = arrayList9;
                                queryFinalized.dispose();
                                int i10 = 0;
                                while (i10 < chatFull.bot_info.size()) {
                                    try {
                                        ArrayList<Long> arrayList11 = arrayList10;
                                        arrayList11.add(Long.valueOf(chatFull.bot_info.get(i10).user_id));
                                        i10++;
                                        arrayList10 = arrayList11;
                                    } catch (Exception e9) {
                                        e = e9;
                                        arrayList2 = arrayList5;
                                        z4 = false;
                                        sQLiteCursor = null;
                                        sQLiteCursor2 = sQLiteCursor;
                                        i3 = 0;
                                        checkSQLException(e);
                                        if (sQLiteCursor2 != null) {
                                        }
                                        i4 = i3;
                                        z6 = z4;
                                        getMessagesController().processChatInfo(j, chatFull, arrayList8, true, z2, z3, arrayList2, hashMap, i4, z6);
                                        return chatFull;
                                    } catch (Throwable th9) {
                                        th = th9;
                                        arrayList = arrayList5;
                                        sQLiteCursor = null;
                                        arrayList3 = arrayList;
                                        chatFull2 = chatFull;
                                        i2 = 0;
                                        z5 = false;
                                        if (sQLiteCursor != null) {
                                        }
                                        getMessagesController().processChatInfo(j, chatFull2, arrayList8, true, z2, z3, arrayList3, hashMap, i2, z5);
                                        throw th;
                                    }
                                }
                                arrayList6 = arrayList10;
                                if (chatFull != null) {
                                    try {
                                        long j4 = chatFull.inviterId;
                                        if (j4 != 0) {
                                            arrayList6.add(Long.valueOf(j4));
                                        }
                                    } catch (Exception e10) {
                                        e = e10;
                                        arrayList2 = arrayList5;
                                        i3 = 0;
                                        sQLiteCursor2 = null;
                                        z4 = false;
                                        chatFull3 = chatFull;
                                        chatFull = chatFull3;
                                        checkSQLException(e);
                                        if (sQLiteCursor2 != null) {
                                        }
                                        i4 = i3;
                                        z6 = z4;
                                        getMessagesController().processChatInfo(j, chatFull, arrayList8, true, z2, z3, arrayList2, hashMap, i4, z6);
                                        return chatFull;
                                    } catch (Throwable th10) {
                                        th = th10;
                                        arrayList3 = arrayList5;
                                        i3 = 0;
                                        z4 = false;
                                        sQLiteCursor3 = null;
                                        i2 = i3;
                                        z5 = z4;
                                        sQLiteCursor = sQLiteCursor3;
                                        chatFull2 = chatFull;
                                        if (sQLiteCursor != null) {
                                        }
                                        getMessagesController().processChatInfo(j, chatFull2, arrayList8, true, z2, z3, arrayList3, hashMap, i2, z5);
                                        throw th;
                                    }
                                }
                                if (chatFull != null && (arrayList7 = chatFull.recent_requesters) != null && !arrayList7.isEmpty()) {
                                    for (i8 = 0; i8 < Math.min(3, chatFull.recent_requesters.size()); i8++) {
                                        ArrayList<Long> arrayList12 = chatFull.recent_requesters;
                                        arrayList6.add(arrayList12.get((arrayList12.size() - 1) - i8));
                                    }
                                }
                                getUsersInternal(arrayList6, arrayList8);
                                j2 = -j;
                                int i11 = 0;
                                sQLiteCursor4 = getMessagesStorage().getDatabase().queryFinalized(String.format(Locale.US, "SELECT mid FROM chat_pinned_v2 WHERE uid = %d ORDER BY mid DESC", Long.valueOf(j2)), new Object[0]);
                                while (sQLiteCursor4.next()) {
                                    try {
                                        try {
                                            intValue = sQLiteCursor4.intValue(i11);
                                            arrayList2 = arrayList5;
                                        } catch (Exception e11) {
                                            e = e11;
                                            arrayList2 = arrayList5;
                                            sQLiteCursor2 = sQLiteCursor4;
                                            chatFull3 = chatFull;
                                            i3 = 0;
                                            z4 = false;
                                            chatFull = chatFull3;
                                            checkSQLException(e);
                                            if (sQLiteCursor2 != null) {
                                            }
                                            i4 = i3;
                                            z6 = z4;
                                            getMessagesController().processChatInfo(j, chatFull, arrayList8, true, z2, z3, arrayList2, hashMap, i4, z6);
                                            return chatFull;
                                        } catch (Throwable th11) {
                                            th = th11;
                                            arrayList2 = arrayList5;
                                            arrayList3 = arrayList2;
                                            z4 = false;
                                            sQLiteCursor3 = sQLiteCursor4;
                                            i3 = 0;
                                            i2 = i3;
                                            z5 = z4;
                                            sQLiteCursor = sQLiteCursor3;
                                            chatFull2 = chatFull;
                                            if (sQLiteCursor != null) {
                                            }
                                            getMessagesController().processChatInfo(j, chatFull2, arrayList8, true, z2, z3, arrayList3, hashMap, i2, z5);
                                            throw th;
                                        }
                                        try {
                                            arrayList2.add(Integer.valueOf(intValue));
                                            hashMap.put(Integer.valueOf(intValue), null);
                                            arrayList5 = arrayList2;
                                            i11 = 0;
                                        } catch (Exception e12) {
                                            e = e12;
                                            sQLiteCursor2 = sQLiteCursor4;
                                            chatFull3 = chatFull;
                                            i3 = 0;
                                            z4 = false;
                                            chatFull = chatFull3;
                                            checkSQLException(e);
                                            if (sQLiteCursor2 != null) {
                                            }
                                            i4 = i3;
                                            z6 = z4;
                                            getMessagesController().processChatInfo(j, chatFull, arrayList8, true, z2, z3, arrayList2, hashMap, i4, z6);
                                            return chatFull;
                                        } catch (Throwable th12) {
                                            th = th12;
                                            arrayList3 = arrayList2;
                                            z4 = false;
                                            sQLiteCursor3 = sQLiteCursor4;
                                            i3 = 0;
                                            i2 = i3;
                                            z5 = z4;
                                            sQLiteCursor = sQLiteCursor3;
                                            chatFull2 = chatFull;
                                            if (sQLiteCursor != null) {
                                            }
                                            getMessagesController().processChatInfo(j, chatFull2, arrayList8, true, z2, z3, arrayList3, hashMap, i2, z5);
                                            throw th;
                                        }
                                    } catch (Exception e13) {
                                        e = e13;
                                        arrayList2 = arrayList5;
                                        z4 = false;
                                        chatFull3 = chatFull;
                                        sQLiteCursor2 = sQLiteCursor4;
                                        i3 = 0;
                                        chatFull = chatFull3;
                                        checkSQLException(e);
                                        if (sQLiteCursor2 != null) {
                                        }
                                        i4 = i3;
                                        z6 = z4;
                                        getMessagesController().processChatInfo(j, chatFull, arrayList8, true, z2, z3, arrayList2, hashMap, i4, z6);
                                        return chatFull;
                                    } catch (Throwable th13) {
                                        th = th13;
                                        arrayList2 = arrayList5;
                                        z4 = false;
                                        arrayList3 = arrayList2;
                                        sQLiteCursor3 = sQLiteCursor4;
                                        i3 = 0;
                                        i2 = i3;
                                        z5 = z4;
                                        sQLiteCursor = sQLiteCursor3;
                                        chatFull2 = chatFull;
                                        if (sQLiteCursor != null) {
                                        }
                                        getMessagesController().processChatInfo(j, chatFull2, arrayList8, true, z2, z3, arrayList3, hashMap, i2, z5);
                                        throw th;
                                    }
                                }
                                arrayList2 = arrayList5;
                                sQLiteCursor4.dispose();
                                sQLiteCursor4 = this.database.queryFinalized("SELECT count, end FROM chat_pinned_count WHERE uid = " + j2, new Object[0]);
                            } catch (Throwable th14) {
                                th = th14;
                                arrayList5 = arrayList9;
                            }
                        } catch (Exception e14) {
                            e = e14;
                            arrayList5 = arrayList9;
                        }
                    } catch (Exception e15) {
                        e = e15;
                        arrayList5 = arrayList9;
                    } catch (Throwable th15) {
                        th = th15;
                        arrayList5 = arrayList9;
                    }
                    if (sQLiteCursor4.next()) {
                        int intValue2 = sQLiteCursor4.intValue(0);
                        try {
                            i6 = intValue2;
                        } catch (Exception e16) {
                            e = e16;
                            sQLiteCursor2 = sQLiteCursor4;
                            chatFull3 = chatFull;
                            i3 = intValue2;
                            z4 = false;
                            chatFull = chatFull3;
                            checkSQLException(e);
                            if (sQLiteCursor2 != null) {
                            }
                            i4 = i3;
                            z6 = z4;
                            getMessagesController().processChatInfo(j, chatFull, arrayList8, true, z2, z3, arrayList2, hashMap, i4, z6);
                            return chatFull;
                        } catch (Throwable th16) {
                            th = th16;
                            arrayList3 = arrayList2;
                            z4 = false;
                            sQLiteCursor3 = sQLiteCursor4;
                            i3 = intValue2;
                            i2 = i3;
                            z5 = z4;
                            sQLiteCursor = sQLiteCursor3;
                            chatFull2 = chatFull;
                            if (sQLiteCursor != null) {
                            }
                            getMessagesController().processChatInfo(j, chatFull2, arrayList8, true, z2, z3, arrayList3, hashMap, i2, z5);
                            throw th;
                        }
                        if (sQLiteCursor4.intValue(1) != 0) {
                            z7 = true;
                            sQLiteCursor4.dispose();
                            if (chatFull != null) {
                                try {
                                } catch (Exception e17) {
                                    e = e17;
                                    sQLiteCursor4 = null;
                                } catch (Throwable th17) {
                                    th = th17;
                                    sQLiteCursor4 = null;
                                }
                                if (chatFull.pinned_msg_id != 0) {
                                    if (arrayList2.isEmpty()) {
                                        i7 = 0;
                                    } else {
                                        try {
                                            i7 = 0;
                                        } catch (Exception e18) {
                                            e = e18;
                                            i3 = i6;
                                            z4 = z7;
                                            chatFull3 = chatFull;
                                            sQLiteCursor2 = null;
                                            chatFull = chatFull3;
                                            checkSQLException(e);
                                            if (sQLiteCursor2 != null) {
                                            }
                                            i4 = i3;
                                            z6 = z4;
                                            getMessagesController().processChatInfo(j, chatFull, arrayList8, true, z2, z3, arrayList2, hashMap, i4, z6);
                                            return chatFull;
                                        } catch (Throwable th18) {
                                            th = th18;
                                            i3 = i6;
                                            arrayList3 = arrayList2;
                                            z4 = z7;
                                            sQLiteCursor3 = null;
                                            i2 = i3;
                                            z5 = z4;
                                            sQLiteCursor = sQLiteCursor3;
                                            chatFull2 = chatFull;
                                            if (sQLiteCursor != null) {
                                            }
                                            getMessagesController().processChatInfo(j, chatFull2, arrayList8, true, z2, z3, arrayList3, hashMap, i2, z5);
                                            throw th;
                                        }
                                        if (chatFull.pinned_msg_id <= arrayList2.get(0).intValue()) {
                                            sQLiteCursor4 = null;
                                            if (arrayList2.isEmpty()) {
                                                chatFull3 = chatFull;
                                                try {
                                                    ArrayList<MessageObject> loadPinnedMessages = getMediaDataController().loadPinnedMessages(j2, z ? j : 0L, arrayList2, false);
                                                    if (loadPinnedMessages != null) {
                                                        int size = loadPinnedMessages.size();
                                                        while (i7 < size) {
                                                            MessageObject messageObject = loadPinnedMessages.get(i7);
                                                            hashMap.put(Integer.valueOf(messageObject.getId()), messageObject);
                                                            i7++;
                                                        }
                                                    }
                                                } catch (Exception e19) {
                                                    e = e19;
                                                    z4 = z7;
                                                    int i12 = i6;
                                                    sQLiteCursor2 = sQLiteCursor4;
                                                    i3 = i12;
                                                    chatFull = chatFull3;
                                                    checkSQLException(e);
                                                    if (sQLiteCursor2 != null) {
                                                    }
                                                    i4 = i3;
                                                    z6 = z4;
                                                    getMessagesController().processChatInfo(j, chatFull, arrayList8, true, z2, z3, arrayList2, hashMap, i4, z6);
                                                    return chatFull;
                                                } catch (Throwable th19) {
                                                    th = th19;
                                                    arrayList3 = arrayList2;
                                                    z4 = z7;
                                                    chatFull = chatFull3;
                                                    sQLiteCursor3 = sQLiteCursor4;
                                                    i3 = i6;
                                                    i2 = i3;
                                                    z5 = z4;
                                                    sQLiteCursor = sQLiteCursor3;
                                                    chatFull2 = chatFull;
                                                    if (sQLiteCursor != null) {
                                                    }
                                                    getMessagesController().processChatInfo(j, chatFull2, arrayList8, true, z2, z3, arrayList3, hashMap, i2, z5);
                                                    throw th;
                                                }
                                            } else {
                                                chatFull3 = chatFull;
                                            }
                                            i4 = i6;
                                            z6 = z7;
                                            chatFull = chatFull3;
                                            getMessagesController().processChatInfo(j, chatFull, arrayList8, true, z2, z3, arrayList2, hashMap, i4, z6);
                                            return chatFull;
                                        }
                                    }
                                    arrayList2.clear();
                                    arrayList2.add(Integer.valueOf(chatFull.pinned_msg_id));
                                    sQLiteCursor4 = null;
                                    hashMap.put(Integer.valueOf(chatFull.pinned_msg_id), null);
                                    if (arrayList2.isEmpty()) {
                                    }
                                    i4 = i6;
                                    z6 = z7;
                                    chatFull = chatFull3;
                                    getMessagesController().processChatInfo(j, chatFull, arrayList8, true, z2, z3, arrayList2, hashMap, i4, z6);
                                    return chatFull;
                                }
                            }
                            sQLiteCursor4 = null;
                            i7 = 0;
                            if (arrayList2.isEmpty()) {
                            }
                            i4 = i6;
                            z6 = z7;
                            chatFull = chatFull3;
                            getMessagesController().processChatInfo(j, chatFull, arrayList8, true, z2, z3, arrayList2, hashMap, i4, z6);
                            return chatFull;
                        }
                    } else {
                        i6 = 0;
                    }
                    z7 = false;
                    sQLiteCursor4.dispose();
                    if (chatFull != null) {
                    }
                    sQLiteCursor4 = null;
                    i7 = 0;
                    if (arrayList2.isEmpty()) {
                    }
                    i4 = i6;
                    z6 = z7;
                    chatFull = chatFull3;
                    getMessagesController().processChatInfo(j, chatFull, arrayList8, true, z2, z3, arrayList2, hashMap, i4, z6);
                    return chatFull;
                }
                arrayList6 = arrayList4;
                arrayList5 = arrayList9;
                if (chatFull != null) {
                }
                if (chatFull != null) {
                    while (i8 < Math.min(3, chatFull.recent_requesters.size())) {
                    }
                }
                getUsersInternal(arrayList6, arrayList8);
                j2 = -j;
                int i112 = 0;
                sQLiteCursor4 = getMessagesStorage().getDatabase().queryFinalized(String.format(Locale.US, "SELECT mid FROM chat_pinned_v2 WHERE uid = %d ORDER BY mid DESC", Long.valueOf(j2)), new Object[0]);
                while (sQLiteCursor4.next()) {
                }
                arrayList2 = arrayList5;
                sQLiteCursor4.dispose();
                sQLiteCursor4 = this.database.queryFinalized("SELECT count, end FROM chat_pinned_count WHERE uid = " + j2, new Object[0]);
                if (sQLiteCursor4.next()) {
                }
                z7 = false;
                sQLiteCursor4.dispose();
                if (chatFull != null) {
                }
                sQLiteCursor4 = null;
                i7 = 0;
                if (arrayList2.isEmpty()) {
                }
                i4 = i6;
                z6 = z7;
                chatFull = chatFull3;
                getMessagesController().processChatInfo(j, chatFull, arrayList8, true, z2, z3, arrayList2, hashMap, i4, z6);
                return chatFull;
            }
        }
        chatFull = null;
        sQLiteCursor.dispose();
        arrayList4 = new ArrayList<>();
        if (!(chatFull instanceof TLRPC.TL_chatFull)) {
        }
        arrayList6 = arrayList4;
        arrayList5 = arrayList9;
        if (chatFull != null) {
        }
        if (chatFull != null) {
        }
        getUsersInternal(arrayList6, arrayList8);
        j2 = -j;
        int i1122 = 0;
        sQLiteCursor4 = getMessagesStorage().getDatabase().queryFinalized(String.format(Locale.US, "SELECT mid FROM chat_pinned_v2 WHERE uid = %d ORDER BY mid DESC", Long.valueOf(j2)), new Object[0]);
        while (sQLiteCursor4.next()) {
        }
        arrayList2 = arrayList5;
        sQLiteCursor4.dispose();
        sQLiteCursor4 = this.database.queryFinalized("SELECT count, end FROM chat_pinned_count WHERE uid = " + j2, new Object[0]);
        if (sQLiteCursor4.next()) {
        }
        z7 = false;
        sQLiteCursor4.dispose();
        if (chatFull != null) {
        }
        sQLiteCursor4 = null;
        i7 = 0;
        if (arrayList2.isEmpty()) {
        }
        i4 = i6;
        z6 = z7;
        chatFull = chatFull3;
        getMessagesController().processChatInfo(j, chatFull, arrayList8, true, z2, z3, arrayList2, hashMap, i4, z6);
        return chatFull;
    }

    private void loadDialogFilters() {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda40
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$loadDialogFilters$64();
            }
        });
    }

    /* JADX WARN: Removed duplicated region for block: B:100:0x00a5  */
    /* JADX WARN: Removed duplicated region for block: B:101:0x008e  */
    /* JADX WARN: Removed duplicated region for block: B:133:0x03e9  */
    /* JADX WARN: Removed duplicated region for block: B:15:0x008c  */
    /* JADX WARN: Removed duplicated region for block: B:18:0x00a3  */
    /* JADX WARN: Removed duplicated region for block: B:21:0x00ac  */
    /* JADX WARN: Removed duplicated region for block: B:24:0x00c2 A[Catch: all -> 0x0067, Exception -> 0x006b, TryCatch #4 {Exception -> 0x006b, blocks: (B:5:0x002e, B:7:0x0035, B:9:0x005c, B:13:0x0070, B:16:0x008f, B:19:0x00a6, B:22:0x00af, B:24:0x00c2, B:26:0x00ca, B:27:0x00cf, B:29:0x00eb, B:30:0x00f2, B:32:0x0106, B:34:0x0111, B:36:0x0136, B:37:0x0138, B:63:0x01b7, B:65:0x01bd, B:67:0x01c3, B:68:0x01c6, B:70:0x01cc, B:72:0x01da, B:76:0x01e9, B:78:0x01ef, B:80:0x01f9, B:81:0x020f, B:84:0x01ff, B:86:0x020a, B:91:0x01aa, B:97:0x01ae, B:104:0x0213), top: B:4:0x002e }] */
    /* JADX WARN: Removed duplicated region for block: B:29:0x00eb A[Catch: all -> 0x0067, Exception -> 0x006b, TryCatch #4 {Exception -> 0x006b, blocks: (B:5:0x002e, B:7:0x0035, B:9:0x005c, B:13:0x0070, B:16:0x008f, B:19:0x00a6, B:22:0x00af, B:24:0x00c2, B:26:0x00ca, B:27:0x00cf, B:29:0x00eb, B:30:0x00f2, B:32:0x0106, B:34:0x0111, B:36:0x0136, B:37:0x0138, B:63:0x01b7, B:65:0x01bd, B:67:0x01c3, B:68:0x01c6, B:70:0x01cc, B:72:0x01da, B:76:0x01e9, B:78:0x01ef, B:80:0x01f9, B:81:0x020f, B:84:0x01ff, B:86:0x020a, B:91:0x01aa, B:97:0x01ae, B:104:0x0213), top: B:4:0x002e }] */
    /* JADX WARN: Removed duplicated region for block: B:32:0x0106 A[Catch: all -> 0x0067, Exception -> 0x006b, TryCatch #4 {Exception -> 0x006b, blocks: (B:5:0x002e, B:7:0x0035, B:9:0x005c, B:13:0x0070, B:16:0x008f, B:19:0x00a6, B:22:0x00af, B:24:0x00c2, B:26:0x00ca, B:27:0x00cf, B:29:0x00eb, B:30:0x00f2, B:32:0x0106, B:34:0x0111, B:36:0x0136, B:37:0x0138, B:63:0x01b7, B:65:0x01bd, B:67:0x01c3, B:68:0x01c6, B:70:0x01cc, B:72:0x01da, B:76:0x01e9, B:78:0x01ef, B:80:0x01f9, B:81:0x020f, B:84:0x01ff, B:86:0x020a, B:91:0x01aa, B:97:0x01ae, B:104:0x0213), top: B:4:0x002e }] */
    /* JADX WARN: Removed duplicated region for block: B:65:0x01bd A[Catch: all -> 0x0067, Exception -> 0x006b, TryCatch #4 {Exception -> 0x006b, blocks: (B:5:0x002e, B:7:0x0035, B:9:0x005c, B:13:0x0070, B:16:0x008f, B:19:0x00a6, B:22:0x00af, B:24:0x00c2, B:26:0x00ca, B:27:0x00cf, B:29:0x00eb, B:30:0x00f2, B:32:0x0106, B:34:0x0111, B:36:0x0136, B:37:0x0138, B:63:0x01b7, B:65:0x01bd, B:67:0x01c3, B:68:0x01c6, B:70:0x01cc, B:72:0x01da, B:76:0x01e9, B:78:0x01ef, B:80:0x01f9, B:81:0x020f, B:84:0x01ff, B:86:0x020a, B:91:0x01aa, B:97:0x01ae, B:104:0x0213), top: B:4:0x002e }] */
    /* JADX WARN: Removed duplicated region for block: B:70:0x01cc A[Catch: all -> 0x0067, Exception -> 0x006b, TryCatch #4 {Exception -> 0x006b, blocks: (B:5:0x002e, B:7:0x0035, B:9:0x005c, B:13:0x0070, B:16:0x008f, B:19:0x00a6, B:22:0x00af, B:24:0x00c2, B:26:0x00ca, B:27:0x00cf, B:29:0x00eb, B:30:0x00f2, B:32:0x0106, B:34:0x0111, B:36:0x0136, B:37:0x0138, B:63:0x01b7, B:65:0x01bd, B:67:0x01c3, B:68:0x01c6, B:70:0x01cc, B:72:0x01da, B:76:0x01e9, B:78:0x01ef, B:80:0x01f9, B:81:0x020f, B:84:0x01ff, B:86:0x020a, B:91:0x01aa, B:97:0x01ae, B:104:0x0213), top: B:4:0x002e }] */
    /* JADX WARN: Removed duplicated region for block: B:76:0x01e9 A[Catch: all -> 0x0067, Exception -> 0x006b, TryCatch #4 {Exception -> 0x006b, blocks: (B:5:0x002e, B:7:0x0035, B:9:0x005c, B:13:0x0070, B:16:0x008f, B:19:0x00a6, B:22:0x00af, B:24:0x00c2, B:26:0x00ca, B:27:0x00cf, B:29:0x00eb, B:30:0x00f2, B:32:0x0106, B:34:0x0111, B:36:0x0136, B:37:0x0138, B:63:0x01b7, B:65:0x01bd, B:67:0x01c3, B:68:0x01c6, B:70:0x01cc, B:72:0x01da, B:76:0x01e9, B:78:0x01ef, B:80:0x01f9, B:81:0x020f, B:84:0x01ff, B:86:0x020a, B:91:0x01aa, B:97:0x01ae, B:104:0x0213), top: B:4:0x002e }] */
    /* JADX WARN: Removed duplicated region for block: B:98:0x01b5  */
    /* JADX WARN: Removed duplicated region for block: B:99:0x00ae  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private TLRPC.messages_Dialogs loadDialogsByIds(String str, ArrayList<Long> arrayList, ArrayList<Long> arrayList2, ArrayList<Integer> arrayList3) {
        SQLiteCursor sQLiteCursor;
        SQLiteCursor queryFinalized;
        TLRPC.Dialog dialog;
        NativeByteBuffer byteBufferValue;
        NativeByteBuffer byteBufferValue2;
        int i;
        long longValue;
        long longValue2;
        NativeByteBuffer byteBufferValue3;
        TLRPC.TL_messages_dialogs tL_messages_dialogs;
        LongSparseArray longSparseArray;
        Long valueOf;
        ArrayList<Long> arrayList4;
        NativeByteBuffer byteBufferValue4;
        int i2 = 2;
        int i3 = 0;
        int i4 = 1;
        TLRPC.TL_messages_dialogs tL_messages_dialogs2 = new TLRPC.TL_messages_dialogs();
        LongSparseArray longSparseArray2 = new LongSparseArray();
        LongSparseArray longSparseArray3 = new LongSparseArray();
        try {
            SQLiteCursor queryFinalized2 = this.database.queryFinalized(String.format(Locale.US, "SELECT d.did, d.last_mid, d.unread_count, d.date, m.data, m.read_state, m.mid, m.send_state, s.flags, m.date, d.pts, d.inbox_max, d.outbox_max, m.replydata, d.pinned, d.unread_count_i, d.flags, d.folder_id, d.data, d.unread_reactions, d.last_mid_group, d.ttl_period FROM dialogs as d LEFT JOIN messages_v2 as m ON d.last_mid = m.mid AND d.did = m.uid LEFT JOIN dialog_settings as s ON d.did = s.did WHERE d.did IN (%s) ORDER BY d.pinned DESC, d.date DESC", str), new Object[0]);
            while (queryFinalized2.next()) {
                try {
                    try {
                        long longValue3 = queryFinalized2.longValue(i3);
                        TLRPC.TL_dialog tL_dialog = new TLRPC.TL_dialog();
                        tL_dialog.id = longValue3;
                        tL_dialog.top_message = queryFinalized2.intValue(i4);
                        tL_dialog.unread_count = queryFinalized2.intValue(i2);
                        tL_dialog.last_message_date = queryFinalized2.intValue(3);
                        int intValue = queryFinalized2.intValue(10);
                        tL_dialog.pts = intValue;
                        if (intValue != 0 && !DialogObject.isUserDialog(tL_dialog.id)) {
                            i = 1;
                            tL_dialog.flags = i;
                            tL_dialog.read_inbox_max_id = queryFinalized2.intValue(11);
                            tL_dialog.read_outbox_max_id = queryFinalized2.intValue(12);
                            int intValue2 = queryFinalized2.intValue(14);
                            tL_dialog.pinnedNum = intValue2;
                            tL_dialog.pinned = intValue2 == 0;
                            tL_dialog.unread_mentions_count = queryFinalized2.intValue(15);
                            int intValue3 = queryFinalized2.intValue(16);
                            tL_dialog.unread_mark = (intValue3 & 1) == 0;
                            tL_dialog.view_forum_as_messages = (intValue3 & 64) == 0;
                            longValue = queryFinalized2.longValue(8);
                            TLRPC.TL_peerNotifySettings tL_peerNotifySettings = new TLRPC.TL_peerNotifySettings();
                            tL_dialog.notify_settings = tL_peerNotifySettings;
                            if ((((int) longValue) & i4) != 0) {
                                int i5 = (int) (longValue >> 32);
                                tL_peerNotifySettings.mute_until = i5;
                                if (i5 == 0) {
                                    tL_peerNotifySettings.mute_until = ConnectionsManager.DEFAULT_DATACENTER_ID;
                                }
                            }
                            tL_dialog.folder_id = queryFinalized2.intValue(17);
                            tL_dialog.unread_reactions_count = queryFinalized2.intValue(19);
                            longValue2 = queryFinalized2.longValue(20);
                            if (longValue2 != 0) {
                                longSparseArray3.append(longValue3, Long.valueOf(longValue2));
                            }
                            tL_dialog.ttl_period = queryFinalized2.intValue(21);
                            tL_messages_dialogs2.dialogs.add(tL_dialog);
                            byteBufferValue3 = queryFinalized2.byteBufferValue(4);
                            if (byteBufferValue3 == null) {
                                TLRPC.Message TLdeserialize = TLRPC.Message.TLdeserialize(byteBufferValue3, byteBufferValue3.readInt32(false), false);
                                if (TLdeserialize != null) {
                                    TLRPC.TL_messages_dialogs tL_messages_dialogs3 = tL_messages_dialogs2;
                                    TLdeserialize.readAttachPath(byteBufferValue3, getUserConfig().clientUserId);
                                    byteBufferValue3.reuse();
                                    MessageObject.setUnreadFlags(TLdeserialize, queryFinalized2.intValue(5));
                                    TLdeserialize.id = queryFinalized2.intValue(6);
                                    int intValue4 = queryFinalized2.intValue(9);
                                    if (intValue4 != 0) {
                                        tL_dialog.last_message_date = intValue4;
                                    }
                                    TLdeserialize.send_state = queryFinalized2.intValue(7);
                                    TLdeserialize.dialog_id = tL_dialog.id;
                                    tL_messages_dialogs = tL_messages_dialogs3;
                                    tL_messages_dialogs.messages.add(TLdeserialize);
                                    addUsersAndChatsFromMessage(TLdeserialize, arrayList, arrayList2, null);
                                    try {
                                        TLRPC.MessageReplyHeader messageReplyHeader = TLdeserialize.reply_to;
                                        if (messageReplyHeader != null && messageReplyHeader.reply_to_msg_id != 0) {
                                            TLRPC.MessageAction messageAction = TLdeserialize.action;
                                            if (!(messageAction instanceof TLRPC.TL_messageActionPinMessage)) {
                                                if (!(messageAction instanceof TLRPC.TL_messageActionPaymentSent)) {
                                                    if (messageAction instanceof TLRPC.TL_messageActionGameScore) {
                                                    }
                                                }
                                            }
                                            if (queryFinalized2.isNull(13) || (byteBufferValue4 = queryFinalized2.byteBufferValue(13)) == null) {
                                                longSparseArray = longSparseArray3;
                                            } else {
                                                TLRPC.Message TLdeserialize2 = TLRPC.Message.TLdeserialize(byteBufferValue4, byteBufferValue4.readInt32(false), false);
                                                TLdeserialize.replyMessage = TLdeserialize2;
                                                longSparseArray = longSparseArray3;
                                                try {
                                                    TLdeserialize2.readAttachPath(byteBufferValue4, getUserConfig().clientUserId);
                                                    byteBufferValue4.reuse();
                                                    TLRPC.Message message = TLdeserialize.replyMessage;
                                                    if (message != null) {
                                                        addUsersAndChatsFromMessage(message, arrayList, arrayList2, null);
                                                    }
                                                } catch (Exception e) {
                                                    e = e;
                                                    checkSQLException(e);
                                                    if (!DialogObject.isEncryptedDialog(longValue3)) {
                                                    }
                                                    if (!DialogObject.isEncryptedDialog(longValue3)) {
                                                    }
                                                    tL_messages_dialogs2 = tL_messages_dialogs;
                                                    longSparseArray3 = longSparseArray;
                                                    i2 = 2;
                                                    i3 = 0;
                                                    i4 = 1;
                                                }
                                            }
                                            if (TLdeserialize.replyMessage == null) {
                                                longSparseArray2.put(tL_dialog.id, TLdeserialize);
                                            }
                                        }
                                    } catch (Exception e2) {
                                        e = e2;
                                        longSparseArray = longSparseArray3;
                                    }
                                } else {
                                    tL_messages_dialogs = tL_messages_dialogs2;
                                    longSparseArray = longSparseArray3;
                                    byteBufferValue3.reuse();
                                }
                                if (!DialogObject.isEncryptedDialog(longValue3) && tL_dialog.read_inbox_max_id > tL_dialog.top_message) {
                                    tL_dialog.read_inbox_max_id = 0;
                                }
                                if (!DialogObject.isEncryptedDialog(longValue3)) {
                                    int encryptedChatId = DialogObject.getEncryptedChatId(longValue3);
                                    if (!arrayList3.contains(Integer.valueOf(encryptedChatId))) {
                                        arrayList3.add(Integer.valueOf(encryptedChatId));
                                    }
                                } else if (!DialogObject.isUserDialog(longValue3)) {
                                    long j = -longValue3;
                                    if (!arrayList2.contains(Long.valueOf(j))) {
                                        valueOf = Long.valueOf(j);
                                        arrayList4 = arrayList2;
                                        arrayList4.add(valueOf);
                                    }
                                } else if (!arrayList.contains(Long.valueOf(longValue3))) {
                                    valueOf = Long.valueOf(longValue3);
                                    arrayList4 = arrayList;
                                    arrayList4.add(valueOf);
                                }
                                tL_messages_dialogs2 = tL_messages_dialogs;
                                longSparseArray3 = longSparseArray;
                                i2 = 2;
                                i3 = 0;
                                i4 = 1;
                            } else {
                                tL_messages_dialogs = tL_messages_dialogs2;
                            }
                            longSparseArray = longSparseArray3;
                            if (!DialogObject.isEncryptedDialog(longValue3)) {
                                tL_dialog.read_inbox_max_id = 0;
                            }
                            if (!DialogObject.isEncryptedDialog(longValue3)) {
                            }
                            tL_messages_dialogs2 = tL_messages_dialogs;
                            longSparseArray3 = longSparseArray;
                            i2 = 2;
                            i3 = 0;
                            i4 = 1;
                        }
                        i = 0;
                        tL_dialog.flags = i;
                        tL_dialog.read_inbox_max_id = queryFinalized2.intValue(11);
                        tL_dialog.read_outbox_max_id = queryFinalized2.intValue(12);
                        int intValue22 = queryFinalized2.intValue(14);
                        tL_dialog.pinnedNum = intValue22;
                        tL_dialog.pinned = intValue22 == 0;
                        tL_dialog.unread_mentions_count = queryFinalized2.intValue(15);
                        int intValue32 = queryFinalized2.intValue(16);
                        tL_dialog.unread_mark = (intValue32 & 1) == 0;
                        tL_dialog.view_forum_as_messages = (intValue32 & 64) == 0;
                        longValue = queryFinalized2.longValue(8);
                        TLRPC.TL_peerNotifySettings tL_peerNotifySettings2 = new TLRPC.TL_peerNotifySettings();
                        tL_dialog.notify_settings = tL_peerNotifySettings2;
                        if ((((int) longValue) & i4) != 0) {
                        }
                        tL_dialog.folder_id = queryFinalized2.intValue(17);
                        tL_dialog.unread_reactions_count = queryFinalized2.intValue(19);
                        longValue2 = queryFinalized2.longValue(20);
                        if (longValue2 != 0) {
                        }
                        tL_dialog.ttl_period = queryFinalized2.intValue(21);
                        tL_messages_dialogs2.dialogs.add(tL_dialog);
                        byteBufferValue3 = queryFinalized2.byteBufferValue(4);
                        if (byteBufferValue3 == null) {
                        }
                        longSparseArray = longSparseArray3;
                        if (!DialogObject.isEncryptedDialog(longValue3)) {
                        }
                        if (!DialogObject.isEncryptedDialog(longValue3)) {
                        }
                        tL_messages_dialogs2 = tL_messages_dialogs;
                        longSparseArray3 = longSparseArray;
                        i2 = 2;
                        i3 = 0;
                        i4 = 1;
                    } catch (Exception e3) {
                        e = e3;
                        sQLiteCursor = queryFinalized2;
                    }
                } catch (Throwable th) {
                    th = th;
                    sQLiteCursor = queryFinalized2;
                }
            }
            TLRPC.TL_messages_dialogs tL_messages_dialogs4 = tL_messages_dialogs2;
            LongSparseArray longSparseArray4 = longSparseArray3;
            queryFinalized2.dispose();
            if (longSparseArray4.isEmpty()) {
                queryFinalized = null;
            } else {
                try {
                    StringBuilder sb = new StringBuilder();
                    int i6 = 0;
                    while (i6 < longSparseArray4.size()) {
                        sb.append("uid = ");
                        LongSparseArray longSparseArray5 = longSparseArray4;
                        sb.append(longSparseArray5.keyAt(i6));
                        sb.append(" AND group_id = ");
                        sb.append(longSparseArray5.valueAt(i6));
                        i6++;
                        if (i6 < longSparseArray5.size()) {
                            sb.append(" OR ");
                        }
                        longSparseArray4 = longSparseArray5;
                    }
                    int i7 = 0;
                    queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT uid, data, read_state, mid, send_state, date, replydata FROM messages_v2 WHERE %s ORDER BY date DESC", sb), new Object[0]);
                    while (queryFinalized.next()) {
                        try {
                            try {
                                long longValue4 = queryFinalized.longValue(i7);
                                int i8 = 0;
                                while (true) {
                                    if (i8 >= tL_messages_dialogs4.dialogs.size()) {
                                        dialog = null;
                                        break;
                                    }
                                    dialog = tL_messages_dialogs4.dialogs.get(i8);
                                    if (dialog != null && dialog.id == longValue4) {
                                        break;
                                    }
                                    i8++;
                                }
                                if (dialog != null && (byteBufferValue = queryFinalized.byteBufferValue(1)) != null) {
                                    TLRPC.Message TLdeserialize3 = TLRPC.Message.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                                    if (TLdeserialize3 != null) {
                                        TLdeserialize3.readAttachPath(byteBufferValue, getUserConfig().clientUserId);
                                        byteBufferValue.reuse();
                                        MessageObject.setUnreadFlags(TLdeserialize3, queryFinalized.intValue(2));
                                        TLdeserialize3.id = queryFinalized.intValue(3);
                                        int intValue5 = queryFinalized.intValue(5);
                                        if (intValue5 != 0) {
                                            dialog.last_message_date = intValue5;
                                        }
                                        TLdeserialize3.send_state = queryFinalized.intValue(4);
                                        TLdeserialize3.dialog_id = dialog.id;
                                        tL_messages_dialogs4.messages.add(TLdeserialize3);
                                        addUsersAndChatsFromMessage(TLdeserialize3, arrayList, arrayList2, null);
                                        try {
                                            TLRPC.MessageReplyHeader messageReplyHeader2 = TLdeserialize3.reply_to;
                                            if (messageReplyHeader2 != null && messageReplyHeader2.reply_to_msg_id != 0) {
                                                TLRPC.MessageAction messageAction2 = TLdeserialize3.action;
                                                if ((messageAction2 instanceof TLRPC.TL_messageActionPinMessage) || (messageAction2 instanceof TLRPC.TL_messageActionPaymentSent) || (messageAction2 instanceof TLRPC.TL_messageActionGameScore)) {
                                                    if (!queryFinalized.isNull(6) && (byteBufferValue2 = queryFinalized.byteBufferValue(6)) != null) {
                                                        TLRPC.Message TLdeserialize4 = TLRPC.Message.TLdeserialize(byteBufferValue2, byteBufferValue2.readInt32(false), false);
                                                        TLdeserialize3.replyMessage = TLdeserialize4;
                                                        TLdeserialize4.readAttachPath(byteBufferValue2, getUserConfig().clientUserId);
                                                        byteBufferValue2.reuse();
                                                        TLRPC.Message message2 = TLdeserialize3.replyMessage;
                                                        if (message2 != null) {
                                                            addUsersAndChatsFromMessage(message2, arrayList, arrayList2, null);
                                                        }
                                                    }
                                                    if (TLdeserialize3.replyMessage == null) {
                                                        longSparseArray2.put(dialog.id, TLdeserialize3);
                                                    }
                                                }
                                            }
                                        } catch (Exception e4) {
                                            checkSQLException(e4);
                                        }
                                    } else {
                                        byteBufferValue.reuse();
                                    }
                                }
                                i7 = 0;
                            } catch (Exception e5) {
                                e = e5;
                                sQLiteCursor = queryFinalized;
                                try {
                                    throw e;
                                } catch (Throwable th2) {
                                    th = th2;
                                    if (sQLiteCursor != null) {
                                        sQLiteCursor.dispose();
                                    }
                                    throw th;
                                }
                            }
                        } catch (Throwable th3) {
                            th = th3;
                            sQLiteCursor = queryFinalized;
                            if (sQLiteCursor != null) {
                            }
                            throw th;
                        }
                    }
                    queryFinalized.dispose();
                } catch (Exception e6) {
                    e = e6;
                    sQLiteCursor = null;
                    throw e;
                } catch (Throwable th4) {
                    th = th4;
                    sQLiteCursor = null;
                    if (sQLiteCursor != null) {
                    }
                    throw th;
                }
            }
            if (!longSparseArray2.isEmpty()) {
                int size = longSparseArray2.size();
                for (int i9 = 0; i9 < size; i9++) {
                    long keyAt = longSparseArray2.keyAt(i9);
                    TLRPC.Message message3 = (TLRPC.Message) longSparseArray2.valueAt(i9);
                    boolean z = false;
                    SQLiteCursor queryFinalized3 = this.database.queryFinalized(String.format(Locale.US, "SELECT data, mid, date, uid FROM messages_v2 WHERE mid = %d and uid = %d", Integer.valueOf(message3.id), Long.valueOf(keyAt)), new Object[0]);
                    while (queryFinalized3.next()) {
                        NativeByteBuffer byteBufferValue5 = queryFinalized3.byteBufferValue(z ? 1 : 0);
                        if (byteBufferValue5 != null) {
                            TLRPC.Message TLdeserialize5 = TLRPC.Message.TLdeserialize(byteBufferValue5, byteBufferValue5.readInt32(z), z);
                            TLdeserialize5.readAttachPath(byteBufferValue5, getUserConfig().clientUserId);
                            byteBufferValue5.reuse();
                            TLdeserialize5.id = queryFinalized3.intValue(1);
                            TLdeserialize5.date = queryFinalized3.intValue(2);
                            TLdeserialize5.dialog_id = queryFinalized3.longValue(3);
                            addUsersAndChatsFromMessage(TLdeserialize5, arrayList, arrayList2, null);
                            message3.replyMessage = TLdeserialize5;
                            TLdeserialize5.dialog_id = message3.dialog_id;
                            z = false;
                        }
                    }
                    queryFinalized3.dispose();
                }
            }
            if (queryFinalized != null) {
                queryFinalized.dispose();
            }
            return tL_messages_dialogs4;
        } catch (Exception e7) {
            e = e7;
            sQLiteCursor = null;
        } catch (Throwable th5) {
            th = th5;
            sQLiteCursor = null;
        }
    }

    private void loadPendingTasks() {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda56
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$loadPendingTasks$33();
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:102:0x020e A[Catch: all -> 0x0263, Exception -> 0x0265, TRY_ENTER, TRY_LEAVE, TryCatch #1 {all -> 0x0263, blocks: (B:44:0x00f1, B:45:0x0105, B:47:0x010b, B:95:0x01a2, B:102:0x020e), top: B:43:0x00f1 }] */
    /* JADX WARN: Removed duplicated region for block: B:122:0x0208  */
    /* JADX WARN: Removed duplicated region for block: B:47:0x010b A[Catch: all -> 0x0263, Exception -> 0x0265, TRY_LEAVE, TryCatch #1 {all -> 0x0263, blocks: (B:44:0x00f1, B:45:0x0105, B:47:0x010b, B:95:0x01a2, B:102:0x020e), top: B:43:0x00f1 }] */
    /* JADX WARN: Removed duplicated region for block: B:65:0x0330  */
    /* JADX WARN: Removed duplicated region for block: B:67:0x0335  */
    /* JADX WARN: Removed duplicated region for block: B:70:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:76:0x0346  */
    /* JADX WARN: Removed duplicated region for block: B:78:0x034b  */
    /* JADX WARN: Removed duplicated region for block: B:99:0x01fd A[Catch: all -> 0x0202, Exception -> 0x0205, TryCatch #21 {Exception -> 0x0205, all -> 0x0202, blocks: (B:97:0x01f7, B:99:0x01fd, B:100:0x0209), top: B:96:0x01f7 }] */
    /* renamed from: markMessagesAsDeletedInternal, reason: merged with bridge method [inline-methods] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public ArrayList<Long> lambda$markMessagesAsDeleted$211(long j, int i, boolean z) {
        SQLiteCursor sQLiteCursor;
        SQLiteCursor sQLiteCursor2;
        SQLiteCursor sQLiteCursor3;
        SQLitePreparedStatement sQLitePreparedStatement;
        SQLitePreparedStatement sQLitePreparedStatement2;
        SQLiteCursor sQLiteCursor4;
        SQLitePreparedStatement sQLitePreparedStatement3;
        ArrayList<Pair<Long, Integer>> arrayList;
        int i2;
        int i3;
        ArrayList<Long> arrayList2;
        Locale locale;
        SQLiteCursor queryFinalized;
        int intValue;
        int i4;
        int i5;
        int i6 = 2;
        boolean z2 = false;
        try {
            ArrayList<Long> arrayList3 = new ArrayList<>();
            LongSparseArray longSparseArray = new LongSparseArray();
            ArrayList<File> arrayList4 = new ArrayList<>();
            final ArrayList<String> arrayList5 = new ArrayList<>();
            ArrayList<Pair<Long, Integer>> arrayList6 = new ArrayList<>();
            long clientUserId = getUserConfig().getClientUserId();
            ArrayList<Long> arrayList7 = arrayList3;
            long j2 = -j;
            try {
                try {
                    sQLiteCursor = this.database.queryFinalized(String.format(Locale.US, "SELECT uid, data, read_state, out, mention FROM messages_v2 WHERE uid = %d AND mid <= %d", Long.valueOf(j2), Integer.valueOf(i)), new Object[0]);
                    while (sQLiteCursor.next()) {
                        try {
                            try {
                                long longValue = sQLiteCursor.longValue(z2 ? 1 : 0);
                                if (longValue != clientUserId) {
                                    int intValue2 = sQLiteCursor.intValue(i6);
                                    if (sQLiteCursor.intValue(3) == 0) {
                                        Integer[] numArr = (Integer[]) longSparseArray.get(longValue);
                                        if (numArr == null) {
                                            Integer valueOf = Integer.valueOf(z2 ? 1 : 0);
                                            Integer valueOf2 = Integer.valueOf(z2 ? 1 : 0);
                                            Integer[] numArr2 = new Integer[i6];
                                            numArr2[z2 ? 1 : 0] = valueOf;
                                            numArr2[1] = valueOf2;
                                            longSparseArray.put(longValue, numArr2);
                                            numArr = numArr2;
                                        }
                                        if (intValue2 < i6) {
                                            numArr[1] = Integer.valueOf(numArr[1].intValue() + 1);
                                        }
                                        if (intValue2 == 0 || intValue2 == i6) {
                                            numArr[z2 ? 1 : 0] = Integer.valueOf(numArr[z2 ? 1 : 0].intValue() + 1);
                                        }
                                    }
                                }
                                if (DialogObject.isEncryptedDialog(longValue) || z) {
                                    NativeByteBuffer byteBufferValue = sQLiteCursor.byteBufferValue(1);
                                    if (byteBufferValue != null) {
                                        TLRPC.Message TLdeserialize = TLRPC.Message.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(z2), z2);
                                        TLdeserialize.readAttachPath(byteBufferValue, getUserConfig().clientUserId);
                                        byteBufferValue.reuse();
                                        i2 = 3;
                                        arrayList = arrayList6;
                                        try {
                                            addFilesToDelete(TLdeserialize, arrayList4, arrayList6, arrayList5, false);
                                            arrayList6 = arrayList;
                                            i6 = 2;
                                        } catch (Exception e) {
                                            e = e;
                                            try {
                                                checkSQLException(e);
                                                sQLiteCursor.dispose();
                                                deleteFromDownloadQueue(arrayList, true);
                                                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda83
                                                    @Override // java.lang.Runnable
                                                    public final void run() {
                                                        MessagesStorage.this.lambda$markMessagesAsDeletedInternal$210(arrayList5);
                                                    }
                                                });
                                                getFileLoader().deleteFiles(arrayList4, 0);
                                                i3 = 0;
                                                while (i3 < longSparseArray.size()) {
                                                }
                                                arrayList2 = arrayList7;
                                                SQLiteDatabase sQLiteDatabase = this.database;
                                                locale = Locale.US;
                                                sQLiteDatabase.executeFast(String.format(locale, "UPDATE chat_settings_v2 SET pinned = 0 WHERE uid = %d AND pinned <= %d", Long.valueOf(j), Integer.valueOf(i))).stepThis().dispose();
                                                this.database.executeFast(String.format(locale, "DELETE FROM chat_pinned_v2 WHERE uid = %d AND mid <= %d", Long.valueOf(j), Integer.valueOf(i))).stepThis().dispose();
                                                queryFinalized = this.database.queryFinalized("SELECT changes()", new Object[0]);
                                                if (!queryFinalized.next()) {
                                                }
                                                queryFinalized.dispose();
                                                if (intValue > 0) {
                                                }
                                                try {
                                                    this.database.executeFast(String.format(locale, "DELETE FROM messages_v2 WHERE uid = %d AND mid <= %d", Long.valueOf(j2), Integer.valueOf(i))).stepThis().dispose();
                                                    this.database.executeFast(String.format(locale, "DELETE FROM messages_topics WHERE uid = %d AND mid <= %d", Long.valueOf(j2), Integer.valueOf(i))).stepThis().dispose();
                                                    this.database.executeFast(String.format(locale, "DELETE FROM media_v4 WHERE uid = %d AND mid <= %d", Long.valueOf(j2), Integer.valueOf(i))).stepThis().dispose();
                                                    this.database.executeFast(String.format(locale, "UPDATE media_counts_v2 SET old = 1 WHERE uid = %d", Long.valueOf(j2))).stepThis().dispose();
                                                    this.database.executeFast(String.format(locale, "UPDATE media_counts_topics SET old = 1 WHERE uid = %d", Long.valueOf(j2))).stepThis().dispose();
                                                    updateWidgets(arrayList2);
                                                    return arrayList2;
                                                } catch (Throwable th) {
                                                    th = th;
                                                    sQLitePreparedStatement3 = null;
                                                    sQLiteCursor4 = null;
                                                    SQLiteCursor sQLiteCursor5 = sQLiteCursor4;
                                                    sQLitePreparedStatement = sQLitePreparedStatement3;
                                                    sQLiteCursor2 = sQLiteCursor5;
                                                    if (sQLiteCursor2 != null) {
                                                    }
                                                    if (sQLitePreparedStatement != null) {
                                                    }
                                                    throw th;
                                                }
                                            } catch (Exception e2) {
                                                e = e2;
                                                sQLiteCursor3 = sQLiteCursor;
                                                sQLitePreparedStatement2 = null;
                                                try {
                                                    checkSQLException(e);
                                                    if (sQLiteCursor3 != null) {
                                                        sQLiteCursor3.dispose();
                                                    }
                                                    if (sQLitePreparedStatement2 == null) {
                                                        return null;
                                                    }
                                                    sQLitePreparedStatement2.dispose();
                                                    return null;
                                                } catch (Throwable th2) {
                                                    th = th2;
                                                    sQLitePreparedStatement3 = sQLitePreparedStatement2;
                                                    sQLiteCursor4 = sQLiteCursor3;
                                                    SQLiteCursor sQLiteCursor52 = sQLiteCursor4;
                                                    sQLitePreparedStatement = sQLitePreparedStatement3;
                                                    sQLiteCursor2 = sQLiteCursor52;
                                                    if (sQLiteCursor2 != null) {
                                                    }
                                                    if (sQLitePreparedStatement != null) {
                                                    }
                                                    throw th;
                                                }
                                            }
                                        }
                                    }
                                    z2 = false;
                                }
                            } catch (Throwable th3) {
                                th = th3;
                                sQLiteCursor2 = sQLiteCursor;
                                sQLitePreparedStatement = null;
                                if (sQLiteCursor2 != null) {
                                }
                                if (sQLitePreparedStatement != null) {
                                }
                                throw th;
                            }
                        } catch (Exception e3) {
                            e = e3;
                            arrayList = arrayList6;
                            i2 = 3;
                        }
                    }
                    arrayList = arrayList6;
                    i2 = 3;
                    sQLiteCursor.dispose();
                    try {
                        deleteFromDownloadQueue(arrayList, true);
                        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda83
                            @Override // java.lang.Runnable
                            public final void run() {
                                MessagesStorage.this.lambda$markMessagesAsDeletedInternal$210(arrayList5);
                            }
                        });
                        getFileLoader().deleteFiles(arrayList4, 0);
                        i3 = 0;
                        while (i3 < longSparseArray.size()) {
                            long keyAt = longSparseArray.keyAt(i3);
                            Integer[] numArr3 = (Integer[]) longSparseArray.valueAt(i3);
                            sQLiteCursor3 = this.database.queryFinalized("SELECT unread_count, unread_count_i FROM dialogs WHERE did = " + keyAt, new Object[0]);
                            try {
                                if (sQLiteCursor3.next()) {
                                    i4 = sQLiteCursor3.intValue(0);
                                    i5 = sQLiteCursor3.intValue(1);
                                } else {
                                    i4 = 0;
                                    i5 = 0;
                                }
                                sQLiteCursor3.dispose();
                                try {
                                    ArrayList<Long> arrayList8 = arrayList7;
                                    arrayList8.add(Long.valueOf(keyAt));
                                    SQLitePreparedStatement executeFast = this.database.executeFast("UPDATE dialogs SET unread_count = ?, unread_count_i = ? WHERE did = ?");
                                    try {
                                        executeFast.requery();
                                        executeFast.bindInteger(1, Math.max(0, i4 - numArr3[0].intValue()));
                                        executeFast.bindInteger(2, Math.max(0, i5 - numArr3[1].intValue()));
                                        executeFast.bindLong(i2, keyAt);
                                        executeFast.step();
                                        executeFast.dispose();
                                        i3++;
                                        arrayList7 = arrayList8;
                                    } catch (Exception e4) {
                                        e = e4;
                                        sQLitePreparedStatement2 = executeFast;
                                        sQLiteCursor3 = null;
                                        checkSQLException(e);
                                        if (sQLiteCursor3 != null) {
                                        }
                                        if (sQLitePreparedStatement2 == null) {
                                        }
                                    } catch (Throwable th4) {
                                        th = th4;
                                        sQLitePreparedStatement = executeFast;
                                        sQLiteCursor2 = null;
                                        if (sQLiteCursor2 != null) {
                                        }
                                        if (sQLitePreparedStatement != null) {
                                        }
                                        throw th;
                                    }
                                } catch (Exception e5) {
                                    e = e5;
                                    sQLiteCursor3 = null;
                                    sQLitePreparedStatement2 = null;
                                    checkSQLException(e);
                                    if (sQLiteCursor3 != null) {
                                    }
                                    if (sQLitePreparedStatement2 == null) {
                                    }
                                } catch (Throwable th5) {
                                    th = th5;
                                    sQLiteCursor3 = null;
                                    sQLiteCursor2 = sQLiteCursor3;
                                    sQLitePreparedStatement = null;
                                    if (sQLiteCursor2 != null) {
                                    }
                                    if (sQLitePreparedStatement != null) {
                                    }
                                    throw th;
                                }
                            } catch (Exception e6) {
                                e = e6;
                            } catch (Throwable th6) {
                                th = th6;
                            }
                        }
                        arrayList2 = arrayList7;
                        SQLiteDatabase sQLiteDatabase2 = this.database;
                        locale = Locale.US;
                        sQLiteDatabase2.executeFast(String.format(locale, "UPDATE chat_settings_v2 SET pinned = 0 WHERE uid = %d AND pinned <= %d", Long.valueOf(j), Integer.valueOf(i))).stepThis().dispose();
                        this.database.executeFast(String.format(locale, "DELETE FROM chat_pinned_v2 WHERE uid = %d AND mid <= %d", Long.valueOf(j), Integer.valueOf(i))).stepThis().dispose();
                        queryFinalized = this.database.queryFinalized("SELECT changes()", new Object[0]);
                    } catch (Throwable th7) {
                        th = th7;
                        sQLiteCursor2 = null;
                    }
                } catch (Throwable th8) {
                    th = th8;
                    sQLiteCursor = null;
                    sQLiteCursor2 = sQLiteCursor;
                    sQLitePreparedStatement = null;
                    if (sQLiteCursor2 != null) {
                        sQLiteCursor2.dispose();
                    }
                    if (sQLitePreparedStatement != null) {
                        sQLitePreparedStatement.dispose();
                    }
                    throw th;
                }
            } catch (Exception e7) {
                e = e7;
                sQLitePreparedStatement2 = null;
            }
            try {
                intValue = !queryFinalized.next() ? queryFinalized.intValue(0) : 0;
                queryFinalized.dispose();
                if (intValue > 0) {
                    sQLiteCursor3 = this.database.queryFinalized(String.format(locale, "SELECT count FROM chat_pinned_count WHERE uid = %d", Long.valueOf(j2)), new Object[0]);
                    if (sQLiteCursor3.next()) {
                        int intValue3 = sQLiteCursor3.intValue(0);
                        sQLitePreparedStatement2 = this.database.executeFast("UPDATE chat_pinned_count SET count = ? WHERE uid = ?");
                        try {
                            sQLitePreparedStatement2.requery();
                            sQLitePreparedStatement2.bindInteger(1, Math.max(0, intValue3 - intValue));
                            sQLitePreparedStatement2.bindLong(2, j2);
                            sQLitePreparedStatement2.step();
                            sQLitePreparedStatement2.dispose();
                        } catch (Exception e8) {
                            e = e8;
                            checkSQLException(e);
                            if (sQLiteCursor3 != null) {
                            }
                            if (sQLitePreparedStatement2 == null) {
                            }
                        } catch (Throwable th9) {
                            th = th9;
                            sQLitePreparedStatement = sQLitePreparedStatement2;
                            sQLiteCursor2 = sQLiteCursor3;
                            if (sQLiteCursor2 != null) {
                            }
                            if (sQLitePreparedStatement != null) {
                            }
                            throw th;
                        }
                    }
                    sQLiteCursor3.dispose();
                }
                this.database.executeFast(String.format(locale, "DELETE FROM messages_v2 WHERE uid = %d AND mid <= %d", Long.valueOf(j2), Integer.valueOf(i))).stepThis().dispose();
                this.database.executeFast(String.format(locale, "DELETE FROM messages_topics WHERE uid = %d AND mid <= %d", Long.valueOf(j2), Integer.valueOf(i))).stepThis().dispose();
                this.database.executeFast(String.format(locale, "DELETE FROM media_v4 WHERE uid = %d AND mid <= %d", Long.valueOf(j2), Integer.valueOf(i))).stepThis().dispose();
                this.database.executeFast(String.format(locale, "UPDATE media_counts_v2 SET old = 1 WHERE uid = %d", Long.valueOf(j2))).stepThis().dispose();
                this.database.executeFast(String.format(locale, "UPDATE media_counts_topics SET old = 1 WHERE uid = %d", Long.valueOf(j2))).stepThis().dispose();
                updateWidgets(arrayList2);
                return arrayList2;
            } catch (Exception e9) {
                e = e9;
                sQLiteCursor3 = queryFinalized;
                sQLitePreparedStatement2 = null;
                checkSQLException(e);
                if (sQLiteCursor3 != null) {
                }
                if (sQLitePreparedStatement2 == null) {
                }
            } catch (Throwable th10) {
                th = th10;
                sQLiteCursor2 = queryFinalized;
                sQLitePreparedStatement = null;
                if (sQLiteCursor2 != null) {
                }
                if (sQLitePreparedStatement != null) {
                }
                throw th;
            }
        } catch (Exception e10) {
            e = e10;
            sQLiteCursor = null;
        } catch (Throwable th11) {
            th = th11;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:119:0x0167 A[Catch: all -> 0x0037, Exception -> 0x003a, TRY_LEAVE, TryCatch #121 {Exception -> 0x003a, all -> 0x0037, blocks: (B:3:0x000b, B:6:0x0019, B:9:0x0027, B:48:0x0049, B:53:0x0056, B:56:0x006a, B:70:0x0083, B:73:0x009c, B:86:0x00cd, B:89:0x00dd, B:91:0x00f2, B:111:0x010c, B:119:0x0167, B:123:0x0181, B:968:0x0191, B:972:0x01a3, B:976:0x0158), top: B:2:0x000b }] */
    /* JADX WARN: Removed duplicated region for block: B:129:0x01b4  */
    /* JADX WARN: Removed duplicated region for block: B:165:0x028c A[Catch: all -> 0x01d6, Exception -> 0x0315, TRY_LEAVE, TryCatch #25 {Exception -> 0x0315, blocks: (B:155:0x0271, B:163:0x0285, B:165:0x028c, B:168:0x029d), top: B:154:0x0271 }] */
    /* JADX WARN: Removed duplicated region for block: B:192:0x04a6  */
    /* JADX WARN: Removed duplicated region for block: B:198:0x04b6  */
    /* JADX WARN: Removed duplicated region for block: B:20:0x0f25  */
    /* JADX WARN: Removed duplicated region for block: B:22:0x0f2a  */
    /* JADX WARN: Removed duplicated region for block: B:245:0x057d A[Catch: all -> 0x0717, Exception -> 0x071a, TRY_LEAVE, TryCatch #87 {Exception -> 0x071a, all -> 0x0717, blocks: (B:222:0x04bc, B:202:0x050d, B:201:0x04c7, B:232:0x04d9, B:233:0x04e4, B:236:0x04f2, B:239:0x0503, B:242:0x055f, B:243:0x0577, B:245:0x057d, B:279:0x0626, B:281:0x062c, B:282:0x0636, B:284:0x063c, B:288:0x065f, B:304:0x0711, B:305:0x071d, B:306:0x0726, B:308:0x073c, B:310:0x0741, B:340:0x0769, B:341:0x076d, B:343:0x0773), top: B:221:0x04bc }] */
    /* JADX WARN: Removed duplicated region for block: B:24:0x0f2f  */
    /* JADX WARN: Removed duplicated region for block: B:27:? A[SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:281:0x062c A[Catch: all -> 0x0717, Exception -> 0x071a, TryCatch #87 {Exception -> 0x071a, all -> 0x0717, blocks: (B:222:0x04bc, B:202:0x050d, B:201:0x04c7, B:232:0x04d9, B:233:0x04e4, B:236:0x04f2, B:239:0x0503, B:242:0x055f, B:243:0x0577, B:245:0x057d, B:279:0x0626, B:281:0x062c, B:282:0x0636, B:284:0x063c, B:288:0x065f, B:304:0x0711, B:305:0x071d, B:306:0x0726, B:308:0x073c, B:310:0x0741, B:340:0x0769, B:341:0x076d, B:343:0x0773), top: B:221:0x04bc }] */
    /* JADX WARN: Removed duplicated region for block: B:349:0x078d  */
    /* JADX WARN: Removed duplicated region for block: B:37:0x0f0d  */
    /* JADX WARN: Removed duplicated region for block: B:39:0x0f12  */
    /* JADX WARN: Removed duplicated region for block: B:41:0x0f17  */
    /* JADX WARN: Removed duplicated region for block: B:43:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:490:0x0b32 A[Catch: all -> 0x0cb5, Exception -> 0x0cba, TRY_LEAVE, TryCatch #90 {Exception -> 0x0cba, all -> 0x0cb5, blocks: (B:488:0x0b2c, B:490:0x0b32, B:497:0x0b45), top: B:487:0x0b2c }] */
    /* JADX WARN: Removed duplicated region for block: B:609:0x0cd4  */
    /* JADX WARN: Removed duplicated region for block: B:60:0x0ebe  */
    /* JADX WARN: Removed duplicated region for block: B:62:0x0ec3  */
    /* JADX WARN: Removed duplicated region for block: B:64:0x0ec8  */
    /* JADX WARN: Removed duplicated region for block: B:733:0x0d7e A[Catch: all -> 0x07d4, Exception -> 0x07d7, TryCatch #97 {Exception -> 0x07d7, all -> 0x07d4, blocks: (B:364:0x07c7, B:365:0x07cf, B:366:0x081e, B:367:0x082e, B:371:0x0841, B:713:0x07fa, B:717:0x0815, B:731:0x0d78, B:733:0x0d7e, B:734:0x0d88, B:738:0x0d94, B:742:0x0dad, B:743:0x0db5, B:744:0x0dd1, B:745:0x0dba, B:749:0x0dc8, B:756:0x0ddd, B:758:0x0de3, B:759:0x0e00, B:760:0x0e06, B:764:0x0e10, B:765:0x0e18, B:766:0x0e34, B:767:0x0e1d, B:771:0x0e2b, B:777:0x0e3e, B:779:0x0e4c, B:780:0x0e50, B:783:0x0e58, B:785:0x0e5e, B:789:0x0e81, B:796:0x0e9a, B:798:0x0ea9, B:803:0x0df3, B:805:0x0df9), top: B:363:0x07c7 }] */
    /* JADX WARN: Removed duplicated region for block: B:740:0x0da9  */
    /* JADX WARN: Removed duplicated region for block: B:756:0x0ddd A[Catch: all -> 0x07d4, Exception -> 0x07d7, TryCatch #97 {Exception -> 0x07d7, all -> 0x07d4, blocks: (B:364:0x07c7, B:365:0x07cf, B:366:0x081e, B:367:0x082e, B:371:0x0841, B:713:0x07fa, B:717:0x0815, B:731:0x0d78, B:733:0x0d7e, B:734:0x0d88, B:738:0x0d94, B:742:0x0dad, B:743:0x0db5, B:744:0x0dd1, B:745:0x0dba, B:749:0x0dc8, B:756:0x0ddd, B:758:0x0de3, B:759:0x0e00, B:760:0x0e06, B:764:0x0e10, B:765:0x0e18, B:766:0x0e34, B:767:0x0e1d, B:771:0x0e2b, B:777:0x0e3e, B:779:0x0e4c, B:780:0x0e50, B:783:0x0e58, B:785:0x0e5e, B:789:0x0e81, B:796:0x0e9a, B:798:0x0ea9, B:803:0x0df3, B:805:0x0df9), top: B:363:0x07c7 }] */
    /* JADX WARN: Removed duplicated region for block: B:762:0x0e0c  */
    /* JADX WARN: Removed duplicated region for block: B:779:0x0e4c A[Catch: all -> 0x07d4, Exception -> 0x07d7, TryCatch #97 {Exception -> 0x07d7, all -> 0x07d4, blocks: (B:364:0x07c7, B:365:0x07cf, B:366:0x081e, B:367:0x082e, B:371:0x0841, B:713:0x07fa, B:717:0x0815, B:731:0x0d78, B:733:0x0d7e, B:734:0x0d88, B:738:0x0d94, B:742:0x0dad, B:743:0x0db5, B:744:0x0dd1, B:745:0x0dba, B:749:0x0dc8, B:756:0x0ddd, B:758:0x0de3, B:759:0x0e00, B:760:0x0e06, B:764:0x0e10, B:765:0x0e18, B:766:0x0e34, B:767:0x0e1d, B:771:0x0e2b, B:777:0x0e3e, B:779:0x0e4c, B:780:0x0e50, B:783:0x0e58, B:785:0x0e5e, B:789:0x0e81, B:796:0x0e9a, B:798:0x0ea9, B:803:0x0df3, B:805:0x0df9), top: B:363:0x07c7 }] */
    /* JADX WARN: Removed duplicated region for block: B:782:0x0e57  */
    /* JADX WARN: Removed duplicated region for block: B:798:0x0ea9 A[Catch: all -> 0x07d4, Exception -> 0x07d7, TRY_LEAVE, TryCatch #97 {Exception -> 0x07d7, all -> 0x07d4, blocks: (B:364:0x07c7, B:365:0x07cf, B:366:0x081e, B:367:0x082e, B:371:0x0841, B:713:0x07fa, B:717:0x0815, B:731:0x0d78, B:733:0x0d7e, B:734:0x0d88, B:738:0x0d94, B:742:0x0dad, B:743:0x0db5, B:744:0x0dd1, B:745:0x0dba, B:749:0x0dc8, B:756:0x0ddd, B:758:0x0de3, B:759:0x0e00, B:760:0x0e06, B:764:0x0e10, B:765:0x0e18, B:766:0x0e34, B:767:0x0e1d, B:771:0x0e2b, B:777:0x0e3e, B:779:0x0e4c, B:780:0x0e50, B:783:0x0e58, B:785:0x0e5e, B:789:0x0e81, B:796:0x0e9a, B:798:0x0ea9, B:803:0x0df3, B:805:0x0df9), top: B:363:0x07c7 }] */
    /* JADX WARN: Removed duplicated region for block: B:803:0x0df3 A[Catch: all -> 0x07d4, Exception -> 0x07d7, TryCatch #97 {Exception -> 0x07d7, all -> 0x07d4, blocks: (B:364:0x07c7, B:365:0x07cf, B:366:0x081e, B:367:0x082e, B:371:0x0841, B:713:0x07fa, B:717:0x0815, B:731:0x0d78, B:733:0x0d7e, B:734:0x0d88, B:738:0x0d94, B:742:0x0dad, B:743:0x0db5, B:744:0x0dd1, B:745:0x0dba, B:749:0x0dc8, B:756:0x0ddd, B:758:0x0de3, B:759:0x0e00, B:760:0x0e06, B:764:0x0e10, B:765:0x0e18, B:766:0x0e34, B:767:0x0e1d, B:771:0x0e2b, B:777:0x0e3e, B:779:0x0e4c, B:780:0x0e50, B:783:0x0e58, B:785:0x0e5e, B:789:0x0e81, B:796:0x0e9a, B:798:0x0ea9, B:803:0x0df3, B:805:0x0df9), top: B:363:0x07c7 }] */
    /* JADX WARN: Removed duplicated region for block: B:815:0x0781  */
    /* JADX WARN: Removed duplicated region for block: B:820:0x0367 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:927:0x0323 A[SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:968:0x0191 A[Catch: all -> 0x0037, Exception -> 0x003a, TRY_LEAVE, TryCatch #121 {Exception -> 0x003a, all -> 0x0037, blocks: (B:3:0x000b, B:6:0x0019, B:9:0x0027, B:48:0x0049, B:53:0x0056, B:56:0x006a, B:70:0x0083, B:73:0x009c, B:86:0x00cd, B:89:0x00dd, B:91:0x00f2, B:111:0x010c, B:119:0x0167, B:123:0x0181, B:968:0x0191, B:972:0x01a3, B:976:0x0158), top: B:2:0x000b }] */
    /* JADX WARN: Type inference failed for: r13v5 */
    /* JADX WARN: Type inference failed for: r13v6, types: [boolean, int] */
    /* JADX WARN: Type inference failed for: r13v7 */
    /* renamed from: markMessagesAsDeletedInternal, reason: merged with bridge method [inline-methods] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public ArrayList<Long> lambda$markMessagesAsDeleted$209(long j, ArrayList<Integer> arrayList, boolean z, int i, int i2) {
        Throwable th;
        Throwable th2;
        SQLiteCursor sQLiteCursor;
        Throwable th3;
        SQLiteCursor sQLiteCursor2;
        SQLitePreparedStatement sQLitePreparedStatement;
        SQLiteCursor sQLiteCursor3;
        SQLitePreparedStatement sQLitePreparedStatement2;
        SQLiteCursor sQLiteCursor4;
        SQLitePreparedStatement sQLitePreparedStatement3;
        Throwable th4;
        SQLiteDatabase sQLiteDatabase;
        SQLiteCursor sQLiteCursor5;
        SQLiteDatabase sQLiteDatabase2;
        SQLiteCursor sQLiteCursor6;
        ArrayList<Long> arrayList2;
        boolean z2;
        HashMap hashMap;
        ArrayList arrayList3;
        LongSparseArray longSparseArray;
        ArrayList<String> arrayList4;
        ArrayList<Pair<Long, Integer>> arrayList5;
        int i3;
        ArrayList arrayList6;
        ArrayList arrayList7;
        ArrayList<File> arrayList8;
        LongSparseArray longSparseArray2;
        ArrayList arrayList9;
        LongSparseArray longSparseArray3;
        int i4;
        long j2;
        SQLiteCursor sQLiteCursor7;
        Throwable th5;
        SQLiteCursor sQLiteCursor8;
        HashMap hashMap2;
        long j3;
        ArrayList arrayList10;
        ArrayList<TopicKey> arrayList11;
        long j4;
        long j5;
        SQLitePreparedStatement sQLitePreparedStatement4;
        Throwable th6;
        int i5;
        int i6;
        ArrayList<TopicKey> arrayList12;
        LongSparseArray longSparseArray4;
        ArrayList arrayList13;
        Throwable th7;
        SQLitePreparedStatement sQLitePreparedStatement5;
        Throwable th8;
        SQLiteCursor sQLiteCursor9;
        SQLiteCursor sQLiteCursor10;
        int size;
        int i7;
        SQLitePreparedStatement sQLitePreparedStatement6;
        List<TopicsController.TopicUpdate> list;
        SQLiteCursor sQLiteCursor11;
        LongSparseArray longSparseArray5;
        Locale locale;
        ArrayList arrayList14;
        final ArrayList<Integer> arrayList15;
        Runnable runnable;
        ArrayList<Long> arrayList16;
        SQLiteCursor sQLiteCursor12;
        SQLitePreparedStatement sQLitePreparedStatement7;
        SQLitePreparedStatement executeFast;
        SQLitePreparedStatement executeFast2;
        Throwable th9;
        Throwable e;
        Throwable th10;
        SQLiteCursor sQLiteCursor13;
        SQLiteCursor sQLiteCursor14;
        long keyAt;
        CharSequence charSequence;
        String join;
        int i8;
        SQLiteDatabase sQLiteDatabase3;
        Locale locale2;
        SQLiteCursor queryFinalized;
        Throwable e2;
        int i9;
        ArrayList arrayList17;
        LongSparseArray longSparseArray6;
        String str;
        CharSequence charSequence2;
        SQLiteCursor sQLiteCursor15;
        Throwable e3;
        long j6;
        Throwable th11;
        Throwable th12;
        Object[] objArr;
        int i10;
        SQLiteCursor sQLiteCursor16;
        long j7;
        Iterator it;
        int i11;
        int i12;
        Integer num;
        SQLiteCursor sQLiteCursor17;
        long keyAt2;
        int i13;
        int i14;
        Integer num2;
        SQLitePreparedStatement executeFast3;
        Throwable th13;
        int i15;
        int i16;
        int i17;
        int max;
        int max2;
        int max3;
        SQLitePreparedStatement executeFast4;
        SQLiteCursor sQLiteCursor18;
        SQLiteCursor sQLiteCursor19;
        int i18;
        int i19;
        SQLiteDatabase database;
        String str2;
        Throwable th14;
        ArrayList arrayList18;
        NativeByteBuffer byteBufferValue;
        long j8;
        Integer[] numArr;
        SQLiteDatabase sQLiteDatabase4;
        try {
            if (getUserConfig().getClientUserId() == j) {
                try {
                    try {
                        this.database.executeFast(String.format(Locale.US, "DELETE FROM tag_message_id WHERE mid IN(%s)", TextUtils.join(",", arrayList))).stepThis().dispose();
                    } catch (Throwable th15) {
                        th = th15;
                    }
                } catch (Exception e4) {
                    e = e4;
                    th3 = e;
                    sQLitePreparedStatement = null;
                    sQLiteCursor5 = null;
                    sQLitePreparedStatement2 = sQLitePreparedStatement;
                    th4 = th3;
                    sQLiteCursor4 = sQLiteCursor5;
                    try {
                        checkSQLException(th4);
                        sQLiteDatabase = this.database;
                        if (sQLiteDatabase != null) {
                        }
                        if (sQLiteCursor4 != null) {
                        }
                        if (sQLitePreparedStatement2 != null) {
                        }
                    } catch (Throwable th16) {
                        th = th16;
                        sQLiteCursor3 = sQLiteCursor4;
                        sQLiteCursor4 = sQLiteCursor3;
                        sQLitePreparedStatement3 = sQLitePreparedStatement2;
                        sQLiteDatabase2 = this.database;
                        if (sQLiteDatabase2 != null) {
                        }
                        if (sQLiteCursor4 != null) {
                        }
                        if (sQLitePreparedStatement3 == null) {
                        }
                    }
                }
            }
            arrayList2 = new ArrayList<>();
            z2 = i == 1;
        } catch (Exception e5) {
            th2 = e5;
            sQLiteCursor = null;
        } catch (Throwable th17) {
            th = th17;
        }
        if (i == 5) {
            try {
                this.database.executeFast(String.format(Locale.US, "DELETE FROM quick_replies_messages WHERE mid IN(%s) AND topic_id = %d", TextUtils.join(",", arrayList), Integer.valueOf(i2))).stepThis().dispose();
            } catch (Throwable th18) {
                th = th18;
            }
        } else if (z2) {
            String join2 = TextUtils.join(",", arrayList);
            ArrayList arrayList19 = new ArrayList();
            try {
                sQLiteCursor4 = this.database.queryFinalized(String.format(Locale.US, "SELECT uid FROM scheduled_messages_v2 WHERE mid IN(%s) AND uid = %d", join2, Long.valueOf(j)), new Object[0]);
                while (sQLiteCursor4.next()) {
                    try {
                        try {
                            long longValue = sQLiteCursor4.longValue(0);
                            if (!arrayList19.contains(Long.valueOf(longValue))) {
                                arrayList19.add(Long.valueOf(longValue));
                            }
                        } catch (Exception e6) {
                            try {
                                checkSQLException(e6);
                            } catch (Exception e7) {
                                th4 = e7;
                                sQLitePreparedStatement2 = null;
                                checkSQLException(th4);
                                sQLiteDatabase = this.database;
                                if (sQLiteDatabase != null) {
                                }
                                if (sQLiteCursor4 != null) {
                                }
                                if (sQLitePreparedStatement2 != null) {
                                }
                            }
                        }
                    } catch (Throwable th19) {
                        th = th19;
                        sQLitePreparedStatement3 = null;
                    }
                }
                sQLiteCursor4.dispose();
                try {
                    this.database.executeFast(String.format(Locale.US, "DELETE FROM scheduled_messages_v2 WHERE mid IN(%s) AND uid = %d", join2, Long.valueOf(j))).stepThis().dispose();
                    int size2 = arrayList19.size();
                    for (int i20 = 0; i20 < size2; i20++) {
                        broadcastScheduledMessagesChange((Long) arrayList19.get(i20));
                    }
                } catch (Throwable th20) {
                    th = th20;
                }
            } catch (Throwable th21) {
                th = th21;
            }
        } else {
            long clientUserId = getUserConfig().getClientUserId();
            ArrayList arrayList20 = new ArrayList(arrayList);
            ArrayList arrayList21 = new ArrayList(arrayList);
            LongSparseArray longSparseArray7 = new LongSparseArray();
            LongSparseArray longSparseArray8 = new LongSparseArray();
            HashMap hashMap3 = new HashMap();
            LongSparseArray longSparseArray9 = new LongSparseArray();
            String join3 = TextUtils.join(",", arrayList);
            CharSequence charSequence3 = ",";
            ArrayList<File> arrayList22 = new ArrayList<>();
            ArrayList<String> arrayList23 = new ArrayList<>();
            ArrayList<Long> arrayList24 = arrayList2;
            ArrayList<Pair<Long, Integer>> arrayList25 = new ArrayList<>();
            if (clientUserId != j && j != 0) {
                hashMap = hashMap3;
                arrayList3 = null;
                ArrayList arrayList26 = arrayList21;
                if (j == 0) {
                    longSparseArray = longSparseArray8;
                    arrayList4 = arrayList23;
                    arrayList5 = arrayList25;
                    try {
                        sQLiteCursor = this.database.queryFinalized(String.format(Locale.US, "SELECT uid, data, read_state, out, mention, mid FROM messages_v2 WHERE mid IN(%s) AND uid = %d", join3, Long.valueOf(j)), new Object[0]);
                        i3 = 0;
                        while (sQLiteCursor.next()) {
                            ArrayList<File> arrayList27 = arrayList22;
                            try {
                                try {
                                    long longValue2 = sQLiteCursor.longValue(i3);
                                    int intValue = sQLiteCursor.intValue(5);
                                    arrayList20.remove(Integer.valueOf(intValue));
                                    ArrayList arrayList28 = (ArrayList) longSparseArray9.get(longValue2);
                                    if (arrayList28 == null) {
                                        try {
                                            arrayList28 = new ArrayList();
                                            longSparseArray9.put(longValue2, arrayList28);
                                        } catch (Exception e8) {
                                            arrayList6 = arrayList26;
                                            th14 = e8;
                                            arrayList7 = arrayList20;
                                            j2 = clientUserId;
                                            arrayList8 = arrayList27;
                                            longSparseArray2 = longSparseArray9;
                                            arrayList9 = arrayList3;
                                            longSparseArray3 = longSparseArray;
                                            i4 = 5;
                                            try {
                                                checkSQLException(th14);
                                                sQLiteCursor.dispose();
                                                if (j >= 0) {
                                                }
                                                this.database.beginTransaction();
                                                while (i5 < 4) {
                                                }
                                                deleteFromDownloadQueue(arrayList5, true);
                                                final ArrayList<String> arrayList29 = arrayList4;
                                                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda188
                                                    @Override // java.lang.Runnable
                                                    public final void run() {
                                                        MessagesStorage.this.lambda$markMessagesAsDeletedInternal$204(arrayList29);
                                                    }
                                                });
                                                getFileLoader().deleteFiles(arrayList8, 0);
                                                i6 = 0;
                                                while (i6 < longSparseArray7.size()) {
                                                }
                                                arrayList12 = arrayList11;
                                                if (hashMap2.isEmpty()) {
                                                }
                                                try {
                                                    size = longSparseArray2.size();
                                                    SQLitePreparedStatement sQLitePreparedStatement8 = null;
                                                    i7 = 0;
                                                    SQLiteCursor sQLiteCursor20 = null;
                                                    while (i7 < size) {
                                                    }
                                                    sQLitePreparedStatement6 = sQLitePreparedStatement8;
                                                    list = arrayList13;
                                                    sQLiteCursor11 = sQLiteCursor20;
                                                    longSparseArray5 = longSparseArray7;
                                                    String str3 = join3;
                                                    if (!longSparseArray4.isEmpty()) {
                                                    }
                                                    SQLiteDatabase sQLiteDatabase5 = this.database;
                                                    locale = Locale.US;
                                                    sQLiteDatabase5.executeFast(String.format(locale, "DELETE FROM messages_seq WHERE mid IN(%s)", str3)).stepThis().dispose();
                                                    if (!arrayList7.isEmpty()) {
                                                    }
                                                    if (arrayList9 != null) {
                                                    }
                                                    arrayList14 = arrayList9;
                                                    if (arrayList14 != null) {
                                                    }
                                                    arrayList15 = arrayList;
                                                    if (!arrayList10.isEmpty()) {
                                                    }
                                                    getMediaDataController().clearBotKeyboard(null, arrayList15);
                                                    if (longSparseArray5.size() != 0) {
                                                    }
                                                    arrayList16 = arrayList24;
                                                    updateWidgets(arrayList16);
                                                    if (arrayList12 != null) {
                                                    }
                                                    if (list != null) {
                                                    }
                                                    sQLiteCursor12 = sQLiteCursor11;
                                                    sQLitePreparedStatement7 = sQLitePreparedStatement6;
                                                    sQLiteDatabase4 = this.database;
                                                    if (sQLiteDatabase4 != null) {
                                                    }
                                                    if (sQLiteCursor12 != null) {
                                                    }
                                                    if (sQLitePreparedStatement7 != null) {
                                                    }
                                                    return arrayList16;
                                                } catch (Exception e9) {
                                                    th8 = e9;
                                                    sQLiteCursor9 = null;
                                                    sQLitePreparedStatement2 = null;
                                                } catch (Throwable th22) {
                                                    th7 = th22;
                                                    sQLitePreparedStatement5 = null;
                                                }
                                            } catch (Exception e10) {
                                                th2 = e10;
                                                th3 = th2;
                                                sQLiteCursor2 = sQLiteCursor;
                                                sQLitePreparedStatement = null;
                                                sQLiteCursor5 = sQLiteCursor2;
                                                sQLitePreparedStatement2 = sQLitePreparedStatement;
                                                th4 = th3;
                                                sQLiteCursor4 = sQLiteCursor5;
                                                checkSQLException(th4);
                                                sQLiteDatabase = this.database;
                                                if (sQLiteDatabase != null) {
                                                    sQLiteDatabase.commitTransaction();
                                                }
                                                if (sQLiteCursor4 != null) {
                                                    sQLiteCursor4.dispose();
                                                }
                                                if (sQLitePreparedStatement2 != null) {
                                                    return null;
                                                }
                                                sQLitePreparedStatement2.dispose();
                                                return null;
                                            }
                                        }
                                    }
                                    arrayList28.add(Integer.valueOf(intValue));
                                    if (longValue2 != clientUserId) {
                                        try {
                                            int intValue2 = sQLiteCursor.intValue(2);
                                            if (sQLiteCursor.intValue(3) == 0) {
                                                Integer[] numArr2 = (Integer[]) longSparseArray7.get(longValue2);
                                                if (numArr2 == null) {
                                                    try {
                                                        try {
                                                            longSparseArray7.put(longValue2, numArr);
                                                            numArr2 = numArr;
                                                        } catch (Exception e11) {
                                                            e = e11;
                                                            arrayList6 = arrayList26;
                                                            th14 = e;
                                                            j2 = clientUserId;
                                                            arrayList8 = arrayList27;
                                                            arrayList9 = arrayList3;
                                                            longSparseArray3 = longSparseArray;
                                                            arrayList7 = arrayList18;
                                                            i4 = 5;
                                                            checkSQLException(th14);
                                                            sQLiteCursor.dispose();
                                                            if (j >= 0) {
                                                            }
                                                            this.database.beginTransaction();
                                                            while (i5 < 4) {
                                                            }
                                                            deleteFromDownloadQueue(arrayList5, true);
                                                            final ArrayList arrayList292 = arrayList4;
                                                            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda188
                                                                @Override // java.lang.Runnable
                                                                public final void run() {
                                                                    MessagesStorage.this.lambda$markMessagesAsDeletedInternal$204(arrayList292);
                                                                }
                                                            });
                                                            getFileLoader().deleteFiles(arrayList8, 0);
                                                            i6 = 0;
                                                            while (i6 < longSparseArray7.size()) {
                                                            }
                                                            arrayList12 = arrayList11;
                                                            if (hashMap2.isEmpty()) {
                                                            }
                                                            size = longSparseArray2.size();
                                                            SQLitePreparedStatement sQLitePreparedStatement82 = null;
                                                            i7 = 0;
                                                            SQLiteCursor sQLiteCursor202 = null;
                                                            while (i7 < size) {
                                                            }
                                                            sQLitePreparedStatement6 = sQLitePreparedStatement82;
                                                            list = arrayList13;
                                                            sQLiteCursor11 = sQLiteCursor202;
                                                            longSparseArray5 = longSparseArray7;
                                                            String str32 = join3;
                                                            if (!longSparseArray4.isEmpty()) {
                                                            }
                                                            SQLiteDatabase sQLiteDatabase52 = this.database;
                                                            locale = Locale.US;
                                                            sQLiteDatabase52.executeFast(String.format(locale, "DELETE FROM messages_seq WHERE mid IN(%s)", str32)).stepThis().dispose();
                                                            if (!arrayList7.isEmpty()) {
                                                            }
                                                            if (arrayList9 != null) {
                                                            }
                                                            arrayList14 = arrayList9;
                                                            if (arrayList14 != null) {
                                                            }
                                                            arrayList15 = arrayList;
                                                            if (!arrayList10.isEmpty()) {
                                                            }
                                                            getMediaDataController().clearBotKeyboard(null, arrayList15);
                                                            if (longSparseArray5.size() != 0) {
                                                            }
                                                            arrayList16 = arrayList24;
                                                            updateWidgets(arrayList16);
                                                            if (arrayList12 != null) {
                                                            }
                                                            if (list != null) {
                                                            }
                                                            sQLiteCursor12 = sQLiteCursor11;
                                                            sQLitePreparedStatement7 = sQLitePreparedStatement6;
                                                            sQLiteDatabase4 = this.database;
                                                            if (sQLiteDatabase4 != null) {
                                                            }
                                                            if (sQLiteCursor12 != null) {
                                                            }
                                                            if (sQLitePreparedStatement7 != null) {
                                                            }
                                                            return arrayList16;
                                                        }
                                                        numArr = new Integer[]{0, 0};
                                                    } catch (Exception e12) {
                                                        th14 = e12;
                                                        arrayList6 = arrayList26;
                                                        j2 = clientUserId;
                                                        arrayList8 = arrayList27;
                                                        arrayList9 = arrayList3;
                                                        longSparseArray3 = longSparseArray;
                                                        arrayList7 = arrayList18;
                                                        i4 = 5;
                                                        checkSQLException(th14);
                                                        sQLiteCursor.dispose();
                                                        if (j >= 0) {
                                                        }
                                                        this.database.beginTransaction();
                                                        while (i5 < 4) {
                                                        }
                                                        deleteFromDownloadQueue(arrayList5, true);
                                                        final ArrayList arrayList2922 = arrayList4;
                                                        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda188
                                                            @Override // java.lang.Runnable
                                                            public final void run() {
                                                                MessagesStorage.this.lambda$markMessagesAsDeletedInternal$204(arrayList2922);
                                                            }
                                                        });
                                                        getFileLoader().deleteFiles(arrayList8, 0);
                                                        i6 = 0;
                                                        while (i6 < longSparseArray7.size()) {
                                                        }
                                                        arrayList12 = arrayList11;
                                                        if (hashMap2.isEmpty()) {
                                                        }
                                                        size = longSparseArray2.size();
                                                        SQLitePreparedStatement sQLitePreparedStatement822 = null;
                                                        i7 = 0;
                                                        SQLiteCursor sQLiteCursor2022 = null;
                                                        while (i7 < size) {
                                                        }
                                                        sQLitePreparedStatement6 = sQLitePreparedStatement822;
                                                        list = arrayList13;
                                                        sQLiteCursor11 = sQLiteCursor2022;
                                                        longSparseArray5 = longSparseArray7;
                                                        String str322 = join3;
                                                        if (!longSparseArray4.isEmpty()) {
                                                        }
                                                        SQLiteDatabase sQLiteDatabase522 = this.database;
                                                        locale = Locale.US;
                                                        sQLiteDatabase522.executeFast(String.format(locale, "DELETE FROM messages_seq WHERE mid IN(%s)", str322)).stepThis().dispose();
                                                        if (!arrayList7.isEmpty()) {
                                                        }
                                                        if (arrayList9 != null) {
                                                        }
                                                        arrayList14 = arrayList9;
                                                        if (arrayList14 != null) {
                                                        }
                                                        arrayList15 = arrayList;
                                                        if (!arrayList10.isEmpty()) {
                                                        }
                                                        getMediaDataController().clearBotKeyboard(null, arrayList15);
                                                        if (longSparseArray5.size() != 0) {
                                                        }
                                                        arrayList16 = arrayList24;
                                                        updateWidgets(arrayList16);
                                                        if (arrayList12 != null) {
                                                        }
                                                        if (list != null) {
                                                        }
                                                        sQLiteCursor12 = sQLiteCursor11;
                                                        sQLitePreparedStatement7 = sQLitePreparedStatement6;
                                                        sQLiteDatabase4 = this.database;
                                                        if (sQLiteDatabase4 != null) {
                                                        }
                                                        if (sQLiteCursor12 != null) {
                                                        }
                                                        if (sQLitePreparedStatement7 != null) {
                                                        }
                                                        return arrayList16;
                                                    } catch (Throwable th23) {
                                                        th = th23;
                                                        th = th;
                                                        sQLiteCursor6 = sQLiteCursor;
                                                        sQLitePreparedStatement3 = null;
                                                        sQLiteCursor4 = sQLiteCursor6;
                                                        sQLiteDatabase2 = this.database;
                                                        if (sQLiteDatabase2 != null) {
                                                        }
                                                        if (sQLiteCursor4 != null) {
                                                        }
                                                        if (sQLitePreparedStatement3 == null) {
                                                        }
                                                    }
                                                    arrayList18 = arrayList20;
                                                    longSparseArray2 = longSparseArray9;
                                                } else {
                                                    arrayList18 = arrayList20;
                                                    longSparseArray2 = longSparseArray9;
                                                }
                                                if (intValue2 < 2) {
                                                    numArr2[1] = Integer.valueOf(numArr2[1].intValue() + 1);
                                                }
                                                if (intValue2 == 0 || intValue2 == 2) {
                                                    numArr2[0] = Integer.valueOf(numArr2[0].intValue() + 1);
                                                }
                                                if (!DialogObject.isEncryptedDialog(longValue2) || z || longValue2 == clientUserId) {
                                                    byteBufferValue = sQLiteCursor.byteBufferValue(1);
                                                    if (byteBufferValue == null) {
                                                        TLRPC.Message TLdeserialize = TLRPC.Message.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                                                        TLdeserialize.readAttachPath(byteBufferValue, clientUserId);
                                                        if (arrayList3 != null) {
                                                            arrayList3.add(TLdeserialize);
                                                        }
                                                        byteBufferValue.reuse();
                                                        if (DialogObject.isEncryptedDialog(longValue2) || z) {
                                                            arrayList6 = arrayList26;
                                                            arrayList7 = arrayList18;
                                                            long j9 = clientUserId;
                                                            j8 = longValue2;
                                                            arrayList8 = arrayList27;
                                                            longSparseArray3 = longSparseArray;
                                                            arrayList9 = arrayList3;
                                                            i4 = 5;
                                                            try {
                                                                addFilesToDelete(TLdeserialize, arrayList27, arrayList5, arrayList4, false);
                                                                j2 = j9;
                                                            } catch (Exception e13) {
                                                                e = e13;
                                                                j2 = j9;
                                                                th14 = e;
                                                                checkSQLException(th14);
                                                                sQLiteCursor.dispose();
                                                                if (j >= 0) {
                                                                }
                                                                this.database.beginTransaction();
                                                                while (i5 < 4) {
                                                                }
                                                                deleteFromDownloadQueue(arrayList5, true);
                                                                final ArrayList arrayList29222 = arrayList4;
                                                                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda188
                                                                    @Override // java.lang.Runnable
                                                                    public final void run() {
                                                                        MessagesStorage.this.lambda$markMessagesAsDeletedInternal$204(arrayList29222);
                                                                    }
                                                                });
                                                                getFileLoader().deleteFiles(arrayList8, 0);
                                                                i6 = 0;
                                                                while (i6 < longSparseArray7.size()) {
                                                                }
                                                                arrayList12 = arrayList11;
                                                                if (hashMap2.isEmpty()) {
                                                                }
                                                                size = longSparseArray2.size();
                                                                SQLitePreparedStatement sQLitePreparedStatement8222 = null;
                                                                i7 = 0;
                                                                SQLiteCursor sQLiteCursor20222 = null;
                                                                while (i7 < size) {
                                                                }
                                                                sQLitePreparedStatement6 = sQLitePreparedStatement8222;
                                                                list = arrayList13;
                                                                sQLiteCursor11 = sQLiteCursor20222;
                                                                longSparseArray5 = longSparseArray7;
                                                                String str3222 = join3;
                                                                if (!longSparseArray4.isEmpty()) {
                                                                }
                                                                SQLiteDatabase sQLiteDatabase5222 = this.database;
                                                                locale = Locale.US;
                                                                sQLiteDatabase5222.executeFast(String.format(locale, "DELETE FROM messages_seq WHERE mid IN(%s)", str3222)).stepThis().dispose();
                                                                if (!arrayList7.isEmpty()) {
                                                                }
                                                                if (arrayList9 != null) {
                                                                }
                                                                arrayList14 = arrayList9;
                                                                if (arrayList14 != null) {
                                                                }
                                                                arrayList15 = arrayList;
                                                                if (!arrayList10.isEmpty()) {
                                                                }
                                                                getMediaDataController().clearBotKeyboard(null, arrayList15);
                                                                if (longSparseArray5.size() != 0) {
                                                                }
                                                                arrayList16 = arrayList24;
                                                                updateWidgets(arrayList16);
                                                                if (arrayList12 != null) {
                                                                }
                                                                if (list != null) {
                                                                }
                                                                sQLiteCursor12 = sQLiteCursor11;
                                                                sQLitePreparedStatement7 = sQLitePreparedStatement6;
                                                                sQLiteDatabase4 = this.database;
                                                                if (sQLiteDatabase4 != null) {
                                                                }
                                                                if (sQLiteCursor12 != null) {
                                                                }
                                                                if (sQLitePreparedStatement7 != null) {
                                                                }
                                                                return arrayList16;
                                                            }
                                                        } else {
                                                            arrayList6 = arrayList26;
                                                            j8 = longValue2;
                                                            arrayList8 = arrayList27;
                                                            arrayList9 = arrayList3;
                                                            longSparseArray3 = longSparseArray;
                                                            arrayList7 = arrayList18;
                                                            i4 = 5;
                                                            j2 = clientUserId;
                                                        }
                                                        if (j8 == j2) {
                                                            try {
                                                                long savedDialogId = MessageObject.getSavedDialogId(j2, TLdeserialize);
                                                                if (savedDialogId != 0) {
                                                                    ArrayList arrayList30 = (ArrayList) longSparseArray3.get(savedDialogId);
                                                                    if (arrayList30 == null) {
                                                                        arrayList30 = new ArrayList();
                                                                        longSparseArray3.put(savedDialogId, arrayList30);
                                                                    }
                                                                    arrayList30.add(Integer.valueOf(intValue));
                                                                }
                                                            } catch (Exception e14) {
                                                                e = e14;
                                                                th14 = e;
                                                                checkSQLException(th14);
                                                                sQLiteCursor.dispose();
                                                                if (j >= 0) {
                                                                }
                                                                this.database.beginTransaction();
                                                                while (i5 < 4) {
                                                                }
                                                                deleteFromDownloadQueue(arrayList5, true);
                                                                final ArrayList arrayList292222 = arrayList4;
                                                                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda188
                                                                    @Override // java.lang.Runnable
                                                                    public final void run() {
                                                                        MessagesStorage.this.lambda$markMessagesAsDeletedInternal$204(arrayList292222);
                                                                    }
                                                                });
                                                                getFileLoader().deleteFiles(arrayList8, 0);
                                                                i6 = 0;
                                                                while (i6 < longSparseArray7.size()) {
                                                                }
                                                                arrayList12 = arrayList11;
                                                                if (hashMap2.isEmpty()) {
                                                                }
                                                                size = longSparseArray2.size();
                                                                SQLitePreparedStatement sQLitePreparedStatement82222 = null;
                                                                i7 = 0;
                                                                SQLiteCursor sQLiteCursor202222 = null;
                                                                while (i7 < size) {
                                                                }
                                                                sQLitePreparedStatement6 = sQLitePreparedStatement82222;
                                                                list = arrayList13;
                                                                sQLiteCursor11 = sQLiteCursor202222;
                                                                longSparseArray5 = longSparseArray7;
                                                                String str32222 = join3;
                                                                if (!longSparseArray4.isEmpty()) {
                                                                }
                                                                SQLiteDatabase sQLiteDatabase52222 = this.database;
                                                                locale = Locale.US;
                                                                sQLiteDatabase52222.executeFast(String.format(locale, "DELETE FROM messages_seq WHERE mid IN(%s)", str32222)).stepThis().dispose();
                                                                if (!arrayList7.isEmpty()) {
                                                                }
                                                                if (arrayList9 != null) {
                                                                }
                                                                arrayList14 = arrayList9;
                                                                if (arrayList14 != null) {
                                                                }
                                                                arrayList15 = arrayList;
                                                                if (!arrayList10.isEmpty()) {
                                                                }
                                                                getMediaDataController().clearBotKeyboard(null, arrayList15);
                                                                if (longSparseArray5.size() != 0) {
                                                                }
                                                                arrayList16 = arrayList24;
                                                                updateWidgets(arrayList16);
                                                                if (arrayList12 != null) {
                                                                }
                                                                if (list != null) {
                                                                }
                                                                sQLiteCursor12 = sQLiteCursor11;
                                                                sQLitePreparedStatement7 = sQLitePreparedStatement6;
                                                                sQLiteDatabase4 = this.database;
                                                                if (sQLiteDatabase4 != null) {
                                                                }
                                                                if (sQLiteCursor12 != null) {
                                                                }
                                                                if (sQLitePreparedStatement7 != null) {
                                                                }
                                                                return arrayList16;
                                                            }
                                                        }
                                                        clientUserId = j2;
                                                        longSparseArray = longSparseArray3;
                                                        arrayList3 = arrayList9;
                                                        arrayList20 = arrayList7;
                                                        longSparseArray9 = longSparseArray2;
                                                        i3 = 0;
                                                        arrayList22 = arrayList8;
                                                        arrayList26 = arrayList6;
                                                    } else {
                                                        arrayList22 = arrayList27;
                                                        arrayList3 = arrayList3;
                                                        arrayList20 = arrayList18;
                                                        longSparseArray9 = longSparseArray2;
                                                    }
                                                } else {
                                                    arrayList22 = arrayList27;
                                                    arrayList20 = arrayList18;
                                                    longSparseArray9 = longSparseArray2;
                                                }
                                                i3 = 0;
                                                while (sQLiteCursor.next()) {
                                                    try {
                                                        try {
                                                        } catch (Throwable th24) {
                                                            th = th24;
                                                        }
                                                    } catch (Exception e15) {
                                                        e = e15;
                                                        arrayList6 = arrayList26;
                                                        arrayList7 = arrayList20;
                                                        arrayList8 = arrayList22;
                                                        longSparseArray2 = longSparseArray9;
                                                        arrayList9 = arrayList3;
                                                        longSparseArray3 = longSparseArray;
                                                        i4 = 5;
                                                        j2 = clientUserId;
                                                    }
                                                }
                                            }
                                        } catch (Exception e16) {
                                            e = e16;
                                            arrayList18 = arrayList20;
                                            longSparseArray2 = longSparseArray9;
                                        }
                                    }
                                    if (DialogObject.isEncryptedDialog(longValue2)) {
                                    }
                                    byteBufferValue = sQLiteCursor.byteBufferValue(1);
                                    if (byteBufferValue == null) {
                                    }
                                } catch (Exception e17) {
                                    e = e17;
                                    arrayList6 = arrayList26;
                                    j2 = clientUserId;
                                    arrayList8 = arrayList27;
                                    arrayList9 = arrayList3;
                                    longSparseArray3 = longSparseArray;
                                    arrayList7 = arrayList18;
                                    i4 = 5;
                                    th14 = e;
                                    checkSQLException(th14);
                                    sQLiteCursor.dispose();
                                    if (j >= 0) {
                                    }
                                    this.database.beginTransaction();
                                    while (i5 < 4) {
                                    }
                                    deleteFromDownloadQueue(arrayList5, true);
                                    final ArrayList arrayList2922222 = arrayList4;
                                    AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda188
                                        @Override // java.lang.Runnable
                                        public final void run() {
                                            MessagesStorage.this.lambda$markMessagesAsDeletedInternal$204(arrayList2922222);
                                        }
                                    });
                                    getFileLoader().deleteFiles(arrayList8, 0);
                                    i6 = 0;
                                    while (i6 < longSparseArray7.size()) {
                                    }
                                    arrayList12 = arrayList11;
                                    if (hashMap2.isEmpty()) {
                                    }
                                    size = longSparseArray2.size();
                                    SQLitePreparedStatement sQLitePreparedStatement822222 = null;
                                    i7 = 0;
                                    SQLiteCursor sQLiteCursor2022222 = null;
                                    while (i7 < size) {
                                    }
                                    sQLitePreparedStatement6 = sQLitePreparedStatement822222;
                                    list = arrayList13;
                                    sQLiteCursor11 = sQLiteCursor2022222;
                                    longSparseArray5 = longSparseArray7;
                                    String str322222 = join3;
                                    if (!longSparseArray4.isEmpty()) {
                                    }
                                    SQLiteDatabase sQLiteDatabase522222 = this.database;
                                    locale = Locale.US;
                                    sQLiteDatabase522222.executeFast(String.format(locale, "DELETE FROM messages_seq WHERE mid IN(%s)", str322222)).stepThis().dispose();
                                    if (!arrayList7.isEmpty()) {
                                    }
                                    if (arrayList9 != null) {
                                    }
                                    arrayList14 = arrayList9;
                                    if (arrayList14 != null) {
                                    }
                                    arrayList15 = arrayList;
                                    if (!arrayList10.isEmpty()) {
                                    }
                                    getMediaDataController().clearBotKeyboard(null, arrayList15);
                                    if (longSparseArray5.size() != 0) {
                                    }
                                    arrayList16 = arrayList24;
                                    updateWidgets(arrayList16);
                                    if (arrayList12 != null) {
                                    }
                                    if (list != null) {
                                    }
                                    sQLiteCursor12 = sQLiteCursor11;
                                    sQLitePreparedStatement7 = sQLitePreparedStatement6;
                                    sQLiteDatabase4 = this.database;
                                    if (sQLiteDatabase4 != null) {
                                    }
                                    if (sQLiteCursor12 != null) {
                                    }
                                    if (sQLitePreparedStatement7 != null) {
                                    }
                                    return arrayList16;
                                }
                                arrayList18 = arrayList20;
                                longSparseArray2 = longSparseArray9;
                            } catch (Exception e18) {
                                e = e18;
                                arrayList6 = arrayList26;
                                arrayList7 = arrayList20;
                                j2 = clientUserId;
                                arrayList8 = arrayList27;
                                longSparseArray2 = longSparseArray9;
                                arrayList9 = arrayList3;
                                longSparseArray3 = longSparseArray;
                            }
                        }
                        arrayList6 = arrayList26;
                        arrayList7 = arrayList20;
                        arrayList8 = arrayList22;
                        longSparseArray2 = longSparseArray9;
                        arrayList9 = arrayList3;
                        longSparseArray3 = longSparseArray;
                        i4 = 5;
                        j2 = clientUserId;
                        sQLiteCursor.dispose();
                        if (j >= 0) {
                            try {
                            } catch (Exception e19) {
                                th5 = e19;
                                sQLiteCursor8 = null;
                            } catch (Throwable th25) {
                                th = th25;
                                sQLiteCursor7 = null;
                            }
                            try {
                                ?? r13 = 0;
                                SQLiteCursor queryFinalized2 = this.database.queryFinalized(String.format(Locale.US, "SELECT uid, data, read_state, out, mention, mid FROM messages_topics WHERE mid IN(%s) AND uid = %d", join3, Long.valueOf(j)), new Object[0]);
                                ArrayList<TopicKey> arrayList31 = null;
                                while (queryFinalized2.next()) {
                                    try {
                                        try {
                                            long longValue3 = queryFinalized2.longValue(r13);
                                            ArrayList arrayList32 = arrayList6;
                                            try {
                                                arrayList32.remove(Integer.valueOf(queryFinalized2.intValue(i4)));
                                                NativeByteBuffer byteBufferValue2 = queryFinalized2.byteBufferValue(1);
                                                if (byteBufferValue2 != 0) {
                                                    TLRPC.Message TLdeserialize2 = TLRPC.Message.TLdeserialize(byteBufferValue2, byteBufferValue2.readInt32(r13), r13);
                                                    try {
                                                        TLdeserialize2.readAttachPath(byteBufferValue2, getUserConfig().clientUserId);
                                                        byteBufferValue2.reuse();
                                                        arrayList10 = arrayList32;
                                                        j3 = j2;
                                                        try {
                                                            addFilesToDelete(TLdeserialize2, arrayList8, arrayList5, arrayList4, false);
                                                            if (TLdeserialize2.action instanceof TLRPC.TL_messageActionTopicCreate) {
                                                                ArrayList<TopicKey> arrayList33 = arrayList31 == null ? new ArrayList<>() : arrayList31;
                                                                try {
                                                                    j5 = longValue3;
                                                                    arrayList33.add(TopicKey.of(j5, TLdeserialize2.id));
                                                                    arrayList31 = arrayList33;
                                                                } catch (Exception e20) {
                                                                    e = e20;
                                                                    hashMap2 = hashMap;
                                                                    arrayList31 = arrayList33;
                                                                    try {
                                                                        checkSQLException(e);
                                                                        queryFinalized2.dispose();
                                                                        arrayList11 = arrayList31;
                                                                        this.database.beginTransaction();
                                                                        while (i5 < 4) {
                                                                        }
                                                                        deleteFromDownloadQueue(arrayList5, true);
                                                                        final ArrayList arrayList29222222 = arrayList4;
                                                                        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda188
                                                                            @Override // java.lang.Runnable
                                                                            public final void run() {
                                                                                MessagesStorage.this.lambda$markMessagesAsDeletedInternal$204(arrayList29222222);
                                                                            }
                                                                        });
                                                                        getFileLoader().deleteFiles(arrayList8, 0);
                                                                        i6 = 0;
                                                                        while (i6 < longSparseArray7.size()) {
                                                                        }
                                                                        arrayList12 = arrayList11;
                                                                        if (hashMap2.isEmpty()) {
                                                                        }
                                                                        size = longSparseArray2.size();
                                                                        SQLitePreparedStatement sQLitePreparedStatement8222222 = null;
                                                                        i7 = 0;
                                                                        SQLiteCursor sQLiteCursor20222222 = null;
                                                                        while (i7 < size) {
                                                                        }
                                                                        sQLitePreparedStatement6 = sQLitePreparedStatement8222222;
                                                                        list = arrayList13;
                                                                        sQLiteCursor11 = sQLiteCursor20222222;
                                                                        longSparseArray5 = longSparseArray7;
                                                                        String str3222222 = join3;
                                                                        if (!longSparseArray4.isEmpty()) {
                                                                        }
                                                                        SQLiteDatabase sQLiteDatabase5222222 = this.database;
                                                                        locale = Locale.US;
                                                                        sQLiteDatabase5222222.executeFast(String.format(locale, "DELETE FROM messages_seq WHERE mid IN(%s)", str3222222)).stepThis().dispose();
                                                                        if (!arrayList7.isEmpty()) {
                                                                        }
                                                                        if (arrayList9 != null) {
                                                                        }
                                                                        arrayList14 = arrayList9;
                                                                        if (arrayList14 != null) {
                                                                        }
                                                                        arrayList15 = arrayList;
                                                                        if (!arrayList10.isEmpty()) {
                                                                        }
                                                                        getMediaDataController().clearBotKeyboard(null, arrayList15);
                                                                        if (longSparseArray5.size() != 0) {
                                                                        }
                                                                        arrayList16 = arrayList24;
                                                                        updateWidgets(arrayList16);
                                                                        if (arrayList12 != null) {
                                                                        }
                                                                        if (list != null) {
                                                                        }
                                                                        sQLiteCursor12 = sQLiteCursor11;
                                                                        sQLitePreparedStatement7 = sQLitePreparedStatement6;
                                                                        sQLiteDatabase4 = this.database;
                                                                        if (sQLiteDatabase4 != null) {
                                                                        }
                                                                        if (sQLiteCursor12 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement7 != null) {
                                                                        }
                                                                        return arrayList16;
                                                                    } catch (Exception e21) {
                                                                        th5 = e21;
                                                                        sQLiteCursor8 = queryFinalized2;
                                                                        th3 = th5;
                                                                        sQLiteCursor2 = sQLiteCursor8;
                                                                        sQLitePreparedStatement = null;
                                                                        sQLiteCursor5 = sQLiteCursor2;
                                                                        sQLitePreparedStatement2 = sQLitePreparedStatement;
                                                                        th4 = th3;
                                                                        sQLiteCursor4 = sQLiteCursor5;
                                                                        checkSQLException(th4);
                                                                        sQLiteDatabase = this.database;
                                                                        if (sQLiteDatabase != null) {
                                                                        }
                                                                        if (sQLiteCursor4 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement2 != null) {
                                                                        }
                                                                    }
                                                                }
                                                            } else {
                                                                j5 = longValue3;
                                                            }
                                                            j4 = MessageObject.getTopicId(this.currentAccount, TLdeserialize2, isForum(j5));
                                                        } catch (Exception e22) {
                                                            e = e22;
                                                            hashMap2 = hashMap;
                                                            checkSQLException(e);
                                                            queryFinalized2.dispose();
                                                            arrayList11 = arrayList31;
                                                            this.database.beginTransaction();
                                                            while (i5 < 4) {
                                                            }
                                                            deleteFromDownloadQueue(arrayList5, true);
                                                            final ArrayList arrayList292222222 = arrayList4;
                                                            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda188
                                                                @Override // java.lang.Runnable
                                                                public final void run() {
                                                                    MessagesStorage.this.lambda$markMessagesAsDeletedInternal$204(arrayList292222222);
                                                                }
                                                            });
                                                            getFileLoader().deleteFiles(arrayList8, 0);
                                                            i6 = 0;
                                                            while (i6 < longSparseArray7.size()) {
                                                            }
                                                            arrayList12 = arrayList11;
                                                            if (hashMap2.isEmpty()) {
                                                            }
                                                            size = longSparseArray2.size();
                                                            SQLitePreparedStatement sQLitePreparedStatement82222222 = null;
                                                            i7 = 0;
                                                            SQLiteCursor sQLiteCursor202222222 = null;
                                                            while (i7 < size) {
                                                            }
                                                            sQLitePreparedStatement6 = sQLitePreparedStatement82222222;
                                                            list = arrayList13;
                                                            sQLiteCursor11 = sQLiteCursor202222222;
                                                            longSparseArray5 = longSparseArray7;
                                                            String str32222222 = join3;
                                                            if (!longSparseArray4.isEmpty()) {
                                                            }
                                                            SQLiteDatabase sQLiteDatabase52222222 = this.database;
                                                            locale = Locale.US;
                                                            sQLiteDatabase52222222.executeFast(String.format(locale, "DELETE FROM messages_seq WHERE mid IN(%s)", str32222222)).stepThis().dispose();
                                                            if (!arrayList7.isEmpty()) {
                                                            }
                                                            if (arrayList9 != null) {
                                                            }
                                                            arrayList14 = arrayList9;
                                                            if (arrayList14 != null) {
                                                            }
                                                            arrayList15 = arrayList;
                                                            if (!arrayList10.isEmpty()) {
                                                            }
                                                            getMediaDataController().clearBotKeyboard(null, arrayList15);
                                                            if (longSparseArray5.size() != 0) {
                                                            }
                                                            arrayList16 = arrayList24;
                                                            updateWidgets(arrayList16);
                                                            if (arrayList12 != null) {
                                                            }
                                                            if (list != null) {
                                                            }
                                                            sQLiteCursor12 = sQLiteCursor11;
                                                            sQLitePreparedStatement7 = sQLitePreparedStatement6;
                                                            sQLiteDatabase4 = this.database;
                                                            if (sQLiteDatabase4 != null) {
                                                            }
                                                            if (sQLiteCursor12 != null) {
                                                            }
                                                            if (sQLitePreparedStatement7 != null) {
                                                            }
                                                            return arrayList16;
                                                        }
                                                    } catch (Exception e23) {
                                                        e = e23;
                                                        arrayList10 = arrayList32;
                                                        j3 = j2;
                                                        hashMap2 = hashMap;
                                                        checkSQLException(e);
                                                        queryFinalized2.dispose();
                                                        arrayList11 = arrayList31;
                                                        this.database.beginTransaction();
                                                        while (i5 < 4) {
                                                        }
                                                        deleteFromDownloadQueue(arrayList5, true);
                                                        final ArrayList arrayList2922222222 = arrayList4;
                                                        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda188
                                                            @Override // java.lang.Runnable
                                                            public final void run() {
                                                                MessagesStorage.this.lambda$markMessagesAsDeletedInternal$204(arrayList2922222222);
                                                            }
                                                        });
                                                        getFileLoader().deleteFiles(arrayList8, 0);
                                                        i6 = 0;
                                                        while (i6 < longSparseArray7.size()) {
                                                        }
                                                        arrayList12 = arrayList11;
                                                        if (hashMap2.isEmpty()) {
                                                        }
                                                        size = longSparseArray2.size();
                                                        SQLitePreparedStatement sQLitePreparedStatement822222222 = null;
                                                        i7 = 0;
                                                        SQLiteCursor sQLiteCursor2022222222 = null;
                                                        while (i7 < size) {
                                                        }
                                                        sQLitePreparedStatement6 = sQLitePreparedStatement822222222;
                                                        list = arrayList13;
                                                        sQLiteCursor11 = sQLiteCursor2022222222;
                                                        longSparseArray5 = longSparseArray7;
                                                        String str322222222 = join3;
                                                        if (!longSparseArray4.isEmpty()) {
                                                        }
                                                        SQLiteDatabase sQLiteDatabase522222222 = this.database;
                                                        locale = Locale.US;
                                                        sQLiteDatabase522222222.executeFast(String.format(locale, "DELETE FROM messages_seq WHERE mid IN(%s)", str322222222)).stepThis().dispose();
                                                        if (!arrayList7.isEmpty()) {
                                                        }
                                                        if (arrayList9 != null) {
                                                        }
                                                        arrayList14 = arrayList9;
                                                        if (arrayList14 != null) {
                                                        }
                                                        arrayList15 = arrayList;
                                                        if (!arrayList10.isEmpty()) {
                                                        }
                                                        getMediaDataController().clearBotKeyboard(null, arrayList15);
                                                        if (longSparseArray5.size() != 0) {
                                                        }
                                                        arrayList16 = arrayList24;
                                                        updateWidgets(arrayList16);
                                                        if (arrayList12 != null) {
                                                        }
                                                        if (list != null) {
                                                        }
                                                        sQLiteCursor12 = sQLiteCursor11;
                                                        sQLitePreparedStatement7 = sQLitePreparedStatement6;
                                                        sQLiteDatabase4 = this.database;
                                                        if (sQLiteDatabase4 != null) {
                                                        }
                                                        if (sQLiteCursor12 != null) {
                                                        }
                                                        if (sQLitePreparedStatement7 != null) {
                                                        }
                                                        return arrayList16;
                                                    }
                                                } else {
                                                    arrayList10 = arrayList32;
                                                    j3 = j2;
                                                    j4 = 0;
                                                }
                                                if (j4 != 0) {
                                                    TopicKey of = TopicKey.of(j, j4);
                                                    int intValue3 = queryFinalized2.intValue(2);
                                                    hashMap2 = hashMap;
                                                    try {
                                                        int[] iArr = (int[]) hashMap2.get(of);
                                                        if (iArr == null) {
                                                            iArr = new int[3];
                                                            hashMap2.put(of, iArr);
                                                        }
                                                        iArr[2] = iArr[2] + 1;
                                                        if (queryFinalized2.intValue(3) == 0) {
                                                            if (intValue3 < 2) {
                                                                iArr[1] = iArr[1] + 1;
                                                            }
                                                            if (intValue3 == 0 || intValue3 == 2) {
                                                                iArr[0] = iArr[0] + 1;
                                                            }
                                                        }
                                                    } catch (Exception e24) {
                                                        e = e24;
                                                        checkSQLException(e);
                                                        queryFinalized2.dispose();
                                                        arrayList11 = arrayList31;
                                                        this.database.beginTransaction();
                                                        while (i5 < 4) {
                                                        }
                                                        deleteFromDownloadQueue(arrayList5, true);
                                                        final ArrayList arrayList29222222222 = arrayList4;
                                                        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda188
                                                            @Override // java.lang.Runnable
                                                            public final void run() {
                                                                MessagesStorage.this.lambda$markMessagesAsDeletedInternal$204(arrayList29222222222);
                                                            }
                                                        });
                                                        getFileLoader().deleteFiles(arrayList8, 0);
                                                        i6 = 0;
                                                        while (i6 < longSparseArray7.size()) {
                                                        }
                                                        arrayList12 = arrayList11;
                                                        if (hashMap2.isEmpty()) {
                                                        }
                                                        size = longSparseArray2.size();
                                                        SQLitePreparedStatement sQLitePreparedStatement8222222222 = null;
                                                        i7 = 0;
                                                        SQLiteCursor sQLiteCursor20222222222 = null;
                                                        while (i7 < size) {
                                                        }
                                                        sQLitePreparedStatement6 = sQLitePreparedStatement8222222222;
                                                        list = arrayList13;
                                                        sQLiteCursor11 = sQLiteCursor20222222222;
                                                        longSparseArray5 = longSparseArray7;
                                                        String str3222222222 = join3;
                                                        if (!longSparseArray4.isEmpty()) {
                                                        }
                                                        SQLiteDatabase sQLiteDatabase5222222222 = this.database;
                                                        locale = Locale.US;
                                                        sQLiteDatabase5222222222.executeFast(String.format(locale, "DELETE FROM messages_seq WHERE mid IN(%s)", str3222222222)).stepThis().dispose();
                                                        if (!arrayList7.isEmpty()) {
                                                        }
                                                        if (arrayList9 != null) {
                                                        }
                                                        arrayList14 = arrayList9;
                                                        if (arrayList14 != null) {
                                                        }
                                                        arrayList15 = arrayList;
                                                        if (!arrayList10.isEmpty()) {
                                                        }
                                                        getMediaDataController().clearBotKeyboard(null, arrayList15);
                                                        if (longSparseArray5.size() != 0) {
                                                        }
                                                        arrayList16 = arrayList24;
                                                        updateWidgets(arrayList16);
                                                        if (arrayList12 != null) {
                                                        }
                                                        if (list != null) {
                                                        }
                                                        sQLiteCursor12 = sQLiteCursor11;
                                                        sQLitePreparedStatement7 = sQLitePreparedStatement6;
                                                        sQLiteDatabase4 = this.database;
                                                        if (sQLiteDatabase4 != null) {
                                                        }
                                                        if (sQLiteCursor12 != null) {
                                                        }
                                                        if (sQLitePreparedStatement7 != null) {
                                                        }
                                                        return arrayList16;
                                                    }
                                                } else {
                                                    hashMap2 = hashMap;
                                                }
                                                hashMap = hashMap2;
                                                arrayList6 = arrayList10;
                                                j2 = j3;
                                                r13 = 0;
                                                i4 = 5;
                                            } catch (Exception e25) {
                                                e = e25;
                                                arrayList10 = arrayList32;
                                            }
                                        } catch (Exception e26) {
                                            e = e26;
                                            hashMap2 = hashMap;
                                            j3 = j2;
                                            arrayList10 = arrayList6;
                                        }
                                    } catch (Throwable th26) {
                                        th = th26;
                                        sQLiteCursor7 = queryFinalized2;
                                        sQLiteCursor6 = sQLiteCursor7;
                                        sQLitePreparedStatement3 = null;
                                        sQLiteCursor4 = sQLiteCursor6;
                                        sQLiteDatabase2 = this.database;
                                        if (sQLiteDatabase2 != null) {
                                        }
                                        if (sQLiteCursor4 != null) {
                                        }
                                        if (sQLitePreparedStatement3 == null) {
                                        }
                                    }
                                }
                                hashMap2 = hashMap;
                                j3 = j2;
                                arrayList10 = arrayList6;
                                queryFinalized2.dispose();
                                arrayList11 = arrayList31;
                            } catch (Exception e27) {
                                e = e27;
                                th3 = e;
                                sQLitePreparedStatement = null;
                                sQLiteCursor5 = null;
                                sQLitePreparedStatement2 = sQLitePreparedStatement;
                                th4 = th3;
                                sQLiteCursor4 = sQLiteCursor5;
                                checkSQLException(th4);
                                sQLiteDatabase = this.database;
                                if (sQLiteDatabase != null) {
                                }
                                if (sQLiteCursor4 != null) {
                                }
                                if (sQLitePreparedStatement2 != null) {
                                }
                            } catch (Throwable th27) {
                                th = th27;
                                th = th;
                                sQLitePreparedStatement3 = null;
                                sQLiteCursor6 = null;
                                sQLiteCursor4 = sQLiteCursor6;
                                sQLiteDatabase2 = this.database;
                                if (sQLiteDatabase2 != null) {
                                }
                                if (sQLiteCursor4 != null) {
                                }
                                if (sQLitePreparedStatement3 == null) {
                                }
                            }
                        } else {
                            hashMap2 = hashMap;
                            j3 = j2;
                            arrayList10 = arrayList6;
                            arrayList11 = null;
                        }
                        try {
                            this.database.beginTransaction();
                            for (i5 = 0; i5 < 4; i5++) {
                                try {
                                    if (i5 == 0) {
                                        if (j != 0) {
                                            try {
                                                database = getMessagesStorage().getDatabase();
                                                str2 = "UPDATE messages_v2 SET replydata = ? WHERE reply_to_message_id IN(?) AND uid = ?";
                                            } catch (Exception e28) {
                                                e = e28;
                                                th3 = e;
                                                sQLitePreparedStatement = null;
                                                sQLiteCursor5 = null;
                                                sQLitePreparedStatement2 = sQLitePreparedStatement;
                                                th4 = th3;
                                                sQLiteCursor4 = sQLiteCursor5;
                                                checkSQLException(th4);
                                                sQLiteDatabase = this.database;
                                                if (sQLiteDatabase != null) {
                                                }
                                                if (sQLiteCursor4 != null) {
                                                }
                                                if (sQLitePreparedStatement2 != null) {
                                                }
                                            } catch (Throwable th28) {
                                                th = th28;
                                                th = th;
                                                sQLitePreparedStatement3 = null;
                                                sQLiteCursor6 = null;
                                                sQLiteCursor4 = sQLiteCursor6;
                                                sQLiteDatabase2 = this.database;
                                                if (sQLiteDatabase2 != null) {
                                                }
                                                if (sQLiteCursor4 != null) {
                                                }
                                                if (sQLitePreparedStatement3 == null) {
                                                }
                                            }
                                        } else {
                                            database = getMessagesStorage().getDatabase();
                                            str2 = "UPDATE messages_v2 SET replydata = ? WHERE reply_to_message_id IN(?) AND is_channel = 0";
                                        }
                                    } else if (i5 == 1) {
                                        if (j != 0) {
                                            database = getMessagesStorage().getDatabase();
                                            str2 = "UPDATE scheduled_messages_v2 SET replydata = ? WHERE reply_to_message_id IN(?) AND uid = ?";
                                        } else {
                                            database = getMessagesStorage().getDatabase();
                                            str2 = "UPDATE scheduled_messages_v2 SET replydata = ? WHERE reply_to_message_id IN(?)";
                                        }
                                    } else if (i5 == 2) {
                                        database = getMessagesStorage().getDatabase();
                                        str2 = "UPDATE quick_replies_messages SET replydata = ? WHERE reply_to_message_id IN(?)";
                                    } else {
                                        if (j != 0) {
                                            database = getMessagesStorage().getDatabase();
                                            str2 = "UPDATE messages_topics SET replydata = ? WHERE reply_to_message_id IN(?) AND uid = ?";
                                        }
                                    }
                                    TLRPC.TL_messageEmpty tL_messageEmpty = new TLRPC.TL_messageEmpty();
                                    NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(tL_messageEmpty.getObjectSize());
                                    tL_messageEmpty.serializeToStream(nativeByteBuffer);
                                    sQLitePreparedStatement4.requery();
                                    sQLitePreparedStatement4.bindByteBuffer(1, nativeByteBuffer);
                                    sQLitePreparedStatement4.bindString(2, join3);
                                    if (j != 0 && i5 != 2) {
                                        sQLitePreparedStatement4.bindLong(3, j);
                                    }
                                    sQLitePreparedStatement4.step();
                                    sQLitePreparedStatement4.dispose();
                                    this.database.commitTransaction();
                                    nativeByteBuffer.reuse();
                                } catch (Exception e29) {
                                    th6 = e29;
                                    th3 = th6;
                                    sQLitePreparedStatement = sQLitePreparedStatement4;
                                    sQLiteCursor5 = null;
                                    sQLitePreparedStatement2 = sQLitePreparedStatement;
                                    th4 = th3;
                                    sQLiteCursor4 = sQLiteCursor5;
                                    checkSQLException(th4);
                                    sQLiteDatabase = this.database;
                                    if (sQLiteDatabase != null) {
                                    }
                                    if (sQLiteCursor4 != null) {
                                    }
                                    if (sQLitePreparedStatement2 != null) {
                                    }
                                } catch (Throwable th29) {
                                    th = th29;
                                    sQLitePreparedStatement3 = sQLitePreparedStatement4;
                                    sQLiteCursor6 = null;
                                    sQLiteCursor4 = sQLiteCursor6;
                                    sQLiteDatabase2 = this.database;
                                    if (sQLiteDatabase2 != null) {
                                    }
                                    if (sQLiteCursor4 != null) {
                                    }
                                    if (sQLitePreparedStatement3 == null) {
                                    }
                                }
                                sQLitePreparedStatement4 = database.executeFast(str2);
                            }
                            deleteFromDownloadQueue(arrayList5, true);
                            final ArrayList arrayList292222222222 = arrayList4;
                            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda188
                                @Override // java.lang.Runnable
                                public final void run() {
                                    MessagesStorage.this.lambda$markMessagesAsDeletedInternal$204(arrayList292222222222);
                                }
                            });
                            getFileLoader().deleteFiles(arrayList8, 0);
                            i6 = 0;
                            while (i6 < longSparseArray7.size()) {
                                long keyAt3 = longSparseArray7.keyAt(i6);
                                Integer[] numArr3 = (Integer[]) longSparseArray7.valueAt(i6);
                                ArrayList<TopicKey> arrayList34 = arrayList11;
                                SQLiteCursor queryFinalized3 = this.database.queryFinalized("SELECT unread_count, unread_count_i FROM dialogs WHERE did = " + keyAt3, new Object[0]);
                                try {
                                    if (queryFinalized3.next()) {
                                        i18 = queryFinalized3.intValue(0);
                                        i19 = queryFinalized3.intValue(1);
                                    } else {
                                        i18 = 0;
                                        i19 = 0;
                                    }
                                    queryFinalized3.dispose();
                                } catch (Exception e30) {
                                    sQLiteCursor19 = queryFinalized3;
                                    th5 = e30;
                                } catch (Throwable th30) {
                                    sQLiteCursor18 = queryFinalized3;
                                    th = th30;
                                }
                                try {
                                    ArrayList<Long> arrayList35 = arrayList24;
                                    arrayList35.add(Long.valueOf(keyAt3));
                                    arrayList24 = arrayList35;
                                    sQLitePreparedStatement = this.database.executeFast("UPDATE dialogs SET unread_count = ?, unread_count_i = ? WHERE did = ?");
                                    try {
                                        sQLitePreparedStatement.requery();
                                        sQLitePreparedStatement.bindInteger(1, Math.max(0, i18 - numArr3[0].intValue()));
                                        sQLitePreparedStatement.bindInteger(2, Math.max(0, i19 - numArr3[1].intValue()));
                                        sQLitePreparedStatement.bindLong(3, keyAt3);
                                        sQLitePreparedStatement.step();
                                        sQLitePreparedStatement.dispose();
                                        i6++;
                                        arrayList11 = arrayList34;
                                    } catch (Exception e31) {
                                        th3 = e31;
                                        sQLiteCursor5 = null;
                                        sQLitePreparedStatement2 = sQLitePreparedStatement;
                                        th4 = th3;
                                        sQLiteCursor4 = sQLiteCursor5;
                                        checkSQLException(th4);
                                        sQLiteDatabase = this.database;
                                        if (sQLiteDatabase != null) {
                                        }
                                        if (sQLiteCursor4 != null) {
                                        }
                                        if (sQLitePreparedStatement2 != null) {
                                        }
                                    } catch (Throwable th31) {
                                        sQLitePreparedStatement3 = sQLitePreparedStatement;
                                        th = th31;
                                        sQLiteCursor6 = null;
                                        sQLiteCursor4 = sQLiteCursor6;
                                        sQLiteDatabase2 = this.database;
                                        if (sQLiteDatabase2 != null) {
                                        }
                                        if (sQLiteCursor4 != null) {
                                        }
                                        if (sQLitePreparedStatement3 == null) {
                                        }
                                    }
                                } catch (Exception e32) {
                                    th5 = e32;
                                    sQLiteCursor19 = null;
                                    sQLiteCursor8 = sQLiteCursor19;
                                    th3 = th5;
                                    sQLiteCursor2 = sQLiteCursor8;
                                    sQLitePreparedStatement = null;
                                    sQLiteCursor5 = sQLiteCursor2;
                                    sQLitePreparedStatement2 = sQLitePreparedStatement;
                                    th4 = th3;
                                    sQLiteCursor4 = sQLiteCursor5;
                                    checkSQLException(th4);
                                    sQLiteDatabase = this.database;
                                    if (sQLiteDatabase != null) {
                                    }
                                    if (sQLiteCursor4 != null) {
                                    }
                                    if (sQLitePreparedStatement2 != null) {
                                    }
                                } catch (Throwable th32) {
                                    th = th32;
                                    sQLiteCursor18 = null;
                                    sQLiteCursor6 = sQLiteCursor18;
                                    sQLitePreparedStatement3 = null;
                                    sQLiteCursor4 = sQLiteCursor6;
                                    sQLiteDatabase2 = this.database;
                                    if (sQLiteDatabase2 != null) {
                                    }
                                    if (sQLiteCursor4 != null) {
                                    }
                                    if (sQLitePreparedStatement3 == null) {
                                    }
                                }
                            }
                            arrayList12 = arrayList11;
                            if (hashMap2.isEmpty()) {
                                HashSet hashSet = null;
                                arrayList13 = null;
                                for (TopicKey topicKey : hashMap2.keySet()) {
                                    LongSparseArray longSparseArray10 = longSparseArray3;
                                    try {
                                        SQLiteCursor queryFinalized4 = this.database.queryFinalized(String.format(Locale.US, "SELECT unread_count, unread_mentions, total_messages_count FROM topics WHERE did = %d AND topic_id = %d", Long.valueOf(topicKey.dialogId), Long.valueOf(topicKey.topicId)), new Object[0]);
                                        try {
                                            if (queryFinalized4.next()) {
                                                i15 = queryFinalized4.intValue(0);
                                                i16 = queryFinalized4.intValue(1);
                                                i17 = queryFinalized4.intValue(2);
                                            } else {
                                                i15 = 0;
                                                i16 = 0;
                                                i17 = 0;
                                            }
                                            queryFinalized4.dispose();
                                            try {
                                                int[] iArr2 = (int[]) hashMap2.get(topicKey);
                                                max = Math.max(0, i15 - iArr2[0]);
                                                max2 = Math.max(0, i16 - iArr2[1]);
                                                max3 = Math.max(0, i17 - iArr2[2]);
                                                if (BuildVars.DEBUG_PRIVATE_VERSION && max2 > 0) {
                                                    FileLog.d("(markMessagesAsDeletedInternal) new unread mentions " + max2 + " for dialog_id=" + topicKey.dialogId + " topic_id=" + topicKey.topicId);
                                                }
                                                executeFast4 = this.database.executeFast("UPDATE topics SET unread_count = ?, unread_mentions = ?, total_messages_count = ? WHERE did = ? AND topic_id = ?");
                                            } catch (Exception e33) {
                                                th13 = e33;
                                                queryFinalized4 = null;
                                                th3 = th13;
                                                sQLiteCursor2 = queryFinalized4;
                                                sQLitePreparedStatement = null;
                                                sQLiteCursor5 = sQLiteCursor2;
                                                sQLitePreparedStatement2 = sQLitePreparedStatement;
                                                th4 = th3;
                                                sQLiteCursor4 = sQLiteCursor5;
                                                checkSQLException(th4);
                                                sQLiteDatabase = this.database;
                                                if (sQLiteDatabase != null) {
                                                }
                                                if (sQLiteCursor4 != null) {
                                                }
                                                if (sQLitePreparedStatement2 != null) {
                                                }
                                            } catch (Throwable th33) {
                                                th = th33;
                                                queryFinalized4 = null;
                                                sQLiteCursor6 = queryFinalized4;
                                                sQLitePreparedStatement3 = null;
                                                sQLiteCursor4 = sQLiteCursor6;
                                                sQLiteDatabase2 = this.database;
                                                if (sQLiteDatabase2 != null) {
                                                }
                                                if (sQLiteCursor4 != null) {
                                                }
                                                if (sQLitePreparedStatement3 == null) {
                                                }
                                            }
                                            try {
                                                executeFast4.requery();
                                                executeFast4.bindInteger(1, max);
                                                executeFast4.bindInteger(2, max2);
                                                executeFast4.bindLong(3, max3);
                                                executeFast4.bindLong(4, topicKey.dialogId);
                                                executeFast4.bindLong(5, topicKey.topicId);
                                                executeFast4.step();
                                                executeFast4.dispose();
                                                if (max == 0) {
                                                    if (hashSet == null) {
                                                        hashSet = new HashSet();
                                                    }
                                                    hashSet.add(Long.valueOf(topicKey.dialogId));
                                                }
                                                TopicsController.TopicUpdate topicUpdate = new TopicsController.TopicUpdate();
                                                topicUpdate.dialogId = topicKey.dialogId;
                                                topicUpdate.topicId = topicKey.topicId;
                                                topicUpdate.unreadCount = max;
                                                topicUpdate.totalMessagesCount = max3;
                                                topicUpdate.onlyCounters = true;
                                                if (arrayList13 == null) {
                                                    arrayList13 = new ArrayList();
                                                }
                                                arrayList13.add(topicUpdate);
                                                longSparseArray3 = longSparseArray10;
                                            } catch (Exception e34) {
                                                th3 = e34;
                                                sQLitePreparedStatement = executeFast4;
                                                sQLiteCursor5 = null;
                                                sQLitePreparedStatement2 = sQLitePreparedStatement;
                                                th4 = th3;
                                                sQLiteCursor4 = sQLiteCursor5;
                                                checkSQLException(th4);
                                                sQLiteDatabase = this.database;
                                                if (sQLiteDatabase != null) {
                                                }
                                                if (sQLiteCursor4 != null) {
                                                }
                                                if (sQLitePreparedStatement2 != null) {
                                                }
                                            } catch (Throwable th34) {
                                                th = th34;
                                                sQLitePreparedStatement3 = executeFast4;
                                                sQLiteCursor6 = null;
                                                sQLiteCursor4 = sQLiteCursor6;
                                                sQLiteDatabase2 = this.database;
                                                if (sQLiteDatabase2 != null) {
                                                }
                                                if (sQLiteCursor4 != null) {
                                                }
                                                if (sQLitePreparedStatement3 == null) {
                                                }
                                            }
                                        } catch (Exception e35) {
                                            th13 = e35;
                                        } catch (Throwable th35) {
                                            th = th35;
                                        }
                                    } catch (Exception e36) {
                                        e = e36;
                                        th3 = e;
                                        sQLitePreparedStatement = null;
                                        sQLiteCursor5 = null;
                                        sQLitePreparedStatement2 = sQLitePreparedStatement;
                                        th4 = th3;
                                        sQLiteCursor4 = sQLiteCursor5;
                                        checkSQLException(th4);
                                        sQLiteDatabase = this.database;
                                        if (sQLiteDatabase != null) {
                                        }
                                        if (sQLiteCursor4 != null) {
                                        }
                                        if (sQLitePreparedStatement2 != null) {
                                        }
                                    } catch (Throwable th36) {
                                        th = th36;
                                        th = th;
                                        sQLitePreparedStatement3 = null;
                                        sQLiteCursor6 = null;
                                        sQLiteCursor4 = sQLiteCursor6;
                                        sQLiteDatabase2 = this.database;
                                        if (sQLiteDatabase2 != null) {
                                        }
                                        if (sQLiteCursor4 != null) {
                                        }
                                        if (sQLitePreparedStatement3 == null) {
                                        }
                                    }
                                }
                                longSparseArray4 = longSparseArray3;
                                if (hashSet != null) {
                                    Iterator it2 = hashSet.iterator();
                                    while (it2.hasNext()) {
                                        resetForumBadgeIfNeed(((Long) it2.next()).longValue());
                                    }
                                }
                            } else {
                                longSparseArray4 = longSparseArray3;
                                arrayList13 = null;
                            }
                            size = longSparseArray2.size();
                            SQLitePreparedStatement sQLitePreparedStatement82222222222 = null;
                            i7 = 0;
                            SQLiteCursor sQLiteCursor202222222222 = null;
                            while (i7 < size) {
                                LongSparseArray longSparseArray11 = longSparseArray2;
                                try {
                                    keyAt = longSparseArray11.keyAt(i7);
                                    charSequence = charSequence3;
                                    join = TextUtils.join(charSequence, (ArrayList) longSparseArray11.valueAt(i7));
                                    if (DialogObject.isEncryptedDialog(keyAt)) {
                                        i8 = size;
                                        sQLitePreparedStatement6 = sQLitePreparedStatement82222222222;
                                        sQLiteCursor11 = sQLiteCursor202222222222;
                                        longSparseArray2 = longSparseArray11;
                                    } else {
                                        if (DialogObject.isChatDialog(keyAt)) {
                                            i8 = size;
                                            sQLiteCursor11 = sQLiteCursor202222222222;
                                            longSparseArray2 = longSparseArray11;
                                            try {
                                                sQLitePreparedStatement6 = sQLitePreparedStatement82222222222;
                                            } catch (Exception e37) {
                                                e = e37;
                                                sQLitePreparedStatement6 = sQLitePreparedStatement82222222222;
                                                th10 = e;
                                                sQLiteCursor14 = sQLiteCursor11;
                                                th3 = th10;
                                                sQLitePreparedStatement = sQLitePreparedStatement6;
                                                sQLiteCursor5 = sQLiteCursor14;
                                                sQLitePreparedStatement2 = sQLitePreparedStatement;
                                                th4 = th3;
                                                sQLiteCursor4 = sQLiteCursor5;
                                                checkSQLException(th4);
                                                sQLiteDatabase = this.database;
                                                if (sQLiteDatabase != null) {
                                                }
                                                if (sQLiteCursor4 != null) {
                                                }
                                                if (sQLitePreparedStatement2 != null) {
                                                }
                                            } catch (Throwable th37) {
                                                th9 = th37;
                                                sQLitePreparedStatement6 = sQLitePreparedStatement82222222222;
                                                th = th9;
                                                sQLiteCursor13 = sQLiteCursor11;
                                                sQLiteCursor6 = sQLiteCursor13;
                                                sQLitePreparedStatement3 = sQLitePreparedStatement6;
                                                sQLiteCursor4 = sQLiteCursor6;
                                                sQLiteDatabase2 = this.database;
                                                if (sQLiteDatabase2 != null) {
                                                }
                                                if (sQLiteCursor4 != null) {
                                                }
                                                if (sQLitePreparedStatement3 == null) {
                                                }
                                            }
                                            try {
                                            } catch (Exception e38) {
                                                e = e38;
                                                th10 = e;
                                                sQLiteCursor14 = sQLiteCursor11;
                                                th3 = th10;
                                                sQLitePreparedStatement = sQLitePreparedStatement6;
                                                sQLiteCursor5 = sQLiteCursor14;
                                                sQLitePreparedStatement2 = sQLitePreparedStatement;
                                                th4 = th3;
                                                sQLiteCursor4 = sQLiteCursor5;
                                                checkSQLException(th4);
                                                sQLiteDatabase = this.database;
                                                if (sQLiteDatabase != null) {
                                                }
                                                if (sQLiteCursor4 != null) {
                                                }
                                                if (sQLitePreparedStatement2 != null) {
                                                }
                                            } catch (Throwable th38) {
                                                th = th38;
                                                th = th;
                                                sQLiteCursor13 = sQLiteCursor11;
                                                sQLiteCursor6 = sQLiteCursor13;
                                                sQLitePreparedStatement3 = sQLitePreparedStatement6;
                                                sQLiteCursor4 = sQLiteCursor6;
                                                sQLiteDatabase2 = this.database;
                                                if (sQLiteDatabase2 != null) {
                                                }
                                                if (sQLiteCursor4 != null) {
                                                }
                                                if (sQLitePreparedStatement3 == null) {
                                                }
                                            }
                                            try {
                                                executeFast3 = this.database.executeFast(String.format(Locale.US, "UPDATE chat_settings_v2 SET pinned = 0 WHERE uid = %d AND pinned IN (%s)", Long.valueOf(-keyAt), join));
                                            } catch (Exception e39) {
                                                e = e39;
                                                th10 = e;
                                                sQLiteCursor14 = sQLiteCursor11;
                                                th3 = th10;
                                                sQLitePreparedStatement = sQLitePreparedStatement6;
                                                sQLiteCursor5 = sQLiteCursor14;
                                                sQLitePreparedStatement2 = sQLitePreparedStatement;
                                                th4 = th3;
                                                sQLiteCursor4 = sQLiteCursor5;
                                                checkSQLException(th4);
                                                sQLiteDatabase = this.database;
                                                if (sQLiteDatabase != null) {
                                                }
                                                if (sQLiteCursor4 != null) {
                                                }
                                                if (sQLitePreparedStatement2 != null) {
                                                }
                                            } catch (Throwable th39) {
                                                th9 = th39;
                                                th = th9;
                                                sQLiteCursor13 = sQLiteCursor11;
                                                sQLiteCursor6 = sQLiteCursor13;
                                                sQLitePreparedStatement3 = sQLitePreparedStatement6;
                                                sQLiteCursor4 = sQLiteCursor6;
                                                sQLiteDatabase2 = this.database;
                                                if (sQLiteDatabase2 != null) {
                                                }
                                                if (sQLiteCursor4 != null) {
                                                }
                                                if (sQLitePreparedStatement3 == null) {
                                                }
                                            }
                                        } else {
                                            i8 = size;
                                            sQLitePreparedStatement6 = sQLitePreparedStatement82222222222;
                                            sQLiteCursor11 = sQLiteCursor202222222222;
                                            longSparseArray2 = longSparseArray11;
                                            try {
                                                executeFast3 = this.database.executeFast(String.format(Locale.US, "UPDATE user_settings SET pinned = 0 WHERE uid = %d AND pinned IN (%s)", Long.valueOf(keyAt), join));
                                            } catch (Exception e40) {
                                                e = e40;
                                                th10 = e;
                                                sQLiteCursor14 = sQLiteCursor11;
                                                th3 = th10;
                                                sQLitePreparedStatement = sQLitePreparedStatement6;
                                                sQLiteCursor5 = sQLiteCursor14;
                                                sQLitePreparedStatement2 = sQLitePreparedStatement;
                                                th4 = th3;
                                                sQLiteCursor4 = sQLiteCursor5;
                                                checkSQLException(th4);
                                                sQLiteDatabase = this.database;
                                                if (sQLiteDatabase != null) {
                                                }
                                                if (sQLiteCursor4 != null) {
                                                }
                                                if (sQLitePreparedStatement2 != null) {
                                                }
                                            } catch (Throwable th40) {
                                                th = th40;
                                                th = th;
                                                sQLiteCursor13 = sQLiteCursor11;
                                                sQLiteCursor6 = sQLiteCursor13;
                                                sQLitePreparedStatement3 = sQLitePreparedStatement6;
                                                sQLiteCursor4 = sQLiteCursor6;
                                                sQLiteDatabase2 = this.database;
                                                if (sQLiteDatabase2 != null) {
                                                }
                                                if (sQLiteCursor4 != null) {
                                                }
                                                if (sQLitePreparedStatement3 == null) {
                                                }
                                            }
                                        }
                                        executeFast3.stepThis().dispose();
                                    }
                                    sQLiteDatabase3 = this.database;
                                    locale2 = Locale.US;
                                } catch (Exception e41) {
                                    e = e41;
                                    sQLitePreparedStatement6 = sQLitePreparedStatement82222222222;
                                    sQLiteCursor11 = sQLiteCursor202222222222;
                                } catch (Throwable th41) {
                                    th9 = th41;
                                    sQLitePreparedStatement6 = sQLitePreparedStatement82222222222;
                                    sQLiteCursor11 = sQLiteCursor202222222222;
                                }
                                try {
                                    sQLiteDatabase3.executeFast(String.format(locale2, "DELETE FROM chat_pinned_v2 WHERE uid = %d AND mid IN(%s)", Long.valueOf(keyAt), join)).stepThis().dispose();
                                    SQLiteCursor queryFinalized5 = this.database.queryFinalized("SELECT changes()", new Object[0]);
                                    try {
                                        int intValue4 = queryFinalized5.next() ? queryFinalized5.intValue(0) : 0;
                                        queryFinalized5.dispose();
                                        if (intValue4 > 0) {
                                            try {
                                            } catch (Exception e42) {
                                                th10 = e42;
                                            } catch (Throwable th42) {
                                                th = th42;
                                            }
                                            try {
                                                queryFinalized = this.database.queryFinalized(String.format(locale2, "SELECT count FROM chat_pinned_count WHERE uid = %d", Long.valueOf(keyAt)), new Object[0]);
                                                if (queryFinalized.next()) {
                                                    int intValue5 = queryFinalized.intValue(0);
                                                    sQLitePreparedStatement2 = this.database.executeFast("UPDATE chat_pinned_count SET count = ? WHERE uid = ?");
                                                    try {
                                                        sQLitePreparedStatement2.requery();
                                                        sQLitePreparedStatement2.bindInteger(1, Math.max(0, intValue5 - intValue4));
                                                        sQLitePreparedStatement2.bindLong(2, keyAt);
                                                        sQLitePreparedStatement2.step();
                                                        sQLitePreparedStatement2.dispose();
                                                    } catch (Exception e43) {
                                                        e2 = e43;
                                                        th3 = e2;
                                                        sQLiteCursor5 = queryFinalized;
                                                        sQLitePreparedStatement = sQLitePreparedStatement2;
                                                        sQLitePreparedStatement2 = sQLitePreparedStatement;
                                                        th4 = th3;
                                                        sQLiteCursor4 = sQLiteCursor5;
                                                        checkSQLException(th4);
                                                        sQLiteDatabase = this.database;
                                                        if (sQLiteDatabase != null) {
                                                        }
                                                        if (sQLiteCursor4 != null) {
                                                        }
                                                        if (sQLitePreparedStatement2 != null) {
                                                        }
                                                    } catch (Throwable th43) {
                                                        sQLiteCursor6 = queryFinalized;
                                                        th = th43;
                                                        sQLitePreparedStatement3 = sQLitePreparedStatement2;
                                                    }
                                                } else {
                                                    sQLitePreparedStatement2 = sQLitePreparedStatement6;
                                                }
                                            } catch (Exception e44) {
                                                th10 = e44;
                                                sQLiteCursor14 = null;
                                                th3 = th10;
                                                sQLitePreparedStatement = sQLitePreparedStatement6;
                                                sQLiteCursor5 = sQLiteCursor14;
                                                sQLitePreparedStatement2 = sQLitePreparedStatement;
                                                th4 = th3;
                                                sQLiteCursor4 = sQLiteCursor5;
                                                checkSQLException(th4);
                                                sQLiteDatabase = this.database;
                                                if (sQLiteDatabase != null) {
                                                }
                                                if (sQLiteCursor4 != null) {
                                                }
                                                if (sQLitePreparedStatement2 != null) {
                                                }
                                            } catch (Throwable th44) {
                                                th = th44;
                                                sQLiteCursor13 = null;
                                                sQLiteCursor6 = sQLiteCursor13;
                                                sQLitePreparedStatement3 = sQLitePreparedStatement6;
                                                sQLiteCursor4 = sQLiteCursor6;
                                                sQLiteDatabase2 = this.database;
                                                if (sQLiteDatabase2 != null) {
                                                }
                                                if (sQLiteCursor4 != null) {
                                                }
                                                if (sQLitePreparedStatement3 == null) {
                                                }
                                            }
                                            try {
                                                queryFinalized.dispose();
                                            } catch (Exception e45) {
                                                e2 = e45;
                                                th3 = e2;
                                                sQLiteCursor5 = queryFinalized;
                                                sQLitePreparedStatement = sQLitePreparedStatement2;
                                                sQLitePreparedStatement2 = sQLitePreparedStatement;
                                                th4 = th3;
                                                sQLiteCursor4 = sQLiteCursor5;
                                                checkSQLException(th4);
                                                sQLiteDatabase = this.database;
                                                if (sQLiteDatabase != null) {
                                                }
                                                if (sQLiteCursor4 != null) {
                                                }
                                                if (sQLitePreparedStatement2 != null) {
                                                }
                                            } catch (Throwable th45) {
                                                sQLiteCursor6 = queryFinalized;
                                                sQLitePreparedStatement3 = sQLitePreparedStatement2;
                                                th = th45;
                                            }
                                        } else {
                                            sQLitePreparedStatement2 = sQLitePreparedStatement6;
                                        }
                                        try {
                                            try {
                                                try {
                                                    this.database.executeFast(String.format(locale2, "DELETE FROM messages_v2 WHERE mid IN(%s) AND uid = %d", join3, Long.valueOf(keyAt))).stepThis().dispose();
                                                    try {
                                                        this.database.executeFast(String.format(locale2, "DELETE FROM messages_topics WHERE mid IN(%s) AND uid = %d", join3, Long.valueOf(keyAt))).stepThis().dispose();
                                                        try {
                                                            this.database.executeFast(String.format(locale2, "DELETE FROM polls_v2 WHERE mid IN(%s) AND uid = %d", join3, Long.valueOf(keyAt))).stepThis().dispose();
                                                            try {
                                                                this.database.executeFast(String.format(locale2, "DELETE FROM bot_keyboard WHERE mid IN(%s) AND uid = %d", join3, Long.valueOf(keyAt))).stepThis().dispose();
                                                                try {
                                                                    this.database.executeFast(String.format(locale2, "DELETE FROM bot_keyboard_topics WHERE mid IN(%s) AND uid = %d", join3, Long.valueOf(keyAt))).stepThis().dispose();
                                                                } catch (Throwable th46) {
                                                                    th = th46;
                                                                }
                                                            } catch (Throwable th47) {
                                                                th = th47;
                                                            }
                                                        } catch (Throwable th48) {
                                                            th = th48;
                                                        }
                                                    } catch (Throwable th49) {
                                                        th = th49;
                                                    }
                                                } catch (Throwable th50) {
                                                    th = th50;
                                                }
                                            } catch (Throwable th51) {
                                                th = th51;
                                            }
                                        } catch (Exception e46) {
                                            th4 = e46;
                                            sQLiteCursor4 = null;
                                        }
                                    } catch (Exception e47) {
                                        sQLiteCursor14 = queryFinalized5;
                                        th10 = e47;
                                    } catch (Throwable th52) {
                                        sQLiteCursor13 = queryFinalized5;
                                        th = th52;
                                    }
                                } catch (Exception e48) {
                                    e = e48;
                                    th10 = e;
                                    sQLiteCursor14 = sQLiteCursor11;
                                    th3 = th10;
                                    sQLitePreparedStatement = sQLitePreparedStatement6;
                                    sQLiteCursor5 = sQLiteCursor14;
                                    sQLitePreparedStatement2 = sQLitePreparedStatement;
                                    th4 = th3;
                                    sQLiteCursor4 = sQLiteCursor5;
                                    checkSQLException(th4);
                                    sQLiteDatabase = this.database;
                                    if (sQLiteDatabase != null) {
                                    }
                                    if (sQLiteCursor4 != null) {
                                    }
                                    if (sQLitePreparedStatement2 != null) {
                                    }
                                } catch (Throwable th53) {
                                    th = th53;
                                    th = th;
                                    sQLiteCursor13 = sQLiteCursor11;
                                    sQLiteCursor6 = sQLiteCursor13;
                                    sQLitePreparedStatement3 = sQLitePreparedStatement6;
                                    sQLiteCursor4 = sQLiteCursor6;
                                    sQLiteDatabase2 = this.database;
                                    if (sQLiteDatabase2 != null) {
                                    }
                                    if (sQLiteCursor4 != null) {
                                    }
                                    if (sQLitePreparedStatement3 == null) {
                                    }
                                }
                                try {
                                    try {
                                        try {
                                            try {
                                                if (arrayList7.isEmpty()) {
                                                    try {
                                                        int i21 = 0;
                                                        sQLiteCursor9 = this.database.queryFinalized(String.format(locale2, "SELECT uid, type FROM media_v4 WHERE mid IN(%s) AND uid = %d", join3, Long.valueOf(keyAt)), new Object[0]);
                                                        SparseArray sparseArray = null;
                                                        while (sQLiteCursor9.next()) {
                                                            try {
                                                                long longValue4 = sQLiteCursor9.longValue(i21);
                                                                int intValue6 = sQLiteCursor9.intValue(1);
                                                                if (sparseArray == null) {
                                                                    sparseArray = new SparseArray();
                                                                }
                                                                LongSparseArray longSparseArray12 = (LongSparseArray) sparseArray.get(intValue6);
                                                                if (longSparseArray12 == null) {
                                                                    longSparseArray12 = new LongSparseArray();
                                                                    num2 = 0;
                                                                    sparseArray.put(intValue6, longSparseArray12);
                                                                } else {
                                                                    num2 = (Integer) longSparseArray12.get(longValue4);
                                                                }
                                                                if (num2 == null) {
                                                                    num2 = 0;
                                                                }
                                                                longSparseArray12.put(longValue4, Integer.valueOf(num2.intValue() + 1));
                                                                i21 = 0;
                                                            } catch (Exception e49) {
                                                                e3 = e49;
                                                                th8 = e3;
                                                                sQLiteCursor4 = sQLiteCursor9;
                                                                th4 = th8;
                                                                checkSQLException(th4);
                                                                sQLiteDatabase = this.database;
                                                                if (sQLiteDatabase != null) {
                                                                }
                                                                if (sQLiteCursor4 != null) {
                                                                }
                                                                if (sQLitePreparedStatement2 != null) {
                                                                }
                                                            } catch (Throwable th54) {
                                                                th7 = th54;
                                                                sQLiteCursor10 = sQLiteCursor9;
                                                                sQLitePreparedStatement5 = sQLitePreparedStatement2;
                                                                sQLiteCursor4 = sQLiteCursor10;
                                                                sQLitePreparedStatement3 = sQLitePreparedStatement5;
                                                                th = th7;
                                                                sQLiteDatabase2 = this.database;
                                                                if (sQLiteDatabase2 != null) {
                                                                }
                                                                if (sQLiteCursor4 != null) {
                                                                }
                                                                if (sQLitePreparedStatement3 == null) {
                                                                }
                                                            }
                                                        }
                                                        sQLiteCursor9.dispose();
                                                        if (sparseArray != null) {
                                                            try {
                                                                sQLitePreparedStatement5 = this.database.executeFast("REPLACE INTO media_counts_v2 VALUES(?, ?, ?, ?)");
                                                            } catch (Exception e50) {
                                                                th8 = e50;
                                                            } catch (Throwable th55) {
                                                                th7 = th55;
                                                                sQLitePreparedStatement5 = sQLitePreparedStatement2;
                                                            }
                                                            try {
                                                                int size3 = sparseArray.size();
                                                                sQLiteCursor15 = null;
                                                                int i22 = 0;
                                                                while (i22 < size3) {
                                                                    try {
                                                                        int keyAt4 = sparseArray.keyAt(i22);
                                                                        LongSparseArray longSparseArray13 = (LongSparseArray) sparseArray.valueAt(i22);
                                                                        SparseArray sparseArray2 = sparseArray;
                                                                        int size4 = longSparseArray13.size();
                                                                        int i23 = size3;
                                                                        int i24 = 0;
                                                                        while (i24 < size4) {
                                                                            int i25 = size4;
                                                                            int i26 = i7;
                                                                            try {
                                                                                keyAt2 = longSparseArray13.keyAt(i24);
                                                                                sQLiteCursor17 = sQLiteCursor15;
                                                                            } catch (Exception e51) {
                                                                                e = e51;
                                                                                sQLiteCursor17 = sQLiteCursor15;
                                                                            } catch (Throwable th56) {
                                                                                th = th56;
                                                                                sQLiteCursor17 = sQLiteCursor15;
                                                                            }
                                                                            try {
                                                                                CharSequence charSequence4 = charSequence;
                                                                                ArrayList arrayList36 = arrayList13;
                                                                                LongSparseArray longSparseArray14 = longSparseArray7;
                                                                                String str4 = join3;
                                                                                try {
                                                                                    sQLiteCursor15 = this.database.queryFinalized(String.format(Locale.US, "SELECT count, old FROM media_counts_v2 WHERE uid = %d AND type = %d LIMIT 1", Long.valueOf(keyAt2), Integer.valueOf(keyAt4)), new Object[0]);
                                                                                    if (sQLiteCursor15.next()) {
                                                                                        i13 = sQLiteCursor15.intValue(0);
                                                                                        i14 = sQLiteCursor15.intValue(1);
                                                                                    } else {
                                                                                        i13 = -1;
                                                                                        i14 = 0;
                                                                                    }
                                                                                    sQLiteCursor15.dispose();
                                                                                    if (i13 != -1) {
                                                                                        sQLitePreparedStatement5.requery();
                                                                                        int max4 = Math.max(0, i13 - ((Integer) longSparseArray13.valueAt(i24)).intValue());
                                                                                        sQLitePreparedStatement5.bindLong(1, keyAt2);
                                                                                        sQLitePreparedStatement5.bindInteger(2, keyAt4);
                                                                                        sQLitePreparedStatement5.bindInteger(3, max4);
                                                                                        sQLitePreparedStatement5.bindInteger(4, i14);
                                                                                        sQLitePreparedStatement5.step();
                                                                                    }
                                                                                    i24++;
                                                                                    i7 = i26;
                                                                                    size4 = i25;
                                                                                    charSequence = charSequence4;
                                                                                    arrayList13 = arrayList36;
                                                                                    longSparseArray7 = longSparseArray14;
                                                                                    join3 = str4;
                                                                                } catch (Exception e52) {
                                                                                    th12 = e52;
                                                                                    sQLiteCursor15 = sQLiteCursor17;
                                                                                    sQLitePreparedStatement2 = sQLitePreparedStatement5;
                                                                                    th4 = th12;
                                                                                    sQLiteCursor4 = sQLiteCursor15;
                                                                                    checkSQLException(th4);
                                                                                    sQLiteDatabase = this.database;
                                                                                    if (sQLiteDatabase != null) {
                                                                                    }
                                                                                    if (sQLiteCursor4 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement2 != null) {
                                                                                    }
                                                                                } catch (Throwable th57) {
                                                                                    th11 = th57;
                                                                                    sQLiteCursor15 = sQLiteCursor17;
                                                                                    sQLitePreparedStatement3 = sQLitePreparedStatement5;
                                                                                    th = th11;
                                                                                    sQLiteCursor4 = sQLiteCursor15;
                                                                                    sQLiteDatabase2 = this.database;
                                                                                    if (sQLiteDatabase2 != null) {
                                                                                    }
                                                                                    if (sQLiteCursor4 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement3 == null) {
                                                                                    }
                                                                                }
                                                                            } catch (Exception e53) {
                                                                                e = e53;
                                                                                th8 = e;
                                                                                sQLitePreparedStatement2 = sQLitePreparedStatement5;
                                                                                sQLiteCursor9 = sQLiteCursor17;
                                                                                sQLiteCursor4 = sQLiteCursor9;
                                                                                th4 = th8;
                                                                                checkSQLException(th4);
                                                                                sQLiteDatabase = this.database;
                                                                                if (sQLiteDatabase != null) {
                                                                                }
                                                                                if (sQLiteCursor4 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement2 != null) {
                                                                                }
                                                                            } catch (Throwable th58) {
                                                                                th = th58;
                                                                                th7 = th;
                                                                                sQLiteCursor10 = sQLiteCursor17;
                                                                                sQLiteCursor4 = sQLiteCursor10;
                                                                                sQLitePreparedStatement3 = sQLitePreparedStatement5;
                                                                                th = th7;
                                                                                sQLiteDatabase2 = this.database;
                                                                                if (sQLiteDatabase2 != null) {
                                                                                }
                                                                                if (sQLiteCursor4 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement3 == null) {
                                                                                }
                                                                            }
                                                                        }
                                                                        i22++;
                                                                        sparseArray = sparseArray2;
                                                                        size3 = i23;
                                                                    } catch (Exception e54) {
                                                                        th8 = e54;
                                                                        sQLitePreparedStatement2 = sQLitePreparedStatement5;
                                                                        sQLiteCursor9 = sQLiteCursor15;
                                                                        sQLiteCursor4 = sQLiteCursor9;
                                                                        th4 = th8;
                                                                        checkSQLException(th4);
                                                                        sQLiteDatabase = this.database;
                                                                        if (sQLiteDatabase != null) {
                                                                        }
                                                                        if (sQLiteCursor4 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement2 != null) {
                                                                        }
                                                                    } catch (Throwable th59) {
                                                                        th7 = th59;
                                                                        sQLiteCursor10 = sQLiteCursor15;
                                                                    }
                                                                }
                                                                i9 = i7;
                                                                arrayList17 = arrayList13;
                                                                longSparseArray6 = longSparseArray7;
                                                                str = join3;
                                                                charSequence2 = charSequence;
                                                                sQLitePreparedStatement5.dispose();
                                                                sQLitePreparedStatement2 = null;
                                                                if (arrayList10.isEmpty()) {
                                                                    j6 = keyAt;
                                                                    sQLiteCursor202222222222 = sQLiteCursor15;
                                                                    sQLitePreparedStatement82222222222 = sQLitePreparedStatement2;
                                                                } else {
                                                                    SQLiteDatabase sQLiteDatabase6 = this.database;
                                                                    Locale locale3 = Locale.US;
                                                                    Long valueOf = Long.valueOf(keyAt);
                                                                    try {
                                                                        objArr = new Object[2];
                                                                        i10 = 0;
                                                                    } catch (Exception e55) {
                                                                        th12 = e55;
                                                                    } catch (Throwable th60) {
                                                                        th11 = th60;
                                                                    }
                                                                    try {
                                                                        objArr[0] = str;
                                                                        objArr[1] = valueOf;
                                                                        SQLiteCursor queryFinalized6 = sQLiteDatabase6.queryFinalized(String.format(locale3, "SELECT uid, topic_id, type FROM media_topics WHERE mid IN(%s) AND uid = %d", objArr), new Object[0]);
                                                                        SparseArray sparseArray3 = null;
                                                                        while (queryFinalized6.next()) {
                                                                            long longValue5 = queryFinalized6.longValue(i10);
                                                                            int intValue7 = queryFinalized6.intValue(1);
                                                                            int intValue8 = queryFinalized6.intValue(2);
                                                                            TopicKey of2 = TopicKey.of(longValue5, intValue7);
                                                                            if (sparseArray3 == null) {
                                                                                sparseArray3 = new SparseArray();
                                                                            }
                                                                            HashMap hashMap4 = (HashMap) sparseArray3.get(intValue8);
                                                                            if (hashMap4 == null) {
                                                                                hashMap4 = new HashMap();
                                                                                num = 0;
                                                                                sparseArray3.put(intValue8, hashMap4);
                                                                            } else {
                                                                                num = (Integer) hashMap4.get(of2);
                                                                            }
                                                                            if (num == null) {
                                                                                num = 0;
                                                                            }
                                                                            hashMap4.put(of2, Integer.valueOf(num.intValue() + 1));
                                                                            i10 = 0;
                                                                        }
                                                                        queryFinalized6.dispose();
                                                                        if (sparseArray3 != null) {
                                                                            sQLitePreparedStatement5 = this.database.executeFast("REPLACE INTO media_counts_topics VALUES(?, ?, ?, ?, ?)");
                                                                            int size5 = sparseArray3.size();
                                                                            SQLiteCursor sQLiteCursor21 = null;
                                                                            int i27 = 0;
                                                                            while (i27 < size5) {
                                                                                try {
                                                                                    int keyAt5 = sparseArray3.keyAt(i27);
                                                                                    HashMap hashMap5 = (HashMap) sparseArray3.valueAt(i27);
                                                                                    Iterator it3 = hashMap5.keySet().iterator();
                                                                                    while (it3.hasNext()) {
                                                                                        try {
                                                                                            TopicKey topicKey2 = (TopicKey) it3.next();
                                                                                            SparseArray sparseArray4 = sparseArray3;
                                                                                            int i28 = size5;
                                                                                            sQLiteCursor16 = sQLiteCursor21;
                                                                                            try {
                                                                                                j7 = keyAt;
                                                                                                it = it3;
                                                                                            } catch (Exception e56) {
                                                                                                e = e56;
                                                                                                th8 = e;
                                                                                                sQLitePreparedStatement2 = sQLitePreparedStatement5;
                                                                                                sQLiteCursor9 = sQLiteCursor16;
                                                                                                sQLiteCursor4 = sQLiteCursor9;
                                                                                                th4 = th8;
                                                                                                checkSQLException(th4);
                                                                                                sQLiteDatabase = this.database;
                                                                                                if (sQLiteDatabase != null) {
                                                                                                }
                                                                                                if (sQLiteCursor4 != null) {
                                                                                                }
                                                                                                if (sQLitePreparedStatement2 != null) {
                                                                                                }
                                                                                            } catch (Throwable th61) {
                                                                                                th = th61;
                                                                                                th7 = th;
                                                                                                sQLiteCursor10 = sQLiteCursor16;
                                                                                                sQLiteCursor4 = sQLiteCursor10;
                                                                                                sQLitePreparedStatement3 = sQLitePreparedStatement5;
                                                                                                th = th7;
                                                                                                sQLiteDatabase2 = this.database;
                                                                                                if (sQLiteDatabase2 != null) {
                                                                                                }
                                                                                                if (sQLiteCursor4 != null) {
                                                                                                }
                                                                                                if (sQLitePreparedStatement3 == null) {
                                                                                                }
                                                                                            }
                                                                                            try {
                                                                                                sQLiteCursor21 = this.database.queryFinalized(String.format(Locale.US, "SELECT count, old FROM media_counts_topics WHERE uid = %d AND topic_id = %d AND type = %d LIMIT 1", Long.valueOf(topicKey2.dialogId), Long.valueOf(topicKey2.topicId), Integer.valueOf(keyAt5)), new Object[0]);
                                                                                                if (sQLiteCursor21.next()) {
                                                                                                    i12 = sQLiteCursor21.intValue(0);
                                                                                                    i11 = sQLiteCursor21.intValue(1);
                                                                                                } else {
                                                                                                    i11 = 0;
                                                                                                    i12 = -1;
                                                                                                }
                                                                                                sQLiteCursor21.dispose();
                                                                                                if (i12 != -1) {
                                                                                                    sQLitePreparedStatement5.requery();
                                                                                                    int max5 = Math.max(0, i12 - ((Integer) hashMap5.get(topicKey2)).intValue());
                                                                                                    sQLitePreparedStatement5.bindLong(1, topicKey2.dialogId);
                                                                                                    sQLitePreparedStatement5.bindLong(2, topicKey2.topicId);
                                                                                                    sQLitePreparedStatement5.bindInteger(3, keyAt5);
                                                                                                    sQLitePreparedStatement5.bindInteger(4, max5);
                                                                                                    sQLitePreparedStatement5.bindInteger(5, i11);
                                                                                                    sQLitePreparedStatement5.step();
                                                                                                }
                                                                                                sparseArray3 = sparseArray4;
                                                                                                size5 = i28;
                                                                                                it3 = it;
                                                                                                keyAt = j7;
                                                                                            } catch (Exception e57) {
                                                                                                th12 = e57;
                                                                                                sQLiteCursor15 = sQLiteCursor16;
                                                                                                sQLitePreparedStatement2 = sQLitePreparedStatement5;
                                                                                                th4 = th12;
                                                                                                sQLiteCursor4 = sQLiteCursor15;
                                                                                                checkSQLException(th4);
                                                                                                sQLiteDatabase = this.database;
                                                                                                if (sQLiteDatabase != null) {
                                                                                                }
                                                                                                if (sQLiteCursor4 != null) {
                                                                                                }
                                                                                                if (sQLitePreparedStatement2 != null) {
                                                                                                }
                                                                                            } catch (Throwable th62) {
                                                                                                th11 = th62;
                                                                                                sQLiteCursor15 = sQLiteCursor16;
                                                                                                sQLitePreparedStatement3 = sQLitePreparedStatement5;
                                                                                                th = th11;
                                                                                                sQLiteCursor4 = sQLiteCursor15;
                                                                                                sQLiteDatabase2 = this.database;
                                                                                                if (sQLiteDatabase2 != null) {
                                                                                                }
                                                                                                if (sQLiteCursor4 != null) {
                                                                                                }
                                                                                                if (sQLitePreparedStatement3 == null) {
                                                                                                }
                                                                                            }
                                                                                        } catch (Exception e58) {
                                                                                            e = e58;
                                                                                            sQLiteCursor16 = sQLiteCursor21;
                                                                                        } catch (Throwable th63) {
                                                                                            th = th63;
                                                                                            sQLiteCursor16 = sQLiteCursor21;
                                                                                        }
                                                                                    }
                                                                                    i27++;
                                                                                    sparseArray3 = sparseArray3;
                                                                                    size5 = size5;
                                                                                    keyAt = keyAt;
                                                                                } catch (Exception e59) {
                                                                                    th8 = e59;
                                                                                    sQLitePreparedStatement2 = sQLitePreparedStatement5;
                                                                                    sQLiteCursor9 = sQLiteCursor21;
                                                                                } catch (Throwable th64) {
                                                                                    th7 = th64;
                                                                                    sQLiteCursor10 = sQLiteCursor21;
                                                                                }
                                                                            }
                                                                            j6 = keyAt;
                                                                            sQLitePreparedStatement5.dispose();
                                                                            sQLiteCursor202222222222 = sQLiteCursor21;
                                                                            sQLitePreparedStatement82222222222 = null;
                                                                        } else {
                                                                            j6 = keyAt;
                                                                            sQLitePreparedStatement82222222222 = sQLitePreparedStatement2;
                                                                            sQLiteCursor202222222222 = null;
                                                                        }
                                                                    } catch (Exception e60) {
                                                                        th12 = e60;
                                                                        sQLitePreparedStatement5 = sQLitePreparedStatement2;
                                                                        sQLitePreparedStatement2 = sQLitePreparedStatement5;
                                                                        th4 = th12;
                                                                        sQLiteCursor4 = sQLiteCursor15;
                                                                        checkSQLException(th4);
                                                                        sQLiteDatabase = this.database;
                                                                        if (sQLiteDatabase != null) {
                                                                        }
                                                                        if (sQLiteCursor4 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement2 != null) {
                                                                        }
                                                                    } catch (Throwable th65) {
                                                                        th11 = th65;
                                                                        sQLitePreparedStatement5 = sQLitePreparedStatement2;
                                                                        sQLitePreparedStatement3 = sQLitePreparedStatement5;
                                                                        th = th11;
                                                                        sQLiteCursor4 = sQLiteCursor15;
                                                                        sQLiteDatabase2 = this.database;
                                                                        if (sQLiteDatabase2 != null) {
                                                                        }
                                                                        if (sQLiteCursor4 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement3 == null) {
                                                                        }
                                                                    }
                                                                }
                                                                SQLiteDatabase sQLiteDatabase7 = this.database;
                                                                Locale locale4 = Locale.US;
                                                                sQLiteDatabase7.executeFast(String.format(locale4, "DELETE FROM media_v4 WHERE mid IN(%s) AND uid = %d", str, Long.valueOf(j6))).stepThis().dispose();
                                                                this.database.executeFast(String.format(locale4, "DELETE FROM media_topics WHERE mid IN(%s) AND uid = %d", str, Long.valueOf(j6))).stepThis().dispose();
                                                                i7 = i9 + 1;
                                                                size = i8;
                                                                charSequence3 = charSequence2;
                                                                arrayList13 = arrayList17;
                                                                longSparseArray7 = longSparseArray6;
                                                                join3 = str;
                                                            } catch (Exception e61) {
                                                                th8 = e61;
                                                                sQLitePreparedStatement2 = sQLitePreparedStatement5;
                                                                sQLiteCursor9 = null;
                                                                sQLiteCursor4 = sQLiteCursor9;
                                                                th4 = th8;
                                                                checkSQLException(th4);
                                                                sQLiteDatabase = this.database;
                                                                if (sQLiteDatabase != null) {
                                                                }
                                                                if (sQLiteCursor4 != null) {
                                                                }
                                                                if (sQLitePreparedStatement2 != null) {
                                                                }
                                                            } catch (Throwable th66) {
                                                                th7 = th66;
                                                                sQLiteCursor10 = null;
                                                                sQLiteCursor4 = sQLiteCursor10;
                                                                sQLitePreparedStatement3 = sQLitePreparedStatement5;
                                                                th = th7;
                                                                sQLiteDatabase2 = this.database;
                                                                if (sQLiteDatabase2 != null) {
                                                                }
                                                                if (sQLiteCursor4 != null) {
                                                                }
                                                                if (sQLitePreparedStatement3 == null) {
                                                                }
                                                            }
                                                        }
                                                    } catch (Throwable th67) {
                                                        th = th67;
                                                        th = th;
                                                        sQLiteCursor3 = null;
                                                        sQLiteCursor4 = sQLiteCursor3;
                                                        sQLitePreparedStatement3 = sQLitePreparedStatement2;
                                                        sQLiteDatabase2 = this.database;
                                                        if (sQLiteDatabase2 != null) {
                                                        }
                                                        if (sQLiteCursor4 != null) {
                                                        }
                                                        if (sQLitePreparedStatement3 == null) {
                                                        }
                                                    }
                                                }
                                                this.database.executeFast(String.format(locale4, "DELETE FROM media_topics WHERE mid IN(%s) AND uid = %d", str, Long.valueOf(j6))).stepThis().dispose();
                                                i7 = i9 + 1;
                                                size = i8;
                                                charSequence3 = charSequence2;
                                                arrayList13 = arrayList17;
                                                longSparseArray7 = longSparseArray6;
                                                join3 = str;
                                            } catch (Exception e62) {
                                                e = e62;
                                                sQLiteCursor15 = sQLiteCursor202222222222;
                                                SQLitePreparedStatement sQLitePreparedStatement9 = sQLitePreparedStatement82222222222;
                                                th12 = e;
                                                sQLitePreparedStatement5 = sQLitePreparedStatement9;
                                                sQLitePreparedStatement2 = sQLitePreparedStatement5;
                                                th4 = th12;
                                                sQLiteCursor4 = sQLiteCursor15;
                                                checkSQLException(th4);
                                                sQLiteDatabase = this.database;
                                                if (sQLiteDatabase != null) {
                                                }
                                                if (sQLiteCursor4 != null) {
                                                }
                                                if (sQLitePreparedStatement2 != null) {
                                                }
                                            } catch (Throwable th68) {
                                                th = th68;
                                                sQLiteCursor15 = sQLiteCursor202222222222;
                                                SQLitePreparedStatement sQLitePreparedStatement10 = sQLitePreparedStatement82222222222;
                                                th11 = th;
                                                sQLitePreparedStatement5 = sQLitePreparedStatement10;
                                                sQLitePreparedStatement3 = sQLitePreparedStatement5;
                                                th = th11;
                                                sQLiteCursor4 = sQLiteCursor15;
                                                sQLiteDatabase2 = this.database;
                                                if (sQLiteDatabase2 != null) {
                                                }
                                                if (sQLiteCursor4 != null) {
                                                }
                                                if (sQLitePreparedStatement3 == null) {
                                                }
                                            }
                                            sQLiteDatabase7.executeFast(String.format(locale4, "DELETE FROM media_v4 WHERE mid IN(%s) AND uid = %d", str, Long.valueOf(j6))).stepThis().dispose();
                                        } catch (Exception e63) {
                                            e = e63;
                                        } catch (Throwable th69) {
                                            th = th69;
                                        }
                                        SQLiteDatabase sQLiteDatabase72 = this.database;
                                        Locale locale42 = Locale.US;
                                    } catch (Exception e64) {
                                        e3 = e64;
                                        sQLitePreparedStatement2 = sQLitePreparedStatement82222222222;
                                        sQLiteCursor9 = sQLiteCursor202222222222;
                                        th8 = e3;
                                        sQLiteCursor4 = sQLiteCursor9;
                                        th4 = th8;
                                        checkSQLException(th4);
                                        sQLiteDatabase = this.database;
                                        if (sQLiteDatabase != null) {
                                        }
                                        if (sQLiteCursor4 != null) {
                                        }
                                        if (sQLitePreparedStatement2 != null) {
                                        }
                                    } catch (Throwable th70) {
                                        sQLitePreparedStatement5 = sQLitePreparedStatement82222222222;
                                        sQLiteCursor10 = sQLiteCursor202222222222;
                                        th7 = th70;
                                        sQLiteCursor4 = sQLiteCursor10;
                                        sQLitePreparedStatement3 = sQLitePreparedStatement5;
                                        th = th7;
                                        sQLiteDatabase2 = this.database;
                                        if (sQLiteDatabase2 != null) {
                                        }
                                        if (sQLiteCursor4 != null) {
                                        }
                                        if (sQLitePreparedStatement3 == null) {
                                        }
                                    }
                                    if (arrayList10.isEmpty()) {
                                    }
                                } catch (Exception e65) {
                                    th8 = e65;
                                    sQLiteCursor9 = sQLiteCursor15;
                                    sQLiteCursor4 = sQLiteCursor9;
                                    th4 = th8;
                                    checkSQLException(th4);
                                    sQLiteDatabase = this.database;
                                    if (sQLiteDatabase != null) {
                                    }
                                    if (sQLiteCursor4 != null) {
                                    }
                                    if (sQLitePreparedStatement2 != null) {
                                    }
                                } catch (Throwable th71) {
                                    th7 = th71;
                                    sQLiteCursor10 = sQLiteCursor15;
                                    sQLitePreparedStatement5 = sQLitePreparedStatement2;
                                    sQLiteCursor4 = sQLiteCursor10;
                                    sQLitePreparedStatement3 = sQLitePreparedStatement5;
                                    th = th7;
                                    sQLiteDatabase2 = this.database;
                                    if (sQLiteDatabase2 != null) {
                                    }
                                    if (sQLiteCursor4 != null) {
                                    }
                                    if (sQLitePreparedStatement3 == null) {
                                    }
                                }
                                i9 = i7;
                                arrayList17 = arrayList13;
                                longSparseArray6 = longSparseArray7;
                                str = join3;
                                charSequence2 = charSequence;
                                sQLiteCursor15 = null;
                            }
                            sQLitePreparedStatement6 = sQLitePreparedStatement82222222222;
                            list = arrayList13;
                            sQLiteCursor11 = sQLiteCursor202222222222;
                            longSparseArray5 = longSparseArray7;
                            String str32222222222 = join3;
                            if (!longSparseArray4.isEmpty()) {
                                final LongSparseArray longSparseArray15 = longSparseArray4;
                                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda189
                                    @Override // java.lang.Runnable
                                    public final void run() {
                                        MessagesStorage.this.lambda$markMessagesAsDeletedInternal$205(longSparseArray15);
                                    }
                                });
                            }
                            SQLiteDatabase sQLiteDatabase52222222222 = this.database;
                            locale = Locale.US;
                            try {
                                sQLiteDatabase52222222222.executeFast(String.format(locale, "DELETE FROM messages_seq WHERE mid IN(%s)", str32222222222)).stepThis().dispose();
                                if (!arrayList7.isEmpty()) {
                                    if (j == 0) {
                                        executeFast2 = this.database.executeFast("UPDATE media_counts_v2 SET old = 1 WHERE 1");
                                    } else {
                                        try {
                                            executeFast2 = this.database.executeFast(String.format(locale, "UPDATE media_counts_v2 SET old = 1 WHERE uid = %d", Long.valueOf(j)));
                                        } catch (Exception e66) {
                                            e = e66;
                                            th10 = e;
                                            sQLiteCursor14 = sQLiteCursor11;
                                            th3 = th10;
                                            sQLitePreparedStatement = sQLitePreparedStatement6;
                                            sQLiteCursor5 = sQLiteCursor14;
                                            sQLitePreparedStatement2 = sQLitePreparedStatement;
                                            th4 = th3;
                                            sQLiteCursor4 = sQLiteCursor5;
                                            checkSQLException(th4);
                                            sQLiteDatabase = this.database;
                                            if (sQLiteDatabase != null) {
                                            }
                                            if (sQLiteCursor4 != null) {
                                            }
                                            if (sQLitePreparedStatement2 != null) {
                                            }
                                        } catch (Throwable th72) {
                                            th = th72;
                                            th = th;
                                            sQLiteCursor13 = sQLiteCursor11;
                                            sQLiteCursor6 = sQLiteCursor13;
                                            sQLitePreparedStatement3 = sQLitePreparedStatement6;
                                            sQLiteCursor4 = sQLiteCursor6;
                                            sQLiteDatabase2 = this.database;
                                            if (sQLiteDatabase2 != null) {
                                            }
                                            if (sQLiteCursor4 != null) {
                                            }
                                            if (sQLitePreparedStatement3 == null) {
                                            }
                                        }
                                    }
                                    executeFast2.stepThis().dispose();
                                }
                                if (arrayList9 != null || arrayList9.isEmpty()) {
                                    arrayList14 = arrayList9;
                                    if (arrayList14 != null || !arrayList14.isEmpty()) {
                                        arrayList15 = arrayList;
                                        if (!arrayList10.isEmpty()) {
                                            if (j == 0) {
                                                executeFast = this.database.executeFast("UPDATE media_counts_topics SET old = 1 WHERE 1");
                                            } else {
                                                try {
                                                    executeFast = this.database.executeFast(String.format(locale, "UPDATE media_counts_topics SET old = 1 WHERE uid = %d", Long.valueOf(j)));
                                                } catch (Exception e67) {
                                                    e = e67;
                                                    th10 = e;
                                                    sQLiteCursor14 = sQLiteCursor11;
                                                    th3 = th10;
                                                    sQLitePreparedStatement = sQLitePreparedStatement6;
                                                    sQLiteCursor5 = sQLiteCursor14;
                                                    sQLitePreparedStatement2 = sQLitePreparedStatement;
                                                    th4 = th3;
                                                    sQLiteCursor4 = sQLiteCursor5;
                                                    checkSQLException(th4);
                                                    sQLiteDatabase = this.database;
                                                    if (sQLiteDatabase != null) {
                                                    }
                                                    if (sQLiteCursor4 != null) {
                                                    }
                                                    if (sQLitePreparedStatement2 != null) {
                                                    }
                                                } catch (Throwable th73) {
                                                    th = th73;
                                                    th = th;
                                                    sQLiteCursor13 = sQLiteCursor11;
                                                    sQLiteCursor6 = sQLiteCursor13;
                                                    sQLitePreparedStatement3 = sQLitePreparedStatement6;
                                                    sQLiteCursor4 = sQLiteCursor6;
                                                    sQLiteDatabase2 = this.database;
                                                    if (sQLiteDatabase2 != null) {
                                                    }
                                                    if (sQLiteCursor4 != null) {
                                                    }
                                                    if (sQLitePreparedStatement3 == null) {
                                                    }
                                                }
                                            }
                                            executeFast.stepThis().dispose();
                                        }
                                        getMediaDataController().clearBotKeyboard(null, arrayList15);
                                        if (longSparseArray5.size() != 0) {
                                            resetAllUnreadCounters(false);
                                        }
                                        arrayList16 = arrayList24;
                                        updateWidgets(arrayList16);
                                        if (arrayList12 != null) {
                                            int i29 = 0;
                                            while (i29 < arrayList12.size()) {
                                                ArrayList<TopicKey> arrayList37 = arrayList12;
                                                TopicKey topicKey3 = arrayList37.get(i29);
                                                try {
                                                    this.database.executeFast(String.format(Locale.US, "DELETE FROM topics WHERE did = %d AND topic_id = %d", Long.valueOf(topicKey3.dialogId), Long.valueOf(topicKey3.topicId))).stepThis().dispose();
                                                    i29++;
                                                    arrayList12 = arrayList37;
                                                } catch (Exception e68) {
                                                    e = e68;
                                                    th10 = e;
                                                    sQLiteCursor14 = sQLiteCursor11;
                                                    th3 = th10;
                                                    sQLitePreparedStatement = sQLitePreparedStatement6;
                                                    sQLiteCursor5 = sQLiteCursor14;
                                                    sQLitePreparedStatement2 = sQLitePreparedStatement;
                                                    th4 = th3;
                                                    sQLiteCursor4 = sQLiteCursor5;
                                                    checkSQLException(th4);
                                                    sQLiteDatabase = this.database;
                                                    if (sQLiteDatabase != null) {
                                                    }
                                                    if (sQLiteCursor4 != null) {
                                                    }
                                                    if (sQLitePreparedStatement2 != null) {
                                                    }
                                                } catch (Throwable th74) {
                                                    th = th74;
                                                    th = th;
                                                    sQLiteCursor13 = sQLiteCursor11;
                                                    sQLiteCursor6 = sQLiteCursor13;
                                                    sQLitePreparedStatement3 = sQLitePreparedStatement6;
                                                    sQLiteCursor4 = sQLiteCursor6;
                                                    sQLiteDatabase2 = this.database;
                                                    if (sQLiteDatabase2 != null) {
                                                    }
                                                    if (sQLiteCursor4 != null) {
                                                    }
                                                    if (sQLitePreparedStatement3 == null) {
                                                    }
                                                }
                                            }
                                            getMessagesController().getTopicsController().onTopicsDeletedServerSide(arrayList12);
                                        }
                                        if (list != null) {
                                            getMessagesController().getTopicsController().processUpdate(list);
                                        }
                                        sQLiteCursor12 = sQLiteCursor11;
                                        sQLitePreparedStatement7 = sQLitePreparedStatement6;
                                        sQLiteDatabase4 = this.database;
                                        if (sQLiteDatabase4 != null) {
                                            sQLiteDatabase4.commitTransaction();
                                        }
                                        if (sQLiteCursor12 != null) {
                                            sQLiteCursor12.dispose();
                                        }
                                        if (sQLitePreparedStatement7 != null) {
                                            sQLitePreparedStatement7.dispose();
                                        }
                                        return arrayList16;
                                    }
                                    arrayList15 = arrayList;
                                    runnable = new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda191
                                        @Override // java.lang.Runnable
                                        public final void run() {
                                            MessagesStorage.this.lambda$markMessagesAsDeletedInternal$207(arrayList15);
                                        }
                                    };
                                } else {
                                    final ArrayList arrayList38 = arrayList9;
                                    final long j10 = j3;
                                    runnable = new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda190
                                        @Override // java.lang.Runnable
                                        public final void run() {
                                            MessagesStorage.this.lambda$markMessagesAsDeletedInternal$206(arrayList38, j10);
                                        }
                                    };
                                    arrayList15 = arrayList;
                                }
                                AndroidUtilities.runOnUIThread(runnable);
                                if (!arrayList10.isEmpty()) {
                                }
                                getMediaDataController().clearBotKeyboard(null, arrayList15);
                                if (longSparseArray5.size() != 0) {
                                }
                                arrayList16 = arrayList24;
                                updateWidgets(arrayList16);
                                if (arrayList12 != null) {
                                }
                                if (list != null) {
                                }
                                sQLiteCursor12 = sQLiteCursor11;
                                sQLitePreparedStatement7 = sQLitePreparedStatement6;
                                sQLiteDatabase4 = this.database;
                                if (sQLiteDatabase4 != null) {
                                }
                                if (sQLiteCursor12 != null) {
                                }
                                if (sQLitePreparedStatement7 != null) {
                                }
                                return arrayList16;
                            } catch (Exception e69) {
                                e = e69;
                            } catch (Throwable th75) {
                                th = th75;
                            }
                        } catch (Exception e70) {
                            th6 = e70;
                            sQLitePreparedStatement4 = null;
                        } catch (Throwable th76) {
                            th = th76;
                            sQLitePreparedStatement4 = null;
                        }
                    } catch (Throwable th77) {
                        th = th77;
                    }
                } else {
                    longSparseArray = longSparseArray8;
                    arrayList4 = arrayList23;
                    arrayList5 = arrayList25;
                    try {
                        i3 = 0;
                        sQLiteCursor = this.database.queryFinalized(String.format(Locale.US, "SELECT uid, data, read_state, out, mention, mid FROM messages_v2 WHERE mid IN(%s) AND is_channel = 0", join3), new Object[0]);
                        while (sQLiteCursor.next()) {
                        }
                        arrayList6 = arrayList26;
                        arrayList7 = arrayList20;
                        arrayList8 = arrayList22;
                        longSparseArray2 = longSparseArray9;
                        arrayList9 = arrayList3;
                        longSparseArray3 = longSparseArray;
                        i4 = 5;
                        j2 = clientUserId;
                        sQLiteCursor.dispose();
                        if (j >= 0) {
                        }
                        this.database.beginTransaction();
                        while (i5 < 4) {
                        }
                        deleteFromDownloadQueue(arrayList5, true);
                        final ArrayList arrayList2922222222222 = arrayList4;
                        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda188
                            @Override // java.lang.Runnable
                            public final void run() {
                                MessagesStorage.this.lambda$markMessagesAsDeletedInternal$204(arrayList2922222222222);
                            }
                        });
                        getFileLoader().deleteFiles(arrayList8, 0);
                        i6 = 0;
                        while (i6 < longSparseArray7.size()) {
                        }
                        arrayList12 = arrayList11;
                        if (hashMap2.isEmpty()) {
                        }
                        size = longSparseArray2.size();
                        SQLitePreparedStatement sQLitePreparedStatement822222222222 = null;
                        i7 = 0;
                        SQLiteCursor sQLiteCursor2022222222222 = null;
                        while (i7 < size) {
                        }
                        sQLitePreparedStatement6 = sQLitePreparedStatement822222222222;
                        list = arrayList13;
                        sQLiteCursor11 = sQLiteCursor2022222222222;
                        longSparseArray5 = longSparseArray7;
                        String str322222222222 = join3;
                        if (!longSparseArray4.isEmpty()) {
                        }
                        SQLiteDatabase sQLiteDatabase522222222222 = this.database;
                        locale = Locale.US;
                        sQLiteDatabase522222222222.executeFast(String.format(locale, "DELETE FROM messages_seq WHERE mid IN(%s)", str322222222222)).stepThis().dispose();
                        if (!arrayList7.isEmpty()) {
                        }
                        if (arrayList9 != null) {
                        }
                        arrayList14 = arrayList9;
                        if (arrayList14 != null) {
                        }
                        arrayList15 = arrayList;
                        if (!arrayList10.isEmpty()) {
                        }
                        getMediaDataController().clearBotKeyboard(null, arrayList15);
                        if (longSparseArray5.size() != 0) {
                        }
                        arrayList16 = arrayList24;
                        updateWidgets(arrayList16);
                        if (arrayList12 != null) {
                        }
                        if (list != null) {
                        }
                        sQLiteCursor12 = sQLiteCursor11;
                        sQLitePreparedStatement7 = sQLitePreparedStatement6;
                        sQLiteDatabase4 = this.database;
                        if (sQLiteDatabase4 != null) {
                        }
                        if (sQLiteCursor12 != null) {
                        }
                        if (sQLitePreparedStatement7 != null) {
                        }
                        return arrayList16;
                    } catch (Throwable th78) {
                        th = th78;
                    }
                }
                th = th;
                sQLiteCursor = null;
                sQLiteCursor6 = sQLiteCursor;
                sQLitePreparedStatement3 = null;
                sQLiteCursor4 = sQLiteCursor6;
                sQLiteDatabase2 = this.database;
                if (sQLiteDatabase2 != null) {
                    sQLiteDatabase2.commitTransaction();
                }
                if (sQLiteCursor4 != null) {
                    sQLiteCursor4.dispose();
                }
                if (sQLitePreparedStatement3 == null) {
                    throw th;
                }
                sQLitePreparedStatement3.dispose();
                throw th;
            }
            hashMap = hashMap3;
            arrayList3 = new ArrayList();
            ArrayList arrayList262 = arrayList21;
            if (j == 0) {
            }
            th = th;
            sQLiteCursor = null;
            sQLiteCursor6 = sQLiteCursor;
            sQLitePreparedStatement3 = null;
            sQLiteCursor4 = sQLiteCursor6;
            sQLiteDatabase2 = this.database;
            if (sQLiteDatabase2 != null) {
            }
            if (sQLiteCursor4 != null) {
            }
            if (sQLitePreparedStatement3 == null) {
            }
        }
        arrayList16 = arrayList2;
        sQLiteCursor12 = null;
        sQLitePreparedStatement7 = null;
        sQLiteDatabase4 = this.database;
        if (sQLiteDatabase4 != null) {
        }
        if (sQLiteCursor12 != null) {
        }
        if (sQLitePreparedStatement7 != null) {
        }
        return arrayList16;
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:20:0x00e9  */
    /* JADX WARN: Removed duplicated region for block: B:23:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:27:0x00f0  */
    /* renamed from: markMessagesAsReadInternal, reason: merged with bridge method [inline-methods] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void lambda$markMessagesAsRead$199(LongSparseIntArray longSparseIntArray, LongSparseIntArray longSparseIntArray2, SparseIntArray sparseIntArray) {
        SQLitePreparedStatement sQLitePreparedStatement;
        try {
            if (!isEmpty(longSparseIntArray)) {
                SQLitePreparedStatement executeFast = this.database.executeFast("DELETE FROM unread_push_messages WHERE uid = ? AND mid <= ?");
                for (int i = 0; i < longSparseIntArray.size(); i++) {
                    try {
                        long keyAt = longSparseIntArray.keyAt(i);
                        int i2 = longSparseIntArray.get(keyAt);
                        this.database.executeFast(String.format(Locale.US, "UPDATE messages_v2 SET read_state = read_state | 1 WHERE uid = %d AND mid > 0 AND mid <= %d AND read_state IN(0,2) AND out = 0", Long.valueOf(keyAt), Integer.valueOf(i2))).stepThis().dispose();
                        executeFast.requery();
                        executeFast.bindLong(1, keyAt);
                        executeFast.bindInteger(2, i2);
                        executeFast.step();
                    } catch (Exception e) {
                        e = e;
                        sQLitePreparedStatement = executeFast;
                        try {
                            checkSQLException(e);
                            if (sQLitePreparedStatement == null) {
                            }
                        } catch (Throwable th) {
                            th = th;
                            if (sQLitePreparedStatement != null) {
                                sQLitePreparedStatement.dispose();
                            }
                            throw th;
                        }
                    } catch (Throwable th2) {
                        th = th2;
                        sQLitePreparedStatement = executeFast;
                        if (sQLitePreparedStatement != null) {
                        }
                        throw th;
                    }
                }
                executeFast.dispose();
            }
            if (!isEmpty(longSparseIntArray2)) {
                for (int i3 = 0; i3 < longSparseIntArray2.size(); i3++) {
                    long keyAt2 = longSparseIntArray2.keyAt(i3);
                    this.database.executeFast(String.format(Locale.US, "UPDATE messages_v2 SET read_state = read_state | 1 WHERE uid = %d AND mid > 0 AND mid <= %d AND read_state IN(0,2) AND out = 1", Long.valueOf(keyAt2), Integer.valueOf(longSparseIntArray2.get(keyAt2)))).stepThis().dispose();
                }
            }
            if (sparseIntArray == null || isEmpty(sparseIntArray)) {
                return;
            }
            for (int i4 = 0; i4 < sparseIntArray.size(); i4++) {
                long makeEncryptedDialogId = DialogObject.makeEncryptedDialogId(sparseIntArray.keyAt(i4));
                int valueAt = sparseIntArray.valueAt(i4);
                SQLitePreparedStatement executeFast2 = this.database.executeFast("UPDATE messages_v2 SET read_state = read_state | 1 WHERE uid = ? AND date <= ? AND read_state IN(0,2) AND out = 1");
                try {
                    executeFast2.requery();
                    executeFast2.bindLong(1, makeEncryptedDialogId);
                    executeFast2.bindInteger(2, valueAt);
                    executeFast2.step();
                    executeFast2.dispose();
                } catch (Exception e2) {
                    e = e2;
                    sQLitePreparedStatement = executeFast2;
                    checkSQLException(e);
                    if (sQLitePreparedStatement == null) {
                        sQLitePreparedStatement.dispose();
                        return;
                    }
                    return;
                } catch (Throwable th3) {
                    th = th3;
                    sQLitePreparedStatement = executeFast2;
                    if (sQLitePreparedStatement != null) {
                    }
                    throw th;
                }
            }
        } catch (Exception e3) {
            e = e3;
            sQLitePreparedStatement = null;
        } catch (Throwable th4) {
            th = th4;
            sQLitePreparedStatement = null;
        }
    }

    private void markMessagesContentAsReadInternal(long j, ArrayList<Integer> arrayList, int i) {
        SQLiteCursor sQLiteCursor = null;
        ArrayList<Integer> arrayList2 = null;
        sQLiteCursor = null;
        try {
            try {
                String join = TextUtils.join(",", arrayList);
                SQLiteDatabase sQLiteDatabase = this.database;
                Locale locale = Locale.US;
                sQLiteDatabase.executeFast(String.format(locale, "UPDATE messages_v2 SET read_state = read_state | 2 WHERE mid IN (%s) AND uid = %d", join, Long.valueOf(j))).stepThis().dispose();
                if (i != 0) {
                    SQLiteCursor queryFinalized = this.database.queryFinalized(String.format(locale, "SELECT mid, ttl FROM messages_v2 WHERE mid IN (%s) AND uid = %d AND ttl > 0", join, Long.valueOf(j)), new Object[0]);
                    while (queryFinalized.next()) {
                        try {
                            if (arrayList2 == null) {
                                arrayList2 = new ArrayList<>();
                            }
                            arrayList2.add(Integer.valueOf(queryFinalized.intValue(0)));
                        } catch (Exception e) {
                            e = e;
                            sQLiteCursor = queryFinalized;
                            checkSQLException(e);
                            if (sQLiteCursor != null) {
                                sQLiteCursor.dispose();
                                return;
                            }
                            return;
                        } catch (Throwable th) {
                            th = th;
                            sQLiteCursor = queryFinalized;
                            if (sQLiteCursor != null) {
                                sQLiteCursor.dispose();
                            }
                            throw th;
                        }
                    }
                    if (arrayList2 != null) {
                        emptyMessagesMedia(j, arrayList2);
                    }
                    queryFinalized.dispose();
                }
            } catch (Exception e2) {
                e = e2;
            }
        } catch (Throwable th2) {
            th = th2;
        }
    }

    private void onReactionsUpdate(final long j, final TLRPC.TL_messageReactions tL_messageReactions, final TLRPC.TL_messageReactions tL_messageReactions2) {
        ArrayList<TLRPC.ReactionCount> arrayList;
        if (tL_messageReactions == null || (arrayList = tL_messageReactions.results) == null) {
            return;
        }
        if (arrayList.isEmpty() && tL_messageReactions2 != null && tL_messageReactions2.results.isEmpty()) {
            return;
        }
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda109
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$onReactionsUpdate$100(tL_messageReactions, tL_messageReactions2, j);
            }
        });
    }

    private void onReactionsUpdate(final ArrayList<SavedReactionsUpdate> arrayList) {
        if (arrayList == null || arrayList.isEmpty()) {
            return;
        }
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda2
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$onReactionsUpdate$99(arrayList);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* renamed from: processLoadedFilterPeersInternal, reason: merged with bridge method [inline-methods] */
    public void lambda$processLoadedFilterPeers$68(TLRPC.messages_Dialogs messages_dialogs, TLRPC.messages_Dialogs messages_dialogs2, ArrayList<TLRPC.User> arrayList, ArrayList<TLRPC.Chat> arrayList2, ArrayList<MessagesController.DialogFilter> arrayList3, SparseArray<MessagesController.DialogFilter> sparseArray, ArrayList<Integer> arrayList4, HashMap<Integer, HashSet<Long>> hashMap, HashSet<Integer> hashSet, Runnable runnable) {
        putUsersAndChats(arrayList, arrayList2, true, false);
        int size = sparseArray.size();
        int i = 0;
        boolean z = false;
        while (i < size) {
            lambda$deleteDialogFilter$69(sparseArray.valueAt(i));
            i++;
            z = true;
        }
        Iterator<Integer> it = hashSet.iterator();
        while (it.hasNext()) {
            MessagesController.DialogFilter dialogFilter = this.dialogFiltersMap.get(it.next().intValue());
            if (dialogFilter != null) {
                dialogFilter.pendingUnreadCount = -1;
            }
        }
        for (Map.Entry<Integer, HashSet<Long>> entry : hashMap.entrySet()) {
            MessagesController.DialogFilter dialogFilter2 = this.dialogFiltersMap.get(entry.getKey().intValue());
            if (dialogFilter2 != null) {
                Iterator<Long> it2 = entry.getValue().iterator();
                while (it2.hasNext()) {
                    dialogFilter2.pinnedDialogs.delete(it2.next().longValue());
                }
                z = true;
            }
        }
        int size2 = arrayList3.size();
        int i2 = 0;
        while (i2 < size2) {
            saveDialogFilterInternal(arrayList3.get(i2), false, true);
            i2++;
            z = true;
        }
        int size3 = this.dialogFilters.size();
        boolean z2 = false;
        for (int i3 = 0; i3 < size3; i3++) {
            MessagesController.DialogFilter dialogFilter3 = this.dialogFilters.get(i3);
            int indexOf = arrayList4.indexOf(Integer.valueOf(dialogFilter3.id));
            if (dialogFilter3.order != indexOf) {
                dialogFilter3.order = indexOf;
                z2 = true;
                z = true;
            }
        }
        if (z2) {
            Collections.sort(this.dialogFilters, new Comparator() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda101
                @Override // java.util.Comparator
                public final int compare(Object obj, Object obj2) {
                    int lambda$processLoadedFilterPeersInternal$67;
                    lambda$processLoadedFilterPeersInternal$67 = MessagesStorage.lambda$processLoadedFilterPeersInternal$67((MessagesController.DialogFilter) obj, (MessagesController.DialogFilter) obj2);
                    return lambda$processLoadedFilterPeersInternal$67;
                }
            });
            saveDialogFiltersOrderInternal();
        }
        int i4 = z ? 1 : 2;
        calcUnreadCounters(true);
        getMessagesController().processLoadedDialogFilters(new ArrayList<>(this.dialogFilters), messages_dialogs, messages_dialogs2, arrayList, arrayList2, null, i4, runnable);
    }

    private void putChatsInternal(List<TLRPC.Chat> list) {
        int i;
        if (list == null || list.isEmpty()) {
            return;
        }
        SQLitePreparedStatement executeFast = this.database.executeFast("REPLACE INTO chats VALUES(?, ?, ?)");
        for (int i2 = 0; i2 < list.size(); i2++) {
            TLRPC.Chat chat = list.get(i2);
            if (chat.min) {
                SQLiteCursor queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT data FROM chats WHERE uid = %d", Long.valueOf(chat.id)), new Object[0]);
                if (queryFinalized.next()) {
                    try {
                        NativeByteBuffer byteBufferValue = queryFinalized.byteBufferValue(0);
                        if (byteBufferValue != null) {
                            TLRPC.Chat TLdeserialize = TLRPC.Chat.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                            byteBufferValue.reuse();
                            if (TLdeserialize != null) {
                                TLdeserialize.title = chat.title;
                                TLdeserialize.photo = chat.photo;
                                TLdeserialize.broadcast = chat.broadcast;
                                TLdeserialize.verified = chat.verified;
                                TLdeserialize.megagroup = chat.megagroup;
                                TLdeserialize.call_not_empty = chat.call_not_empty;
                                TLdeserialize.call_active = chat.call_active;
                                TLRPC.TL_chatBannedRights tL_chatBannedRights = chat.default_banned_rights;
                                if (tL_chatBannedRights != null) {
                                    TLdeserialize.default_banned_rights = tL_chatBannedRights;
                                    TLdeserialize.flags |= 262144;
                                }
                                TLRPC.TL_chatAdminRights tL_chatAdminRights = chat.admin_rights;
                                if (tL_chatAdminRights != null) {
                                    TLdeserialize.admin_rights = tL_chatAdminRights;
                                    TLdeserialize.flags |= LiteMode.FLAG_ANIMATED_EMOJI_KEYBOARD_NOT_PREMIUM;
                                }
                                TLRPC.TL_chatBannedRights tL_chatBannedRights2 = chat.banned_rights;
                                if (tL_chatBannedRights2 != null) {
                                    TLdeserialize.banned_rights = tL_chatBannedRights2;
                                    TLdeserialize.flags |= 32768;
                                }
                                String str = chat.username;
                                if (str != null) {
                                    TLdeserialize.username = str;
                                    i = TLdeserialize.flags | 64;
                                } else {
                                    TLdeserialize.username = null;
                                    i = TLdeserialize.flags & (-65);
                                }
                                TLdeserialize.flags = i;
                                int i3 = chat.participants_count;
                                if (i3 > 0) {
                                    TLdeserialize.participants_count = i3;
                                }
                                chat = TLdeserialize;
                            }
                        }
                    } catch (Exception e) {
                        FileLog.e(e);
                    }
                }
                queryFinalized.dispose();
            }
            executeFast.requery();
            chat.flags |= 131072;
            NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(chat.getObjectSize());
            chat.serializeToStream(nativeByteBuffer);
            executeFast.bindLong(1, chat.id);
            String str2 = chat.title;
            executeFast.bindString(2, str2 != null ? str2.toLowerCase() : "");
            executeFast.bindByteBuffer(3, nativeByteBuffer);
            executeFast.step();
            nativeByteBuffer.reuse();
            this.dialogIsForum.put(-chat.id, chat.forum ? 1 : 0);
        }
        executeFast.dispose();
    }

    /*  JADX ERROR: Type inference failed
        jadx.core.utils.exceptions.JadxOverflowException: Type inference error: updates count limit reached
        	at jadx.core.utils.ErrorsCounter.addError(ErrorsCounter.java:59)
        	at jadx.core.utils.ErrorsCounter.error(ErrorsCounter.java:31)
        	at jadx.core.dex.attributes.nodes.NotificationAttrNode.addError(NotificationAttrNode.java:19)
        	at jadx.core.dex.visitors.typeinference.TypeInferenceVisitor.visit(TypeInferenceVisitor.java:77)
        */
    private void putDialogsInternal(org.telegram.tgnet.TLRPC.messages_Dialogs r36, int r37) {
        /*
            Method dump skipped, instructions count: 1918
            To view this dump add '--comments-level debug' option
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesStorage.putDialogsInternal(org.telegram.tgnet.TLRPC$messages_Dialogs, int):void");
    }

    /*  JADX ERROR: Type inference failed
        jadx.core.utils.exceptions.JadxOverflowException: Type inference error: updates count limit reached
        	at jadx.core.utils.ErrorsCounter.addError(ErrorsCounter.java:59)
        	at jadx.core.utils.ErrorsCounter.error(ErrorsCounter.java:31)
        	at jadx.core.dex.attributes.nodes.NotificationAttrNode.addError(NotificationAttrNode.java:19)
        	at jadx.core.dex.visitors.typeinference.TypeInferenceVisitor.visit(TypeInferenceVisitor.java:77)
        */
    /* JADX INFO: Access modifiers changed from: private */
    /* renamed from: putMessagesInternal, reason: merged with bridge method [inline-methods] */
    public void lambda$putMessages$192(java.util.ArrayList<org.telegram.tgnet.TLRPC.Message> r61, boolean r62, boolean r63, int r64, boolean r65, int r66, long r67) {
        /*
            Method dump skipped, instructions count: 8203
            To view this dump add '--comments-level debug' option
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesStorage.lambda$putMessages$192(java.util.ArrayList, boolean, boolean, int, boolean, int, long):void");
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* renamed from: putUsersAndChatsInternal, reason: merged with bridge method [inline-methods] */
    public void lambda$putUsersAndChats$174(List<TLRPC.User> list, List<TLRPC.Chat> list2, boolean z) {
        SQLiteDatabase sQLiteDatabase;
        if (z) {
            try {
                try {
                    this.database.beginTransaction();
                } catch (Exception e) {
                    checkSQLException(e);
                    sQLiteDatabase = this.database;
                    if (sQLiteDatabase == null) {
                        return;
                    }
                }
            } catch (Throwable th) {
                SQLiteDatabase sQLiteDatabase2 = this.database;
                if (sQLiteDatabase2 != null) {
                    sQLiteDatabase2.commitTransaction();
                }
                throw th;
            }
        }
        putUsersInternal(list);
        putChatsInternal(list2);
        sQLiteDatabase = this.database;
        if (sQLiteDatabase == null) {
            return;
        }
        sQLiteDatabase.commitTransaction();
    }

    private void putUsersInternal(List<TLRPC.User> list) {
        int i;
        int i2;
        int i3;
        if (list == null || list.isEmpty()) {
            return;
        }
        SQLitePreparedStatement executeFast = this.database.executeFast("REPLACE INTO users VALUES(?, ?, ?, ?)");
        for (int i4 = 0; i4 < list.size(); i4++) {
            TLRPC.User user = list.get(i4);
            if (user != null) {
                if (user.min) {
                    SQLiteCursor queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT data FROM users WHERE uid = %d", Long.valueOf(user.id)), new Object[0]);
                    if (queryFinalized.next()) {
                        try {
                            NativeByteBuffer byteBufferValue = queryFinalized.byteBufferValue(0);
                            if (byteBufferValue != null) {
                                TLRPC.User TLdeserialize = TLRPC.User.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                                byteBufferValue.reuse();
                                if (TLdeserialize != null) {
                                    String str = user.username;
                                    if (str != null) {
                                        TLdeserialize.username = str;
                                        i2 = TLdeserialize.flags | 8;
                                    } else {
                                        TLdeserialize.username = null;
                                        i2 = TLdeserialize.flags & (-9);
                                    }
                                    TLdeserialize.flags = i2;
                                    if (user.apply_min_photo) {
                                        TLRPC.UserProfilePhoto userProfilePhoto = user.photo;
                                        if (userProfilePhoto != null) {
                                            TLdeserialize.photo = userProfilePhoto;
                                            i3 = i2 | 32;
                                        } else {
                                            TLdeserialize.photo = null;
                                            i3 = i2 & (-33);
                                        }
                                        TLdeserialize.flags = i3;
                                    }
                                    user = TLdeserialize;
                                }
                            }
                        } catch (Exception e) {
                            checkSQLException(e);
                        }
                    }
                    queryFinalized.dispose();
                }
                executeFast.requery();
                NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(user.getObjectSize());
                user.serializeToStream(nativeByteBuffer);
                executeFast.bindLong(1, user.id);
                executeFast.bindString(2, formatUserSearchName(user));
                TLRPC.UserStatus userStatus = user.status;
                if (userStatus != null) {
                    if (userStatus instanceof TLRPC.TL_userStatusRecently) {
                        i = userStatus.by_me ? -1000 : -100;
                    } else if (userStatus instanceof TLRPC.TL_userStatusLastWeek) {
                        i = userStatus.by_me ? -1001 : -101;
                    } else {
                        if (userStatus instanceof TLRPC.TL_userStatusLastMonth) {
                            i = userStatus.by_me ? -1002 : -102;
                        }
                        executeFast.bindInteger(3, userStatus.expires);
                    }
                    userStatus.expires = i;
                    executeFast.bindInteger(3, userStatus.expires);
                } else {
                    executeFast.bindInteger(3, 0);
                }
                executeFast.bindByteBuffer(4, nativeByteBuffer);
                executeFast.step();
                nativeByteBuffer.reuse();
            }
        }
        executeFast.dispose();
    }

    private boolean recoverDatabase() {
        this.database.close();
        boolean recoverDatabase = DatabaseMigrationHelper.recoverDatabase(this.cacheFile, this.walCacheFile, this.shmCacheFile, this.currentAccount);
        FileLog.e("Database restored = " + recoverDatabase);
        if (recoverDatabase) {
            try {
                SQLiteDatabase sQLiteDatabase = new SQLiteDatabase(this.cacheFile.getPath());
                this.database = sQLiteDatabase;
                sQLiteDatabase.executeFast("PRAGMA secure_delete = ON").stepThis().dispose();
                this.database.executeFast("PRAGMA temp_store = MEMORY").stepThis().dispose();
                this.database.executeFast("PRAGMA journal_mode = WAL").stepThis().dispose();
                this.database.executeFast("PRAGMA journal_size_limit = 10485760").stepThis().dispose();
            } catch (SQLiteException e) {
                FileLog.e(new Exception(e));
                recoverDatabase = false;
            }
        }
        if (!recoverDatabase) {
            cleanupInternal(true);
            openDatabase(1);
            recoverDatabase = this.databaseCreated;
            FileLog.e("Try create new database = " + recoverDatabase);
        }
        if (recoverDatabase) {
            reset();
        }
        return recoverDatabase;
    }

    private void resetForumBadgeIfNeed(long j) {
        LongSparseIntArray longSparseIntArray;
        SQLiteCursor sQLiteCursor = null;
        try {
            SQLiteDatabase sQLiteDatabase = this.database;
            Locale locale = Locale.ENGLISH;
            SQLiteCursor queryFinalized = sQLiteDatabase.queryFinalized(String.format(locale, "SELECT topic_id FROM topics WHERE did = %d AND unread_count > 0", Long.valueOf(j)), new Object[0]);
            try {
                if (queryFinalized.next()) {
                    longSparseIntArray = null;
                } else {
                    longSparseIntArray = new LongSparseIntArray();
                    longSparseIntArray.put(j, 0);
                }
                queryFinalized.dispose();
                if (longSparseIntArray != null) {
                    this.database.executeFast(String.format(locale, "UPDATE dialogs SET unread_count = 0, unread_count_i = 0 WHERE did = %d", Long.valueOf(j))).stepThis().dispose();
                }
                updateFiltersReadCounter(longSparseIntArray, null, true);
                getMessagesController().processDialogsUpdateRead(longSparseIntArray, null);
            } catch (Throwable th) {
                th = th;
                sQLiteCursor = queryFinalized;
                try {
                    checkSQLException(th);
                } finally {
                    if (sQLiteCursor != null) {
                        sQLiteCursor.dispose();
                    }
                }
            }
        } catch (Throwable th2) {
            th = th2;
        }
    }

    private void saveDialogFilterInternal(MessagesController.DialogFilter dialogFilter, boolean z, boolean z2) {
        int i;
        SQLitePreparedStatement executeFast;
        SQLitePreparedStatement sQLitePreparedStatement = null;
        try {
            try {
                if (!this.dialogFilters.contains(dialogFilter)) {
                    if (!z) {
                        this.dialogFilters.add(dialogFilter);
                    } else if (this.dialogFilters.get(0).isDefault()) {
                        this.dialogFilters.add(1, dialogFilter);
                    } else {
                        this.dialogFilters.add(0, dialogFilter);
                    }
                    this.dialogFiltersMap.put(dialogFilter.id, dialogFilter);
                }
                executeFast = this.database.executeFast("REPLACE INTO dialog_filter VALUES(?, ?, ?, ?, ?, ?)");
            } catch (Throwable th) {
                th = th;
            }
        } catch (Exception e) {
            e = e;
        }
        try {
            executeFast.bindInteger(1, dialogFilter.id);
            executeFast.bindInteger(2, dialogFilter.order);
            executeFast.bindInteger(3, dialogFilter.unreadCount);
            executeFast.bindInteger(4, dialogFilter.flags);
            executeFast.bindString(5, dialogFilter.id == 0 ? "ALL_CHATS" : dialogFilter.name);
            executeFast.bindInteger(6, dialogFilter.color);
            executeFast.step();
            executeFast.dispose();
            if (z2) {
                this.database.executeFast("DELETE FROM dialog_filter_ep WHERE id = " + dialogFilter.id).stepThis().dispose();
                this.database.executeFast("DELETE FROM dialog_filter_pin_v2 WHERE id = " + dialogFilter.id).stepThis().dispose();
                this.database.beginTransaction();
                SQLitePreparedStatement executeFast2 = this.database.executeFast("REPLACE INTO dialog_filter_pin_v2 VALUES(?, ?, ?)");
                int size = dialogFilter.alwaysShow.size();
                for (int i2 = 0; i2 < size; i2++) {
                    long longValue = dialogFilter.alwaysShow.get(i2).longValue();
                    executeFast2.requery();
                    executeFast2.bindInteger(1, dialogFilter.id);
                    executeFast2.bindLong(2, longValue);
                    executeFast2.bindInteger(3, dialogFilter.pinnedDialogs.get(longValue, Integer.MIN_VALUE));
                    executeFast2.step();
                }
                int size2 = dialogFilter.pinnedDialogs.size();
                for (int i3 = 0; i3 < size2; i3++) {
                    long keyAt = dialogFilter.pinnedDialogs.keyAt(i3);
                    if (DialogObject.isEncryptedDialog(keyAt)) {
                        executeFast2.requery();
                        executeFast2.bindInteger(1, dialogFilter.id);
                        executeFast2.bindLong(2, keyAt);
                        executeFast2.bindInteger(3, dialogFilter.pinnedDialogs.valueAt(i3));
                        executeFast2.step();
                    }
                }
                executeFast2.dispose();
                executeFast = this.database.executeFast("REPLACE INTO dialog_filter_ep VALUES(?, ?)");
                int size3 = dialogFilter.neverShow.size();
                for (i = 0; i < size3; i++) {
                    executeFast.requery();
                    executeFast.bindInteger(1, dialogFilter.id);
                    executeFast.bindLong(2, dialogFilter.neverShow.get(i).longValue());
                    executeFast.step();
                }
                executeFast.dispose();
                this.database.commitTransaction();
            }
            SQLiteDatabase sQLiteDatabase = this.database;
            if (sQLiteDatabase != null) {
                sQLiteDatabase.commitTransaction();
            }
        } catch (Exception e2) {
            e = e2;
            sQLitePreparedStatement = executeFast;
            checkSQLException(e);
            SQLiteDatabase sQLiteDatabase2 = this.database;
            if (sQLiteDatabase2 != null) {
                sQLiteDatabase2.commitTransaction();
            }
            if (sQLitePreparedStatement != null) {
                sQLitePreparedStatement.dispose();
            }
        } catch (Throwable th2) {
            th = th2;
            sQLitePreparedStatement = executeFast;
            SQLiteDatabase sQLiteDatabase3 = this.database;
            if (sQLiteDatabase3 != null) {
                sQLiteDatabase3.commitTransaction();
            }
            if (sQLitePreparedStatement != null) {
                sQLitePreparedStatement.dispose();
            }
            throw th;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* renamed from: saveDiffParamsInternal, reason: merged with bridge method [inline-methods] */
    public void lambda$saveDiffParams$35(int i, int i2, int i3, int i4) {
        try {
            if (this.lastSavedSeq == i && this.lastSavedPts == i2 && this.lastSavedDate == i3 && this.lastQtsValue == i4) {
                return;
            }
            SQLitePreparedStatement executeFast = this.database.executeFast("UPDATE params SET seq = ?, pts = ?, date = ?, qts = ? WHERE id = 1");
            executeFast.bindInteger(1, i);
            executeFast.bindInteger(2, i2);
            executeFast.bindInteger(3, i3);
            executeFast.bindInteger(4, i4);
            executeFast.step();
            executeFast.dispose();
            this.lastSavedSeq = i;
            this.lastSavedPts = i2;
            this.lastSavedDate = i3;
            this.lastSavedQts = i4;
        } catch (Exception e) {
            checkSQLException(e);
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:32:0x015d A[Catch: all -> 0x0196, Exception -> 0x019a, TRY_LEAVE, TryCatch #8 {Exception -> 0x019a, all -> 0x0196, blocks: (B:22:0x00a7, B:24:0x00ad, B:30:0x013a, B:32:0x015d, B:61:0x012f), top: B:21:0x00a7 }] */
    /* JADX WARN: Removed duplicated region for block: B:42:0x0280  */
    /* JADX WARN: Removed duplicated region for block: B:51:0x028c  */
    /* JADX WARN: Removed duplicated region for block: B:54:0x019e A[Catch: all -> 0x018c, Exception -> 0x0191, TryCatch #7 {Exception -> 0x0191, all -> 0x018c, blocks: (B:35:0x0178, B:37:0x0263, B:54:0x019e, B:67:0x0270), top: B:34:0x0178 }] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void saveTopicsInternal(long j, List<TLRPC.TL_forumTopic> list, boolean z, boolean z2, int i) {
        SQLitePreparedStatement sQLitePreparedStatement;
        SQLitePreparedStatement sQLitePreparedStatement2;
        int i2;
        int i3;
        HashMap hashMap;
        HashSet hashSet;
        int i4 = 2;
        int i5 = 1;
        SQLitePreparedStatement sQLitePreparedStatement3 = null;
        try {
            try {
                HashSet hashSet2 = new HashSet();
                HashMap hashMap2 = new HashMap();
                for (int i6 = 0; i6 < list.size(); i6++) {
                    TLRPC.TL_forumTopic tL_forumTopic = list.get(i6);
                    SQLiteCursor queryFinalized = this.database.queryFinalized("SELECT did, pinned FROM topics WHERE did = " + j + " AND topic_id = " + tL_forumTopic.id, new Object[0]);
                    boolean next = queryFinalized.next();
                    if (next) {
                        hashMap2.put(Integer.valueOf(i6), Integer.valueOf(queryFinalized.intValue(2)));
                    }
                    queryFinalized.dispose();
                    if (next) {
                        hashSet2.add(Integer.valueOf(i6));
                    }
                }
                if (z) {
                    this.database.executeFast("DELETE FROM topics WHERE did = " + j).stepThis().dispose();
                }
                SQLitePreparedStatement executeFast = this.database.executeFast("REPLACE INTO topics VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
                if (z2) {
                    try {
                        this.database.beginTransaction();
                    } catch (Exception e) {
                        e = e;
                        sQLitePreparedStatement3 = executeFast;
                        checkSQLException(e);
                        if (sQLitePreparedStatement3 != null) {
                        }
                        this.database.commitTransaction();
                    } catch (Throwable th) {
                        th = th;
                        sQLitePreparedStatement3 = executeFast;
                        if (sQLitePreparedStatement3 != null) {
                        }
                        this.database.commitTransaction();
                        throw th;
                    }
                }
                int i7 = 0;
                while (i7 < list.size()) {
                    try {
                        TLRPC.TL_forumTopic tL_forumTopic2 = list.get(i7);
                        boolean contains = hashSet2.contains(Integer.valueOf(i7));
                        executeFast.requery();
                        executeFast.bindLong(i5, j);
                        executeFast.bindInteger(i4, tL_forumTopic2.id);
                        NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(tL_forumTopic2.getObjectSize());
                        tL_forumTopic2.serializeToStream(nativeByteBuffer);
                        executeFast.bindByteBuffer(3, nativeByteBuffer);
                        executeFast.bindInteger(4, tL_forumTopic2.top_message);
                        NativeByteBuffer nativeByteBuffer2 = new NativeByteBuffer(tL_forumTopic2.topicStartMessage.getObjectSize());
                        tL_forumTopic2.topicStartMessage.serializeToStream(nativeByteBuffer2);
                        executeFast.bindByteBuffer(5, nativeByteBuffer2);
                        executeFast.bindInteger(6, tL_forumTopic2.unread_count);
                        executeFast.bindInteger(7, tL_forumTopic2.read_inbox_max_id);
                        executeFast.bindInteger(8, tL_forumTopic2.unread_mentions_count);
                        executeFast.bindInteger(9, tL_forumTopic2.unread_reactions_count);
                        executeFast.bindInteger(10, tL_forumTopic2.read_outbox_max_id);
                        if (tL_forumTopic2.isShort) {
                            if (hashMap2.containsKey(Integer.valueOf(i7))) {
                                i2 = ((Integer) hashMap2.get(Integer.valueOf(i7))).intValue();
                                executeFast.bindInteger(11, i2);
                                executeFast.bindInteger(12, tL_forumTopic2.totalMessagesCount);
                                executeFast.bindInteger(13, tL_forumTopic2.hidden ? 1 : 0);
                                executeFast.bindInteger(14, i);
                                executeFast.step();
                                nativeByteBuffer2.reuse();
                                nativeByteBuffer.reuse();
                                if (contains) {
                                    i3 = i7;
                                    hashMap = hashMap2;
                                    sQLitePreparedStatement2 = executeFast;
                                    hashSet = hashSet2;
                                    SQLiteDatabase sQLiteDatabase = this.database;
                                    Locale locale = Locale.ENGLISH;
                                    sQLiteDatabase.executeFast(String.format(locale, "DELETE FROM messages_holes_topics WHERE uid = %d AND topic_id = %d", Long.valueOf(j), Integer.valueOf(tL_forumTopic2.id))).stepThis().dispose();
                                    this.database.executeFast(String.format(locale, "DELETE FROM media_holes_topics WHERE uid = %d AND topic_id = %d", Long.valueOf(j), Integer.valueOf(tL_forumTopic2.id))).stepThis().dispose();
                                    this.database.executeFast(String.format(locale, "DELETE FROM messages_topics WHERE uid = %d AND topic_id = %d", Long.valueOf(j), Integer.valueOf(tL_forumTopic2.id))).stepThis().dispose();
                                    this.database.executeFast(String.format(locale, "DELETE FROM media_topics WHERE uid = %d AND topic_id = %d", Long.valueOf(j), Integer.valueOf(tL_forumTopic2.id))).stepThis().dispose();
                                    SQLitePreparedStatement executeFast2 = this.database.executeFast("REPLACE INTO messages_holes_topics VALUES(?, ?, ?, ?)");
                                    createFirstHoles(j, executeFast2, this.database.executeFast("REPLACE INTO media_holes_topics VALUES(?, ?, ?, ?, ?)"), tL_forumTopic2.top_message, tL_forumTopic2.id);
                                    executeFast2.dispose();
                                    executeFast2.dispose();
                                } else {
                                    int i8 = tL_forumTopic2.top_message;
                                    hashSet = hashSet2;
                                    i3 = i7;
                                    hashMap = hashMap2;
                                    sQLitePreparedStatement2 = executeFast;
                                    try {
                                        closeHolesInTable("messages_holes_topics", j, i8, i8, tL_forumTopic2.id);
                                        int i9 = tL_forumTopic2.top_message;
                                        closeHolesInMedia(j, i9, i9, -1, 0L);
                                    } catch (Exception e2) {
                                        e = e2;
                                        sQLitePreparedStatement3 = sQLitePreparedStatement2;
                                        checkSQLException(e);
                                        if (sQLitePreparedStatement3 != null) {
                                            sQLitePreparedStatement = sQLitePreparedStatement3;
                                            sQLitePreparedStatement.dispose();
                                        }
                                        this.database.commitTransaction();
                                    } catch (Throwable th2) {
                                        th = th2;
                                        sQLitePreparedStatement3 = sQLitePreparedStatement2;
                                        if (sQLitePreparedStatement3 != null) {
                                            sQLitePreparedStatement3.dispose();
                                        }
                                        this.database.commitTransaction();
                                        throw th;
                                    }
                                }
                                i7 = i3 + 1;
                                hashSet2 = hashSet;
                                executeFast = sQLitePreparedStatement2;
                                hashMap2 = hashMap;
                                i4 = 2;
                                i5 = 1;
                            }
                        }
                        i2 = tL_forumTopic2.pinned ? tL_forumTopic2.pinnedOrder + i5 : 0;
                        executeFast.bindInteger(11, i2);
                        executeFast.bindInteger(12, tL_forumTopic2.totalMessagesCount);
                        executeFast.bindInteger(13, tL_forumTopic2.hidden ? 1 : 0);
                        executeFast.bindInteger(14, i);
                        executeFast.step();
                        nativeByteBuffer2.reuse();
                        nativeByteBuffer.reuse();
                        if (contains) {
                        }
                        i7 = i3 + 1;
                        hashSet2 = hashSet;
                        executeFast = sQLitePreparedStatement2;
                        hashMap2 = hashMap;
                        i4 = 2;
                        i5 = 1;
                    } catch (Exception e3) {
                        e = e3;
                        sQLitePreparedStatement2 = executeFast;
                    } catch (Throwable th3) {
                        th = th3;
                        sQLitePreparedStatement2 = executeFast;
                    }
                }
                sQLitePreparedStatement2 = executeFast;
                resetAllUnreadCounters(false);
            } catch (Exception e4) {
                e = e4;
            }
            if (sQLitePreparedStatement2 != null) {
                sQLitePreparedStatement = sQLitePreparedStatement2;
                sQLitePreparedStatement.dispose();
            }
            this.database.commitTransaction();
        } catch (Throwable th4) {
            th = th4;
        }
    }

    private ArrayList<Long> toPeerIds(ArrayList<TLRPC.InputPeer> arrayList) {
        ArrayList<Long> arrayList2 = new ArrayList<>();
        if (arrayList == null) {
            return arrayList2;
        }
        int size = arrayList.size();
        for (int i = 0; i < size; i++) {
            TLRPC.InputPeer inputPeer = arrayList.get(i);
            if (inputPeer != null) {
                long j = inputPeer.user_id;
                if (j == 0) {
                    long j2 = inputPeer.chat_id;
                    if (j2 == 0) {
                        j2 = inputPeer.channel_id;
                    }
                    j = -j2;
                }
                arrayList2.add(Long.valueOf(j));
            }
        }
        return arrayList2;
    }

    private void updateDbToLastVersion(int i) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda36
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$updateDbToLastVersion$3();
            }
        });
        FileLog.d("MessagesStorage start db migration from " + i + " to 159");
        int migrate = DatabaseMigrationHelper.migrate(this, i);
        StringBuilder sb = new StringBuilder();
        sb.append("MessagesStorage db migration finished to varsion ");
        sb.append(migrate);
        FileLog.d(sb.toString());
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda37
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$updateDbToLastVersion$4();
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:39:0x0425  */
    /* JADX WARN: Removed duplicated region for block: B:41:0x042a  */
    /* JADX WARN: Removed duplicated region for block: B:43:0x042f  */
    /* JADX WARN: Removed duplicated region for block: B:46:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:52:0x0439  */
    /* JADX WARN: Removed duplicated region for block: B:54:0x043e  */
    /* JADX WARN: Removed duplicated region for block: B:56:0x0443  */
    /* renamed from: updateDialogsWithDeletedMessagesInternal, reason: merged with bridge method [inline-methods] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void lambda$updateDialogsWithDeletedMessages$208(long j, long j2, ArrayList<Integer> arrayList, ArrayList<Long> arrayList2) {
        SQLitePreparedStatement sQLitePreparedStatement;
        SQLiteCursor sQLiteCursor;
        SQLitePreparedStatement sQLitePreparedStatement2;
        SQLiteDatabase sQLiteDatabase;
        SQLiteDatabase sQLiteDatabase2;
        SQLiteCursor sQLiteCursor2;
        TLRPC.TL_messages_dialogs tL_messages_dialogs;
        String str;
        TLRPC.Dialog dialog;
        NativeByteBuffer byteBufferValue;
        TLRPC.TL_dialog tL_dialog;
        String str2;
        Long valueOf;
        ArrayList<Long> arrayList3;
        SQLitePreparedStatement executeFast;
        long j3 = j2;
        try {
            ArrayList arrayList4 = new ArrayList();
            String str3 = ",";
            if (arrayList.isEmpty()) {
                arrayList4.add(Long.valueOf(-j3));
            } else {
                try {
                    try {
                        if (j3 != 0) {
                            arrayList4.add(Long.valueOf(-j3));
                            executeFast = this.database.executeFast("UPDATE dialogs SET (last_mid, last_mid_group) = (SELECT mid, group_id FROM messages_v2 WHERE uid = ? AND date = (SELECT MAX(date) FROM messages_v2 WHERE uid = ?)) WHERE did = ?");
                        } else {
                            if (j == 0) {
                                try {
                                    sQLiteCursor = this.database.queryFinalized(String.format(Locale.US, "SELECT did FROM dialogs WHERE last_mid IN(%s) AND flags = 0", TextUtils.join(",", arrayList)), new Object[0]);
                                    while (sQLiteCursor.next()) {
                                        try {
                                            arrayList4.add(Long.valueOf(sQLiteCursor.longValue(0)));
                                        } catch (Exception e) {
                                            e = e;
                                            sQLitePreparedStatement = null;
                                            try {
                                                checkSQLException(e);
                                                sQLiteDatabase2 = this.database;
                                                if (sQLiteDatabase2 != null) {
                                                }
                                                if (sQLiteCursor != null) {
                                                }
                                                if (sQLitePreparedStatement != null) {
                                                }
                                            } catch (Throwable th) {
                                                th = th;
                                                sQLitePreparedStatement2 = sQLitePreparedStatement;
                                                sQLiteDatabase = this.database;
                                                if (sQLiteDatabase != null) {
                                                }
                                                if (sQLiteCursor != null) {
                                                }
                                                if (sQLitePreparedStatement2 != null) {
                                                }
                                                throw th;
                                            }
                                        } catch (Throwable th2) {
                                            th = th2;
                                            sQLitePreparedStatement = null;
                                            sQLitePreparedStatement2 = sQLitePreparedStatement;
                                            sQLiteDatabase = this.database;
                                            if (sQLiteDatabase != null) {
                                            }
                                            if (sQLiteCursor != null) {
                                            }
                                            if (sQLitePreparedStatement2 != null) {
                                            }
                                            throw th;
                                        }
                                    }
                                    sQLiteCursor.dispose();
                                } catch (Throwable th3) {
                                    th = th3;
                                    sQLiteCursor = null;
                                    sQLitePreparedStatement2 = null;
                                    sQLiteDatabase = this.database;
                                    if (sQLiteDatabase != null) {
                                    }
                                    if (sQLiteCursor != null) {
                                    }
                                    if (sQLitePreparedStatement2 != null) {
                                    }
                                    throw th;
                                }
                            } else {
                                arrayList4.add(Long.valueOf(j));
                            }
                            executeFast = this.database.executeFast("UPDATE dialogs SET (last_mid, last_mid_group) = (SELECT mid, group_id FROM messages_v2 WHERE uid = ? AND date = (SELECT MAX(date) FROM messages_v2 WHERE uid = ? AND date != 0)) WHERE did = ?");
                        }
                        try {
                            this.database.beginTransaction();
                            for (int i = 0; i < arrayList4.size(); i++) {
                                long longValue = ((Long) arrayList4.get(i)).longValue();
                                executeFast.requery();
                                executeFast.bindLong(1, longValue);
                                executeFast.bindLong(2, longValue);
                                executeFast.bindLong(3, longValue);
                                executeFast.step();
                            }
                            executeFast.dispose();
                        } catch (Exception e2) {
                            e = e2;
                        } catch (Throwable th4) {
                            th = th4;
                        }
                    } catch (Exception e3) {
                        e = e3;
                        sQLiteCursor = null;
                    }
                } catch (Throwable th5) {
                    th = th5;
                    sQLiteCursor = null;
                }
                try {
                    this.database.commitTransaction();
                } catch (Exception e4) {
                    e = e4;
                    executeFast = null;
                    sQLitePreparedStatement = executeFast;
                    sQLiteCursor = null;
                    checkSQLException(e);
                    sQLiteDatabase2 = this.database;
                    if (sQLiteDatabase2 != null) {
                    }
                    if (sQLiteCursor != null) {
                    }
                    if (sQLitePreparedStatement != null) {
                    }
                } catch (Throwable th6) {
                    th = th6;
                    executeFast = null;
                    sQLitePreparedStatement2 = executeFast;
                    sQLiteCursor = null;
                    sQLiteDatabase = this.database;
                    if (sQLiteDatabase != null) {
                    }
                    if (sQLiteCursor != null) {
                    }
                    if (sQLitePreparedStatement2 != null) {
                    }
                    throw th;
                }
            }
            if (arrayList2 != null) {
                for (int i2 = 0; i2 < arrayList2.size(); i2++) {
                    try {
                        Long l = arrayList2.get(i2);
                        if (!arrayList4.contains(l)) {
                            arrayList4.add(l);
                        }
                    } catch (Exception e5) {
                        e = e5;
                        sQLiteCursor2 = null;
                        sQLitePreparedStatement = null;
                        sQLiteCursor = sQLiteCursor2;
                        checkSQLException(e);
                        sQLiteDatabase2 = this.database;
                        if (sQLiteDatabase2 != null) {
                        }
                        if (sQLiteCursor != null) {
                        }
                        if (sQLitePreparedStatement != null) {
                        }
                    }
                }
            }
            try {
                String join = TextUtils.join(",", arrayList4);
                TLRPC.TL_messages_dialogs tL_messages_dialogs2 = new TLRPC.TL_messages_dialogs();
                ArrayList<TLRPC.EncryptedChat> arrayList5 = new ArrayList<>();
                ArrayList<Long> arrayList6 = new ArrayList<>();
                ArrayList<Long> arrayList7 = new ArrayList<>();
                ArrayList arrayList8 = new ArrayList();
                LongSparseArray longSparseArray = new LongSparseArray();
                int i3 = 0;
                sQLiteCursor2 = this.database.queryFinalized(String.format(Locale.US, "SELECT d.did, d.last_mid, d.unread_count, d.date, m.data, m.read_state, m.mid, m.send_state, m.date, d.pts, d.inbox_max, d.outbox_max, d.pinned, d.unread_count_i, d.flags, d.folder_id, d.data, d.unread_reactions, d.last_mid_group, d.ttl_period FROM dialogs as d LEFT JOIN messages_v2 as m ON d.last_mid = m.mid AND d.did = m.uid AND d.last_mid_group IS NULL WHERE d.did IN(%s)", join), new Object[0]);
                while (sQLiteCursor2.next()) {
                    try {
                        try {
                            TLRPC.TL_messages_dialogs tL_messages_dialogs3 = tL_messages_dialogs2;
                            try {
                                long longValue2 = sQLiteCursor2.longValue(i3);
                                if (DialogObject.isFolderDialogId(longValue2)) {
                                    TLRPC.TL_dialogFolder tL_dialogFolder = new TLRPC.TL_dialogFolder();
                                    tL_dialog = tL_dialogFolder;
                                    if (!sQLiteCursor2.isNull(16)) {
                                        NativeByteBuffer byteBufferValue2 = sQLiteCursor2.byteBufferValue(16);
                                        if (byteBufferValue2 != null) {
                                            tL_dialogFolder.folder = TLRPC.TL_folder.TLdeserialize(byteBufferValue2, byteBufferValue2.readInt32(false), false);
                                            byteBufferValue2.reuse();
                                            tL_dialog = tL_dialogFolder;
                                        } else {
                                            TLRPC.TL_folder tL_folder = new TLRPC.TL_folder();
                                            tL_dialogFolder.folder = tL_folder;
                                            tL_folder.id = sQLiteCursor2.intValue(15);
                                            tL_dialog = tL_dialogFolder;
                                        }
                                    }
                                } else {
                                    tL_dialog = new TLRPC.TL_dialog();
                                }
                                tL_dialog.id = longValue2;
                                tL_dialog.top_message = sQLiteCursor2.intValue(1);
                                tL_dialog.read_inbox_max_id = sQLiteCursor2.intValue(10);
                                tL_dialog.read_outbox_max_id = sQLiteCursor2.intValue(11);
                                tL_dialog.unread_count = sQLiteCursor2.intValue(2);
                                tL_dialog.unread_mentions_count = sQLiteCursor2.intValue(13);
                                tL_dialog.last_message_date = sQLiteCursor2.intValue(3);
                                tL_dialog.pts = sQLiteCursor2.intValue(9);
                                tL_dialog.flags = j3 == 0 ? 0 : 1;
                                int intValue = sQLiteCursor2.intValue(12);
                                tL_dialog.pinnedNum = intValue;
                                tL_dialog.pinned = intValue != 0;
                                int intValue2 = sQLiteCursor2.intValue(14);
                                tL_dialog.unread_mark = (intValue2 & 1) != 0;
                                tL_dialog.view_forum_as_messages = (intValue2 & 64) != 0;
                                tL_dialog.folder_id = sQLiteCursor2.intValue(15);
                                tL_dialog.unread_reactions_count = sQLiteCursor2.intValue(17);
                                long longValue3 = sQLiteCursor2.longValue(18);
                                if (longValue3 != 0) {
                                    longSparseArray.put(longValue2, Long.valueOf(longValue3));
                                }
                                tL_dialog.ttl_period = sQLiteCursor2.intValue(19);
                                tL_messages_dialogs3.dialogs.add(tL_dialog);
                                NativeByteBuffer byteBufferValue3 = sQLiteCursor2.byteBufferValue(4);
                                if (byteBufferValue3 != null) {
                                    TLRPC.Message TLdeserialize = TLRPC.Message.TLdeserialize(byteBufferValue3, byteBufferValue3.readInt32(false), false);
                                    str2 = str3;
                                    TLdeserialize.readAttachPath(byteBufferValue3, getUserConfig().clientUserId);
                                    byteBufferValue3.reuse();
                                    MessageObject.setUnreadFlags(TLdeserialize, sQLiteCursor2.intValue(5));
                                    TLdeserialize.id = sQLiteCursor2.intValue(6);
                                    TLdeserialize.send_state = sQLiteCursor2.intValue(7);
                                    int intValue3 = sQLiteCursor2.intValue(8);
                                    if (intValue3 != 0) {
                                        tL_dialog.last_message_date = intValue3;
                                    }
                                    TLdeserialize.dialog_id = tL_dialog.id;
                                    tL_messages_dialogs3.messages.add(TLdeserialize);
                                    addUsersAndChatsFromMessage(TLdeserialize, arrayList6, arrayList7, null);
                                } else {
                                    str2 = str3;
                                }
                                if (!DialogObject.isEncryptedDialog(longValue2) && tL_dialog.read_inbox_max_id > tL_dialog.top_message) {
                                    tL_dialog.read_inbox_max_id = 0;
                                }
                                if (DialogObject.isEncryptedDialog(longValue2)) {
                                    int encryptedChatId = DialogObject.getEncryptedChatId(longValue2);
                                    if (!arrayList8.contains(Integer.valueOf(encryptedChatId))) {
                                        arrayList8.add(Integer.valueOf(encryptedChatId));
                                    }
                                } else if (!DialogObject.isUserDialog(longValue2)) {
                                    long j4 = -longValue2;
                                    if (!arrayList7.contains(Long.valueOf(j4))) {
                                        valueOf = Long.valueOf(j4);
                                        arrayList3 = arrayList7;
                                        arrayList3.add(valueOf);
                                    }
                                } else if (!arrayList6.contains(Long.valueOf(longValue2))) {
                                    valueOf = Long.valueOf(longValue2);
                                    arrayList3 = arrayList6;
                                    arrayList3.add(valueOf);
                                }
                                j3 = j2;
                                tL_messages_dialogs2 = tL_messages_dialogs3;
                                str3 = str2;
                                i3 = 0;
                            } catch (Throwable th7) {
                                th = th7;
                                sQLiteCursor = sQLiteCursor2;
                                sQLitePreparedStatement2 = null;
                                sQLiteDatabase = this.database;
                                if (sQLiteDatabase != null) {
                                    sQLiteDatabase.commitTransaction();
                                }
                                if (sQLiteCursor != null) {
                                    sQLiteCursor.dispose();
                                }
                                if (sQLitePreparedStatement2 != null) {
                                    sQLitePreparedStatement2.dispose();
                                }
                                throw th;
                            }
                        } catch (Exception e6) {
                            e = e6;
                            sQLitePreparedStatement = null;
                            sQLiteCursor = sQLiteCursor2;
                            checkSQLException(e);
                            sQLiteDatabase2 = this.database;
                            if (sQLiteDatabase2 != null) {
                                sQLiteDatabase2.commitTransaction();
                            }
                            if (sQLiteCursor != null) {
                                sQLiteCursor.dispose();
                            }
                            if (sQLitePreparedStatement != null) {
                                sQLitePreparedStatement.dispose();
                                return;
                            }
                            return;
                        }
                    } catch (Throwable th8) {
                        th = th8;
                        sQLitePreparedStatement = null;
                    }
                }
                TLRPC.TL_messages_dialogs tL_messages_dialogs4 = tL_messages_dialogs2;
                String str4 = str3;
                sQLiteCursor2.dispose();
                if (longSparseArray.isEmpty()) {
                    tL_messages_dialogs = tL_messages_dialogs4;
                    sQLitePreparedStatement = null;
                    sQLiteCursor2 = null;
                } else {
                    StringBuilder sb = new StringBuilder();
                    int i4 = 0;
                    while (i4 < longSparseArray.size()) {
                        sb.append("uid = ");
                        sb.append(longSparseArray.keyAt(i4));
                        sb.append(" AND group_id = ");
                        sb.append(longSparseArray.valueAt(i4));
                        i4++;
                        TLRPC.TL_messages_dialogs tL_messages_dialogs5 = tL_messages_dialogs4;
                        if (i4 < longSparseArray.size()) {
                            sb.append(" OR ");
                        }
                        tL_messages_dialogs4 = tL_messages_dialogs5;
                    }
                    tL_messages_dialogs = tL_messages_dialogs4;
                    int i5 = 0;
                    sQLiteCursor2 = this.database.queryFinalized(String.format(Locale.US, "SELECT uid, data, read_state, mid, send_state, date, group_id FROM messages_v2 WHERE %s", sb), new Object[0]);
                    while (sQLiteCursor2.next()) {
                        long longValue4 = sQLiteCursor2.longValue(i5);
                        int i6 = 0;
                        while (true) {
                            if (i6 >= tL_messages_dialogs.dialogs.size()) {
                                dialog = null;
                                break;
                            }
                            dialog = tL_messages_dialogs.dialogs.get(i6);
                            if (dialog != null && dialog.id == longValue4) {
                                break;
                            } else {
                                i6++;
                            }
                        }
                        if (dialog != null && (byteBufferValue = sQLiteCursor2.byteBufferValue(1)) != null) {
                            TLRPC.Message TLdeserialize2 = TLRPC.Message.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                            TLdeserialize2.readAttachPath(byteBufferValue, getUserConfig().clientUserId);
                            byteBufferValue.reuse();
                            MessageObject.setUnreadFlags(TLdeserialize2, sQLiteCursor2.intValue(2));
                            TLdeserialize2.id = sQLiteCursor2.intValue(3);
                            TLdeserialize2.send_state = sQLiteCursor2.intValue(4);
                            int intValue4 = sQLiteCursor2.intValue(5);
                            if (intValue4 != 0) {
                                dialog.last_message_date = intValue4;
                            }
                            TLdeserialize2.dialog_id = dialog.id;
                            tL_messages_dialogs.messages.add(TLdeserialize2);
                            sQLitePreparedStatement = null;
                            try {
                                addUsersAndChatsFromMessage(TLdeserialize2, arrayList6, arrayList7, null);
                            } catch (Exception e7) {
                                e = e7;
                                sQLiteCursor = sQLiteCursor2;
                                checkSQLException(e);
                                sQLiteDatabase2 = this.database;
                                if (sQLiteDatabase2 != null) {
                                }
                                if (sQLiteCursor != null) {
                                }
                                if (sQLitePreparedStatement != null) {
                                }
                            } catch (Throwable th9) {
                                th = th9;
                                sQLiteCursor = sQLiteCursor2;
                                sQLitePreparedStatement2 = sQLitePreparedStatement;
                                sQLiteDatabase = this.database;
                                if (sQLiteDatabase != null) {
                                }
                                if (sQLiteCursor != null) {
                                }
                                if (sQLitePreparedStatement2 != null) {
                                }
                                throw th;
                            }
                        }
                        i5 = 0;
                    }
                    sQLitePreparedStatement = null;
                    sQLiteCursor2.dispose();
                }
                if (arrayList8.isEmpty()) {
                    str = str4;
                } else {
                    str = str4;
                    getEncryptedChatsInternal(TextUtils.join(str, arrayList8), arrayList5, arrayList6);
                }
                if (!arrayList7.isEmpty()) {
                    getChatsInternal(TextUtils.join(str, arrayList7), tL_messages_dialogs.chats);
                }
                if (!arrayList6.isEmpty()) {
                    getUsersInternal(arrayList6, tL_messages_dialogs.users);
                }
                getMessagesController().getTopicsController().updateTopicsWithDeletedMessages(j, arrayList);
                if (!tL_messages_dialogs.dialogs.isEmpty() || !arrayList5.isEmpty()) {
                    getMessagesController().processDialogsUpdate(tL_messages_dialogs, arrayList5, true);
                }
                SQLiteDatabase sQLiteDatabase3 = this.database;
                if (sQLiteDatabase3 != null) {
                    sQLiteDatabase3.commitTransaction();
                }
                if (sQLiteCursor2 != null) {
                    sQLiteCursor2.dispose();
                }
            } catch (Exception e8) {
                e = e8;
                sQLitePreparedStatement = null;
                sQLiteCursor2 = null;
            } catch (Throwable th10) {
                th = th10;
                sQLiteCursor = null;
                sQLitePreparedStatement2 = null;
                sQLiteDatabase = this.database;
                if (sQLiteDatabase != null) {
                }
                if (sQLiteCursor != null) {
                }
                if (sQLitePreparedStatement2 != null) {
                }
                throw th;
            }
        } catch (Exception e9) {
            e = e9;
            sQLitePreparedStatement = null;
            sQLiteCursor = null;
        } catch (Throwable th11) {
            th = th11;
            sQLitePreparedStatement = null;
            sQLiteCursor = null;
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:41:0x0387 A[Catch: Exception -> 0x005e, TRY_LEAVE, TryCatch #0 {Exception -> 0x005e, blocks: (B:3:0x000b, B:7:0x0024, B:8:0x003c, B:10:0x0042, B:13:0x0049, B:16:0x0050, B:23:0x005a, B:19:0x0061, B:32:0x0066, B:33:0x02a0, B:35:0x02a6, B:39:0x0377, B:41:0x0387, B:46:0x02b0, B:48:0x02bb, B:49:0x02c9, B:51:0x02cf, B:54:0x030a, B:56:0x0326, B:57:0x02db, B:59:0x02ff, B:60:0x0305, B:62:0x0311, B:66:0x0328, B:67:0x0331, B:69:0x0337, B:70:0x0340, B:72:0x0346, B:74:0x0350, B:76:0x036b, B:77:0x0358, B:80:0x036d, B:81:0x0370, B:83:0x006b, B:86:0x0072, B:88:0x0078, B:92:0x008d, B:94:0x0094, B:95:0x0157, B:97:0x015a, B:101:0x00ae, B:102:0x00d0, B:106:0x00d8, B:108:0x00df, B:110:0x0106, B:112:0x0111, B:113:0x013b, B:114:0x013e, B:116:0x0126, B:118:0x012a, B:119:0x0142, B:121:0x0146, B:124:0x0085, B:126:0x019a, B:128:0x01a0, B:130:0x01a7, B:131:0x01d0, B:133:0x01d6, B:135:0x01ee, B:137:0x01f4, B:139:0x01fb, B:141:0x0202, B:143:0x0222, B:144:0x0229, B:145:0x023c, B:149:0x0234, B:147:0x023f, B:154:0x0246, B:158:0x0255, B:160:0x025f, B:162:0x0266, B:167:0x026a, B:170:0x0271, B:172:0x0277), top: B:2:0x000b }] */
    /* JADX WARN: Removed duplicated region for block: B:45:? A[RETURN, SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void updateDialogsWithReadMessagesInternal(ArrayList<Integer> arrayList, LongSparseIntArray longSparseIntArray, LongSparseIntArray longSparseIntArray2, LongSparseArray longSparseArray, LongSparseIntArray longSparseIntArray3) {
        int max;
        boolean z;
        String str;
        String str2;
        int i;
        int i2;
        LongSparseIntArray longSparseIntArray4 = longSparseIntArray;
        LongSparseIntArray longSparseIntArray5 = longSparseIntArray3;
        int i3 = 2;
        try {
            LongSparseIntArray longSparseIntArray6 = new LongSparseIntArray();
            LongSparseIntArray longSparseIntArray7 = new LongSparseIntArray();
            ArrayList<Long> arrayList2 = new ArrayList<>();
            if (isEmpty(arrayList)) {
                if (!isEmpty(longSparseIntArray)) {
                    int i4 = 0;
                    while (i4 < longSparseIntArray.size()) {
                        long keyAt = longSparseIntArray4.keyAt(i4);
                        int i5 = longSparseIntArray4.get(keyAt);
                        int i6 = longSparseIntArray5 == null ? -2 : longSparseIntArray5.get(keyAt, -2);
                        if (i6 >= 0) {
                            longSparseIntArray6.put(keyAt, i6);
                            if (BuildVars.DEBUG_VERSION) {
                                str = keyAt + " update unread messages count by still unread " + i6;
                                FileLog.d(str);
                                FileLog.d(keyAt + " set inbox max " + i5);
                                SQLitePreparedStatement executeFast = this.database.executeFast("UPDATE dialogs SET inbox_max = max((SELECT inbox_max FROM dialogs WHERE did = ?), ?) WHERE did = ?");
                                executeFast.requery();
                                executeFast.bindLong(1, keyAt);
                                executeFast.bindInteger(2, i5);
                                executeFast.bindLong(3, keyAt);
                                executeFast.step();
                                executeFast.dispose();
                                i4++;
                                longSparseIntArray4 = longSparseIntArray;
                                longSparseIntArray5 = longSparseIntArray3;
                                i3 = 2;
                            } else {
                                FileLog.d(keyAt + " set inbox max " + i5);
                                SQLitePreparedStatement executeFast2 = this.database.executeFast("UPDATE dialogs SET inbox_max = max((SELECT inbox_max FROM dialogs WHERE did = ?), ?) WHERE did = ?");
                                executeFast2.requery();
                                executeFast2.bindLong(1, keyAt);
                                executeFast2.bindInteger(2, i5);
                                executeFast2.bindLong(3, keyAt);
                                executeFast2.step();
                                executeFast2.dispose();
                                i4++;
                                longSparseIntArray4 = longSparseIntArray;
                                longSparseIntArray5 = longSparseIntArray3;
                                i3 = 2;
                            }
                        } else {
                            if (longSparseIntArray5 == null || i6 == -2) {
                                z = true;
                            } else {
                                SQLiteDatabase sQLiteDatabase = this.database;
                                Locale locale = Locale.US;
                                Long valueOf = Long.valueOf(keyAt);
                                Integer valueOf2 = Integer.valueOf(i5);
                                Object[] objArr = new Object[i3];
                                objArr[0] = valueOf;
                                objArr[1] = valueOf2;
                                SQLiteCursor queryFinalized = sQLiteDatabase.queryFinalized(String.format(locale, "SELECT start, end FROM messages_holes WHERE uid = %d AND end > %d", objArr), new Object[0]);
                                z = true;
                                while (queryFinalized.next()) {
                                    z = false;
                                }
                                queryFinalized.dispose();
                            }
                            if (z) {
                                SQLiteCursor queryFinalized2 = this.database.queryFinalized(String.format(Locale.US, "SELECT COUNT(mid) FROM messages_v2 WHERE uid = %d AND mid > %d AND read_state IN(0,2) AND out = 0", Long.valueOf(keyAt), Integer.valueOf(i5)), new Object[0]);
                                if (queryFinalized2.next()) {
                                    int intValue = queryFinalized2.intValue(0);
                                    longSparseIntArray6.put(keyAt, intValue);
                                    if (BuildVars.DEBUG_VERSION) {
                                        str2 = keyAt + " update unread messages count " + intValue;
                                        FileLog.d(str2);
                                    }
                                    queryFinalized2.dispose();
                                } else {
                                    if (BuildVars.DEBUG_VERSION) {
                                        str2 = keyAt + " can't update unread messages count cursor trouble";
                                        FileLog.d(str2);
                                    }
                                    queryFinalized2.dispose();
                                }
                            } else if (BuildVars.DEBUG_VERSION) {
                                str = keyAt + " can't update unread messages count";
                                FileLog.d(str);
                            }
                            FileLog.d(keyAt + " set inbox max " + i5);
                            SQLitePreparedStatement executeFast22 = this.database.executeFast("UPDATE dialogs SET inbox_max = max((SELECT inbox_max FROM dialogs WHERE did = ?), ?) WHERE did = ?");
                            executeFast22.requery();
                            executeFast22.bindLong(1, keyAt);
                            executeFast22.bindInteger(2, i5);
                            executeFast22.bindLong(3, keyAt);
                            executeFast22.step();
                            executeFast22.dispose();
                            i4++;
                            longSparseIntArray4 = longSparseIntArray;
                            longSparseIntArray5 = longSparseIntArray3;
                            i3 = 2;
                        }
                    }
                }
                if (!isEmpty(longSparseArray)) {
                    int size = longSparseArray.size();
                    for (int i7 = 0; i7 < size; i7++) {
                        ArrayList arrayList3 = (ArrayList) longSparseArray.valueAt(i7);
                        ArrayList arrayList4 = new ArrayList(arrayList3);
                        int i8 = 0;
                        SQLiteCursor queryFinalized3 = this.database.queryFinalized(String.format(Locale.US, "SELECT uid, read_state, out, mention, mid, is_channel FROM messages_v2 WHERE mid IN(%s)", TextUtils.join(",", arrayList3)), new Object[0]);
                        long j = 0;
                        while (queryFinalized3.next()) {
                            long longValue = queryFinalized3.longValue(i8);
                            arrayList4.remove(Integer.valueOf(queryFinalized3.intValue(4)));
                            if (queryFinalized3.intValue(1) < 2 && queryFinalized3.intValue(2) == 0 && queryFinalized3.intValue(3) == 1) {
                                int i9 = longSparseIntArray7.get(longValue, -1);
                                if (i9 < 0) {
                                    SQLiteCursor queryFinalized4 = this.database.queryFinalized("SELECT unread_count_i FROM dialogs WHERE did = " + longValue, new Object[0]);
                                    int intValue2 = queryFinalized4.next() ? queryFinalized4.intValue(0) : 0;
                                    queryFinalized4.dispose();
                                    max = Math.max(0, intValue2 - 1);
                                } else {
                                    max = Math.max(0, i9 - 1);
                                }
                                longSparseIntArray7.put(longValue, max);
                            }
                            j = queryFinalized3.longValue(5);
                            i8 = 0;
                        }
                        queryFinalized3.dispose();
                        if (!arrayList4.isEmpty() && j != 0 && !arrayList2.contains(Long.valueOf(j))) {
                            arrayList2.add(Long.valueOf(j));
                        }
                    }
                }
                if (!isEmpty(longSparseIntArray2)) {
                    for (int i10 = 0; i10 < longSparseIntArray2.size(); i10++) {
                        long keyAt2 = longSparseIntArray2.keyAt(i10);
                        int i11 = longSparseIntArray2.get(keyAt2);
                        SQLitePreparedStatement executeFast3 = this.database.executeFast("UPDATE dialogs SET outbox_max = max((SELECT outbox_max FROM dialogs WHERE did = ?), ?) WHERE did = ?");
                        executeFast3.requery();
                        executeFast3.bindLong(1, keyAt2);
                        executeFast3.bindInteger(2, i11);
                        executeFast3.bindLong(3, keyAt2);
                        executeFast3.step();
                        executeFast3.dispose();
                    }
                }
            } else {
                SQLiteCursor queryFinalized5 = this.database.queryFinalized(String.format(Locale.US, "SELECT uid, read_state, out FROM messages_v2 WHERE mid IN(%s) AND is_channel = 0", TextUtils.join(",", arrayList)), new Object[0]);
                while (queryFinalized5.next()) {
                    if (queryFinalized5.intValue(2) == 0 && queryFinalized5.intValue(1) == 0) {
                        long longValue2 = queryFinalized5.longValue(0);
                        int i12 = longSparseIntArray6.get(longValue2);
                        if (i12 == 0) {
                            longSparseIntArray6.put(longValue2, 1);
                        } else {
                            longSparseIntArray6.put(longValue2, i12 + 1);
                        }
                    }
                }
                queryFinalized5.dispose();
            }
            if (longSparseIntArray6.size() <= 0) {
                if (longSparseIntArray7.size() > 0) {
                }
                updateFiltersReadCounter(longSparseIntArray6, longSparseIntArray7, true);
                getMessagesController().processDialogsUpdateRead(longSparseIntArray6, longSparseIntArray7);
                if (arrayList2.isEmpty()) {
                    getMessagesController().reloadMentionsCountForChannels(arrayList2);
                    return;
                }
                return;
            }
            this.database.beginTransaction();
            if (longSparseIntArray6.size() > 0) {
                ArrayList<Long> arrayList5 = new ArrayList<>();
                SQLitePreparedStatement executeFast4 = this.database.executeFast("UPDATE dialogs SET unread_count = ? WHERE did = ?");
                int i13 = 0;
                while (i13 < longSparseIntArray6.size()) {
                    long keyAt3 = longSparseIntArray6.keyAt(i13);
                    if (!isForum(keyAt3)) {
                        int valueAt = longSparseIntArray6.valueAt(i13);
                        SQLiteCursor queryFinalized6 = this.database.queryFinalized("SELECT unread_count FROM dialogs WHERE did = " + keyAt3, new Object[0]);
                        int intValue3 = queryFinalized6.next() ? queryFinalized6.intValue(0) : 0;
                        queryFinalized6.dispose();
                        if (intValue3 != valueAt) {
                            executeFast4.requery();
                            i2 = 1;
                            executeFast4.bindInteger(1, valueAt);
                            executeFast4.bindLong(2, keyAt3);
                            executeFast4.step();
                            arrayList5.add(Long.valueOf(keyAt3));
                            i13 += i2;
                        }
                    }
                    longSparseIntArray6.removeAt(i13);
                    i13--;
                    i2 = 1;
                    i13 += i2;
                }
                executeFast4.dispose();
                updateWidgets(arrayList5);
            }
            if (longSparseIntArray7.size() > 0) {
                SQLitePreparedStatement executeFast5 = this.database.executeFast("UPDATE dialogs SET unread_count_i = ? WHERE did = ?");
                int i14 = 0;
                while (i14 < longSparseIntArray7.size()) {
                    long keyAt4 = longSparseIntArray7.keyAt(i14);
                    if (isForum(keyAt4)) {
                        longSparseIntArray7.removeAt(i14);
                        i14--;
                        i = 1;
                    } else {
                        executeFast5.requery();
                        i = 1;
                        executeFast5.bindInteger(1, longSparseIntArray7.valueAt(i14));
                        executeFast5.bindLong(2, keyAt4);
                        executeFast5.step();
                    }
                    i14 += i;
                }
                executeFast5.dispose();
            }
            this.database.commitTransaction();
            updateFiltersReadCounter(longSparseIntArray6, longSparseIntArray7, true);
            getMessagesController().processDialogsUpdateRead(longSparseIntArray6, longSparseIntArray7);
            if (arrayList2.isEmpty()) {
            }
        } catch (Exception e) {
            checkSQLException(e);
        }
    }

    /* JADX WARN: Code restructure failed: missing block: B:198:0x03fd, code lost:
    
        if (r3.indexOfKey(-r4.id) >= 0) goto L190;
     */
    /* JADX WARN: Code restructure failed: missing block: B:358:0x067d, code lost:
    
        if (r1.dialogsWithMentions.indexOfKey(-r0.id) < 0) goto L357;
     */
    /* JADX WARN: Removed duplicated region for block: B:149:0x0327  */
    /* JADX WARN: Removed duplicated region for block: B:169:0x03a7  */
    /* JADX WARN: Removed duplicated region for block: B:172:0x03b8  */
    /* JADX WARN: Removed duplicated region for block: B:197:0x03f4  */
    /* JADX WARN: Removed duplicated region for block: B:199:0x041f  */
    /* JADX WARN: Removed duplicated region for block: B:200:0x03b3  */
    /* JADX WARN: Removed duplicated region for block: B:211:0x0443  */
    /* JADX WARN: Removed duplicated region for block: B:228:0x04a6  */
    /* JADX WARN: Removed duplicated region for block: B:241:0x04da  */
    /* JADX WARN: Removed duplicated region for block: B:288:0x058c  */
    /* JADX WARN: Removed duplicated region for block: B:454:0x0a79  */
    /* JADX WARN: Removed duplicated region for block: B:456:0x0a80  */
    /* JADX WARN: Removed duplicated region for block: B:478:0x07e7  */
    /* JADX WARN: Removed duplicated region for block: B:491:0x0819  */
    /* JADX WARN: Removed duplicated region for block: B:538:0x08c5  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void updateFiltersReadCounter(LongSparseIntArray longSparseIntArray, LongSparseIntArray longSparseIntArray2, boolean z) {
        int i;
        LongSparseArray longSparseArray;
        int size;
        int i2;
        int i3;
        int i4;
        int i5;
        MessagesController.DialogFilter dialogFilter;
        int i6;
        MessagesStorage messagesStorage;
        LongSparseArray longSparseArray2;
        int i7;
        int i8;
        MessagesController.DialogFilter dialogFilter2;
        LongSparseArray longSparseArray3;
        LongSparseArray longSparseArray4;
        LongSparseArray longSparseArray5;
        int i9;
        LongSparseArray longSparseArray6;
        LongSparseArray longSparseArray7;
        int i10;
        char c;
        char c2;
        char c3;
        char c4;
        char c5;
        int i11;
        int i12;
        int i13;
        MessagesController.DialogFilter dialogFilter3;
        int i14;
        MessagesController.DialogFilter dialogFilter4;
        int intValue;
        LongSparseArray longSparseArray8;
        int i15;
        int i16;
        LongSparseArray longSparseArray9;
        MessagesStorage messagesStorage2;
        LongSparseArray longSparseArray10;
        LongSparseArray longSparseArray11;
        int intValue2;
        char c6;
        char c7;
        char c8;
        char c9;
        char c10;
        int i17;
        ArrayList<TLRPC.Chat> arrayList;
        LongSparseArray longSparseArray12;
        LongSparseArray longSparseArray13;
        int i18;
        LongSparseArray longSparseArray14;
        int i19;
        int i20;
        ArrayList<TLRPC.EncryptedChat> arrayList2;
        ArrayList<TLRPC.User> arrayList3;
        LongSparseArray longSparseArray15;
        LongSparseIntArray longSparseIntArray3;
        MessagesStorage messagesStorage3 = this;
        if ((longSparseIntArray == null || longSparseIntArray.size() == 0) && (longSparseIntArray2 == null || longSparseIntArray2.size() == 0)) {
            return;
        }
        int i21 = 0;
        while (true) {
            if (i21 >= 2) {
                break;
            }
            for (int i22 = 0; i22 < 2; i22++) {
                int[] iArr = messagesStorage3.contacts[i21];
                int[] iArr2 = messagesStorage3.nonContacts[i21];
                int[] iArr3 = messagesStorage3.bots[i21];
                int[] iArr4 = messagesStorage3.channels[i21];
                messagesStorage3.groups[i21][i22] = 0;
                iArr4[i22] = 0;
                iArr3[i22] = 0;
                iArr2[i22] = 0;
                iArr[i22] = 0;
            }
            int[] iArr5 = messagesStorage3.mentionChannels;
            messagesStorage3.mentionGroups[i21] = 0;
            iArr5[i21] = 0;
            i21++;
        }
        ArrayList<TLRPC.User> arrayList4 = new ArrayList<>();
        ArrayList<TLRPC.User> arrayList5 = new ArrayList<>();
        ArrayList<TLRPC.Chat> arrayList6 = new ArrayList<>();
        ArrayList<Long> arrayList7 = new ArrayList<>();
        ArrayList arrayList8 = new ArrayList();
        ArrayList arrayList9 = new ArrayList();
        LongSparseArray longSparseArray16 = new LongSparseArray();
        LongSparseArray longSparseArray17 = new LongSparseArray();
        int i23 = 0;
        for (i = 2; i23 < i; i = 2) {
            LongSparseIntArray longSparseIntArray4 = i23 == 0 ? longSparseIntArray : longSparseIntArray2;
            if (longSparseIntArray4 != null) {
                int i24 = 0;
                while (i24 < longSparseIntArray4.size()) {
                    int valueAt = longSparseIntArray4.valueAt(i24);
                    Integer valueOf = Integer.valueOf(valueAt);
                    if ((!z || valueAt == 0) && (z || valueAt != 0)) {
                        arrayList3 = arrayList4;
                        long keyAt = longSparseIntArray4.keyAt(i24);
                        if (z) {
                            (i23 == 0 ? messagesStorage3.dialogsWithUnread : messagesStorage3.dialogsWithMentions).remove(keyAt);
                        } else {
                            if (messagesStorage3.dialogsWithMentions.indexOfKey(keyAt) < 0 && messagesStorage3.dialogsWithUnread.indexOfKey(keyAt) < 0) {
                                longSparseArray17.put(keyAt, valueOf);
                            }
                            (i23 == 0 ? messagesStorage3.dialogsWithUnread : messagesStorage3.dialogsWithMentions).put(keyAt, valueOf);
                        }
                        if (longSparseArray16.indexOfKey(keyAt) < 0) {
                            SQLiteDatabase sQLiteDatabase = messagesStorage3.database;
                            StringBuilder sb = new StringBuilder();
                            longSparseIntArray3 = longSparseIntArray4;
                            sb.append("SELECT folder_id FROM dialogs WHERE did = ");
                            sb.append(keyAt);
                            longSparseArray15 = longSparseArray17;
                            SQLiteCursor queryFinalized = sQLiteDatabase.queryFinalized(sb.toString(), new Object[0]);
                            int intValue3 = queryFinalized.next() ? queryFinalized.intValue(0) : 0;
                            queryFinalized.dispose();
                            longSparseArray16.put(keyAt, Integer.valueOf(intValue3));
                        } else {
                            longSparseArray15 = longSparseArray17;
                            longSparseIntArray3 = longSparseIntArray4;
                        }
                        if (DialogObject.isEncryptedDialog(keyAt)) {
                            int encryptedChatId = DialogObject.getEncryptedChatId(keyAt);
                            if (!arrayList9.contains(Integer.valueOf(encryptedChatId))) {
                                arrayList9.add(Integer.valueOf(encryptedChatId));
                            }
                        } else if (!DialogObject.isUserDialog(keyAt)) {
                            long j = -keyAt;
                            if (!arrayList8.contains(Long.valueOf(j))) {
                                arrayList8.add(Long.valueOf(j));
                            }
                        } else if (!arrayList7.contains(Long.valueOf(keyAt))) {
                            arrayList7.add(Long.valueOf(keyAt));
                        }
                    } else {
                        arrayList3 = arrayList4;
                        longSparseArray15 = longSparseArray17;
                        longSparseIntArray3 = longSparseIntArray4;
                    }
                    i24++;
                    arrayList4 = arrayList3;
                    longSparseArray17 = longSparseArray15;
                    longSparseIntArray4 = longSparseIntArray3;
                }
            }
            i23++;
            arrayList4 = arrayList4;
            longSparseArray17 = longSparseArray17;
        }
        ArrayList<TLRPC.User> arrayList10 = arrayList4;
        LongSparseArray longSparseArray18 = longSparseArray17;
        LongSparseArray longSparseArray19 = new LongSparseArray();
        LongSparseArray longSparseArray20 = new LongSparseArray();
        LongSparseArray longSparseArray21 = new LongSparseArray();
        LongSparseArray longSparseArray22 = new LongSparseArray();
        LongSparseArray longSparseArray23 = new LongSparseArray();
        LongSparseArray longSparseArray24 = new LongSparseArray();
        LongSparseArray longSparseArray25 = longSparseArray20;
        if (!arrayList7.isEmpty()) {
            messagesStorage3.getUsersInternal(arrayList7, arrayList10);
            int size2 = arrayList10.size();
            int i25 = 0;
            while (i25 < size2) {
                TLRPC.User user = arrayList10.get(i25);
                ArrayList<TLRPC.Chat> arrayList11 = arrayList6;
                int i26 = size2;
                ArrayList arrayList12 = arrayList8;
                ArrayList arrayList13 = arrayList9;
                boolean isDialogMuted = getMessagesController().isDialogMuted(user.id, 0L);
                Integer num = (Integer) longSparseArray16.get(user.id);
                int intValue4 = (num == null || num.intValue() < 0 || num.intValue() > 1) ? 0 : num.intValue();
                if (isDialogMuted) {
                    longSparseArray23.put(user.id, Boolean.TRUE);
                }
                if (intValue4 == 1) {
                    longSparseArray24.put(user.id, Boolean.TRUE);
                }
                if (user.bot) {
                    int[] iArr6 = messagesStorage3.bots[intValue4];
                    iArr6[isDialogMuted ? 1 : 0] = iArr6[isDialogMuted ? 1 : 0] + 1;
                } else if (user.self || user.contact) {
                    int[] iArr7 = messagesStorage3.contacts[intValue4];
                    iArr7[isDialogMuted ? 1 : 0] = iArr7[isDialogMuted ? 1 : 0] + 1;
                } else {
                    int[] iArr8 = messagesStorage3.nonContacts[intValue4];
                    iArr8[isDialogMuted ? 1 : 0] = iArr8[isDialogMuted ? 1 : 0] + 1;
                }
                longSparseArray19.put(user.id, user);
                i25++;
                arrayList6 = arrayList11;
                size2 = i26;
                arrayList8 = arrayList12;
                arrayList9 = arrayList13;
            }
        }
        ArrayList<TLRPC.Chat> arrayList14 = arrayList6;
        ArrayList arrayList15 = arrayList8;
        ArrayList arrayList16 = arrayList9;
        if (!arrayList16.isEmpty()) {
            ArrayList<Long> arrayList17 = new ArrayList<>();
            ArrayList<TLRPC.EncryptedChat> arrayList18 = new ArrayList<>();
            messagesStorage3.getEncryptedChatsInternal(TextUtils.join(",", arrayList16), arrayList18, arrayList17);
            if (!arrayList17.isEmpty()) {
                messagesStorage3.getUsersInternal(arrayList17, arrayList5);
                int size3 = arrayList5.size();
                for (int i27 = 0; i27 < size3; i27++) {
                    TLRPC.User user2 = arrayList5.get(i27);
                    longSparseArray21.put(user2.id, user2);
                }
                longSparseArray = longSparseArray21;
                int size4 = arrayList18.size();
                int i28 = 0;
                longSparseArray19 = longSparseArray19;
                while (i28 < size4) {
                    TLRPC.User user3 = (TLRPC.User) longSparseArray.get(arrayList18.get(i28).user_id);
                    if (user3 == null) {
                        longSparseArray14 = longSparseArray19;
                        i19 = size4;
                        arrayList2 = arrayList18;
                    } else {
                        long makeEncryptedDialogId = DialogObject.makeEncryptedDialogId(r5.id);
                        longSparseArray14 = longSparseArray19;
                        i19 = size4;
                        boolean isDialogMuted2 = getMessagesController().isDialogMuted(makeEncryptedDialogId, 0L);
                        Integer num2 = (Integer) longSparseArray16.get(makeEncryptedDialogId);
                        int intValue5 = (num2 == null || num2.intValue() < 0 || num2.intValue() > 1) ? 0 : num2.intValue();
                        if (isDialogMuted2) {
                            longSparseArray23.put(user3.id, Boolean.TRUE);
                        }
                        if (intValue5 == 1) {
                            longSparseArray24.put(user3.id, Boolean.TRUE);
                        }
                        if (user3.self || user3.contact) {
                            i20 = 1;
                            int[] iArr9 = messagesStorage3.contacts[intValue5];
                            iArr9[isDialogMuted2 ? 1 : 0] = iArr9[isDialogMuted2 ? 1 : 0] + 1;
                        } else {
                            int[] iArr10 = messagesStorage3.nonContacts[intValue5];
                            i20 = 1;
                            iArr10[isDialogMuted2 ? 1 : 0] = iArr10[isDialogMuted2 ? 1 : 0] + 1;
                        }
                        arrayList2 = arrayList18;
                        longSparseArray22.put(user3.id, Integer.valueOf(((Integer) longSparseArray22.get(user3.id, 0)).intValue() + i20));
                    }
                    i28++;
                    arrayList18 = arrayList2;
                    longSparseArray19 = longSparseArray14;
                    size4 = i19;
                }
                LongSparseArray longSparseArray26 = longSparseArray19;
                if (!arrayList15.isEmpty()) {
                    ArrayList<TLRPC.Chat> arrayList19 = arrayList14;
                    messagesStorage3.getChatsInternal(TextUtils.join(",", arrayList15), arrayList19);
                    int size5 = arrayList19.size();
                    int i29 = 0;
                    while (i29 < size5) {
                        TLRPC.Chat chat = arrayList19.get(i29);
                        if ((chat.migrated_to instanceof TLRPC.TL_inputChannel) || ChatObject.isNotInChat(chat)) {
                            i17 = size5;
                            arrayList = arrayList19;
                            longSparseArray12 = longSparseArray18;
                            longSparseArray13 = longSparseArray25;
                        } else {
                            boolean isDialogMuted3 = getMessagesController().isDialogMuted(-chat.id, 0L, chat);
                            boolean z2 = messagesStorage3.dialogsWithUnread.indexOfKey(-chat.id) >= 0;
                            boolean z3 = messagesStorage3.dialogsWithMentions.indexOfKey(-chat.id) >= 0;
                            Integer num3 = (Integer) longSparseArray16.get(-chat.id);
                            if (num3 == null || num3.intValue() < 0) {
                                i17 = size5;
                            } else {
                                i17 = size5;
                                if (num3.intValue() <= 1) {
                                    i18 = num3.intValue();
                                    if (isDialogMuted3) {
                                        arrayList = arrayList19;
                                    } else {
                                        arrayList = arrayList19;
                                        longSparseArray23.put(-chat.id, Boolean.TRUE);
                                    }
                                    if (i18 == 1) {
                                        longSparseArray24.put(-chat.id, Boolean.TRUE);
                                    }
                                    if (isDialogMuted3 && longSparseIntArray2 != null && longSparseIntArray2.indexOfKey(-chat.id) >= 0) {
                                        if (ChatObject.isChannel(chat) || chat.megagroup) {
                                            int[] iArr11 = messagesStorage3.mentionGroups;
                                            iArr11[i18] = iArr11[i18] + 1;
                                        } else {
                                            int[] iArr12 = messagesStorage3.mentionChannels;
                                            iArr12[i18] = iArr12[i18] + 1;
                                        }
                                    }
                                    if (z || z2 || z3) {
                                        if (z) {
                                            longSparseArray12 = longSparseArray18;
                                        } else {
                                            longSparseArray12 = longSparseArray18;
                                        }
                                        longSparseArray13 = longSparseArray25;
                                        longSparseArray13.put(chat.id, chat);
                                    } else {
                                        longSparseArray12 = longSparseArray18;
                                    }
                                    if (!ChatObject.isChannel(chat) || chat.megagroup) {
                                        int[] iArr13 = messagesStorage3.groups[i18];
                                        iArr13[isDialogMuted3 ? 1 : 0] = iArr13[isDialogMuted3 ? 1 : 0] + 1;
                                    } else {
                                        int[] iArr14 = messagesStorage3.channels[i18];
                                        iArr14[isDialogMuted3 ? 1 : 0] = iArr14[isDialogMuted3 ? 1 : 0] + 1;
                                    }
                                    longSparseArray13 = longSparseArray25;
                                    longSparseArray13.put(chat.id, chat);
                                }
                            }
                            i18 = 0;
                            if (isDialogMuted3) {
                            }
                            if (i18 == 1) {
                            }
                            if (isDialogMuted3) {
                                if (ChatObject.isChannel(chat)) {
                                }
                                int[] iArr112 = messagesStorage3.mentionGroups;
                                iArr112[i18] = iArr112[i18] + 1;
                            }
                            if (z) {
                            }
                            if (z) {
                            }
                            longSparseArray13 = longSparseArray25;
                            longSparseArray13.put(chat.id, chat);
                        }
                        i29++;
                        longSparseArray25 = longSparseArray13;
                        longSparseArray18 = longSparseArray12;
                        size5 = i17;
                        arrayList19 = arrayList;
                    }
                }
                LongSparseArray longSparseArray27 = longSparseArray25;
                LongSparseArray longSparseArray28 = longSparseArray18;
                size = messagesStorage3.dialogFilters.size();
                i2 = 0;
                while (i2 < size + 2) {
                    if (i2 < size) {
                        dialogFilter = messagesStorage3.dialogFilters.get(i2);
                        if (dialogFilter.pendingUnreadCount < 0) {
                            messagesStorage = messagesStorage3;
                            longSparseArray2 = longSparseArray28;
                            i11 = size;
                            i12 = i2;
                            longSparseArray5 = longSparseArray;
                            longSparseArray4 = longSparseArray26;
                            i2 = i12 + 1;
                            size = i11;
                            messagesStorage3 = messagesStorage;
                            longSparseArray26 = longSparseArray4;
                            longSparseArray = longSparseArray5;
                            longSparseArray28 = longSparseArray2;
                        } else {
                            i6 = dialogFilter.pendingUnreadCount;
                            i5 = dialogFilter.flags;
                        }
                    } else {
                        int i30 = MessagesController.DIALOG_FILTER_FLAG_ALL_CHATS;
                        if (i2 == size) {
                            i3 = messagesStorage3.pendingMainUnreadCount;
                            i30 |= MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED;
                            if (!getNotificationsController().showBadgeMuted) {
                                i4 = MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED;
                            }
                            int i31 = i3;
                            i5 = i30;
                            dialogFilter = null;
                            i6 = i31;
                        } else {
                            i3 = messagesStorage3.pendingArchiveUnreadCount;
                            i4 = MessagesController.DIALOG_FILTER_FLAG_ONLY_ARCHIVED;
                        }
                        i30 |= i4;
                        int i312 = i3;
                        i5 = i30;
                        dialogFilter = null;
                        i6 = i312;
                    }
                    if (z) {
                        if ((MessagesController.DIALOG_FILTER_FLAG_CONTACTS & i5) != 0) {
                            if ((MessagesController.DIALOG_FILTER_FLAG_ONLY_ARCHIVED & i5) == 0) {
                                int[] iArr15 = messagesStorage3.contacts[0];
                                i6 -= iArr15[0];
                                if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i5) == 0) {
                                    c10 = 1;
                                    i6 -= iArr15[1];
                                    if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED & i5) == 0) {
                                        int[] iArr16 = messagesStorage3.contacts[c10];
                                        i6 -= iArr16[0];
                                        if ((i5 & MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED) == 0) {
                                            i6 -= iArr16[c10];
                                        }
                                    }
                                }
                            }
                            c10 = 1;
                            if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED & i5) == 0) {
                            }
                        }
                        if ((MessagesController.DIALOG_FILTER_FLAG_NON_CONTACTS & i5) != 0) {
                            if ((MessagesController.DIALOG_FILTER_FLAG_ONLY_ARCHIVED & i5) == 0) {
                                int[] iArr17 = messagesStorage3.nonContacts[0];
                                i6 -= iArr17[0];
                                if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i5) == 0) {
                                    c9 = 1;
                                    i6 -= iArr17[1];
                                    if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED & i5) == 0) {
                                        int[] iArr18 = messagesStorage3.nonContacts[c9];
                                        i6 -= iArr18[0];
                                        if ((i5 & MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED) == 0) {
                                            i6 -= iArr18[c9];
                                        }
                                    }
                                }
                            }
                            c9 = 1;
                            if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED & i5) == 0) {
                            }
                        }
                        if ((MessagesController.DIALOG_FILTER_FLAG_GROUPS & i5) != 0) {
                            if ((MessagesController.DIALOG_FILTER_FLAG_ONLY_ARCHIVED & i5) == 0) {
                                c8 = 0;
                                int[] iArr19 = messagesStorage3.groups[0];
                                i6 = (i6 - iArr19[0]) - ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i5) == 0 ? iArr19[1] : messagesStorage3.mentionGroups[0]);
                            } else {
                                c8 = 0;
                            }
                            if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED & i5) == 0) {
                                int[] iArr20 = messagesStorage3.groups[1];
                                i6 = (i6 - iArr20[c8]) - ((i5 & MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED) == 0 ? iArr20[1] : messagesStorage3.mentionGroups[1]);
                            }
                        }
                        if ((MessagesController.DIALOG_FILTER_FLAG_CHANNELS & i5) != 0) {
                            if ((MessagesController.DIALOG_FILTER_FLAG_ONLY_ARCHIVED & i5) == 0) {
                                c7 = 0;
                                int[] iArr21 = messagesStorage3.channels[0];
                                i6 = (i6 - iArr21[0]) - ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i5) == 0 ? iArr21[1] : messagesStorage3.mentionChannels[0]);
                            } else {
                                c7 = 0;
                            }
                            if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED & i5) == 0) {
                                int[] iArr22 = messagesStorage3.channels[1];
                                i6 = (i6 - iArr22[c7]) - ((i5 & MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED) == 0 ? iArr22[1] : messagesStorage3.mentionChannels[1]);
                            }
                        }
                        if ((MessagesController.DIALOG_FILTER_FLAG_BOTS & i5) != 0) {
                            if ((MessagesController.DIALOG_FILTER_FLAG_ONLY_ARCHIVED & i5) == 0) {
                                int[] iArr23 = messagesStorage3.bots[0];
                                i6 -= iArr23[0];
                                if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i5) == 0) {
                                    c6 = 1;
                                    i6 -= iArr23[1];
                                    if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED & i5) == 0) {
                                        int[] iArr24 = messagesStorage3.bots[c6];
                                        i6 -= iArr24[0];
                                        if ((i5 & MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED) == 0) {
                                            i6 -= iArr24[c6];
                                        }
                                    }
                                }
                            }
                            c6 = 1;
                            if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED & i5) == 0) {
                            }
                        }
                        if (dialogFilter != null) {
                            int size6 = dialogFilter.alwaysShow.size();
                            int i32 = 0;
                            while (i32 < size6) {
                                int i33 = size6;
                                long longValue = dialogFilter.alwaysShow.get(i32).longValue();
                                if (DialogObject.isUserDialog(longValue)) {
                                    i15 = size;
                                    i16 = i2;
                                    int i34 = 0;
                                    while (i34 < 2) {
                                        TLRPC.User user4 = (TLRPC.User) (i34 == 0 ? longSparseArray26 : longSparseArray).get(longValue);
                                        if (user4 != null) {
                                            if (i34 == 0) {
                                                longSparseArray10 = longSparseArray28;
                                                longSparseArray11 = longSparseArray;
                                                intValue2 = 1;
                                            } else {
                                                longSparseArray11 = longSparseArray;
                                                intValue2 = ((Integer) longSparseArray22.get(longValue, 0)).intValue();
                                                longSparseArray10 = longSparseArray28;
                                                if (intValue2 == 0) {
                                                }
                                            }
                                            if (((user4.bot ? MessagesController.DIALOG_FILTER_FLAG_BOTS : (user4.self || user4.contact) ? MessagesController.DIALOG_FILTER_FLAG_CONTACTS : MessagesController.DIALOG_FILTER_FLAG_NON_CONTACTS) & i5) == 0 || (((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i5) != 0 && longSparseArray23.indexOfKey(user4.id) >= 0) || ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED & i5) != 0 && longSparseArray24.indexOfKey(user4.id) >= 0))) {
                                                i6 -= intValue2;
                                            }
                                        } else {
                                            longSparseArray10 = longSparseArray28;
                                            longSparseArray11 = longSparseArray;
                                        }
                                        i34++;
                                        longSparseArray = longSparseArray11;
                                        longSparseArray28 = longSparseArray10;
                                    }
                                    longSparseArray8 = longSparseArray28;
                                    longSparseArray9 = longSparseArray;
                                } else {
                                    longSparseArray8 = longSparseArray28;
                                    i15 = size;
                                    i16 = i2;
                                    longSparseArray9 = longSparseArray;
                                    TLRPC.Chat chat2 = (TLRPC.Chat) longSparseArray27.get(-longValue);
                                    if (chat2 != null) {
                                        if ((((!ChatObject.isChannel(chat2) || chat2.megagroup) ? MessagesController.DIALOG_FILTER_FLAG_GROUPS : MessagesController.DIALOG_FILTER_FLAG_CHANNELS) & i5) == 0) {
                                            messagesStorage2 = this;
                                        } else {
                                            if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i5) == 0 || longSparseArray23.indexOfKey(-chat2.id) < 0) {
                                                messagesStorage2 = this;
                                            } else {
                                                messagesStorage2 = this;
                                            }
                                            if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED & i5) != 0) {
                                                if (longSparseArray24.indexOfKey(-chat2.id) < 0) {
                                                }
                                            }
                                            i32++;
                                            size6 = i33;
                                            messagesStorage3 = messagesStorage2;
                                            size = i15;
                                            i2 = i16;
                                            longSparseArray = longSparseArray9;
                                            longSparseArray28 = longSparseArray8;
                                        }
                                        i6--;
                                        i32++;
                                        size6 = i33;
                                        messagesStorage3 = messagesStorage2;
                                        size = i15;
                                        i2 = i16;
                                        longSparseArray = longSparseArray9;
                                        longSparseArray28 = longSparseArray8;
                                    }
                                }
                                messagesStorage2 = this;
                                i32++;
                                size6 = i33;
                                messagesStorage3 = messagesStorage2;
                                size = i15;
                                i2 = i16;
                                longSparseArray = longSparseArray9;
                                longSparseArray28 = longSparseArray8;
                            }
                            messagesStorage = messagesStorage3;
                            longSparseArray2 = longSparseArray28;
                            i7 = size;
                            i8 = i2;
                            longSparseArray3 = longSparseArray;
                            int size7 = dialogFilter.neverShow.size();
                            int i35 = 0;
                            while (i35 < size7) {
                                long longValue2 = dialogFilter.neverShow.get(i35).longValue();
                                if (longSparseIntArray2 == null || longSparseIntArray2.indexOfKey(longValue2) < 0 || longSparseArray23.indexOfKey(longValue2) >= 0) {
                                    if (DialogObject.isUserDialog(longValue2)) {
                                        int i36 = 0;
                                        int i37 = 2;
                                        while (i36 < i37) {
                                            TLRPC.User user5 = (TLRPC.User) (i36 == 0 ? longSparseArray26 : longSparseArray3).get(longValue2);
                                            if (user5 != null) {
                                                if (i36 == 0) {
                                                    i14 = size7;
                                                    intValue = 1;
                                                } else {
                                                    intValue = ((Integer) longSparseArray22.get(longValue2, 0)).intValue();
                                                    if (intValue != 0) {
                                                        i14 = size7;
                                                    }
                                                }
                                                if (((user5.bot ? MessagesController.DIALOG_FILTER_FLAG_BOTS : (user5.self || user5.contact) ? MessagesController.DIALOG_FILTER_FLAG_CONTACTS : MessagesController.DIALOG_FILTER_FLAG_NON_CONTACTS) & i5) != 0) {
                                                    if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED & i5) != 0) {
                                                        dialogFilter4 = dialogFilter;
                                                        if (longSparseArray24.indexOfKey(user5.id) >= 0) {
                                                            i36++;
                                                            dialogFilter = dialogFilter4;
                                                            i37 = 2;
                                                            size7 = i14;
                                                        }
                                                    } else {
                                                        dialogFilter4 = dialogFilter;
                                                    }
                                                    if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i5) == 0 || longSparseArray23.indexOfKey(user5.id) < 0) {
                                                        i6 += intValue;
                                                    }
                                                    i36++;
                                                    dialogFilter = dialogFilter4;
                                                    i37 = 2;
                                                    size7 = i14;
                                                }
                                                dialogFilter4 = dialogFilter;
                                                i36++;
                                                dialogFilter = dialogFilter4;
                                                i37 = 2;
                                                size7 = i14;
                                            }
                                            i14 = size7;
                                            dialogFilter4 = dialogFilter;
                                            i36++;
                                            dialogFilter = dialogFilter4;
                                            i37 = 2;
                                            size7 = i14;
                                        }
                                    } else {
                                        i13 = size7;
                                        dialogFilter3 = dialogFilter;
                                        TLRPC.Chat chat3 = (TLRPC.Chat) longSparseArray27.get(-longValue2);
                                        if (chat3 != null) {
                                            if ((((!ChatObject.isChannel(chat3) || chat3.megagroup) ? MessagesController.DIALOG_FILTER_FLAG_GROUPS : MessagesController.DIALOG_FILTER_FLAG_CHANNELS) & i5) != 0 && (((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED & i5) == 0 || longSparseArray24.indexOfKey(-chat3.id) < 0) && ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i5) == 0 || longSparseArray23.indexOfKey(-chat3.id) < 0 || messagesStorage.dialogsWithMentions.indexOfKey(-chat3.id) >= 0))) {
                                                i6++;
                                            }
                                        }
                                        i35++;
                                        dialogFilter = dialogFilter3;
                                        size7 = i13;
                                    }
                                }
                                i13 = size7;
                                dialogFilter3 = dialogFilter;
                                i35++;
                                dialogFilter = dialogFilter3;
                                size7 = i13;
                            }
                            dialogFilter2 = dialogFilter;
                        } else {
                            messagesStorage = messagesStorage3;
                            longSparseArray2 = longSparseArray28;
                            i7 = size;
                            i8 = i2;
                            dialogFilter2 = dialogFilter;
                            longSparseArray3 = longSparseArray;
                        }
                        int i38 = i6;
                        if (i38 < 0) {
                            longSparseArray4 = longSparseArray26;
                            longSparseArray5 = longSparseArray3;
                            i6 = 0;
                            if (dialogFilter2 != null) {
                                dialogFilter2.pendingUnreadCount = i6;
                                i11 = i7;
                                i12 = i8;
                            } else {
                                i11 = i7;
                                i12 = i8;
                                if (i12 == i11) {
                                    messagesStorage.pendingMainUnreadCount = i6;
                                } else if (i12 == i11 + 1) {
                                    messagesStorage.pendingArchiveUnreadCount = i6;
                                }
                            }
                            i2 = i12 + 1;
                            size = i11;
                            messagesStorage3 = messagesStorage;
                            longSparseArray26 = longSparseArray4;
                            longSparseArray = longSparseArray5;
                            longSparseArray28 = longSparseArray2;
                        } else {
                            i6 = i38;
                        }
                    } else {
                        messagesStorage = messagesStorage3;
                        longSparseArray2 = longSparseArray28;
                        i7 = size;
                        i8 = i2;
                        dialogFilter2 = dialogFilter;
                        longSparseArray3 = longSparseArray;
                        if ((MessagesController.DIALOG_FILTER_FLAG_CONTACTS & i5) != 0) {
                            if ((MessagesController.DIALOG_FILTER_FLAG_ONLY_ARCHIVED & i5) == 0) {
                                int[] iArr25 = messagesStorage.contacts[0];
                                i6 += iArr25[0];
                                if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i5) == 0) {
                                    c5 = 1;
                                    i6 += iArr25[1];
                                    if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED & i5) == 0) {
                                        int[] iArr26 = messagesStorage.contacts[c5];
                                        i6 += iArr26[0];
                                        if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i5) == 0) {
                                            i6 += iArr26[c5];
                                        }
                                    }
                                }
                            }
                            c5 = 1;
                            if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED & i5) == 0) {
                            }
                        }
                        if ((MessagesController.DIALOG_FILTER_FLAG_NON_CONTACTS & i5) != 0) {
                            if ((MessagesController.DIALOG_FILTER_FLAG_ONLY_ARCHIVED & i5) == 0) {
                                int[] iArr27 = messagesStorage.nonContacts[0];
                                i6 += iArr27[0];
                                if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i5) == 0) {
                                    c4 = 1;
                                    i6 += iArr27[1];
                                    if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED & i5) == 0) {
                                        int[] iArr28 = messagesStorage.nonContacts[c4];
                                        i6 += iArr28[0];
                                        if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i5) == 0) {
                                            i6 += iArr28[c4];
                                        }
                                    }
                                }
                            }
                            c4 = 1;
                            if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED & i5) == 0) {
                            }
                        }
                        if ((MessagesController.DIALOG_FILTER_FLAG_GROUPS & i5) != 0) {
                            if ((MessagesController.DIALOG_FILTER_FLAG_ONLY_ARCHIVED & i5) == 0) {
                                c3 = 0;
                                int[] iArr29 = messagesStorage.groups[0];
                                i6 = i6 + iArr29[0] + ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i5) == 0 ? iArr29[1] : messagesStorage.mentionGroups[0]);
                            } else {
                                c3 = 0;
                            }
                            if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED & i5) == 0) {
                                int[] iArr30 = messagesStorage.groups[1];
                                i6 = i6 + iArr30[c3] + ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i5) == 0 ? iArr30[1] : messagesStorage.mentionGroups[1]);
                            }
                        }
                        if ((MessagesController.DIALOG_FILTER_FLAG_CHANNELS & i5) != 0) {
                            if ((MessagesController.DIALOG_FILTER_FLAG_ONLY_ARCHIVED & i5) == 0) {
                                c2 = 0;
                                int[] iArr31 = messagesStorage.channels[0];
                                i6 = i6 + iArr31[0] + ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i5) == 0 ? iArr31[1] : messagesStorage.mentionChannels[0]);
                            } else {
                                c2 = 0;
                            }
                            if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED & i5) == 0) {
                                int[] iArr32 = messagesStorage.channels[1];
                                i6 = i6 + iArr32[c2] + ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i5) == 0 ? iArr32[1] : messagesStorage.mentionChannels[1]);
                            }
                        }
                        if ((MessagesController.DIALOG_FILTER_FLAG_BOTS & i5) != 0) {
                            if ((MessagesController.DIALOG_FILTER_FLAG_ONLY_ARCHIVED & i5) == 0) {
                                int[] iArr33 = messagesStorage.bots[0];
                                i6 += iArr33[0];
                                if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i5) == 0) {
                                    c = 1;
                                    i6 += iArr33[1];
                                    if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED & i5) == 0) {
                                        int[] iArr34 = messagesStorage.bots[c];
                                        i6 += iArr34[0];
                                        if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i5) == 0) {
                                            i6 += iArr34[c];
                                        }
                                    }
                                }
                            }
                            c = 1;
                            if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED & i5) == 0) {
                            }
                        }
                        if (dialogFilter2 != null) {
                            if (!dialogFilter2.alwaysShow.isEmpty()) {
                                if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i5) != 0 && longSparseIntArray2 != null) {
                                    int size8 = longSparseIntArray2.size();
                                    while (i10 < size8) {
                                        long keyAt2 = longSparseIntArray2.keyAt(i10);
                                        TLRPC.Chat chat4 = (TLRPC.Chat) longSparseArray27.get(-keyAt2);
                                        if (!ChatObject.isChannel(chat4) || chat4.megagroup) {
                                            i10 = (MessagesController.DIALOG_FILTER_FLAG_GROUPS & i5) == 0 ? i10 + 1 : 0;
                                            if (longSparseArray23.indexOfKey(keyAt2) >= 0 && dialogFilter2.alwaysShow.contains(Long.valueOf(keyAt2))) {
                                                i6--;
                                            }
                                        } else {
                                            if ((MessagesController.DIALOG_FILTER_FLAG_CHANNELS & i5) == 0) {
                                            }
                                            if (longSparseArray23.indexOfKey(keyAt2) >= 0) {
                                                i6--;
                                            }
                                        }
                                    }
                                }
                                int size9 = dialogFilter2.alwaysShow.size();
                                int i39 = 0;
                                while (i39 < size9) {
                                    long longValue3 = dialogFilter2.alwaysShow.get(i39).longValue();
                                    LongSparseArray longSparseArray29 = longSparseArray2;
                                    if (longSparseArray29.indexOfKey(longValue3) < 0) {
                                        i9 = size9;
                                        longSparseArray2 = longSparseArray29;
                                        longSparseArray6 = longSparseArray26;
                                        longSparseArray7 = longSparseArray3;
                                    } else if (DialogObject.isUserDialog(longValue3)) {
                                        longSparseArray6 = longSparseArray26;
                                        TLRPC.User user6 = (TLRPC.User) longSparseArray6.get(longValue3);
                                        if (user6 != null) {
                                            i9 = size9;
                                            if (((i5 & MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED) != 0 && longSparseArray23.indexOfKey(user6.id) >= 0) || (!user6.bot ? !(user6.self || user6.contact ? (MessagesController.DIALOG_FILTER_FLAG_CONTACTS & i5) != 0 : (MessagesController.DIALOG_FILTER_FLAG_NON_CONTACTS & i5) != 0) : (MessagesController.DIALOG_FILTER_FLAG_BOTS & i5) == 0)) {
                                                i6++;
                                            }
                                        } else {
                                            i9 = size9;
                                        }
                                        longSparseArray7 = longSparseArray3;
                                        TLRPC.User user7 = (TLRPC.User) longSparseArray7.get(longValue3);
                                        longSparseArray2 = longSparseArray29;
                                        if (user7 != null) {
                                            int intValue6 = ((Integer) longSparseArray22.get(longValue3, 0)).intValue();
                                            if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i5) == 0 || longSparseArray23.indexOfKey(user7.id) < 0) {
                                                if (user7.bot) {
                                                    if ((MessagesController.DIALOG_FILTER_FLAG_BOTS & i5) != 0) {
                                                    }
                                                } else if (user7.self || user7.contact) {
                                                    if ((MessagesController.DIALOG_FILTER_FLAG_CONTACTS & i5) != 0) {
                                                    }
                                                } else if ((MessagesController.DIALOG_FILTER_FLAG_NON_CONTACTS & i5) != 0) {
                                                }
                                            }
                                            i6 += intValue6;
                                        }
                                    } else {
                                        i9 = size9;
                                        longSparseArray2 = longSparseArray29;
                                        longSparseArray6 = longSparseArray26;
                                        longSparseArray7 = longSparseArray3;
                                        TLRPC.Chat chat5 = (TLRPC.Chat) longSparseArray27.get(-longValue3);
                                        if (chat5 != null) {
                                            if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i5) == 0 || longSparseArray23.indexOfKey(-chat5.id) < 0) {
                                                if (!ChatObject.isChannel(chat5) || chat5.megagroup) {
                                                    if ((MessagesController.DIALOG_FILTER_FLAG_GROUPS & i5) != 0) {
                                                    }
                                                } else if ((MessagesController.DIALOG_FILTER_FLAG_CHANNELS & i5) != 0) {
                                                }
                                            }
                                            i6++;
                                        }
                                    }
                                    i39++;
                                    size9 = i9;
                                    longSparseArray3 = longSparseArray7;
                                    longSparseArray26 = longSparseArray6;
                                }
                            }
                            longSparseArray4 = longSparseArray26;
                            longSparseArray5 = longSparseArray3;
                            int size10 = dialogFilter2.neverShow.size();
                            for (int i40 = 0; i40 < size10; i40++) {
                                long longValue4 = dialogFilter2.neverShow.get(i40).longValue();
                                if (DialogObject.isUserDialog(longValue4)) {
                                    if (((TLRPC.User) longSparseArray4.get(longValue4)) != null) {
                                        i6--;
                                    }
                                    if (((TLRPC.User) longSparseArray5.get(longValue4)) != null) {
                                        i6 -= ((Integer) longSparseArray22.get(longValue4, 0)).intValue();
                                    }
                                } else if (((TLRPC.Chat) longSparseArray27.get(-longValue4)) != null) {
                                    i6--;
                                }
                            }
                            if (dialogFilter2 != null) {
                            }
                            i2 = i12 + 1;
                            size = i11;
                            messagesStorage3 = messagesStorage;
                            longSparseArray26 = longSparseArray4;
                            longSparseArray = longSparseArray5;
                            longSparseArray28 = longSparseArray2;
                        }
                    }
                    longSparseArray4 = longSparseArray26;
                    longSparseArray5 = longSparseArray3;
                    if (dialogFilter2 != null) {
                    }
                    i2 = i12 + 1;
                    size = i11;
                    messagesStorage3 = messagesStorage;
                    longSparseArray26 = longSparseArray4;
                    longSparseArray = longSparseArray5;
                    longSparseArray28 = longSparseArray2;
                }
                final MessagesStorage messagesStorage4 = messagesStorage3;
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda181
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesStorage.this.lambda$updateFiltersReadCounter$113();
                    }
                });
            }
        }
        longSparseArray = longSparseArray21;
        LongSparseArray longSparseArray262 = longSparseArray19;
        if (!arrayList15.isEmpty()) {
        }
        LongSparseArray longSparseArray272 = longSparseArray25;
        LongSparseArray longSparseArray282 = longSparseArray18;
        size = messagesStorage3.dialogFilters.size();
        i2 = 0;
        while (i2 < size + 2) {
        }
        final MessagesStorage messagesStorage42 = messagesStorage3;
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda181
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$updateFiltersReadCounter$113();
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Can't wrap try/catch for region: R(19:256|257|(15:259|233|234|(0)(0)|238|(0)|211|212|(0)|217|23|(0)|29|(0)|(0)(0))|251|232|233|234|(0)(0)|238|(0)|211|212|(0)|217|23|(0)|29|(0)|(0)(0)) */
    /* JADX WARN: Can't wrap try/catch for region: R(20:0|1|2|(7:297|298|299|300|(3:302|304|305)(1:315)|306|(1:308))(1:4)|5|(2:283|(6:285|(1:287)(1:296)|288|289|290|291))(8:8|9|10|11|12|13|14|15)|16|(21:225|226|227|228|(10:230|231|232|233|234|(2:236|237)(1:240)|238|(4:211|212|(2:214|215)|217)|23|(2:29|(1:(18:138|139|140|141|142|143|144|145|146|147|148|149|150|151|152|95|88|89)(4:(8:115|116|117|118|119|95|88|89)(5:85|86|(6:90|91|92|93|94|95)|88|89)|102|88|89))(11:32|(1:34)(1:(1:73)(2:74|(1:76)(8:77|37|38|(1:40)(1:69)|41|42|(4:44|46|47|48)|67)))|35|36|37|38|(0)(0)|41|42|(0)|67))(1:27))|251|232|233|234|(0)(0)|238|(0)|211|212|(0)|217|23|(1:25)|29|(0)|(0)(0))(1:19)|20|(0)|211|212|(0)|217|23|(0)|29|(0)|(0)(0)|(15:(0)|(1:125)|(1:165)|(1:161)|(1:180)|(1:128)|(1:168)|(1:269)|(0)|(0)|(0)|(0)|(0)|(0)|(0))) */
    /* JADX WARN: Code restructure failed: missing block: B:124:0x0424, code lost:
    
        if (r3 != null) goto L272;
     */
    /* JADX WARN: Code restructure failed: missing block: B:160:0x03ba, code lost:
    
        if (r6 == null) goto L276;
     */
    /* JADX WARN: Code restructure failed: missing block: B:164:0x039e, code lost:
    
        if (r6 != null) goto L207;
     */
    /* JADX WARN: Code restructure failed: missing block: B:179:0x0359, code lost:
    
        if (r6 != null) goto L197;
     */
    /* JADX WARN: Code restructure failed: missing block: B:222:0x01cc, code lost:
    
        r0 = move-exception;
     */
    /* JADX WARN: Code restructure failed: missing block: B:223:0x01cd, code lost:
    
        checkSQLException(r0);
        r5 = r5;
     */
    /* JADX WARN: Code restructure failed: missing block: B:224:0x01d0, code lost:
    
        if (r10 == null) goto L117;
     */
    /* JADX WARN: Code restructure failed: missing block: B:241:0x0190, code lost:
    
        r0 = move-exception;
     */
    /* JADX WARN: Code restructure failed: missing block: B:242:0x019a, code lost:
    
        checkSQLException(r0);
     */
    /* JADX WARN: Code restructure failed: missing block: B:243:0x019d, code lost:
    
        if (r10 != null) goto L103;
     */
    /* JADX WARN: Code restructure failed: missing block: B:244:0x019f, code lost:
    
        r10.dispose();
     */
    /* JADX WARN: Code restructure failed: missing block: B:268:0x00a9, code lost:
    
        if (r12 == null) goto L67;
     */
    /* JADX WARN: Code restructure failed: missing block: B:314:0x0053, code lost:
    
        if (r10 == null) goto L25;
     */
    /* JADX WARN: Code restructure failed: missing block: B:58:0x025c, code lost:
    
        return new long[]{r9, r24};
     */
    /* JADX WARN: Code restructure failed: missing block: B:68:0x0244, code lost:
    
        if (r6 == null) goto L167;
     */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:111:0x0484  */
    /* JADX WARN: Removed duplicated region for block: B:132:0x0429  */
    /* JADX WARN: Removed duplicated region for block: B:138:0x026a A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:188:0x030c  */
    /* JADX WARN: Removed duplicated region for block: B:190:0x0312  */
    /* JADX WARN: Removed duplicated region for block: B:199:0x03d5  */
    /* JADX WARN: Removed duplicated region for block: B:201:0x03da  */
    /* JADX WARN: Removed duplicated region for block: B:214:0x01c3 A[Catch: all -> 0x01c9, Exception -> 0x01cc, TRY_LEAVE, TryCatch #36 {Exception -> 0x01cc, blocks: (B:212:0x01a9, B:214:0x01c3), top: B:211:0x01a9, outer: #12 }] */
    /* JADX WARN: Removed duplicated region for block: B:22:0x01a7 A[ADDED_TO_REGION] */
    /* JADX WARN: Removed duplicated region for block: B:236:0x0187 A[Catch: all -> 0x018d, Exception -> 0x0190, TRY_LEAVE, TryCatch #10 {Exception -> 0x0190, blocks: (B:234:0x016d, B:236:0x0187), top: B:233:0x016d, outer: #42 }] */
    /* JADX WARN: Removed duplicated region for block: B:240:0x0192  */
    /* JADX WARN: Removed duplicated region for block: B:25:0x01db  */
    /* JADX WARN: Removed duplicated region for block: B:276:0x00ae  */
    /* JADX WARN: Removed duplicated region for block: B:31:0x01e3 A[ADDED_TO_REGION] */
    /* JADX WARN: Removed duplicated region for block: B:40:0x0211 A[Catch: all -> 0x023d, Exception -> 0x023f, TryCatch #9 {all -> 0x023d, blocks: (B:38:0x0208, B:40:0x0211, B:42:0x0216, B:44:0x021e, B:52:0x0247), top: B:32:0x01e5 }] */
    /* JADX WARN: Removed duplicated region for block: B:44:0x021e A[Catch: all -> 0x023d, Exception -> 0x023f, TRY_LEAVE, TryCatch #9 {all -> 0x023d, blocks: (B:38:0x0208, B:40:0x0211, B:42:0x0216, B:44:0x021e, B:52:0x0247), top: B:32:0x01e5 }] */
    /* JADX WARN: Removed duplicated region for block: B:63:0x025f  */
    /* JADX WARN: Removed duplicated region for block: B:65:0x0264  */
    /* JADX WARN: Removed duplicated region for block: B:69:0x0214  */
    /* JADX WARN: Removed duplicated region for block: B:84:0x03de  */
    /* JADX WARN: Type inference failed for: r11v10 */
    /* JADX WARN: Type inference failed for: r11v11 */
    /* JADX WARN: Type inference failed for: r11v12, types: [org.telegram.SQLite.SQLitePreparedStatement] */
    /* JADX WARN: Type inference failed for: r11v14 */
    /* JADX WARN: Type inference failed for: r11v17, types: [org.telegram.SQLite.SQLitePreparedStatement] */
    /* JADX WARN: Type inference failed for: r11v19 */
    /* JADX WARN: Type inference failed for: r11v2 */
    /* JADX WARN: Type inference failed for: r11v21 */
    /* JADX WARN: Type inference failed for: r11v24 */
    /* JADX WARN: Type inference failed for: r11v25 */
    /* JADX WARN: Type inference failed for: r11v9, types: [java.lang.Integer, java.lang.Object] */
    /* JADX WARN: Type inference failed for: r12v13, types: [java.lang.Object[]] */
    /* JADX WARN: Type inference failed for: r12v14, types: [java.lang.Object[]] */
    /* JADX WARN: Type inference failed for: r12v9, types: [java.lang.Object[]] */
    /* JADX WARN: Type inference failed for: r13v3, types: [java.lang.Object[]] */
    /* JADX WARN: Type inference failed for: r13v4, types: [java.lang.Object[]] */
    /* JADX WARN: Type inference failed for: r15v2, types: [java.lang.Object[]] */
    /* JADX WARN: Type inference failed for: r15v4, types: [java.lang.Object[]] */
    /* JADX WARN: Type inference failed for: r5v1, types: [java.lang.Object[]] */
    /* JADX WARN: Type inference failed for: r5v10 */
    /* JADX WARN: Type inference failed for: r5v18 */
    /* JADX WARN: Type inference failed for: r5v19 */
    /* JADX WARN: Type inference failed for: r5v20 */
    /* JADX WARN: Type inference failed for: r5v22, types: [org.telegram.SQLite.SQLitePreparedStatement] */
    /* JADX WARN: Type inference failed for: r5v23 */
    /* JADX WARN: Type inference failed for: r5v24 */
    /* JADX WARN: Type inference failed for: r5v25 */
    /* JADX WARN: Type inference failed for: r5v4 */
    /* JADX WARN: Type inference failed for: r5v5, types: [java.lang.Object[]] */
    /* JADX WARN: Type inference failed for: r5v7 */
    /* JADX WARN: Type inference failed for: r5v8 */
    /* JADX WARN: Type inference failed for: r5v9 */
    /* JADX WARN: Type inference failed for: r6v1, types: [java.lang.Object[]] */
    /* JADX WARN: Type inference failed for: r6v7, types: [java.lang.Object[]] */
    /* renamed from: updateMessageStateAndIdInternal, reason: merged with bridge method [inline-methods] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public long[] lambda$updateMessageStateAndId$196(long j, long j2, Integer num, int i, int i2, int i3, int i4) {
        Integer num2;
        SQLiteCursor sQLiteCursor;
        long j3;
        ?? r11;
        Integer num3;
        SQLiteCursor sQLiteCursor2;
        SQLiteCursor sQLiteCursor3;
        long j4;
        int i5;
        ?? r5;
        int i6;
        long j5;
        SQLitePreparedStatement sQLitePreparedStatement;
        SQLitePreparedStatement sQLitePreparedStatement2;
        SQLitePreparedStatement sQLitePreparedStatement3;
        SQLitePreparedStatement sQLitePreparedStatement4;
        SQLitePreparedStatement sQLitePreparedStatement5;
        SQLitePreparedStatement sQLitePreparedStatement6;
        SQLitePreparedStatement sQLitePreparedStatement7;
        SQLiteDatabase sQLiteDatabase;
        String str;
        SQLitePreparedStatement sQLitePreparedStatement8;
        SQLitePreparedStatement sQLitePreparedStatement9;
        int i7 = i3;
        SQLiteCursor sQLiteCursor4 = null;
        try {
            if (num == null) {
                try {
                    sQLiteCursor = this.database.queryFinalized(String.format(Locale.US, "SELECT mid, uid FROM randoms_v2 WHERE random_id = %d LIMIT 1", Long.valueOf(j)), new Object[0]);
                    try {
                        if (sQLiteCursor.next()) {
                            num2 = Integer.valueOf(sQLiteCursor.intValue(0));
                            try {
                                j3 = sQLiteCursor.longValue(1);
                                num3 = num2;
                            } catch (Exception e) {
                                e = e;
                                checkSQLException(e);
                                j3 = j2;
                                num3 = num2;
                                r11 = num2;
                            }
                        } else {
                            j3 = j2;
                            num3 = num;
                        }
                    } catch (Exception e2) {
                        e = e2;
                        num2 = num;
                    }
                } catch (Exception e3) {
                    e = e3;
                    num2 = num;
                    sQLiteCursor = null;
                } catch (Throwable th) {
                    th = th;
                    if (sQLiteCursor4 != null) {
                        sQLiteCursor4.dispose();
                    }
                    throw th;
                }
                sQLiteCursor.dispose();
                r11 = num3;
                if (r11 == 0) {
                    return null;
                }
            } else {
                j3 = j2;
                r11 = num;
                sQLiteCursor = null;
            }
            getUserConfig().getClientUserId();
            int intValue = r11.intValue();
            if (r11.intValue() >= 0 || i7 != 1) {
                sQLiteCursor2 = sQLiteCursor;
                if (r11.intValue() > 0) {
                    TLRPC.TL_updateDeleteScheduledMessages tL_updateDeleteScheduledMessages = new TLRPC.TL_updateDeleteScheduledMessages();
                    tL_updateDeleteScheduledMessages.messages.add(r11);
                    if (DialogObject.isChatDialog(j3)) {
                        TLRPC.TL_peerChannel tL_peerChannel = new TLRPC.TL_peerChannel();
                        tL_updateDeleteScheduledMessages.peer = tL_peerChannel;
                        tL_peerChannel.channel_id = -j3;
                    } else {
                        TLRPC.TL_peerUser tL_peerUser = new TLRPC.TL_peerUser();
                        tL_updateDeleteScheduledMessages.peer = tL_peerUser;
                        tL_peerUser.user_id = j3;
                    }
                    final TLRPC.TL_updates tL_updates = new TLRPC.TL_updates();
                    tL_updates.updates.add(tL_updateDeleteScheduledMessages);
                    Utilities.stageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda34
                        @Override // java.lang.Runnable
                        public final void run() {
                            MessagesStorage.this.lambda$updateMessageStateAndIdInternal$195(tL_updates);
                        }
                    });
                    try {
                        this.database.executeFast(String.format(Locale.US, "DELETE FROM randoms_v2 WHERE random_id = %d AND mid = %d AND uid = %d", new Object[]{Long.valueOf(j), r11, Long.valueOf(j3)})).stepThis().dispose();
                        return null;
                    } catch (Exception e4) {
                        checkSQLException(e4);
                        return null;
                    }
                }
            } else {
                try {
                    sQLitePreparedStatement9 = this.database.executeFast("UPDATE randoms_v2 SET mid = ? WHERE random_id = ? AND mid = ?");
                    try {
                        try {
                            sQLitePreparedStatement9.bindInteger(1, i);
                            sQLiteCursor2 = sQLiteCursor;
                        } catch (Exception e5) {
                            e = e5;
                            sQLiteCursor2 = sQLiteCursor;
                        }
                        try {
                            sQLitePreparedStatement9.bindLong(2, j);
                            sQLitePreparedStatement9.bindInteger(3, intValue);
                            sQLitePreparedStatement9.step();
                        } catch (Exception e6) {
                            e = e6;
                            checkSQLException(e);
                        }
                    } catch (Throwable th2) {
                        th = th2;
                        sQLitePreparedStatement8 = sQLitePreparedStatement9;
                        if (sQLitePreparedStatement8 != null) {
                            sQLitePreparedStatement8.dispose();
                        }
                        throw th;
                    }
                } catch (Exception e7) {
                    e = e7;
                    sQLiteCursor2 = sQLiteCursor;
                    sQLitePreparedStatement9 = null;
                } catch (Throwable th3) {
                    th = th3;
                    sQLitePreparedStatement8 = null;
                    if (sQLitePreparedStatement8 != null) {
                    }
                    throw th;
                }
                sQLitePreparedStatement9.dispose();
            }
            try {
                if (i7 == -1 || i7 == 0) {
                    try {
                        sQLiteCursor3 = this.database.queryFinalized(String.format(Locale.US, "SELECT uid FROM messages_v2 WHERE mid = %d LIMIT 1", new Object[]{r11}), new Object[0]);
                        try {
                            try {
                            } catch (Throwable th4) {
                                th = th4;
                                if (sQLiteCursor3 != null) {
                                    sQLiteCursor3.dispose();
                                }
                                throw th;
                            }
                        } catch (Exception e8) {
                            e = e8;
                            checkSQLException(e);
                            if (sQLiteCursor3 == null) {
                                j4 = 0;
                                sQLiteCursor3 = this.database.queryFinalized(String.format(Locale.US, "SELECT topic_id FROM quick_replies_messages WHERE mid = %d LIMIT 1", new Object[]{r11}), new Object[0]);
                                if (sQLiteCursor3.next()) {
                                }
                                sQLiteCursor3.dispose();
                                r5 = i7;
                                i6 = i5;
                                if (r5 != -1) {
                                }
                                sQLiteCursor3 = this.database.queryFinalized(String.format(Locale.US, "SELECT uid FROM scheduled_messages_v2 WHERE mid = %d LIMIT 1", new Object[]{r11}), new Object[0]);
                                r5 = r5;
                                if (sQLiteCursor3.next()) {
                                }
                                sQLiteCursor3.dispose();
                                j5 = j4;
                                if (j5 != 0) {
                                }
                                SQLitePreparedStatement sQLitePreparedStatement10 = null;
                                if (intValue == i) {
                                }
                                if (r5 != 0) {
                                }
                            }
                            j4 = 0;
                            sQLiteCursor3.dispose();
                            sQLiteCursor3 = this.database.queryFinalized(String.format(Locale.US, "SELECT topic_id FROM quick_replies_messages WHERE mid = %d LIMIT 1", new Object[]{r11}), new Object[0]);
                            if (sQLiteCursor3.next()) {
                            }
                            sQLiteCursor3.dispose();
                            r5 = i7;
                            i6 = i5;
                            if (r5 != -1) {
                            }
                            sQLiteCursor3 = this.database.queryFinalized(String.format(Locale.US, "SELECT uid FROM scheduled_messages_v2 WHERE mid = %d LIMIT 1", new Object[]{r11}), new Object[0]);
                            r5 = r5;
                            if (sQLiteCursor3.next()) {
                            }
                            sQLiteCursor3.dispose();
                            j5 = j4;
                            if (j5 != 0) {
                            }
                            SQLitePreparedStatement sQLitePreparedStatement102 = null;
                            if (intValue == i) {
                            }
                            if (r5 != 0) {
                            }
                        }
                    } catch (Exception e9) {
                        e = e9;
                        sQLiteCursor3 = sQLiteCursor2;
                    } catch (Throwable th5) {
                        th = th5;
                        sQLiteCursor3 = sQLiteCursor2;
                    }
                    try {
                        if (sQLiteCursor3.next()) {
                            j4 = sQLiteCursor3.longValue(0);
                            i7 = 0;
                            sQLiteCursor3.dispose();
                            sQLiteCursor3 = this.database.queryFinalized(String.format(Locale.US, "SELECT topic_id FROM quick_replies_messages WHERE mid = %d LIMIT 1", new Object[]{r11}), new Object[0]);
                            if (sQLiteCursor3.next()) {
                                i5 = i4;
                            } else {
                                i5 = sQLiteCursor3.intValue(0);
                                i7 = 2;
                            }
                            sQLiteCursor3.dispose();
                            r5 = i7;
                            i6 = i5;
                            if (r5 != -1 || r5 == 1) {
                                sQLiteCursor3 = this.database.queryFinalized(String.format(Locale.US, "SELECT uid FROM scheduled_messages_v2 WHERE mid = %d LIMIT 1", new Object[]{r11}), new Object[0]);
                                r5 = r5;
                                if (sQLiteCursor3.next()) {
                                    j4 = sQLiteCursor3.longValue(0);
                                    r5 = 1;
                                }
                                sQLiteCursor3.dispose();
                            }
                            j5 = j4;
                            if (j5 != 0 && r5 != 2) {
                                return null;
                            }
                            SQLitePreparedStatement sQLitePreparedStatement1022 = null;
                            if (intValue == i || i2 == 0) {
                                if (r5 != 0) {
                                    if (r5 == 1) {
                                        try {
                                            sQLitePreparedStatement5 = this.database.executeFast("UPDATE scheduled_messages_v2 SET mid = ?, send_state = 0 WHERE mid = ? AND uid = ?");
                                            try {
                                                try {
                                                    sQLitePreparedStatement5.bindInteger(1, i);
                                                    sQLitePreparedStatement5.bindInteger(2, intValue);
                                                    sQLitePreparedStatement5.bindLong(3, j5);
                                                    sQLitePreparedStatement5.step();
                                                    sQLitePreparedStatement1022 = sQLitePreparedStatement5;
                                                    sQLitePreparedStatement1022.dispose();
                                                } catch (Exception unused) {
                                                    try {
                                                        this.database.executeFast(String.format(Locale.US, "DELETE FROM scheduled_messages_v2 WHERE mid = %d AND uid = %d", new Object[]{r11, Long.valueOf(j5)})).stepThis().dispose();
                                                    } catch (Exception e10) {
                                                        checkSQLException(e10);
                                                    }
                                                }
                                            } catch (Throwable th6) {
                                                th = th6;
                                                sQLitePreparedStatement4 = sQLitePreparedStatement5;
                                                if (sQLitePreparedStatement4 != null) {
                                                    sQLitePreparedStatement4.dispose();
                                                }
                                                throw th;
                                            }
                                        } catch (Exception unused2) {
                                            sQLitePreparedStatement5 = null;
                                        } catch (Throwable th7) {
                                            th = th7;
                                            sQLitePreparedStatement4 = null;
                                            if (sQLitePreparedStatement4 != null) {
                                            }
                                            throw th;
                                        }
                                        return new long[]{j5, r11.intValue()};
                                    }
                                    try {
                                        if (r5 == 2) {
                                            try {
                                                r5 = this.database.executeFast("UPDATE quick_replies_messages SET mid = ?, topic_id = ?, send_state = 0 WHERE mid = ? AND topic_id = ?");
                                                try {
                                                    r5.bindInteger(1, i);
                                                    r5.bindInteger(2, i4);
                                                    r5.bindInteger(3, intValue);
                                                    r5.bindLong(4, i6);
                                                    r5.step();
                                                    sQLitePreparedStatement1022 = r5;
                                                    sQLitePreparedStatement1022.dispose();
                                                } catch (Exception unused3) {
                                                    try {
                                                        this.database.executeFast(String.format(Locale.US, "DELETE FROM quick_replies_messages WHERE mid = %d AND topic_id = %d", new Object[]{r11, Integer.valueOf(i6)})).stepThis().dispose();
                                                    } catch (Exception e11) {
                                                        checkSQLException(e11);
                                                    }
                                                    if (r5 != 0) {
                                                        sQLitePreparedStatement5 = r5;
                                                        sQLitePreparedStatement5.dispose();
                                                    }
                                                    return new long[]{j5, r11.intValue()};
                                                }
                                            } catch (Exception unused4) {
                                                r5 = 0;
                                            } catch (Throwable th8) {
                                                th = th8;
                                                sQLitePreparedStatement6 = null;
                                                if (sQLitePreparedStatement6 != null) {
                                                }
                                                throw th;
                                            }
                                        }
                                        return new long[]{j5, r11.intValue()};
                                    } catch (Throwable th9) {
                                        th = th9;
                                        sQLitePreparedStatement6 = r5;
                                        if (sQLitePreparedStatement6 != null) {
                                            sQLitePreparedStatement6.dispose();
                                        }
                                        throw th;
                                    }
                                    sQLitePreparedStatement5.dispose();
                                    return new long[]{j5, r11.intValue()};
                                }
                                try {
                                    sQLitePreparedStatement3 = this.database.executeFast("UPDATE messages_v2 SET mid = ?, send_state = 0 WHERE mid = ? AND uid = ?");
                                    try {
                                        sQLitePreparedStatement3.bindInteger(1, i);
                                        sQLitePreparedStatement3.bindInteger(2, intValue);
                                        sQLitePreparedStatement3.bindLong(3, j5);
                                        sQLitePreparedStatement3.step();
                                        sQLitePreparedStatement = this.database.executeFast("UPDATE messages_topics SET mid = ?, send_state = 0 WHERE mid = ? AND uid = ?");
                                        try {
                                            try {
                                                sQLitePreparedStatement.bindInteger(1, i);
                                                sQLitePreparedStatement.bindInteger(2, intValue);
                                                sQLitePreparedStatement.bindLong(3, j5);
                                                sQLitePreparedStatement.step();
                                                sQLitePreparedStatement3.dispose();
                                                sQLitePreparedStatement.dispose();
                                            } catch (Exception unused5) {
                                                try {
                                                    SQLiteDatabase sQLiteDatabase2 = this.database;
                                                    Locale locale = Locale.US;
                                                    sQLiteDatabase2.executeFast(String.format(locale, "DELETE FROM messages_v2 WHERE mid = %d AND uid = %d", new Object[]{r11, Long.valueOf(j5)})).stepThis().dispose();
                                                    this.database.executeFast(String.format(locale, "DELETE FROM messages_seq WHERE mid = %d", new Object[]{r11})).stepThis().dispose();
                                                    this.database.executeFast(String.format(locale, "DELETE FROM messages_topics WHERE mid = %d AND uid = %d", new Object[]{r11, Long.valueOf(j5)})).stepThis().dispose();
                                                } catch (Exception e12) {
                                                    checkSQLException(e12);
                                                    if (sQLitePreparedStatement3 != null) {
                                                        sQLitePreparedStatement3.dispose();
                                                        sQLitePreparedStatement3 = null;
                                                    }
                                                    if (sQLitePreparedStatement != null) {
                                                        sQLitePreparedStatement.dispose();
                                                    }
                                                    sQLitePreparedStatement1022 = sQLitePreparedStatement3;
                                                    try {
                                                        sQLitePreparedStatement1022 = this.database.executeFast("UPDATE media_v4 SET mid = ? WHERE mid = ? AND uid = ?");
                                                        sQLitePreparedStatement1022.bindInteger(1, i);
                                                        sQLitePreparedStatement1022.bindInteger(2, intValue);
                                                        sQLitePreparedStatement1022.bindLong(3, j5);
                                                        sQLitePreparedStatement1022.step();
                                                        sQLitePreparedStatement1022.dispose();
                                                        sQLitePreparedStatement1022 = null;
                                                        try {
                                                            sQLitePreparedStatement1022 = this.database.executeFast("UPDATE media_topics SET mid = ? WHERE mid = ? AND uid = ?");
                                                            sQLitePreparedStatement1022.bindInteger(1, i);
                                                            sQLitePreparedStatement1022.bindInteger(2, intValue);
                                                            sQLitePreparedStatement1022.bindLong(3, j5);
                                                            sQLitePreparedStatement1022.step();
                                                        } catch (Exception unused6) {
                                                            this.database.executeFast(String.format(Locale.US, "DELETE FROM media_topics WHERE mid = %d AND uid = %d", new Object[]{r11, Long.valueOf(j5)})).stepThis().dispose();
                                                        }
                                                        sQLitePreparedStatement1022.dispose();
                                                        sQLitePreparedStatement1022 = null;
                                                        try {
                                                            sQLitePreparedStatement1022 = this.database.executeFast("UPDATE dialogs SET last_mid = ? WHERE last_mid = ?");
                                                            sQLitePreparedStatement1022.bindInteger(1, i);
                                                            sQLitePreparedStatement1022.bindInteger(2, intValue);
                                                            sQLitePreparedStatement1022.step();
                                                            sQLitePreparedStatement1022.dispose();
                                                            return new long[]{j5, r11.intValue()};
                                                        } catch (Throwable th10) {
                                                            if (sQLitePreparedStatement1022 != null) {
                                                                sQLitePreparedStatement1022.dispose();
                                                            }
                                                            throw th10;
                                                        }
                                                    } finally {
                                                        if (sQLitePreparedStatement1022 != null) {
                                                            sQLitePreparedStatement1022.dispose();
                                                        }
                                                    }
                                                }
                                                if (sQLitePreparedStatement3 != null) {
                                                }
                                                if (sQLitePreparedStatement != null) {
                                                }
                                                sQLitePreparedStatement1022 = sQLitePreparedStatement3;
                                                try {
                                                    sQLitePreparedStatement1022 = this.database.executeFast("UPDATE media_v4 SET mid = ? WHERE mid = ? AND uid = ?");
                                                    sQLitePreparedStatement1022.bindInteger(1, i);
                                                    sQLitePreparedStatement1022.bindInteger(2, intValue);
                                                    sQLitePreparedStatement1022.bindLong(3, j5);
                                                    sQLitePreparedStatement1022.step();
                                                } catch (Exception unused7) {
                                                    this.database.executeFast(String.format(Locale.US, "DELETE FROM media_v4 WHERE mid = %d AND uid = %d", new Object[]{r11, Long.valueOf(j5)})).stepThis().dispose();
                                                }
                                                sQLitePreparedStatement1022.dispose();
                                                sQLitePreparedStatement1022 = null;
                                                try {
                                                    sQLitePreparedStatement1022 = this.database.executeFast("UPDATE media_topics SET mid = ? WHERE mid = ? AND uid = ?");
                                                    sQLitePreparedStatement1022.bindInteger(1, i);
                                                    sQLitePreparedStatement1022.bindInteger(2, intValue);
                                                    sQLitePreparedStatement1022.bindLong(3, j5);
                                                    sQLitePreparedStatement1022.step();
                                                } catch (Exception e13) {
                                                    checkSQLException(e13);
                                                }
                                                sQLitePreparedStatement1022.dispose();
                                                sQLitePreparedStatement1022 = null;
                                                try {
                                                    sQLitePreparedStatement1022 = this.database.executeFast("UPDATE dialogs SET last_mid = ? WHERE last_mid = ?");
                                                    sQLitePreparedStatement1022.bindInteger(1, i);
                                                    sQLitePreparedStatement1022.bindInteger(2, intValue);
                                                    sQLitePreparedStatement1022.step();
                                                } catch (Exception e14) {
                                                    checkSQLException(e14);
                                                }
                                                sQLitePreparedStatement1022.dispose();
                                                return new long[]{j5, r11.intValue()};
                                            }
                                        } catch (Throwable th11) {
                                            th = th11;
                                            sQLitePreparedStatement2 = sQLitePreparedStatement3;
                                            if (sQLitePreparedStatement2 != null) {
                                                sQLitePreparedStatement2.dispose();
                                            }
                                            if (sQLitePreparedStatement != null) {
                                                sQLitePreparedStatement.dispose();
                                            }
                                            throw th;
                                        }
                                    } catch (Exception unused8) {
                                        sQLitePreparedStatement = null;
                                    } catch (Throwable th12) {
                                        th = th12;
                                        sQLitePreparedStatement2 = sQLitePreparedStatement3;
                                        sQLitePreparedStatement = null;
                                        if (sQLitePreparedStatement2 != null) {
                                        }
                                        if (sQLitePreparedStatement != null) {
                                        }
                                        throw th;
                                    }
                                } catch (Exception unused9) {
                                    sQLitePreparedStatement3 = null;
                                    sQLitePreparedStatement = null;
                                } catch (Throwable th13) {
                                    th = th13;
                                    sQLitePreparedStatement = null;
                                    sQLitePreparedStatement2 = null;
                                }
                                try {
                                    sQLitePreparedStatement1022 = this.database.executeFast("UPDATE media_v4 SET mid = ? WHERE mid = ? AND uid = ?");
                                    sQLitePreparedStatement1022.bindInteger(1, i);
                                    sQLitePreparedStatement1022.bindInteger(2, intValue);
                                    sQLitePreparedStatement1022.bindLong(3, j5);
                                    sQLitePreparedStatement1022.step();
                                } catch (Exception e15) {
                                    checkSQLException(e15);
                                }
                                sQLitePreparedStatement1022.dispose();
                                sQLitePreparedStatement1022 = null;
                                try {
                                    sQLitePreparedStatement1022 = this.database.executeFast("UPDATE media_topics SET mid = ? WHERE mid = ? AND uid = ?");
                                    sQLitePreparedStatement1022.bindInteger(1, i);
                                    sQLitePreparedStatement1022.bindInteger(2, intValue);
                                    sQLitePreparedStatement1022.bindLong(3, j5);
                                    sQLitePreparedStatement1022.step();
                                    sQLitePreparedStatement1022.dispose();
                                    sQLitePreparedStatement1022 = null;
                                    sQLitePreparedStatement1022 = this.database.executeFast("UPDATE dialogs SET last_mid = ? WHERE last_mid = ?");
                                    sQLitePreparedStatement1022.bindInteger(1, i);
                                    sQLitePreparedStatement1022.bindInteger(2, intValue);
                                    sQLitePreparedStatement1022.step();
                                    sQLitePreparedStatement1022.dispose();
                                    return new long[]{j5, r11.intValue()};
                                } finally {
                                    if (sQLitePreparedStatement1022 != null) {
                                        sQLitePreparedStatement1022.dispose();
                                    }
                                }
                            }
                            try {
                                try {
                                    try {
                                        if (r5 == 0) {
                                            sQLiteDatabase = this.database;
                                            str = "UPDATE messages_v2 SET send_state = 0, date = ? WHERE mid = ? AND uid = ?";
                                        } else if (r5 == 1) {
                                            sQLiteDatabase = this.database;
                                            str = "UPDATE scheduled_messages_v2 SET send_state = 0, date = ? WHERE mid = ? AND uid = ?";
                                        } else if (r5 == 2) {
                                            sQLiteDatabase = this.database;
                                            str = "UPDATE quick_replies_messages SET send_state = 0, date = ? WHERE mid = ? AND topic_id = ?";
                                        } else {
                                            r11 = 0;
                                            r11.bindInteger(1, i2);
                                            r11.bindInteger(2, i);
                                            r11.bindLong(3, r5 != 2 ? i6 : j5);
                                            r11.step();
                                            if (r5 == 0) {
                                                SQLitePreparedStatement executeFast = this.database.executeFast("UPDATE messages_topics SET send_state = 0, date = ? WHERE mid = ? AND uid = ?");
                                                try {
                                                    executeFast.bindInteger(1, i2);
                                                    executeFast.bindInteger(2, i);
                                                    executeFast.bindLong(3, j5);
                                                    executeFast.step();
                                                    sQLitePreparedStatement1022 = executeFast;
                                                } catch (Exception e16) {
                                                    e = e16;
                                                    sQLitePreparedStatement1022 = executeFast;
                                                    checkSQLException(e);
                                                    if (r11 != 0) {
                                                        r11.dispose();
                                                    }
                                                } catch (Throwable th14) {
                                                    th = th14;
                                                    sQLitePreparedStatement1022 = executeFast;
                                                    sQLitePreparedStatement7 = r11;
                                                    if (sQLitePreparedStatement7 != null) {
                                                    }
                                                    if (sQLitePreparedStatement1022 != null) {
                                                    }
                                                    throw th;
                                                }
                                            }
                                            r11.dispose();
                                        }
                                        r11.bindInteger(1, i2);
                                        r11.bindInteger(2, i);
                                        r11.bindLong(3, r5 != 2 ? i6 : j5);
                                        r11.step();
                                        if (r5 == 0) {
                                        }
                                        r11.dispose();
                                    } catch (Exception e17) {
                                        e = e17;
                                    }
                                    r11 = sQLiteDatabase.executeFast(str);
                                } catch (Throwable th15) {
                                    th = th15;
                                }
                            } catch (Exception e18) {
                                e = e18;
                                r11 = 0;
                            } catch (Throwable th16) {
                                th = th16;
                                sQLitePreparedStatement7 = null;
                                if (sQLitePreparedStatement7 != null) {
                                    sQLitePreparedStatement7.dispose();
                                }
                                if (sQLitePreparedStatement1022 != null) {
                                    sQLitePreparedStatement1022.dispose();
                                }
                                throw th;
                            }
                        }
                        sQLiteCursor3 = this.database.queryFinalized(String.format(Locale.US, "SELECT topic_id FROM quick_replies_messages WHERE mid = %d LIMIT 1", new Object[]{r11}), new Object[0]);
                        if (sQLiteCursor3.next()) {
                        }
                        sQLiteCursor3.dispose();
                        r5 = i7;
                        i6 = i5;
                        if (r5 != -1) {
                        }
                        sQLiteCursor3 = this.database.queryFinalized(String.format(Locale.US, "SELECT uid FROM scheduled_messages_v2 WHERE mid = %d LIMIT 1", new Object[]{r11}), new Object[0]);
                        r5 = r5;
                        if (sQLiteCursor3.next()) {
                        }
                        sQLiteCursor3.dispose();
                        j5 = j4;
                        if (j5 != 0) {
                        }
                        SQLitePreparedStatement sQLitePreparedStatement10222 = null;
                        if (intValue == i) {
                        }
                        if (r5 != 0) {
                        }
                    } catch (Throwable th17) {
                        if (sQLiteCursor3 != null) {
                            sQLiteCursor3.dispose();
                        }
                        throw th17;
                    }
                    j4 = 0;
                    sQLiteCursor3.dispose();
                } else {
                    sQLiteCursor3 = sQLiteCursor2;
                    j4 = 0;
                }
                sQLiteCursor3 = this.database.queryFinalized(String.format(Locale.US, "SELECT uid FROM scheduled_messages_v2 WHERE mid = %d LIMIT 1", new Object[]{r11}), new Object[0]);
                r5 = r5;
                if (sQLiteCursor3.next()) {
                }
                sQLiteCursor3.dispose();
                j5 = j4;
                if (j5 != 0) {
                }
                SQLitePreparedStatement sQLitePreparedStatement102222 = null;
                if (intValue == i) {
                }
                if (r5 != 0) {
                }
            } catch (Throwable th18) {
                if (sQLiteCursor3 != null) {
                    sQLiteCursor3.dispose();
                }
                throw th18;
            }
            r5 = i7;
            i6 = i4;
            if (r5 != -1) {
            }
        } catch (Throwable th19) {
            th = th19;
            sQLiteCursor4 = sQLiteCursor;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:113:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:26:0x02a7  */
    /* JADX WARN: Removed duplicated region for block: B:28:0x02ac  */
    /* JADX WARN: Removed duplicated region for block: B:31:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:37:0x02bf  */
    /* JADX WARN: Removed duplicated region for block: B:39:0x02c4  */
    /* JADX WARN: Removed duplicated region for block: B:99:0x01df A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* renamed from: updateRepliesMaxReadIdInternal, reason: merged with bridge method [inline-methods] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void lambda$updateRepliesMaxReadId$186(final long j, final int i, final int i2, int i3) {
        SQLitePreparedStatement sQLitePreparedStatement;
        SQLitePreparedStatement sQLitePreparedStatement2;
        SQLiteCursor sQLiteCursor;
        SQLiteCursor sQLiteCursor2;
        SQLitePreparedStatement sQLitePreparedStatement3;
        SQLiteCursor sQLiteCursor3;
        SQLiteCursor sQLiteCursor4;
        Locale locale;
        int i4;
        int i5;
        int i6;
        SQLitePreparedStatement executeFast;
        TLRPC.MessageReplies messageReplies;
        NativeByteBuffer byteBufferValue;
        long j2 = -j;
        try {
            try {
                if (!isForum(j2)) {
                    SQLitePreparedStatement executeFast2 = this.database.executeFast("UPDATE messages_v2 SET replies_data = ? WHERE mid = ? AND uid = ?");
                    try {
                        SQLiteCursor queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT replies_data FROM messages_v2 WHERE mid = %d AND uid = %d", Integer.valueOf(i), Long.valueOf(j2)), new Object[0]);
                        try {
                            if (!queryFinalized.next() || (byteBufferValue = queryFinalized.byteBufferValue(0)) == null) {
                                messageReplies = null;
                            } else {
                                messageReplies = TLRPC.MessageReplies.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                                byteBufferValue.reuse();
                            }
                            queryFinalized.dispose();
                            if (messageReplies != null) {
                                messageReplies.read_max_id = i2;
                                executeFast2.requery();
                                NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(messageReplies.getObjectSize());
                                messageReplies.serializeToStream(nativeByteBuffer);
                                executeFast2.bindByteBuffer(1, nativeByteBuffer);
                                executeFast2.bindInteger(2, i);
                                executeFast2.bindLong(3, j2);
                                executeFast2.step();
                                nativeByteBuffer.reuse();
                            }
                            executeFast2.dispose();
                        } catch (Exception e) {
                            e = e;
                            sQLiteCursor2 = queryFinalized;
                            sQLitePreparedStatement = executeFast2;
                            try {
                                checkSQLException(e);
                                if (sQLitePreparedStatement != null) {
                                    sQLitePreparedStatement.dispose();
                                }
                                if (sQLiteCursor2 != null) {
                                    sQLiteCursor2.dispose();
                                    return;
                                }
                                return;
                            } catch (Throwable th) {
                                th = th;
                                SQLiteCursor sQLiteCursor5 = sQLiteCursor2;
                                sQLitePreparedStatement3 = sQLitePreparedStatement;
                                sQLiteCursor3 = sQLiteCursor5;
                                SQLitePreparedStatement sQLitePreparedStatement4 = sQLitePreparedStatement3;
                                sQLiteCursor = sQLiteCursor3;
                                sQLitePreparedStatement2 = sQLitePreparedStatement4;
                                if (sQLitePreparedStatement2 != null) {
                                    sQLitePreparedStatement2.dispose();
                                }
                                if (sQLiteCursor != null) {
                                    sQLiteCursor.dispose();
                                }
                                throw th;
                            }
                        } catch (Throwable th2) {
                            th = th2;
                            sQLiteCursor = queryFinalized;
                            sQLitePreparedStatement2 = executeFast2;
                            if (sQLitePreparedStatement2 != null) {
                            }
                            if (sQLiteCursor != null) {
                            }
                            throw th;
                        }
                    } catch (Exception e2) {
                        e = e2;
                        sQLitePreparedStatement = executeFast2;
                        sQLiteCursor2 = null;
                        checkSQLException(e);
                        if (sQLitePreparedStatement != null) {
                        }
                        if (sQLiteCursor2 != null) {
                        }
                    } catch (Throwable th3) {
                        th = th3;
                        sQLitePreparedStatement2 = executeFast2;
                        sQLiteCursor = null;
                        if (sQLitePreparedStatement2 != null) {
                        }
                        if (sQLiteCursor != null) {
                        }
                        throw th;
                    }
                }
                try {
                    SQLiteDatabase sQLiteDatabase = this.database;
                    locale = Locale.US;
                    sQLiteCursor4 = sQLiteDatabase.queryFinalized(String.format(locale, "SELECT max_read_id FROM topics WHERE did = %d AND topic_id = %d", Long.valueOf(j2), Integer.valueOf(i)), new Object[0]);
                } catch (Exception e3) {
                    e = e3;
                    sQLiteCursor4 = null;
                } catch (Throwable th4) {
                    th = th4;
                    sQLiteCursor4 = null;
                }
            } catch (Throwable th5) {
                th = th5;
                sQLitePreparedStatement2 = null;
            }
        } catch (Exception e4) {
            e = e4;
            sQLitePreparedStatement = null;
        }
        try {
            boolean z = sQLiteCursor4.next() && i2 >= sQLiteCursor4.intValue(0);
            sQLiteCursor4.dispose();
            this.database.executeFast(String.format(locale, "UPDATE messages_topics SET read_state = read_state | 1 WHERE uid = %d AND topic_id = %d AND mid <= %d AND read_state IN(0, 2) AND out = 0", Long.valueOf(j2), Integer.valueOf(i), Integer.valueOf(i2))).stepThis().dispose();
            this.database.executeFast(String.format(locale, "UPDATE messages_topics SET read_state = read_state | 2 WHERE uid = %d AND topic_id = %d AND mid <= %d AND read_state IN(0, 1) AND out = 0", Long.valueOf(j2), Integer.valueOf(i), Integer.valueOf(i2))).stepThis().dispose();
            if (i3 < 0) {
                SQLiteCursor queryFinalized2 = this.database.queryFinalized(String.format(locale, "SELECT count(mid) FROM messages_topics WHERE uid = %d AND topic_id = %d AND mid > %d AND read_state IN(0, 2) AND out = 0", Long.valueOf(j2), Integer.valueOf(i), Integer.valueOf(i2)), new Object[0]);
                i6 = queryFinalized2.next() ? queryFinalized2.intValue(0) : 0;
                queryFinalized2.dispose();
                if (i6 != 0) {
                    int i7 = i6;
                    SQLiteCursor queryFinalized3 = this.database.queryFinalized(String.format(locale, "SELECT count(mid) FROM messages_topics WHERE uid = %d AND topic_id = %d AND mid > %d AND read_state IN(0, 1) AND out = 0", Long.valueOf(j2), Integer.valueOf(i), Integer.valueOf(i2)), new Object[0]);
                    int intValue = queryFinalized3.next() ? queryFinalized3.intValue(0) : -1;
                    queryFinalized3.dispose();
                    sQLiteCursor4 = this.database.queryFinalized(String.format(locale, "SELECT unread_mentions FROM topics WHERE did = %d AND topic_id = %d", Long.valueOf(j2), Integer.valueOf(i)), new Object[0]);
                    int intValue2 = sQLiteCursor4.next() ? sQLiteCursor4.intValue(0) : 0;
                    sQLiteCursor4.dispose();
                    i4 = i7;
                    i5 = intValue > intValue2 ? intValue2 : intValue;
                    if (z) {
                        return;
                    }
                    try {
                        if (i5 >= 0) {
                            if (BuildVars.DEBUG_PRIVATE_VERSION && i5 > 0) {
                                FileLog.d("(updateRepliesMaxReadIdInternal) new unread mentions " + i5 + " for dialog_id=" + j2 + " topic_id=" + i);
                            }
                            executeFast = this.database.executeFast(String.format(Locale.ENGLISH, "UPDATE topics SET max_read_id = %d, unread_count = %d, unread_mentions = %d WHERE did = %d AND topic_id = %d", Integer.valueOf(i2), Integer.valueOf(i4), Integer.valueOf(i5), Long.valueOf(j2), Integer.valueOf(i)));
                        } else {
                            executeFast = this.database.executeFast(String.format(Locale.ENGLISH, "UPDATE topics SET max_read_id = %d, unread_count = %d WHERE did = %d AND topic_id = %d", Integer.valueOf(i2), Integer.valueOf(i4), Long.valueOf(j2), Integer.valueOf(i)));
                        }
                        executeFast.stepThis().dispose();
                        final int i8 = i4;
                        final int i9 = i5;
                        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda7
                            @Override // java.lang.Runnable
                            public final void run() {
                                MessagesStorage.this.lambda$updateRepliesMaxReadIdInternal$185(j, i, i2, i8, i9);
                            }
                        });
                        resetForumBadgeIfNeed(j2);
                        return;
                    } catch (Throwable th6) {
                        th = th6;
                        sQLiteCursor3 = null;
                        sQLitePreparedStatement3 = null;
                        SQLitePreparedStatement sQLitePreparedStatement42 = sQLitePreparedStatement3;
                        sQLiteCursor = sQLiteCursor3;
                        sQLitePreparedStatement2 = sQLitePreparedStatement42;
                        if (sQLitePreparedStatement2 != null) {
                        }
                        if (sQLiteCursor != null) {
                        }
                        throw th;
                    }
                }
                i4 = i6;
                i5 = 0;
                if (z) {
                }
            } else if (i3 == 0) {
                i6 = i3;
                i4 = i6;
                i5 = 0;
                if (z) {
                }
            } else {
                i4 = i3;
                i5 = -1;
                if (z) {
                }
            }
        } catch (Exception e5) {
            e = e5;
            sQLiteCursor2 = sQLiteCursor4;
            sQLitePreparedStatement = null;
            checkSQLException(e);
            if (sQLitePreparedStatement != null) {
            }
            if (sQLiteCursor2 != null) {
            }
        } catch (Throwable th7) {
            th = th7;
            sQLiteCursor = sQLiteCursor4;
            sQLitePreparedStatement2 = null;
            if (sQLitePreparedStatement2 != null) {
            }
            if (sQLiteCursor != null) {
            }
            throw th;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Code restructure failed: missing block: B:19:0x004f, code lost:
    
        if (r11 != false) goto L24;
     */
    /* renamed from: updateUsersInternal, reason: merged with bridge method [inline-methods] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void lambda$updateUsers$197(ArrayList<TLRPC.User> arrayList, boolean z, boolean z2) {
        SQLitePreparedStatement sQLitePreparedStatement = null;
        try {
            try {
                if (!z) {
                    ArrayList<Long> arrayList2 = new ArrayList<>();
                    LongSparseArray longSparseArray = new LongSparseArray();
                    int size = arrayList.size();
                    for (int i = 0; i < size; i++) {
                        TLRPC.User user = arrayList.get(i);
                        arrayList2.add(Long.valueOf(user.id));
                        longSparseArray.put(user.id, user);
                    }
                    ArrayList<TLRPC.User> arrayList3 = new ArrayList<>();
                    getUsersInternal(arrayList2, arrayList3);
                    int size2 = arrayList3.size();
                    for (int i2 = 0; i2 < size2; i2++) {
                        TLRPC.User user2 = arrayList3.get(i2);
                        TLRPC.User user3 = (TLRPC.User) longSparseArray.get(user2.id);
                        if (user3 != null) {
                            if (user3.first_name == null || user3.last_name == null) {
                                TLRPC.UserProfilePhoto userProfilePhoto = user3.photo;
                                if (userProfilePhoto != null) {
                                    user2.photo = userProfilePhoto;
                                } else {
                                    String str = user3.phone;
                                    if (str != null) {
                                        user2.phone = str;
                                    }
                                }
                            } else {
                                if (!UserObject.isContact(user2)) {
                                    user2.first_name = user3.first_name;
                                    user2.last_name = user3.last_name;
                                }
                                user2.username = user3.username;
                            }
                        }
                    }
                    if (!arrayList3.isEmpty()) {
                        if (z2) {
                            this.database.beginTransaction();
                        }
                        putUsersInternal(arrayList3);
                        if (z2) {
                            this.database.commitTransaction();
                        }
                    }
                    SQLiteDatabase sQLiteDatabase = this.database;
                    if (sQLiteDatabase != null) {
                        sQLiteDatabase.commitTransaction();
                        return;
                    }
                    return;
                }
                if (z2) {
                    this.database.beginTransaction();
                }
                SQLitePreparedStatement executeFast = this.database.executeFast("UPDATE users SET status = ? WHERE uid = ?");
                try {
                    int size3 = arrayList.size();
                    for (int i3 = 0; i3 < size3; i3++) {
                        TLRPC.User user4 = arrayList.get(i3);
                        executeFast.requery();
                        TLRPC.UserStatus userStatus = user4.status;
                        if (userStatus != null) {
                            executeFast.bindInteger(1, userStatus.expires);
                        } else {
                            executeFast.bindInteger(1, 0);
                        }
                        executeFast.bindLong(2, user4.id);
                        executeFast.step();
                    }
                    executeFast.dispose();
                } catch (Exception e) {
                    e = e;
                    sQLitePreparedStatement = executeFast;
                } catch (Throwable th) {
                    th = th;
                    sQLitePreparedStatement = executeFast;
                    SQLiteDatabase sQLiteDatabase2 = this.database;
                    if (sQLiteDatabase2 != null) {
                        sQLiteDatabase2.commitTransaction();
                    }
                    if (sQLitePreparedStatement != null) {
                        sQLitePreparedStatement.dispose();
                    }
                    throw th;
                }
            } catch (Exception e2) {
                e = e2;
            }
            e = e2;
            checkSQLException(e);
            SQLiteDatabase sQLiteDatabase3 = this.database;
            if (sQLiteDatabase3 != null) {
                sQLiteDatabase3.commitTransaction();
            }
            if (sQLitePreparedStatement != null) {
                sQLitePreparedStatement.dispose();
            }
        } catch (Throwable th2) {
            th = th2;
        }
    }

    private void updateWidgets(long j) {
        ArrayList<Long> arrayList = new ArrayList<>();
        arrayList.add(Long.valueOf(j));
        updateWidgets(arrayList);
    }

    private void updateWidgets(ArrayList<Long> arrayList) {
        if (arrayList.isEmpty()) {
            return;
        }
        try {
            TextUtils.join(",", arrayList);
            SQLiteCursor queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT DISTINCT id FROM shortcut_widget WHERE did IN(%s,-1)", TextUtils.join(",", arrayList)), new Object[0]);
            AppWidgetManager appWidgetManager = null;
            while (queryFinalized.next()) {
                if (appWidgetManager == null) {
                    appWidgetManager = AppWidgetManager.getInstance(ApplicationLoader.applicationContext);
                }
                appWidgetManager.notifyAppWidgetViewDataChanged(queryFinalized.intValue(0), R.id.list_view);
            }
            queryFinalized.dispose();
        } catch (Exception e) {
            checkSQLException(e);
        }
    }

    public void addRecentLocalFile(final String str, final String str2, final TLRPC.Document document) {
        if (str == null || str.length() == 0) {
            return;
        }
        if ((str2 == null || str2.length() == 0) && document == null) {
            return;
        }
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda179
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$addRecentLocalFile$79(document, str, str2);
            }
        });
    }

    public void applyPhoneBookUpdates(final String str, final String str2) {
        if (TextUtils.isEmpty(str)) {
            return;
        }
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda99
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$applyPhoneBookUpdates$142(str, str2);
            }
        });
    }

    public void bindTaskToGuid(Runnable runnable, int i) {
        ArrayList<Runnable> arrayList = this.tasks.get(i);
        if (arrayList == null) {
            arrayList = new ArrayList<>();
            this.tasks.put(i, arrayList);
        }
        arrayList.add(runnable);
    }

    public void cancelTasksForGuid(int i) {
        ArrayList<Runnable> arrayList = this.tasks.get(i);
        if (arrayList == null) {
            return;
        }
        int size = arrayList.size();
        for (int i2 = 0; i2 < size; i2++) {
            this.storageQueue.cancelRunnable(arrayList.get(i2));
        }
        this.tasks.remove(i);
    }

    public void checkIfFolderEmpty(final int i) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda199
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$checkIfFolderEmpty$226(i);
            }
        });
    }

    public void checkLoadedRemoteFilters(final ArrayList<TLRPC.DialogFilter> arrayList, final Runnable runnable) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda65
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$checkLoadedRemoteFilters$66(arrayList, runnable);
            }
        });
    }

    public boolean checkMessageByRandomId(final long j) {
        final boolean[] zArr = new boolean[1];
        final CountDownLatch countDownLatch = new CountDownLatch(1);
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda151
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$checkMessageByRandomId$147(j, zArr, countDownLatch);
            }
        });
        try {
            countDownLatch.await();
        } catch (Exception e) {
            checkSQLException(e);
        }
        return zArr[0];
    }

    public boolean checkMessageId(final long j, final int i) {
        final boolean[] zArr = new boolean[1];
        final CountDownLatch countDownLatch = new CountDownLatch(1);
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda168
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$checkMessageId$148(j, i, zArr, countDownLatch);
            }
        });
        try {
            countDownLatch.await();
        } catch (Exception e) {
            checkSQLException(e);
        }
        return zArr[0];
    }

    public void checkSQLException(Throwable th) {
        checkSQLException(th, true);
    }

    public void cleanup(final boolean z) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda67
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$cleanup$6(z);
            }
        });
    }

    public void clearDatabaseValues() {
        this.lastDateValue = 0;
        this.lastSeqValue = 0;
        this.lastPtsValue = 0;
        this.lastQtsValue = 0;
        this.lastSecretVersion = 0;
        this.mainUnreadCount = 0;
        this.archiveUnreadCount = 0;
        this.pendingMainUnreadCount = 0;
        this.pendingArchiveUnreadCount = 0;
        this.dialogFilters.clear();
        this.dialogFiltersMap.clear();
        this.unknownDialogsIds.clear();
        this.lastSavedSeq = 0;
        this.lastSavedPts = 0;
        this.lastSavedDate = 0;
        this.lastSavedQts = 0;
        this.secretPBytes = null;
        this.secretG = 0;
    }

    public void clearDownloadQueue(final int i) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda149
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$clearDownloadQueue$177(i);
            }
        });
    }

    public void clearLocalDatabase() {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda183
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$clearLocalDatabase$44();
            }
        });
    }

    public void clearSentMedia() {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda41
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$clearSentMedia$157();
            }
        });
    }

    public void clearUserPhoto(final long j, final long j2) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda88
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$clearUserPhoto$88(j, j2);
            }
        });
    }

    public void clearUserPhotos(final long j) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda157
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$clearUserPhotos$87(j);
            }
        });
    }

    public void clearWidgetDialogs(final int i) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda236
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$clearWidgetDialogs$160(i);
            }
        });
    }

    /* JADX WARN: Removed duplicated region for block: B:155:0x04e5  */
    /* JADX WARN: Removed duplicated region for block: B:157:0x04ea  */
    /* JADX WARN: Removed duplicated region for block: B:159:? A[RETURN, SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void closeHolesInMedia(long j, int i, int i2, int i3, long j2) {
        SQLiteCursor sQLiteCursor;
        Throwable th;
        Exception exc;
        ArrayList arrayList;
        int i4;
        ArrayList arrayList2;
        long j3;
        SQLiteDatabase sQLiteDatabase;
        String str;
        long j4;
        int i5;
        int i6;
        SQLitePreparedStatement executeFast;
        Exception exc2;
        boolean z;
        SQLitePreparedStatement executeFast2;
        SQLitePreparedStatement executeFast3;
        int i7 = i2;
        long j5 = j2;
        int i8 = 1;
        SQLitePreparedStatement sQLitePreparedStatement = null;
        try {
            try {
                try {
                    sQLiteCursor = j5 != 0 ? i3 < 0 ? this.database.queryFinalized(String.format(Locale.US, "SELECT type, start, end FROM media_holes_topics WHERE uid = %d AND topic_id = %d AND type >= 0 AND ((end >= %d AND end <= %d) OR (start >= %d AND start <= %d) OR (start >= %d AND end <= %d) OR (start <= %d AND end >= %d))", Long.valueOf(j), Long.valueOf(j2), Integer.valueOf(i), Integer.valueOf(i2), Integer.valueOf(i), Integer.valueOf(i2), Integer.valueOf(i), Integer.valueOf(i2), Integer.valueOf(i), Integer.valueOf(i2)), new Object[0]) : this.database.queryFinalized(String.format(Locale.US, "SELECT type, start, end FROM media_holes_topics WHERE uid = %d AND topic_id = %d AND type = %d AND ((end >= %d AND end <= %d) OR (start >= %d AND start <= %d) OR (start >= %d AND end <= %d) OR (start <= %d AND end >= %d))", Long.valueOf(j), Long.valueOf(j2), Integer.valueOf(i3), Integer.valueOf(i), Integer.valueOf(i2), Integer.valueOf(i), Integer.valueOf(i2), Integer.valueOf(i), Integer.valueOf(i2), Integer.valueOf(i), Integer.valueOf(i2)), new Object[0]) : i3 < 0 ? this.database.queryFinalized(String.format(Locale.US, "SELECT type, start, end FROM media_holes_v2 WHERE uid = %d AND type >= 0 AND ((end >= %d AND end <= %d) OR (start >= %d AND start <= %d) OR (start >= %d AND end <= %d) OR (start <= %d AND end >= %d))", Long.valueOf(j), Integer.valueOf(i), Integer.valueOf(i2), Integer.valueOf(i), Integer.valueOf(i2), Integer.valueOf(i), Integer.valueOf(i2), Integer.valueOf(i), Integer.valueOf(i2)), new Object[0]) : this.database.queryFinalized(String.format(Locale.US, "SELECT type, start, end FROM media_holes_v2 WHERE uid = %d AND type = %d AND ((end >= %d AND end <= %d) OR (start >= %d AND start <= %d) OR (start >= %d AND end <= %d) OR (start <= %d AND end >= %d))", Long.valueOf(j), Integer.valueOf(i3), Integer.valueOf(i), Integer.valueOf(i2), Integer.valueOf(i), Integer.valueOf(i2), Integer.valueOf(i), Integer.valueOf(i2), Integer.valueOf(i), Integer.valueOf(i2)), new Object[0]);
                    arrayList = null;
                    while (sQLiteCursor.next()) {
                        try {
                            try {
                                if (arrayList == null) {
                                    arrayList = new ArrayList();
                                }
                                int intValue = sQLiteCursor.intValue(0);
                                int intValue2 = sQLiteCursor.intValue(1);
                                int intValue3 = sQLiteCursor.intValue(2);
                                if (intValue2 != intValue3 || intValue2 != 1) {
                                    arrayList.add(new Hole(intValue, intValue2, intValue3));
                                }
                            } catch (Exception e) {
                                exc = e;
                            }
                        } catch (Throwable th2) {
                            th = th2;
                        }
                    }
                    sQLiteCursor.dispose();
                } catch (Exception e2) {
                    e = e2;
                }
            } catch (Throwable th3) {
                th = th3;
            }
        } catch (Exception e3) {
            e = e3;
        } catch (Throwable th4) {
            th = th4;
        }
        if (arrayList != null) {
            int i9 = 0;
            while (i9 < arrayList.size()) {
                try {
                    Hole hole = (Hole) arrayList.get(i9);
                    int i10 = hole.end;
                    int i11 = i10 - 1;
                    if (i7 >= i11) {
                        arrayList2 = arrayList;
                        if (i <= hole.start + i8) {
                            if (j5 != 0) {
                                i4 = i9;
                                try {
                                    executeFast3 = this.database.executeFast(String.format(Locale.US, "DELETE FROM media_holes_topics WHERE uid = %d AND topic_id = %d AND type = %d AND start = %d AND end = %d", Long.valueOf(j), Long.valueOf(j2), Integer.valueOf(hole.type), Integer.valueOf(hole.start), Integer.valueOf(hole.end)));
                                } catch (Throwable th5) {
                                    th = th5;
                                }
                            } else {
                                i4 = i9;
                                try {
                                    executeFast3 = this.database.executeFast(String.format(Locale.US, "DELETE FROM media_holes_v2 WHERE uid = %d AND type = %d AND start = %d AND end = %d", Long.valueOf(j), Integer.valueOf(hole.type), Integer.valueOf(hole.start), Integer.valueOf(hole.end)));
                                } catch (Throwable th6) {
                                    th = th6;
                                }
                            }
                            executeFast3.stepThis().dispose();
                            i6 = i7;
                            j3 = j5;
                            j4 = j;
                            i7 = i6;
                            i8 = 1;
                            arrayList = arrayList2;
                            i9 = i4 + 1;
                            j5 = j3;
                        } else {
                            i4 = i9;
                        }
                    } else {
                        i4 = i9;
                        arrayList2 = arrayList;
                    }
                    if (i7 < i11) {
                        int i12 = hole.start;
                        if (i <= i12 + 1) {
                            if (i12 != i7) {
                                j3 = j2;
                                if (j3 != 0) {
                                    try {
                                    } catch (Exception e4) {
                                        e = e4;
                                        exc2 = e;
                                        z = false;
                                        checkSQLException(exc2, z);
                                        j4 = j;
                                        i6 = i2;
                                        i7 = i6;
                                        i8 = 1;
                                        arrayList = arrayList2;
                                        i9 = i4 + 1;
                                        j5 = j3;
                                    }
                                    try {
                                        try {
                                            executeFast = this.database.executeFast(String.format(Locale.US, "UPDATE media_holes_topics SET start = %d WHERE uid = %d AND topic_id = %d AND type = %d AND start = %d AND end = %d", Integer.valueOf(i2), Long.valueOf(j), Long.valueOf(j2), Integer.valueOf(hole.type), Integer.valueOf(hole.start), Integer.valueOf(hole.end)));
                                        } catch (Throwable th7) {
                                            th = th7;
                                        }
                                    } catch (Exception e5) {
                                        e = e5;
                                        exc2 = e;
                                        z = false;
                                        checkSQLException(exc2, z);
                                        j4 = j;
                                        i6 = i2;
                                        i7 = i6;
                                        i8 = 1;
                                        arrayList = arrayList2;
                                        i9 = i4 + 1;
                                        j5 = j3;
                                    }
                                } else {
                                    try {
                                        executeFast = this.database.executeFast(String.format(Locale.US, "UPDATE media_holes_v2 SET start = %d WHERE uid = %d AND type = %d AND start = %d AND end = %d", Integer.valueOf(i2), Long.valueOf(j), Integer.valueOf(hole.type), Integer.valueOf(hole.start), Integer.valueOf(hole.end)));
                                    } catch (Throwable th8) {
                                        th = th8;
                                    }
                                }
                                executeFast.stepThis().dispose();
                            } else {
                                j3 = j2;
                            }
                            j4 = j;
                            i6 = i2;
                            i7 = i6;
                            i8 = 1;
                            arrayList = arrayList2;
                            i9 = i4 + 1;
                            j5 = j3;
                        } else {
                            j3 = j2;
                            if (j3 != 0) {
                                try {
                                    this.database.executeFast(String.format(Locale.US, "DELETE FROM media_holes_topics WHERE uid = %d AND topic_id = %d AND type = %d AND start = %d AND end = %d", Long.valueOf(j), Long.valueOf(j2), Integer.valueOf(hole.type), Integer.valueOf(hole.start), Integer.valueOf(hole.end))).stepThis().dispose();
                                    str = "REPLACE INTO media_holes_topics VALUES(?, ?, ?, ?, ?)";
                                    sQLiteDatabase = this.database;
                                } catch (Throwable th9) {
                                    th = th9;
                                }
                            } else {
                                try {
                                    this.database.executeFast(String.format(Locale.US, "DELETE FROM media_holes_v2 WHERE uid = %d AND type = %d AND start = %d AND end = %d", Long.valueOf(j), Integer.valueOf(hole.type), Integer.valueOf(hole.start), Integer.valueOf(hole.end))).stepThis().dispose();
                                    sQLiteDatabase = this.database;
                                    str = "REPLACE INTO media_holes_v2 VALUES(?, ?, ?, ?)";
                                } catch (Throwable th10) {
                                    th = th10;
                                }
                            }
                            SQLitePreparedStatement executeFast4 = sQLiteDatabase.executeFast(str);
                            try {
                                executeFast4.requery();
                                j4 = j;
                                executeFast4.bindLong(1, j4);
                                if (j3 != 0) {
                                    executeFast4.bindLong(2, j3);
                                    i5 = 3;
                                } else {
                                    i5 = 2;
                                }
                                executeFast4.bindInteger(i5, hole.type);
                                executeFast4.bindInteger(i5 + 1, hole.start);
                                executeFast4.bindInteger(i5 + 2, i);
                                executeFast4.step();
                                executeFast4.requery();
                                executeFast4.bindLong(1, j4);
                                executeFast4.bindInteger(2, hole.type);
                                i6 = i2;
                                executeFast4.bindInteger(3, i6);
                                executeFast4.bindInteger(4, hole.end);
                                executeFast4.step();
                                executeFast4.dispose();
                                i7 = i6;
                                i8 = 1;
                                arrayList = arrayList2;
                                i9 = i4 + 1;
                                j5 = j3;
                            } catch (Exception e6) {
                                exc = e6;
                                sQLiteCursor = null;
                                sQLitePreparedStatement = executeFast4;
                                checkSQLException(exc);
                                if (sQLitePreparedStatement != null) {
                                }
                                if (sQLiteCursor == null) {
                                }
                            } catch (Throwable th11) {
                                th = th11;
                                sQLiteCursor = null;
                                sQLitePreparedStatement = executeFast4;
                            }
                        }
                        th = th;
                        sQLiteCursor = null;
                        if (sQLitePreparedStatement != null) {
                            sQLitePreparedStatement.dispose();
                        }
                        if (sQLiteCursor == null) {
                            throw th;
                        }
                        sQLiteCursor.dispose();
                        throw th;
                    }
                    if (i10 != i) {
                        if (j5 != 0) {
                            try {
                                try {
                                    executeFast2 = this.database.executeFast(String.format(Locale.US, "UPDATE media_holes_topics SET end = %d WHERE uid = %d AND topic_id = %d AND type = %d AND start = %d AND end = %d", Integer.valueOf(i), Long.valueOf(j), Long.valueOf(j2), Integer.valueOf(hole.type), Integer.valueOf(hole.start), Integer.valueOf(hole.end)));
                                } catch (Throwable th12) {
                                    th = th12;
                                }
                            } catch (Exception e7) {
                                exc2 = e7;
                                z = false;
                                j3 = j2;
                                checkSQLException(exc2, z);
                                j4 = j;
                                i6 = i2;
                                i7 = i6;
                                i8 = 1;
                                arrayList = arrayList2;
                                i9 = i4 + 1;
                                j5 = j3;
                            }
                        } else {
                            try {
                                executeFast2 = this.database.executeFast(String.format(Locale.US, "UPDATE media_holes_v2 SET end = %d WHERE uid = %d AND type = %d AND start = %d AND end = %d", Integer.valueOf(i), Long.valueOf(j), Integer.valueOf(hole.type), Integer.valueOf(hole.start), Integer.valueOf(hole.end)));
                            } catch (Throwable th13) {
                                th = th13;
                            }
                        }
                        executeFast2.stepThis().dispose();
                    }
                    j4 = j;
                    j3 = j2;
                    i6 = i7;
                    i7 = i6;
                    i8 = 1;
                    arrayList = arrayList2;
                    i9 = i4 + 1;
                    j5 = j3;
                } catch (Exception e8) {
                    e = e8;
                    exc = e;
                    sQLiteCursor = null;
                    checkSQLException(exc);
                    if (sQLitePreparedStatement != null) {
                        sQLitePreparedStatement.dispose();
                    }
                    if (sQLiteCursor == null) {
                        sQLiteCursor.dispose();
                        return;
                    }
                    return;
                }
            }
        }
    }

    public void completeTaskForGuid(Runnable runnable, int i) {
        ArrayList<Runnable> arrayList = this.tasks.get(i);
        if (arrayList == null) {
            return;
        }
        arrayList.remove(runnable);
        if (arrayList.isEmpty()) {
            this.tasks.remove(i);
        }
    }

    public boolean containsLocalDialog(final long j) {
        final CountDownLatch countDownLatch = new CountDownLatch(1);
        final Boolean[] boolArr = {Boolean.FALSE};
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda164
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$containsLocalDialog$172(j, boolArr, countDownLatch);
            }
        });
        try {
            countDownLatch.await();
        } catch (Exception e) {
            checkSQLException(e);
        }
        return boolArr[0].booleanValue();
    }

    public long createPendingTask(final NativeByteBuffer nativeByteBuffer) {
        if (nativeByteBuffer == null) {
            return 0L;
        }
        final long andAdd = this.lastTaskId.getAndAdd(1L);
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda58
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$createPendingTask$10(andAdd, nativeByteBuffer);
            }
        });
        return andAdd;
    }

    public void createTaskForMid(final long j, final int i, final int i2, final int i3, final int i4, final boolean z) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda235
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$createTaskForMid$110(i2, i3, i4, i, z, j);
            }
        });
    }

    public void createTaskForSecretChat(final int i, final int i2, final int i3, final int i4, final ArrayList<Long> arrayList) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda62
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$createTaskForSecretChat$112(i, arrayList, i4, i2, i3);
            }
        });
    }

    public void deleteAllStoryPushMessages() {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda60
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$deleteAllStoryPushMessages$40();
            }
        });
    }

    public void deleteAllStoryReactionPushMessages() {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda78
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$deleteAllStoryReactionPushMessages$41();
            }
        });
    }

    public void deleteContacts(final ArrayList<Long> arrayList) {
        if (arrayList == null || arrayList.isEmpty()) {
            return;
        }
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda134
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$deleteContacts$141(arrayList);
            }
        });
    }

    public void deleteDialog(final long j, final int i) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda39
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$deleteDialog$85(i, j);
            }
        });
    }

    public void deleteDialogFilter(final MessagesController.DialogFilter dialogFilter) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda187
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$deleteDialogFilter$69(dialogFilter);
            }
        });
    }

    protected void deletePushMessages(long j, ArrayList<Integer> arrayList) {
        try {
            this.database.executeFast(String.format(Locale.US, "DELETE FROM unread_push_messages WHERE uid = %d AND mid IN(%s)", Long.valueOf(j), TextUtils.join(",", arrayList))).stepThis().dispose();
        } catch (Exception e) {
            checkSQLException(e);
        }
    }

    public void deleteSavedDialog(final long j) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda214
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$deleteSavedDialog$53(j);
            }
        });
    }

    public void deleteStoryPushMessage(final long j) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda121
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$deleteStoryPushMessage$39(j);
            }
        });
    }

    public void deleteUserChatHistory(final long j, final long j2) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda219
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$deleteUserChatHistory$82(j, j2);
            }
        });
    }

    public void deleteWallpaper(final long j) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda206
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$deleteWallpaper$76(j);
            }
        });
    }

    /* JADX WARN: Removed duplicated region for block: B:11:0x0083 A[Catch: all -> 0x008b, Exception -> 0x008e, TRY_ENTER, TryCatch #8 {Exception -> 0x008e, all -> 0x008b, blocks: (B:11:0x0083, B:38:0x0091), top: B:9:0x0081 }] */
    /* JADX WARN: Removed duplicated region for block: B:15:0x009c A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:30:0x00cd  */
    /* JADX WARN: Removed duplicated region for block: B:36:0x01a4 A[ORIG_RETURN, RETURN] */
    /* JADX WARN: Removed duplicated region for block: B:38:0x0091 A[Catch: all -> 0x008b, Exception -> 0x008e, TRY_LEAVE, TryCatch #8 {Exception -> 0x008e, all -> 0x008b, blocks: (B:11:0x0083, B:38:0x0091), top: B:9:0x0081 }] */
    /* JADX WARN: Removed duplicated region for block: B:58:0x0161 A[Catch: all -> 0x0169, Exception -> 0x016c, TRY_ENTER, TryCatch #7 {Exception -> 0x016c, all -> 0x0169, blocks: (B:58:0x0161, B:76:0x016f), top: B:56:0x015f }] */
    /* JADX WARN: Removed duplicated region for block: B:63:0x0182 A[Catch: all -> 0x0188, Exception -> 0x018a, TryCatch #3 {Exception -> 0x018a, blocks: (B:61:0x0176, B:63:0x0182, B:64:0x018d), top: B:60:0x0176 }] */
    /* JADX WARN: Removed duplicated region for block: B:66:0x018c  */
    /* JADX WARN: Removed duplicated region for block: B:73:0x01a8  */
    /* JADX WARN: Removed duplicated region for block: B:76:0x016f A[Catch: all -> 0x0169, Exception -> 0x016c, TRY_LEAVE, TryCatch #7 {Exception -> 0x016c, all -> 0x0169, blocks: (B:58:0x0161, B:76:0x016f), top: B:56:0x015f }] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void doneHolesInMedia(long j, int i, int i2, long j2) {
        SQLiteDatabase sQLiteDatabase;
        String format;
        long j3;
        SQLitePreparedStatement sQLitePreparedStatement;
        int i3;
        SQLiteDatabase sQLiteDatabase2;
        String format2;
        long j4;
        int i4;
        if (i2 == -1) {
            try {
                if (j2 != 0) {
                    sQLiteDatabase2 = this.database;
                    Locale locale = Locale.US;
                    if (i == 0) {
                        sQLiteDatabase2.executeFast(String.format(locale, "DELETE FROM media_holes_topics WHERE uid = %d AND topic_id = %d", Long.valueOf(j), Long.valueOf(j2))).stepThis().dispose();
                        j4 = 0;
                        sQLitePreparedStatement = j2 == j4 ? this.database.executeFast("REPLACE INTO media_holes_topics VALUES(?, ?, ?, ?, ?)") : this.database.executeFast("REPLACE INTO media_holes_v2 VALUES(?, ?, ?, ?)");
                        for (int i5 = 0; i5 < 8; i5++) {
                            try {
                                try {
                                    sQLitePreparedStatement.requery();
                                    sQLitePreparedStatement.bindLong(1, j);
                                    if (j2 != 0) {
                                        sQLitePreparedStatement.bindLong(2, j2);
                                        i4 = 3;
                                    } else {
                                        i4 = 2;
                                    }
                                    sQLitePreparedStatement.bindInteger(i4, i5);
                                    sQLitePreparedStatement.bindInteger(i4 + 1, 1);
                                    sQLitePreparedStatement.bindInteger(i4 + 2, 1);
                                    sQLitePreparedStatement.step();
                                } catch (Exception e) {
                                    throw e;
                                }
                            } catch (Throwable th) {
                                th = th;
                                if (sQLitePreparedStatement != null) {
                                    sQLitePreparedStatement.dispose();
                                }
                                throw th;
                            }
                        }
                        if (sQLitePreparedStatement == null) {
                            return;
                        }
                    } else {
                        format2 = String.format(locale, "DELETE FROM media_holes_topics WHERE uid = %d AND topic_id = %d AND start = 0", Long.valueOf(j), Long.valueOf(j2));
                    }
                } else {
                    sQLiteDatabase2 = this.database;
                    Locale locale2 = Locale.US;
                    Long valueOf = Long.valueOf(j);
                    Object[] objArr = new Object[1];
                    if (i == 0) {
                        objArr[0] = valueOf;
                        format2 = String.format(locale2, "DELETE FROM media_holes_v2 WHERE uid = %d", objArr);
                    } else {
                        objArr[0] = valueOf;
                        format2 = String.format(locale2, "DELETE FROM media_holes_v2 WHERE uid = %d AND start = 0", objArr);
                    }
                }
                sQLitePreparedStatement = j2 == j4 ? this.database.executeFast("REPLACE INTO media_holes_topics VALUES(?, ?, ?, ?, ?)") : this.database.executeFast("REPLACE INTO media_holes_v2 VALUES(?, ?, ?, ?)");
                while (i5 < 8) {
                }
                if (sQLitePreparedStatement == null) {
                }
            } catch (Exception e2) {
                sQLitePreparedStatement = null;
                throw e2;
            } catch (Throwable th2) {
                th = th2;
                sQLitePreparedStatement = null;
                if (sQLitePreparedStatement != null) {
                }
                throw th;
            }
            sQLiteDatabase2.executeFast(format2).stepThis().dispose();
            j4 = 0;
        } else {
            try {
                try {
                    try {
                        if (j2 == 0) {
                            sQLiteDatabase = this.database;
                            Locale locale3 = Locale.US;
                            Long valueOf2 = Long.valueOf(j);
                            Integer valueOf3 = Integer.valueOf(i2);
                            Object[] objArr2 = new Object[2];
                            if (i == 0) {
                                objArr2[0] = valueOf2;
                                objArr2[1] = valueOf3;
                                format = String.format(locale3, "DELETE FROM media_holes_v2 WHERE uid = %d AND type = %d", objArr2);
                            } else {
                                objArr2[0] = valueOf2;
                                objArr2[1] = valueOf3;
                                format = String.format(locale3, "DELETE FROM media_holes_v2 WHERE uid = %d AND type = %d AND start = 0", objArr2);
                            }
                        } else if (i == 0) {
                            this.database.executeFast(String.format(Locale.US, "DELETE FROM media_holes_topics WHERE uid = %d AND topic_id = %d AND type = %d", Long.valueOf(j), Long.valueOf(j2), Integer.valueOf(i2))).stepThis().dispose();
                            j3 = 0;
                            sQLitePreparedStatement = j2 == j3 ? this.database.executeFast("REPLACE INTO media_holes_topics VALUES(?, ?, ?, ?, ?)") : this.database.executeFast("REPLACE INTO media_holes_v2 VALUES(?, ?, ?, ?)");
                            sQLitePreparedStatement.requery();
                            sQLitePreparedStatement.bindLong(1, j);
                            if (j2 == 0) {
                                sQLitePreparedStatement.bindLong(2, j2);
                                i3 = 3;
                            } else {
                                i3 = 2;
                            }
                            sQLitePreparedStatement.bindInteger(i3, i2);
                            sQLitePreparedStatement.bindInteger(i3 + 1, 1);
                            sQLitePreparedStatement.bindInteger(i3 + 2, 1);
                            sQLitePreparedStatement.step();
                            sQLitePreparedStatement.dispose();
                        } else {
                            sQLiteDatabase = this.database;
                            format = String.format(Locale.US, "DELETE FROM media_holes_topics WHERE uid = %d AND topic_id = %d AND type = %d AND start = 0", Long.valueOf(j), Long.valueOf(j2), Integer.valueOf(i2));
                        }
                        sQLitePreparedStatement.requery();
                        sQLitePreparedStatement.bindLong(1, j);
                        if (j2 == 0) {
                        }
                        sQLitePreparedStatement.bindInteger(i3, i2);
                        sQLitePreparedStatement.bindInteger(i3 + 1, 1);
                        sQLitePreparedStatement.bindInteger(i3 + 2, 1);
                        sQLitePreparedStatement.step();
                        sQLitePreparedStatement.dispose();
                    } catch (Exception e3) {
                        throw e3;
                    }
                } catch (Throwable th3) {
                    th = th3;
                    if (sQLitePreparedStatement != null) {
                        sQLitePreparedStatement.dispose();
                    }
                    throw th;
                }
                sQLitePreparedStatement = j2 == j3 ? this.database.executeFast("REPLACE INTO media_holes_topics VALUES(?, ?, ?, ?, ?)") : this.database.executeFast("REPLACE INTO media_holes_v2 VALUES(?, ?, ?, ?)");
            } catch (Exception e4) {
                sQLitePreparedStatement = null;
                throw e4;
            } catch (Throwable th4) {
                th = th4;
                sQLitePreparedStatement = null;
                if (sQLitePreparedStatement != null) {
                }
                throw th;
            }
            sQLiteDatabase.executeFast(format).stepThis().dispose();
            j3 = 0;
        }
        sQLitePreparedStatement.dispose();
    }

    public void emptyMessagesMedia(final long j, final ArrayList<Integer> arrayList) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda90
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$emptyMessagesMedia$94(arrayList, j);
            }
        });
    }

    void executeNoException(String str) {
        try {
            this.database.executeFast(str).stepThis().dispose();
        } catch (Exception e) {
            FileLog.e(e);
        }
    }

    public void fixNotificationSettings() {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda130
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$fixNotificationSettings$9();
            }
        });
    }

    public void fullReset() {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda45
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$fullReset$60();
            }
        });
    }

    public void getAnimatedEmoji(String str, ArrayList<TLRPC.Document> arrayList) {
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                sQLiteCursor = this.database.queryFinalized(String.format(Locale.US, "SELECT data FROM animated_emoji WHERE document_id IN (%s)", str), new Object[0]);
                while (sQLiteCursor.next()) {
                    NativeByteBuffer byteBufferValue = sQLiteCursor.byteBufferValue(0);
                    try {
                        TLRPC.Document TLdeserialize = TLRPC.Document.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(true), true);
                        if (TLdeserialize != null && TLdeserialize.id != 0) {
                            arrayList.add(TLdeserialize);
                        }
                    } catch (Exception e) {
                        checkSQLException(e);
                    }
                    if (byteBufferValue != null) {
                        byteBufferValue.reuse();
                    }
                }
            } catch (SQLiteException e2) {
                e2.printStackTrace();
                if (sQLiteCursor == null) {
                    return;
                }
            }
            sQLiteCursor.dispose();
        } catch (Throwable th) {
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
            throw th;
        }
    }

    public int getArchiveUnreadCount() {
        return this.archiveUnreadCount;
    }

    public void getBotCache(final String str, final RequestDelegate requestDelegate) {
        if (str == null || requestDelegate == null) {
            return;
        }
        final int currentTime = getConnectionsManager().getCurrentTime();
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda231
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$getBotCache$121(currentTime, str, requestDelegate);
            }
        });
    }

    /* JADX WARN: Code restructure failed: missing block: B:23:0x0051, code lost:
    
        if (0 == 0) goto L18;
     */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public ArrayList<Integer> getCachedMessagesInRange(long j, int i, int i2) {
        ArrayList<Integer> arrayList = new ArrayList<>();
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                sQLiteCursor = this.database.queryFinalized(String.format(Locale.US, "SELECT mid FROM messages_v2 WHERE uid = %d AND date >= %d AND date <= %d", Long.valueOf(j), Integer.valueOf(i), Integer.valueOf(i2)), new Object[0]);
                while (sQLiteCursor.next()) {
                    try {
                        arrayList.add(Integer.valueOf(sQLiteCursor.intValue(0)));
                    } catch (Exception e) {
                        checkSQLException(e);
                    }
                }
                sQLiteCursor.dispose();
            } catch (Exception e2) {
                checkSQLException(e2);
            }
            sQLiteCursor.dispose();
            return arrayList;
        } catch (Throwable th) {
            if (0 != 0) {
                sQLiteCursor.dispose();
            }
            throw th;
        }
    }

    public void getCachedPhoneBook(final boolean z) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda120
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$getCachedPhoneBook$144(z);
            }
        });
    }

    public int getChannelPtsSync(final long j) {
        final CountDownLatch countDownLatch = new CountDownLatch(1);
        final Integer[] numArr = {0};
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda204
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$getChannelPtsSync$237(j, numArr, countDownLatch);
            }
        });
        try {
            countDownLatch.await();
        } catch (Exception e) {
            checkSQLException(e);
        }
        return numArr[0].intValue();
    }

    public TLRPC.Chat getChat(long j) {
        try {
            ArrayList<TLRPC.Chat> arrayList = new ArrayList<>();
            getChatsInternal("" + j, arrayList);
            if (!arrayList.isEmpty()) {
                return arrayList.get(0);
            }
        } catch (Exception e) {
            checkSQLException(e);
        }
        return null;
    }

    public TLRPC.Chat getChatSync(final long j) {
        final CountDownLatch countDownLatch = new CountDownLatch(1);
        final TLRPC.Chat[] chatArr = new TLRPC.Chat[1];
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda213
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$getChatSync$239(chatArr, j, countDownLatch);
            }
        });
        try {
            countDownLatch.await();
        } catch (Exception e) {
            checkSQLException(e);
        }
        return chatArr[0];
    }

    public ArrayList<TLRPC.Chat> getChats(ArrayList<Long> arrayList) {
        ArrayList<TLRPC.Chat> arrayList2 = new ArrayList<>();
        try {
            getChatsInternal(TextUtils.join(",", arrayList), arrayList2);
        } catch (Exception e) {
            arrayList2.clear();
            checkSQLException(e);
        }
        return arrayList2;
    }

    public void getChatsInternal(String str, ArrayList<TLRPC.Chat> arrayList) {
        getChatsInternal(str, arrayList, true);
    }

    public void getChatsInternal(String str, ArrayList<TLRPC.Chat> arrayList, boolean z) {
        if (str == null || str.length() == 0 || arrayList == null) {
            return;
        }
        SQLiteCursor queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT data FROM chats WHERE uid IN(%s)", str), new Object[0]);
        while (queryFinalized.next()) {
            try {
                NativeByteBuffer byteBufferValue = queryFinalized.byteBufferValue(0);
                if (byteBufferValue != null) {
                    TLRPC.Chat TLdeserialize = TLRPC.Chat.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false, z);
                    byteBufferValue.reuse();
                    if (TLdeserialize != null) {
                        arrayList.add(TLdeserialize);
                    }
                }
            } catch (Exception e) {
                checkSQLException(e);
            }
        }
        queryFinalized.dispose();
    }

    public void getContacts() {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda80
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$getContacts$145();
            }
        });
    }

    public SQLiteDatabase getDatabase() {
        return this.database;
    }

    public ArrayList<File> getDatabaseFiles() {
        ArrayList<File> arrayList = new ArrayList<>();
        arrayList.add(this.cacheFile);
        arrayList.add(this.walCacheFile);
        arrayList.add(this.shmCacheFile);
        return arrayList;
    }

    public long getDatabaseSize() {
        File file = this.cacheFile;
        long length = file != null ? file.length() : 0L;
        File file2 = this.shmCacheFile;
        return file2 != null ? length + file2.length() : length;
    }

    public void getDialogFolderId(final long j, final IntCallback intCallback) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda113
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$getDialogFolderId$223(j, intCallback);
            }
        });
    }

    public void getDialogMaxMessageId(final long j, final IntCallback intCallback) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda110
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$getDialogMaxMessageId$235(j, intCallback);
            }
        });
    }

    public int getDialogReadMax(final boolean z, final long j) {
        final CountDownLatch countDownLatch = new CountDownLatch(1);
        final Integer[] numArr = {0};
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda103
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$getDialogReadMax$236(z, j, numArr, countDownLatch);
            }
        });
        try {
            countDownLatch.await();
        } catch (Exception e) {
            checkSQLException(e);
        }
        return numArr[0].intValue();
    }

    public void getDialogs(final int i, final int i2, final int i3, boolean z) {
        long[] jArr;
        LongSparseArray drafts;
        int size;
        if (!z || (size = (drafts = getMediaDataController().getDrafts()).size()) <= 0) {
            jArr = null;
        } else {
            jArr = new long[size];
            for (int i4 = 0; i4 < size; i4++) {
                if (((LongSparseArray) drafts.valueAt(i4)).get(0L) != null) {
                    jArr[i4] = drafts.keyAt(i4);
                }
            }
        }
        final long[] jArr2 = jArr;
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda6
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$getDialogs$220(i, i2, i3, jArr2);
            }
        });
    }

    public void getDownloadQueue(final int i) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda180
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$getDownloadQueue$179(i);
            }
        });
    }

    public TLRPC.EncryptedChat getEncryptedChat(long j) {
        try {
            ArrayList<TLRPC.EncryptedChat> arrayList = new ArrayList<>();
            getEncryptedChatsInternal("" + j, arrayList, null);
            if (arrayList.isEmpty()) {
                return null;
            }
            return arrayList.get(0);
        } catch (Exception e) {
            checkSQLException(e);
            return null;
        }
    }

    public void getEncryptedChat(final long j, final CountDownLatch countDownLatch, final ArrayList<TLObject> arrayList) {
        if (countDownLatch == null || arrayList == null) {
            return;
        }
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda71
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$getEncryptedChat$170(j, arrayList, countDownLatch);
            }
        });
    }

    public void getEncryptedChatsInternal(String str, ArrayList<TLRPC.EncryptedChat> arrayList, ArrayList<Long> arrayList2) {
        if (str == null || str.length() == 0 || arrayList == null) {
            return;
        }
        SQLiteCursor queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT data, user, g, authkey, ttl, layer, seq_in, seq_out, use_count, exchange_id, key_date, fprint, fauthkey, khash, in_seq_no, admin_id, mtproto_seq FROM enc_chats WHERE uid IN(%s)", str), new Object[0]);
        while (queryFinalized.next()) {
            try {
                NativeByteBuffer byteBufferValue = queryFinalized.byteBufferValue(0);
                if (byteBufferValue != null) {
                    TLRPC.EncryptedChat TLdeserialize = TLRPC.EncryptedChat.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                    byteBufferValue.reuse();
                    if (TLdeserialize != null) {
                        long longValue = queryFinalized.longValue(1);
                        TLdeserialize.user_id = longValue;
                        if (arrayList2 != null && !arrayList2.contains(Long.valueOf(longValue))) {
                            arrayList2.add(Long.valueOf(TLdeserialize.user_id));
                        }
                        TLdeserialize.a_or_b = queryFinalized.byteArrayValue(2);
                        TLdeserialize.auth_key = queryFinalized.byteArrayValue(3);
                        TLdeserialize.ttl = queryFinalized.intValue(4);
                        TLdeserialize.layer = queryFinalized.intValue(5);
                        TLdeserialize.seq_in = queryFinalized.intValue(6);
                        TLdeserialize.seq_out = queryFinalized.intValue(7);
                        int intValue = queryFinalized.intValue(8);
                        TLdeserialize.key_use_count_in = (short) (intValue >> 16);
                        TLdeserialize.key_use_count_out = (short) intValue;
                        TLdeserialize.exchange_id = queryFinalized.longValue(9);
                        TLdeserialize.key_create_date = queryFinalized.intValue(10);
                        TLdeserialize.future_key_fingerprint = queryFinalized.longValue(11);
                        TLdeserialize.future_auth_key = queryFinalized.byteArrayValue(12);
                        TLdeserialize.key_hash = queryFinalized.byteArrayValue(13);
                        TLdeserialize.in_seq_no = queryFinalized.intValue(14);
                        long longValue2 = queryFinalized.longValue(15);
                        if (longValue2 != 0) {
                            TLdeserialize.admin_id = longValue2;
                        }
                        TLdeserialize.mtproto_seq = queryFinalized.intValue(16);
                        arrayList.add(TLdeserialize);
                    }
                }
            } catch (Exception e) {
                checkSQLException(e);
            }
        }
        queryFinalized.dispose();
    }

    public int getLastDateValue() {
        ensureOpened();
        return this.lastDateValue;
    }

    public int getLastPtsValue() {
        ensureOpened();
        return this.lastPtsValue;
    }

    public int getLastQtsValue() {
        ensureOpened();
        return this.lastQtsValue;
    }

    public int getLastSecretVersion() {
        ensureOpened();
        return this.lastSecretVersion;
    }

    public int getLastSeqValue() {
        ensureOpened();
        return this.lastSeqValue;
    }

    public int getMainUnreadCount() {
        return this.mainUnreadCount;
    }

    public TLRPC.Message getMessage(final long j, final long j2) {
        final CountDownLatch countDownLatch = new CountDownLatch(1);
        final AtomicReference atomicReference = new AtomicReference();
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda161
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$getMessage$136(j, j2, atomicReference, countDownLatch);
            }
        });
        try {
            countDownLatch.await();
        } catch (Exception e) {
            checkSQLException(e);
        }
        return (TLRPC.Message) atomicReference.get();
    }

    public int getMessageMediaType(TLRPC.Message message) {
        if (!(message instanceof TLRPC.TL_message_secret)) {
            if (message instanceof TLRPC.TL_message) {
                TLRPC.MessageMedia messageMedia = message.media;
                if (((messageMedia instanceof TLRPC.TL_messageMediaPhoto) || (messageMedia instanceof TLRPC.TL_messageMediaDocument)) && messageMedia.ttl_seconds != 0) {
                    return 1;
                }
            }
            return ((message.media instanceof TLRPC.TL_messageMediaPhoto) || MessageObject.isVideoMessage(message)) ? 0 : -1;
        }
        if (!(message.media instanceof TLRPC.TL_messageMediaPhoto) && !MessageObject.isGifMessage(message) && !MessageObject.isVoiceMessage(message) && !MessageObject.isVideoMessage(message) && !MessageObject.isRoundVideoMessage(message)) {
            return -1;
        }
        int i = message.ttl;
        return (i <= 0 || i > 60) ? 0 : 1;
    }

    public TLRPC.Message getMessageWithCustomParamsOnlyInternal(int i, long j) {
        SQLiteCursor queryFinalized;
        boolean z;
        TLRPC.TL_message tL_message = new TLRPC.TL_message();
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                queryFinalized = this.database.queryFinalized("SELECT custom_params FROM messages_v2 WHERE mid = ? AND uid = ?", Integer.valueOf(i), Long.valueOf(j));
            } catch (SQLiteException e) {
                e = e;
            }
        } catch (Throwable th) {
            th = th;
        }
        try {
            if (queryFinalized.next()) {
                MessageCustomParamsHelper.readLocalParams(tL_message, queryFinalized.byteBufferValue(0));
                z = true;
            } else {
                z = false;
            }
            queryFinalized.dispose();
            if (!z) {
                sQLiteCursor = this.database.queryFinalized("SELECT custom_params FROM messages_topics WHERE mid = ? AND uid = ?", Integer.valueOf(i), Long.valueOf(j));
                if (sQLiteCursor.next()) {
                    MessageCustomParamsHelper.readLocalParams(tL_message, sQLiteCursor.byteBufferValue(0));
                }
                sQLiteCursor.dispose();
            }
        } catch (SQLiteException e2) {
            e = e2;
            sQLiteCursor = queryFinalized;
            checkSQLException(e);
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
            return tL_message;
        } catch (Throwable th2) {
            th = th2;
            sQLiteCursor = queryFinalized;
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
            throw th;
        }
        return tL_message;
    }

    public void getMessages(final long j, final long j2, boolean z, final int i, final int i2, final int i3, final int i4, final int i5, final int i6, final int i7, final long j3, final int i8, final boolean z2, final boolean z3, final Timer timer) {
        final Timer.Task start = Timer.start(timer, "MessagesStorage.getMessages: storageQueue.postRunnable");
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda155
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$getMessages$156(start, timer, j, j2, i, i2, i3, i4, i5, i6, i7, j3, i8, z2, z3);
            }
        });
    }

    public void getMessagesCount(final long j, final IntCallback intCallback) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda145
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$getMessagesCount$152(j, intCallback);
            }
        });
    }

    /*  JADX ERROR: Type inference failed
        jadx.core.utils.exceptions.JadxOverflowException: Type inference error: updates count limit reached
        	at jadx.core.utils.ErrorsCounter.addError(ErrorsCounter.java:59)
        	at jadx.core.utils.ErrorsCounter.error(ErrorsCounter.java:31)
        	at jadx.core.dex.attributes.nodes.NotificationAttrNode.addError(NotificationAttrNode.java:19)
        	at jadx.core.dex.visitors.typeinference.TypeInferenceVisitor.visit(TypeInferenceVisitor.java:77)
        */
    /* JADX WARN: Not initialized variable reg: 53, insn: 0x04ad: MOVE (r9 I:??[OBJECT, ARRAY]) = (r53 I:??[OBJECT, ARRAY]), block:B:1763:0x04a8 */
    /* JADX WARN: Unreachable blocks removed: 2, instructions: 3 */
    public java.lang.Runnable getMessagesInternal(long r66, long r68, int r70, int r71, int r72, int r73, int r74, int r75, int r76, long r77, int r79, boolean r80, boolean r81, org.telegram.messenger.Timer r82) {
        /*
            Method dump skipped, instructions count: 9623
            To view this dump add '--comments-level debug' option
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesStorage.getMessagesInternal(long, long, int, int, int, int, int, int, int, long, int, boolean, boolean, org.telegram.messenger.Timer):java.lang.Runnable");
    }

    public void getNewTask(final LongSparseArray longSparseArray, final LongSparseArray longSparseArray2) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda79
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$getNewTask$105(longSparseArray, longSparseArray2);
            }
        });
    }

    public void getSavedDialogMaxMessageId(final long j, final IntCallback intCallback) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda196
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$getSavedDialogMaxMessageId$51(j, intCallback);
            }
        });
    }

    public int getSecretG() {
        ensureOpened();
        return this.secretG;
    }

    public byte[] getSecretPBytes() {
        ensureOpened();
        return this.secretPBytes;
    }

    public Object[] getSentFile(final String str, final int i) {
        if (str == null || str.toLowerCase().endsWith("attheme")) {
            return null;
        }
        final CountDownLatch countDownLatch = new CountDownLatch(1);
        final Object[] objArr = new Object[2];
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda119
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$getSentFile$158(str, i, objArr, countDownLatch);
            }
        });
        try {
            countDownLatch.await();
        } catch (Exception e) {
            checkSQLException(e);
        }
        if (objArr[0] != null) {
            return objArr;
        }
        return null;
    }

    public HashMap<Long, Integer> getSmallGroupsParticipantsCount() {
        HashMap<Long, Integer> hashMap = new HashMap<>();
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                sQLiteCursor = this.database.queryFinalized("SELECT uid, info, participants_count FROM chat_settings_v2 WHERE participants_count > 1", new Object[0]);
                while (sQLiteCursor.next()) {
                    long longValue = sQLiteCursor.longValue(0);
                    NativeByteBuffer byteBufferValue = sQLiteCursor.byteBufferValue(1);
                    int intValue = sQLiteCursor.intValue(2);
                    if (byteBufferValue != null) {
                        TLRPC.ChatFull TLdeserialize = TLRPC.ChatFull.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                        byteBufferValue.reuse();
                        if (TLdeserialize instanceof TLRPC.TL_channelFull) {
                            hashMap.put(Long.valueOf(longValue), Integer.valueOf(intValue));
                        }
                    }
                }
                sQLiteCursor.dispose();
            } catch (Exception e) {
                checkSQLException(e);
                if (sQLiteCursor != null) {
                    sQLiteCursor.dispose();
                }
            }
            return hashMap;
        } catch (Throwable th) {
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
            throw th;
        }
    }

    public DispatchQueue getStorageQueue() {
        return this.storageQueue;
    }

    public void getUnreadMention(final long j, final long j2, final IntCallback intCallback) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda72
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$getUnreadMention$150(j2, j, intCallback);
            }
        });
    }

    public void getUnsentMessages(final int i) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda185
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$getUnsentMessages$146(i);
            }
        });
    }

    public TLRPC.User getUser(long j) {
        try {
            ArrayList<TLRPC.User> arrayList = new ArrayList<>();
            ArrayList<Long> arrayList2 = new ArrayList<>();
            arrayList2.add(Long.valueOf(j));
            getUsersInternal(arrayList2, arrayList);
            if (!arrayList.isEmpty()) {
                return arrayList.get(0);
            }
        } catch (Exception e) {
            checkSQLException(e);
        }
        return null;
    }

    public TLRPC.User getUserSync(final long j) {
        final CountDownLatch countDownLatch = new CountDownLatch(1);
        final TLRPC.User[] userArr = new TLRPC.User[1];
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda111
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$getUserSync$238(userArr, j, countDownLatch);
            }
        });
        try {
            countDownLatch.await();
        } catch (Exception e) {
            checkSQLException(e);
        }
        return userArr[0];
    }

    public ArrayList<TLRPC.User> getUsers(ArrayList<Long> arrayList) {
        ArrayList<TLRPC.User> arrayList2 = new ArrayList<>();
        try {
            getUsersInternal(arrayList, arrayList2);
        } catch (Exception e) {
            arrayList2.clear();
            checkSQLException(e);
        }
        return arrayList2;
    }

    public void getUsersInternal(ArrayList<Long> arrayList, ArrayList<TLRPC.User> arrayList2) {
        getUsersInternal(arrayList, arrayList2, false);
    }

    public void getUsersInternal(ArrayList<Long> arrayList, ArrayList<TLRPC.User> arrayList2, boolean z) {
        if (arrayList == null || arrayList.isEmpty() || arrayList2 == null) {
            return;
        }
        if (arrayList.size() > 50) {
            int i = 0;
            while (i < arrayList.size()) {
                Long l = arrayList.get(i);
                l.longValue();
                TLRPC.User user = getMessagesController().getUser(l);
                if (user != null) {
                    arrayList2.add(user);
                    arrayList.remove(i);
                    i--;
                }
                i++;
            }
        }
        if (arrayList.isEmpty()) {
            return;
        }
        SQLiteCursor queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT data, status FROM users WHERE uid IN(%s)", TextUtils.join(",", arrayList)), new Object[0]);
        while (queryFinalized.next()) {
            try {
                NativeByteBuffer byteBufferValue = queryFinalized.byteBufferValue(0);
                if (byteBufferValue != null) {
                    TLRPC.User TLdeserialize = TLRPC.User.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                    byteBufferValue.reuse();
                    if (TLdeserialize != null) {
                        TLRPC.UserStatus userStatus = TLdeserialize.status;
                        if (userStatus != null) {
                            userStatus.expires = queryFinalized.intValue(1);
                        }
                        arrayList2.add(TLdeserialize);
                        if (arrayList.size() > 50 && z) {
                            getMessagesController().putUser(TLdeserialize, true, false);
                        }
                    }
                }
            } catch (Exception e) {
                checkSQLException(e);
            }
        }
        queryFinalized.dispose();
    }

    public void getUsersInternal(HashSet<Long> hashSet, ArrayList<TLRPC.User> arrayList) {
        if (hashSet == null || hashSet.isEmpty() || arrayList == null) {
            return;
        }
        if (hashSet.size() > 50) {
            Iterator<Long> it = hashSet.iterator();
            while (it.hasNext()) {
                TLRPC.User user = getMessagesController().getUser(it.next());
                if (user != null) {
                    arrayList.add(user);
                    it.remove();
                }
            }
        }
        if (hashSet.isEmpty()) {
            return;
        }
        SQLiteCursor queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT data, status FROM users WHERE uid IN(%s)", TextUtils.join(",", hashSet)), new Object[0]);
        while (queryFinalized.next()) {
            try {
                NativeByteBuffer byteBufferValue = queryFinalized.byteBufferValue(0);
                if (byteBufferValue != null) {
                    TLRPC.User TLdeserialize = TLRPC.User.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                    byteBufferValue.reuse();
                    if (TLdeserialize != null) {
                        TLRPC.UserStatus userStatus = TLdeserialize.status;
                        if (userStatus != null) {
                            userStatus.expires = queryFinalized.intValue(1);
                        }
                        arrayList.add(TLdeserialize);
                    }
                }
            } catch (Exception e) {
                checkSQLException(e);
            }
        }
        queryFinalized.dispose();
    }

    public void getWallpapers() {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda146
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$getWallpapers$78();
            }
        });
    }

    public void getWidgetDialogIds(final int i, final int i2, final ArrayList<Long> arrayList, final ArrayList<TLRPC.User> arrayList2, final ArrayList<TLRPC.Chat> arrayList3, final boolean z) {
        final CountDownLatch countDownLatch = new CountDownLatch(1);
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda165
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$getWidgetDialogIds$161(i, arrayList, arrayList2, arrayList3, z, i2, countDownLatch);
            }
        });
        try {
            countDownLatch.await();
        } catch (Exception e) {
            checkSQLException(e);
        }
    }

    public void getWidgetDialogs(final int i, final int i2, final ArrayList<Long> arrayList, final LongSparseArray longSparseArray, final LongSparseArray longSparseArray2, final ArrayList<TLRPC.User> arrayList2, final ArrayList<TLRPC.Chat> arrayList3) {
        final CountDownLatch countDownLatch = new CountDownLatch(1);
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda129
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$getWidgetDialogs$162(i, arrayList, i2, longSparseArray, longSparseArray2, arrayList3, arrayList2, countDownLatch);
            }
        });
        try {
            countDownLatch.await();
        } catch (Exception e) {
            checkSQLException(e);
        }
    }

    public boolean hasAuthMessage(final int i) {
        final CountDownLatch countDownLatch = new CountDownLatch(1);
        final boolean[] zArr = new boolean[1];
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda174
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$hasAuthMessage$169(i, zArr, countDownLatch);
            }
        });
        try {
            countDownLatch.await();
        } catch (Exception e) {
            checkSQLException(e);
        }
        return zArr[0];
    }

    public boolean hasInviteMeMessage(final long j) {
        final CountDownLatch countDownLatch = new CountDownLatch(1);
        final boolean[] zArr = new boolean[1];
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda76
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$hasInviteMeMessage$137(j, zArr, countDownLatch);
            }
        });
        try {
            countDownLatch.await();
        } catch (Exception e) {
            checkSQLException(e);
        }
        return zArr[0];
    }

    public boolean isDatabaseMigrationInProgress() {
        return this.databaseMigrationInProgress;
    }

    public void isDialogHasTopMessage(final long j, final Runnable runnable) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda12
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$isDialogHasTopMessage$168(j, runnable);
            }
        });
    }

    public boolean isMigratedChat(final long j) {
        final CountDownLatch countDownLatch = new CountDownLatch(1);
        final boolean[] zArr = new boolean[1];
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda9
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$isMigratedChat$135(j, zArr, countDownLatch);
            }
        });
        try {
            countDownLatch.await();
        } catch (Exception e) {
            checkSQLException(e);
        }
        return zArr[0];
    }

    public void loadChannelAdmins(final long j) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda5
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$loadChannelAdmins$117(j);
            }
        });
    }

    public TLRPC.ChatFull loadChatInfo(long j, boolean z, CountDownLatch countDownLatch, boolean z2, boolean z3) {
        return loadChatInfo(j, z, countDownLatch, z2, z3, 0);
    }

    public TLRPC.ChatFull loadChatInfo(final long j, final boolean z, final CountDownLatch countDownLatch, final boolean z2, final boolean z3, final int i) {
        final TLRPC.ChatFull[] chatFullArr = new TLRPC.ChatFull[1];
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda158
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$loadChatInfo$138(chatFullArr, j, z, z2, z3, i, countDownLatch);
            }
        });
        if (countDownLatch != null) {
            try {
                countDownLatch.await();
            } catch (Throwable unused) {
            }
        }
        return chatFullArr[0];
    }

    public TLRPC.ChatFull loadChatInfoInQueue(long j, boolean z, boolean z2, boolean z3, int i) {
        return loadChatInfoInternal(j, z, z2, z3, i);
    }

    public void loadGroupedMessagesForTopicUpdates(ArrayList<TopicsController.TopicUpdate> arrayList) {
        if (arrayList == null) {
            return;
        }
        try {
            LongSparseArray longSparseArray = new LongSparseArray();
            for (int i = 0; i < arrayList.size(); i++) {
                if (!arrayList.get(i).reloadTopic && !arrayList.get(i).onlyCounters && arrayList.get(i).topMessage != null) {
                    long j = arrayList.get(i).topMessage.grouped_id;
                    if (j != 0) {
                        ArrayList arrayList2 = (ArrayList) longSparseArray.get(j);
                        if (arrayList2 == null) {
                            arrayList2 = new ArrayList();
                            longSparseArray.put(j, arrayList2);
                        }
                        arrayList2.add(arrayList.get(i));
                    }
                }
            }
            for (int i2 = 0; i2 < longSparseArray.size(); i2++) {
                long keyAt = longSparseArray.keyAt(i2);
                ArrayList arrayList3 = (ArrayList) longSparseArray.valueAt(i2);
                SQLiteCursor queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT data FROM messages_v2 WHERE uid = %s AND group_id = %s ORDER BY date DESC", Long.valueOf(((TopicsController.TopicUpdate) arrayList3.get(0)).dialogId), Long.valueOf(keyAt)), new Object[0]);
                ArrayList<MessageObject> arrayList4 = null;
                while (queryFinalized.next()) {
                    NativeByteBuffer byteBufferValue = queryFinalized.byteBufferValue(0);
                    TLRPC.Message TLdeserialize = TLRPC.Message.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                    if (TLdeserialize != null) {
                        TLdeserialize.readAttachPath(byteBufferValue, UserConfig.getInstance(this.currentAccount).clientUserId);
                    }
                    if (arrayList4 == null) {
                        arrayList4 = new ArrayList<>();
                    }
                    arrayList4.add(new MessageObject(this.currentAccount, TLdeserialize, false, false));
                }
                queryFinalized.dispose();
                for (int i3 = 0; i3 < arrayList3.size(); i3++) {
                    ((TopicsController.TopicUpdate) arrayList3.get(i3)).groupedMessages = arrayList4;
                }
            }
        } catch (Throwable th) {
            checkSQLException(th);
        }
    }

    public void loadGroupedMessagesForTopics(long j, ArrayList<TLRPC.TL_forumTopic> arrayList) {
        if (arrayList == null) {
            return;
        }
        try {
            LongSparseArray longSparseArray = new LongSparseArray();
            for (int i = 0; i < arrayList.size(); i++) {
                if (arrayList.get(i).topMessage != null) {
                    long j2 = arrayList.get(i).topMessage.grouped_id;
                    if (j2 != 0) {
                        ArrayList arrayList2 = (ArrayList) longSparseArray.get(j2);
                        if (arrayList2 == null) {
                            arrayList2 = new ArrayList();
                            longSparseArray.put(j2, arrayList2);
                        }
                        arrayList2.add(arrayList.get(i));
                    }
                }
            }
            for (int i2 = 0; i2 < longSparseArray.size(); i2++) {
                long keyAt = longSparseArray.keyAt(i2);
                ArrayList arrayList3 = (ArrayList) longSparseArray.valueAt(i2);
                SQLiteCursor queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT data FROM messages_v2 WHERE uid = %s AND group_id = %s ORDER BY date DESC", Long.valueOf(j), Long.valueOf(keyAt)), new Object[0]);
                ArrayList<MessageObject> arrayList4 = null;
                while (queryFinalized.next()) {
                    NativeByteBuffer byteBufferValue = queryFinalized.byteBufferValue(0);
                    TLRPC.Message TLdeserialize = TLRPC.Message.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                    if (TLdeserialize != null) {
                        TLdeserialize.readAttachPath(byteBufferValue, UserConfig.getInstance(this.currentAccount).clientUserId);
                    }
                    if (arrayList4 == null) {
                        arrayList4 = new ArrayList<>();
                    }
                    arrayList4.add(new MessageObject(this.currentAccount, TLdeserialize, false, false));
                }
                queryFinalized.dispose();
                for (int i3 = 0; i3 < arrayList3.size(); i3++) {
                    ((TLRPC.TL_forumTopic) arrayList3.get(i3)).groupedMessages = arrayList4;
                }
            }
        } catch (Throwable th) {
            checkSQLException(th);
        }
    }

    public void loadMessageAttachPaths(final ArrayList<MessageObject> arrayList, final Runnable runnable) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda124
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$loadMessageAttachPaths$215(arrayList, runnable);
            }
        });
    }

    /* JADX WARN: Code restructure failed: missing block: B:48:0x016c, code lost:
    
        r11 = r20;
     */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:35:0x00f4 A[Catch: all -> 0x0136, Exception -> 0x013a, TryCatch #4 {Exception -> 0x013a, all -> 0x0136, blocks: (B:33:0x00ee, B:35:0x00f4, B:37:0x00fa, B:39:0x0121, B:41:0x0145, B:43:0x0152, B:45:0x0159, B:49:0x013e, B:51:0x0173), top: B:32:0x00ee }] */
    /* JADX WARN: Removed duplicated region for block: B:51:0x0173 A[Catch: all -> 0x0136, Exception -> 0x013a, TRY_LEAVE, TryCatch #4 {Exception -> 0x013a, all -> 0x0136, blocks: (B:33:0x00ee, B:35:0x00f4, B:37:0x00fa, B:39:0x0121, B:41:0x0145, B:43:0x0152, B:45:0x0159, B:49:0x013e, B:51:0x0173), top: B:32:0x00ee }] */
    /* JADX WARN: Removed duplicated region for block: B:61:0x0194  */
    /* JADX WARN: Type inference failed for: r10v10 */
    /* JADX WARN: Type inference failed for: r10v3, types: [boolean, int] */
    /* JADX WARN: Type inference failed for: r10v8 */
    /* JADX WARN: Type inference failed for: r3v6 */
    /* JADX WARN: Unsupported multi-entry loop pattern (BACK_EDGE: B:46:0x016e -> B:29:0x016c). Please report as a decompilation issue!!! */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    protected void loadReplyMessages(LongSparseArray longSparseArray, LongSparseArray longSparseArray2, ArrayList<Long> arrayList, ArrayList<Long> arrayList2, int i) {
        boolean z;
        int i2;
        int i3;
        boolean z2;
        int i4;
        SQLiteCursor queryFinalized;
        int i5;
        ?? r10;
        long j;
        int i6;
        LongSparseArray longSparseArray3 = longSparseArray;
        int i7 = 2;
        int i8 = 1;
        if (longSparseArray.isEmpty()) {
            return;
        }
        boolean z3 = i == 1;
        boolean z4 = i == 5;
        long clientUserId = getUserConfig().getClientUserId();
        int size = longSparseArray.size();
        int i9 = 0;
        while (i9 < size) {
            long keyAt = longSparseArray3.keyAt(i9);
            SparseArray sparseArray = (SparseArray) longSparseArray3.valueAt(i9);
            ArrayList arrayList3 = (ArrayList) longSparseArray2.get(keyAt);
            if (arrayList3 == null) {
                z = z3;
                i2 = size;
                i3 = i9;
            } else {
                int i10 = 0;
                SQLiteCursor sQLiteCursor = null;
                while (i10 < i7) {
                    if (i10 != i8 || z3) {
                        boolean z5 = i10 == i8;
                        try {
                            if (z4) {
                                try {
                                    try {
                                        z2 = z3;
                                        i4 = size;
                                        queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT data, mid, date, topic_id FROM quick_replies_messages WHERE mid IN(%s) AND topic_id = %d", TextUtils.join(",", arrayList3), Long.valueOf(keyAt)), new Object[0]);
                                        i5 = i9;
                                    } catch (Exception e) {
                                        throw e;
                                    }
                                } catch (Throwable th) {
                                    th = th;
                                    if (sQLiteCursor != null) {
                                        sQLiteCursor.dispose();
                                    }
                                    throw th;
                                }
                            } else {
                                z2 = z3;
                                i4 = size;
                                if (z5) {
                                    i5 = i9;
                                    queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT data, mid, date, uid FROM scheduled_messages_v2 WHERE mid IN(%s) AND uid = %d", TextUtils.join(",", arrayList3), Long.valueOf(keyAt)), new Object[0]);
                                } else {
                                    i5 = i9;
                                    r10 = 0;
                                    queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT data, mid, date, uid FROM messages_v2 WHERE mid IN(%s) AND uid = %d", TextUtils.join(",", arrayList3), Long.valueOf(keyAt)), new Object[0]);
                                    if (queryFinalized.next()) {
                                        NativeByteBuffer byteBufferValue = queryFinalized.byteBufferValue(r10);
                                        if (byteBufferValue != 0) {
                                            TLRPC.Message TLdeserialize = TLRPC.Message.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(r10), r10);
                                            long j2 = keyAt;
                                            TLdeserialize.readAttachPath(byteBufferValue, getUserConfig().clientUserId);
                                            byteBufferValue.reuse();
                                            TLdeserialize.id = queryFinalized.intValue(1);
                                            TLdeserialize.date = queryFinalized.intValue(2);
                                            if (z4) {
                                                TLdeserialize.dialog_id = clientUserId;
                                                TLdeserialize.flags |= 1073741824;
                                                TLdeserialize.quick_reply_shortcut_id = queryFinalized.intValue(3);
                                            } else {
                                                TLdeserialize.dialog_id = queryFinalized.longValue(3);
                                            }
                                            addUsersAndChatsFromMessage(TLdeserialize, arrayList, arrayList2, null);
                                            ArrayList arrayList4 = (ArrayList) sparseArray.get(TLdeserialize.id);
                                            if (arrayList4 != null) {
                                                int size2 = arrayList4.size();
                                                for (int i11 = 0; i11 < size2; i11++) {
                                                    ((TLRPC.Message) arrayList4.get(i11)).replyMessage = TLdeserialize;
                                                    MessageObject.getDialogId(TLdeserialize);
                                                }
                                            }
                                            keyAt = j2;
                                        }
                                    } else {
                                        j = keyAt;
                                        queryFinalized.dispose();
                                        sQLiteCursor = queryFinalized;
                                        i6 = 1;
                                    }
                                }
                            }
                            if (queryFinalized.next()) {
                            }
                        } catch (Exception e2) {
                            throw e2;
                        } catch (Throwable th2) {
                            th = th2;
                            sQLiteCursor = queryFinalized;
                            if (sQLiteCursor != null) {
                            }
                            throw th;
                        }
                        r10 = 0;
                        queryFinalized = queryFinalized;
                    } else {
                        z2 = z3;
                        i4 = size;
                        i5 = i9;
                        j = keyAt;
                        i6 = 1;
                    }
                    i10 += i6;
                    i9 = i5;
                    z3 = z2;
                    size = i4;
                    keyAt = j;
                    i7 = 2;
                    i8 = 1;
                }
                z = z3;
                i2 = size;
                i3 = i9;
                if (sQLiteCursor != null) {
                    sQLiteCursor.dispose();
                }
            }
            i9 = i3 + 1;
            longSparseArray3 = longSparseArray;
            z3 = z;
            size = i2;
            i7 = 2;
            i8 = 1;
        }
    }

    public void loadTopics(final long j, final Consumer<ArrayList<TLRPC.TL_forumTopic>> consumer) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda59
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$loadTopics$49(j, consumer);
            }
        });
    }

    public void loadUnreadMessages() {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda166
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$loadUnreadMessages$74();
            }
        });
    }

    public void loadUserInfo(final TLRPC.User user, final boolean z, final int i, int i2) {
        if (user == null) {
            return;
        }
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda195
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$loadUserInfo$123(user, z, i);
            }
        });
    }

    public ArrayList<TLRPC.UserFull> loadUserInfos(HashSet<Long> hashSet) {
        ArrayList<TLRPC.UserFull> arrayList = new ArrayList<>();
        try {
            String join = TextUtils.join(",", hashSet);
            SQLiteCursor queryFinalized = this.database.queryFinalized("SELECT info, pinned FROM user_settings WHERE uid IN(" + join + ")", new Object[0]);
            while (queryFinalized.next()) {
                NativeByteBuffer byteBufferValue = queryFinalized.byteBufferValue(0);
                if (byteBufferValue != null) {
                    TLRPC.UserFull TLdeserialize = TLRPC.UserFull.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                    TLdeserialize.pinned_msg_id = queryFinalized.intValue(1);
                    arrayList.add(TLdeserialize);
                    byteBufferValue.reuse();
                }
            }
            queryFinalized.dispose();
        } catch (Exception e) {
            checkSQLException(e);
        }
        return arrayList;
    }

    /* JADX WARN: Code restructure failed: missing block: B:195:0x03db, code lost:
    
        if (r3.contains(" " + r8) != false) goto L199;
     */
    /* JADX WARN: Code restructure failed: missing block: B:468:0x004e, code lost:
    
        if (r7.length() == 0) goto L10;
     */
    /* JADX WARN: Code restructure failed: missing block: B:87:0x0169, code lost:
    
        if (r15.startsWith(r6) == false) goto L87;
     */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:101:0x01d4 A[Catch: all -> 0x0171, Exception -> 0x069b, TRY_LEAVE, TryCatch #7 {all -> 0x0171, blocks: (B:86:0x0165, B:95:0x01a2, B:97:0x01b2, B:99:0x01c3, B:101:0x01d4, B:106:0x01fa, B:110:0x020e, B:450:0x017f), top: B:85:0x0165 }] */
    /* JADX WARN: Removed duplicated region for block: B:106:0x01fa A[Catch: all -> 0x0171, Exception -> 0x069b, TRY_ENTER, TRY_LEAVE, TryCatch #7 {all -> 0x0171, blocks: (B:86:0x0165, B:95:0x01a2, B:97:0x01b2, B:99:0x01c3, B:101:0x01d4, B:106:0x01fa, B:110:0x020e, B:450:0x017f), top: B:85:0x0165 }] */
    /* JADX WARN: Removed duplicated region for block: B:137:0x029d A[Catch: all -> 0x00f1, Exception -> 0x071f, TryCatch #8 {Exception -> 0x071f, blocks: (B:27:0x00be, B:29:0x00c4, B:32:0x00e2, B:37:0x00f5, B:39:0x00fb, B:55:0x0113, B:57:0x011d, B:58:0x0137, B:67:0x0127, B:69:0x0132, B:75:0x0140, B:77:0x014e, B:81:0x0156, B:112:0x021a, B:114:0x0220, B:117:0x0234, B:119:0x023b, B:122:0x024c, B:124:0x0256, B:127:0x026f, B:129:0x0275, B:133:0x028d, B:137:0x029d, B:139:0x02a8, B:142:0x02bb, B:158:0x032e, B:145:0x02cb, B:147:0x02d7, B:150:0x02e7, B:151:0x02eb, B:152:0x0314, B:155:0x02f0, B:172:0x0346, B:180:0x0384, B:182:0x038a, B:187:0x03a3, B:189:0x03ab, B:192:0x03c2, B:194:0x03c8, B:197:0x041a, B:199:0x03e1, B:201:0x03e7, B:204:0x03f8, B:209:0x0409, B:214:0x0413, B:219:0x041e, B:221:0x0422, B:223:0x0428, B:226:0x0432, B:235:0x0450, B:358:0x06e5, B:360:0x06eb, B:363:0x06f7, B:366:0x070b, B:368:0x0713, B:371:0x0729, B:373:0x0731, B:376:0x074a, B:378:0x0750, B:382:0x0768, B:388:0x0775, B:390:0x077c, B:392:0x078b, B:395:0x0795, B:396:0x07c6, B:397:0x079f, B:386:0x07d0, B:409:0x07dd), top: B:26:0x00be }] */
    /* JADX WARN: Removed duplicated region for block: B:163:0x0327  */
    /* JADX WARN: Removed duplicated region for block: B:175:0x0368 A[Catch: all -> 0x0661, Exception -> 0x0666, TRY_ENTER, TRY_LEAVE, TryCatch #23 {Exception -> 0x0666, all -> 0x0661, blocks: (B:467:0x004a, B:16:0x0064, B:20:0x0080, B:24:0x0094, B:175:0x0368, B:179:0x037a, B:240:0x046c, B:244:0x0480), top: B:466:0x004a }] */
    /* JADX WARN: Removed duplicated region for block: B:238:0x0468  */
    /* JADX WARN: Removed duplicated region for block: B:253:0x07fd  */
    /* JADX WARN: Removed duplicated region for block: B:255:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:260:0x0806  */
    /* JADX WARN: Removed duplicated region for block: B:262:? A[SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:293:0x0647 A[Catch: all -> 0x04b8, Exception -> 0x04bc, LOOP:6: B:277:0x04c3->B:293:0x0647, LOOP_END, TryCatch #20 {Exception -> 0x04bc, all -> 0x04b8, blocks: (B:268:0x048a, B:270:0x0490, B:273:0x04aa, B:275:0x04b1, B:278:0x04c5, B:280:0x04cd, B:283:0x04e4, B:285:0x04ea, B:289:0x0502, B:295:0x050d, B:297:0x0514, B:298:0x0524, B:300:0x052a, B:303:0x053c, B:305:0x05cb, B:306:0x05cd, B:308:0x05d9, B:311:0x05e3, B:312:0x0633, B:315:0x060a, B:293:0x0647, B:325:0x0651), top: B:267:0x048a }] */
    /* JADX WARN: Removed duplicated region for block: B:294:0x050d A[SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:329:0x0681 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:343:0x06b0 A[Catch: all -> 0x0694, Exception -> 0x069b, TRY_ENTER, TRY_LEAVE, TryCatch #11 {all -> 0x0694, blocks: (B:330:0x0681, B:332:0x068b, B:334:0x068f, B:343:0x06b0), top: B:329:0x0681 }] */
    /* JADX WARN: Removed duplicated region for block: B:349:0x06ce  */
    /* JADX WARN: Removed duplicated region for block: B:360:0x06eb A[Catch: all -> 0x0719, Exception -> 0x071f, TryCatch #8 {Exception -> 0x071f, blocks: (B:27:0x00be, B:29:0x00c4, B:32:0x00e2, B:37:0x00f5, B:39:0x00fb, B:55:0x0113, B:57:0x011d, B:58:0x0137, B:67:0x0127, B:69:0x0132, B:75:0x0140, B:77:0x014e, B:81:0x0156, B:112:0x021a, B:114:0x0220, B:117:0x0234, B:119:0x023b, B:122:0x024c, B:124:0x0256, B:127:0x026f, B:129:0x0275, B:133:0x028d, B:137:0x029d, B:139:0x02a8, B:142:0x02bb, B:158:0x032e, B:145:0x02cb, B:147:0x02d7, B:150:0x02e7, B:151:0x02eb, B:152:0x0314, B:155:0x02f0, B:172:0x0346, B:180:0x0384, B:182:0x038a, B:187:0x03a3, B:189:0x03ab, B:192:0x03c2, B:194:0x03c8, B:197:0x041a, B:199:0x03e1, B:201:0x03e7, B:204:0x03f8, B:209:0x0409, B:214:0x0413, B:219:0x041e, B:221:0x0422, B:223:0x0428, B:226:0x0432, B:235:0x0450, B:358:0x06e5, B:360:0x06eb, B:363:0x06f7, B:366:0x070b, B:368:0x0713, B:371:0x0729, B:373:0x0731, B:376:0x074a, B:378:0x0750, B:382:0x0768, B:388:0x0775, B:390:0x077c, B:392:0x078b, B:395:0x0795, B:396:0x07c6, B:397:0x079f, B:386:0x07d0, B:409:0x07dd), top: B:26:0x00be }] */
    /* JADX WARN: Removed duplicated region for block: B:386:0x07d0 A[Catch: all -> 0x0719, Exception -> 0x071f, LOOP:10: B:370:0x0727->B:386:0x07d0, LOOP_END, TryCatch #8 {Exception -> 0x071f, blocks: (B:27:0x00be, B:29:0x00c4, B:32:0x00e2, B:37:0x00f5, B:39:0x00fb, B:55:0x0113, B:57:0x011d, B:58:0x0137, B:67:0x0127, B:69:0x0132, B:75:0x0140, B:77:0x014e, B:81:0x0156, B:112:0x021a, B:114:0x0220, B:117:0x0234, B:119:0x023b, B:122:0x024c, B:124:0x0256, B:127:0x026f, B:129:0x0275, B:133:0x028d, B:137:0x029d, B:139:0x02a8, B:142:0x02bb, B:158:0x032e, B:145:0x02cb, B:147:0x02d7, B:150:0x02e7, B:151:0x02eb, B:152:0x0314, B:155:0x02f0, B:172:0x0346, B:180:0x0384, B:182:0x038a, B:187:0x03a3, B:189:0x03ab, B:192:0x03c2, B:194:0x03c8, B:197:0x041a, B:199:0x03e1, B:201:0x03e7, B:204:0x03f8, B:209:0x0409, B:214:0x0413, B:219:0x041e, B:221:0x0422, B:223:0x0428, B:226:0x0432, B:235:0x0450, B:358:0x06e5, B:360:0x06eb, B:363:0x06f7, B:366:0x070b, B:368:0x0713, B:371:0x0729, B:373:0x0731, B:376:0x074a, B:378:0x0750, B:382:0x0768, B:388:0x0775, B:390:0x077c, B:392:0x078b, B:395:0x0795, B:396:0x07c6, B:397:0x079f, B:386:0x07d0, B:409:0x07dd), top: B:26:0x00be }] */
    /* JADX WARN: Removed duplicated region for block: B:387:0x0775 A[SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:435:0x045e  */
    /* JADX WARN: Removed duplicated region for block: B:440:0x0358  */
    /* JADX WARN: Removed duplicated region for block: B:99:0x01c3 A[Catch: all -> 0x0171, Exception -> 0x069b, TryCatch #7 {all -> 0x0171, blocks: (B:86:0x0165, B:95:0x01a2, B:97:0x01b2, B:99:0x01c3, B:101:0x01d4, B:106:0x01fa, B:110:0x020e, B:450:0x017f), top: B:85:0x0165 }] */
    /* JADX WARN: Type inference failed for: r11v31 */
    /* JADX WARN: Type inference failed for: r11v32 */
    /* JADX WARN: Type inference failed for: r11v37 */
    /* JADX WARN: Type inference failed for: r11v39 */
    /* JADX WARN: Type inference failed for: r32v0, types: [java.util.ArrayList, java.util.ArrayList<java.lang.Object>] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void localSearch(int i, String str, ArrayList<Object> arrayList, ArrayList<CharSequence> arrayList2, ArrayList<TLRPC.User> arrayList3, ArrayList<Long> arrayList4, int i2) {
        SQLiteCursor sQLiteCursor;
        Throwable th;
        SQLiteCursor sQLiteCursor2;
        Exception exc;
        SQLiteCursor sQLiteCursor3;
        Throwable th2;
        String str2;
        int i3;
        String str3;
        SQLiteCursor queryFinalized;
        Throwable th3;
        Exception e;
        String str4;
        int i4;
        ArrayList arrayList5;
        LongSparseArray longSparseArray;
        String str5;
        int i5;
        int i6;
        LongSparseArray longSparseArray2;
        String str6;
        String str7;
        ArrayList arrayList6;
        int i7;
        int i8;
        String str8;
        String str9;
        String str10;
        String str11;
        int i9;
        TLRPC.EncryptedChat encryptedChat;
        TLRPC.User user;
        LongSparseArray longSparseArray3;
        ArrayList arrayList7;
        LongSparseArray longSparseArray4;
        int i10;
        String str12;
        ?? r11;
        String str13;
        String str14;
        String str15;
        TLRPC.User TLdeserialize;
        String str16;
        String str17;
        TLRPC.User user2;
        Long valueOf;
        ArrayList arrayList8;
        long clientUserId = UserConfig.getInstance(this.currentAccount).getClientUserId();
        try {
            try {
                String lowerCase = str.trim().toLowerCase();
                if (TextUtils.isEmpty(lowerCase)) {
                    return;
                }
                String lowerCase2 = LocaleController.getString(R.string.SavedMessages).toLowerCase();
                String str18 = "saved messages";
                String lowerCase3 = LocaleController.getString(R.string.RepliesTitle).toLowerCase();
                String translitString = LocaleController.getInstance().getTranslitString(lowerCase);
                if (!lowerCase.equals(translitString)) {
                    try {
                    } catch (Exception e2) {
                        exc = e2;
                        sQLiteCursor2 = null;
                        sQLiteCursor3 = sQLiteCursor2;
                        try {
                            checkSQLException(exc);
                            if (sQLiteCursor3 == null) {
                            }
                        } catch (Throwable th4) {
                            th2 = th4;
                            th = th2;
                            if (sQLiteCursor3 == null) {
                                throw th;
                            }
                            sQLiteCursor3.dispose();
                            throw th;
                        }
                    } catch (Throwable th5) {
                        th = th5;
                        sQLiteCursor = null;
                        sQLiteCursor3 = sQLiteCursor;
                        if (sQLiteCursor3 == null) {
                        }
                    }
                }
                translitString = null;
                int i11 = (translitString != null ? 1 : 0) + 1;
                String[] strArr = new String[i11];
                strArr[0] = lowerCase;
                if (translitString != null) {
                    strArr[1] = translitString;
                }
                ArrayList arrayList9 = new ArrayList();
                ArrayList arrayList10 = new ArrayList();
                ArrayList arrayList11 = new ArrayList();
                LongSparseArray longSparseArray5 = new LongSparseArray();
                if (i2 >= 0) {
                    i3 = i11;
                    str2 = "replies";
                    str3 = lowerCase3;
                    try {
                        queryFinalized = getDatabase().queryFinalized("SELECT did, date FROM dialogs WHERE folder_id = ? ORDER BY date DESC LIMIT 600", Integer.valueOf(i2));
                    } catch (Exception e3) {
                        e = e3;
                        exc = e;
                        sQLiteCursor3 = null;
                        checkSQLException(exc);
                        if (sQLiteCursor3 == null) {
                        }
                    } catch (Throwable th6) {
                        th3 = th6;
                        th = th3;
                        sQLiteCursor3 = null;
                        if (sQLiteCursor3 == null) {
                        }
                    }
                } else {
                    str2 = "replies";
                    i3 = i11;
                    str3 = lowerCase3;
                    queryFinalized = getDatabase().queryFinalized("SELECT did, date FROM dialogs ORDER BY date DESC LIMIT 600", new Object[0]);
                }
                while (queryFinalized.next()) {
                    try {
                        try {
                            String str19 = lowerCase;
                            long longValue = queryFinalized.longValue(0);
                            DialogsSearchAdapter.DialogSearchResult dialogSearchResult = new DialogsSearchAdapter.DialogSearchResult();
                            String str20 = str18;
                            dialogSearchResult.date = queryFinalized.intValue(1);
                            longSparseArray5.put(longValue, dialogSearchResult);
                            if (i != 15 || (arrayList4 != null && arrayList4.contains(Long.valueOf(longValue)))) {
                                if (DialogObject.isEncryptedDialog(longValue)) {
                                    if (i == 0 || i == 3) {
                                        int encryptedChatId = DialogObject.getEncryptedChatId(longValue);
                                        if (!arrayList11.contains(Integer.valueOf(encryptedChatId))) {
                                            arrayList11.add(Integer.valueOf(encryptedChatId));
                                        }
                                    }
                                } else if (DialogObject.isUserDialog(longValue)) {
                                    if ((i != 4 || longValue != clientUserId) && i != 6 && i != 5 && i != 2 && !arrayList9.contains(Long.valueOf(longValue))) {
                                        valueOf = Long.valueOf(longValue);
                                        arrayList8 = arrayList9;
                                        arrayList8.add(valueOf);
                                    }
                                } else if (i != 4) {
                                    long j = -longValue;
                                    if (!arrayList10.contains(Long.valueOf(j))) {
                                        valueOf = Long.valueOf(j);
                                        arrayList8 = arrayList10;
                                        arrayList8.add(valueOf);
                                    }
                                }
                            }
                            lowerCase = str19;
                            str18 = str20;
                        } catch (Exception e4) {
                            sQLiteCursor3 = queryFinalized;
                            exc = e4;
                        }
                    } catch (Throwable th7) {
                        sQLiteCursor3 = queryFinalized;
                        th = th7;
                    }
                }
                String str21 = str18;
                String str22 = lowerCase;
                queryFinalized.dispose();
                if (i != 4) {
                    str4 = str22;
                    try {
                        try {
                        } catch (Throwable th8) {
                            th = th8;
                            sQLiteCursor3 = null;
                            if (sQLiteCursor3 == null) {
                            }
                        }
                    } catch (Exception e5) {
                        exc = e5;
                        sQLiteCursor3 = null;
                        checkSQLException(exc);
                        if (sQLiteCursor3 == null) {
                            sQLiteCursor3.dispose();
                            return;
                        }
                        return;
                    }
                } else {
                    str4 = str22;
                }
                try {
                    try {
                        if (!str21.startsWith(str4)) {
                            i4 = 0;
                            if ((i != 4 && str3.startsWith(str4)) || str2.startsWith(str4)) {
                                user2 = getMessagesController().getUser((Long) 708513L);
                                if (user2 == null) {
                                    user2 = getMessagesController().getUser(Long.valueOf(UserObject.REPLY_BOT));
                                }
                                if (user2 != null) {
                                    DialogsSearchAdapter.DialogSearchResult dialogSearchResult2 = new DialogsSearchAdapter.DialogSearchResult();
                                    dialogSearchResult2.date = ConnectionsManager.DEFAULT_DATACENTER_ID;
                                    dialogSearchResult2.name = LocaleController.getString(R.string.RepliesTitle);
                                    dialogSearchResult2.object = user2;
                                    longSparseArray5.put(user2.id, dialogSearchResult2);
                                    i4++;
                                }
                            }
                            String str23 = ";;;";
                            String str24 = " ";
                            if (arrayList9.isEmpty()) {
                                arrayList5 = arrayList11;
                                longSparseArray = longSparseArray5;
                                str5 = ";;;";
                                i5 = i3;
                            } else {
                                int i12 = i4;
                                try {
                                    SQLiteCursor queryFinalized2 = getDatabase().queryFinalized(String.format(Locale.US, "SELECT data, status, name FROM users WHERE uid IN(%s)", TextUtils.join(",", arrayList9)), new Object[0]);
                                    i4 = i12;
                                    while (queryFinalized2.next()) {
                                        String stringValue = queryFinalized2.stringValue(2);
                                        String translitString2 = LocaleController.getInstance().getTranslitString(stringValue);
                                        if (stringValue.equals(translitString2)) {
                                            translitString2 = null;
                                        }
                                        int lastIndexOf = stringValue.lastIndexOf(str23);
                                        String substring = lastIndexOf != -1 ? stringValue.substring(lastIndexOf + 3) : null;
                                        String str25 = str23;
                                        int i13 = i3;
                                        int i14 = 0;
                                        boolean z = false;
                                        while (true) {
                                            if (i14 >= i13) {
                                                arrayList7 = arrayList11;
                                                longSparseArray4 = longSparseArray5;
                                                i10 = i13;
                                                break;
                                            }
                                            arrayList7 = arrayList11;
                                            str12 = strArr[i14];
                                            if (stringValue.startsWith(str12)) {
                                                i10 = i13;
                                            } else {
                                                i10 = i13;
                                                if (!stringValue.contains(" " + str12)) {
                                                    if (translitString2 != null) {
                                                        if (!translitString2.startsWith(str12)) {
                                                            if (translitString2.contains(" " + str12)) {
                                                            }
                                                        }
                                                    }
                                                    r11 = (substring == null || !substring.startsWith(str12)) ? z : 2;
                                                    if (r11 == 0) {
                                                        str13 = translitString2;
                                                        str14 = stringValue;
                                                        NativeByteBuffer byteBufferValue = queryFinalized2.byteBufferValue(0);
                                                        if (byteBufferValue == null) {
                                                            longSparseArray4 = longSparseArray5;
                                                            break;
                                                        }
                                                        str15 = substring;
                                                        TLdeserialize = TLRPC.User.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                                                        byteBufferValue.reuse();
                                                        if (i != 15 || (arrayList4 != null && arrayList4.contains(Long.valueOf(TLdeserialize.id)))) {
                                                            break;
                                                        }
                                                    } else {
                                                        str13 = translitString2;
                                                        str14 = stringValue;
                                                        str15 = substring;
                                                    }
                                                    i14++;
                                                    translitString2 = str13;
                                                    stringValue = str14;
                                                    arrayList11 = arrayList7;
                                                    substring = str15;
                                                    longSparseArray5 = longSparseArray5;
                                                    z = r11;
                                                    i13 = i10;
                                                }
                                            }
                                            r11 = 1;
                                            if (r11 == 0) {
                                            }
                                            i14++;
                                            translitString2 = str13;
                                            stringValue = str14;
                                            arrayList11 = arrayList7;
                                            substring = str15;
                                            longSparseArray5 = longSparseArray5;
                                            z = r11;
                                            i13 = i10;
                                        }
                                        DialogsSearchAdapter.DialogSearchResult dialogSearchResult3 = (DialogsSearchAdapter.DialogSearchResult) longSparseArray5.get(TLdeserialize.id);
                                        TLRPC.UserStatus userStatus = TLdeserialize.status;
                                        if (userStatus != null) {
                                            longSparseArray4 = longSparseArray5;
                                            userStatus.expires = queryFinalized2.intValue(1);
                                        } else {
                                            longSparseArray4 = longSparseArray5;
                                        }
                                        if (r11 == 1) {
                                            str16 = TLdeserialize.first_name;
                                            str17 = TLdeserialize.last_name;
                                        } else {
                                            str16 = "@" + UserObject.getPublicUsername(TLdeserialize);
                                            str12 = "@" + str12;
                                            str17 = null;
                                        }
                                        dialogSearchResult3.name = AndroidUtilities.generateSearchName(str16, str17, str12);
                                        dialogSearchResult3.object = TLdeserialize;
                                        i4++;
                                        str23 = str25;
                                        arrayList11 = arrayList7;
                                        i3 = i10;
                                        longSparseArray5 = longSparseArray4;
                                    }
                                    arrayList5 = arrayList11;
                                    longSparseArray = longSparseArray5;
                                    str5 = str23;
                                    i5 = i3;
                                    queryFinalized2.dispose();
                                } catch (Exception e6) {
                                    e = e6;
                                    exc = e;
                                    sQLiteCursor3 = null;
                                    checkSQLException(exc);
                                    if (sQLiteCursor3 == null) {
                                    }
                                } catch (Throwable th9) {
                                    th3 = th9;
                                    th = th3;
                                    sQLiteCursor3 = null;
                                    if (sQLiteCursor3 == null) {
                                    }
                                }
                            }
                            if (arrayList10.isEmpty()) {
                                i6 = i5;
                                longSparseArray2 = longSparseArray;
                            } else {
                                try {
                                    queryFinalized = getDatabase().queryFinalized(String.format(Locale.US, "SELECT data, name FROM chats WHERE uid IN(%s)", TextUtils.join(",", arrayList10)), new Object[0]);
                                    while (queryFinalized.next()) {
                                        String stringValue2 = queryFinalized.stringValue(1);
                                        String translitString3 = LocaleController.getInstance().getTranslitString(stringValue2);
                                        if (stringValue2.equals(translitString3)) {
                                            translitString3 = null;
                                        }
                                        int i15 = i5;
                                        for (int i16 = 0; i16 < i15; i16++) {
                                            String str26 = strArr[i16];
                                            if (!stringValue2.startsWith(str26)) {
                                                if (!stringValue2.contains(" " + str26)) {
                                                    if (translitString3 != null) {
                                                        if (!translitString3.startsWith(str26)) {
                                                        }
                                                    }
                                                }
                                            }
                                            NativeByteBuffer byteBufferValue2 = queryFinalized.byteBufferValue(0);
                                            if (byteBufferValue2 == null) {
                                                break;
                                            }
                                            TLRPC.Chat TLdeserialize2 = TLRPC.Chat.TLdeserialize(byteBufferValue2, byteBufferValue2.readInt32(false), false);
                                            byteBufferValue2.reuse();
                                            if ((i != 15 || (arrayList4 != null && arrayList4.contains(Long.valueOf(-TLdeserialize2.id)))) && ((i != 6 || !ChatObject.isChannelAndNotMegaGroup(TLdeserialize2)) && (i != 5 || ChatObject.isChannelAndNotMegaGroup(TLdeserialize2)))) {
                                                if (TLdeserialize2 != null) {
                                                    if (!TLdeserialize2.deactivated) {
                                                        if (ChatObject.isChannel(TLdeserialize2)) {
                                                            if (!ChatObject.isNotInChat(TLdeserialize2)) {
                                                            }
                                                        }
                                                        longSparseArray3 = longSparseArray;
                                                        DialogsSearchAdapter.DialogSearchResult dialogSearchResult4 = (DialogsSearchAdapter.DialogSearchResult) longSparseArray3.get(-TLdeserialize2.id);
                                                        dialogSearchResult4.name = AndroidUtilities.generateSearchName(TLdeserialize2.title, null, str26);
                                                        dialogSearchResult4.object = TLdeserialize2;
                                                        i4++;
                                                        longSparseArray = longSparseArray3;
                                                        i5 = i15;
                                                    }
                                                }
                                            }
                                        }
                                        longSparseArray3 = longSparseArray;
                                        longSparseArray = longSparseArray3;
                                        i5 = i15;
                                    }
                                    i6 = i5;
                                    longSparseArray2 = longSparseArray;
                                    queryFinalized.dispose();
                                } catch (Exception e7) {
                                    e = e7;
                                    exc = e;
                                    sQLiteCursor3 = null;
                                    checkSQLException(exc);
                                    if (sQLiteCursor3 == null) {
                                    }
                                } catch (Throwable th10) {
                                    th3 = th10;
                                    th = th3;
                                    sQLiteCursor3 = null;
                                    if (sQLiteCursor3 == null) {
                                    }
                                }
                            }
                            if (!arrayList5.isEmpty() || i == 15) {
                                str6 = " ";
                                str7 = str5;
                            } else {
                                try {
                                    SQLiteCursor queryFinalized3 = getDatabase().queryFinalized(String.format(Locale.US, "SELECT q.data, u.name, q.user, q.g, q.authkey, q.ttl, u.data, u.status, q.layer, q.seq_in, q.seq_out, q.use_count, q.exchange_id, q.key_date, q.fprint, q.fauthkey, q.khash, q.in_seq_no, q.admin_id, q.mtproto_seq FROM enc_chats as q INNER JOIN users as u ON q.user = u.uid WHERE q.uid IN(%s)", TextUtils.join(",", arrayList5)), new Object[0]);
                                    while (queryFinalized3.next()) {
                                        try {
                                            String stringValue3 = queryFinalized3.stringValue(1);
                                            String translitString4 = LocaleController.getInstance().getTranslitString(stringValue3);
                                            if (stringValue3.equals(translitString4)) {
                                                str10 = str5;
                                                str9 = null;
                                            } else {
                                                str9 = translitString4;
                                                str10 = str5;
                                            }
                                            int lastIndexOf2 = stringValue3.lastIndexOf(str10);
                                            String substring2 = lastIndexOf2 != -1 ? stringValue3.substring(lastIndexOf2 + 2) : null;
                                            char c = 0;
                                            int i17 = 0;
                                            while (true) {
                                                if (i17 >= i6) {
                                                    break;
                                                }
                                                String str27 = strArr[i17];
                                                if (!stringValue3.startsWith(str27)) {
                                                    if (!stringValue3.contains(str24 + str27)) {
                                                        if (str9 != null) {
                                                            if (!str9.startsWith(str27)) {
                                                                if (str9.contains(str24 + str27)) {
                                                                }
                                                            }
                                                        }
                                                        if (substring2 != null && substring2.startsWith(str27)) {
                                                            c = 2;
                                                        }
                                                        if (c == 0) {
                                                            NativeByteBuffer byteBufferValue3 = queryFinalized3.byteBufferValue(0);
                                                            if (byteBufferValue3 != null) {
                                                                TLRPC.EncryptedChat TLdeserialize3 = TLRPC.EncryptedChat.TLdeserialize(byteBufferValue3, byteBufferValue3.readInt32(false), false);
                                                                byteBufferValue3.reuse();
                                                                encryptedChat = TLdeserialize3;
                                                                i9 = 6;
                                                            } else {
                                                                i9 = 6;
                                                                encryptedChat = null;
                                                            }
                                                            NativeByteBuffer byteBufferValue4 = queryFinalized3.byteBufferValue(i9);
                                                            if (byteBufferValue4 != null) {
                                                                user = TLRPC.User.TLdeserialize(byteBufferValue4, byteBufferValue4.readInt32(false), false);
                                                                byteBufferValue4.reuse();
                                                            } else {
                                                                user = null;
                                                            }
                                                            if (encryptedChat != null && user != null) {
                                                                DialogsSearchAdapter.DialogSearchResult dialogSearchResult5 = (DialogsSearchAdapter.DialogSearchResult) longSparseArray2.get(DialogObject.makeEncryptedDialogId(encryptedChat.id));
                                                                str11 = str24;
                                                                encryptedChat.user_id = queryFinalized3.longValue(2);
                                                                encryptedChat.a_or_b = queryFinalized3.byteArrayValue(3);
                                                                encryptedChat.auth_key = queryFinalized3.byteArrayValue(4);
                                                                encryptedChat.ttl = queryFinalized3.intValue(5);
                                                                encryptedChat.layer = queryFinalized3.intValue(8);
                                                                encryptedChat.seq_in = queryFinalized3.intValue(9);
                                                                encryptedChat.seq_out = queryFinalized3.intValue(10);
                                                                int intValue = queryFinalized3.intValue(11);
                                                                encryptedChat.key_use_count_in = (short) (intValue >> 16);
                                                                encryptedChat.key_use_count_out = (short) intValue;
                                                                encryptedChat.exchange_id = queryFinalized3.longValue(12);
                                                                encryptedChat.key_create_date = queryFinalized3.intValue(13);
                                                                encryptedChat.future_key_fingerprint = queryFinalized3.longValue(14);
                                                                encryptedChat.future_auth_key = queryFinalized3.byteArrayValue(15);
                                                                encryptedChat.key_hash = queryFinalized3.byteArrayValue(16);
                                                                encryptedChat.in_seq_no = queryFinalized3.intValue(17);
                                                                long longValue2 = queryFinalized3.longValue(18);
                                                                if (longValue2 != 0) {
                                                                    encryptedChat.admin_id = longValue2;
                                                                }
                                                                encryptedChat.mtproto_seq = queryFinalized3.intValue(19);
                                                                TLRPC.UserStatus userStatus2 = user.status;
                                                                if (userStatus2 != null) {
                                                                    userStatus2.expires = queryFinalized3.intValue(7);
                                                                }
                                                                if (c == 1) {
                                                                    SpannableStringBuilder spannableStringBuilder = new SpannableStringBuilder(ContactsController.formatName(user.first_name, user.last_name));
                                                                    dialogSearchResult5.name = spannableStringBuilder;
                                                                    spannableStringBuilder.setSpan(new ForegroundColorSpan(Theme.getColor(Theme.key_chats_secretName)), 0, dialogSearchResult5.name.length(), 33);
                                                                } else {
                                                                    dialogSearchResult5.name = AndroidUtilities.generateSearchName("@" + UserObject.getPublicUsername(user), null, "@" + str27);
                                                                }
                                                                dialogSearchResult5.object = encryptedChat;
                                                                arrayList3.add(user);
                                                                i4++;
                                                            }
                                                        } else {
                                                            i17++;
                                                            str24 = str24;
                                                        }
                                                    }
                                                }
                                                c = 1;
                                                if (c == 0) {
                                                }
                                            }
                                            str11 = str24;
                                            str5 = str10;
                                            str24 = str11;
                                        } catch (Exception e8) {
                                            sQLiteCursor3 = queryFinalized3;
                                            exc = e8;
                                            checkSQLException(exc);
                                            if (sQLiteCursor3 == null) {
                                            }
                                        } catch (Throwable th11) {
                                            sQLiteCursor3 = queryFinalized3;
                                            th = th11;
                                            if (sQLiteCursor3 == null) {
                                            }
                                        }
                                    }
                                    str6 = str24;
                                    str7 = str5;
                                    queryFinalized3.dispose();
                                } catch (Exception e9) {
                                    e = e9;
                                    exc = e;
                                    sQLiteCursor3 = null;
                                    checkSQLException(exc);
                                    if (sQLiteCursor3 == null) {
                                    }
                                } catch (Throwable th12) {
                                    th3 = th12;
                                    th = th3;
                                    sQLiteCursor3 = null;
                                    if (sQLiteCursor3 == null) {
                                    }
                                }
                            }
                            arrayList6 = new ArrayList(i4);
                            for (i7 = 0; i7 < longSparseArray2.size(); i7++) {
                                try {
                                    DialogsSearchAdapter.DialogSearchResult dialogSearchResult6 = (DialogsSearchAdapter.DialogSearchResult) longSparseArray2.valueAt(i7);
                                    if (dialogSearchResult6.object != null && dialogSearchResult6.name != null) {
                                        arrayList6.add(dialogSearchResult6);
                                    }
                                } catch (Throwable th13) {
                                    th2 = th13;
                                    sQLiteCursor3 = null;
                                    th = th2;
                                    if (sQLiteCursor3 == null) {
                                    }
                                }
                            }
                            Collections.sort(arrayList6, new Comparator() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda48
                                @Override // java.util.Comparator
                                public final int compare(Object obj, Object obj2) {
                                    int lambda$localSearch$240;
                                    lambda$localSearch$240 = MessagesStorage.lambda$localSearch$240((DialogsSearchAdapter.DialogSearchResult) obj, (DialogsSearchAdapter.DialogSearchResult) obj2);
                                    return lambda$localSearch$240;
                                }
                            });
                            for (i8 = 0; i8 < arrayList6.size(); i8++) {
                                DialogsSearchAdapter.DialogSearchResult dialogSearchResult7 = (DialogsSearchAdapter.DialogSearchResult) arrayList6.get(i8);
                                arrayList.add(dialogSearchResult7.object);
                                arrayList2.add(dialogSearchResult7.name);
                            }
                            if (i != 2 && i != 15 && i != 6 && i != 5) {
                                queryFinalized = getDatabase().queryFinalized("SELECT u.data, u.status, u.name, u.uid FROM users as u INNER JOIN contacts as c ON u.uid = c.uid", new Object[0]);
                                while (queryFinalized.next()) {
                                    try {
                                        if (longSparseArray2.indexOfKey(queryFinalized.longValue(3)) < 0) {
                                            String stringValue4 = queryFinalized.stringValue(2);
                                            String translitString5 = LocaleController.getInstance().getTranslitString(stringValue4);
                                            if (stringValue4.equals(translitString5)) {
                                                translitString5 = null;
                                            }
                                            int lastIndexOf3 = stringValue4.lastIndexOf(str7);
                                            String substring3 = lastIndexOf3 != -1 ? stringValue4.substring(lastIndexOf3 + 3) : null;
                                            char c2 = 0;
                                            int i18 = 0;
                                            while (true) {
                                                if (i18 < i6) {
                                                    String str28 = strArr[i18];
                                                    if (stringValue4.startsWith(str28)) {
                                                        str8 = str6;
                                                    } else {
                                                        StringBuilder sb = new StringBuilder();
                                                        str8 = str6;
                                                        sb.append(str8);
                                                        sb.append(str28);
                                                        if (!stringValue4.contains(sb.toString())) {
                                                            if (translitString5 != null) {
                                                                if (!translitString5.startsWith(str28)) {
                                                                    if (translitString5.contains(str8 + str28)) {
                                                                    }
                                                                }
                                                            }
                                                            if (substring3 != null && substring3.startsWith(str28)) {
                                                                c2 = 2;
                                                            }
                                                            if (c2 == 0) {
                                                                NativeByteBuffer byteBufferValue5 = queryFinalized.byteBufferValue(0);
                                                                if (byteBufferValue5 != null) {
                                                                    TLRPC.User TLdeserialize4 = TLRPC.User.TLdeserialize(byteBufferValue5, byteBufferValue5.readInt32(false), false);
                                                                    byteBufferValue5.reuse();
                                                                    TLRPC.UserStatus userStatus3 = TLdeserialize4.status;
                                                                    if (userStatus3 != null) {
                                                                        userStatus3.expires = queryFinalized.intValue(1);
                                                                    }
                                                                    arrayList2.add(c2 == 1 ? AndroidUtilities.generateSearchName(TLdeserialize4.first_name, TLdeserialize4.last_name, str28) : AndroidUtilities.generateSearchName("@" + UserObject.getPublicUsername(TLdeserialize4), null, "@" + str28));
                                                                    arrayList.add(TLdeserialize4);
                                                                }
                                                                str6 = str8;
                                                            } else {
                                                                i18++;
                                                                str6 = str8;
                                                            }
                                                        }
                                                    }
                                                    c2 = 1;
                                                    if (c2 == 0) {
                                                    }
                                                }
                                            }
                                        }
                                    } catch (Throwable th14) {
                                        th2 = th14;
                                        sQLiteCursor3 = queryFinalized;
                                        th = th2;
                                        if (sQLiteCursor3 == null) {
                                        }
                                    }
                                }
                                queryFinalized.dispose();
                            }
                        }
                        TLRPC.User currentUser = UserConfig.getInstance(this.currentAccount).getCurrentUser();
                        DialogsSearchAdapter.DialogSearchResult dialogSearchResult8 = new DialogsSearchAdapter.DialogSearchResult();
                        dialogSearchResult8.date = ConnectionsManager.DEFAULT_DATACENTER_ID;
                        dialogSearchResult8.name = lowerCase2;
                        dialogSearchResult8.object = currentUser;
                        longSparseArray5.put(currentUser.id, dialogSearchResult8);
                        i4 = 1;
                        if (i != 4) {
                            user2 = getMessagesController().getUser((Long) 708513L);
                            if (user2 == null) {
                            }
                            if (user2 != null) {
                            }
                            String str232 = ";;;";
                            String str242 = " ";
                            if (arrayList9.isEmpty()) {
                            }
                            if (arrayList10.isEmpty()) {
                            }
                            if (arrayList5.isEmpty()) {
                            }
                            str6 = " ";
                            str7 = str5;
                            arrayList6 = new ArrayList(i4);
                            while (i7 < longSparseArray2.size()) {
                            }
                            Collections.sort(arrayList6, new Comparator() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda48
                                @Override // java.util.Comparator
                                public final int compare(Object obj, Object obj2) {
                                    int lambda$localSearch$240;
                                    lambda$localSearch$240 = MessagesStorage.lambda$localSearch$240((DialogsSearchAdapter.DialogSearchResult) obj, (DialogsSearchAdapter.DialogSearchResult) obj2);
                                    return lambda$localSearch$240;
                                }
                            });
                            while (i8 < arrayList6.size()) {
                            }
                            if (i != 2) {
                                queryFinalized = getDatabase().queryFinalized("SELECT u.data, u.status, u.name, u.uid FROM users as u INNER JOIN contacts as c ON u.uid = c.uid", new Object[0]);
                                while (queryFinalized.next()) {
                                }
                                queryFinalized.dispose();
                            }
                        }
                        user2 = getMessagesController().getUser((Long) 708513L);
                        if (user2 == null) {
                        }
                        if (user2 != null) {
                        }
                        String str2322 = ";;;";
                        String str2422 = " ";
                        if (arrayList9.isEmpty()) {
                        }
                        if (arrayList10.isEmpty()) {
                        }
                        if (arrayList5.isEmpty()) {
                        }
                        str6 = " ";
                        str7 = str5;
                        arrayList6 = new ArrayList(i4);
                        while (i7 < longSparseArray2.size()) {
                        }
                        Collections.sort(arrayList6, new Comparator() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda48
                            @Override // java.util.Comparator
                            public final int compare(Object obj, Object obj2) {
                                int lambda$localSearch$240;
                                lambda$localSearch$240 = MessagesStorage.lambda$localSearch$240((DialogsSearchAdapter.DialogSearchResult) obj, (DialogsSearchAdapter.DialogSearchResult) obj2);
                                return lambda$localSearch$240;
                            }
                        });
                        while (i8 < arrayList6.size()) {
                        }
                        if (i != 2) {
                        }
                    } catch (Throwable th15) {
                        sQLiteCursor = null;
                        th = th15;
                        sQLiteCursor3 = sQLiteCursor;
                        if (sQLiteCursor3 == null) {
                        }
                    }
                } catch (Exception e10) {
                    sQLiteCursor2 = null;
                    exc = e10;
                    sQLiteCursor3 = sQLiteCursor2;
                    checkSQLException(exc);
                    if (sQLiteCursor3 == null) {
                    }
                }
            } catch (Exception e11) {
                sQLiteCursor2 = null;
                exc = e11;
            }
        } catch (Throwable th16) {
            sQLiteCursor = null;
            th = th16;
        }
    }

    public void markMentionMessageAsRead(final long j, final int i, final long j2) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda66
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$markMentionMessageAsRead$106(i, j, j2);
            }
        });
    }

    public void markMessageAsMention(final long j, final int i) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda144
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$markMessageAsMention$107(i, j);
            }
        });
    }

    public void markMessageAsSendError(final TLRPC.Message message, final int i) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda162
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$markMessageAsSendError$193(i, message);
            }
        });
    }

    public void markMessageReactionsAsRead(final long j, final long j2, final int i, boolean z) {
        if (z) {
            getStorageQueue().postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda91
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesStorage.this.lambda$markMessageReactionsAsRead$242(j, j2, i);
                }
            });
        } else {
            lambda$markMessageReactionsAsRead$242(j, j2, i);
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:45:0x0198  */
    /* JADX WARN: Removed duplicated region for block: B:47:0x019d  */
    /* JADX WARN: Removed duplicated region for block: B:60:0x018c  */
    /* JADX WARN: Removed duplicated region for block: B:62:0x0191  */
    /* JADX WARN: Removed duplicated region for block: B:64:? A[RETURN, SYNTHETIC] */
    /* renamed from: markMessageReactionsAsReadInternal, reason: merged with bridge method [inline-methods] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void lambda$markMessageReactionsAsRead$242(long j, long j2, int i) {
        SQLitePreparedStatement sQLitePreparedStatement;
        SQLiteDatabase sQLiteDatabase;
        Locale locale;
        Long valueOf;
        Integer valueOf2;
        SQLiteCursor queryFinalized;
        SQLiteCursor sQLiteCursor;
        TLRPC.Message message;
        SQLiteDatabase database;
        String format;
        NativeByteBuffer byteBufferValue;
        int i2 = 1;
        int i3 = 0;
        SQLitePreparedStatement sQLitePreparedStatement2 = null;
        while (i3 < 2) {
            boolean z = i3 == i2;
            if (!z || j2 != 0) {
                if (z) {
                    SQLitePreparedStatement executeFast = getMessagesStorage().getDatabase().executeFast("UPDATE reaction_mentions_topics SET state = 0 WHERE message_id = ? AND dialog_id = ? AND topic_id = ? ");
                    executeFast.bindInteger(i2, i);
                    executeFast.bindLong(2, j);
                    executeFast.bindLong(3, j2);
                    executeFast.step();
                    executeFast.dispose();
                    queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT data FROM messages_topics WHERE uid = %d AND mid = %d", Long.valueOf(j), Integer.valueOf(i)), new Object[0]);
                } else {
                    try {
                        sQLitePreparedStatement2 = getMessagesStorage().getDatabase().executeFast("UPDATE reaction_mentions SET state = 0 WHERE message_id = ? AND dialog_id = ?");
                        sQLitePreparedStatement2.bindInteger(i2, i);
                        sQLitePreparedStatement2.bindLong(2, j);
                        sQLitePreparedStatement2.step();
                        sQLitePreparedStatement2.dispose();
                    } catch (SQLiteException e) {
                        e = e;
                    } catch (Throwable th) {
                        th = th;
                    }
                    try {
                        sQLiteDatabase = this.database;
                        locale = Locale.US;
                        valueOf = Long.valueOf(j);
                        valueOf2 = Integer.valueOf(i);
                    } catch (SQLiteException e2) {
                        e = e2;
                        sQLitePreparedStatement2 = null;
                        sQLitePreparedStatement = sQLitePreparedStatement2;
                        sQLiteCursor = null;
                        try {
                            checkSQLException(e);
                            if (sQLitePreparedStatement != null) {
                            }
                            if (sQLiteCursor == null) {
                            }
                        } catch (Throwable th2) {
                            th = th2;
                            if (sQLitePreparedStatement != null) {
                            }
                            if (sQLiteCursor != null) {
                            }
                            throw th;
                        }
                    } catch (Throwable th3) {
                        th = th3;
                        sQLitePreparedStatement2 = null;
                        sQLitePreparedStatement = sQLitePreparedStatement2;
                        sQLiteCursor = null;
                        if (sQLitePreparedStatement != null) {
                        }
                        if (sQLiteCursor != null) {
                        }
                        throw th;
                    }
                    try {
                        Object[] objArr = new Object[2];
                        objArr[0] = valueOf;
                        objArr[i2] = valueOf2;
                        queryFinalized = sQLiteDatabase.queryFinalized(String.format(locale, "SELECT data FROM messages_v2 WHERE uid = %d AND mid = %d", objArr), new Object[0]);
                    } catch (SQLiteException e3) {
                        e = e3;
                        sQLitePreparedStatement = null;
                        sQLiteCursor = null;
                        checkSQLException(e);
                        if (sQLitePreparedStatement != null) {
                        }
                        if (sQLiteCursor == null) {
                        }
                    } catch (Throwable th4) {
                        th = th4;
                        sQLitePreparedStatement = null;
                        sQLiteCursor = null;
                        if (sQLitePreparedStatement != null) {
                        }
                        if (sQLiteCursor != null) {
                        }
                        throw th;
                    }
                }
                try {
                    if (!queryFinalized.next() || (byteBufferValue = queryFinalized.byteBufferValue(0)) == null) {
                        message = null;
                    } else {
                        message = TLRPC.Message.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                        message.readAttachPath(byteBufferValue, getUserConfig().clientUserId);
                        byteBufferValue.reuse();
                        TLRPC.TL_messageReactions tL_messageReactions = message.reactions;
                        if (tL_messageReactions != null && tL_messageReactions.recent_reactions != null) {
                            for (int i4 = 0; i4 < message.reactions.recent_reactions.size(); i4++) {
                                message.reactions.recent_reactions.get(i4).unread = false;
                            }
                        }
                    }
                    queryFinalized.dispose();
                    if (message != null) {
                        if (z) {
                            database = getMessagesStorage().getDatabase();
                            format = String.format(Locale.US, "UPDATE messages_topics SET data = ? WHERE uid = %d AND mid = %d", Long.valueOf(j), Integer.valueOf(i));
                        } else {
                            try {
                                database = getMessagesStorage().getDatabase();
                                format = String.format(Locale.US, "UPDATE messages_v2 SET data = ? WHERE uid = %d AND mid = %d", Long.valueOf(j), Integer.valueOf(i));
                            } catch (SQLiteException e4) {
                                e = e4;
                                queryFinalized = null;
                                sQLiteCursor = queryFinalized;
                                sQLitePreparedStatement = null;
                                checkSQLException(e);
                                if (sQLitePreparedStatement != null) {
                                }
                                if (sQLiteCursor == null) {
                                }
                            } catch (Throwable th5) {
                                th = th5;
                                queryFinalized = null;
                                sQLiteCursor = queryFinalized;
                                sQLitePreparedStatement = null;
                                if (sQLitePreparedStatement != null) {
                                }
                                if (sQLiteCursor != null) {
                                }
                                throw th;
                            }
                        }
                        SQLitePreparedStatement executeFast2 = database.executeFast(format);
                        try {
                            try {
                                MessageObject.normalizeFlags(message);
                                NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(message.getObjectSize());
                                message.serializeToStream(nativeByteBuffer);
                                executeFast2.bindByteBuffer(1, nativeByteBuffer);
                                executeFast2.step();
                                executeFast2.dispose();
                                nativeByteBuffer.reuse();
                            } catch (Throwable th6) {
                                th = th6;
                                sQLitePreparedStatement = executeFast2;
                                sQLiteCursor = null;
                                if (sQLitePreparedStatement != null) {
                                    sQLitePreparedStatement.dispose();
                                }
                                if (sQLiteCursor != null) {
                                    sQLiteCursor.dispose();
                                }
                                throw th;
                            }
                        } catch (Exception e5) {
                            try {
                                FileLog.e(e5);
                            } catch (SQLiteException e6) {
                                e = e6;
                                sQLitePreparedStatement = executeFast2;
                                sQLiteCursor = null;
                                checkSQLException(e);
                                if (sQLitePreparedStatement != null) {
                                    sQLitePreparedStatement.dispose();
                                }
                                if (sQLiteCursor == null) {
                                    sQLiteCursor.dispose();
                                    return;
                                }
                                return;
                            }
                        }
                        sQLitePreparedStatement2 = executeFast2;
                        i2 = 1;
                    } else {
                        i2 = 1;
                        sQLitePreparedStatement2 = null;
                    }
                } catch (SQLiteException e7) {
                    e = e7;
                } catch (Throwable th7) {
                    th = th7;
                }
            }
            i3 += i2;
        }
        if (sQLitePreparedStatement2 != null) {
            sQLitePreparedStatement2.dispose();
        }
    }

    public ArrayList<Long> markMessagesAsDeleted(final long j, final int i, boolean z, final boolean z2) {
        if (!z) {
            return lambda$markMessagesAsDeleted$211(j, i, z2);
        }
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda96
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$markMessagesAsDeleted$211(j, i, z2);
            }
        });
        return null;
    }

    public ArrayList<Long> markMessagesAsDeleted(final long j, final ArrayList<Integer> arrayList, boolean z, final boolean z2, final int i, final int i2) {
        if (arrayList.isEmpty()) {
            return null;
        }
        if (!z) {
            return lambda$markMessagesAsDeleted$209(j, arrayList, z2, i, i2);
        }
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda133
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$markMessagesAsDeleted$209(j, arrayList, z2, i, i2);
            }
        });
        return null;
    }

    public void markMessagesAsDeletedByRandoms(final ArrayList<Long> arrayList) {
        if (arrayList.isEmpty()) {
            return;
        }
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda182
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$markMessagesAsDeletedByRandoms$201(arrayList);
            }
        });
    }

    public void markMessagesAsRead(final LongSparseIntArray longSparseIntArray, final LongSparseIntArray longSparseIntArray2, final SparseIntArray sparseIntArray, boolean z) {
        if (z) {
            this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda201
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesStorage.this.lambda$markMessagesAsRead$199(longSparseIntArray, longSparseIntArray2, sparseIntArray);
                }
            });
        } else {
            lambda$markMessagesAsRead$199(longSparseIntArray, longSparseIntArray2, sparseIntArray);
        }
    }

    public void markMessagesContentAsRead(final long j, final ArrayList<Integer> arrayList, final int i, final int i2) {
        if (isEmpty(arrayList)) {
            return;
        }
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda108
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$markMessagesContentAsRead$198(j, arrayList, i2, i);
            }
        });
    }

    public void onDeleteQueryComplete(final long j) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda224
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$onDeleteQueryComplete$86(j);
            }
        });
    }

    /* JADX WARN: Code restructure failed: missing block: B:53:0x0139, code lost:
    
        if (r2.length == 1) goto L39;
     */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void openDatabase(int i) {
        if (!NativeLoader.loaded()) {
            int i2 = 0;
            while (!NativeLoader.loaded()) {
                try {
                    Thread.sleep(1000L);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
                i2++;
                if (i2 > 5) {
                    break;
                }
            }
        }
        File filesDirFixed = ApplicationLoader.getFilesDirFixed();
        if (this.currentAccount != 0) {
            File file = new File(filesDirFixed, "account" + this.currentAccount + "/");
            file.mkdirs();
            filesDirFixed = file;
        }
        this.cacheFile = new File(filesDirFixed, "cache4.db");
        this.walCacheFile = new File(filesDirFixed, "cache4.db-wal");
        this.shmCacheFile = new File(filesDirFixed, "cache4.db-shm");
        this.databaseCreated = false;
        boolean z = !this.cacheFile.exists();
        try {
            SQLiteDatabase sQLiteDatabase = new SQLiteDatabase(this.cacheFile.getPath());
            this.database = sQLiteDatabase;
            sQLiteDatabase.executeFast("PRAGMA secure_delete = ON").stepThis().dispose();
            this.database.executeFast("PRAGMA temp_store = MEMORY").stepThis().dispose();
            this.database.executeFast("PRAGMA journal_mode = WAL").stepThis().dispose();
            this.database.executeFast("PRAGMA journal_size_limit = 10485760").stepThis().dispose();
            if (z) {
                if (BuildVars.LOGS_ENABLED) {
                    FileLog.d("create new database");
                }
                createTables(this.database);
            } else {
                int intValue = this.database.executeInt("PRAGMA user_version", new Object[0]).intValue();
                if (BuildVars.LOGS_ENABLED) {
                    FileLog.d("current db version = " + intValue);
                }
                if (intValue == 0) {
                    throw new Exception("malformed");
                }
                try {
                    SQLiteCursor queryFinalized = this.database.queryFinalized("SELECT seq, pts, date, qts, lsv, sg, pbytes FROM params WHERE id = 1", new Object[0]);
                    if (queryFinalized.next()) {
                        this.lastSeqValue = queryFinalized.intValue(0);
                        this.lastPtsValue = queryFinalized.intValue(1);
                        this.lastDateValue = queryFinalized.intValue(2);
                        this.lastQtsValue = queryFinalized.intValue(3);
                        this.lastSecretVersion = queryFinalized.intValue(4);
                        this.secretG = queryFinalized.intValue(5);
                        if (!queryFinalized.isNull(6)) {
                            byte[] byteArrayValue = queryFinalized.byteArrayValue(6);
                            this.secretPBytes = byteArrayValue;
                            if (byteArrayValue != null) {
                            }
                        }
                        this.secretPBytes = null;
                    }
                    queryFinalized.dispose();
                } catch (Exception e2) {
                    FileLog.e(e2);
                    if (e2.getMessage() != null && e2.getMessage().contains("malformed")) {
                        throw new RuntimeException("malformed");
                    }
                    try {
                        this.database.executeFast("CREATE TABLE IF NOT EXISTS params(id INTEGER PRIMARY KEY, seq INTEGER, pts INTEGER, date INTEGER, qts INTEGER, lsv INTEGER, sg INTEGER, pbytes BLOB)").stepThis().dispose();
                        this.database.executeFast("INSERT INTO params VALUES(1, 0, 0, 0, 0, 0, 0, NULL)").stepThis().dispose();
                    } catch (Exception e3) {
                        FileLog.e(e3);
                    }
                }
                if (intValue < 159) {
                    try {
                        updateDbToLastVersion(intValue);
                    } catch (Exception e4) {
                        if (BuildVars.DEBUG_PRIVATE_VERSION) {
                            throw e4;
                        }
                        FileLog.e(e4);
                        throw new RuntimeException("malformed");
                    }
                }
            }
            this.databaseCreated = true;
        } catch (Exception e5) {
            FileLog.e(e5);
            if (i < 3 && e5.getMessage() != null && e5.getMessage().contains("malformed")) {
                if (i == 2) {
                    cleanupInternal(true);
                    clearLoadingDialogsOffsets();
                } else {
                    cleanupInternal(false);
                }
                openDatabase(i == 1 ? 2 : 3);
                return;
            }
        }
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda172
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$openDatabase$1();
            }
        });
        loadDialogFilters();
        loadUnreadMessages();
        loadPendingTasks();
        try {
            this.openSync.countDown();
        } catch (Throwable unused) {
        }
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda173
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$openDatabase$2();
            }
        });
    }

    public void overwriteChannel(final long j, final TLRPC.TL_updates_channelDifferenceTooLong tL_updates_channelDifferenceTooLong, final int i, final Runnable runnable) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda205
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$overwriteChannel$183(j, i, tL_updates_channelDifferenceTooLong, runnable);
            }
        });
    }

    protected void processLoadedFilterPeers(final TLRPC.messages_Dialogs messages_dialogs, final TLRPC.messages_Dialogs messages_dialogs2, final ArrayList<TLRPC.User> arrayList, final ArrayList<TLRPC.Chat> arrayList2, final ArrayList<MessagesController.DialogFilter> arrayList3, final SparseArray<MessagesController.DialogFilter> sparseArray, final ArrayList<Integer> arrayList4, final HashMap<Integer, HashSet<Long>> hashMap, final HashSet<Integer> hashSet, final Runnable runnable) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda51
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$processLoadedFilterPeers$68(messages_dialogs, messages_dialogs2, arrayList, arrayList2, arrayList3, sparseArray, arrayList4, hashMap, hashSet, runnable);
            }
        });
    }

    public void processPendingRead(final long j, final int i, final int i2, final int i3) {
        final int i4 = this.lastSavedDate;
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda198
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$processPendingRead$139(j, i, i3, i4, i2);
            }
        });
    }

    public void putCachedPhoneBook(final HashMap<String, ContactsController.Contact> hashMap, final boolean z, boolean z2) {
        if (hashMap != null) {
            if (!hashMap.isEmpty() || z || z2) {
                this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda115
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesStorage.this.lambda$putCachedPhoneBook$143(hashMap, z);
                    }
                });
            }
        }
    }

    public void putChannelAdmins(final long j, final LongSparseArray longSparseArray) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda61
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$putChannelAdmins$118(j, longSparseArray);
            }
        });
    }

    public void putChannelViews(final LongSparseArray longSparseArray, final LongSparseArray longSparseArray2, final LongSparseArray longSparseArray3, final boolean z) {
        if (isEmpty(longSparseArray) && isEmpty(longSparseArray2) && isEmpty(longSparseArray3)) {
            return;
        }
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda92
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$putChannelViews$184(longSparseArray, longSparseArray2, longSparseArray3, z);
            }
        });
    }

    public void putContacts(ArrayList<TLRPC.TL_contact> arrayList, final boolean z) {
        if (!arrayList.isEmpty() || z) {
            final ArrayList arrayList2 = new ArrayList(arrayList);
            this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda53
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesStorage.this.lambda$putContacts$140(z, arrayList2);
                }
            });
        }
    }

    public void putDialogs(final TLRPC.messages_Dialogs messages_dialogs, final int i) {
        if (messages_dialogs.dialogs.isEmpty()) {
            return;
        }
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda55
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$putDialogs$233(messages_dialogs, i);
            }
        });
    }

    public void putEncryptedChat(final TLRPC.EncryptedChat encryptedChat, final TLRPC.User user, final TLRPC.Dialog dialog) {
        if (encryptedChat == null) {
            return;
        }
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda177
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$putEncryptedChat$171(encryptedChat, user, dialog);
            }
        });
    }

    public void putMessages(ArrayList<TLRPC.Message> arrayList, boolean z, boolean z2, boolean z3, int i, int i2, long j) {
        putMessages(arrayList, z, z2, z3, i, false, i2, j);
    }

    public void putMessages(final ArrayList<TLRPC.Message> arrayList, final boolean z, boolean z2, final boolean z3, final int i, final boolean z4, final int i2, final long j) {
        if (arrayList.size() == 0) {
            return;
        }
        if (z2) {
            this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda49
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesStorage.this.lambda$putMessages$192(arrayList, z, z3, i, z4, i2, j);
                }
            });
        } else {
            lambda$putMessages$192(arrayList, z, z3, i, z4, i2, j);
        }
    }

    public void putMessages(final TLRPC.messages_Messages messages_messages, final long j, final int i, final int i2, final boolean z, final int i3, final long j2) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda131
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$putMessages$218(i3, messages_messages, j, j2, i, i2, z);
            }
        });
    }

    public void putPushMessage(final MessageObject messageObject) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda118
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$putPushMessage$42(messageObject);
            }
        });
    }

    public void putSentFile(final String str, final TLObject tLObject, final int i, final String str2) {
        if (str == null || tLObject == null || str2 == null) {
            return;
        }
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda74
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$putSentFile$163(str, tLObject, i, str2);
            }
        });
    }

    public void putStoryPushMessage(final NotificationsController.StoryNotification storyNotification) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda226
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$putStoryPushMessage$38(storyNotification);
            }
        });
    }

    public void putUsersAndChats(final List<TLRPC.User> list, final List<TLRPC.Chat> list2, final boolean z, boolean z2) {
        if (list == null || !list.isEmpty() || list2 == null || !list2.isEmpty()) {
            if (z2) {
                this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda156
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesStorage.this.lambda$putUsersAndChats$174(list, list2, z);
                    }
                });
            } else {
                lambda$putUsersAndChats$174(list, list2, z);
            }
        }
    }

    public void putWallpapers(final ArrayList<TLRPC.WallPaper> arrayList, final int i) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda153
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$putWallpapers$75(i, arrayList);
            }
        });
    }

    public void putWebPages(final LongSparseArray longSparseArray) {
        if (isEmpty(longSparseArray)) {
            return;
        }
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda239
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$putWebPages$181(longSparseArray);
            }
        });
    }

    public void putWidgetDialogs(final int i, final ArrayList<TopicKey> arrayList) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda208
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$putWidgetDialogs$159(i, arrayList);
            }
        });
    }

    public void readAllDialogs(final int i) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda117
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$readAllDialogs$62(i);
            }
        });
    }

    public void removeFromDownloadQueue(final long j, final int i, final boolean z) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda150
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$removeFromDownloadQueue$175(z, i, j);
            }
        });
    }

    public void removePendingTask(final long j) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda225
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$removePendingTask$11(j);
            }
        });
    }

    public void removeTopic(final long j, final int i) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda35
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$removeTopic$54(j, i);
            }
        });
    }

    public void removeTopics(final long j, final ArrayList<Integer> arrayList) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda70
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$removeTopics$55(arrayList, j);
            }
        });
    }

    public void replaceMessageIfExists(final TLRPC.Message message, final ArrayList<TLRPC.User> arrayList, final ArrayList<TLRPC.Chat> arrayList2, final boolean z) {
        if (message == null) {
            return;
        }
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda114
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$replaceMessageIfExists$214(message, z, arrayList, arrayList2);
            }
        });
    }

    public void reset() {
        clearDatabaseValues();
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda237
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$reset$58();
            }
        });
    }

    public void resetAllUnreadCounters(boolean z) {
        int size = this.dialogFilters.size();
        for (int i = 0; i < size; i++) {
            MessagesController.DialogFilter dialogFilter = this.dialogFilters.get(i);
            if (!z || (dialogFilter.flags & MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED) != 0) {
                dialogFilter.pendingUnreadCount = -1;
            }
        }
        calcUnreadCounters(false);
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda233
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$resetAllUnreadCounters$230();
            }
        });
    }

    public void resetDialogs(final TLRPC.messages_Dialogs messages_dialogs, final int i, final int i2, final int i3, final int i4, final int i5, final LongSparseArray longSparseArray, final LongSparseArray longSparseArray2, final TLRPC.Message message, final int i6) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda73
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$resetDialogs$90(messages_dialogs, i6, i2, i3, i4, i5, message, i, longSparseArray, longSparseArray2);
            }
        });
    }

    public void resetMentionsCount(final long j, final long j2, final int i) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda77
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$resetMentionsCount$108(j2, j, i);
            }
        });
    }

    public void saveBotCache(final String str, final TLObject tLObject) {
        if (tLObject == null || TextUtils.isEmpty(str)) {
            return;
        }
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda84
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$saveBotCache$120(tLObject, str);
            }
        });
    }

    public void saveChannelPts(final long j, final int i) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda127
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$saveChannelPts$34(i, j);
            }
        });
    }

    public void saveChatInviter(final long j, final long j2) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda105
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$saveChatInviter$126(j2, j);
            }
        });
    }

    public void saveChatLinksCount(final long j, final int i) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda4
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$saveChatLinksCount$127(i, j);
            }
        });
    }

    public void saveDialogFilter(final MessagesController.DialogFilter dialogFilter, final boolean z, final boolean z2) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda159
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$saveDialogFilter$71(dialogFilter, z, z2);
            }
        });
    }

    public void saveDialogFiltersOrder() {
        final ArrayList arrayList = new ArrayList(getMessagesController().dialogFilters);
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda43
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$saveDialogFiltersOrder$72(arrayList);
            }
        });
    }

    public void saveDialogFiltersOrderInternal() {
        SQLitePreparedStatement sQLitePreparedStatement = null;
        try {
            try {
                sQLitePreparedStatement = this.database.executeFast("UPDATE dialog_filter SET ord = ?, flags = ? WHERE id = ?");
                int size = this.dialogFilters.size();
                for (int i = 0; i < size; i++) {
                    MessagesController.DialogFilter dialogFilter = this.dialogFilters.get(i);
                    sQLitePreparedStatement.requery();
                    sQLitePreparedStatement.bindInteger(1, dialogFilter.order);
                    sQLitePreparedStatement.bindInteger(2, dialogFilter.flags);
                    sQLitePreparedStatement.bindInteger(3, dialogFilter.id);
                    sQLitePreparedStatement.step();
                }
                sQLitePreparedStatement.dispose();
            } catch (Exception e) {
                checkSQLException(e);
                if (sQLitePreparedStatement != null) {
                    sQLitePreparedStatement.dispose();
                }
            }
        } catch (Throwable th) {
            if (sQLitePreparedStatement != null) {
                sQLitePreparedStatement.dispose();
            }
            throw th;
        }
    }

    public void saveDiffParams(final int i, final int i2, final int i3, final int i4) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda107
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$saveDiffParams$35(i, i2, i3, i4);
            }
        });
    }

    public void saveSecretParams(final int i, final int i2, final byte[] bArr) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda135
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$saveSecretParams$7(i, i2, bArr);
            }
        });
    }

    public void saveTopics(final long j, final List<TLRPC.TL_forumTopic> list, final boolean z, boolean z2, final int i) {
        if (z2) {
            this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda207
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesStorage.this.lambda$saveTopics$45(j, list, z, i);
                }
            });
        } else {
            saveTopicsInternal(j, list, z, false, i);
        }
    }

    public void searchSavedByTag(final TLRPC.Reaction reaction, final long j, final String str, final int i, final int i2, final Utilities.Callback4<ArrayList<MessageObject>, ArrayList<TLRPC.User>, ArrayList<TLRPC.Chat>, ArrayList<TLRPC.Document>> callback4, final boolean z) {
        if (callback4 == null) {
            return;
        }
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda93
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$searchSavedByTag$97(str, j, reaction, i, i2, z, callback4);
            }
        });
    }

    public void setDialogFlags(final long j, final long j2) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda154
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$setDialogFlags$37(j, j2);
            }
        });
    }

    public void setDialogPinned(final long j, final int i) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda192
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$setDialogPinned$231(i, j);
            }
        });
    }

    public void setDialogTtl(final long j, final int i) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda228
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$setDialogTtl$57(i, j);
            }
        });
    }

    public void setDialogUnread(final long j, final boolean z) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda220
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$setDialogUnread$228(j, z);
            }
        });
    }

    public void setDialogViewThreadAsMessages(final long j, final boolean z) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda38
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$setDialogViewThreadAsMessages$229(j, z);
            }
        });
    }

    public void setDialogsFolderId(final ArrayList<TLRPC.TL_folderPeer> arrayList, final ArrayList<TLRPC.TL_inputFolderPeer> arrayList2, final long j, final int i) {
        if (arrayList == null && arrayList2 == null && j == 0) {
            return;
        }
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda50
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$setDialogsFolderId$224(arrayList, arrayList2, i, j);
            }
        });
    }

    public void setDialogsPinned(final ArrayList<Long> arrayList, final ArrayList<Integer> arrayList2) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda197
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$setDialogsPinned$232(arrayList, arrayList2);
            }
        });
    }

    public void setLastDateValue(int i) {
        ensureOpened();
        this.lastDateValue = i;
    }

    public void setLastPtsValue(int i) {
        ensureOpened();
        this.lastPtsValue = i;
    }

    public void setLastQtsValue(int i) {
        ensureOpened();
        this.lastQtsValue = i;
    }

    public void setLastSecretVersion(int i) {
        ensureOpened();
        this.lastSecretVersion = i;
    }

    public void setLastSeqValue(int i) {
        ensureOpened();
        this.lastSeqValue = i;
    }

    public void setMessageSeq(final int i, final int i2, final int i3) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda57
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$setMessageSeq$194(i, i2, i3);
            }
        });
    }

    public void setSecretG(int i) {
        ensureOpened();
        this.secretG = i;
    }

    public void setSecretPBytes(byte[] bArr) {
        ensureOpened();
        this.secretPBytes = bArr;
    }

    public void unpinAllDialogsExceptNew(final ArrayList<Long> arrayList, final int i) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda163
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$unpinAllDialogsExceptNew$227(arrayList, i);
            }
        });
    }

    public void updateChannelUsers(final long j, final ArrayList<TLRPC.ChannelParticipant> arrayList) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda100
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$updateChannelUsers$119(j, arrayList);
            }
        });
    }

    public void updateChatDefaultBannedRights(final long j, final TLRPC.TL_chatBannedRights tL_chatBannedRights, final int i) {
        if (tL_chatBannedRights == null || j == 0) {
            return;
        }
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda46
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$updateChatDefaultBannedRights$173(j, i, tL_chatBannedRights);
            }
        });
    }

    public void updateChatInfo(final long j, final long j2, final int i, final long j3, final int i2) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda240
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$updateChatInfo$134(j, i, j2, j3, i2);
            }
        });
    }

    public void updateChatInfo(final TLRPC.ChatFull chatFull, final boolean z) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda215
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$updateChatInfo$128(chatFull, z);
            }
        });
    }

    public void updateChatOnlineCount(final long j, final int i) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda44
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$updateChatOnlineCount$129(i, j);
            }
        });
    }

    public void updateChatParticipants(final TLRPC.ChatParticipants chatParticipants) {
        if (chatParticipants == null) {
            return;
        }
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda186
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$updateChatParticipants$116(chatParticipants);
            }
        });
    }

    public void updateDialogData(final TLRPC.Dialog dialog) {
        if (dialog == null) {
            return;
        }
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda3
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$updateDialogData$221(dialog);
            }
        });
    }

    public void updateDialogUnreadReactions(final long j, final long j2, final int i, final boolean z) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda217
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$updateDialogUnreadReactions$243(z, j, i, j2);
            }
        });
    }

    public void updateDialogsWithDeletedMessages(final long j, final long j2, final ArrayList<Integer> arrayList, final ArrayList<Long> arrayList2, boolean z) {
        if (z) {
            this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda68
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesStorage.this.lambda$updateDialogsWithDeletedMessages$208(j, j2, arrayList, arrayList2);
                }
            });
        } else {
            lambda$updateDialogsWithDeletedMessages$208(j, j2, arrayList, arrayList2);
        }
    }

    public void updateDialogsWithReadMessages(final LongSparseIntArray longSparseIntArray, final LongSparseIntArray longSparseIntArray2, final LongSparseArray longSparseArray, final LongSparseIntArray longSparseIntArray3, boolean z) {
        if (isEmpty(longSparseIntArray) && isEmpty(longSparseIntArray2) && isEmpty(longSparseArray) && isEmpty(longSparseIntArray3)) {
            return;
        }
        if (z) {
            this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda167
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesStorage.this.lambda$updateDialogsWithReadMessages$114(longSparseIntArray, longSparseIntArray2, longSparseArray, longSparseIntArray3);
                }
            });
        } else {
            updateDialogsWithReadMessagesInternal(null, longSparseIntArray, longSparseIntArray2, longSparseArray, longSparseIntArray3);
        }
    }

    public void updateEncryptedChat(final TLRPC.EncryptedChat encryptedChat) {
        if (encryptedChat == null) {
            return;
        }
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda148
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$updateEncryptedChat$167(encryptedChat);
            }
        });
    }

    public void updateEncryptedChatLayer(final TLRPC.EncryptedChat encryptedChat) {
        if (encryptedChat == null) {
            return;
        }
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda175
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$updateEncryptedChatLayer$166(encryptedChat);
            }
        });
    }

    public void updateEncryptedChatSeq(final TLRPC.EncryptedChat encryptedChat, final boolean z) {
        if (encryptedChat == null) {
            return;
        }
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda125
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$updateEncryptedChatSeq$164(encryptedChat, z);
            }
        });
    }

    public void updateEncryptedChatTTL(final TLRPC.EncryptedChat encryptedChat) {
        if (encryptedChat == null) {
            return;
        }
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda8
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$updateEncryptedChatTTL$165(encryptedChat);
            }
        });
    }

    public void updateMessageCustomParams(final long j, final TLRPC.Message message) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda87
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$updateMessageCustomParams$104(message, j);
            }
        });
    }

    public void updateMessagePollResults(final long j, final TLRPC.Poll poll, final TLRPC.PollResults pollResults) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda94
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$updateMessagePollResults$95(j, poll, pollResults);
            }
        });
    }

    public void updateMessageReactions(final long j, final int i, final TLRPC.TL_messageReactions tL_messageReactions) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda128
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$updateMessageReactions$98(i, j, tL_messageReactions);
            }
        });
    }

    public long[] updateMessageStateAndId(final long j, final long j2, final Integer num, final int i, final int i2, boolean z, final int i3, final int i4) {
        if (!z) {
            return lambda$updateMessageStateAndId$196(j, j2, num, i, i2, i3, i4);
        }
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda126
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$updateMessageStateAndId$196(j, j2, num, i, i2, i3, i4);
            }
        });
        return null;
    }

    public void updateMessageVerifyFlags(final ArrayList<TLRPC.Message> arrayList) {
        Utilities.stageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda136
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$updateMessageVerifyFlags$188(arrayList);
            }
        });
    }

    public void updateMessageVoiceTranscription(final long j, final int i, final String str, final long j2, final boolean z) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda102
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$updateMessageVoiceTranscription$102(i, j, z, j2, str);
            }
        });
    }

    public void updateMessageVoiceTranscription(final long j, final int i, final String str, final TLRPC.Message message) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda218
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$updateMessageVoiceTranscription$103(i, j, message, str);
            }
        });
    }

    public void updateMessageVoiceTranscriptionOpen(final long j, final int i, final TLRPC.Message message) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda122
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$updateMessageVoiceTranscriptionOpen$101(i, j, message);
            }
        });
    }

    public void updateMutedDialogsFiltersCounters() {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda1
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$updateMutedDialogsFiltersCounters$36();
            }
        });
    }

    public void updatePinnedMessages(final long j, final ArrayList<Integer> arrayList, final boolean z, final int i, final int i2, final boolean z2, final HashMap<Integer, MessageObject> hashMap) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda104
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$updatePinnedMessages$132(z, hashMap, i2, j, arrayList, i, z2);
            }
        });
    }

    public void updateRepliesCount(final long j, final int i, final ArrayList<TLRPC.Peer> arrayList, final int i2, final int i3) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda242
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$updateRepliesCount$187(i, j, i3, arrayList, i2);
            }
        });
    }

    public void updateRepliesMaxReadId(final long j, final int i, final int i2, final int i3, boolean z) {
        if (z) {
            this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda178
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesStorage.this.lambda$updateRepliesMaxReadId$186(j, i, i2, i3);
                }
            });
        } else {
            lambda$updateRepliesMaxReadId$186(j, i, i2, i3);
        }
    }

    public void updateTopicData(long j, TLRPC.TL_forumTopic tL_forumTopic, int i) {
        updateTopicData(j, tL_forumTopic, i, getConnectionsManager().getCurrentTime());
    }

    public void updateTopicData(final long j, final TLRPC.TL_forumTopic tL_forumTopic, final int i, final int i2) {
        if (tL_forumTopic == null) {
            return;
        }
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda106
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$updateTopicData$47(i, tL_forumTopic, j, i2);
            }
        });
    }

    public void updateTopicsWithReadMessages(final HashMap<TopicKey, Integer> hashMap) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda89
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$updateTopicsWithReadMessages$56(hashMap);
            }
        });
    }

    public void updateUnreadReactionsCount(long j, long j2, int i) {
        updateUnreadReactionsCount(j, j2, i, false);
    }

    public void updateUnreadReactionsCount(final long j, final long j2, final int i, final boolean z) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda132
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$updateUnreadReactionsCount$241(j2, z, j, i);
            }
        });
    }

    public void updateUserInfo(final TLRPC.UserFull userFull, final boolean z) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda0
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$updateUserInfo$124(userFull, z);
            }
        });
    }

    public void updateUserInfoPremiumBlocked(final long j, final boolean z) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda238
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$updateUserInfoPremiumBlocked$125(j, z);
            }
        });
    }

    public void updateUsers(final ArrayList<TLRPC.User> arrayList, final boolean z, final boolean z2, boolean z3) {
        if (arrayList == null || arrayList.isEmpty()) {
            return;
        }
        if (z3) {
            this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda241
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesStorage.this.lambda$updateUsers$197(arrayList, z, z2);
                }
            });
        } else {
            lambda$updateUsers$197(arrayList, z, z2);
        }
    }
}
